sing2 * This,
            /* [in] */ DISPID dispid,
            /* [in] */ REFGUID rguidBuilder,
            /* [in] */ IDispatch *pdispApp,
            /* [in] */ HWND hwndBuilderOwner,
            /* [out][in] */ VARIANT *pvarValue);
        
        END_INTERFACE
    } IPerPropertyBrowsing2Vtbl;

    interface IPerPropertyBrowsing2
    {
        CONST_VTBL struct IPerPropertyBrowsing2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPerPropertyBrowsing2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IPerPropertyBrowsing2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IPerPropertyBrowsing2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IPerPropertyBrowsing2_MapPropertyToBuilder(This,dispid,pguidBuilder,pdwType)	\
    (This)->lpVtbl -> MapPropertyToBuilder(This,dispid,pguidBuilder,pdwType)

#define IPerPropertyBrowsing2_ExecuteBuilder(This,dispid,rguidBuilder,pdispApp,hwndBuilderOwner,pvarValue)	\
    (This)->lpVtbl -> ExecuteBuilder(This,dispid,rguidBuilder,pdispApp,hwndBuilderOwner,pvarValue)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IPerPropertyBrowsing2_MapPropertyToBuilder_Proxy( 
    IPerPropertyBrowsing2 * This,
    /* [in] */ DISPID dispid,
    /* [out] */ GUID *pguidBuilder,
    /* [out] */ DWORD *pdwType);


void __RPC_STUB IPerPropertyBrowsing2_MapPropertyToBuilder_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IPerPropertyBrowsing2_ExecuteBuilder_Proxy( 
    IPerPropertyBrowsing2 * This,
    /* [in] */ DISPID dispid,
    /* [in] */ REFGUID rguidBuilder,
    /* [in] */ IDispatch *pdispApp,
    /* [in] */ HWND hwndBuilderOwner,
    /* [out][in] */ VARIANT *pvarValue);


void __RPC_STUB IPerPropertyBrowsing2_ExecuteBuilder_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IPerPropertyBrowsing2_INTERFACE_DEFINED__ */


#ifndef __IPropertyPageUndoString_INTERFACE_DEFINED__
#define __IPropertyPageUndoString_INTERFACE_DEFINED__

/* interface IPropertyPageUndoString */
/* [object][unique][version][uuid] */ 


EXTERN_C const IID IID_IPropertyPageUndoString;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("33C0C1DB-33CF-11d3-BFF2-00C04F990235")
    IPropertyPageUndoString : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetUndoString( 
            /* [out] */ LPOLESTR *ppszUndo) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPropertyPageUndoStringVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPropertyPageUndoString * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPropertyPageUndoString * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPropertyPageUndoString * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetUndoString )( 
            IPropertyPageUndoString * This,
            /* [out] */ LPOLESTR *ppszUndo);
        
        END_INTERFACE
    } IPropertyPageUndoStringVtbl;

    interface IPropertyPageUndoString
    {
        CONST_VTBL struct IPropertyPageUndoStringVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPropertyPageUndoString_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IPropertyPageUndoString_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IPropertyPageUndoString_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IPropertyPageUndoString_GetUndoString(This,ppszUndo)	\
    (This)->lpVtbl -> GetUndoString(This,ppszUndo)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IPropertyPageUndoString_GetUndoString_Proxy( 
    IPropertyPageUndoString * This,
    /* [out] */ LPOLESTR *ppszUndo);


void __RPC_STUB IPropertyPageUndoString_GetUndoString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IPropertyPageUndoString_INTERFACE_DEFINED__ */


#ifndef __IProvideRuntimeHTML_INTERFACE_DEFINED__
#define __IProvideRuntimeHTML_INTERFACE_DEFINED__

/* interface IProvideRuntimeHTML */
/* [object][unique][version][uuid] */ 


EXTERN_C const IID IID_IProvideRuntimeHTML;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("33C0C1DC-33CF-11d3-BFF2-00C04F990235")
    IProvideRuntimeHTML : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetRuntimeHTML( 
            /* [retval][out] */ BSTR *pstrRuntimeHTML) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IProvideRuntimeHTMLVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IProvideRuntimeHTML * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IProvideRuntimeHTML * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IProvideRuntimeHTML * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetRuntimeHTML )( 
            IProvideRuntimeHTML * This,
            /* [retval][out] */ BSTR *pstrRuntimeHTML);
        
        END_INTERFACE
    } IProvideRuntimeHTMLVtbl;

    interface IProvideRuntimeHTML
    {
        CONST_VTBL struct IProvideRuntimeHTMLVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IProvideRuntimeHTML_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IProvideRuntimeHTML_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IProvideRuntimeHTML_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IProvideRuntimeHTML_GetRuntimeHTML(This,pstrRuntimeHTML)	\
    (This)->lpVtbl -> GetRuntimeHTML(This,pstrRuntimeHTML)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IProvideRuntimeHTML_GetRuntimeHTML_Proxy( 
    IProvideRuntimeHTML * This,
    /* [retval][out] */ BSTR *pstrRuntimeHTML);


void __RPC_STUB IProvideRuntimeHTML_GetRuntimeHTML_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IProvideRuntimeHTML_INTERFACE_DEFINED__ */


#ifndef __IProvideAltHTML_INTERFACE_DEFINED__
#define __IProvideAltHTML_INTERFACE_DEFINED__

/* interface IProvideAltHTML */
/* [object][unique][version][uuid] */ 


EXTERN_C const IID IID_IProvideAltHTML;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("33C0C1DD-33CF-11d3-BFF2-00C04F990235")
    IProvideAltHTML : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAltHTML( 
            /* [retval][out] */ BSTR *pstrAltHTML) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsAltHTMLEditable( 
            /* [retval][out] */ boolean *pfIsEditable) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IProvideAltHTMLVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IProvideAltHTML * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IProvideAltHTML * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IProvideAltHTML * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetAltHTML )( 
            IProvideAltHTML * This,
            /* [retval][out] */ BSTR *pstrAltHTML);
        
        HRESULT ( STDMETHODCALLTYPE *IsAltHTMLEditable )( 
            IProvideAltHTML * This,
            /* [retval][out] */ boolean *pfIsEditable);
        
        END_INTERFACE
    } IProvideAltHTMLVtbl;

    interface IProvideAltHTML
    {
        CONST_VTBL struct IProvideAltHTMLVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IProvideAltHTML_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IProvideAltHTML_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IProvideAltHTML_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IProvideAltHTML_GetAltHTML(This,pstrAltHTML)	\
    (This)->lpVtbl -> GetAltHTML(This,pstrAltHTML)

#define IProvideAltHTML_IsAltHTMLEditable(This,pfIsEditable)	\
    (This)->lpVtbl -> IsAltHTMLEditable(This,pfIsEditable)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IProvideAltHTML_GetAltHTML_Proxy( 
    IProvideAltHTML * This,
    /* [retval][out] */ BSTR *pstrAltHTML);


void __RPC_STUB IProvideAltHTML_GetAltHTML_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IProvideAltHTML_IsAltHTMLEditable_Proxy( 
    IProvideAltHTML * This,
    /* [retval][out] */ boolean *pfIsEditable);


void __RPC_STUB IProvideAltHTML_IsAltHTMLEditable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IProvideAltHTML_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_ocdesign_0258 */
/* [local] */ 

DEFINE_GUID(IID_IPersistHTMLStream, 0x56223fe3, 0xd397, 0x11cf, 0xa4, 0x2e, 0x0, 0xaa, 0x0, 0xc0, 0x9, 0x40);
DEFINE_GUID(IID_IPersistAltHTMLStream, 0x56223fe4, 0xd397, 0x11cf, 0xa4, 0x2e, 0x0, 0xaa, 0x0, 0xc0, 0x9, 0x40);


extern RPC_IF_HANDLE __MIDL_itf_ocdesign_0258_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_ocdesign_0258_v0_0_s_ifspec;


#ifndef __OCDesign_LIBRARY_DEFINED__
#define __OCDesign_LIBRARY_DEFINED__

/* library OCDesign */
/* [helpstring][version][uuid] */ 












EXTERN_C const IID LIBID_OCDesign;

EXTERN_C const CLSID CLSID_BuilderWizardManager;

#ifdef __cplusplus

class DECLSPEC_UUID("9FCF0840-F8F7-11d2-A6AE-00104BCC7269")
BuilderWizardManager;
#endif
#endif /* __OCDesign_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR * ); 
void                      __RPC_USER  BSTR_UserFree(     unsigned long *, BSTR * ); 

unsigned long             __RPC_USER  HWND_UserSize(     unsigned long *, unsigned long            , HWND * ); 
unsigned char * __RPC_USER  HWND_UserMarshal(  unsigned long *, unsigned char *, HWND * ); 
unsigned char * __RPC_USER  HWND_UserUnmarshal(unsigned long *, unsigned char *, HWND * ); 
void                      __RPC_USER  HWND_UserFree(     unsigned long *, HWND * ); 

unsigned long             __RPC_USER  VARIANT_UserSize(     unsigned long *, unsigned long            , VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserMarshal(  unsigned long *, unsigned char *, VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserUnmarshal(unsigned long *, unsigned char *, VARIANT * ); 
void                      __RPC_USER  VARIANT_UserFree(     unsigned long *, VARIANT * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\vc7addon\vsbuilt\debug\inc\i386\proffserv.h ===
#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 6.00.0347 */
/* at Tue Jan 08 04:19:13 2002
 */
/* Compiler settings for proffserv.idl:
    Oicf, W0, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext
    error checks: allocation ref bounds_check enum stub_data , no_format_optimization
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 440
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __proffserv_h__
#define __proffserv_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IProfferService_FWD_DEFINED__
#define __IProfferService_FWD_DEFINED__
typedef interface IProfferService IProfferService;
#endif 	/* __IProfferService_FWD_DEFINED__ */


/* header files for imported files */
#include "servprov.h"

#ifdef __cplusplus
extern "C"{
#endif 

void * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void * ); 

/* interface __MIDL_itf_proffserv_0000 */
/* [local] */ 

//+-------------------------------------------------------------------------
//
//  Microsoft Windows
//  Copyright 1995 - 1997 Microsoft Corporation. All Rights Reserved.
//
//  File: proffserv.h
//
//--------------------------------------------------------------------------
#ifndef _PROFFSERV_H_
#define _PROFFSERV_H_


extern RPC_IF_HANDLE __MIDL_itf_proffserv_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_proffserv_0000_v0_0_s_ifspec;

#ifndef __IProfferService_INTERFACE_DEFINED__
#define __IProfferService_INTERFACE_DEFINED__

/* interface IProfferService */
/* [unique][uuid][local][object] */ 


EXTERN_C const IID IID_IProfferService;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("CB728B20-F786-11ce-92AD-00AA00A74CD0")
    IProfferService : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ProfferService( 
            /* [in] */ REFGUID rguidService,
            /* [in] */ IServiceProvider *psp,
            /* [out] */ DWORD *pdwCookie) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RevokeService( 
            /* [in] */ DWORD dwCookie) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IProfferServiceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IProfferService * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IProfferService * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IProfferService * This);
        
        HRESULT ( STDMETHODCALLTYPE *ProfferService )( 
            IProfferService * This,
            /* [in] */ REFGUID rguidService,
            /* [in] */ IServiceProvider *psp,
            /* [out] */ DWORD *pdwCookie);
        
        HRESULT ( STDMETHODCALLTYPE *RevokeService )( 
            IProfferService * This,
            /* [in] */ DWORD dwCookie);
        
        END_INTERFACE
    } IProfferServiceVtbl;

    interface IProfferService
    {
        CONST_VTBL struct IProfferServiceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IProfferService_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IProfferService_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IProfferService_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IProfferService_ProfferService(This,rguidService,psp,pdwCookie)	\
    (This)->lpVtbl -> ProfferService(This,rguidService,psp,pdwCookie)

#define IProfferService_RevokeService(This,dwCookie)	\
    (This)->lpVtbl -> RevokeService(This,dwCookie)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IProfferService_ProfferService_Proxy( 
    IProfferService * This,
    /* [in] */ REFGUID rguidService,
    /* [in] */ IServiceProvider *psp,
    /* [out] */ DWORD *pdwCookie);


void __RPC_STUB IProfferService_ProfferService_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IProfferService_RevokeService_Proxy( 
    IProfferService * This,
    /* [in] */ DWORD dwCookie);


void __RPC_STUB IProfferService_RevokeService_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IProfferService_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_proffserv_0090 */
/* [local] */ 

#define SID_SProfferService IID_IProfferService
#endif


extern RPC_IF_HANDLE __MIDL_itf_proffserv_0090_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_proffserv_0090_v0_0_s_ifspec;

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\vc7addon\vsbuilt\debug\inc\i386\ProjBldPrivate.h ===
#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 6.00.0347 */
/* at Mon Jan 21 14:46:34 2002
 */
/* Compiler settings for projbldprivate.idl:
    Oicf, W0, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext
    error checks: allocation ref bounds_check enum stub_data , no_format_optimization
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 440
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __projbldprivate_h__
#define __projbldprivate_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IVCCfg_FWD_DEFINED__
#define __IVCCfg_FWD_DEFINED__
typedef interface IVCCfg IVCCfg;
#endif 	/* __IVCCfg_FWD_DEFINED__ */


#ifndef __File_FWD_DEFINED__
#define __File_FWD_DEFINED__
typedef interface File File;
#endif 	/* __File_FWD_DEFINED__ */


#ifndef __Filter_FWD_DEFINED__
#define __Filter_FWD_DEFINED__
typedef interface Filter Filter;
#endif 	/* __Filter_FWD_DEFINED__ */


#ifndef ___VCProject_FWD_DEFINED__
#define ___VCProject_FWD_DEFINED__
typedef interface _VCProject _VCProject;
#endif 	/* ___VCProject_FWD_DEFINED__ */


#ifndef __FileNodeProps_FWD_DEFINED__
#define __FileNodeProps_FWD_DEFINED__

#ifdef __cplusplus
typedef class FileNodeProps FileNodeProps;
#else
typedef struct FileNodeProps FileNodeProps;
#endif /* __cplusplus */

#endif 	/* __FileNodeProps_FWD_DEFINED__ */


#ifndef __FolderNodeProps_FWD_DEFINED__
#define __FolderNodeProps_FWD_DEFINED__

#ifdef __cplusplus
typedef class FolderNodeProps FolderNodeProps;
#else
typedef struct FolderNodeProps FolderNodeProps;
#endif /* __cplusplus */

#endif 	/* __FolderNodeProps_FWD_DEFINED__ */


#ifndef __ProjectNodeProps_FWD_DEFINED__
#define __ProjectNodeProps_FWD_DEFINED__

#ifdef __cplusplus
typedef class ProjectNodeProps ProjectNodeProps;
#else
typedef struct ProjectNodeProps ProjectNodeProps;
#endif /* __cplusplus */

#endif 	/* __ProjectNodeProps_FWD_DEFINED__ */


#ifndef __BuildPackage_FWD_DEFINED__
#define __BuildPackage_FWD_DEFINED__

#ifdef __cplusplus
typedef class BuildPackage BuildPackage;
#else
typedef struct BuildPackage BuildPackage;
#endif /* __cplusplus */

#endif 	/* __BuildPackage_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "ocidl.h"

#ifdef __cplusplus
extern "C"{
#endif 

void * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void * ); 

/* interface __MIDL_itf_projbldprivate_0000 */
/* [local] */ 


extern "C" const __declspec(selectany) GUID SID_SProjectEngine = { 0x531ADA6BL,0x0EEA,0x11D3,0x8D,0x31,0x00,0xC0,0x4F,0x8E,0xEA,0x30 };
extern "C" const __declspec(selectany) GUID SID_SENCBuildSpawner = { 0x39642745L,0x908C,0x11D3,0xB9,0x9A,0x00,0xC0,0x4F,0x68,0x5D,0x26 };
extern "C" const __declspec(selectany) GUID SID_SBuildErrorContext = { 0x39642745L,0x908C,0x11D3,0xB9,0x9A,0x00,0xC0,0x4F,0x68,0x5D,0x27 };
extern "C" const __declspec(selectany) GUID GUID_ItemType_VC = { 0x31df8af1L,0xe859,0x43eb,0xac,0xfb,0x23,0x8d,0x73,0x74,0x27,0x1f };

enum __VCPROPID
    {	VCPROPID_NIL	= -1,
	VCPROPID_FIRST	= 1000,
	VCPROPID_ProjBldObject	= 1000,
	VCPROPID_ProjBldProject	= 1001,
	VCPROPID_ProjBldActiveProjConfig	= 1002,
	VCPROPID_ProjBldActiveFileConfig	= 1003,
	VCPROPID_ProjBldIncludePath	= 1004,
	VCPROPID_ProjBldBscFile	= 1005,
	VCPROPID_LAST	= 1005
    } ;
typedef LONG VCPROPID;



extern RPC_IF_HANDLE __MIDL_itf_projbldprivate_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_projbldprivate_0000_v0_0_s_ifspec;

#ifndef __IVCCfg_INTERFACE_DEFINED__
#define __IVCCfg_INTERFACE_DEFINED__

/* interface IVCCfg */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IVCCfg;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("694C76BC-3EF4-11d3-B278-0050041DB12A")
    IVCCfg : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE get_Tool( 
            /* [in] */ VARIANT toolIndex,
            /* [retval][out] */ IUnknown **ppTool) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE get_Object( 
            /* [retval][out] */ IDispatch **ppObj) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IVCCfgVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IVCCfg * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IVCCfg * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IVCCfg * This);
        
        HRESULT ( STDMETHODCALLTYPE *get_Tool )( 
            IVCCfg * This,
            /* [in] */ VARIANT toolIndex,
            /* [retval][out] */ IUnknown **ppTool);
        
        HRESULT ( STDMETHODCALLTYPE *get_Object )( 
            IVCCfg * This,
            /* [retval][out] */ IDispatch **ppObj);
        
        END_INTERFACE
    } IVCCfgVtbl;

    interface IVCCfg
    {
        CONST_VTBL struct IVCCfgVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IVCCfg_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IVCCfg_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IVCCfg_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IVCCfg_get_Tool(This,toolIndex,ppTool)	\
    (This)->lpVtbl -> get_Tool(This,toolIndex,ppTool)

#define IVCCfg_get_Object(This,ppObj)	\
    (This)->lpVtbl -> get_Object(This,ppObj)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IVCCfg_get_Tool_Proxy( 
    IVCCfg * This,
    /* [in] */ VARIANT toolIndex,
    /* [retval][out] */ IUnknown **ppTool);


void __RPC_STUB IVCCfg_get_Tool_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVCCfg_get_Object_Proxy( 
    IVCCfg * This,
    /* [retval][out] */ IDispatch **ppObj);


void __RPC_STUB IVCCfg_get_Object_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IVCCfg_INTERFACE_DEFINED__ */


#ifndef __File_INTERFACE_DEFINED__
#define __File_INTERFACE_DEFINED__

/* interface File */
/* [unique][helpstringcontext][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_File;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2D5D650E-3E0D-11d3-9415-00C04F68FB62")
    File : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_FullPath( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_RelativePath( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_RelativePath( 
            /* [in] */ BSTR newVal) = 0;
        
        virtual /* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DeploymentContent( 
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_DeploymentContent( 
            /* [in] */ VARIANT_BOOL newVal) = 0;
        
        virtual /* [helpstringcontext][id][hidden][nonbrowsable][propget] */ HRESULT STDMETHODCALLTYPE get_Extender( 
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ IDispatch **ppDisp) = 0;
        
        virtual /* [helpstringcontext][id][hidden][nonbrowsable][propget] */ HRESULT STDMETHODCALLTYPE get_ExtenderNames( 
            /* [retval][out] */ VARIANT *pvarNames) = 0;
        
        virtual /* [helpstringcontext][id][hidden][nonbrowsable][propget] */ HRESULT STDMETHODCALLTYPE get_ExtenderCATID( 
            /* [retval][out] */ BSTR *pbstrGuid) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct FileVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            File * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            File * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            File * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            File * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            File * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            File * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            File * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            File * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [helpstringcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FullPath )( 
            File * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [helpstringcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RelativePath )( 
            File * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [helpstringcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_RelativePath )( 
            File * This,
            /* [in] */ BSTR newVal);
        
        /* [helpstringcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DeploymentContent )( 
            File * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [helpstringcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_DeploymentContent )( 
            File * This,
            /* [in] */ VARIANT_BOOL newVal);
        
        /* [helpstringcontext][id][hidden][nonbrowsable][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Extender )( 
            File * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ IDispatch **ppDisp);
        
        /* [helpstringcontext][id][hidden][nonbrowsable][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderNames )( 
            File * This,
            /* [retval][out] */ VARIANT *pvarNames);
        
        /* [helpstringcontext][id][hidden][nonbrowsable][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderCATID )( 
            File * This,
            /* [retval][out] */ BSTR *pbstrGuid);
        
        END_INTERFACE
    } FileVtbl;

    interface File
    {
        CONST_VTBL struct FileVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define File_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define File_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define File_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define File_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define File_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define File_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define File_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define File_get_Name(This,pVal)	\
    (This)->lpVtbl -> get_Name(This,pVal)

#define File_get_FullPath(This,pVal)	\
    (This)->lpVtbl -> get_FullPath(This,pVal)

#define File_get_RelativePath(This,pVal)	\
    (This)->lpVtbl -> get_RelativePath(This,pVal)

#define File_put_RelativePath(This,newVal)	\
    (This)->lpVtbl -> put_RelativePath(This,newVal)

#define File_get_DeploymentContent(This,pVal)	\
    (This)->lpVtbl -> get_DeploymentContent(This,pVal)

#define File_put_DeploymentContent(This,newVal)	\
    (This)->lpVtbl -> put_DeploymentContent(This,newVal)

#define File_get_Extender(This,bstrName,ppDisp)	\
    (This)->lpVtbl -> get_Extender(This,bstrName,ppDisp)

#define File_get_ExtenderNames(This,pvarNames)	\
    (This)->lpVtbl -> get_ExtenderNames(This,pvarNames)

#define File_get_ExtenderCATID(This,pbstrGuid)	\
    (This)->lpVtbl -> get_ExtenderCATID(This,pbstrGuid)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE File_get_Name_Proxy( 
    File * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB File_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE File_get_FullPath_Proxy( 
    File * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB File_get_FullPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE File_get_RelativePath_Proxy( 
    File * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB File_get_RelativePath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE File_put_RelativePath_Proxy( 
    File * This,
    /* [in] */ BSTR newVal);


void __RPC_STUB File_put_RelativePath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE File_get_DeploymentContent_Proxy( 
    File * This,
    /* [retval][out] */ VARIANT_BOOL *pVal);


void __RPC_STUB File_get_DeploymentContent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE File_put_DeploymentContent_Proxy( 
    File * This,
    /* [in] */ VARIANT_BOOL newVal);


void __RPC_STUB File_put_DeploymentContent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][hidden][nonbrowsable][propget] */ HRESULT STDMETHODCALLTYPE File_get_Extender_Proxy( 
    File * This,
    /* [in] */ BSTR bstrName,
    /* [retval][out] */ IDispatch **ppDisp);


void __RPC_STUB File_get_Extender_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][hidden][nonbrowsable][propget] */ HRESULT STDMETHODCALLTYPE File_get_ExtenderNames_Proxy( 
    File * This,
    /* [retval][out] */ VARIANT *pvarNames);


void __RPC_STUB File_get_ExtenderNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][hidden][nonbrowsable][propget] */ HRESULT STDMETHODCALLTYPE File_get_ExtenderCATID_Proxy( 
    File * This,
    /* [retval][out] */ BSTR *pbstrGuid);


void __RPC_STUB File_get_ExtenderCATID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __File_INTERFACE_DEFINED__ */


#ifndef __Filter_INTERFACE_DEFINED__
#define __Filter_INTERFACE_DEFINED__

/* interface Filter */
/* [unique][helpstringcontext][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_Filter;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2111B8B8-4150-11d3-9416-00C04F68FB62")
    Filter : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR newVal) = 0;
        
        virtual /* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Filter( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Filter( 
            /* [in] */ BSTR newVal) = 0;
        
        virtual /* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ParseFiles( 
            /* [retval][out] */ VARIANT_BOOL *pbParse) = 0;
        
        virtual /* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_ParseFiles( 
            /* [in] */ VARIANT_BOOL bParse) = 0;
        
        virtual /* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_SourceControlFiles( 
            /* [retval][out] */ VARIANT_BOOL *pbSCC) = 0;
        
        virtual /* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_SourceControlFiles( 
            /* [in] */ VARIANT_BOOL bSCC) = 0;
        
        virtual /* [helpstringcontext][id][hidden][nonbrowsable][propget] */ HRESULT STDMETHODCALLTYPE get_Extender( 
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ IDispatch **ppDisp) = 0;
        
        virtual /* [helpstringcontext][id][hidden][nonbrowsable][propget] */ HRESULT STDMETHODCALLTYPE get_ExtenderNames( 
            /* [retval][out] */ VARIANT *pvarNames) = 0;
        
        virtual /* [helpstringcontext][id][hidden][nonbrowsable][propget] */ HRESULT STDMETHODCALLTYPE get_ExtenderCATID( 
            /* [retval][out] */ BSTR *pbstrGuid) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct FilterVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Filter * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Filter * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Filter * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Filter * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Filter * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Filter * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Filter * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            Filter * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [helpstringcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            Filter * This,
            /* [in] */ BSTR newVal);
        
        /* [helpstringcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Filter )( 
            Filter * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [helpstringcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Filter )( 
            Filter * This,
            /* [in] */ BSTR newVal);
        
        /* [helpstringcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ParseFiles )( 
            Filter * This,
            /* [retval][out] */ VARIANT_BOOL *pbParse);
        
        /* [helpstringcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ParseFiles )( 
            Filter * This,
            /* [in] */ VARIANT_BOOL bParse);
        
        /* [helpstringcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SourceControlFiles )( 
            Filter * This,
            /* [retval][out] */ VARIANT_BOOL *pbSCC);
        
        /* [helpstringcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_SourceControlFiles )( 
            Filter * This,
            /* [in] */ VARIANT_BOOL bSCC);
        
        /* [helpstringcontext][id][hidden][nonbrowsable][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Extender )( 
            Filter * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ IDispatch **ppDisp);
        
        /* [helpstringcontext][id][hidden][nonbrowsable][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderNames )( 
            Filter * This,
            /* [retval][out] */ VARIANT *pvarNames);
        
        /* [helpstringcontext][id][hidden][nonbrowsable][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderCATID )( 
            Filter * This,
            /* [retval][out] */ BSTR *pbstrGuid);
        
        END_INTERFACE
    } FilterVtbl;

    interface Filter
    {
        CONST_VTBL struct FilterVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Filter_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Filter_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Filter_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Filter_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Filter_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Filter_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Filter_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Filter_get_Name(This,pVal)	\
    (This)->lpVtbl -> get_Name(This,pVal)

#define Filter_put_Name(This,newVal)	\
    (This)->lpVtbl -> put_Name(This,newVal)

#define Filter_get_Filter(This,pVal)	\
    (This)->lpVtbl -> get_Filter(This,pVal)

#define Filter_put_Filter(This,newVal)	\
    (This)->lpVtbl -> put_Filter(This,newVal)

#define Filter_get_ParseFiles(This,pbParse)	\
    (This)->lpVtbl -> get_ParseFiles(This,pbParse)

#define Filter_put_ParseFiles(This,bParse)	\
    (This)->lpVtbl -> put_ParseFiles(This,bParse)

#define Filter_get_SourceControlFiles(This,pbSCC)	\
    (This)->lpVtbl -> get_SourceControlFiles(This,pbSCC)

#define Filter_put_SourceControlFiles(This,bSCC)	\
    (This)->lpVtbl -> put_SourceControlFiles(This,bSCC)

#define Filter_get_Extender(This,bstrName,ppDisp)	\
    (This)->lpVtbl -> get_Extender(This,bstrName,ppDisp)

#define Filter_get_ExtenderNames(This,pvarNames)	\
    (This)->lpVtbl -> get_ExtenderNames(This,pvarNames)

#define Filter_get_ExtenderCATID(This,pbstrGuid)	\
    (This)->lpVtbl -> get_ExtenderCATID(This,pbstrGuid)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE Filter_get_Name_Proxy( 
    Filter * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB Filter_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE Filter_put_Name_Proxy( 
    Filter * This,
    /* [in] */ BSTR newVal);


void __RPC_STUB Filter_put_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE Filter_get_Filter_Proxy( 
    Filter * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB Filter_get_Filter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE Filter_put_Filter_Proxy( 
    Filter * This,
    /* [in] */ BSTR newVal);


void __RPC_STUB Filter_put_Filter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE Filter_get_ParseFiles_Proxy( 
    Filter * This,
    /* [retval][out] */ VARIANT_BOOL *pbParse);


void __RPC_STUB Filter_get_ParseFiles_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE Filter_put_ParseFiles_Proxy( 
    Filter * This,
    /* [in] */ VARIANT_BOOL bParse);


void __RPC_STUB Filter_put_ParseFiles_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE Filter_get_SourceControlFiles_Proxy( 
    Filter * This,
    /* [retval][out] */ VARIANT_BOOL *pbSCC);


void __RPC_STUB Filter_get_SourceControlFiles_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE Filter_put_SourceControlFiles_Proxy( 
    Filter * This,
    /* [in] */ VARIANT_BOOL bSCC);


void __RPC_STUB Filter_put_SourceControlFiles_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][hidden][nonbrowsable][propget] */ HRESULT STDMETHODCALLTYPE Filter_get_Extender_Proxy( 
    Filter * This,
    /* [in] */ BSTR bstrName,
    /* [retval][out] */ IDispatch **ppDisp);


void __RPC_STUB Filter_get_Extender_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][hidden][nonbrowsable][propget] */ HRESULT STDMETHODCALLTYPE Filter_get_ExtenderNames_Proxy( 
    Filter * This,
    /* [retval][out] */ VARIANT *pvarNames);


void __RPC_STUB Filter_get_ExtenderNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][hidden][nonbrowsable][propget] */ HRESULT STDMETHODCALLTYPE Filter_get_ExtenderCATID_Proxy( 
    Filter * This,
    /* [retval][out] */ BSTR *pbstrGuid);


void __RPC_STUB Filter_get_ExtenderCATID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Filter_INTERFACE_DEFINED__ */


#ifndef ___VCProject_INTERFACE_DEFINED__
#define ___VCProject_INTERFACE_DEFINED__

/* interface _VCProject */
/* [unique][helpstringcontext][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID__VCProject;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2111B8BA-4150-11d3-9416-00C04F68FB62")
    _VCProject : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR newVal) = 0;
        
        virtual /* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ProjectFile( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ProjectDependencies( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [helpstringcontext][id][hidden][nonbrowsable][propget] */ HRESULT STDMETHODCALLTYPE get_Extender( 
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ IDispatch **ppDisp) = 0;
        
        virtual /* [helpstringcontext][id][hidden][nonbrowsable][propget] */ HRESULT STDMETHODCALLTYPE get_ExtenderNames( 
            /* [retval][out] */ VARIANT *pvarNames) = 0;
        
        virtual /* [helpstringcontext][id][hidden][nonbrowsable][propget] */ HRESULT STDMETHODCALLTYPE get_ExtenderCATID( 
            /* [retval][out] */ BSTR *pbstrGuid) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _VCProjectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _VCProject * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _VCProject * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _VCProject * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _VCProject * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _VCProject * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _VCProject * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _VCProject * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            _VCProject * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [helpstringcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            _VCProject * This,
            /* [in] */ BSTR newVal);
        
        /* [helpstringcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProjectFile )( 
            _VCProject * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [helpstringcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProjectDependencies )( 
            _VCProject * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [helpstringcontext][id][hidden][nonbrowsable][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Extender )( 
            _VCProject * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ IDispatch **ppDisp);
        
        /* [helpstringcontext][id][hidden][nonbrowsable][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderNames )( 
            _VCProject * This,
            /* [retval][out] */ VARIANT *pvarNames);
        
        /* [helpstringcontext][id][hidden][nonbrowsable][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderCATID )( 
            _VCProject * This,
            /* [retval][out] */ BSTR *pbstrGuid);
        
        END_INTERFACE
    } _VCProjectVtbl;

    interface _VCProject
    {
        CONST_VTBL struct _VCProjectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _VCProject_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _VCProject_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _VCProject_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _VCProject_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _VCProject_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _VCProject_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _VCProject_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define _VCProject_get_Name(This,pVal)	\
    (This)->lpVtbl -> get_Name(This,pVal)

#define _VCProject_put_Name(This,newVal)	\
    (This)->lpVtbl -> put_Name(This,newVal)

#define _VCProject_get_ProjectFile(This,pVal)	\
    (This)->lpVtbl -> get_ProjectFile(This,pVal)

#define _VCProject_get_ProjectDependencies(This,pVal)	\
    (This)->lpVtbl -> get_ProjectDependencies(This,pVal)

#define _VCProject_get_Extender(This,bstrName,ppDisp)	\
    (This)->lpVtbl -> get_Extender(This,bstrName,ppDisp)

#define _VCProject_get_ExtenderNames(This,pvarNames)	\
    (This)->lpVtbl -> get_ExtenderNames(This,pvarNames)

#define _VCProject_get_ExtenderCATID(This,pbstrGuid)	\
    (This)->lpVtbl -> get_ExtenderCATID(This,pbstrGuid)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE _VCProject_get_Name_Proxy( 
    _VCProject * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB _VCProject_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propput] */ HRESULT STDMETHODCALLTYPE _VCProject_put_Name_Proxy( 
    _VCProject * This,
    /* [in] */ BSTR newVal);


void __RPC_STUB _VCProject_put_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE _VCProject_get_ProjectFile_Proxy( 
    _VCProject * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB _VCProject_get_ProjectFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][propget] */ HRESULT STDMETHODCALLTYPE _VCProject_get_ProjectDependencies_Proxy( 
    _VCProject * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB _VCProject_get_ProjectDependencies_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][hidden][nonbrowsable][propget] */ HRESULT STDMETHODCALLTYPE _VCProject_get_Extender_Proxy( 
    _VCProject * This,
    /* [in] */ BSTR bstrName,
    /* [retval][out] */ IDispatch **ppDisp);


void __RPC_STUB _VCProject_get_Extender_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][hidden][nonbrowsable][propget] */ HRESULT STDMETHODCALLTYPE _VCProject_get_ExtenderNames_Proxy( 
    _VCProject * This,
    /* [retval][out] */ VARIANT *pvarNames);


void __RPC_STUB _VCProject_get_ExtenderNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][id][hidden][nonbrowsable][propget] */ HRESULT STDMETHODCALLTYPE _VCProject_get_ExtenderCATID_Proxy( 
    _VCProject * This,
    /* [retval][out] */ BSTR *pbstrGuid);


void __RPC_STUB _VCProject_get_ExtenderCATID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* ___VCProject_INTERFACE_DEFINED__ */



#ifndef __VCPrivateProjectLibrary_LIBRARY_DEFINED__
#define __VCPrivateProjectLibrary_LIBRARY_DEFINED__

/* library VCPrivateProjectLibrary */
/* [helpstringdll][helpstring][version][uuid] */ 


EXTERN_C const IID LIBID_VCPrivateProjectLibrary;

EXTERN_C const CLSID CLSID_FileNodeProps;

#ifdef __cplusplus

class DECLSPEC_UUID("2D5D650F-3E0D-11d3-9415-00C04F68FB62")
FileNodeProps;
#endif

EXTERN_C const CLSID CLSID_FolderNodeProps;

#ifdef __cplusplus

class DECLSPEC_UUID("2111B8B9-4150-11d3-9416-00C04F68FB62")
FolderNodeProps;
#endif

EXTERN_C const CLSID CLSID_ProjectNodeProps;

#ifdef __cplusplus

class DECLSPEC_UUID("2111B8BB-4150-11d3-9416-00C04F68FB62")
ProjectNodeProps;
#endif

EXTERN_C const CLSID CLSID_BuildPackage;

#ifdef __cplusplus

class DECLSPEC_UUID("F1C25864-3097-11D2-A5C5-00C04F7968B4")
BuildPackage;
#endif
#endif /* __VCPrivateProjectLibrary_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR * ); 
void                      __RPC_USER  BSTR_UserFree(     unsigned long *, BSTR * ); 

unsigned long             __RPC_USER  VARIANT_UserSize(     unsigned long *, unsigned long            , VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserMarshal(  unsigned long *, unsigned char *, VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserUnmarshal(unsigned long *, unsigned char *, VARIANT * ); 
void                      __RPC_USER  VARIANT_UserFree(     unsigned long *, VARIANT * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\vc7addon\vsbuilt\debug\inc\i386\sh.h ===
#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 6.00.0347 */
/* at Sat Jan 05 01:24:07 2002
 */
/* Compiler settings for sh.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext
    error checks: allocation ref bounds_check enum stub_data , no_format_optimization
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 440
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __sh_h__
#define __sh_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IDebugSymbolProvider_FWD_DEFINED__
#define __IDebugSymbolProvider_FWD_DEFINED__
typedef interface IDebugSymbolProvider IDebugSymbolProvider;
#endif 	/* __IDebugSymbolProvider_FWD_DEFINED__ */


#ifndef __IDebugComPlusSymbolProvider_FWD_DEFINED__
#define __IDebugComPlusSymbolProvider_FWD_DEFINED__
typedef interface IDebugComPlusSymbolProvider IDebugComPlusSymbolProvider;
#endif 	/* __IDebugComPlusSymbolProvider_FWD_DEFINED__ */


#ifndef __IDebugNativeSymbolProvider_FWD_DEFINED__
#define __IDebugNativeSymbolProvider_FWD_DEFINED__
typedef interface IDebugNativeSymbolProvider IDebugNativeSymbolProvider;
#endif 	/* __IDebugNativeSymbolProvider_FWD_DEFINED__ */


#ifndef __IDebugField_FWD_DEFINED__
#define __IDebugField_FWD_DEFINED__
typedef interface IDebugField IDebugField;
#endif 	/* __IDebugField_FWD_DEFINED__ */


#ifndef __IDebugContainerField_FWD_DEFINED__
#define __IDebugContainerField_FWD_DEFINED__
typedef interface IDebugContainerField IDebugContainerField;
#endif 	/* __IDebugContainerField_FWD_DEFINED__ */


#ifndef __IDebugMethodField_FWD_DEFINED__
#define __IDebugMethodField_FWD_DEFINED__
typedef interface IDebugMethodField IDebugMethodField;
#endif 	/* __IDebugMethodField_FWD_DEFINED__ */


#ifndef __IDebugClassField_FWD_DEFINED__
#define __IDebugClassField_FWD_DEFINED__
typedef interface IDebugClassField IDebugClassField;
#endif 	/* __IDebugClassField_FWD_DEFINED__ */


#ifndef __IDebugPropertyField_FWD_DEFINED__
#define __IDebugPropertyField_FWD_DEFINED__
typedef interface IDebugPropertyField IDebugPropertyField;
#endif 	/* __IDebugPropertyField_FWD_DEFINED__ */


#ifndef __IDebugArrayField_FWD_DEFINED__
#define __IDebugArrayField_FWD_DEFINED__
typedef interface IDebugArrayField IDebugArrayField;
#endif 	/* __IDebugArrayField_FWD_DEFINED__ */


#ifndef __IDebugPointerField_FWD_DEFINED__
#define __IDebugPointerField_FWD_DEFINED__
typedef interface IDebugPointerField IDebugPointerField;
#endif 	/* __IDebugPointerField_FWD_DEFINED__ */


#ifndef __IDebugEnumField_FWD_DEFINED__
#define __IDebugEnumField_FWD_DEFINED__
typedef interface IDebugEnumField IDebugEnumField;
#endif 	/* __IDebugEnumField_FWD_DEFINED__ */


#ifndef __IDebugBitField_FWD_DEFINED__
#define __IDebugBitField_FWD_DEFINED__
typedef interface IDebugBitField IDebugBitField;
#endif 	/* __IDebugBitField_FWD_DEFINED__ */


#ifndef __IDebugDynamicField_FWD_DEFINED__
#define __IDebugDynamicField_FWD_DEFINED__
typedef interface IDebugDynamicField IDebugDynamicField;
#endif 	/* __IDebugDynamicField_FWD_DEFINED__ */


#ifndef __IDebugDynamicFieldCOMPlus_FWD_DEFINED__
#define __IDebugDynamicFieldCOMPlus_FWD_DEFINED__
typedef interface IDebugDynamicFieldCOMPlus IDebugDynamicFieldCOMPlus;
#endif 	/* __IDebugDynamicFieldCOMPlus_FWD_DEFINED__ */


#ifndef __IDebugEngineSymbolProviderServices_FWD_DEFINED__
#define __IDebugEngineSymbolProviderServices_FWD_DEFINED__
typedef interface IDebugEngineSymbolProviderServices IDebugEngineSymbolProviderServices;
#endif 	/* __IDebugEngineSymbolProviderServices_FWD_DEFINED__ */


#ifndef __IDebugAddress_FWD_DEFINED__
#define __IDebugAddress_FWD_DEFINED__
typedef interface IDebugAddress IDebugAddress;
#endif 	/* __IDebugAddress_FWD_DEFINED__ */


#ifndef __IEnumDebugFields_FWD_DEFINED__
#define __IEnumDebugFields_FWD_DEFINED__
typedef interface IEnumDebugFields IEnumDebugFields;
#endif 	/* __IEnumDebugFields_FWD_DEFINED__ */


#ifndef __IEnumDebugAddresses_FWD_DEFINED__
#define __IEnumDebugAddresses_FWD_DEFINED__
typedef interface IEnumDebugAddresses IEnumDebugAddresses;
#endif 	/* __IEnumDebugAddresses_FWD_DEFINED__ */


#ifndef __IDebugCustomAttributeQuery_FWD_DEFINED__
#define __IDebugCustomAttributeQuery_FWD_DEFINED__
typedef interface IDebugCustomAttributeQuery IDebugCustomAttributeQuery;
#endif 	/* __IDebugCustomAttributeQuery_FWD_DEFINED__ */


#ifndef __SHManaged_FWD_DEFINED__
#define __SHManaged_FWD_DEFINED__

#ifdef __cplusplus
typedef class SHManaged SHManaged;
#else
typedef struct SHManaged SHManaged;
#endif /* __cplusplus */

#endif 	/* __SHManaged_FWD_DEFINED__ */


/* header files for imported files */
#include "wtypes.h"
#include "msdbg.h"

#ifdef __cplusplus
extern "C"{
#endif 

void * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void * ); 

/* interface __MIDL_itf_sh_0000 */
/* [local] */ 


















// Symbol provider HRESULTs
//
// HRESULTs: General
static const int E_SH_SYMBOL_STORE_NOT_INITIALIZED			= MAKE_HRESULT(1, FACILITY_ITF, 0x0001);
static const int E_SH_SYMBOL_STORE_ALREADY_INITIALIZED		= MAKE_HRESULT(1, FACILITY_ITF, 0x0002);
// HRESULTs: GetContainerField and GetTypeFromAddress
static const int E_SH_INVALID_ADDRESS						= MAKE_HRESULT(1, FACILITY_ITF, 0x0003);
// HRESULTs: GetAddressesFromPosition
static const int E_SH_NO_SYMBOLS_FOR_POSITION				= MAKE_HRESULT(1, FACILITY_ITF, 0x0004);
static const int E_SH_INVALID_POSITION						= MAKE_HRESULT(1, FACILITY_ITF, 0x0005);
// HRESULTs: GetContextFromAddress
static const int E_SH_NO_SYMBOLS_FOR_ADDRESS					= MAKE_HRESULT(1, FACILITY_ITF, 0x0006);
// HRESULTs: GetAddress
static const int E_SH_NO_ADDRESS								= MAKE_HRESULT(1, FACILITY_ITF, 0x0007);
// HRESULTs: GetType
static const int E_SH_NO_TYPE								= MAKE_HRESULT(1, FACILITY_ITF, 0x0008);
static const int E_SH_DYNAMIC_TYPE							= MAKE_HRESULT(1, FACILITY_ITF, 0x0009);
// HRESULTs: GetContainer
static const int S_SH_NO_CONTAINER							= MAKE_HRESULT(0, FACILITY_ITF, 0x000a);
// HRESULTs: GetSize
static const int S_SH_NO_SIZE								= MAKE_HRESULT(0, FACILITY_ITF, 0x000b);
static const int E_SH_DYNAMIC_SIZE							= MAKE_HRESULT(1, FACILITY_ITF, 0x000c);
// HRESULTs: EnumFields
static const int S_SH_NO_FIELDS								= MAKE_HRESULT(0, FACILITY_ITF, 0x000d);
// HRESULTs: GetThis
static const int S_SH_METHOD_NO_THIS							= MAKE_HRESULT(0, FACILITY_ITF, 0x000e);
// HRESULTs: EnumBaseClasses
static const int S_SH_NO_BASE_CLASSES						= MAKE_HRESULT(0, FACILITY_ITF, 0x000f);
static const int E_SH_FILE_NOT_FOUND						    = MAKE_HRESULT(1, FACILITY_ITF, 0x0010);
extern GUID guidSymStoreMetaPDB;
extern GUID guidConstantValue;
extern GUID guidConstantType;
extern GUID guidIntPtr;
// HRESULTS: GetContextInfo
static const int E_SH_NO_DOC_CONTEXT						    = MAKE_HRESULT(1, FACILITY_ITF, 0x0011);
// HRESULTS: ClassRefToClassDef
static const int E_SH_CLASSDEFINITION_NOT_LOADED				= MAKE_HRESULT(1, FACILITY_ITF, 0x0012);
typedef INT32 _mdToken;

typedef 
enum NameMatchOptions
    {	nmNone	= 0,
	nmCaseSensitive	= nmNone + 1,
	nmCaseInsensitive	= nmCaseSensitive + 1
    } 	NAME_MATCH;



extern RPC_IF_HANDLE __MIDL_itf_sh_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_sh_0000_v0_0_s_ifspec;

#ifndef __IDebugSymbolProvider_INTERFACE_DEFINED__
#define __IDebugSymbolProvider_INTERFACE_DEFINED__

/* interface IDebugSymbolProvider */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugSymbolProvider;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c2e34eae-8b9d-11d2-9014-00c04fa38338")
    IDebugSymbolProvider : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Initialize( 
            /* [in] */ IDebugEngineSymbolProviderServices *pServices) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Uninitialize( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetContainerField( 
            /* [in] */ IDebugAddress *pAddress,
            /* [out] */ IDebugContainerField **ppContainerField) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetField( 
            /* [in] */ IDebugAddress *pAddress,
            /* [in] */ IDebugAddress *pAddressCur,
            /* [out] */ IDebugField **ppField) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAddressesFromPosition( 
            /* [in] */ IDebugDocumentPosition2 *pDocPos,
            /* [in] */ BOOL fStatmentOnly,
            /* [out] */ IEnumDebugAddresses **ppEnumBegAddresses,
            /* [out] */ IEnumDebugAddresses **ppEnumEndAddresses) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAddressesFromContext( 
            /* [in] */ IDebugDocumentContext2 *pDocContext,
            /* [in] */ BOOL fStatmentOnly,
            /* [out] */ IEnumDebugAddresses **ppEnumBegAddresses,
            /* [out] */ IEnumDebugAddresses **ppEnumEndAddresses) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetContextFromAddress( 
            /* [in] */ IDebugAddress *pAddress,
            /* [out] */ IDebugDocumentContext2 **ppDocContext) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetLanguage( 
            /* [in] */ IDebugAddress *pAddress,
            /* [out] */ GUID *pguidLanguage,
            /* [out] */ GUID *pguidLanguageVendor) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetGlobalContainer( 
            /* [out] */ IDebugContainerField **pField) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMethodFieldsByName( 
            /* [full][in] */ LPCOLESTR pszFullName,
            /* [in] */ NAME_MATCH nameMatch,
            /* [out] */ IEnumDebugFields **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetClassTypeByName( 
            /* [full][in] */ LPCOLESTR pszClassName,
            /* [in] */ NAME_MATCH nameMatch,
            /* [out] */ IDebugClassField **ppField) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetNamespacesUsedAtAddress( 
            /* [in] */ IDebugAddress *pAddress,
            /* [out] */ IEnumDebugFields **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetTypeByName( 
            /* [full][in] */ LPCOLESTR pszClassName,
            /* [in] */ NAME_MATCH nameMatch,
            /* [out] */ IDebugField **ppField) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetNextAddress( 
            /* [in] */ IDebugAddress *pAddress,
            /* [in] */ BOOL fStatmentOnly,
            /* [out] */ IDebugAddress **ppAddress) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugSymbolProviderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugSymbolProvider * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugSymbolProvider * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugSymbolProvider * This);
        
        HRESULT ( STDMETHODCALLTYPE *Initialize )( 
            IDebugSymbolProvider * This,
            /* [in] */ IDebugEngineSymbolProviderServices *pServices);
        
        HRESULT ( STDMETHODCALLTYPE *Uninitialize )( 
            IDebugSymbolProvider * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetContainerField )( 
            IDebugSymbolProvider * This,
            /* [in] */ IDebugAddress *pAddress,
            /* [out] */ IDebugContainerField **ppContainerField);
        
        HRESULT ( STDMETHODCALLTYPE *GetField )( 
            IDebugSymbolProvider * This,
            /* [in] */ IDebugAddress *pAddress,
            /* [in] */ IDebugAddress *pAddressCur,
            /* [out] */ IDebugField **ppField);
        
        HRESULT ( STDMETHODCALLTYPE *GetAddressesFromPosition )( 
            IDebugSymbolProvider * This,
            /* [in] */ IDebugDocumentPosition2 *pDocPos,
            /* [in] */ BOOL fStatmentOnly,
            /* [out] */ IEnumDebugAddresses **ppEnumBegAddresses,
            /* [out] */ IEnumDebugAddresses **ppEnumEndAddresses);
        
        HRESULT ( STDMETHODCALLTYPE *GetAddressesFromContext )( 
            IDebugSymbolProvider * This,
            /* [in] */ IDebugDocumentContext2 *pDocContext,
            /* [in] */ BOOL fStatmentOnly,
            /* [out] */ IEnumDebugAddresses **ppEnumBegAddresses,
            /* [out] */ IEnumDebugAddresses **ppEnumEndAddresses);
        
        HRESULT ( STDMETHODCALLTYPE *GetContextFromAddress )( 
            IDebugSymbolProvider * This,
            /* [in] */ IDebugAddress *pAddress,
            /* [out] */ IDebugDocumentContext2 **ppDocContext);
        
        HRESULT ( STDMETHODCALLTYPE *GetLanguage )( 
            IDebugSymbolProvider * This,
            /* [in] */ IDebugAddress *pAddress,
            /* [out] */ GUID *pguidLanguage,
            /* [out] */ GUID *pguidLanguageVendor);
        
        HRESULT ( STDMETHODCALLTYPE *GetGlobalContainer )( 
            IDebugSymbolProvider * This,
            /* [out] */ IDebugContainerField **pField);
        
        HRESULT ( STDMETHODCALLTYPE *GetMethodFieldsByName )( 
            IDebugSymbolProvider * This,
            /* [full][in] */ LPCOLESTR pszFullName,
            /* [in] */ NAME_MATCH nameMatch,
            /* [out] */ IEnumDebugFields **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassTypeByName )( 
            IDebugSymbolProvider * This,
            /* [full][in] */ LPCOLESTR pszClassName,
            /* [in] */ NAME_MATCH nameMatch,
            /* [out] */ IDebugClassField **ppField);
        
        HRESULT ( STDMETHODCALLTYPE *GetNamespacesUsedAtAddress )( 
            IDebugSymbolProvider * This,
            /* [in] */ IDebugAddress *pAddress,
            /* [out] */ IEnumDebugFields **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeByName )( 
            IDebugSymbolProvider * This,
            /* [full][in] */ LPCOLESTR pszClassName,
            /* [in] */ NAME_MATCH nameMatch,
            /* [out] */ IDebugField **ppField);
        
        HRESULT ( STDMETHODCALLTYPE *GetNextAddress )( 
            IDebugSymbolProvider * This,
            /* [in] */ IDebugAddress *pAddress,
            /* [in] */ BOOL fStatmentOnly,
            /* [out] */ IDebugAddress **ppAddress);
        
        END_INTERFACE
    } IDebugSymbolProviderVtbl;

    interface IDebugSymbolProvider
    {
        CONST_VTBL struct IDebugSymbolProviderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugSymbolProvider_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugSymbolProvider_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugSymbolProvider_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugSymbolProvider_Initialize(This,pServices)	\
    (This)->lpVtbl -> Initialize(This,pServices)

#define IDebugSymbolProvider_Uninitialize(This)	\
    (This)->lpVtbl -> Uninitialize(This)

#define IDebugSymbolProvider_GetContainerField(This,pAddress,ppContainerField)	\
    (This)->lpVtbl -> GetContainerField(This,pAddress,ppContainerField)

#define IDebugSymbolProvider_GetField(This,pAddress,pAddressCur,ppField)	\
    (This)->lpVtbl -> GetField(This,pAddress,pAddressCur,ppField)

#define IDebugSymbolProvider_GetAddressesFromPosition(This,pDocPos,fStatmentOnly,ppEnumBegAddresses,ppEnumEndAddresses)	\
    (This)->lpVtbl -> GetAddressesFromPosition(This,pDocPos,fStatmentOnly,ppEnumBegAddresses,ppEnumEndAddresses)

#define IDebugSymbolProvider_GetAddressesFromContext(This,pDocContext,fStatmentOnly,ppEnumBegAddresses,ppEnumEndAddresses)	\
    (This)->lpVtbl -> GetAddressesFromContext(This,pDocContext,fStatmentOnly,ppEnumBegAddresses,ppEnumEndAddresses)

#define IDebugSymbolProvider_GetContextFromAddress(This,pAddress,ppDocContext)	\
    (This)->lpVtbl -> GetContextFromAddress(This,pAddress,ppDocContext)

#define IDebugSymbolProvider_GetLanguage(This,pAddress,pguidLanguage,pguidLanguageVendor)	\
    (This)->lpVtbl -> GetLanguage(This,pAddress,pguidLanguage,pguidLanguageVendor)

#define IDebugSymbolProvider_GetGlobalContainer(This,pField)	\
    (This)->lpVtbl -> GetGlobalContainer(This,pField)

#define IDebugSymbolProvider_GetMethodFieldsByName(This,pszFullName,nameMatch,ppEnum)	\
    (This)->lpVtbl -> GetMethodFieldsByName(This,pszFullName,nameMatch,ppEnum)

#define IDebugSymbolProvider_GetClassTypeByName(This,pszClassName,nameMatch,ppField)	\
    (This)->lpVtbl -> GetClassTypeByName(This,pszClassName,nameMatch,ppField)

#define IDebugSymbolProvider_GetNamespacesUsedAtAddress(This,pAddress,ppEnum)	\
    (This)->lpVtbl -> GetNamespacesUsedAtAddress(This,pAddress,ppEnum)

#define IDebugSymbolProvider_GetTypeByName(This,pszClassName,nameMatch,ppField)	\
    (This)->lpVtbl -> GetTypeByName(This,pszClassName,nameMatch,ppField)

#define IDebugSymbolProvider_GetNextAddress(This,pAddress,fStatmentOnly,ppAddress)	\
    (This)->lpVtbl -> GetNextAddress(This,pAddress,fStatmentOnly,ppAddress)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugSymbolProvider_Initialize_Proxy( 
    IDebugSymbolProvider * This,
    /* [in] */ IDebugEngineSymbolProviderServices *pServices);


void __RPC_STUB IDebugSymbolProvider_Initialize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSymbolProvider_Uninitialize_Proxy( 
    IDebugSymbolProvider * This);


void __RPC_STUB IDebugSymbolProvider_Uninitialize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSymbolProvider_GetContainerField_Proxy( 
    IDebugSymbolProvider * This,
    /* [in] */ IDebugAddress *pAddress,
    /* [out] */ IDebugContainerField **ppContainerField);


void __RPC_STUB IDebugSymbolProvider_GetContainerField_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSymbolProvider_GetField_Proxy( 
    IDebugSymbolProvider * This,
    /* [in] */ IDebugAddress *pAddress,
    /* [in] */ IDebugAddress *pAddressCur,
    /* [out] */ IDebugField **ppField);


void __RPC_STUB IDebugSymbolProvider_GetField_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSymbolProvider_GetAddressesFromPosition_Proxy( 
    IDebugSymbolProvider * This,
    /* [in] */ IDebugDocumentPosition2 *pDocPos,
    /* [in] */ BOOL fStatmentOnly,
    /* [out] */ IEnumDebugAddresses **ppEnumBegAddresses,
    /* [out] */ IEnumDebugAddresses **ppEnumEndAddresses);


void __RPC_STUB IDebugSymbolProvider_GetAddressesFromPosition_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSymbolProvider_GetAddressesFromContext_Proxy( 
    IDebugSymbolProvider * This,
    /* [in] */ IDebugDocumentContext2 *pDocContext,
    /* [in] */ BOOL fStatmentOnly,
    /* [out] */ IEnumDebugAddresses **ppEnumBegAddresses,
    /* [out] */ IEnumDebugAddresses **ppEnumEndAddresses);


void __RPC_STUB IDebugSymbolProvider_GetAddressesFromContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSymbolProvider_GetContextFromAddress_Proxy( 
    IDebugSymbolProvider * This,
    /* [in] */ IDebugAddress *pAddress,
    /* [out] */ IDebugDocumentContext2 **ppDocContext);


void __RPC_STUB IDebugSymbolProvider_GetContextFromAddress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSymbolProvider_GetLanguage_Proxy( 
    IDebugSymbolProvider * This,
    /* [in] */ IDebugAddress *pAddress,
    /* [out] */ GUID *pguidLanguage,
    /* [out] */ GUID *pguidLanguageVendor);


void __RPC_STUB IDebugSymbolProvider_GetLanguage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSymbolProvider_GetGlobalContainer_Proxy( 
    IDebugSymbolProvider * This,
    /* [out] */ IDebugContainerField **pField);


void __RPC_STUB IDebugSymbolProvider_GetGlobalContainer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSymbolProvider_GetMethodFieldsByName_Proxy( 
    IDebugSymbolProvider * This,
    /* [full][in] */ LPCOLESTR pszFullName,
    /* [in] */ NAME_MATCH nameMatch,
    /* [out] */ IEnumDebugFields **ppEnum);


void __RPC_STUB IDebugSymbolProvider_GetMethodFieldsByName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSymbolProvider_GetClassTypeByName_Proxy( 
    IDebugSymbolProvider * This,
    /* [full][in] */ LPCOLESTR pszClassName,
    /* [in] */ NAME_MATCH nameMatch,
    /* [out] */ IDebugClassField **ppField);


void __RPC_STUB IDebugSymbolProvider_GetClassTypeByName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSymbolProvider_GetNamespacesUsedAtAddress_Proxy( 
    IDebugSymbolProvider * This,
    /* [in] */ IDebugAddress *pAddress,
    /* [out] */ IEnumDebugFields **ppEnum);


void __RPC_STUB IDebugSymbolProvider_GetNamespacesUsedAtAddress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSymbolProvider_GetTypeByName_Proxy( 
    IDebugSymbolProvider * This,
    /* [full][in] */ LPCOLESTR pszClassName,
    /* [in] */ NAME_MATCH nameMatch,
    /* [out] */ IDebugField **ppField);


void __RPC_STUB IDebugSymbolProvider_GetTypeByName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugSymbolProvider_GetNextAddress_Proxy( 
    IDebugSymbolProvider * This,
    /* [in] */ IDebugAddress *pAddress,
    /* [in] */ BOOL fStatmentOnly,
    /* [out] */ IDebugAddress **ppAddress);


void __RPC_STUB IDebugSymbolProvider_GetNextAddress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugSymbolProvider_INTERFACE_DEFINED__ */


#ifndef __IDebugComPlusSymbolProvider_INTERFACE_DEFINED__
#define __IDebugComPlusSymbolProvider_INTERFACE_DEFINED__

/* interface IDebugComPlusSymbolProvider */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugComPlusSymbolProvider;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c2e34eaf-8b9d-11d2-9014-00c04fa38338")
    IDebugComPlusSymbolProvider : public IDebugSymbolProvider
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE LoadSymbols( 
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule,
            /* [in] */ ULONGLONG baseAddress,
            /* [in] */ IUnknown *pUnkMetadataImport,
            /* [in] */ BSTR bstrModuleName,
            /* [in] */ BSTR bstrSymSearchPath) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UnloadSymbols( 
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetEntryPoint( 
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule,
            /* [out] */ IDebugAddress **ppAddress) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetTypeFromAddress( 
            /* [in] */ IDebugAddress *pAddress,
            /* [out] */ IDebugField **ppField) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UpdateSymbols( 
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule,
            /* [in] */ IStream *pUpdateStream) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateTypeFromPrimitive( 
            /* [in] */ DWORD dwPrimType,
            /* [in] */ IDebugAddress *pAddress,
            /* [in] */ IDebugField **ppType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetFunctionLineOffset( 
            /* [in] */ IDebugAddress *pAddress,
            /* [in] */ DWORD dwLine,
            /* [out] */ IDebugAddress **ppNewAddress) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAddressesInModuleFromPosition( 
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule,
            /* [in] */ IDebugDocumentPosition2 *pDocPos,
            /* [in] */ BOOL fStatmentOnly,
            /* [out] */ IEnumDebugAddresses **ppEnumBegAddresses,
            /* [out] */ IEnumDebugAddresses **ppEnumEndAddresses) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetArrayTypeFromAddress( 
            /* [in] */ IDebugAddress *pAddress,
            /* [length_is][size_is][in] */ BYTE *pSig,
            /* [in] */ DWORD dwSigLength,
            /* [out] */ IDebugField **ppField) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSymAttribute( 
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule,
            /* [in] */ _mdToken tokParent,
            /* [in] */ LPOLESTR pstrName,
            /* [in] */ ULONG32 cBuffer,
            /* [out] */ ULONG32 *pcBuffer,
            /* [length_is][size_is][out] */ BYTE buffer[  ]) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ReplaceSymbols( 
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule,
            /* [in] */ IStream *pStream) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AreSymbolsLoaded( 
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LoadSymbolsFromStream( 
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule,
            /* [in] */ ULONGLONG baseAddress,
            /* [in] */ IUnknown *pUnkMetadataImport,
            /* [in] */ IStream *pStream) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSymUnmanagedReader( 
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule,
            /* [out] */ IUnknown **ppSymUnmanagedReader) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAttributedClassesinModule( 
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule,
            /* [in] */ LPOLESTR pstrAttribute,
            /* [out] */ IEnumDebugFields **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAttributedClassesForLanguage( 
            /* [in] */ GUID guidLanguage,
            /* [in] */ LPOLESTR pstrAttribute,
            /* [out] */ IEnumDebugFields **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsHiddenCode( 
            /* [in] */ IDebugAddress *pAddress) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsFunctionDeleted( 
            /* [in] */ IDebugAddress *pAddress) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetNameFromToken( 
            /* [in] */ IUnknown *pMetadataImport,
            /* [in] */ DWORD dwToken,
            /* [out] */ BSTR *pbstrName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsFunctionStale( 
            /* [in] */ IDebugAddress *pAddress) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetLocalVariablelayout( 
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule,
            /* [in] */ ULONG32 cMethods,
            /* [size_is][in] */ _mdToken rgMethodTokens[  ],
            /* [out] */ IStream **pStreamLayout) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAssemblyName( 
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule,
            /* [out] */ BSTR *pbstrName) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugComPlusSymbolProviderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugComPlusSymbolProvider * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugComPlusSymbolProvider * This);
        
        HRESULT ( STDMETHODCALLTYPE *Initialize )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ IDebugEngineSymbolProviderServices *pServices);
        
        HRESULT ( STDMETHODCALLTYPE *Uninitialize )( 
            IDebugComPlusSymbolProvider * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetContainerField )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ IDebugAddress *pAddress,
            /* [out] */ IDebugContainerField **ppContainerField);
        
        HRESULT ( STDMETHODCALLTYPE *GetField )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ IDebugAddress *pAddress,
            /* [in] */ IDebugAddress *pAddressCur,
            /* [out] */ IDebugField **ppField);
        
        HRESULT ( STDMETHODCALLTYPE *GetAddressesFromPosition )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ IDebugDocumentPosition2 *pDocPos,
            /* [in] */ BOOL fStatmentOnly,
            /* [out] */ IEnumDebugAddresses **ppEnumBegAddresses,
            /* [out] */ IEnumDebugAddresses **ppEnumEndAddresses);
        
        HRESULT ( STDMETHODCALLTYPE *GetAddressesFromContext )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ IDebugDocumentContext2 *pDocContext,
            /* [in] */ BOOL fStatmentOnly,
            /* [out] */ IEnumDebugAddresses **ppEnumBegAddresses,
            /* [out] */ IEnumDebugAddresses **ppEnumEndAddresses);
        
        HRESULT ( STDMETHODCALLTYPE *GetContextFromAddress )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ IDebugAddress *pAddress,
            /* [out] */ IDebugDocumentContext2 **ppDocContext);
        
        HRESULT ( STDMETHODCALLTYPE *GetLanguage )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ IDebugAddress *pAddress,
            /* [out] */ GUID *pguidLanguage,
            /* [out] */ GUID *pguidLanguageVendor);
        
        HRESULT ( STDMETHODCALLTYPE *GetGlobalContainer )( 
            IDebugComPlusSymbolProvider * This,
            /* [out] */ IDebugContainerField **pField);
        
        HRESULT ( STDMETHODCALLTYPE *GetMethodFieldsByName )( 
            IDebugComPlusSymbolProvider * This,
            /* [full][in] */ LPCOLESTR pszFullName,
            /* [in] */ NAME_MATCH nameMatch,
            /* [out] */ IEnumDebugFields **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassTypeByName )( 
            IDebugComPlusSymbolProvider * This,
            /* [full][in] */ LPCOLESTR pszClassName,
            /* [in] */ NAME_MATCH nameMatch,
            /* [out] */ IDebugClassField **ppField);
        
        HRESULT ( STDMETHODCALLTYPE *GetNamespacesUsedAtAddress )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ IDebugAddress *pAddress,
            /* [out] */ IEnumDebugFields **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeByName )( 
            IDebugComPlusSymbolProvider * This,
            /* [full][in] */ LPCOLESTR pszClassName,
            /* [in] */ NAME_MATCH nameMatch,
            /* [out] */ IDebugField **ppField);
        
        HRESULT ( STDMETHODCALLTYPE *GetNextAddress )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ IDebugAddress *pAddress,
            /* [in] */ BOOL fStatmentOnly,
            /* [out] */ IDebugAddress **ppAddress);
        
        HRESULT ( STDMETHODCALLTYPE *LoadSymbols )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule,
            /* [in] */ ULONGLONG baseAddress,
            /* [in] */ IUnknown *pUnkMetadataImport,
            /* [in] */ BSTR bstrModuleName,
            /* [in] */ BSTR bstrSymSearchPath);
        
        HRESULT ( STDMETHODCALLTYPE *UnloadSymbols )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule);
        
        HRESULT ( STDMETHODCALLTYPE *GetEntryPoint )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule,
            /* [out] */ IDebugAddress **ppAddress);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeFromAddress )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ IDebugAddress *pAddress,
            /* [out] */ IDebugField **ppField);
        
        HRESULT ( STDMETHODCALLTYPE *UpdateSymbols )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule,
            /* [in] */ IStream *pUpdateStream);
        
        HRESULT ( STDMETHODCALLTYPE *CreateTypeFromPrimitive )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ DWORD dwPrimType,
            /* [in] */ IDebugAddress *pAddress,
            /* [in] */ IDebugField **ppType);
        
        HRESULT ( STDMETHODCALLTYPE *GetFunctionLineOffset )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ IDebugAddress *pAddress,
            /* [in] */ DWORD dwLine,
            /* [out] */ IDebugAddress **ppNewAddress);
        
        HRESULT ( STDMETHODCALLTYPE *GetAddressesInModuleFromPosition )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule,
            /* [in] */ IDebugDocumentPosition2 *pDocPos,
            /* [in] */ BOOL fStatmentOnly,
            /* [out] */ IEnumDebugAddresses **ppEnumBegAddresses,
            /* [out] */ IEnumDebugAddresses **ppEnumEndAddresses);
        
        HRESULT ( STDMETHODCALLTYPE *GetArrayTypeFromAddress )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ IDebugAddress *pAddress,
            /* [length_is][size_is][in] */ BYTE *pSig,
            /* [in] */ DWORD dwSigLength,
            /* [out] */ IDebugField **ppField);
        
        HRESULT ( STDMETHODCALLTYPE *GetSymAttribute )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule,
            /* [in] */ _mdToken tokParent,
            /* [in] */ LPOLESTR pstrName,
            /* [in] */ ULONG32 cBuffer,
            /* [out] */ ULONG32 *pcBuffer,
            /* [length_is][size_is][out] */ BYTE buffer[  ]);
        
        HRESULT ( STDMETHODCALLTYPE *ReplaceSymbols )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule,
            /* [in] */ IStream *pStream);
        
        HRESULT ( STDMETHODCALLTYPE *AreSymbolsLoaded )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule);
        
        HRESULT ( STDMETHODCALLTYPE *LoadSymbolsFromStream )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule,
            /* [in] */ ULONGLONG baseAddress,
            /* [in] */ IUnknown *pUnkMetadataImport,
            /* [in] */ IStream *pStream);
        
        HRESULT ( STDMETHODCALLTYPE *GetSymUnmanagedReader )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule,
            /* [out] */ IUnknown **ppSymUnmanagedReader);
        
        HRESULT ( STDMETHODCALLTYPE *GetAttributedClassesinModule )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule,
            /* [in] */ LPOLESTR pstrAttribute,
            /* [out] */ IEnumDebugFields **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetAttributedClassesForLanguage )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ GUID guidLanguage,
            /* [in] */ LPOLESTR pstrAttribute,
            /* [out] */ IEnumDebugFields **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *IsHiddenCode )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ IDebugAddress *pAddress);
        
        HRESULT ( STDMETHODCALLTYPE *IsFunctionDeleted )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ IDebugAddress *pAddress);
        
        HRESULT ( STDMETHODCALLTYPE *GetNameFromToken )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ IUnknown *pMetadataImport,
            /* [in] */ DWORD dwToken,
            /* [out] */ BSTR *pbstrName);
        
        HRESULT ( STDMETHODCALLTYPE *IsFunctionStale )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ IDebugAddress *pAddress);
        
        HRESULT ( STDMETHODCALLTYPE *GetLocalVariablelayout )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule,
            /* [in] */ ULONG32 cMethods,
            /* [size_is][in] */ _mdToken rgMethodTokens[  ],
            /* [out] */ IStream **pStreamLayout);
        
        HRESULT ( STDMETHODCALLTYPE *GetAssemblyName )( 
            IDebugComPlusSymbolProvider * This,
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule,
            /* [out] */ BSTR *pbstrName);
        
        END_INTERFACE
    } IDebugComPlusSymbolProviderVtbl;

    interface IDebugComPlusSymbolProvider
    {
        CONST_VTBL struct IDebugComPlusSymbolProviderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugComPlusSymbolProvider_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugComPlusSymbolProvider_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugComPlusSymbolProvider_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugComPlusSymbolProvider_Initialize(This,pServices)	\
    (This)->lpVtbl -> Initialize(This,pServices)

#define IDebugComPlusSymbolProvider_Uninitialize(This)	\
    (This)->lpVtbl -> Uninitialize(This)

#define IDebugComPlusSymbolProvider_GetContainerField(This,pAddress,ppContainerField)	\
    (This)->lpVtbl -> GetContainerField(This,pAddress,ppContainerField)

#define IDebugComPlusSymbolProvider_GetField(This,pAddress,pAddressCur,ppField)	\
    (This)->lpVtbl -> GetField(This,pAddress,pAddressCur,ppField)

#define IDebugComPlusSymbolProvider_GetAddressesFromPosition(This,pDocPos,fStatmentOnly,ppEnumBegAddresses,ppEnumEndAddresses)	\
    (This)->lpVtbl -> GetAddressesFromPosition(This,pDocPos,fStatmentOnly,ppEnumBegAddresses,ppEnumEndAddresses)

#define IDebugComPlusSymbolProvider_GetAddressesFromContext(This,pDocContext,fStatmentOnly,ppEnumBegAddresses,ppEnumEndAddresses)	\
    (This)->lpVtbl -> GetAddressesFromContext(This,pDocContext,fStatmentOnly,ppEnumBegAddresses,ppEnumEndAddresses)

#define IDebugComPlusSymbolProvider_GetContextFromAddress(This,pAddress,ppDocContext)	\
    (This)->lpVtbl -> GetContextFromAddress(This,pAddress,ppDocContext)

#define IDebugComPlusSymbolProvider_GetLanguage(This,pAddress,pguidLanguage,pguidLanguageVendor)	\
    (This)->lpVtbl -> GetLanguage(This,pAddress,pguidLanguage,pguidLanguageVendor)

#define IDebugComPlusSymbolProvider_GetGlobalContainer(This,pField)	\
    (This)->lpVtbl -> GetGlobalContainer(This,pField)

#define IDebugComPlusSymbolProvider_GetMethodFieldsByName(This,pszFullName,nameMatch,ppEnum)	\
    (This)->lpVtbl -> GetMethodFieldsByName(This,pszFullName,nameMatch,ppEnum)

#define IDebugComPlusSymbolProvider_GetClassTypeByName(This,pszClassName,nameMatch,ppField)	\
    (This)->lpVtbl -> GetClassTypeByName(This,pszClassName,nameMatch,ppField)

#define IDebugComPlusSymbolProvider_GetNamespacesUsedAtAddress(This,pAddress,ppEnum)	\
    (This)->lpVtbl -> GetNamespacesUsedAtAddress(This,pAddress,ppEnum)

#define IDebugComPlusSymbolProvider_GetTypeByName(This,pszClassName,nameMatch,ppField)	\
    (This)->lpVtbl -> GetTypeByName(This,pszClassName,nameMatch,ppField)

#define IDebugComPlusSymbolProvider_GetNextAddress(This,pAddress,fStatmentOnly,ppAddress)	\
    (This)->lpVtbl -> GetNextAddress(This,pAddress,fStatmentOnly,ppAddress)


#define IDebugComPlusSymbolProvider_LoadSymbols(This,ulAppDomainID,guidModule,baseAddress,pUnkMetadataImport,bstrModuleName,bstrSymSearchPath)	\
    (This)->lpVtbl -> LoadSymbols(This,ulAppDomainID,guidModule,baseAddress,pUnkMetadataImport,bstrModuleName,bstrSymSearchPath)

#define IDebugComPlusSymbolProvider_UnloadSymbols(This,ulAppDomainID,guidModule)	\
    (This)->lpVtbl -> UnloadSymbols(This,ulAppDomainID,guidModule)

#define IDebugComPlusSymbolProvider_GetEntryPoint(This,ulAppDomainID,guidModule,ppAddress)	\
    (This)->lpVtbl -> GetEntryPoint(This,ulAppDomainID,guidModule,ppAddress)

#define IDebugComPlusSymbolProvider_GetTypeFromAddress(This,pAddress,ppField)	\
    (This)->lpVtbl -> GetTypeFromAddress(This,pAddress,ppField)

#define IDebugComPlusSymbolProvider_UpdateSymbols(This,ulAppDomainID,guidModule,pUpdateStream)	\
    (This)->lpVtbl -> UpdateSymbols(This,ulAppDomainID,guidModule,pUpdateStream)

#define IDebugComPlusSymbolProvider_CreateTypeFromPrimitive(This,dwPrimType,pAddress,ppType)	\
    (This)->lpVtbl -> CreateTypeFromPrimitive(This,dwPrimType,pAddress,ppType)

#define IDebugComPlusSymbolProvider_GetFunctionLineOffset(This,pAddress,dwLine,ppNewAddress)	\
    (This)->lpVtbl -> GetFunctionLineOffset(This,pAddress,dwLine,ppNewAddress)

#define IDebugComPlusSymbolProvider_GetAddressesInModuleFromPosition(This,ulAppDomainID,guidModule,pDocPos,fStatmentOnly,ppEnumBegAddresses,ppEnumEndAddresses)	\
    (This)->lpVtbl -> GetAddressesInModuleFromPosition(This,ulAppDomainID,guidModule,pDocPos,fStatmentOnly,ppEnumBegAddresses,ppEnumEndAddresses)

#define IDebugComPlusSymbolProvider_GetArrayTypeFromAddress(This,pAddress,pSig,dwSigLength,ppField)	\
    (This)->lpVtbl -> GetArrayTypeFromAddress(This,pAddress,pSig,dwSigLength,ppField)

#define IDebugComPlusSymbolProvider_GetSymAttribute(This,ulAppDomainID,guidModule,tokParent,pstrName,cBuffer,pcBuffer,buffer)	\
    (This)->lpVtbl -> GetSymAttribute(This,ulAppDomainID,guidModule,tokParent,pstrName,cBuffer,pcBuffer,buffer)

#define IDebugComPlusSymbolProvider_ReplaceSymbols(This,ulAppDomainID,guidModule,pStream)	\
    (This)->lpVtbl -> ReplaceSymbols(This,ulAppDomainID,guidModule,pStream)

#define IDebugComPlusSymbolProvider_AreSymbolsLoaded(This,ulAppDomainID,guidModule)	\
    (This)->lpVtbl -> AreSymbolsLoaded(This,ulAppDomainID,guidModule)

#define IDebugComPlusSymbolProvider_LoadSymbolsFromStream(This,ulAppDomainID,guidModule,baseAddress,pUnkMetadataImport,pStream)	\
    (This)->lpVtbl -> LoadSymbolsFromStream(This,ulAppDomainID,guidModule,baseAddress,pUnkMetadataImport,pStream)

#define IDebugComPlusSymbolProvider_GetSymUnmanagedReader(This,ulAppDomainID,guidModule,ppSymUnmanagedReader)	\
    (This)->lpVtbl -> GetSymUnmanagedReader(This,ulAppDomainID,guidModule,ppSymUnmanagedReader)

#define IDebugComPlusSymbolProvider_GetAttributedClassesinModule(This,ulAppDomainID,guidModule,pstrAttribute,ppEnum)	\
    (This)->lpVtbl -> GetAttributedClassesinModule(This,ulAppDomainID,guidModule,pstrAttribute,ppEnum)

#define IDebugComPlusSymbolProvider_GetAttributedClassesForLanguage(This,guidLanguage,pstrAttribute,ppEnum)	\
    (This)->lpVtbl -> GetAttributedClassesForLanguage(This,guidLanguage,pstrAttribute,ppEnum)

#define IDebugComPlusSymbolProvider_IsHiddenCode(This,pAddress)	\
    (This)->lpVtbl -> IsHiddenCode(This,pAddress)

#define IDebugComPlusSymbolProvider_IsFunctionDeleted(This,pAddress)	\
    (This)->lpVtbl -> IsFunctionDeleted(This,pAddress)

#define IDebugComPlusSymbolProvider_GetNameFromToken(This,pMetadataImport,dwToken,pbstrName)	\
    (This)->lpVtbl -> GetNameFromToken(This,pMetadataImport,dwToken,pbstrName)

#define IDebugComPlusSymbolProvider_IsFunctionStale(This,pAddress)	\
    (This)->lpVtbl -> IsFunctionStale(This,pAddress)

#define IDebugComPlusSymbolProvider_GetLocalVariablelayout(This,ulAppDomainID,guidModule,cMethods,rgMethodTokens,pStreamLayout)	\
    (This)->lpVtbl -> GetLocalVariablelayout(This,ulAppDomainID,guidModule,cMethods,rgMethodTokens,pStreamLayout)

#define IDebugComPlusSymbolProvider_GetAssemblyName(This,ulAppDomainID,guidModule,pbstrName)	\
    (This)->lpVtbl -> GetAssemblyName(This,ulAppDomainID,guidModule,pbstrName)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugComPlusSymbolProvider_LoadSymbols_Proxy( 
    IDebugComPlusSymbolProvider * This,
    /* [in] */ ULONG32 ulAppDomainID,
    /* [in] */ GUID guidModule,
    /* [in] */ ULONGLONG baseAddress,
    /* [in] */ IUnknown *pUnkMetadataImport,
    /* [in] */ BSTR bstrModuleName,
    /* [in] */ BSTR bstrSymSearchPath);


void __RPC_STUB IDebugComPlusSymbolProvider_LoadSymbols_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugComPlusSymbolProvider_UnloadSymbols_Proxy( 
    IDebugComPlusSymbolProvider * This,
    /* [in] */ ULONG32 ulAppDomainID,
    /* [in] */ GUID guidModule);


void __RPC_STUB IDebugComPlusSymbolProvider_UnloadSymbols_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugComPlusSymbolProvider_GetEntryPoint_Proxy( 
    IDebugComPlusSymbolProvider * This,
    /* [in] */ ULONG32 ulAppDomainID,
    /* [in] */ GUID guidModule,
    /* [out] */ IDebugAddress **ppAddress);


void __RPC_STUB IDebugComPlusSymbolProvider_GetEntryPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugComPlusSymbolProvider_GetTypeFromAddress_Proxy( 
    IDebugComPlusSymbolProvider * This,
    /* [in] */ IDebugAddress *pAddress,
    /* [out] */ IDebugField **ppField);


void __RPC_STUB IDebugComPlusSymbolProvider_GetTypeFromAddress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugComPlusSymbolProvider_UpdateSymbols_Proxy( 
    IDebugComPlusSymbolProvider * This,
    /* [in] */ ULONG32 ulAppDomainID,
    /* [in] */ GUID guidModule,
    /* [in] */ IStream *pUpdateStream);


void __RPC_STUB IDebugComPlusSymbolProvider_UpdateSymbols_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugComPlusSymbolProvider_CreateTypeFromPrimitive_Proxy( 
    IDebugComPlusSymbolProvider * This,
    /* [in] */ DWORD dwPrimType,
    /* [in] */ IDebugAddress *pAddress,
    /* [in] */ IDebugField **ppType);


void __RPC_STUB IDebugComPlusSymbolProvider_CreateTypeFromPrimitive_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugComPlusSymbolProvider_GetFunctionLineOffset_Proxy( 
    IDebugComPlusSymbolProvider * This,
    /* [in] */ IDebugAddress *pAddress,
    /* [in] */ DWORD dwLine,
    /* [out] */ IDebugAddress **ppNewAddress);


void __RPC_STUB IDebugComPlusSymbolProvider_GetFunctionLineOffset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugComPlusSymbolProvider_GetAddressesInModuleFromPosition_Proxy( 
    IDebugComPlusSymbolProvider * This,
    /* [in] */ ULONG32 ulAppDomainID,
    /* [in] */ GUID guidModule,
    /* [in] */ IDebugDocumentPosition2 *pDocPos,
    /* [in] */ BOOL fStatmentOnly,
    /* [out] */ IEnumDebugAddresses **ppEnumBegAddresses,
    /* [out] */ IEnumDebugAddresses **ppEnumEndAddresses);


void __RPC_STUB IDebugComPlusSymbolProvider_GetAddressesInModuleFromPosition_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugComPlusSymbolProvider_GetArrayTypeFromAddress_Proxy( 
    IDebugComPlusSymbolProvider * This,
    /* [in] */ IDebugAddress *pAddress,
    /* [length_is][size_is][in] */ BYTE *pSig,
    /* [in] */ DWORD dwSigLength,
    /* [out] */ IDebugField **ppField);


void __RPC_STUB IDebugComPlusSymbolProvider_GetArrayTypeFromAddress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugComPlusSymbolProvider_GetSymAttribute_Proxy( 
    IDebugComPlusSymbolProvider * This,
    /* [in] */ ULONG32 ulAppDomainID,
    /* [in] */ GUID guidModule,
    /* [in] */ _mdToken tokParent,
    /* [in] */ LPOLESTR pstrName,
    /* [in] */ ULONG32 cBuffer,
    /* [out] */ ULONG32 *pcBuffer,
    /* [length_is][size_is][out] */ BYTE buffer[  ]);


void __RPC_STUB IDebugComPlusSymbolProvider_GetSymAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugComPlusSymbolProvider_ReplaceSymbols_Proxy( 
    IDebugComPlusSymbolProvider * This,
    /* [in] */ ULONG32 ulAppDomainID,
    /* [in] */ GUID guidModule,
    /* [in] */ IStream *pStream);


void __RPC_STUB IDebugComPlusSymbolProvider_ReplaceSymbols_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugComPlusSymbolProvider_AreSymbolsLoaded_Proxy( 
    IDebugComPlusSymbolProvider * This,
    /* [in] */ ULONG32 ulAppDomainID,
    /* [in] */ GUID guidModule);


void __RPC_STUB IDebugComPlusSymbolProvider_AreSymbolsLoaded_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugComPlusSymbolProvider_LoadSymbolsFromStream_Proxy( 
    IDebugComPlusSymbolProvider * This,
    /* [in] */ ULONG32 ulAppDomainID,
    /* [in] */ GUID guidModule,
    /* [in] */ ULONGLONG baseAddress,
    /* [in] */ IUnknown *pUnkMetadataImport,
    /* [in] */ IStream *pStream);


void __RPC_STUB IDebugComPlusSymbolProvider_LoadSymbolsFromStream_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugComPlusSymbolProvider_GetSymUnmanagedReader_Proxy( 
    IDebugComPlusSymbolProvider * This,
    /* [in] */ ULONG32 ulAppDomainID,
    /* [in] */ GUID guidModule,
    /* [out] */ IUnknown **ppSymUnmanagedReader);


void __RPC_STUB IDebugComPlusSymbolProvider_GetSymUnmanagedReader_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugComPlusSymbolProvider_GetAttributedClassesinModule_Proxy( 
    IDebugComPlusSymbolProvider * This,
    /* [in] */ ULONG32 ulAppDomainID,
    /* [in] */ GUID guidModule,
    /* [in] */ LPOLESTR pstrAttribute,
    /* [out] */ IEnumDebugFields **ppEnum);


void __RPC_STUB IDebugComPlusSymbolProvider_GetAttributedClassesinModule_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugComPlusSymbolProvider_GetAttributedClassesForLanguage_Proxy( 
    IDebugComPlusSymbolProvider * This,
    /* [in] */ GUID guidLanguage,
    /* [in] */ LPOLESTR pstrAttribute,
    /* [out] */ IEnumDebugFields **ppEnum);


void __RPC_STUB IDebugComPlusSymbolProvider_GetAttributedClassesForLanguage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugComPlusSymbolProvider_IsHiddenCode_Proxy( 
    IDebugComPlusSymbolProvider * This,
    /* [in] */ IDebugAddress *pAddress);


void __RPC_STUB IDebugComPlusSymbolProvider_IsHiddenCode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugComPlusSymbolProvider_IsFunctionDeleted_Proxy( 
    IDebugComPlusSymbolProvider * This,
    /* [in] */ IDebugAddress *pAddress);


void __RPC_STUB IDebugComPlusSymbolProvider_IsFunctionDeleted_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugComPlusSymbolProvider_GetNameFromToken_Proxy( 
    IDebugComPlusSymbolProvider * This,
    /* [in] */ IUnknown *pMetadataImport,
    /* [in] */ DWORD dwToken,
    /* [out] */ BSTR *pbstrName);


void __RPC_STUB IDebugComPlusSymbolProvider_GetNameFromToken_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugComPlusSymbolProvider_IsFunctionStale_Proxy( 
    IDebugComPlusSymbolProvider * This,
    /* [in] */ IDebugAddress *pAddress);


void __RPC_STUB IDebugComPlusSymbolProvider_IsFunctionStale_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugComPlusSymbolProvider_GetLocalVariablelayout_Proxy( 
    IDebugComPlusSymbolProvider * This,
    /* [in] */ ULONG32 ulAppDomainID,
    /* [in] */ GUID guidModule,
    /* [in] */ ULONG32 cMethods,
    /* [size_is][in] */ _mdToken rgMethodTokens[  ],
    /* [out] */ IStream **pStreamLayout);


void __RPC_STUB IDebugComPlusSymbolProvider_GetLocalVariablelayout_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugComPlusSymbolProvider_GetAssemblyName_Proxy( 
    IDebugComPlusSymbolProvider * This,
    /* [in] */ ULONG32 ulAppDomainID,
    /* [in] */ GUID guidModule,
    /* [out] */ BSTR *pbstrName);


void __RPC_STUB IDebugComPlusSymbolProvider_GetAssemblyName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugComPlusSymbolProvider_INTERFACE_DEFINED__ */


#ifndef __IDebugNativeSymbolProvider_INTERFACE_DEFINED__
#define __IDebugNativeSymbolProvider_INTERFACE_DEFINED__

/* interface IDebugNativeSymbolProvider */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugNativeSymbolProvider;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c2e34eb0-8b9d-11d2-9014-00c04fa38338")
    IDebugNativeSymbolProvider : public IDebugSymbolProvider
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE LoadSymbols( 
            /* [in] */ LPCOLESTR pszFileName) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugNativeSymbolProviderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugNativeSymbolProvider * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugNativeSymbolProvider * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugNativeSymbolProvider * This);
        
        HRESULT ( STDMETHODCALLTYPE *Initialize )( 
            IDebugNativeSymbolProvider * This,
            /* [in] */ IDebugEngineSymbolProviderServices *pServices);
        
        HRESULT ( STDMETHODCALLTYPE *Uninitialize )( 
            IDebugNativeSymbolProvider * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetContainerField )( 
            IDebugNativeSymbolProvider * This,
            /* [in] */ IDebugAddress *pAddress,
            /* [out] */ IDebugContainerField **ppContainerField);
        
        HRESULT ( STDMETHODCALLTYPE *GetField )( 
            IDebugNativeSymbolProvider * This,
            /* [in] */ IDebugAddress *pAddress,
            /* [in] */ IDebugAddress *pAddressCur,
            /* [out] */ IDebugField **ppField);
        
        HRESULT ( STDMETHODCALLTYPE *GetAddressesFromPosition )( 
            IDebugNativeSymbolProvider * This,
            /* [in] */ IDebugDocumentPosition2 *pDocPos,
            /* [in] */ BOOL fStatmentOnly,
            /* [out] */ IEnumDebugAddresses **ppEnumBegAddresses,
            /* [out] */ IEnumDebugAddresses **ppEnumEndAddresses);
        
        HRESULT ( STDMETHODCALLTYPE *GetAddressesFromContext )( 
            IDebugNativeSymbolProvider * This,
            /* [in] */ IDebugDocumentContext2 *pDocContext,
            /* [in] */ BOOL fStatmentOnly,
            /* [out] */ IEnumDebugAddresses **ppEnumBegAddresses,
            /* [out] */ IEnumDebugAddresses **ppEnumEndAddresses);
        
        HRESULT ( STDMETHODCALLTYPE *GetContextFromAddress )( 
            IDebugNativeSymbolProvider * This,
            /* [in] */ IDebugAddress *pAddress,
            /* [out] */ IDebugDocumentContext2 **ppDocContext);
        
        HRESULT ( STDMETHODCALLTYPE *GetLanguage )( 
            IDebugNativeSymbolProvider * This,
            /* [in] */ IDebugAddress *pAddress,
            /* [out] */ GUID *pguidLanguage,
            /* [out] */ GUID *pguidLanguageVendor);
        
        HRESULT ( STDMETHODCALLTYPE *GetGlobalContainer )( 
            IDebugNativeSymbolProvider * This,
            /* [out] */ IDebugContainerField **pField);
        
        HRESULT ( STDMETHODCALLTYPE *GetMethodFieldsByName )( 
            IDebugNativeSymbolProvider * This,
            /* [full][in] */ LPCOLESTR pszFullName,
            /* [in] */ NAME_MATCH nameMatch,
            /* [out] */ IEnumDebugFields **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassTypeByName )( 
            IDebugNativeSymbolProvider * This,
            /* [full][in] */ LPCOLESTR pszClassName,
            /* [in] */ NAME_MATCH nameMatch,
            /* [out] */ IDebugClassField **ppField);
        
        HRESULT ( STDMETHODCALLTYPE *GetNamespacesUsedAtAddress )( 
            IDebugNativeSymbolProvider * This,
            /* [in] */ IDebugAddress *pAddress,
            /* [out] */ IEnumDebugFields **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeByName )( 
            IDebugNativeSymbolProvider * This,
            /* [full][in] */ LPCOLESTR pszClassName,
            /* [in] */ NAME_MATCH nameMatch,
            /* [out] */ IDebugField **ppField);
        
        HRESULT ( STDMETHODCALLTYPE *GetNextAddress )( 
            IDebugNativeSymbolProvider * This,
            /* [in] */ IDebugAddress *pAddress,
            /* [in] */ BOOL fStatmentOnly,
            /* [out] */ IDebugAddress **ppAddress);
        
        HRESULT ( STDMETHODCALLTYPE *LoadSymbols )( 
            IDebugNativeSymbolProvider * This,
            /* [in] */ LPCOLESTR pszFileName);
        
        END_INTERFACE
    } IDebugNativeSymbolProviderVtbl;

    interface IDebugNativeSymbolProvider
    {
        CONST_VTBL struct IDebugNativeSymbolProviderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugNativeSymbolProvider_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugNativeSymbolProvider_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugNativeSymbolProvider_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugNativeSymbolProvider_Initialize(This,pServices)	\
    (This)->lpVtbl -> Initialize(This,pServices)

#define IDebugNativeSymbolProvider_Uninitialize(This)	\
    (This)->lpVtbl -> Uninitialize(This)

#define IDebugNativeSymbolProvider_GetContainerField(This,pAddress,ppContainerField)	\
    (This)->lpVtbl -> GetContainerField(This,pAddress,ppContainerField)

#define IDebugNativeSymbolProvider_GetField(This,pAddress,pAddressCur,ppField)	\
    (This)->lpVtbl -> GetField(This,pAddress,pAddressCur,ppField)

#define IDebugNativeSymbolProvider_GetAddressesFromPosition(This,pDocPos,fStatmentOnly,ppEnumBegAddresses,ppEnumEndAddresses)	\
    (This)->lpVtbl -> GetAddressesFromPosition(This,pDocPos,fStatmentOnly,ppEnumBegAddresses,ppEnumEndAddresses)

#define IDebugNativeSymbolProvider_GetAddressesFromContext(This,pDocContext,fStatmentOnly,ppEnumBegAddresses,ppEnumEndAddresses)	\
    (This)->lpVtbl -> GetAddressesFromContext(This,pDocContext,fStatmentOnly,ppEnumBegAddresses,ppEnumEndAddresses)

#define IDebugNativeSymbolProvider_GetContextFromAddress(This,pAddress,ppDocContext)	\
    (This)->lpVtbl -> GetContextFromAddress(This,pAddress,ppDocContext)

#define IDebugNativeSymbolProvider_GetLanguage(This,pAddress,pguidLanguage,pguidLanguageVendor)	\
    (This)->lpVtbl -> GetLanguage(This,pAddress,pguidLanguage,pguidLanguageVendor)

#define IDebugNativeSymbolProvider_GetGlobalContainer(This,pField)	\
    (This)->lpVtbl -> GetGlobalContainer(This,pField)

#define IDebugNativeSymbolProvider_GetMethodFieldsByName(This,pszFullName,nameMatch,ppEnum)	\
    (This)->lpVtbl -> GetMethodFieldsByName(This,pszFullName,nameMatch,ppEnum)

#define IDebugNativeSymbolProvider_GetClassTypeByName(This,pszClassName,nameMatch,ppField)	\
    (This)->lpVtbl -> GetClassTypeByName(This,pszClassName,nameMatch,ppField)

#define IDebugNativeSymbolProvider_GetNamespacesUsedAtAddress(This,pAddress,ppEnum)	\
    (This)->lpVtbl -> GetNamespacesUsedAtAddress(This,pAddress,ppEnum)

#define IDebugNativeSymbolProvider_GetTypeByName(This,pszClassName,nameMatch,ppField)	\
    (This)->lpVtbl -> GetTypeByName(This,pszClassName,nameMatch,ppField)

#define IDebugNativeSymbolProvider_GetNextAddress(This,pAddress,fStatmentOnly,ppAddress)	\
    (This)->lpVtbl -> GetNextAddress(This,pAddress,fStatmentOnly,ppAddress)


#define IDebugNativeSymbolProvider_LoadSymbols(This,pszFileName)	\
    (This)->lpVtbl -> LoadSymbols(This,pszFileName)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugNativeSymbolProvider_LoadSymbols_Proxy( 
    IDebugNativeSymbolProvider * This,
    /* [in] */ LPCOLESTR pszFileName);


void __RPC_STUB IDebugNativeSymbolProvider_LoadSymbols_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugNativeSymbolProvider_INTERFACE_DEFINED__ */


#ifndef __IDebugField_INTERFACE_DEFINED__
#define __IDebugField_INTERFACE_DEFINED__

/* interface IDebugField */
/* [unique][uuid][object] */ 


enum __MIDL_IDebugField_0001
    {	FIELD_MOD_NONE	= 0,
	FIELD_MOD_ACCESS_NONE	= 0x1,
	FIELD_MOD_ACCESS_PUBLIC	= 0x2,
	FIELD_MOD_ACCESS_PROTECTED	= 0x4,
	FIELD_MOD_ACCESS_PRIVATE	= 0x8,
	FIELD_MOD_NOMODIFIERS	= 0x10,
	FIELD_MOD_STATIC	= 0x20,
	FIELD_MOD_CONSTANT	= 0x40,
	FIELD_MOD_TRANSIENT	= 0x80,
	FIELD_MOD_VOLATILE	= 0x100,
	FIELD_MOD_ABSTRACT	= 0x200,
	FIELD_MOD_NATIVE	= 0x400,
	FIELD_MOD_SYNCHRONIZED	= 0x800,
	FIELD_MOD_VIRTUAL	= 0x1000,
	FIELD_MOD_INTERFACE	= 0x2000,
	FIELD_MOD_FINAL	= 0x4000,
	FIELD_MOD_SENTINEL	= 0x8000,
	FIELD_MOD_INNERCLASS	= 0x10000,
	FIELD_MOD_OPTIONAL	= 0x20000,
	FIELD_MOD_BYREF	= 0x40000,
	FIELD_MOD_HIDDEN	= 0x80000,
	FIELD_MOD_MARSHALASOBJECT	= 0x100000,
	FIELD_MOD_WRITEONLY	= 0x80000000,
	FIELD_MOD_ACCESS_MASK	= 0xff,
	FIELD_MOD_MASK	= 0xffffff00,
	FIELD_MOD_ALL	= 0x7fffffff
    } ;
typedef DWORD FIELD_MODIFIERS;


enum __MIDL_IDebugField_0002
    {	FIELD_KIND_NONE	= 0,
	FIELD_KIND_TYPE	= 0x1,
	FIELD_KIND_SYMBOL	= 0x2,
	FIELD_TYPE_PRIMITIVE	= 0x10,
	FIELD_TYPE_STRUCT	= 0x20,
	FIELD_TYPE_CLASS	= 0x40,
	FIELD_TYPE_INTERFACE	= 0x80,
	FIELD_TYPE_UNION	= 0x100,
	FIELD_TYPE_ARRAY	= 0x200,
	FIELD_TYPE_METHOD	= 0x400,
	FIELD_TYPE_BLOCK	= 0x800,
	FIELD_TYPE_POINTER	= 0x1000,
	FIELD_TYPE_ENUM	= 0x2000,
	FIELD_TYPE_LABEL	= 0x4000,
	FIELD_TYPE_TYPEDEF	= 0x8000,
	FIELD_TYPE_BITFIELD	= 0x10000,
	FIELD_TYPE_NAMESPACE	= 0x20000,
	FIELD_TYPE_MODULE	= 0x40000,
	FIELD_TYPE_DYNAMIC	= 0x80000,
	FIELD_TYPE_PROP	= 0x100000,
	FIELD_TYPE_INNERCLASS	= 0x200000,
	FIELD_TYPE_REFERENCE	= 0x400000,
	FIELD_TYPE_EXTENDED	= 0x800000,
	FIELD_SYM_MEMBER	= 0x1000000,
	FIELD_SYM_LOCAL	= 0x2000000,
	FIELD_SYM_PARAM	= 0x4000000,
	FIELD_SYM_THIS	= 0x8000000,
	FIELD_SYM_GLOBAL	= 0x10000000,
	FIELD_SYM_PROP_GETTER	= 0x20000000,
	FIELD_SYM_PROP_SETTER	= 0x40000000,
	FIELD_SYM_EXTENED	= 0x80000000,
	FIELD_KIND_MASK	= 0xf,
	FIELD_TYPE_MASK	= 0xfffff0,
	FIELD_SYM_MASK	= 0xff000000,
	FIELD_KIND_ALL	= 0xffffffff
    } ;
typedef DWORD FIELD_KIND;


enum __MIDL_IDebugField_0003
    {	FIF_FULLNAME	= 0x1,
	FIF_NAME	= 0x2,
	FIF_TYPE	= 0x4,
	FIF_MODIFIERS	= 0x8,
	FIF_ALL	= 0xffffffff
    } ;
typedef DWORD FIELD_INFO_FIELDS;

typedef struct _tagFieldInfo
    {
    FIELD_INFO_FIELDS dwFields;
    BSTR bstrFullName;
    BSTR bstrName;
    BSTR bstrType;
    FIELD_MODIFIERS dwModifiers;
    } 	FIELD_INFO;


enum __MIDL_IDebugField_0004
    {	TYPE_KIND_METADATA	= 0x1,
	TYPE_KIND_PDB	= 0x2
    } ;
typedef DWORD dwTYPE_KIND;

typedef struct _tagTYPE_METADATA
    {
    ULONG32 ulAppDomainID;
    GUID guidModule;
    _mdToken tokClass;
    } 	METADATA_TYPE;

typedef struct _tagTYPE_PDB
    {
    ULONG32 ulAppDomainID;
    GUID guidModule;
    DWORD symid;
    } 	PDB_TYPE;

typedef struct _tagTYPE_INFO_UNION
    {
    dwTYPE_KIND dwKind;
    /* [switch_is] */ /* [switch_type] */ union __MIDL_IDebugField_0005
        {
        /* [case()] */ METADATA_TYPE typeMeta;
        /* [case()] */ PDB_TYPE typePdb;
        /* [default] */ DWORD unused;
        } 	type;
    } 	TYPE_INFO;


EXTERN_C const IID IID_IDebugField;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c2e34eb1-8b9d-11d2-9014-00c04fa38338")
    IDebugField : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetInfo( 
            /* [in] */ FIELD_INFO_FIELDS dwFields,
            /* [out] */ FIELD_INFO *pFieldInfo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetKind( 
            /* [out] */ FIELD_KIND *pdwKind) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetType( 
            /* [out] */ IDebugField **ppType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetContainer( 
            /* [out] */ IDebugContainerField **ppContainerField) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAddress( 
            /* [out] */ IDebugAddress **ppAddress) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSize( 
            /* [out] */ DWORD *pdwSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetExtendedInfo( 
            /* [in] */ REFGUID guidExtendedInfo,
            /* [length_is][size_is][out] */ BYTE **prgBuffer,
            /* [out][in] */ DWORD *pdwLen) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Equal( 
            /* [in] */ IDebugField *pField) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetTypeInfo( 
            /* [out] */ TYPE_INFO *pTypeInfo) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugFieldVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugField * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugField * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugField * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IDebugField * This,
            /* [in] */ FIELD_INFO_FIELDS dwFields,
            /* [out] */ FIELD_INFO *pFieldInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetKind )( 
            IDebugField * This,
            /* [out] */ FIELD_KIND *pdwKind);
        
        HRESULT ( STDMETHODCALLTYPE *GetType )( 
            IDebugField * This,
            /* [out] */ IDebugField **ppType);
        
        HRESULT ( STDMETHODCALLTYPE *GetContainer )( 
            IDebugField * This,
            /* [out] */ IDebugContainerField **ppContainerField);
        
        HRESULT ( STDMETHODCALLTYPE *GetAddress )( 
            IDebugField * This,
            /* [out] */ IDebugAddress **ppAddress);
        
        HRESULT ( STDMETHODCALLTYPE *GetSize )( 
            IDebugField * This,
            /* [out] */ DWORD *pdwSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetExtendedInfo )( 
            IDebugField * This,
            /* [in] */ REFGUID guidExtendedInfo,
            /* [length_is][size_is][out] */ BYTE **prgBuffer,
            /* [out][in] */ DWORD *pdwLen);
        
        HRESULT ( STDMETHODCALLTYPE *Equal )( 
            IDebugField * This,
            /* [in] */ IDebugField *pField);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDebugField * This,
            /* [out] */ TYPE_INFO *pTypeInfo);
        
        END_INTERFACE
    } IDebugFieldVtbl;

    interface IDebugField
    {
        CONST_VTBL struct IDebugFieldVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugField_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugField_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugField_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugField_GetInfo(This,dwFields,pFieldInfo)	\
    (This)->lpVtbl -> GetInfo(This,dwFields,pFieldInfo)

#define IDebugField_GetKind(This,pdwKind)	\
    (This)->lpVtbl -> GetKind(This,pdwKind)

#define IDebugField_GetType(This,ppType)	\
    (This)->lpVtbl -> GetType(This,ppType)

#define IDebugField_GetContainer(This,ppContainerField)	\
    (This)->lpVtbl -> GetContainer(This,ppContainerField)

#define IDebugField_GetAddress(This,ppAddress)	\
    (This)->lpVtbl -> GetAddress(This,ppAddress)

#define IDebugField_GetSize(This,pdwSize)	\
    (This)->lpVtbl -> GetSize(This,pdwSize)

#define IDebugField_GetExtendedInfo(This,guidExtendedInfo,prgBuffer,pdwLen)	\
    (This)->lpVtbl -> GetExtendedInfo(This,guidExtendedInfo,prgBuffer,pdwLen)

#define IDebugField_Equal(This,pField)	\
    (This)->lpVtbl -> Equal(This,pField)

#define IDebugField_GetTypeInfo(This,pTypeInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,pTypeInfo)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugField_GetInfo_Proxy( 
    IDebugField * This,
    /* [in] */ FIELD_INFO_FIELDS dwFields,
    /* [out] */ FIELD_INFO *pFieldInfo);


void __RPC_STUB IDebugField_GetInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugField_GetKind_Proxy( 
    IDebugField * This,
    /* [out] */ FIELD_KIND *pdwKind);


void __RPC_STUB IDebugField_GetKind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugField_GetType_Proxy( 
    IDebugField * This,
    /* [out] */ IDebugField **ppType);


void __RPC_STUB IDebugField_GetType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugField_GetContainer_Proxy( 
    IDebugField * This,
    /* [out] */ IDebugContainerField **ppContainerField);


void __RPC_STUB IDebugField_GetContainer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugField_GetAddress_Proxy( 
    IDebugField * This,
    /* [out] */ IDebugAddress **ppAddress);


void __RPC_STUB IDebugField_GetAddress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugField_GetSize_Proxy( 
    IDebugField * This,
    /* [out] */ DWORD *pdwSize);


void __RPC_STUB IDebugField_GetSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugField_GetExtendedInfo_Proxy( 
    IDebugField * This,
    /* [in] */ REFGUID guidExtendedInfo,
    /* [length_is][size_is][out] */ BYTE **prgBuffer,
    /* [out][in] */ DWORD *pdwLen);


void __RPC_STUB IDebugField_GetExtendedInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugField_Equal_Proxy( 
    IDebugField * This,
    /* [in] */ IDebugField *pField);


void __RPC_STUB IDebugField_Equal_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugField_GetTypeInfo_Proxy( 
    IDebugField * This,
    /* [out] */ TYPE_INFO *pTypeInfo);


void __RPC_STUB IDebugField_GetTypeInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugField_INTERFACE_DEFINED__ */


#ifndef __IDebugContainerField_INTERFACE_DEFINED__
#define __IDebugContainerField_INTERFACE_DEFINED__

/* interface IDebugContainerField */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugContainerField;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c2e34eb2-8b9d-11d2-9014-00c04fa38338")
    IDebugContainerField : public IDebugField
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE EnumFields( 
            /* [in] */ FIELD_KIND dwKindFilter,
            /* [in] */ FIELD_MODIFIERS dwModifiersFilter,
            /* [full][in] */ LPCOLESTR pszNameFilter,
            /* [in] */ NAME_MATCH nameMatch,
            /* [out] */ IEnumDebugFields **ppEnum) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugContainerFieldVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugContainerField * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugContainerField * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugContainerField * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IDebugContainerField * This,
            /* [in] */ FIELD_INFO_FIELDS dwFields,
            /* [out] */ FIELD_INFO *pFieldInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetKind )( 
            IDebugContainerField * This,
            /* [out] */ FIELD_KIND *pdwKind);
        
        HRESULT ( STDMETHODCALLTYPE *GetType )( 
            IDebugContainerField * This,
            /* [out] */ IDebugField **ppType);
        
        HRESULT ( STDMETHODCALLTYPE *GetContainer )( 
            IDebugContainerField * This,
            /* [out] */ IDebugContainerField **ppContainerField);
        
        HRESULT ( STDMETHODCALLTYPE *GetAddress )( 
            IDebugContainerField * This,
            /* [out] */ IDebugAddress **ppAddress);
        
        HRESULT ( STDMETHODCALLTYPE *GetSize )( 
            IDebugContainerField * This,
            /* [out] */ DWORD *pdwSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetExtendedInfo )( 
            IDebugContainerField * This,
            /* [in] */ REFGUID guidExtendedInfo,
            /* [length_is][size_is][out] */ BYTE **prgBuffer,
            /* [out][in] */ DWORD *pdwLen);
        
        HRESULT ( STDMETHODCALLTYPE *Equal )( 
            IDebugContainerField * This,
            /* [in] */ IDebugField *pField);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDebugContainerField * This,
            /* [out] */ TYPE_INFO *pTypeInfo);
        
        HRESULT ( STDMETHODCALLTYPE *EnumFields )( 
            IDebugContainerField * This,
            /* [in] */ FIELD_KIND dwKindFilter,
            /* [in] */ FIELD_MODIFIERS dwModifiersFilter,
            /* [full][in] */ LPCOLESTR pszNameFilter,
            /* [in] */ NAME_MATCH nameMatch,
            /* [out] */ IEnumDebugFields **ppEnum);
        
        END_INTERFACE
    } IDebugContainerFieldVtbl;

    interface IDebugContainerField
    {
        CONST_VTBL struct IDebugContainerFieldVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugContainerField_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugContainerField_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugContainerField_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugContainerField_GetInfo(This,dwFields,pFieldInfo)	\
    (This)->lpVtbl -> GetInfo(This,dwFields,pFieldInfo)

#define IDebugContainerField_GetKind(This,pdwKind)	\
    (This)->lpVtbl -> GetKind(This,pdwKind)

#define IDebugContainerField_GetType(This,ppType)	\
    (This)->lpVtbl -> GetType(This,ppType)

#define IDebugContainerField_GetContainer(This,ppContainerField)	\
    (This)->lpVtbl -> GetContainer(This,ppContainerField)

#define IDebugContainerField_GetAddress(This,ppAddress)	\
    (This)->lpVtbl -> GetAddress(This,ppAddress)

#define IDebugContainerField_GetSize(This,pdwSize)	\
    (This)->lpVtbl -> GetSize(This,pdwSize)

#define IDebugContainerField_GetExtendedInfo(This,guidExtendedInfo,prgBuffer,pdwLen)	\
    (This)->lpVtbl -> GetExtendedInfo(This,guidExtendedInfo,prgBuffer,pdwLen)

#define IDebugContainerField_Equal(This,pField)	\
    (This)->lpVtbl -> Equal(This,pField)

#define IDebugContainerField_GetTypeInfo(This,pTypeInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,pTypeInfo)


#define IDebugContainerField_EnumFields(This,dwKindFilter,dwModifiersFilter,pszNameFilter,nameMatch,ppEnum)	\
    (This)->lpVtbl -> EnumFields(This,dwKindFilter,dwModifiersFilter,pszNameFilter,nameMatch,ppEnum)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugContainerField_EnumFields_Proxy( 
    IDebugContainerField * This,
    /* [in] */ FIELD_KIND dwKindFilter,
    /* [in] */ FIELD_MODIFIERS dwModifiersFilter,
    /* [full][in] */ LPCOLESTR pszNameFilter,
    /* [in] */ NAME_MATCH nameMatch,
    /* [out] */ IEnumDebugFields **ppEnum);


void __RPC_STUB IDebugContainerField_EnumFields_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugContainerField_INTERFACE_DEFINED__ */


#ifndef __IDebugMethodField_INTERFACE_DEFINED__
#define __IDebugMethodField_INTERFACE_DEFINED__

/* interface IDebugMethodField */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugMethodField;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c2e34eb4-8b9d-11d2-9014-00c04fa38338")
    IDebugMethodField : public IDebugContainerField
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE EnumParameters( 
            /* [out] */ IEnumDebugFields **ppParams) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetThis( 
            /* [out] */ IDebugClassField **ppClass) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumAllLocals( 
            /* [in] */ IDebugAddress *pAddress,
            /* [out] */ IEnumDebugFields **ppLocals) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumLocals( 
            /* [in] */ IDebugAddress *pAddress,
            /* [out] */ IEnumDebugFields **ppLocals) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsCustomAttributeDefined( 
            /* [full][in] */ LPCOLESTR pszCustomAttributeName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumStaticLocals( 
            /* [out] */ IEnumDebugFields **ppLocals) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetGlobalContainer( 
            /* [out] */ IDebugClassField **ppClass) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumArguments( 
            /* [out] */ IEnumDebugFields **ppParams) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugMethodFieldVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugMethodField * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugMethodField * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugMethodField * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IDebugMethodField * This,
            /* [in] */ FIELD_INFO_FIELDS dwFields,
            /* [out] */ FIELD_INFO *pFieldInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetKind )( 
            IDebugMethodField * This,
            /* [out] */ FIELD_KIND *pdwKind);
        
        HRESULT ( STDMETHODCALLTYPE *GetType )( 
            IDebugMethodField * This,
            /* [out] */ IDebugField **ppType);
        
        HRESULT ( STDMETHODCALLTYPE *GetContainer )( 
            IDebugMethodField * This,
            /* [out] */ IDebugContainerField **ppContainerField);
        
        HRESULT ( STDMETHODCALLTYPE *GetAddress )( 
            IDebugMethodField * This,
            /* [out] */ IDebugAddress **ppAddress);
        
        HRESULT ( STDMETHODCALLTYPE *GetSize )( 
            IDebugMethodField * This,
            /* [out] */ DWORD *pdwSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetExtendedInfo )( 
            IDebugMethodField * This,
            /* [in] */ REFGUID guidExtendedInfo,
            /* [length_is][size_is][out] */ BYTE **prgBuffer,
            /* [out][in] */ DWORD *pdwLen);
        
        HRESULT ( STDMETHODCALLTYPE *Equal )( 
            IDebugMethodField * This,
            /* [in] */ IDebugField *pField);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDebugMethodField * This,
            /* [out] */ TYPE_INFO *pTypeInfo);
        
        HRESULT ( STDMETHODCALLTYPE *EnumFields )( 
            IDebugMethodField * This,
            /* [in] */ FIELD_KIND dwKindFilter,
            /* [in] */ FIELD_MODIFIERS dwModifiersFilter,
            /* [full][in] */ LPCOLESTR pszNameFilter,
            /* [in] */ NAME_MATCH nameMatch,
            /* [out] */ IEnumDebugFields **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *EnumParameters )( 
            IDebugMethodField * This,
            /* [out] */ IEnumDebugFields **ppParams);
        
        HRESULT ( STDMETHODCALLTYPE *GetThis )( 
            IDebugMethodField * This,
            /* [out] */ IDebugClassField **ppClass);
        
        HRESULT ( STDMETHODCALLTYPE *EnumAllLocals )( 
            IDebugMethodField * This,
            /* [in] */ IDebugAddress *pAddress,
            /* [out] */ IEnumDebugFields **ppLocals);
        
        HRESULT ( STDMETHODCALLTYPE *EnumLocals )( 
            IDebugMethodField * This,
            /* [in] */ IDebugAddress *pAddress,
            /* [out] */ IEnumDebugFields **ppLocals);
        
        HRESULT ( STDMETHODCALLTYPE *IsCustomAttributeDefined )( 
            IDebugMethodField * This,
            /* [full][in] */ LPCOLESTR pszCustomAttributeName);
        
        HRESULT ( STDMETHODCALLTYPE *EnumStaticLocals )( 
            IDebugMethodField * This,
            /* [out] */ IEnumDebugFields **ppLocals);
        
        HRESULT ( STDMETHODCALLTYPE *GetGlobalContainer )( 
            IDebugMethodField * This,
            /* [out] */ IDebugClassField **ppClass);
        
        HRESULT ( STDMETHODCALLTYPE *EnumArguments )( 
            IDebugMethodField * This,
            /* [out] */ IEnumDebugFields **ppParams);
        
        END_INTERFACE
    } IDebugMethodFieldVtbl;

    interface IDebugMethodField
    {
        CONST_VTBL struct IDebugMethodFieldVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugMethodField_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugMethodField_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugMethodField_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugMethodField_GetInfo(This,dwFields,pFieldInfo)	\
    (This)->lpVtbl -> GetInfo(This,dwFields,pFieldInfo)

#define IDebugMethodField_GetKind(This,pdwKind)	\
    (This)->lpVtbl -> GetKind(This,pdwKind)

#define IDebugMethodField_GetType(This,ppType)	\
    (This)->lpVtbl -> GetType(This,ppType)

#define IDebugMethodField_GetContainer(This,ppContainerField)	\
    (This)->lpVtbl -> GetContainer(This,ppContainerField)

#define IDebugMethodField_GetAddress(This,ppAddress)	\
    (This)->lpVtbl -> GetAddress(This,ppAddress)

#define IDebugMethodField_GetSize(This,pdwSize)	\
    (This)->lpVtbl -> GetSize(This,pdwSize)

#define IDebugMethodField_GetExtendedInfo(This,guidExtendedInfo,prgBuffer,pdwLen)	\
    (This)->lpVtbl -> GetExtendedInfo(This,guidExtendedInfo,prgBuffer,pdwLen)

#define IDebugMethodField_Equal(This,pField)	\
    (This)->lpVtbl -> Equal(This,pField)

#define IDebugMethodField_GetTypeInfo(This,pTypeInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,pTypeInfo)


#define IDebugMethodField_EnumFields(This,dwKindFilter,dwModifiersFilter,pszNameFilter,nameMatch,ppEnum)	\
    (This)->lpVtbl -> EnumFields(This,dwKindFilter,dwModifiersFilter,pszNameFilter,nameMatch,ppEnum)


#define IDebugMethodField_EnumParameters(This,ppParams)	\
    (This)->lpVtbl -> EnumParameters(This,ppParams)

#define IDebugMethodField_GetThis(This,ppClass)	\
    (This)->lpVtbl -> GetThis(This,ppClass)

#define IDebugMethodField_EnumAllLocals(This,pAddress,ppLocals)	\
    (This)->lpVtbl -> EnumAllLocals(This,pAddress,ppLocals)

#define IDebugMethodField_EnumLocals(This,pAddress,ppLocals)	\
    (This)->lpVtbl -> EnumLocals(This,pAddress,ppLocals)

#define IDebugMethodField_IsCustomAttributeDefined(This,pszCustomAttributeName)	\
    (This)->lpVtbl -> IsCustomAttributeDefined(This,pszCustomAttributeName)

#define IDebugMethodField_EnumStaticLocals(This,ppLocals)	\
    (This)->lpVtbl -> EnumStaticLocals(This,ppLocals)

#define IDebugMethodField_GetGlobalContainer(This,ppClass)	\
    (This)->lpVtbl -> GetGlobalContainer(This,ppClass)

#define IDebugMethodField_EnumArguments(This,ppParams)	\
    (This)->lpVtbl -> EnumArguments(This,ppParams)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugMethodField_EnumParameters_Proxy( 
    IDebugMethodField * This,
    /* [out] */ IEnumDebugFields **ppParams);


void __RPC_STUB IDebugMethodField_EnumParameters_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMethodField_GetThis_Proxy( 
    IDebugMethodField * This,
    /* [out] */ IDebugClassField **ppClass);


void __RPC_STUB IDebugMethodField_GetThis_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMethodField_EnumAllLocals_Proxy( 
    IDebugMethodField * This,
    /* [in] */ IDebugAddress *pAddress,
    /* [out] */ IEnumDebugFields **ppLocals);


void __RPC_STUB IDebugMethodField_EnumAllLocals_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMethodField_EnumLocals_Proxy( 
    IDebugMethodField * This,
    /* [in] */ IDebugAddress *pAddress,
    /* [out] */ IEnumDebugFields **ppLocals);


void __RPC_STUB IDebugMethodField_EnumLocals_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMethodField_IsCustomAttributeDefined_Proxy( 
    IDebugMethodField * This,
    /* [full][in] */ LPCOLESTR pszCustomAttributeName);


void __RPC_STUB IDebugMethodField_IsCustomAttributeDefined_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMethodField_EnumStaticLocals_Proxy( 
    IDebugMethodField * This,
    /* [out] */ IEnumDebugFields **ppLocals);


void __RPC_STUB IDebugMethodField_EnumStaticLocals_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMethodField_GetGlobalContainer_Proxy( 
    IDebugMethodField * This,
    /* [out] */ IDebugClassField **ppClass);


void __RPC_STUB IDebugMethodField_GetGlobalContainer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugMethodField_EnumArguments_Proxy( 
    IDebugMethodField * This,
    /* [out] */ IEnumDebugFields **ppParams);


void __RPC_STUB IDebugMethodField_EnumArguments_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugMethodField_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_sh_0379 */
/* [local] */ 

typedef 
enum ConstructorMatchOptions
    {	crAll	= 0,
	crNonStatic	= crAll + 1,
	crStatic	= crNonStatic + 1
    } 	CONSTRUCTOR_ENUM;



extern RPC_IF_HANDLE __MIDL_itf_sh_0379_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_sh_0379_v0_0_s_ifspec;

#ifndef __IDebugClassField_INTERFACE_DEFINED__
#define __IDebugClassField_INTERFACE_DEFINED__

/* interface IDebugClassField */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugClassField;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c2e34eb5-8b9d-11d2-9014-00c04fa38338")
    IDebugClassField : public IDebugContainerField
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE EnumBaseClasses( 
            /* [out] */ IEnumDebugFields **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DoesInterfaceExist( 
            /* [full][in] */ LPCOLESTR pszInterfaceName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumNestedClasses( 
            /* [out] */ IEnumDebugFields **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetEnclosingClass( 
            /* [out] */ IDebugClassField **ppClassField) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumInterfacesImplemented( 
            /* [out] */ IEnumDebugFields **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumConstructors( 
            /* [in] */ CONSTRUCTOR_ENUM cMatch,
            /* [out] */ IEnumDebugFields **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDefaultIndexer( 
            /* [out] */ BSTR *pbstrIndexer) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumNestedEnums( 
            /* [out] */ IEnumDebugFields **ppEnum) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugClassFieldVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugClassField * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugClassField * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugClassField * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IDebugClassField * This,
            /* [in] */ FIELD_INFO_FIELDS dwFields,
            /* [out] */ FIELD_INFO *pFieldInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetKind )( 
            IDebugClassField * This,
            /* [out] */ FIELD_KIND *pdwKind);
        
        HRESULT ( STDMETHODCALLTYPE *GetType )( 
            IDebugClassField * This,
            /* [out] */ IDebugField **ppType);
        
        HRESULT ( STDMETHODCALLTYPE *GetContainer )( 
            IDebugClassField * This,
            /* [out] */ IDebugContainerField **ppContainerField);
        
        HRESULT ( STDMETHODCALLTYPE *GetAddress )( 
            IDebugClassField * This,
            /* [out] */ IDebugAddress **ppAddress);
        
        HRESULT ( STDMETHODCALLTYPE *GetSize )( 
            IDebugClassField * This,
            /* [out] */ DWORD *pdwSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetExtendedInfo )( 
            IDebugClassField * This,
            /* [in] */ REFGUID guidExtendedInfo,
            /* [length_is][size_is][out] */ BYTE **prgBuffer,
            /* [out][in] */ DWORD *pdwLen);
        
        HRESULT ( STDMETHODCALLTYPE *Equal )( 
            IDebugClassField * This,
            /* [in] */ IDebugField *pField);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDebugClassField * This,
            /* [out] */ TYPE_INFO *pTypeInfo);
        
        HRESULT ( STDMETHODCALLTYPE *EnumFields )( 
            IDebugClassField * This,
            /* [in] */ FIELD_KIND dwKindFilter,
            /* [in] */ FIELD_MODIFIERS dwModifiersFilter,
            /* [full][in] */ LPCOLESTR pszNameFilter,
            /* [in] */ NAME_MATCH nameMatch,
            /* [out] */ IEnumDebugFields **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *EnumBaseClasses )( 
            IDebugClassField * This,
            /* [out] */ IEnumDebugFields **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *DoesInterfaceExist )( 
            IDebugClassField * This,
            /* [full][in] */ LPCOLESTR pszInterfaceName);
        
        HRESULT ( STDMETHODCALLTYPE *EnumNestedClasses )( 
            IDebugClassField * This,
            /* [out] */ IEnumDebugFields **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetEnclosingClass )( 
            IDebugClassField * This,
            /* [out] */ IDebugClassField **ppClassField);
        
        HRESULT ( STDMETHODCALLTYPE *EnumInterfacesImplemented )( 
            IDebugClassField * This,
            /* [out] */ IEnumDebugFields **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *EnumConstructors )( 
            IDebugClassField * This,
            /* [in] */ CONSTRUCTOR_ENUM cMatch,
            /* [out] */ IEnumDebugFields **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetDefaultIndexer )( 
            IDebugClassField * This,
            /* [out] */ BSTR *pbstrIndexer);
        
        HRESULT ( STDMETHODCALLTYPE *EnumNestedEnums )( 
            IDebugClassField * This,
            /* [out] */ IEnumDebugFields **ppEnum);
        
        END_INTERFACE
    } IDebugClassFieldVtbl;

    interface IDebugClassField
    {
        CONST_VTBL struct IDebugClassFieldVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugClassField_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugClassField_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugClassField_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugClassField_GetInfo(This,dwFields,pFieldInfo)	\
    (This)->lpVtbl -> GetInfo(This,dwFields,pFieldInfo)

#define IDebugClassField_GetKind(This,pdwKind)	\
    (This)->lpVtbl -> GetKind(This,pdwKind)

#define IDebugClassField_GetType(This,ppType)	\
    (This)->lpVtbl -> GetType(This,ppType)

#define IDebugClassField_GetContainer(This,ppContainerField)	\
    (This)->lpVtbl -> GetContainer(This,ppContainerField)

#define IDebugClassField_GetAddress(This,ppAddress)	\
    (This)->lpVtbl -> GetAddress(This,ppAddress)

#define IDebugClassField_GetSize(This,pdwSize)	\
    (This)->lpVtbl -> GetSize(This,pdwSize)

#define IDebugClassField_GetExtendedInfo(This,guidExtendedInfo,prgBuffer,pdwLen)	\
    (This)->lpVtbl -> GetExtendedInfo(This,guidExtendedInfo,prgBuffer,pdwLen)

#define IDebugClassField_Equal(This,pField)	\
    (This)->lpVtbl -> Equal(This,pField)

#define IDebugClassField_GetTypeInfo(This,pTypeInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,pTypeInfo)


#define IDebugClassField_EnumFields(This,dwKindFilter,dwModifiersFilter,pszNameFilter,nameMatch,ppEnum)	\
    (This)->lpVtbl -> EnumFields(This,dwKindFilter,dwModifiersFilter,pszNameFilter,nameMatch,ppEnum)


#define IDebugClassField_EnumBaseClasses(This,ppEnum)	\
    (This)->lpVtbl -> EnumBaseClasses(This,ppEnum)

#define IDebugClassField_DoesInterfaceExist(This,pszInterfaceName)	\
    (This)->lpVtbl -> DoesInterfaceExist(This,pszInterfaceName)

#define IDebugClassField_EnumNestedClasses(This,ppEnum)	\
    (This)->lpVtbl -> EnumNestedClasses(This,ppEnum)

#define IDebugClassField_GetEnclosingClass(This,ppClassField)	\
    (This)->lpVtbl -> GetEnclosingClass(This,ppClassField)

#define IDebugClassField_EnumInterfacesImplemented(This,ppEnum)	\
    (This)->lpVtbl -> EnumInterfacesImplemented(This,ppEnum)

#define IDebugClassField_EnumConstructors(This,cMatch,ppEnum)	\
    (This)->lpVtbl -> EnumConstructors(This,cMatch,ppEnum)

#define IDebugClassField_GetDefaultIndexer(This,pbstrIndexer)	\
    (This)->lpVtbl -> GetDefaultIndexer(This,pbstrIndexer)

#define IDebugClassField_EnumNestedEnums(This,ppEnum)	\
    (This)->lpVtbl -> EnumNestedEnums(This,ppEnum)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugClassField_EnumBaseClasses_Proxy( 
    IDebugClassField * This,
    /* [out] */ IEnumDebugFields **ppEnum);


void __RPC_STUB IDebugClassField_EnumBaseClasses_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugClassField_DoesInterfaceExist_Proxy( 
    IDebugClassField * This,
    /* [full][in] */ LPCOLESTR pszInterfaceName);


void __RPC_STUB IDebugClassField_DoesInterfaceExist_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugClassField_EnumNestedClasses_Proxy( 
    IDebugClassField * This,
    /* [out] */ IEnumDebugFields **ppEnum);


void __RPC_STUB IDebugClassField_EnumNestedClasses_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugClassField_GetEnclosingClass_Proxy( 
    IDebugClassField * This,
    /* [out] */ IDebugClassField **ppClassField);


void __RPC_STUB IDebugClassField_GetEnclosingClass_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugClassField_EnumInterfacesImplemented_Proxy( 
    IDebugClassField * This,
    /* [out] */ IEnumDebugFields **ppEnum);


void __RPC_STUB IDebugClassField_EnumInterfacesImplemented_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugClassField_EnumConstructors_Proxy( 
    IDebugClassField * This,
    /* [in] */ CONSTRUCTOR_ENUM cMatch,
    /* [out] */ IEnumDebugFields **ppEnum);


void __RPC_STUB IDebugClassField_EnumConstructors_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugClassField_GetDefaultIndexer_Proxy( 
    IDebugClassField * This,
    /* [out] */ BSTR *pbstrIndexer);


void __RPC_STUB IDebugClassField_GetDefaultIndexer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugClassField_EnumNestedEnums_Proxy( 
    IDebugClassField * This,
    /* [out] */ IEnumDebugFields **ppEnum);


void __RPC_STUB IDebugClassField_EnumNestedEnums_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugClassField_INTERFACE_DEFINED__ */


#ifndef __IDebugPropertyField_INTERFACE_DEFINED__
#define __IDebugPropertyField_INTERFACE_DEFINED__

/* interface IDebugPropertyField */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugPropertyField;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c2e34eb6-8b9d-11d2-9014-00c04fa38338")
    IDebugPropertyField : public IDebugContainerField
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetPropertyGetter( 
            /* [out] */ IDebugMethodField **ppField) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPropertySetter( 
            /* [out] */ IDebugMethodField **ppField) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugPropertyFieldVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugPropertyField * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugPropertyField * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugPropertyField * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IDebugPropertyField * This,
            /* [in] */ FIELD_INFO_FIELDS dwFields,
            /* [out] */ FIELD_INFO *pFieldInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetKind )( 
            IDebugPropertyField * This,
            /* [out] */ FIELD_KIND *pdwKind);
        
        HRESULT ( STDMETHODCALLTYPE *GetType )( 
            IDebugPropertyField * This,
            /* [out] */ IDebugField **ppType);
        
        HRESULT ( STDMETHODCALLTYPE *GetContainer )( 
            IDebugPropertyField * This,
            /* [out] */ IDebugContainerField **ppContainerField);
        
        HRESULT ( STDMETHODCALLTYPE *GetAddress )( 
            IDebugPropertyField * This,
            /* [out] */ IDebugAddress **ppAddress);
        
        HRESULT ( STDMETHODCALLTYPE *GetSize )( 
            IDebugPropertyField * This,
            /* [out] */ DWORD *pdwSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetExtendedInfo )( 
            IDebugPropertyField * This,
            /* [in] */ REFGUID guidExtendedInfo,
            /* [length_is][size_is][out] */ BYTE **prgBuffer,
            /* [out][in] */ DWORD *pdwLen);
        
        HRESULT ( STDMETHODCALLTYPE *Equal )( 
            IDebugPropertyField * This,
            /* [in] */ IDebugField *pField);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDebugPropertyField * This,
            /* [out] */ TYPE_INFO *pTypeInfo);
        
        HRESULT ( STDMETHODCALLTYPE *EnumFields )( 
            IDebugPropertyField * This,
            /* [in] */ FIELD_KIND dwKindFilter,
            /* [in] */ FIELD_MODIFIERS dwModifiersFilter,
            /* [full][in] */ LPCOLESTR pszNameFilter,
            /* [in] */ NAME_MATCH nameMatch,
            /* [out] */ IEnumDebugFields **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetPropertyGetter )( 
            IDebugPropertyField * This,
            /* [out] */ IDebugMethodField **ppField);
        
        HRESULT ( STDMETHODCALLTYPE *GetPropertySetter )( 
            IDebugPropertyField * This,
            /* [out] */ IDebugMethodField **ppField);
        
        END_INTERFACE
    } IDebugPropertyFieldVtbl;

    interface IDebugPropertyField
    {
        CONST_VTBL struct IDebugPropertyFieldVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugPropertyField_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugPropertyField_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugPropertyField_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugPropertyField_GetInfo(This,dwFields,pFieldInfo)	\
    (This)->lpVtbl -> GetInfo(This,dwFields,pFieldInfo)

#define IDebugPropertyField_GetKind(This,pdwKind)	\
    (This)->lpVtbl -> GetKind(This,pdwKind)

#define IDebugPropertyField_GetType(This,ppType)	\
    (This)->lpVtbl -> GetType(This,ppType)

#define IDebugPropertyField_GetContainer(This,ppContainerField)	\
    (This)->lpVtbl -> GetContainer(This,ppContainerField)

#define IDebugPropertyField_GetAddress(This,ppAddress)	\
    (This)->lpVtbl -> GetAddress(This,ppAddress)

#define IDebugPropertyField_GetSize(This,pdwSize)	\
    (This)->lpVtbl -> GetSize(This,pdwSize)

#define IDebugPropertyField_GetExtendedInfo(This,guidExtendedInfo,prgBuffer,pdwLen)	\
    (This)->lpVtbl -> GetExtendedInfo(This,guidExtendedInfo,prgBuffer,pdwLen)

#define IDebugPropertyField_Equal(This,pField)	\
    (This)->lpVtbl -> Equal(This,pField)

#define IDebugPropertyField_GetTypeInfo(This,pTypeInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,pTypeInfo)


#define IDebugPropertyField_EnumFields(This,dwKindFilter,dwModifiersFilter,pszNameFilter,nameMatch,ppEnum)	\
    (This)->lpVtbl -> EnumFields(This,dwKindFilter,dwModifiersFilter,pszNameFilter,nameMatch,ppEnum)


#define IDebugPropertyField_GetPropertyGetter(This,ppField)	\
    (This)->lpVtbl -> GetPropertyGetter(This,ppField)

#define IDebugPropertyField_GetPropertySetter(This,ppField)	\
    (This)->lpVtbl -> GetPropertySetter(This,ppField)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugPropertyField_GetPropertyGetter_Proxy( 
    IDebugPropertyField * This,
    /* [out] */ IDebugMethodField **ppField);


void __RPC_STUB IDebugPropertyField_GetPropertyGetter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugPropertyField_GetPropertySetter_Proxy( 
    IDebugPropertyField * This,
    /* [out] */ IDebugMethodField **ppField);


void __RPC_STUB IDebugPropertyField_GetPropertySetter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugPropertyField_INTERFACE_DEFINED__ */


#ifndef __IDebugArrayField_INTERFACE_DEFINED__
#define __IDebugArrayField_INTERFACE_DEFINED__

/* interface IDebugArrayField */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugArrayField;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c2e34eb7-8b9d-11d2-9014-00c04fa38338")
    IDebugArrayField : public IDebugContainerField
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetNumberOfElements( 
            /* [out] */ DWORD *pdwNumElements) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetElementType( 
            /* [out] */ IDebugField **ppType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetRank( 
            /* [out] */ DWORD *pdwRank) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugArrayFieldVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugArrayField * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugArrayField * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugArrayField * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IDebugArrayField * This,
            /* [in] */ FIELD_INFO_FIELDS dwFields,
            /* [out] */ FIELD_INFO *pFieldInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetKind )( 
            IDebugArrayField * This,
            /* [out] */ FIELD_KIND *pdwKind);
        
        HRESULT ( STDMETHODCALLTYPE *GetType )( 
            IDebugArrayField * This,
            /* [out] */ IDebugField **ppType);
        
        HRESULT ( STDMETHODCALLTYPE *GetContainer )( 
            IDebugArrayField * This,
            /* [out] */ IDebugContainerField **ppContainerField);
        
        HRESULT ( STDMETHODCALLTYPE *GetAddress )( 
            IDebugArrayField * This,
            /* [out] */ IDebugAddress **ppAddress);
        
        HRESULT ( STDMETHODCALLTYPE *GetSize )( 
            IDebugArrayField * This,
            /* [out] */ DWORD *pdwSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetExtendedInfo )( 
            IDebugArrayField * This,
            /* [in] */ REFGUID guidExtendedInfo,
            /* [length_is][size_is][out] */ BYTE **prgBuffer,
            /* [out][in] */ DWORD *pdwLen);
        
        HRESULT ( STDMETHODCALLTYPE *Equal )( 
            IDebugArrayField * This,
            /* [in] */ IDebugField *pField);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDebugArrayField * This,
            /* [out] */ TYPE_INFO *pTypeInfo);
        
        HRESULT ( STDMETHODCALLTYPE *EnumFields )( 
            IDebugArrayField * This,
            /* [in] */ FIELD_KIND dwKindFilter,
            /* [in] */ FIELD_MODIFIERS dwModifiersFilter,
            /* [full][in] */ LPCOLESTR pszNameFilter,
            /* [in] */ NAME_MATCH nameMatch,
            /* [out] */ IEnumDebugFields **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetNumberOfElements )( 
            IDebugArrayField * This,
            /* [out] */ DWORD *pdwNumElements);
        
        HRESULT ( STDMETHODCALLTYPE *GetElementType )( 
            IDebugArrayField * This,
            /* [out] */ IDebugField **ppType);
        
        HRESULT ( STDMETHODCALLTYPE *GetRank )( 
            IDebugArrayField * This,
            /* [out] */ DWORD *pdwRank);
        
        END_INTERFACE
    } IDebugArrayFieldVtbl;

    interface IDebugArrayField
    {
        CONST_VTBL struct IDebugArrayFieldVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugArrayField_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugArrayField_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugArrayField_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugArrayField_GetInfo(This,dwFields,pFieldInfo)	\
    (This)->lpVtbl -> GetInfo(This,dwFields,pFieldInfo)

#define IDebugArrayField_GetKind(This,pdwKind)	\
    (This)->lpVtbl -> GetKind(This,pdwKind)

#define IDebugArrayField_GetType(This,ppType)	\
    (This)->lpVtbl -> GetType(This,ppType)

#define IDebugArrayField_GetContainer(This,ppContainerField)	\
    (This)->lpVtbl -> GetContainer(This,ppContainerField)

#define IDebugArrayField_GetAddress(This,ppAddress)	\
    (This)->lpVtbl -> GetAddress(This,ppAddress)

#define IDebugArrayField_GetSize(This,pdwSize)	\
    (This)->lpVtbl -> GetSize(This,pdwSize)

#define IDebugArrayField_GetExtendedInfo(This,guidExtendedInfo,prgBuffer,pdwLen)	\
    (This)->lpVtbl -> GetExtendedInfo(This,guidExtendedInfo,prgBuffer,pdwLen)

#define IDebugArrayField_Equal(This,pField)	\
    (This)->lpVtbl -> Equal(This,pField)

#define IDebugArrayField_GetTypeInfo(This,pTypeInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,pTypeInfo)


#define IDebugArrayField_EnumFields(This,dwKindFilter,dwModifiersFilter,pszNameFilter,nameMatch,ppEnum)	\
    (This)->lpVtbl -> EnumFields(This,dwKindFilter,dwModifiersFilter,pszNameFilter,nameMatch,ppEnum)


#define IDebugArrayField_GetNumberOfElements(This,pdwNumElements)	\
    (This)->lpVtbl -> GetNumberOfElements(This,pdwNumElements)

#define IDebugArrayField_GetElementType(This,ppType)	\
    (This)->lpVtbl -> GetElementType(This,ppType)

#define IDebugArrayField_GetRank(This,pdwRank)	\
    (This)->lpVtbl -> GetRank(This,pdwRank)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugArrayField_GetNumberOfElements_Proxy( 
    IDebugArrayField * This,
    /* [out] */ DWORD *pdwNumElements);


void __RPC_STUB IDebugArrayField_GetNumberOfElements_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugArrayField_GetElementType_Proxy( 
    IDebugArrayField * This,
    /* [out] */ IDebugField **ppType);


void __RPC_STUB IDebugArrayField_GetElementType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugArrayField_GetRank_Proxy( 
    IDebugArrayField * This,
    /* [out] */ DWORD *pdwRank);


void __RPC_STUB IDebugArrayField_GetRank_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugArrayField_INTERFACE_DEFINED__ */


#ifndef __IDebugPointerField_INTERFACE_DEFINED__
#define __IDebugPointerField_INTERFACE_DEFINED__

/* interface IDebugPointerField */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugPointerField;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c2e34eb8-8b9d-11d2-9014-00c04fa38338")
    IDebugPointerField : public IDebugContainerField
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetDereferencedField( 
            /* [out] */ IDebugField **ppField) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugPointerFieldVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugPointerField * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugPointerField * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugPointerField * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IDebugPointerField * This,
            /* [in] */ FIELD_INFO_FIELDS dwFields,
            /* [out] */ FIELD_INFO *pFieldInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetKind )( 
            IDebugPointerField * This,
            /* [out] */ FIELD_KIND *pdwKind);
        
        HRESULT ( STDMETHODCALLTYPE *GetType )( 
            IDebugPointerField * This,
            /* [out] */ IDebugField **ppType);
        
        HRESULT ( STDMETHODCALLTYPE *GetContainer )( 
            IDebugPointerField * This,
            /* [out] */ IDebugContainerField **ppContainerField);
        
        HRESULT ( STDMETHODCALLTYPE *GetAddress )( 
            IDebugPointerField * This,
            /* [out] */ IDebugAddress **ppAddress);
        
        HRESULT ( STDMETHODCALLTYPE *GetSize )( 
            IDebugPointerField * This,
            /* [out] */ DWORD *pdwSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetExtendedInfo )( 
            IDebugPointerField * This,
            /* [in] */ REFGUID guidExtendedInfo,
            /* [length_is][size_is][out] */ BYTE **prgBuffer,
            /* [out][in] */ DWORD *pdwLen);
        
        HRESULT ( STDMETHODCALLTYPE *Equal )( 
            IDebugPointerField * This,
            /* [in] */ IDebugField *pField);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDebugPointerField * This,
            /* [out] */ TYPE_INFO *pTypeInfo);
        
        HRESULT ( STDMETHODCALLTYPE *EnumFields )( 
            IDebugPointerField * This,
            /* [in] */ FIELD_KIND dwKindFilter,
            /* [in] */ FIELD_MODIFIERS dwModifiersFilter,
            /* [full][in] */ LPCOLESTR pszNameFilter,
            /* [in] */ NAME_MATCH nameMatch,
            /* [out] */ IEnumDebugFields **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetDereferencedField )( 
            IDebugPointerField * This,
            /* [out] */ IDebugField **ppField);
        
        END_INTERFACE
    } IDebugPointerFieldVtbl;

    interface IDebugPointerField
    {
        CONST_VTBL struct IDebugPointerFieldVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugPointerField_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugPointerField_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugPointerField_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugPointerField_GetInfo(This,dwFields,pFieldInfo)	\
    (This)->lpVtbl -> GetInfo(This,dwFields,pFieldInfo)

#define IDebugPointerField_GetKind(This,pdwKind)	\
    (This)->lpVtbl -> GetKind(This,pdwKind)

#define IDebugPointerField_GetType(This,ppType)	\
    (This)->lpVtbl -> GetType(This,ppType)

#define IDebugPointerField_GetContainer(This,ppContainerField)	\
    (This)->lpVtbl -> GetContainer(This,ppContainerField)

#define IDebugPointerField_GetAddress(This,ppAddress)	\
    (This)->lpVtbl -> GetAddress(This,ppAddress)

#define IDebugPointerField_GetSize(This,pdwSize)	\
    (This)->lpVtbl -> GetSize(This,pdwSize)

#define IDebugPointerField_GetExtendedInfo(This,guidExtendedInfo,prgBuffer,pdwLen)	\
    (This)->lpVtbl -> GetExtendedInfo(This,guidExtendedInfo,prgBuffer,pdwLen)

#define IDebugPointerField_Equal(This,pField)	\
    (This)->lpVtbl -> Equal(This,pField)

#define IDebugPointerField_GetTypeInfo(This,pTypeInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,pTypeInfo)


#define IDebugPointerField_EnumFields(This,dwKindFilter,dwModifiersFilter,pszNameFilter,nameMatch,ppEnum)	\
    (This)->lpVtbl -> EnumFields(This,dwKindFilter,dwModifiersFilter,pszNameFilter,nameMatch,ppEnum)


#define IDebugPointerField_GetDereferencedField(This,ppField)	\
    (This)->lpVtbl -> GetDereferencedField(This,ppField)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugPointerField_GetDereferencedField_Proxy( 
    IDebugPointerField * This,
    /* [out] */ IDebugField **ppField);


void __RPC_STUB IDebugPointerField_GetDereferencedField_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugPointerField_INTERFACE_DEFINED__ */


#ifndef __IDebugEnumField_INTERFACE_DEFINED__
#define __IDebugEnumField_INTERFACE_DEFINED__

/* interface IDebugEnumField */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugEnumField;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c2e34eb9-8b9d-11d2-9014-00c04fa38338")
    IDebugEnumField : public IDebugContainerField
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetUnderlyingSymbol( 
            /* [out] */ IDebugField **ppField) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetStringFromValue( 
            /* [in] */ ULONGLONG value,
            /* [out] */ BSTR *pbstrValue) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetValueFromString( 
            /* [full][in] */ LPCOLESTR pszValue,
            /* [out] */ ULONGLONG *pvalue) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetValueFromStringCaseInsensitive( 
            /* [full][in] */ LPCOLESTR pszValue,
            /* [out] */ ULONGLONG *pvalue) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugEnumFieldVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugEnumField * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugEnumField * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugEnumField * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IDebugEnumField * This,
            /* [in] */ FIELD_INFO_FIELDS dwFields,
            /* [out] */ FIELD_INFO *pFieldInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetKind )( 
            IDebugEnumField * This,
            /* [out] */ FIELD_KIND *pdwKind);
        
        HRESULT ( STDMETHODCALLTYPE *GetType )( 
            IDebugEnumField * This,
            /* [out] */ IDebugField **ppType);
        
        HRESULT ( STDMETHODCALLTYPE *GetContainer )( 
            IDebugEnumField * This,
            /* [out] */ IDebugContainerField **ppContainerField);
        
        HRESULT ( STDMETHODCALLTYPE *GetAddress )( 
            IDebugEnumField * This,
            /* [out] */ IDebugAddress **ppAddress);
        
        HRESULT ( STDMETHODCALLTYPE *GetSize )( 
            IDebugEnumField * This,
            /* [out] */ DWORD *pdwSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetExtendedInfo )( 
            IDebugEnumField * This,
            /* [in] */ REFGUID guidExtendedInfo,
            /* [length_is][size_is][out] */ BYTE **prgBuffer,
            /* [out][in] */ DWORD *pdwLen);
        
        HRESULT ( STDMETHODCALLTYPE *Equal )( 
            IDebugEnumField * This,
            /* [in] */ IDebugField *pField);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDebugEnumField * This,
            /* [out] */ TYPE_INFO *pTypeInfo);
        
        HRESULT ( STDMETHODCALLTYPE *EnumFields )( 
            IDebugEnumField * This,
            /* [in] */ FIELD_KIND dwKindFilter,
            /* [in] */ FIELD_MODIFIERS dwModifiersFilter,
            /* [full][in] */ LPCOLESTR pszNameFilter,
            /* [in] */ NAME_MATCH nameMatch,
            /* [out] */ IEnumDebugFields **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetUnderlyingSymbol )( 
            IDebugEnumField * This,
            /* [out] */ IDebugField **ppField);
        
        HRESULT ( STDMETHODCALLTYPE *GetStringFromValue )( 
            IDebugEnumField * This,
            /* [in] */ ULONGLONG value,
            /* [out] */ BSTR *pbstrValue);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueFromString )( 
            IDebugEnumField * This,
            /* [full][in] */ LPCOLESTR pszValue,
            /* [out] */ ULONGLONG *pvalue);
        
        HRESULT ( STDMETHODCALLTYPE *GetValueFromStringCaseInsensitive )( 
            IDebugEnumField * This,
            /* [full][in] */ LPCOLESTR pszValue,
            /* [out] */ ULONGLONG *pvalue);
        
        END_INTERFACE
    } IDebugEnumFieldVtbl;

    interface IDebugEnumField
    {
        CONST_VTBL struct IDebugEnumFieldVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugEnumField_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugEnumField_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugEnumField_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugEnumField_GetInfo(This,dwFields,pFieldInfo)	\
    (This)->lpVtbl -> GetInfo(This,dwFields,pFieldInfo)

#define IDebugEnumField_GetKind(This,pdwKind)	\
    (This)->lpVtbl -> GetKind(This,pdwKind)

#define IDebugEnumField_GetType(This,ppType)	\
    (This)->lpVtbl -> GetType(This,ppType)

#define IDebugEnumField_GetContainer(This,ppContainerField)	\
    (This)->lpVtbl -> GetContainer(This,ppContainerField)

#define IDebugEnumField_GetAddress(This,ppAddress)	\
    (This)->lpVtbl -> GetAddress(This,ppAddress)

#define IDebugEnumField_GetSize(This,pdwSize)	\
    (This)->lpVtbl -> GetSize(This,pdwSize)

#define IDebugEnumField_GetExtendedInfo(This,guidExtendedInfo,prgBuffer,pdwLen)	\
    (This)->lpVtbl -> GetExtendedInfo(This,guidExtendedInfo,prgBuffer,pdwLen)

#define IDebugEnumField_Equal(This,pField)	\
    (This)->lpVtbl -> Equal(This,pField)

#define IDebugEnumField_GetTypeInfo(This,pTypeInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,pTypeInfo)


#define IDebugEnumField_EnumFields(This,dwKindFilter,dwModifiersFilter,pszNameFilter,nameMatch,ppEnum)	\
    (This)->lpVtbl -> EnumFields(This,dwKindFilter,dwModifiersFilter,pszNameFilter,nameMatch,ppEnum)


#define IDebugEnumField_GetUnderlyingSymbol(This,ppField)	\
    (This)->lpVtbl -> GetUnderlyingSymbol(This,ppField)

#define IDebugEnumField_GetStringFromValue(This,value,pbstrValue)	\
    (This)->lpVtbl -> GetStringFromValue(This,value,pbstrValue)

#define IDebugEnumField_GetValueFromString(This,pszValue,pvalue)	\
    (This)->lpVtbl -> GetValueFromString(This,pszValue,pvalue)

#define IDebugEnumField_GetValueFromStringCaseInsensitive(This,pszValue,pvalue)	\
    (This)->lpVtbl -> GetValueFromStringCaseInsensitive(This,pszValue,pvalue)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugEnumField_GetUnderlyingSymbol_Proxy( 
    IDebugEnumField * This,
    /* [out] */ IDebugField **ppField);


void __RPC_STUB IDebugEnumField_GetUnderlyingSymbol_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugEnumField_GetStringFromValue_Proxy( 
    IDebugEnumField * This,
    /* [in] */ ULONGLONG value,
    /* [out] */ BSTR *pbstrValue);


void __RPC_STUB IDebugEnumField_GetStringFromValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugEnumField_GetValueFromString_Proxy( 
    IDebugEnumField * This,
    /* [full][in] */ LPCOLESTR pszValue,
    /* [out] */ ULONGLONG *pvalue);


void __RPC_STUB IDebugEnumField_GetValueFromString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugEnumField_GetValueFromStringCaseInsensitive_Proxy( 
    IDebugEnumField * This,
    /* [full][in] */ LPCOLESTR pszValue,
    /* [out] */ ULONGLONG *pvalue);


void __RPC_STUB IDebugEnumField_GetValueFromStringCaseInsensitive_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugEnumField_INTERFACE_DEFINED__ */


#ifndef __IDebugBitField_INTERFACE_DEFINED__
#define __IDebugBitField_INTERFACE_DEFINED__

/* interface IDebugBitField */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugBitField;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c2e34eba-8b9d-11d2-9014-00c04fa38338")
    IDebugBitField : public IDebugField
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetStart( 
            /* [out] */ DWORD *pdwBitOffset) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugBitFieldVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugBitField * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugBitField * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugBitField * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IDebugBitField * This,
            /* [in] */ FIELD_INFO_FIELDS dwFields,
            /* [out] */ FIELD_INFO *pFieldInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetKind )( 
            IDebugBitField * This,
            /* [out] */ FIELD_KIND *pdwKind);
        
        HRESULT ( STDMETHODCALLTYPE *GetType )( 
            IDebugBitField * This,
            /* [out] */ IDebugField **ppType);
        
        HRESULT ( STDMETHODCALLTYPE *GetContainer )( 
            IDebugBitField * This,
            /* [out] */ IDebugContainerField **ppContainerField);
        
        HRESULT ( STDMETHODCALLTYPE *GetAddress )( 
            IDebugBitField * This,
            /* [out] */ IDebugAddress **ppAddress);
        
        HRESULT ( STDMETHODCALLTYPE *GetSize )( 
            IDebugBitField * This,
            /* [out] */ DWORD *pdwSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetExtendedInfo )( 
            IDebugBitField * This,
            /* [in] */ REFGUID guidExtendedInfo,
            /* [length_is][size_is][out] */ BYTE **prgBuffer,
            /* [out][in] */ DWORD *pdwLen);
        
        HRESULT ( STDMETHODCALLTYPE *Equal )( 
            IDebugBitField * This,
            /* [in] */ IDebugField *pField);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDebugBitField * This,
            /* [out] */ TYPE_INFO *pTypeInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetStart )( 
            IDebugBitField * This,
            /* [out] */ DWORD *pdwBitOffset);
        
        END_INTERFACE
    } IDebugBitFieldVtbl;

    interface IDebugBitField
    {
        CONST_VTBL struct IDebugBitFieldVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugBitField_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugBitField_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugBitField_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugBitField_GetInfo(This,dwFields,pFieldInfo)	\
    (This)->lpVtbl -> GetInfo(This,dwFields,pFieldInfo)

#define IDebugBitField_GetKind(This,pdwKind)	\
    (This)->lpVtbl -> GetKind(This,pdwKind)

#define IDebugBitField_GetType(This,ppType)	\
    (This)->lpVtbl -> GetType(This,ppType)

#define IDebugBitField_GetContainer(This,ppContainerField)	\
    (This)->lpVtbl -> GetContainer(This,ppContainerField)

#define IDebugBitField_GetAddress(This,ppAddress)	\
    (This)->lpVtbl -> GetAddress(This,ppAddress)

#define IDebugBitField_GetSize(This,pdwSize)	\
    (This)->lpVtbl -> GetSize(This,pdwSize)

#define IDebugBitField_GetExtendedInfo(This,guidExtendedInfo,prgBuffer,pdwLen)	\
    (This)->lpVtbl -> GetExtendedInfo(This,guidExtendedInfo,prgBuffer,pdwLen)

#define IDebugBitField_Equal(This,pField)	\
    (This)->lpVtbl -> Equal(This,pField)

#define IDebugBitField_GetTypeInfo(This,pTypeInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,pTypeInfo)


#define IDebugBitField_GetStart(This,pdwBitOffset)	\
    (This)->lpVtbl -> GetStart(This,pdwBitOffset)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugBitField_GetStart_Proxy( 
    IDebugBitField * This,
    /* [out] */ DWORD *pdwBitOffset);


void __RPC_STUB IDebugBitField_GetStart_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugBitField_INTERFACE_DEFINED__ */


#ifndef __IDebugDynamicField_INTERFACE_DEFINED__
#define __IDebugDynamicField_INTERFACE_DEFINED__

/* interface IDebugDynamicField */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugDynamicField;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B5A2A5EA-D5AB-11d2-9033-00C04FA302A1")
    IDebugDynamicField : public IDebugField
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IDebugDynamicFieldVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugDynamicField * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugDynamicField * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugDynamicField * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IDebugDynamicField * This,
            /* [in] */ FIELD_INFO_FIELDS dwFields,
            /* [out] */ FIELD_INFO *pFieldInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetKind )( 
            IDebugDynamicField * This,
            /* [out] */ FIELD_KIND *pdwKind);
        
        HRESULT ( STDMETHODCALLTYPE *GetType )( 
            IDebugDynamicField * This,
            /* [out] */ IDebugField **ppType);
        
        HRESULT ( STDMETHODCALLTYPE *GetContainer )( 
            IDebugDynamicField * This,
            /* [out] */ IDebugContainerField **ppContainerField);
        
        HRESULT ( STDMETHODCALLTYPE *GetAddress )( 
            IDebugDynamicField * This,
            /* [out] */ IDebugAddress **ppAddress);
        
        HRESULT ( STDMETHODCALLTYPE *GetSize )( 
            IDebugDynamicField * This,
            /* [out] */ DWORD *pdwSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetExtendedInfo )( 
            IDebugDynamicField * This,
            /* [in] */ REFGUID guidExtendedInfo,
            /* [length_is][size_is][out] */ BYTE **prgBuffer,
            /* [out][in] */ DWORD *pdwLen);
        
        HRESULT ( STDMETHODCALLTYPE *Equal )( 
            IDebugDynamicField * This,
            /* [in] */ IDebugField *pField);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDebugDynamicField * This,
            /* [out] */ TYPE_INFO *pTypeInfo);
        
        END_INTERFACE
    } IDebugDynamicFieldVtbl;

    interface IDebugDynamicField
    {
        CONST_VTBL struct IDebugDynamicFieldVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugDynamicField_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugDynamicField_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugDynamicField_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugDynamicField_GetInfo(This,dwFields,pFieldInfo)	\
    (This)->lpVtbl -> GetInfo(This,dwFields,pFieldInfo)

#define IDebugDynamicField_GetKind(This,pdwKind)	\
    (This)->lpVtbl -> GetKind(This,pdwKind)

#define IDebugDynamicField_GetType(This,ppType)	\
    (This)->lpVtbl -> GetType(This,ppType)

#define IDebugDynamicField_GetContainer(This,ppContainerField)	\
    (This)->lpVtbl -> GetContainer(This,ppContainerField)

#define IDebugDynamicField_GetAddress(This,ppAddress)	\
    (This)->lpVtbl -> GetAddress(This,ppAddress)

#define IDebugDynamicField_GetSize(This,pdwSize)	\
    (This)->lpVtbl -> GetSize(This,pdwSize)

#define IDebugDynamicField_GetExtendedInfo(This,guidExtendedInfo,prgBuffer,pdwLen)	\
    (This)->lpVtbl -> GetExtendedInfo(This,guidExtendedInfo,prgBuffer,pdwLen)

#define IDebugDynamicField_Equal(This,pField)	\
    (This)->lpVtbl -> Equal(This,pField)

#define IDebugDynamicField_GetTypeInfo(This,pTypeInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,pTypeInfo)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDebugDynamicField_INTERFACE_DEFINED__ */


#ifndef __IDebugDynamicFieldCOMPlus_INTERFACE_DEFINED__
#define __IDebugDynamicFieldCOMPlus_INTERFACE_DEFINED__

/* interface IDebugDynamicFieldCOMPlus */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugDynamicFieldCOMPlus;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B5B20820-E233-11d2-9037-00C04FA302A1")
    IDebugDynamicFieldCOMPlus : public IDebugDynamicField
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetTypeFromPrimitive( 
            /* [in] */ DWORD dwCorElementType,
            /* [out] */ IDebugField **ppType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetTypeFromTypeDef( 
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule,
            /* [in] */ _mdToken tokClass,
            /* [out] */ IDebugField **ppType) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugDynamicFieldCOMPlusVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugDynamicFieldCOMPlus * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugDynamicFieldCOMPlus * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugDynamicFieldCOMPlus * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            IDebugDynamicFieldCOMPlus * This,
            /* [in] */ FIELD_INFO_FIELDS dwFields,
            /* [out] */ FIELD_INFO *pFieldInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetKind )( 
            IDebugDynamicFieldCOMPlus * This,
            /* [out] */ FIELD_KIND *pdwKind);
        
        HRESULT ( STDMETHODCALLTYPE *GetType )( 
            IDebugDynamicFieldCOMPlus * This,
            /* [out] */ IDebugField **ppType);
        
        HRESULT ( STDMETHODCALLTYPE *GetContainer )( 
            IDebugDynamicFieldCOMPlus * This,
            /* [out] */ IDebugContainerField **ppContainerField);
        
        HRESULT ( STDMETHODCALLTYPE *GetAddress )( 
            IDebugDynamicFieldCOMPlus * This,
            /* [out] */ IDebugAddress **ppAddress);
        
        HRESULT ( STDMETHODCALLTYPE *GetSize )( 
            IDebugDynamicFieldCOMPlus * This,
            /* [out] */ DWORD *pdwSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetExtendedInfo )( 
            IDebugDynamicFieldCOMPlus * This,
            /* [in] */ REFGUID guidExtendedInfo,
            /* [length_is][size_is][out] */ BYTE **prgBuffer,
            /* [out][in] */ DWORD *pdwLen);
        
        HRESULT ( STDMETHODCALLTYPE *Equal )( 
            IDebugDynamicFieldCOMPlus * This,
            /* [in] */ IDebugField *pField);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDebugDynamicFieldCOMPlus * This,
            /* [out] */ TYPE_INFO *pTypeInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeFromPrimitive )( 
            IDebugDynamicFieldCOMPlus * This,
            /* [in] */ DWORD dwCorElementType,
            /* [out] */ IDebugField **ppType);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeFromTypeDef )( 
            IDebugDynamicFieldCOMPlus * This,
            /* [in] */ ULONG32 ulAppDomainID,
            /* [in] */ GUID guidModule,
            /* [in] */ _mdToken tokClass,
            /* [out] */ IDebugField **ppType);
        
        END_INTERFACE
    } IDebugDynamicFieldCOMPlusVtbl;

    interface IDebugDynamicFieldCOMPlus
    {
        CONST_VTBL struct IDebugDynamicFieldCOMPlusVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugDynamicFieldCOMPlus_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugDynamicFieldCOMPlus_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugDynamicFieldCOMPlus_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugDynamicFieldCOMPlus_GetInfo(This,dwFields,pFieldInfo)	\
    (This)->lpVtbl -> GetInfo(This,dwFields,pFieldInfo)

#define IDebugDynamicFieldCOMPlus_GetKind(This,pdwKind)	\
    (This)->lpVtbl -> GetKind(This,pdwKind)

#define IDebugDynamicFieldCOMPlus_GetType(This,ppType)	\
    (This)->lpVtbl -> GetType(This,ppType)

#define IDebugDynamicFieldCOMPlus_GetContainer(This,ppContainerField)	\
    (This)->lpVtbl -> GetContainer(This,ppContainerField)

#define IDebugDynamicFieldCOMPlus_GetAddress(This,ppAddress)	\
    (This)->lpVtbl -> GetAddress(This,ppAddress)

#define IDebugDynamicFieldCOMPlus_GetSize(This,pdwSize)	\
    (This)->lpVtbl -> GetSize(This,pdwSize)

#define IDebugDynamicFieldCOMPlus_GetExtendedInfo(This,guidExtendedInfo,prgBuffer,pdwLen)	\
    (This)->lpVtbl -> GetExtendedInfo(This,guidExtendedInfo,prgBuffer,pdwLen)

#define IDebugDynamicFieldCOMPlus_Equal(This,pField)	\
    (This)->lpVtbl -> Equal(This,pField)

#define IDebugDynamicFieldCOMPlus_GetTypeInfo(This,pTypeInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,pTypeInfo)



#define IDebugDynamicFieldCOMPlus_GetTypeFromPrimitive(This,dwCorElementType,ppType)	\
    (This)->lpVtbl -> GetTypeFromPrimitive(This,dwCorElementType,ppType)

#define IDebugDynamicFieldCOMPlus_GetTypeFromTypeDef(This,ulAppDomainID,guidModule,tokClass,ppType)	\
    (This)->lpVtbl -> GetTypeFromTypeDef(This,ulAppDomainID,guidModule,tokClass,ppType)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugDynamicFieldCOMPlus_GetTypeFromPrimitive_Proxy( 
    IDebugDynamicFieldCOMPlus * This,
    /* [in] */ DWORD dwCorElementType,
    /* [out] */ IDebugField **ppType);


void __RPC_STUB IDebugDynamicFieldCOMPlus_GetTypeFromPrimitive_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugDynamicFieldCOMPlus_GetTypeFromTypeDef_Proxy( 
    IDebugDynamicFieldCOMPlus * This,
    /* [in] */ ULONG32 ulAppDomainID,
    /* [in] */ GUID guidModule,
    /* [in] */ _mdToken tokClass,
    /* [out] */ IDebugField **ppType);


void __RPC_STUB IDebugDynamicFieldCOMPlus_GetTypeFromTypeDef_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugDynamicFieldCOMPlus_INTERFACE_DEFINED__ */


#ifndef __IDebugEngineSymbolProviderServices_INTERFACE_DEFINED__
#define __IDebugEngineSymbolProviderServices_INTERFACE_DEFINED__

/* interface IDebugEngineSymbolProviderServices */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugEngineSymbolProviderServices;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("83919262-ACD6-11d2-9028-00C04FA302A1")
    IDebugEngineSymbolProviderServices : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE EnumCodeContexts( 
            /* [length_is][size_is][in] */ IDebugAddress **rgpAddresses,
            /* [in] */ DWORD celtAddresses,
            /* [out] */ IEnumDebugCodeContexts2 **ppEnum) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugEngineSymbolProviderServicesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugEngineSymbolProviderServices * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugEngineSymbolProviderServices * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugEngineSymbolProviderServices * This);
        
        HRESULT ( STDMETHODCALLTYPE *EnumCodeContexts )( 
            IDebugEngineSymbolProviderServices * This,
            /* [length_is][size_is][in] */ IDebugAddress **rgpAddresses,
            /* [in] */ DWORD celtAddresses,
            /* [out] */ IEnumDebugCodeContexts2 **ppEnum);
        
        END_INTERFACE
    } IDebugEngineSymbolProviderServicesVtbl;

    interface IDebugEngineSymbolProviderServices
    {
        CONST_VTBL struct IDebugEngineSymbolProviderServicesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugEngineSymbolProviderServices_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugEngineSymbolProviderServices_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugEngineSymbolProviderServices_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugEngineSymbolProviderServices_EnumCodeContexts(This,rgpAddresses,celtAddresses,ppEnum)	\
    (This)->lpVtbl -> EnumCodeContexts(This,rgpAddresses,celtAddresses,ppEnum)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugEngineSymbolProviderServices_EnumCodeContexts_Proxy( 
    IDebugEngineSymbolProviderServices * This,
    /* [length_is][size_is][in] */ IDebugAddress **rgpAddresses,
    /* [in] */ DWORD celtAddresses,
    /* [out] */ IEnumDebugCodeContexts2 **ppEnum);


void __RPC_STUB IDebugEngineSymbolProviderServices_EnumCodeContexts_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugEngineSymbolProviderServices_INTERFACE_DEFINED__ */


#ifndef __IDebugAddress_INTERFACE_DEFINED__
#define __IDebugAddress_INTERFACE_DEFINED__

/* interface IDebugAddress */
/* [unique][uuid][object] */ 


enum __MIDL_IDebugAddress_0001
    {	ADDRESS_KIND_NATIVE	= 0x1,
	ADDRESS_KIND_UNMANAGED_THIS_RELATIVE	= 0x2,
	ADDRESS_KIND_UNMANAGED_PHYSICAL	= 0x5,
	ADDRESS_KIND_METADATA_METHOD	= 0x10,
	ADDRESS_KIND_METADATA_FIELD	= 0x11,
	ADDRESS_KIND_METADATA_LOCAL	= 0x12,
	ADDRESS_KIND_METADATA_PARAM	= 0x13,
	ADDRESS_KIND_METADATA_ARRAYELEM	= 0x14,
	ADDRESS_KIND_METADATA_RETVAL	= 0x15
    } ;
typedef DWORD ADDRESS_KIND;

typedef struct _tagNATIVE_ADDRESS
    {
    DWORD unknown;
    } 	NATIVE_ADDRESS;

typedef struct _tagUNMANAGED_THIS_RELATIVE
    {
    DWORD dwOffset;
    DWORD dwBitOffset;
    DWORD dwBitLength;
    } 	UNMANAGED_ADDRESS_THIS_RELATIVE;

typedef struct _tagUNMANAGED_ADDRESS_PHYSICAL
    {
    ULONGLONG offset;
    } 	UNMANAGED_ADDRESS_PHYSICAL;

typedef struct _tagMETADATA_ADDRESS_METHOD
    {
    _mdToken tokMethod;
    DWORD dwOffset;
    DWORD dwVersion;
    } 	METADATA_ADDRESS_METHOD;

typedef struct _tagMETADATA_ADDRESS_FIELD
    {
    _mdToken tokField;
    } 	METADATA_ADDRESS_FIELD;

typedef struct _tagMETADATA_ADDRESS_LOCAL
    {
    _mdToken tokMethod;
    IUnknown *pLocal;
    DWORD dwIndex;
    } 	METADATA_ADDRESS_LOCAL;

typedef struct _tagMETADATA_ADDRESS_PARAM
    {
    _mdToken tokMethod;
    _mdToken tokParam;
    DWORD dwIndex;
    } 	METADATA_ADDRESS_PARAM;

typedef struct _tagMETADATA_ADDRESS_ARRAYELEM
    {
    _mdToken tokMethod;
    DWORD dwIndex;
    } 	METADATA_ADDRESS_ARRAYELEM;

typedef struct _tagMETADATA_ADDRESS_RETVAL
    {
    _mdToken tokMethod;
    DWORD dwCorType;
    DWORD dwSigSize;
    BYTE rgSig[ 10 ];
    } 	METADATA_ADDRESS_RETVAL;

typedef struct _tagDEBUG_ADDRESS_UNION
    {
    ADDRESS_KIND dwKind;
    /* [switch_is] */ /* [switch_type] */ union __MIDL_IDebugAddress_0002
        {
        /* [case()] */ NATIVE_ADDRESS addrNative;
        /* [case()] */ UNMANAGED_ADDRESS_THIS_RELATIVE addrThisRel;
        /* [case()] */ UNMANAGED_ADDRESS_PHYSICAL addrUPhysical;
        /* [case()] */ METADATA_ADDRESS_METHOD addrMethod;
        /* [case()] */ METADATA_ADDRESS_FIELD addrField;
        /* [case()] */ METADATA_ADDRESS_LOCAL addrLocal;
        /* [case()] */ METADATA_ADDRESS_PARAM addrParam;
        /* [case()] */ METADATA_ADDRESS_ARRAYELEM addrArrayElem;
        /* [case()] */ METADATA_ADDRESS_RETVAL addrRetVal;
        /* [default] */ DWORD unused;
        } 	addr;
    } 	DEBUG_ADDRESS_UNION;

typedef struct _tagDEBUG_ADDRESS
    {
    ULONG32 ulAppDomainID;
    GUID guidModule;
    _mdToken tokClass;
    DEBUG_ADDRESS_UNION addr;
    } 	DEBUG_ADDRESS;


EXTERN_C const IID IID_IDebugAddress;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c2e34ebb-8b9d-11d2-9014-00c04fa38338")
    IDebugAddress : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetAddress( 
            /* [out] */ DEBUG_ADDRESS *pAddress) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugAddressVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugAddress * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugAddress * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugAddress * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetAddress )( 
            IDebugAddress * This,
            /* [out] */ DEBUG_ADDRESS *pAddress);
        
        END_INTERFACE
    } IDebugAddressVtbl;

    interface IDebugAddress
    {
        CONST_VTBL struct IDebugAddressVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugAddress_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugAddress_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugAddress_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugAddress_GetAddress(This,pAddress)	\
    (This)->lpVtbl -> GetAddress(This,pAddress)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugAddress_GetAddress_Proxy( 
    IDebugAddress * This,
    /* [out] */ DEBUG_ADDRESS *pAddress);


void __RPC_STUB IDebugAddress_GetAddress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugAddress_INTERFACE_DEFINED__ */


#ifndef __IEnumDebugFields_INTERFACE_DEFINED__
#define __IEnumDebugFields_INTERFACE_DEFINED__

/* interface IEnumDebugFields */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IEnumDebugFields;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c2e34ebc-8b9d-11d2-9014-00c04fa38338")
    IEnumDebugFields : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ IDebugField **rgelt,
            /* [out][in] */ ULONG *pceltFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG celt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ IEnumDebugFields **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCount( 
            /* [out] */ ULONG *pcelt) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumDebugFieldsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IEnumDebugFields * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IEnumDebugFields * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IEnumDebugFields * This);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            IEnumDebugFields * This,
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ IDebugField **rgelt,
            /* [out][in] */ ULONG *pceltFetched);
        
        HRESULT ( STDMETHODCALLTYPE *Skip )( 
            IEnumDebugFields * This,
            /* [in] */ ULONG celt);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IEnumDebugFields * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            IEnumDebugFields * This,
            /* [out] */ IEnumDebugFields **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetCount )( 
            IEnumDebugFields * This,
            /* [out] */ ULONG *pcelt);
        
        END_INTERFACE
    } IEnumDebugFieldsVtbl;

    interface IEnumDebugFields
    {
        CONST_VTBL struct IEnumDebugFieldsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumDebugFields_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IEnumDebugFields_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IEnumDebugFields_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IEnumDebugFields_Next(This,celt,rgelt,pceltFetched)	\
    (This)->lpVtbl -> Next(This,celt,rgelt,pceltFetched)

#define IEnumDebugFields_Skip(This,celt)	\
    (This)->lpVtbl -> Skip(This,celt)

#define IEnumDebugFields_Reset(This)	\
    (This)->lpVtbl -> Reset(This)

#define IEnumDebugFields_Clone(This,ppEnum)	\
    (This)->lpVtbl -> Clone(This,ppEnum)

#define IEnumDebugFields_GetCount(This,pcelt)	\
    (This)->lpVtbl -> GetCount(This,pcelt)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IEnumDebugFields_Next_Proxy( 
    IEnumDebugFields * This,
    /* [in] */ ULONG celt,
    /* [length_is][size_is][out] */ IDebugField **rgelt,
    /* [out][in] */ ULONG *pceltFetched);


void __RPC_STUB IEnumDebugFields_Next_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugFields_Skip_Proxy( 
    IEnumDebugFields * This,
    /* [in] */ ULONG celt);


void __RPC_STUB IEnumDebugFields_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugFields_Reset_Proxy( 
    IEnumDebugFields * This);


void __RPC_STUB IEnumDebugFields_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugFields_Clone_Proxy( 
    IEnumDebugFields * This,
    /* [out] */ IEnumDebugFields **ppEnum);


void __RPC_STUB IEnumDebugFields_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugFields_GetCount_Proxy( 
    IEnumDebugFields * This,
    /* [out] */ ULONG *pcelt);


void __RPC_STUB IEnumDebugFields_GetCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IEnumDebugFields_INTERFACE_DEFINED__ */


#ifndef __IEnumDebugAddresses_INTERFACE_DEFINED__
#define __IEnumDebugAddresses_INTERFACE_DEFINED__

/* interface IEnumDebugAddresses */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IEnumDebugAddresses;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c2e34ebd-8b9d-11d2-9014-00c04fa38338")
    IEnumDebugAddresses : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ IDebugAddress **rgelt,
            /* [out][in] */ ULONG *pceltFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG celt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ IEnumDebugAddresses **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCount( 
            /* [out] */ ULONG *pcelt) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumDebugAddressesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IEnumDebugAddresses * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IEnumDebugAddresses * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IEnumDebugAddresses * This);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            IEnumDebugAddresses * This,
            /* [in] */ ULONG celt,
            /* [length_is][size_is][out] */ IDebugAddress **rgelt,
            /* [out][in] */ ULONG *pceltFetched);
        
        HRESULT ( STDMETHODCALLTYPE *Skip )( 
            IEnumDebugAddresses * This,
            /* [in] */ ULONG celt);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IEnumDebugAddresses * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            IEnumDebugAddresses * This,
            /* [out] */ IEnumDebugAddresses **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetCount )( 
            IEnumDebugAddresses * This,
            /* [out] */ ULONG *pcelt);
        
        END_INTERFACE
    } IEnumDebugAddressesVtbl;

    interface IEnumDebugAddresses
    {
        CONST_VTBL struct IEnumDebugAddressesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumDebugAddresses_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IEnumDebugAddresses_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IEnumDebugAddresses_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IEnumDebugAddresses_Next(This,celt,rgelt,pceltFetched)	\
    (This)->lpVtbl -> Next(This,celt,rgelt,pceltFetched)

#define IEnumDebugAddresses_Skip(This,celt)	\
    (This)->lpVtbl -> Skip(This,celt)

#define IEnumDebugAddresses_Reset(This)	\
    (This)->lpVtbl -> Reset(This)

#define IEnumDebugAddresses_Clone(This,ppEnum)	\
    (This)->lpVtbl -> Clone(This,ppEnum)

#define IEnumDebugAddresses_GetCount(This,pcelt)	\
    (This)->lpVtbl -> GetCount(This,pcelt)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IEnumDebugAddresses_Next_Proxy( 
    IEnumDebugAddresses * This,
    /* [in] */ ULONG celt,
    /* [length_is][size_is][out] */ IDebugAddress **rgelt,
    /* [out][in] */ ULONG *pceltFetched);


void __RPC_STUB IEnumDebugAddresses_Next_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugAddresses_Skip_Proxy( 
    IEnumDebugAddresses * This,
    /* [in] */ ULONG celt);


void __RPC_STUB IEnumDebugAddresses_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugAddresses_Reset_Proxy( 
    IEnumDebugAddresses * This);


void __RPC_STUB IEnumDebugAddresses_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugAddresses_Clone_Proxy( 
    IEnumDebugAddresses * This,
    /* [out] */ IEnumDebugAddresses **ppEnum);


void __RPC_STUB IEnumDebugAddresses_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugAddresses_GetCount_Proxy( 
    IEnumDebugAddresses * This,
    /* [out] */ ULONG *pcelt);


void __RPC_STUB IEnumDebugAddresses_GetCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IEnumDebugAddresses_INTERFACE_DEFINED__ */


#ifndef __IDebugCustomAttributeQuery_INTERFACE_DEFINED__
#define __IDebugCustomAttributeQuery_INTERFACE_DEFINED__

/* interface IDebugCustomAttributeQuery */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugCustomAttributeQuery;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("DFD37B5A-1E3A-4f15-8098-220ABADC620B")
    IDebugCustomAttributeQuery : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE IsCustomAttributeDefined( 
            /* [full][in] */ LPCOLESTR pszCustomAttributeName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCustomAttributeByName( 
            /* [full][in] */ LPCOLESTR pszCustomAttributeName,
            /* [length_is][size_is][out][in] */ BYTE *ppBlob,
            /* [out][in] */ DWORD *pdwLen) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugCustomAttributeQueryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugCustomAttributeQuery * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugCustomAttributeQuery * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugCustomAttributeQuery * This);
        
        HRESULT ( STDMETHODCALLTYPE *IsCustomAttributeDefined )( 
            IDebugCustomAttributeQuery * This,
            /* [full][in] */ LPCOLESTR pszCustomAttributeName);
        
        HRESULT ( STDMETHODCALLTYPE *GetCustomAttributeByName )( 
            IDebugCustomAttributeQuery * This,
            /* [full][in] */ LPCOLESTR pszCustomAttributeName,
            /* [length_is][size_is][out][in] */ BYTE *ppBlob,
            /* [out][in] */ DWORD *pdwLen);
        
        END_INTERFACE
    } IDebugCustomAttributeQueryVtbl;

    interface IDebugCustomAttributeQuery
    {
        CONST_VTBL struct IDebugCustomAttributeQueryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugCustomAttributeQuery_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugCustomAttributeQuery_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugCustomAttributeQuery_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugCustomAttributeQuery_IsCustomAttributeDefined(This,pszCustomAttributeName)	\
    (This)->lpVtbl -> IsCustomAttributeDefined(This,pszCustomAttributeName)

#define IDebugCustomAttributeQuery_GetCustomAttributeByName(This,pszCustomAttributeName,ppBlob,pdwLen)	\
    (This)->lpVtbl -> GetCustomAttributeByName(This,pszCustomAttributeName,ppBlob,pdwLen)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDebugCustomAttributeQuery_IsCustomAttributeDefined_Proxy( 
    IDebugCustomAttributeQuery * This,
    /* [full][in] */ LPCOLESTR pszCustomAttributeName);


void __RPC_STUB IDebugCustomAttributeQuery_IsCustomAttributeDefined_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugCustomAttributeQuery_GetCustomAttributeByName_Proxy( 
    IDebugCustomAttributeQuery * This,
    /* [full][in] */ LPCOLESTR pszCustomAttributeName,
    /* [length_is][size_is][out][in] */ BYTE *ppBlob,
    /* [out][in] */ DWORD *pdwLen);


void __RPC_STUB IDebugCustomAttributeQuery_GetCustomAttributeByName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugCustomAttributeQuery_INTERFACE_DEFINED__ */



#ifndef __SHLib_LIBRARY_DEFINED__
#define __SHLib_LIBRARY_DEFINED__

/* library SHLib */
/* [uuid] */ 


EXTERN_C const IID LIBID_SHLib;

EXTERN_C const CLSID CLSID_SHManaged;

#ifdef __cplusplus

class DECLSPEC_UUID("c2e34ebf-8b9d-11d2-9014-00c04fa38338")
SHManaged;
#endif
#endif /* __SHLib_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR * ); 
void                      __RPC_USER  BSTR_UserFree(     unsigned long *, BSTR * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\vc7addon\vsbuilt\debug\inc\i386\toolhrt.h ===
/*++

Copyright(c) !YEAR Microsoft Corporation

Module Name:

	ToolHrt.h

Abstract:

	Useful stuff for listing processes, getting info from a PE image, etc.

Author:

    Matthew D Hendel (math) 03-Oct-1997

Environment:

	Win95, Win98, NT 4.0, NT 5.0.

--*/


#ifndef _TOOLHRT_H_
#define _TOOLHRT_H_

#ifdef __cplusplus
extern "C" {
#endif


#ifndef LOCAL
#define LOCAL static
#endif


enum IMAGE_TYPE {
	IMAGE_TYPE_UNKNOWN,
	IMAGE_TYPE_DOS_STUB,
	IMAGE_TYPE_WIN16_OR_OS2,
	IMAGE_TYPE_WIN32,
	IMAGE_TYPE_CRASHDUMP,
	IMAGE_TYPE_MINIDUMP,
	IMAGE_TYPE_WIN64
};

#include "pshpack4.h"

typedef struct _IMAGE_INFO {

	DWORD	Size;			// Must be initialized prior to the call
	DWORD	ImageType;

	union {
		struct {
			ULONG	Subsystem;
			WORD	Characteristics;
			WORD	Machine;
			BOOL	ManagedCode;
			BOOL	ManagedOnly;
		} Win32;

		struct {
			BOOL	fUserMode;
			WORD	Machine;
		} CrashDump;
	} u;

} IMAGE_INFO;

#include "poppack.h"


//
// Get information about a binary executable file.
//

BOOL
WINAPI
GetImageInfo(
	LPCSTR		ImageName,
	IMAGE_INFO*	ImageInfo
	);

//
// Is this image a valid Win32 subsystem image
//

#define IS_WIN32_SUBSYSTEM_IMAGE(ii)	\
	((ii).ImageType == IMAGE_TYPE_WIN32 &&	\
	((ii).u.Win32.Subsystem == IMAGE_SUBSYSTEM_WINDOWS_CUI ||	\
	 (ii).u.Win32.Subsystem == IMAGE_SUBSYSTEM_WINDOWS_GUI))


#define WINDOW_TITLE_SIZE		64
#define PROCESS_NAME_SIZE		_MAX_FNAME

#define TASK_SYSTEM_PROCESS		0x0001
#define TASK_BEING_DEBUGGED		0x0002
#define TASK_16_BIT				0x0004
#define TASK_64_BIT				0x0008

#include "pshpack4.h"

typedef struct _TASK_ENTRY {
	//
	// Basic Info
    DWORD	dwProcessId;
	DWORD	dwFlags;

	// 
	// Extended Info
	//
	struct {
		DWORD   dwSessionId;
        DWORD	dwParentPid;
    	DWORD	dwImageType;

	    union{
	        HWND	hWnd;
	        DWORDLONG AlignhWnd;
	    };
        CHAR	szProcessName [PROCESS_NAME_SIZE];
        CHAR	szWindowTitle [WINDOW_TITLE_SIZE];
    	CHAR	szImageName [_MAX_PATH];
	} exInfo;
} TASK_ENTRY, *PTASK_ENTRY;

#include "poppack.h"

//
// Get just the dwProcessId and dwFlags fields for all processes
//
#define TASKENTRY_PROCESSID		0x00000001
#define TASKENTRY_FLAGS			0x00000002
#define TASKENTRY_EXTENDEDINFO	0x00000004
//
// Get the complete _TASK_ENTRY fields for all proccess
//
#define TASKENTRY_ALL			0x00000007



//
// Get a task list.
//

BOOL
WINAPI
GetTaskList(
	OUT TASK_ENTRY rgTasks [],
	IN OUT DWORD* lpdwTaskCount,
	IN DWORD      dwFlags
    );

//
// Check whether a process is a system (server) process or not.
//

BOOL
WINAPI
IsSystemProcess(
	DWORD dwProcessId
	);

//
// On Windows NT, change the SE_DEBUG_PRIVILEGE value. On Win9x, NOP.
//

BOOL
WINAPI
SetDebugPrivilege(
	BOOL fEnable
	);

BOOL
WINAPI
IsDebuggerPresentEx(
	DWORD dwPid
	);



HANDLE
OpenProcessEx(
	DWORD   dwDesiredAccess,
	BOOL    bInheritHandle,
	DWORD   dwProcessId,
	LPBOOL  lpfResetDebugPriv
	);

//
//	For dynimcally loading psapi.dll -- WinNT only
//

typedef DWORD (WINAPI *GETMODULEFILENAMEEXA)(
	HANDLE hProcess,
	HMODULE hModule,
	LPSTR lpFilename,
	DWORD nSize
	);

BOOL
WINAPI
GetImageName(
	DWORD dwProcessId,
	LPTSTR szImageName,
	DWORD cbBufferSize
	);
    

BOOL
WINAPI
GetSessionIdForProcess(
	DWORD   processId,
	LPDWORD lpSessionId
	);

BOOL
WINAPI
GetImageNameUsingPsapiEx(
	HANDLE               hProcess,
	HMODULE              hDll,
	DWORD                dwProcessId,
    GETMODULEFILENAMEEXA pfnGetModuleFileNameExA,
	LPTSTR               szImageName,
	DWORD                cbBufferSize
	);

BOOL
IsWin9x(
  );

BOOL
IsNT4(
 );

BOOL
WINAPI
IsProcess64Bit(
	DWORD dwProcessId
	);

BOOL
InitDbgProxy(
		);
VOID
UnInitDbgProxy(
    );

BOOL
ReconcileWithProxy(
    DWORD       dwCount,
	PTASK_ENTRY rgTasks,
	DWORD       dwFlags
	);

BOOL
ProxyIsDetachedPid(
	DWORD   dwPid,
	LPDWORD lpfIsDetached
	);

HANDLE
LoadUsrProfile(
	HANDLE hToken
	);

BOOL
UnLoadUsrProfile(
	HANDLE hToken,
	HANDLE hProfile
	);

BOOL
GetEnvironmentBlock(
	HANDLE  hToken,
	LPVOID* ppEnvBlock
	);
BOOL
ReleaseEnvironmentBlock(
	LPVOID pEnvBlock
	);



DECLARE_HANDLE(HJIT);

HJIT
NotifyOleRpcStepInitiate(
	);

BOOL
NotifyOleRpcStepComplete(
	HJIT hJit
	);

BOOL
GetPidForOleRpcJit(
	LPDWORD lpdwPid
	);

#ifdef __cplusplus
};		// extern "C"
#endif

#endif // _TOOLHRT_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\vc7addon\vsbuilt\retail\inc\i386\dircontrol.h ===
#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 6.00.0347 */
/* at Sat Jan 05 01:43:48 2002
 */
/* Compiler settings for dircontrol.idl:
    Oicf, W0, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext
    error checks: allocation ref bounds_check enum stub_data , no_format_optimization
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 440
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __dircontrol_h__
#define __dircontrol_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IDirListSite_FWD_DEFINED__
#define __IDirListSite_FWD_DEFINED__
typedef interface IDirListSite IDirListSite;
#endif 	/* __IDirListSite_FWD_DEFINED__ */


#ifndef __IDirListEvents_FWD_DEFINED__
#define __IDirListEvents_FWD_DEFINED__
typedef interface IDirListEvents IDirListEvents;
#endif 	/* __IDirListEvents_FWD_DEFINED__ */


#ifndef __IDirList_FWD_DEFINED__
#define __IDirList_FWD_DEFINED__
typedef interface IDirList IDirList;
#endif 	/* __IDirList_FWD_DEFINED__ */


#ifndef __IDirAutoCompleteList_FWD_DEFINED__
#define __IDirAutoCompleteList_FWD_DEFINED__
typedef interface IDirAutoCompleteList IDirAutoCompleteList;
#endif 	/* __IDirAutoCompleteList_FWD_DEFINED__ */


#ifndef __DirList_FWD_DEFINED__
#define __DirList_FWD_DEFINED__

#ifdef __cplusplus
typedef class DirList DirList;
#else
typedef struct DirList DirList;
#endif /* __cplusplus */

#endif 	/* __DirList_FWD_DEFINED__ */


#ifndef __DirAutoCompleteList_FWD_DEFINED__
#define __DirAutoCompleteList_FWD_DEFINED__

#ifdef __cplusplus
typedef class DirAutoCompleteList DirAutoCompleteList;
#else
typedef struct DirAutoCompleteList DirAutoCompleteList;
#endif /* __cplusplus */

#endif 	/* __DirAutoCompleteList_FWD_DEFINED__ */


#ifndef __DirListPackage_FWD_DEFINED__
#define __DirListPackage_FWD_DEFINED__

#ifdef __cplusplus
typedef class DirListPackage DirListPackage;
#else
typedef struct DirListPackage DirListPackage;
#endif /* __cplusplus */

#endif 	/* __DirListPackage_FWD_DEFINED__ */


#ifndef __IDirListEvents_FWD_DEFINED__
#define __IDirListEvents_FWD_DEFINED__
typedef interface IDirListEvents IDirListEvents;
#endif 	/* __IDirListEvents_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "ocidl.h"

#ifdef __cplusplus
extern "C"{
#endif 

void * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void * ); 

/* interface __MIDL_itf_dircontrol_0000 */
/* [local] */ 

extern "C" const __declspec(selectany) GUID SID_SDirList = { 0x5403ac85L,0xc8c8,0x4967,0xbd,0xb0,0x66,0x2d,0x48,0x5f,0x0c,0x28 };


extern RPC_IF_HANDLE __MIDL_itf_dircontrol_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_dircontrol_0000_v0_0_s_ifspec;

#ifndef __IDirListSite_INTERFACE_DEFINED__
#define __IDirListSite_INTERFACE_DEFINED__

/* interface IDirListSite */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IDirListSite;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C3270982-3ADA-42bf-8EC5-0681DD3F7789")
    IDirListSite : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetSite( 
            /* [in] */ IUnknown *__MIDL_0011) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDirListSiteVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDirListSite * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDirListSite * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDirListSite * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetSite )( 
            IDirListSite * This,
            /* [in] */ IUnknown *__MIDL_0011);
        
        END_INTERFACE
    } IDirListSiteVtbl;

    interface IDirListSite
    {
        CONST_VTBL struct IDirListSiteVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDirListSite_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDirListSite_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDirListSite_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDirListSite_SetSite(This,__MIDL_0011)	\
    (This)->lpVtbl -> SetSite(This,__MIDL_0011)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDirListSite_SetSite_Proxy( 
    IDirListSite * This,
    /* [in] */ IUnknown *__MIDL_0011);


void __RPC_STUB IDirListSite_SetSite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDirListSite_INTERFACE_DEFINED__ */


#ifndef __IDirListEvents_INTERFACE_DEFINED__
#define __IDirListEvents_INTERFACE_DEFINED__

/* interface IDirListEvents */
/* [object][dual][uuid] */ 


EXTERN_C const IID IID_IDirListEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4A68351F-7AEB-4af0-9771-3F206E1FF62F")
    IDirListEvents : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE OnChange( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDirListEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDirListEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDirListEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDirListEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDirListEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDirListEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDirListEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDirListEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *OnChange )( 
            IDirListEvents * This);
        
        END_INTERFACE
    } IDirListEventsVtbl;

    interface IDirListEvents
    {
        CONST_VTBL struct IDirListEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDirListEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDirListEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDirListEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDirListEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDirListEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDirListEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDirListEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDirListEvents_OnChange(This)	\
    (This)->lpVtbl -> OnChange(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IDirListEvents_OnChange_Proxy( 
    IDirListEvents * This);


void __RPC_STUB IDirListEvents_OnChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDirListEvents_INTERFACE_DEFINED__ */


#ifndef __IDirList_INTERFACE_DEFINED__
#define __IDirList_INTERFACE_DEFINED__

/* interface IDirList */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IDirList;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("13ACEC02-FA52-4C89-915B-888D05844A6F")
    IDirList : public IDispatch
    {
    public:
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_HWND( 
            /* [retval][out] */ LONG_PTR *pHWND) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Description( 
            /* [retval][out] */ BSTR *pbstrDescription) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Description( 
            /* [in] */ BSTR bstrDescription) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Title( 
            /* [retval][out] */ BSTR *pbstrTitle) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Title( 
            /* [in] */ BSTR bstrTitle) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_ShowTitle( 
            /* [in] */ VARIANT_BOOL bShow) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_ShowCheck( 
            /* [in] */ VARIANT_BOOL bShow) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *nItems) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Index( 
            /* [in] */ long nItem,
            /* [retval][out] */ BSTR *pbstrItem) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR bstrItem) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDirListVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDirList * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDirList * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDirList * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDirList * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDirList * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDirList * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDirList * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HWND )( 
            IDirList * This,
            /* [retval][out] */ LONG_PTR *pHWND);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            IDirList * This,
            /* [retval][out] */ BSTR *pbstrDescription);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Description )( 
            IDirList * This,
            /* [in] */ BSTR bstrDescription);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Title )( 
            IDirList * This,
            /* [retval][out] */ BSTR *pbstrTitle);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Title )( 
            IDirList * This,
            /* [in] */ BSTR bstrTitle);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ShowTitle )( 
            IDirList * This,
            /* [in] */ VARIANT_BOOL bShow);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ShowCheck )( 
            IDirList * This,
            /* [in] */ VARIANT_BOOL bShow);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            IDirList * This,
            /* [retval][out] */ long *nItems);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Index )( 
            IDirList * This,
            /* [in] */ long nItem,
            /* [retval][out] */ BSTR *pbstrItem);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            IDirList * This,
            /* [in] */ BSTR bstrItem);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IDirList * This);
        
        END_INTERFACE
    } IDirListVtbl;

    interface IDirList
    {
        CONST_VTBL struct IDirListVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDirList_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDirList_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDirList_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDirList_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDirList_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDirList_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDirList_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDirList_get_HWND(This,pHWND)	\
    (This)->lpVtbl -> get_HWND(This,pHWND)

#define IDirList_get_Description(This,pbstrDescription)	\
    (This)->lpVtbl -> get_Description(This,pbstrDescription)

#define IDirList_put_Description(This,bstrDescription)	\
    (This)->lpVtbl -> put_Description(This,bstrDescription)

#define IDirList_get_Title(This,pbstrTitle)	\
    (This)->lpVtbl -> get_Title(This,pbstrTitle)

#define IDirList_put_Title(This,bstrTitle)	\
    (This)->lpVtbl -> put_Title(This,bstrTitle)

#define IDirList_put_ShowTitle(This,bShow)	\
    (This)->lpVtbl -> put_ShowTitle(This,bShow)

#define IDirList_put_ShowCheck(This,bShow)	\
    (This)->lpVtbl -> put_ShowCheck(This,bShow)

#define IDirList_get_Count(This,nItems)	\
    (This)->lpVtbl -> get_Count(This,nItems)

#define IDirList_Index(This,nItem,pbstrItem)	\
    (This)->lpVtbl -> Index(This,nItem,pbstrItem)

#define IDirList_Add(This,bstrItem)	\
    (This)->lpVtbl -> Add(This,bstrItem)

#define IDirList_Reset(This)	\
    (This)->lpVtbl -> Reset(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][propget] */ HRESULT STDMETHODCALLTYPE IDirList_get_HWND_Proxy( 
    IDirList * This,
    /* [retval][out] */ LONG_PTR *pHWND);


void __RPC_STUB IDirList_get_HWND_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IDirList_get_Description_Proxy( 
    IDirList * This,
    /* [retval][out] */ BSTR *pbstrDescription);


void __RPC_STUB IDirList_get_Description_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IDirList_put_Description_Proxy( 
    IDirList * This,
    /* [in] */ BSTR bstrDescription);


void __RPC_STUB IDirList_put_Description_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IDirList_get_Title_Proxy( 
    IDirList * This,
    /* [retval][out] */ BSTR *pbstrTitle);


void __RPC_STUB IDirList_get_Title_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IDirList_put_Title_Proxy( 
    IDirList * This,
    /* [in] */ BSTR bstrTitle);


void __RPC_STUB IDirList_put_Title_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IDirList_put_ShowTitle_Proxy( 
    IDirList * This,
    /* [in] */ VARIANT_BOOL bShow);


void __RPC_STUB IDirList_put_ShowTitle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE IDirList_put_ShowCheck_Proxy( 
    IDirList * This,
    /* [in] */ VARIANT_BOOL bShow);


void __RPC_STUB IDirList_put_ShowCheck_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IDirList_get_Count_Proxy( 
    IDirList * This,
    /* [retval][out] */ long *nItems);


void __RPC_STUB IDirList_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IDirList_Index_Proxy( 
    IDirList * This,
    /* [in] */ long nItem,
    /* [retval][out] */ BSTR *pbstrItem);


void __RPC_STUB IDirList_Index_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IDirList_Add_Proxy( 
    IDirList * This,
    /* [in] */ BSTR bstrItem);


void __RPC_STUB IDirList_Add_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IDirList_Reset_Proxy( 
    IDirList * This);


void __RPC_STUB IDirList_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDirList_INTERFACE_DEFINED__ */


#ifndef __IDirAutoCompleteList_INTERFACE_DEFINED__
#define __IDirAutoCompleteList_INTERFACE_DEFINED__

/* interface IDirAutoCompleteList */
/* [unique][helpstring][nonextensible][dual][uuid][object] */ 


EXTERN_C const IID IID_IDirAutoCompleteList;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7A51B0B6-C730-44CF-9833-EC5D666B23DB")
    IDirAutoCompleteList : public IDispatch
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IDirAutoCompleteListVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDirAutoCompleteList * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDirAutoCompleteList * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDirAutoCompleteList * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDirAutoCompleteList * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDirAutoCompleteList * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDirAutoCompleteList * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDirAutoCompleteList * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } IDirAutoCompleteListVtbl;

    interface IDirAutoCompleteList
    {
        CONST_VTBL struct IDirAutoCompleteListVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDirAutoCompleteList_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDirAutoCompleteList_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDirAutoCompleteList_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDirAutoCompleteList_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDirAutoCompleteList_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDirAutoCompleteList_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDirAutoCompleteList_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDirAutoCompleteList_INTERFACE_DEFINED__ */



#ifndef __DirControlLib_LIBRARY_DEFINED__
#define __DirControlLib_LIBRARY_DEFINED__

/* library DirControlLib */
/* [helpstring][version][uuid] */ 



EXTERN_C const IID LIBID_DirControlLib;

EXTERN_C const CLSID CLSID_DirList;

#ifdef __cplusplus

class DECLSPEC_UUID("AFD20A96-EED8-4D8C-A4EA-18AB96F6C432")
DirList;
#endif

EXTERN_C const CLSID CLSID_DirAutoCompleteList;

#ifdef __cplusplus

class DECLSPEC_UUID("106E2A2B-F06A-4535-9894-43FA4673F9BE")
DirAutoCompleteList;
#endif

EXTERN_C const CLSID CLSID_DirListPackage;

#ifdef __cplusplus

class DECLSPEC_UUID("5010C52F-44AB-4051-8CE1-D36C20D989B4")
DirListPackage;
#endif
#endif /* __DirControlLib_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR * ); 
void                      __RPC_USER  BSTR_UserFree(     unsigned long *, BSTR * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\vc7addon\vsbuilt\debug\inc\i386\vcprojcnvt2.h ===
#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 6.00.0347 */
/* at Mon Jan 21 14:47:04 2002
 */
/* Compiler settings for vcprojcnvt2.idl:
    Oicf, W0, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext
    error checks: allocation ref bounds_check enum stub_data , no_format_optimization
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 440
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __vcprojcnvt2_h__
#define __vcprojcnvt2_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IVCProjConvert_FWD_DEFINED__
#define __IVCProjConvert_FWD_DEFINED__
typedef interface IVCProjConvert IVCProjConvert;
#endif 	/* __IVCProjConvert_FWD_DEFINED__ */


#ifndef __VCProjConvert_FWD_DEFINED__
#define __VCProjConvert_FWD_DEFINED__

#ifdef __cplusplus
typedef class VCProjConvert VCProjConvert;
#else
typedef struct VCProjConvert VCProjConvert;
#endif /* __cplusplus */

#endif 	/* __VCProjConvert_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "ocidl.h"

#ifdef __cplusplus
extern "C"{
#endif 

void * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void * ); 

#ifndef __IVCProjConvert_INTERFACE_DEFINED__
#define __IVCProjConvert_INTERFACE_DEFINED__

/* interface IVCProjConvert */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IVCProjConvert;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7D8AE8C4-3FD3-11D3-8D52-00C04F8ECDB6")
    IVCProjConvert : public IUnknown
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE OpenProject( 
            BSTR bstrProjectPath,
            IUnknown *pProjEngine,
            IUnknown *pUnkServiceProvider) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Initialize( 
            BSTR bstrSourceFilesString) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetPackage( 
            long **ppPackage) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetProject( 
            IDispatch **ppProject) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_HasProjectDependencies( 
            /* [retval][out] */ VARIANT_BOOL *pbHasDeps) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ProjectDependenciesCount( 
            /* [retval][out] */ long *plNumDeps) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetNextProjectDependency( 
            /* [out] */ BSTR *pbstrProject,
            /* [out] */ BSTR *pbstrDependentProject) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ResetProjectDependencyEnum( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IVCProjConvertVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IVCProjConvert * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IVCProjConvert * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IVCProjConvert * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *OpenProject )( 
            IVCProjConvert * This,
            BSTR bstrProjectPath,
            IUnknown *pProjEngine,
            IUnknown *pUnkServiceProvider);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Initialize )( 
            IVCProjConvert * This,
            BSTR bstrSourceFilesString);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetPackage )( 
            IVCProjConvert * This,
            long **ppPackage);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetProject )( 
            IVCProjConvert * This,
            IDispatch **ppProject);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HasProjectDependencies )( 
            IVCProjConvert * This,
            /* [retval][out] */ VARIANT_BOOL *pbHasDeps);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProjectDependenciesCount )( 
            IVCProjConvert * This,
            /* [retval][out] */ long *plNumDeps);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetNextProjectDependency )( 
            IVCProjConvert * This,
            /* [out] */ BSTR *pbstrProject,
            /* [out] */ BSTR *pbstrDependentProject);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ResetProjectDependencyEnum )( 
            IVCProjConvert * This);
        
        END_INTERFACE
    } IVCProjConvertVtbl;

    interface IVCProjConvert
    {
        CONST_VTBL struct IVCProjConvertVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IVCProjConvert_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IVCProjConvert_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IVCProjConvert_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IVCProjConvert_OpenProject(This,bstrProjectPath,pProjEngine,pUnkServiceProvider)	\
    (This)->lpVtbl -> OpenProject(This,bstrProjectPath,pProjEngine,pUnkServiceProvider)

#define IVCProjConvert_Initialize(This,bstrSourceFilesString)	\
    (This)->lpVtbl -> Initialize(This,bstrSourceFilesString)

#define IVCProjConvert_GetPackage(This,ppPackage)	\
    (This)->lpVtbl -> GetPackage(This,ppPackage)

#define IVCProjConvert_GetProject(This,ppProject)	\
    (This)->lpVtbl -> GetProject(This,ppProject)

#define IVCProjConvert_get_HasProjectDependencies(This,pbHasDeps)	\
    (This)->lpVtbl -> get_HasProjectDependencies(This,pbHasDeps)

#define IVCProjConvert_get_ProjectDependenciesCount(This,plNumDeps)	\
    (This)->lpVtbl -> get_ProjectDependenciesCount(This,plNumDeps)

#define IVCProjConvert_GetNextProjectDependency(This,pbstrProject,pbstrDependentProject)	\
    (This)->lpVtbl -> GetNextProjectDependency(This,pbstrProject,pbstrDependentProject)

#define IVCProjConvert_ResetProjectDependencyEnum(This)	\
    (This)->lpVtbl -> ResetProjectDependencyEnum(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IVCProjConvert_OpenProject_Proxy( 
    IVCProjConvert * This,
    BSTR bstrProjectPath,
    IUnknown *pProjEngine,
    IUnknown *pUnkServiceProvider);


void __RPC_STUB IVCProjConvert_OpenProject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IVCProjConvert_Initialize_Proxy( 
    IVCProjConvert * This,
    BSTR bstrSourceFilesString);


void __RPC_STUB IVCProjConvert_Initialize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IVCProjConvert_GetPackage_Proxy( 
    IVCProjConvert * This,
    long **ppPackage);


void __RPC_STUB IVCProjConvert_GetPackage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IVCProjConvert_GetProject_Proxy( 
    IVCProjConvert * This,
    IDispatch **ppProject);


void __RPC_STUB IVCProjConvert_GetProject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE IVCProjConvert_get_HasProjectDependencies_Proxy( 
    IVCProjConvert * This,
    /* [retval][out] */ VARIANT_BOOL *pbHasDeps);


void __RPC_STUB IVCProjConvert_get_HasProjectDependencies_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE IVCProjConvert_get_ProjectDependenciesCount_Proxy( 
    IVCProjConvert * This,
    /* [retval][out] */ long *plNumDeps);


void __RPC_STUB IVCProjConvert_get_ProjectDependenciesCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IVCProjConvert_GetNextProjectDependency_Proxy( 
    IVCProjConvert * This,
    /* [out] */ BSTR *pbstrProject,
    /* [out] */ BSTR *pbstrDependentProject);


void __RPC_STUB IVCProjConvert_GetNextProjectDependency_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IVCProjConvert_ResetProjectDependencyEnum_Proxy( 
    IVCProjConvert * This);


void __RPC_STUB IVCProjConvert_ResetProjectDependencyEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IVCProjConvert_INTERFACE_DEFINED__ */



#ifndef __VCPROJCNVTLib_LIBRARY_DEFINED__
#define __VCPROJCNVTLib_LIBRARY_DEFINED__

/* library VCPROJCNVTLib */
/* [helpstring][version][uuid] */ 


EXTERN_C const IID LIBID_VCPROJCNVTLib;

EXTERN_C const CLSID CLSID_VCProjConvert;

#ifdef __cplusplus

class DECLSPEC_UUID("7D8AE8C5-3FD3-11D3-8D52-00C04F8ECDB6")
VCProjConvert;
#endif
#endif /* __VCPROJCNVTLib_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR * ); 
void                      __RPC_USER  BSTR_UserFree(     unsigned long *, BSTR * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\vc7addon\vsbuilt\retail\inc\i386\activscp.h ===
#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 6.00.0347 */
/* at Sat Jan 05 01:50:58 2002
 */
/* Compiler settings for activscp.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext
    error checks: allocation ref bounds_check enum stub_data , no_format_optimization
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 440
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __activscp_h__
#define __activscp_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IActiveScriptSite_FWD_DEFINED__
#define __IActiveScriptSite_FWD_DEFINED__
typedef interface IActiveScriptSite IActiveScriptSite;
#endif 	/* __IActiveScriptSite_FWD_DEFINED__ */


#ifndef __IActiveScriptError_FWD_DEFINED__
#define __IActiveScriptError_FWD_DEFINED__
typedef interface IActiveScriptError IActiveScriptError;
#endif 	/* __IActiveScriptError_FWD_DEFINED__ */


#ifndef __IActiveScriptError64_FWD_DEFINED__
#define __IActiveScriptError64_FWD_DEFINED__
typedef interface IActiveScriptError64 IActiveScriptError64;
#endif 	/* __IActiveScriptError64_FWD_DEFINED__ */


#ifndef __IActiveScriptSiteWindow_FWD_DEFINED__
#define __IActiveScriptSiteWindow_FWD_DEFINED__
typedef interface IActiveScriptSiteWindow IActiveScriptSiteWindow;
#endif 	/* __IActiveScriptSiteWindow_FWD_DEFINED__ */


#ifndef __IActiveScriptSiteInterruptPoll_FWD_DEFINED__
#define __IActiveScriptSiteInterruptPoll_FWD_DEFINED__
typedef interface IActiveScriptSiteInterruptPoll IActiveScriptSiteInterruptPoll;
#endif 	/* __IActiveScriptSiteInterruptPoll_FWD_DEFINED__ */


#ifndef __IActiveScript_FWD_DEFINED__
#define __IActiveScript_FWD_DEFINED__
typedef interface IActiveScript IActiveScript;
#endif 	/* __IActiveScript_FWD_DEFINED__ */


#ifndef __IActiveScriptParse32_FWD_DEFINED__
#define __IActiveScriptParse32_FWD_DEFINED__
typedef interface IActiveScriptParse32 IActiveScriptParse32;
#endif 	/* __IActiveScriptParse32_FWD_DEFINED__ */


#ifndef __IActiveScriptParse64_FWD_DEFINED__
#define __IActiveScriptParse64_FWD_DEFINED__
typedef interface IActiveScriptParse64 IActiveScriptParse64;
#endif 	/* __IActiveScriptParse64_FWD_DEFINED__ */


#ifndef __IActiveScriptParseProcedureOld32_FWD_DEFINED__
#define __IActiveScriptParseProcedureOld32_FWD_DEFINED__
typedef interface IActiveScriptParseProcedureOld32 IActiveScriptParseProcedureOld32;
#endif 	/* __IActiveScriptParseProcedureOld32_FWD_DEFINED__ */


#ifndef __IActiveScriptParseProcedureOld64_FWD_DEFINED__
#define __IActiveScriptParseProcedureOld64_FWD_DEFINED__
typedef interface IActiveScriptParseProcedureOld64 IActiveScriptParseProcedureOld64;
#endif 	/* __IActiveScriptParseProcedureOld64_FWD_DEFINED__ */


#ifndef __IActiveScriptParseProcedure32_FWD_DEFINED__
#define __IActiveScriptParseProcedure32_FWD_DEFINED__
typedef interface IActiveScriptParseProcedure32 IActiveScriptParseProcedure32;
#endif 	/* __IActiveScriptParseProcedure32_FWD_DEFINED__ */


#ifndef __IActiveScriptParseProcedure64_FWD_DEFINED__
#define __IActiveScriptParseProcedure64_FWD_DEFINED__
typedef interface IActiveScriptParseProcedure64 IActiveScriptParseProcedure64;
#endif 	/* __IActiveScriptParseProcedure64_FWD_DEFINED__ */


#ifndef __IActiveScriptParseProcedure2_32_FWD_DEFINED__
#define __IActiveScriptParseProcedure2_32_FWD_DEFINED__
typedef interface IActiveScriptParseProcedure2_32 IActiveScriptParseProcedure2_32;
#endif 	/* __IActiveScriptParseProcedure2_32_FWD_DEFINED__ */


#ifndef __IActiveScriptParseProcedure2_64_FWD_DEFINED__
#define __IActiveScriptParseProcedure2_64_FWD_DEFINED__
typedef interface IActiveScriptParseProcedure2_64 IActiveScriptParseProcedure2_64;
#endif 	/* __IActiveScriptParseProcedure2_64_FWD_DEFINED__ */


#ifndef __IActiveScriptEncode_FWD_DEFINED__
#define __IActiveScriptEncode_FWD_DEFINED__
typedef interface IActiveScriptEncode IActiveScriptEncode;
#endif 	/* __IActiveScriptEncode_FWD_DEFINED__ */


#ifndef __IActiveScriptHostEncode_FWD_DEFINED__
#define __IActiveScriptHostEncode_FWD_DEFINED__
typedef interface IActiveScriptHostEncode IActiveScriptHostEncode;
#endif 	/* __IActiveScriptHostEncode_FWD_DEFINED__ */


#ifndef __IBindEventHandler_FWD_DEFINED__
#define __IBindEventHandler_FWD_DEFINED__
typedef interface IBindEventHandler IBindEventHandler;
#endif 	/* __IBindEventHandler_FWD_DEFINED__ */


#ifndef __IActiveScriptStats_FWD_DEFINED__
#define __IActiveScriptStats_FWD_DEFINED__
typedef interface IActiveScriptStats IActiveScriptStats;
#endif 	/* __IActiveScriptStats_FWD_DEFINED__ */


#ifndef __IActiveScriptProperty_FWD_DEFINED__
#define __IActiveScriptProperty_FWD_DEFINED__
typedef interface IActiveScriptProperty IActiveScriptProperty;
#endif 	/* __IActiveScriptProperty_FWD_DEFINED__ */


#ifndef __ITridentEventSink_FWD_DEFINED__
#define __ITridentEventSink_FWD_DEFINED__
typedef interface ITridentEventSink ITridentEventSink;
#endif 	/* __ITridentEventSink_FWD_DEFINED__ */


#ifndef __IActiveScriptGarbageCollector_FWD_DEFINED__
#define __IActiveScriptGarbageCollector_FWD_DEFINED__
typedef interface IActiveScriptGarbageCollector IActiveScriptGarbageCollector;
#endif 	/* __IActiveScriptGarbageCollector_FWD_DEFINED__ */


#ifndef __IActiveScriptSIPInfo_FWD_DEFINED__
#define __IActiveScriptSIPInfo_FWD_DEFINED__
typedef interface IActiveScriptSIPInfo IActiveScriptSIPInfo;
#endif 	/* __IActiveScriptSIPInfo_FWD_DEFINED__ */


/* header files for imported files */
#include "ocidl.h"

#ifdef __cplusplus
extern "C"{
#endif 

void * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void * ); 

/* interface __MIDL_itf_activscp_0000 */
/* [local] */ 

//=--------------------------------------------------------------------------=
// ActivScp.h
//=--------------------------------------------------------------------------=
// (C) Copyright 2000 Microsoft Corporation.  All Rights Reserved.
//
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
// PARTICULAR PURPOSE.
//=--------------------------------------------------------------------------=
//
#pragma comment(lib,"uuid.lib")
//
// Declarations for ActiveX Scripting host applications and script engines.
//

#ifndef __ActivScp_h
#define __ActivScp_h

/* GUIDs
 ********/

#ifndef _NO_SCRIPT_GUIDS
// {F0B7A1A1-9847-11cf-8F20-00805F2CD064}
DEFINE_GUID(CATID_ActiveScript, 0xf0b7a1a1, 0x9847, 0x11cf, 0x8f, 0x20, 0x00, 0x80, 0x5f, 0x2c, 0xd0, 0x64);

// {F0B7A1A2-9847-11cf-8F20-00805F2CD064}
DEFINE_GUID(CATID_ActiveScriptParse, 0xf0b7a1a2, 0x9847, 0x11cf, 0x8f, 0x20, 0x00, 0x80, 0x5f, 0x2c, 0xd0, 0x64);

// {F0B7A1A3-9847-11cf-8F20-00805F2CD064}
DEFINE_GUID(CATID_ActiveScriptEncode, 0xf0b7a1a3, 0x9847, 0x11cf, 0x8f, 0x20, 0x00, 0x80, 0x5f, 0x2c, 0xd0, 0x64);

// {BB1A2AE1-A4F9-11cf-8F20-00805F2CD064}
DEFINE_GUID(IID_IActiveScript, 0xbb1a2ae1, 0xa4f9, 0x11cf, 0x8f, 0x20, 0x00, 0x80, 0x5f, 0x2c, 0xd0, 0x64);

// {BB1A2AE2-A4F9-11cf-8F20-00805F2CD064}
DEFINE_GUID(IID_IActiveScriptParse32, 0xbb1a2ae2, 0xa4f9, 0x11cf, 0x8f, 0x20, 0x00, 0x80, 0x5f, 0x2c, 0xd0, 0x64);
// {C7EF7658-E1EE-480E-97EA-D52CB4D76D17}
DEFINE_GUID(IID_IActiveScriptParse64, 0xc7ef7658, 0xe1ee, 0x480e, 0x97, 0xea, 0xd5, 0x2c, 0xb4, 0xd7, 0x6d, 0x17);

// {BB1A2AE3-A4F9-11cf-8F20-00805F2CD064}
DEFINE_GUID(IID_IActiveScriptEncode, 0xbb1a2ae3, 0xa4f9, 0x11cf, 0x8f, 0x20, 0x00, 0x80, 0x5f, 0x2c, 0xd0, 0x64);

// {BEE9B76E-CFE3-11d1-B747-00C04FC2B085}
DEFINE_GUID(IID_IActiveScriptHostEncode, 0xbee9b76e, 0xcfe3, 0x11d1, 0xb7, 0x47, 0x00, 0xc0, 0x4f, 0xc2, 0xb0, 0x85);

// {1CFF0050-6FDD-11d0-9328-00A0C90DCAA9}
DEFINE_GUID(IID_IActiveScriptParseProcedureOld32, 0x1cff0050, 0x6fdd, 0x11d0, 0x93, 0x28, 0x00, 0xa0, 0xc9, 0x0d, 0xca, 0xa9);
// {21F57128-08C9-4638-BA12-22D15D88DC5C}
DEFINE_GUID(IID_IActiveScriptParseProcedureOld64, 0x21f57128, 0x08c9, 0x4638, 0xba, 0x12, 0x22, 0xd1, 0x5d, 0x88, 0xdc, 0x5c);

// {AA5B6A80-B834-11d0-932F-00A0C90DCAA9}
DEFINE_GUID(IID_IActiveScriptParseProcedure32, 0xaa5b6a80, 0xb834, 0x11d0, 0x93, 0x2f, 0x00, 0xa0, 0xc9, 0x0d, 0xca, 0xa9);
// {C64713B6-E029-4CC5-9200-438B72890B6A}
DEFINE_GUID(IID_IActiveScriptParseProcedure64, 0xc64713b6, 0xe029, 0x4cc5, 0x92, 0x00, 0x43, 0x8b, 0x72, 0x89, 0x0b, 0x6a);

// {71EE5B20-FB04-11d1-B3A8-00A0C911E8B2}
DEFINE_GUID(IID_IActiveScriptParseProcedure2_32, 0x71ee5b20, 0xfb04, 0x11d1, 0xb3, 0xa8, 0x00, 0xa0, 0xc9, 0x11, 0xe8, 0xb2);
// {FE7C4271-210C-448D-9F54-76DAB7047B28}
DEFINE_GUID(IID_IActiveScriptParseProcedure2_64, 0xfe7c4271, 0x210c, 0x448d, 0x9f, 0x54, 0x76, 0xda, 0xb7, 0x04, 0x7b, 0x28);

// {DB01A1E3-A42B-11cf-8F20-00805F2CD064}
DEFINE_GUID(IID_IActiveScriptSite, 0xdb01a1e3, 0xa42b, 0x11cf, 0x8f, 0x20, 0x00, 0x80, 0x5f, 0x2c, 0xd0, 0x64);

// {D10F6761-83E9-11cf-8F20-00805F2CD064}
DEFINE_GUID(IID_IActiveScriptSiteWindow, 0xd10f6761, 0x83e9, 0x11cf, 0x8f, 0x20, 0x00, 0x80, 0x5f, 0x2c, 0xd0, 0x64);

// {539698A0-CDCA-11CF-A5EB-00AA0047A063}
DEFINE_GUID(IID_IActiveScriptSiteInterruptPoll, 0x539698a0, 0xcdca, 0x11cf, 0xa5, 0xeb, 0x00, 0xaa, 0x00, 0x47, 0xa0, 0x63);

// {EAE1BA61-A4ED-11cf-8F20-00805F2CD064}
DEFINE_GUID(IID_IActiveScriptError,   0xeae1ba61, 0xa4ed, 0x11cf, 0x8f, 0x20, 0x00, 0x80, 0x5f, 0x2c, 0xd0, 0x64);
// {B21FB2A1-5B8F-4963-8C21-21450F84ED7F}
DEFINE_GUID(IID_IActiveScriptError64, 0xb21fb2a1, 0x5b8f, 0x4963, 0x8c, 0x21, 0x21, 0x45, 0x0f, 0x84, 0xed, 0x7f);

// {63CDBCB0-C1B1-11d0-9336-00A0C90DCAA9}
DEFINE_GUID(IID_IBindEventHandler, 0x63cdbcb0, 0xc1b1, 0x11d0, 0x93, 0x36, 0x00, 0xa0, 0xc9, 0x0d, 0xca, 0xa9);

// {B8DA6310-E19B-11d0-933C-00A0C90DCAA9}
DEFINE_GUID(IID_IActiveScriptStats, 0xb8da6310, 0xe19b, 0x11d0, 0x93, 0x3c, 0x00, 0xa0, 0xc9, 0x0d, 0xca, 0xa9);

// {4954E0D0-FBC7-11D1-8410-006008C3FBFC}
DEFINE_GUID(IID_IActiveScriptProperty, 0x4954E0D0, 0xFBC7, 0x11D1, 0x84, 0x10, 0x00, 0x60, 0x08, 0xC3, 0xFB, 0xFC);

// {1DC9CA50-06EF-11d2-8415-006008C3FBFC}
DEFINE_GUID(IID_ITridentEventSink, 0x1dc9ca50, 0x6ef, 0x11d2, 0x84, 0x15, 0x00, 0x60, 0x08, 0xc3, 0xfb, 0xfc);

// {6AA2C4A0-2B53-11d4-A2A0-00104BD35090}
DEFINE_GUID(IID_IActiveScriptGarbageCollector, 0x6aa2c4a0, 0x2b53, 0x11d4, 0xa2, 0xa0, 0x00, 0x10, 0x4b, 0xd3, 0x50, 0x90);

// {764651D0-38DE-11d4-A2A3-00104BD35090}
DEFINE_GUID(IID_IActiveScriptSIPInfo, 0x764651d0, 0x38de, 0x11d4, 0xa2, 0xa3, 0x00, 0x10, 0x4b, 0xd3, 0x50, 0x90);

// {1629F04E-2799-4db5-8FE5-ACE10F17EBAB}
DEFINE_GUID(OID_VBSSIP, 0x1629f04e, 0x2799, 0x4db5, 0x8f, 0xe5, 0xac, 0xe1, 0x0f, 0x17, 0xeb, 0xab);

// {06C9E010-38CE-11d4-A2A3-00104BD35090}
DEFINE_GUID(OID_JSSIP,  0x6c9e010, 0x38ce, 0x11d4, 0xa2, 0xa3, 0x00, 0x10, 0x4b, 0xd3, 0x50, 0x90);

// {1A610570-38CE-11d4-A2A3-00104BD35090}
DEFINE_GUID(OID_WSFSIP, 0x1a610570, 0x38ce, 0x11d4, 0xa2, 0xa3, 0x00, 0x10, 0x4b, 0xd3, 0x50, 0x90);

#endif // _NO_SCRIPT_GUIDS

// Constants used by ActiveX Scripting:
//

/* IActiveScript::AddNamedItem() input flags */

#define SCRIPTITEM_ISVISIBLE            0x00000002
#define SCRIPTITEM_ISSOURCE             0x00000004
#define SCRIPTITEM_GLOBALMEMBERS        0x00000008
#define SCRIPTITEM_ISPERSISTENT         0x00000040
#define SCRIPTITEM_CODEONLY             0x00000200
#define SCRIPTITEM_NOCODE               0x00000400

#define SCRIPTITEM_ALL_FLAGS            (SCRIPTITEM_ISSOURCE | \
                                         SCRIPTITEM_ISVISIBLE | \
                                         SCRIPTITEM_ISPERSISTENT | \
                                         SCRIPTITEM_GLOBALMEMBERS | \
                                         SCRIPTITEM_NOCODE | \
                                         SCRIPTITEM_CODEONLY)

/* IActiveScript::AddTypeLib() input flags */

#define SCRIPTTYPELIB_ISCONTROL         0x00000010
#define SCRIPTTYPELIB_ISPERSISTENT      0x00000040
#define SCRIPTTYPELIB_ALL_FLAGS         (SCRIPTTYPELIB_ISCONTROL | SCRIPTTYPELIB_ISPERSISTENT)

/* IActiveScriptParse::AddScriptlet() and IActiveScriptParse::ParseScriptText() input flags */

#define SCRIPTTEXT_DELAYEXECUTION       0x00000001
#define SCRIPTTEXT_ISVISIBLE            0x00000002
#define SCRIPTTEXT_ISEXPRESSION         0x00000020
#define SCRIPTTEXT_ISPERSISTENT         0x00000040
#define SCRIPTTEXT_HOSTMANAGESSOURCE    0x00000080
#define SCRIPTTEXT_ALL_FLAGS            (SCRIPTTEXT_DELAYEXECUTION | \
                                         SCRIPTTEXT_ISVISIBLE | \
                                         SCRIPTTEXT_ISEXPRESSION | \
                                         SCRIPTTEXT_ISPERSISTENT | \
                                         SCRIPTTEXT_HOSTMANAGESSOURCE)

/* IActiveScriptParseProcedure::ParseProcedureText() input flags */

#define SCRIPTPROC_ISEXPRESSION         0x00000020
#define SCRIPTPROC_HOSTMANAGESSOURCE    0x00000080
#define SCRIPTPROC_IMPLICIT_THIS        0x00000100
#define SCRIPTPROC_IMPLICIT_PARENTS     0x00000200
#define SCRIPTPROC_ALL_FLAGS            (SCRIPTPROC_HOSTMANAGESSOURCE | \
                                         SCRIPTPROC_ISEXPRESSION | \
                                         SCRIPTPROC_IMPLICIT_THIS | \
                                         SCRIPTPROC_IMPLICIT_PARENTS)

/* IActiveScriptSite::GetItemInfo() input flags */

#define SCRIPTINFO_IUNKNOWN             0x00000001
#define SCRIPTINFO_ITYPEINFO            0x00000002
#define SCRIPTINFO_ALL_FLAGS            (SCRIPTINFO_IUNKNOWN | \
                                         SCRIPTINFO_ITYPEINFO)

/* IActiveScript::Interrupt() Flags */

#define SCRIPTINTERRUPT_DEBUG           0x00000001
#define SCRIPTINTERRUPT_RAISEEXCEPTION  0x00000002
#define SCRIPTINTERRUPT_ALL_FLAGS       (SCRIPTINTERRUPT_DEBUG | \
                                         SCRIPTINTERRUPT_RAISEEXCEPTION)

/* IActiveScriptStats::GetStat() values */

#define SCRIPTSTAT_STATEMENT_COUNT       1
#define SCRIPTSTAT_INSTRUCTION_COUNT     2
#define SCRIPTSTAT_INTSTRUCTION_TIME     3
#define SCRIPTSTAT_TOTAL_TIME            4

/* IActiveScriptEncode::AddSection() input flags */

#define SCRIPT_ENCODE_SECTION         0x00000001

#define SCRIPT_ENCODE_DEFAULT_LANGUAGE        0x00000001
#define SCRIPT_ENCODE_NO_ASP_LANGUAGE         0x00000002

/* Properties for IActiveScriptProperty */
#define SCRIPTPROP_NAME                     0x00000000
#define SCRIPTPROP_MAJORVERSION             0x00000001
#define SCRIPTPROP_MINORVERSION             0x00000002
#define SCRIPTPROP_BUILDNUMBER              0x00000003

#define SCRIPTPROP_DELAYEDEVENTSINKING      0x00001000
#define SCRIPTPROP_CATCHEXCEPTION           0x00001001
#define SCRIPTPROP_CONVERSIONLCID           0x00001002
#define SCRIPTPROP_HOSTSTACKREQUIRED        0x00001003

#define SCRIPTPROP_DEBUGGER                 0x00001100
#define SCRIPTPROP_JITDEBUG                 0x00001101

// These properties are defined and available, but are not
// officially supported.
#define SCRIPTPROP_HACK_FIBERSUPPORT        0x70000000
#define SCRIPTPROP_HACK_TRIDENTEVENTSINK    0x70000001

typedef 
enum tagSCRIPTSTATE
    {	SCRIPTSTATE_UNINITIALIZED	= 0,
	SCRIPTSTATE_INITIALIZED	= 5,
	SCRIPTSTATE_STARTED	= 1,
	SCRIPTSTATE_CONNECTED	= 2,
	SCRIPTSTATE_DISCONNECTED	= 3,
	SCRIPTSTATE_CLOSED	= 4
    } 	SCRIPTSTATE;


/* script thread state values */

typedef 
enum tagSCRIPTTHREADSTATE
    {	SCRIPTTHREADSTATE_NOTINSCRIPT	= 0,
	SCRIPTTHREADSTATE_RUNNING	= 1
    } 	SCRIPTTHREADSTATE;


/* IActiveScriptCollectGarbage constants */

typedef 
enum tagSCRIPTGCTYPE
    {	SCRIPTGCTYPE_NORMAL	= 0,
	SCRIPTGCTYPE_EXHAUSTIVE	= 1
    } 	SCRIPTGCTYPE;



/* Thread IDs */

typedef DWORD SCRIPTTHREADID;


#define SCRIPTTHREADID_CURRENT  ((SCRIPTTHREADID)-1)
#define SCRIPTTHREADID_BASE     ((SCRIPTTHREADID)-2)
#define SCRIPTTHREADID_ALL      ((SCRIPTTHREADID)-3)

/* Structures */

/* Interfaces
 *************/


























extern RPC_IF_HANDLE __MIDL_itf_activscp_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_activscp_0000_v0_0_s_ifspec;

#ifndef __IActiveScriptSite_INTERFACE_DEFINED__
#define __IActiveScriptSite_INTERFACE_DEFINED__

/* interface IActiveScriptSite */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IActiveScriptSite;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("DB01A1E3-A42B-11cf-8F20-00805F2CD064")
    IActiveScriptSite : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetLCID( 
            /* [out] */ LCID *plcid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetItemInfo( 
            /* [in] */ LPCOLESTR pstrName,
            /* [in] */ DWORD dwReturnMask,
            /* [out] */ IUnknown **ppiunkItem,
            /* [out] */ ITypeInfo **ppti) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDocVersionString( 
            /* [out] */ BSTR *pbstrVersion) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnScriptTerminate( 
            /* [in] */ const VARIANT *pvarResult,
            /* [in] */ const EXCEPINFO *pexcepinfo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnStateChange( 
            /* [in] */ SCRIPTSTATE ssScriptState) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnScriptError( 
            /* [in] */ IActiveScriptError *pscripterror) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnEnterScript( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnLeaveScript( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IActiveScriptSiteVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IActiveScriptSite * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IActiveScriptSite * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IActiveScriptSite * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetLCID )( 
            IActiveScriptSite * This,
            /* [out] */ LCID *plcid);
        
        HRESULT ( STDMETHODCALLTYPE *GetItemInfo )( 
            IActiveScriptSite * This,
            /* [in] */ LPCOLESTR pstrName,
            /* [in] */ DWORD dwReturnMask,
            /* [out] */ IUnknown **ppiunkItem,
            /* [out] */ ITypeInfo **ppti);
        
        HRESULT ( STDMETHODCALLTYPE *GetDocVersionString )( 
            IActiveScriptSite * This,
            /* [out] */ BSTR *pbstrVersion);
        
        HRESULT ( STDMETHODCALLTYPE *OnScriptTerminate )( 
            IActiveScriptSite * This,
            /* [in] */ const VARIANT *pvarResult,
            /* [in] */ const EXCEPINFO *pexcepinfo);
        
        HRESULT ( STDMETHODCALLTYPE *OnStateChange )( 
            IActiveScriptSite * This,
            /* [in] */ SCRIPTSTATE ssScriptState);
        
        HRESULT ( STDMETHODCALLTYPE *OnScriptError )( 
            IActiveScriptSite * This,
            /* [in] */ IActiveScriptError *pscripterror);
        
        HRESULT ( STDMETHODCALLTYPE *OnEnterScript )( 
            IActiveScriptSite * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnLeaveScript )( 
            IActiveScriptSite * This);
        
        END_INTERFACE
    } IActiveScriptSiteVtbl;

    interface IActiveScriptSite
    {
        CONST_VTBL struct IActiveScriptSiteVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IActiveScriptSite_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IActiveScriptSite_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IActiveScriptSite_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IActiveScriptSite_GetLCID(This,plcid)	\
    (This)->lpVtbl -> GetLCID(This,plcid)

#define IActiveScriptSite_GetItemInfo(This,pstrName,dwReturnMask,ppiunkItem,ppti)	\
    (This)->lpVtbl -> GetItemInfo(This,pstrName,dwReturnMask,ppiunkItem,ppti)

#define IActiveScriptSite_GetDocVersionString(This,pbstrVersion)	\
    (This)->lpVtbl -> GetDocVersionString(This,pbstrVersion)

#define IActiveScriptSite_OnScriptTerminate(This,pvarResult,pexcepinfo)	\
    (This)->lpVtbl -> OnScriptTerminate(This,pvarResult,pexcepinfo)

#define IActiveScriptSite_OnStateChange(This,ssScriptState)	\
    (This)->lpVtbl -> OnStateChange(This,ssScriptState)

#define IActiveScriptSite_OnScriptError(This,pscripterror)	\
    (This)->lpVtbl -> OnScriptError(This,pscripterror)

#define IActiveScriptSite_OnEnterScript(This)	\
    (This)->lpVtbl -> OnEnterScript(This)

#define IActiveScriptSite_OnLeaveScript(This)	\
    (This)->lpVtbl -> OnLeaveScript(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IActiveScriptSite_GetLCID_Proxy( 
    IActiveScriptSite * This,
    /* [out] */ LCID *plcid);


void __RPC_STUB IActiveScriptSite_GetLCID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IActiveScriptSite_GetItemInfo_Proxy( 
    IActiveScriptSite * This,
    /* [in] */ LPCOLESTR pstrName,
    /* [in] */ DWORD dwReturnMask,
    /* [out] */ IUnknown **ppiunkItem,
    /* [out] */ ITypeInfo **ppti);


void __RPC_STUB IActiveScriptSite_GetItemInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IActiveScriptSite_GetDocVersionString_Proxy( 
    IActiveScriptSite * This,
    /* [out] */ BSTR *pbstrVersion);


void __RPC_STUB IActiveScriptSite_GetDocVersionString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IActiveScriptSite_OnScriptTerminate_Proxy( 
    IActiveScriptSite * This,
    /* [in] */ const VARIANT *pvarResult,
    /* [in] */ const EXCEPINFO *pexcepinfo);


void __RPC_STUB IActiveScriptSite_OnScriptTerminate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IActiveScriptSite_OnStateChange_Proxy( 
    IActiveScriptSite * This,
    /* [in] */ SCRIPTSTATE ssScriptState);


void __RPC_STUB IActiveScriptSite_OnStateChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IActiveScriptSite_OnScriptError_Proxy( 
    IActiveScriptSite * This,
    /* [in] */ IActiveScriptError *pscripterror);


void __RPC_STUB IActiveScriptSite_OnScriptError_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IActiveScriptSite_OnEnterScript_Proxy( 
    IActiveScriptSite * This);


void __RPC_STUB IActiveScriptSite_OnEnterScript_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IActiveScriptSite_OnLeaveScript_Proxy( 
    IActiveScriptSite * This);


void __RPC_STUB IActiveScriptSite_OnLeaveScript_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IActiveScriptSite_INTERFACE_DEFINED__ */


#ifndef __IActiveScriptError_INTERFACE_DEFINED__
#define __IActiveScriptError_INTERFACE_DEFINED__

/* interface IActiveScriptError */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IActiveScriptError;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("EAE1BA61-A4ED-11cf-8F20-00805F2CD064")
    IActiveScriptError : public IUnknown
    {
    public:
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE GetExceptionInfo( 
            /* [out] */ EXCEPINFO *pexcepinfo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSourcePosition( 
            /* [out] */ DWORD *pdwSourceContext,
            /* [out] */ ULONG *pulLineNumber,
            /* [out] */ LONG *plCharacterPosition) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSourceLineText( 
            /* [out] */ BSTR *pbstrSourceLine) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IActiveScriptErrorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IActiveScriptError * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IActiveScriptError * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IActiveScriptError * This);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetExceptionInfo )( 
            IActiveScriptError * This,
            /* [out] */ EXCEPINFO *pexcepinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetSourcePosition )( 
            IActiveScriptError * This,
            /* [out] */ DWORD *pdwSourceContext,
            /* [out] */ ULONG *pulLineNumber,
            /* [out] */ LONG *plCharacterPosition);
        
        HRESULT ( STDMETHODCALLTYPE *GetSourceLineText )( 
            IActiveScriptError * This,
            /* [out] */ BSTR *pbstrSourceLine);
        
        END_INTERFACE
    } IActiveScriptErrorVtbl;

    interface IActiveScriptError
    {
        CONST_VTBL struct IActiveScriptErrorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IActiveScriptError_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IActiveScriptError_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IActiveScriptError_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IActiveScriptError_GetExceptionInfo(This,pexcepinfo)	\
    (This)->lpVtbl -> GetExceptionInfo(This,pexcepinfo)

#define IActiveScriptError_GetSourcePosition(This,pdwSourceContext,pulLineNumber,plCharacterPosition)	\
    (This)->lpVtbl -> GetSourcePosition(This,pdwSourceContext,pulLineNumber,plCharacterPosition)

#define IActiveScriptError_GetSourceLineText(This,pbstrSourceLine)	\
    (This)->lpVtbl -> GetSourceLineText(This,pbstrSourceLine)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [call_as] */ HRESULT STDMETHODCALLTYPE IActiveScriptError_RemoteGetExceptionInfo_Proxy( 
    IActiveScriptError * This,
    /* [out] */ EXCEPINFO *pexcepinfo);


void __RPC_STUB IActiveScriptError_RemoteGetExceptionInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IActiveScriptError_GetSourcePosition_Proxy( 
    IActiveScriptError * This,
    /* [out] */ DWORD *pdwSourceContext,
    /* [out] */ ULONG *pulLineNumber,
    /* [out] */ LONG *plCharacterPosition);


void __RPC_STUB IActiveScriptError_GetSourcePosition_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IActiveScriptError_GetSourceLineText_Proxy( 
    IActiveScriptError * This,
    /* [out] */ BSTR *pbstrSourceLine);


void __RPC_STUB IActiveScriptError_GetSourceLineText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IActiveScriptError_INTERFACE_DEFINED__ */


#ifndef __IActiveScriptError64_INTERFACE_DEFINED__
#define __IActiveScriptError64_INTERFACE_DEFINED__

/* interface IActiveScriptError64 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IActiveScriptError64;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B21FB2A1-5B8F-4963-8C21-21450F84ED7F")
    IActiveScriptError64 : public IActiveScriptError
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetSourcePosition64( 
            /* [out] */ DWORDLONG *pdwSourceContext,
            /* [out] */ ULONG *pulLineNumber,
            /* [out] */ LONG *plCharacterPosition) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IActiveScriptError64Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IActiveScriptError64 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IActiveScriptError64 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IActiveScriptError64 * This);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetExceptionInfo )( 
            IActiveScriptError64 * This,
            /* [out] */ EXCEPINFO *pexcepinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetSourcePosition )( 
            IActiveScriptError64 * This,
            /* [out] */ DWORD *pdwSourceContext,
            /* [out] */ ULONG *pulLineNumber,
            /* [out] */ LONG *plCharacterPosition);
        
        HRESULT ( STDMETHODCALLTYPE *GetSourceLineText )( 
            IActiveScriptError64 * This,
            /* [out] */ BSTR *pbstrSourceLine);
        
        HRESULT ( STDMETHODCALLTYPE *GetSourcePosition64 )( 
            IActiveScriptError64 * This,
            /* [out] */ DWORDLONG *pdwSourceContext,
            /* [out] */ ULONG *pulLineNumber,
            /* [out] */ LONG *plCharacterPosition);
        
        END_INTERFACE
    } IActiveScriptError64Vtbl;

    interface IActiveScriptError64
    {
        CONST_VTBL struct IActiveScriptError64Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IActiveScriptError64_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IActiveScriptError64_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IActiveScriptError64_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IActiveScriptError64_GetExceptionInfo(This,pexcepinfo)	\
    (This)->lpVtbl -> GetExceptionInfo(This,pexcepinfo)

#define IActiveScriptError64_GetSourcePosition(This,pdwSourceContext,pulLineNumber,plCharacterPosition)	\
    (This)->lpVtbl -> GetSourcePosition(This,pdwSourceContext,pulLineNumber,plCharacterPosition)

#define IActiveScriptError64_GetSourceLineText(This,pbstrSourceLine)	\
    (This)->lpVtbl -> GetSourceLineText(This,pbstrSourceLine)


#define IActiveScriptError64_GetSourcePosition64(This,pdwSourceContext,pulLineNumber,plCharacterPosition)	\
    (This)->lpVtbl -> GetSourcePosition64(This,pdwSourceContext,pulLineNumber,plCharacterPosition)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IActiveScriptError64_GetSourcePosition64_Proxy( 
    IActiveScriptError64 * This,
    /* [out] */ DWORDLONG *pdwSourceContext,
    /* [out] */ ULONG *pulLineNumber,
    /* [out] */ LONG *plCharacterPosition);


void __RPC_STUB IActiveScriptError64_GetSourcePosition64_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IActiveScriptError64_INTERFACE_DEFINED__ */


#ifndef __IActiveScriptSiteWindow_INTERFACE_DEFINED__
#define __IActiveScriptSiteWindow_INTERFACE_DEFINED__

/* interface IActiveScriptSiteWindow */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IActiveScriptSiteWindow;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D10F6761-83E9-11cf-8F20-00805F2CD064")
    IActiveScriptSiteWindow : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetWindow( 
            /* [out] */ HWND *phwnd) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnableModeless( 
            /* [in] */ BOOL fEnable) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IActiveScriptSiteWindowVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IActiveScriptSiteWindow * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IActiveScriptSiteWindow * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IActiveScriptSiteWindow * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetWindow )( 
            IActiveScriptSiteWindow * This,
            /* [out] */ HWND *phwnd);
        
        HRESULT ( STDMETHODCALLTYPE *EnableModeless )( 
            IActiveScriptSiteWindow * This,
            /* [in] */ BOOL fEnable);
        
        END_INTERFACE
    } IActiveScriptSiteWindowVtbl;

    interface IActiveScriptSiteWindow
    {
        CONST_VTBL struct IActiveScriptSiteWindowVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IActiveScriptSiteWindow_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IActiveScriptSiteWindow_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IActiveScriptSiteWindow_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IActiveScriptSiteWindow_GetWindow(This,phwnd)	\
    (This)->lpVtbl -> GetWindow(This,phwnd)

#define IActiveScriptSiteWindow_EnableModeless(This,fEnable)	\
    (This)->lpVtbl -> EnableModeless(This,fEnable)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IActiveScriptSiteWindow_GetWindow_Proxy( 
    IActiveScriptSiteWindow * This,
    /* [out] */ HWND *phwnd);


void __RPC_STUB IActiveScriptSiteWindow_GetWindow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IActiveScriptSiteWindow_EnableModeless_Proxy( 
    IActiveScriptSiteWindow * This,
    /* [in] */ BOOL fEnable);


void __RPC_STUB IActiveScriptSiteWindow_EnableModeless_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IActiveScriptSiteWindow_INTERFACE_DEFINED__ */


#ifndef __IActiveScriptSiteInterruptPoll_INTERFACE_DEFINED__
#define __IActiveScriptSiteInterruptPoll_INTERFACE_DEFINED__

/* interface IActiveScriptSiteInterruptPoll */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IActiveScriptSiteInterruptPoll;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("539698A0-CDCA-11CF-A5EB-00AA0047A063")
    IActiveScriptSiteInterruptPoll : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE QueryContinue( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IActiveScriptSiteInterruptPollVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IActiveScriptSiteInterruptPoll * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IActiveScriptSiteInterruptPoll * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IActiveScriptSiteInterruptPoll * This);
        
        HRESULT ( STDMETHODCALLTYPE *QueryContinue )( 
            IActiveScriptSiteInterruptPoll * This);
        
        END_INTERFACE
    } IActiveScriptSiteInterruptPollVtbl;

    interface IActiveScriptSiteInterruptPoll
    {
        CONST_VTBL struct IActiveScriptSiteInterruptPollVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IActiveScriptSiteInterruptPoll_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IActiveScriptSiteInterruptPoll_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IActiveScriptSiteInterruptPoll_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IActiveScriptSiteInterruptPoll_QueryContinue(This)	\
    (This)->lpVtbl -> QueryContinue(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IActiveScriptSiteInterruptPoll_QueryContinue_Proxy( 
    IActiveScriptSiteInterruptPoll * This);


void __RPC_STUB IActiveScriptSiteInterruptPoll_QueryContinue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IActiveScriptSiteInterruptPoll_INTERFACE_DEFINED__ */


#ifndef __IActiveScript_INTERFACE_DEFINED__
#define __IActiveScript_INTERFACE_DEFINED__

/* interface IActiveScript */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IActiveScript;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("BB1A2AE1-A4F9-11cf-8F20-00805F2CD064")
    IActiveScript : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetScriptSite( 
            /* [in] */ IActiveScriptSite *pass) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetScriptSite( 
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetScriptState( 
            /* [in] */ SCRIPTSTATE ss) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetScriptState( 
            /* [out] */ SCRIPTSTATE *pssState) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Close( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddNamedItem( 
            /* [in] */ LPCOLESTR pstrName,
            /* [in] */ DWORD dwFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddTypeLib( 
            /* [in] */ REFGUID rguidTypeLib,
            /* [in] */ DWORD dwMajor,
            /* [in] */ DWORD dwMinor,
            /* [in] */ DWORD dwFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetScriptDispatch( 
            /* [in] */ LPCOLESTR pstrItemName,
            /* [out] */ IDispatch **ppdisp) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCurrentScriptThreadID( 
            /* [out] */ SCRIPTTHREADID *pstidThread) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetScriptThreadID( 
            /* [in] */ DWORD dwWin32ThreadId,
            /* [out] */ SCRIPTTHREADID *pstidThread) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetScriptThreadState( 
            /* [in] */ SCRIPTTHREADID stidThread,
            /* [out] */ SCRIPTTHREADSTATE *pstsState) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE InterruptScriptThread( 
            /* [in] */ SCRIPTTHREADID stidThread,
            /* [in] */ const EXCEPINFO *pexcepinfo,
            /* [in] */ DWORD dwFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ IActiveScript **ppscript) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IActiveScriptVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IActiveScript * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IActiveScript * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IActiveScript * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetScriptSite )( 
            IActiveScript * This,
            /* [in] */ IActiveScriptSite *pass);
        
        HRESULT ( STDMETHODCALLTYPE *GetScriptSite )( 
            IActiveScript * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        HRESULT ( STDMETHODCALLTYPE *SetScriptState )( 
            IActiveScript * This,
            /* [in] */ SCRIPTSTATE ss);
        
        HRESULT ( STDMETHODCALLTYPE *GetScriptState )( 
            IActiveScript * This,
            /* [out] */ SCRIPTSTATE *pssState);
        
        HRESULT ( STDMETHODCALLTYPE *Close )( 
            IActiveScript * This);
        
        HRESULT ( STDMETHODCALLTYPE *AddNamedItem )( 
            IActiveScript * This,
            /* [in] */ LPCOLESTR pstrName,
            /* [in] */ DWORD dwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *AddTypeLib )( 
            IActiveScript * This,
            /* [in] */ REFGUID rguidTypeLib,
            /* [in] */ DWORD dwMajor,
            /* [in] */ DWORD dwMinor,
            /* [in] */ DWORD dwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *GetScriptDispatch )( 
            IActiveScript * This,
            /* [in] */ LPCOLESTR pstrItemName,
            /* [out] */ IDispatch **ppdisp);
        
        HRESULT ( STDMETHODCALLTYPE *GetCurrentScriptThreadID )( 
            IActiveScript * This,
            /* [out] */ SCRIPTTHREADID *pstidThread);
        
        HRESULT ( STDMETHODCALLTYPE *GetScriptThreadID )( 
            IActiveScript * This,
            /* [in] */ DWORD dwWin32ThreadId,
            /* [out] */ SCRIPTTHREADID *pstidThread);
        
        HRESULT ( STDMETHODCALLTYPE *GetScriptThreadState )( 
            IActiveScript * This,
            /* [in] */ SCRIPTTHREADID stidThread,
            /* [out] */ SCRIPTTHREADSTATE *pstsState);
        
        HRESULT ( STDMETHODCALLTYPE *InterruptScriptThread )( 
            IActiveScript * This,
            /* [in] */ SCRIPTTHREADID stidThread,
            /* [in] */ const EXCEPINFO *pexcepinfo,
            /* [in] */ DWORD dwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            IActiveScript * This,
            /* [out] */ IActiveScript **ppscript);
        
        END_INTERFACE
    } IActiveScriptVtbl;

    interface IActiveScript
    {
        CONST_VTBL struct IActiveScriptVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IActiveScript_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IActiveScript_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IActiveScript_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IActiveScript_SetScriptSite(This,pass)	\
    (This)->lpVtbl -> SetScriptSite(This,pass)

#define IActiveScript_GetScriptSite(This,riid,ppvObject)	\
    (This)->lpVtbl -> GetScriptSite(This,riid,ppvObject)

#define IActiveScript_SetScriptState(This,ss)	\
    (This)->lpVtbl -> SetScriptState(This,ss)

#define IActiveScript_GetScriptState(This,pssState)	\
    (This)->lpVtbl -> GetScriptState(This,pssState)

#define IActiveScript_Close(This)	\
    (This)->lpVtbl -> Close(This)

#define IActiveScript_AddNamedItem(This,pstrName,dwFlags)	\
    (This)->lpVtbl -> AddNamedItem(This,pstrName,dwFlags)

#define IActiveScript_AddTypeLib(This,rguidTypeLib,dwMajor,dwMinor,dwFlags)	\
    (This)->lpVtbl -> AddTypeLib(This,rguidTypeLib,dwMajor,dwMinor,dwFlags)

#define IActiveScript_GetScriptDispatch(This,pstrItemName,ppdisp)	\
    (This)->lpVtbl -> GetScriptDispatch(This,pstrItemName,ppdisp)

#define IActiveScript_GetCurrentScriptThreadID(This,pstidThread)	\
    (This)->lpVtbl -> GetCurrentScriptThreadID(This,pstidThread)

#define IActiveScript_GetScriptThreadID(This,dwWin32ThreadId,pstidThread)	\
    (This)->lpVtbl -> GetScriptThreadID(This,dwWin32ThreadId,pstidThread)

#define IActiveScript_GetScriptThreadState(This,stidThread,pstsState)	\
    (This)->lpVtbl -> GetScriptThreadState(This,stidThread,pstsState)

#define IActiveScript_InterruptScriptThread(This,stidThread,pexcepinfo,dwFlags)	\
    (This)->lpVtbl -> InterruptScriptThread(This,stidThread,pexcepinfo,dwFlags)

#define IActiveScript_Clone(This,ppscript)	\
    (This)->lpVtbl -> Clone(This,ppscript)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IActiveScript_SetScriptSite_Proxy( 
    IActiveScript * This,
    /* [in] */ IActiveScriptSite *pass);


void __RPC_STUB IActiveScript_SetScriptSite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IActiveScript_GetScriptSite_Proxy( 
    IActiveScript * This,
    /* [in] */ REFIID riid,
    /* [iid_is][out] */ void **ppvObject);


void __RPC_STUB IActiveScript_GetScriptSite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IActiveScript_SetScriptState_Proxy( 
    IActiveScript * This,
    /* [in] */ SCRIPTSTATE ss);


void __RPC_STUB IActiveScript_SetScriptState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IActiveScript_GetScriptState_Proxy( 
    IActiveScript * This,
    /* [out] */ SCRIPTSTATE *pssState);


void __RPC_STUB IActiveScript_GetScriptState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IActiveScript_Close_Proxy( 
    IActiveScript * This);


void __RPC_STUB IActiveScript_Close_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IActiveScript_AddNamedItem_Proxy( 
    IActiveScript * This,
    /* [in] */ LPCOLESTR pstrName,
    /* [in] */ DWORD dwFlags);


void __RPC_STUB IActiveScript_AddNamedItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IActiveScript_AddTypeLib_Proxy( 
    IActiveScript * This,
    /* [in] */ REFGUID rguidTypeLib,
    /* [in] */ DWORD dwMajor,
    /* [in] */ DWORD dwMinor,
    /* [in] */ DWORD dwFlags);


void __RPC_STUB IActiveScript_AddTypeLib_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IActiveScript_GetScriptDispatch_Proxy( 
    IActiveScript * This,
    /* [in] */ LPCOLESTR pstrItemName,
    /* [out] */ IDispatch **ppdisp);


void __RPC_STUB IActiveScript_GetScriptDispatch_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IActiveScript_GetCurrentScriptThreadID_Proxy( 
    IActiveScript * This,
    /* [out] */ SCRIPTTHREADID *pstidThread);


void __RPC_STUB IActiveScript_GetCurrentScriptThreadID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IActiveScript_GetScriptThreadID_Proxy( 
    IActiveScript * This,
    /* [in] */ DWORD dwWin32ThreadId,
    /* [out] */ SCRIPTTHREADID *pstidThread);


void __RPC_STUB IActiveScript_GetScriptThreadID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IActiveScript_GetScriptThreadState_Proxy( 
    IActiveScript * This,
    /* [in] */ SCRIPTTHREADID stidThread,
    /* [out] */ SCRIPTTHREADSTATE *pstsState);


void __RPC_STUB IActiveScript_GetScriptThreadState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IActiveScript_InterruptScriptThread_Proxy( 
    IActiveScript * This,
    /* [in] */ SCRIPTTHREADID stidThread,
    /* [in] */ const EXCEPINFO *pexcepinfo,
    /* [in] */ DWORD dwFlags);


void __RPC_STUB IActiveScript_InterruptScriptThread_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IActiveScript_Clone_Proxy( 
    IActiveScript * This,
    /* [out] */ IActiveScript **ppscript);


void __RPC_STUB IActiveScript_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IActiveScript_INTERFACE_DEFINED__ */


#ifndef __IActiveScriptParse32_INTERFACE_DEFINED__
#define __IActiveScriptParse32_INTERFACE_DEFINED__

/* interface IActiveScriptParse32 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IActiveScriptParse32;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("BB1A2AE2-A4F9-11cf-8F20-00805F2CD064")
    IActiveScriptParse32 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE InitNew( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddScriptlet( 
            /* [in] */ LPCOLESTR pstrDefaultName,
            /* [in] */ LPCOLESTR pstrCode,
            /* [in] */ LPCOLESTR pstrItemName,
            /* [in] */ LPCOLESTR pstrSubItemName,
            /* [in] */ LPCOLESTR pstrEventName,
            /* [in] */ LPCOLESTR pstrDelimiter,
            /* [in] */ DWORD dwSourceContextCookie,
            /* [in] */ ULONG ulStartingLineNumber,
            /* [in] */ DWORD dwFlags,
            /* [out] */ BSTR *pbstrName,
            /* [out] */ EXCEPINFO *pexcepinfo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ParseScriptText( 
            /* [in] */ LPCOLESTR pstrCode,
            /* [in] */ LPCOLESTR pstrItemName,
            /* [in] */ IUnknown *punkContext,
            /* [in] */ LPCOLESTR pstrDelimiter,
            /* [in] */ DWORD dwSourceContextCookie,
            /* [in] */ ULONG ulStartingLineNumber,
            /* [in] */ DWORD dwFlags,
            /* [out] */ VARIANT *pvarResult,
            /* [out] */ EXCEPINFO *pexcepinfo) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IActiveScriptParse32Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IActiveScriptParse32 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IActiveScriptParse32 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IActiveScriptParse32 * This);
        
        HRESULT ( STDMETHODCALLTYPE *InitNew )( 
            IActiveScriptParse32 * This);
        
        HRESULT ( STDMETHODCALLTYPE *AddScriptlet )( 
            IActiveScriptParse32 * This,
            /* [in] */ LPCOLESTR pstrDefaultName,
            /* [in] */ LPCOLESTR pstrCode,
            /* [in] */ LPCOLESTR pstrItemName,
            /* [in] */ LPCOLESTR pstrSubItemName,
            /* [in] */ LPCOLESTR pstrEventName,
            /* [in] */ LPCOLESTR pstrDelimiter,
            /* [in] */ DWORD dwSourceContextCookie,
            /* [in] */ ULONG ulStartingLineNumber,
            /* [in] */ DWORD dwFlags,
            /* [out] */ BSTR *pbstrName,
            /* [out] */ EXCEPINFO *pexcepinfo);
        
        HRESULT ( STDMETHODCALLTYPE *ParseScriptText )( 
            IActiveScriptParse32 * This,
            /* [in] */ LPCOLESTR pstrCode,
            /* [in] */ LPCOLESTR pstrItemName,
            /* [in] */ IUnknown *punkContext,
            /* [in] */ LPCOLESTR pstrDelimiter,
            /* [in] */ DWORD dwSourceContextCookie,
            /* [in] */ ULONG ulStartingLineNumber,
            /* [in] */ DWORD dwFlags,
            /* [out] */ VARIANT *pvarResult,
            /* [out] */ EXCEPINFO *pexcepinfo);
        
        END_INTERFACE
    } IActiveScriptParse32Vtbl;

    interface IActiveScriptParse32
    {
        CONST_VTBL struct IActiveScriptParse32Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IActiveScriptParse32_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IActiveScriptParse32_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IActiveScriptParse32_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IActiveScriptParse32_InitNew(This)	\
    (This)->lpVtbl -> InitNew(This)

#define IActiveScriptParse32_AddScriptlet(This,pstrDefaultName,pstrCode,pstrItemName,pstrSubItemName,pstrEventName,pstrDelimiter,dwSourceContextCookie,ulStartingLineNumber,dwFlags,pbstrName,pexcepinfo)	\
    (This)->lpVtbl -> AddScriptlet(This,pstrDefaultName,pstrCode,pstrItemName,pstrSubItemName,pstrEventName,pstrDelimiter,dwSourceContextCookie,ulStartingLineNumber,dwFlags,pbstrName,pexcepinfo)

#define IActiveScriptParse32_ParseScriptText(This,pstrCode,pstrItemName,punkContext,pstrDelimiter,dwSourceContextCookie,ulStartingLineNumber,dwFlags,pvarResult,pexcepinfo)	\
    (This)->lpVtbl -> ParseScriptText(This,pstrCode,pstrItemName,punkContext,pstrDelimiter,dwSourceContextCookie,ulStartingLineNumber,dwFlags,pvarResult,pexcepinfo)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IActiveScriptParse32_InitNew_Proxy( 
    IActiveScriptParse32 * This);


void __RPC_STUB IActiveScriptParse32_InitNew_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IActiveScriptParse32_AddScriptlet_Proxy( 
    IActiveScriptParse32 * This,
    /* [in] */ LPCOLESTR pstrDefaultName,
    /* [in] */ LPCOLESTR pstrCode,
    /* [in] */ LPCOLESTR pstrItemName,
    /* [in] */ LPCOLESTR pstrSubItemName,
    /* [in] */ LPCOLESTR pstrEventName,
    /* [in] */ LPCOLESTR pstrDelimiter,
    /* [in] */ DWORD dwSourceContextCookie,
    /* [in] */ ULONG ulStartingLineNumber,
    /* [in] */ DWORD dwFlags,
    /* [out] */ BSTR *pbstrName,
    /* [out] */ EXCEPINFO *pexcepinfo);


void __RPC_STUB IActiveScriptParse32_AddScriptlet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IActiveScriptParse32_ParseScriptText_Proxy( 
    IActiveScriptParse32 * This,
    /* [in] */ LPCOLESTR pstrCode,
    /* [in] */ LPCOLESTR pstrItemName,
    /* [in] */ IUnknown *punkContext,
    /* [in] */ LPCOLESTR pstrDelimiter,
    /* [in] */ DWORD dwSourceContextCookie,
    /* [in] */ ULONG ulStartingLineNumber,
    /* [in] */ DWORD dwFlags,
    /* [out] */ VARIANT *pvarResult,
    /* [out] */ EXCEPINFO *pexcepinfo);


void __RPC_STUB IActiveScriptParse32_ParseScriptText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IActiveScriptParse32_INTERFACE_DEFINED__ */


#ifndef __IActiveScriptParse64_INTERFACE_DEFINED__
#define __IActiveScriptParse64_INTERFACE_DEFINED__

/* interface IActiveScriptParse64 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IActiveScriptParse64;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C7EF7658-E1EE-480E-97EA-D52CB4D76D17")
    IActiveScriptParse64 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE InitNew( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddScriptlet( 
            /* [in] */ LPCOLESTR pstrDefaultName,
            /* [in] */ LPCOLESTR pstrCode,
            /* [in] */ LPCOLESTR pstrItemName,
            /* [in] */ LPCOLESTR pstrSubItemName,
            /* [in] */ LPCOLESTR pstrEventName,
            /* [in] */ LPCOLESTR pstrDelimiter,
            /* [in] */ DWORDLONG dwSourceContextCookie,
            /* [in] */ ULONG ulStartingLineNumber,
            /* [in] */ DWORD dwFlags,
            /* [out] */ BSTR *pbstrName,
            /* [out] */ EXCEPINFO *pexcepinfo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ParseScriptText( 
            /* [in] */ LPCOLESTR pstrCode,
            /* [in] */ LPCOLESTR pstrItemName,
            /* [in] */ IUnknown *punkContext,
            /* [in] */ LPCOLESTR pstrDelimiter,
            /* [in] */ DWORDLONG dwSourceContextCookie,
            /* [in] */ ULONG ulStartingLineNumber,
            /* [in] */ DWORD dwFlags,
            /* [out] */ VARIANT *pvarResult,
            /* [out] */ EXCEPINFO *pexcepinfo) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IActiveScriptParse64Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IActiveScriptParse64 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IActiveScriptParse64 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IActiveScriptParse64 * This);
        
        HRESULT ( STDMETHODCALLTYPE *InitNew )( 
            IActiveScriptParse64 * This);
        
        HRESULT ( STDMETHODCALLTYPE *AddScriptlet )( 
            IActiveScriptParse64 * This,
            /* [in] */ LPCOLESTR pstrDefaultName,
            /* [in] */ LPCOLESTR pstrCode,
            /* [in] */ LPCOLESTR pstrItemName,
            /* [in] */ LPCOLESTR pstrSubItemName,
            /* [in] */ LPCOLESTR pstrEventName,
            /* [in] */ LPCOLESTR pstrDelimiter,
            /* [in] */ DWORDLONG dwSourceContextCookie,
            /* [in] */ ULONG ulStartingLineNumber,
            /* [in] */ DWORD dwFlags,
            /* [out] */ BSTR *pbstrName,
            /* [out] */ EXCEPINFO *pexcepinfo);
        
        HRESULT ( STDMETHODCALLTYPE *ParseScriptText )( 
            IActiveScriptParse64 * This,
            /* [in] */ LPCOLESTR pstrCode,
            /* [in] */ LPCOLESTR pstrItemName,
            /* [in] */ IUnknown *punkContext,
            /* [in] */ LPCOLESTR pstrDelimiter,
            /* [in] */ DWORDLONG dwSourceContextCookie,
            /* [in] */ ULONG ulStartingLineNumber,
            /* [in] */ DWORD dwFlags,
            /* [out] */ VARIANT *pvarResult,
            /* [out] */ EXCEPINFO *pexcepinfo);
        
        END_INTERFACE
    } IActiveScriptParse64Vtbl;

    interface IActiveScriptParse64
    {
        CONST_VTBL struct IActiveScriptParse64Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IActiveScriptParse64_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IActiveScriptParse64_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IActiveScriptParse64_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IActiveScriptParse64_InitNew(This)	\
    (This)->lpVtbl -> InitNew(This)

#define IActiveScriptParse64_AddScriptlet(This,pstrDefaultName,pstrCode,pstrItemName,pstrSubItemName,pstrEventName,pstrDelimiter,dwSourceContextCookie,ulStartingLineNumber,dwFlags,pbstrName,pexcepinfo)	\
    (This)->lpVtbl -> AddScriptlet(This,pstrDefaultName,pstrCode,pstrItemName,pstrSubItemName,pstrEventName,pstrDelimiter,dwSourceContextCookie,ulStartingLineNumber,dwFlags,pbstrName,pexcepinfo)

#define IActiveScriptParse64_ParseScriptText(This,pstrCode,pstrItemName,punkContext,pstrDelimiter,dwSourceContextCookie,ulStartingLineNumber,dwFlags,pvarResult,pexcepinfo)	\
    (This)->lpVtbl -> ParseScriptText(This,pstrCode,pstrItemName,punkContext,pstrDelimiter,dwSourceContextCookie,ulStartingLineNumber,dwFlags,pvarResult,pexcepinfo)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IActiveScriptParse64_InitNew_Proxy( 
    IActiveScriptParse64 * This);


void __RPC_STUB IActiveScriptParse64_InitNew_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IActiveScriptParse64_AddScriptlet_Proxy( 
    IActiveScriptParse64 * This,
    /* [in] */ LPCOLESTR pstrDefaultName,
    /* [in] */ LPCOLESTR pstrCode,
    /* [in] */ LPCOLESTR pstrItemName,
    /* [in] */ LPCOLESTR pstrSubItemName,
    /* [in] */ LPCOLESTR pstrEventName,
    /* [in] */ LPCOLESTR pstrDelimiter,
    /* [in] */ DWORDLONG dwSourceContextCookie,
    /* [in] */ ULONG ulStartingLineNumber,
    /* [in] */ DWORD dwFlags,
    /* [out] */ BSTR *pbstrName,
    /* [out] */ EXCEPINFO *pexcepinfo);


void __RPC_STUB IActiveScriptParse64_AddScriptlet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IActiveScriptParse64_ParseScriptText_Proxy( 
    IActiveScriptParse64 * This,
    /* [in] */ LPCOLESTR pstrCode,
    /* [in] */ LPCOLESTR pstrItemName,
    /* [in] */ IUnknown *punkContext,
    /* [in] */ LPCOLESTR pstrDelimiter,
    /* [in] */ DWORDLONG dwSourceContextCookie,
    /* [in] */ ULONG ulStartingLineNumber,
    /* [in] */ DWORD dwFlags,
    /* [out] */ VARIANT *pvarResult,
    /* [out] */ EXCEPINFO *pexcepinfo);


void __RPC_STUB IActiveScriptParse64_ParseScriptText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IActiveScriptParse64_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_activscp_0260 */
/* [local] */ 

#ifdef _WIN64
#define     IActiveScriptParse     IActiveScriptParse64
#define IID_IActiveScriptParse IID_IActiveScriptParse64
#else
#define     IActiveScriptParse     IActiveScriptParse32
#define IID_IActiveScriptParse IID_IActiveScriptParse32
#endif
typedef IActiveScriptParse *PIActiveScriptParse;



extern RPC_IF_HANDLE __MIDL_itf_activscp_0260_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_activscp_0260_v0_0_s_ifspec;

#ifndef __IActiveScriptParseProcedureOld32_INTERFACE_DEFINED__
#define __IActiveScriptParseProcedureOld32_INTERFACE_DEFINED__

/* interface IActiveScriptParseProcedureOld32 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IActiveScriptParseProcedureOld32;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1CFF0050-6FDD-11d0-9328-00A0C90DCAA9")
    IActiveScriptParseProcedureOld32 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ParseProcedureText( 
            /* [in] */ LPCOLESTR pstrCode,
            /* [in] */ LPCOLESTR pstrFormalParams,
            /* [in] */ LPCOLESTR pstrItemName,
            /* [in] */ IUnknown *punkContext,
            /* [in] */ LPCOLESTR pstrDelimiter,
            /* [in] */ DWORD dwSourceContextCookie,
            /* [in] */ ULONG ulStartingLineNumber,
            /* [in] */ DWORD dwFlags,
            /* [out] */ IDispatch **ppdisp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IActiveScriptParseProcedureOld32Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IActiveScriptParseProcedureOld32 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IActiveScriptParseProcedureOld32 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IActiveScriptParseProcedureOld32 * This);
        
        HRESULT ( STDMETHODCALLTYPE *ParseProcedureText )( 
            IActiveScriptParseProcedureOld32 * This,
            /* [in] */ LPCOLESTR pstrCode,
            /* [in] */ LPCOLESTR pstrFormalParams,
            /* [in] */ LPCOLESTR pstrItemName,
            /* [in] */ IUnknown *punkContext,
            /* [in] */ LPCOLESTR pstrDelimiter,
            /* [in] */ DWORD dwSourceContextCookie,
            /* [in] */ ULONG ulStartingLineNumber,
            /* [in] */ DWORD dwFlags,
            /* [out] */ IDispatch **ppdisp);
        
        END_INTERFACE
    } IActiveScriptParseProcedureOld32Vtbl;

    interface IActiveScriptParseProcedureOld32
    {
        CONST_VTBL struct IActiveScriptParseProcedureOld32Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IActiveScriptParseProcedureOld32_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IActiveScriptParseProcedureOld32_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IActiveScriptParseProcedureOld32_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IActiveScriptParseProcedureOld32_ParseProcedureText(This,pstrCode,pstrFormalParams,pstrItemName,punkContext,pstrDelimiter,dwSourceContextCookie,ulStartingLineNumber,dwFlags,ppdisp)	\
    (This)->lpVtbl -> ParseProcedureText(This,pstrCode,pstrFormalParams,pstrItemName,punkContext,pstrDelimiter,dwSourceContextCookie,ulStartingLineNumber,dwFlags,ppdisp)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IActiveScriptParseProcedureOld32_ParseProcedureText_Proxy( 
    IActiveScriptParseProcedureOld32 * This,
    /* [in] */ LPCOLESTR pstrCode,
    /* [in] */ LPCOLESTR pstrFormalParams,
    /* [in] */ LPCOLESTR pstrItemName,
    /* [in] */ IUnknown *punkContext,
    /* [in] */ LPCOLESTR pstrDelimiter,
    /* [in] */ DWORD dwSourceContextCookie,
    /* [in] */ ULONG ulStartingLineNumber,
    /* [in] */ DWORD dwFlags,
    /* [out] */ IDispatch **ppdisp);


void __RPC_STUB IActiveScriptParseProcedureOld32_ParseProcedureText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IActiveScriptParseProcedureOld32_INTERFACE_DEFINED__ */


#ifndef __IActiveScriptParseProcedureOld64_INTERFACE_DEFINED__
#define __IActiveScriptParseProcedureOld64_INTERFACE_DEFINED__

/* interface IActiveScriptParseProcedureOld64 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IActiveScriptParseProcedureOld64;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("21F57128-08C9-4638-BA12-22D15D88DC5C")
    IActiveScriptParseProcedureOld64 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ParseProcedureText( 
            /* [in] */ LPCOLESTR pstrCode,
            /* [in] */ LPCOLESTR pstrFormalParams,
            /* [in] */ LPCOLESTR pstrItemName,
            /* [in] */ IUnknown *punkContext,
            /* [in] */ LPCOLESTR pstrDelimiter,
            /* [in] */ DWORDLONG dwSourceContextCookie,
            /* [in] */ ULONG ulStartingLineNumber,
            /* [in] */ DWORD dwFlags,
            /* [out] */ IDispatch **ppdisp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IActiveScriptParseProcedureOld64Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IActiveScriptParseProcedureOld64 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IActiveScriptParseProcedureOld64 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IActiveScriptParseProcedureOld64 * This);
        
        HRESULT ( STDMETHODCALLTYPE *ParseProcedureText )( 
            IActiveScriptParseProcedureOld64 * This,
            /* [in] */ LPCOLESTR pstrCode,
            /* [in] */ LPCOLESTR pstrFormalParams,
            /* [in] */ LPCOLESTR pstrItemName,
            /* [in] */ IUnknown *punkContext,
            /* [in] */ LPCOLESTR pstrDelimiter,
            /* [in] */ DWORDLONG dwSourceContextCookie,
            /* [in] */ ULONG ulStartingLineNumber,
            /* [in] */ DWORD dwFlags,
            /* [out] */ IDispatch **ppdisp);
        
        END_INTERFACE
    } IActiveScriptParseProcedureOld64Vtbl;

    interface IActiveScriptParseProcedureOld64
    {
        CONST_VTBL struct IActiveScriptParseProcedureOld64Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IActiveScriptParseProcedureOld64_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IActiveScriptParseProcedureOld64_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IActiveScriptParseProcedureOld64_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IActiveScriptParseProcedureOld64_ParseProcedureText(This,pstrCode,pstrFormalParams,pstrItemName,punkContext,pstrDelimiter,dwSourceContextCookie,ulStartingLineNumber,dwFlags,ppdisp)	\
    (This)->lpVtbl -> ParseProcedureText(This,pstrCode,pstrFormalParams,pstrItemName,punkContext,pstrDelimiter,dwSourceContextCookie,ulStartingLineNumber,dwFlags,ppdisp)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IActiveScriptParseProcedureOld64_ParseProcedureText_Proxy( 
    IActiveScriptParseProcedureOld64 * This,
    /* [in] */ LPCOLESTR pstrCode,
    /* [in] */ LPCOLESTR pstrFormalParams,
    /* [in] */ LPCOLESTR pstrItemName,
    /* [in] */ IUnknown *punkContext,
    /* [in] */ LPCOLESTR pstrDelimiter,
    /* [in] */ DWORDLONG dwSourceContextCookie,
    /* [in] */ ULONG ulStartingLineNumber,
    /* [in] */ DWORD dwFlags,
    /* [out] */ IDispatch **ppdisp);


void __RPC_STUB IActiveScriptParseProcedureOld64_ParseProcedureText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IActiveScriptParseProcedureOld64_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_activscp_0262 */
/* [local] */ 

#ifdef _WIN64
#define     IActiveScriptParseProcedureOld     IActiveScriptParseProcedureOld64
#define IID_IActiveScriptParseProcedureOld IID_IActiveScriptParseProcedureOld64
#else
#define     IActiveScriptParseProcedureOld     IActiveScriptParseProcedureOld32
#define IID_IActiveScriptParseProcedureOld IID_IActiveScriptParseProcedureOld32
#endif
typedef IActiveScriptParseProcedureOld *PIActiveScriptParseProcedureOld;


extern RPC_IF_HANDLE __MIDL_itf_activscp_0262_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_activscp_0262_v0_0_s_ifspec;

#ifndef __IActiveScriptParseProcedure32_INTERFACE_DEFINED__
#define __IActiveScriptParseProcedure32_INTERFACE_DEFINED__

/* interface IActiveScriptParseProcedure32 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IActiveScriptParseProcedure32;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("AA5B6A80-B834-11d0-932F-00A0C90DCAA9")
    IActiveScriptParseProcedure32 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ParseProcedureText( 
            /* [in] */ LPCOLESTR pstrCode,
            /* [in] */ LPCOLESTR pstrFormalParams,
            /* [in] */ LPCOLESTR pstrProcedureName,
            /* [in] */ LPCOLESTR pstrItemName,
            /* [in] */ IUnknown *punkContext,
            /* [in] */ LPCOLESTR pstrDelimiter,
            /* [in] */ DWORD dwSourceContextCookie,
            /* [in] */ ULONG ulStartingLineNumber,
            /* [in] */ DWORD dwFlags,
            /* [out] */ IDispatch **ppdisp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IActiveScriptParseProcedure32Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IActiveScriptParseProcedure32 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IActiveScriptParseProcedure32 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IActiveScriptParseProcedure32 * This);
        
        HRESULT ( STDMETHODCALLTYPE *ParseProcedureText )( 
            IActiveScriptParseProcedure32 * This,
            /* [in] */ LPCOLESTR pstrCode,
            /* [in] */ LPCOLESTR pstrFormalParams,
            /* [in] */ LPCOLESTR pstrProcedureName,
            /* [in] */ LPCOLESTR pstrItemName,
            /* [in] */ IUnknown *punkContext,
            /* [in] */ LPCOLESTR pstrDelimiter,
            /* [in] */ DWORD dwSourceContextCookie,
            /* [in] */ ULONG ulStartingLineNumber,
            /* [in] */ DWORD dwFlags,
            /* [out] */ IDispatch **ppdisp);
        
        END_INTERFACE
    } IActiveScriptParseProcedure32Vtbl;

    interface IActiveScriptParseProcedure32
    {
        CONST_VTBL struct IActiveScriptParseProcedure32Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IActiveScriptParseProcedure32_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IActiveScriptParseProcedure32_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IActiveScriptParseProcedure32_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IActiveScriptParseProcedure32_ParseProcedureText(This,pstrCode,pstrFormalParams,pstrProcedureName,pstrItemName,punkContext,pstrDelimiter,dwSourceContextCookie,ulStartingLineNumber,dwFlags,ppdisp)	\
    (This)->lpVtbl -> ParseProcedureText(This,pstrCode,pstrFormalParams,pstrProcedureName,pstrItemName,punkContext,pstrDelimiter,dwSourceContextCookie,ulStartingLineNumber,dwFlags,ppdisp)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IActiveScriptParseProcedure32_ParseProcedureText_Proxy( 
    IActiveScriptParseProcedure32 * This,
    /* [in] */ LPCOLESTR pstrCode,
    /* [in] */ LPCOLESTR pstrFormalParams,
    /* [in] */ LPCOLESTR pstrProcedureName,
    /* [in] */ LPCOLESTR pstrItemName,
    /* [in] */ IUnknown *punkContext,
    /* [in] */ LPCOLESTR pstrDelimiter,
    /* [in] */ DWORD dwSourceContextCookie,
    /* [in] */ ULONG ulStartingLineNumber,
    /* [in] */ DWORD dwFlags,
    /* [out] */ IDispatch **ppdisp);


void __RPC_STUB IActiveScriptParseProcedure32_ParseProcedureText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IActiveScriptParseProcedure32_INTERFACE_DEFINED__ */


#ifndef __IActiveScriptParseProcedure64_INTERFACE_DEFINED__
#define __IActiveScriptParseProcedure64_INTERFACE_DEFINED__

/* interface IActiveScriptParseProcedure64 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IActiveScriptParseProcedure64;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C64713B6-E029-4CC5-9200-438B72890B6A")
    IActiveScriptParseProcedure64 : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ParseProcedureText( 
            /* [in] */ LPCOLESTR pstrCode,
            /* [in] */ LPCOLESTR pstrFormalParams,
            /* [in] */ LPCOLESTR pstrProcedureName,
            /* [in] */ LPCOLESTR pstrItemName,
            /* [in] */ IUnknown *punkContext,
            /* [in] */ LPCOLESTR pstrDelimiter,
            /* [in] */ DWORDLONG dwSourceContextCookie,
            /* [in] */ ULONG ulStartingLineNumber,
            /* [in] */ DWORD dwFlags,
            /* [out] */ IDispatch **ppdisp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IActiveScriptParseProcedure64Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IActiveScriptParseProcedure64 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IActiveScriptParseProcedure64 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IActiveScriptParseProcedure64 * This);
        
        HRESULT ( STDMETHODCALLTYPE *ParseProcedureText )( 
            IActiveScriptParseProcedure64 * This,
            /* [in] */ LPCOLESTR pstrCode,
            /* [in] */ LPCOLESTR pstrFormalParams,
            /* [in] */ LPCOLESTR pstrProcedureName,
            /* [in] */ LPCOLESTR pstrItemName,
            /* [in] */ IUnknown *punkContext,
            /* [in] */ LPCOLESTR pstrDelimiter,
            /* [in] */ DWORDLONG dwSourceContextCookie,
            /* [in] */ ULONG ulStartingLineNumber,
            /* [in] */ DWORD dwFlags,
            /* [out] */ IDispatch **ppdisp);
        
        END_INTERFACE
    } IActiveScriptParseProcedure64Vtbl;

    interface IActiveScriptParseProcedure64
    {
        CONST_VTBL struct IActiveScriptParseProcedure64Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IActiveScriptParseProcedure64_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IActiveScriptParseProcedure64_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IActiveScriptParseProcedure64_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IActiveScriptParseProcedure64_ParseProcedureText(This,pstrCode,pstrFormalParams,pstrProcedureName,pstrItemName,punkContext,pstrDelimiter,dwSourceContextCookie,ulStartingLineNumber,dwFlags,ppdisp)	\
    (This)->lpVtbl -> ParseProcedureText(This,pstrCode,pstrFormalParams,pstrProcedureName,pstrItemName,punkContext,pstrDelimiter,dwSourceContextCookie,ulStartingLineNumber,dwFlags,ppdisp)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IActiveScriptParseProcedure64_ParseProcedureText_Proxy( 
    IActiveScriptParseProcedure64 * This,
    /* [in] */ LPCOLESTR pstrCode,
    /* [in] */ LPCOLESTR pstrFormalParams,
    /* [in] */ LPCOLESTR pstrProcedureName,
    /* [in] */ LPCOLESTR pstrItemName,
    /* [in] */ IUnknown *punkContext,
    /* [in] */ LPCOLESTR pstrDelimiter,
    /* [in] */ DWORDLONG dwSourceContextCookie,
    /* [in] */ ULONG ulStartingLineNumber,
    /* [in] */ DWORD dwFlags,
    /* [out] */ IDispatch **ppdisp);


void __RPC_STUB IActiveScriptParseProcedure64_ParseProcedureText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IActiveScriptParseProcedure64_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_activscp_0264 */
/* [local] */ 

#ifdef _WIN64
#define     IActiveScriptParseProcedure     IActiveScriptParseProcedure64
#define IID_IActiveScriptParseProcedure IID_IActiveScriptParseProcedure64
#else
#define     IActiveScriptParseProcedure     IActiveScriptParseProcedure32
#define IID_IActiveScriptParseProcedure IID_IActiveScriptParseProcedure32
#endif
typedef IActiveScriptParseProcedure *PIActiveScriptParseProcedure;


extern RPC_IF_HANDLE __MIDL_itf_activscp_0264_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_activscp_0264_v0_0_s_ifspec;

#ifndef __IActiveScriptParseProcedure2_32_INTERFACE_DEFINED__
#define __IActiveScriptParseProcedure2_32_INTERFACE_DEFINED__

/* interface IActiveScriptParseProcedure2_32 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IActiveScriptParseProcedure2_32;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("71EE5B20-FB04-11d1-B3A8-00A0C911E8B2")
    IActiveScriptParseProcedure2_32 : public IActiveScriptParseProcedure32
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IActiveScriptParseProcedure2_32Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IActiveScriptParseProcedure2_32 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IActiveScriptParseProcedure2_32 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IActiveScriptParseProcedure2_32 * This);
        
        HRESULT ( STDMETHODCALLTYPE *ParseProcedureText )( 
            IActiveScriptParseProcedure2_32 * This,
            /* [in] */ LPCOLESTR pstrCode,
            /* [in] */ LPCOLESTR pstrFormalParams,
            /* [in] */ LPCOLESTR pstrProcedureName,
            /* [in] */ LPCOLESTR pstrItemName,
            /* [in] */ IUnknown *punkContext,
            /* [in] */ LPCOLESTR pstrDelimiter,
            /* [in] */ DWORD dwSourceContextCookie,
            /* [in] */ ULONG ulStartingLineNumber,
            /* [in] */ DWORD dwFlags,
            /* [out] */ IDispatch **ppdisp);
        
        END_INTERFACE
    } IActiveScriptParseProcedure2_32Vtbl;

    interface IActiveScriptParseProcedure2_32
    {
        CONST_VTBL struct IActiveScriptParseProcedure2_32Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IActiveScriptParseProcedure2_32_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IActiveScriptParseProcedure2_32_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IActiveScriptParseProcedure2_32_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IActiveScriptParseProcedure2_32_ParseProcedureText(This,pstrCode,pstrFormalParams,pstrProcedureName,pstrItemName,punkContext,pstrDelimiter,dwSourceContextCookie,ulStartingLineNumber,dwFlags,ppdisp)	\
    (This)->lpVtbl -> ParseProcedureText(This,pstrCode,pstrFormalParams,pstrProcedureName,pstrItemName,punkContext,pstrDelimiter,dwSourceContextCookie,ulStartingLineNumber,dwFlags,ppdisp)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IActiveScriptParseProcedure2_32_INTERFACE_DEFINED__ */


#ifndef __IActiveScriptParseProcedure2_64_INTERFACE_DEFINED__
#define __IActiveScriptParseProcedure2_64_INTERFACE_DEFINED__

/* interface IActiveScriptParseProcedure2_64 */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IActiveScriptParseProcedure2_64;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("FE7C4271-210C-448D-9F54-76DAB7047B28")
    IActiveScriptParseProcedure2_64 : public IActiveScriptParseProcedure64
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IActiveScriptParseProcedure2_64Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IActiveScriptParseProcedure2_64 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IActiveScriptParseProcedure2_64 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IActiveScriptParseProcedure2_64 * This);
        
        HRESULT ( STDMETHODCALLTYPE *ParseProcedureText )( 
            IActiveScriptParseProcedure2_64 * This,
            /* [in] */ LPCOLESTR pstrCode,
            /* [in] */ LPCOLESTR pstrFormalParams,
            /* [in] */ LPCOLESTR pstrProcedureName,
            /* [in] */ LPCOLESTR pstrItemName,
            /* [in] */ IUnknown *punkContext,
            /* [in] */ LPCOLESTR pstrDelimiter,
            /* [in] */ DWORDLONG dwSourceContextCookie,
            /* [in] */ ULONG ulStartingLineNumber,
            /* [in] */ DWORD dwFlags,
            /* [out] */ IDispatch **ppdisp);
        
        END_INTERFACE
    } IActiveScriptParseProcedure2_64Vtbl;

    interface IActiveScriptParseProcedure2_64
    {
        CONST_VTBL struct IActiveScriptParseProcedure2_64Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IActiveScriptParseProcedure2_64_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IActiveScriptParseProcedure2_64_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IActiveScriptParseProcedure2_64_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IActiveScriptParseProcedure2_64_ParseProcedureText(This,pstrCode,pstrFormalParams,pstrProcedureName,pstrItemName,punkContext,pstrDelimiter,dwSourceContextCookie,ulStartingLineNumber,dwFlags,ppdisp)	\
    (This)->lpVtbl -> ParseProcedureText(This,pstrCode,pstrFormalParams,pstrProcedureName,pstrItemName,punkContext,pstrDelimiter,dwSourceContextCookie,ulStartingLineNumber,dwFlags,ppdisp)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IActiveScriptParseProcedure2_64_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_activscp_0266 */
/* [local] */ 

#ifdef _WIN64
#define     IActiveScriptParseProcedure2     IActiveScriptParseProcedure2_64
#define IID_IActiveScriptParseProcedure2 IID_IActiveScriptParseProcedure2_64
#else
#define     IActiveScriptParseProcedure2     IActiveScriptParseProcedure2_32
#define IID_IActiveScriptParseProcedure2 IID_IActiveScriptParseProcedure2_32
#endif
typedef IActiveScriptParseProcedure2 *PIActiveScriptParseProcedure2;


extern RPC_IF_HANDLE __MIDL_itf_activscp_0266_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_activscp_0266_v0_0_s_ifspec;

#ifndef __IActiveScriptEncode_INTERFACE_DEFINED__
#define __IActiveScriptEncode_INTERFACE_DEFINED__

/* interface IActiveScriptEncode */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IActiveScriptEncode;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("BB1A2AE3-A4F9-11cf-8F20-00805F2CD064")
    IActiveScriptEncode : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE EncodeSection( 
            /* [in] */ LPCOLESTR pchIn,
            /* [in] */ DWORD cchIn,
            /* [out][in] */ LPOLESTR pchOut,
            /* [in] */ DWORD cchOut,
            /* [out][in] */ DWORD *pcchRet) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DecodeScript( 
            /* [in] */ LPCOLESTR pchIn,
            /* [in] */ DWORD cchIn,
            /* [out][in] */ LPOLESTR pchOut,
            /* [in] */ DWORD cchOut,
            /* [out][in] */ DWORD *pcchRet) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetEncodeProgId( 
            /* [out][in] */ BSTR *pbstrOut) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IActiveScriptEncodeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IActiveScriptEncode * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IActiveScriptEncode * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IActiveScriptEncode * This);
        
        HRESULT ( STDMETHODCALLTYPE *EncodeSection )( 
            IActiveScriptEncode * This,
            /* [in] */ LPCOLESTR pchIn,
            /* [in] */ DWORD cchIn,
            /* [out][in] */ LPOLESTR pchOut,
            /* [in] */ DWORD cchOut,
            /* [out][in] */ DWORD *pcchRet);
        
        HRESULT ( STDMETHODCALLTYPE *DecodeScript )( 
            IActiveScriptEncode * This,
            /* [in] */ LPCOLESTR pchIn,
            /* [in] */ DWORD cchIn,
            /* [out][in] */ LPOLESTR pchOut,
            /* [in] */ DWORD cchOut,
            /* [out][in] */ DWORD *pcchRet);
        
        HRESULT ( STDMETHODCALLTYPE *GetEncodeProgId )( 
            IActiveScriptEncode * This,
            /* [out][in] */ BSTR *pbstrOut);
        
        END_INTERFACE
    } IActiveScriptEncodeVtbl;

    interface IActiveScriptEncode
    {
        CONST_VTBL struct IActiveScriptEncodeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IActiveScriptEncode_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IActiveScriptEncode_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IActiveScriptEncode_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IActiveScriptEncode_EncodeSection(This,pchIn,cchIn,pchOut,cchOut,pcchRet)	\
    (This)->lpVtbl -> EncodeSection(This,pchIn,cchIn,pchOut,cchOut,pcchRet)

#define IActiveScriptEncode_DecodeScript(This,pchIn,cchIn,pchOut,cchOut,pcchRet)	\
    (This)->lpVtbl -> DecodeScript(This,pchIn,cchIn,pchOut,cchOut,pcchRet)

#define IActiveScriptEncode_GetEncodeProgId(This,pbstrOut)	\
    (This)->lpVtbl -> GetEncodeProgId(This,pbstrOut)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IActiveScriptEncode_EncodeSection_Proxy( 
    IActiveScriptEncode * This,
    /* [in] */ LPCOLESTR pchIn,
    /* [in] */ DWORD cchIn,
    /* [out][in] */ LPOLESTR pchOut,
    /* [in] */ DWORD cchOut,
    /* [out][in] */ DWORD *pcchRet);


void __RPC_STUB IActiveScriptEncode_EncodeSection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IActiveScriptEncode_DecodeScript_Proxy( 
    IActiveScriptEncode * This,
    /* [in] */ LPCOLESTR pchIn,
    /* [in] */ DWORD cchIn,
    /* [out][in] */ LPOLESTR pchOut,
    /* [in] */ DWORD cchOut,
    /* [out][in] */ DWORD *pcchRet);


void __RPC_STUB IActiveScriptEncode_DecodeScript_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IActiveScriptEncode_GetEncodeProgId_Proxy( 
    IActiveScriptEncode * This,
    /* [out][in] */ BSTR *pbstrOut);


void __RPC_STUB IActiveScriptEncode_GetEncodeProgId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IActiveScriptEncode_INTERFACE_DEFINED__ */


#ifndef __IActiveScriptHostEncode_INTERFACE_DEFINED__
#define __IActiveScriptHostEncode_INTERFACE_DEFINED__

/* interface IActiveScriptHostEncode */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IActiveScriptHostEncode;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("BEE9B76E-CFE3-11d1-B747-00C04FC2B085")
    IActiveScriptHostEncode : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE EncodeScriptHostFile( 
            /* [in] */ BSTR bstrInFile,
            /* [out][in] */ BSTR *pbstrOutFile,
            /* [in] */ unsigned long cFlags,
            /* [in] */ BSTR bstrDefaultLang) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IActiveScriptHostEncodeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IActiveScriptHostEncode * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IActiveScriptHostEncode * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IActiveScriptHostEncode * This);
        
        HRESULT ( STDMETHODCALLTYPE *EncodeScriptHostFile )( 
            IActiveScriptHostEncode * This,
            /* [in] */ BSTR bstrInFile,
            /* [out][in] */ BSTR *pbstrOutFile,
            /* [in] */ unsigned long cFlags,
            /* [in] */ BSTR bstrDefaultLang);
        
        END_INTERFACE
    } IActiveScriptHostEncodeVtbl;

    interface IActiveScriptHostEncode
    {
        CONST_VTBL struct IActiveScriptHostEncodeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IActiveScriptHostEncode_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IActiveScriptHostEncode_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IActiveScriptHostEncode_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IActiveScriptHostEncode_EncodeScriptHostFile(This,bstrInFile,pbstrOutFile,cFlags,bstrDefaultLang)	\
    (This)->lpVtbl -> EncodeScriptHostFile(This,bstrInFile,pbstrOutFile,cFlags,bstrDefaultLang)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IActiveScriptHostEncode_EncodeScriptHostFile_Proxy( 
    IActiveScriptHostEncode * This,
    /* [in] */ BSTR bstrInFile,
    /* [out][in] */ BSTR *pbstrOutFile,
    /* [in] */ unsigned long cFlags,
    /* [in] */ BSTR bstrDefaultLang);


void __RPC_STUB IActiveScriptHostEncode_EncodeScriptHostFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IActiveScriptHostEncode_INTERFACE_DEFINED__ */


#ifndef __IBindEventHandler_INTERFACE_DEFINED__
#define __IBindEventHandler_INTERFACE_DEFINED__

/* interface IBindEventHandler */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IBindEventHandler;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("63CDBCB0-C1B1-11d0-9336-00A0C90DCAA9")
    IBindEventHandler : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE BindHandler( 
            /* [in] */ LPCOLESTR pstrEvent,
            /* [in] */ IDispatch *pdisp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IBindEventHandlerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IBindEventHandler * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IBindEventHandler * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IBindEventHandler * This);
        
        HRESULT ( STDMETHODCALLTYPE *BindHandler )( 
            IBindEventHandler * This,
            /* [in] */ LPCOLESTR pstrEvent,
            /* [in] */ IDispatch *pdisp);
        
        END_INTERFACE
    } IBindEventHandlerVtbl;

    interface IBindEventHandler
    {
        CONST_VTBL struct IBindEventHandlerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IBindEventHandler_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IBindEventHandler_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IBindEventHandler_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IBindEventHandler_BindHandler(This,pstrEvent,pdisp)	\
    (This)->lpVtbl -> BindHandler(This,pstrEvent,pdisp)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IBindEventHandler_BindHandler_Proxy( 
    IBindEventHandler * This,
    /* [in] */ LPCOLESTR pstrEvent,
    /* [in] */ IDispatch *pdisp);


void __RPC_STUB IBindEventHandler_BindHandler_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IBindEventHandler_INTERFACE_DEFINED__ */


#ifndef __IActiveScriptStats_INTERFACE_DEFINED__
#define __IActiveScriptStats_INTERFACE_DEFINED__

/* interface IActiveScriptStats */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IActiveScriptStats;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B8DA6310-E19B-11d0-933C-00A0C90DCAA9")
    IActiveScriptStats : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetStat( 
            /* [in] */ DWORD stid,
            /* [out] */ ULONG *pluHi,
            /* [out] */ ULONG *pluLo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetStatEx( 
            /* [in] */ REFGUID guid,
            /* [out] */ ULONG *pluHi,
            /* [out] */ ULONG *pluLo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ResetStats( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IActiveScriptStatsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IActiveScriptStats * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IActiveScriptStats * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IActiveScriptStats * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetStat )( 
            IActiveScriptStats * This,
            /* [in] */ DWORD stid,
            /* [out] */ ULONG *pluHi,
            /* [out] */ ULONG *pluLo);
        
        HRESULT ( STDMETHODCALLTYPE *GetStatEx )( 
            IActiveScriptStats * This,
            /* [in] */ REFGUID guid,
            /* [out] */ ULONG *pluHi,
            /* [out] */ ULONG *pluLo);
        
        HRESULT ( STDMETHODCALLTYPE *ResetStats )( 
            IActiveScriptStats * This);
        
        END_INTERFACE
    } IActiveScriptStatsVtbl;

    interface IActiveScriptStats
    {
        CONST_VTBL struct IActiveScriptStatsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IActiveScriptStats_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IActiveScriptStats_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IActiveScriptStats_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IActiveScriptStats_GetStat(This,stid,pluHi,pluLo)	\
    (This)->lpVtbl -> GetStat(This,stid,pluHi,pluLo)

#define IActiveScriptStats_GetStatEx(This,guid,pluHi,pluLo)	\
    (This)->lpVtbl -> GetStatEx(This,guid,pluHi,pluLo)

#define IActiveScriptStats_ResetStats(This)	\
    (This)->lpVtbl -> ResetStats(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IActiveScriptStats_GetStat_Proxy( 
    IActiveScriptStats * This,
    /* [in] */ DWORD stid,
    /* [out] */ ULONG *pluHi,
    /* [out] */ ULONG *pluLo);


void __RPC_STUB IActiveScriptStats_GetStat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IActiveScriptStats_GetStatEx_Proxy( 
    IActiveScriptStats * This,
    /* [in] */ REFGUID guid,
    /* [out] */ ULONG *pluHi,
    /* [out] */ ULONG *pluLo);


void __RPC_STUB IActiveScriptStats_GetStatEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IActiveScriptStats_ResetStats_Proxy( 
    IActiveScriptStats * This);


void __RPC_STUB IActiveScriptStats_ResetStats_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IActiveScriptStats_INTERFACE_DEFINED__ */


#ifndef __IActiveScriptProperty_INTERFACE_DEFINED__
#define __IActiveScriptProperty_INTERFACE_DEFINED__

/* interface IActiveScriptProperty */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IActiveScriptProperty;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4954E0D0-FBC7-11D1-8410-006008C3FBFC")
    IActiveScriptProperty : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetProperty( 
            /* [in] */ DWORD dwProperty,
            /* [in] */ VARIANT *pvarIndex,
            /* [out] */ VARIANT *pvarValue) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetProperty( 
            /* [in] */ DWORD dwProperty,
            /* [in] */ VARIANT *pvarIndex,
            /* [in] */ VARIANT *pvarValue) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IActiveScriptPropertyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IActiveScriptProperty * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IActiveScriptProperty * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IActiveScriptProperty * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetProperty )( 
            IActiveScriptProperty * This,
            /* [in] */ DWORD dwProperty,
            /* [in] */ VARIANT *pvarIndex,
            /* [out] */ VARIANT *pvarValue);
        
        HRESULT ( STDMETHODCALLTYPE *SetProperty )( 
            IActiveScriptProperty * This,
            /* [in] */ DWORD dwProperty,
            /* [in] */ VARIANT *pvarIndex,
            /* [in] */ VARIANT *pvarValue);
        
        END_INTERFACE
    } IActiveScriptPropertyVtbl;

    interface IActiveScriptProperty
    {
        CONST_VTBL struct IActiveScriptPropertyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IActiveScriptProperty_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IActiveScriptProperty_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IActiveScriptProperty_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IActiveScriptProperty_GetProperty(This,dwProperty,pvarIndex,pvarValue)	\
    (This)->lpVtbl -> GetProperty(This,dwProperty,pvarIndex,pvarValue)

#define IActiveScriptProperty_SetProperty(This,dwProperty,pvarIndex,pvarValue)	\
    (This)->lpVtbl -> SetProperty(This,dwProperty,pvarIndex,pvarValue)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IActiveScriptProperty_GetProperty_Proxy( 
    IActiveScriptProperty * This,
    /* [in] */ DWORD dwProperty,
    /* [in] */ VARIANT *pvarIndex,
    /* [out] */ VARIANT *pvarValue);


void __RPC_STUB IActiveScriptProperty_GetProperty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IActiveScriptProperty_SetProperty_Proxy( 
    IActiveScriptProperty * This,
    /* [in] */ DWORD dwProperty,
    /* [in] */ VARIANT *pvarIndex,
    /* [in] */ VARIANT *pvarValue);


void __RPC_STUB IActiveScriptProperty_SetProperty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IActiveScriptProperty_INTERFACE_DEFINED__ */


#ifndef __ITridentEventSink_INTERFACE_DEFINED__
#define __ITridentEventSink_INTERFACE_DEFINED__

/* interface ITridentEventSink */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITridentEventSink;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1DC9CA50-06EF-11d2-8415-006008C3FBFC")
    ITridentEventSink : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE FireEvent( 
            /* [in] */ LPCOLESTR pstrEvent,
            /* [in] */ DISPPARAMS *pdp,
            /* [out] */ VARIANT *pvarRes,
            /* [out] */ EXCEPINFO *pei) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITridentEventSinkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITridentEventSink * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITridentEventSink * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITridentEventSink * This);
        
        HRESULT ( STDMETHODCALLTYPE *FireEvent )( 
            ITridentEventSink * This,
            /* [in] */ LPCOLESTR pstrEvent,
            /* [in] */ DISPPARAMS *pdp,
            /* [out] */ VARIANT *pvarRes,
            /* [out] */ EXCEPINFO *pei);
        
        END_INTERFACE
    } ITridentEventSinkVtbl;

    interface ITridentEventSink
    {
        CONST_VTBL struct ITridentEventSinkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITridentEventSink_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ITridentEventSink_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ITridentEventSink_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ITridentEventSink_FireEvent(This,pstrEvent,pdp,pvarRes,pei)	\
    (This)->lpVtbl -> FireEvent(This,pstrEvent,pdp,pvarRes,pei)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE ITridentEventSink_FireEvent_Proxy( 
    ITridentEventSink * This,
    /* [in] */ LPCOLESTR pstrEvent,
    /* [in] */ DISPPARAMS *pdp,
    /* [out] */ VARIANT *pvarRes,
    /* [out] */ EXCEPINFO *pei);


void __RPC_STUB ITridentEventSink_FireEvent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ITridentEventSink_INTERFACE_DEFINED__ */


#ifndef __IActiveScriptGarbageCollector_INTERFACE_DEFINED__
#define __IActiveScriptGarbageCollector_INTERFACE_DEFINED__

/* interface IActiveScriptGarbageCollector */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IActiveScriptGarbageCollector;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6AA2C4A0-2B53-11d4-A2A0-00104BD35090")
    IActiveScriptGarbageCollector : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE CollectGarbage( 
            SCRIPTGCTYPE scriptgctype) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IActiveScriptGarbageCollectorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IActiveScriptGarbageCollector * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IActiveScriptGarbageCollector * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IActiveScriptGarbageCollector * This);
        
        HRESULT ( STDMETHODCALLTYPE *CollectGarbage )( 
            IActiveScriptGarbageCollector * This,
            SCRIPTGCTYPE scriptgctype);
        
        END_INTERFACE
    } IActiveScriptGarbageCollectorVtbl;

    interface IActiveScriptGarbageCollector
    {
        CONST_VTBL struct IActiveScriptGarbageCollectorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IActiveScriptGarbageCollector_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IActiveScriptGarbageCollector_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IActiveScriptGarbageCollector_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IActiveScriptGarbageCollector_CollectGarbage(This,scriptgctype)	\
    (This)->lpVtbl -> CollectGarbage(This,scriptgctype)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IActiveScriptGarbageCollector_CollectGarbage_Proxy( 
    IActiveScriptGarbageCollector * This,
    SCRIPTGCTYPE scriptgctype);


void __RPC_STUB IActiveScriptGarbageCollector_CollectGarbage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IActiveScriptGarbageCollector_INTERFACE_DEFINED__ */


#ifndef __IActiveScriptSIPInfo_INTERFACE_DEFINED__
#define __IActiveScriptSIPInfo_INTERFACE_DEFINED__

/* interface IActiveScriptSIPInfo */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IActiveScriptSIPInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("764651D0-38DE-11d4-A2A3-00104BD35090")
    IActiveScriptSIPInfo : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetSIPOID( 
            /* [out] */ GUID *poid_sip) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IActiveScriptSIPInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IActiveScriptSIPInfo * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IActiveScriptSIPInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IActiveScriptSIPInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetSIPOID )( 
            IActiveScriptSIPInfo * This,
            /* [out] */ GUID *poid_sip);
        
        END_INTERFACE
    } IActiveScriptSIPInfoVtbl;

    interface IActiveScriptSIPInfo
    {
        CONST_VTBL struct IActiveScriptSIPInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IActiveScriptSIPInfo_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IActiveScriptSIPInfo_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IActiveScriptSIPInfo_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IActiveScriptSIPInfo_GetSIPOID(This,poid_sip)	\
    (This)->lpVtbl -> GetSIPOID(This,poid_sip)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IActiveScriptSIPInfo_GetSIPOID_Proxy( 
    IActiveScriptSIPInfo * This,
    /* [out] */ GUID *poid_sip);


void __RPC_STUB IActiveScriptSIPInfo_GetSIPOID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IActiveScriptSIPInfo_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_activscp_0274 */
/* [local] */ 


#endif  // __ActivScp_h



extern RPC_IF_HANDLE __MIDL_itf_activscp_0274_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_activscp_0274_v0_0_s_ifspec;

/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR * ); 
void                      __RPC_USER  BSTR_UserFree(     unsigned long *, BSTR * ); 

unsigned long             __RPC_USER  HWND_UserSize(     unsigned long *, unsigned long            , HWND * ); 
unsigned char * __RPC_USER  HWND_UserMarshal(  unsigned long *, unsigned char *, HWND * ); 
unsigned char * __RPC_USER  HWND_UserUnmarshal(unsigned long *, unsigned char *, HWND * ); 
void                      __RPC_USER  HWND_UserFree(     unsigned long *, HWND * ); 

unsigned long             __RPC_USER  VARIANT_UserSize(     unsigned long *, unsigned long            , VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserMarshal(  unsigned long *, unsigned char *, VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserUnmarshal(unsigned long *, unsigned char *, VARIANT * ); 
void                      __RPC_USER  VARIANT_UserFree(     unsigned long *, VARIANT * ); 

/* [local] */ HRESULT STDMETHODCALLTYPE IActiveScriptError_GetExceptionInfo_Proxy( 
    IActiveScriptError * This,
    /* [out] */ EXCEPINFO *pexcepinfo);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IActiveScriptError_GetExceptionInfo_Stub( 
    IActiveScriptError * This,
    /* [out] */ EXCEPINFO *pexcepinfo);



/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\vc7addon\vsbuilt\debug\inc\i386\vsmanaged.h ===
#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 6.00.0347 */
/* at Tue Jan 08 04:19:59 2002
 */
/* Compiler settings for vsmanaged.idl:
    Oicf, W0, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext
    error checks: allocation ref bounds_check enum stub_data , no_format_optimization
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 440
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __vsmanaged_h__
#define __vsmanaged_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IVSMDCodeDomCreator_FWD_DEFINED__
#define __IVSMDCodeDomCreator_FWD_DEFINED__
typedef interface IVSMDCodeDomCreator IVSMDCodeDomCreator;
#endif 	/* __IVSMDCodeDomCreator_FWD_DEFINED__ */


#ifndef __IVSMDCodeDomProvider_FWD_DEFINED__
#define __IVSMDCodeDomProvider_FWD_DEFINED__
typedef interface IVSMDCodeDomProvider IVSMDCodeDomProvider;
#endif 	/* __IVSMDCodeDomProvider_FWD_DEFINED__ */


#ifndef __IVSMDDesigner_FWD_DEFINED__
#define __IVSMDDesigner_FWD_DEFINED__
typedef interface IVSMDDesigner IVSMDDesigner;
#endif 	/* __IVSMDDesigner_FWD_DEFINED__ */


#ifndef __IVSMDDesignerLoader_FWD_DEFINED__
#define __IVSMDDesignerLoader_FWD_DEFINED__
typedef interface IVSMDDesignerLoader IVSMDDesignerLoader;
#endif 	/* __IVSMDDesignerLoader_FWD_DEFINED__ */


#ifndef __IVSMDDesignerService_FWD_DEFINED__
#define __IVSMDDesignerService_FWD_DEFINED__
typedef interface IVSMDDesignerService IVSMDDesignerService;
#endif 	/* __IVSMDDesignerService_FWD_DEFINED__ */


#ifndef __IVSMDPropertyGrid_FWD_DEFINED__
#define __IVSMDPropertyGrid_FWD_DEFINED__
typedef interface IVSMDPropertyGrid IVSMDPropertyGrid;
#endif 	/* __IVSMDPropertyGrid_FWD_DEFINED__ */


#ifndef __IVSMDPropertyBrowser_FWD_DEFINED__
#define __IVSMDPropertyBrowser_FWD_DEFINED__
typedef interface IVSMDPropertyBrowser IVSMDPropertyBrowser;
#endif 	/* __IVSMDPropertyBrowser_FWD_DEFINED__ */


#ifndef __IVSMDPerPropertyBrowsing_FWD_DEFINED__
#define __IVSMDPerPropertyBrowsing_FWD_DEFINED__
typedef interface IVSMDPerPropertyBrowsing IVSMDPerPropertyBrowsing;
#endif 	/* __IVSMDPerPropertyBrowsing_FWD_DEFINED__ */


/* header files for imported files */
#include "servprov.h"
#include "vsshell.h"

#ifdef __cplusplus
extern "C"{
#endif 

void * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void * ); 

/* interface __MIDL_itf_vsmanaged_0000 */
/* [local] */ 



enum __VSHPROPID_ASPX
    {	VSHPROPID_ProjAspxLanguage	= 5000,
	VSHPROPID_ProjAspxCodeBehindExt	= 5001,
	VSHPROPID_ProjAspxAutoEventWireup	= 5002
    } ;
extern const __declspec(selectany) GUID CLSID_VSMDResxGenerator = { 0x9abb9d6c, 0x3fe7, 0x44bb, {0xa6, 0xb1, 0xef, 0x38, 0xfd, 0xf2, 0xed, 0xdd } };


extern RPC_IF_HANDLE __MIDL_itf_vsmanaged_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_vsmanaged_0000_v0_0_s_ifspec;


#ifndef __VSManagedDesigner_LIBRARY_DEFINED__
#define __VSManagedDesigner_LIBRARY_DEFINED__

/* library VSManagedDesigner */
/* [helpstring][version][uuid] */ 

#define SID_SVSMDCodeDomProvider IID_IVSMDCodeDomProvider
#define SID_SVSMDDesignerService IID_IVSMDDesignerService
typedef 
enum _PROPERTYGRIDSORT
    {	PGSORT_NOSORT	= 0,
	PGSORT_ALPHABETICAL	= 1,
	PGSORT_CATEGORIZED	= 2
    } 	PROPERTYGRIDSORT;

typedef 
enum _PROPERTYGRIDOPTION
    {	PGOPT_HOTCOMMANDS	= 0,
	PGOPT_HELP	= 1,
	PGOPT_TOOLBAR	= 2
    } 	PROPERTYGRIDOPTION;

#define SID_SVSMDPropertyBrowser IID_IVSMDPropertyBrowser

EXTERN_C const IID LIBID_VSManagedDesigner;

#ifndef __IVSMDCodeDomCreator_INTERFACE_DEFINED__
#define __IVSMDCodeDomCreator_INTERFACE_DEFINED__

/* interface IVSMDCodeDomCreator */
/* [uuid][object] */ 


EXTERN_C const IID IID_IVSMDCodeDomCreator;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4CC03BF7-4D89-4198-8E4D-17E217CA07B2")
    IVSMDCodeDomCreator : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE CreateCodeDomProvider( 
            /* [in] */ IVsHierarchy *pHier,
            /* [in] */ VSITEMID itemid,
            /* [retval][out] */ IVSMDCodeDomProvider **ppProvider) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IVSMDCodeDomCreatorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IVSMDCodeDomCreator * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IVSMDCodeDomCreator * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IVSMDCodeDomCreator * This);
        
        HRESULT ( STDMETHODCALLTYPE *CreateCodeDomProvider )( 
            IVSMDCodeDomCreator * This,
            /* [in] */ IVsHierarchy *pHier,
            /* [in] */ VSITEMID itemid,
            /* [retval][out] */ IVSMDCodeDomProvider **ppProvider);
        
        END_INTERFACE
    } IVSMDCodeDomCreatorVtbl;

    interface IVSMDCodeDomCreator
    {
        CONST_VTBL struct IVSMDCodeDomCreatorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IVSMDCodeDomCreator_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IVSMDCodeDomCreator_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IVSMDCodeDomCreator_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IVSMDCodeDomCreator_CreateCodeDomProvider(This,pHier,itemid,ppProvider)	\
    (This)->lpVtbl -> CreateCodeDomProvider(This,pHier,itemid,ppProvider)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IVSMDCodeDomCreator_CreateCodeDomProvider_Proxy( 
    IVSMDCodeDomCreator * This,
    /* [in] */ IVsHierarchy *pHier,
    /* [in] */ VSITEMID itemid,
    /* [retval][out] */ IVSMDCodeDomProvider **ppProvider);


void __RPC_STUB IVSMDCodeDomCreator_CreateCodeDomProvider_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IVSMDCodeDomCreator_INTERFACE_DEFINED__ */


#ifndef __IVSMDCodeDomProvider_INTERFACE_DEFINED__
#define __IVSMDCodeDomProvider_INTERFACE_DEFINED__

/* interface IVSMDCodeDomProvider */
/* [uuid][object] */ 


EXTERN_C const IID IID_IVSMDCodeDomProvider;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("73E59688-C7C4-4a85-AF64-A538754784C5")
    IVSMDCodeDomProvider : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CodeDomProvider( 
            /* [retval][out] */ IDispatch **ppProvider) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IVSMDCodeDomProviderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IVSMDCodeDomProvider * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IVSMDCodeDomProvider * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IVSMDCodeDomProvider * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CodeDomProvider )( 
            IVSMDCodeDomProvider * This,
            /* [retval][out] */ IDispatch **ppProvider);
        
        END_INTERFACE
    } IVSMDCodeDomProviderVtbl;

    interface IVSMDCodeDomProvider
    {
        CONST_VTBL struct IVSMDCodeDomProviderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IVSMDCodeDomProvider_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IVSMDCodeDomProvider_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IVSMDCodeDomProvider_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IVSMDCodeDomProvider_get_CodeDomProvider(This,ppProvider)	\
    (This)->lpVtbl -> get_CodeDomProvider(This,ppProvider)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [propget] */ HRESULT STDMETHODCALLTYPE IVSMDCodeDomProvider_get_CodeDomProvider_Proxy( 
    IVSMDCodeDomProvider * This,
    /* [retval][out] */ IDispatch **ppProvider);


void __RPC_STUB IVSMDCodeDomProvider_get_CodeDomProvider_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IVSMDCodeDomProvider_INTERFACE_DEFINED__ */


#ifndef __IVSMDDesigner_INTERFACE_DEFINED__
#define __IVSMDDesigner_INTERFACE_DEFINED__

/* interface IVSMDDesigner */
/* [uuid][object] */ 


EXTERN_C const IID IID_IVSMDDesigner;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7494682A-37A0-11d2-A273-00C04F8EF4FF")
    IVSMDDesigner : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CommandGuid( 
            /* [retval][out] */ GUID *pguidCmdId) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_View( 
            /* [retval][out] */ IUnknown **pView) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SelectionContainer( 
            /* [retval][out] */ IUnknown **ppSelCon) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Dispose( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Flush( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetLoadError( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IVSMDDesignerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IVSMDDesigner * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IVSMDDesigner * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IVSMDDesigner * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CommandGuid )( 
            IVSMDDesigner * This,
            /* [retval][out] */ GUID *pguidCmdId);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_View )( 
            IVSMDDesigner * This,
            /* [retval][out] */ IUnknown **pView);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SelectionContainer )( 
            IVSMDDesigner * This,
            /* [retval][out] */ IUnknown **ppSelCon);
        
        HRESULT ( STDMETHODCALLTYPE *Dispose )( 
            IVSMDDesigner * This);
        
        HRESULT ( STDMETHODCALLTYPE *Flush )( 
            IVSMDDesigner * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetLoadError )( 
            IVSMDDesigner * This);
        
        END_INTERFACE
    } IVSMDDesignerVtbl;

    interface IVSMDDesigner
    {
        CONST_VTBL struct IVSMDDesignerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IVSMDDesigner_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IVSMDDesigner_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IVSMDDesigner_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IVSMDDesigner_get_CommandGuid(This,pguidCmdId)	\
    (This)->lpVtbl -> get_CommandGuid(This,pguidCmdId)

#define IVSMDDesigner_get_View(This,pView)	\
    (This)->lpVtbl -> get_View(This,pView)

#define IVSMDDesigner_get_SelectionContainer(This,ppSelCon)	\
    (This)->lpVtbl -> get_SelectionContainer(This,ppSelCon)

#define IVSMDDesigner_Dispose(This)	\
    (This)->lpVtbl -> Dispose(This)

#define IVSMDDesigner_Flush(This)	\
    (This)->lpVtbl -> Flush(This)

#define IVSMDDesigner_GetLoadError(This)	\
    (This)->lpVtbl -> GetLoadError(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [propget] */ HRESULT STDMETHODCALLTYPE IVSMDDesigner_get_CommandGuid_Proxy( 
    IVSMDDesigner * This,
    /* [retval][out] */ GUID *pguidCmdId);


void __RPC_STUB IVSMDDesigner_get_CommandGuid_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IVSMDDesigner_get_View_Proxy( 
    IVSMDDesigner * This,
    /* [retval][out] */ IUnknown **pView);


void __RPC_STUB IVSMDDesigner_get_View_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IVSMDDesigner_get_SelectionContainer_Proxy( 
    IVSMDDesigner * This,
    /* [retval][out] */ IUnknown **ppSelCon);


void __RPC_STUB IVSMDDesigner_get_SelectionContainer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVSMDDesigner_Dispose_Proxy( 
    IVSMDDesigner * This);


void __RPC_STUB IVSMDDesigner_Dispose_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVSMDDesigner_Flush_Proxy( 
    IVSMDDesigner * This);


void __RPC_STUB IVSMDDesigner_Flush_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVSMDDesigner_GetLoadError_Proxy( 
    IVSMDDesigner * This);


void __RPC_STUB IVSMDDesigner_GetLoadError_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IVSMDDesigner_INTERFACE_DEFINED__ */


#ifndef __IVSMDDesignerLoader_INTERFACE_DEFINED__
#define __IVSMDDesignerLoader_INTERFACE_DEFINED__

/* interface IVSMDDesignerLoader */
/* [uuid][object] */ 


EXTERN_C const IID IID_IVSMDDesignerLoader;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("74946834-37A0-11d2-A273-00C04F8EF4FF")
    IVSMDDesignerLoader : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Dispose( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetEditorCaption( 
            /* [in] */ READONLYSTATUS status,
            /* [retval][out] */ BSTR *pbstrCaption) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Initialize( 
            /* [in] */ IServiceProvider *pSp,
            /* [in] */ IVsHierarchy *pHier,
            /* [in] */ VSITEMID itemid,
            /* [in] */ IUnknown *pDocData) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetBaseEditorCaption( 
            /* [in] */ LPCOLESTR pwszCaption) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IVSMDDesignerLoaderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IVSMDDesignerLoader * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IVSMDDesignerLoader * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IVSMDDesignerLoader * This);
        
        HRESULT ( STDMETHODCALLTYPE *Dispose )( 
            IVSMDDesignerLoader * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetEditorCaption )( 
            IVSMDDesignerLoader * This,
            /* [in] */ READONLYSTATUS status,
            /* [retval][out] */ BSTR *pbstrCaption);
        
        HRESULT ( STDMETHODCALLTYPE *Initialize )( 
            IVSMDDesignerLoader * This,
            /* [in] */ IServiceProvider *pSp,
            /* [in] */ IVsHierarchy *pHier,
            /* [in] */ VSITEMID itemid,
            /* [in] */ IUnknown *pDocData);
        
        HRESULT ( STDMETHODCALLTYPE *SetBaseEditorCaption )( 
            IVSMDDesignerLoader * This,
            /* [in] */ LPCOLESTR pwszCaption);
        
        END_INTERFACE
    } IVSMDDesignerLoaderVtbl;

    interface IVSMDDesignerLoader
    {
        CONST_VTBL struct IVSMDDesignerLoaderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IVSMDDesignerLoader_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IVSMDDesignerLoader_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IVSMDDesignerLoader_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IVSMDDesignerLoader_Dispose(This)	\
    (This)->lpVtbl -> Dispose(This)

#define IVSMDDesignerLoader_GetEditorCaption(This,status,pbstrCaption)	\
    (This)->lpVtbl -> GetEditorCaption(This,status,pbstrCaption)

#define IVSMDDesignerLoader_Initialize(This,pSp,pHier,itemid,pDocData)	\
    (This)->lpVtbl -> Initialize(This,pSp,pHier,itemid,pDocData)

#define IVSMDDesignerLoader_SetBaseEditorCaption(This,pwszCaption)	\
    (This)->lpVtbl -> SetBaseEditorCaption(This,pwszCaption)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IVSMDDesignerLoader_Dispose_Proxy( 
    IVSMDDesignerLoader * This);


void __RPC_STUB IVSMDDesignerLoader_Dispose_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVSMDDesignerLoader_GetEditorCaption_Proxy( 
    IVSMDDesignerLoader * This,
    /* [in] */ READONLYSTATUS status,
    /* [retval][out] */ BSTR *pbstrCaption);


void __RPC_STUB IVSMDDesignerLoader_GetEditorCaption_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVSMDDesignerLoader_Initialize_Proxy( 
    IVSMDDesignerLoader * This,
    /* [in] */ IServiceProvider *pSp,
    /* [in] */ IVsHierarchy *pHier,
    /* [in] */ VSITEMID itemid,
    /* [in] */ IUnknown *pDocData);


void __RPC_STUB IVSMDDesignerLoader_Initialize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVSMDDesignerLoader_SetBaseEditorCaption_Proxy( 
    IVSMDDesignerLoader * This,
    /* [in] */ LPCOLESTR pwszCaption);


void __RPC_STUB IVSMDDesignerLoader_SetBaseEditorCaption_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IVSMDDesignerLoader_INTERFACE_DEFINED__ */


#ifndef __IVSMDDesignerService_INTERFACE_DEFINED__
#define __IVSMDDesignerService_INTERFACE_DEFINED__

/* interface IVSMDDesignerService */
/* [uuid][object] */ 


EXTERN_C const IID IID_IVSMDDesignerService;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("74946829-37A0-11d2-A273-00C04F8EF4FF")
    IVSMDDesignerService : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DesignViewAttribute( 
            /* [retval][out] */ BSTR *pbstrAttribute) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateDesigner( 
            /* [in] */ IServiceProvider *pSp,
            /* [in] */ IUnknown *pDesignerLoader,
            /* [retval][out] */ IVSMDDesigner **ppDesigner) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateDesignerForClass( 
            /* [in] */ IServiceProvider *pSp,
            /* [in] */ LPCOLESTR pwszComponentClass,
            /* [retval][out] */ IVSMDDesigner **ppDesigner) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateDesignerLoader( 
            /* [in] */ LPCOLESTR pwszCodeStreamClass,
            /* [retval][out] */ IUnknown **ppCodeStream) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDesignerLoaderClassForFile( 
            /* [in] */ LPCOLESTR pwszFileName,
            /* [retval][out] */ BSTR *pbstrDesignerLoaderClass) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RegisterDesignViewAttribute( 
            /* [in] */ IVsHierarchy *pHier,
            /* [in] */ VSITEMID itemid,
            /* [in] */ int dwClass,
            /* [in] */ LPOLESTR pwszAttributeValue) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IVSMDDesignerServiceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IVSMDDesignerService * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IVSMDDesignerService * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IVSMDDesignerService * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DesignViewAttribute )( 
            IVSMDDesignerService * This,
            /* [retval][out] */ BSTR *pbstrAttribute);
        
        HRESULT ( STDMETHODCALLTYPE *CreateDesigner )( 
            IVSMDDesignerService * This,
            /* [in] */ IServiceProvider *pSp,
            /* [in] */ IUnknown *pDesignerLoader,
            /* [retval][out] */ IVSMDDesigner **ppDesigner);
        
        HRESULT ( STDMETHODCALLTYPE *CreateDesignerForClass )( 
            IVSMDDesignerService * This,
            /* [in] */ IServiceProvider *pSp,
            /* [in] */ LPCOLESTR pwszComponentClass,
            /* [retval][out] */ IVSMDDesigner **ppDesigner);
        
        HRESULT ( STDMETHODCALLTYPE *CreateDesignerLoader )( 
            IVSMDDesignerService * This,
            /* [in] */ LPCOLESTR pwszCodeStreamClass,
            /* [retval][out] */ IUnknown **ppCodeStream);
        
        HRESULT ( STDMETHODCALLTYPE *GetDesignerLoaderClassForFile )( 
            IVSMDDesignerService * This,
            /* [in] */ LPCOLESTR pwszFileName,
            /* [retval][out] */ BSTR *pbstrDesignerLoaderClass);
        
        HRESULT ( STDMETHODCALLTYPE *RegisterDesignViewAttribute )( 
            IVSMDDesignerService * This,
            /* [in] */ IVsHierarchy *pHier,
            /* [in] */ VSITEMID itemid,
            /* [in] */ int dwClass,
            /* [in] */ LPOLESTR pwszAttributeValue);
        
        END_INTERFACE
    } IVSMDDesignerServiceVtbl;

    interface IVSMDDesignerService
    {
        CONST_VTBL struct IVSMDDesignerServiceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IVSMDDesignerService_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IVSMDDesignerService_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IVSMDDesignerService_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IVSMDDesignerService_get_DesignViewAttribute(This,pbstrAttribute)	\
    (This)->lpVtbl -> get_DesignViewAttribute(This,pbstrAttribute)

#define IVSMDDesignerService_CreateDesigner(This,pSp,pDesignerLoader,ppDesigner)	\
    (This)->lpVtbl -> CreateDesigner(This,pSp,pDesignerLoader,ppDesigner)

#define IVSMDDesignerService_CreateDesignerForClass(This,pSp,pwszComponentClass,ppDesigner)	\
    (This)->lpVtbl -> CreateDesignerForClass(This,pSp,pwszComponentClass,ppDesigner)

#define IVSMDDesignerService_CreateDesignerLoader(This,pwszCodeStreamClass,ppCodeStream)	\
    (This)->lpVtbl -> CreateDesignerLoader(This,pwszCodeStreamClass,ppCodeStream)

#define IVSMDDesignerService_GetDesignerLoaderClassForFile(This,pwszFileName,pbstrDesignerLoaderClass)	\
    (This)->lpVtbl -> GetDesignerLoaderClassForFile(This,pwszFileName,pbstrDesignerLoaderClass)

#define IVSMDDesignerService_RegisterDesignViewAttribute(This,pHier,itemid,dwClass,pwszAttributeValue)	\
    (This)->lpVtbl -> RegisterDesignViewAttribute(This,pHier,itemid,dwClass,pwszAttributeValue)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [propget] */ HRESULT STDMETHODCALLTYPE IVSMDDesignerService_get_DesignViewAttribute_Proxy( 
    IVSMDDesignerService * This,
    /* [retval][out] */ BSTR *pbstrAttribute);


void __RPC_STUB IVSMDDesignerService_get_DesignViewAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVSMDDesignerService_CreateDesigner_Proxy( 
    IVSMDDesignerService * This,
    /* [in] */ IServiceProvider *pSp,
    /* [in] */ IUnknown *pDesignerLoader,
    /* [retval][out] */ IVSMDDesigner **ppDesigner);


void __RPC_STUB IVSMDDesignerService_CreateDesigner_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVSMDDesignerService_CreateDesignerForClass_Proxy( 
    IVSMDDesignerService * This,
    /* [in] */ IServiceProvider *pSp,
    /* [in] */ LPCOLESTR pwszComponentClass,
    /* [retval][out] */ IVSMDDesigner **ppDesigner);


void __RPC_STUB IVSMDDesignerService_CreateDesignerForClass_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVSMDDesignerService_CreateDesignerLoader_Proxy( 
    IVSMDDesignerService * This,
    /* [in] */ LPCOLESTR pwszCodeStreamClass,
    /* [retval][out] */ IUnknown **ppCodeStream);


void __RPC_STUB IVSMDDesignerService_CreateDesignerLoader_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVSMDDesignerService_GetDesignerLoaderClassForFile_Proxy( 
    IVSMDDesignerService * This,
    /* [in] */ LPCOLESTR pwszFileName,
    /* [retval][out] */ BSTR *pbstrDesignerLoaderClass);


void __RPC_STUB IVSMDDesignerService_GetDesignerLoaderClassForFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVSMDDesignerService_RegisterDesignViewAttribute_Proxy( 
    IVSMDDesignerService * This,
    /* [in] */ IVsHierarchy *pHier,
    /* [in] */ VSITEMID itemid,
    /* [in] */ int dwClass,
    /* [in] */ LPOLESTR pwszAttributeValue);


void __RPC_STUB IVSMDDesignerService_RegisterDesignViewAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IVSMDDesignerService_INTERFACE_DEFINED__ */


#ifndef __IVSMDPropertyGrid_INTERFACE_DEFINED__
#define __IVSMDPropertyGrid_INTERFACE_DEFINED__

/* interface IVSMDPropertyGrid */
/* [uuid][object] */ 


EXTERN_C const IID IID_IVSMDPropertyGrid;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("74946837-37A0-11d2-A273-00C04F8EF4FF")
    IVSMDPropertyGrid : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_CommandsVisible( 
            /* [retval][out] */ VARIANT_BOOL *pfVisible) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Handle( 
            /* [retval][out] */ HWND *phwnd) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_GridSort( 
            /* [retval][out] */ PROPERTYGRIDSORT *pSort) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_GridSort( 
            /* [in] */ PROPERTYGRIDSORT sort) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SelectedPropertyName( 
            /* [retval][out] */ BSTR *pbstrName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Dispose( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetOption( 
            /* [in] */ PROPERTYGRIDOPTION option,
            /* [retval][out] */ VARIANT *pvtOption) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Refresh( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetOption( 
            /* [in] */ PROPERTYGRIDOPTION option,
            /* [in] */ VARIANT vtOption) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetSelectedObjects( 
            int cObjects,
            /* [size_is][in] */ IUnknown **ppUnk) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IVSMDPropertyGridVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IVSMDPropertyGrid * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IVSMDPropertyGrid * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IVSMDPropertyGrid * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_CommandsVisible )( 
            IVSMDPropertyGrid * This,
            /* [retval][out] */ VARIANT_BOOL *pfVisible);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            IVSMDPropertyGrid * This,
            /* [retval][out] */ HWND *phwnd);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_GridSort )( 
            IVSMDPropertyGrid * This,
            /* [retval][out] */ PROPERTYGRIDSORT *pSort);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_GridSort )( 
            IVSMDPropertyGrid * This,
            /* [in] */ PROPERTYGRIDSORT sort);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SelectedPropertyName )( 
            IVSMDPropertyGrid * This,
            /* [retval][out] */ BSTR *pbstrName);
        
        HRESULT ( STDMETHODCALLTYPE *Dispose )( 
            IVSMDPropertyGrid * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetOption )( 
            IVSMDPropertyGrid * This,
            /* [in] */ PROPERTYGRIDOPTION option,
            /* [retval][out] */ VARIANT *pvtOption);
        
        HRESULT ( STDMETHODCALLTYPE *Refresh )( 
            IVSMDPropertyGrid * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetOption )( 
            IVSMDPropertyGrid * This,
            /* [in] */ PROPERTYGRIDOPTION option,
            /* [in] */ VARIANT vtOption);
        
        HRESULT ( STDMETHODCALLTYPE *SetSelectedObjects )( 
            IVSMDPropertyGrid * This,
            int cObjects,
            /* [size_is][in] */ IUnknown **ppUnk);
        
        END_INTERFACE
    } IVSMDPropertyGridVtbl;

    interface IVSMDPropertyGrid
    {
        CONST_VTBL struct IVSMDPropertyGridVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IVSMDPropertyGrid_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IVSMDPropertyGrid_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IVSMDPropertyGrid_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IVSMDPropertyGrid_get_CommandsVisible(This,pfVisible)	\
    (This)->lpVtbl -> get_CommandsVisible(This,pfVisible)

#define IVSMDPropertyGrid_get_Handle(This,phwnd)	\
    (This)->lpVtbl -> get_Handle(This,phwnd)

#define IVSMDPropertyGrid_get_GridSort(This,pSort)	\
    (This)->lpVtbl -> get_GridSort(This,pSort)

#define IVSMDPropertyGrid_put_GridSort(This,sort)	\
    (This)->lpVtbl -> put_GridSort(This,sort)

#define IVSMDPropertyGrid_get_SelectedPropertyName(This,pbstrName)	\
    (This)->lpVtbl -> get_SelectedPropertyName(This,pbstrName)

#define IVSMDPropertyGrid_Dispose(This)	\
    (This)->lpVtbl -> Dispose(This)

#define IVSMDPropertyGrid_GetOption(This,option,pvtOption)	\
    (This)->lpVtbl -> GetOption(This,option,pvtOption)

#define IVSMDPropertyGrid_Refresh(This)	\
    (This)->lpVtbl -> Refresh(This)

#define IVSMDPropertyGrid_SetOption(This,option,vtOption)	\
    (This)->lpVtbl -> SetOption(This,option,vtOption)

#define IVSMDPropertyGrid_SetSelectedObjects(This,cObjects,ppUnk)	\
    (This)->lpVtbl -> SetSelectedObjects(This,cObjects,ppUnk)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [propget] */ HRESULT STDMETHODCALLTYPE IVSMDPropertyGrid_get_CommandsVisible_Proxy( 
    IVSMDPropertyGrid * This,
    /* [retval][out] */ VARIANT_BOOL *pfVisible);


void __RPC_STUB IVSMDPropertyGrid_get_CommandsVisible_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IVSMDPropertyGrid_get_Handle_Proxy( 
    IVSMDPropertyGrid * This,
    /* [retval][out] */ HWND *phwnd);


void __RPC_STUB IVSMDPropertyGrid_get_Handle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IVSMDPropertyGrid_get_GridSort_Proxy( 
    IVSMDPropertyGrid * This,
    /* [retval][out] */ PROPERTYGRIDSORT *pSort);


void __RPC_STUB IVSMDPropertyGrid_get_GridSort_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput] */ HRESULT STDMETHODCALLTYPE IVSMDPropertyGrid_put_GridSort_Proxy( 
    IVSMDPropertyGrid * This,
    /* [in] */ PROPERTYGRIDSORT sort);


void __RPC_STUB IVSMDPropertyGrid_put_GridSort_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IVSMDPropertyGrid_get_SelectedPropertyName_Proxy( 
    IVSMDPropertyGrid * This,
    /* [retval][out] */ BSTR *pbstrName);


void __RPC_STUB IVSMDPropertyGrid_get_SelectedPropertyName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVSMDPropertyGrid_Dispose_Proxy( 
    IVSMDPropertyGrid * This);


void __RPC_STUB IVSMDPropertyGrid_Dispose_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVSMDPropertyGrid_GetOption_Proxy( 
    IVSMDPropertyGrid * This,
    /* [in] */ PROPERTYGRIDOPTION option,
    /* [retval][out] */ VARIANT *pvtOption);


void __RPC_STUB IVSMDPropertyGrid_GetOption_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVSMDPropertyGrid_Refresh_Proxy( 
    IVSMDPropertyGrid * This);


void __RPC_STUB IVSMDPropertyGrid_Refresh_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVSMDPropertyGrid_SetOption_Proxy( 
    IVSMDPropertyGrid * This,
    /* [in] */ PROPERTYGRIDOPTION option,
    /* [in] */ VARIANT vtOption);


void __RPC_STUB IVSMDPropertyGrid_SetOption_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVSMDPropertyGrid_SetSelectedObjects_Proxy( 
    IVSMDPropertyGrid * This,
    int cObjects,
    /* [size_is][in] */ IUnknown **ppUnk);


void __RPC_STUB IVSMDPropertyGrid_SetSelectedObjects_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IVSMDPropertyGrid_INTERFACE_DEFINED__ */


#ifndef __IVSMDPropertyBrowser_INTERFACE_DEFINED__
#define __IVSMDPropertyBrowser_INTERFACE_DEFINED__

/* interface IVSMDPropertyBrowser */
/* [uuid][object] */ 


EXTERN_C const IID IID_IVSMDPropertyBrowser;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("74946810-37A0-11d2-A273-00C04F8EF4FF")
    IVSMDPropertyBrowser : public IUnknown
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_WindowGlyphResourceID( 
            /* [retval][out] */ DWORD *pdwResID) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreatePropertyGrid( 
            /* [retval][out] */ IVSMDPropertyGrid **ppGrid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Refresh( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IVSMDPropertyBrowserVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IVSMDPropertyBrowser * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IVSMDPropertyBrowser * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IVSMDPropertyBrowser * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_WindowGlyphResourceID )( 
            IVSMDPropertyBrowser * This,
            /* [retval][out] */ DWORD *pdwResID);
        
        HRESULT ( STDMETHODCALLTYPE *CreatePropertyGrid )( 
            IVSMDPropertyBrowser * This,
            /* [retval][out] */ IVSMDPropertyGrid **ppGrid);
        
        HRESULT ( STDMETHODCALLTYPE *Refresh )( 
            IVSMDPropertyBrowser * This);
        
        END_INTERFACE
    } IVSMDPropertyBrowserVtbl;

    interface IVSMDPropertyBrowser
    {
        CONST_VTBL struct IVSMDPropertyBrowserVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IVSMDPropertyBrowser_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IVSMDPropertyBrowser_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IVSMDPropertyBrowser_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IVSMDPropertyBrowser_get_WindowGlyphResourceID(This,pdwResID)	\
    (This)->lpVtbl -> get_WindowGlyphResourceID(This,pdwResID)

#define IVSMDPropertyBrowser_CreatePropertyGrid(This,ppGrid)	\
    (This)->lpVtbl -> CreatePropertyGrid(This,ppGrid)

#define IVSMDPropertyBrowser_Refresh(This)	\
    (This)->lpVtbl -> Refresh(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [propget] */ HRESULT STDMETHODCALLTYPE IVSMDPropertyBrowser_get_WindowGlyphResourceID_Proxy( 
    IVSMDPropertyBrowser * This,
    /* [retval][out] */ DWORD *pdwResID);


void __RPC_STUB IVSMDPropertyBrowser_get_WindowGlyphResourceID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVSMDPropertyBrowser_CreatePropertyGrid_Proxy( 
    IVSMDPropertyBrowser * This,
    /* [retval][out] */ IVSMDPropertyGrid **ppGrid);


void __RPC_STUB IVSMDPropertyBrowser_CreatePropertyGrid_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVSMDPropertyBrowser_Refresh_Proxy( 
    IVSMDPropertyBrowser * This);


void __RPC_STUB IVSMDPropertyBrowser_Refresh_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IVSMDPropertyBrowser_INTERFACE_DEFINED__ */


#ifndef __IVSMDPerPropertyBrowsing_INTERFACE_DEFINED__
#define __IVSMDPerPropertyBrowsing_INTERFACE_DEFINED__

/* interface IVSMDPerPropertyBrowsing */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IVSMDPerPropertyBrowsing;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7494683C-37A0-11d2-A273-00C04F8EF4FF")
    IVSMDPerPropertyBrowsing : public IUnknown
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetPropertyAttributes( 
            DISPID dispid,
            /* [out] */ UINT *pceltAttrs,
            /* [size_is][size_is][out] */ BSTR **ppbstrTypeNames,
            /* [size_is][size_is][out] */ VARIANT **ppvarAttrValues) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IVSMDPerPropertyBrowsingVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IVSMDPerPropertyBrowsing * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IVSMDPerPropertyBrowsing * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IVSMDPerPropertyBrowsing * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetPropertyAttributes )( 
            IVSMDPerPropertyBrowsing * This,
            DISPID dispid,
            /* [out] */ UINT *pceltAttrs,
            /* [size_is][size_is][out] */ BSTR **ppbstrTypeNames,
            /* [size_is][size_is][out] */ VARIANT **ppvarAttrValues);
        
        END_INTERFACE
    } IVSMDPerPropertyBrowsingVtbl;

    interface IVSMDPerPropertyBrowsing
    {
        CONST_VTBL struct IVSMDPerPropertyBrowsingVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IVSMDPerPropertyBrowsing_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IVSMDPerPropertyBrowsing_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IVSMDPerPropertyBrowsing_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IVSMDPerPropertyBrowsing_GetPropertyAttributes(This,dispid,pceltAttrs,ppbstrTypeNames,ppvarAttrValues)	\
    (This)->lpVtbl -> GetPropertyAttributes(This,dispid,pceltAttrs,ppbstrTypeNames,ppvarAttrValues)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IVSMDPerPropertyBrowsing_GetPropertyAttributes_Proxy( 
    IVSMDPerPropertyBrowsing * This,
    DISPID dispid,
    /* [out] */ UINT *pceltAttrs,
    /* [size_is][size_is][out] */ BSTR **ppbstrTypeNames,
    /* [size_is][size_is][out] */ VARIANT **ppvarAttrValues);


void __RPC_STUB IVSMDPerPropertyBrowsing_GetPropertyAttributes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IVSMDPerPropertyBrowsing_INTERFACE_DEFINED__ */

#endif /* __VSManagedDesigner_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\vc7addon\vsbuilt\debug\inc\i386\vshelp.h ===
#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 6.00.0347 */
/* at Tue Jan 08 04:19:34 2002
 */
/* Compiler settings for vshelp.idl:
    Oicf, W0, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext
    error checks: allocation ref bounds_check enum stub_data , no_format_optimization
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 440
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __vshelp_h__
#define __vshelp_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IVsHelpOwner_FWD_DEFINED__
#define __IVsHelpOwner_FWD_DEFINED__
typedef interface IVsHelpOwner IVsHelpOwner;
#endif 	/* __IVsHelpOwner_FWD_DEFINED__ */


#ifndef __IVsHelpTopicShowEvents_FWD_DEFINED__
#define __IVsHelpTopicShowEvents_FWD_DEFINED__
typedef interface IVsHelpTopicShowEvents IVsHelpTopicShowEvents;
#endif 	/* __IVsHelpTopicShowEvents_FWD_DEFINED__ */


#ifndef __Help_FWD_DEFINED__
#define __Help_FWD_DEFINED__
typedef interface Help Help;
#endif 	/* __Help_FWD_DEFINED__ */


#ifndef __IVsHelpEvents_FWD_DEFINED__
#define __IVsHelpEvents_FWD_DEFINED__
typedef interface IVsHelpEvents IVsHelpEvents;
#endif 	/* __IVsHelpEvents_FWD_DEFINED__ */


#ifndef __DExploreAppObj_FWD_DEFINED__
#define __DExploreAppObj_FWD_DEFINED__

#ifdef __cplusplus
typedef class DExploreAppObj DExploreAppObj;
#else
typedef struct DExploreAppObj DExploreAppObj;
#endif /* __cplusplus */

#endif 	/* __DExploreAppObj_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "ocidl.h"

#ifdef __cplusplus
extern "C"{
#endif 

void * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void * ); 


#ifndef __VsHelp_LIBRARY_DEFINED__
#define __VsHelp_LIBRARY_DEFINED__

/* library VsHelp */
/* [version][uuid] */ 


EXTERN_C const IID LIBID_VsHelp;

#ifndef __IVsHelpOwner_INTERFACE_DEFINED__
#define __IVsHelpOwner_INTERFACE_DEFINED__

/* interface IVsHelpOwner */
/* [version][helpstring][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_IVsHelpOwner;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B9B0983A-364C-4866-873F-D5ED190138FB")
    IVsHelpOwner : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE BringHelpToTop( 
            /* [in] */ long hwndHelpApp) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_AutomationObject( 
            /* [retval][out] */ IDispatch **ppObj) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IVsHelpOwnerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IVsHelpOwner * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IVsHelpOwner * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IVsHelpOwner * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IVsHelpOwner * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IVsHelpOwner * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IVsHelpOwner * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IVsHelpOwner * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *BringHelpToTop )( 
            IVsHelpOwner * This,
            /* [in] */ long hwndHelpApp);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AutomationObject )( 
            IVsHelpOwner * This,
            /* [retval][out] */ IDispatch **ppObj);
        
        END_INTERFACE
    } IVsHelpOwnerVtbl;

    interface IVsHelpOwner
    {
        CONST_VTBL struct IVsHelpOwnerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IVsHelpOwner_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IVsHelpOwner_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IVsHelpOwner_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IVsHelpOwner_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IVsHelpOwner_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IVsHelpOwner_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IVsHelpOwner_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IVsHelpOwner_BringHelpToTop(This,hwndHelpApp)	\
    (This)->lpVtbl -> BringHelpToTop(This,hwndHelpApp)

#define IVsHelpOwner_get_AutomationObject(This,ppObj)	\
    (This)->lpVtbl -> get_AutomationObject(This,ppObj)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IVsHelpOwner_BringHelpToTop_Proxy( 
    IVsHelpOwner * This,
    /* [in] */ long hwndHelpApp);


void __RPC_STUB IVsHelpOwner_BringHelpToTop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE IVsHelpOwner_get_AutomationObject_Proxy( 
    IVsHelpOwner * This,
    /* [retval][out] */ IDispatch **ppObj);


void __RPC_STUB IVsHelpOwner_get_AutomationObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IVsHelpOwner_INTERFACE_DEFINED__ */


#ifndef __IVsHelpTopicShowEvents_INTERFACE_DEFINED__
#define __IVsHelpTopicShowEvents_INTERFACE_DEFINED__

/* interface IVsHelpTopicShowEvents */
/* [object][helpstring][uuid] */ 


EXTERN_C const IID IID_IVsHelpTopicShowEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D1AAC64A-6A25-4274-B2C6-BC3B840B6E54")
    IVsHelpTopicShowEvents : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE OnBeforeTopicShow( 
            /* [in] */ BSTR bstrURL,
            /* [in] */ IDispatch *pWB) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE OnTopicShowComplete( 
            /* [in] */ BSTR bstrURL,
            /* [in] */ IDispatch *pWB) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IVsHelpTopicShowEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IVsHelpTopicShowEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IVsHelpTopicShowEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IVsHelpTopicShowEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IVsHelpTopicShowEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IVsHelpTopicShowEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IVsHelpTopicShowEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IVsHelpTopicShowEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *OnBeforeTopicShow )( 
            IVsHelpTopicShowEvents * This,
            /* [in] */ BSTR bstrURL,
            /* [in] */ IDispatch *pWB);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *OnTopicShowComplete )( 
            IVsHelpTopicShowEvents * This,
            /* [in] */ BSTR bstrURL,
            /* [in] */ IDispatch *pWB);
        
        END_INTERFACE
    } IVsHelpTopicShowEventsVtbl;

    interface IVsHelpTopicShowEvents
    {
        CONST_VTBL struct IVsHelpTopicShowEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IVsHelpTopicShowEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IVsHelpTopicShowEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IVsHelpTopicShowEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IVsHelpTopicShowEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IVsHelpTopicShowEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IVsHelpTopicShowEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IVsHelpTopicShowEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IVsHelpTopicShowEvents_OnBeforeTopicShow(This,bstrURL,pWB)	\
    (This)->lpVtbl -> OnBeforeTopicShow(This,bstrURL,pWB)

#define IVsHelpTopicShowEvents_OnTopicShowComplete(This,bstrURL,pWB)	\
    (This)->lpVtbl -> OnTopicShowComplete(This,bstrURL,pWB)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IVsHelpTopicShowEvents_OnBeforeTopicShow_Proxy( 
    IVsHelpTopicShowEvents * This,
    /* [in] */ BSTR bstrURL,
    /* [in] */ IDispatch *pWB);


void __RPC_STUB IVsHelpTopicShowEvents_OnBeforeTopicShow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IVsHelpTopicShowEvents_OnTopicShowComplete_Proxy( 
    IVsHelpTopicShowEvents * This,
    /* [in] */ BSTR bstrURL,
    /* [in] */ IDispatch *pWB);


void __RPC_STUB IVsHelpTopicShowEvents_OnTopicShowComplete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IVsHelpTopicShowEvents_INTERFACE_DEFINED__ */


#ifndef __Help_INTERFACE_DEFINED__
#define __Help_INTERFACE_DEFINED__

/* interface Help */
/* [uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_Help;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4A791148-19E4-11d3-B86B-00C04F79F802")
    Help : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Contents( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Index( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Search( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE IndexResults( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SearchResults( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE DisplayTopicFromId( 
            /* [in] */ BSTR bstrFile,
            /* [in] */ DWORD Id) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE DisplayTopicFromURL( 
            /* [in] */ BSTR pszURL) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE DisplayTopicFromURLEx( 
            /* [in] */ BSTR pszURL,
            /* [in] */ IVsHelpTopicShowEvents *pIVsHelpTopicShowEvents) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE DisplayTopicFromKeyword( 
            /* [in] */ BSTR pszKeyword) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE DisplayTopicFromF1Keyword( 
            /* [in] */ BSTR pszKeyword) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE DisplayTopicFrom_OLD_Help( 
            /* [in] */ BSTR bstrFile,
            /* [in] */ DWORD Id) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SyncContents( 
            /* [in] */ BSTR bstrURL) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE CanSyncContents( 
            /* [in] */ BSTR bstrURL) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetNextTopic( 
            /* [in] */ BSTR bstrURL,
            /* [retval][out] */ BSTR *pbstrNext) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetPrevTopic( 
            /* [in] */ BSTR bstrURL,
            /* [retval][out] */ BSTR *pbstrPrev) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE FilterUI( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE CanShowFilterUI( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE Close( void) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SyncIndex( 
            /* [in] */ BSTR bstrKeyword,
            /* [in] */ BOOL fShow) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE SetCollection( 
            /* [in] */ BSTR bstrCollection,
            /* [in] */ BSTR bstrFilter) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ BSTR *pbstrCollection) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Filter( 
            /* [retval][out] */ BSTR *pbstrFilter) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Filter( 
            /* [in] */ BSTR bstrFilter) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_FilterQuery( 
            /* [retval][out] */ BSTR *pbstrFilterQuery) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_HelpOwner( 
            /* [retval][out] */ IVsHelpOwner **ppObj) = 0;
        
        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_HelpOwner( 
            /* [in] */ IVsHelpOwner *pObj) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_HxSession( 
            /* [retval][out] */ IDispatch **ppObj) = 0;
        
        virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Help( 
            /* [retval][out] */ IDispatch **ppObj) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE GetObject( 
            /* [in] */ BSTR bstrMoniker,
            /* [in] */ BSTR bstrOptions,
            /* [retval][out] */ IDispatch **ppDisp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct HelpVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Help * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Help * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Help * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Help * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Help * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Help * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Help * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Contents )( 
            Help * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Index )( 
            Help * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Search )( 
            Help * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *IndexResults )( 
            Help * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SearchResults )( 
            Help * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *DisplayTopicFromId )( 
            Help * This,
            /* [in] */ BSTR bstrFile,
            /* [in] */ DWORD Id);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *DisplayTopicFromURL )( 
            Help * This,
            /* [in] */ BSTR pszURL);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *DisplayTopicFromURLEx )( 
            Help * This,
            /* [in] */ BSTR pszURL,
            /* [in] */ IVsHelpTopicShowEvents *pIVsHelpTopicShowEvents);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *DisplayTopicFromKeyword )( 
            Help * This,
            /* [in] */ BSTR pszKeyword);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *DisplayTopicFromF1Keyword )( 
            Help * This,
            /* [in] */ BSTR pszKeyword);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *DisplayTopicFrom_OLD_Help )( 
            Help * This,
            /* [in] */ BSTR bstrFile,
            /* [in] */ DWORD Id);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SyncContents )( 
            Help * This,
            /* [in] */ BSTR bstrURL);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *CanSyncContents )( 
            Help * This,
            /* [in] */ BSTR bstrURL);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetNextTopic )( 
            Help * This,
            /* [in] */ BSTR bstrURL,
            /* [retval][out] */ BSTR *pbstrNext);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetPrevTopic )( 
            Help * This,
            /* [in] */ BSTR bstrURL,
            /* [retval][out] */ BSTR *pbstrPrev);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *FilterUI )( 
            Help * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *CanShowFilterUI )( 
            Help * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *Close )( 
            Help * This);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SyncIndex )( 
            Help * This,
            /* [in] */ BSTR bstrKeyword,
            /* [in] */ BOOL fShow);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *SetCollection )( 
            Help * This,
            /* [in] */ BSTR bstrCollection,
            /* [in] */ BSTR bstrFilter);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            Help * This,
            /* [retval][out] */ BSTR *pbstrCollection);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Filter )( 
            Help * This,
            /* [retval][out] */ BSTR *pbstrFilter);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Filter )( 
            Help * This,
            /* [in] */ BSTR bstrFilter);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FilterQuery )( 
            Help * This,
            /* [retval][out] */ BSTR *pbstrFilterQuery);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HelpOwner )( 
            Help * This,
            /* [retval][out] */ IVsHelpOwner **ppObj);
        
        /* [id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_HelpOwner )( 
            Help * This,
            /* [in] */ IVsHelpOwner *pObj);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_HxSession )( 
            Help * This,
            /* [retval][out] */ IDispatch **ppObj);
        
        /* [id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Help )( 
            Help * This,
            /* [retval][out] */ IDispatch **ppObj);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *GetObject )( 
            Help * This,
            /* [in] */ BSTR bstrMoniker,
            /* [in] */ BSTR bstrOptions,
            /* [retval][out] */ IDispatch **ppDisp);
        
        END_INTERFACE
    } HelpVtbl;

    interface Help
    {
        CONST_VTBL struct HelpVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Help_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Help_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Help_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Help_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Help_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Help_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Help_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Help_Contents(This)	\
    (This)->lpVtbl -> Contents(This)

#define Help_Index(This)	\
    (This)->lpVtbl -> Index(This)

#define Help_Search(This)	\
    (This)->lpVtbl -> Search(This)

#define Help_IndexResults(This)	\
    (This)->lpVtbl -> IndexResults(This)

#define Help_SearchResults(This)	\
    (This)->lpVtbl -> SearchResults(This)

#define Help_DisplayTopicFromId(This,bstrFile,Id)	\
    (This)->lpVtbl -> DisplayTopicFromId(This,bstrFile,Id)

#define Help_DisplayTopicFromURL(This,pszURL)	\
    (This)->lpVtbl -> DisplayTopicFromURL(This,pszURL)

#define Help_DisplayTopicFromURLEx(This,pszURL,pIVsHelpTopicShowEvents)	\
    (This)->lpVtbl -> DisplayTopicFromURLEx(This,pszURL,pIVsHelpTopicShowEvents)

#define Help_DisplayTopicFromKeyword(This,pszKeyword)	\
    (This)->lpVtbl -> DisplayTopicFromKeyword(This,pszKeyword)

#define Help_DisplayTopicFromF1Keyword(This,pszKeyword)	\
    (This)->lpVtbl -> DisplayTopicFromF1Keyword(This,pszKeyword)

#define Help_DisplayTopicFrom_OLD_Help(This,bstrFile,Id)	\
    (This)->lpVtbl -> DisplayTopicFrom_OLD_Help(This,bstrFile,Id)

#define Help_SyncContents(This,bstrURL)	\
    (This)->lpVtbl -> SyncContents(This,bstrURL)

#define Help_CanSyncContents(This,bstrURL)	\
    (This)->lpVtbl -> CanSyncContents(This,bstrURL)

#define Help_GetNextTopic(This,bstrURL,pbstrNext)	\
    (This)->lpVtbl -> GetNextTopic(This,bstrURL,pbstrNext)

#define Help_GetPrevTopic(This,bstrURL,pbstrPrev)	\
    (This)->lpVtbl -> GetPrevTopic(This,bstrURL,pbstrPrev)

#define Help_FilterUI(This)	\
    (This)->lpVtbl -> FilterUI(This)

#define Help_CanShowFilterUI(This)	\
    (This)->lpVtbl -> CanShowFilterUI(This)

#define Help_Close(This)	\
    (This)->lpVtbl -> Close(This)

#define Help_SyncIndex(This,bstrKeyword,fShow)	\
    (This)->lpVtbl -> SyncIndex(This,bstrKeyword,fShow)

#define Help_SetCollection(This,bstrCollection,bstrFilter)	\
    (This)->lpVtbl -> SetCollection(This,bstrCollection,bstrFilter)

#define Help_get_Collection(This,pbstrCollection)	\
    (This)->lpVtbl -> get_Collection(This,pbstrCollection)

#define Help_get_Filter(This,pbstrFilter)	\
    (This)->lpVtbl -> get_Filter(This,pbstrFilter)

#define Help_put_Filter(This,bstrFilter)	\
    (This)->lpVtbl -> put_Filter(This,bstrFilter)

#define Help_get_FilterQuery(This,pbstrFilterQuery)	\
    (This)->lpVtbl -> get_FilterQuery(This,pbstrFilterQuery)

#define Help_get_HelpOwner(This,ppObj)	\
    (This)->lpVtbl -> get_HelpOwner(This,ppObj)

#define Help_put_HelpOwner(This,pObj)	\
    (This)->lpVtbl -> put_HelpOwner(This,pObj)

#define Help_get_HxSession(This,ppObj)	\
    (This)->lpVtbl -> get_HxSession(This,ppObj)

#define Help_get_Help(This,ppObj)	\
    (This)->lpVtbl -> get_Help(This,ppObj)

#define Help_GetObject(This,bstrMoniker,bstrOptions,ppDisp)	\
    (This)->lpVtbl -> GetObject(This,bstrMoniker,bstrOptions,ppDisp)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE Help_Contents_Proxy( 
    Help * This);


void __RPC_STUB Help_Contents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE Help_Index_Proxy( 
    Help * This);


void __RPC_STUB Help_Index_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE Help_Search_Proxy( 
    Help * This);


void __RPC_STUB Help_Search_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE Help_IndexResults_Proxy( 
    Help * This);


void __RPC_STUB Help_IndexResults_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE Help_SearchResults_Proxy( 
    Help * This);


void __RPC_STUB Help_SearchResults_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE Help_DisplayTopicFromId_Proxy( 
    Help * This,
    /* [in] */ BSTR bstrFile,
    /* [in] */ DWORD Id);


void __RPC_STUB Help_DisplayTopicFromId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE Help_DisplayTopicFromURL_Proxy( 
    Help * This,
    /* [in] */ BSTR pszURL);


void __RPC_STUB Help_DisplayTopicFromURL_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE Help_DisplayTopicFromURLEx_Proxy( 
    Help * This,
    /* [in] */ BSTR pszURL,
    /* [in] */ IVsHelpTopicShowEvents *pIVsHelpTopicShowEvents);


void __RPC_STUB Help_DisplayTopicFromURLEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE Help_DisplayTopicFromKeyword_Proxy( 
    Help * This,
    /* [in] */ BSTR pszKeyword);


void __RPC_STUB Help_DisplayTopicFromKeyword_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE Help_DisplayTopicFromF1Keyword_Proxy( 
    Help * This,
    /* [in] */ BSTR pszKeyword);


void __RPC_STUB Help_DisplayTopicFromF1Keyword_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE Help_DisplayTopicFrom_OLD_Help_Proxy( 
    Help * This,
    /* [in] */ BSTR bstrFile,
    /* [in] */ DWORD Id);


void __RPC_STUB Help_DisplayTopicFrom_OLD_Help_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE Help_SyncContents_Proxy( 
    Help * This,
    /* [in] */ BSTR bstrURL);


void __RPC_STUB Help_SyncContents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE Help_CanSyncContents_Proxy( 
    Help * This,
    /* [in] */ BSTR bstrURL);


void __RPC_STUB Help_CanSyncContents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE Help_GetNextTopic_Proxy( 
    Help * This,
    /* [in] */ BSTR bstrURL,
    /* [retval][out] */ BSTR *pbstrNext);


void __RPC_STUB Help_GetNextTopic_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE Help_GetPrevTopic_Proxy( 
    Help * This,
    /* [in] */ BSTR bstrURL,
    /* [retval][out] */ BSTR *pbstrPrev);


void __RPC_STUB Help_GetPrevTopic_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE Help_FilterUI_Proxy( 
    Help * This);


void __RPC_STUB Help_FilterUI_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE Help_CanShowFilterUI_Proxy( 
    Help * This);


void __RPC_STUB Help_CanShowFilterUI_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE Help_Close_Proxy( 
    Help * This);


void __RPC_STUB Help_Close_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE Help_SyncIndex_Proxy( 
    Help * This,
    /* [in] */ BSTR bstrKeyword,
    /* [in] */ BOOL fShow);


void __RPC_STUB Help_SyncIndex_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE Help_SetCollection_Proxy( 
    Help * This,
    /* [in] */ BSTR bstrCollection,
    /* [in] */ BSTR bstrFilter);


void __RPC_STUB Help_SetCollection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE Help_get_Collection_Proxy( 
    Help * This,
    /* [retval][out] */ BSTR *pbstrCollection);


void __RPC_STUB Help_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE Help_get_Filter_Proxy( 
    Help * This,
    /* [retval][out] */ BSTR *pbstrFilter);


void __RPC_STUB Help_get_Filter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE Help_put_Filter_Proxy( 
    Help * This,
    /* [in] */ BSTR bstrFilter);


void __RPC_STUB Help_put_Filter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE Help_get_FilterQuery_Proxy( 
    Help * This,
    /* [retval][out] */ BSTR *pbstrFilterQuery);


void __RPC_STUB Help_get_FilterQuery_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE Help_get_HelpOwner_Proxy( 
    Help * This,
    /* [retval][out] */ IVsHelpOwner **ppObj);


void __RPC_STUB Help_get_HelpOwner_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propput] */ HRESULT STDMETHODCALLTYPE Help_put_HelpOwner_Proxy( 
    Help * This,
    /* [in] */ IVsHelpOwner *pObj);


void __RPC_STUB Help_put_HelpOwner_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE Help_get_HxSession_Proxy( 
    Help * This,
    /* [retval][out] */ IDispatch **ppObj);


void __RPC_STUB Help_get_HxSession_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][propget] */ HRESULT STDMETHODCALLTYPE Help_get_Help_Proxy( 
    Help * This,
    /* [retval][out] */ IDispatch **ppObj);


void __RPC_STUB Help_get_Help_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE Help_GetObject_Proxy( 
    Help * This,
    /* [in] */ BSTR bstrMoniker,
    /* [in] */ BSTR bstrOptions,
    /* [retval][out] */ IDispatch **ppDisp);


void __RPC_STUB Help_GetObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Help_INTERFACE_DEFINED__ */


#ifndef __IVsHelpEvents_INTERFACE_DEFINED__
#define __IVsHelpEvents_INTERFACE_DEFINED__

/* interface IVsHelpEvents */
/* [object][helpstring][uuid] */ 


EXTERN_C const IID IID_IVsHelpEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("507E4490-5A8C-11d3-B897-00C04F79F802")
    IVsHelpEvents : public IDispatch
    {
    public:
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE OnFilterChanged( 
            /* [in] */ BSTR bstrNewFilter) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE OnCollectionChanged( 
            /* [in] */ BSTR bstrNewCollection,
            /* [in] */ BSTR bstrNewFilter) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IVsHelpEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IVsHelpEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IVsHelpEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IVsHelpEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IVsHelpEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IVsHelpEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IVsHelpEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IVsHelpEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *OnFilterChanged )( 
            IVsHelpEvents * This,
            /* [in] */ BSTR bstrNewFilter);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *OnCollectionChanged )( 
            IVsHelpEvents * This,
            /* [in] */ BSTR bstrNewCollection,
            /* [in] */ BSTR bstrNewFilter);
        
        END_INTERFACE
    } IVsHelpEventsVtbl;

    interface IVsHelpEvents
    {
        CONST_VTBL struct IVsHelpEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IVsHelpEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IVsHelpEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IVsHelpEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IVsHelpEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IVsHelpEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IVsHelpEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IVsHelpEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IVsHelpEvents_OnFilterChanged(This,bstrNewFilter)	\
    (This)->lpVtbl -> OnFilterChanged(This,bstrNewFilter)

#define IVsHelpEvents_OnCollectionChanged(This,bstrNewCollection,bstrNewFilter)	\
    (This)->lpVtbl -> OnCollectionChanged(This,bstrNewCollection,bstrNewFilter)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id] */ HRESULT STDMETHODCALLTYPE IVsHelpEvents_OnFilterChanged_Proxy( 
    IVsHelpEvents * This,
    /* [in] */ BSTR bstrNewFilter);


void __RPC_STUB IVsHelpEvents_OnFilterChanged_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE IVsHelpEvents_OnCollectionChanged_Proxy( 
    IVsHelpEvents * This,
    /* [in] */ BSTR bstrNewCollection,
    /* [in] */ BSTR bstrNewFilter);


void __RPC_STUB IVsHelpEvents_OnCollectionChanged_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IVsHelpEvents_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_DExploreAppObj;

#ifdef __cplusplus

class DECLSPEC_UUID("4A79114D-19E4-11d3-B86B-00C04F79F802")
DExploreAppObj;
#endif
#endif /* __VsHelp_LIBRARY_DEFINED__ */

/* interface __MIDL_itf_vshelp_0256 */
/* [local] */ 

#define SID_SVsHelp	IID_Help
#define IID_IVsHelp	IID_Help
#define IVsHelp	    Help
#define CLSID_MsdnAppObj	CLSID_DExploreAppObj
extern const __declspec(selectany) GUID SID_SVsIntegratedHelp = { 0xca8a686a, 0x882, 0x4e79, { 0xbc, 0xa3, 0xaf, 0x3f, 0x3a, 0xb3, 0xeb, 0x8a } };


extern RPC_IF_HANDLE __MIDL_itf_vshelp_0256_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_vshelp_0256_v0_0_s_ifspec;

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\vc7addon\vsbuilt\debug\inc\i386\vcbuild.h ===
#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 6.00.0347 */
/* at Thu Jan 10 16:28:31 2002
 */
/* Compiler settings for vcbuild.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext
    error checks: allocation ref bounds_check enum stub_data , no_format_optimization
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 440
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __vcbuild_h__
#define __vcbuild_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IVCBuildErrorContext_FWD_DEFINED__
#define __IVCBuildErrorContext_FWD_DEFINED__
typedef interface IVCBuildErrorContext IVCBuildErrorContext;
#endif 	/* __IVCBuildErrorContext_FWD_DEFINED__ */


#ifndef __IENCBuildSpawner_FWD_DEFINED__
#define __IENCBuildSpawner_FWD_DEFINED__
typedef interface IENCBuildSpawner IENCBuildSpawner;
#endif 	/* __IENCBuildSpawner_FWD_DEFINED__ */


#ifndef __IENCBuildSpawnerCallback_FWD_DEFINED__
#define __IENCBuildSpawnerCallback_FWD_DEFINED__
typedef interface IENCBuildSpawnerCallback IENCBuildSpawnerCallback;
#endif 	/* __IENCBuildSpawnerCallback_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "ocidl.h"

#ifdef __cplusplus
extern "C"{
#endif 

void * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void * ); 

#ifndef __IVCBuildErrorContext_INTERFACE_DEFINED__
#define __IVCBuildErrorContext_INTERFACE_DEFINED__

/* interface IVCBuildErrorContext */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IVCBuildErrorContext;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("A8F1429B-1E96-11D3-B96D-00C04F685D26")
    IVCBuildErrorContext : public IDispatch
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE AddError( 
            /* [in] */ BSTR bstrMessage,
            /* [in] */ BSTR bstrHelp,
            /* [in] */ BSTR bstrFile,
            /* [in] */ long nLine,
            /* [in] */ BSTR bstrFull) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddWarning( 
            /* [in] */ BSTR bstrMessage,
            /* [in] */ BSTR bstrHelp,
            /* [in] */ BSTR bstrFile,
            /* [in] */ long nLine,
            /* [in] */ BSTR bstrFull) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddInfo( 
            /* [in] */ BSTR bstrMessage) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddLine( 
            /* [in] */ BSTR bstrMessage) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE WriteLog( 
            /* [in] */ BSTR bstrMessage) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ActivateWindow( 
            /* [in] */ VARIANT_BOOL bForce) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ActivateTaskList( 
            /* [in] */ VARIANT_BOOL bForce) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ClearWindow( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Close( void) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Warnings( 
            /* [retval][out] */ long *pnErr) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Errors( 
            /* [retval][out] */ long *pnWrn) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BaseDirectory( 
            /* [retval][out] */ BSTR *pbstrBaseDir) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BaseDirectory( 
            /* [in] */ BSTR bstrBaseDir) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ProjectName( 
            /* [retval][out] */ BSTR *pbstrName) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ProjectName( 
            /* [in] */ BSTR bstrBaseName) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AssociatedBuildEngine( 
            /* [retval][out] */ IDispatch **ppBldEngine) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_AssociatedBuildEngine( 
            /* [in] */ IDispatch *pBldEngine) = 0;
        
        virtual /* [propget][hidden][nonbrowsable] */ HRESULT STDMETHODCALLTYPE get_ShowOutput( 
            /* [retval][out] */ VARIANT_BOOL *pbShow) = 0;
        
        virtual /* [propput][hidden][nonbrowsable] */ HRESULT STDMETHODCALLTYPE put_ShowOutput( 
            /* [in] */ VARIANT_BOOL bShow) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IVCBuildErrorContextVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IVCBuildErrorContext * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IVCBuildErrorContext * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IVCBuildErrorContext * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IVCBuildErrorContext * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IVCBuildErrorContext * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IVCBuildErrorContext * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IVCBuildErrorContext * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *AddError )( 
            IVCBuildErrorContext * This,
            /* [in] */ BSTR bstrMessage,
            /* [in] */ BSTR bstrHelp,
            /* [in] */ BSTR bstrFile,
            /* [in] */ long nLine,
            /* [in] */ BSTR bstrFull);
        
        HRESULT ( STDMETHODCALLTYPE *AddWarning )( 
            IVCBuildErrorContext * This,
            /* [in] */ BSTR bstrMessage,
            /* [in] */ BSTR bstrHelp,
            /* [in] */ BSTR bstrFile,
            /* [in] */ long nLine,
            /* [in] */ BSTR bstrFull);
        
        HRESULT ( STDMETHODCALLTYPE *AddInfo )( 
            IVCBuildErrorContext * This,
            /* [in] */ BSTR bstrMessage);
        
        HRESULT ( STDMETHODCALLTYPE *AddLine )( 
            IVCBuildErrorContext * This,
            /* [in] */ BSTR bstrMessage);
        
        HRESULT ( STDMETHODCALLTYPE *WriteLog )( 
            IVCBuildErrorContext * This,
            /* [in] */ BSTR bstrMessage);
        
        HRESULT ( STDMETHODCALLTYPE *ActivateWindow )( 
            IVCBuildErrorContext * This,
            /* [in] */ VARIANT_BOOL bForce);
        
        HRESULT ( STDMETHODCALLTYPE *ActivateTaskList )( 
            IVCBuildErrorContext * This,
            /* [in] */ VARIANT_BOOL bForce);
        
        HRESULT ( STDMETHODCALLTYPE *ClearWindow )( 
            IVCBuildErrorContext * This);
        
        HRESULT ( STDMETHODCALLTYPE *Close )( 
            IVCBuildErrorContext * This);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Warnings )( 
            IVCBuildErrorContext * This,
            /* [retval][out] */ long *pnErr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Errors )( 
            IVCBuildErrorContext * This,
            /* [retval][out] */ long *pnWrn);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BaseDirectory )( 
            IVCBuildErrorContext * This,
            /* [retval][out] */ BSTR *pbstrBaseDir);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BaseDirectory )( 
            IVCBuildErrorContext * This,
            /* [in] */ BSTR bstrBaseDir);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProjectName )( 
            IVCBuildErrorContext * This,
            /* [retval][out] */ BSTR *pbstrName);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ProjectName )( 
            IVCBuildErrorContext * This,
            /* [in] */ BSTR bstrBaseName);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AssociatedBuildEngine )( 
            IVCBuildErrorContext * This,
            /* [retval][out] */ IDispatch **ppBldEngine);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_AssociatedBuildEngine )( 
            IVCBuildErrorContext * This,
            /* [in] */ IDispatch *pBldEngine);
        
        /* [propget][hidden][nonbrowsable] */ HRESULT ( STDMETHODCALLTYPE *get_ShowOutput )( 
            IVCBuildErrorContext * This,
            /* [retval][out] */ VARIANT_BOOL *pbShow);
        
        /* [propput][hidden][nonbrowsable] */ HRESULT ( STDMETHODCALLTYPE *put_ShowOutput )( 
            IVCBuildErrorContext * This,
            /* [in] */ VARIANT_BOOL bShow);
        
        END_INTERFACE
    } IVCBuildErrorContextVtbl;

    interface IVCBuildErrorContext
    {
        CONST_VTBL struct IVCBuildErrorContextVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IVCBuildErrorContext_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IVCBuildErrorContext_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IVCBuildErrorContext_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IVCBuildErrorContext_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IVCBuildErrorContext_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IVCBuildErrorContext_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IVCBuildErrorContext_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IVCBuildErrorContext_AddError(This,bstrMessage,bstrHelp,bstrFile,nLine,bstrFull)	\
    (This)->lpVtbl -> AddError(This,bstrMessage,bstrHelp,bstrFile,nLine,bstrFull)

#define IVCBuildErrorContext_AddWarning(This,bstrMessage,bstrHelp,bstrFile,nLine,bstrFull)	\
    (This)->lpVtbl -> AddWarning(This,bstrMessage,bstrHelp,bstrFile,nLine,bstrFull)

#define IVCBuildErrorContext_AddInfo(This,bstrMessage)	\
    (This)->lpVtbl -> AddInfo(This,bstrMessage)

#define IVCBuildErrorContext_AddLine(This,bstrMessage)	\
    (This)->lpVtbl -> AddLine(This,bstrMessage)

#define IVCBuildErrorContext_WriteLog(This,bstrMessage)	\
    (This)->lpVtbl -> WriteLog(This,bstrMessage)

#define IVCBuildErrorContext_ActivateWindow(This,bForce)	\
    (This)->lpVtbl -> ActivateWindow(This,bForce)

#define IVCBuildErrorContext_ActivateTaskList(This,bForce)	\
    (This)->lpVtbl -> ActivateTaskList(This,bForce)

#define IVCBuildErrorContext_ClearWindow(This)	\
    (This)->lpVtbl -> ClearWindow(This)

#define IVCBuildErrorContext_Close(This)	\
    (This)->lpVtbl -> Close(This)

#define IVCBuildErrorContext_get_Warnings(This,pnErr)	\
    (This)->lpVtbl -> get_Warnings(This,pnErr)

#define IVCBuildErrorContext_get_Errors(This,pnWrn)	\
    (This)->lpVtbl -> get_Errors(This,pnWrn)

#define IVCBuildErrorContext_get_BaseDirectory(This,pbstrBaseDir)	\
    (This)->lpVtbl -> get_BaseDirectory(This,pbstrBaseDir)

#define IVCBuildErrorContext_put_BaseDirectory(This,bstrBaseDir)	\
    (This)->lpVtbl -> put_BaseDirectory(This,bstrBaseDir)

#define IVCBuildErrorContext_get_ProjectName(This,pbstrName)	\
    (This)->lpVtbl -> get_ProjectName(This,pbstrName)

#define IVCBuildErrorContext_put_ProjectName(This,bstrBaseName)	\
    (This)->lpVtbl -> put_ProjectName(This,bstrBaseName)

#define IVCBuildErrorContext_get_AssociatedBuildEngine(This,ppBldEngine)	\
    (This)->lpVtbl -> get_AssociatedBuildEngine(This,ppBldEngine)

#define IVCBuildErrorContext_put_AssociatedBuildEngine(This,pBldEngine)	\
    (This)->lpVtbl -> put_AssociatedBuildEngine(This,pBldEngine)

#define IVCBuildErrorContext_get_ShowOutput(This,pbShow)	\
    (This)->lpVtbl -> get_ShowOutput(This,pbShow)

#define IVCBuildErrorContext_put_ShowOutput(This,bShow)	\
    (This)->lpVtbl -> put_ShowOutput(This,bShow)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IVCBuildErrorContext_AddError_Proxy( 
    IVCBuildErrorContext * This,
    /* [in] */ BSTR bstrMessage,
    /* [in] */ BSTR bstrHelp,
    /* [in] */ BSTR bstrFile,
    /* [in] */ long nLine,
    /* [in] */ BSTR bstrFull);


void __RPC_STUB IVCBuildErrorContext_AddError_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVCBuildErrorContext_AddWarning_Proxy( 
    IVCBuildErrorContext * This,
    /* [in] */ BSTR bstrMessage,
    /* [in] */ BSTR bstrHelp,
    /* [in] */ BSTR bstrFile,
    /* [in] */ long nLine,
    /* [in] */ BSTR bstrFull);


void __RPC_STUB IVCBuildErrorContext_AddWarning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVCBuildErrorContext_AddInfo_Proxy( 
    IVCBuildErrorContext * This,
    /* [in] */ BSTR bstrMessage);


void __RPC_STUB IVCBuildErrorContext_AddInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVCBuildErrorContext_AddLine_Proxy( 
    IVCBuildErrorContext * This,
    /* [in] */ BSTR bstrMessage);


void __RPC_STUB IVCBuildErrorContext_AddLine_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVCBuildErrorContext_WriteLog_Proxy( 
    IVCBuildErrorContext * This,
    /* [in] */ BSTR bstrMessage);


void __RPC_STUB IVCBuildErrorContext_WriteLog_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVCBuildErrorContext_ActivateWindow_Proxy( 
    IVCBuildErrorContext * This,
    /* [in] */ VARIANT_BOOL bForce);


void __RPC_STUB IVCBuildErrorContext_ActivateWindow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVCBuildErrorContext_ActivateTaskList_Proxy( 
    IVCBuildErrorContext * This,
    /* [in] */ VARIANT_BOOL bForce);


void __RPC_STUB IVCBuildErrorContext_ActivateTaskList_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVCBuildErrorContext_ClearWindow_Proxy( 
    IVCBuildErrorContext * This);


void __RPC_STUB IVCBuildErrorContext_ClearWindow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVCBuildErrorContext_Close_Proxy( 
    IVCBuildErrorContext * This);


void __RPC_STUB IVCBuildErrorContext_Close_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IVCBuildErrorContext_get_Warnings_Proxy( 
    IVCBuildErrorContext * This,
    /* [retval][out] */ long *pnErr);


void __RPC_STUB IVCBuildErrorContext_get_Warnings_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IVCBuildErrorContext_get_Errors_Proxy( 
    IVCBuildErrorContext * This,
    /* [retval][out] */ long *pnWrn);


void __RPC_STUB IVCBuildErrorContext_get_Errors_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IVCBuildErrorContext_get_BaseDirectory_Proxy( 
    IVCBuildErrorContext * This,
    /* [retval][out] */ BSTR *pbstrBaseDir);


void __RPC_STUB IVCBuildErrorContext_get_BaseDirectory_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput] */ HRESULT STDMETHODCALLTYPE IVCBuildErrorContext_put_BaseDirectory_Proxy( 
    IVCBuildErrorContext * This,
    /* [in] */ BSTR bstrBaseDir);


void __RPC_STUB IVCBuildErrorContext_put_BaseDirectory_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IVCBuildErrorContext_get_ProjectName_Proxy( 
    IVCBuildErrorContext * This,
    /* [retval][out] */ BSTR *pbstrName);


void __RPC_STUB IVCBuildErrorContext_get_ProjectName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput] */ HRESULT STDMETHODCALLTYPE IVCBuildErrorContext_put_ProjectName_Proxy( 
    IVCBuildErrorContext * This,
    /* [in] */ BSTR bstrBaseName);


void __RPC_STUB IVCBuildErrorContext_put_ProjectName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IVCBuildErrorContext_get_AssociatedBuildEngine_Proxy( 
    IVCBuildErrorContext * This,
    /* [retval][out] */ IDispatch **ppBldEngine);


void __RPC_STUB IVCBuildErrorContext_get_AssociatedBuildEngine_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput] */ HRESULT STDMETHODCALLTYPE IVCBuildErrorContext_put_AssociatedBuildEngine_Proxy( 
    IVCBuildErrorContext * This,
    /* [in] */ IDispatch *pBldEngine);


void __RPC_STUB IVCBuildErrorContext_put_AssociatedBuildEngine_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][hidden][nonbrowsable] */ HRESULT STDMETHODCALLTYPE IVCBuildErrorContext_get_ShowOutput_Proxy( 
    IVCBuildErrorContext * This,
    /* [retval][out] */ VARIANT_BOOL *pbShow);


void __RPC_STUB IVCBuildErrorContext_get_ShowOutput_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput][hidden][nonbrowsable] */ HRESULT STDMETHODCALLTYPE IVCBuildErrorContext_put_ShowOutput_Proxy( 
    IVCBuildErrorContext * This,
    /* [in] */ VARIANT_BOOL bShow);


void __RPC_STUB IVCBuildErrorContext_put_ShowOutput_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IVCBuildErrorContext_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_vcbuild_0255 */
/* [local] */ 





extern RPC_IF_HANDLE __MIDL_itf_vcbuild_0255_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_vcbuild_0255_v0_0_s_ifspec;

#ifndef __IENCBuildSpawner_INTERFACE_DEFINED__
#define __IENCBuildSpawner_INTERFACE_DEFINED__

/* interface IENCBuildSpawner */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IENCBuildSpawner;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("66e3a41c-fdb9-11d2-b144-00c04f72dc32")
    IENCBuildSpawner : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE StartSpawn( 
            /* [in] */ LPCOLESTR szCurrentDir,
            /* [in] */ LPCOLESTR szCmdLine,
            /* [in] */ IVCBuildErrorContext *pIVCBuildErrorContext,
            /* [in] */ IENCBuildSpawnerCallback *pCallback,
            /* [in] */ BOOL fUseConsoleCP) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE StopSpawn( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsSysHeader( 
            /* [in] */ LPCOLESTR szIncFileName) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IENCBuildSpawnerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IENCBuildSpawner * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IENCBuildSpawner * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IENCBuildSpawner * This);
        
        HRESULT ( STDMETHODCALLTYPE *StartSpawn )( 
            IENCBuildSpawner * This,
            /* [in] */ LPCOLESTR szCurrentDir,
            /* [in] */ LPCOLESTR szCmdLine,
            /* [in] */ IVCBuildErrorContext *pIVCBuildErrorContext,
            /* [in] */ IENCBuildSpawnerCallback *pCallback,
            /* [in] */ BOOL fUseConsoleCP);
        
        HRESULT ( STDMETHODCALLTYPE *StopSpawn )( 
            IENCBuildSpawner * This);
        
        HRESULT ( STDMETHODCALLTYPE *IsSysHeader )( 
            IENCBuildSpawner * This,
            /* [in] */ LPCOLESTR szIncFileName);
        
        END_INTERFACE
    } IENCBuildSpawnerVtbl;

    interface IENCBuildSpawner
    {
        CONST_VTBL struct IENCBuildSpawnerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IENCBuildSpawner_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IENCBuildSpawner_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IENCBuildSpawner_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IENCBuildSpawner_StartSpawn(This,szCurrentDir,szCmdLine,pIVCBuildErrorContext,pCallback,fUseConsoleCP)	\
    (This)->lpVtbl -> StartSpawn(This,szCurrentDir,szCmdLine,pIVCBuildErrorContext,pCallback,fUseConsoleCP)

#define IENCBuildSpawner_StopSpawn(This)	\
    (This)->lpVtbl -> StopSpawn(This)

#define IENCBuildSpawner_IsSysHeader(This,szIncFileName)	\
    (This)->lpVtbl -> IsSysHeader(This,szIncFileName)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IENCBuildSpawner_StartSpawn_Proxy( 
    IENCBuildSpawner * This,
    /* [in] */ LPCOLESTR szCurrentDir,
    /* [in] */ LPCOLESTR szCmdLine,
    /* [in] */ IVCBuildErrorContext *pIVCBuildErrorContext,
    /* [in] */ IENCBuildSpawnerCallback *pCallback,
    /* [in] */ BOOL fUseConsoleCP);


void __RPC_STUB IENCBuildSpawner_StartSpawn_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IENCBuildSpawner_StopSpawn_Proxy( 
    IENCBuildSpawner * This);


void __RPC_STUB IENCBuildSpawner_StopSpawn_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IENCBuildSpawner_IsSysHeader_Proxy( 
    IENCBuildSpawner * This,
    /* [in] */ LPCOLESTR szIncFileName);


void __RPC_STUB IENCBuildSpawner_IsSysHeader_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IENCBuildSpawner_INTERFACE_DEFINED__ */


#ifndef __IENCBuildSpawnerCallback_INTERFACE_DEFINED__
#define __IENCBuildSpawnerCallback_INTERFACE_DEFINED__

/* interface IENCBuildSpawnerCallback */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IENCBuildSpawnerCallback;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4ce8c2c0-fdbb-11d2-b144-00c04f72dc32")
    IENCBuildSpawnerCallback : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Done( 
            /* [in] */ HRESULT hrFromBuild,
            /* [in] */ DWORD dwReportedErrors,
            /* [in] */ DWORD dwReportedWarnings) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IENCBuildSpawnerCallbackVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IENCBuildSpawnerCallback * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IENCBuildSpawnerCallback * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IENCBuildSpawnerCallback * This);
        
        HRESULT ( STDMETHODCALLTYPE *Done )( 
            IENCBuildSpawnerCallback * This,
            /* [in] */ HRESULT hrFromBuild,
            /* [in] */ DWORD dwReportedErrors,
            /* [in] */ DWORD dwReportedWarnings);
        
        END_INTERFACE
    } IENCBuildSpawnerCallbackVtbl;

    interface IENCBuildSpawnerCallback
    {
        CONST_VTBL struct IENCBuildSpawnerCallbackVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IENCBuildSpawnerCallback_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IENCBuildSpawnerCallback_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IENCBuildSpawnerCallback_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IENCBuildSpawnerCallback_Done(This,hrFromBuild,dwReportedErrors,dwReportedWarnings)	\
    (This)->lpVtbl -> Done(This,hrFromBuild,dwReportedErrors,dwReportedWarnings)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IENCBuildSpawnerCallback_Done_Proxy( 
    IENCBuildSpawnerCallback * This,
    /* [in] */ HRESULT hrFromBuild,
    /* [in] */ DWORD dwReportedErrors,
    /* [in] */ DWORD dwReportedWarnings);


void __RPC_STUB IENCBuildSpawnerCallback_Done_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IENCBuildSpawnerCallback_INTERFACE_DEFINED__ */


/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR * ); 
void                      __RPC_USER  BSTR_UserFree(     unsigned long *, BSTR * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\vc7addon\vsbuilt\debug\inc\i386\webref.h ===
#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 6.00.0347 */
/* at Tue Jan 08 04:20:15 2002
 */
/* Compiler settings for webref.idl:
    Oicf, W0, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext
    error checks: allocation ref bounds_check enum stub_data , no_format_optimization
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 440
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __webref_h__
#define __webref_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IVsAddWebReference_FWD_DEFINED__
#define __IVsAddWebReference_FWD_DEFINED__
typedef interface IVsAddWebReference IVsAddWebReference;
#endif 	/* __IVsAddWebReference_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "ocidl.h"

#ifdef __cplusplus
extern "C"{
#endif 

void * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void * ); 

#ifndef __IVsAddWebReference_INTERFACE_DEFINED__
#define __IVsAddWebReference_INTERFACE_DEFINED__

/* interface IVsAddWebReference */
/* [object][unique][uuid] */ 


EXTERN_C const IID IID_IVsAddWebReference;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D85F3427-8160-4d1f-8A2B-A8A1E3011C2D")
    IVsAddWebReference : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE AddWebReferenceEx( 
            /* [in] */ LPCOLESTR pszUrl) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IVsAddWebReferenceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IVsAddWebReference * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IVsAddWebReference * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IVsAddWebReference * This);
        
        HRESULT ( STDMETHODCALLTYPE *AddWebReferenceEx )( 
            IVsAddWebReference * This,
            /* [in] */ LPCOLESTR pszUrl);
        
        END_INTERFACE
    } IVsAddWebReferenceVtbl;

    interface IVsAddWebReference
    {
        CONST_VTBL struct IVsAddWebReferenceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IVsAddWebReference_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IVsAddWebReference_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IVsAddWebReference_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IVsAddWebReference_AddWebReferenceEx(This,pszUrl)	\
    (This)->lpVtbl -> AddWebReferenceEx(This,pszUrl)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IVsAddWebReference_AddWebReferenceEx_Proxy( 
    IVsAddWebReference * This,
    /* [in] */ LPCOLESTR pszUrl);


void __RPC_STUB IVsAddWebReference_AddWebReferenceEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IVsAddWebReference_INTERFACE_DEFINED__ */


/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\vc7addon\vsbuilt\retail\inc\i386\dteinternal.h ===
#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 6.00.0347 */
/* at Sat Jan 05 01:42:33 2002
 */
/* Compiler settings for dte.idl:
    Oicf, W0, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext
    error checks: allocation ref bounds_check enum stub_data , no_format_optimization
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 440
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __dteinternal_h__
#define __dteinternal_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef ___DTE_FWD_DEFINED__
#define ___DTE_FWD_DEFINED__
typedef interface _DTE _DTE;
#endif 	/* ___DTE_FWD_DEFINED__ */


#ifndef ___Solution_FWD_DEFINED__
#define ___Solution_FWD_DEFINED__
typedef interface _Solution _Solution;
#endif 	/* ___Solution_FWD_DEFINED__ */


#ifndef __Projects_FWD_DEFINED__
#define __Projects_FWD_DEFINED__
typedef interface Projects Projects;
#endif 	/* __Projects_FWD_DEFINED__ */


#ifndef __Project_FWD_DEFINED__
#define __Project_FWD_DEFINED__
typedef interface Project Project;
#endif 	/* __Project_FWD_DEFINED__ */


#ifndef __ProjectItems_FWD_DEFINED__
#define __ProjectItems_FWD_DEFINED__
typedef interface ProjectItems ProjectItems;
#endif 	/* __ProjectItems_FWD_DEFINED__ */


#ifndef __ProjectItem_FWD_DEFINED__
#define __ProjectItem_FWD_DEFINED__
typedef interface ProjectItem ProjectItem;
#endif 	/* __ProjectItem_FWD_DEFINED__ */


#ifndef __Commands_FWD_DEFINED__
#define __Commands_FWD_DEFINED__
typedef interface Commands Commands;
#endif 	/* __Commands_FWD_DEFINED__ */


#ifndef __TextBuffer_FWD_DEFINED__
#define __TextBuffer_FWD_DEFINED__
typedef interface TextBuffer TextBuffer;
#endif 	/* __TextBuffer_FWD_DEFINED__ */


#ifndef __AddIns_FWD_DEFINED__
#define __AddIns_FWD_DEFINED__
typedef interface AddIns AddIns;
#endif 	/* __AddIns_FWD_DEFINED__ */


#ifndef __AddIn_FWD_DEFINED__
#define __AddIn_FWD_DEFINED__
typedef interface AddIn AddIn;
#endif 	/* __AddIn_FWD_DEFINED__ */


#ifndef __Properties_FWD_DEFINED__
#define __Properties_FWD_DEFINED__
typedef interface Properties Properties;
#endif 	/* __Properties_FWD_DEFINED__ */


#ifndef __Property_FWD_DEFINED__
#define __Property_FWD_DEFINED__
typedef interface Property Property;
#endif 	/* __Property_FWD_DEFINED__ */


#ifndef __ISupportVSProperties_FWD_DEFINED__
#define __ISupportVSProperties_FWD_DEFINED__
typedef interface ISupportVSProperties ISupportVSProperties;
#endif 	/* __ISupportVSProperties_FWD_DEFINED__ */


#ifndef __SelectedItems_FWD_DEFINED__
#define __SelectedItems_FWD_DEFINED__
typedef interface SelectedItems SelectedItems;
#endif 	/* __SelectedItems_FWD_DEFINED__ */


#ifndef __SelectedItem_FWD_DEFINED__
#define __SelectedItem_FWD_DEFINED__
typedef interface SelectedItem SelectedItem;
#endif 	/* __SelectedItem_FWD_DEFINED__ */


#ifndef __SelectionContainer_FWD_DEFINED__
#define __SelectionContainer_FWD_DEFINED__
typedef interface SelectionContainer SelectionContainer;
#endif 	/* __SelectionContainer_FWD_DEFINED__ */


#ifndef __Windows_FWD_DEFINED__
#define __Windows_FWD_DEFINED__
typedef interface Windows Windows;
#endif 	/* __Windows_FWD_DEFINED__ */


#ifndef __Window_FWD_DEFINED__
#define __Window_FWD_DEFINED__
typedef interface Window Window;
#endif 	/* __Window_FWD_DEFINED__ */


#ifndef __LinkedWindows_FWD_DEFINED__
#define __LinkedWindows_FWD_DEFINED__
typedef interface LinkedWindows LinkedWindows;
#endif 	/* __LinkedWindows_FWD_DEFINED__ */


#ifndef __Events_FWD_DEFINED__
#define __Events_FWD_DEFINED__
typedef interface Events Events;
#endif 	/* __Events_FWD_DEFINED__ */


#ifndef __TaskList_FWD_DEFINED__
#define __TaskList_FWD_DEFINED__
typedef interface TaskList TaskList;
#endif 	/* __TaskList_FWD_DEFINED__ */


#ifndef __TaskItems_FWD_DEFINED__
#define __TaskItems_FWD_DEFINED__
typedef interface TaskItems TaskItems;
#endif 	/* __TaskItems_FWD_DEFINED__ */


#ifndef __TaskItem_FWD_DEFINED__
#define __TaskItem_FWD_DEFINED__
typedef interface TaskItem TaskItem;
#endif 	/* __TaskItem_FWD_DEFINED__ */


#ifndef __ToolBox_FWD_DEFINED__
#define __ToolBox_FWD_DEFINED__
typedef interface ToolBox ToolBox;
#endif 	/* __ToolBox_FWD_DEFINED__ */


#ifndef __ToolBoxTabs_FWD_DEFINED__
#define __ToolBoxTabs_FWD_DEFINED__
typedef interface ToolBoxTabs ToolBoxTabs;
#endif 	/* __ToolBoxTabs_FWD_DEFINED__ */


#ifndef __ToolBoxTab_FWD_DEFINED__
#define __ToolBoxTab_FWD_DEFINED__
typedef interface ToolBoxTab ToolBoxTab;
#endif 	/* __ToolBoxTab_FWD_DEFINED__ */


#ifndef __ToolBoxItem_FWD_DEFINED__
#define __ToolBoxItem_FWD_DEFINED__
typedef interface ToolBoxItem ToolBoxItem;
#endif 	/* __ToolBoxItem_FWD_DEFINED__ */


#ifndef __ToolBoxItems_FWD_DEFINED__
#define __ToolBoxItems_FWD_DEFINED__
typedef interface ToolBoxItems ToolBoxItems;
#endif 	/* __ToolBoxItems_FWD_DEFINED__ */


#ifndef __OutputWindow_FWD_DEFINED__
#define __OutputWindow_FWD_DEFINED__
typedef interface OutputWindow OutputWindow;
#endif 	/* __OutputWindow_FWD_DEFINED__ */


#ifndef __OutputWindowPanes_FWD_DEFINED__
#define __OutputWindowPanes_FWD_DEFINED__
typedef interface OutputWindowPanes OutputWindowPanes;
#endif 	/* __OutputWindowPanes_FWD_DEFINED__ */


#ifndef __OutputWindowPane_FWD_DEFINED__
#define __OutputWindowPane_FWD_DEFINED__
typedef interface OutputWindowPane OutputWindowPane;
#endif 	/* __OutputWindowPane_FWD_DEFINED__ */


#ifndef __IExtensibleObjectSite_FWD_DEFINED__
#define __IExtensibleObjectSite_FWD_DEFINED__
typedef interface IExtensibleObjectSite IExtensibleObjectSite;
#endif 	/* __IExtensibleObjectSite_FWD_DEFINED__ */


#ifndef __Document_FWD_DEFINED__
#define __Document_FWD_DEFINED__
typedef interface Document Document;
#endif 	/* __Document_FWD_DEFINED__ */


#ifndef __Documents_FWD_DEFINED__
#define __Documents_FWD_DEFINED__
typedef interface Documents Documents;
#endif 	/* __Documents_FWD_DEFINED__ */


#ifndef __WindowConfigurations_FWD_DEFINED__
#define __WindowConfigurations_FWD_DEFINED__
typedef interface WindowConfigurations WindowConfigurations;
#endif 	/* __WindowConfigurations_FWD_DEFINED__ */


#ifndef __WindowConfiguration_FWD_DEFINED__
#define __WindowConfiguration_FWD_DEFINED__
typedef interface WindowConfiguration WindowConfiguration;
#endif 	/* __WindowConfiguration_FWD_DEFINED__ */


#ifndef __Command_FWD_DEFINED__
#define __Command_FWD_DEFINED__
typedef interface Command Command;
#endif 	/* __Command_FWD_DEFINED__ */


#ifndef __Globals_FWD_DEFINED__
#define __Globals_FWD_DEFINED__
typedef interface Globals Globals;
#endif 	/* __Globals_FWD_DEFINED__ */


#ifndef __StatusBar_FWD_DEFINED__
#define __StatusBar_FWD_DEFINED__
typedef interface StatusBar StatusBar;
#endif 	/* __StatusBar_FWD_DEFINED__ */


#ifndef __Find_FWD_DEFINED__
#define __Find_FWD_DEFINED__
typedef interface Find Find;
#endif 	/* __Find_FWD_DEFINED__ */


#ifndef __ItemOperations_FWD_DEFINED__
#define __ItemOperations_FWD_DEFINED__
typedef interface ItemOperations ItemOperations;
#endif 	/* __ItemOperations_FWD_DEFINED__ */


#ifndef __IVsProfferCommands_FWD_DEFINED__
#define __IVsProfferCommands_FWD_DEFINED__
typedef interface IVsProfferCommands IVsProfferCommands;
#endif 	/* __IVsProfferCommands_FWD_DEFINED__ */


#ifndef __ObjectExtenders_FWD_DEFINED__
#define __ObjectExtenders_FWD_DEFINED__
typedef interface ObjectExtenders ObjectExtenders;
#endif 	/* __ObjectExtenders_FWD_DEFINED__ */


#ifndef __IExtenderSite_FWD_DEFINED__
#define __IExtenderSite_FWD_DEFINED__
typedef interface IExtenderSite IExtenderSite;
#endif 	/* __IExtenderSite_FWD_DEFINED__ */


#ifndef __IExtenderProvider_FWD_DEFINED__
#define __IExtenderProvider_FWD_DEFINED__
typedef interface IExtenderProvider IExtenderProvider;
#endif 	/* __IExtenderProvider_FWD_DEFINED__ */


#ifndef __IExtenderProviderUnk_FWD_DEFINED__
#define __IExtenderProviderUnk_FWD_DEFINED__
typedef interface IExtenderProviderUnk IExtenderProviderUnk;
#endif 	/* __IExtenderProviderUnk_FWD_DEFINED__ */


#ifndef __IFilterProperties_FWD_DEFINED__
#define __IFilterProperties_FWD_DEFINED__
typedef interface IFilterProperties IFilterProperties;
#endif 	/* __IFilterProperties_FWD_DEFINED__ */


#ifndef ___dispDTEEvents_FWD_DEFINED__
#define ___dispDTEEvents_FWD_DEFINED__
typedef interface _dispDTEEvents _dispDTEEvents;
#endif 	/* ___dispDTEEvents_FWD_DEFINED__ */


#ifndef __BuildDependencies_FWD_DEFINED__
#define __BuildDependencies_FWD_DEFINED__
typedef interface BuildDependencies BuildDependencies;
#endif 	/* __BuildDependencies_FWD_DEFINED__ */


#ifndef __BuildDependency_FWD_DEFINED__
#define __BuildDependency_FWD_DEFINED__
typedef interface BuildDependency BuildDependency;
#endif 	/* __BuildDependency_FWD_DEFINED__ */


#ifndef __SolutionConfigurations_FWD_DEFINED__
#define __SolutionConfigurations_FWD_DEFINED__
typedef interface SolutionConfigurations SolutionConfigurations;
#endif 	/* __SolutionConfigurations_FWD_DEFINED__ */


#ifndef __SolutionConfiguration_FWD_DEFINED__
#define __SolutionConfiguration_FWD_DEFINED__
typedef interface SolutionConfiguration SolutionConfiguration;
#endif 	/* __SolutionConfiguration_FWD_DEFINED__ */


#ifndef __SolutionContext_FWD_DEFINED__
#define __SolutionContext_FWD_DEFINED__
typedef interface SolutionContext SolutionContext;
#endif 	/* __SolutionContext_FWD_DEFINED__ */


#ifndef __SolutionBuild_FWD_DEFINED__
#define __SolutionBuild_FWD_DEFINED__
typedef interface SolutionBuild SolutionBuild;
#endif 	/* __SolutionBuild_FWD_DEFINED__ */


#ifndef __UIHierarchyItem_FWD_DEFINED__
#define __UIHierarchyItem_FWD_DEFINED__
typedef interface UIHierarchyItem UIHierarchyItem;
#endif 	/* __UIHierarchyItem_FWD_DEFINED__ */


#ifndef __UIHierarchyItems_FWD_DEFINED__
#define __UIHierarchyItems_FWD_DEFINED__
typedef interface UIHierarchyItems UIHierarchyItems;
#endif 	/* __UIHierarchyItems_FWD_DEFINED__ */


#ifndef __UIHierarchy_FWD_DEFINED__
#define __UIHierarchy_FWD_DEFINED__
typedef interface UIHierarchy UIHierarchy;
#endif 	/* __UIHierarchy_FWD_DEFINED__ */


#ifndef __UndoContext_FWD_DEFINED__
#define __UndoContext_FWD_DEFINED__
typedef interface UndoContext UndoContext;
#endif 	/* __UndoContext_FWD_DEFINED__ */


#ifndef __Configuration_FWD_DEFINED__
#define __Configuration_FWD_DEFINED__
typedef interface Configuration Configuration;
#endif 	/* __Configuration_FWD_DEFINED__ */


#ifndef __SolutionContexts_FWD_DEFINED__
#define __SolutionContexts_FWD_DEFINED__
typedef interface SolutionContexts SolutionContexts;
#endif 	/* __SolutionContexts_FWD_DEFINED__ */


#ifndef __Configurations_FWD_DEFINED__
#define __Configurations_FWD_DEFINED__
typedef interface Configurations Configurations;
#endif 	/* __Configurations_FWD_DEFINED__ */


#ifndef __ConfigurationManager_FWD_DEFINED__
#define __ConfigurationManager_FWD_DEFINED__
typedef interface ConfigurationManager ConfigurationManager;
#endif 	/* __ConfigurationManager_FWD_DEFINED__ */


#ifndef __Macros_FWD_DEFINED__
#define __Macros_FWD_DEFINED__
typedef interface Macros Macros;
#endif 	/* __Macros_FWD_DEFINED__ */


#ifndef __OutputGroups_FWD_DEFINED__
#define __OutputGroups_FWD_DEFINED__
typedef interface OutputGroups OutputGroups;
#endif 	/* __OutputGroups_FWD_DEFINED__ */


#ifndef __OutputGroup_FWD_DEFINED__
#define __OutputGroup_FWD_DEFINED__
typedef interface OutputGroup OutputGroup;
#endif 	/* __OutputGroup_FWD_DEFINED__ */


#ifndef __ContextAttributes_FWD_DEFINED__
#define __ContextAttributes_FWD_DEFINED__
typedef interface ContextAttributes ContextAttributes;
#endif 	/* __ContextAttributes_FWD_DEFINED__ */


#ifndef __SourceControl_FWD_DEFINED__
#define __SourceControl_FWD_DEFINED__
typedef interface SourceControl SourceControl;
#endif 	/* __SourceControl_FWD_DEFINED__ */


#ifndef __TextPoint_FWD_DEFINED__
#define __TextPoint_FWD_DEFINED__
typedef interface TextPoint TextPoint;
#endif 	/* __TextPoint_FWD_DEFINED__ */


#ifndef __EditPoint_FWD_DEFINED__
#define __EditPoint_FWD_DEFINED__
typedef interface EditPoint EditPoint;
#endif 	/* __EditPoint_FWD_DEFINED__ */


#ifndef __TextSelection_FWD_DEFINED__
#define __TextSelection_FWD_DEFINED__
typedef interface TextSelection TextSelection;
#endif 	/* __TextSelection_FWD_DEFINED__ */


#ifndef __TextRanges_FWD_DEFINED__
#define __TextRanges_FWD_DEFINED__
typedef interface TextRanges TextRanges;
#endif 	/* __TextRanges_FWD_DEFINED__ */


#ifndef __TextRange_FWD_DEFINED__
#define __TextRange_FWD_DEFINED__
typedef interface TextRange TextRange;
#endif 	/* __TextRange_FWD_DEFINED__ */


#ifndef __TextDocument_FWD_DEFINED__
#define __TextDocument_FWD_DEFINED__
typedef interface TextDocument TextDocument;
#endif 	/* __TextDocument_FWD_DEFINED__ */


#ifndef __VirtualPoint_FWD_DEFINED__
#define __VirtualPoint_FWD_DEFINED__
typedef interface VirtualPoint VirtualPoint;
#endif 	/* __VirtualPoint_FWD_DEFINED__ */


#ifndef __TextPane_FWD_DEFINED__
#define __TextPane_FWD_DEFINED__
typedef interface TextPane TextPane;
#endif 	/* __TextPane_FWD_DEFINED__ */


#ifndef __TextWindow_FWD_DEFINED__
#define __TextWindow_FWD_DEFINED__
typedef interface TextWindow TextWindow;
#endif 	/* __TextWindow_FWD_DEFINED__ */


#ifndef __TextPanes_FWD_DEFINED__
#define __TextPanes_FWD_DEFINED__
typedef interface TextPanes TextPanes;
#endif 	/* __TextPanes_FWD_DEFINED__ */


#ifndef __TextEditor_FWD_DEFINED__
#define __TextEditor_FWD_DEFINED__
typedef interface TextEditor TextEditor;
#endif 	/* __TextEditor_FWD_DEFINED__ */


#ifndef __CodeModel_FWD_DEFINED__
#define __CodeModel_FWD_DEFINED__
typedef interface CodeModel CodeModel;
#endif 	/* __CodeModel_FWD_DEFINED__ */


#ifndef __CodeElements_FWD_DEFINED__
#define __CodeElements_FWD_DEFINED__
typedef interface CodeElements CodeElements;
#endif 	/* __CodeElements_FWD_DEFINED__ */


#ifndef __CodeElement_FWD_DEFINED__
#define __CodeElement_FWD_DEFINED__
typedef interface CodeElement CodeElement;
#endif 	/* __CodeElement_FWD_DEFINED__ */


#ifndef __CodeType_FWD_DEFINED__
#define __CodeType_FWD_DEFINED__
typedef interface CodeType CodeType;
#endif 	/* __CodeType_FWD_DEFINED__ */


#ifndef __CodeNamespace_FWD_DEFINED__
#define __CodeNamespace_FWD_DEFINED__
typedef interface CodeNamespace CodeNamespace;
#endif 	/* __CodeNamespace_FWD_DEFINED__ */


#ifndef __CodeFunction_FWD_DEFINED__
#define __CodeFunction_FWD_DEFINED__
typedef interface CodeFunction CodeFunction;
#endif 	/* __CodeFunction_FWD_DEFINED__ */


#ifndef __CodeVariable_FWD_DEFINED__
#define __CodeVariable_FWD_DEFINED__
typedef interface CodeVariable CodeVariable;
#endif 	/* __CodeVariable_FWD_DEFINED__ */


#ifndef __CodeProperty_FWD_DEFINED__
#define __CodeProperty_FWD_DEFINED__
typedef interface CodeProperty CodeProperty;
#endif 	/* __CodeProperty_FWD_DEFINED__ */


#ifndef __CodeParameter_FWD_DEFINED__
#define __CodeParameter_FWD_DEFINED__
typedef interface CodeParameter CodeParameter;
#endif 	/* __CodeParameter_FWD_DEFINED__ */


#ifndef __CodeAttribute_FWD_DEFINED__
#define __CodeAttribute_FWD_DEFINED__
typedef interface CodeAttribute CodeAttribute;
#endif 	/* __CodeAttribute_FWD_DEFINED__ */


#ifndef __CodeInterface_FWD_DEFINED__
#define __CodeInterface_FWD_DEFINED__
typedef interface CodeInterface CodeInterface;
#endif 	/* __CodeInterface_FWD_DEFINED__ */


#ifndef __CodeStruct_FWD_DEFINED__
#define __CodeStruct_FWD_DEFINED__
typedef interface CodeStruct CodeStruct;
#endif 	/* __CodeStruct_FWD_DEFINED__ */


#ifndef __CodeEnum_FWD_DEFINED__
#define __CodeEnum_FWD_DEFINED__
typedef interface CodeEnum CodeEnum;
#endif 	/* __CodeEnum_FWD_DEFINED__ */


#ifndef __CodeDelegate_FWD_DEFINED__
#define __CodeDelegate_FWD_DEFINED__
typedef interface CodeDelegate CodeDelegate;
#endif 	/* __CodeDelegate_FWD_DEFINED__ */


#ifndef __CodeTypeRef_FWD_DEFINED__
#define __CodeTypeRef_FWD_DEFINED__
typedef interface CodeTypeRef CodeTypeRef;
#endif 	/* __CodeTypeRef_FWD_DEFINED__ */


#ifndef __CodeClass_FWD_DEFINED__
#define __CodeClass_FWD_DEFINED__
typedef interface CodeClass CodeClass;
#endif 	/* __CodeClass_FWD_DEFINED__ */


#ifndef __FileCodeModel_FWD_DEFINED__
#define __FileCodeModel_FWD_DEFINED__
typedef interface FileCodeModel FileCodeModel;
#endif 	/* __FileCodeModel_FWD_DEFINED__ */


#ifndef __Breakpoint_FWD_DEFINED__
#define __Breakpoint_FWD_DEFINED__
typedef interface Breakpoint Breakpoint;
#endif 	/* __Breakpoint_FWD_DEFINED__ */


#ifndef __Breakpoints_FWD_DEFINED__
#define __Breakpoints_FWD_DEFINED__
typedef interface Breakpoints Breakpoints;
#endif 	/* __Breakpoints_FWD_DEFINED__ */


#ifndef __Debugger_FWD_DEFINED__
#define __Debugger_FWD_DEFINED__
typedef interface Debugger Debugger;
#endif 	/* __Debugger_FWD_DEFINED__ */


#ifndef __Expression_FWD_DEFINED__
#define __Expression_FWD_DEFINED__
typedef interface Expression Expression;
#endif 	/* __Expression_FWD_DEFINED__ */


#ifndef __Expressions_FWD_DEFINED__
#define __Expressions_FWD_DEFINED__
typedef interface Expressions Expressions;
#endif 	/* __Expressions_FWD_DEFINED__ */


#ifndef __Language_FWD_DEFINED__
#define __Language_FWD_DEFINED__
typedef interface Language Language;
#endif 	/* __Language_FWD_DEFINED__ */


#ifndef __Languages_FWD_DEFINED__
#define __Languages_FWD_DEFINED__
typedef interface Languages Languages;
#endif 	/* __Languages_FWD_DEFINED__ */


#ifndef __Process_FWD_DEFINED__
#define __Process_FWD_DEFINED__
typedef interface Process Process;
#endif 	/* __Process_FWD_DEFINED__ */


#ifndef __Processes_FWD_DEFINED__
#define __Processes_FWD_DEFINED__
typedef interface Processes Processes;
#endif 	/* __Processes_FWD_DEFINED__ */


#ifndef __Program_FWD_DEFINED__
#define __Program_FWD_DEFINED__
typedef interface Program Program;
#endif 	/* __Program_FWD_DEFINED__ */


#ifndef __Programs_FWD_DEFINED__
#define __Programs_FWD_DEFINED__
typedef interface Programs Programs;
#endif 	/* __Programs_FWD_DEFINED__ */


#ifndef __StackFrame_FWD_DEFINED__
#define __StackFrame_FWD_DEFINED__
typedef interface StackFrame StackFrame;
#endif 	/* __StackFrame_FWD_DEFINED__ */


#ifndef __StackFrames_FWD_DEFINED__
#define __StackFrames_FWD_DEFINED__
typedef interface StackFrames StackFrames;
#endif 	/* __StackFrames_FWD_DEFINED__ */


#ifndef __Thread_FWD_DEFINED__
#define __Thread_FWD_DEFINED__
typedef interface Thread Thread;
#endif 	/* __Thread_FWD_DEFINED__ */


#ifndef __Threads_FWD_DEFINED__
#define __Threads_FWD_DEFINED__
typedef interface Threads Threads;
#endif 	/* __Threads_FWD_DEFINED__ */


#ifndef ___dispDebuggerEvents_FWD_DEFINED__
#define ___dispDebuggerEvents_FWD_DEFINED__
typedef interface _dispDebuggerEvents _dispDebuggerEvents;
#endif 	/* ___dispDebuggerEvents_FWD_DEFINED__ */


#ifndef ___DebuggerEventsRoot_FWD_DEFINED__
#define ___DebuggerEventsRoot_FWD_DEFINED__
typedef interface _DebuggerEventsRoot _DebuggerEventsRoot;
#endif 	/* ___DebuggerEventsRoot_FWD_DEFINED__ */


#ifndef ___DebuggerEvents_FWD_DEFINED__
#define ___DebuggerEvents_FWD_DEFINED__
typedef interface _DebuggerEvents _DebuggerEvents;
#endif 	/* ___DebuggerEvents_FWD_DEFINED__ */


#ifndef __DebuggerEvents_FWD_DEFINED__
#define __DebuggerEvents_FWD_DEFINED__

#ifdef __cplusplus
typedef class DebuggerEvents DebuggerEvents;
#else
typedef struct DebuggerEvents DebuggerEvents;
#endif /* __cplusplus */

#endif 	/* __DebuggerEvents_FWD_DEFINED__ */


#ifndef __IDTWizard_FWD_DEFINED__
#define __IDTWizard_FWD_DEFINED__
typedef interface IDTWizard IDTWizard;
#endif 	/* __IDTWizard_FWD_DEFINED__ */


#ifndef __IVsExtensibility_FWD_DEFINED__
#define __IVsExtensibility_FWD_DEFINED__
typedef interface IVsExtensibility IVsExtensibility;
#endif 	/* __IVsExtensibility_FWD_DEFINED__ */


#ifndef __IVsGlobalsCallback_FWD_DEFINED__
#define __IVsGlobalsCallback_FWD_DEFINED__
typedef interface IVsGlobalsCallback IVsGlobalsCallback;
#endif 	/* __IVsGlobalsCallback_FWD_DEFINED__ */


#ifndef __IVsGlobals_FWD_DEFINED__
#define __IVsGlobals_FWD_DEFINED__
typedef interface IVsGlobals IVsGlobals;
#endif 	/* __IVsGlobals_FWD_DEFINED__ */


#ifndef __IDTCommandTarget_FWD_DEFINED__
#define __IDTCommandTarget_FWD_DEFINED__
typedef interface IDTCommandTarget IDTCommandTarget;
#endif 	/* __IDTCommandTarget_FWD_DEFINED__ */


#ifndef __CommandWindow_FWD_DEFINED__
#define __CommandWindow_FWD_DEFINED__
typedef interface CommandWindow CommandWindow;
#endif 	/* __CommandWindow_FWD_DEFINED__ */


#ifndef __DTE_FWD_DEFINED__
#define __DTE_FWD_DEFINED__

#ifdef __cplusplus
typedef class DTE DTE;
#else
typedef struct DTE DTE;
#endif /* __cplusplus */

#endif 	/* __DTE_FWD_DEFINED__ */


#ifndef __Solution_FWD_DEFINED__
#define __Solution_FWD_DEFINED__

#ifdef __cplusplus
typedef class Solution Solution;
#else
typedef struct Solution Solution;
#endif /* __cplusplus */

#endif 	/* __Solution_FWD_DEFINED__ */


#ifndef __DTEEvents_FWD_DEFINED__
#define __DTEEvents_FWD_DEFINED__

#ifdef __cplusplus
typedef class DTEEvents DTEEvents;
#else
typedef struct DTEEvents DTEEvents;
#endif /* __cplusplus */

#endif 	/* __DTEEvents_FWD_DEFINED__ */


#ifndef ___DTEEvents_FWD_DEFINED__
#define ___DTEEvents_FWD_DEFINED__
typedef interface _DTEEvents _DTEEvents;
#endif 	/* ___DTEEvents_FWD_DEFINED__ */


#ifndef ___ProjectItemsEvents_FWD_DEFINED__
#define ___ProjectItemsEvents_FWD_DEFINED__
typedef interface _ProjectItemsEvents _ProjectItemsEvents;
#endif 	/* ___ProjectItemsEvents_FWD_DEFINED__ */


#ifndef ___dispProjectItemsEvents_FWD_DEFINED__
#define ___dispProjectItemsEvents_FWD_DEFINED__
typedef interface _dispProjectItemsEvents _dispProjectItemsEvents;
#endif 	/* ___dispProjectItemsEvents_FWD_DEFINED__ */


#ifndef __ProjectItemsEvents_FWD_DEFINED__
#define __ProjectItemsEvents_FWD_DEFINED__

#ifdef __cplusplus
typedef class ProjectItemsEvents ProjectItemsEvents;
#else
typedef struct ProjectItemsEvents ProjectItemsEvents;
#endif /* __cplusplus */

#endif 	/* __ProjectItemsEvents_FWD_DEFINED__ */


#ifndef ___ProjectsEvents_FWD_DEFINED__
#define ___ProjectsEvents_FWD_DEFINED__
typedef interface _ProjectsEvents _ProjectsEvents;
#endif 	/* ___ProjectsEvents_FWD_DEFINED__ */


#ifndef ___dispProjectsEvents_FWD_DEFINED__
#define ___dispProjectsEvents_FWD_DEFINED__
typedef interface _dispProjectsEvents _dispProjectsEvents;
#endif 	/* ___dispProjectsEvents_FWD_DEFINED__ */


#ifndef __ProjectsEvents_FWD_DEFINED__
#define __ProjectsEvents_FWD_DEFINED__

#ifdef __cplusplus
typedef class ProjectsEvents ProjectsEvents;
#else
typedef struct ProjectsEvents ProjectsEvents;
#endif /* __cplusplus */

#endif 	/* __ProjectsEvents_FWD_DEFINED__ */


#ifndef ___MiscSlnFilesEventsRoot_FWD_DEFINED__
#define ___MiscSlnFilesEventsRoot_FWD_DEFINED__
typedef interface _MiscSlnFilesEventsRoot _MiscSlnFilesEventsRoot;
#endif 	/* ___MiscSlnFilesEventsRoot_FWD_DEFINED__ */


#ifndef ___CommandBarControlEvents_FWD_DEFINED__
#define ___CommandBarControlEvents_FWD_DEFINED__
typedef interface _CommandBarControlEvents _CommandBarControlEvents;
#endif 	/* ___CommandBarControlEvents_FWD_DEFINED__ */


#ifndef ___dispCommandBarControlEvents_FWD_DEFINED__
#define ___dispCommandBarControlEvents_FWD_DEFINED__
typedef interface _dispCommandBarControlEvents _dispCommandBarControlEvents;
#endif 	/* ___dispCommandBarControlEvents_FWD_DEFINED__ */


#ifndef __CommandBarEvents_FWD_DEFINED__
#define __CommandBarEvents_FWD_DEFINED__

#ifdef __cplusplus
typedef class CommandBarEvents CommandBarEvents;
#else
typedef struct CommandBarEvents CommandBarEvents;
#endif /* __cplusplus */

#endif 	/* __CommandBarEvents_FWD_DEFINED__ */


#ifndef ___CommandEvents_FWD_DEFINED__
#define ___CommandEvents_FWD_DEFINED__
typedef interface _CommandEvents _CommandEvents;
#endif 	/* ___CommandEvents_FWD_DEFINED__ */


#ifndef ___dispCommandEvents_FWD_DEFINED__
#define ___dispCommandEvents_FWD_DEFINED__
typedef interface _dispCommandEvents _dispCommandEvents;
#endif 	/* ___dispCommandEvents_FWD_DEFINED__ */


#ifndef __CommandEvents_FWD_DEFINED__
#define __CommandEvents_FWD_DEFINED__

#ifdef __cplusplus
typedef class CommandEvents CommandEvents;
#else
typedef struct CommandEvents CommandEvents;
#endif /* __cplusplus */

#endif 	/* __CommandEvents_FWD_DEFINED__ */


#ifndef ___SelectionEvents_FWD_DEFINED__
#define ___SelectionEvents_FWD_DEFINED__
typedef interface _SelectionEvents _SelectionEvents;
#endif 	/* ___SelectionEvents_FWD_DEFINED__ */


#ifndef ___dispSelectionEvents_FWD_DEFINED__
#define ___dispSelectionEvents_FWD_DEFINED__
typedef interface _dispSelectionEvents _dispSelectionEvents;
#endif 	/* ___dispSelectionEvents_FWD_DEFINED__ */


#ifndef __SelectionEvents_FWD_DEFINED__
#define __SelectionEvents_FWD_DEFINED__

#ifdef __cplusplus
typedef class SelectionEvents SelectionEvents;
#else
typedef struct SelectionEvents SelectionEvents;
#endif /* __cplusplus */

#endif 	/* __SelectionEvents_FWD_DEFINED__ */


#ifndef ___BuildEvents_FWD_DEFINED__
#define ___BuildEvents_FWD_DEFINED__
typedef interface _BuildEvents _BuildEvents;
#endif 	/* ___BuildEvents_FWD_DEFINED__ */


#ifndef ___dispBuildEvents_FWD_DEFINED__
#define ___dispBuildEvents_FWD_DEFINED__
typedef interface _dispBuildEvents _dispBuildEvents;
#endif 	/* ___dispBuildEvents_FWD_DEFINED__ */


#ifndef __BuildEvents_FWD_DEFINED__
#define __BuildEvents_FWD_DEFINED__

#ifdef __cplusplus
typedef class BuildEvents BuildEvents;
#else
typedef struct BuildEvents BuildEvents;
#endif /* __cplusplus */

#endif 	/* __BuildEvents_FWD_DEFINED__ */


#ifndef ___SolutionEvents_FWD_DEFINED__
#define ___SolutionEvents_FWD_DEFINED__
typedef interface _SolutionEvents _SolutionEvents;
#endif 	/* ___SolutionEvents_FWD_DEFINED__ */


#ifndef ___dispSolutionEvents_FWD_DEFINED__
#define ___dispSolutionEvents_FWD_DEFINED__
typedef interface _dispSolutionEvents _dispSolutionEvents;
#endif 	/* ___dispSolutionEvents_FWD_DEFINED__ */


#ifndef __SolutionEvents_FWD_DEFINED__
#define __SolutionEvents_FWD_DEFINED__

#ifdef __cplusplus
typedef class SolutionEvents SolutionEvents;
#else
typedef struct SolutionEvents SolutionEvents;
#endif /* __cplusplus */

#endif 	/* __SolutionEvents_FWD_DEFINED__ */


#ifndef __ContextAttribute_FWD_DEFINED__
#define __ContextAttribute_FWD_DEFINED__
typedef interface ContextAttribute ContextAttribute;
#endif 	/* __ContextAttribute_FWD_DEFINED__ */


#ifndef ___DocumentEventsRoot_FWD_DEFINED__
#define ___DocumentEventsRoot_FWD_DEFINED__
typedef interface _DocumentEventsRoot _DocumentEventsRoot;
#endif 	/* ___DocumentEventsRoot_FWD_DEFINED__ */


#ifndef ___DocumentEvents_FWD_DEFINED__
#define ___DocumentEvents_FWD_DEFINED__
typedef interface _DocumentEvents _DocumentEvents;
#endif 	/* ___DocumentEvents_FWD_DEFINED__ */


#ifndef ___dispDocumentEvents_FWD_DEFINED__
#define ___dispDocumentEvents_FWD_DEFINED__
typedef interface _dispDocumentEvents _dispDocumentEvents;
#endif 	/* ___dispDocumentEvents_FWD_DEFINED__ */


#ifndef __DocumentEvents_FWD_DEFINED__
#define __DocumentEvents_FWD_DEFINED__

#ifdef __cplusplus
typedef class DocumentEvents DocumentEvents;
#else
typedef struct DocumentEvents DocumentEvents;
#endif /* __cplusplus */

#endif 	/* __DocumentEvents_FWD_DEFINED__ */


#ifndef ___TextEditorEventsRoot_FWD_DEFINED__
#define ___TextEditorEventsRoot_FWD_DEFINED__
typedef interface _TextEditorEventsRoot _TextEditorEventsRoot;
#endif 	/* ___TextEditorEventsRoot_FWD_DEFINED__ */


#ifndef ___TextEditorEvents_FWD_DEFINED__
#define ___TextEditorEvents_FWD_DEFINED__
typedef interface _TextEditorEvents _TextEditorEvents;
#endif 	/* ___TextEditorEvents_FWD_DEFINED__ */


#ifndef ___dispTextEditorEvents_FWD_DEFINED__
#define ___dispTextEditorEvents_FWD_DEFINED__
typedef interface _dispTextEditorEvents _dispTextEditorEvents;
#endif 	/* ___dispTextEditorEvents_FWD_DEFINED__ */


#ifndef __TextEditorEvents_FWD_DEFINED__
#define __TextEditorEvents_FWD_DEFINED__

#ifdef __cplusplus
typedef class TextEditorEvents TextEditorEvents;
#else
typedef struct TextEditorEvents TextEditorEvents;
#endif /* __cplusplus */

#endif 	/* __TextEditorEvents_FWD_DEFINED__ */


#ifndef ___WindowEventsRoot_FWD_DEFINED__
#define ___WindowEventsRoot_FWD_DEFINED__
typedef interface _WindowEventsRoot _WindowEventsRoot;
#endif 	/* ___WindowEventsRoot_FWD_DEFINED__ */


#ifndef ___WindowEvents_FWD_DEFINED__
#define ___WindowEvents_FWD_DEFINED__
typedef interface _WindowEvents _WindowEvents;
#endif 	/* ___WindowEvents_FWD_DEFINED__ */


#ifndef ___dispWindowEvents_FWD_DEFINED__
#define ___dispWindowEvents_FWD_DEFINED__
typedef interface _dispWindowEvents _dispWindowEvents;
#endif 	/* ___dispWindowEvents_FWD_DEFINED__ */


#ifndef __WindowEvents_FWD_DEFINED__
#define __WindowEvents_FWD_DEFINED__

#ifdef __cplusplus
typedef class WindowEvents WindowEvents;
#else
typedef struct WindowEvents WindowEvents;
#endif /* __cplusplus */

#endif 	/* __WindowEvents_FWD_DEFINED__ */


#ifndef ___OutputWindowEventsRoot_FWD_DEFINED__
#define ___OutputWindowEventsRoot_FWD_DEFINED__
typedef interface _OutputWindowEventsRoot _OutputWindowEventsRoot;
#endif 	/* ___OutputWindowEventsRoot_FWD_DEFINED__ */


#ifndef ___OutputWindowEvents_FWD_DEFINED__
#define ___OutputWindowEvents_FWD_DEFINED__
typedef interface _OutputWindowEvents _OutputWindowEvents;
#endif 	/* ___OutputWindowEvents_FWD_DEFINED__ */


#ifndef ___dispOutputWindowEvents_FWD_DEFINED__
#define ___dispOutputWindowEvents_FWD_DEFINED__
typedef interface _dispOutputWindowEvents _dispOutputWindowEvents;
#endif 	/* ___dispOutputWindowEvents_FWD_DEFINED__ */


#ifndef __OutputWindowEvents_FWD_DEFINED__
#define __OutputWindowEvents_FWD_DEFINED__

#ifdef __cplusplus
typedef class OutputWindowEvents OutputWindowEvents;
#else
typedef struct OutputWindowEvents OutputWindowEvents;
#endif /* __cplusplus */

#endif 	/* __OutputWindowEvents_FWD_DEFINED__ */


#ifndef ___TaskListEventsRoot_FWD_DEFINED__
#define ___TaskListEventsRoot_FWD_DEFINED__
typedef interface _TaskListEventsRoot _TaskListEventsRoot;
#endif 	/* ___TaskListEventsRoot_FWD_DEFINED__ */


#ifndef ___TaskListEvents_FWD_DEFINED__
#define ___TaskListEvents_FWD_DEFINED__
typedef interface _TaskListEvents _TaskListEvents;
#endif 	/* ___TaskListEvents_FWD_DEFINED__ */


#ifndef ___dispTaskListEvents_FWD_DEFINED__
#define ___dispTaskListEvents_FWD_DEFINED__
typedef interface _dispTaskListEvents _dispTaskListEvents;
#endif 	/* ___dispTaskListEvents_FWD_DEFINED__ */


#ifndef __TaskListEvents_FWD_DEFINED__
#define __TaskListEvents_FWD_DEFINED__

#ifdef __cplusplus
typedef class TaskListEvents TaskListEvents;
#else
typedef struct TaskListEvents TaskListEvents;
#endif /* __cplusplus */

#endif 	/* __TaskListEvents_FWD_DEFINED__ */


#ifndef __IDTToolsOptionsPage_FWD_DEFINED__
#define __IDTToolsOptionsPage_FWD_DEFINED__
typedef interface IDTToolsOptionsPage IDTToolsOptionsPage;
#endif 	/* __IDTToolsOptionsPage_FWD_DEFINED__ */


#ifndef ___EnvironmentWebBrowser_FWD_DEFINED__
#define ___EnvironmentWebBrowser_FWD_DEFINED__
typedef interface _EnvironmentWebBrowser _EnvironmentWebBrowser;
#endif 	/* ___EnvironmentWebBrowser_FWD_DEFINED__ */


#ifndef ___EnvironmentHelp_FWD_DEFINED__
#define ___EnvironmentHelp_FWD_DEFINED__
typedef interface _EnvironmentHelp _EnvironmentHelp;
#endif 	/* ___EnvironmentHelp_FWD_DEFINED__ */


#ifndef __ColorableItems_FWD_DEFINED__
#define __ColorableItems_FWD_DEFINED__
typedef interface ColorableItems ColorableItems;
#endif 	/* __ColorableItems_FWD_DEFINED__ */


#ifndef __FontsAndColorsItems_FWD_DEFINED__
#define __FontsAndColorsItems_FWD_DEFINED__
typedef interface FontsAndColorsItems FontsAndColorsItems;
#endif 	/* __FontsAndColorsItems_FWD_DEFINED__ */


#ifndef ___FontsAndColors_FWD_DEFINED__
#define ___FontsAndColors_FWD_DEFINED__
typedef interface _FontsAndColors _FontsAndColors;
#endif 	/* ___FontsAndColors_FWD_DEFINED__ */


#ifndef ___EnvironmentGeneral_FWD_DEFINED__
#define ___EnvironmentGeneral_FWD_DEFINED__
typedef interface _EnvironmentGeneral _EnvironmentGeneral;
#endif 	/* ___EnvironmentGeneral_FWD_DEFINED__ */


#ifndef ___EnvironmentFontsAndColors_FWD_DEFINED__
#define ___EnvironmentFontsAndColors_FWD_DEFINED__
typedef interface _EnvironmentFontsAndColors _EnvironmentFontsAndColors;
#endif 	/* ___EnvironmentFontsAndColors_FWD_DEFINED__ */


#ifndef ___EnvironmentProjectsAndSolution_FWD_DEFINED__
#define ___EnvironmentProjectsAndSolution_FWD_DEFINED__
typedef interface _EnvironmentProjectsAndSolution _EnvironmentProjectsAndSolution;
#endif 	/* ___EnvironmentProjectsAndSolution_FWD_DEFINED__ */


#ifndef ___EnvironmentDocuments_FWD_DEFINED__
#define ___EnvironmentDocuments_FWD_DEFINED__
typedef interface _EnvironmentDocuments _EnvironmentDocuments;
#endif 	/* ___EnvironmentDocuments_FWD_DEFINED__ */


#ifndef ___EnvironmentTaskList_FWD_DEFINED__
#define ___EnvironmentTaskList_FWD_DEFINED__
typedef interface _EnvironmentTaskList _EnvironmentTaskList;
#endif 	/* ___EnvironmentTaskList_FWD_DEFINED__ */


#ifndef ___EnvironmentKeyboard_FWD_DEFINED__
#define ___EnvironmentKeyboard_FWD_DEFINED__
typedef interface _EnvironmentKeyboard _EnvironmentKeyboard;
#endif 	/* ___EnvironmentKeyboard_FWD_DEFINED__ */


#ifndef __IExtensibleObject_FWD_DEFINED__
#define __IExtensibleObject_FWD_DEFINED__
typedef interface IExtensibleObject IExtensibleObject;
#endif 	/* __IExtensibleObject_FWD_DEFINED__ */


#ifndef ___FindEvents_FWD_DEFINED__
#define ___FindEvents_FWD_DEFINED__
typedef interface _FindEvents _FindEvents;
#endif 	/* ___FindEvents_FWD_DEFINED__ */


#ifndef ___dispFindEvents_FWD_DEFINED__
#define ___dispFindEvents_FWD_DEFINED__
typedef interface _dispFindEvents _dispFindEvents;
#endif 	/* ___dispFindEvents_FWD_DEFINED__ */


#ifndef __FindEvents_FWD_DEFINED__
#define __FindEvents_FWD_DEFINED__

#ifdef __cplusplus
typedef class FindEvents FindEvents;
#else
typedef struct FindEvents FindEvents;
#endif /* __cplusplus */

#endif 	/* __FindEvents_FWD_DEFINED__ */


#ifndef __IVsTextEditGeneral_FWD_DEFINED__
#define __IVsTextEditGeneral_FWD_DEFINED__
typedef interface IVsTextEditGeneral IVsTextEditGeneral;
#endif 	/* __IVsTextEditGeneral_FWD_DEFINED__ */


#ifndef __IVsTextEditPerLanguage_FWD_DEFINED__
#define __IVsTextEditPerLanguage_FWD_DEFINED__
typedef interface IVsTextEditPerLanguage IVsTextEditPerLanguage;
#endif 	/* __IVsTextEditPerLanguage_FWD_DEFINED__ */


#ifndef __IVsTextEditFonts_FWD_DEFINED__
#define __IVsTextEditFonts_FWD_DEFINED__
typedef interface IVsTextEditFonts IVsTextEditFonts;
#endif 	/* __IVsTextEditFonts_FWD_DEFINED__ */


#ifndef __HTMLWindow_FWD_DEFINED__
#define __HTMLWindow_FWD_DEFINED__
typedef interface HTMLWindow HTMLWindow;
#endif 	/* __HTMLWindow_FWD_DEFINED__ */


#ifdef __cplusplus
extern "C"{
#endif 

void * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void * ); 

/* interface __MIDL_itf_dte_0000 */
/* [local] */ 

#ifdef Delete
#define Delete_defined
#undef Delete
#endif
#ifdef ReplaceText
#define ReplaceText_defined
#undef ReplaceText
#endif
#define DTEIDL_REVISION 8
#define SID_SVsExtensibility IID_IVsExtensibility
//The following are defined for backward source compatibility
// They were needed when the transition from a coclass to interface
// object model was made.
#define IID__Projects IID_Projects
#define _Projects Projects
#define IID__Project IID_Project
#define _Project Project
#define IID__ProjectItems IID_ProjectItems
#define _ProjectItems ProjectItems
#define IID__ProjectItem IID_ProjectItem
#define _ProjectItem ProjectItem
#define IID__Commands IID_Commands
#define _Commands Commands
#define IID__AddIns IID_AddIns
#define _AddIns AddIns
#define IID__AddIn IID_AddIn
#define _AddIn AddIn
#define IID__Windows IID_Windows
#define _Windows Windows
#define IID__LinkedWindows IID_LinkedWindows
#define _LinkedWindows LinkedWindows
#define IID__SelectedItems IID_SelectedItems
#define _SelectedItems SelectedItems
#define IID__SelectedItem IID_SelectedItem
#define _SelectedItem SelectedItem
#define IID__Properties IID_Properties
#define _Properties Properties
#define IID__SelectionContainer IID_SelectionContainer
#define _SelectionContainer SelectionContainer
#define IID__TextBuffer IID_TextBuffer
#define _TextBuffer TextBuffer
#define SID_SVsProfferCommands IID_IVsProfferCommands
#ifndef __INDENTSTYLE__
#define __INDENTSTYLE__
typedef /* [uuid] */  DECLSPEC_UUID("BCCEBE05-D29C-11D2-AABD-00C04F688DDE") 
enum vsIndentStyle
    {	vsIndentStyleNone	= 0,
	vsIndentStyleDefault	= vsIndentStyleNone + 1,
	vsIndentStyleSmart	= vsIndentStyleDefault + 1
    } 	vsIndentStyle;

#endif // __INDENTSTYLE__
const GUID GUID_Addins = { 0x1e58696e, 0xc90f, 0x11D2, { 0xaa, 0xb2, 0x0, 0xc0, 0x4f, 0x68, 0x8d, 0xde } };
#define LIBID_DTE LIBID_EnvDTE


extern RPC_IF_HANDLE __MIDL_itf_dte_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_dte_0000_v0_0_s_ifspec;


#ifndef __EnvDTE_LIBRARY_DEFINED__
#define __EnvDTE_LIBRARY_DEFINED__

/* library EnvDTE */
/* [version][helpstring][helpfile][uuid] */ 




















































































































typedef /* [uuid] */  DECLSPEC_UUID("494815FD-49D0-41e0-912F-D9C673DD068A") 
enum vsCMPart
    {	vsCMPartName	= 1,
	vsCMPartAttributes	= 2,
	vsCMPartHeader	= 4,
	vsCMPartWhole	= 8,
	vsCMPartBody	= 16,
	vsCMPartNavigate	= 32,
	vsCMPartAttributesWithDelimiter	= 68,
	vsCMPartBodyWithDelimiter	= 80,
	vsCMPartHeaderWithAttributes	= 6,
	vsCMPartWholeWithAttributes	= 10
    } 	vsCMPart;

typedef /* [uuid] */  DECLSPEC_UUID("0CFBC2CD-0D4E-11D3-8997-00C04F688DDE") 
enum vsCMElement
    {	vsCMElementOther	= 0,
	vsCMElementClass	= 1,
	vsCMElementFunction	= 2,
	vsCMElementVariable	= 3,
	vsCMElementProperty	= 4,
	vsCMElementNamespace	= 5,
	vsCMElementParameter	= 6,
	vsCMElementAttribute	= 7,
	vsCMElementInterface	= 8,
	vsCMElementDelegate	= 9,
	vsCMElementEnum	= 10,
	vsCMElementStruct	= 11,
	vsCMElementUnion	= 12,
	vsCMElementLocalDeclStmt	= 13,
	vsCMElementFunctionInvokeStmt	= 14,
	vsCMElementPropertySetStmt	= 15,
	vsCMElementAssignmentStmt	= 16,
	vsCMElementInheritsStmt	= 17,
	vsCMElementImplementsStmt	= 18,
	vsCMElementOptionStmt	= 19,
	vsCMElementVBAttributeStmt	= 20,
	vsCMElementVBAttributeGroup	= 21,
	vsCMElementEventsDeclaration	= 22,
	vsCMElementUDTDecl	= 23,
	vsCMElementDeclareDecl	= 24,
	vsCMElementDefineStmt	= 25,
	vsCMElementTypeDef	= 26,
	vsCMElementIncludeStmt	= 27,
	vsCMElementUsingStmt	= 28,
	vsCMElementMacro	= 29,
	vsCMElementMap	= 30,
	vsCMElementIDLImport	= 31,
	vsCMElementIDLImportLib	= 32,
	vsCMElementIDLCoClass	= 33,
	vsCMElementIDLLibrary	= 34,
	vsCMElementImportStmt	= 35,
	vsCMElementMapEntry	= 36,
	vsCMElementVCBase	= 37,
	vsCMElementEvent	= 38,
	vsCMElementModule	= 39
    } 	vsCMElement;

typedef /* [uuid] */  DECLSPEC_UUID("0CFBC2CE-0D4E-11D3-8997-00C04F688DDE") 
enum vsCMFunction
    {	vsCMFunctionOther	= 0,
	vsCMFunctionConstructor	= 1,
	vsCMFunctionPropertyGet	= 2,
	vsCMFunctionPropertyLet	= 4,
	vsCMFunctionPropertySet	= 8,
	vsCMFunctionPutRef	= 16,
	vsCMFunctionPropertyAssign	= 32,
	vsCMFunctionSub	= 64,
	vsCMFunctionFunction	= 128,
	vsCMFunctionTopLevel	= 256,
	vsCMFunctionDestructor	= 512,
	vsCMFunctionOperator	= 1024,
	vsCMFunctionVirtual	= 2048,
	vsCMFunctionPure	= 4096,
	vsCMFunctionConstant	= 8192,
	vsCMFunctionShared	= 16384,
	vsCMFunctionInline	= 32768,
	vsCMFunctionComMethod	= 65536
    } 	vsCMFunction;

typedef /* [uuid] */  DECLSPEC_UUID("ED1A3F96-4477-11d3-89BF-00C04F688DDE") 
enum vsCMAccess
    {	vsCMAccessPublic	= 1,
	vsCMAccessPrivate	= 2,
	vsCMAccessProject	= 4,
	vsCMAccessProtected	= 8,
	vsCMAccessDefault	= 32,
	vsCMAccessAssemblyOrFamily	= 64,
	vsCMAccessWithEvents	= 128,
	vsCMAccessProjectOrProtected	= 12
    } 	vsCMAccess;

typedef /* [uuid] */  DECLSPEC_UUID("ED1A3F97-4477-11d3-89BF-00C04F688DDE") 
enum vsCMInfoLocation
    {	vsCMInfoLocationProject	= 1,
	vsCMInfoLocationExternal	= 2,
	vsCMInfoLocationNone	= 4,
	vsCMInfoLocationVirtual	= 8
    } 	vsCMInfoLocation;

typedef /* [uuid] */  DECLSPEC_UUID("ED1A3F98-4477-11d3-89BF-00C04F688DDE") 
enum vsCMPrototype
    {	vsCMPrototypeFullname	= 1,
	vsCMPrototypeNoName	= 2,
	vsCMPrototypeClassName	= 4,
	vsCMPrototypeParamTypes	= 8,
	vsCMPrototypeParamNames	= 16,
	vsCMPrototypeParamDefaultValues	= 32,
	vsCMPrototypeUniqueSignature	= 64,
	vsCMPrototypeType	= 128,
	vsCMPrototypeInitExpression	= 256
    } 	vsCMPrototype;

typedef /* [uuid] */  DECLSPEC_UUID("C58839C3-7435-4944-8277-EA97B8EB2FA2") 
enum vsCMTypeRef
    {	vsCMTypeRefOther	= 0,
	vsCMTypeRefCodeType	= 1,
	vsCMTypeRefArray	= 2,
	vsCMTypeRefVoid	= 3,
	vsCMTypeRefPointer	= 4,
	vsCMTypeRefString	= 5,
	vsCMTypeRefObject	= 6,
	vsCMTypeRefByte	= 7,
	vsCMTypeRefChar	= 8,
	vsCMTypeRefShort	= 9,
	vsCMTypeRefInt	= 10,
	vsCMTypeRefLong	= 11,
	vsCMTypeRefFloat	= 12,
	vsCMTypeRefDouble	= 13,
	vsCMTypeRefDecimal	= 14,
	vsCMTypeRefBool	= 15,
	vsCMTypeRefVariant	= 16
    } 	vsCMTypeRef;

















typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("75607DDE-2B43-11d3-B88B-00C04F79E479") 
enum dbgBreakpointType
    {	dbgBreakpointTypePending	= 1,
	dbgBreakpointTypeBound	= dbgBreakpointTypePending + 1
    } 	dbgBreakpointType;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("229C054C-C146-11d2-8AD1-00C04F79E479") 
enum dbgBreakpointLocationType
    {	dbgBreakpointLocationTypeNone	= 1,
	dbgBreakpointLocationTypeFunction	= dbgBreakpointLocationTypeNone + 1,
	dbgBreakpointLocationTypeFile	= dbgBreakpointLocationTypeFunction + 1,
	dbgBreakpointLocationTypeData	= dbgBreakpointLocationTypeFile + 1,
	dbgBreakpointLocationTypeAddress	= dbgBreakpointLocationTypeData + 1
    } 	dbgBreakpointLocationType;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("2A594772-C146-11d2-8AD1-00C04F79E479") 
enum dbgBreakpointConditionType
    {	dbgBreakpointConditionTypeWhenTrue	= 1,
	dbgBreakpointConditionTypeWhenChanged	= dbgBreakpointConditionTypeWhenTrue + 1
    } 	dbgBreakpointConditionType;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("ED2FBDD2-1EB1-11d3-B888-00C04F79E479") 
enum dbgExceptionAction
    {	dbgExceptionActionDefault	= 1,
	dbgExceptionActionIgnore	= dbgExceptionActionDefault + 1,
	dbgExceptionActionBreak	= dbgExceptionActionIgnore + 1,
	dbgExceptionActionContinue	= dbgExceptionActionBreak + 1
    } 	dbgExceptionAction;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("3A3329CE-C146-11d2-8AD1-00C04F79E479") 
enum dbgHitCountType
    {	dbgHitCountTypeNone	= 1,
	dbgHitCountTypeEqual	= dbgHitCountTypeNone + 1,
	dbgHitCountTypeGreaterOrEqual	= dbgHitCountTypeEqual + 1,
	dbgHitCountTypeMultiple	= dbgHitCountTypeGreaterOrEqual + 1
    } 	dbgHitCountType;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("E940C60A-C68F-11d2-8AD6-00C04F79E479") 
enum dbgDebugMode
    {	dbgDesignMode	= 1,
	dbgBreakMode	= dbgDesignMode + 1,
	dbgRunMode	= dbgBreakMode + 1
    } 	dbgDebugMode;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("4106C580-C146-11d2-8AD1-00C04F79E479") 
enum dbgEventReason
    {	dbgEventReasonNone	= 1,
	dbgEventReasonGo	= dbgEventReasonNone + 1,
	dbgEventReasonAttachProgram	= dbgEventReasonGo + 1,
	dbgEventReasonDetachProgram	= dbgEventReasonAttachProgram + 1,
	dbgEventReasonLaunchProgram	= dbgEventReasonDetachProgram + 1,
	dbgEventReasonEndProgram	= dbgEventReasonLaunchProgram + 1,
	dbgEventReasonStopDebugging	= dbgEventReasonEndProgram + 1,
	dbgEventReasonStep	= dbgEventReasonStopDebugging + 1,
	dbgEventReasonBreakpoint	= dbgEventReasonStep + 1,
	dbgEventReasonExceptionThrown	= dbgEventReasonBreakpoint + 1,
	dbgEventReasonExceptionNotHandled	= dbgEventReasonExceptionThrown + 1,
	dbgEventReasonUserBreak	= dbgEventReasonExceptionNotHandled + 1,
	dbgEventReasonContextSwitch	= dbgEventReasonUserBreak + 1
    } 	dbgEventReason;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("77940E85-BCE0-443d-8B77-F5BD841A211E") 
enum dbgExecutionAction
    {	dbgExecutionActionDefault	= 1,
	dbgExecutionActionGo	= dbgExecutionActionDefault + 1,
	dbgExecutionActionStopDebugging	= dbgExecutionActionGo + 1,
	dbgExecutionActionStepInto	= dbgExecutionActionStopDebugging + 1,
	dbgExecutionActionStepOut	= dbgExecutionActionStepInto + 1,
	dbgExecutionActionStepOver	= dbgExecutionActionStepOut + 1,
	dbgExecutionActionRunToCursor	= dbgExecutionActionStepOver + 1
    } 	dbgExecutionAction;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("178c767a-1963-4bc5-b3f2-e70f3eb441a8") 
enum vsNavigateBrowser
    {	vsNavigateBrowserDefault	= 0,
	vsNavigateBrowserHelp	= 1,
	vsNavigateBrowserNewWindow	= 2
    } 	vsNavigateBrowser;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("947978f5-185b-4366-921e-a14c0ed46702") 
enum vsCommandDisabledFlags
    {	vsCommandDisabledFlagsEnabled	= 0,
	vsCommandDisabledFlagsGrey	= 0x10,
	vsCommandDisabledFlagsHidden	= 0x20
    } 	vsCommandDisabledFlags;

typedef /* [uuid] */  DECLSPEC_UUID("9e3c8489-ae44-4fcf-9697-cd3f312ba08c") 
enum vsInitializeMode
    {	vsInitializeModeStartup	= 0,
	vsInitializeModeReset	= 1
    } 	vsInitializeMode;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("79946991-1ae2-4d2d-9768-fd7801be7daa") 
enum vsCommandBarType
    {	vsCommandBarTypePopup	= 10,
	vsCommandBarTypeToolbar	= 23,
	vsCommandBarTypeMenu	= 24
    } 	vsCommandBarType;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("b638b3e3-c98b-4f59-9d05-105a620529f9") 
enum vsIDEMode
    {	vsIDEModeDesign	= 1,
	vsIDEModeDebug	= 2
    } 	vsIDEMode;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("d920605a-11dd-4a12-a8dc-10578bb08606") 
enum wizardResult
    {	wizardResultSuccess	= -1,
	wizardResultFailure	= 0,
	wizardResultCancel	= 1,
	wizardResultBackOut	= 2
    } 	wizardResult;

#define ext_cm_Solution 4
#define ext_cm_UISetup 5
#define ext_dm_UISetupComplete 2
#define ext_dm_SolutionClosed 3
typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("ca3ee5d0-6305-422f-a425-99737956088f") 
enum vsPromptResult
    {	vsPromptResultYes	= 1,
	vsPromptResultNo	= 2,
	vsPromptResultCancelled	= 3
    } 	vsPromptResult;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("d9e97957-b425-4cd6-bb74-9e6f232a342a") 
enum vsCommandStatusTextWanted
    {	vsCommandStatusTextWantedNone	= 0,
	vsCommandStatusTextWantedName	= 1,
	vsCommandStatusTextWantedStatus	= 2
    } 	vsCommandStatusTextWanted;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("e0ace2e3-49c1-4aa3-ac03-a2877a93d77f") 
enum vsCommandStatus
    {	vsCommandStatusUnsupported	= 0,
	vsCommandStatusSupported	= 1,
	vsCommandStatusEnabled	= 2,
	vsCommandStatusLatched	= 4,
	vsCommandStatusNinched	= 8,
	vsCommandStatusInvisible	= 16
    } 	vsCommandStatus;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("3c537e1a-39b8-4fda-9f22-93d8c030865d") 
enum vsCommandExecOption
    {	vsCommandExecOptionDoDefault	= 0,
	vsCommandExecOptionPromptUser	= 1,
	vsCommandExecOptionDoPromptUser	= 2,
	vsCommandExecOptionShowHelp	= 3
    } 	vsCommandExecOption;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("e0e643c3-5410-487a-b64e-2664a5c4ab50") 
enum vsDisplay
    {	vsDisplayMDI	= 1,
	vsDisplayMDITabs	= 2
    } 	vsDisplay;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("AAE3FAE8-8AFC-11D2-ADEE-00C04F7971C3") 
enum vsSaveChanges
    {	vsSaveChangesYes	= 1,
	vsSaveChangesNo	= 2,
	vsSaveChangesPrompt	= 3
    } 	vsSaveChanges;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("8901ff7a-e6e8-4154-a505-135ee434817e") 
enum vsSaveStatus
    {	vsSaveCancelled	= 2,
	vsSaveSucceeded	= 1
    } 	vsSaveStatus;

#define SID_SVsSourceControl IID_SourceControl
typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("3982FA28-7BCC-4f14-817C-93EEECE8BEEE") 
enum vsBuildKind
    {	vsBuildKindSolution	= 0,
	vsBuildKindProject	= 1,
	vsBuildKindProjectItem	= 2
    } 	vsBuildKind;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("FA7FA701-EFAD-4895-A95A-D4ECB383BF7D") 
enum vsBuildScope
    {	vsBuildScopeSolution	= 1,
	vsBuildScopeBatch	= 2,
	vsBuildScopeProject	= 3
    } 	vsBuildScope;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("FA7FA702-EFAD-4895-A95A-D4ECB383BF7D") 
enum vsBuildAction
    {	vsBuildActionBuild	= 1,
	vsBuildActionRebuildAll	= 2,
	vsBuildActionClean	= 3,
	vsBuildActionDeploy	= 4
    } 	vsBuildAction;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("705CD8A9-D29B-11D2-AABD-00C04F688DDE") 
enum vsWindowType
    {	vsWindowTypeCodeWindow	= 0,
	vsWindowTypeDesigner	= 1,
	vsWindowTypeBrowser	= 2,
	vsWindowTypeWatch	= 3,
	vsWindowTypeLocals	= 4,
	vsWindowTypeImmediate	= 5,
	vsWindowTypeSolutionExplorer	= 6,
	vsWindowTypeProperties	= 7,
	vsWindowTypeFind	= 8,
	vsWindowTypeFindReplace	= 9,
	vsWindowTypeToolbox	= 10,
	vsWindowTypeLinkedWindowFrame	= 11,
	vsWindowTypeMainWindow	= 12,
	vsWindowTypePreview	= 13,
	vsWindowTypeColorPalette	= 14,
	vsWindowTypeToolWindow	= 15,
	vsWindowTypeDocument	= 16,
	vsWindowTypeOutput	= 17,
	vsWindowTypeTaskList	= 18,
	vsWindowTypeAutos	= 19,
	vsWindowTypeCallStack	= 20,
	vsWindowTypeThreads	= 21,
	vsWindowTypeDocumentOutline	= 22,
	vsWindowTypeRunningDocuments	= 23
    } 	vsWindowType;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("cd678662-7939-48a0-bf1d-fa1bed56c130") 
enum vsWindowState
    {	vsWindowStateNormal	= 0,
	vsWindowStateMinimize	= 1,
	vsWindowStateMaximize	= 2
    } 	vsWindowState;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("539f9c17-db5f-421d-b02b-07bcf9faa92f") 
enum vsLinkedWindowType
    {	vsLinkedWindowTypeDocked	= 0,
	vsLinkedWindowTypeVertical	= 2,
	vsLinkedWindowTypeHorizontal	= 3,
	vsLinkedWindowTypeTabbed	= 1
    } 	vsLinkedWindowType;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("59286edc-d580-4e22-96c9-44d15b6148cc") 
enum vsContextAttributes
    {	vsContextAttributesGlobal	= 1,
	vsContextAttributesWindow	= 2,
	vsContextAttributesHighPriority	= 3
    } 	vsContextAttributes;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("410202e1-b83a-41dd-aab0-8c0029fe9435") 
enum vsContextAttributeType
    {	vsContextAttributeFilter	= 1,
	vsContextAttributeLookup	= 2,
	vsContextAttributeLookupF1	= 3
    } 	vsContextAttributeType;

typedef /* [uuid] */  DECLSPEC_UUID("11f0cb7f-4f63-4e09-b99c-92a6cc5f84ce") 
enum vsTextChanged
    {	vsTextChangedMultiLine	= 1,
	vsTextChangedSave	= 2,
	vsTextChangedCaretMoved	= 4,
	vsTextChangedReplaceAll	= 8,
	vsTextChangedNewline	= 16,
	vsTextChangedFindStarting	= 32
    } 	vsTextChanged;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("36B56DE8-5A17-11D1-B2B6-00C04FB6C6FF") 
enum vsTaskPriority
    {	vsTaskPriorityLow	= 1,
	vsTaskPriorityMedium	= 2,
	vsTaskPriorityHigh	= 3
    } 	vsTaskPriority;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("195DAB2E-4854-11D2-8820-00C04FB6C6FF") 
enum vsTaskIcon
    {	vsTaskIconNone	= 0,
	vsTaskIconCompile	= 1,
	vsTaskIconSquiggle	= 2,
	vsTaskIconComment	= 3,
	vsTaskIconShortcut	= 4,
	vsTaskIconUser	= 5
    } 	vsTaskIcon;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("9848C17E-6AA5-11D2-97C3-00C04FB6C6FF") 
enum vsTaskListColumn
    {	vsTaskListColumnPriority	= 1,
	vsTaskListColumnGlyph	= 2,
	vsTaskListColumnCheck	= 4,
	vsTaskListColumnDescription	= 8,
	vsTaskListColumnFile	= 16,
	vsTaskListColumnLine	= 32
    } 	vsTaskListColumn;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("f40a5d39-fd39-4f03-8358-4df3c338b448") 
enum vsStatusAnimation
    {	vsStatusAnimationGeneral	= 0,
	vsStatusAnimationPrint	= 1,
	vsStatusAnimationSave	= 2,
	vsStatusAnimationDeploy	= 3,
	vsStatusAnimationSync	= 4,
	vsStatusAnimationBuild	= 5,
	vsStatusAnimationFind	= 6
    } 	vsStatusAnimation;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("44DF8FDC-7378-11D2-97CA-00C04FB6C6FF") 
enum vsToolBoxItemFormat
    {	vsToolBoxItemFormatText	= 1,
	vsToolBoxItemFormatHTML	= 2,
	vsToolBoxItemFormatGUID	= 4,
	vsToolBoxItemFormatDotNETComponent	= 8
    } 	vsToolBoxItemFormat;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("705CD8AC-D29B-11D2-AABD-00C04F688DDE") 
enum vsStartUp
    {	vsStartUpShowHomePage	= 0,
	vsStartUpLoadLastSolution	= 1,
	vsStartUpOpenProjectDialog	= 2,
	vsStartUpNewProjectDialog	= 3,
	vsStartUpEmptyEnvironment	= 4
    } 	vsStartUp;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("705CD8A4-D29B-11D2-AABD-00C04F688DDE") 
enum vsFontCharSet
    {	vsFontCharSetANSI	= 0,
	vsFontCharSetDefault	= 1,
	vsFontCharSetSymbol	= 2,
	vsFontCharSetShiftJIS	= 128,
	vsFontCharSetHangeul	= 129,
	vsFontCharSetGB2312	= 134,
	vsFontCharSetChineseBig5	= 136,
	vsFontCharSetOEM	= 255,
	vsFontCharSetJohab	= 130,
	vsFontCharSetHebrew	= 177,
	vsFontCharSetArabic	= 178,
	vsFontCharSetGreek	= 161,
	vsFontCharSetTurkish	= 162,
	vsFontCharSetVietnamese	= 163,
	vsFontCharSetThai	= 222,
	vsFontCharSetEastEurope	= 238,
	vsFontCharSetRussian	= 204,
	vsFontCharSetMac	= 77,
	vsFontCharSetBaltic	= 186
    } 	vsFontCharSet;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("947FFC03-8314-4288-BDD7-DFD282DA40D5") 
enum vsBrowserViewSource
    {	vsBrowserViewSourceSource	= 1,
	vsBrowserViewSourceDesign	= 2,
	vsBrowserViewSourceExternal	= 3
    } 	vsBrowserViewSource;

// Standard Shell Automation Extender CATIDs
// These are the intrinsic extender CATIDs for the automation and the property
// browser IDispatch objects implemented by the shell that suppport Automation
// Extenders. For other implementation specific extender CATIDs (for eg. VB, VC)
// look in those specific headers
//
// Also note that the object (IDispatch) used for automation is typically
// different than the one used for Property Browsing. For instance, the
// DTE.Solution automation object is different than the object used to populate
// the property browser when the solution node is selected in the project
// explorer. Hence, the two objects used DIFFERENT intrinsic CATIDs
// (guidCATIDSolution for the Solution automation object and
// guidCATIDSolutionBrowseObject for the Solution's property browse object)
// Solution Automation object CATID {52AEFF70-BBD8-11d2-8598-006097C68E81}
DEFINE_GUID(guidCATIDSolution,						0x52aeff70, 0xbbd8, 0x11d2, 0x85, 0x98, 0x0, 0x60, 0x97, 0xc6, 0x8e, 0x81);
// Solution Browse Object CATID {A2392464-7C22-11d3-BDCA-00C04F688E50}
DEFINE_GUID(guidCATIDSolutionBrowseObject, 0xa2392464, 0x7c22, 0x11d3, 0xbd, 0xca, 0x0, 0xc0, 0x4f, 0x68, 0x8e, 0x50);
// Misc Files Project Automation Object CATID {610d4612-d0d5-11d2-8599-006097c68e81}
DEFINE_GUID(guidCATIDMiscFilesProject,		0x610d4612, 0xd0d5, 0x11d2, 0x85, 0x99, 0x00, 0x60, 0x97, 0xc6, 0x8e, 0x81);
// Misc Files Project Item Automation Object CATID {610d4613-d0d5-11d2-8599-006097c68e81
DEFINE_GUID(guidCATIDMiscFilesProjectItem, 0x610d4613, 0xd0d5, 0x11d2, 0x85, 0x99, 0x00, 0x60, 0x97, 0xc6, 0x8e, 0x81);
// Generic Project Automation Object CATID {610d4616-d0d5-11d2-8599-006097c68e81}
DEFINE_GUID(guidCATIDGenericProject,			0x610d4616, 0xd0d5, 0x11d2, 0x85, 0x99, 0x00, 0x60, 0x97, 0xc6, 0x8e, 0x81);
// (Generic) Document Automation Object CATID {610d4611-d0d5-11d2-8599-006097c68e81}
DEFINE_GUID(guidCATIDDocument,						0x610d4611, 0xd0d5, 0x11d2, 0x85, 0x99, 0x00, 0x60, 0x97, 0xc6, 0x8e, 0x81);
typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("28362492-b1e3-4998-94c6-0a2cdb5484ed") 
enum vsUISelectionType
    {	vsUISelectionTypeSelect	= 1,
	vsUISelectionTypeToggle	= 2,
	vsUISelectionTypeExtend	= 3,
	vsUISelectionTypeSetCaret	= 4
    } 	vsUISelectionType;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("16386f0e-4ad2-41b8-8d6f-7ff230ae1d17") 
enum vsBuildState
    {	vsBuildStateNotStarted	= 1,
	vsBuildStateInProgress	= 2,
	vsBuildStateDone	= 3
    } 	vsBuildState;

#ifdef Debug
#define Debug_defined
#undef Debug
#endif
typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("612256bd-7ba2-45c4-b60f-7b2ae42f96c3") 
enum vsConfigurationType
    {	vsConfigurationTypeProject	= 1,
	vsConfigurationTypeProjectItem	= 2
    } 	vsConfigurationType;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("9fb64132-726a-4262-829e-051c6ec7b24f") 
enum vsFindAction
    {	vsFindActionFind	= 1,
	vsFindActionFindAll	= 2,
	vsFindActionReplace	= 3,
	vsFindActionReplaceAll	= 4,
	vsFindActionBookmarkAll	= 5
    } 	vsFindAction;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("6fa137be-32a8-4f54-8099-60bb955097a3") 
enum vsFindResult
    {	vsFindResultNotFound	= 0,
	vsFindResultFound	= 1,
	vsFindResultReplaceAndNotFound	= 2,
	vsFindResultReplaceAndFound	= 3,
	vsFindResultReplaced	= 4,
	vsFindResultPending	= 5,
	vsFindResultError	= 6
    } 	vsFindResult;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("530f2d0e-a5f9-4b7a-a379-0a3b99b5e66d") 
enum vsFindPatternSyntax
    {	vsFindPatternSyntaxLiteral	= 0,
	vsFindPatternSyntaxRegExpr	= 1,
	vsFindPatternSyntaxWildcards	= 2
    } 	vsFindPatternSyntax;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("481899fb-b657-4e45-8c00-0e051052bb13") 
enum vsFindTarget
    {	vsFindTargetCurrentDocument	= 1,
	vsFindTargetCurrentDocumentSelection	= 2,
	vsFindTargetCurrentDocumentFunction	= 3,
	vsFindTargetOpenDocuments	= 4,
	vsFindTargetCurrentProject	= 5,
	vsFindTargetSolution	= 6,
	vsFindTargetFiles	= 7
    } 	vsFindTarget;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("ea9142bf-b2af-48a7-b256-93ccd3350bd8") 
enum vsFindResultsLocation
    {	vsFindResultsNone	= 0,
	vsFindResults1	= 1,
	vsFindResults2	= 2
    } 	vsFindResultsLocation;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("a457303f-d058-4415-a2b4-a81b148c7689") 
enum vsFindOptions
    {	vsFindOptionsNone	= 0,
	vsFindOptionsMatchWholeWord	= 0x2,
	vsFindOptionsMatchCase	= 0x4,
	vsFindOptionsRegularExpression	= 0x8,
	vsFindOptionsBackwards	= 0x80,
	vsFindOptionsFromStart	= 0x100,
	vsFindOptionsMatchInHiddenText	= 0x200,
	vsFindOptionsWildcards	= 0x400,
	vsFindOptionsSearchSubfolders	= 0x1000,
	vsFindOptionsKeepModifiedDocumentsOpen	= 0x2000
    } 	vsFindOptions;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("b4cc3e73-0038-47e5-ba52-d1183f8fdbf0") 
enum vsNavigateOptions
    {	vsNavigateOptionsDefault	= 0,
	vsNavigateOptionsNewWindow	= 0x1
    } 	vsNavigateOptions;

#define SID_SExtensionManager	IID_ObjectExtenders
typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("221ab797-408b-4d69-9dd1-c6f329189414") 
enum vsFilterProperties
    {	vsFilterPropertiesNone	= 0,
	vsFilterPropertiesAll	= 1,
	vsFilterPropertiesSet	= 2
    } 	vsFilterProperties;

typedef /* [uuid] */  DECLSPEC_UUID("bbdfcfe4-4c68-4736-b991-f85fa955d585") 
enum vsWhitespaceOptions
    {	vsWhitespaceOptionsHorizontal	= 0,
	vsWhitespaceOptionsVertical	= 1
    } 	vsWhitespaceOptions;

typedef /* [uuid] */  DECLSPEC_UUID("98a2f403-007b-41f8-9a18-87addef1760f") 
enum vsCaseOptions
    {	vsCaseOptionsLowercase	= 1,
	vsCaseOptionsUppercase	= 2,
	vsCaseOptionsCapitalize	= 3
    } 	vsCaseOptions;

typedef /* [uuid] */  DECLSPEC_UUID("29182bd4-48a8-4e4b-81dd-1b742a3a5203") 
enum vsMovementOptions
    {	vsMovementOptionsMove	= 0,
	vsMovementOptionsExtend	= 1
    } 	vsMovementOptions;

typedef /* [uuid] */  DECLSPEC_UUID("f05ea427-01ba-46dc-8392-fb4aa7e5eb3a") 
enum vsStartOfLineOptions
    {	vsStartOfLineOptionsFirstColumn	= 0,
	vsStartOfLineOptionsFirstText	= 1
    } 	vsStartOfLineOptions;

typedef /* [uuid] */  DECLSPEC_UUID("11b63a24-6200-48cd-9b8d-fc6a6fb9eff0") 
enum vsGoToLineOptions
    {	vsGoToLineOptionsLast	= -1,
	vsGoToLineOptionsFirst	= -2
    } 	vsGoToLineOptions;

typedef /* [uuid] */  DECLSPEC_UUID("c512dde3-a220-4373-8950-e6636f8cc546") 
enum vsSmartFormatOptions
    {	vsSmartFormatOptionsNone	= 0,
	vsSmartFormatOptionsBlock	= 1,
	vsSmartFormatOptionsSmart	= 2
    } 	vsSmartFormatOptions;

typedef /* [uuid] */  DECLSPEC_UUID("f3128012-b41f-46ec-8794-f716db9697d0") 
enum vsSelectionMode
    {	vsSelectionModeStream	= 0,
	vsSelectionModeBox	= 1
    } 	vsSelectionMode;

typedef /* [uuid] */  DECLSPEC_UUID("79515b53-8294-4f96-aa96-dd16bf126703") 
enum vsInsertFlags
    {	vsInsertFlagsCollapseToEnd	= 1,
	vsInsertFlagsCollapseToStart	= 2,
	vsInsertFlagsContainNewText	= 4,
	vsInsertFlagsInsertAtEnd	= 8,
	vsInsertFlagsInsertAtStart	= 16
    } 	vsInsertFlags;

typedef /* [uuid] */  DECLSPEC_UUID("b26ac3c2-3981-4a2e-9d6f-559b41cd1cd2") 
enum vsPaneShowHow
    {	vsPaneShowCentered	= 0,
	vsPaneShowTop	= 1,
	vsPaneShowAsIs	= 2
    } 	vsPaneShowHow;

typedef /* [uuid] */  DECLSPEC_UUID("4eb2c04f-8a83-4363-81db-dbb76cd76812") 
enum vsMoveToColumnLine
    {	vsMoveToColumnLineFirst	= 0,
	vsMoveToColumnLineLast	= 1
    } 	vsMoveToColumnLine;

typedef /* [uuid] */  DECLSPEC_UUID("3740dcf8-b8b2-49a9-a1ab-944c84876c3c") 
enum vsEPReplaceTextOptions
    {	vsEPReplaceTextKeepMarkers	= 1,
	vsEPReplaceTextNormalizeNewlines	= 2,
	vsEPReplaceTextTabsSpaces	= 4,
	vsEPReplaceTextAutoformat	= 8
    } 	vsEPReplaceTextOptions;

typedef /* [hidden][uuid] */  DECLSPEC_UUID("C106C8DC-6D0C-11D1-B2C9-00C04FB6C6FF") 
enum vsext_FontCharSet
    {	vsext_fontcs_ANSI	= 0,
	vsext_fontcs_DEFAULT	= 1,
	vsext_fontcs_SYMBOL	= 2,
	vsext_fontcs_SHIFTJIS	= 128,
	vsext_fontcs_HANGEUL	= 129,
	vsext_fontcs_GB2312	= 134,
	vsext_fontcs_CHINESEBIG5	= 136,
	vsext_fontcs_OEM	= 255,
	vsext_fontcs_JOHAB	= 130,
	vsext_fontcs_HEBREW	= 177,
	vsext_fontcs_ARABIC	= 178,
	vsext_fontcs_GREEK	= 161,
	vsext_fontcs_TURKISH	= 162,
	vsext_fontcs_VIETNAMESE	= 163,
	vsext_fontcs_THAI	= 222,
	vsext_fontcs_EASTEUROPE	= 238,
	vsext_fontcs_RUSSIAN	= 204,
	vsext_fontcs_MAC	= 77,
	vsext_fontcs_BALTIC	= 186
    } 	vsext_FontCharSet;

typedef /* [hidden][uuid] */  DECLSPEC_UUID("cb0066fc-c052-4b24-84e7-045f33e4d6af") 
enum VSEXECRESULT
    {	RESULT_Success	= -1,
	RESULT_Failure	= 0,
	RESULT_Cancel	= 1
    } 	vs_exec_Result;

typedef /* [hidden][uuid] */  DECLSPEC_UUID("91aab9c3-da83-473a-8bc9-1a2730865995") 
enum vsext_DisplayMode
    {	vsext_dm_SDI	= 0,
	vsext_dm_MDI	= 1
    } 	vsext_DisplayMode;

typedef /* [hidden][uuid] */  DECLSPEC_UUID("E4B9E990-FD59-11D0-BBC6-00A0C90F2744") 
enum vsext_WindowType
    {	vsext_wt_CodeWindow	= 0,
	vsext_wt_Designer	= 1,
	vsext_wt_Browser	= 2,
	vsext_wt_Watch	= 3,
	vsext_wt_Locals	= 4,
	vsext_wt_Immediate	= 5,
	vsext_wt_ProjectWindow	= 6,
	vsext_wt_PropertyWindow	= 7,
	vsext_wt_Find	= 8,
	vsext_wt_FindReplace	= 9,
	vsext_wt_Toolbox	= 10,
	vsext_wt_LinkedWindowFrame	= 11,
	vsext_wt_MainWindow	= 12,
	vsext_wt_Preview	= 13,
	vsext_wt_ColorPalette	= 14,
	vsext_wt_ToolWindow	= 15,
	vsext_wt_Document	= 16,
	vsext_wt_OutPutWindow	= 17,
	vsext_wt_TaskList	= 18,
	vsext_wt_Autos	= 19,
	vsext_wt_CallStack	= 20,
	vsext_wt_Threads	= 21,
	vsext_wt_DocumentOutline	= 22,
	vsext_wt_RunningDocuments	= 23
    } 	vsext_WindowType;

typedef /* [hidden][uuid] */  DECLSPEC_UUID("e0c72e51-6b99-489b-aca6-90cedce888e7") 
enum vsext_WindowState
    {	vsext_ws_Normal	= 0,
	vsext_ws_Minimize	= 1,
	vsext_ws_Maximize	= 2
    } 	vsext_WindowState;

typedef /* [hidden][uuid] */  DECLSPEC_UUID("97653acf-d869-4ec0-b450-e9842457c729") 
enum vsext_LinkedWindowType
    {	vsext_lwt_Docked	= 0,
	vsext_lwt_Tabbed	= 1
    } 	vsext_LinkedWindowType;

typedef /* [hidden][uuid] */  DECLSPEC_UUID("A5578594-18E0-11D1-BBDB-00A0C90F2744") 
enum vsext_StartUp
    {	vsext_su_EMPTY_ENVIRONMENT	= 0,
	vsext_su_NEW_SOLUTION_DIALOG	= 1,
	vsext_su_LOAD_LAST_SOLUTION	= 2
    } 	vsext_StartUp;

typedef /* [hidden][uuid] */  DECLSPEC_UUID("47046891-19F7-11D1-BCAF-000000000000") 
enum vsext_Build
    {	vsext_bld_SAVE_CHANGES	= 0,
	vsext_bld_CONFIRM_SAVE	= 1,
	vsext_bld_NO_SAVE	= 2
    } 	vsext_Build;

typedef /* [hidden][uuid] */  DECLSPEC_UUID("bdbe10aa-74d3-498a-a464-8074cd5e99cb") 
enum DsTextSearchOptions
    {	dsMatchWord	= 2,
	dsMatchCase	= 4,
	dsMatchNoRegExp	= 0,
	dsMatchRegExp	= 8,
	dsMatchRegExpB	= 16,
	dsMatchRegExpE	= 32,
	dsMatchRegExpCur	= 64,
	dsMatchForward	= 0,
	dsMatchBackward	= 128,
	dsMatchFromStart	= 256
    } 	DsTextSearchOptions;

typedef /* [hidden][uuid] */  DECLSPEC_UUID("99744EC4-7A72-11D2-ADC9-00C04F7971C3") 
enum DsSaveChanges
    {	dsSaveChangesYes	= 1,
	dsSaveChangesNo	= 2,
	dsSaveChangesPrompt	= 3
    } 	DsSaveChanges;

typedef /* [hidden][uuid] */  DECLSPEC_UUID("6269c78d-5591-40d6-a095-5bac8ba07478") 
enum DsGoToLineOptions
    {	dsLastLine	= -1
    } 	DsGoToLineOptions;

typedef /* [hidden][uuid] */  DECLSPEC_UUID("95751137-ac07-4c76-a219-4be5d381985d") 
enum DsStartOfLineOptions
    {	dsFirstColumn	= 0,
	dsFirstText	= 1
    } 	DsStartOfLineOptions;

typedef /* [hidden][uuid] */  DECLSPEC_UUID("4b58f807-6f08-4b41-abaf-b5bca4869d2c") 
enum DsMovementOptions
    {	dsMove	= 0,
	dsExtend	= 1
    } 	DsMovementOptions;

typedef /* [hidden][uuid] */  DECLSPEC_UUID("31445615-bcae-4ba0-a99c-246bc660cfe8") 
enum DsWhitespaceOptions
    {	dsHorizontal	= 0,
	dsVertical	= 1
    } 	DsWhitespaceOptions;

typedef /* [hidden][uuid] */  DECLSPEC_UUID("f7d38518-e803-4462-8fa2-e481642d42fb") 
enum DsCaseOptions
    {	dsLowercase	= 1,
	dsUppercase	= 2,
	dsCapitalize	= 3
    } 	DsCaseOptions;

typedef /* [hidden][uuid] */  DECLSPEC_UUID("8d78b9a9-a3be-49d0-aa97-bf7fa46d8ea2") 
enum dsSaveStatus
    {	dsSaveCancelled	= 2,
	dsSaveSucceeded	= 1
    } 	dsSaveStatus;

typedef /* [helpstringcontext][helpstring][helpcontext][uuid] */  DECLSPEC_UUID("44160df5-e305-4d85-b7fe-6b5a1b81b9b0") 
enum vsHTMLTabs
    {	vsHTMLTabsSource	= 0,
	vsHTMLTabsDesign	= 1
    } 	vsHTMLTabs;


EXTERN_C const IID LIBID_EnvDTE;

#ifndef ___DTE_INTERFACE_DEFINED__
#define ___DTE_INTERFACE_DEFINED__

/* interface _DTE */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID__DTE;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("04a72314-32e9-48e2-9b87-a63603454f3e")
    _DTE : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *lpbstrReturn) = 0;
        
        virtual /* [hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_FileName( 
            /* [retval][out] */ BSTR *lpbstrReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Version( 
            /* [retval][out] */ BSTR *lpbstrReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CommandBars( 
            /* [retval][out] */ /* external definition not present */ CommandBars **ppcbs) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Windows( 
            /* [retval][out] */ Windows **ppwnsVBWindows) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Events( 
            /* [retval][out] */ Events **ppevtEvents) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AddIns( 
            /* [retval][out] */ AddIns **lpppAddIns) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MainWindow( 
            /* [retval][out] */ Window **ppwin) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActiveWindow( 
            /* [retval][out] */ Window **ppwinActive) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Quit( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisplayMode( 
            /* [retval][out] */ vsDisplay *lpDispMode) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DisplayMode( 
            /* [in] */ vsDisplay DispMode) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Solution( 
            /* [retval][out] */ Solution	**ppSolution) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Commands( 
            /* [retval][out] */ Commands **ppCommands) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetObject( 
            /* [in] */ BSTR Name,
            /* [retval][out] */ IDispatch **ppObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Properties( 
            BSTR Category,
            BSTR Page,
            /* [retval][out] */ Properties **ppObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SelectedItems( 
            /* [retval][out] */ SelectedItems **ppSelectedItems) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CommandLineArguments( 
            /* [retval][out] */ BSTR *lpbstrReturn) = 0;
        
        virtual /* [hidden][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OpenFile( 
            /* [in] */ BSTR ViewKind,
            /* [in] */ BSTR FileName,
            /* [retval][out] */ Window **ppwin) = 0;
        
        virtual /* [hidden][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsOpenFile( 
            /* [in] */ BSTR ViewKind,
            /* [in] */ BSTR FileName,
            /* [retval][out] */ VARIANT_BOOL *lpfReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LocaleID( 
            /* [retval][out] */ long *lpReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_WindowConfigurations( 
            /* [retval][out] */ WindowConfigurations **WindowConfigurationsObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Documents( 
            /* [retval][out] */ Documents **ppDocuments) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActiveDocument( 
            /* [retval][out] */ Document **ppDocument) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ExecuteCommand( 
            /* [in] */ BSTR CommandName,
            /* [defaultvalue][in] */ BSTR CommandArgs = L"") = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Globals( 
            /* [retval][out] */ Globals **ppGlobals) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StatusBar( 
            /* [retval][out] */ StatusBar **ppStatusBar) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FullName( 
            /* [retval][out] */ BSTR *lpbstrReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_UserControl( 
            /* [retval][out] */ VARIANT_BOOL *UserControl) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_UserControl( 
            /* [in] */ VARIANT_BOOL HasControl) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ObjectExtenders( 
            /* [retval][out] */ ObjectExtenders **ppObjectExtenders) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Find( 
            /* [retval][out] */ Find **ppFind) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Mode( 
            /* [retval][out] */ vsIDEMode *pVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LaunchWizard( 
            /* [in] */ BSTR VSZFile,
            /* [in] */ SAFEARRAY * *ContextParams,
            /* [retval][out] */ wizardResult *pResult) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ItemOperations( 
            /* [retval][out] */ ItemOperations **ppItemOperations) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_UndoContext( 
            /* [retval][out] */ UndoContext **ppUndoContext) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Macros( 
            /* [retval][out] */ Macros **ppMacros) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActiveSolutionProjects( 
            /* [retval][out] */ VARIANT *pProjects) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MacrosIDE( 
            /* [retval][out] */ DTE	**pDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RegistryRoot( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [propget][hidden][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ DTE	**pVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ContextAttributes( 
            /* [retval][out] */ ContextAttributes **ppVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SourceControl( 
            /* [retval][out] */ SourceControl **ppVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SuppressUI( 
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SuppressUI( 
            /* [in] */ VARIANT_BOOL Suppress) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Debugger( 
            /* [retval][out] */ Debugger **ppDebugger) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SatelliteDLLPath( 
            BSTR Path,
            BSTR Name,
            /* [retval][out] */ BSTR *pFullPath) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_Edition( 
            /* [retval][out] */ BSTR *ProductEdition) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _DTEVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _DTE * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _DTE * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _DTE * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _DTE * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _DTE * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _DTE * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _DTE * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            _DTE * This,
            /* [retval][out] */ BSTR *lpbstrReturn);
        
        /* [hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FileName )( 
            _DTE * This,
            /* [retval][out] */ BSTR *lpbstrReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Version )( 
            _DTE * This,
            /* [retval][out] */ BSTR *lpbstrReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CommandBars )( 
            _DTE * This,
            /* [retval][out] */ /* external definition not present */ CommandBars **ppcbs);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Windows )( 
            _DTE * This,
            /* [retval][out] */ Windows **ppwnsVBWindows);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Events )( 
            _DTE * This,
            /* [retval][out] */ Events **ppevtEvents);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AddIns )( 
            _DTE * This,
            /* [retval][out] */ AddIns **lpppAddIns);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MainWindow )( 
            _DTE * This,
            /* [retval][out] */ Window **ppwin);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActiveWindow )( 
            _DTE * This,
            /* [retval][out] */ Window **ppwinActive);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Quit )( 
            _DTE * This);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayMode )( 
            _DTE * This,
            /* [retval][out] */ vsDisplay *lpDispMode);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DisplayMode )( 
            _DTE * This,
            /* [in] */ vsDisplay DispMode);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Solution )( 
            _DTE * This,
            /* [retval][out] */ Solution	**ppSolution);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Commands )( 
            _DTE * This,
            /* [retval][out] */ Commands **ppCommands);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetObject )( 
            _DTE * This,
            /* [in] */ BSTR Name,
            /* [retval][out] */ IDispatch **ppObject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            _DTE * This,
            BSTR Category,
            BSTR Page,
            /* [retval][out] */ Properties **ppObject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SelectedItems )( 
            _DTE * This,
            /* [retval][out] */ SelectedItems **ppSelectedItems);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CommandLineArguments )( 
            _DTE * This,
            /* [retval][out] */ BSTR *lpbstrReturn);
        
        /* [hidden][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OpenFile )( 
            _DTE * This,
            /* [in] */ BSTR ViewKind,
            /* [in] */ BSTR FileName,
            /* [retval][out] */ Window **ppwin);
        
        /* [hidden][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsOpenFile )( 
            _DTE * This,
            /* [in] */ BSTR ViewKind,
            /* [in] */ BSTR FileName,
            /* [retval][out] */ VARIANT_BOOL *lpfReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            _DTE * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LocaleID )( 
            _DTE * This,
            /* [retval][out] */ long *lpReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WindowConfigurations )( 
            _DTE * This,
            /* [retval][out] */ WindowConfigurations **WindowConfigurationsObject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Documents )( 
            _DTE * This,
            /* [retval][out] */ Documents **ppDocuments);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActiveDocument )( 
            _DTE * This,
            /* [retval][out] */ Document **ppDocument);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ExecuteCommand )( 
            _DTE * This,
            /* [in] */ BSTR CommandName,
            /* [defaultvalue][in] */ BSTR CommandArgs);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Globals )( 
            _DTE * This,
            /* [retval][out] */ Globals **ppGlobals);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StatusBar )( 
            _DTE * This,
            /* [retval][out] */ StatusBar **ppStatusBar);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullName )( 
            _DTE * This,
            /* [retval][out] */ BSTR *lpbstrReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UserControl )( 
            _DTE * This,
            /* [retval][out] */ VARIANT_BOOL *UserControl);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_UserControl )( 
            _DTE * This,
            /* [in] */ VARIANT_BOOL HasControl);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectExtenders )( 
            _DTE * This,
            /* [retval][out] */ ObjectExtenders **ppObjectExtenders);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Find )( 
            _DTE * This,
            /* [retval][out] */ Find **ppFind);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Mode )( 
            _DTE * This,
            /* [retval][out] */ vsIDEMode *pVal);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LaunchWizard )( 
            _DTE * This,
            /* [in] */ BSTR VSZFile,
            /* [in] */ SAFEARRAY * *ContextParams,
            /* [retval][out] */ wizardResult *pResult);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ItemOperations )( 
            _DTE * This,
            /* [retval][out] */ ItemOperations **ppItemOperations);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UndoContext )( 
            _DTE * This,
            /* [retval][out] */ UndoContext **ppUndoContext);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Macros )( 
            _DTE * This,
            /* [retval][out] */ Macros **ppMacros);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActiveSolutionProjects )( 
            _DTE * This,
            /* [retval][out] */ VARIANT *pProjects);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MacrosIDE )( 
            _DTE * This,
            /* [retval][out] */ DTE	**pDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RegistryRoot )( 
            _DTE * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [propget][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            _DTE * This,
            /* [retval][out] */ DTE	**pVal);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ContextAttributes )( 
            _DTE * This,
            /* [retval][out] */ ContextAttributes **ppVal);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SourceControl )( 
            _DTE * This,
            /* [retval][out] */ SourceControl **ppVal);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SuppressUI )( 
            _DTE * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SuppressUI )( 
            _DTE * This,
            /* [in] */ VARIANT_BOOL Suppress);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Debugger )( 
            _DTE * This,
            /* [retval][out] */ Debugger **ppDebugger);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SatelliteDLLPath )( 
            _DTE * This,
            BSTR Path,
            BSTR Name,
            /* [retval][out] */ BSTR *pFullPath);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Edition )( 
            _DTE * This,
            /* [retval][out] */ BSTR *ProductEdition);
        
        END_INTERFACE
    } _DTEVtbl;

    interface _DTE
    {
        CONST_VTBL struct _DTEVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _DTE_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _DTE_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _DTE_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _DTE_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _DTE_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _DTE_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _DTE_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define _DTE_get_Name(This,lpbstrReturn)	\
    (This)->lpVtbl -> get_Name(This,lpbstrReturn)

#define _DTE_get_FileName(This,lpbstrReturn)	\
    (This)->lpVtbl -> get_FileName(This,lpbstrReturn)

#define _DTE_get_Version(This,lpbstrReturn)	\
    (This)->lpVtbl -> get_Version(This,lpbstrReturn)

#define _DTE_get_CommandBars(This,ppcbs)	\
    (This)->lpVtbl -> get_CommandBars(This,ppcbs)

#define _DTE_get_Windows(This,ppwnsVBWindows)	\
    (This)->lpVtbl -> get_Windows(This,ppwnsVBWindows)

#define _DTE_get_Events(This,ppevtEvents)	\
    (This)->lpVtbl -> get_Events(This,ppevtEvents)

#define _DTE_get_AddIns(This,lpppAddIns)	\
    (This)->lpVtbl -> get_AddIns(This,lpppAddIns)

#define _DTE_get_MainWindow(This,ppwin)	\
    (This)->lpVtbl -> get_MainWindow(This,ppwin)

#define _DTE_get_ActiveWindow(This,ppwinActive)	\
    (This)->lpVtbl -> get_ActiveWindow(This,ppwinActive)

#define _DTE_Quit(This)	\
    (This)->lpVtbl -> Quit(This)

#define _DTE_get_DisplayMode(This,lpDispMode)	\
    (This)->lpVtbl -> get_DisplayMode(This,lpDispMode)

#define _DTE_put_DisplayMode(This,DispMode)	\
    (This)->lpVtbl -> put_DisplayMode(This,DispMode)

#define _DTE_get_Solution(This,ppSolution)	\
    (This)->lpVtbl -> get_Solution(This,ppSolution)

#define _DTE_get_Commands(This,ppCommands)	\
    (This)->lpVtbl -> get_Commands(This,ppCommands)

#define _DTE_GetObject(This,Name,ppObject)	\
    (This)->lpVtbl -> GetObject(This,Name,ppObject)

#define _DTE_get_Properties(This,Category,Page,ppObject)	\
    (This)->lpVtbl -> get_Properties(This,Category,Page,ppObject)

#define _DTE_get_SelectedItems(This,ppSelectedItems)	\
    (This)->lpVtbl -> get_SelectedItems(This,ppSelectedItems)

#define _DTE_get_CommandLineArguments(This,lpbstrReturn)	\
    (This)->lpVtbl -> get_CommandLineArguments(This,lpbstrReturn)

#define _DTE_OpenFile(This,ViewKind,FileName,ppwin)	\
    (This)->lpVtbl -> OpenFile(This,ViewKind,FileName,ppwin)

#define _DTE_get_IsOpenFile(This,ViewKind,FileName,lpfReturn)	\
    (This)->lpVtbl -> get_IsOpenFile(This,ViewKind,FileName,lpfReturn)

#define _DTE_get_DTE(This,lppaReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppaReturn)

#define _DTE_get_LocaleID(This,lpReturn)	\
    (This)->lpVtbl -> get_LocaleID(This,lpReturn)

#define _DTE_get_WindowConfigurations(This,WindowConfigurationsObject)	\
    (This)->lpVtbl -> get_WindowConfigurations(This,WindowConfigurationsObject)

#define _DTE_get_Documents(This,ppDocuments)	\
    (This)->lpVtbl -> get_Documents(This,ppDocuments)

#define _DTE_get_ActiveDocument(This,ppDocument)	\
    (This)->lpVtbl -> get_ActiveDocument(This,ppDocument)

#define _DTE_ExecuteCommand(This,CommandName,CommandArgs)	\
    (This)->lpVtbl -> ExecuteCommand(This,CommandName,CommandArgs)

#define _DTE_get_Globals(This,ppGlobals)	\
    (This)->lpVtbl -> get_Globals(This,ppGlobals)

#define _DTE_get_StatusBar(This,ppStatusBar)	\
    (This)->lpVtbl -> get_StatusBar(This,ppStatusBar)

#define _DTE_get_FullName(This,lpbstrReturn)	\
    (This)->lpVtbl -> get_FullName(This,lpbstrReturn)

#define _DTE_get_UserControl(This,UserControl)	\
    (This)->lpVtbl -> get_UserControl(This,UserControl)

#define _DTE_put_UserControl(This,HasControl)	\
    (This)->lpVtbl -> put_UserControl(This,HasControl)

#define _DTE_get_ObjectExtenders(This,ppObjectExtenders)	\
    (This)->lpVtbl -> get_ObjectExtenders(This,ppObjectExtenders)

#define _DTE_get_Find(This,ppFind)	\
    (This)->lpVtbl -> get_Find(This,ppFind)

#define _DTE_get_Mode(This,pVal)	\
    (This)->lpVtbl -> get_Mode(This,pVal)

#define _DTE_LaunchWizard(This,VSZFile,ContextParams,pResult)	\
    (This)->lpVtbl -> LaunchWizard(This,VSZFile,ContextParams,pResult)

#define _DTE_get_ItemOperations(This,ppItemOperations)	\
    (This)->lpVtbl -> get_ItemOperations(This,ppItemOperations)

#define _DTE_get_UndoContext(This,ppUndoContext)	\
    (This)->lpVtbl -> get_UndoContext(This,ppUndoContext)

#define _DTE_get_Macros(This,ppMacros)	\
    (This)->lpVtbl -> get_Macros(This,ppMacros)

#define _DTE_get_ActiveSolutionProjects(This,pProjects)	\
    (This)->lpVtbl -> get_ActiveSolutionProjects(This,pProjects)

#define _DTE_get_MacrosIDE(This,pDTE)	\
    (This)->lpVtbl -> get_MacrosIDE(This,pDTE)

#define _DTE_get_RegistryRoot(This,pVal)	\
    (This)->lpVtbl -> get_RegistryRoot(This,pVal)

#define _DTE_get_Application(This,pVal)	\
    (This)->lpVtbl -> get_Application(This,pVal)

#define _DTE_get_ContextAttributes(This,ppVal)	\
    (This)->lpVtbl -> get_ContextAttributes(This,ppVal)

#define _DTE_get_SourceControl(This,ppVal)	\
    (This)->lpVtbl -> get_SourceControl(This,ppVal)

#define _DTE_get_SuppressUI(This,pVal)	\
    (This)->lpVtbl -> get_SuppressUI(This,pVal)

#define _DTE_put_SuppressUI(This,Suppress)	\
    (This)->lpVtbl -> put_SuppressUI(This,Suppress)

#define _DTE_get_Debugger(This,ppDebugger)	\
    (This)->lpVtbl -> get_Debugger(This,ppDebugger)

#define _DTE_SatelliteDLLPath(This,Path,Name,pFullPath)	\
    (This)->lpVtbl -> SatelliteDLLPath(This,Path,Name,pFullPath)

#define _DTE_get_Edition(This,ProductEdition)	\
    (This)->lpVtbl -> get_Edition(This,ProductEdition)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_Name_Proxy( 
    _DTE * This,
    /* [retval][out] */ BSTR *lpbstrReturn);


void __RPC_STUB _DTE_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_FileName_Proxy( 
    _DTE * This,
    /* [retval][out] */ BSTR *lpbstrReturn);


void __RPC_STUB _DTE_get_FileName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_Version_Proxy( 
    _DTE * This,
    /* [retval][out] */ BSTR *lpbstrReturn);


void __RPC_STUB _DTE_get_Version_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_CommandBars_Proxy( 
    _DTE * This,
    /* [retval][out] */ /* external definition not present */ CommandBars **ppcbs);


void __RPC_STUB _DTE_get_CommandBars_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_Windows_Proxy( 
    _DTE * This,
    /* [retval][out] */ Windows **ppwnsVBWindows);


void __RPC_STUB _DTE_get_Windows_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_Events_Proxy( 
    _DTE * This,
    /* [retval][out] */ Events **ppevtEvents);


void __RPC_STUB _DTE_get_Events_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_AddIns_Proxy( 
    _DTE * This,
    /* [retval][out] */ AddIns **lpppAddIns);


void __RPC_STUB _DTE_get_AddIns_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_MainWindow_Proxy( 
    _DTE * This,
    /* [retval][out] */ Window **ppwin);


void __RPC_STUB _DTE_get_MainWindow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_ActiveWindow_Proxy( 
    _DTE * This,
    /* [retval][out] */ Window **ppwinActive);


void __RPC_STUB _DTE_get_ActiveWindow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE _DTE_Quit_Proxy( 
    _DTE * This);


void __RPC_STUB _DTE_Quit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_DisplayMode_Proxy( 
    _DTE * This,
    /* [retval][out] */ vsDisplay *lpDispMode);


void __RPC_STUB _DTE_get_DisplayMode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _DTE_put_DisplayMode_Proxy( 
    _DTE * This,
    /* [in] */ vsDisplay DispMode);


void __RPC_STUB _DTE_put_DisplayMode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_Solution_Proxy( 
    _DTE * This,
    /* [retval][out] */ Solution	**ppSolution);


void __RPC_STUB _DTE_get_Solution_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_Commands_Proxy( 
    _DTE * This,
    /* [retval][out] */ Commands **ppCommands);


void __RPC_STUB _DTE_get_Commands_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE _DTE_GetObject_Proxy( 
    _DTE * This,
    /* [in] */ BSTR Name,
    /* [retval][out] */ IDispatch **ppObject);


void __RPC_STUB _DTE_GetObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_Properties_Proxy( 
    _DTE * This,
    BSTR Category,
    BSTR Page,
    /* [retval][out] */ Properties **ppObject);


void __RPC_STUB _DTE_get_Properties_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_SelectedItems_Proxy( 
    _DTE * This,
    /* [retval][out] */ SelectedItems **ppSelectedItems);


void __RPC_STUB _DTE_get_SelectedItems_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_CommandLineArguments_Proxy( 
    _DTE * This,
    /* [retval][out] */ BSTR *lpbstrReturn);


void __RPC_STUB _DTE_get_CommandLineArguments_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE _DTE_OpenFile_Proxy( 
    _DTE * This,
    /* [in] */ BSTR ViewKind,
    /* [in] */ BSTR FileName,
    /* [retval][out] */ Window **ppwin);


void __RPC_STUB _DTE_OpenFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_IsOpenFile_Proxy( 
    _DTE * This,
    /* [in] */ BSTR ViewKind,
    /* [in] */ BSTR FileName,
    /* [retval][out] */ VARIANT_BOOL *lpfReturn);


void __RPC_STUB _DTE_get_IsOpenFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_DTE_Proxy( 
    _DTE * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB _DTE_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_LocaleID_Proxy( 
    _DTE * This,
    /* [retval][out] */ long *lpReturn);


void __RPC_STUB _DTE_get_LocaleID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_WindowConfigurations_Proxy( 
    _DTE * This,
    /* [retval][out] */ WindowConfigurations **WindowConfigurationsObject);


void __RPC_STUB _DTE_get_WindowConfigurations_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_Documents_Proxy( 
    _DTE * This,
    /* [retval][out] */ Documents **ppDocuments);


void __RPC_STUB _DTE_get_Documents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_ActiveDocument_Proxy( 
    _DTE * This,
    /* [retval][out] */ Document **ppDocument);


void __RPC_STUB _DTE_get_ActiveDocument_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE _DTE_ExecuteCommand_Proxy( 
    _DTE * This,
    /* [in] */ BSTR CommandName,
    /* [defaultvalue][in] */ BSTR CommandArgs);


void __RPC_STUB _DTE_ExecuteCommand_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_Globals_Proxy( 
    _DTE * This,
    /* [retval][out] */ Globals **ppGlobals);


void __RPC_STUB _DTE_get_Globals_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_StatusBar_Proxy( 
    _DTE * This,
    /* [retval][out] */ StatusBar **ppStatusBar);


void __RPC_STUB _DTE_get_StatusBar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_FullName_Proxy( 
    _DTE * This,
    /* [retval][out] */ BSTR *lpbstrReturn);


void __RPC_STUB _DTE_get_FullName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_UserControl_Proxy( 
    _DTE * This,
    /* [retval][out] */ VARIANT_BOOL *UserControl);


void __RPC_STUB _DTE_get_UserControl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _DTE_put_UserControl_Proxy( 
    _DTE * This,
    /* [in] */ VARIANT_BOOL HasControl);


void __RPC_STUB _DTE_put_UserControl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_ObjectExtenders_Proxy( 
    _DTE * This,
    /* [retval][out] */ ObjectExtenders **ppObjectExtenders);


void __RPC_STUB _DTE_get_ObjectExtenders_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_Find_Proxy( 
    _DTE * This,
    /* [retval][out] */ Find **ppFind);


void __RPC_STUB _DTE_get_Find_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_Mode_Proxy( 
    _DTE * This,
    /* [retval][out] */ vsIDEMode *pVal);


void __RPC_STUB _DTE_get_Mode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE _DTE_LaunchWizard_Proxy( 
    _DTE * This,
    /* [in] */ BSTR VSZFile,
    /* [in] */ SAFEARRAY * *ContextParams,
    /* [retval][out] */ wizardResult *pResult);


void __RPC_STUB _DTE_LaunchWizard_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_ItemOperations_Proxy( 
    _DTE * This,
    /* [retval][out] */ ItemOperations **ppItemOperations);


void __RPC_STUB _DTE_get_ItemOperations_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_UndoContext_Proxy( 
    _DTE * This,
    /* [retval][out] */ UndoContext **ppUndoContext);


void __RPC_STUB _DTE_get_UndoContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_Macros_Proxy( 
    _DTE * This,
    /* [retval][out] */ Macros **ppMacros);


void __RPC_STUB _DTE_get_Macros_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_ActiveSolutionProjects_Proxy( 
    _DTE * This,
    /* [retval][out] */ VARIANT *pProjects);


void __RPC_STUB _DTE_get_ActiveSolutionProjects_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_MacrosIDE_Proxy( 
    _DTE * This,
    /* [retval][out] */ DTE	**pDTE);


void __RPC_STUB _DTE_get_MacrosIDE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_RegistryRoot_Proxy( 
    _DTE * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB _DTE_get_RegistryRoot_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][hidden][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_Application_Proxy( 
    _DTE * This,
    /* [retval][out] */ DTE	**pVal);


void __RPC_STUB _DTE_get_Application_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_ContextAttributes_Proxy( 
    _DTE * This,
    /* [retval][out] */ ContextAttributes **ppVal);


void __RPC_STUB _DTE_get_ContextAttributes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_SourceControl_Proxy( 
    _DTE * This,
    /* [retval][out] */ SourceControl **ppVal);


void __RPC_STUB _DTE_get_SourceControl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_SuppressUI_Proxy( 
    _DTE * This,
    /* [retval][out] */ VARIANT_BOOL *pVal);


void __RPC_STUB _DTE_get_SuppressUI_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _DTE_put_SuppressUI_Proxy( 
    _DTE * This,
    /* [in] */ VARIANT_BOOL Suppress);


void __RPC_STUB _DTE_put_SuppressUI_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_Debugger_Proxy( 
    _DTE * This,
    /* [retval][out] */ Debugger **ppDebugger);


void __RPC_STUB _DTE_get_Debugger_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE _DTE_SatelliteDLLPath_Proxy( 
    _DTE * This,
    BSTR Path,
    BSTR Name,
    /* [retval][out] */ BSTR *pFullPath);


void __RPC_STUB _DTE_SatelliteDLLPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE _DTE_get_Edition_Proxy( 
    _DTE * This,
    /* [retval][out] */ BSTR *ProductEdition);


void __RPC_STUB _DTE_get_Edition_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* ___DTE_INTERFACE_DEFINED__ */


#ifndef ___Solution_INTERFACE_DEFINED__
#define ___Solution_INTERFACE_DEFINED__

/* interface _Solution */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID__Solution;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("26f6cc4b-7a48-4e4d-8af5-9e960232e05f")
    _Solution : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT index,
            /* [retval][out] */ Project **lppcReturn) = 0;
        
        virtual /* [id][restricted] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **lppiuReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *lplReturn) = 0;
        
        virtual /* [hidden][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FileName( 
            /* [retval][out] */ BSTR *lpbstrReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveAs( 
            /* [in] */ BSTR FileName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddFromTemplate( 
            /* [in] */ BSTR FileName,
            /* [in] */ BSTR Destination,
            /* [in] */ BSTR ProjectName,
            /* [defaultvalue][in] */ VARIANT_BOOL Exclusive,
            /* [retval][out] */ Project **IppptReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddFromFile( 
            /* [in] */ BSTR FileName,
            /* [defaultvalue][in] */ VARIANT_BOOL Exclusive,
            /* [retval][out] */ Project **IppptReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Open( 
            /* [in] */ BSTR FileName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Close( 
            /* [defaultvalue][in] */ VARIANT_BOOL SaveFirst = 0) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Properties( 
            /* [retval][out] */ Properties **ppObject) = 0;
        
        virtual /* [hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsDirty( 
            /* [retval][out] */ VARIANT_BOOL *lpfReturn) = 0;
        
        virtual /* [hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_IsDirty( 
            /* [in] */ VARIANT_BOOL fDirty) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Remove( 
            /* [in] */ Project *proj) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TemplatePath( 
            /* [in] */ BSTR ProjectType,
            /* [retval][out] */ BSTR *lpbstrPath) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FullName( 
            /* [retval][out] */ BSTR *lpbstrReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Saved( 
            /* [retval][out] */ VARIANT_BOOL *lpfReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Saved( 
            /* [in] */ VARIANT_BOOL fDirty) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Globals( 
            /* [retval][out] */ Globals **ppGlobals) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AddIns( 
            /* [retval][out] */ AddIns **ppAddIns) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_Extender( 
            /* [in] */ BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderNames( 
            /* [retval][out] */ VARIANT *ExtenderNames) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderCATID( 
            /* [retval][out] */ BSTR *pRetval) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsOpen( 
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SolutionBuild( 
            /* [retval][out] */ SolutionBuild **ppSolutionBuild) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Create( 
            BSTR Destination,
            BSTR Name) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Projects( 
            /* [retval][out] */ Projects **ppProjects) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FindProjectItem( 
            BSTR FileName,
            /* [retval][out] */ ProjectItem **ppProjectItem) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ProjectItemsTemplatePath( 
            BSTR ProjectKind,
            /* [retval][out] */ BSTR *pFullPath) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _SolutionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _Solution * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _Solution * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _Solution * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _Solution * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _Solution * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _Solution * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _Solution * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            _Solution * This,
            /* [in] */ VARIANT index,
            /* [retval][out] */ Project **lppcReturn);
        
        /* [id][restricted] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            _Solution * This,
            /* [retval][out] */ IUnknown **lppiuReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            _Solution * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            _Solution * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            _Solution * This,
            /* [retval][out] */ long *lplReturn);
        
        /* [hidden][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FileName )( 
            _Solution * This,
            /* [retval][out] */ BSTR *lpbstrReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveAs )( 
            _Solution * This,
            /* [in] */ BSTR FileName);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddFromTemplate )( 
            _Solution * This,
            /* [in] */ BSTR FileName,
            /* [in] */ BSTR Destination,
            /* [in] */ BSTR ProjectName,
            /* [defaultvalue][in] */ VARIANT_BOOL Exclusive,
            /* [retval][out] */ Project **IppptReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddFromFile )( 
            _Solution * This,
            /* [in] */ BSTR FileName,
            /* [defaultvalue][in] */ VARIANT_BOOL Exclusive,
            /* [retval][out] */ Project **IppptReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Open )( 
            _Solution * This,
            /* [in] */ BSTR FileName);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Close )( 
            _Solution * This,
            /* [defaultvalue][in] */ VARIANT_BOOL SaveFirst);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            _Solution * This,
            /* [retval][out] */ Properties **ppObject);
        
        /* [hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDirty )( 
            _Solution * This,
            /* [retval][out] */ VARIANT_BOOL *lpfReturn);
        
        /* [hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IsDirty )( 
            _Solution * This,
            /* [in] */ VARIANT_BOOL fDirty);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Remove )( 
            _Solution * This,
            /* [in] */ Project *proj);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TemplatePath )( 
            _Solution * This,
            /* [in] */ BSTR ProjectType,
            /* [retval][out] */ BSTR *lpbstrPath);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullName )( 
            _Solution * This,
            /* [retval][out] */ BSTR *lpbstrReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Saved )( 
            _Solution * This,
            /* [retval][out] */ VARIANT_BOOL *lpfReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Saved )( 
            _Solution * This,
            /* [in] */ VARIANT_BOOL fDirty);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Globals )( 
            _Solution * This,
            /* [retval][out] */ Globals **ppGlobals);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AddIns )( 
            _Solution * This,
            /* [retval][out] */ AddIns **ppAddIns);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Extender )( 
            _Solution * This,
            /* [in] */ BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderNames )( 
            _Solution * This,
            /* [retval][out] */ VARIANT *ExtenderNames);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderCATID )( 
            _Solution * This,
            /* [retval][out] */ BSTR *pRetval);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsOpen )( 
            _Solution * This,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SolutionBuild )( 
            _Solution * This,
            /* [retval][out] */ SolutionBuild **ppSolutionBuild);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Create )( 
            _Solution * This,
            BSTR Destination,
            BSTR Name);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Projects )( 
            _Solution * This,
            /* [retval][out] */ Projects **ppProjects);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *FindProjectItem )( 
            _Solution * This,
            BSTR FileName,
            /* [retval][out] */ ProjectItem **ppProjectItem);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ProjectItemsTemplatePath )( 
            _Solution * This,
            BSTR ProjectKind,
            /* [retval][out] */ BSTR *pFullPath);
        
        END_INTERFACE
    } _SolutionVtbl;

    interface _Solution
    {
        CONST_VTBL struct _SolutionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _Solution_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _Solution_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _Solution_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _Solution_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _Solution_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _Solution_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _Solution_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define _Solution_Item(This,index,lppcReturn)	\
    (This)->lpVtbl -> Item(This,index,lppcReturn)

#define _Solution__NewEnum(This,lppiuReturn)	\
    (This)->lpVtbl -> _NewEnum(This,lppiuReturn)

#define _Solution_get_DTE(This,lppaReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppaReturn)

#define _Solution_get_Parent(This,lppaReturn)	\
    (This)->lpVtbl -> get_Parent(This,lppaReturn)

#define _Solution_get_Count(This,lplReturn)	\
    (This)->lpVtbl -> get_Count(This,lplReturn)

#define _Solution_get_FileName(This,lpbstrReturn)	\
    (This)->lpVtbl -> get_FileName(This,lpbstrReturn)

#define _Solution_SaveAs(This,FileName)	\
    (This)->lpVtbl -> SaveAs(This,FileName)

#define _Solution_AddFromTemplate(This,FileName,Destination,ProjectName,Exclusive,IppptReturn)	\
    (This)->lpVtbl -> AddFromTemplate(This,FileName,Destination,ProjectName,Exclusive,IppptReturn)

#define _Solution_AddFromFile(This,FileName,Exclusive,IppptReturn)	\
    (This)->lpVtbl -> AddFromFile(This,FileName,Exclusive,IppptReturn)

#define _Solution_Open(This,FileName)	\
    (This)->lpVtbl -> Open(This,FileName)

#define _Solution_Close(This,SaveFirst)	\
    (This)->lpVtbl -> Close(This,SaveFirst)

#define _Solution_get_Properties(This,ppObject)	\
    (This)->lpVtbl -> get_Properties(This,ppObject)

#define _Solution_get_IsDirty(This,lpfReturn)	\
    (This)->lpVtbl -> get_IsDirty(This,lpfReturn)

#define _Solution_put_IsDirty(This,fDirty)	\
    (This)->lpVtbl -> put_IsDirty(This,fDirty)

#define _Solution_Remove(This,proj)	\
    (This)->lpVtbl -> Remove(This,proj)

#define _Solution_get_TemplatePath(This,ProjectType,lpbstrPath)	\
    (This)->lpVtbl -> get_TemplatePath(This,ProjectType,lpbstrPath)

#define _Solution_get_FullName(This,lpbstrReturn)	\
    (This)->lpVtbl -> get_FullName(This,lpbstrReturn)

#define _Solution_get_Saved(This,lpfReturn)	\
    (This)->lpVtbl -> get_Saved(This,lpfReturn)

#define _Solution_put_Saved(This,fDirty)	\
    (This)->lpVtbl -> put_Saved(This,fDirty)

#define _Solution_get_Globals(This,ppGlobals)	\
    (This)->lpVtbl -> get_Globals(This,ppGlobals)

#define _Solution_get_AddIns(This,ppAddIns)	\
    (This)->lpVtbl -> get_AddIns(This,ppAddIns)

#define _Solution_get_Extender(This,ExtenderName,Extender)	\
    (This)->lpVtbl -> get_Extender(This,ExtenderName,Extender)

#define _Solution_get_ExtenderNames(This,ExtenderNames)	\
    (This)->lpVtbl -> get_ExtenderNames(This,ExtenderNames)

#define _Solution_get_ExtenderCATID(This,pRetval)	\
    (This)->lpVtbl -> get_ExtenderCATID(This,pRetval)

#define _Solution_get_IsOpen(This,pVal)	\
    (This)->lpVtbl -> get_IsOpen(This,pVal)

#define _Solution_get_SolutionBuild(This,ppSolutionBuild)	\
    (This)->lpVtbl -> get_SolutionBuild(This,ppSolutionBuild)

#define _Solution_Create(This,Destination,Name)	\
    (This)->lpVtbl -> Create(This,Destination,Name)

#define _Solution_get_Projects(This,ppProjects)	\
    (This)->lpVtbl -> get_Projects(This,ppProjects)

#define _Solution_FindProjectItem(This,FileName,ppProjectItem)	\
    (This)->lpVtbl -> FindProjectItem(This,FileName,ppProjectItem)

#define _Solution_ProjectItemsTemplatePath(This,ProjectKind,pFullPath)	\
    (This)->lpVtbl -> ProjectItemsTemplatePath(This,ProjectKind,pFullPath)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Solution_Item_Proxy( 
    _Solution * This,
    /* [in] */ VARIANT index,
    /* [retval][out] */ Project **lppcReturn);


void __RPC_STUB _Solution_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][restricted] */ HRESULT STDMETHODCALLTYPE _Solution__NewEnum_Proxy( 
    _Solution * This,
    /* [retval][out] */ IUnknown **lppiuReturn);


void __RPC_STUB _Solution__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Solution_get_DTE_Proxy( 
    _Solution * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB _Solution_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Solution_get_Parent_Proxy( 
    _Solution * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB _Solution_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Solution_get_Count_Proxy( 
    _Solution * This,
    /* [retval][out] */ long *lplReturn);


void __RPC_STUB _Solution_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Solution_get_FileName_Proxy( 
    _Solution * This,
    /* [retval][out] */ BSTR *lpbstrReturn);


void __RPC_STUB _Solution_get_FileName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Solution_SaveAs_Proxy( 
    _Solution * This,
    /* [in] */ BSTR FileName);


void __RPC_STUB _Solution_SaveAs_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Solution_AddFromTemplate_Proxy( 
    _Solution * This,
    /* [in] */ BSTR FileName,
    /* [in] */ BSTR Destination,
    /* [in] */ BSTR ProjectName,
    /* [defaultvalue][in] */ VARIANT_BOOL Exclusive,
    /* [retval][out] */ Project **IppptReturn);


void __RPC_STUB _Solution_AddFromTemplate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Solution_AddFromFile_Proxy( 
    _Solution * This,
    /* [in] */ BSTR FileName,
    /* [defaultvalue][in] */ VARIANT_BOOL Exclusive,
    /* [retval][out] */ Project **IppptReturn);


void __RPC_STUB _Solution_AddFromFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Solution_Open_Proxy( 
    _Solution * This,
    /* [in] */ BSTR FileName);


void __RPC_STUB _Solution_Open_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Solution_Close_Proxy( 
    _Solution * This,
    /* [defaultvalue][in] */ VARIANT_BOOL SaveFirst);


void __RPC_STUB _Solution_Close_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Solution_get_Properties_Proxy( 
    _Solution * This,
    /* [retval][out] */ Properties **ppObject);


void __RPC_STUB _Solution_get_Properties_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][propget][id] */ HRESULT STDMETHODCALLTYPE _Solution_get_IsDirty_Proxy( 
    _Solution * This,
    /* [retval][out] */ VARIANT_BOOL *lpfReturn);


void __RPC_STUB _Solution_get_IsDirty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][propput][id] */ HRESULT STDMETHODCALLTYPE _Solution_put_IsDirty_Proxy( 
    _Solution * This,
    /* [in] */ VARIANT_BOOL fDirty);


void __RPC_STUB _Solution_put_IsDirty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Solution_Remove_Proxy( 
    _Solution * This,
    /* [in] */ Project *proj);


void __RPC_STUB _Solution_Remove_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Solution_get_TemplatePath_Proxy( 
    _Solution * This,
    /* [in] */ BSTR ProjectType,
    /* [retval][out] */ BSTR *lpbstrPath);


void __RPC_STUB _Solution_get_TemplatePath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Solution_get_FullName_Proxy( 
    _Solution * This,
    /* [retval][out] */ BSTR *lpbstrReturn);


void __RPC_STUB _Solution_get_FullName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Solution_get_Saved_Proxy( 
    _Solution * This,
    /* [retval][out] */ VARIANT_BOOL *lpfReturn);


void __RPC_STUB _Solution_get_Saved_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE _Solution_put_Saved_Proxy( 
    _Solution * This,
    /* [in] */ VARIANT_BOOL fDirty);


void __RPC_STUB _Solution_put_Saved_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Solution_get_Globals_Proxy( 
    _Solution * This,
    /* [retval][out] */ Globals **ppGlobals);


void __RPC_STUB _Solution_get_Globals_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Solution_get_AddIns_Proxy( 
    _Solution * This,
    /* [retval][out] */ AddIns **ppAddIns);


void __RPC_STUB _Solution_get_AddIns_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE _Solution_get_Extender_Proxy( 
    _Solution * This,
    /* [in] */ BSTR ExtenderName,
    /* [retval][out] */ IDispatch **Extender);


void __RPC_STUB _Solution_get_Extender_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE _Solution_get_ExtenderNames_Proxy( 
    _Solution * This,
    /* [retval][out] */ VARIANT *ExtenderNames);


void __RPC_STUB _Solution_get_ExtenderNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE _Solution_get_ExtenderCATID_Proxy( 
    _Solution * This,
    /* [retval][out] */ BSTR *pRetval);


void __RPC_STUB _Solution_get_ExtenderCATID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Solution_get_IsOpen_Proxy( 
    _Solution * This,
    /* [retval][out] */ VARIANT_BOOL *pVal);


void __RPC_STUB _Solution_get_IsOpen_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Solution_get_SolutionBuild_Proxy( 
    _Solution * This,
    /* [retval][out] */ SolutionBuild **ppSolutionBuild);


void __RPC_STUB _Solution_get_SolutionBuild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Solution_Create_Proxy( 
    _Solution * This,
    BSTR Destination,
    BSTR Name);


void __RPC_STUB _Solution_Create_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE _Solution_get_Projects_Proxy( 
    _Solution * This,
    /* [retval][out] */ Projects **ppProjects);


void __RPC_STUB _Solution_get_Projects_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Solution_FindProjectItem_Proxy( 
    _Solution * This,
    BSTR FileName,
    /* [retval][out] */ ProjectItem **ppProjectItem);


void __RPC_STUB _Solution_FindProjectItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE _Solution_ProjectItemsTemplatePath_Proxy( 
    _Solution * This,
    BSTR ProjectKind,
    /* [retval][out] */ BSTR *pFullPath);


void __RPC_STUB _Solution_ProjectItemsTemplatePath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* ___Solution_INTERFACE_DEFINED__ */


#ifndef __Projects_INTERFACE_DEFINED__
#define __Projects_INTERFACE_DEFINED__

/* interface Projects */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_Projects;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e3ec0add-31b3-461f-8303-8a5e6931257a")
    Projects : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT index,
            /* [retval][out] */ Project **lppcReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *lplReturn) = 0;
        
        virtual /* [id][restricted] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **lppiuReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Properties( 
            /* [retval][out] */ Properties **ppObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Kind( 
            /* [retval][out] */ BSTR *lpbstrReturn) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ProjectsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Projects * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Projects * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Projects * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Projects * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Projects * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Projects * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Projects * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Projects * This,
            /* [in] */ VARIANT index,
            /* [retval][out] */ Project **lppcReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Projects * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Projects * This,
            /* [retval][out] */ long *lplReturn);
        
        /* [id][restricted] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            Projects * This,
            /* [retval][out] */ IUnknown **lppiuReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Projects * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            Projects * This,
            /* [retval][out] */ Properties **ppObject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Kind )( 
            Projects * This,
            /* [retval][out] */ BSTR *lpbstrReturn);
        
        END_INTERFACE
    } ProjectsVtbl;

    interface Projects
    {
        CONST_VTBL struct ProjectsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Projects_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Projects_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Projects_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Projects_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Projects_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Projects_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Projects_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Projects_Item(This,index,lppcReturn)	\
    (This)->lpVtbl -> Item(This,index,lppcReturn)

#define Projects_get_Parent(This,lppaReturn)	\
    (This)->lpVtbl -> get_Parent(This,lppaReturn)

#define Projects_get_Count(This,lplReturn)	\
    (This)->lpVtbl -> get_Count(This,lplReturn)

#define Projects__NewEnum(This,lppiuReturn)	\
    (This)->lpVtbl -> _NewEnum(This,lppiuReturn)

#define Projects_get_DTE(This,lppaReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppaReturn)

#define Projects_get_Properties(This,ppObject)	\
    (This)->lpVtbl -> get_Properties(This,ppObject)

#define Projects_get_Kind(This,lpbstrReturn)	\
    (This)->lpVtbl -> get_Kind(This,lpbstrReturn)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Projects_Item_Proxy( 
    Projects * This,
    /* [in] */ VARIANT index,
    /* [retval][out] */ Project **lppcReturn);


void __RPC_STUB Projects_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Projects_get_Parent_Proxy( 
    Projects * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB Projects_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Projects_get_Count_Proxy( 
    Projects * This,
    /* [retval][out] */ long *lplReturn);


void __RPC_STUB Projects_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][restricted] */ HRESULT STDMETHODCALLTYPE Projects__NewEnum_Proxy( 
    Projects * This,
    /* [retval][out] */ IUnknown **lppiuReturn);


void __RPC_STUB Projects__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Projects_get_DTE_Proxy( 
    Projects * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB Projects_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Projects_get_Properties_Proxy( 
    Projects * This,
    /* [retval][out] */ Properties **ppObject);


void __RPC_STUB Projects_get_Properties_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Projects_get_Kind_Proxy( 
    Projects * This,
    /* [retval][out] */ BSTR *lpbstrReturn);


void __RPC_STUB Projects_get_Kind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Projects_INTERFACE_DEFINED__ */


#ifndef __Project_INTERFACE_DEFINED__
#define __Project_INTERFACE_DEFINED__

/* interface Project */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_Project;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("866311e6-c887-4143-9833-645f5b93f6f1")
    Project : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *lpbstrName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR bstrName) = 0;
        
        virtual /* [hidden][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FileName( 
            /* [retval][out] */ BSTR *lpbstrReturn) = 0;
        
        virtual /* [hidden][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsDirty( 
            /* [retval][out] */ VARIANT_BOOL *lpfReturn) = 0;
        
        virtual /* [hidden][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_IsDirty( 
            /* [in] */ VARIANT_BOOL Dirty) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ Projects **lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveAs( 
            /* [in] */ BSTR NewFileName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Kind( 
            /* [retval][out] */ BSTR *lpbstrFileName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProjectItems( 
            /* [retval][out] */ ProjectItems **lppcReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Properties( 
            /* [retval][out] */ Properties **ppObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_UniqueName( 
            /* [retval][out] */ BSTR *lpbstrFileName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Object( 
            /* [retval][out] */ IDispatch **ProjectModel) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_Extender( 
            /* [in] */ BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderNames( 
            /* [retval][out] */ VARIANT *ExtenderNames) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderCATID( 
            /* [retval][out] */ BSTR *pRetval) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FullName( 
            /* [retval][out] */ BSTR *lpbstrReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Saved( 
            /* [retval][out] */ VARIANT_BOOL *lpfReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Saved( 
            /* [in] */ VARIANT_BOOL SavedFlag) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ConfigurationManager( 
            /* [retval][out] */ ConfigurationManager **ppConfigurationManager) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Globals( 
            /* [retval][out] */ Globals **ppGlobals) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Save( 
            /* [defaultvalue] */ BSTR FileName = L"") = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ParentProjectItem( 
            /* [retval][out] */ ProjectItem **ppParentProjectItem) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CodeModel( 
            /* [retval][out] */ CodeModel **ppCodeModel) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ProjectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Project * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Project * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Project * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Project * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Project * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Project * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Project * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            Project * This,
            /* [retval][out] */ BSTR *lpbstrName);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            Project * This,
            /* [in] */ BSTR bstrName);
        
        /* [hidden][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FileName )( 
            Project * This,
            /* [retval][out] */ BSTR *lpbstrReturn);
        
        /* [hidden][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDirty )( 
            Project * This,
            /* [retval][out] */ VARIANT_BOOL *lpfReturn);
        
        /* [hidden][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IsDirty )( 
            Project * This,
            /* [in] */ VARIANT_BOOL Dirty);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            Project * This,
            /* [retval][out] */ Projects **lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveAs )( 
            Project * This,
            /* [in] */ BSTR NewFileName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Project * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Kind )( 
            Project * This,
            /* [retval][out] */ BSTR *lpbstrFileName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProjectItems )( 
            Project * This,
            /* [retval][out] */ ProjectItems **lppcReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            Project * This,
            /* [retval][out] */ Properties **ppObject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UniqueName )( 
            Project * This,
            /* [retval][out] */ BSTR *lpbstrFileName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Object )( 
            Project * This,
            /* [retval][out] */ IDispatch **ProjectModel);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Extender )( 
            Project * This,
            /* [in] */ BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderNames )( 
            Project * This,
            /* [retval][out] */ VARIANT *ExtenderNames);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderCATID )( 
            Project * This,
            /* [retval][out] */ BSTR *pRetval);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullName )( 
            Project * This,
            /* [retval][out] */ BSTR *lpbstrReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Saved )( 
            Project * This,
            /* [retval][out] */ VARIANT_BOOL *lpfReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Saved )( 
            Project * This,
            /* [in] */ VARIANT_BOOL SavedFlag);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ConfigurationManager )( 
            Project * This,
            /* [retval][out] */ ConfigurationManager **ppConfigurationManager);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Globals )( 
            Project * This,
            /* [retval][out] */ Globals **ppGlobals);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Save )( 
            Project * This,
            /* [defaultvalue] */ BSTR FileName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ParentProjectItem )( 
            Project * This,
            /* [retval][out] */ ProjectItem **ppParentProjectItem);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CodeModel )( 
            Project * This,
            /* [retval][out] */ CodeModel **ppCodeModel);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            Project * This);
        
        END_INTERFACE
    } ProjectVtbl;

    interface Project
    {
        CONST_VTBL struct ProjectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Project_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Project_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Project_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Project_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Project_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Project_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Project_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Project_get_Name(This,lpbstrName)	\
    (This)->lpVtbl -> get_Name(This,lpbstrName)

#define Project_put_Name(This,bstrName)	\
    (This)->lpVtbl -> put_Name(This,bstrName)

#define Project_get_FileName(This,lpbstrReturn)	\
    (This)->lpVtbl -> get_FileName(This,lpbstrReturn)

#define Project_get_IsDirty(This,lpfReturn)	\
    (This)->lpVtbl -> get_IsDirty(This,lpfReturn)

#define Project_put_IsDirty(This,Dirty)	\
    (This)->lpVtbl -> put_IsDirty(This,Dirty)

#define Project_get_Collection(This,lppaReturn)	\
    (This)->lpVtbl -> get_Collection(This,lppaReturn)

#define Project_SaveAs(This,NewFileName)	\
    (This)->lpVtbl -> SaveAs(This,NewFileName)

#define Project_get_DTE(This,lppaReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppaReturn)

#define Project_get_Kind(This,lpbstrFileName)	\
    (This)->lpVtbl -> get_Kind(This,lpbstrFileName)

#define Project_get_ProjectItems(This,lppcReturn)	\
    (This)->lpVtbl -> get_ProjectItems(This,lppcReturn)

#define Project_get_Properties(This,ppObject)	\
    (This)->lpVtbl -> get_Properties(This,ppObject)

#define Project_get_UniqueName(This,lpbstrFileName)	\
    (This)->lpVtbl -> get_UniqueName(This,lpbstrFileName)

#define Project_get_Object(This,ProjectModel)	\
    (This)->lpVtbl -> get_Object(This,ProjectModel)

#define Project_get_Extender(This,ExtenderName,Extender)	\
    (This)->lpVtbl -> get_Extender(This,ExtenderName,Extender)

#define Project_get_ExtenderNames(This,ExtenderNames)	\
    (This)->lpVtbl -> get_ExtenderNames(This,ExtenderNames)

#define Project_get_ExtenderCATID(This,pRetval)	\
    (This)->lpVtbl -> get_ExtenderCATID(This,pRetval)

#define Project_get_FullName(This,lpbstrReturn)	\
    (This)->lpVtbl -> get_FullName(This,lpbstrReturn)

#define Project_get_Saved(This,lpfReturn)	\
    (This)->lpVtbl -> get_Saved(This,lpfReturn)

#define Project_put_Saved(This,SavedFlag)	\
    (This)->lpVtbl -> put_Saved(This,SavedFlag)

#define Project_get_ConfigurationManager(This,ppConfigurationManager)	\
    (This)->lpVtbl -> get_ConfigurationManager(This,ppConfigurationManager)

#define Project_get_Globals(This,ppGlobals)	\
    (This)->lpVtbl -> get_Globals(This,ppGlobals)

#define Project_Save(This,FileName)	\
    (This)->lpVtbl -> Save(This,FileName)

#define Project_get_ParentProjectItem(This,ppParentProjectItem)	\
    (This)->lpVtbl -> get_ParentProjectItem(This,ppParentProjectItem)

#define Project_get_CodeModel(This,ppCodeModel)	\
    (This)->lpVtbl -> get_CodeModel(This,ppCodeModel)

#define Project_Delete(This)	\
    (This)->lpVtbl -> Delete(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Project_get_Name_Proxy( 
    Project * This,
    /* [retval][out] */ BSTR *lpbstrName);


void __RPC_STUB Project_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Project_put_Name_Proxy( 
    Project * This,
    /* [in] */ BSTR bstrName);


void __RPC_STUB Project_put_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Project_get_FileName_Proxy( 
    Project * This,
    /* [retval][out] */ BSTR *lpbstrReturn);


void __RPC_STUB Project_get_FileName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Project_get_IsDirty_Proxy( 
    Project * This,
    /* [retval][out] */ VARIANT_BOOL *lpfReturn);


void __RPC_STUB Project_get_IsDirty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Project_put_IsDirty_Proxy( 
    Project * This,
    /* [in] */ VARIANT_BOOL Dirty);


void __RPC_STUB Project_put_IsDirty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Project_get_Collection_Proxy( 
    Project * This,
    /* [retval][out] */ Projects **lppaReturn);


void __RPC_STUB Project_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Project_SaveAs_Proxy( 
    Project * This,
    /* [in] */ BSTR NewFileName);


void __RPC_STUB Project_SaveAs_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Project_get_DTE_Proxy( 
    Project * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB Project_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Project_get_Kind_Proxy( 
    Project * This,
    /* [retval][out] */ BSTR *lpbstrFileName);


void __RPC_STUB Project_get_Kind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Project_get_ProjectItems_Proxy( 
    Project * This,
    /* [retval][out] */ ProjectItems **lppcReturn);


void __RPC_STUB Project_get_ProjectItems_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Project_get_Properties_Proxy( 
    Project * This,
    /* [retval][out] */ Properties **ppObject);


void __RPC_STUB Project_get_Properties_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Project_get_UniqueName_Proxy( 
    Project * This,
    /* [retval][out] */ BSTR *lpbstrFileName);


void __RPC_STUB Project_get_UniqueName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Project_get_Object_Proxy( 
    Project * This,
    /* [retval][out] */ IDispatch **ProjectModel);


void __RPC_STUB Project_get_Object_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE Project_get_Extender_Proxy( 
    Project * This,
    /* [in] */ BSTR ExtenderName,
    /* [retval][out] */ IDispatch **Extender);


void __RPC_STUB Project_get_Extender_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE Project_get_ExtenderNames_Proxy( 
    Project * This,
    /* [retval][out] */ VARIANT *ExtenderNames);


void __RPC_STUB Project_get_ExtenderNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE Project_get_ExtenderCATID_Proxy( 
    Project * This,
    /* [retval][out] */ BSTR *pRetval);


void __RPC_STUB Project_get_ExtenderCATID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Project_get_FullName_Proxy( 
    Project * This,
    /* [retval][out] */ BSTR *lpbstrReturn);


void __RPC_STUB Project_get_FullName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Project_get_Saved_Proxy( 
    Project * This,
    /* [retval][out] */ VARIANT_BOOL *lpfReturn);


void __RPC_STUB Project_get_Saved_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Project_put_Saved_Proxy( 
    Project * This,
    /* [in] */ VARIANT_BOOL SavedFlag);


void __RPC_STUB Project_put_Saved_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Project_get_ConfigurationManager_Proxy( 
    Project * This,
    /* [retval][out] */ ConfigurationManager **ppConfigurationManager);


void __RPC_STUB Project_get_ConfigurationManager_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Project_get_Globals_Proxy( 
    Project * This,
    /* [retval][out] */ Globals **ppGlobals);


void __RPC_STUB Project_get_Globals_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Project_Save_Proxy( 
    Project * This,
    /* [defaultvalue] */ BSTR FileName);


void __RPC_STUB Project_Save_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Project_get_ParentProjectItem_Proxy( 
    Project * This,
    /* [retval][out] */ ProjectItem **ppParentProjectItem);


void __RPC_STUB Project_get_ParentProjectItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Project_get_CodeModel_Proxy( 
    Project * This,
    /* [retval][out] */ CodeModel **ppCodeModel);


void __RPC_STUB Project_get_CodeModel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Project_Delete_Proxy( 
    Project * This);


void __RPC_STUB Project_Delete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Project_INTERFACE_DEFINED__ */


#ifndef __ProjectItems_INTERFACE_DEFINED__
#define __ProjectItems_INTERFACE_DEFINED__

/* interface ProjectItems */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_ProjectItems;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8e2f1269-185e-43c7-8899-950ad2769ccf")
    ProjectItems : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT index,
            /* [retval][out] */ ProjectItem **lppcReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **lppptReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *lplReturn) = 0;
        
        virtual /* [id][restricted] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **lppiuReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Kind( 
            /* [retval][out] */ BSTR *lpbstrFileName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddFromFile( 
            /* [in] */ BSTR FileName,
            /* [retval][out] */ ProjectItem **lppcReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddFromTemplate( 
            /* [in] */ BSTR FileName,
            /* [in] */ BSTR Name,
            /* [retval][out] */ ProjectItem **lppcReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddFromDirectory( 
            /* [in] */ BSTR Directory,
            /* [retval][out] */ ProjectItem **lppcReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ContainingProject( 
            /* [retval][out] */ Project **ppProject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddFolder( 
            BSTR Name,
            /* [defaultvalue] */ BSTR Kind,
            /* [retval][out] */ ProjectItem **pProjectItem) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddFromFileCopy( 
            BSTR FilePath,
            /* [retval][out] */ ProjectItem **pProjectItem) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ProjectItemsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ProjectItems * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ProjectItems * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ProjectItems * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ProjectItems * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ProjectItems * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ProjectItems * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ProjectItems * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            ProjectItems * This,
            /* [in] */ VARIANT index,
            /* [retval][out] */ ProjectItem **lppcReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ProjectItems * This,
            /* [retval][out] */ IDispatch **lppptReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            ProjectItems * This,
            /* [retval][out] */ long *lplReturn);
        
        /* [id][restricted] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            ProjectItems * This,
            /* [retval][out] */ IUnknown **lppiuReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            ProjectItems * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Kind )( 
            ProjectItems * This,
            /* [retval][out] */ BSTR *lpbstrFileName);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddFromFile )( 
            ProjectItems * This,
            /* [in] */ BSTR FileName,
            /* [retval][out] */ ProjectItem **lppcReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddFromTemplate )( 
            ProjectItems * This,
            /* [in] */ BSTR FileName,
            /* [in] */ BSTR Name,
            /* [retval][out] */ ProjectItem **lppcReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddFromDirectory )( 
            ProjectItems * This,
            /* [in] */ BSTR Directory,
            /* [retval][out] */ ProjectItem **lppcReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ContainingProject )( 
            ProjectItems * This,
            /* [retval][out] */ Project **ppProject);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddFolder )( 
            ProjectItems * This,
            BSTR Name,
            /* [defaultvalue] */ BSTR Kind,
            /* [retval][out] */ ProjectItem **pProjectItem);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddFromFileCopy )( 
            ProjectItems * This,
            BSTR FilePath,
            /* [retval][out] */ ProjectItem **pProjectItem);
        
        END_INTERFACE
    } ProjectItemsVtbl;

    interface ProjectItems
    {
        CONST_VTBL struct ProjectItemsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ProjectItems_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ProjectItems_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ProjectItems_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ProjectItems_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ProjectItems_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ProjectItems_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ProjectItems_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define ProjectItems_Item(This,index,lppcReturn)	\
    (This)->lpVtbl -> Item(This,index,lppcReturn)

#define ProjectItems_get_Parent(This,lppptReturn)	\
    (This)->lpVtbl -> get_Parent(This,lppptReturn)

#define ProjectItems_get_Count(This,lplReturn)	\
    (This)->lpVtbl -> get_Count(This,lplReturn)

#define ProjectItems__NewEnum(This,lppiuReturn)	\
    (This)->lpVtbl -> _NewEnum(This,lppiuReturn)

#define ProjectItems_get_DTE(This,lppaReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppaReturn)

#define ProjectItems_get_Kind(This,lpbstrFileName)	\
    (This)->lpVtbl -> get_Kind(This,lpbstrFileName)

#define ProjectItems_AddFromFile(This,FileName,lppcReturn)	\
    (This)->lpVtbl -> AddFromFile(This,FileName,lppcReturn)

#define ProjectItems_AddFromTemplate(This,FileName,Name,lppcReturn)	\
    (This)->lpVtbl -> AddFromTemplate(This,FileName,Name,lppcReturn)

#define ProjectItems_AddFromDirectory(This,Directory,lppcReturn)	\
    (This)->lpVtbl -> AddFromDirectory(This,Directory,lppcReturn)

#define ProjectItems_get_ContainingProject(This,ppProject)	\
    (This)->lpVtbl -> get_ContainingProject(This,ppProject)

#define ProjectItems_AddFolder(This,Name,Kind,pProjectItem)	\
    (This)->lpVtbl -> AddFolder(This,Name,Kind,pProjectItem)

#define ProjectItems_AddFromFileCopy(This,FilePath,pProjectItem)	\
    (This)->lpVtbl -> AddFromFileCopy(This,FilePath,pProjectItem)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ProjectItems_Item_Proxy( 
    ProjectItems * This,
    /* [in] */ VARIANT index,
    /* [retval][out] */ ProjectItem **lppcReturn);


void __RPC_STUB ProjectItems_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ProjectItems_get_Parent_Proxy( 
    ProjectItems * This,
    /* [retval][out] */ IDispatch **lppptReturn);


void __RPC_STUB ProjectItems_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ProjectItems_get_Count_Proxy( 
    ProjectItems * This,
    /* [retval][out] */ long *lplReturn);


void __RPC_STUB ProjectItems_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][restricted] */ HRESULT STDMETHODCALLTYPE ProjectItems__NewEnum_Proxy( 
    ProjectItems * This,
    /* [retval][out] */ IUnknown **lppiuReturn);


void __RPC_STUB ProjectItems__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ProjectItems_get_DTE_Proxy( 
    ProjectItems * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB ProjectItems_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ProjectItems_get_Kind_Proxy( 
    ProjectItems * This,
    /* [retval][out] */ BSTR *lpbstrFileName);


void __RPC_STUB ProjectItems_get_Kind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ProjectItems_AddFromFile_Proxy( 
    ProjectItems * This,
    /* [in] */ BSTR FileName,
    /* [retval][out] */ ProjectItem **lppcReturn);


void __RPC_STUB ProjectItems_AddFromFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ProjectItems_AddFromTemplate_Proxy( 
    ProjectItems * This,
    /* [in] */ BSTR FileName,
    /* [in] */ BSTR Name,
    /* [retval][out] */ ProjectItem **lppcReturn);


void __RPC_STUB ProjectItems_AddFromTemplate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ProjectItems_AddFromDirectory_Proxy( 
    ProjectItems * This,
    /* [in] */ BSTR Directory,
    /* [retval][out] */ ProjectItem **lppcReturn);


void __RPC_STUB ProjectItems_AddFromDirectory_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ProjectItems_get_ContainingProject_Proxy( 
    ProjectItems * This,
    /* [retval][out] */ Project **ppProject);


void __RPC_STUB ProjectItems_get_ContainingProject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ProjectItems_AddFolder_Proxy( 
    ProjectItems * This,
    BSTR Name,
    /* [defaultvalue] */ BSTR Kind,
    /* [retval][out] */ ProjectItem **pProjectItem);


void __RPC_STUB ProjectItems_AddFolder_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ProjectItems_AddFromFileCopy_Proxy( 
    ProjectItems * This,
    BSTR FilePath,
    /* [retval][out] */ ProjectItem **pProjectItem);


void __RPC_STUB ProjectItems_AddFromFileCopy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ProjectItems_INTERFACE_DEFINED__ */


#ifndef __ProjectItem_INTERFACE_DEFINED__
#define __ProjectItem_INTERFACE_DEFINED__

/* interface ProjectItem */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_ProjectItem;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0b48100a-473e-433c-ab8f-66b9739ab620")
    ProjectItem : public IDispatch
    {
    public:
        virtual /* [hidden][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsDirty( 
            /* [retval][out] */ VARIANT_BOOL *lpfReturn) = 0;
        
        virtual /* [hidden][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_IsDirty( 
            /* [in] */ VARIANT_BOOL DirtyFlag) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FileNames( 
            /* [in] */ short Index,
            /* [retval][out] */ BSTR *lpbstrReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveAs( 
            /* [in] */ BSTR NewFileName,
            /* [retval][out] */ VARIANT_BOOL *lpfReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FileCount( 
            /* [retval][out] */ short *lpsReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pbstrReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR bstrName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ ProjectItems **lppcReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Properties( 
            /* [retval][out] */ Properties **ppObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Kind( 
            /* [retval][out] */ BSTR *lpbstrFileName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProjectItems( 
            /* [retval][out] */ ProjectItems **lppcReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsOpen( 
            /* [defaultvalue][in] */ BSTR ViewKind,
            /* [retval][out] */ VARIANT_BOOL *lpfReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Open( 
            /* [defaultvalue][in] */ BSTR ViewKind,
            /* [retval][out] */ Window **lppfReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Remove( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ExpandView( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Object( 
            /* [retval][out] */ IDispatch **ProjectItemModel) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_Extender( 
            /* [in] */ BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderNames( 
            /* [retval][out] */ VARIANT *ExtenderNames) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderCATID( 
            /* [retval][out] */ BSTR *pRetval) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Saved( 
            /* [retval][out] */ VARIANT_BOOL *lpfReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Saved( 
            /* [in] */ VARIANT_BOOL SavedFlag) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ConfigurationManager( 
            /* [retval][out] */ ConfigurationManager **ppConfigurationManager) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FileCodeModel( 
            /* [retval][out] */ FileCodeModel **ppFileCodeModel) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Save( 
            /* [defaultvalue] */ BSTR FileName = L"") = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Document( 
            /* [retval][out] */ Document **ppDocument) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SubProject( 
            /* [retval][out] */ Project **ppProject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ContainingProject( 
            /* [retval][out] */ Project **ppProject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ProjectItemVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ProjectItem * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ProjectItem * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ProjectItem * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ProjectItem * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ProjectItem * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ProjectItem * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ProjectItem * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [hidden][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDirty )( 
            ProjectItem * This,
            /* [retval][out] */ VARIANT_BOOL *lpfReturn);
        
        /* [hidden][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IsDirty )( 
            ProjectItem * This,
            /* [in] */ VARIANT_BOOL DirtyFlag);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FileNames )( 
            ProjectItem * This,
            /* [in] */ short Index,
            /* [retval][out] */ BSTR *lpbstrReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveAs )( 
            ProjectItem * This,
            /* [in] */ BSTR NewFileName,
            /* [retval][out] */ VARIANT_BOOL *lpfReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FileCount )( 
            ProjectItem * This,
            /* [retval][out] */ short *lpsReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            ProjectItem * This,
            /* [retval][out] */ BSTR *pbstrReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            ProjectItem * This,
            /* [in] */ BSTR bstrName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            ProjectItem * This,
            /* [retval][out] */ ProjectItems **lppcReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            ProjectItem * This,
            /* [retval][out] */ Properties **ppObject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            ProjectItem * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Kind )( 
            ProjectItem * This,
            /* [retval][out] */ BSTR *lpbstrFileName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProjectItems )( 
            ProjectItem * This,
            /* [retval][out] */ ProjectItems **lppcReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsOpen )( 
            ProjectItem * This,
            /* [defaultvalue][in] */ BSTR ViewKind,
            /* [retval][out] */ VARIANT_BOOL *lpfReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Open )( 
            ProjectItem * This,
            /* [defaultvalue][in] */ BSTR ViewKind,
            /* [retval][out] */ Window **lppfReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Remove )( 
            ProjectItem * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ExpandView )( 
            ProjectItem * This);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Object )( 
            ProjectItem * This,
            /* [retval][out] */ IDispatch **ProjectItemModel);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Extender )( 
            ProjectItem * This,
            /* [in] */ BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderNames )( 
            ProjectItem * This,
            /* [retval][out] */ VARIANT *ExtenderNames);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderCATID )( 
            ProjectItem * This,
            /* [retval][out] */ BSTR *pRetval);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Saved )( 
            ProjectItem * This,
            /* [retval][out] */ VARIANT_BOOL *lpfReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Saved )( 
            ProjectItem * This,
            /* [in] */ VARIANT_BOOL SavedFlag);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ConfigurationManager )( 
            ProjectItem * This,
            /* [retval][out] */ ConfigurationManager **ppConfigurationManager);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FileCodeModel )( 
            ProjectItem * This,
            /* [retval][out] */ FileCodeModel **ppFileCodeModel);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Save )( 
            ProjectItem * This,
            /* [defaultvalue] */ BSTR FileName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            ProjectItem * This,
            /* [retval][out] */ Document **ppDocument);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SubProject )( 
            ProjectItem * This,
            /* [retval][out] */ Project **ppProject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ContainingProject )( 
            ProjectItem * This,
            /* [retval][out] */ Project **ppProject);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            ProjectItem * This);
        
        END_INTERFACE
    } ProjectItemVtbl;

    interface ProjectItem
    {
        CONST_VTBL struct ProjectItemVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ProjectItem_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ProjectItem_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ProjectItem_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ProjectItem_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ProjectItem_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ProjectItem_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ProjectItem_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define ProjectItem_get_IsDirty(This,lpfReturn)	\
    (This)->lpVtbl -> get_IsDirty(This,lpfReturn)

#define ProjectItem_put_IsDirty(This,DirtyFlag)	\
    (This)->lpVtbl -> put_IsDirty(This,DirtyFlag)

#define ProjectItem_get_FileNames(This,Index,lpbstrReturn)	\
    (This)->lpVtbl -> get_FileNames(This,Index,lpbstrReturn)

#define ProjectItem_SaveAs(This,NewFileName,lpfReturn)	\
    (This)->lpVtbl -> SaveAs(This,NewFileName,lpfReturn)

#define ProjectItem_get_FileCount(This,lpsReturn)	\
    (This)->lpVtbl -> get_FileCount(This,lpsReturn)

#define ProjectItem_get_Name(This,pbstrReturn)	\
    (This)->lpVtbl -> get_Name(This,pbstrReturn)

#define ProjectItem_put_Name(This,bstrName)	\
    (This)->lpVtbl -> put_Name(This,bstrName)

#define ProjectItem_get_Collection(This,lppcReturn)	\
    (This)->lpVtbl -> get_Collection(This,lppcReturn)

#define ProjectItem_get_Properties(This,ppObject)	\
    (This)->lpVtbl -> get_Properties(This,ppObject)

#define ProjectItem_get_DTE(This,lppaReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppaReturn)

#define ProjectItem_get_Kind(This,lpbstrFileName)	\
    (This)->lpVtbl -> get_Kind(This,lpbstrFileName)

#define ProjectItem_get_ProjectItems(This,lppcReturn)	\
    (This)->lpVtbl -> get_ProjectItems(This,lppcReturn)

#define ProjectItem_get_IsOpen(This,ViewKind,lpfReturn)	\
    (This)->lpVtbl -> get_IsOpen(This,ViewKind,lpfReturn)

#define ProjectItem_Open(This,ViewKind,lppfReturn)	\
    (This)->lpVtbl -> Open(This,ViewKind,lppfReturn)

#define ProjectItem_Remove(This)	\
    (This)->lpVtbl -> Remove(This)

#define ProjectItem_ExpandView(This)	\
    (This)->lpVtbl -> ExpandView(This)

#define ProjectItem_get_Object(This,ProjectItemModel)	\
    (This)->lpVtbl -> get_Object(This,ProjectItemModel)

#define ProjectItem_get_Extender(This,ExtenderName,Extender)	\
    (This)->lpVtbl -> get_Extender(This,ExtenderName,Extender)

#define ProjectItem_get_ExtenderNames(This,ExtenderNames)	\
    (This)->lpVtbl -> get_ExtenderNames(This,ExtenderNames)

#define ProjectItem_get_ExtenderCATID(This,pRetval)	\
    (This)->lpVtbl -> get_ExtenderCATID(This,pRetval)

#define ProjectItem_get_Saved(This,lpfReturn)	\
    (This)->lpVtbl -> get_Saved(This,lpfReturn)

#define ProjectItem_put_Saved(This,SavedFlag)	\
    (This)->lpVtbl -> put_Saved(This,SavedFlag)

#define ProjectItem_get_ConfigurationManager(This,ppConfigurationManager)	\
    (This)->lpVtbl -> get_ConfigurationManager(This,ppConfigurationManager)

#define ProjectItem_get_FileCodeModel(This,ppFileCodeModel)	\
    (This)->lpVtbl -> get_FileCodeModel(This,ppFileCodeModel)

#define ProjectItem_Save(This,FileName)	\
    (This)->lpVtbl -> Save(This,FileName)

#define ProjectItem_get_Document(This,ppDocument)	\
    (This)->lpVtbl -> get_Document(This,ppDocument)

#define ProjectItem_get_SubProject(This,ppProject)	\
    (This)->lpVtbl -> get_SubProject(This,ppProject)

#define ProjectItem_get_ContainingProject(This,ppProject)	\
    (This)->lpVtbl -> get_ContainingProject(This,ppProject)

#define ProjectItem_Delete(This)	\
    (This)->lpVtbl -> Delete(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [hidden][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_get_IsDirty_Proxy( 
    ProjectItem * This,
    /* [retval][out] */ VARIANT_BOOL *lpfReturn);


void __RPC_STUB ProjectItem_get_IsDirty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_put_IsDirty_Proxy( 
    ProjectItem * This,
    /* [in] */ VARIANT_BOOL DirtyFlag);


void __RPC_STUB ProjectItem_put_IsDirty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_get_FileNames_Proxy( 
    ProjectItem * This,
    /* [in] */ short Index,
    /* [retval][out] */ BSTR *lpbstrReturn);


void __RPC_STUB ProjectItem_get_FileNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_SaveAs_Proxy( 
    ProjectItem * This,
    /* [in] */ BSTR NewFileName,
    /* [retval][out] */ VARIANT_BOOL *lpfReturn);


void __RPC_STUB ProjectItem_SaveAs_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_get_FileCount_Proxy( 
    ProjectItem * This,
    /* [retval][out] */ short *lpsReturn);


void __RPC_STUB ProjectItem_get_FileCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_get_Name_Proxy( 
    ProjectItem * This,
    /* [retval][out] */ BSTR *pbstrReturn);


void __RPC_STUB ProjectItem_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_put_Name_Proxy( 
    ProjectItem * This,
    /* [in] */ BSTR bstrName);


void __RPC_STUB ProjectItem_put_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_get_Collection_Proxy( 
    ProjectItem * This,
    /* [retval][out] */ ProjectItems **lppcReturn);


void __RPC_STUB ProjectItem_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_get_Properties_Proxy( 
    ProjectItem * This,
    /* [retval][out] */ Properties **ppObject);


void __RPC_STUB ProjectItem_get_Properties_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_get_DTE_Proxy( 
    ProjectItem * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB ProjectItem_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_get_Kind_Proxy( 
    ProjectItem * This,
    /* [retval][out] */ BSTR *lpbstrFileName);


void __RPC_STUB ProjectItem_get_Kind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_get_ProjectItems_Proxy( 
    ProjectItem * This,
    /* [retval][out] */ ProjectItems **lppcReturn);


void __RPC_STUB ProjectItem_get_ProjectItems_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_get_IsOpen_Proxy( 
    ProjectItem * This,
    /* [defaultvalue][in] */ BSTR ViewKind,
    /* [retval][out] */ VARIANT_BOOL *lpfReturn);


void __RPC_STUB ProjectItem_get_IsOpen_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_Open_Proxy( 
    ProjectItem * This,
    /* [defaultvalue][in] */ BSTR ViewKind,
    /* [retval][out] */ Window **lppfReturn);


void __RPC_STUB ProjectItem_Open_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_Remove_Proxy( 
    ProjectItem * This);


void __RPC_STUB ProjectItem_Remove_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_ExpandView_Proxy( 
    ProjectItem * This);


void __RPC_STUB ProjectItem_ExpandView_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_get_Object_Proxy( 
    ProjectItem * This,
    /* [retval][out] */ IDispatch **ProjectItemModel);


void __RPC_STUB ProjectItem_get_Object_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_get_Extender_Proxy( 
    ProjectItem * This,
    /* [in] */ BSTR ExtenderName,
    /* [retval][out] */ IDispatch **Extender);


void __RPC_STUB ProjectItem_get_Extender_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_get_ExtenderNames_Proxy( 
    ProjectItem * This,
    /* [retval][out] */ VARIANT *ExtenderNames);


void __RPC_STUB ProjectItem_get_ExtenderNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_get_ExtenderCATID_Proxy( 
    ProjectItem * This,
    /* [retval][out] */ BSTR *pRetval);


void __RPC_STUB ProjectItem_get_ExtenderCATID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_get_Saved_Proxy( 
    ProjectItem * This,
    /* [retval][out] */ VARIANT_BOOL *lpfReturn);


void __RPC_STUB ProjectItem_get_Saved_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_put_Saved_Proxy( 
    ProjectItem * This,
    /* [in] */ VARIANT_BOOL SavedFlag);


void __RPC_STUB ProjectItem_put_Saved_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_get_ConfigurationManager_Proxy( 
    ProjectItem * This,
    /* [retval][out] */ ConfigurationManager **ppConfigurationManager);


void __RPC_STUB ProjectItem_get_ConfigurationManager_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_get_FileCodeModel_Proxy( 
    ProjectItem * This,
    /* [retval][out] */ FileCodeModel **ppFileCodeModel);


void __RPC_STUB ProjectItem_get_FileCodeModel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_Save_Proxy( 
    ProjectItem * This,
    /* [defaultvalue] */ BSTR FileName);


void __RPC_STUB ProjectItem_Save_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_get_Document_Proxy( 
    ProjectItem * This,
    /* [retval][out] */ Document **ppDocument);


void __RPC_STUB ProjectItem_get_Document_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_get_SubProject_Proxy( 
    ProjectItem * This,
    /* [retval][out] */ Project **ppProject);


void __RPC_STUB ProjectItem_get_SubProject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_get_ContainingProject_Proxy( 
    ProjectItem * This,
    /* [retval][out] */ Project **ppProject);


void __RPC_STUB ProjectItem_get_ContainingProject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ProjectItem_Delete_Proxy( 
    ProjectItem * This);


void __RPC_STUB ProjectItem_Delete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ProjectItem_INTERFACE_DEFINED__ */


#ifndef __Commands_INTERFACE_DEFINED__
#define __Commands_INTERFACE_DEFINED__

/* interface Commands */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_Commands;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e6b96cac-b8c7-40ae-b705-5c81878c4a9e")
    Commands : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [hidden][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR Guid,
            /* [in] */ long ID,
            /* [in] */ VARIANT *Control) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Raise( 
            /* [in] */ BSTR Guid,
            /* [in] */ long ID,
            /* [out][in] */ VARIANT *CustomIn,
            /* [out][in] */ VARIANT *CustomOut) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CommandInfo( 
            /* [in] */ IDispatch *CommandBarControl,
            /* [out] */ BSTR *Guid,
            /* [out] */ long *ID) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *lplReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [defaultvalue][in] */ long ID,
            /* [retval][out] */ Command **lppcReturn) = 0;
        
        virtual /* [id][restricted] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **lppiuReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddNamedCommand( 
            /* [in] */ AddIn *AddInInstance,
            /* [in] */ BSTR Name,
            /* [in] */ BSTR ButtonText,
            /* [in] */ BSTR Tooltip,
            /* [in] */ VARIANT_BOOL MSOButton,
            /* [defaultvalue][in] */ long Bitmap,
            /* [optional][in] */ SAFEARRAY * *ContextUIGUIDs,
            /* [defaultvalue][in] */ long vsCommandDisabledFlagsValue,
            /* [retval][out] */ Command **pVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddCommandBar( 
            /* [in] */ BSTR Name,
            /* [in] */ vsCommandBarType Type,
            /* [defaultvalue][in] */ /* external definition not present */ CommandBar *CommandBarParent,
            /* [defaultvalue][in] */ long Position,
            /* [retval][out] */ IDispatch **pVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveCommandBar( 
            /* [in] */ /* external definition not present */ CommandBar *CommandBar) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CommandsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Commands * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Commands * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Commands * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Commands * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Commands * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Commands * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Commands * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Commands * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Commands * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [hidden][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            Commands * This,
            /* [in] */ BSTR Guid,
            /* [in] */ long ID,
            /* [in] */ VARIANT *Control);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Raise )( 
            Commands * This,
            /* [in] */ BSTR Guid,
            /* [in] */ long ID,
            /* [out][in] */ VARIANT *CustomIn,
            /* [out][in] */ VARIANT *CustomOut);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CommandInfo )( 
            Commands * This,
            /* [in] */ IDispatch *CommandBarControl,
            /* [out] */ BSTR *Guid,
            /* [out] */ long *ID);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Commands * This,
            /* [retval][out] */ long *lplReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Commands * This,
            /* [in] */ VARIANT Index,
            /* [defaultvalue][in] */ long ID,
            /* [retval][out] */ Command **lppcReturn);
        
        /* [id][restricted] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            Commands * This,
            /* [retval][out] */ IUnknown **lppiuReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddNamedCommand )( 
            Commands * This,
            /* [in] */ AddIn *AddInInstance,
            /* [in] */ BSTR Name,
            /* [in] */ BSTR ButtonText,
            /* [in] */ BSTR Tooltip,
            /* [in] */ VARIANT_BOOL MSOButton,
            /* [defaultvalue][in] */ long Bitmap,
            /* [optional][in] */ SAFEARRAY * *ContextUIGUIDs,
            /* [defaultvalue][in] */ long vsCommandDisabledFlagsValue,
            /* [retval][out] */ Command **pVal);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddCommandBar )( 
            Commands * This,
            /* [in] */ BSTR Name,
            /* [in] */ vsCommandBarType Type,
            /* [defaultvalue][in] */ /* external definition not present */ CommandBar *CommandBarParent,
            /* [defaultvalue][in] */ long Position,
            /* [retval][out] */ IDispatch **pVal);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveCommandBar )( 
            Commands * This,
            /* [in] */ /* external definition not present */ CommandBar *CommandBar);
        
        END_INTERFACE
    } CommandsVtbl;

    interface Commands
    {
        CONST_VTBL struct CommandsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Commands_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Commands_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Commands_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Commands_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Commands_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Commands_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Commands_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Commands_get_DTE(This,lppaReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppaReturn)

#define Commands_get_Parent(This,lppaReturn)	\
    (This)->lpVtbl -> get_Parent(This,lppaReturn)

#define Commands_Add(This,Guid,ID,Control)	\
    (This)->lpVtbl -> Add(This,Guid,ID,Control)

#define Commands_Raise(This,Guid,ID,CustomIn,CustomOut)	\
    (This)->lpVtbl -> Raise(This,Guid,ID,CustomIn,CustomOut)

#define Commands_CommandInfo(This,CommandBarControl,Guid,ID)	\
    (This)->lpVtbl -> CommandInfo(This,CommandBarControl,Guid,ID)

#define Commands_get_Count(This,lplReturn)	\
    (This)->lpVtbl -> get_Count(This,lplReturn)

#define Commands_Item(This,Index,ID,lppcReturn)	\
    (This)->lpVtbl -> Item(This,Index,ID,lppcReturn)

#define Commands__NewEnum(This,lppiuReturn)	\
    (This)->lpVtbl -> _NewEnum(This,lppiuReturn)

#define Commands_AddNamedCommand(This,AddInInstance,Name,ButtonText,Tooltip,MSOButton,Bitmap,ContextUIGUIDs,vsCommandDisabledFlagsValue,pVal)	\
    (This)->lpVtbl -> AddNamedCommand(This,AddInInstance,Name,ButtonText,Tooltip,MSOButton,Bitmap,ContextUIGUIDs,vsCommandDisabledFlagsValue,pVal)

#define Commands_AddCommandBar(This,Name,Type,CommandBarParent,Position,pVal)	\
    (This)->lpVtbl -> AddCommandBar(This,Name,Type,CommandBarParent,Position,pVal)

#define Commands_RemoveCommandBar(This,CommandBar)	\
    (This)->lpVtbl -> RemoveCommandBar(This,CommandBar)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Commands_get_DTE_Proxy( 
    Commands * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB Commands_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Commands_get_Parent_Proxy( 
    Commands * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB Commands_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Commands_Add_Proxy( 
    Commands * This,
    /* [in] */ BSTR Guid,
    /* [in] */ long ID,
    /* [in] */ VARIANT *Control);


void __RPC_STUB Commands_Add_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Commands_Raise_Proxy( 
    Commands * This,
    /* [in] */ BSTR Guid,
    /* [in] */ long ID,
    /* [out][in] */ VARIANT *CustomIn,
    /* [out][in] */ VARIANT *CustomOut);


void __RPC_STUB Commands_Raise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Commands_CommandInfo_Proxy( 
    Commands * This,
    /* [in] */ IDispatch *CommandBarControl,
    /* [out] */ BSTR *Guid,
    /* [out] */ long *ID);


void __RPC_STUB Commands_CommandInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Commands_get_Count_Proxy( 
    Commands * This,
    /* [retval][out] */ long *lplReturn);


void __RPC_STUB Commands_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Commands_Item_Proxy( 
    Commands * This,
    /* [in] */ VARIANT Index,
    /* [defaultvalue][in] */ long ID,
    /* [retval][out] */ Command **lppcReturn);


void __RPC_STUB Commands_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][restricted] */ HRESULT STDMETHODCALLTYPE Commands__NewEnum_Proxy( 
    Commands * This,
    /* [retval][out] */ IUnknown **lppiuReturn);


void __RPC_STUB Commands__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Commands_AddNamedCommand_Proxy( 
    Commands * This,
    /* [in] */ AddIn *AddInInstance,
    /* [in] */ BSTR Name,
    /* [in] */ BSTR ButtonText,
    /* [in] */ BSTR Tooltip,
    /* [in] */ VARIANT_BOOL MSOButton,
    /* [defaultvalue][in] */ long Bitmap,
    /* [optional][in] */ SAFEARRAY * *ContextUIGUIDs,
    /* [defaultvalue][in] */ long vsCommandDisabledFlagsValue,
    /* [retval][out] */ Command **pVal);


void __RPC_STUB Commands_AddNamedCommand_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Commands_AddCommandBar_Proxy( 
    Commands * This,
    /* [in] */ BSTR Name,
    /* [in] */ vsCommandBarType Type,
    /* [defaultvalue][in] */ /* external definition not present */ CommandBar *CommandBarParent,
    /* [defaultvalue][in] */ long Position,
    /* [retval][out] */ IDispatch **pVal);


void __RPC_STUB Commands_AddCommandBar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Commands_RemoveCommandBar_Proxy( 
    Commands * This,
    /* [in] */ /* external definition not present */ CommandBar *CommandBar);


void __RPC_STUB Commands_RemoveCommandBar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Commands_INTERFACE_DEFINED__ */


#ifndef __TextBuffer_INTERFACE_DEFINED__
#define __TextBuffer_INTERFACE_DEFINED__

/* interface TextBuffer */
/* [hidden][helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_TextBuffer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f47dc7e7-84b6-474f-bb91-631640aa0560")
    TextBuffer : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Window **retval) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddFromString( 
            /* [in] */ BSTR String,
            /* [defaultvalue][in] */ long StartLine = 1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddFromFile( 
            /* [in] */ BSTR FileName,
            /* [defaultvalue][in] */ long StartLine = 1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Lines( 
            /* [in] */ long StartLine,
            /* [in] */ long Count,
            /* [retval][out] */ BSTR *String) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CountOfLines( 
            /* [retval][out] */ long *CountOfLines) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE DeleteLines( 
            /* [in] */ long StartLine,
            /* [defaultvalue][in] */ long Count = 1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Find( 
            /* [in] */ BSTR Target,
            /* [out][in] */ long *StartLine,
            /* [out][in] */ long *StartColumn,
            /* [out][in] */ long *EndLine,
            /* [out][in] */ long *EndColumn,
            /* [defaultvalue][in] */ VARIANT_BOOL WholeWord,
            /* [defaultvalue][in] */ VARIANT_BOOL MatchCase,
            /* [defaultvalue][in] */ VARIANT_BOOL PatternSearch,
            /* [retval][out] */ VARIANT_BOOL *pfFound) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TextBufferVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TextBuffer * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TextBuffer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TextBuffer * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TextBuffer * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TextBuffer * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TextBuffer * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TextBuffer * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TextBuffer * This,
            /* [retval][out] */ Window **retval);
        
        /* [helpstringcontext][helpstring][helpcontext][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            TextBuffer * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddFromString )( 
            TextBuffer * This,
            /* [in] */ BSTR String,
            /* [defaultvalue][in] */ long StartLine);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddFromFile )( 
            TextBuffer * This,
            /* [in] */ BSTR FileName,
            /* [defaultvalue][in] */ long StartLine);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Lines )( 
            TextBuffer * This,
            /* [in] */ long StartLine,
            /* [in] */ long Count,
            /* [retval][out] */ BSTR *String);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CountOfLines )( 
            TextBuffer * This,
            /* [retval][out] */ long *CountOfLines);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteLines )( 
            TextBuffer * This,
            /* [in] */ long StartLine,
            /* [defaultvalue][in] */ long Count);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Find )( 
            TextBuffer * This,
            /* [in] */ BSTR Target,
            /* [out][in] */ long *StartLine,
            /* [out][in] */ long *StartColumn,
            /* [out][in] */ long *EndLine,
            /* [out][in] */ long *EndColumn,
            /* [defaultvalue][in] */ VARIANT_BOOL WholeWord,
            /* [defaultvalue][in] */ VARIANT_BOOL MatchCase,
            /* [defaultvalue][in] */ VARIANT_BOOL PatternSearch,
            /* [retval][out] */ VARIANT_BOOL *pfFound);
        
        END_INTERFACE
    } TextBufferVtbl;

    interface TextBuffer
    {
        CONST_VTBL struct TextBufferVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TextBuffer_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define TextBuffer_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define TextBuffer_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define TextBuffer_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define TextBuffer_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define TextBuffer_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define TextBuffer_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define TextBuffer_get_Parent(This,retval)	\
    (This)->lpVtbl -> get_Parent(This,retval)

#define TextBuffer_get_DTE(This,lppaReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppaReturn)

#define TextBuffer_AddFromString(This,String,StartLine)	\
    (This)->lpVtbl -> AddFromString(This,String,StartLine)

#define TextBuffer_AddFromFile(This,FileName,StartLine)	\
    (This)->lpVtbl -> AddFromFile(This,FileName,StartLine)

#define TextBuffer_get_Lines(This,StartLine,Count,String)	\
    (This)->lpVtbl -> get_Lines(This,StartLine,Count,String)

#define TextBuffer_get_CountOfLines(This,CountOfLines)	\
    (This)->lpVtbl -> get_CountOfLines(This,CountOfLines)

#define TextBuffer_DeleteLines(This,StartLine,Count)	\
    (This)->lpVtbl -> DeleteLines(This,StartLine,Count)

#define TextBuffer_Find(This,Target,StartLine,StartColumn,EndLine,EndColumn,WholeWord,MatchCase,PatternSearch,pfFound)	\
    (This)->lpVtbl -> Find(This,Target,StartLine,StartColumn,EndLine,EndColumn,WholeWord,MatchCase,PatternSearch,pfFound)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget] */ HRESULT STDMETHODCALLTYPE TextBuffer_get_Parent_Proxy( 
    TextBuffer * This,
    /* [retval][out] */ Window **retval);


void __RPC_STUB TextBuffer_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget] */ HRESULT STDMETHODCALLTYPE TextBuffer_get_DTE_Proxy( 
    TextBuffer * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB TextBuffer_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextBuffer_AddFromString_Proxy( 
    TextBuffer * This,
    /* [in] */ BSTR String,
    /* [defaultvalue][in] */ long StartLine);


void __RPC_STUB TextBuffer_AddFromString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextBuffer_AddFromFile_Proxy( 
    TextBuffer * This,
    /* [in] */ BSTR FileName,
    /* [defaultvalue][in] */ long StartLine);


void __RPC_STUB TextBuffer_AddFromFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextBuffer_get_Lines_Proxy( 
    TextBuffer * This,
    /* [in] */ long StartLine,
    /* [in] */ long Count,
    /* [retval][out] */ BSTR *String);


void __RPC_STUB TextBuffer_get_Lines_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextBuffer_get_CountOfLines_Proxy( 
    TextBuffer * This,
    /* [retval][out] */ long *CountOfLines);


void __RPC_STUB TextBuffer_get_CountOfLines_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextBuffer_DeleteLines_Proxy( 
    TextBuffer * This,
    /* [in] */ long StartLine,
    /* [defaultvalue][in] */ long Count);


void __RPC_STUB TextBuffer_DeleteLines_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextBuffer_Find_Proxy( 
    TextBuffer * This,
    /* [in] */ BSTR Target,
    /* [out][in] */ long *StartLine,
    /* [out][in] */ long *StartColumn,
    /* [out][in] */ long *EndLine,
    /* [out][in] */ long *EndColumn,
    /* [defaultvalue][in] */ VARIANT_BOOL WholeWord,
    /* [defaultvalue][in] */ VARIANT_BOOL MatchCase,
    /* [defaultvalue][in] */ VARIANT_BOOL PatternSearch,
    /* [retval][out] */ VARIANT_BOOL *pfFound);


void __RPC_STUB TextBuffer_Find_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __TextBuffer_INTERFACE_DEFINED__ */


#ifndef __AddIns_INTERFACE_DEFINED__
#define __AddIns_INTERFACE_DEFINED__

/* interface AddIns */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_AddIns;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("50590801-d13e-4404-80c2-5ca30a4d0ee8")
    AddIns : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ AddIn **lppaddin) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *lplReturn) = 0;
        
        virtual /* [id][restricted] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **lppiuReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Update( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            BSTR ProgID,
            BSTR Description,
            BSTR Name,
            VARIANT_BOOL Connected,
            /* [retval][out] */ AddIn **__MIDL_0011) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct AddInsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            AddIns * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            AddIns * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            AddIns * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            AddIns * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            AddIns * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            AddIns * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            AddIns * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            AddIns * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ AddIn **lppaddin);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            AddIns * This,
            /* [retval][out] */ IDispatch **lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            AddIns * This,
            /* [retval][out] */ long *lplReturn);
        
        /* [id][restricted] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            AddIns * This,
            /* [retval][out] */ IUnknown **lppiuReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            AddIns * This);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            AddIns * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            AddIns * This,
            BSTR ProgID,
            BSTR Description,
            BSTR Name,
            VARIANT_BOOL Connected,
            /* [retval][out] */ AddIn **__MIDL_0011);
        
        END_INTERFACE
    } AddInsVtbl;

    interface AddIns
    {
        CONST_VTBL struct AddInsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define AddIns_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define AddIns_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define AddIns_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define AddIns_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define AddIns_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define AddIns_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define AddIns_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define AddIns_Item(This,Index,lppaddin)	\
    (This)->lpVtbl -> Item(This,Index,lppaddin)

#define AddIns_get_Parent(This,lppaReturn)	\
    (This)->lpVtbl -> get_Parent(This,lppaReturn)

#define AddIns_get_Count(This,lplReturn)	\
    (This)->lpVtbl -> get_Count(This,lplReturn)

#define AddIns__NewEnum(This,lppiuReturn)	\
    (This)->lpVtbl -> _NewEnum(This,lppiuReturn)

#define AddIns_Update(This)	\
    (This)->lpVtbl -> Update(This)

#define AddIns_get_DTE(This,lppaReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppaReturn)

#define AddIns_Add(This,ProgID,Description,Name,Connected,__MIDL_0011)	\
    (This)->lpVtbl -> Add(This,ProgID,Description,Name,Connected,__MIDL_0011)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddIns_Item_Proxy( 
    AddIns * This,
    /* [in] */ VARIANT Index,
    /* [retval][out] */ AddIn **lppaddin);


void __RPC_STUB AddIns_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE AddIns_get_Parent_Proxy( 
    AddIns * This,
    /* [retval][out] */ IDispatch **lppaReturn);


void __RPC_STUB AddIns_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE AddIns_get_Count_Proxy( 
    AddIns * This,
    /* [retval][out] */ long *lplReturn);


void __RPC_STUB AddIns_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][restricted] */ HRESULT STDMETHODCALLTYPE AddIns__NewEnum_Proxy( 
    AddIns * This,
    /* [retval][out] */ IUnknown **lppiuReturn);


void __RPC_STUB AddIns__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddIns_Update_Proxy( 
    AddIns * This);


void __RPC_STUB AddIns_Update_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE AddIns_get_DTE_Proxy( 
    AddIns * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB AddIns_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddIns_Add_Proxy( 
    AddIns * This,
    BSTR ProgID,
    BSTR Description,
    BSTR Name,
    VARIANT_BOOL Connected,
    /* [retval][out] */ AddIn **__MIDL_0011);


void __RPC_STUB AddIns_Add_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __AddIns_INTERFACE_DEFINED__ */


#ifndef __AddIn_INTERFACE_DEFINED__
#define __AddIn_INTERFACE_DEFINED__

/* interface AddIn */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_AddIn;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("53a87fa1-ce93-48bf-958b-c6da793c5028")
    AddIn : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Description( 
            /* [retval][out] */ BSTR *lpbstr) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Description( 
            /* [in] */ BSTR bstr) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ AddIns **lppaddins) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_ProgID( 
            /* [retval][out] */ BSTR *lpbstr) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Guid( 
            /* [retval][out] */ BSTR *lpbstr) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Connected( 
            /* [retval][out] */ VARIANT_BOOL *lpfConnect) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Connected( 
            /* [in] */ VARIANT_BOOL fConnect) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Object( 
            /* [retval][out] */ IDispatch **lppdisp) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Object( 
            /* [in] */ IDispatch *_lpdispObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *lpbstr) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Remove( void) = 0;
        
        virtual /* [propget][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE get_SatelliteDllPath( 
            /* [retval][out] */ BSTR *pbstrPath) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct AddInVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            AddIn * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            AddIn * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            AddIn * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            AddIn * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            AddIn * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            AddIn * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            AddIn * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            AddIn * This,
            /* [retval][out] */ BSTR *lpbstr);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Description )( 
            AddIn * This,
            /* [in] */ BSTR bstr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            AddIn * This,
            /* [retval][out] */ AddIns **lppaddins);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProgID )( 
            AddIn * This,
            /* [retval][out] */ BSTR *lpbstr);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Guid )( 
            AddIn * This,
            /* [retval][out] */ BSTR *lpbstr);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Connected )( 
            AddIn * This,
            /* [retval][out] */ VARIANT_BOOL *lpfConnect);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Connected )( 
            AddIn * This,
            /* [in] */ VARIANT_BOOL fConnect);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Object )( 
            AddIn * This,
            /* [retval][out] */ IDispatch **lppdisp);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Object )( 
            AddIn * This,
            /* [in] */ IDispatch *_lpdispObject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            AddIn * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            AddIn * This,
            /* [retval][out] */ BSTR *lpbstr);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Remove )( 
            AddIn * This);
        
        /* [propget][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *get_SatelliteDllPath )( 
            AddIn * This,
            /* [retval][out] */ BSTR *pbstrPath);
        
        END_INTERFACE
    } AddInVtbl;

    interface AddIn
    {
        CONST_VTBL struct AddInVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define AddIn_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define AddIn_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define AddIn_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define AddIn_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define AddIn_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define AddIn_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define AddIn_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define AddIn_get_Description(This,lpbstr)	\
    (This)->lpVtbl -> get_Description(This,lpbstr)

#define AddIn_put_Description(This,bstr)	\
    (This)->lpVtbl -> put_Description(This,bstr)

#define AddIn_get_Collection(This,lppaddins)	\
    (This)->lpVtbl -> get_Collection(This,lppaddins)

#define AddIn_get_ProgID(This,lpbstr)	\
    (This)->lpVtbl -> get_ProgID(This,lpbstr)

#define AddIn_get_Guid(This,lpbstr)	\
    (This)->lpVtbl -> get_Guid(This,lpbstr)

#define AddIn_get_Connected(This,lpfConnect)	\
    (This)->lpVtbl -> get_Connected(This,lpfConnect)

#define AddIn_put_Connected(This,fConnect)	\
    (This)->lpVtbl -> put_Connected(This,fConnect)

#define AddIn_get_Object(This,lppdisp)	\
    (This)->lpVtbl -> get_Object(This,lppdisp)

#define AddIn_put_Object(This,_lpdispObject)	\
    (This)->lpVtbl -> put_Object(This,_lpdispObject)

#define AddIn_get_DTE(This,lppaReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppaReturn)

#define AddIn_get_Name(This,lpbstr)	\
    (This)->lpVtbl -> get_Name(This,lpbstr)

#define AddIn_Remove(This)	\
    (This)->lpVtbl -> Remove(This)

#define AddIn_get_SatelliteDllPath(This,pbstrPath)	\
    (This)->lpVtbl -> get_SatelliteDllPath(This,pbstrPath)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE AddIn_get_Description_Proxy( 
    AddIn * This,
    /* [retval][out] */ BSTR *lpbstr);


void __RPC_STUB AddIn_get_Description_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE AddIn_put_Description_Proxy( 
    AddIn * This,
    /* [in] */ BSTR bstr);


void __RPC_STUB AddIn_put_Description_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE AddIn_get_Collection_Proxy( 
    AddIn * This,
    /* [retval][out] */ AddIns **lppaddins);


void __RPC_STUB AddIn_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE AddIn_get_ProgID_Proxy( 
    AddIn * This,
    /* [retval][out] */ BSTR *lpbstr);


void __RPC_STUB AddIn_get_ProgID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE AddIn_get_Guid_Proxy( 
    AddIn * This,
    /* [retval][out] */ BSTR *lpbstr);


void __RPC_STUB AddIn_get_Guid_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE AddIn_get_Connected_Proxy( 
    AddIn * This,
    /* [retval][out] */ VARIANT_BOOL *lpfConnect);


void __RPC_STUB AddIn_get_Connected_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE AddIn_put_Connected_Proxy( 
    AddIn * This,
    /* [in] */ VARIANT_BOOL fConnect);


void __RPC_STUB AddIn_put_Connected_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE AddIn_get_Object_Proxy( 
    AddIn * This,
    /* [retval][out] */ IDispatch **lppdisp);


void __RPC_STUB AddIn_get_Object_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE AddIn_put_Object_Proxy( 
    AddIn * This,
    /* [in] */ IDispatch *_lpdispObject);


void __RPC_STUB AddIn_put_Object_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE AddIn_get_DTE_Proxy( 
    AddIn * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB AddIn_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE AddIn_get_Name_Proxy( 
    AddIn * This,
    /* [retval][out] */ BSTR *lpbstr);


void __RPC_STUB AddIn_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddIn_Remove_Proxy( 
    AddIn * This);


void __RPC_STUB AddIn_Remove_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddIn_get_SatelliteDllPath_Proxy( 
    AddIn * This,
    /* [retval][out] */ BSTR *pbstrPath);


void __RPC_STUB AddIn_get_SatelliteDllPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __AddIn_INTERFACE_DEFINED__ */


#ifndef __Properties_INTERFACE_DEFINED__
#define __Properties_INTERFACE_DEFINED__

/* interface Properties */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_Properties;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4cc8ccf5-a926-4646-b17f-b4940caed472")
    Properties : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT index,
            /* [retval][out] */ Property **lplppReturn) = 0;
        
        virtual /* [restricted][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IDispatch **lppidReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **lppidReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *lplReturn) = 0;
        
        virtual /* [id][restricted] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **lppiuReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct PropertiesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Properties * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Properties * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Properties * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Properties * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Properties * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Properties * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Properties * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Properties * This,
            /* [in] */ VARIANT index,
            /* [retval][out] */ Property **lplppReturn);
        
        /* [restricted][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Properties * This,
            /* [retval][out] */ IDispatch **lppidReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Properties * This,
            /* [retval][out] */ IDispatch **lppidReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Properties * This,
            /* [retval][out] */ long *lplReturn);
        
        /* [id][restricted] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            Properties * This,
            /* [retval][out] */ IUnknown **lppiuReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Properties * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        END_INTERFACE
    } PropertiesVtbl;

    interface Properties
    {
        CONST_VTBL struct PropertiesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Properties_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Properties_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Properties_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Properties_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Properties_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Properties_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Properties_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Properties_Item(This,index,lplppReturn)	\
    (This)->lpVtbl -> Item(This,index,lplppReturn)

#define Properties_get_Application(This,lppidReturn)	\
    (This)->lpVtbl -> get_Application(This,lppidReturn)

#define Properties_get_Parent(This,lppidReturn)	\
    (This)->lpVtbl -> get_Parent(This,lppidReturn)

#define Properties_get_Count(This,lplReturn)	\
    (This)->lpVtbl -> get_Count(This,lplReturn)

#define Properties__NewEnum(This,lppiuReturn)	\
    (This)->lpVtbl -> _NewEnum(This,lppiuReturn)

#define Properties_get_DTE(This,lppaReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppaReturn)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Properties_Item_Proxy( 
    Properties * This,
    /* [in] */ VARIANT index,
    /* [retval][out] */ Property **lplppReturn);


void __RPC_STUB Properties_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE Properties_get_Application_Proxy( 
    Properties * This,
    /* [retval][out] */ IDispatch **lppidReturn);


void __RPC_STUB Properties_get_Application_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Properties_get_Parent_Proxy( 
    Properties * This,
    /* [retval][out] */ IDispatch **lppidReturn);


void __RPC_STUB Properties_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE Properties_get_Count_Proxy( 
    Properties * This,
    /* [retval][out] */ long *lplReturn);


void __RPC_STUB Properties_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][restricted] */ HRESULT STDMETHODCALLTYPE Properties__NewEnum_Proxy( 
    Properties * This,
    /* [retval][out] */ IUnknown **lppiuReturn);


void __RPC_STUB Properties__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Properties_get_DTE_Proxy( 
    Properties * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB Properties_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Properties_INTERFACE_DEFINED__ */


#ifndef __Property_INTERFACE_DEFINED__
#define __Property_INTERFACE_DEFINED__

/* interface Property */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_Property;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7b988e06-2581-485e-9322-04881e0600d0")
    Property : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Value( 
            /* [retval][out] */ VARIANT *lppvReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Value( 
            /* [in] */ VARIANT NewValue) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propputref][id] */ HRESULT STDMETHODCALLTYPE putref_Value( 
            /* [in] */ VARIANT NewValue) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IndexedValue( 
            /* [in] */ VARIANT Index1,
            /* [optional][in] */ VARIANT Index2,
            /* [optional][in] */ VARIANT Index3,
            /* [optional][in] */ VARIANT Index4,
            /* [retval][out] */ VARIANT *Val) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_IndexedValue( 
            /* [in] */ VARIANT Index1,
            /* [optional][in] */ VARIANT Index2,
            /* [optional][in] */ VARIANT Index3,
            /* [optional][in] */ VARIANT Index4,
            /* [in] */ VARIANT NewValue) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_NumIndices( 
            /* [retval][out] */ short *lpiRetVal) = 0;
        
        virtual /* [restricted][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ IDispatch **lppidReturn) = 0;
        
        virtual /* [restricted][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Properties **lpppReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *lpbstrReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ Properties **lpppReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Object( 
            /* [retval][out] */ IDispatch **lppunk) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propputref] */ HRESULT STDMETHODCALLTYPE putref_Object( 
            /* [in] */ IUnknown *lpunk) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct PropertyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Property * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Property * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Property * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Property * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Property * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Property * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Property * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            Property * This,
            /* [retval][out] */ VARIANT *lppvReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Value )( 
            Property * This,
            /* [in] */ VARIANT NewValue);
        
        /* [helpstringcontext][helpstring][helpcontext][propputref][id] */ HRESULT ( STDMETHODCALLTYPE *putref_Value )( 
            Property * This,
            /* [in] */ VARIANT NewValue);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IndexedValue )( 
            Property * This,
            /* [in] */ VARIANT Index1,
            /* [optional][in] */ VARIANT Index2,
            /* [optional][in] */ VARIANT Index3,
            /* [optional][in] */ VARIANT Index4,
            /* [retval][out] */ VARIANT *Val);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IndexedValue )( 
            Property * This,
            /* [in] */ VARIANT Index1,
            /* [optional][in] */ VARIANT Index2,
            /* [optional][in] */ VARIANT Index3,
            /* [optional][in] */ VARIANT Index4,
            /* [in] */ VARIANT NewValue);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_NumIndices )( 
            Property * This,
            /* [retval][out] */ short *lpiRetVal);
        
        /* [restricted][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            Property * This,
            /* [retval][out] */ IDispatch **lppidReturn);
        
        /* [restricted][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Property * This,
            /* [retval][out] */ Properties **lpppReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            Property * This,
            /* [retval][out] */ BSTR *lpbstrReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            Property * This,
            /* [retval][out] */ Properties **lpppReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Object )( 
            Property * This,
            /* [retval][out] */ IDispatch **lppunk);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propputref] */ HRESULT ( STDMETHODCALLTYPE *putref_Object )( 
            Property * This,
            /* [in] */ IUnknown *lpunk);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Property * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        END_INTERFACE
    } PropertyVtbl;

    interface Property
    {
        CONST_VTBL struct PropertyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Property_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Property_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Property_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Property_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Property_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Property_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Property_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Property_get_Value(This,lppvReturn)	\
    (This)->lpVtbl -> get_Value(This,lppvReturn)

#define Property_put_Value(This,NewValue)	\
    (This)->lpVtbl -> put_Value(This,NewValue)

#define Property_putref_Value(This,NewValue)	\
    (This)->lpVtbl -> putref_Value(This,NewValue)

#define Property_get_IndexedValue(This,Index1,Index2,Index3,Index4,Val)	\
    (This)->lpVtbl -> get_IndexedValue(This,Index1,Index2,Index3,Index4,Val)

#define Property_put_IndexedValue(This,Index1,Index2,Index3,Index4,NewValue)	\
    (This)->lpVtbl -> put_IndexedValue(This,Index1,Index2,Index3,Index4,NewValue)

#define Property_get_NumIndices(This,lpiRetVal)	\
    (This)->lpVtbl -> get_NumIndices(This,lpiRetVal)

#define Property_get_Application(This,lppidReturn)	\
    (This)->lpVtbl -> get_Application(This,lppidReturn)

#define Property_get_Parent(This,lpppReturn)	\
    (This)->lpVtbl -> get_Parent(This,lpppReturn)

#define Property_get_Name(This,lpbstrReturn)	\
    (This)->lpVtbl -> get_Name(This,lpbstrReturn)

#define Property_get_Collection(This,lpppReturn)	\
    (This)->lpVtbl -> get_Collection(This,lpppReturn)

#define Property_get_Object(This,lppunk)	\
    (This)->lpVtbl -> get_Object(This,lppunk)

#define Property_putref_Object(This,lpunk)	\
    (This)->lpVtbl -> putref_Object(This,lpunk)

#define Property_get_DTE(This,lppaReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppaReturn)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Property_get_Value_Proxy( 
    Property * This,
    /* [retval][out] */ VARIANT *lppvReturn);


void __RPC_STUB Property_get_Value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Property_put_Value_Proxy( 
    Property * This,
    /* [in] */ VARIANT NewValue);


void __RPC_STUB Property_put_Value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propputref][id] */ HRESULT STDMETHODCALLTYPE Property_putref_Value_Proxy( 
    Property * This,
    /* [in] */ VARIANT NewValue);


void __RPC_STUB Property_putref_Value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Property_get_IndexedValue_Proxy( 
    Property * This,
    /* [in] */ VARIANT Index1,
    /* [optional][in] */ VARIANT Index2,
    /* [optional][in] */ VARIANT Index3,
    /* [optional][in] */ VARIANT Index4,
    /* [retval][out] */ VARIANT *Val);


void __RPC_STUB Property_get_IndexedValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Property_put_IndexedValue_Proxy( 
    Property * This,
    /* [in] */ VARIANT Index1,
    /* [optional][in] */ VARIANT Index2,
    /* [optional][in] */ VARIANT Index3,
    /* [optional][in] */ VARIANT Index4,
    /* [in] */ VARIANT NewValue);


void __RPC_STUB Property_put_IndexedValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Property_get_NumIndices_Proxy( 
    Property * This,
    /* [retval][out] */ short *lpiRetVal);


void __RPC_STUB Property_get_NumIndices_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE Property_get_Application_Proxy( 
    Property * This,
    /* [retval][out] */ IDispatch **lppidReturn);


void __RPC_STUB Property_get_Application_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE Property_get_Parent_Proxy( 
    Property * This,
    /* [retval][out] */ Properties **lpppReturn);


void __RPC_STUB Property_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE Property_get_Name_Proxy( 
    Property * This,
    /* [retval][out] */ BSTR *lpbstrReturn);


void __RPC_STUB Property_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE Property_get_Collection_Proxy( 
    Property * This,
    /* [retval][out] */ Properties **lpppReturn);


void __RPC_STUB Property_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE Property_get_Object_Proxy( 
    Property * This,
    /* [retval][out] */ IDispatch **lppunk);


void __RPC_STUB Property_get_Object_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propputref] */ HRESULT STDMETHODCALLTYPE Property_putref_Object_Proxy( 
    Property * This,
    /* [in] */ IUnknown *lpunk);


void __RPC_STUB Property_putref_Object_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Property_get_DTE_Proxy( 
    Property * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB Property_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Property_INTERFACE_DEFINED__ */


#ifndef __ISupportVSProperties_INTERFACE_DEFINED__
#define __ISupportVSProperties_INTERFACE_DEFINED__

/* interface ISupportVSProperties */
/* [object][hidden][uuid][oleautomation] */ 


EXTERN_C const IID IID_ISupportVSProperties;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6659ed14-2ab6-47f3-a890-00c8aba43b84")
    ISupportVSProperties : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE NotifyPropertiesDelete( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISupportVSPropertiesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISupportVSProperties * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISupportVSProperties * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISupportVSProperties * This);
        
        HRESULT ( STDMETHODCALLTYPE *NotifyPropertiesDelete )( 
            ISupportVSProperties * This);
        
        END_INTERFACE
    } ISupportVSPropertiesVtbl;

    interface ISupportVSProperties
    {
        CONST_VTBL struct ISupportVSPropertiesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISupportVSProperties_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ISupportVSProperties_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ISupportVSProperties_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ISupportVSProperties_NotifyPropertiesDelete(This)	\
    (This)->lpVtbl -> NotifyPropertiesDelete(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE ISupportVSProperties_NotifyPropertiesDelete_Proxy( 
    ISupportVSProperties * This);


void __RPC_STUB ISupportVSProperties_NotifyPropertiesDelete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ISupportVSProperties_INTERFACE_DEFINED__ */


#ifndef __SelectedItems_INTERFACE_DEFINED__
#define __SelectedItems_INTERFACE_DEFINED__

/* interface SelectedItems */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_SelectedItems;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6caa67cf-43ae-4184-aaab-0200ddf6b240")
    SelectedItems : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT index,
            /* [retval][out] */ SelectedItem **lplppReturn) = 0;
        
        virtual /* [id][restricted] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **lppiuReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *lplReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MultiSelect( 
            /* [retval][out] */ VARIANT_BOOL *pfMultiSelect) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SelectionContainer( 
            /* [retval][out] */ SelectionContainer **lppdispSelContainer) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SelectedItemsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            SelectedItems * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            SelectedItems * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            SelectedItems * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            SelectedItems * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            SelectedItems * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            SelectedItems * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            SelectedItems * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            SelectedItems * This,
            /* [in] */ VARIANT index,
            /* [retval][out] */ SelectedItem **lplppReturn);
        
        /* [id][restricted] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            SelectedItems * This,
            /* [retval][out] */ IUnknown **lppiuReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            SelectedItems * This,
            /* [retval][out] */ long *lplReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            SelectedItems * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            SelectedItems * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MultiSelect )( 
            SelectedItems * This,
            /* [retval][out] */ VARIANT_BOOL *pfMultiSelect);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SelectionContainer )( 
            SelectedItems * This,
            /* [retval][out] */ SelectionContainer **lppdispSelContainer);
        
        END_INTERFACE
    } SelectedItemsVtbl;

    interface SelectedItems
    {
        CONST_VTBL struct SelectedItemsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define SelectedItems_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define SelectedItems_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define SelectedItems_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define SelectedItems_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define SelectedItems_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define SelectedItems_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define SelectedItems_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define SelectedItems_Item(This,index,lplppReturn)	\
    (This)->lpVtbl -> Item(This,index,lplppReturn)

#define SelectedItems__NewEnum(This,lppiuReturn)	\
    (This)->lpVtbl -> _NewEnum(This,lppiuReturn)

#define SelectedItems_get_Count(This,lplReturn)	\
    (This)->lpVtbl -> get_Count(This,lplReturn)

#define SelectedItems_get_Parent(This,lppaReturn)	\
    (This)->lpVtbl -> get_Parent(This,lppaReturn)

#define SelectedItems_get_DTE(This,lppaReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppaReturn)

#define SelectedItems_get_MultiSelect(This,pfMultiSelect)	\
    (This)->lpVtbl -> get_MultiSelect(This,pfMultiSelect)

#define SelectedItems_get_SelectionContainer(This,lppdispSelContainer)	\
    (This)->lpVtbl -> get_SelectionContainer(This,lppdispSelContainer)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SelectedItems_Item_Proxy( 
    SelectedItems * This,
    /* [in] */ VARIANT index,
    /* [retval][out] */ SelectedItem **lplppReturn);


void __RPC_STUB SelectedItems_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][restricted] */ HRESULT STDMETHODCALLTYPE SelectedItems__NewEnum_Proxy( 
    SelectedItems * This,
    /* [retval][out] */ IUnknown **lppiuReturn);


void __RPC_STUB SelectedItems__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SelectedItems_get_Count_Proxy( 
    SelectedItems * This,
    /* [retval][out] */ long *lplReturn);


void __RPC_STUB SelectedItems_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SelectedItems_get_Parent_Proxy( 
    SelectedItems * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB SelectedItems_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SelectedItems_get_DTE_Proxy( 
    SelectedItems * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB SelectedItems_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SelectedItems_get_MultiSelect_Proxy( 
    SelectedItems * This,
    /* [retval][out] */ VARIANT_BOOL *pfMultiSelect);


void __RPC_STUB SelectedItems_get_MultiSelect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SelectedItems_get_SelectionContainer_Proxy( 
    SelectedItems * This,
    /* [retval][out] */ SelectionContainer **lppdispSelContainer);


void __RPC_STUB SelectedItems_get_SelectionContainer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __SelectedItems_INTERFACE_DEFINED__ */


#ifndef __SelectedItem_INTERFACE_DEFINED__
#define __SelectedItem_INTERFACE_DEFINED__

/* interface SelectedItem */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_SelectedItem;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("049d2cdf-3731-4cb6-a233-be97bce922d3")
    SelectedItem : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ SelectedItems **lppReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**lppReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Project( 
            /* [retval][out] */ Project **lppReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProjectItem( 
            /* [retval][out] */ ProjectItem **lppReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *lpbstrReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][restricted][hidden][id] */ HRESULT STDMETHODCALLTYPE get_InfoCount( 
            /* [retval][out] */ short *lpnCount) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][restricted][hidden][id] */ HRESULT STDMETHODCALLTYPE get_Info( 
            /* [in] */ short Index,
            /* [retval][out] */ VARIANT *lpbstrReturn) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SelectedItemVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            SelectedItem * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            SelectedItem * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            SelectedItem * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            SelectedItem * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            SelectedItem * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            SelectedItem * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            SelectedItem * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            SelectedItem * This,
            /* [retval][out] */ SelectedItems **lppReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            SelectedItem * This,
            /* [retval][out] */ DTE	**lppReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Project )( 
            SelectedItem * This,
            /* [retval][out] */ Project **lppReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProjectItem )( 
            SelectedItem * This,
            /* [retval][out] */ ProjectItem **lppReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            SelectedItem * This,
            /* [retval][out] */ BSTR *lpbstrReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][restricted][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *get_InfoCount )( 
            SelectedItem * This,
            /* [retval][out] */ short *lpnCount);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][restricted][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *get_Info )( 
            SelectedItem * This,
            /* [in] */ short Index,
            /* [retval][out] */ VARIANT *lpbstrReturn);
        
        END_INTERFACE
    } SelectedItemVtbl;

    interface SelectedItem
    {
        CONST_VTBL struct SelectedItemVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define SelectedItem_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define SelectedItem_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define SelectedItem_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define SelectedItem_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define SelectedItem_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define SelectedItem_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define SelectedItem_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define SelectedItem_get_Collection(This,lppReturn)	\
    (This)->lpVtbl -> get_Collection(This,lppReturn)

#define SelectedItem_get_DTE(This,lppReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppReturn)

#define SelectedItem_get_Project(This,lppReturn)	\
    (This)->lpVtbl -> get_Project(This,lppReturn)

#define SelectedItem_get_ProjectItem(This,lppReturn)	\
    (This)->lpVtbl -> get_ProjectItem(This,lppReturn)

#define SelectedItem_get_Name(This,lpbstrReturn)	\
    (This)->lpVtbl -> get_Name(This,lpbstrReturn)

#define SelectedItem_get_InfoCount(This,lpnCount)	\
    (This)->lpVtbl -> get_InfoCount(This,lpnCount)

#define SelectedItem_get_Info(This,Index,lpbstrReturn)	\
    (This)->lpVtbl -> get_Info(This,Index,lpbstrReturn)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SelectedItem_get_Collection_Proxy( 
    SelectedItem * This,
    /* [retval][out] */ SelectedItems **lppReturn);


void __RPC_STUB SelectedItem_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SelectedItem_get_DTE_Proxy( 
    SelectedItem * This,
    /* [retval][out] */ DTE	**lppReturn);


void __RPC_STUB SelectedItem_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SelectedItem_get_Project_Proxy( 
    SelectedItem * This,
    /* [retval][out] */ Project **lppReturn);


void __RPC_STUB SelectedItem_get_Project_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SelectedItem_get_ProjectItem_Proxy( 
    SelectedItem * This,
    /* [retval][out] */ ProjectItem **lppReturn);


void __RPC_STUB SelectedItem_get_ProjectItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SelectedItem_get_Name_Proxy( 
    SelectedItem * This,
    /* [retval][out] */ BSTR *lpbstrReturn);


void __RPC_STUB SelectedItem_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][restricted][hidden][id] */ HRESULT STDMETHODCALLTYPE SelectedItem_get_InfoCount_Proxy( 
    SelectedItem * This,
    /* [retval][out] */ short *lpnCount);


void __RPC_STUB SelectedItem_get_InfoCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][restricted][hidden][id] */ HRESULT STDMETHODCALLTYPE SelectedItem_get_Info_Proxy( 
    SelectedItem * This,
    /* [in] */ short Index,
    /* [retval][out] */ VARIANT *lpbstrReturn);


void __RPC_STUB SelectedItem_get_Info_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __SelectedItem_INTERFACE_DEFINED__ */


#ifndef __SelectionContainer_INTERFACE_DEFINED__
#define __SelectionContainer_INTERFACE_DEFINED__

/* interface SelectionContainer */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_SelectionContainer;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("02273422-8dd4-4a9f-8a8b-d70443d510f4")
    SelectionContainer : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT index,
            /* [retval][out] */ IDispatch **lplppReturn) = 0;
        
        virtual /* [id][restricted] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **lppiuReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *lplReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ SelectedItems **lppReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**lppReturn) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SelectionContainerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            SelectionContainer * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            SelectionContainer * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            SelectionContainer * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            SelectionContainer * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            SelectionContainer * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            SelectionContainer * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            SelectionContainer * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            SelectionContainer * This,
            /* [in] */ VARIANT index,
            /* [retval][out] */ IDispatch **lplppReturn);
        
        /* [id][restricted] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            SelectionContainer * This,
            /* [retval][out] */ IUnknown **lppiuReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            SelectionContainer * This,
            /* [retval][out] */ long *lplReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            SelectionContainer * This,
            /* [retval][out] */ SelectedItems **lppReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            SelectionContainer * This,
            /* [retval][out] */ DTE	**lppReturn);
        
        END_INTERFACE
    } SelectionContainerVtbl;

    interface SelectionContainer
    {
        CONST_VTBL struct SelectionContainerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define SelectionContainer_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define SelectionContainer_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define SelectionContainer_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define SelectionContainer_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define SelectionContainer_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define SelectionContainer_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define SelectionContainer_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define SelectionContainer_Item(This,index,lplppReturn)	\
    (This)->lpVtbl -> Item(This,index,lplppReturn)

#define SelectionContainer__NewEnum(This,lppiuReturn)	\
    (This)->lpVtbl -> _NewEnum(This,lppiuReturn)

#define SelectionContainer_get_Count(This,lplReturn)	\
    (This)->lpVtbl -> get_Count(This,lplReturn)

#define SelectionContainer_get_Parent(This,lppReturn)	\
    (This)->lpVtbl -> get_Parent(This,lppReturn)

#define SelectionContainer_get_DTE(This,lppReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppReturn)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SelectionContainer_Item_Proxy( 
    SelectionContainer * This,
    /* [in] */ VARIANT index,
    /* [retval][out] */ IDispatch **lplppReturn);


void __RPC_STUB SelectionContainer_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][restricted] */ HRESULT STDMETHODCALLTYPE SelectionContainer__NewEnum_Proxy( 
    SelectionContainer * This,
    /* [retval][out] */ IUnknown **lppiuReturn);


void __RPC_STUB SelectionContainer__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SelectionContainer_get_Count_Proxy( 
    SelectionContainer * This,
    /* [retval][out] */ long *lplReturn);


void __RPC_STUB SelectionContainer_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SelectionContainer_get_Parent_Proxy( 
    SelectionContainer * This,
    /* [retval][out] */ SelectedItems **lppReturn);


void __RPC_STUB SelectionContainer_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SelectionContainer_get_DTE_Proxy( 
    SelectionContainer * This,
    /* [retval][out] */ DTE	**lppReturn);


void __RPC_STUB SelectionContainer_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __SelectionContainer_INTERFACE_DEFINED__ */


#ifndef __Windows_INTERFACE_DEFINED__
#define __Windows_INTERFACE_DEFINED__

/* interface Windows */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_Windows;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2294311A-B7BC-4789-B365-1C15FF2CD17C")
    Windows : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT index,
            /* [retval][out] */ Window **lppcReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *lplReturn) = 0;
        
        virtual /* [restricted][id] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **lppiuReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateToolWindow( 
            /* [in] */ AddIn *AddInInst,
            /* [in] */ BSTR ProgId,
            /* [in] */ BSTR Caption,
            /* [in] */ BSTR GuidPosition,
            /* [out][in] */ IDispatch **DocObj,
            /* [retval][out] */ Window **lppcReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateLinkedWindowFrame( 
            /* [in] */ Window *Window1,
            /* [in] */ Window *Window2,
            /* [in] */ vsLinkedWindowType Link,
            /* [retval][out] */ Window **LinkedWindowFrame) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct WindowsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Windows * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Windows * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Windows * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Windows * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Windows * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Windows * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Windows * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Windows * This,
            /* [in] */ VARIANT index,
            /* [retval][out] */ Window **lppcReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Windows * This,
            /* [retval][out] */ long *lplReturn);
        
        /* [restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            Windows * This,
            /* [retval][out] */ IUnknown **lppiuReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateToolWindow )( 
            Windows * This,
            /* [in] */ AddIn *AddInInst,
            /* [in] */ BSTR ProgId,
            /* [in] */ BSTR Caption,
            /* [in] */ BSTR GuidPosition,
            /* [out][in] */ IDispatch **DocObj,
            /* [retval][out] */ Window **lppcReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Windows * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Windows * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateLinkedWindowFrame )( 
            Windows * This,
            /* [in] */ Window *Window1,
            /* [in] */ Window *Window2,
            /* [in] */ vsLinkedWindowType Link,
            /* [retval][out] */ Window **LinkedWindowFrame);
        
        END_INTERFACE
    } WindowsVtbl;

    interface Windows
    {
        CONST_VTBL struct WindowsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Windows_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Windows_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Windows_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Windows_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Windows_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Windows_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Windows_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Windows_Item(This,index,lppcReturn)	\
    (This)->lpVtbl -> Item(This,index,lppcReturn)

#define Windows_get_Count(This,lplReturn)	\
    (This)->lpVtbl -> get_Count(This,lplReturn)

#define Windows__NewEnum(This,lppiuReturn)	\
    (This)->lpVtbl -> _NewEnum(This,lppiuReturn)

#define Windows_CreateToolWindow(This,AddInInst,ProgId,Caption,GuidPosition,DocObj,lppcReturn)	\
    (This)->lpVtbl -> CreateToolWindow(This,AddInInst,ProgId,Caption,GuidPosition,DocObj,lppcReturn)

#define Windows_get_DTE(This,lppaReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppaReturn)

#define Windows_get_Parent(This,lppaReturn)	\
    (This)->lpVtbl -> get_Parent(This,lppaReturn)

#define Windows_CreateLinkedWindowFrame(This,Window1,Window2,Link,LinkedWindowFrame)	\
    (This)->lpVtbl -> CreateLinkedWindowFrame(This,Window1,Window2,Link,LinkedWindowFrame)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Windows_Item_Proxy( 
    Windows * This,
    /* [in] */ VARIANT index,
    /* [retval][out] */ Window **lppcReturn);


void __RPC_STUB Windows_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Windows_get_Count_Proxy( 
    Windows * This,
    /* [retval][out] */ long *lplReturn);


void __RPC_STUB Windows_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted][id] */ HRESULT STDMETHODCALLTYPE Windows__NewEnum_Proxy( 
    Windows * This,
    /* [retval][out] */ IUnknown **lppiuReturn);


void __RPC_STUB Windows__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Windows_CreateToolWindow_Proxy( 
    Windows * This,
    /* [in] */ AddIn *AddInInst,
    /* [in] */ BSTR ProgId,
    /* [in] */ BSTR Caption,
    /* [in] */ BSTR GuidPosition,
    /* [out][in] */ IDispatch **DocObj,
    /* [retval][out] */ Window **lppcReturn);


void __RPC_STUB Windows_CreateToolWindow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Windows_get_DTE_Proxy( 
    Windows * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB Windows_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Windows_get_Parent_Proxy( 
    Windows * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB Windows_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Windows_CreateLinkedWindowFrame_Proxy( 
    Windows * This,
    /* [in] */ Window *Window1,
    /* [in] */ Window *Window2,
    /* [in] */ vsLinkedWindowType Link,
    /* [retval][out] */ Window **LinkedWindowFrame);


void __RPC_STUB Windows_CreateLinkedWindowFrame_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Windows_INTERFACE_DEFINED__ */


#ifndef __Window_INTERFACE_DEFINED__
#define __Window_INTERFACE_DEFINED__

/* interface Window */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_Window;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0beab46b-4c07-4f94-a8d7-1626020e4e53")
    Window : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ Windows **lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Visible( 
            /* [retval][out] */ VARIANT_BOOL *pfVisible) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Visible( 
            /* [in] */ VARIANT_BOOL fVisible) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Left( 
            /* [retval][out] */ long *plLeft) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Left( 
            /* [in] */ long lLeft) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Top( 
            /* [retval][out] */ long *plTop) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Top( 
            /* [in] */ long lTop_r) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ long *plWidth) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Width( 
            /* [in] */ long lWidth) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ long *plHeight) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Height( 
            /* [in] */ long lHeight_r) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_WindowState( 
            /* [retval][out] */ vsWindowState *plWindowState) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_WindowState( 
            /* [in] */ vsWindowState wstWindowState) = 0;
        
        virtual /* [hidden][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetFocus( void) = 0;
        
        virtual /* [hidden][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ vsWindowType *pKind) = 0;
        
        virtual /* [hidden][restricted][id] */ HRESULT STDMETHODCALLTYPE SetKind( 
            /* [in] */ vsWindowType eKind) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LinkedWindows( 
            /* [retval][out] */ LinkedWindows **ppwnsCollection) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LinkedWindowFrame( 
            /* [retval][out] */ Window **ppwinFrame) = 0;
        
        virtual /* [hidden][restricted][id] */ HRESULT STDMETHODCALLTYPE Detach( void) = 0;
        
        virtual /* [hidden][restricted][id] */ HRESULT STDMETHODCALLTYPE Attach( 
            /* [in] */ long lWindowHandle) = 0;
        
        virtual /* [hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_HWnd( 
            /* [retval][out] */ long *plWindowHandle) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Kind( 
            /* [retval][out] */ BSTR *pbstrType) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ObjectKind( 
            /* [retval][out] */ BSTR *pbstrTypeGUID) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Object( 
            /* [retval][out] */ IDispatch **ppToolObject) = 0;
        
        virtual /* [hidden][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DocumentData( 
            /* [defaultvalue][in] */ BSTR bstrWhichData,
            /* [retval][out] */ IDispatch **ppDataObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProjectItem( 
            /* [retval][out] */ ProjectItem **ppProjItem) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Project( 
            /* [retval][out] */ Project **ppProj) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Document( 
            /* [retval][out] */ Document **ppDocument) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Selection( 
            /* [retval][out] */ IDispatch **ppDocument) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Linkable( 
            /* [retval][out] */ VARIANT_BOOL *pLinkable) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Linkable( 
            /* [in] */ VARIANT_BOOL Linkable) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Activate( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Close( 
            /* [defaultvalue][in] */ vsSaveChanges SaveChanges = vsSaveChangesNo) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Caption( 
            /* [retval][out] */ BSTR *pbstrTitle) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Caption( 
            /* [in] */ BSTR pbstrTitle) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetSelectionContainer( 
            SAFEARRAY * *Objects) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsFloating( 
            /* [retval][out] */ VARIANT_BOOL *Floating) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_IsFloating( 
            /* [in] */ VARIANT_BOOL Floating) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AutoHides( 
            /* [retval][out] */ VARIANT_BOOL *Hides) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_AutoHides( 
            /* [in] */ VARIANT_BOOL Hides) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetTabPicture( 
            VARIANT Picture) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ContextAttributes( 
            /* [retval][out] */ ContextAttributes **ppVal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct WindowVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Window * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Window * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Window * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Window * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Window * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Window * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Window * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            Window * This,
            /* [retval][out] */ Windows **lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Visible )( 
            Window * This,
            /* [retval][out] */ VARIANT_BOOL *pfVisible);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Visible )( 
            Window * This,
            /* [in] */ VARIANT_BOOL fVisible);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Left )( 
            Window * This,
            /* [retval][out] */ long *plLeft);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Left )( 
            Window * This,
            /* [in] */ long lLeft);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Top )( 
            Window * This,
            /* [retval][out] */ long *plTop);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Top )( 
            Window * This,
            /* [in] */ long lTop_r);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            Window * This,
            /* [retval][out] */ long *plWidth);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Width )( 
            Window * This,
            /* [in] */ long lWidth);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            Window * This,
            /* [retval][out] */ long *plHeight);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Height )( 
            Window * This,
            /* [in] */ long lHeight_r);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WindowState )( 
            Window * This,
            /* [retval][out] */ vsWindowState *plWindowState);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_WindowState )( 
            Window * This,
            /* [in] */ vsWindowState wstWindowState);
        
        /* [hidden][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetFocus )( 
            Window * This);
        
        /* [hidden][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            Window * This,
            /* [retval][out] */ vsWindowType *pKind);
        
        /* [hidden][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *SetKind )( 
            Window * This,
            /* [in] */ vsWindowType eKind);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinkedWindows )( 
            Window * This,
            /* [retval][out] */ LinkedWindows **ppwnsCollection);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LinkedWindowFrame )( 
            Window * This,
            /* [retval][out] */ Window **ppwinFrame);
        
        /* [hidden][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *Detach )( 
            Window * This);
        
        /* [hidden][restricted][id] */ HRESULT ( STDMETHODCALLTYPE *Attach )( 
            Window * This,
            /* [in] */ long lWindowHandle);
        
        /* [hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HWnd )( 
            Window * This,
            /* [retval][out] */ long *plWindowHandle);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Kind )( 
            Window * This,
            /* [retval][out] */ BSTR *pbstrType);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ObjectKind )( 
            Window * This,
            /* [retval][out] */ BSTR *pbstrTypeGUID);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Object )( 
            Window * This,
            /* [retval][out] */ IDispatch **ppToolObject);
        
        /* [hidden][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DocumentData )( 
            Window * This,
            /* [defaultvalue][in] */ BSTR bstrWhichData,
            /* [retval][out] */ IDispatch **ppDataObject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProjectItem )( 
            Window * This,
            /* [retval][out] */ ProjectItem **ppProjItem);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Project )( 
            Window * This,
            /* [retval][out] */ Project **ppProj);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Window * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Document )( 
            Window * This,
            /* [retval][out] */ Document **ppDocument);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Selection )( 
            Window * This,
            /* [retval][out] */ IDispatch **ppDocument);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Linkable )( 
            Window * This,
            /* [retval][out] */ VARIANT_BOOL *pLinkable);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Linkable )( 
            Window * This,
            /* [in] */ VARIANT_BOOL Linkable);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Activate )( 
            Window * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Close )( 
            Window * This,
            /* [defaultvalue][in] */ vsSaveChanges SaveChanges);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Caption )( 
            Window * This,
            /* [retval][out] */ BSTR *pbstrTitle);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Caption )( 
            Window * This,
            /* [in] */ BSTR pbstrTitle);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetSelectionContainer )( 
            Window * This,
            SAFEARRAY * *Objects);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsFloating )( 
            Window * This,
            /* [retval][out] */ VARIANT_BOOL *Floating);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IsFloating )( 
            Window * This,
            /* [in] */ VARIANT_BOOL Floating);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AutoHides )( 
            Window * This,
            /* [retval][out] */ VARIANT_BOOL *Hides);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_AutoHides )( 
            Window * This,
            /* [in] */ VARIANT_BOOL Hides);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetTabPicture )( 
            Window * This,
            VARIANT Picture);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ContextAttributes )( 
            Window * This,
            /* [retval][out] */ ContextAttributes **ppVal);
        
        END_INTERFACE
    } WindowVtbl;

    interface Window
    {
        CONST_VTBL struct WindowVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Window_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Window_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Window_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Window_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Window_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Window_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Window_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Window_get_Collection(This,lppaReturn)	\
    (This)->lpVtbl -> get_Collection(This,lppaReturn)

#define Window_get_Visible(This,pfVisible)	\
    (This)->lpVtbl -> get_Visible(This,pfVisible)

#define Window_put_Visible(This,fVisible)	\
    (This)->lpVtbl -> put_Visible(This,fVisible)

#define Window_get_Left(This,plLeft)	\
    (This)->lpVtbl -> get_Left(This,plLeft)

#define Window_put_Left(This,lLeft)	\
    (This)->lpVtbl -> put_Left(This,lLeft)

#define Window_get_Top(This,plTop)	\
    (This)->lpVtbl -> get_Top(This,plTop)

#define Window_put_Top(This,lTop_r)	\
    (This)->lpVtbl -> put_Top(This,lTop_r)

#define Window_get_Width(This,plWidth)	\
    (This)->lpVtbl -> get_Width(This,plWidth)

#define Window_put_Width(This,lWidth)	\
    (This)->lpVtbl -> put_Width(This,lWidth)

#define Window_get_Height(This,plHeight)	\
    (This)->lpVtbl -> get_Height(This,plHeight)

#define Window_put_Height(This,lHeight_r)	\
    (This)->lpVtbl -> put_Height(This,lHeight_r)

#define Window_get_WindowState(This,plWindowState)	\
    (This)->lpVtbl -> get_WindowState(This,plWindowState)

#define Window_put_WindowState(This,wstWindowState)	\
    (This)->lpVtbl -> put_WindowState(This,wstWindowState)

#define Window_SetFocus(This)	\
    (This)->lpVtbl -> SetFocus(This)

#define Window_get_Type(This,pKind)	\
    (This)->lpVtbl -> get_Type(This,pKind)

#define Window_SetKind(This,eKind)	\
    (This)->lpVtbl -> SetKind(This,eKind)

#define Window_get_LinkedWindows(This,ppwnsCollection)	\
    (This)->lpVtbl -> get_LinkedWindows(This,ppwnsCollection)

#define Window_get_LinkedWindowFrame(This,ppwinFrame)	\
    (This)->lpVtbl -> get_LinkedWindowFrame(This,ppwinFrame)

#define Window_Detach(This)	\
    (This)->lpVtbl -> Detach(This)

#define Window_Attach(This,lWindowHandle)	\
    (This)->lpVtbl -> Attach(This,lWindowHandle)

#define Window_get_HWnd(This,plWindowHandle)	\
    (This)->lpVtbl -> get_HWnd(This,plWindowHandle)

#define Window_get_Kind(This,pbstrType)	\
    (This)->lpVtbl -> get_Kind(This,pbstrType)

#define Window_get_ObjectKind(This,pbstrTypeGUID)	\
    (This)->lpVtbl -> get_ObjectKind(This,pbstrTypeGUID)

#define Window_get_Object(This,ppToolObject)	\
    (This)->lpVtbl -> get_Object(This,ppToolObject)

#define Window_get_DocumentData(This,bstrWhichData,ppDataObject)	\
    (This)->lpVtbl -> get_DocumentData(This,bstrWhichData,ppDataObject)

#define Window_get_ProjectItem(This,ppProjItem)	\
    (This)->lpVtbl -> get_ProjectItem(This,ppProjItem)

#define Window_get_Project(This,ppProj)	\
    (This)->lpVtbl -> get_Project(This,ppProj)

#define Window_get_DTE(This,lppaReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppaReturn)

#define Window_get_Document(This,ppDocument)	\
    (This)->lpVtbl -> get_Document(This,ppDocument)

#define Window_get_Selection(This,ppDocument)	\
    (This)->lpVtbl -> get_Selection(This,ppDocument)

#define Window_get_Linkable(This,pLinkable)	\
    (This)->lpVtbl -> get_Linkable(This,pLinkable)

#define Window_put_Linkable(This,Linkable)	\
    (This)->lpVtbl -> put_Linkable(This,Linkable)

#define Window_Activate(This)	\
    (This)->lpVtbl -> Activate(This)

#define Window_Close(This,SaveChanges)	\
    (This)->lpVtbl -> Close(This,SaveChanges)

#define Window_get_Caption(This,pbstrTitle)	\
    (This)->lpVtbl -> get_Caption(This,pbstrTitle)

#define Window_put_Caption(This,pbstrTitle)	\
    (This)->lpVtbl -> put_Caption(This,pbstrTitle)

#define Window_SetSelectionContainer(This,Objects)	\
    (This)->lpVtbl -> SetSelectionContainer(This,Objects)

#define Window_get_IsFloating(This,Floating)	\
    (This)->lpVtbl -> get_IsFloating(This,Floating)

#define Window_put_IsFloating(This,Floating)	\
    (This)->lpVtbl -> put_IsFloating(This,Floating)

#define Window_get_AutoHides(This,Hides)	\
    (This)->lpVtbl -> get_AutoHides(This,Hides)

#define Window_put_AutoHides(This,Hides)	\
    (This)->lpVtbl -> put_AutoHides(This,Hides)

#define Window_SetTabPicture(This,Picture)	\
    (This)->lpVtbl -> SetTabPicture(This,Picture)

#define Window_get_ContextAttributes(This,ppVal)	\
    (This)->lpVtbl -> get_ContextAttributes(This,ppVal)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Window_get_Collection_Proxy( 
    Window * This,
    /* [retval][out] */ Windows **lppaReturn);


void __RPC_STUB Window_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Window_get_Visible_Proxy( 
    Window * This,
    /* [retval][out] */ VARIANT_BOOL *pfVisible);


void __RPC_STUB Window_get_Visible_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Window_put_Visible_Proxy( 
    Window * This,
    /* [in] */ VARIANT_BOOL fVisible);


void __RPC_STUB Window_put_Visible_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Window_get_Left_Proxy( 
    Window * This,
    /* [retval][out] */ long *plLeft);


void __RPC_STUB Window_get_Left_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Window_put_Left_Proxy( 
    Window * This,
    /* [in] */ long lLeft);


void __RPC_STUB Window_put_Left_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Window_get_Top_Proxy( 
    Window * This,
    /* [retval][out] */ long *plTop);


void __RPC_STUB Window_get_Top_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Window_put_Top_Proxy( 
    Window * This,
    /* [in] */ long lTop_r);


void __RPC_STUB Window_put_Top_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Window_get_Width_Proxy( 
    Window * This,
    /* [retval][out] */ long *plWidth);


void __RPC_STUB Window_get_Width_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Window_put_Width_Proxy( 
    Window * This,
    /* [in] */ long lWidth);


void __RPC_STUB Window_put_Width_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Window_get_Height_Proxy( 
    Window * This,
    /* [retval][out] */ long *plHeight);


void __RPC_STUB Window_get_Height_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Window_put_Height_Proxy( 
    Window * This,
    /* [in] */ long lHeight_r);


void __RPC_STUB Window_put_Height_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Window_get_WindowState_Proxy( 
    Window * This,
    /* [retval][out] */ vsWindowState *plWindowState);


void __RPC_STUB Window_get_WindowState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Window_put_WindowState_Proxy( 
    Window * This,
    /* [in] */ vsWindowState wstWindowState);


void __RPC_STUB Window_put_WindowState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Window_SetFocus_Proxy( 
    Window * This);


void __RPC_STUB Window_SetFocus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Window_get_Type_Proxy( 
    Window * This,
    /* [retval][out] */ vsWindowType *pKind);


void __RPC_STUB Window_get_Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][restricted][id] */ HRESULT STDMETHODCALLTYPE Window_SetKind_Proxy( 
    Window * This,
    /* [in] */ vsWindowType eKind);


void __RPC_STUB Window_SetKind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Window_get_LinkedWindows_Proxy( 
    Window * This,
    /* [retval][out] */ LinkedWindows **ppwnsCollection);


void __RPC_STUB Window_get_LinkedWindows_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Window_get_LinkedWindowFrame_Proxy( 
    Window * This,
    /* [retval][out] */ Window **ppwinFrame);


void __RPC_STUB Window_get_LinkedWindowFrame_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][restricted][id] */ HRESULT STDMETHODCALLTYPE Window_Detach_Proxy( 
    Window * This);


void __RPC_STUB Window_Detach_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][restricted][id] */ HRESULT STDMETHODCALLTYPE Window_Attach_Proxy( 
    Window * This,
    /* [in] */ long lWindowHandle);


void __RPC_STUB Window_Attach_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][propget][id] */ HRESULT STDMETHODCALLTYPE Window_get_HWnd_Proxy( 
    Window * This,
    /* [retval][out] */ long *plWindowHandle);


void __RPC_STUB Window_get_HWnd_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Window_get_Kind_Proxy( 
    Window * This,
    /* [retval][out] */ BSTR *pbstrType);


void __RPC_STUB Window_get_Kind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Window_get_ObjectKind_Proxy( 
    Window * This,
    /* [retval][out] */ BSTR *pbstrTypeGUID);


void __RPC_STUB Window_get_ObjectKind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Window_get_Object_Proxy( 
    Window * This,
    /* [retval][out] */ IDispatch **ppToolObject);


void __RPC_STUB Window_get_Object_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Window_get_DocumentData_Proxy( 
    Window * This,
    /* [defaultvalue][in] */ BSTR bstrWhichData,
    /* [retval][out] */ IDispatch **ppDataObject);


void __RPC_STUB Window_get_DocumentData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Window_get_ProjectItem_Proxy( 
    Window * This,
    /* [retval][out] */ ProjectItem **ppProjItem);


void __RPC_STUB Window_get_ProjectItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Window_get_Project_Proxy( 
    Window * This,
    /* [retval][out] */ Project **ppProj);


void __RPC_STUB Window_get_Project_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Window_get_DTE_Proxy( 
    Window * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB Window_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Window_get_Document_Proxy( 
    Window * This,
    /* [retval][out] */ Document **ppDocument);


void __RPC_STUB Window_get_Document_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Window_get_Selection_Proxy( 
    Window * This,
    /* [retval][out] */ IDispatch **ppDocument);


void __RPC_STUB Window_get_Selection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Window_get_Linkable_Proxy( 
    Window * This,
    /* [retval][out] */ VARIANT_BOOL *pLinkable);


void __RPC_STUB Window_get_Linkable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Window_put_Linkable_Proxy( 
    Window * This,
    /* [in] */ VARIANT_BOOL Linkable);


void __RPC_STUB Window_put_Linkable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Window_Activate_Proxy( 
    Window * This);


void __RPC_STUB Window_Activate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Window_Close_Proxy( 
    Window * This,
    /* [defaultvalue][in] */ vsSaveChanges SaveChanges);


void __RPC_STUB Window_Close_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Window_get_Caption_Proxy( 
    Window * This,
    /* [retval][out] */ BSTR *pbstrTitle);


void __RPC_STUB Window_get_Caption_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Window_put_Caption_Proxy( 
    Window * This,
    /* [in] */ BSTR pbstrTitle);


void __RPC_STUB Window_put_Caption_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Window_SetSelectionContainer_Proxy( 
    Window * This,
    SAFEARRAY * *Objects);


void __RPC_STUB Window_SetSelectionContainer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Window_get_IsFloating_Proxy( 
    Window * This,
    /* [retval][out] */ VARIANT_BOOL *Floating);


void __RPC_STUB Window_get_IsFloating_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Window_put_IsFloating_Proxy( 
    Window * This,
    /* [in] */ VARIANT_BOOL Floating);


void __RPC_STUB Window_put_IsFloating_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Window_get_AutoHides_Proxy( 
    Window * This,
    /* [retval][out] */ VARIANT_BOOL *Hides);


void __RPC_STUB Window_get_AutoHides_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Window_put_AutoHides_Proxy( 
    Window * This,
    /* [in] */ VARIANT_BOOL Hides);


void __RPC_STUB Window_put_AutoHides_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Window_SetTabPicture_Proxy( 
    Window * This,
    VARIANT Picture);


void __RPC_STUB Window_SetTabPicture_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Window_get_ContextAttributes_Proxy( 
    Window * This,
    /* [retval][out] */ ContextAttributes **ppVal);


void __RPC_STUB Window_get_ContextAttributes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Window_INTERFACE_DEFINED__ */


#ifndef __LinkedWindows_INTERFACE_DEFINED__
#define __LinkedWindows_INTERFACE_DEFINED__

/* interface LinkedWindows */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_LinkedWindows;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f00ef34a-a654-4c1b-897a-585d5bcbb35a")
    LinkedWindows : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Window **ppptReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT index,
            /* [retval][out] */ Window **lppcReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *lplReturn) = 0;
        
        virtual /* [restricted][id] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **lppiuReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Remove( 
            /* [in] */ Window *Window) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ Window *Window) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct LinkedWindowsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            LinkedWindows * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            LinkedWindows * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            LinkedWindows * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            LinkedWindows * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            LinkedWindows * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            LinkedWindows * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            LinkedWindows * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            LinkedWindows * This,
            /* [retval][out] */ Window **ppptReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            LinkedWindows * This,
            /* [in] */ VARIANT index,
            /* [retval][out] */ Window **lppcReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            LinkedWindows * This,
            /* [retval][out] */ long *lplReturn);
        
        /* [restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            LinkedWindows * This,
            /* [retval][out] */ IUnknown **lppiuReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Remove )( 
            LinkedWindows * This,
            /* [in] */ Window *Window);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            LinkedWindows * This,
            /* [in] */ Window *Window);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            LinkedWindows * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        END_INTERFACE
    } LinkedWindowsVtbl;

    interface LinkedWindows
    {
        CONST_VTBL struct LinkedWindowsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define LinkedWindows_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define LinkedWindows_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define LinkedWindows_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define LinkedWindows_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define LinkedWindows_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define LinkedWindows_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define LinkedWindows_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define LinkedWindows_get_Parent(This,ppptReturn)	\
    (This)->lpVtbl -> get_Parent(This,ppptReturn)

#define LinkedWindows_Item(This,index,lppcReturn)	\
    (This)->lpVtbl -> Item(This,index,lppcReturn)

#define LinkedWindows_get_Count(This,lplReturn)	\
    (This)->lpVtbl -> get_Count(This,lplReturn)

#define LinkedWindows__NewEnum(This,lppiuReturn)	\
    (This)->lpVtbl -> _NewEnum(This,lppiuReturn)

#define LinkedWindows_Remove(This,Window)	\
    (This)->lpVtbl -> Remove(This,Window)

#define LinkedWindows_Add(This,Window)	\
    (This)->lpVtbl -> Add(This,Window)

#define LinkedWindows_get_DTE(This,lppaReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppaReturn)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE LinkedWindows_get_Parent_Proxy( 
    LinkedWindows * This,
    /* [retval][out] */ Window **ppptReturn);


void __RPC_STUB LinkedWindows_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LinkedWindows_Item_Proxy( 
    LinkedWindows * This,
    /* [in] */ VARIANT index,
    /* [retval][out] */ Window **lppcReturn);


void __RPC_STUB LinkedWindows_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE LinkedWindows_get_Count_Proxy( 
    LinkedWindows * This,
    /* [retval][out] */ long *lplReturn);


void __RPC_STUB LinkedWindows_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted][id] */ HRESULT STDMETHODCALLTYPE LinkedWindows__NewEnum_Proxy( 
    LinkedWindows * This,
    /* [retval][out] */ IUnknown **lppiuReturn);


void __RPC_STUB LinkedWindows__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LinkedWindows_Remove_Proxy( 
    LinkedWindows * This,
    /* [in] */ Window *Window);


void __RPC_STUB LinkedWindows_Remove_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LinkedWindows_Add_Proxy( 
    LinkedWindows * This,
    /* [in] */ Window *Window);


void __RPC_STUB LinkedWindows_Add_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE LinkedWindows_get_DTE_Proxy( 
    LinkedWindows * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB LinkedWindows_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __LinkedWindows_INTERFACE_DEFINED__ */


#ifndef __Events_INTERFACE_DEFINED__
#define __Events_INTERFACE_DEFINED__

/* interface Events */
/* [object][helpstringcontext][helpstring][helpcontext][dual][uuid] */ 


EXTERN_C const IID IID_Events;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("134170F8-93B1-42dd-9F89-A2AC7010BA07")
    Events : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CommandBarEvents( 
            /* [in] */ IDispatch *CommandBarControl,
            /* [retval][out] */ CommandBarEvents	**prceNew) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CommandEvents( 
            /* [defaultvalue][in] */ BSTR Guid,
            /* [defaultvalue][in] */ long ID,
            /* [retval][out] */ CommandEvents	**ppceNew) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SelectionEvents( 
            /* [retval][out] */ SelectionEvents	**ppceNew) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SolutionEvents( 
            /* [retval][out] */ SolutionEvents	**ppceNew) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BuildEvents( 
            /* [retval][out] */ BuildEvents	**ppceNew) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_WindowEvents( 
            /* [defaultvalue][in] */ Window *WindowFilter,
            /* [retval][out] */ WindowEvents	**ppceNew) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_OutputWindowEvents( 
            /* [defaultvalue][in] */ BSTR Pane,
            /* [retval][out] */ OutputWindowEvents	**ppceNew) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FindEvents( 
            /* [retval][out] */ FindEvents	**ppFindEvents) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TaskListEvents( 
            /* [defaultvalue][in] */ BSTR Filter,
            /* [retval][out] */ TaskListEvents	**ppceNew) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTEEvents( 
            /* [retval][out] */ DTEEvents	**ppceNew) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DocumentEvents( 
            /* [defaultvalue][in] */ Document *Document,
            /* [retval][out] */ DocumentEvents	**ppceNew) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SolutionItemsEvents( 
            /* [retval][out] */ ProjectItemsEvents	**ppeNew) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MiscFilesEvents( 
            /* [retval][out] */ ProjectItemsEvents	**ppeNew) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DebuggerEvents( 
            /* [retval][out] */ DebuggerEvents	**ppeNew) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextEditorEvents( 
            /* [defaultvalue][in] */ TextDocument *TextDocumentFilter,
            /* [retval][out] */ TextEditorEvents	**ppeNew) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetObject( 
            /* [in] */ BSTR Name,
            /* [retval][out] */ IDispatch **ppObject) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct EventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Events * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Events * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Events * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Events * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Events * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Events * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Events * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CommandBarEvents )( 
            Events * This,
            /* [in] */ IDispatch *CommandBarControl,
            /* [retval][out] */ CommandBarEvents	**prceNew);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CommandEvents )( 
            Events * This,
            /* [defaultvalue][in] */ BSTR Guid,
            /* [defaultvalue][in] */ long ID,
            /* [retval][out] */ CommandEvents	**ppceNew);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SelectionEvents )( 
            Events * This,
            /* [retval][out] */ SelectionEvents	**ppceNew);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SolutionEvents )( 
            Events * This,
            /* [retval][out] */ SolutionEvents	**ppceNew);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BuildEvents )( 
            Events * This,
            /* [retval][out] */ BuildEvents	**ppceNew);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_WindowEvents )( 
            Events * This,
            /* [defaultvalue][in] */ Window *WindowFilter,
            /* [retval][out] */ WindowEvents	**ppceNew);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OutputWindowEvents )( 
            Events * This,
            /* [defaultvalue][in] */ BSTR Pane,
            /* [retval][out] */ OutputWindowEvents	**ppceNew);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FindEvents )( 
            Events * This,
            /* [retval][out] */ FindEvents	**ppFindEvents);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TaskListEvents )( 
            Events * This,
            /* [defaultvalue][in] */ BSTR Filter,
            /* [retval][out] */ TaskListEvents	**ppceNew);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTEEvents )( 
            Events * This,
            /* [retval][out] */ DTEEvents	**ppceNew);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DocumentEvents )( 
            Events * This,
            /* [defaultvalue][in] */ Document *Document,
            /* [retval][out] */ DocumentEvents	**ppceNew);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SolutionItemsEvents )( 
            Events * This,
            /* [retval][out] */ ProjectItemsEvents	**ppeNew);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MiscFilesEvents )( 
            Events * This,
            /* [retval][out] */ ProjectItemsEvents	**ppeNew);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DebuggerEvents )( 
            Events * This,
            /* [retval][out] */ DebuggerEvents	**ppeNew);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextEditorEvents )( 
            Events * This,
            /* [defaultvalue][in] */ TextDocument *TextDocumentFilter,
            /* [retval][out] */ TextEditorEvents	**ppeNew);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetObject )( 
            Events * This,
            /* [in] */ BSTR Name,
            /* [retval][out] */ IDispatch **ppObject);
        
        END_INTERFACE
    } EventsVtbl;

    interface Events
    {
        CONST_VTBL struct EventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Events_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Events_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Events_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Events_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Events_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Events_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Events_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Events_get_CommandBarEvents(This,CommandBarControl,prceNew)	\
    (This)->lpVtbl -> get_CommandBarEvents(This,CommandBarControl,prceNew)

#define Events_get_CommandEvents(This,Guid,ID,ppceNew)	\
    (This)->lpVtbl -> get_CommandEvents(This,Guid,ID,ppceNew)

#define Events_get_SelectionEvents(This,ppceNew)	\
    (This)->lpVtbl -> get_SelectionEvents(This,ppceNew)

#define Events_get_SolutionEvents(This,ppceNew)	\
    (This)->lpVtbl -> get_SolutionEvents(This,ppceNew)

#define Events_get_BuildEvents(This,ppceNew)	\
    (This)->lpVtbl -> get_BuildEvents(This,ppceNew)

#define Events_get_WindowEvents(This,WindowFilter,ppceNew)	\
    (This)->lpVtbl -> get_WindowEvents(This,WindowFilter,ppceNew)

#define Events_get_OutputWindowEvents(This,Pane,ppceNew)	\
    (This)->lpVtbl -> get_OutputWindowEvents(This,Pane,ppceNew)

#define Events_get_FindEvents(This,ppFindEvents)	\
    (This)->lpVtbl -> get_FindEvents(This,ppFindEvents)

#define Events_get_TaskListEvents(This,Filter,ppceNew)	\
    (This)->lpVtbl -> get_TaskListEvents(This,Filter,ppceNew)

#define Events_get_DTEEvents(This,ppceNew)	\
    (This)->lpVtbl -> get_DTEEvents(This,ppceNew)

#define Events_get_DocumentEvents(This,Document,ppceNew)	\
    (This)->lpVtbl -> get_DocumentEvents(This,Document,ppceNew)

#define Events_get_SolutionItemsEvents(This,ppeNew)	\
    (This)->lpVtbl -> get_SolutionItemsEvents(This,ppeNew)

#define Events_get_MiscFilesEvents(This,ppeNew)	\
    (This)->lpVtbl -> get_MiscFilesEvents(This,ppeNew)

#define Events_get_DebuggerEvents(This,ppeNew)	\
    (This)->lpVtbl -> get_DebuggerEvents(This,ppeNew)

#define Events_get_TextEditorEvents(This,TextDocumentFilter,ppeNew)	\
    (This)->lpVtbl -> get_TextEditorEvents(This,TextDocumentFilter,ppeNew)

#define Events_GetObject(This,Name,ppObject)	\
    (This)->lpVtbl -> GetObject(This,Name,ppObject)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Events_get_CommandBarEvents_Proxy( 
    Events * This,
    /* [in] */ IDispatch *CommandBarControl,
    /* [retval][out] */ CommandBarEvents	**prceNew);


void __RPC_STUB Events_get_CommandBarEvents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Events_get_CommandEvents_Proxy( 
    Events * This,
    /* [defaultvalue][in] */ BSTR Guid,
    /* [defaultvalue][in] */ long ID,
    /* [retval][out] */ CommandEvents	**ppceNew);


void __RPC_STUB Events_get_CommandEvents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Events_get_SelectionEvents_Proxy( 
    Events * This,
    /* [retval][out] */ SelectionEvents	**ppceNew);


void __RPC_STUB Events_get_SelectionEvents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Events_get_SolutionEvents_Proxy( 
    Events * This,
    /* [retval][out] */ SolutionEvents	**ppceNew);


void __RPC_STUB Events_get_SolutionEvents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Events_get_BuildEvents_Proxy( 
    Events * This,
    /* [retval][out] */ BuildEvents	**ppceNew);


void __RPC_STUB Events_get_BuildEvents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Events_get_WindowEvents_Proxy( 
    Events * This,
    /* [defaultvalue][in] */ Window *WindowFilter,
    /* [retval][out] */ WindowEvents	**ppceNew);


void __RPC_STUB Events_get_WindowEvents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Events_get_OutputWindowEvents_Proxy( 
    Events * This,
    /* [defaultvalue][in] */ BSTR Pane,
    /* [retval][out] */ OutputWindowEvents	**ppceNew);


void __RPC_STUB Events_get_OutputWindowEvents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Events_get_FindEvents_Proxy( 
    Events * This,
    /* [retval][out] */ FindEvents	**ppFindEvents);


void __RPC_STUB Events_get_FindEvents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Events_get_TaskListEvents_Proxy( 
    Events * This,
    /* [defaultvalue][in] */ BSTR Filter,
    /* [retval][out] */ TaskListEvents	**ppceNew);


void __RPC_STUB Events_get_TaskListEvents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Events_get_DTEEvents_Proxy( 
    Events * This,
    /* [retval][out] */ DTEEvents	**ppceNew);


void __RPC_STUB Events_get_DTEEvents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Events_get_DocumentEvents_Proxy( 
    Events * This,
    /* [defaultvalue][in] */ Document *Document,
    /* [retval][out] */ DocumentEvents	**ppceNew);


void __RPC_STUB Events_get_DocumentEvents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Events_get_SolutionItemsEvents_Proxy( 
    Events * This,
    /* [retval][out] */ ProjectItemsEvents	**ppeNew);


void __RPC_STUB Events_get_SolutionItemsEvents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Events_get_MiscFilesEvents_Proxy( 
    Events * This,
    /* [retval][out] */ ProjectItemsEvents	**ppeNew);


void __RPC_STUB Events_get_MiscFilesEvents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Events_get_DebuggerEvents_Proxy( 
    Events * This,
    /* [retval][out] */ DebuggerEvents	**ppeNew);


void __RPC_STUB Events_get_DebuggerEvents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Events_get_TextEditorEvents_Proxy( 
    Events * This,
    /* [defaultvalue][in] */ TextDocument *TextDocumentFilter,
    /* [retval][out] */ TextEditorEvents	**ppeNew);


void __RPC_STUB Events_get_TextEditorEvents_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Events_GetObject_Proxy( 
    Events * This,
    /* [in] */ BSTR Name,
    /* [retval][out] */ IDispatch **ppObject);


void __RPC_STUB Events_GetObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Events_INTERFACE_DEFINED__ */


#ifndef __TaskList_INTERFACE_DEFINED__
#define __TaskList_INTERFACE_DEFINED__

/* interface TaskList */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_TaskList;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4e4f0569-e16a-4da1-92de-10882a4ddd8c")
    TaskList : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**lppReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Window **lppReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DefaultCommentToken( 
            /* [retval][out] */ BSTR *pbstrToken) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TaskItems( 
            /* [retval][out] */ TaskItems **pTaskItems) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SelectedItems( 
            /* [retval][out] */ VARIANT *Selections) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TaskListVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TaskList * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TaskList * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TaskList * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TaskList * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TaskList * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TaskList * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TaskList * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            TaskList * This,
            /* [retval][out] */ DTE	**lppReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TaskList * This,
            /* [retval][out] */ Window **lppReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultCommentToken )( 
            TaskList * This,
            /* [retval][out] */ BSTR *pbstrToken);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TaskItems )( 
            TaskList * This,
            /* [retval][out] */ TaskItems **pTaskItems);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SelectedItems )( 
            TaskList * This,
            /* [retval][out] */ VARIANT *Selections);
        
        END_INTERFACE
    } TaskListVtbl;

    interface TaskList
    {
        CONST_VTBL struct TaskListVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TaskList_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define TaskList_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define TaskList_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define TaskList_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define TaskList_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define TaskList_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define TaskList_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define TaskList_get_DTE(This,lppReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppReturn)

#define TaskList_get_Parent(This,lppReturn)	\
    (This)->lpVtbl -> get_Parent(This,lppReturn)

#define TaskList_get_DefaultCommentToken(This,pbstrToken)	\
    (This)->lpVtbl -> get_DefaultCommentToken(This,pbstrToken)

#define TaskList_get_TaskItems(This,pTaskItems)	\
    (This)->lpVtbl -> get_TaskItems(This,pTaskItems)

#define TaskList_get_SelectedItems(This,Selections)	\
    (This)->lpVtbl -> get_SelectedItems(This,Selections)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TaskList_get_DTE_Proxy( 
    TaskList * This,
    /* [retval][out] */ DTE	**lppReturn);


void __RPC_STUB TaskList_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TaskList_get_Parent_Proxy( 
    TaskList * This,
    /* [retval][out] */ Window **lppReturn);


void __RPC_STUB TaskList_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TaskList_get_DefaultCommentToken_Proxy( 
    TaskList * This,
    /* [retval][out] */ BSTR *pbstrToken);


void __RPC_STUB TaskList_get_DefaultCommentToken_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TaskList_get_TaskItems_Proxy( 
    TaskList * This,
    /* [retval][out] */ TaskItems **pTaskItems);


void __RPC_STUB TaskList_get_TaskItems_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TaskList_get_SelectedItems_Proxy( 
    TaskList * This,
    /* [retval][out] */ VARIANT *Selections);


void __RPC_STUB TaskList_get_SelectedItems_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __TaskList_INTERFACE_DEFINED__ */


#ifndef __TaskItems_INTERFACE_DEFINED__
#define __TaskItems_INTERFACE_DEFINED__

/* interface TaskItems */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_TaskItems;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4b51103d-513c-4773-b56a-354d0928fd04")
    TaskItems : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**pDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ TaskList **pTaskList) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ TaskItem **pTaskItem) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *pCount) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR Category,
            /* [in] */ BSTR SubCategory,
            /* [in] */ BSTR Description,
            /* [defaultvalue][in] */ vsTaskPriority Priority,
            /* [optional][in] */ VARIANT Icon,
            /* [defaultvalue][in] */ VARIANT_BOOL Checkable,
            /* [defaultvalue][in] */ BSTR File,
            /* [defaultvalue][in] */ long Line,
            /* [defaultvalue][in] */ VARIANT_BOOL CanUserDelete,
            /* [defaultvalue][in] */ VARIANT_BOOL FlushItem,
            /* [retval][out] */ TaskItem **pTaskItem) = 0;
        
        virtual /* [id][restricted] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **lppiuReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ForceItemsToTaskList( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TaskItemsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TaskItems * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TaskItems * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TaskItems * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TaskItems * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TaskItems * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TaskItems * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TaskItems * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            TaskItems * This,
            /* [retval][out] */ DTE	**pDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TaskItems * This,
            /* [retval][out] */ TaskList **pTaskList);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            TaskItems * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ TaskItem **pTaskItem);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            TaskItems * This,
            /* [retval][out] */ long *pCount);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            TaskItems * This,
            /* [in] */ BSTR Category,
            /* [in] */ BSTR SubCategory,
            /* [in] */ BSTR Description,
            /* [defaultvalue][in] */ vsTaskPriority Priority,
            /* [optional][in] */ VARIANT Icon,
            /* [defaultvalue][in] */ VARIANT_BOOL Checkable,
            /* [defaultvalue][in] */ BSTR File,
            /* [defaultvalue][in] */ long Line,
            /* [defaultvalue][in] */ VARIANT_BOOL CanUserDelete,
            /* [defaultvalue][in] */ VARIANT_BOOL FlushItem,
            /* [retval][out] */ TaskItem **pTaskItem);
        
        /* [id][restricted] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            TaskItems * This,
            /* [retval][out] */ IUnknown **lppiuReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ForceItemsToTaskList )( 
            TaskItems * This);
        
        END_INTERFACE
    } TaskItemsVtbl;

    interface TaskItems
    {
        CONST_VTBL struct TaskItemsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TaskItems_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define TaskItems_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define TaskItems_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define TaskItems_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define TaskItems_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define TaskItems_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define TaskItems_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define TaskItems_get_DTE(This,pDTE)	\
    (This)->lpVtbl -> get_DTE(This,pDTE)

#define TaskItems_get_Parent(This,pTaskList)	\
    (This)->lpVtbl -> get_Parent(This,pTaskList)

#define TaskItems_Item(This,Index,pTaskItem)	\
    (This)->lpVtbl -> Item(This,Index,pTaskItem)

#define TaskItems_get_Count(This,pCount)	\
    (This)->lpVtbl -> get_Count(This,pCount)

#define TaskItems_Add(This,Category,SubCategory,Description,Priority,Icon,Checkable,File,Line,CanUserDelete,FlushItem,pTaskItem)	\
    (This)->lpVtbl -> Add(This,Category,SubCategory,Description,Priority,Icon,Checkable,File,Line,CanUserDelete,FlushItem,pTaskItem)

#define TaskItems__NewEnum(This,lppiuReturn)	\
    (This)->lpVtbl -> _NewEnum(This,lppiuReturn)

#define TaskItems_ForceItemsToTaskList(This)	\
    (This)->lpVtbl -> ForceItemsToTaskList(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TaskItems_get_DTE_Proxy( 
    TaskItems * This,
    /* [retval][out] */ DTE	**pDTE);


void __RPC_STUB TaskItems_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TaskItems_get_Parent_Proxy( 
    TaskItems * This,
    /* [retval][out] */ TaskList **pTaskList);


void __RPC_STUB TaskItems_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TaskItems_Item_Proxy( 
    TaskItems * This,
    /* [in] */ VARIANT Index,
    /* [retval][out] */ TaskItem **pTaskItem);


void __RPC_STUB TaskItems_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TaskItems_get_Count_Proxy( 
    TaskItems * This,
    /* [retval][out] */ long *pCount);


void __RPC_STUB TaskItems_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TaskItems_Add_Proxy( 
    TaskItems * This,
    /* [in] */ BSTR Category,
    /* [in] */ BSTR SubCategory,
    /* [in] */ BSTR Description,
    /* [defaultvalue][in] */ vsTaskPriority Priority,
    /* [optional][in] */ VARIANT Icon,
    /* [defaultvalue][in] */ VARIANT_BOOL Checkable,
    /* [defaultvalue][in] */ BSTR File,
    /* [defaultvalue][in] */ long Line,
    /* [defaultvalue][in] */ VARIANT_BOOL CanUserDelete,
    /* [defaultvalue][in] */ VARIANT_BOOL FlushItem,
    /* [retval][out] */ TaskItem **pTaskItem);


void __RPC_STUB TaskItems_Add_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][restricted] */ HRESULT STDMETHODCALLTYPE TaskItems__NewEnum_Proxy( 
    TaskItems * This,
    /* [retval][out] */ IUnknown **lppiuReturn);


void __RPC_STUB TaskItems__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TaskItems_ForceItemsToTaskList_Proxy( 
    TaskItems * This);


void __RPC_STUB TaskItems_ForceItemsToTaskList_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __TaskItems_INTERFACE_DEFINED__ */


#ifndef __TaskItem_INTERFACE_DEFINED__
#define __TaskItem_INTERFACE_DEFINED__

/* interface TaskItem */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_TaskItem;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("58e4d419-6b8c-4c63-92de-70161cd95890")
    TaskItem : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**pDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ TaskItems **pTaskItems) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Category( 
            /* [retval][out] */ BSTR *pCategory) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SubCategory( 
            /* [retval][out] */ BSTR *pSubCategory) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Priority( 
            /* [retval][out] */ vsTaskPriority *pPriority) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Priority( 
            /* [in] */ vsTaskPriority Priority) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Description( 
            /* [retval][out] */ BSTR *pDescription) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Description( 
            /* [in] */ BSTR Description) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FileName( 
            /* [retval][out] */ BSTR *pFileName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FileName( 
            /* [in] */ BSTR FileName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsSettable( 
            /* [in] */ vsTaskListColumn Column,
            /* [retval][out] */ VARIANT_BOOL *pSettable) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Line( 
            /* [retval][out] */ long *pLine) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Line( 
            /* [in] */ long Line) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Displayed( 
            /* [retval][out] */ VARIANT_BOOL *pDisplayed) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Checked( 
            /* [retval][out] */ VARIANT_BOOL *pChecked) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Checked( 
            /* [in] */ VARIANT_BOOL Checked) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Navigate( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TaskItemVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TaskItem * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TaskItem * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TaskItem * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TaskItem * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TaskItem * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TaskItem * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TaskItem * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            TaskItem * This,
            /* [retval][out] */ DTE	**pDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            TaskItem * This,
            /* [retval][out] */ TaskItems **pTaskItems);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Category )( 
            TaskItem * This,
            /* [retval][out] */ BSTR *pCategory);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SubCategory )( 
            TaskItem * This,
            /* [retval][out] */ BSTR *pSubCategory);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Priority )( 
            TaskItem * This,
            /* [retval][out] */ vsTaskPriority *pPriority);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Priority )( 
            TaskItem * This,
            /* [in] */ vsTaskPriority Priority);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            TaskItem * This,
            /* [retval][out] */ BSTR *pDescription);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Description )( 
            TaskItem * This,
            /* [in] */ BSTR Description);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FileName )( 
            TaskItem * This,
            /* [retval][out] */ BSTR *pFileName);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FileName )( 
            TaskItem * This,
            /* [in] */ BSTR FileName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsSettable )( 
            TaskItem * This,
            /* [in] */ vsTaskListColumn Column,
            /* [retval][out] */ VARIANT_BOOL *pSettable);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Line )( 
            TaskItem * This,
            /* [retval][out] */ long *pLine);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Line )( 
            TaskItem * This,
            /* [in] */ long Line);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Displayed )( 
            TaskItem * This,
            /* [retval][out] */ VARIANT_BOOL *pDisplayed);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Checked )( 
            TaskItem * This,
            /* [retval][out] */ VARIANT_BOOL *pChecked);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Checked )( 
            TaskItem * This,
            /* [in] */ VARIANT_BOOL Checked);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Navigate )( 
            TaskItem * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            TaskItem * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            TaskItem * This);
        
        END_INTERFACE
    } TaskItemVtbl;

    interface TaskItem
    {
        CONST_VTBL struct TaskItemVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TaskItem_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define TaskItem_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define TaskItem_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define TaskItem_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define TaskItem_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define TaskItem_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define TaskItem_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define TaskItem_get_DTE(This,pDTE)	\
    (This)->lpVtbl -> get_DTE(This,pDTE)

#define TaskItem_get_Collection(This,pTaskItems)	\
    (This)->lpVtbl -> get_Collection(This,pTaskItems)

#define TaskItem_get_Category(This,pCategory)	\
    (This)->lpVtbl -> get_Category(This,pCategory)

#define TaskItem_get_SubCategory(This,pSubCategory)	\
    (This)->lpVtbl -> get_SubCategory(This,pSubCategory)

#define TaskItem_get_Priority(This,pPriority)	\
    (This)->lpVtbl -> get_Priority(This,pPriority)

#define TaskItem_put_Priority(This,Priority)	\
    (This)->lpVtbl -> put_Priority(This,Priority)

#define TaskItem_get_Description(This,pDescription)	\
    (This)->lpVtbl -> get_Description(This,pDescription)

#define TaskItem_put_Description(This,Description)	\
    (This)->lpVtbl -> put_Description(This,Description)

#define TaskItem_get_FileName(This,pFileName)	\
    (This)->lpVtbl -> get_FileName(This,pFileName)

#define TaskItem_put_FileName(This,FileName)	\
    (This)->lpVtbl -> put_FileName(This,FileName)

#define TaskItem_get_IsSettable(This,Column,pSettable)	\
    (This)->lpVtbl -> get_IsSettable(This,Column,pSettable)

#define TaskItem_get_Line(This,pLine)	\
    (This)->lpVtbl -> get_Line(This,pLine)

#define TaskItem_put_Line(This,Line)	\
    (This)->lpVtbl -> put_Line(This,Line)

#define TaskItem_get_Displayed(This,pDisplayed)	\
    (This)->lpVtbl -> get_Displayed(This,pDisplayed)

#define TaskItem_get_Checked(This,pChecked)	\
    (This)->lpVtbl -> get_Checked(This,pChecked)

#define TaskItem_put_Checked(This,Checked)	\
    (This)->lpVtbl -> put_Checked(This,Checked)

#define TaskItem_Navigate(This)	\
    (This)->lpVtbl -> Navigate(This)

#define TaskItem_Delete(This)	\
    (This)->lpVtbl -> Delete(This)

#define TaskItem_Select(This)	\
    (This)->lpVtbl -> Select(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TaskItem_get_DTE_Proxy( 
    TaskItem * This,
    /* [retval][out] */ DTE	**pDTE);


void __RPC_STUB TaskItem_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TaskItem_get_Collection_Proxy( 
    TaskItem * This,
    /* [retval][out] */ TaskItems **pTaskItems);


void __RPC_STUB TaskItem_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TaskItem_get_Category_Proxy( 
    TaskItem * This,
    /* [retval][out] */ BSTR *pCategory);


void __RPC_STUB TaskItem_get_Category_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TaskItem_get_SubCategory_Proxy( 
    TaskItem * This,
    /* [retval][out] */ BSTR *pSubCategory);


void __RPC_STUB TaskItem_get_SubCategory_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TaskItem_get_Priority_Proxy( 
    TaskItem * This,
    /* [retval][out] */ vsTaskPriority *pPriority);


void __RPC_STUB TaskItem_get_Priority_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE TaskItem_put_Priority_Proxy( 
    TaskItem * This,
    /* [in] */ vsTaskPriority Priority);


void __RPC_STUB TaskItem_put_Priority_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TaskItem_get_Description_Proxy( 
    TaskItem * This,
    /* [retval][out] */ BSTR *pDescription);


void __RPC_STUB TaskItem_get_Description_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE TaskItem_put_Description_Proxy( 
    TaskItem * This,
    /* [in] */ BSTR Description);


void __RPC_STUB TaskItem_put_Description_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TaskItem_get_FileName_Proxy( 
    TaskItem * This,
    /* [retval][out] */ BSTR *pFileName);


void __RPC_STUB TaskItem_get_FileName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE TaskItem_put_FileName_Proxy( 
    TaskItem * This,
    /* [in] */ BSTR FileName);


void __RPC_STUB TaskItem_put_FileName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TaskItem_get_IsSettable_Proxy( 
    TaskItem * This,
    /* [in] */ vsTaskListColumn Column,
    /* [retval][out] */ VARIANT_BOOL *pSettable);


void __RPC_STUB TaskItem_get_IsSettable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TaskItem_get_Line_Proxy( 
    TaskItem * This,
    /* [retval][out] */ long *pLine);


void __RPC_STUB TaskItem_get_Line_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE TaskItem_put_Line_Proxy( 
    TaskItem * This,
    /* [in] */ long Line);


void __RPC_STUB TaskItem_put_Line_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TaskItem_get_Displayed_Proxy( 
    TaskItem * This,
    /* [retval][out] */ VARIANT_BOOL *pDisplayed);


void __RPC_STUB TaskItem_get_Displayed_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TaskItem_get_Checked_Proxy( 
    TaskItem * This,
    /* [retval][out] */ VARIANT_BOOL *pChecked);


void __RPC_STUB TaskItem_get_Checked_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE TaskItem_put_Checked_Proxy( 
    TaskItem * This,
    /* [in] */ VARIANT_BOOL Checked);


void __RPC_STUB TaskItem_put_Checked_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TaskItem_Navigate_Proxy( 
    TaskItem * This);


void __RPC_STUB TaskItem_Navigate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TaskItem_Delete_Proxy( 
    TaskItem * This);


void __RPC_STUB TaskItem_Delete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TaskItem_Select_Proxy( 
    TaskItem * This);


void __RPC_STUB TaskItem_Select_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __TaskItem_INTERFACE_DEFINED__ */


#ifndef __ToolBox_INTERFACE_DEFINED__
#define __ToolBox_INTERFACE_DEFINED__

/* interface ToolBox */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_ToolBox;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("56fcd5af-7f17-4c5c-aa8d-ae2bb2ddbf38")
    ToolBox : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**pDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Window **pParent) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActiveTab( 
            /* [retval][out] */ ToolBoxTab **pToolBoxTab) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ToolBoxTabs( 
            /* [retval][out] */ ToolBoxTabs **pToolBoxTabs) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ToolBoxVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ToolBox * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ToolBox * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ToolBox * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ToolBox * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ToolBox * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ToolBox * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ToolBox * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            ToolBox * This,
            /* [retval][out] */ DTE	**pDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ToolBox * This,
            /* [retval][out] */ Window **pParent);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActiveTab )( 
            ToolBox * This,
            /* [retval][out] */ ToolBoxTab **pToolBoxTab);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToolBoxTabs )( 
            ToolBox * This,
            /* [retval][out] */ ToolBoxTabs **pToolBoxTabs);
        
        END_INTERFACE
    } ToolBoxVtbl;

    interface ToolBox
    {
        CONST_VTBL struct ToolBoxVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ToolBox_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ToolBox_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ToolBox_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ToolBox_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ToolBox_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ToolBox_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ToolBox_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define ToolBox_get_DTE(This,pDTE)	\
    (This)->lpVtbl -> get_DTE(This,pDTE)

#define ToolBox_get_Parent(This,pParent)	\
    (This)->lpVtbl -> get_Parent(This,pParent)

#define ToolBox_get_ActiveTab(This,pToolBoxTab)	\
    (This)->lpVtbl -> get_ActiveTab(This,pToolBoxTab)

#define ToolBox_get_ToolBoxTabs(This,pToolBoxTabs)	\
    (This)->lpVtbl -> get_ToolBoxTabs(This,pToolBoxTabs)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ToolBox_get_DTE_Proxy( 
    ToolBox * This,
    /* [retval][out] */ DTE	**pDTE);


void __RPC_STUB ToolBox_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ToolBox_get_Parent_Proxy( 
    ToolBox * This,
    /* [retval][out] */ Window **pParent);


void __RPC_STUB ToolBox_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ToolBox_get_ActiveTab_Proxy( 
    ToolBox * This,
    /* [retval][out] */ ToolBoxTab **pToolBoxTab);


void __RPC_STUB ToolBox_get_ActiveTab_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ToolBox_get_ToolBoxTabs_Proxy( 
    ToolBox * This,
    /* [retval][out] */ ToolBoxTabs **pToolBoxTabs);


void __RPC_STUB ToolBox_get_ToolBoxTabs_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ToolBox_INTERFACE_DEFINED__ */


#ifndef __ToolBoxTabs_INTERFACE_DEFINED__
#define __ToolBoxTabs_INTERFACE_DEFINED__

/* interface ToolBoxTabs */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_ToolBoxTabs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("cf177b52-4f2f-42a0-8da3-ce78679a0d2d")
    ToolBoxTabs : public IDispatch
    {
    public:
        virtual /* [id][restricted] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **lppiuReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            VARIANT Index,
            /* [retval][out] */ ToolBoxTab **pItem) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**pDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ ToolBox **pParent) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *pCount) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR Name,
            /* [retval][out] */ ToolBoxTab **pToolBoxTabs) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ToolBoxTabsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ToolBoxTabs * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ToolBoxTabs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ToolBoxTabs * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ToolBoxTabs * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ToolBoxTabs * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ToolBoxTabs * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ToolBoxTabs * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][restricted] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            ToolBoxTabs * This,
            /* [retval][out] */ IUnknown **lppiuReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            ToolBoxTabs * This,
            VARIANT Index,
            /* [retval][out] */ ToolBoxTab **pItem);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            ToolBoxTabs * This,
            /* [retval][out] */ DTE	**pDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ToolBoxTabs * This,
            /* [retval][out] */ ToolBox **pParent);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            ToolBoxTabs * This,
            /* [retval][out] */ long *pCount);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            ToolBoxTabs * This,
            /* [in] */ BSTR Name,
            /* [retval][out] */ ToolBoxTab **pToolBoxTabs);
        
        END_INTERFACE
    } ToolBoxTabsVtbl;

    interface ToolBoxTabs
    {
        CONST_VTBL struct ToolBoxTabsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ToolBoxTabs_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ToolBoxTabs_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ToolBoxTabs_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ToolBoxTabs_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ToolBoxTabs_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ToolBoxTabs_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ToolBoxTabs_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define ToolBoxTabs__NewEnum(This,lppiuReturn)	\
    (This)->lpVtbl -> _NewEnum(This,lppiuReturn)

#define ToolBoxTabs_Item(This,Index,pItem)	\
    (This)->lpVtbl -> Item(This,Index,pItem)

#define ToolBoxTabs_get_DTE(This,pDTE)	\
    (This)->lpVtbl -> get_DTE(This,pDTE)

#define ToolBoxTabs_get_Parent(This,pParent)	\
    (This)->lpVtbl -> get_Parent(This,pParent)

#define ToolBoxTabs_get_Count(This,pCount)	\
    (This)->lpVtbl -> get_Count(This,pCount)

#define ToolBoxTabs_Add(This,Name,pToolBoxTabs)	\
    (This)->lpVtbl -> Add(This,Name,pToolBoxTabs)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][restricted] */ HRESULT STDMETHODCALLTYPE ToolBoxTabs__NewEnum_Proxy( 
    ToolBoxTabs * This,
    /* [retval][out] */ IUnknown **lppiuReturn);


void __RPC_STUB ToolBoxTabs__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ToolBoxTabs_Item_Proxy( 
    ToolBoxTabs * This,
    VARIANT Index,
    /* [retval][out] */ ToolBoxTab **pItem);


void __RPC_STUB ToolBoxTabs_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ToolBoxTabs_get_DTE_Proxy( 
    ToolBoxTabs * This,
    /* [retval][out] */ DTE	**pDTE);


void __RPC_STUB ToolBoxTabs_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ToolBoxTabs_get_Parent_Proxy( 
    ToolBoxTabs * This,
    /* [retval][out] */ ToolBox **pParent);


void __RPC_STUB ToolBoxTabs_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ToolBoxTabs_get_Count_Proxy( 
    ToolBoxTabs * This,
    /* [retval][out] */ long *pCount);


void __RPC_STUB ToolBoxTabs_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ToolBoxTabs_Add_Proxy( 
    ToolBoxTabs * This,
    /* [in] */ BSTR Name,
    /* [retval][out] */ ToolBoxTab **pToolBoxTabs);


void __RPC_STUB ToolBoxTabs_Add_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ToolBoxTabs_INTERFACE_DEFINED__ */


#ifndef __ToolBoxTab_INTERFACE_DEFINED__
#define __ToolBoxTab_INTERFACE_DEFINED__

/* interface ToolBoxTab */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_ToolBoxTab;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ce2def9e-3387-4bf2-967b-a1f7f70df325")
    ToolBoxTab : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR NewName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ ToolBoxTabs **pToolBoxTabs) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**pDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Activate( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ToolBoxItems( 
            /* [retval][out] */ ToolBoxItems **pToolBoxItems) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ListView( 
            /* [retval][out] */ VARIANT_BOOL *pListView) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ListView( 
            /* [in] */ VARIANT_BOOL ListView) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ToolBoxTabVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ToolBoxTab * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ToolBoxTab * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ToolBoxTab * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ToolBoxTab * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ToolBoxTab * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ToolBoxTab * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ToolBoxTab * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            ToolBoxTab * This,
            /* [retval][out] */ BSTR *pName);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            ToolBoxTab * This,
            /* [in] */ BSTR NewName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            ToolBoxTab * This,
            /* [retval][out] */ ToolBoxTabs **pToolBoxTabs);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            ToolBoxTab * This,
            /* [retval][out] */ DTE	**pDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Activate )( 
            ToolBoxTab * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            ToolBoxTab * This);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ToolBoxItems )( 
            ToolBoxTab * This,
            /* [retval][out] */ ToolBoxItems **pToolBoxItems);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ListView )( 
            ToolBoxTab * This,
            /* [retval][out] */ VARIANT_BOOL *pListView);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ListView )( 
            ToolBoxTab * This,
            /* [in] */ VARIANT_BOOL ListView);
        
        END_INTERFACE
    } ToolBoxTabVtbl;

    interface ToolBoxTab
    {
        CONST_VTBL struct ToolBoxTabVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ToolBoxTab_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ToolBoxTab_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ToolBoxTab_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ToolBoxTab_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ToolBoxTab_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ToolBoxTab_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ToolBoxTab_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define ToolBoxTab_get_Name(This,pName)	\
    (This)->lpVtbl -> get_Name(This,pName)

#define ToolBoxTab_put_Name(This,NewName)	\
    (This)->lpVtbl -> put_Name(This,NewName)

#define ToolBoxTab_get_Collection(This,pToolBoxTabs)	\
    (This)->lpVtbl -> get_Collection(This,pToolBoxTabs)

#define ToolBoxTab_get_DTE(This,pDTE)	\
    (This)->lpVtbl -> get_DTE(This,pDTE)

#define ToolBoxTab_Activate(This)	\
    (This)->lpVtbl -> Activate(This)

#define ToolBoxTab_Delete(This)	\
    (This)->lpVtbl -> Delete(This)

#define ToolBoxTab_get_ToolBoxItems(This,pToolBoxItems)	\
    (This)->lpVtbl -> get_ToolBoxItems(This,pToolBoxItems)

#define ToolBoxTab_get_ListView(This,pListView)	\
    (This)->lpVtbl -> get_ListView(This,pListView)

#define ToolBoxTab_put_ListView(This,ListView)	\
    (This)->lpVtbl -> put_ListView(This,ListView)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ToolBoxTab_get_Name_Proxy( 
    ToolBoxTab * This,
    /* [retval][out] */ BSTR *pName);


void __RPC_STUB ToolBoxTab_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE ToolBoxTab_put_Name_Proxy( 
    ToolBoxTab * This,
    /* [in] */ BSTR NewName);


void __RPC_STUB ToolBoxTab_put_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ToolBoxTab_get_Collection_Proxy( 
    ToolBoxTab * This,
    /* [retval][out] */ ToolBoxTabs **pToolBoxTabs);


void __RPC_STUB ToolBoxTab_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ToolBoxTab_get_DTE_Proxy( 
    ToolBoxTab * This,
    /* [retval][out] */ DTE	**pDTE);


void __RPC_STUB ToolBoxTab_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ToolBoxTab_Activate_Proxy( 
    ToolBoxTab * This);


void __RPC_STUB ToolBoxTab_Activate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ToolBoxTab_Delete_Proxy( 
    ToolBoxTab * This);


void __RPC_STUB ToolBoxTab_Delete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ToolBoxTab_get_ToolBoxItems_Proxy( 
    ToolBoxTab * This,
    /* [retval][out] */ ToolBoxItems **pToolBoxItems);


void __RPC_STUB ToolBoxTab_get_ToolBoxItems_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ToolBoxTab_get_ListView_Proxy( 
    ToolBoxTab * This,
    /* [retval][out] */ VARIANT_BOOL *pListView);


void __RPC_STUB ToolBoxTab_get_ListView_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE ToolBoxTab_put_ListView_Proxy( 
    ToolBoxTab * This,
    /* [in] */ VARIANT_BOOL ListView);


void __RPC_STUB ToolBoxTab_put_ListView_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ToolBoxTab_INTERFACE_DEFINED__ */


#ifndef __ToolBoxItem_INTERFACE_DEFINED__
#define __ToolBoxItem_INTERFACE_DEFINED__

/* interface ToolBoxItem */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_ToolBoxItem;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("46538d1b-4d81-4002-8bb4-dbdb65babb23")
    ToolBoxItem : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *Name) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ BSTR Name) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ ToolBoxItems **pToolBoxItems) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**pDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ToolBoxItemVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ToolBoxItem * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ToolBoxItem * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ToolBoxItem * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ToolBoxItem * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ToolBoxItem * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ToolBoxItem * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ToolBoxItem * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            ToolBoxItem * This,
            /* [retval][out] */ BSTR *Name);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            ToolBoxItem * This,
            /* [in] */ BSTR Name);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            ToolBoxItem * This,
            /* [retval][out] */ ToolBoxItems **pToolBoxItems);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            ToolBoxItem * This,
            /* [retval][out] */ DTE	**pDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            ToolBoxItem * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            ToolBoxItem * This);
        
        END_INTERFACE
    } ToolBoxItemVtbl;

    interface ToolBoxItem
    {
        CONST_VTBL struct ToolBoxItemVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ToolBoxItem_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ToolBoxItem_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ToolBoxItem_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ToolBoxItem_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ToolBoxItem_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ToolBoxItem_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ToolBoxItem_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define ToolBoxItem_get_Name(This,Name)	\
    (This)->lpVtbl -> get_Name(This,Name)

#define ToolBoxItem_put_Name(This,Name)	\
    (This)->lpVtbl -> put_Name(This,Name)

#define ToolBoxItem_get_Collection(This,pToolBoxItems)	\
    (This)->lpVtbl -> get_Collection(This,pToolBoxItems)

#define ToolBoxItem_get_DTE(This,pDTE)	\
    (This)->lpVtbl -> get_DTE(This,pDTE)

#define ToolBoxItem_Delete(This)	\
    (This)->lpVtbl -> Delete(This)

#define ToolBoxItem_Select(This)	\
    (This)->lpVtbl -> Select(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ToolBoxItem_get_Name_Proxy( 
    ToolBoxItem * This,
    /* [retval][out] */ BSTR *Name);


void __RPC_STUB ToolBoxItem_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE ToolBoxItem_put_Name_Proxy( 
    ToolBoxItem * This,
    /* [in] */ BSTR Name);


void __RPC_STUB ToolBoxItem_put_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ToolBoxItem_get_Collection_Proxy( 
    ToolBoxItem * This,
    /* [retval][out] */ ToolBoxItems **pToolBoxItems);


void __RPC_STUB ToolBoxItem_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ToolBoxItem_get_DTE_Proxy( 
    ToolBoxItem * This,
    /* [retval][out] */ DTE	**pDTE);


void __RPC_STUB ToolBoxItem_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ToolBoxItem_Delete_Proxy( 
    ToolBoxItem * This);


void __RPC_STUB ToolBoxItem_Delete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ToolBoxItem_Select_Proxy( 
    ToolBoxItem * This);


void __RPC_STUB ToolBoxItem_Select_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ToolBoxItem_INTERFACE_DEFINED__ */


#ifndef __ToolBoxItems_INTERFACE_DEFINED__
#define __ToolBoxItems_INTERFACE_DEFINED__

/* interface ToolBoxItems */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_ToolBoxItems;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("395c7dfb-f158-431c-8f43-dda83b4ef54e")
    ToolBoxItems : public IDispatch
    {
    public:
        virtual /* [id][restricted] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **lppiuReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            VARIANT Index,
            /* [retval][out] */ ToolBoxItem **pItem) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ ToolBoxTab **pParent) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**pDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *pCount) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR Name,
            /* [in] */ VARIANT Data,
            /* [defaultvalue][in] */ vsToolBoxItemFormat Format,
            /* [retval][out] */ ToolBoxItem **pToolBoxItem) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SelectedItem( 
            /* [retval][out] */ ToolBoxItem **pToolBoxItem) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ToolBoxItemsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ToolBoxItems * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ToolBoxItems * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ToolBoxItems * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ToolBoxItems * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ToolBoxItems * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ToolBoxItems * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ToolBoxItems * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][restricted] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            ToolBoxItems * This,
            /* [retval][out] */ IUnknown **lppiuReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            ToolBoxItems * This,
            VARIANT Index,
            /* [retval][out] */ ToolBoxItem **pItem);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ToolBoxItems * This,
            /* [retval][out] */ ToolBoxTab **pParent);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            ToolBoxItems * This,
            /* [retval][out] */ DTE	**pDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            ToolBoxItems * This,
            /* [retval][out] */ long *pCount);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            ToolBoxItems * This,
            /* [in] */ BSTR Name,
            /* [in] */ VARIANT Data,
            /* [defaultvalue][in] */ vsToolBoxItemFormat Format,
            /* [retval][out] */ ToolBoxItem **pToolBoxItem);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SelectedItem )( 
            ToolBoxItems * This,
            /* [retval][out] */ ToolBoxItem **pToolBoxItem);
        
        END_INTERFACE
    } ToolBoxItemsVtbl;

    interface ToolBoxItems
    {
        CONST_VTBL struct ToolBoxItemsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ToolBoxItems_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ToolBoxItems_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ToolBoxItems_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ToolBoxItems_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ToolBoxItems_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ToolBoxItems_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ToolBoxItems_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define ToolBoxItems__NewEnum(This,lppiuReturn)	\
    (This)->lpVtbl -> _NewEnum(This,lppiuReturn)

#define ToolBoxItems_Item(This,Index,pItem)	\
    (This)->lpVtbl -> Item(This,Index,pItem)

#define ToolBoxItems_get_Parent(This,pParent)	\
    (This)->lpVtbl -> get_Parent(This,pParent)

#define ToolBoxItems_get_DTE(This,pDTE)	\
    (This)->lpVtbl -> get_DTE(This,pDTE)

#define ToolBoxItems_get_Count(This,pCount)	\
    (This)->lpVtbl -> get_Count(This,pCount)

#define ToolBoxItems_Add(This,Name,Data,Format,pToolBoxItem)	\
    (This)->lpVtbl -> Add(This,Name,Data,Format,pToolBoxItem)

#define ToolBoxItems_get_SelectedItem(This,pToolBoxItem)	\
    (This)->lpVtbl -> get_SelectedItem(This,pToolBoxItem)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][restricted] */ HRESULT STDMETHODCALLTYPE ToolBoxItems__NewEnum_Proxy( 
    ToolBoxItems * This,
    /* [retval][out] */ IUnknown **lppiuReturn);


void __RPC_STUB ToolBoxItems__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ToolBoxItems_Item_Proxy( 
    ToolBoxItems * This,
    VARIANT Index,
    /* [retval][out] */ ToolBoxItem **pItem);


void __RPC_STUB ToolBoxItems_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ToolBoxItems_get_Parent_Proxy( 
    ToolBoxItems * This,
    /* [retval][out] */ ToolBoxTab **pParent);


void __RPC_STUB ToolBoxItems_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ToolBoxItems_get_DTE_Proxy( 
    ToolBoxItems * This,
    /* [retval][out] */ DTE	**pDTE);


void __RPC_STUB ToolBoxItems_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ToolBoxItems_get_Count_Proxy( 
    ToolBoxItems * This,
    /* [retval][out] */ long *pCount);


void __RPC_STUB ToolBoxItems_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ToolBoxItems_Add_Proxy( 
    ToolBoxItems * This,
    /* [in] */ BSTR Name,
    /* [in] */ VARIANT Data,
    /* [defaultvalue][in] */ vsToolBoxItemFormat Format,
    /* [retval][out] */ ToolBoxItem **pToolBoxItem);


void __RPC_STUB ToolBoxItems_Add_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ToolBoxItems_get_SelectedItem_Proxy( 
    ToolBoxItems * This,
    /* [retval][out] */ ToolBoxItem **pToolBoxItem);


void __RPC_STUB ToolBoxItems_get_SelectedItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ToolBoxItems_INTERFACE_DEFINED__ */


#ifndef __OutputWindow_INTERFACE_DEFINED__
#define __OutputWindow_INTERFACE_DEFINED__

/* interface OutputWindow */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_OutputWindow;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("eab0a63d-c3a8-496e-9acf-a82cef6a43b3")
    OutputWindow : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**pDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Window **pParent) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_OutputWindowPanes( 
            /* [retval][out] */ OutputWindowPanes **pOutputWindowPanes) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActivePane( 
            /* [retval][out] */ OutputWindowPane **pOutputWindowPane) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct OutputWindowVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            OutputWindow * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            OutputWindow * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            OutputWindow * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            OutputWindow * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            OutputWindow * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            OutputWindow * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            OutputWindow * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            OutputWindow * This,
            /* [retval][out] */ DTE	**pDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            OutputWindow * This,
            /* [retval][out] */ Window **pParent);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OutputWindowPanes )( 
            OutputWindow * This,
            /* [retval][out] */ OutputWindowPanes **pOutputWindowPanes);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActivePane )( 
            OutputWindow * This,
            /* [retval][out] */ OutputWindowPane **pOutputWindowPane);
        
        END_INTERFACE
    } OutputWindowVtbl;

    interface OutputWindow
    {
        CONST_VTBL struct OutputWindowVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define OutputWindow_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define OutputWindow_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define OutputWindow_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define OutputWindow_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define OutputWindow_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define OutputWindow_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define OutputWindow_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define OutputWindow_get_DTE(This,pDTE)	\
    (This)->lpVtbl -> get_DTE(This,pDTE)

#define OutputWindow_get_Parent(This,pParent)	\
    (This)->lpVtbl -> get_Parent(This,pParent)

#define OutputWindow_get_OutputWindowPanes(This,pOutputWindowPanes)	\
    (This)->lpVtbl -> get_OutputWindowPanes(This,pOutputWindowPanes)

#define OutputWindow_get_ActivePane(This,pOutputWindowPane)	\
    (This)->lpVtbl -> get_ActivePane(This,pOutputWindowPane)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE OutputWindow_get_DTE_Proxy( 
    OutputWindow * This,
    /* [retval][out] */ DTE	**pDTE);


void __RPC_STUB OutputWindow_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE OutputWindow_get_Parent_Proxy( 
    OutputWindow * This,
    /* [retval][out] */ Window **pParent);


void __RPC_STUB OutputWindow_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE OutputWindow_get_OutputWindowPanes_Proxy( 
    OutputWindow * This,
    /* [retval][out] */ OutputWindowPanes **pOutputWindowPanes);


void __RPC_STUB OutputWindow_get_OutputWindowPanes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE OutputWindow_get_ActivePane_Proxy( 
    OutputWindow * This,
    /* [retval][out] */ OutputWindowPane **pOutputWindowPane);


void __RPC_STUB OutputWindow_get_ActivePane_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __OutputWindow_INTERFACE_DEFINED__ */


#ifndef __OutputWindowPanes_INTERFACE_DEFINED__
#define __OutputWindowPanes_INTERFACE_DEFINED__

/* interface OutputWindowPanes */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_OutputWindowPanes;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b02cf62a-9470-4308-a521-9675fba395ab")
    OutputWindowPanes : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**pDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ OutputWindow **pOutputWindow) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *pCount) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR Name,
            /* [retval][out] */ OutputWindowPane **pOutputWindowPane) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            VARIANT Index,
            /* [retval][out] */ OutputWindowPane **pOutputWindowPane) = 0;
        
        virtual /* [id][restricted] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **lppiuReturn) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct OutputWindowPanesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            OutputWindowPanes * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            OutputWindowPanes * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            OutputWindowPanes * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            OutputWindowPanes * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            OutputWindowPanes * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            OutputWindowPanes * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            OutputWindowPanes * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            OutputWindowPanes * This,
            /* [retval][out] */ DTE	**pDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            OutputWindowPanes * This,
            /* [retval][out] */ OutputWindow **pOutputWindow);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            OutputWindowPanes * This,
            /* [retval][out] */ long *pCount);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            OutputWindowPanes * This,
            /* [in] */ BSTR Name,
            /* [retval][out] */ OutputWindowPane **pOutputWindowPane);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            OutputWindowPanes * This,
            VARIANT Index,
            /* [retval][out] */ OutputWindowPane **pOutputWindowPane);
        
        /* [id][restricted] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            OutputWindowPanes * This,
            /* [retval][out] */ IUnknown **lppiuReturn);
        
        END_INTERFACE
    } OutputWindowPanesVtbl;

    interface OutputWindowPanes
    {
        CONST_VTBL struct OutputWindowPanesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define OutputWindowPanes_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define OutputWindowPanes_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define OutputWindowPanes_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define OutputWindowPanes_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define OutputWindowPanes_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define OutputWindowPanes_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define OutputWindowPanes_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define OutputWindowPanes_get_DTE(This,pDTE)	\
    (This)->lpVtbl -> get_DTE(This,pDTE)

#define OutputWindowPanes_get_Parent(This,pOutputWindow)	\
    (This)->lpVtbl -> get_Parent(This,pOutputWindow)

#define OutputWindowPanes_get_Count(This,pCount)	\
    (This)->lpVtbl -> get_Count(This,pCount)

#define OutputWindowPanes_Add(This,Name,pOutputWindowPane)	\
    (This)->lpVtbl -> Add(This,Name,pOutputWindowPane)

#define OutputWindowPanes_Item(This,Index,pOutputWindowPane)	\
    (This)->lpVtbl -> Item(This,Index,pOutputWindowPane)

#define OutputWindowPanes__NewEnum(This,lppiuReturn)	\
    (This)->lpVtbl -> _NewEnum(This,lppiuReturn)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE OutputWindowPanes_get_DTE_Proxy( 
    OutputWindowPanes * This,
    /* [retval][out] */ DTE	**pDTE);


void __RPC_STUB OutputWindowPanes_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE OutputWindowPanes_get_Parent_Proxy( 
    OutputWindowPanes * This,
    /* [retval][out] */ OutputWindow **pOutputWindow);


void __RPC_STUB OutputWindowPanes_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE OutputWindowPanes_get_Count_Proxy( 
    OutputWindowPanes * This,
    /* [retval][out] */ long *pCount);


void __RPC_STUB OutputWindowPanes_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OutputWindowPanes_Add_Proxy( 
    OutputWindowPanes * This,
    /* [in] */ BSTR Name,
    /* [retval][out] */ OutputWindowPane **pOutputWindowPane);


void __RPC_STUB OutputWindowPanes_Add_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OutputWindowPanes_Item_Proxy( 
    OutputWindowPanes * This,
    VARIANT Index,
    /* [retval][out] */ OutputWindowPane **pOutputWindowPane);


void __RPC_STUB OutputWindowPanes_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][restricted] */ HRESULT STDMETHODCALLTYPE OutputWindowPanes__NewEnum_Proxy( 
    OutputWindowPanes * This,
    /* [retval][out] */ IUnknown **lppiuReturn);


void __RPC_STUB OutputWindowPanes__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __OutputWindowPanes_INTERFACE_DEFINED__ */


#ifndef __OutputWindowPane_INTERFACE_DEFINED__
#define __OutputWindowPane_INTERFACE_DEFINED__

/* interface OutputWindowPane */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_OutputWindowPane;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ffc9dfc4-61ca-4b0c-83c2-0703a24f5c16")
    OutputWindowPane : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**pDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ OutputWindowPanes **pOutputWindowPanes) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_GUID( 
            /* [retval][out] */ BSTR *pGUID) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OutputString( 
            /* [in] */ BSTR Text) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ForceItemsToTaskList( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Activate( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Clear( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OutputTaskItemString( 
            /* [in] */ BSTR Text,
            /* [in] */ vsTaskPriority Priority,
            /* [in] */ BSTR SubCategory,
            /* [in] */ vsTaskIcon Icon,
            /* [in] */ BSTR FileName,
            /* [in] */ long Line,
            /* [in] */ BSTR Description,
            /* [defaultvalue][in] */ VARIANT_BOOL Force = -1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextDocument( 
            /* [retval][out] */ TextDocument **pDocument) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct OutputWindowPaneVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            OutputWindowPane * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            OutputWindowPane * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            OutputWindowPane * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            OutputWindowPane * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            OutputWindowPane * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            OutputWindowPane * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            OutputWindowPane * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            OutputWindowPane * This,
            /* [retval][out] */ BSTR *pName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            OutputWindowPane * This,
            /* [retval][out] */ DTE	**pDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            OutputWindowPane * This,
            /* [retval][out] */ OutputWindowPanes **pOutputWindowPanes);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GUID )( 
            OutputWindowPane * This,
            /* [retval][out] */ BSTR *pGUID);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OutputString )( 
            OutputWindowPane * This,
            /* [in] */ BSTR Text);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ForceItemsToTaskList )( 
            OutputWindowPane * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Activate )( 
            OutputWindowPane * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Clear )( 
            OutputWindowPane * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OutputTaskItemString )( 
            OutputWindowPane * This,
            /* [in] */ BSTR Text,
            /* [in] */ vsTaskPriority Priority,
            /* [in] */ BSTR SubCategory,
            /* [in] */ vsTaskIcon Icon,
            /* [in] */ BSTR FileName,
            /* [in] */ long Line,
            /* [in] */ BSTR Description,
            /* [defaultvalue][in] */ VARIANT_BOOL Force);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextDocument )( 
            OutputWindowPane * This,
            /* [retval][out] */ TextDocument **pDocument);
        
        END_INTERFACE
    } OutputWindowPaneVtbl;

    interface OutputWindowPane
    {
        CONST_VTBL struct OutputWindowPaneVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define OutputWindowPane_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define OutputWindowPane_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define OutputWindowPane_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define OutputWindowPane_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define OutputWindowPane_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define OutputWindowPane_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define OutputWindowPane_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define OutputWindowPane_get_Name(This,pName)	\
    (This)->lpVtbl -> get_Name(This,pName)

#define OutputWindowPane_get_DTE(This,pDTE)	\
    (This)->lpVtbl -> get_DTE(This,pDTE)

#define OutputWindowPane_get_Collection(This,pOutputWindowPanes)	\
    (This)->lpVtbl -> get_Collection(This,pOutputWindowPanes)

#define OutputWindowPane_get_GUID(This,pGUID)	\
    (This)->lpVtbl -> get_GUID(This,pGUID)

#define OutputWindowPane_OutputString(This,Text)	\
    (This)->lpVtbl -> OutputString(This,Text)

#define OutputWindowPane_ForceItemsToTaskList(This)	\
    (This)->lpVtbl -> ForceItemsToTaskList(This)

#define OutputWindowPane_Activate(This)	\
    (This)->lpVtbl -> Activate(This)

#define OutputWindowPane_Clear(This)	\
    (This)->lpVtbl -> Clear(This)

#define OutputWindowPane_OutputTaskItemString(This,Text,Priority,SubCategory,Icon,FileName,Line,Description,Force)	\
    (This)->lpVtbl -> OutputTaskItemString(This,Text,Priority,SubCategory,Icon,FileName,Line,Description,Force)

#define OutputWindowPane_get_TextDocument(This,pDocument)	\
    (This)->lpVtbl -> get_TextDocument(This,pDocument)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE OutputWindowPane_get_Name_Proxy( 
    OutputWindowPane * This,
    /* [retval][out] */ BSTR *pName);


void __RPC_STUB OutputWindowPane_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE OutputWindowPane_get_DTE_Proxy( 
    OutputWindowPane * This,
    /* [retval][out] */ DTE	**pDTE);


void __RPC_STUB OutputWindowPane_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE OutputWindowPane_get_Collection_Proxy( 
    OutputWindowPane * This,
    /* [retval][out] */ OutputWindowPanes **pOutputWindowPanes);


void __RPC_STUB OutputWindowPane_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE OutputWindowPane_get_GUID_Proxy( 
    OutputWindowPane * This,
    /* [retval][out] */ BSTR *pGUID);


void __RPC_STUB OutputWindowPane_get_GUID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OutputWindowPane_OutputString_Proxy( 
    OutputWindowPane * This,
    /* [in] */ BSTR Text);


void __RPC_STUB OutputWindowPane_OutputString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OutputWindowPane_ForceItemsToTaskList_Proxy( 
    OutputWindowPane * This);


void __RPC_STUB OutputWindowPane_ForceItemsToTaskList_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OutputWindowPane_Activate_Proxy( 
    OutputWindowPane * This);


void __RPC_STUB OutputWindowPane_Activate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OutputWindowPane_Clear_Proxy( 
    OutputWindowPane * This);


void __RPC_STUB OutputWindowPane_Clear_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OutputWindowPane_OutputTaskItemString_Proxy( 
    OutputWindowPane * This,
    /* [in] */ BSTR Text,
    /* [in] */ vsTaskPriority Priority,
    /* [in] */ BSTR SubCategory,
    /* [in] */ vsTaskIcon Icon,
    /* [in] */ BSTR FileName,
    /* [in] */ long Line,
    /* [in] */ BSTR Description,
    /* [defaultvalue][in] */ VARIANT_BOOL Force);


void __RPC_STUB OutputWindowPane_OutputTaskItemString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE OutputWindowPane_get_TextDocument_Proxy( 
    OutputWindowPane * This,
    /* [retval][out] */ TextDocument **pDocument);


void __RPC_STUB OutputWindowPane_get_TextDocument_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __OutputWindowPane_INTERFACE_DEFINED__ */


#ifndef __IExtensibleObjectSite_INTERFACE_DEFINED__
#define __IExtensibleObjectSite_INTERFACE_DEFINED__

/* interface IExtensibleObjectSite */
/* [object][restricted][hidden][version][uuid] */ 


EXTERN_C const IID IID_IExtensibleObjectSite;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("eb5be8a7-e593-4de6-a923-c2afecb96336")
    IExtensibleObjectSite : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE NotifyDelete( 
            /* [in] */ IUnknown *punkObj) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IExtensibleObjectSiteVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IExtensibleObjectSite * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IExtensibleObjectSite * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IExtensibleObjectSite * This);
        
        HRESULT ( STDMETHODCALLTYPE *NotifyDelete )( 
            IExtensibleObjectSite * This,
            /* [in] */ IUnknown *punkObj);
        
        END_INTERFACE
    } IExtensibleObjectSiteVtbl;

    interface IExtensibleObjectSite
    {
        CONST_VTBL struct IExtensibleObjectSiteVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IExtensibleObjectSite_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IExtensibleObjectSite_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IExtensibleObjectSite_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IExtensibleObjectSite_NotifyDelete(This,punkObj)	\
    (This)->lpVtbl -> NotifyDelete(This,punkObj)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IExtensibleObjectSite_NotifyDelete_Proxy( 
    IExtensibleObjectSite * This,
    /* [in] */ IUnknown *punkObj);


void __RPC_STUB IExtensibleObjectSite_NotifyDelete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IExtensibleObjectSite_INTERFACE_DEFINED__ */


#ifndef __Document_INTERFACE_DEFINED__
#define __Document_INTERFACE_DEFINED__

/* interface Document */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_Document;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("63eb5c39-ca8f-498e-9a66-6dd4a27ac95b")
    Document : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Kind( 
            /* [retval][out] */ BSTR *pKind) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ Documents **DocumentsObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActiveWindow( 
            /* [out][retval] */ Window **pWindow) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FullName( 
            /* [out][retval] */ BSTR *pRetval) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [out][retval] */ BSTR *pRetval) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Path( 
            /* [out][retval] */ BSTR *pRetval) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ReadOnly( 
            /* [out][retval] */ VARIANT_BOOL *pRetval) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Saved( 
            /* [out][retval] */ VARIANT_BOOL *pRetval) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Saved( 
            /* [in] */ VARIANT_BOOL bSaved) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Windows( 
            /* [out][retval] */ Windows **pWindows) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProjectItem( 
            /* [out][retval] */ ProjectItem **pRetVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Activate( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Close( 
            /* [defaultvalue][in] */ vsSaveChanges Save = vsSaveChangesPrompt) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE NewWindow( 
            /* [retval][out] */ Window **pWindow) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Redo( 
            /* [retval][out] */ VARIANT_BOOL *pbRetVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Undo( 
            /* [retval][out] */ VARIANT_BOOL *pbRetVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Save( 
            /* [defaultvalue][in] */ BSTR FileName,
            /* [retval][out] */ vsSaveStatus *pStatus) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Selection( 
            /* [retval][out] */ IDispatch **SelectionObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Object( 
            /* [defaultvalue][in] */ BSTR ModelKind,
            /* [retval][out] */ IDispatch **DataModelObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_Extender( 
            /* [in] */ BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderNames( 
            /* [retval][out] */ VARIANT *ExtenderNames) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderCATID( 
            /* [retval][out] */ BSTR *pRetval) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE PrintOut( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_IndentSize( 
            /* [retval][out] */ long *pSize) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Language( 
            /* [retval][out] */ BSTR *pLanguage) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_Language( 
            /* [in] */ BSTR Language) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_ReadOnly( 
            /* [in] */ VARIANT_BOOL bReadOnly) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_TabSize( 
            /* [retval][out] */ long *pSize) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE ClearBookmarks( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE MarkText( 
            /* [in] */ BSTR Pattern,
            /* [defaultvalue][in] */ long Flags,
            /* [retval][out] */ VARIANT_BOOL *pbRetVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE ReplaceText( 
            /* [in] */ BSTR FindText,
            /* [in] */ BSTR ReplaceText,
            /* [defaultvalue][in] */ long Flags,
            /* [retval][out] */ VARIANT_BOOL *pbRetVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][hidden][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [out][retval] */ BSTR *pType) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct DocumentVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Document * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Document * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Document * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Document * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Document * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Document * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Document * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Document * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Kind )( 
            Document * This,
            /* [retval][out] */ BSTR *pKind);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            Document * This,
            /* [retval][out] */ Documents **DocumentsObject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActiveWindow )( 
            Document * This,
            /* [out][retval] */ Window **pWindow);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullName )( 
            Document * This,
            /* [out][retval] */ BSTR *pRetval);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            Document * This,
            /* [out][retval] */ BSTR *pRetval);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Path )( 
            Document * This,
            /* [out][retval] */ BSTR *pRetval);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReadOnly )( 
            Document * This,
            /* [out][retval] */ VARIANT_BOOL *pRetval);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Saved )( 
            Document * This,
            /* [out][retval] */ VARIANT_BOOL *pRetval);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Saved )( 
            Document * This,
            /* [in] */ VARIANT_BOOL bSaved);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Windows )( 
            Document * This,
            /* [out][retval] */ Windows **pWindows);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProjectItem )( 
            Document * This,
            /* [out][retval] */ ProjectItem **pRetVal);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Activate )( 
            Document * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Close )( 
            Document * This,
            /* [defaultvalue][in] */ vsSaveChanges Save);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *NewWindow )( 
            Document * This,
            /* [retval][out] */ Window **pWindow);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Redo )( 
            Document * This,
            /* [retval][out] */ VARIANT_BOOL *pbRetVal);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Undo )( 
            Document * This,
            /* [retval][out] */ VARIANT_BOOL *pbRetVal);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Save )( 
            Document * This,
            /* [defaultvalue][in] */ BSTR FileName,
            /* [retval][out] */ vsSaveStatus *pStatus);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Selection )( 
            Document * This,
            /* [retval][out] */ IDispatch **SelectionObject);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Object )( 
            Document * This,
            /* [defaultvalue][in] */ BSTR ModelKind,
            /* [retval][out] */ IDispatch **DataModelObject);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Extender )( 
            Document * This,
            /* [in] */ BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderNames )( 
            Document * This,
            /* [retval][out] */ VARIANT *ExtenderNames);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderCATID )( 
            Document * This,
            /* [retval][out] */ BSTR *pRetval);
        
        /* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *PrintOut )( 
            Document * This);
        
        /* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IndentSize )( 
            Document * This,
            /* [retval][out] */ long *pSize);
        
        /* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Language )( 
            Document * This,
            /* [retval][out] */ BSTR *pLanguage);
        
        /* [helpstringcontext][helpstring][helpcontext][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Language )( 
            Document * This,
            /* [in] */ BSTR Language);
        
        /* [helpstringcontext][helpstring][helpcontext][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ReadOnly )( 
            Document * This,
            /* [in] */ VARIANT_BOOL bReadOnly);
        
        /* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TabSize )( 
            Document * This,
            /* [retval][out] */ long *pSize);
        
        /* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *ClearBookmarks )( 
            Document * This);
        
        /* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *MarkText )( 
            Document * This,
            /* [in] */ BSTR Pattern,
            /* [defaultvalue][in] */ long Flags,
            /* [retval][out] */ VARIANT_BOOL *pbRetVal);
        
        /* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *ReplaceText )( 
            Document * This,
            /* [in] */ BSTR FindText,
            /* [in] */ BSTR ReplaceText,
            /* [defaultvalue][in] */ long Flags,
            /* [retval][out] */ VARIANT_BOOL *pbRetVal);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            Document * This,
            /* [out][retval] */ BSTR *pType);
        
        END_INTERFACE
    } DocumentVtbl;

    interface Document
    {
        CONST_VTBL struct DocumentVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Document_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Document_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Document_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Document_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Document_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Document_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Document_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Document_get_DTE(This,lppaReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppaReturn)

#define Document_get_Kind(This,pKind)	\
    (This)->lpVtbl -> get_Kind(This,pKind)

#define Document_get_Collection(This,DocumentsObject)	\
    (This)->lpVtbl -> get_Collection(This,DocumentsObject)

#define Document_get_ActiveWindow(This,pWindow)	\
    (This)->lpVtbl -> get_ActiveWindow(This,pWindow)

#define Document_get_FullName(This,pRetval)	\
    (This)->lpVtbl -> get_FullName(This,pRetval)

#define Document_get_Name(This,pRetval)	\
    (This)->lpVtbl -> get_Name(This,pRetval)

#define Document_get_Path(This,pRetval)	\
    (This)->lpVtbl -> get_Path(This,pRetval)

#define Document_get_ReadOnly(This,pRetval)	\
    (This)->lpVtbl -> get_ReadOnly(This,pRetval)

#define Document_get_Saved(This,pRetval)	\
    (This)->lpVtbl -> get_Saved(This,pRetval)

#define Document_put_Saved(This,bSaved)	\
    (This)->lpVtbl -> put_Saved(This,bSaved)

#define Document_get_Windows(This,pWindows)	\
    (This)->lpVtbl -> get_Windows(This,pWindows)

#define Document_get_ProjectItem(This,pRetVal)	\
    (This)->lpVtbl -> get_ProjectItem(This,pRetVal)

#define Document_Activate(This)	\
    (This)->lpVtbl -> Activate(This)

#define Document_Close(This,Save)	\
    (This)->lpVtbl -> Close(This,Save)

#define Document_NewWindow(This,pWindow)	\
    (This)->lpVtbl -> NewWindow(This,pWindow)

#define Document_Redo(This,pbRetVal)	\
    (This)->lpVtbl -> Redo(This,pbRetVal)

#define Document_Undo(This,pbRetVal)	\
    (This)->lpVtbl -> Undo(This,pbRetVal)

#define Document_Save(This,FileName,pStatus)	\
    (This)->lpVtbl -> Save(This,FileName,pStatus)

#define Document_get_Selection(This,SelectionObject)	\
    (This)->lpVtbl -> get_Selection(This,SelectionObject)

#define Document_Object(This,ModelKind,DataModelObject)	\
    (This)->lpVtbl -> Object(This,ModelKind,DataModelObject)

#define Document_get_Extender(This,ExtenderName,Extender)	\
    (This)->lpVtbl -> get_Extender(This,ExtenderName,Extender)

#define Document_get_ExtenderNames(This,ExtenderNames)	\
    (This)->lpVtbl -> get_ExtenderNames(This,ExtenderNames)

#define Document_get_ExtenderCATID(This,pRetval)	\
    (This)->lpVtbl -> get_ExtenderCATID(This,pRetval)

#define Document_PrintOut(This)	\
    (This)->lpVtbl -> PrintOut(This)

#define Document_get_IndentSize(This,pSize)	\
    (This)->lpVtbl -> get_IndentSize(This,pSize)

#define Document_get_Language(This,pLanguage)	\
    (This)->lpVtbl -> get_Language(This,pLanguage)

#define Document_put_Language(This,Language)	\
    (This)->lpVtbl -> put_Language(This,Language)

#define Document_put_ReadOnly(This,bReadOnly)	\
    (This)->lpVtbl -> put_ReadOnly(This,bReadOnly)

#define Document_get_TabSize(This,pSize)	\
    (This)->lpVtbl -> get_TabSize(This,pSize)

#define Document_ClearBookmarks(This)	\
    (This)->lpVtbl -> ClearBookmarks(This)

#define Document_MarkText(This,Pattern,Flags,pbRetVal)	\
    (This)->lpVtbl -> MarkText(This,Pattern,Flags,pbRetVal)

#define Document_ReplaceText(This,FindText,ReplaceText,Flags,pbRetVal)	\
    (This)->lpVtbl -> ReplaceText(This,FindText,ReplaceText,Flags,pbRetVal)

#define Document_get_Type(This,pType)	\
    (This)->lpVtbl -> get_Type(This,pType)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Document_get_DTE_Proxy( 
    Document * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB Document_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Document_get_Kind_Proxy( 
    Document * This,
    /* [retval][out] */ BSTR *pKind);


void __RPC_STUB Document_get_Kind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Document_get_Collection_Proxy( 
    Document * This,
    /* [retval][out] */ Documents **DocumentsObject);


void __RPC_STUB Document_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Document_get_ActiveWindow_Proxy( 
    Document * This,
    /* [out][retval] */ Window **pWindow);


void __RPC_STUB Document_get_ActiveWindow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Document_get_FullName_Proxy( 
    Document * This,
    /* [out][retval] */ BSTR *pRetval);


void __RPC_STUB Document_get_FullName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Document_get_Name_Proxy( 
    Document * This,
    /* [out][retval] */ BSTR *pRetval);


void __RPC_STUB Document_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Document_get_Path_Proxy( 
    Document * This,
    /* [out][retval] */ BSTR *pRetval);


void __RPC_STUB Document_get_Path_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Document_get_ReadOnly_Proxy( 
    Document * This,
    /* [out][retval] */ VARIANT_BOOL *pRetval);


void __RPC_STUB Document_get_ReadOnly_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Document_get_Saved_Proxy( 
    Document * This,
    /* [out][retval] */ VARIANT_BOOL *pRetval);


void __RPC_STUB Document_get_Saved_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Document_put_Saved_Proxy( 
    Document * This,
    /* [in] */ VARIANT_BOOL bSaved);


void __RPC_STUB Document_put_Saved_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Document_get_Windows_Proxy( 
    Document * This,
    /* [out][retval] */ Windows **pWindows);


void __RPC_STUB Document_get_Windows_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Document_get_ProjectItem_Proxy( 
    Document * This,
    /* [out][retval] */ ProjectItem **pRetVal);


void __RPC_STUB Document_get_ProjectItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Document_Activate_Proxy( 
    Document * This);


void __RPC_STUB Document_Activate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Document_Close_Proxy( 
    Document * This,
    /* [defaultvalue][in] */ vsSaveChanges Save);


void __RPC_STUB Document_Close_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Document_NewWindow_Proxy( 
    Document * This,
    /* [retval][out] */ Window **pWindow);


void __RPC_STUB Document_NewWindow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Document_Redo_Proxy( 
    Document * This,
    /* [retval][out] */ VARIANT_BOOL *pbRetVal);


void __RPC_STUB Document_Redo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Document_Undo_Proxy( 
    Document * This,
    /* [retval][out] */ VARIANT_BOOL *pbRetVal);


void __RPC_STUB Document_Undo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Document_Save_Proxy( 
    Document * This,
    /* [defaultvalue][in] */ BSTR FileName,
    /* [retval][out] */ vsSaveStatus *pStatus);


void __RPC_STUB Document_Save_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Document_get_Selection_Proxy( 
    Document * This,
    /* [retval][out] */ IDispatch **SelectionObject);


void __RPC_STUB Document_get_Selection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Document_Object_Proxy( 
    Document * This,
    /* [defaultvalue][in] */ BSTR ModelKind,
    /* [retval][out] */ IDispatch **DataModelObject);


void __RPC_STUB Document_Object_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE Document_get_Extender_Proxy( 
    Document * This,
    /* [in] */ BSTR ExtenderName,
    /* [retval][out] */ IDispatch **Extender);


void __RPC_STUB Document_get_Extender_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE Document_get_ExtenderNames_Proxy( 
    Document * This,
    /* [retval][out] */ VARIANT *ExtenderNames);


void __RPC_STUB Document_get_ExtenderNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE Document_get_ExtenderCATID_Proxy( 
    Document * This,
    /* [retval][out] */ BSTR *pRetval);


void __RPC_STUB Document_get_ExtenderCATID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE Document_PrintOut_Proxy( 
    Document * This);


void __RPC_STUB Document_PrintOut_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE Document_get_IndentSize_Proxy( 
    Document * This,
    /* [retval][out] */ long *pSize);


void __RPC_STUB Document_get_IndentSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE Document_get_Language_Proxy( 
    Document * This,
    /* [retval][out] */ BSTR *pLanguage);


void __RPC_STUB Document_get_Language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE Document_put_Language_Proxy( 
    Document * This,
    /* [in] */ BSTR Language);


void __RPC_STUB Document_put_Language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE Document_put_ReadOnly_Proxy( 
    Document * This,
    /* [in] */ VARIANT_BOOL bReadOnly);


void __RPC_STUB Document_put_ReadOnly_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE Document_get_TabSize_Proxy( 
    Document * This,
    /* [retval][out] */ long *pSize);


void __RPC_STUB Document_get_TabSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE Document_ClearBookmarks_Proxy( 
    Document * This);


void __RPC_STUB Document_ClearBookmarks_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE Document_MarkText_Proxy( 
    Document * This,
    /* [in] */ BSTR Pattern,
    /* [defaultvalue][in] */ long Flags,
    /* [retval][out] */ VARIANT_BOOL *pbRetVal);


void __RPC_STUB Document_MarkText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE Document_ReplaceText_Proxy( 
    Document * This,
    /* [in] */ BSTR FindText,
    /* [in] */ BSTR ReplaceText,
    /* [defaultvalue][in] */ long Flags,
    /* [retval][out] */ VARIANT_BOOL *pbRetVal);


void __RPC_STUB Document_ReplaceText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][hidden][id] */ HRESULT STDMETHODCALLTYPE Document_get_Type_Proxy( 
    Document * This,
    /* [out][retval] */ BSTR *pType);


void __RPC_STUB Document_get_Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Document_INTERFACE_DEFINED__ */


#ifndef __Documents_INTERFACE_DEFINED__
#define __Documents_INTERFACE_DEFINED__

/* interface Documents */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_Documents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9e2cf3ea-140f-413e-bd4b-7d46740cd2f4")
    Documents : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [id][restricted] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **Enumerator) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT index,
            /* [retval][out] */ Document **DocumentObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *CountOfDocuments) = 0;
        
        virtual /* [hidden][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR Kind,
            /* [retval][out] */ Document **ppDocument) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CloseAll( 
            /* [defaultvalue][in] */ vsSaveChanges Save = vsSaveChangesPrompt) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SaveAll( void) = 0;
        
        virtual /* [hidden][id] */ HRESULT STDMETHODCALLTYPE Open( 
            BSTR PathName,
            /* [defaultvalue] */ BSTR Kind,
            /* [defaultvalue] */ VARIANT_BOOL ReadOnly,
            /* [retval][out] */ Document **ppDocument) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct DocumentsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Documents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Documents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Documents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Documents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Documents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Documents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Documents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Documents * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Documents * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [id][restricted] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            Documents * This,
            /* [retval][out] */ IUnknown **Enumerator);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Documents * This,
            /* [in] */ VARIANT index,
            /* [retval][out] */ Document **DocumentObject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Documents * This,
            /* [retval][out] */ long *CountOfDocuments);
        
        /* [hidden][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            Documents * This,
            /* [in] */ BSTR Kind,
            /* [retval][out] */ Document **ppDocument);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CloseAll )( 
            Documents * This,
            /* [defaultvalue][in] */ vsSaveChanges Save);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SaveAll )( 
            Documents * This);
        
        /* [hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Open )( 
            Documents * This,
            BSTR PathName,
            /* [defaultvalue] */ BSTR Kind,
            /* [defaultvalue] */ VARIANT_BOOL ReadOnly,
            /* [retval][out] */ Document **ppDocument);
        
        END_INTERFACE
    } DocumentsVtbl;

    interface Documents
    {
        CONST_VTBL struct DocumentsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Documents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Documents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Documents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Documents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Documents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Documents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Documents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Documents_get_DTE(This,DTEObject)	\
    (This)->lpVtbl -> get_DTE(This,DTEObject)

#define Documents_get_Parent(This,DTEObject)	\
    (This)->lpVtbl -> get_Parent(This,DTEObject)

#define Documents__NewEnum(This,Enumerator)	\
    (This)->lpVtbl -> _NewEnum(This,Enumerator)

#define Documents_Item(This,index,DocumentObject)	\
    (This)->lpVtbl -> Item(This,index,DocumentObject)

#define Documents_get_Count(This,CountOfDocuments)	\
    (This)->lpVtbl -> get_Count(This,CountOfDocuments)

#define Documents_Add(This,Kind,ppDocument)	\
    (This)->lpVtbl -> Add(This,Kind,ppDocument)

#define Documents_CloseAll(This,Save)	\
    (This)->lpVtbl -> CloseAll(This,Save)

#define Documents_SaveAll(This)	\
    (This)->lpVtbl -> SaveAll(This)

#define Documents_Open(This,PathName,Kind,ReadOnly,ppDocument)	\
    (This)->lpVtbl -> Open(This,PathName,Kind,ReadOnly,ppDocument)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Documents_get_DTE_Proxy( 
    Documents * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB Documents_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Documents_get_Parent_Proxy( 
    Documents * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB Documents_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][restricted] */ HRESULT STDMETHODCALLTYPE Documents__NewEnum_Proxy( 
    Documents * This,
    /* [retval][out] */ IUnknown **Enumerator);


void __RPC_STUB Documents__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Documents_Item_Proxy( 
    Documents * This,
    /* [in] */ VARIANT index,
    /* [retval][out] */ Document **DocumentObject);


void __RPC_STUB Documents_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Documents_get_Count_Proxy( 
    Documents * This,
    /* [retval][out] */ long *CountOfDocuments);


void __RPC_STUB Documents_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Documents_Add_Proxy( 
    Documents * This,
    /* [in] */ BSTR Kind,
    /* [retval][out] */ Document **ppDocument);


void __RPC_STUB Documents_Add_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Documents_CloseAll_Proxy( 
    Documents * This,
    /* [defaultvalue][in] */ vsSaveChanges Save);


void __RPC_STUB Documents_CloseAll_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Documents_SaveAll_Proxy( 
    Documents * This);


void __RPC_STUB Documents_SaveAll_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][id] */ HRESULT STDMETHODCALLTYPE Documents_Open_Proxy( 
    Documents * This,
    BSTR PathName,
    /* [defaultvalue] */ BSTR Kind,
    /* [defaultvalue] */ VARIANT_BOOL ReadOnly,
    /* [retval][out] */ Document **ppDocument);


void __RPC_STUB Documents_Open_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Documents_INTERFACE_DEFINED__ */


#ifndef __WindowConfigurations_INTERFACE_DEFINED__
#define __WindowConfigurations_INTERFACE_DEFINED__

/* interface WindowConfigurations */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_WindowConfigurations;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e577442a-98e1-46c5-bd2e-d25807ec81ce")
    WindowConfigurations : public IDispatch
    {
    public:
        virtual /* [restricted][id] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **ppEnum) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ WindowConfiguration **pWindowConfiguration) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**pDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ DTE	**pParent) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *pCount) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR Name,
            /* [retval][out] */ WindowConfiguration **pWindowConfiguration) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActiveConfigurationName( 
            /* [retval][out] */ BSTR *pbstrName) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct WindowConfigurationsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            WindowConfigurations * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            WindowConfigurations * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            WindowConfigurations * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            WindowConfigurations * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            WindowConfigurations * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            WindowConfigurations * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            WindowConfigurations * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            WindowConfigurations * This,
            /* [retval][out] */ IUnknown **ppEnum);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            WindowConfigurations * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ WindowConfiguration **pWindowConfiguration);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            WindowConfigurations * This,
            /* [retval][out] */ DTE	**pDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            WindowConfigurations * This,
            /* [retval][out] */ DTE	**pParent);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            WindowConfigurations * This,
            /* [retval][out] */ long *pCount);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            WindowConfigurations * This,
            /* [in] */ BSTR Name,
            /* [retval][out] */ WindowConfiguration **pWindowConfiguration);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActiveConfigurationName )( 
            WindowConfigurations * This,
            /* [retval][out] */ BSTR *pbstrName);
        
        END_INTERFACE
    } WindowConfigurationsVtbl;

    interface WindowConfigurations
    {
        CONST_VTBL struct WindowConfigurationsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define WindowConfigurations_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define WindowConfigurations_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define WindowConfigurations_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define WindowConfigurations_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define WindowConfigurations_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define WindowConfigurations_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define WindowConfigurations_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define WindowConfigurations__NewEnum(This,ppEnum)	\
    (This)->lpVtbl -> _NewEnum(This,ppEnum)

#define WindowConfigurations_Item(This,Index,pWindowConfiguration)	\
    (This)->lpVtbl -> Item(This,Index,pWindowConfiguration)

#define WindowConfigurations_get_DTE(This,pDTE)	\
    (This)->lpVtbl -> get_DTE(This,pDTE)

#define WindowConfigurations_get_Parent(This,pParent)	\
    (This)->lpVtbl -> get_Parent(This,pParent)

#define WindowConfigurations_get_Count(This,pCount)	\
    (This)->lpVtbl -> get_Count(This,pCount)

#define WindowConfigurations_Add(This,Name,pWindowConfiguration)	\
    (This)->lpVtbl -> Add(This,Name,pWindowConfiguration)

#define WindowConfigurations_get_ActiveConfigurationName(This,pbstrName)	\
    (This)->lpVtbl -> get_ActiveConfigurationName(This,pbstrName)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [restricted][id] */ HRESULT STDMETHODCALLTYPE WindowConfigurations__NewEnum_Proxy( 
    WindowConfigurations * This,
    /* [retval][out] */ IUnknown **ppEnum);


void __RPC_STUB WindowConfigurations__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE WindowConfigurations_Item_Proxy( 
    WindowConfigurations * This,
    /* [in] */ VARIANT Index,
    /* [retval][out] */ WindowConfiguration **pWindowConfiguration);


void __RPC_STUB WindowConfigurations_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE WindowConfigurations_get_DTE_Proxy( 
    WindowConfigurations * This,
    /* [retval][out] */ DTE	**pDTE);


void __RPC_STUB WindowConfigurations_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE WindowConfigurations_get_Parent_Proxy( 
    WindowConfigurations * This,
    /* [retval][out] */ DTE	**pParent);


void __RPC_STUB WindowConfigurations_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE WindowConfigurations_get_Count_Proxy( 
    WindowConfigurations * This,
    /* [retval][out] */ long *pCount);


void __RPC_STUB WindowConfigurations_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE WindowConfigurations_Add_Proxy( 
    WindowConfigurations * This,
    /* [in] */ BSTR Name,
    /* [retval][out] */ WindowConfiguration **pWindowConfiguration);


void __RPC_STUB WindowConfigurations_Add_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE WindowConfigurations_get_ActiveConfigurationName_Proxy( 
    WindowConfigurations * This,
    /* [retval][out] */ BSTR *pbstrName);


void __RPC_STUB WindowConfigurations_get_ActiveConfigurationName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __WindowConfigurations_INTERFACE_DEFINED__ */


#ifndef __WindowConfiguration_INTERFACE_DEFINED__
#define __WindowConfiguration_INTERFACE_DEFINED__

/* interface WindowConfiguration */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_WindowConfiguration;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("41d02413-8a67-4c28-a980-ad7539ed415d")
    WindowConfiguration : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**pDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ WindowConfigurations **pWindowConfigurations) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Apply( 
            /* [defaultvalue][in] */ VARIANT_BOOL FromCustomViews = -1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Update( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct WindowConfigurationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            WindowConfiguration * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            WindowConfiguration * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            WindowConfiguration * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            WindowConfiguration * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            WindowConfiguration * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            WindowConfiguration * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            WindowConfiguration * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            WindowConfiguration * This,
            /* [retval][out] */ BSTR *pName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            WindowConfiguration * This,
            /* [retval][out] */ DTE	**pDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            WindowConfiguration * This,
            /* [retval][out] */ WindowConfigurations **pWindowConfigurations);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Apply )( 
            WindowConfiguration * This,
            /* [defaultvalue][in] */ VARIANT_BOOL FromCustomViews);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            WindowConfiguration * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            WindowConfiguration * This);
        
        END_INTERFACE
    } WindowConfigurationVtbl;

    interface WindowConfiguration
    {
        CONST_VTBL struct WindowConfigurationVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define WindowConfiguration_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define WindowConfiguration_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define WindowConfiguration_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define WindowConfiguration_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define WindowConfiguration_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define WindowConfiguration_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define WindowConfiguration_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define WindowConfiguration_get_Name(This,pName)	\
    (This)->lpVtbl -> get_Name(This,pName)

#define WindowConfiguration_get_DTE(This,pDTE)	\
    (This)->lpVtbl -> get_DTE(This,pDTE)

#define WindowConfiguration_get_Collection(This,pWindowConfigurations)	\
    (This)->lpVtbl -> get_Collection(This,pWindowConfigurations)

#define WindowConfiguration_Apply(This,FromCustomViews)	\
    (This)->lpVtbl -> Apply(This,FromCustomViews)

#define WindowConfiguration_Delete(This)	\
    (This)->lpVtbl -> Delete(This)

#define WindowConfiguration_Update(This)	\
    (This)->lpVtbl -> Update(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE WindowConfiguration_get_Name_Proxy( 
    WindowConfiguration * This,
    /* [retval][out] */ BSTR *pName);


void __RPC_STUB WindowConfiguration_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE WindowConfiguration_get_DTE_Proxy( 
    WindowConfiguration * This,
    /* [retval][out] */ DTE	**pDTE);


void __RPC_STUB WindowConfiguration_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE WindowConfiguration_get_Collection_Proxy( 
    WindowConfiguration * This,
    /* [retval][out] */ WindowConfigurations **pWindowConfigurations);


void __RPC_STUB WindowConfiguration_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE WindowConfiguration_Apply_Proxy( 
    WindowConfiguration * This,
    /* [defaultvalue][in] */ VARIANT_BOOL FromCustomViews);


void __RPC_STUB WindowConfiguration_Apply_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE WindowConfiguration_Delete_Proxy( 
    WindowConfiguration * This);


void __RPC_STUB WindowConfiguration_Delete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE WindowConfiguration_Update_Proxy( 
    WindowConfiguration * This);


void __RPC_STUB WindowConfiguration_Update_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __WindowConfiguration_INTERFACE_DEFINED__ */


#ifndef __Command_INTERFACE_DEFINED__
#define __Command_INTERFACE_DEFINED__

/* interface Command */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_Command;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5fe10fb0-91a1-4e55-baaa-eccae5cceb94")
    Command : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *lpbstr) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ Commands **lppcReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_GUID( 
            /* [retval][out] */ BSTR *lpbstr) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ID( 
            /* [retval][out] */ long *lReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsAvailable( 
            /* [retval][out] */ VARIANT_BOOL *pAvail) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddControl( 
            /* [in] */ IDispatch *Owner,
            /* [defaultvalue][in] */ long Position,
            /* [retval][out] */ /* external definition not present */ CommandBarControl **pCommandBarControl) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Bindings( 
            /* [retval][out] */ VARIANT *pVar) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Bindings( 
            VARIANT Bindings) = 0;
        
        virtual /* [propget][id] */ HRESULT STDMETHODCALLTYPE get_LocalizedName( 
            /* [retval][out] */ BSTR *lpbstr) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CommandVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Command * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Command * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Command * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Command * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Command * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Command * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Command * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            Command * This,
            /* [retval][out] */ BSTR *lpbstr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            Command * This,
            /* [retval][out] */ Commands **lppcReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Command * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_GUID )( 
            Command * This,
            /* [retval][out] */ BSTR *lpbstr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ID )( 
            Command * This,
            /* [retval][out] */ long *lReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsAvailable )( 
            Command * This,
            /* [retval][out] */ VARIANT_BOOL *pAvail);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddControl )( 
            Command * This,
            /* [in] */ IDispatch *Owner,
            /* [defaultvalue][in] */ long Position,
            /* [retval][out] */ /* external definition not present */ CommandBarControl **pCommandBarControl);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            Command * This);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Bindings )( 
            Command * This,
            /* [retval][out] */ VARIANT *pVar);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Bindings )( 
            Command * This,
            VARIANT Bindings);
        
        /* [propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LocalizedName )( 
            Command * This,
            /* [retval][out] */ BSTR *lpbstr);
        
        END_INTERFACE
    } CommandVtbl;

    interface Command
    {
        CONST_VTBL struct CommandVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Command_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Command_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Command_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Command_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Command_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Command_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Command_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Command_get_Name(This,lpbstr)	\
    (This)->lpVtbl -> get_Name(This,lpbstr)

#define Command_get_Collection(This,lppcReturn)	\
    (This)->lpVtbl -> get_Collection(This,lppcReturn)

#define Command_get_DTE(This,lppaReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppaReturn)

#define Command_get_GUID(This,lpbstr)	\
    (This)->lpVtbl -> get_GUID(This,lpbstr)

#define Command_get_ID(This,lReturn)	\
    (This)->lpVtbl -> get_ID(This,lReturn)

#define Command_get_IsAvailable(This,pAvail)	\
    (This)->lpVtbl -> get_IsAvailable(This,pAvail)

#define Command_AddControl(This,Owner,Position,pCommandBarControl)	\
    (This)->lpVtbl -> AddControl(This,Owner,Position,pCommandBarControl)

#define Command_Delete(This)	\
    (This)->lpVtbl -> Delete(This)

#define Command_get_Bindings(This,pVar)	\
    (This)->lpVtbl -> get_Bindings(This,pVar)

#define Command_put_Bindings(This,Bindings)	\
    (This)->lpVtbl -> put_Bindings(This,Bindings)

#define Command_get_LocalizedName(This,lpbstr)	\
    (This)->lpVtbl -> get_LocalizedName(This,lpbstr)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Command_get_Name_Proxy( 
    Command * This,
    /* [retval][out] */ BSTR *lpbstr);


void __RPC_STUB Command_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Command_get_Collection_Proxy( 
    Command * This,
    /* [retval][out] */ Commands **lppcReturn);


void __RPC_STUB Command_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Command_get_DTE_Proxy( 
    Command * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB Command_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Command_get_GUID_Proxy( 
    Command * This,
    /* [retval][out] */ BSTR *lpbstr);


void __RPC_STUB Command_get_GUID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Command_get_ID_Proxy( 
    Command * This,
    /* [retval][out] */ long *lReturn);


void __RPC_STUB Command_get_ID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Command_get_IsAvailable_Proxy( 
    Command * This,
    /* [retval][out] */ VARIANT_BOOL *pAvail);


void __RPC_STUB Command_get_IsAvailable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Command_AddControl_Proxy( 
    Command * This,
    /* [in] */ IDispatch *Owner,
    /* [defaultvalue][in] */ long Position,
    /* [retval][out] */ /* external definition not present */ CommandBarControl **pCommandBarControl);


void __RPC_STUB Command_AddControl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Command_Delete_Proxy( 
    Command * This);


void __RPC_STUB Command_Delete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Command_get_Bindings_Proxy( 
    Command * This,
    /* [retval][out] */ VARIANT *pVar);


void __RPC_STUB Command_get_Bindings_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Command_put_Bindings_Proxy( 
    Command * This,
    VARIANT Bindings);


void __RPC_STUB Command_put_Bindings_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][id] */ HRESULT STDMETHODCALLTYPE Command_get_LocalizedName_Proxy( 
    Command * This,
    /* [retval][out] */ BSTR *lpbstr);


void __RPC_STUB Command_get_LocalizedName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Command_INTERFACE_DEFINED__ */


#ifndef __Globals_INTERFACE_DEFINED__
#define __Globals_INTERFACE_DEFINED__

/* interface Globals */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_Globals;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e68a3e0e-b435-4dde-86b7-f5adefc19df2")
    Globals : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**pDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **pDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_VariableValue( 
            BSTR VariableName,
            /* [retval][out] */ VARIANT *pVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_VariableValue( 
            BSTR VariableName,
            /* [in] */ VARIANT newVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_VariablePersists( 
            BSTR VariableName,
            /* [in] */ VARIANT_BOOL pVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_VariablePersists( 
            BSTR VariableName,
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_VariableExists( 
            BSTR Name,
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_VariableNames( 
            /* [retval][out] */ VARIANT *Names) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct GlobalsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Globals * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Globals * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Globals * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Globals * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Globals * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Globals * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Globals * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Globals * This,
            /* [retval][out] */ DTE	**pDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Globals * This,
            /* [retval][out] */ IDispatch **pDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_VariableValue )( 
            Globals * This,
            BSTR VariableName,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_VariableValue )( 
            Globals * This,
            BSTR VariableName,
            /* [in] */ VARIANT newVal);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_VariablePersists )( 
            Globals * This,
            BSTR VariableName,
            /* [in] */ VARIANT_BOOL pVal);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_VariablePersists )( 
            Globals * This,
            BSTR VariableName,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_VariableExists )( 
            Globals * This,
            BSTR Name,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_VariableNames )( 
            Globals * This,
            /* [retval][out] */ VARIANT *Names);
        
        END_INTERFACE
    } GlobalsVtbl;

    interface Globals
    {
        CONST_VTBL struct GlobalsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Globals_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Globals_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Globals_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Globals_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Globals_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Globals_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Globals_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Globals_get_DTE(This,pDTE)	\
    (This)->lpVtbl -> get_DTE(This,pDTE)

#define Globals_get_Parent(This,pDTE)	\
    (This)->lpVtbl -> get_Parent(This,pDTE)

#define Globals_get_VariableValue(This,VariableName,pVal)	\
    (This)->lpVtbl -> get_VariableValue(This,VariableName,pVal)

#define Globals_put_VariableValue(This,VariableName,newVal)	\
    (This)->lpVtbl -> put_VariableValue(This,VariableName,newVal)

#define Globals_put_VariablePersists(This,VariableName,pVal)	\
    (This)->lpVtbl -> put_VariablePersists(This,VariableName,pVal)

#define Globals_get_VariablePersists(This,VariableName,pVal)	\
    (This)->lpVtbl -> get_VariablePersists(This,VariableName,pVal)

#define Globals_get_VariableExists(This,Name,pVal)	\
    (This)->lpVtbl -> get_VariableExists(This,Name,pVal)

#define Globals_get_VariableNames(This,Names)	\
    (This)->lpVtbl -> get_VariableNames(This,Names)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE Globals_get_DTE_Proxy( 
    Globals * This,
    /* [retval][out] */ DTE	**pDTE);


void __RPC_STUB Globals_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE Globals_get_Parent_Proxy( 
    Globals * This,
    /* [retval][out] */ IDispatch **pDTE);


void __RPC_STUB Globals_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE Globals_get_VariableValue_Proxy( 
    Globals * This,
    BSTR VariableName,
    /* [retval][out] */ VARIANT *pVal);


void __RPC_STUB Globals_get_VariableValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE Globals_put_VariableValue_Proxy( 
    Globals * This,
    BSTR VariableName,
    /* [in] */ VARIANT newVal);


void __RPC_STUB Globals_put_VariableValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE Globals_put_VariablePersists_Proxy( 
    Globals * This,
    BSTR VariableName,
    /* [in] */ VARIANT_BOOL pVal);


void __RPC_STUB Globals_put_VariablePersists_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE Globals_get_VariablePersists_Proxy( 
    Globals * This,
    BSTR VariableName,
    /* [retval][out] */ VARIANT_BOOL *pVal);


void __RPC_STUB Globals_get_VariablePersists_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE Globals_get_VariableExists_Proxy( 
    Globals * This,
    BSTR Name,
    /* [retval][out] */ VARIANT_BOOL *pVal);


void __RPC_STUB Globals_get_VariableExists_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE Globals_get_VariableNames_Proxy( 
    Globals * This,
    /* [retval][out] */ VARIANT *Names);


void __RPC_STUB Globals_get_VariableNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Globals_INTERFACE_DEFINED__ */


#ifndef __StatusBar_INTERFACE_DEFINED__
#define __StatusBar_INTERFACE_DEFINED__

/* interface StatusBar */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_StatusBar;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c34301a1-3ef1-41d8-932a-fea4a8a8ce0c")
    StatusBar : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**pDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ DTE	**pDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Clear( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Animate( 
            VARIANT_BOOL On,
            VARIANT AnimationType) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Progress( 
            VARIANT_BOOL InProgress,
            /* [defaultvalue][in] */ BSTR Label = L"",
            /* [defaultvalue][in] */ long AmountCompleted = 0,
            /* [defaultvalue][in] */ long Total = 0) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetXYWidthHeight( 
            long X,
            long Y,
            long Width,
            long Height) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetLineColumnCharacter( 
            long Line,
            long Column,
            long Character) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE put_Text( 
            /* [in] */ BSTR Text) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Text( 
            /* [retval][out] */ BSTR *pTextc) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Highlight( 
            VARIANT_BOOL Highlight) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ShowTextUpdates( 
            VARIANT_BOOL TextUpdates,
            /* [retval][out] */ VARIANT_BOOL *WillShowUpdates) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct StatusBarVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            StatusBar * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            StatusBar * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            StatusBar * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            StatusBar * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            StatusBar * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            StatusBar * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            StatusBar * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            StatusBar * This,
            /* [retval][out] */ DTE	**pDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            StatusBar * This,
            /* [retval][out] */ DTE	**pDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Clear )( 
            StatusBar * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Animate )( 
            StatusBar * This,
            VARIANT_BOOL On,
            VARIANT AnimationType);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Progress )( 
            StatusBar * This,
            VARIANT_BOOL InProgress,
            /* [defaultvalue][in] */ BSTR Label,
            /* [defaultvalue][in] */ long AmountCompleted,
            /* [defaultvalue][in] */ long Total);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetXYWidthHeight )( 
            StatusBar * This,
            long X,
            long Y,
            long Width,
            long Height);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetLineColumnCharacter )( 
            StatusBar * This,
            long Line,
            long Column,
            long Character);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Text )( 
            StatusBar * This,
            /* [in] */ BSTR Text);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Text )( 
            StatusBar * This,
            /* [retval][out] */ BSTR *pTextc);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Highlight )( 
            StatusBar * This,
            VARIANT_BOOL Highlight);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ShowTextUpdates )( 
            StatusBar * This,
            VARIANT_BOOL TextUpdates,
            /* [retval][out] */ VARIANT_BOOL *WillShowUpdates);
        
        END_INTERFACE
    } StatusBarVtbl;

    interface StatusBar
    {
        CONST_VTBL struct StatusBarVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define StatusBar_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define StatusBar_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define StatusBar_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define StatusBar_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define StatusBar_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define StatusBar_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define StatusBar_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define StatusBar_get_DTE(This,pDTE)	\
    (This)->lpVtbl -> get_DTE(This,pDTE)

#define StatusBar_get_Parent(This,pDTE)	\
    (This)->lpVtbl -> get_Parent(This,pDTE)

#define StatusBar_Clear(This)	\
    (This)->lpVtbl -> Clear(This)

#define StatusBar_Animate(This,On,AnimationType)	\
    (This)->lpVtbl -> Animate(This,On,AnimationType)

#define StatusBar_Progress(This,InProgress,Label,AmountCompleted,Total)	\
    (This)->lpVtbl -> Progress(This,InProgress,Label,AmountCompleted,Total)

#define StatusBar_SetXYWidthHeight(This,X,Y,Width,Height)	\
    (This)->lpVtbl -> SetXYWidthHeight(This,X,Y,Width,Height)

#define StatusBar_SetLineColumnCharacter(This,Line,Column,Character)	\
    (This)->lpVtbl -> SetLineColumnCharacter(This,Line,Column,Character)

#define StatusBar_put_Text(This,Text)	\
    (This)->lpVtbl -> put_Text(This,Text)

#define StatusBar_get_Text(This,pTextc)	\
    (This)->lpVtbl -> get_Text(This,pTextc)

#define StatusBar_Highlight(This,Highlight)	\
    (This)->lpVtbl -> Highlight(This,Highlight)

#define StatusBar_ShowTextUpdates(This,TextUpdates,WillShowUpdates)	\
    (This)->lpVtbl -> ShowTextUpdates(This,TextUpdates,WillShowUpdates)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE StatusBar_get_DTE_Proxy( 
    StatusBar * This,
    /* [retval][out] */ DTE	**pDTE);


void __RPC_STUB StatusBar_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE StatusBar_get_Parent_Proxy( 
    StatusBar * This,
    /* [retval][out] */ DTE	**pDTE);


void __RPC_STUB StatusBar_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE StatusBar_Clear_Proxy( 
    StatusBar * This);


void __RPC_STUB StatusBar_Clear_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE StatusBar_Animate_Proxy( 
    StatusBar * This,
    VARIANT_BOOL On,
    VARIANT AnimationType);


void __RPC_STUB StatusBar_Animate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE StatusBar_Progress_Proxy( 
    StatusBar * This,
    VARIANT_BOOL InProgress,
    /* [defaultvalue][in] */ BSTR Label,
    /* [defaultvalue][in] */ long AmountCompleted,
    /* [defaultvalue][in] */ long Total);


void __RPC_STUB StatusBar_Progress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE StatusBar_SetXYWidthHeight_Proxy( 
    StatusBar * This,
    long X,
    long Y,
    long Width,
    long Height);


void __RPC_STUB StatusBar_SetXYWidthHeight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE StatusBar_SetLineColumnCharacter_Proxy( 
    StatusBar * This,
    long Line,
    long Column,
    long Character);


void __RPC_STUB StatusBar_SetLineColumnCharacter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propput] */ HRESULT STDMETHODCALLTYPE StatusBar_put_Text_Proxy( 
    StatusBar * This,
    /* [in] */ BSTR Text);


void __RPC_STUB StatusBar_put_Text_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE StatusBar_get_Text_Proxy( 
    StatusBar * This,
    /* [retval][out] */ BSTR *pTextc);


void __RPC_STUB StatusBar_get_Text_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE StatusBar_Highlight_Proxy( 
    StatusBar * This,
    VARIANT_BOOL Highlight);


void __RPC_STUB StatusBar_Highlight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE StatusBar_ShowTextUpdates_Proxy( 
    StatusBar * This,
    VARIANT_BOOL TextUpdates,
    /* [retval][out] */ VARIANT_BOOL *WillShowUpdates);


void __RPC_STUB StatusBar_ShowTextUpdates_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __StatusBar_INTERFACE_DEFINED__ */


#ifndef __Find_INTERFACE_DEFINED__
#define __Find_INTERFACE_DEFINED__

/* interface Find */
/* [object][helpstringcontext][helpstring][helpcontext][dual][uuid] */ 


EXTERN_C const IID IID_Find;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("40d4b9b6-739b-4965-8d65-692aec692266")
    Find : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Action( 
            /* [retval][out] */ vsFindAction *pAction) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Action( 
            /* [in] */ vsFindAction Action) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FindWhat( 
            /* [retval][out] */ BSTR *pFindWhat) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FindWhat( 
            /* [in] */ BSTR FindWhat) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MatchCase( 
            /* [retval][out] */ VARIANT_BOOL *pMatchCase) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MatchCase( 
            /* [in] */ VARIANT_BOOL MatchCase) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MatchWholeWord( 
            /* [retval][out] */ VARIANT_BOOL *pMatchWholeWord) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MatchWholeWord( 
            /* [in] */ VARIANT_BOOL MatchWholeWord) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MatchInHiddenText( 
            /* [retval][out] */ VARIANT_BOOL *pMatchInHiddenText) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MatchInHiddenText( 
            /* [in] */ VARIANT_BOOL MatchInHiddenText) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Backwards( 
            /* [retval][out] */ VARIANT_BOOL *pBackwards) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Backwards( 
            /* [in] */ VARIANT_BOOL Backwards) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SearchSubfolders( 
            /* [retval][out] */ VARIANT_BOOL *pSearchSubfolders) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SearchSubfolders( 
            /* [in] */ VARIANT_BOOL SearchSubfolders) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_KeepModifiedDocumentsOpen( 
            /* [retval][out] */ VARIANT_BOOL *pKeepModifiedDocumentsOpen) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_KeepModifiedDocumentsOpen( 
            /* [in] */ VARIANT_BOOL KeepModifiedDocumentsOpen) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PatternSyntax( 
            /* [retval][out] */ vsFindPatternSyntax *pPatternSyntax) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_PatternSyntax( 
            /* [in] */ vsFindPatternSyntax PatternSyntax) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ReplaceWith( 
            /* [retval][out] */ BSTR *pReplaceWith) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ReplaceWith( 
            /* [in] */ BSTR ReplaceWith) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Target( 
            /* [retval][out] */ vsFindTarget *pTarget) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Target( 
            /* [in] */ vsFindTarget Target) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SearchPath( 
            /* [retval][out] */ BSTR *pSearchPath) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_SearchPath( 
            /* [in] */ BSTR SearchPath) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FilesOfType( 
            /* [retval][out] */ BSTR *pFilesOfType) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_FilesOfType( 
            /* [in] */ BSTR FilesOfType) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ResultsLocation( 
            /* [retval][out] */ vsFindResultsLocation *pResultsLocation) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ResultsLocation( 
            /* [in] */ vsFindResultsLocation ResultsLocation) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Execute( 
            /* [retval][out] */ vsFindResult *pResult) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FindReplace( 
            /* [in] */ vsFindAction Action,
            /* [in] */ BSTR FindWhat,
            /* [defaultvalue][in] */ long vsFindOptionsValue,
            /* [defaultvalue][in] */ BSTR ReplaceWith,
            /* [defaultvalue][in] */ vsFindTarget Target,
            /* [defaultvalue][in] */ BSTR SearchPath,
            /* [defaultvalue][in] */ BSTR FilesOfType,
            /* [defaultvalue][in] */ vsFindResultsLocation ResultsLocation,
            /* [retval][out] */ vsFindResult *pResult) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct FindVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Find * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Find * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Find * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Find * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Find * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Find * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Find * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Find * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Find * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Action )( 
            Find * This,
            /* [retval][out] */ vsFindAction *pAction);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Action )( 
            Find * This,
            /* [in] */ vsFindAction Action);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FindWhat )( 
            Find * This,
            /* [retval][out] */ BSTR *pFindWhat);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FindWhat )( 
            Find * This,
            /* [in] */ BSTR FindWhat);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MatchCase )( 
            Find * This,
            /* [retval][out] */ VARIANT_BOOL *pMatchCase);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MatchCase )( 
            Find * This,
            /* [in] */ VARIANT_BOOL MatchCase);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MatchWholeWord )( 
            Find * This,
            /* [retval][out] */ VARIANT_BOOL *pMatchWholeWord);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MatchWholeWord )( 
            Find * This,
            /* [in] */ VARIANT_BOOL MatchWholeWord);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MatchInHiddenText )( 
            Find * This,
            /* [retval][out] */ VARIANT_BOOL *pMatchInHiddenText);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MatchInHiddenText )( 
            Find * This,
            /* [in] */ VARIANT_BOOL MatchInHiddenText);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Backwards )( 
            Find * This,
            /* [retval][out] */ VARIANT_BOOL *pBackwards);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Backwards )( 
            Find * This,
            /* [in] */ VARIANT_BOOL Backwards);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SearchSubfolders )( 
            Find * This,
            /* [retval][out] */ VARIANT_BOOL *pSearchSubfolders);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SearchSubfolders )( 
            Find * This,
            /* [in] */ VARIANT_BOOL SearchSubfolders);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_KeepModifiedDocumentsOpen )( 
            Find * This,
            /* [retval][out] */ VARIANT_BOOL *pKeepModifiedDocumentsOpen);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_KeepModifiedDocumentsOpen )( 
            Find * This,
            /* [in] */ VARIANT_BOOL KeepModifiedDocumentsOpen);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PatternSyntax )( 
            Find * This,
            /* [retval][out] */ vsFindPatternSyntax *pPatternSyntax);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_PatternSyntax )( 
            Find * This,
            /* [in] */ vsFindPatternSyntax PatternSyntax);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ReplaceWith )( 
            Find * This,
            /* [retval][out] */ BSTR *pReplaceWith);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ReplaceWith )( 
            Find * This,
            /* [in] */ BSTR ReplaceWith);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Target )( 
            Find * This,
            /* [retval][out] */ vsFindTarget *pTarget);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Target )( 
            Find * This,
            /* [in] */ vsFindTarget Target);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SearchPath )( 
            Find * This,
            /* [retval][out] */ BSTR *pSearchPath);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_SearchPath )( 
            Find * This,
            /* [in] */ BSTR SearchPath);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FilesOfType )( 
            Find * This,
            /* [retval][out] */ BSTR *pFilesOfType);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_FilesOfType )( 
            Find * This,
            /* [in] */ BSTR FilesOfType);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ResultsLocation )( 
            Find * This,
            /* [retval][out] */ vsFindResultsLocation *pResultsLocation);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ResultsLocation )( 
            Find * This,
            /* [in] */ vsFindResultsLocation ResultsLocation);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Execute )( 
            Find * This,
            /* [retval][out] */ vsFindResult *pResult);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *FindReplace )( 
            Find * This,
            /* [in] */ vsFindAction Action,
            /* [in] */ BSTR FindWhat,
            /* [defaultvalue][in] */ long vsFindOptionsValue,
            /* [defaultvalue][in] */ BSTR ReplaceWith,
            /* [defaultvalue][in] */ vsFindTarget Target,
            /* [defaultvalue][in] */ BSTR SearchPath,
            /* [defaultvalue][in] */ BSTR FilesOfType,
            /* [defaultvalue][in] */ vsFindResultsLocation ResultsLocation,
            /* [retval][out] */ vsFindResult *pResult);
        
        END_INTERFACE
    } FindVtbl;

    interface Find
    {
        CONST_VTBL struct FindVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Find_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Find_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Find_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Find_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Find_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Find_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Find_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Find_get_DTE(This,lppaReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppaReturn)

#define Find_get_Parent(This,lppaReturn)	\
    (This)->lpVtbl -> get_Parent(This,lppaReturn)

#define Find_get_Action(This,pAction)	\
    (This)->lpVtbl -> get_Action(This,pAction)

#define Find_put_Action(This,Action)	\
    (This)->lpVtbl -> put_Action(This,Action)

#define Find_get_FindWhat(This,pFindWhat)	\
    (This)->lpVtbl -> get_FindWhat(This,pFindWhat)

#define Find_put_FindWhat(This,FindWhat)	\
    (This)->lpVtbl -> put_FindWhat(This,FindWhat)

#define Find_get_MatchCase(This,pMatchCase)	\
    (This)->lpVtbl -> get_MatchCase(This,pMatchCase)

#define Find_put_MatchCase(This,MatchCase)	\
    (This)->lpVtbl -> put_MatchCase(This,MatchCase)

#define Find_get_MatchWholeWord(This,pMatchWholeWord)	\
    (This)->lpVtbl -> get_MatchWholeWord(This,pMatchWholeWord)

#define Find_put_MatchWholeWord(This,MatchWholeWord)	\
    (This)->lpVtbl -> put_MatchWholeWord(This,MatchWholeWord)

#define Find_get_MatchInHiddenText(This,pMatchInHiddenText)	\
    (This)->lpVtbl -> get_MatchInHiddenText(This,pMatchInHiddenText)

#define Find_put_MatchInHiddenText(This,MatchInHiddenText)	\
    (This)->lpVtbl -> put_MatchInHiddenText(This,MatchInHiddenText)

#define Find_get_Backwards(This,pBackwards)	\
    (This)->lpVtbl -> get_Backwards(This,pBackwards)

#define Find_put_Backwards(This,Backwards)	\
    (This)->lpVtbl -> put_Backwards(This,Backwards)

#define Find_get_SearchSubfolders(This,pSearchSubfolders)	\
    (This)->lpVtbl -> get_SearchSubfolders(This,pSearchSubfolders)

#define Find_put_SearchSubfolders(This,SearchSubfolders)	\
    (This)->lpVtbl -> put_SearchSubfolders(This,SearchSubfolders)

#define Find_get_KeepModifiedDocumentsOpen(This,pKeepModifiedDocumentsOpen)	\
    (This)->lpVtbl -> get_KeepModifiedDocumentsOpen(This,pKeepModifiedDocumentsOpen)

#define Find_put_KeepModifiedDocumentsOpen(This,KeepModifiedDocumentsOpen)	\
    (This)->lpVtbl -> put_KeepModifiedDocumentsOpen(This,KeepModifiedDocumentsOpen)

#define Find_get_PatternSyntax(This,pPatternSyntax)	\
    (This)->lpVtbl -> get_PatternSyntax(This,pPatternSyntax)

#define Find_put_PatternSyntax(This,PatternSyntax)	\
    (This)->lpVtbl -> put_PatternSyntax(This,PatternSyntax)

#define Find_get_ReplaceWith(This,pReplaceWith)	\
    (This)->lpVtbl -> get_ReplaceWith(This,pReplaceWith)

#define Find_put_ReplaceWith(This,ReplaceWith)	\
    (This)->lpVtbl -> put_ReplaceWith(This,ReplaceWith)

#define Find_get_Target(This,pTarget)	\
    (This)->lpVtbl -> get_Target(This,pTarget)

#define Find_put_Target(This,Target)	\
    (This)->lpVtbl -> put_Target(This,Target)

#define Find_get_SearchPath(This,pSearchPath)	\
    (This)->lpVtbl -> get_SearchPath(This,pSearchPath)

#define Find_put_SearchPath(This,SearchPath)	\
    (This)->lpVtbl -> put_SearchPath(This,SearchPath)

#define Find_get_FilesOfType(This,pFilesOfType)	\
    (This)->lpVtbl -> get_FilesOfType(This,pFilesOfType)

#define Find_put_FilesOfType(This,FilesOfType)	\
    (This)->lpVtbl -> put_FilesOfType(This,FilesOfType)

#define Find_get_ResultsLocation(This,pResultsLocation)	\
    (This)->lpVtbl -> get_ResultsLocation(This,pResultsLocation)

#define Find_put_ResultsLocation(This,ResultsLocation)	\
    (This)->lpVtbl -> put_ResultsLocation(This,ResultsLocation)

#define Find_Execute(This,pResult)	\
    (This)->lpVtbl -> Execute(This,pResult)

#define Find_FindReplace(This,Action,FindWhat,vsFindOptionsValue,ReplaceWith,Target,SearchPath,FilesOfType,ResultsLocation,pResult)	\
    (This)->lpVtbl -> FindReplace(This,Action,FindWhat,vsFindOptionsValue,ReplaceWith,Target,SearchPath,FilesOfType,ResultsLocation,pResult)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Find_get_DTE_Proxy( 
    Find * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB Find_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Find_get_Parent_Proxy( 
    Find * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB Find_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Find_get_Action_Proxy( 
    Find * This,
    /* [retval][out] */ vsFindAction *pAction);


void __RPC_STUB Find_get_Action_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Find_put_Action_Proxy( 
    Find * This,
    /* [in] */ vsFindAction Action);


void __RPC_STUB Find_put_Action_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Find_get_FindWhat_Proxy( 
    Find * This,
    /* [retval][out] */ BSTR *pFindWhat);


void __RPC_STUB Find_get_FindWhat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Find_put_FindWhat_Proxy( 
    Find * This,
    /* [in] */ BSTR FindWhat);


void __RPC_STUB Find_put_FindWhat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Find_get_MatchCase_Proxy( 
    Find * This,
    /* [retval][out] */ VARIANT_BOOL *pMatchCase);


void __RPC_STUB Find_get_MatchCase_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Find_put_MatchCase_Proxy( 
    Find * This,
    /* [in] */ VARIANT_BOOL MatchCase);


void __RPC_STUB Find_put_MatchCase_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Find_get_MatchWholeWord_Proxy( 
    Find * This,
    /* [retval][out] */ VARIANT_BOOL *pMatchWholeWord);


void __RPC_STUB Find_get_MatchWholeWord_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Find_put_MatchWholeWord_Proxy( 
    Find * This,
    /* [in] */ VARIANT_BOOL MatchWholeWord);


void __RPC_STUB Find_put_MatchWholeWord_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Find_get_MatchInHiddenText_Proxy( 
    Find * This,
    /* [retval][out] */ VARIANT_BOOL *pMatchInHiddenText);


void __RPC_STUB Find_get_MatchInHiddenText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Find_put_MatchInHiddenText_Proxy( 
    Find * This,
    /* [in] */ VARIANT_BOOL MatchInHiddenText);


void __RPC_STUB Find_put_MatchInHiddenText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Find_get_Backwards_Proxy( 
    Find * This,
    /* [retval][out] */ VARIANT_BOOL *pBackwards);


void __RPC_STUB Find_get_Backwards_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Find_put_Backwards_Proxy( 
    Find * This,
    /* [in] */ VARIANT_BOOL Backwards);


void __RPC_STUB Find_put_Backwards_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Find_get_SearchSubfolders_Proxy( 
    Find * This,
    /* [retval][out] */ VARIANT_BOOL *pSearchSubfolders);


void __RPC_STUB Find_get_SearchSubfolders_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Find_put_SearchSubfolders_Proxy( 
    Find * This,
    /* [in] */ VARIANT_BOOL SearchSubfolders);


void __RPC_STUB Find_put_SearchSubfolders_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Find_get_KeepModifiedDocumentsOpen_Proxy( 
    Find * This,
    /* [retval][out] */ VARIANT_BOOL *pKeepModifiedDocumentsOpen);


void __RPC_STUB Find_get_KeepModifiedDocumentsOpen_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Find_put_KeepModifiedDocumentsOpen_Proxy( 
    Find * This,
    /* [in] */ VARIANT_BOOL KeepModifiedDocumentsOpen);


void __RPC_STUB Find_put_KeepModifiedDocumentsOpen_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Find_get_PatternSyntax_Proxy( 
    Find * This,
    /* [retval][out] */ vsFindPatternSyntax *pPatternSyntax);


void __RPC_STUB Find_get_PatternSyntax_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Find_put_PatternSyntax_Proxy( 
    Find * This,
    /* [in] */ vsFindPatternSyntax PatternSyntax);


void __RPC_STUB Find_put_PatternSyntax_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Find_get_ReplaceWith_Proxy( 
    Find * This,
    /* [retval][out] */ BSTR *pReplaceWith);


void __RPC_STUB Find_get_ReplaceWith_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Find_put_ReplaceWith_Proxy( 
    Find * This,
    /* [in] */ BSTR ReplaceWith);


void __RPC_STUB Find_put_ReplaceWith_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Find_get_Target_Proxy( 
    Find * This,
    /* [retval][out] */ vsFindTarget *pTarget);


void __RPC_STUB Find_get_Target_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Find_put_Target_Proxy( 
    Find * This,
    /* [in] */ vsFindTarget Target);


void __RPC_STUB Find_put_Target_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Find_get_SearchPath_Proxy( 
    Find * This,
    /* [retval][out] */ BSTR *pSearchPath);


void __RPC_STUB Find_get_SearchPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Find_put_SearchPath_Proxy( 
    Find * This,
    /* [in] */ BSTR SearchPath);


void __RPC_STUB Find_put_SearchPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Find_get_FilesOfType_Proxy( 
    Find * This,
    /* [retval][out] */ BSTR *pFilesOfType);


void __RPC_STUB Find_get_FilesOfType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Find_put_FilesOfType_Proxy( 
    Find * This,
    /* [in] */ BSTR FilesOfType);


void __RPC_STUB Find_put_FilesOfType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Find_get_ResultsLocation_Proxy( 
    Find * This,
    /* [retval][out] */ vsFindResultsLocation *pResultsLocation);


void __RPC_STUB Find_get_ResultsLocation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE Find_put_ResultsLocation_Proxy( 
    Find * This,
    /* [in] */ vsFindResultsLocation ResultsLocation);


void __RPC_STUB Find_put_ResultsLocation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Find_Execute_Proxy( 
    Find * This,
    /* [retval][out] */ vsFindResult *pResult);


void __RPC_STUB Find_Execute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Find_FindReplace_Proxy( 
    Find * This,
    /* [in] */ vsFindAction Action,
    /* [in] */ BSTR FindWhat,
    /* [defaultvalue][in] */ long vsFindOptionsValue,
    /* [defaultvalue][in] */ BSTR ReplaceWith,
    /* [defaultvalue][in] */ vsFindTarget Target,
    /* [defaultvalue][in] */ BSTR SearchPath,
    /* [defaultvalue][in] */ BSTR FilesOfType,
    /* [defaultvalue][in] */ vsFindResultsLocation ResultsLocation,
    /* [retval][out] */ vsFindResult *pResult);


void __RPC_STUB Find_FindReplace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Find_INTERFACE_DEFINED__ */


#ifndef __ItemOperations_INTERFACE_DEFINED__
#define __ItemOperations_INTERFACE_DEFINED__

/* interface ItemOperations */
/* [object][helpstringcontext][helpstring][helpcontext][dual][uuid] */ 


EXTERN_C const IID IID_ItemOperations;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("d5dbe57b-c074-4e95-b015-abeeaa391693")
    ItemOperations : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OpenFile( 
            /* [in] */ BSTR FileName,
            /* [defaultvalue][in] */ BSTR ViewKind,
            /* [retval][out] */ Window **Window) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE NewFile( 
            /* [defaultvalue][in] */ BSTR Item,
            /* [defaultvalue][in] */ BSTR Name,
            /* [defaultvalue][in] */ BSTR ViewKind,
            /* [retval][out] */ Window **Window) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE IsFileOpen( 
            /* [in] */ BSTR FileName,
            /* [defaultvalue][in] */ BSTR ViewKind,
            /* [retval][out] */ VARIANT_BOOL *pfRetval) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddExistingItem( 
            /* [in] */ BSTR FileName,
            /* [retval][out] */ ProjectItem **ProjectItem) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddNewItem( 
            /* [defaultvalue][in] */ BSTR Item,
            /* [defaultvalue][in] */ BSTR Name,
            /* [retval][out] */ ProjectItem **ProjectItem) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Navigate( 
            /* [defaultvalue][in] */ BSTR URL,
            /* [defaultvalue][in] */ vsNavigateOptions Options,
            /* [retval][out] */ Window **Window) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PromptToSave( 
            /* [retval][out] */ vsPromptResult *Saved) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ItemOperationsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ItemOperations * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ItemOperations * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ItemOperations * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ItemOperations * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ItemOperations * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ItemOperations * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ItemOperations * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            ItemOperations * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ItemOperations * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OpenFile )( 
            ItemOperations * This,
            /* [in] */ BSTR FileName,
            /* [defaultvalue][in] */ BSTR ViewKind,
            /* [retval][out] */ Window **Window);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *NewFile )( 
            ItemOperations * This,
            /* [defaultvalue][in] */ BSTR Item,
            /* [defaultvalue][in] */ BSTR Name,
            /* [defaultvalue][in] */ BSTR ViewKind,
            /* [retval][out] */ Window **Window);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IsFileOpen )( 
            ItemOperations * This,
            /* [in] */ BSTR FileName,
            /* [defaultvalue][in] */ BSTR ViewKind,
            /* [retval][out] */ VARIANT_BOOL *pfRetval);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddExistingItem )( 
            ItemOperations * This,
            /* [in] */ BSTR FileName,
            /* [retval][out] */ ProjectItem **ProjectItem);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddNewItem )( 
            ItemOperations * This,
            /* [defaultvalue][in] */ BSTR Item,
            /* [defaultvalue][in] */ BSTR Name,
            /* [retval][out] */ ProjectItem **ProjectItem);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Navigate )( 
            ItemOperations * This,
            /* [defaultvalue][in] */ BSTR URL,
            /* [defaultvalue][in] */ vsNavigateOptions Options,
            /* [retval][out] */ Window **Window);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PromptToSave )( 
            ItemOperations * This,
            /* [retval][out] */ vsPromptResult *Saved);
        
        END_INTERFACE
    } ItemOperationsVtbl;

    interface ItemOperations
    {
        CONST_VTBL struct ItemOperationsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ItemOperations_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ItemOperations_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ItemOperations_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ItemOperations_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ItemOperations_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ItemOperations_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ItemOperations_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define ItemOperations_get_DTE(This,lppaReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppaReturn)

#define ItemOperations_get_Parent(This,lppaReturn)	\
    (This)->lpVtbl -> get_Parent(This,lppaReturn)

#define ItemOperations_OpenFile(This,FileName,ViewKind,Window)	\
    (This)->lpVtbl -> OpenFile(This,FileName,ViewKind,Window)

#define ItemOperations_NewFile(This,Item,Name,ViewKind,Window)	\
    (This)->lpVtbl -> NewFile(This,Item,Name,ViewKind,Window)

#define ItemOperations_IsFileOpen(This,FileName,ViewKind,pfRetval)	\
    (This)->lpVtbl -> IsFileOpen(This,FileName,ViewKind,pfRetval)

#define ItemOperations_AddExistingItem(This,FileName,ProjectItem)	\
    (This)->lpVtbl -> AddExistingItem(This,FileName,ProjectItem)

#define ItemOperations_AddNewItem(This,Item,Name,ProjectItem)	\
    (This)->lpVtbl -> AddNewItem(This,Item,Name,ProjectItem)

#define ItemOperations_Navigate(This,URL,Options,Window)	\
    (This)->lpVtbl -> Navigate(This,URL,Options,Window)

#define ItemOperations_get_PromptToSave(This,Saved)	\
    (This)->lpVtbl -> get_PromptToSave(This,Saved)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ItemOperations_get_DTE_Proxy( 
    ItemOperations * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB ItemOperations_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ItemOperations_get_Parent_Proxy( 
    ItemOperations * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB ItemOperations_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ItemOperations_OpenFile_Proxy( 
    ItemOperations * This,
    /* [in] */ BSTR FileName,
    /* [defaultvalue][in] */ BSTR ViewKind,
    /* [retval][out] */ Window **Window);


void __RPC_STUB ItemOperations_OpenFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ItemOperations_NewFile_Proxy( 
    ItemOperations * This,
    /* [defaultvalue][in] */ BSTR Item,
    /* [defaultvalue][in] */ BSTR Name,
    /* [defaultvalue][in] */ BSTR ViewKind,
    /* [retval][out] */ Window **Window);


void __RPC_STUB ItemOperations_NewFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ItemOperations_IsFileOpen_Proxy( 
    ItemOperations * This,
    /* [in] */ BSTR FileName,
    /* [defaultvalue][in] */ BSTR ViewKind,
    /* [retval][out] */ VARIANT_BOOL *pfRetval);


void __RPC_STUB ItemOperations_IsFileOpen_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ItemOperations_AddExistingItem_Proxy( 
    ItemOperations * This,
    /* [in] */ BSTR FileName,
    /* [retval][out] */ ProjectItem **ProjectItem);


void __RPC_STUB ItemOperations_AddExistingItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ItemOperations_AddNewItem_Proxy( 
    ItemOperations * This,
    /* [defaultvalue][in] */ BSTR Item,
    /* [defaultvalue][in] */ BSTR Name,
    /* [retval][out] */ ProjectItem **ProjectItem);


void __RPC_STUB ItemOperations_AddNewItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ItemOperations_Navigate_Proxy( 
    ItemOperations * This,
    /* [defaultvalue][in] */ BSTR URL,
    /* [defaultvalue][in] */ vsNavigateOptions Options,
    /* [retval][out] */ Window **Window);


void __RPC_STUB ItemOperations_Navigate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ItemOperations_get_PromptToSave_Proxy( 
    ItemOperations * This,
    /* [retval][out] */ vsPromptResult *Saved);


void __RPC_STUB ItemOperations_get_PromptToSave_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ItemOperations_INTERFACE_DEFINED__ */


#ifndef __IVsProfferCommands_INTERFACE_DEFINED__
#define __IVsProfferCommands_INTERFACE_DEFINED__

/* interface IVsProfferCommands */
/* [object][restricted][hidden][version][uuid] */ 


EXTERN_C const IID IID_IVsProfferCommands;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8cc0cde1-c16a-4749-99af-6f7523c34a57")
    IVsProfferCommands : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE AddNamedCommand( 
            /* [in] */ const GUID *pguidPackage,
            /* [in] */ const GUID *pguidCmdGroup,
            /* [string][in] */ const LPCOLESTR pszCmdNameCanonical,
            /* [out] */ DWORD *pdwCmdId,
            /* [string][in] */ const LPCOLESTR pszCmdNameLocalized,
            /* [string][in] */ const LPCOLESTR pszBtnText,
            /* [string][in] */ const LPCOLESTR pszCmdTooltip,
            /* [string][in] */ const LPCOLESTR pszSatelliteDLL,
            /* [in] */ DWORD dwBitmapResourceId,
            /* [in] */ DWORD dwBitmapImageIndex,
            /* [in] */ DWORD dwCmdFlagsDefault,
            /* [in] */ DWORD cUIContexts,
            /* [size_is][in] */ const GUID *rgguidUIContexts) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveNamedCommand( 
            /* [string][in] */ const LPCOLESTR pszCmdNameCanonical) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RenameNamedCommand( 
            /* [string][in] */ const LPCOLESTR pszCmdNameCanonical,
            /* [string][in] */ const LPCOLESTR pszCmdNameCanonicalNew,
            /* [string][in] */ const LPCOLESTR pszCmdNameLocalizedNew) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddCommandBarControl( 
            /* [string][in] */ const LPCOLESTR pszCmdNameCanonical,
            /* [in] */ IDispatch *pCmdBarParent,
            /* [in] */ DWORD dwIndex,
            /* [in] */ DWORD dwCmdType,
            /* [out] */ IDispatch **ppCmdBarCtrl) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveCommandBarControl( 
            /* [in] */ IDispatch *pCmdBarCtrl) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddCommandBar( 
            /* [string][in] */ const LPCOLESTR pszCmdBarName,
            /* [in] */ vsCommandBarType dwType,
            /* [in] */ IDispatch *pCmdBarParent,
            /* [in] */ DWORD dwIndex,
            /* [out] */ IDispatch **ppCmdBar) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveCommandBar( 
            /* [in] */ IDispatch *pCmdBar) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FindCommandBar( 
            /* [in] */ void *pToolbarSet,
            /* [in] */ const GUID *pguidCmdGroup,
            /* [in] */ DWORD dwMenuId,
            /* [retval][out] */ IDispatch **ppdispCmdBar) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IVsProfferCommandsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IVsProfferCommands * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IVsProfferCommands * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IVsProfferCommands * This);
        
        HRESULT ( STDMETHODCALLTYPE *AddNamedCommand )( 
            IVsProfferCommands * This,
            /* [in] */ const GUID *pguidPackage,
            /* [in] */ const GUID *pguidCmdGroup,
            /* [string][in] */ const LPCOLESTR pszCmdNameCanonical,
            /* [out] */ DWORD *pdwCmdId,
            /* [string][in] */ const LPCOLESTR pszCmdNameLocalized,
            /* [string][in] */ const LPCOLESTR pszBtnText,
            /* [string][in] */ const LPCOLESTR pszCmdTooltip,
            /* [string][in] */ const LPCOLESTR pszSatelliteDLL,
            /* [in] */ DWORD dwBitmapResourceId,
            /* [in] */ DWORD dwBitmapImageIndex,
            /* [in] */ DWORD dwCmdFlagsDefault,
            /* [in] */ DWORD cUIContexts,
            /* [size_is][in] */ const GUID *rgguidUIContexts);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveNamedCommand )( 
            IVsProfferCommands * This,
            /* [string][in] */ const LPCOLESTR pszCmdNameCanonical);
        
        HRESULT ( STDMETHODCALLTYPE *RenameNamedCommand )( 
            IVsProfferCommands * This,
            /* [string][in] */ const LPCOLESTR pszCmdNameCanonical,
            /* [string][in] */ const LPCOLESTR pszCmdNameCanonicalNew,
            /* [string][in] */ const LPCOLESTR pszCmdNameLocalizedNew);
        
        HRESULT ( STDMETHODCALLTYPE *AddCommandBarControl )( 
            IVsProfferCommands * This,
            /* [string][in] */ const LPCOLESTR pszCmdNameCanonical,
            /* [in] */ IDispatch *pCmdBarParent,
            /* [in] */ DWORD dwIndex,
            /* [in] */ DWORD dwCmdType,
            /* [out] */ IDispatch **ppCmdBarCtrl);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveCommandBarControl )( 
            IVsProfferCommands * This,
            /* [in] */ IDispatch *pCmdBarCtrl);
        
        HRESULT ( STDMETHODCALLTYPE *AddCommandBar )( 
            IVsProfferCommands * This,
            /* [string][in] */ const LPCOLESTR pszCmdBarName,
            /* [in] */ vsCommandBarType dwType,
            /* [in] */ IDispatch *pCmdBarParent,
            /* [in] */ DWORD dwIndex,
            /* [out] */ IDispatch **ppCmdBar);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveCommandBar )( 
            IVsProfferCommands * This,
            /* [in] */ IDispatch *pCmdBar);
        
        HRESULT ( STDMETHODCALLTYPE *FindCommandBar )( 
            IVsProfferCommands * This,
            /* [in] */ void *pToolbarSet,
            /* [in] */ const GUID *pguidCmdGroup,
            /* [in] */ DWORD dwMenuId,
            /* [retval][out] */ IDispatch **ppdispCmdBar);
        
        END_INTERFACE
    } IVsProfferCommandsVtbl;

    interface IVsProfferCommands
    {
        CONST_VTBL struct IVsProfferCommandsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IVsProfferCommands_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IVsProfferCommands_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IVsProfferCommands_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IVsProfferCommands_AddNamedCommand(This,pguidPackage,pguidCmdGroup,pszCmdNameCanonical,pdwCmdId,pszCmdNameLocalized,pszBtnText,pszCmdTooltip,pszSatelliteDLL,dwBitmapResourceId,dwBitmapImageIndex,dwCmdFlagsDefault,cUIContexts,rgguidUIContexts)	\
    (This)->lpVtbl -> AddNamedCommand(This,pguidPackage,pguidCmdGroup,pszCmdNameCanonical,pdwCmdId,pszCmdNameLocalized,pszBtnText,pszCmdTooltip,pszSatelliteDLL,dwBitmapResourceId,dwBitmapImageIndex,dwCmdFlagsDefault,cUIContexts,rgguidUIContexts)

#define IVsProfferCommands_RemoveNamedCommand(This,pszCmdNameCanonical)	\
    (This)->lpVtbl -> RemoveNamedCommand(This,pszCmdNameCanonical)

#define IVsProfferCommands_RenameNamedCommand(This,pszCmdNameCanonical,pszCmdNameCanonicalNew,pszCmdNameLocalizedNew)	\
    (This)->lpVtbl -> RenameNamedCommand(This,pszCmdNameCanonical,pszCmdNameCanonicalNew,pszCmdNameLocalizedNew)

#define IVsProfferCommands_AddCommandBarControl(This,pszCmdNameCanonical,pCmdBarParent,dwIndex,dwCmdType,ppCmdBarCtrl)	\
    (This)->lpVtbl -> AddCommandBarControl(This,pszCmdNameCanonical,pCmdBarParent,dwIndex,dwCmdType,ppCmdBarCtrl)

#define IVsProfferCommands_RemoveCommandBarControl(This,pCmdBarCtrl)	\
    (This)->lpVtbl -> RemoveCommandBarControl(This,pCmdBarCtrl)

#define IVsProfferCommands_AddCommandBar(This,pszCmdBarName,dwType,pCmdBarParent,dwIndex,ppCmdBar)	\
    (This)->lpVtbl -> AddCommandBar(This,pszCmdBarName,dwType,pCmdBarParent,dwIndex,ppCmdBar)

#define IVsProfferCommands_RemoveCommandBar(This,pCmdBar)	\
    (This)->lpVtbl -> RemoveCommandBar(This,pCmdBar)

#define IVsProfferCommands_FindCommandBar(This,pToolbarSet,pguidCmdGroup,dwMenuId,ppdispCmdBar)	\
    (This)->lpVtbl -> FindCommandBar(This,pToolbarSet,pguidCmdGroup,dwMenuId,ppdispCmdBar)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IVsProfferCommands_AddNamedCommand_Proxy( 
    IVsProfferCommands * This,
    /* [in] */ const GUID *pguidPackage,
    /* [in] */ const GUID *pguidCmdGroup,
    /* [string][in] */ const LPCOLESTR pszCmdNameCanonical,
    /* [out] */ DWORD *pdwCmdId,
    /* [string][in] */ const LPCOLESTR pszCmdNameLocalized,
    /* [string][in] */ const LPCOLESTR pszBtnText,
    /* [string][in] */ const LPCOLESTR pszCmdTooltip,
    /* [string][in] */ const LPCOLESTR pszSatelliteDLL,
    /* [in] */ DWORD dwBitmapResourceId,
    /* [in] */ DWORD dwBitmapImageIndex,
    /* [in] */ DWORD dwCmdFlagsDefault,
    /* [in] */ DWORD cUIContexts,
    /* [size_is][in] */ const GUID *rgguidUIContexts);


void __RPC_STUB IVsProfferCommands_AddNamedCommand_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVsProfferCommands_RemoveNamedCommand_Proxy( 
    IVsProfferCommands * This,
    /* [string][in] */ const LPCOLESTR pszCmdNameCanonical);


void __RPC_STUB IVsProfferCommands_RemoveNamedCommand_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVsProfferCommands_RenameNamedCommand_Proxy( 
    IVsProfferCommands * This,
    /* [string][in] */ const LPCOLESTR pszCmdNameCanonical,
    /* [string][in] */ const LPCOLESTR pszCmdNameCanonicalNew,
    /* [string][in] */ const LPCOLESTR pszCmdNameLocalizedNew);


void __RPC_STUB IVsProfferCommands_RenameNamedCommand_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVsProfferCommands_AddCommandBarControl_Proxy( 
    IVsProfferCommands * This,
    /* [string][in] */ const LPCOLESTR pszCmdNameCanonical,
    /* [in] */ IDispatch *pCmdBarParent,
    /* [in] */ DWORD dwIndex,
    /* [in] */ DWORD dwCmdType,
    /* [out] */ IDispatch **ppCmdBarCtrl);


void __RPC_STUB IVsProfferCommands_AddCommandBarControl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVsProfferCommands_RemoveCommandBarControl_Proxy( 
    IVsProfferCommands * This,
    /* [in] */ IDispatch *pCmdBarCtrl);


void __RPC_STUB IVsProfferCommands_RemoveCommandBarControl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVsProfferCommands_AddCommandBar_Proxy( 
    IVsProfferCommands * This,
    /* [string][in] */ const LPCOLESTR pszCmdBarName,
    /* [in] */ vsCommandBarType dwType,
    /* [in] */ IDispatch *pCmdBarParent,
    /* [in] */ DWORD dwIndex,
    /* [out] */ IDispatch **ppCmdBar);


void __RPC_STUB IVsProfferCommands_AddCommandBar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVsProfferCommands_RemoveCommandBar_Proxy( 
    IVsProfferCommands * This,
    /* [in] */ IDispatch *pCmdBar);


void __RPC_STUB IVsProfferCommands_RemoveCommandBar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IVsProfferCommands_FindCommandBar_Proxy( 
    IVsProfferCommands * This,
    /* [in] */ void *pToolbarSet,
    /* [in] */ const GUID *pguidCmdGroup,
    /* [in] */ DWORD dwMenuId,
    /* [retval][out] */ IDispatch **ppdispCmdBar);


void __RPC_STUB IVsProfferCommands_FindCommandBar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IVsProfferCommands_INTERFACE_DEFINED__ */


#ifndef __ObjectExtenders_INTERFACE_DEFINED__
#define __ObjectExtenders_INTERFACE_DEFINED__

/* interface ObjectExtenders */
/* [object][helpstringcontext][helpstring][helpcontext][dual][uuid] */ 


EXTERN_C const IID IID_ObjectExtenders;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8d0aa9cc-8465-42f3-ad6e-dfde28ccc75d")
    ObjectExtenders : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RegisterExtenderProvider( 
            /* [in] */ BSTR ExtenderCATID,
            /* [in] */ BSTR ExtenderName,
            /* [in] */ IExtenderProvider *ExtenderProvider,
            /* [defaultvalue][in] */ BSTR LocalizedName,
            /* [retval][out] */ long *Cookie) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE UnregisterExtenderProvider( 
            /* [in] */ long Cookie) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetExtender( 
            /* [in] */ BSTR ExtenderCATID,
            /* [in] */ BSTR ExtenderName,
            /* [in] */ IUnknown *ExtendeeObject,
            /* [retval][out] */ IDispatch **Extender) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetExtenderNames( 
            /* [in] */ BSTR ExtenderCATID,
            /* [in] */ IUnknown *ExtendeeObject,
            /* [retval][out] */ VARIANT *ExtenderNames) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetContextualExtenderCATIDs( 
            /* [retval][out] */ VARIANT *ExtenderCATIDs) = 0;
        
        virtual /* [hidden][id] */ HRESULT STDMETHODCALLTYPE GetLocalizedExtenderName( 
            /* [in] */ BSTR ExtenderCATID,
            /* [in] */ BSTR ExtenderName,
            /* [retval][out] */ BSTR *pLocalizedName) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE RegisterExtenderProviderUnk( 
            /* [in] */ BSTR ExtenderCATID,
            /* [in] */ BSTR ExtenderName,
            /* [in] */ IExtenderProviderUnk *ExtenderProvider,
            /* [defaultvalue][in] */ BSTR LocalizedName,
            /* [retval][out] */ long *Cookie) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ObjectExtendersVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ObjectExtenders * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ObjectExtenders * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ObjectExtenders * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ObjectExtenders * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ObjectExtenders * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ObjectExtenders * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ObjectExtenders * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            ObjectExtenders * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ObjectExtenders * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RegisterExtenderProvider )( 
            ObjectExtenders * This,
            /* [in] */ BSTR ExtenderCATID,
            /* [in] */ BSTR ExtenderName,
            /* [in] */ IExtenderProvider *ExtenderProvider,
            /* [defaultvalue][in] */ BSTR LocalizedName,
            /* [retval][out] */ long *Cookie);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *UnregisterExtenderProvider )( 
            ObjectExtenders * This,
            /* [in] */ long Cookie);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtender )( 
            ObjectExtenders * This,
            /* [in] */ BSTR ExtenderCATID,
            /* [in] */ BSTR ExtenderName,
            /* [in] */ IUnknown *ExtendeeObject,
            /* [retval][out] */ IDispatch **Extender);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtenderNames )( 
            ObjectExtenders * This,
            /* [in] */ BSTR ExtenderCATID,
            /* [in] */ IUnknown *ExtendeeObject,
            /* [retval][out] */ VARIANT *ExtenderNames);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetContextualExtenderCATIDs )( 
            ObjectExtenders * This,
            /* [retval][out] */ VARIANT *ExtenderCATIDs);
        
        /* [hidden][id] */ HRESULT ( STDMETHODCALLTYPE *GetLocalizedExtenderName )( 
            ObjectExtenders * This,
            /* [in] */ BSTR ExtenderCATID,
            /* [in] */ BSTR ExtenderName,
            /* [retval][out] */ BSTR *pLocalizedName);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *RegisterExtenderProviderUnk )( 
            ObjectExtenders * This,
            /* [in] */ BSTR ExtenderCATID,
            /* [in] */ BSTR ExtenderName,
            /* [in] */ IExtenderProviderUnk *ExtenderProvider,
            /* [defaultvalue][in] */ BSTR LocalizedName,
            /* [retval][out] */ long *Cookie);
        
        END_INTERFACE
    } ObjectExtendersVtbl;

    interface ObjectExtenders
    {
        CONST_VTBL struct ObjectExtendersVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ObjectExtenders_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ObjectExtenders_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ObjectExtenders_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ObjectExtenders_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ObjectExtenders_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ObjectExtenders_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ObjectExtenders_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define ObjectExtenders_get_DTE(This,lppaReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppaReturn)

#define ObjectExtenders_get_Parent(This,lppaReturn)	\
    (This)->lpVtbl -> get_Parent(This,lppaReturn)

#define ObjectExtenders_RegisterExtenderProvider(This,ExtenderCATID,ExtenderName,ExtenderProvider,LocalizedName,Cookie)	\
    (This)->lpVtbl -> RegisterExtenderProvider(This,ExtenderCATID,ExtenderName,ExtenderProvider,LocalizedName,Cookie)

#define ObjectExtenders_UnregisterExtenderProvider(This,Cookie)	\
    (This)->lpVtbl -> UnregisterExtenderProvider(This,Cookie)

#define ObjectExtenders_GetExtender(This,ExtenderCATID,ExtenderName,ExtendeeObject,Extender)	\
    (This)->lpVtbl -> GetExtender(This,ExtenderCATID,ExtenderName,ExtendeeObject,Extender)

#define ObjectExtenders_GetExtenderNames(This,ExtenderCATID,ExtendeeObject,ExtenderNames)	\
    (This)->lpVtbl -> GetExtenderNames(This,ExtenderCATID,ExtendeeObject,ExtenderNames)

#define ObjectExtenders_GetContextualExtenderCATIDs(This,ExtenderCATIDs)	\
    (This)->lpVtbl -> GetContextualExtenderCATIDs(This,ExtenderCATIDs)

#define ObjectExtenders_GetLocalizedExtenderName(This,ExtenderCATID,ExtenderName,pLocalizedName)	\
    (This)->lpVtbl -> GetLocalizedExtenderName(This,ExtenderCATID,ExtenderName,pLocalizedName)

#define ObjectExtenders_RegisterExtenderProviderUnk(This,ExtenderCATID,ExtenderName,ExtenderProvider,LocalizedName,Cookie)	\
    (This)->lpVtbl -> RegisterExtenderProviderUnk(This,ExtenderCATID,ExtenderName,ExtenderProvider,LocalizedName,Cookie)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ObjectExtenders_get_DTE_Proxy( 
    ObjectExtenders * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB ObjectExtenders_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ObjectExtenders_get_Parent_Proxy( 
    ObjectExtenders * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB ObjectExtenders_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ObjectExtenders_RegisterExtenderProvider_Proxy( 
    ObjectExtenders * This,
    /* [in] */ BSTR ExtenderCATID,
    /* [in] */ BSTR ExtenderName,
    /* [in] */ IExtenderProvider *ExtenderProvider,
    /* [defaultvalue][in] */ BSTR LocalizedName,
    /* [retval][out] */ long *Cookie);


void __RPC_STUB ObjectExtenders_RegisterExtenderProvider_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ObjectExtenders_UnregisterExtenderProvider_Proxy( 
    ObjectExtenders * This,
    /* [in] */ long Cookie);


void __RPC_STUB ObjectExtenders_UnregisterExtenderProvider_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ObjectExtenders_GetExtender_Proxy( 
    ObjectExtenders * This,
    /* [in] */ BSTR ExtenderCATID,
    /* [in] */ BSTR ExtenderName,
    /* [in] */ IUnknown *ExtendeeObject,
    /* [retval][out] */ IDispatch **Extender);


void __RPC_STUB ObjectExtenders_GetExtender_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ObjectExtenders_GetExtenderNames_Proxy( 
    ObjectExtenders * This,
    /* [in] */ BSTR ExtenderCATID,
    /* [in] */ IUnknown *ExtendeeObject,
    /* [retval][out] */ VARIANT *ExtenderNames);


void __RPC_STUB ObjectExtenders_GetExtenderNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ObjectExtenders_GetContextualExtenderCATIDs_Proxy( 
    ObjectExtenders * This,
    /* [retval][out] */ VARIANT *ExtenderCATIDs);


void __RPC_STUB ObjectExtenders_GetContextualExtenderCATIDs_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [hidden][id] */ HRESULT STDMETHODCALLTYPE ObjectExtenders_GetLocalizedExtenderName_Proxy( 
    ObjectExtenders * This,
    /* [in] */ BSTR ExtenderCATID,
    /* [in] */ BSTR ExtenderName,
    /* [retval][out] */ BSTR *pLocalizedName);


void __RPC_STUB ObjectExtenders_GetLocalizedExtenderName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE ObjectExtenders_RegisterExtenderProviderUnk_Proxy( 
    ObjectExtenders * This,
    /* [in] */ BSTR ExtenderCATID,
    /* [in] */ BSTR ExtenderName,
    /* [in] */ IExtenderProviderUnk *ExtenderProvider,
    /* [defaultvalue][in] */ BSTR LocalizedName,
    /* [retval][out] */ long *Cookie);


void __RPC_STUB ObjectExtenders_RegisterExtenderProviderUnk_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ObjectExtenders_INTERFACE_DEFINED__ */


#ifndef __IExtenderSite_INTERFACE_DEFINED__
#define __IExtenderSite_INTERFACE_DEFINED__

/* interface IExtenderSite */
/* [object][helpstringcontext][helpstring][helpcontext][dual][uuid] */ 


EXTERN_C const IID IID_IExtenderSite;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e57c510b-968b-4a3c-a467-ee4013157dc9")
    IExtenderSite : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE NotifyDelete( 
            /* [in] */ long Cookie) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetObject( 
            /* [defaultvalue][in] */ BSTR Name,
            /* [retval][out] */ IDispatch **ppObject) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IExtenderSiteVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IExtenderSite * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IExtenderSite * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IExtenderSite * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IExtenderSite * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IExtenderSite * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IExtenderSite * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IExtenderSite * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *NotifyDelete )( 
            IExtenderSite * This,
            /* [in] */ long Cookie);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetObject )( 
            IExtenderSite * This,
            /* [defaultvalue][in] */ BSTR Name,
            /* [retval][out] */ IDispatch **ppObject);
        
        END_INTERFACE
    } IExtenderSiteVtbl;

    interface IExtenderSite
    {
        CONST_VTBL struct IExtenderSiteVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IExtenderSite_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IExtenderSite_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IExtenderSite_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IExtenderSite_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IExtenderSite_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IExtenderSite_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IExtenderSite_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IExtenderSite_NotifyDelete(This,Cookie)	\
    (This)->lpVtbl -> NotifyDelete(This,Cookie)

#define IExtenderSite_GetObject(This,Name,ppObject)	\
    (This)->lpVtbl -> GetObject(This,Name,ppObject)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE IExtenderSite_NotifyDelete_Proxy( 
    IExtenderSite * This,
    /* [in] */ long Cookie);


void __RPC_STUB IExtenderSite_NotifyDelete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE IExtenderSite_GetObject_Proxy( 
    IExtenderSite * This,
    /* [defaultvalue][in] */ BSTR Name,
    /* [retval][out] */ IDispatch **ppObject);


void __RPC_STUB IExtenderSite_GetObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IExtenderSite_INTERFACE_DEFINED__ */


#ifndef __IExtenderProvider_INTERFACE_DEFINED__
#define __IExtenderProvider_INTERFACE_DEFINED__

/* interface IExtenderProvider */
/* [object][helpstringcontext][helpstring][helpcontext][dual][uuid] */ 


EXTERN_C const IID IID_IExtenderProvider;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4db06329-23f4-443b-9abd-9cf611e8ae07")
    IExtenderProvider : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetExtender( 
            /* [in] */ BSTR ExtenderCATID,
            /* [in] */ BSTR ExtenderName,
            /* [in] */ IDispatch *ExtendeeObject,
            /* [in] */ IExtenderSite *ExtenderSite,
            /* [in] */ long Cookie,
            /* [retval][out] */ IDispatch **Extender) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CanExtend( 
            /* [in] */ BSTR ExtenderCATID,
            /* [in] */ BSTR ExtenderName,
            /* [in] */ IDispatch *ExtendeeObject,
            /* [retval][out] */ VARIANT_BOOL *fRetval) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IExtenderProviderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IExtenderProvider * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IExtenderProvider * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IExtenderProvider * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IExtenderProvider * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IExtenderProvider * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IExtenderProvider * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IExtenderProvider * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtender )( 
            IExtenderProvider * This,
            /* [in] */ BSTR ExtenderCATID,
            /* [in] */ BSTR ExtenderName,
            /* [in] */ IDispatch *ExtendeeObject,
            /* [in] */ IExtenderSite *ExtenderSite,
            /* [in] */ long Cookie,
            /* [retval][out] */ IDispatch **Extender);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CanExtend )( 
            IExtenderProvider * This,
            /* [in] */ BSTR ExtenderCATID,
            /* [in] */ BSTR ExtenderName,
            /* [in] */ IDispatch *ExtendeeObject,
            /* [retval][out] */ VARIANT_BOOL *fRetval);
        
        END_INTERFACE
    } IExtenderProviderVtbl;

    interface IExtenderProvider
    {
        CONST_VTBL struct IExtenderProviderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IExtenderProvider_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IExtenderProvider_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IExtenderProvider_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IExtenderProvider_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IExtenderProvider_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IExtenderProvider_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IExtenderProvider_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IExtenderProvider_GetExtender(This,ExtenderCATID,ExtenderName,ExtendeeObject,ExtenderSite,Cookie,Extender)	\
    (This)->lpVtbl -> GetExtender(This,ExtenderCATID,ExtenderName,ExtendeeObject,ExtenderSite,Cookie,Extender)

#define IExtenderProvider_CanExtend(This,ExtenderCATID,ExtenderName,ExtendeeObject,fRetval)	\
    (This)->lpVtbl -> CanExtend(This,ExtenderCATID,ExtenderName,ExtendeeObject,fRetval)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE IExtenderProvider_GetExtender_Proxy( 
    IExtenderProvider * This,
    /* [in] */ BSTR ExtenderCATID,
    /* [in] */ BSTR ExtenderName,
    /* [in] */ IDispatch *ExtendeeObject,
    /* [in] */ IExtenderSite *ExtenderSite,
    /* [in] */ long Cookie,
    /* [retval][out] */ IDispatch **Extender);


void __RPC_STUB IExtenderProvider_GetExtender_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE IExtenderProvider_CanExtend_Proxy( 
    IExtenderProvider * This,
    /* [in] */ BSTR ExtenderCATID,
    /* [in] */ BSTR ExtenderName,
    /* [in] */ IDispatch *ExtendeeObject,
    /* [retval][out] */ VARIANT_BOOL *fRetval);


void __RPC_STUB IExtenderProvider_CanExtend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IExtenderProvider_INTERFACE_DEFINED__ */


#ifndef __IExtenderProviderUnk_INTERFACE_DEFINED__
#define __IExtenderProviderUnk_INTERFACE_DEFINED__

/* interface IExtenderProviderUnk */
/* [object][helpstringcontext][helpstring][helpcontext][dual][uuid] */ 


EXTERN_C const IID IID_IExtenderProviderUnk;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("F69B64A3-9017-4e48-9784-E152B51AA722")
    IExtenderProviderUnk : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetExtender( 
            /* [in] */ BSTR ExtenderCATID,
            /* [in] */ BSTR ExtenderName,
            /* [in] */ IUnknown *ExtendeeObject,
            /* [in] */ IExtenderSite *ExtenderSite,
            /* [in] */ long Cookie,
            /* [retval][out] */ IDispatch **Extender) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CanExtend( 
            /* [in] */ BSTR ExtenderCATID,
            /* [in] */ BSTR ExtenderName,
            /* [in] */ IUnknown *ExtendeeObject,
            /* [retval][out] */ VARIANT_BOOL *fRetval) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IExtenderProviderUnkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IExtenderProviderUnk * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IExtenderProviderUnk * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IExtenderProviderUnk * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IExtenderProviderUnk * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IExtenderProviderUnk * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IExtenderProviderUnk * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IExtenderProviderUnk * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetExtender )( 
            IExtenderProviderUnk * This,
            /* [in] */ BSTR ExtenderCATID,
            /* [in] */ BSTR ExtenderName,
            /* [in] */ IUnknown *ExtendeeObject,
            /* [in] */ IExtenderSite *ExtenderSite,
            /* [in] */ long Cookie,
            /* [retval][out] */ IDispatch **Extender);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CanExtend )( 
            IExtenderProviderUnk * This,
            /* [in] */ BSTR ExtenderCATID,
            /* [in] */ BSTR ExtenderName,
            /* [in] */ IUnknown *ExtendeeObject,
            /* [retval][out] */ VARIANT_BOOL *fRetval);
        
        END_INTERFACE
    } IExtenderProviderUnkVtbl;

    interface IExtenderProviderUnk
    {
        CONST_VTBL struct IExtenderProviderUnkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IExtenderProviderUnk_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IExtenderProviderUnk_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IExtenderProviderUnk_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IExtenderProviderUnk_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IExtenderProviderUnk_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IExtenderProviderUnk_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IExtenderProviderUnk_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IExtenderProviderUnk_GetExtender(This,ExtenderCATID,ExtenderName,ExtendeeObject,ExtenderSite,Cookie,Extender)	\
    (This)->lpVtbl -> GetExtender(This,ExtenderCATID,ExtenderName,ExtendeeObject,ExtenderSite,Cookie,Extender)

#define IExtenderProviderUnk_CanExtend(This,ExtenderCATID,ExtenderName,ExtendeeObject,fRetval)	\
    (This)->lpVtbl -> CanExtend(This,ExtenderCATID,ExtenderName,ExtendeeObject,fRetval)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE IExtenderProviderUnk_GetExtender_Proxy( 
    IExtenderProviderUnk * This,
    /* [in] */ BSTR ExtenderCATID,
    /* [in] */ BSTR ExtenderName,
    /* [in] */ IUnknown *ExtendeeObject,
    /* [in] */ IExtenderSite *ExtenderSite,
    /* [in] */ long Cookie,
    /* [retval][out] */ IDispatch **Extender);


void __RPC_STUB IExtenderProviderUnk_GetExtender_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE IExtenderProviderUnk_CanExtend_Proxy( 
    IExtenderProviderUnk * This,
    /* [in] */ BSTR ExtenderCATID,
    /* [in] */ BSTR ExtenderName,
    /* [in] */ IUnknown *ExtendeeObject,
    /* [retval][out] */ VARIANT_BOOL *fRetval);


void __RPC_STUB IExtenderProviderUnk_CanExtend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IExtenderProviderUnk_INTERFACE_DEFINED__ */


#ifndef __IFilterProperties_INTERFACE_DEFINED__
#define __IFilterProperties_INTERFACE_DEFINED__

/* interface IFilterProperties */
/* [object][helpstringcontext][helpstring][helpcontext][dual][uuid] */ 


EXTERN_C const IID IID_IFilterProperties;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("aade1f59-6ace-43d1-8fca-42af3a5c4f3c")
    IFilterProperties : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE IsPropertyHidden( 
            /* [in] */ BSTR PropertyName,
            /* [retval][out] */ vsFilterProperties *pRetval) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IFilterPropertiesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IFilterProperties * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IFilterProperties * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IFilterProperties * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IFilterProperties * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IFilterProperties * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IFilterProperties * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IFilterProperties * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IsPropertyHidden )( 
            IFilterProperties * This,
            /* [in] */ BSTR PropertyName,
            /* [retval][out] */ vsFilterProperties *pRetval);
        
        END_INTERFACE
    } IFilterPropertiesVtbl;

    interface IFilterProperties
    {
        CONST_VTBL struct IFilterPropertiesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IFilterProperties_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IFilterProperties_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IFilterProperties_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IFilterProperties_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IFilterProperties_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IFilterProperties_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IFilterProperties_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IFilterProperties_IsPropertyHidden(This,PropertyName,pRetval)	\
    (This)->lpVtbl -> IsPropertyHidden(This,PropertyName,pRetval)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE IFilterProperties_IsPropertyHidden_Proxy( 
    IFilterProperties * This,
    /* [in] */ BSTR PropertyName,
    /* [retval][out] */ vsFilterProperties *pRetval);


void __RPC_STUB IFilterProperties_IsPropertyHidden_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IFilterProperties_INTERFACE_DEFINED__ */


#ifndef ___dispDTEEvents_DISPINTERFACE_DEFINED__
#define ___dispDTEEvents_DISPINTERFACE_DEFINED__

/* dispinterface _dispDTEEvents */
/* [helpstringcontext][helpstring][helpcontext][uuid] */ 


EXTERN_C const IID DIID__dispDTEEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("b50c9708-c909-4b87-a03d-af6cc4bfb422")
    _dispDTEEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _dispDTEEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _dispDTEEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _dispDTEEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _dispDTEEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _dispDTEEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _dispDTEEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _dispDTEEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _dispDTEEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _dispDTEEventsVtbl;

    interface _dispDTEEvents
    {
        CONST_VTBL struct _dispDTEEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _dispDTEEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _dispDTEEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _dispDTEEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _dispDTEEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _dispDTEEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _dispDTEEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _dispDTEEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___dispDTEEvents_DISPINTERFACE_DEFINED__ */


#ifndef __BuildDependencies_INTERFACE_DEFINED__
#define __BuildDependencies_INTERFACE_DEFINED__

/* interface BuildDependencies */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_BuildDependencies;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ead260eb-1e5b-450a-b628-4cfada11b4a1")
    BuildDependencies : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**ppDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ SolutionBuild **ppSolutionBuild) = 0;
        
        virtual /* [id][restricted] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **Enumerator) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ BuildDependency **ppOut) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *pCount) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BuildDependenciesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BuildDependencies * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BuildDependencies * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BuildDependencies * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BuildDependencies * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BuildDependencies * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BuildDependencies * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BuildDependencies * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            BuildDependencies * This,
            /* [retval][out] */ DTE	**ppDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            BuildDependencies * This,
            /* [retval][out] */ SolutionBuild **ppSolutionBuild);
        
        /* [id][restricted] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            BuildDependencies * This,
            /* [retval][out] */ IUnknown **Enumerator);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            BuildDependencies * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ BuildDependency **ppOut);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            BuildDependencies * This,
            /* [retval][out] */ long *pCount);
        
        END_INTERFACE
    } BuildDependenciesVtbl;

    interface BuildDependencies
    {
        CONST_VTBL struct BuildDependenciesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BuildDependencies_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define BuildDependencies_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define BuildDependencies_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define BuildDependencies_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define BuildDependencies_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define BuildDependencies_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define BuildDependencies_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define BuildDependencies_get_DTE(This,ppDTE)	\
    (This)->lpVtbl -> get_DTE(This,ppDTE)

#define BuildDependencies_get_Parent(This,ppSolutionBuild)	\
    (This)->lpVtbl -> get_Parent(This,ppSolutionBuild)

#define BuildDependencies__NewEnum(This,Enumerator)	\
    (This)->lpVtbl -> _NewEnum(This,Enumerator)

#define BuildDependencies_Item(This,Index,ppOut)	\
    (This)->lpVtbl -> Item(This,Index,ppOut)

#define BuildDependencies_get_Count(This,pCount)	\
    (This)->lpVtbl -> get_Count(This,pCount)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE BuildDependencies_get_DTE_Proxy( 
    BuildDependencies * This,
    /* [retval][out] */ DTE	**ppDTE);


void __RPC_STUB BuildDependencies_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE BuildDependencies_get_Parent_Proxy( 
    BuildDependencies * This,
    /* [retval][out] */ SolutionBuild **ppSolutionBuild);


void __RPC_STUB BuildDependencies_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][restricted] */ HRESULT STDMETHODCALLTYPE BuildDependencies__NewEnum_Proxy( 
    BuildDependencies * This,
    /* [retval][out] */ IUnknown **Enumerator);


void __RPC_STUB BuildDependencies__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE BuildDependencies_Item_Proxy( 
    BuildDependencies * This,
    /* [in] */ VARIANT Index,
    /* [retval][out] */ BuildDependency **ppOut);


void __RPC_STUB BuildDependencies_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE BuildDependencies_get_Count_Proxy( 
    BuildDependencies * This,
    /* [retval][out] */ long *pCount);


void __RPC_STUB BuildDependencies_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __BuildDependencies_INTERFACE_DEFINED__ */


#ifndef __BuildDependency_INTERFACE_DEFINED__
#define __BuildDependency_INTERFACE_DEFINED__

/* interface BuildDependency */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_BuildDependency;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9c5ceaac-062f-4434-a2ed-78ab4d6134fe")
    BuildDependency : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**ppDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ BuildDependencies **ppBuildDependencies) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Project( 
            /* [retval][out] */ Project **ppProject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_RequiredProjects( 
            /* [retval][out] */ VARIANT *pProjects) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddProject( 
            BSTR ProjectUniqueName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveProject( 
            BSTR ProjectUniqueName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveAllProjects( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct BuildDependencyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            BuildDependency * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            BuildDependency * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            BuildDependency * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            BuildDependency * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            BuildDependency * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            BuildDependency * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            BuildDependency * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            BuildDependency * This,
            /* [retval][out] */ DTE	**ppDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            BuildDependency * This,
            /* [retval][out] */ BuildDependencies **ppBuildDependencies);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Project )( 
            BuildDependency * This,
            /* [retval][out] */ Project **ppProject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_RequiredProjects )( 
            BuildDependency * This,
            /* [retval][out] */ VARIANT *pProjects);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddProject )( 
            BuildDependency * This,
            BSTR ProjectUniqueName);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveProject )( 
            BuildDependency * This,
            BSTR ProjectUniqueName);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveAllProjects )( 
            BuildDependency * This);
        
        END_INTERFACE
    } BuildDependencyVtbl;

    interface BuildDependency
    {
        CONST_VTBL struct BuildDependencyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define BuildDependency_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define BuildDependency_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define BuildDependency_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define BuildDependency_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define BuildDependency_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define BuildDependency_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define BuildDependency_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define BuildDependency_get_DTE(This,ppDTE)	\
    (This)->lpVtbl -> get_DTE(This,ppDTE)

#define BuildDependency_get_Collection(This,ppBuildDependencies)	\
    (This)->lpVtbl -> get_Collection(This,ppBuildDependencies)

#define BuildDependency_get_Project(This,ppProject)	\
    (This)->lpVtbl -> get_Project(This,ppProject)

#define BuildDependency_get_RequiredProjects(This,pProjects)	\
    (This)->lpVtbl -> get_RequiredProjects(This,pProjects)

#define BuildDependency_AddProject(This,ProjectUniqueName)	\
    (This)->lpVtbl -> AddProject(This,ProjectUniqueName)

#define BuildDependency_RemoveProject(This,ProjectUniqueName)	\
    (This)->lpVtbl -> RemoveProject(This,ProjectUniqueName)

#define BuildDependency_RemoveAllProjects(This)	\
    (This)->lpVtbl -> RemoveAllProjects(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE BuildDependency_get_DTE_Proxy( 
    BuildDependency * This,
    /* [retval][out] */ DTE	**ppDTE);


void __RPC_STUB BuildDependency_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE BuildDependency_get_Collection_Proxy( 
    BuildDependency * This,
    /* [retval][out] */ BuildDependencies **ppBuildDependencies);


void __RPC_STUB BuildDependency_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE BuildDependency_get_Project_Proxy( 
    BuildDependency * This,
    /* [retval][out] */ Project **ppProject);


void __RPC_STUB BuildDependency_get_Project_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE BuildDependency_get_RequiredProjects_Proxy( 
    BuildDependency * This,
    /* [retval][out] */ VARIANT *pProjects);


void __RPC_STUB BuildDependency_get_RequiredProjects_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE BuildDependency_AddProject_Proxy( 
    BuildDependency * This,
    BSTR ProjectUniqueName);


void __RPC_STUB BuildDependency_AddProject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE BuildDependency_RemoveProject_Proxy( 
    BuildDependency * This,
    BSTR ProjectUniqueName);


void __RPC_STUB BuildDependency_RemoveProject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE BuildDependency_RemoveAllProjects_Proxy( 
    BuildDependency * This);


void __RPC_STUB BuildDependency_RemoveAllProjects_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __BuildDependency_INTERFACE_DEFINED__ */


#ifndef __SolutionConfigurations_INTERFACE_DEFINED__
#define __SolutionConfigurations_INTERFACE_DEFINED__

/* interface SolutionConfigurations */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_SolutionConfigurations;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("23e78ed7-c9e1-462d-8bc6-366003486ed9")
    SolutionConfigurations : public IDispatch
    {
    public:
        virtual /* [id][restricted] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **Enumerator) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ SolutionConfiguration **ppOut) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**ppDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ SolutionBuild **ppBuild) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ BSTR NewName,
            /* [in] */ BSTR ExistingName,
            /* [in] */ VARIANT_BOOL Propagate,
            /* [retval][out] */ SolutionConfiguration **ppSolutionConfiguration) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *pCount) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SolutionConfigurationsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            SolutionConfigurations * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            SolutionConfigurations * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            SolutionConfigurations * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            SolutionConfigurations * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            SolutionConfigurations * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            SolutionConfigurations * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            SolutionConfigurations * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][restricted] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            SolutionConfigurations * This,
            /* [retval][out] */ IUnknown **Enumerator);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            SolutionConfigurations * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ SolutionConfiguration **ppOut);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            SolutionConfigurations * This,
            /* [retval][out] */ DTE	**ppDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            SolutionConfigurations * This,
            /* [retval][out] */ SolutionBuild **ppBuild);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            SolutionConfigurations * This,
            /* [in] */ BSTR NewName,
            /* [in] */ BSTR ExistingName,
            /* [in] */ VARIANT_BOOL Propagate,
            /* [retval][out] */ SolutionConfiguration **ppSolutionConfiguration);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            SolutionConfigurations * This,
            /* [retval][out] */ long *pCount);
        
        END_INTERFACE
    } SolutionConfigurationsVtbl;

    interface SolutionConfigurations
    {
        CONST_VTBL struct SolutionConfigurationsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define SolutionConfigurations_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define SolutionConfigurations_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define SolutionConfigurations_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define SolutionConfigurations_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define SolutionConfigurations_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define SolutionConfigurations_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define SolutionConfigurations_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define SolutionConfigurations__NewEnum(This,Enumerator)	\
    (This)->lpVtbl -> _NewEnum(This,Enumerator)

#define SolutionConfigurations_Item(This,Index,ppOut)	\
    (This)->lpVtbl -> Item(This,Index,ppOut)

#define SolutionConfigurations_get_DTE(This,ppDTE)	\
    (This)->lpVtbl -> get_DTE(This,ppDTE)

#define SolutionConfigurations_get_Parent(This,ppBuild)	\
    (This)->lpVtbl -> get_Parent(This,ppBuild)

#define SolutionConfigurations_Add(This,NewName,ExistingName,Propagate,ppSolutionConfiguration)	\
    (This)->lpVtbl -> Add(This,NewName,ExistingName,Propagate,ppSolutionConfiguration)

#define SolutionConfigurations_get_Count(This,pCount)	\
    (This)->lpVtbl -> get_Count(This,pCount)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [id][restricted] */ HRESULT STDMETHODCALLTYPE SolutionConfigurations__NewEnum_Proxy( 
    SolutionConfigurations * This,
    /* [retval][out] */ IUnknown **Enumerator);


void __RPC_STUB SolutionConfigurations__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SolutionConfigurations_Item_Proxy( 
    SolutionConfigurations * This,
    /* [in] */ VARIANT Index,
    /* [retval][out] */ SolutionConfiguration **ppOut);


void __RPC_STUB SolutionConfigurations_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SolutionConfigurations_get_DTE_Proxy( 
    SolutionConfigurations * This,
    /* [retval][out] */ DTE	**ppDTE);


void __RPC_STUB SolutionConfigurations_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SolutionConfigurations_get_Parent_Proxy( 
    SolutionConfigurations * This,
    /* [retval][out] */ SolutionBuild **ppBuild);


void __RPC_STUB SolutionConfigurations_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SolutionConfigurations_Add_Proxy( 
    SolutionConfigurations * This,
    /* [in] */ BSTR NewName,
    /* [in] */ BSTR ExistingName,
    /* [in] */ VARIANT_BOOL Propagate,
    /* [retval][out] */ SolutionConfiguration **ppSolutionConfiguration);


void __RPC_STUB SolutionConfigurations_Add_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SolutionConfigurations_get_Count_Proxy( 
    SolutionConfigurations * This,
    /* [retval][out] */ long *pCount);


void __RPC_STUB SolutionConfigurations_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __SolutionConfigurations_INTERFACE_DEFINED__ */


#ifndef __SolutionConfiguration_INTERFACE_DEFINED__
#define __SolutionConfiguration_INTERFACE_DEFINED__

/* interface SolutionConfiguration */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_SolutionConfiguration;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("60aaad75-cb8d-4c62-9959-24d6a6a50de7")
    SolutionConfiguration : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**ppDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ SolutionConfigurations **ppSolutionConfigurations) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SolutionContexts( 
            /* [retval][out] */ SolutionContexts **ppOut) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Activate( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SolutionConfigurationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            SolutionConfiguration * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            SolutionConfiguration * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            SolutionConfiguration * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            SolutionConfiguration * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            SolutionConfiguration * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            SolutionConfiguration * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            SolutionConfiguration * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            SolutionConfiguration * This,
            /* [retval][out] */ DTE	**ppDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            SolutionConfiguration * This,
            /* [retval][out] */ SolutionConfigurations **ppSolutionConfigurations);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            SolutionConfiguration * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SolutionContexts )( 
            SolutionConfiguration * This,
            /* [retval][out] */ SolutionContexts **ppOut);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            SolutionConfiguration * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Activate )( 
            SolutionConfiguration * This);
        
        END_INTERFACE
    } SolutionConfigurationVtbl;

    interface SolutionConfiguration
    {
        CONST_VTBL struct SolutionConfigurationVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define SolutionConfiguration_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define SolutionConfiguration_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define SolutionConfiguration_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define SolutionConfiguration_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define SolutionConfiguration_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define SolutionConfiguration_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define SolutionConfiguration_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define SolutionConfiguration_get_DTE(This,ppDTE)	\
    (This)->lpVtbl -> get_DTE(This,ppDTE)

#define SolutionConfiguration_get_Collection(This,ppSolutionConfigurations)	\
    (This)->lpVtbl -> get_Collection(This,ppSolutionConfigurations)

#define SolutionConfiguration_get_Name(This,pVal)	\
    (This)->lpVtbl -> get_Name(This,pVal)

#define SolutionConfiguration_get_SolutionContexts(This,ppOut)	\
    (This)->lpVtbl -> get_SolutionContexts(This,ppOut)

#define SolutionConfiguration_Delete(This)	\
    (This)->lpVtbl -> Delete(This)

#define SolutionConfiguration_Activate(This)	\
    (This)->lpVtbl -> Activate(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SolutionConfiguration_get_DTE_Proxy( 
    SolutionConfiguration * This,
    /* [retval][out] */ DTE	**ppDTE);


void __RPC_STUB SolutionConfiguration_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SolutionConfiguration_get_Collection_Proxy( 
    SolutionConfiguration * This,
    /* [retval][out] */ SolutionConfigurations **ppSolutionConfigurations);


void __RPC_STUB SolutionConfiguration_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SolutionConfiguration_get_Name_Proxy( 
    SolutionConfiguration * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB SolutionConfiguration_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SolutionConfiguration_get_SolutionContexts_Proxy( 
    SolutionConfiguration * This,
    /* [retval][out] */ SolutionContexts **ppOut);


void __RPC_STUB SolutionConfiguration_get_SolutionContexts_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SolutionConfiguration_Delete_Proxy( 
    SolutionConfiguration * This);


void __RPC_STUB SolutionConfiguration_Delete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SolutionConfiguration_Activate_Proxy( 
    SolutionConfiguration * This);


void __RPC_STUB SolutionConfiguration_Activate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __SolutionConfiguration_INTERFACE_DEFINED__ */


#ifndef __SolutionContext_INTERFACE_DEFINED__
#define __SolutionContext_INTERFACE_DEFINED__

/* interface SolutionContext */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_SolutionContext;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("fc6a1a82-9c8a-47bb-a046-6e965df5a99b")
    SolutionContext : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**ppDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ SolutionContexts **ppSolutionContexts) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProjectName( 
            /* [retval][out] */ BSTR *pName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ConfigurationName( 
            /* [retval][out] */ BSTR *pConfigurationName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ConfigurationName( 
            /* [in] */ BSTR Name) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PlatformName( 
            /* [retval][out] */ BSTR *pPlatformName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShouldBuild( 
            /* [retval][out] */ VARIANT_BOOL *pPlatformName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShouldBuild( 
            /* [in] */ VARIANT_BOOL IsBuilt) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ShouldDeploy( 
            /* [retval][out] */ VARIANT_BOOL *pPlatformName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_ShouldDeploy( 
            /* [in] */ VARIANT_BOOL IsDeployed) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SolutionContextVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            SolutionContext * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            SolutionContext * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            SolutionContext * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            SolutionContext * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            SolutionContext * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            SolutionContext * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            SolutionContext * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            SolutionContext * This,
            /* [retval][out] */ DTE	**ppDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            SolutionContext * This,
            /* [retval][out] */ SolutionContexts **ppSolutionContexts);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProjectName )( 
            SolutionContext * This,
            /* [retval][out] */ BSTR *pName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ConfigurationName )( 
            SolutionContext * This,
            /* [retval][out] */ BSTR *pConfigurationName);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ConfigurationName )( 
            SolutionContext * This,
            /* [in] */ BSTR Name);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlatformName )( 
            SolutionContext * This,
            /* [retval][out] */ BSTR *pPlatformName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShouldBuild )( 
            SolutionContext * This,
            /* [retval][out] */ VARIANT_BOOL *pPlatformName);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShouldBuild )( 
            SolutionContext * This,
            /* [in] */ VARIANT_BOOL IsBuilt);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ShouldDeploy )( 
            SolutionContext * This,
            /* [retval][out] */ VARIANT_BOOL *pPlatformName);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_ShouldDeploy )( 
            SolutionContext * This,
            /* [in] */ VARIANT_BOOL IsDeployed);
        
        END_INTERFACE
    } SolutionContextVtbl;

    interface SolutionContext
    {
        CONST_VTBL struct SolutionContextVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define SolutionContext_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define SolutionContext_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define SolutionContext_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define SolutionContext_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define SolutionContext_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define SolutionContext_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define SolutionContext_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define SolutionContext_get_DTE(This,ppDTE)	\
    (This)->lpVtbl -> get_DTE(This,ppDTE)

#define SolutionContext_get_Collection(This,ppSolutionContexts)	\
    (This)->lpVtbl -> get_Collection(This,ppSolutionContexts)

#define SolutionContext_get_ProjectName(This,pName)	\
    (This)->lpVtbl -> get_ProjectName(This,pName)

#define SolutionContext_get_ConfigurationName(This,pConfigurationName)	\
    (This)->lpVtbl -> get_ConfigurationName(This,pConfigurationName)

#define SolutionContext_put_ConfigurationName(This,Name)	\
    (This)->lpVtbl -> put_ConfigurationName(This,Name)

#define SolutionContext_get_PlatformName(This,pPlatformName)	\
    (This)->lpVtbl -> get_PlatformName(This,pPlatformName)

#define SolutionContext_get_ShouldBuild(This,pPlatformName)	\
    (This)->lpVtbl -> get_ShouldBuild(This,pPlatformName)

#define SolutionContext_put_ShouldBuild(This,IsBuilt)	\
    (This)->lpVtbl -> put_ShouldBuild(This,IsBuilt)

#define SolutionContext_get_ShouldDeploy(This,pPlatformName)	\
    (This)->lpVtbl -> get_ShouldDeploy(This,pPlatformName)

#define SolutionContext_put_ShouldDeploy(This,IsDeployed)	\
    (This)->lpVtbl -> put_ShouldDeploy(This,IsDeployed)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SolutionContext_get_DTE_Proxy( 
    SolutionContext * This,
    /* [retval][out] */ DTE	**ppDTE);


void __RPC_STUB SolutionContext_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SolutionContext_get_Collection_Proxy( 
    SolutionContext * This,
    /* [retval][out] */ SolutionContexts **ppSolutionContexts);


void __RPC_STUB SolutionContext_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SolutionContext_get_ProjectName_Proxy( 
    SolutionContext * This,
    /* [retval][out] */ BSTR *pName);


void __RPC_STUB SolutionContext_get_ProjectName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SolutionContext_get_ConfigurationName_Proxy( 
    SolutionContext * This,
    /* [retval][out] */ BSTR *pConfigurationName);


void __RPC_STUB SolutionContext_get_ConfigurationName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE SolutionContext_put_ConfigurationName_Proxy( 
    SolutionContext * This,
    /* [in] */ BSTR Name);


void __RPC_STUB SolutionContext_put_ConfigurationName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SolutionContext_get_PlatformName_Proxy( 
    SolutionContext * This,
    /* [retval][out] */ BSTR *pPlatformName);


void __RPC_STUB SolutionContext_get_PlatformName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SolutionContext_get_ShouldBuild_Proxy( 
    SolutionContext * This,
    /* [retval][out] */ VARIANT_BOOL *pPlatformName);


void __RPC_STUB SolutionContext_get_ShouldBuild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE SolutionContext_put_ShouldBuild_Proxy( 
    SolutionContext * This,
    /* [in] */ VARIANT_BOOL IsBuilt);


void __RPC_STUB SolutionContext_put_ShouldBuild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SolutionContext_get_ShouldDeploy_Proxy( 
    SolutionContext * This,
    /* [retval][out] */ VARIANT_BOOL *pPlatformName);


void __RPC_STUB SolutionContext_get_ShouldDeploy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE SolutionContext_put_ShouldDeploy_Proxy( 
    SolutionContext * This,
    /* [in] */ VARIANT_BOOL IsDeployed);


void __RPC_STUB SolutionContext_put_ShouldDeploy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __SolutionContext_INTERFACE_DEFINED__ */


#ifndef __SolutionBuild_INTERFACE_DEFINED__
#define __SolutionBuild_INTERFACE_DEFINED__

/* interface SolutionBuild */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_SolutionBuild;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a3c1c40c-9218-4d4c-9daa-075f64f6922c")
    SolutionBuild : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**ppDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Solution	**ppSolution) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActiveConfiguration( 
            /* [retval][out] */ SolutionConfiguration **ppSolutionConfiguration) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BuildDependencies( 
            /* [retval][out] */ BuildDependencies **ppBuildDependencies) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BuildState( 
            /* [retval][out] */ vsBuildState *pvsBuildState) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LastBuildInfo( 
            /* [retval][out] */ long *pBuiltSuccessfully) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_StartupProjects( 
            /* [in] */ VARIANT Projects) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartupProjects( 
            /* [retval][out] */ VARIANT *pProject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Build( 
            /* [defaultvalue][in] */ VARIANT_BOOL WaitForBuildToFinish = 0) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Debug( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Deploy( 
            /* [defaultvalue][in] */ VARIANT_BOOL WaitForDeployToFinish = 0) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Clean( 
            /* [defaultvalue][in] */ VARIANT_BOOL WaitForCleanToFinish = 0) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Run( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SolutionConfigurations( 
            /* [retval][out] */ SolutionConfigurations **ppSolutionConfigurations) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE BuildProject( 
            BSTR SolutionConfiguration,
            BSTR ProjectUniqueName,
            /* [defaultvalue] */ VARIANT_BOOL WaitForBuildToFinish = 0) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SolutionBuildVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            SolutionBuild * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            SolutionBuild * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            SolutionBuild * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            SolutionBuild * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            SolutionBuild * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            SolutionBuild * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            SolutionBuild * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            SolutionBuild * This,
            /* [retval][out] */ DTE	**ppDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            SolutionBuild * This,
            /* [retval][out] */ Solution	**ppSolution);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActiveConfiguration )( 
            SolutionBuild * This,
            /* [retval][out] */ SolutionConfiguration **ppSolutionConfiguration);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BuildDependencies )( 
            SolutionBuild * This,
            /* [retval][out] */ BuildDependencies **ppBuildDependencies);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BuildState )( 
            SolutionBuild * This,
            /* [retval][out] */ vsBuildState *pvsBuildState);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LastBuildInfo )( 
            SolutionBuild * This,
            /* [retval][out] */ long *pBuiltSuccessfully);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_StartupProjects )( 
            SolutionBuild * This,
            /* [in] */ VARIANT Projects);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartupProjects )( 
            SolutionBuild * This,
            /* [retval][out] */ VARIANT *pProject);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Build )( 
            SolutionBuild * This,
            /* [defaultvalue][in] */ VARIANT_BOOL WaitForBuildToFinish);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Debug )( 
            SolutionBuild * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Deploy )( 
            SolutionBuild * This,
            /* [defaultvalue][in] */ VARIANT_BOOL WaitForDeployToFinish);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Clean )( 
            SolutionBuild * This,
            /* [defaultvalue][in] */ VARIANT_BOOL WaitForCleanToFinish);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Run )( 
            SolutionBuild * This);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SolutionConfigurations )( 
            SolutionBuild * This,
            /* [retval][out] */ SolutionConfigurations **ppSolutionConfigurations);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *BuildProject )( 
            SolutionBuild * This,
            BSTR SolutionConfiguration,
            BSTR ProjectUniqueName,
            /* [defaultvalue] */ VARIANT_BOOL WaitForBuildToFinish);
        
        END_INTERFACE
    } SolutionBuildVtbl;

    interface SolutionBuild
    {
        CONST_VTBL struct SolutionBuildVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define SolutionBuild_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define SolutionBuild_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define SolutionBuild_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define SolutionBuild_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define SolutionBuild_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define SolutionBuild_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define SolutionBuild_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define SolutionBuild_get_DTE(This,ppDTE)	\
    (This)->lpVtbl -> get_DTE(This,ppDTE)

#define SolutionBuild_get_Parent(This,ppSolution)	\
    (This)->lpVtbl -> get_Parent(This,ppSolution)

#define SolutionBuild_get_ActiveConfiguration(This,ppSolutionConfiguration)	\
    (This)->lpVtbl -> get_ActiveConfiguration(This,ppSolutionConfiguration)

#define SolutionBuild_get_BuildDependencies(This,ppBuildDependencies)	\
    (This)->lpVtbl -> get_BuildDependencies(This,ppBuildDependencies)

#define SolutionBuild_get_BuildState(This,pvsBuildState)	\
    (This)->lpVtbl -> get_BuildState(This,pvsBuildState)

#define SolutionBuild_get_LastBuildInfo(This,pBuiltSuccessfully)	\
    (This)->lpVtbl -> get_LastBuildInfo(This,pBuiltSuccessfully)

#define SolutionBuild_put_StartupProjects(This,Projects)	\
    (This)->lpVtbl -> put_StartupProjects(This,Projects)

#define SolutionBuild_get_StartupProjects(This,pProject)	\
    (This)->lpVtbl -> get_StartupProjects(This,pProject)

#define SolutionBuild_Build(This,WaitForBuildToFinish)	\
    (This)->lpVtbl -> Build(This,WaitForBuildToFinish)

#define SolutionBuild_Debug(This)	\
    (This)->lpVtbl -> Debug(This)

#define SolutionBuild_Deploy(This,WaitForDeployToFinish)	\
    (This)->lpVtbl -> Deploy(This,WaitForDeployToFinish)

#define SolutionBuild_Clean(This,WaitForCleanToFinish)	\
    (This)->lpVtbl -> Clean(This,WaitForCleanToFinish)

#define SolutionBuild_Run(This)	\
    (This)->lpVtbl -> Run(This)

#define SolutionBuild_get_SolutionConfigurations(This,ppSolutionConfigurations)	\
    (This)->lpVtbl -> get_SolutionConfigurations(This,ppSolutionConfigurations)

#define SolutionBuild_BuildProject(This,SolutionConfiguration,ProjectUniqueName,WaitForBuildToFinish)	\
    (This)->lpVtbl -> BuildProject(This,SolutionConfiguration,ProjectUniqueName,WaitForBuildToFinish)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SolutionBuild_get_DTE_Proxy( 
    SolutionBuild * This,
    /* [retval][out] */ DTE	**ppDTE);


void __RPC_STUB SolutionBuild_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SolutionBuild_get_Parent_Proxy( 
    SolutionBuild * This,
    /* [retval][out] */ Solution	**ppSolution);


void __RPC_STUB SolutionBuild_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SolutionBuild_get_ActiveConfiguration_Proxy( 
    SolutionBuild * This,
    /* [retval][out] */ SolutionConfiguration **ppSolutionConfiguration);


void __RPC_STUB SolutionBuild_get_ActiveConfiguration_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SolutionBuild_get_BuildDependencies_Proxy( 
    SolutionBuild * This,
    /* [retval][out] */ BuildDependencies **ppBuildDependencies);


void __RPC_STUB SolutionBuild_get_BuildDependencies_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SolutionBuild_get_BuildState_Proxy( 
    SolutionBuild * This,
    /* [retval][out] */ vsBuildState *pvsBuildState);


void __RPC_STUB SolutionBuild_get_BuildState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SolutionBuild_get_LastBuildInfo_Proxy( 
    SolutionBuild * This,
    /* [retval][out] */ long *pBuiltSuccessfully);


void __RPC_STUB SolutionBuild_get_LastBuildInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE SolutionBuild_put_StartupProjects_Proxy( 
    SolutionBuild * This,
    /* [in] */ VARIANT Projects);


void __RPC_STUB SolutionBuild_put_StartupProjects_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SolutionBuild_get_StartupProjects_Proxy( 
    SolutionBuild * This,
    /* [retval][out] */ VARIANT *pProject);


void __RPC_STUB SolutionBuild_get_StartupProjects_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SolutionBuild_Build_Proxy( 
    SolutionBuild * This,
    /* [defaultvalue][in] */ VARIANT_BOOL WaitForBuildToFinish);


void __RPC_STUB SolutionBuild_Build_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SolutionBuild_Debug_Proxy( 
    SolutionBuild * This);


void __RPC_STUB SolutionBuild_Debug_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SolutionBuild_Deploy_Proxy( 
    SolutionBuild * This,
    /* [defaultvalue][in] */ VARIANT_BOOL WaitForDeployToFinish);


void __RPC_STUB SolutionBuild_Deploy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SolutionBuild_Clean_Proxy( 
    SolutionBuild * This,
    /* [defaultvalue][in] */ VARIANT_BOOL WaitForCleanToFinish);


void __RPC_STUB SolutionBuild_Clean_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SolutionBuild_Run_Proxy( 
    SolutionBuild * This);


void __RPC_STUB SolutionBuild_Run_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SolutionBuild_get_SolutionConfigurations_Proxy( 
    SolutionBuild * This,
    /* [retval][out] */ SolutionConfigurations **ppSolutionConfigurations);


void __RPC_STUB SolutionBuild_get_SolutionConfigurations_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SolutionBuild_BuildProject_Proxy( 
    SolutionBuild * This,
    BSTR SolutionConfiguration,
    BSTR ProjectUniqueName,
    /* [defaultvalue] */ VARIANT_BOOL WaitForBuildToFinish);


void __RPC_STUB SolutionBuild_BuildProject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __SolutionBuild_INTERFACE_DEFINED__ */


#ifndef __UIHierarchyItem_INTERFACE_DEFINED__
#define __UIHierarchyItem_INTERFACE_DEFINED__

/* interface UIHierarchyItem */
/* [object][helpstringcontext][helpstring][helpcontext][dual][uuid] */ 


EXTERN_C const IID IID_UIHierarchyItem;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("fbd0d024-09cd-4d9f-9e2b-cacd628426a5")
    UIHierarchyItem : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**ppDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ UIHierarchyItems **ppUIHierarchyItems) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pbstrName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_UIHierarchyItems( 
            /* [retval][out] */ UIHierarchyItems **ppUIHierarchyItems) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Object( 
            /* [retval][out] */ IDispatch **ppDispatch) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Select( 
            /* [in] */ vsUISelectionType How) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsSelected( 
            /* [retval][out] */ VARIANT_BOOL *pfSelected) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct UIHierarchyItemVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            UIHierarchyItem * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            UIHierarchyItem * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            UIHierarchyItem * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            UIHierarchyItem * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            UIHierarchyItem * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            UIHierarchyItem * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            UIHierarchyItem * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            UIHierarchyItem * This,
            /* [retval][out] */ DTE	**ppDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            UIHierarchyItem * This,
            /* [retval][out] */ UIHierarchyItems **ppUIHierarchyItems);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            UIHierarchyItem * This,
            /* [retval][out] */ BSTR *pbstrName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UIHierarchyItems )( 
            UIHierarchyItem * This,
            /* [retval][out] */ UIHierarchyItems **ppUIHierarchyItems);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Object )( 
            UIHierarchyItem * This,
            /* [retval][out] */ IDispatch **ppDispatch);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Select )( 
            UIHierarchyItem * This,
            /* [in] */ vsUISelectionType How);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsSelected )( 
            UIHierarchyItem * This,
            /* [retval][out] */ VARIANT_BOOL *pfSelected);
        
        END_INTERFACE
    } UIHierarchyItemVtbl;

    interface UIHierarchyItem
    {
        CONST_VTBL struct UIHierarchyItemVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define UIHierarchyItem_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define UIHierarchyItem_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define UIHierarchyItem_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define UIHierarchyItem_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define UIHierarchyItem_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define UIHierarchyItem_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define UIHierarchyItem_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define UIHierarchyItem_get_DTE(This,ppDTE)	\
    (This)->lpVtbl -> get_DTE(This,ppDTE)

#define UIHierarchyItem_get_Collection(This,ppUIHierarchyItems)	\
    (This)->lpVtbl -> get_Collection(This,ppUIHierarchyItems)

#define UIHierarchyItem_get_Name(This,pbstrName)	\
    (This)->lpVtbl -> get_Name(This,pbstrName)

#define UIHierarchyItem_get_UIHierarchyItems(This,ppUIHierarchyItems)	\
    (This)->lpVtbl -> get_UIHierarchyItems(This,ppUIHierarchyItems)

#define UIHierarchyItem_get_Object(This,ppDispatch)	\
    (This)->lpVtbl -> get_Object(This,ppDispatch)

#define UIHierarchyItem_Select(This,How)	\
    (This)->lpVtbl -> Select(This,How)

#define UIHierarchyItem_get_IsSelected(This,pfSelected)	\
    (This)->lpVtbl -> get_IsSelected(This,pfSelected)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE UIHierarchyItem_get_DTE_Proxy( 
    UIHierarchyItem * This,
    /* [retval][out] */ DTE	**ppDTE);


void __RPC_STUB UIHierarchyItem_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE UIHierarchyItem_get_Collection_Proxy( 
    UIHierarchyItem * This,
    /* [retval][out] */ UIHierarchyItems **ppUIHierarchyItems);


void __RPC_STUB UIHierarchyItem_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE UIHierarchyItem_get_Name_Proxy( 
    UIHierarchyItem * This,
    /* [retval][out] */ BSTR *pbstrName);


void __RPC_STUB UIHierarchyItem_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE UIHierarchyItem_get_UIHierarchyItems_Proxy( 
    UIHierarchyItem * This,
    /* [retval][out] */ UIHierarchyItems **ppUIHierarchyItems);


void __RPC_STUB UIHierarchyItem_get_UIHierarchyItems_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE UIHierarchyItem_get_Object_Proxy( 
    UIHierarchyItem * This,
    /* [retval][out] */ IDispatch **ppDispatch);


void __RPC_STUB UIHierarchyItem_get_Object_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE UIHierarchyItem_Select_Proxy( 
    UIHierarchyItem * This,
    /* [in] */ vsUISelectionType How);


void __RPC_STUB UIHierarchyItem_Select_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE UIHierarchyItem_get_IsSelected_Proxy( 
    UIHierarchyItem * This,
    /* [retval][out] */ VARIANT_BOOL *pfSelected);


void __RPC_STUB UIHierarchyItem_get_IsSelected_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __UIHierarchyItem_INTERFACE_DEFINED__ */


#ifndef __UIHierarchyItems_INTERFACE_DEFINED__
#define __UIHierarchyItems_INTERFACE_DEFINED__

/* interface UIHierarchyItems */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_UIHierarchyItems;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("db8406b0-a916-449c-a277-bb04028f4394")
    UIHierarchyItems : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**ppDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **ppDispatch) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *pCount) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ UIHierarchyItem **ppUIHierarchyItem) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Expanded( 
            /* [retval][out] */ VARIANT_BOOL *pfExpanded) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Expanded( 
            /* [in] */ VARIANT_BOOL Expanded) = 0;
        
        virtual /* [id][restricted] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **ppUnknown) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct UIHierarchyItemsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            UIHierarchyItems * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            UIHierarchyItems * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            UIHierarchyItems * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            UIHierarchyItems * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            UIHierarchyItems * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            UIHierarchyItems * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            UIHierarchyItems * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            UIHierarchyItems * This,
            /* [retval][out] */ DTE	**ppDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            UIHierarchyItems * This,
            /* [retval][out] */ IDispatch **ppDispatch);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            UIHierarchyItems * This,
            /* [retval][out] */ long *pCount);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            UIHierarchyItems * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ UIHierarchyItem **ppUIHierarchyItem);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Expanded )( 
            UIHierarchyItems * This,
            /* [retval][out] */ VARIANT_BOOL *pfExpanded);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Expanded )( 
            UIHierarchyItems * This,
            /* [in] */ VARIANT_BOOL Expanded);
        
        /* [id][restricted] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            UIHierarchyItems * This,
            /* [retval][out] */ IUnknown **ppUnknown);
        
        END_INTERFACE
    } UIHierarchyItemsVtbl;

    interface UIHierarchyItems
    {
        CONST_VTBL struct UIHierarchyItemsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define UIHierarchyItems_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define UIHierarchyItems_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define UIHierarchyItems_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define UIHierarchyItems_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define UIHierarchyItems_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define UIHierarchyItems_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define UIHierarchyItems_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define UIHierarchyItems_get_DTE(This,ppDTE)	\
    (This)->lpVtbl -> get_DTE(This,ppDTE)

#define UIHierarchyItems_get_Parent(This,ppDispatch)	\
    (This)->lpVtbl -> get_Parent(This,ppDispatch)

#define UIHierarchyItems_get_Count(This,pCount)	\
    (This)->lpVtbl -> get_Count(This,pCount)

#define UIHierarchyItems_Item(This,Index,ppUIHierarchyItem)	\
    (This)->lpVtbl -> Item(This,Index,ppUIHierarchyItem)

#define UIHierarchyItems_get_Expanded(This,pfExpanded)	\
    (This)->lpVtbl -> get_Expanded(This,pfExpanded)

#define UIHierarchyItems_put_Expanded(This,Expanded)	\
    (This)->lpVtbl -> put_Expanded(This,Expanded)

#define UIHierarchyItems__NewEnum(This,ppUnknown)	\
    (This)->lpVtbl -> _NewEnum(This,ppUnknown)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE UIHierarchyItems_get_DTE_Proxy( 
    UIHierarchyItems * This,
    /* [retval][out] */ DTE	**ppDTE);


void __RPC_STUB UIHierarchyItems_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE UIHierarchyItems_get_Parent_Proxy( 
    UIHierarchyItems * This,
    /* [retval][out] */ IDispatch **ppDispatch);


void __RPC_STUB UIHierarchyItems_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE UIHierarchyItems_get_Count_Proxy( 
    UIHierarchyItems * This,
    /* [retval][out] */ long *pCount);


void __RPC_STUB UIHierarchyItems_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE UIHierarchyItems_Item_Proxy( 
    UIHierarchyItems * This,
    /* [in] */ VARIANT Index,
    /* [retval][out] */ UIHierarchyItem **ppUIHierarchyItem);


void __RPC_STUB UIHierarchyItems_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE UIHierarchyItems_get_Expanded_Proxy( 
    UIHierarchyItems * This,
    /* [retval][out] */ VARIANT_BOOL *pfExpanded);


void __RPC_STUB UIHierarchyItems_get_Expanded_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE UIHierarchyItems_put_Expanded_Proxy( 
    UIHierarchyItems * This,
    /* [in] */ VARIANT_BOOL Expanded);


void __RPC_STUB UIHierarchyItems_put_Expanded_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][restricted] */ HRESULT STDMETHODCALLTYPE UIHierarchyItems__NewEnum_Proxy( 
    UIHierarchyItems * This,
    /* [retval][out] */ IUnknown **ppUnknown);


void __RPC_STUB UIHierarchyItems__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __UIHierarchyItems_INTERFACE_DEFINED__ */


#ifndef __UIHierarchy_INTERFACE_DEFINED__
#define __UIHierarchy_INTERFACE_DEFINED__

/* interface UIHierarchy */
/* [uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_UIHierarchy;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("72a2a2ef-c209-408c-a377-76871774adb7")
    UIHierarchy : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**ppDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Window **ppwin) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_UIHierarchyItems( 
            /* [retval][out] */ UIHierarchyItems **ppUIHierarchyItems) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SelectedItems( 
            /* [retval][out] */ VARIANT *pvarSel) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetItem( 
            /* [in] */ BSTR Names,
            /* [retval][out] */ UIHierarchyItem **ppUIHierarchyItem) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SelectUp( 
            /* [in] */ vsUISelectionType How,
            /* [in] */ long Count) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SelectDown( 
            /* [in] */ vsUISelectionType How,
            /* [in] */ long Count) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE DoDefaultAction( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct UIHierarchyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            UIHierarchy * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            UIHierarchy * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            UIHierarchy * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            UIHierarchy * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            UIHierarchy * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            UIHierarchy * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            UIHierarchy * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            UIHierarchy * This,
            /* [retval][out] */ DTE	**ppDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            UIHierarchy * This,
            /* [retval][out] */ Window **ppwin);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_UIHierarchyItems )( 
            UIHierarchy * This,
            /* [retval][out] */ UIHierarchyItems **ppUIHierarchyItems);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SelectedItems )( 
            UIHierarchy * This,
            /* [retval][out] */ VARIANT *pvarSel);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetItem )( 
            UIHierarchy * This,
            /* [in] */ BSTR Names,
            /* [retval][out] */ UIHierarchyItem **ppUIHierarchyItem);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SelectUp )( 
            UIHierarchy * This,
            /* [in] */ vsUISelectionType How,
            /* [in] */ long Count);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SelectDown )( 
            UIHierarchy * This,
            /* [in] */ vsUISelectionType How,
            /* [in] */ long Count);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *DoDefaultAction )( 
            UIHierarchy * This);
        
        END_INTERFACE
    } UIHierarchyVtbl;

    interface UIHierarchy
    {
        CONST_VTBL struct UIHierarchyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define UIHierarchy_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define UIHierarchy_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define UIHierarchy_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define UIHierarchy_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define UIHierarchy_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define UIHierarchy_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define UIHierarchy_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define UIHierarchy_get_DTE(This,ppDTE)	\
    (This)->lpVtbl -> get_DTE(This,ppDTE)

#define UIHierarchy_get_Parent(This,ppwin)	\
    (This)->lpVtbl -> get_Parent(This,ppwin)

#define UIHierarchy_get_UIHierarchyItems(This,ppUIHierarchyItems)	\
    (This)->lpVtbl -> get_UIHierarchyItems(This,ppUIHierarchyItems)

#define UIHierarchy_get_SelectedItems(This,pvarSel)	\
    (This)->lpVtbl -> get_SelectedItems(This,pvarSel)

#define UIHierarchy_GetItem(This,Names,ppUIHierarchyItem)	\
    (This)->lpVtbl -> GetItem(This,Names,ppUIHierarchyItem)

#define UIHierarchy_SelectUp(This,How,Count)	\
    (This)->lpVtbl -> SelectUp(This,How,Count)

#define UIHierarchy_SelectDown(This,How,Count)	\
    (This)->lpVtbl -> SelectDown(This,How,Count)

#define UIHierarchy_DoDefaultAction(This)	\
    (This)->lpVtbl -> DoDefaultAction(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE UIHierarchy_get_DTE_Proxy( 
    UIHierarchy * This,
    /* [retval][out] */ DTE	**ppDTE);


void __RPC_STUB UIHierarchy_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE UIHierarchy_get_Parent_Proxy( 
    UIHierarchy * This,
    /* [retval][out] */ Window **ppwin);


void __RPC_STUB UIHierarchy_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE UIHierarchy_get_UIHierarchyItems_Proxy( 
    UIHierarchy * This,
    /* [retval][out] */ UIHierarchyItems **ppUIHierarchyItems);


void __RPC_STUB UIHierarchy_get_UIHierarchyItems_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE UIHierarchy_get_SelectedItems_Proxy( 
    UIHierarchy * This,
    /* [retval][out] */ VARIANT *pvarSel);


void __RPC_STUB UIHierarchy_get_SelectedItems_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE UIHierarchy_GetItem_Proxy( 
    UIHierarchy * This,
    /* [in] */ BSTR Names,
    /* [retval][out] */ UIHierarchyItem **ppUIHierarchyItem);


void __RPC_STUB UIHierarchy_GetItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE UIHierarchy_SelectUp_Proxy( 
    UIHierarchy * This,
    /* [in] */ vsUISelectionType How,
    /* [in] */ long Count);


void __RPC_STUB UIHierarchy_SelectUp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE UIHierarchy_SelectDown_Proxy( 
    UIHierarchy * This,
    /* [in] */ vsUISelectionType How,
    /* [in] */ long Count);


void __RPC_STUB UIHierarchy_SelectDown_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE UIHierarchy_DoDefaultAction_Proxy( 
    UIHierarchy * This);


void __RPC_STUB UIHierarchy_DoDefaultAction_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __UIHierarchy_INTERFACE_DEFINED__ */


#ifndef __UndoContext_INTERFACE_DEFINED__
#define __UndoContext_INTERFACE_DEFINED__

/* interface UndoContext */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_UndoContext;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("d8dec44d-caf2-4b39-a539-b91ae921ba92")
    UndoContext : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Open( 
            /* [in] */ BSTR Name,
            /* [defaultvalue][in] */ VARIANT_BOOL Strict = 0) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Close( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetAborted( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsStrict( 
            /* [retval][out] */ VARIANT_BOOL *pIsStrict) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsAborted( 
            /* [retval][out] */ VARIANT_BOOL *pIsAborted) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsOpen( 
            /* [retval][out] */ VARIANT_BOOL *pIsOpen) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct UndoContextVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            UndoContext * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            UndoContext * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            UndoContext * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            UndoContext * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            UndoContext * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            UndoContext * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            UndoContext * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            UndoContext * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            UndoContext * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Open )( 
            UndoContext * This,
            /* [in] */ BSTR Name,
            /* [defaultvalue][in] */ VARIANT_BOOL Strict);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Close )( 
            UndoContext * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetAborted )( 
            UndoContext * This);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsStrict )( 
            UndoContext * This,
            /* [retval][out] */ VARIANT_BOOL *pIsStrict);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsAborted )( 
            UndoContext * This,
            /* [retval][out] */ VARIANT_BOOL *pIsAborted);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsOpen )( 
            UndoContext * This,
            /* [retval][out] */ VARIANT_BOOL *pIsOpen);
        
        END_INTERFACE
    } UndoContextVtbl;

    interface UndoContext
    {
        CONST_VTBL struct UndoContextVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define UndoContext_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define UndoContext_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define UndoContext_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define UndoContext_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define UndoContext_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define UndoContext_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define UndoContext_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define UndoContext_get_DTE(This,DTEObject)	\
    (This)->lpVtbl -> get_DTE(This,DTEObject)

#define UndoContext_get_Parent(This,DTEObject)	\
    (This)->lpVtbl -> get_Parent(This,DTEObject)

#define UndoContext_Open(This,Name,Strict)	\
    (This)->lpVtbl -> Open(This,Name,Strict)

#define UndoContext_Close(This)	\
    (This)->lpVtbl -> Close(This)

#define UndoContext_SetAborted(This)	\
    (This)->lpVtbl -> SetAborted(This)

#define UndoContext_get_IsStrict(This,pIsStrict)	\
    (This)->lpVtbl -> get_IsStrict(This,pIsStrict)

#define UndoContext_get_IsAborted(This,pIsAborted)	\
    (This)->lpVtbl -> get_IsAborted(This,pIsAborted)

#define UndoContext_get_IsOpen(This,pIsOpen)	\
    (This)->lpVtbl -> get_IsOpen(This,pIsOpen)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE UndoContext_get_DTE_Proxy( 
    UndoContext * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB UndoContext_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE UndoContext_get_Parent_Proxy( 
    UndoContext * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB UndoContext_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE UndoContext_Open_Proxy( 
    UndoContext * This,
    /* [in] */ BSTR Name,
    /* [defaultvalue][in] */ VARIANT_BOOL Strict);


void __RPC_STUB UndoContext_Open_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE UndoContext_Close_Proxy( 
    UndoContext * This);


void __RPC_STUB UndoContext_Close_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE UndoContext_SetAborted_Proxy( 
    UndoContext * This);


void __RPC_STUB UndoContext_SetAborted_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE UndoContext_get_IsStrict_Proxy( 
    UndoContext * This,
    /* [retval][out] */ VARIANT_BOOL *pIsStrict);


void __RPC_STUB UndoContext_get_IsStrict_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE UndoContext_get_IsAborted_Proxy( 
    UndoContext * This,
    /* [retval][out] */ VARIANT_BOOL *pIsAborted);


void __RPC_STUB UndoContext_get_IsAborted_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE UndoContext_get_IsOpen_Proxy( 
    UndoContext * This,
    /* [retval][out] */ VARIANT_BOOL *pIsOpen);


void __RPC_STUB UndoContext_get_IsOpen_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __UndoContext_INTERFACE_DEFINED__ */


#ifndef __Configuration_INTERFACE_DEFINED__
#define __Configuration_INTERFACE_DEFINED__

/* interface Configuration */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_Configuration;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("90813589-fe21-4aa4-a2e5-053fd274e980")
    Configuration : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**ppDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ ConfigurationManager **ppConfigurationManager) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ConfigurationName( 
            /* [retval][out] */ BSTR *pName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PlatformName( 
            /* [retval][out] */ BSTR *pName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ vsConfigurationType *pType) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Owner( 
            /* [retval][out] */ IDispatch **ppOwner) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Properties( 
            /* [retval][out] */ Properties **ppProperties) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsBuildable( 
            /* [retval][out] */ VARIANT_BOOL *pBuildable) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsRunable( 
            /* [retval][out] */ VARIANT_BOOL *pRunable) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsDeployable( 
            /* [retval][out] */ VARIANT_BOOL *pDeployable) = 0;
        
        virtual /* [propget][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE get_Object( 
            /* [retval][out] */ IDispatch **ppDisp) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_Extender( 
            /* [in] */ BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderNames( 
            /* [retval][out] */ VARIANT *ExtenderNames) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderCATID( 
            /* [retval][out] */ BSTR *pRetval) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_OutputGroups( 
            /* [retval][out] */ OutputGroups **ppOutputGroups) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ConfigurationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Configuration * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Configuration * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Configuration * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Configuration * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Configuration * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Configuration * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Configuration * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Configuration * This,
            /* [retval][out] */ DTE	**ppDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            Configuration * This,
            /* [retval][out] */ ConfigurationManager **ppConfigurationManager);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ConfigurationName )( 
            Configuration * This,
            /* [retval][out] */ BSTR *pName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlatformName )( 
            Configuration * This,
            /* [retval][out] */ BSTR *pName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            Configuration * This,
            /* [retval][out] */ vsConfigurationType *pType);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Owner )( 
            Configuration * This,
            /* [retval][out] */ IDispatch **ppOwner);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            Configuration * This,
            /* [retval][out] */ Properties **ppProperties);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsBuildable )( 
            Configuration * This,
            /* [retval][out] */ VARIANT_BOOL *pBuildable);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsRunable )( 
            Configuration * This,
            /* [retval][out] */ VARIANT_BOOL *pRunable);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDeployable )( 
            Configuration * This,
            /* [retval][out] */ VARIANT_BOOL *pDeployable);
        
        /* [propget][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *get_Object )( 
            Configuration * This,
            /* [retval][out] */ IDispatch **ppDisp);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Extender )( 
            Configuration * This,
            /* [in] */ BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderNames )( 
            Configuration * This,
            /* [retval][out] */ VARIANT *ExtenderNames);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderCATID )( 
            Configuration * This,
            /* [retval][out] */ BSTR *pRetval);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_OutputGroups )( 
            Configuration * This,
            /* [retval][out] */ OutputGroups **ppOutputGroups);
        
        END_INTERFACE
    } ConfigurationVtbl;

    interface Configuration
    {
        CONST_VTBL struct ConfigurationVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Configuration_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Configuration_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Configuration_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Configuration_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Configuration_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Configuration_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Configuration_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Configuration_get_DTE(This,ppDTE)	\
    (This)->lpVtbl -> get_DTE(This,ppDTE)

#define Configuration_get_Collection(This,ppConfigurationManager)	\
    (This)->lpVtbl -> get_Collection(This,ppConfigurationManager)

#define Configuration_get_ConfigurationName(This,pName)	\
    (This)->lpVtbl -> get_ConfigurationName(This,pName)

#define Configuration_get_PlatformName(This,pName)	\
    (This)->lpVtbl -> get_PlatformName(This,pName)

#define Configuration_get_Type(This,pType)	\
    (This)->lpVtbl -> get_Type(This,pType)

#define Configuration_get_Owner(This,ppOwner)	\
    (This)->lpVtbl -> get_Owner(This,ppOwner)

#define Configuration_get_Properties(This,ppProperties)	\
    (This)->lpVtbl -> get_Properties(This,ppProperties)

#define Configuration_get_IsBuildable(This,pBuildable)	\
    (This)->lpVtbl -> get_IsBuildable(This,pBuildable)

#define Configuration_get_IsRunable(This,pRunable)	\
    (This)->lpVtbl -> get_IsRunable(This,pRunable)

#define Configuration_get_IsDeployable(This,pDeployable)	\
    (This)->lpVtbl -> get_IsDeployable(This,pDeployable)

#define Configuration_get_Object(This,ppDisp)	\
    (This)->lpVtbl -> get_Object(This,ppDisp)

#define Configuration_get_Extender(This,ExtenderName,Extender)	\
    (This)->lpVtbl -> get_Extender(This,ExtenderName,Extender)

#define Configuration_get_ExtenderNames(This,ExtenderNames)	\
    (This)->lpVtbl -> get_ExtenderNames(This,ExtenderNames)

#define Configuration_get_ExtenderCATID(This,pRetval)	\
    (This)->lpVtbl -> get_ExtenderCATID(This,pRetval)

#define Configuration_get_OutputGroups(This,ppOutputGroups)	\
    (This)->lpVtbl -> get_OutputGroups(This,ppOutputGroups)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Configuration_get_DTE_Proxy( 
    Configuration * This,
    /* [retval][out] */ DTE	**ppDTE);


void __RPC_STUB Configuration_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Configuration_get_Collection_Proxy( 
    Configuration * This,
    /* [retval][out] */ ConfigurationManager **ppConfigurationManager);


void __RPC_STUB Configuration_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Configuration_get_ConfigurationName_Proxy( 
    Configuration * This,
    /* [retval][out] */ BSTR *pName);


void __RPC_STUB Configuration_get_ConfigurationName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Configuration_get_PlatformName_Proxy( 
    Configuration * This,
    /* [retval][out] */ BSTR *pName);


void __RPC_STUB Configuration_get_PlatformName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Configuration_get_Type_Proxy( 
    Configuration * This,
    /* [retval][out] */ vsConfigurationType *pType);


void __RPC_STUB Configuration_get_Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Configuration_get_Owner_Proxy( 
    Configuration * This,
    /* [retval][out] */ IDispatch **ppOwner);


void __RPC_STUB Configuration_get_Owner_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Configuration_get_Properties_Proxy( 
    Configuration * This,
    /* [retval][out] */ Properties **ppProperties);


void __RPC_STUB Configuration_get_Properties_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Configuration_get_IsBuildable_Proxy( 
    Configuration * This,
    /* [retval][out] */ VARIANT_BOOL *pBuildable);


void __RPC_STUB Configuration_get_IsBuildable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Configuration_get_IsRunable_Proxy( 
    Configuration * This,
    /* [retval][out] */ VARIANT_BOOL *pRunable);


void __RPC_STUB Configuration_get_IsRunable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Configuration_get_IsDeployable_Proxy( 
    Configuration * This,
    /* [retval][out] */ VARIANT_BOOL *pDeployable);


void __RPC_STUB Configuration_get_IsDeployable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Configuration_get_Object_Proxy( 
    Configuration * This,
    /* [retval][out] */ IDispatch **ppDisp);


void __RPC_STUB Configuration_get_Object_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE Configuration_get_Extender_Proxy( 
    Configuration * This,
    /* [in] */ BSTR ExtenderName,
    /* [retval][out] */ IDispatch **Extender);


void __RPC_STUB Configuration_get_Extender_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE Configuration_get_ExtenderNames_Proxy( 
    Configuration * This,
    /* [retval][out] */ VARIANT *ExtenderNames);


void __RPC_STUB Configuration_get_ExtenderNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE Configuration_get_ExtenderCATID_Proxy( 
    Configuration * This,
    /* [retval][out] */ BSTR *pRetval);


void __RPC_STUB Configuration_get_ExtenderCATID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Configuration_get_OutputGroups_Proxy( 
    Configuration * This,
    /* [retval][out] */ OutputGroups **ppOutputGroups);


void __RPC_STUB Configuration_get_OutputGroups_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Configuration_INTERFACE_DEFINED__ */


#ifndef __SolutionContexts_INTERFACE_DEFINED__
#define __SolutionContexts_INTERFACE_DEFINED__

/* interface SolutionContexts */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_SolutionContexts;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0685b546-fb84-4917-ab98-98d40f892d61")
    SolutionContexts : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**ppDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ SolutionConfiguration **ppSolutionConfiguration) = 0;
        
        virtual /* [id][restricted] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **Enumerator) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ SolutionContext **ppOut) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *pCount) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SolutionContextsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            SolutionContexts * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            SolutionContexts * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            SolutionContexts * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            SolutionContexts * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            SolutionContexts * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            SolutionContexts * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            SolutionContexts * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            SolutionContexts * This,
            /* [retval][out] */ DTE	**ppDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            SolutionContexts * This,
            /* [retval][out] */ SolutionConfiguration **ppSolutionConfiguration);
        
        /* [id][restricted] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            SolutionContexts * This,
            /* [retval][out] */ IUnknown **Enumerator);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            SolutionContexts * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ SolutionContext **ppOut);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            SolutionContexts * This,
            /* [retval][out] */ long *pCount);
        
        END_INTERFACE
    } SolutionContextsVtbl;

    interface SolutionContexts
    {
        CONST_VTBL struct SolutionContextsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define SolutionContexts_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define SolutionContexts_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define SolutionContexts_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define SolutionContexts_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define SolutionContexts_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define SolutionContexts_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define SolutionContexts_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define SolutionContexts_get_DTE(This,ppDTE)	\
    (This)->lpVtbl -> get_DTE(This,ppDTE)

#define SolutionContexts_get_Parent(This,ppSolutionConfiguration)	\
    (This)->lpVtbl -> get_Parent(This,ppSolutionConfiguration)

#define SolutionContexts__NewEnum(This,Enumerator)	\
    (This)->lpVtbl -> _NewEnum(This,Enumerator)

#define SolutionContexts_Item(This,Index,ppOut)	\
    (This)->lpVtbl -> Item(This,Index,ppOut)

#define SolutionContexts_get_Count(This,pCount)	\
    (This)->lpVtbl -> get_Count(This,pCount)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SolutionContexts_get_DTE_Proxy( 
    SolutionContexts * This,
    /* [retval][out] */ DTE	**ppDTE);


void __RPC_STUB SolutionContexts_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SolutionContexts_get_Parent_Proxy( 
    SolutionContexts * This,
    /* [retval][out] */ SolutionConfiguration **ppSolutionConfiguration);


void __RPC_STUB SolutionContexts_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][restricted] */ HRESULT STDMETHODCALLTYPE SolutionContexts__NewEnum_Proxy( 
    SolutionContexts * This,
    /* [retval][out] */ IUnknown **Enumerator);


void __RPC_STUB SolutionContexts__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SolutionContexts_Item_Proxy( 
    SolutionContexts * This,
    /* [in] */ VARIANT Index,
    /* [retval][out] */ SolutionContext **ppOut);


void __RPC_STUB SolutionContexts_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SolutionContexts_get_Count_Proxy( 
    SolutionContexts * This,
    /* [retval][out] */ long *pCount);


void __RPC_STUB SolutionContexts_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __SolutionContexts_INTERFACE_DEFINED__ */


#ifndef __Configurations_INTERFACE_DEFINED__
#define __Configurations_INTERFACE_DEFINED__

/* interface Configurations */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_Configurations;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b6b4c8d6-4d27-43b9-b45c-52bd16b6ba38")
    Configurations : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**ppDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **ppParent) = 0;
        
        virtual /* [id][restricted] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **Enumerator) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Configuration **ppOut) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *pCount) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ vsConfigurationType *pType) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ConfigurationsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Configurations * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Configurations * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Configurations * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Configurations * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Configurations * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Configurations * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Configurations * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Configurations * This,
            /* [retval][out] */ DTE	**ppDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Configurations * This,
            /* [retval][out] */ IDispatch **ppParent);
        
        /* [id][restricted] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            Configurations * This,
            /* [retval][out] */ IUnknown **Enumerator);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            Configurations * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ Configuration **ppOut);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            Configurations * This,
            /* [retval][out] */ long *pCount);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            Configurations * This,
            /* [retval][out] */ BSTR *pName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            Configurations * This,
            /* [retval][out] */ vsConfigurationType *pType);
        
        END_INTERFACE
    } ConfigurationsVtbl;

    interface Configurations
    {
        CONST_VTBL struct ConfigurationsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Configurations_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Configurations_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Configurations_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Configurations_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Configurations_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Configurations_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Configurations_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Configurations_get_DTE(This,ppDTE)	\
    (This)->lpVtbl -> get_DTE(This,ppDTE)

#define Configurations_get_Parent(This,ppParent)	\
    (This)->lpVtbl -> get_Parent(This,ppParent)

#define Configurations__NewEnum(This,Enumerator)	\
    (This)->lpVtbl -> _NewEnum(This,Enumerator)

#define Configurations_Item(This,Index,ppOut)	\
    (This)->lpVtbl -> Item(This,Index,ppOut)

#define Configurations_get_Count(This,pCount)	\
    (This)->lpVtbl -> get_Count(This,pCount)

#define Configurations_get_Name(This,pName)	\
    (This)->lpVtbl -> get_Name(This,pName)

#define Configurations_get_Type(This,pType)	\
    (This)->lpVtbl -> get_Type(This,pType)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Configurations_get_DTE_Proxy( 
    Configurations * This,
    /* [retval][out] */ DTE	**ppDTE);


void __RPC_STUB Configurations_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Configurations_get_Parent_Proxy( 
    Configurations * This,
    /* [retval][out] */ IDispatch **ppParent);


void __RPC_STUB Configurations_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][restricted] */ HRESULT STDMETHODCALLTYPE Configurations__NewEnum_Proxy( 
    Configurations * This,
    /* [retval][out] */ IUnknown **Enumerator);


void __RPC_STUB Configurations__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Configurations_Item_Proxy( 
    Configurations * This,
    /* [in] */ VARIANT Index,
    /* [retval][out] */ Configuration **ppOut);


void __RPC_STUB Configurations_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Configurations_get_Count_Proxy( 
    Configurations * This,
    /* [retval][out] */ long *pCount);


void __RPC_STUB Configurations_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Configurations_get_Name_Proxy( 
    Configurations * This,
    /* [retval][out] */ BSTR *pName);


void __RPC_STUB Configurations_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Configurations_get_Type_Proxy( 
    Configurations * This,
    /* [retval][out] */ vsConfigurationType *pType);


void __RPC_STUB Configurations_get_Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Configurations_INTERFACE_DEFINED__ */


#ifndef __ConfigurationManager_INTERFACE_DEFINED__
#define __ConfigurationManager_INTERFACE_DEFINED__

/* interface ConfigurationManager */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_ConfigurationManager;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9043fda1-345b-4364-900f-bc8598eb8e4f")
    ConfigurationManager : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**ppDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **ppParent) = 0;
        
        virtual /* [id][restricted] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **Enumerator) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [defaultvalue] */ BSTR Platform,
            /* [retval][out] */ Configuration **ppOut) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *pCount) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConfigurationRow( 
            BSTR Name,
            /* [retval][out] */ Configurations **ppOut) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddConfigurationRow( 
            BSTR NewName,
            BSTR ExistingName,
            /* [in] */ VARIANT_BOOL Propagate,
            /* [retval][out] */ Configurations **ppOut) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE DeleteConfigurationRow( 
            BSTR Name) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ConfigurationRowNames( 
            /* [retval][out] */ VARIANT *pNames) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Platform( 
            BSTR Name,
            /* [retval][out] */ Configurations **ppOut) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddPlatform( 
            BSTR NewName,
            BSTR ExistingName,
            /* [in] */ VARIANT_BOOL Propagate,
            /* [retval][out] */ Configurations **ppOut) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE DeletePlatform( 
            BSTR Name) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_PlatformNames( 
            /* [retval][out] */ VARIANT *pNames) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_SupportedPlatforms( 
            /* [retval][out] */ VARIANT *pPlatforms) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActiveConfiguration( 
            /* [retval][out] */ Configuration **ppOut) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ConfigurationManagerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ConfigurationManager * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ConfigurationManager * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ConfigurationManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ConfigurationManager * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ConfigurationManager * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ConfigurationManager * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ConfigurationManager * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            ConfigurationManager * This,
            /* [retval][out] */ DTE	**ppDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ConfigurationManager * This,
            /* [retval][out] */ IDispatch **ppParent);
        
        /* [id][restricted] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            ConfigurationManager * This,
            /* [retval][out] */ IUnknown **Enumerator);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            ConfigurationManager * This,
            /* [in] */ VARIANT Index,
            /* [defaultvalue] */ BSTR Platform,
            /* [retval][out] */ Configuration **ppOut);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            ConfigurationManager * This,
            /* [retval][out] */ long *pCount);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ConfigurationRow )( 
            ConfigurationManager * This,
            BSTR Name,
            /* [retval][out] */ Configurations **ppOut);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddConfigurationRow )( 
            ConfigurationManager * This,
            BSTR NewName,
            BSTR ExistingName,
            /* [in] */ VARIANT_BOOL Propagate,
            /* [retval][out] */ Configurations **ppOut);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteConfigurationRow )( 
            ConfigurationManager * This,
            BSTR Name);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ConfigurationRowNames )( 
            ConfigurationManager * This,
            /* [retval][out] */ VARIANT *pNames);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Platform )( 
            ConfigurationManager * This,
            BSTR Name,
            /* [retval][out] */ Configurations **ppOut);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddPlatform )( 
            ConfigurationManager * This,
            BSTR NewName,
            BSTR ExistingName,
            /* [in] */ VARIANT_BOOL Propagate,
            /* [retval][out] */ Configurations **ppOut);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DeletePlatform )( 
            ConfigurationManager * This,
            BSTR Name);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_PlatformNames )( 
            ConfigurationManager * This,
            /* [retval][out] */ VARIANT *pNames);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_SupportedPlatforms )( 
            ConfigurationManager * This,
            /* [retval][out] */ VARIANT *pPlatforms);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActiveConfiguration )( 
            ConfigurationManager * This,
            /* [retval][out] */ Configuration **ppOut);
        
        END_INTERFACE
    } ConfigurationManagerVtbl;

    interface ConfigurationManager
    {
        CONST_VTBL struct ConfigurationManagerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ConfigurationManager_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ConfigurationManager_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ConfigurationManager_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ConfigurationManager_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ConfigurationManager_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ConfigurationManager_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ConfigurationManager_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define ConfigurationManager_get_DTE(This,ppDTE)	\
    (This)->lpVtbl -> get_DTE(This,ppDTE)

#define ConfigurationManager_get_Parent(This,ppParent)	\
    (This)->lpVtbl -> get_Parent(This,ppParent)

#define ConfigurationManager__NewEnum(This,Enumerator)	\
    (This)->lpVtbl -> _NewEnum(This,Enumerator)

#define ConfigurationManager_Item(This,Index,Platform,ppOut)	\
    (This)->lpVtbl -> Item(This,Index,Platform,ppOut)

#define ConfigurationManager_get_Count(This,pCount)	\
    (This)->lpVtbl -> get_Count(This,pCount)

#define ConfigurationManager_ConfigurationRow(This,Name,ppOut)	\
    (This)->lpVtbl -> ConfigurationRow(This,Name,ppOut)

#define ConfigurationManager_AddConfigurationRow(This,NewName,ExistingName,Propagate,ppOut)	\
    (This)->lpVtbl -> AddConfigurationRow(This,NewName,ExistingName,Propagate,ppOut)

#define ConfigurationManager_DeleteConfigurationRow(This,Name)	\
    (This)->lpVtbl -> DeleteConfigurationRow(This,Name)

#define ConfigurationManager_get_ConfigurationRowNames(This,pNames)	\
    (This)->lpVtbl -> get_ConfigurationRowNames(This,pNames)

#define ConfigurationManager_Platform(This,Name,ppOut)	\
    (This)->lpVtbl -> Platform(This,Name,ppOut)

#define ConfigurationManager_AddPlatform(This,NewName,ExistingName,Propagate,ppOut)	\
    (This)->lpVtbl -> AddPlatform(This,NewName,ExistingName,Propagate,ppOut)

#define ConfigurationManager_DeletePlatform(This,Name)	\
    (This)->lpVtbl -> DeletePlatform(This,Name)

#define ConfigurationManager_get_PlatformNames(This,pNames)	\
    (This)->lpVtbl -> get_PlatformNames(This,pNames)

#define ConfigurationManager_get_SupportedPlatforms(This,pPlatforms)	\
    (This)->lpVtbl -> get_SupportedPlatforms(This,pPlatforms)

#define ConfigurationManager_get_ActiveConfiguration(This,ppOut)	\
    (This)->lpVtbl -> get_ActiveConfiguration(This,ppOut)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ConfigurationManager_get_DTE_Proxy( 
    ConfigurationManager * This,
    /* [retval][out] */ DTE	**ppDTE);


void __RPC_STUB ConfigurationManager_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ConfigurationManager_get_Parent_Proxy( 
    ConfigurationManager * This,
    /* [retval][out] */ IDispatch **ppParent);


void __RPC_STUB ConfigurationManager_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][restricted] */ HRESULT STDMETHODCALLTYPE ConfigurationManager__NewEnum_Proxy( 
    ConfigurationManager * This,
    /* [retval][out] */ IUnknown **Enumerator);


void __RPC_STUB ConfigurationManager__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConfigurationManager_Item_Proxy( 
    ConfigurationManager * This,
    /* [in] */ VARIANT Index,
    /* [defaultvalue] */ BSTR Platform,
    /* [retval][out] */ Configuration **ppOut);


void __RPC_STUB ConfigurationManager_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ConfigurationManager_get_Count_Proxy( 
    ConfigurationManager * This,
    /* [retval][out] */ long *pCount);


void __RPC_STUB ConfigurationManager_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConfigurationManager_ConfigurationRow_Proxy( 
    ConfigurationManager * This,
    BSTR Name,
    /* [retval][out] */ Configurations **ppOut);


void __RPC_STUB ConfigurationManager_ConfigurationRow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConfigurationManager_AddConfigurationRow_Proxy( 
    ConfigurationManager * This,
    BSTR NewName,
    BSTR ExistingName,
    /* [in] */ VARIANT_BOOL Propagate,
    /* [retval][out] */ Configurations **ppOut);


void __RPC_STUB ConfigurationManager_AddConfigurationRow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConfigurationManager_DeleteConfigurationRow_Proxy( 
    ConfigurationManager * This,
    BSTR Name);


void __RPC_STUB ConfigurationManager_DeleteConfigurationRow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ConfigurationManager_get_ConfigurationRowNames_Proxy( 
    ConfigurationManager * This,
    /* [retval][out] */ VARIANT *pNames);


void __RPC_STUB ConfigurationManager_get_ConfigurationRowNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConfigurationManager_Platform_Proxy( 
    ConfigurationManager * This,
    BSTR Name,
    /* [retval][out] */ Configurations **ppOut);


void __RPC_STUB ConfigurationManager_Platform_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConfigurationManager_AddPlatform_Proxy( 
    ConfigurationManager * This,
    BSTR NewName,
    BSTR ExistingName,
    /* [in] */ VARIANT_BOOL Propagate,
    /* [retval][out] */ Configurations **ppOut);


void __RPC_STUB ConfigurationManager_AddPlatform_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ConfigurationManager_DeletePlatform_Proxy( 
    ConfigurationManager * This,
    BSTR Name);


void __RPC_STUB ConfigurationManager_DeletePlatform_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ConfigurationManager_get_PlatformNames_Proxy( 
    ConfigurationManager * This,
    /* [retval][out] */ VARIANT *pNames);


void __RPC_STUB ConfigurationManager_get_PlatformNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ConfigurationManager_get_SupportedPlatforms_Proxy( 
    ConfigurationManager * This,
    /* [retval][out] */ VARIANT *pPlatforms);


void __RPC_STUB ConfigurationManager_get_SupportedPlatforms_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ConfigurationManager_get_ActiveConfiguration_Proxy( 
    ConfigurationManager * This,
    /* [retval][out] */ Configuration **ppOut);


void __RPC_STUB ConfigurationManager_get_ActiveConfiguration_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ConfigurationManager_INTERFACE_DEFINED__ */


#ifndef __Macros_INTERFACE_DEFINED__
#define __Macros_INTERFACE_DEFINED__

/* interface Macros */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_Macros;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f9f99155-6d4d-49b1-ad63-c78c3e8a5916")
    Macros : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**pDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ DTE	**pDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsRecording( 
            /* [retval][out] */ VARIANT_BOOL *vbIsRecording) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EmitMacroCode( 
            BSTR Code) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Pause( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Resume( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct MacrosVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            Macros * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            Macros * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            Macros * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            Macros * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            Macros * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            Macros * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            Macros * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            Macros * This,
            /* [retval][out] */ DTE	**pDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            Macros * This,
            /* [retval][out] */ DTE	**pDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsRecording )( 
            Macros * This,
            /* [retval][out] */ VARIANT_BOOL *vbIsRecording);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *EmitMacroCode )( 
            Macros * This,
            BSTR Code);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Pause )( 
            Macros * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Resume )( 
            Macros * This);
        
        END_INTERFACE
    } MacrosVtbl;

    interface Macros
    {
        CONST_VTBL struct MacrosVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define Macros_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define Macros_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define Macros_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define Macros_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define Macros_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define Macros_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define Macros_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define Macros_get_DTE(This,pDTE)	\
    (This)->lpVtbl -> get_DTE(This,pDTE)

#define Macros_get_Parent(This,pDTE)	\
    (This)->lpVtbl -> get_Parent(This,pDTE)

#define Macros_get_IsRecording(This,vbIsRecording)	\
    (This)->lpVtbl -> get_IsRecording(This,vbIsRecording)

#define Macros_EmitMacroCode(This,Code)	\
    (This)->lpVtbl -> EmitMacroCode(This,Code)

#define Macros_Pause(This)	\
    (This)->lpVtbl -> Pause(This)

#define Macros_Resume(This)	\
    (This)->lpVtbl -> Resume(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE Macros_get_DTE_Proxy( 
    Macros * This,
    /* [retval][out] */ DTE	**pDTE);


void __RPC_STUB Macros_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id][propget] */ HRESULT STDMETHODCALLTYPE Macros_get_Parent_Proxy( 
    Macros * This,
    /* [retval][out] */ DTE	**pDTE);


void __RPC_STUB Macros_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE Macros_get_IsRecording_Proxy( 
    Macros * This,
    /* [retval][out] */ VARIANT_BOOL *vbIsRecording);


void __RPC_STUB Macros_get_IsRecording_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Macros_EmitMacroCode_Proxy( 
    Macros * This,
    BSTR Code);


void __RPC_STUB Macros_EmitMacroCode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Macros_Pause_Proxy( 
    Macros * This);


void __RPC_STUB Macros_Pause_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Macros_Resume_Proxy( 
    Macros * This);


void __RPC_STUB Macros_Resume_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __Macros_INTERFACE_DEFINED__ */


#ifndef __OutputGroups_INTERFACE_DEFINED__
#define __OutputGroups_INTERFACE_DEFINED__

/* interface OutputGroups */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_OutputGroups;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f9fa748e-e302-44cf-891b-e263189d585e")
    OutputGroups : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**ppDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Configuration **ppConfiguration) = 0;
        
        virtual /* [id][restricted] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **Enumerator) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ OutputGroup **ppOut) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *pCount) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct OutputGroupsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            OutputGroups * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            OutputGroups * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            OutputGroups * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            OutputGroups * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            OutputGroups * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            OutputGroups * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            OutputGroups * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            OutputGroups * This,
            /* [retval][out] */ DTE	**ppDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            OutputGroups * This,
            /* [retval][out] */ Configuration **ppConfiguration);
        
        /* [id][restricted] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            OutputGroups * This,
            /* [retval][out] */ IUnknown **Enumerator);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            OutputGroups * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ OutputGroup **ppOut);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            OutputGroups * This,
            /* [retval][out] */ long *pCount);
        
        END_INTERFACE
    } OutputGroupsVtbl;

    interface OutputGroups
    {
        CONST_VTBL struct OutputGroupsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define OutputGroups_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define OutputGroups_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define OutputGroups_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define OutputGroups_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define OutputGroups_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define OutputGroups_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define OutputGroups_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define OutputGroups_get_DTE(This,ppDTE)	\
    (This)->lpVtbl -> get_DTE(This,ppDTE)

#define OutputGroups_get_Parent(This,ppConfiguration)	\
    (This)->lpVtbl -> get_Parent(This,ppConfiguration)

#define OutputGroups__NewEnum(This,Enumerator)	\
    (This)->lpVtbl -> _NewEnum(This,Enumerator)

#define OutputGroups_Item(This,Index,ppOut)	\
    (This)->lpVtbl -> Item(This,Index,ppOut)

#define OutputGroups_get_Count(This,pCount)	\
    (This)->lpVtbl -> get_Count(This,pCount)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE OutputGroups_get_DTE_Proxy( 
    OutputGroups * This,
    /* [retval][out] */ DTE	**ppDTE);


void __RPC_STUB OutputGroups_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE OutputGroups_get_Parent_Proxy( 
    OutputGroups * This,
    /* [retval][out] */ Configuration **ppConfiguration);


void __RPC_STUB OutputGroups_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][restricted] */ HRESULT STDMETHODCALLTYPE OutputGroups__NewEnum_Proxy( 
    OutputGroups * This,
    /* [retval][out] */ IUnknown **Enumerator);


void __RPC_STUB OutputGroups__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OutputGroups_Item_Proxy( 
    OutputGroups * This,
    /* [in] */ VARIANT Index,
    /* [retval][out] */ OutputGroup **ppOut);


void __RPC_STUB OutputGroups_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE OutputGroups_get_Count_Proxy( 
    OutputGroups * This,
    /* [retval][out] */ long *pCount);


void __RPC_STUB OutputGroups_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __OutputGroups_INTERFACE_DEFINED__ */


#ifndef __OutputGroup_INTERFACE_DEFINED__
#define __OutputGroup_INTERFACE_DEFINED__

/* interface OutputGroup */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_OutputGroup;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a3a80783-875f-435b-9639-e5ce888df737")
    OutputGroup : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**ppDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ OutputGroups **ppOutputGroups) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FileNames( 
            /* [retval][out] */ VARIANT *pNames) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FileCount( 
            /* [retval][out] */ long *pCountNames) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisplayName( 
            /* [retval][out] */ BSTR *pName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CanonicalName( 
            /* [retval][out] */ BSTR *pName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FileURLs( 
            /* [retval][out] */ VARIANT *pURLs) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Description( 
            /* [retval][out] */ BSTR *pDesc) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct OutputGroupVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            OutputGroup * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            OutputGroup * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            OutputGroup * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            OutputGroup * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            OutputGroup * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            OutputGroup * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            OutputGroup * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            OutputGroup * This,
            /* [retval][out] */ DTE	**ppDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            OutputGroup * This,
            /* [retval][out] */ OutputGroups **ppOutputGroups);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FileNames )( 
            OutputGroup * This,
            /* [retval][out] */ VARIANT *pNames);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FileCount )( 
            OutputGroup * This,
            /* [retval][out] */ long *pCountNames);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayName )( 
            OutputGroup * This,
            /* [retval][out] */ BSTR *pName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CanonicalName )( 
            OutputGroup * This,
            /* [retval][out] */ BSTR *pName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FileURLs )( 
            OutputGroup * This,
            /* [retval][out] */ VARIANT *pURLs);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Description )( 
            OutputGroup * This,
            /* [retval][out] */ BSTR *pDesc);
        
        END_INTERFACE
    } OutputGroupVtbl;

    interface OutputGroup
    {
        CONST_VTBL struct OutputGroupVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define OutputGroup_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define OutputGroup_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define OutputGroup_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define OutputGroup_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define OutputGroup_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define OutputGroup_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define OutputGroup_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define OutputGroup_get_DTE(This,ppDTE)	\
    (This)->lpVtbl -> get_DTE(This,ppDTE)

#define OutputGroup_get_Collection(This,ppOutputGroups)	\
    (This)->lpVtbl -> get_Collection(This,ppOutputGroups)

#define OutputGroup_get_FileNames(This,pNames)	\
    (This)->lpVtbl -> get_FileNames(This,pNames)

#define OutputGroup_get_FileCount(This,pCountNames)	\
    (This)->lpVtbl -> get_FileCount(This,pCountNames)

#define OutputGroup_get_DisplayName(This,pName)	\
    (This)->lpVtbl -> get_DisplayName(This,pName)

#define OutputGroup_get_CanonicalName(This,pName)	\
    (This)->lpVtbl -> get_CanonicalName(This,pName)

#define OutputGroup_get_FileURLs(This,pURLs)	\
    (This)->lpVtbl -> get_FileURLs(This,pURLs)

#define OutputGroup_get_Description(This,pDesc)	\
    (This)->lpVtbl -> get_Description(This,pDesc)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE OutputGroup_get_DTE_Proxy( 
    OutputGroup * This,
    /* [retval][out] */ DTE	**ppDTE);


void __RPC_STUB OutputGroup_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE OutputGroup_get_Collection_Proxy( 
    OutputGroup * This,
    /* [retval][out] */ OutputGroups **ppOutputGroups);


void __RPC_STUB OutputGroup_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE OutputGroup_get_FileNames_Proxy( 
    OutputGroup * This,
    /* [retval][out] */ VARIANT *pNames);


void __RPC_STUB OutputGroup_get_FileNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE OutputGroup_get_FileCount_Proxy( 
    OutputGroup * This,
    /* [retval][out] */ long *pCountNames);


void __RPC_STUB OutputGroup_get_FileCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE OutputGroup_get_DisplayName_Proxy( 
    OutputGroup * This,
    /* [retval][out] */ BSTR *pName);


void __RPC_STUB OutputGroup_get_DisplayName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE OutputGroup_get_CanonicalName_Proxy( 
    OutputGroup * This,
    /* [retval][out] */ BSTR *pName);


void __RPC_STUB OutputGroup_get_CanonicalName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE OutputGroup_get_FileURLs_Proxy( 
    OutputGroup * This,
    /* [retval][out] */ VARIANT *pURLs);


void __RPC_STUB OutputGroup_get_FileURLs_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE OutputGroup_get_Description_Proxy( 
    OutputGroup * This,
    /* [retval][out] */ BSTR *pDesc);


void __RPC_STUB OutputGroup_get_Description_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __OutputGroup_INTERFACE_DEFINED__ */


#ifndef __ContextAttributes_INTERFACE_DEFINED__
#define __ContextAttributes_INTERFACE_DEFINED__

/* interface ContextAttributes */
/* [uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_ContextAttributes;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("33c5ebb8-244e-449d-9cee-fad70a774e59")
    ContextAttributes : public IDispatch
    {
    public:
        virtual /* [restricted][id] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **lppiuReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            VARIANT Index,
            /* [retval][out] */ ContextAttribute **ppVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *Count) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Add( 
            BSTR AttributeName,
            BSTR AttributeValue,
            vsContextAttributeType Type,
            /* [retval][out] */ ContextAttribute **ppVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ vsContextAttributes *Type) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_HighPriorityAttributes( 
            /* [retval][out] */ ContextAttributes **ppVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Refresh( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ContextAttributesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ContextAttributes * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ContextAttributes * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ContextAttributes * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ContextAttributes * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ContextAttributes * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ContextAttributes * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ContextAttributes * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            ContextAttributes * This,
            /* [retval][out] */ IUnknown **lppiuReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            ContextAttributes * This,
            VARIANT Index,
            /* [retval][out] */ ContextAttribute **ppVal);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            ContextAttributes * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            ContextAttributes * This,
            /* [retval][out] */ IDispatch **lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            ContextAttributes * This,
            /* [retval][out] */ long *Count);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Add )( 
            ContextAttributes * This,
            BSTR AttributeName,
            BSTR AttributeValue,
            vsContextAttributeType Type,
            /* [retval][out] */ ContextAttribute **ppVal);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            ContextAttributes * This,
            /* [retval][out] */ vsContextAttributes *Type);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_HighPriorityAttributes )( 
            ContextAttributes * This,
            /* [retval][out] */ ContextAttributes **ppVal);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Refresh )( 
            ContextAttributes * This);
        
        END_INTERFACE
    } ContextAttributesVtbl;

    interface ContextAttributes
    {
        CONST_VTBL struct ContextAttributesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ContextAttributes_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ContextAttributes_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ContextAttributes_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ContextAttributes_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ContextAttributes_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ContextAttributes_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ContextAttributes_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define ContextAttributes__NewEnum(This,lppiuReturn)	\
    (This)->lpVtbl -> _NewEnum(This,lppiuReturn)

#define ContextAttributes_Item(This,Index,ppVal)	\
    (This)->lpVtbl -> Item(This,Index,ppVal)

#define ContextAttributes_get_DTE(This,lppaReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppaReturn)

#define ContextAttributes_get_Parent(This,lppaReturn)	\
    (This)->lpVtbl -> get_Parent(This,lppaReturn)

#define ContextAttributes_get_Count(This,Count)	\
    (This)->lpVtbl -> get_Count(This,Count)

#define ContextAttributes_Add(This,AttributeName,AttributeValue,Type,ppVal)	\
    (This)->lpVtbl -> Add(This,AttributeName,AttributeValue,Type,ppVal)

#define ContextAttributes_get_Type(This,Type)	\
    (This)->lpVtbl -> get_Type(This,Type)

#define ContextAttributes_get_HighPriorityAttributes(This,ppVal)	\
    (This)->lpVtbl -> get_HighPriorityAttributes(This,ppVal)

#define ContextAttributes_Refresh(This)	\
    (This)->lpVtbl -> Refresh(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [restricted][id] */ HRESULT STDMETHODCALLTYPE ContextAttributes__NewEnum_Proxy( 
    ContextAttributes * This,
    /* [retval][out] */ IUnknown **lppiuReturn);


void __RPC_STUB ContextAttributes__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ContextAttributes_Item_Proxy( 
    ContextAttributes * This,
    VARIANT Index,
    /* [retval][out] */ ContextAttribute **ppVal);


void __RPC_STUB ContextAttributes_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ContextAttributes_get_DTE_Proxy( 
    ContextAttributes * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB ContextAttributes_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ContextAttributes_get_Parent_Proxy( 
    ContextAttributes * This,
    /* [retval][out] */ IDispatch **lppaReturn);


void __RPC_STUB ContextAttributes_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ContextAttributes_get_Count_Proxy( 
    ContextAttributes * This,
    /* [retval][out] */ long *Count);


void __RPC_STUB ContextAttributes_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ContextAttributes_Add_Proxy( 
    ContextAttributes * This,
    BSTR AttributeName,
    BSTR AttributeValue,
    vsContextAttributeType Type,
    /* [retval][out] */ ContextAttribute **ppVal);


void __RPC_STUB ContextAttributes_Add_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ContextAttributes_get_Type_Proxy( 
    ContextAttributes * This,
    /* [retval][out] */ vsContextAttributes *Type);


void __RPC_STUB ContextAttributes_get_Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE ContextAttributes_get_HighPriorityAttributes_Proxy( 
    ContextAttributes * This,
    /* [retval][out] */ ContextAttributes **ppVal);


void __RPC_STUB ContextAttributes_get_HighPriorityAttributes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ContextAttributes_Refresh_Proxy( 
    ContextAttributes * This);


void __RPC_STUB ContextAttributes_Refresh_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ContextAttributes_INTERFACE_DEFINED__ */


#ifndef __SourceControl_INTERFACE_DEFINED__
#define __SourceControl_INTERFACE_DEFINED__

/* interface SourceControl */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_SourceControl;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f1ddc2c2-df76-4ebb-9de8-48ad2557062c")
    SourceControl : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**ppDTEObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ DTE	**ppDTEObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE IsItemUnderSCC( 
            /* [in] */ BSTR ItemName,
            /* [retval][out] */ VARIANT_BOOL *pfControlled) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE IsItemCheckedOut( 
            /* [in] */ BSTR ItemName,
            /* [retval][out] */ VARIANT_BOOL *pfCheckedOut) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CheckOutItem( 
            /* [in] */ BSTR ItemName,
            /* [retval][out] */ VARIANT_BOOL *pfCheckedOut) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CheckOutItems( 
            /* [in] */ SAFEARRAY * *ItemNames,
            /* [retval][out] */ VARIANT_BOOL *pfCheckedOut) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ExcludeItem( 
            /* [in] */ BSTR ProjectFile,
            /* [in] */ BSTR ItemName) = 0;
        
        virtual /* [id] */ HRESULT STDMETHODCALLTYPE ExcludeItems( 
            /* [in] */ BSTR ProjectFile,
            /* [in] */ SAFEARRAY * *ItemNames) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct SourceControlVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            SourceControl * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            SourceControl * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            SourceControl * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            SourceControl * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            SourceControl * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            SourceControl * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            SourceControl * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            SourceControl * This,
            /* [retval][out] */ DTE	**ppDTEObject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            SourceControl * This,
            /* [retval][out] */ DTE	**ppDTEObject);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IsItemUnderSCC )( 
            SourceControl * This,
            /* [in] */ BSTR ItemName,
            /* [retval][out] */ VARIANT_BOOL *pfControlled);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IsItemCheckedOut )( 
            SourceControl * This,
            /* [in] */ BSTR ItemName,
            /* [retval][out] */ VARIANT_BOOL *pfCheckedOut);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CheckOutItem )( 
            SourceControl * This,
            /* [in] */ BSTR ItemName,
            /* [retval][out] */ VARIANT_BOOL *pfCheckedOut);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CheckOutItems )( 
            SourceControl * This,
            /* [in] */ SAFEARRAY * *ItemNames,
            /* [retval][out] */ VARIANT_BOOL *pfCheckedOut);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ExcludeItem )( 
            SourceControl * This,
            /* [in] */ BSTR ProjectFile,
            /* [in] */ BSTR ItemName);
        
        /* [id] */ HRESULT ( STDMETHODCALLTYPE *ExcludeItems )( 
            SourceControl * This,
            /* [in] */ BSTR ProjectFile,
            /* [in] */ SAFEARRAY * *ItemNames);
        
        END_INTERFACE
    } SourceControlVtbl;

    interface SourceControl
    {
        CONST_VTBL struct SourceControlVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define SourceControl_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define SourceControl_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define SourceControl_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define SourceControl_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define SourceControl_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define SourceControl_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define SourceControl_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define SourceControl_get_DTE(This,ppDTEObject)	\
    (This)->lpVtbl -> get_DTE(This,ppDTEObject)

#define SourceControl_get_Parent(This,ppDTEObject)	\
    (This)->lpVtbl -> get_Parent(This,ppDTEObject)

#define SourceControl_IsItemUnderSCC(This,ItemName,pfControlled)	\
    (This)->lpVtbl -> IsItemUnderSCC(This,ItemName,pfControlled)

#define SourceControl_IsItemCheckedOut(This,ItemName,pfCheckedOut)	\
    (This)->lpVtbl -> IsItemCheckedOut(This,ItemName,pfCheckedOut)

#define SourceControl_CheckOutItem(This,ItemName,pfCheckedOut)	\
    (This)->lpVtbl -> CheckOutItem(This,ItemName,pfCheckedOut)

#define SourceControl_CheckOutItems(This,ItemNames,pfCheckedOut)	\
    (This)->lpVtbl -> CheckOutItems(This,ItemNames,pfCheckedOut)

#define SourceControl_ExcludeItem(This,ProjectFile,ItemName)	\
    (This)->lpVtbl -> ExcludeItem(This,ProjectFile,ItemName)

#define SourceControl_ExcludeItems(This,ProjectFile,ItemNames)	\
    (This)->lpVtbl -> ExcludeItems(This,ProjectFile,ItemNames)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SourceControl_get_DTE_Proxy( 
    SourceControl * This,
    /* [retval][out] */ DTE	**ppDTEObject);


void __RPC_STUB SourceControl_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE SourceControl_get_Parent_Proxy( 
    SourceControl * This,
    /* [retval][out] */ DTE	**ppDTEObject);


void __RPC_STUB SourceControl_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SourceControl_IsItemUnderSCC_Proxy( 
    SourceControl * This,
    /* [in] */ BSTR ItemName,
    /* [retval][out] */ VARIANT_BOOL *pfControlled);


void __RPC_STUB SourceControl_IsItemUnderSCC_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SourceControl_IsItemCheckedOut_Proxy( 
    SourceControl * This,
    /* [in] */ BSTR ItemName,
    /* [retval][out] */ VARIANT_BOOL *pfCheckedOut);


void __RPC_STUB SourceControl_IsItemCheckedOut_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SourceControl_CheckOutItem_Proxy( 
    SourceControl * This,
    /* [in] */ BSTR ItemName,
    /* [retval][out] */ VARIANT_BOOL *pfCheckedOut);


void __RPC_STUB SourceControl_CheckOutItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SourceControl_CheckOutItems_Proxy( 
    SourceControl * This,
    /* [in] */ SAFEARRAY * *ItemNames,
    /* [retval][out] */ VARIANT_BOOL *pfCheckedOut);


void __RPC_STUB SourceControl_CheckOutItems_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE SourceControl_ExcludeItem_Proxy( 
    SourceControl * This,
    /* [in] */ BSTR ProjectFile,
    /* [in] */ BSTR ItemName);


void __RPC_STUB SourceControl_ExcludeItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id] */ HRESULT STDMETHODCALLTYPE SourceControl_ExcludeItems_Proxy( 
    SourceControl * This,
    /* [in] */ BSTR ProjectFile,
    /* [in] */ SAFEARRAY * *ItemNames);


void __RPC_STUB SourceControl_ExcludeItems_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __SourceControl_INTERFACE_DEFINED__ */


#ifndef __TextPoint_INTERFACE_DEFINED__
#define __TextPoint_INTERFACE_DEFINED__

/* interface TextPoint */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_TextPoint;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7f59e94e-4939-40d2-9f7f-b7651c25905d")
    TextPoint : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ TextDocument **lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Line( 
            /* [retval][out] */ long *lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LineCharOffset( 
            /* [retval][out] */ long *lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AbsoluteCharOffset( 
            /* [retval][out] */ long *lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DisplayColumn( 
            /* [retval][out] */ long *lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AtEndOfDocument( 
            /* [retval][out] */ VARIANT_BOOL *lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AtStartOfDocument( 
            /* [retval][out] */ VARIANT_BOOL *lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AtEndOfLine( 
            /* [retval][out] */ VARIANT_BOOL *lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AtStartOfLine( 
            /* [retval][out] */ VARIANT_BOOL *lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_LineLength( 
            /* [retval][out] */ long *lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EqualTo( 
            /* [in] */ TextPoint *Point,
            /* [retval][out] */ VARIANT_BOOL *lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LessThan( 
            /* [in] */ TextPoint *Point,
            /* [retval][out] */ VARIANT_BOOL *lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GreaterThan( 
            /* [in] */ TextPoint *Point,
            /* [retval][out] */ VARIANT_BOOL *lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TryToShow( 
            /* [defaultvalue][in] */ vsPaneShowHow How,
            /* [optional][in] */ VARIANT PointOrCount,
            /* [retval][out] */ VARIANT_BOOL *pbResult) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CodeElement( 
            /* [in] */ vsCMElement Scope,
            /* [retval][out] */ CodeElement **ppResult) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateEditPoint( 
            /* [retval][out] */ EditPoint **lppaReturn) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TextPointVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TextPoint * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TextPoint * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TextPoint * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TextPoint * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TextPoint * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TextPoint * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TextPoint * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            TextPoint * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TextPoint * This,
            /* [retval][out] */ TextDocument **lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Line )( 
            TextPoint * This,
            /* [retval][out] */ long *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LineCharOffset )( 
            TextPoint * This,
            /* [retval][out] */ long *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AbsoluteCharOffset )( 
            TextPoint * This,
            /* [retval][out] */ long *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayColumn )( 
            TextPoint * This,
            /* [retval][out] */ long *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AtEndOfDocument )( 
            TextPoint * This,
            /* [retval][out] */ VARIANT_BOOL *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AtStartOfDocument )( 
            TextPoint * This,
            /* [retval][out] */ VARIANT_BOOL *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AtEndOfLine )( 
            TextPoint * This,
            /* [retval][out] */ VARIANT_BOOL *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AtStartOfLine )( 
            TextPoint * This,
            /* [retval][out] */ VARIANT_BOOL *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LineLength )( 
            TextPoint * This,
            /* [retval][out] */ long *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *EqualTo )( 
            TextPoint * This,
            /* [in] */ TextPoint *Point,
            /* [retval][out] */ VARIANT_BOOL *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LessThan )( 
            TextPoint * This,
            /* [in] */ TextPoint *Point,
            /* [retval][out] */ VARIANT_BOOL *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GreaterThan )( 
            TextPoint * This,
            /* [in] */ TextPoint *Point,
            /* [retval][out] */ VARIANT_BOOL *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *TryToShow )( 
            TextPoint * This,
            /* [defaultvalue][in] */ vsPaneShowHow How,
            /* [optional][in] */ VARIANT PointOrCount,
            /* [retval][out] */ VARIANT_BOOL *pbResult);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CodeElement )( 
            TextPoint * This,
            /* [in] */ vsCMElement Scope,
            /* [retval][out] */ CodeElement **ppResult);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateEditPoint )( 
            TextPoint * This,
            /* [retval][out] */ EditPoint **lppaReturn);
        
        END_INTERFACE
    } TextPointVtbl;

    interface TextPoint
    {
        CONST_VTBL struct TextPointVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TextPoint_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define TextPoint_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define TextPoint_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define TextPoint_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define TextPoint_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define TextPoint_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define TextPoint_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define TextPoint_get_DTE(This,lppaReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppaReturn)

#define TextPoint_get_Parent(This,lppaReturn)	\
    (This)->lpVtbl -> get_Parent(This,lppaReturn)

#define TextPoint_get_Line(This,lppaReturn)	\
    (This)->lpVtbl -> get_Line(This,lppaReturn)

#define TextPoint_get_LineCharOffset(This,lppaReturn)	\
    (This)->lpVtbl -> get_LineCharOffset(This,lppaReturn)

#define TextPoint_get_AbsoluteCharOffset(This,lppaReturn)	\
    (This)->lpVtbl -> get_AbsoluteCharOffset(This,lppaReturn)

#define TextPoint_get_DisplayColumn(This,lppaReturn)	\
    (This)->lpVtbl -> get_DisplayColumn(This,lppaReturn)

#define TextPoint_get_AtEndOfDocument(This,lppaReturn)	\
    (This)->lpVtbl -> get_AtEndOfDocument(This,lppaReturn)

#define TextPoint_get_AtStartOfDocument(This,lppaReturn)	\
    (This)->lpVtbl -> get_AtStartOfDocument(This,lppaReturn)

#define TextPoint_get_AtEndOfLine(This,lppaReturn)	\
    (This)->lpVtbl -> get_AtEndOfLine(This,lppaReturn)

#define TextPoint_get_AtStartOfLine(This,lppaReturn)	\
    (This)->lpVtbl -> get_AtStartOfLine(This,lppaReturn)

#define TextPoint_get_LineLength(This,lppaReturn)	\
    (This)->lpVtbl -> get_LineLength(This,lppaReturn)

#define TextPoint_EqualTo(This,Point,lppaReturn)	\
    (This)->lpVtbl -> EqualTo(This,Point,lppaReturn)

#define TextPoint_LessThan(This,Point,lppaReturn)	\
    (This)->lpVtbl -> LessThan(This,Point,lppaReturn)

#define TextPoint_GreaterThan(This,Point,lppaReturn)	\
    (This)->lpVtbl -> GreaterThan(This,Point,lppaReturn)

#define TextPoint_TryToShow(This,How,PointOrCount,pbResult)	\
    (This)->lpVtbl -> TryToShow(This,How,PointOrCount,pbResult)

#define TextPoint_get_CodeElement(This,Scope,ppResult)	\
    (This)->lpVtbl -> get_CodeElement(This,Scope,ppResult)

#define TextPoint_CreateEditPoint(This,lppaReturn)	\
    (This)->lpVtbl -> CreateEditPoint(This,lppaReturn)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextPoint_get_DTE_Proxy( 
    TextPoint * This,
    /* [retval][out] */ DTE	**lppaReturn);


void __RPC_STUB TextPoint_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextPoint_get_Parent_Proxy( 
    TextPoint * This,
    /* [retval][out] */ TextDocument **lppaReturn);


void __RPC_STUB TextPoint_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextPoint_get_Line_Proxy( 
    TextPoint * This,
    /* [retval][out] */ long *lppaReturn);


void __RPC_STUB TextPoint_get_Line_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextPoint_get_LineCharOffset_Proxy( 
    TextPoint * This,
    /* [retval][out] */ long *lppaReturn);


void __RPC_STUB TextPoint_get_LineCharOffset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextPoint_get_AbsoluteCharOffset_Proxy( 
    TextPoint * This,
    /* [retval][out] */ long *lppaReturn);


void __RPC_STUB TextPoint_get_AbsoluteCharOffset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextPoint_get_DisplayColumn_Proxy( 
    TextPoint * This,
    /* [retval][out] */ long *lppaReturn);


void __RPC_STUB TextPoint_get_DisplayColumn_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextPoint_get_AtEndOfDocument_Proxy( 
    TextPoint * This,
    /* [retval][out] */ VARIANT_BOOL *lppaReturn);


void __RPC_STUB TextPoint_get_AtEndOfDocument_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextPoint_get_AtStartOfDocument_Proxy( 
    TextPoint * This,
    /* [retval][out] */ VARIANT_BOOL *lppaReturn);


void __RPC_STUB TextPoint_get_AtStartOfDocument_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextPoint_get_AtEndOfLine_Proxy( 
    TextPoint * This,
    /* [retval][out] */ VARIANT_BOOL *lppaReturn);


void __RPC_STUB TextPoint_get_AtEndOfLine_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextPoint_get_AtStartOfLine_Proxy( 
    TextPoint * This,
    /* [retval][out] */ VARIANT_BOOL *lppaReturn);


void __RPC_STUB TextPoint_get_AtStartOfLine_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextPoint_get_LineLength_Proxy( 
    TextPoint * This,
    /* [retval][out] */ long *lppaReturn);


void __RPC_STUB TextPoint_get_LineLength_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextPoint_EqualTo_Proxy( 
    TextPoint * This,
    /* [in] */ TextPoint *Point,
    /* [retval][out] */ VARIANT_BOOL *lppaReturn);


void __RPC_STUB TextPoint_EqualTo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextPoint_LessThan_Proxy( 
    TextPoint * This,
    /* [in] */ TextPoint *Point,
    /* [retval][out] */ VARIANT_BOOL *lppaReturn);


void __RPC_STUB TextPoint_LessThan_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextPoint_GreaterThan_Proxy( 
    TextPoint * This,
    /* [in] */ TextPoint *Point,
    /* [retval][out] */ VARIANT_BOOL *lppaReturn);


void __RPC_STUB TextPoint_GreaterThan_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextPoint_TryToShow_Proxy( 
    TextPoint * This,
    /* [defaultvalue][in] */ vsPaneShowHow How,
    /* [optional][in] */ VARIANT PointOrCount,
    /* [retval][out] */ VARIANT_BOOL *pbResult);


void __RPC_STUB TextPoint_TryToShow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextPoint_get_CodeElement_Proxy( 
    TextPoint * This,
    /* [in] */ vsCMElement Scope,
    /* [retval][out] */ CodeElement **ppResult);


void __RPC_STUB TextPoint_get_CodeElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextPoint_CreateEditPoint_Proxy( 
    TextPoint * This,
    /* [retval][out] */ EditPoint **lppaReturn);


void __RPC_STUB TextPoint_CreateEditPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __TextPoint_INTERFACE_DEFINED__ */


#ifndef __EditPoint_INTERFACE_DEFINED__
#define __EditPoint_INTERFACE_DEFINED__

/* interface EditPoint */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_EditPoint;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c1ffe800-028b-4475-a907-14f51f19bb7d")
    EditPoint : public TextPoint
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CharLeft( 
            /* [defaultvalue][in] */ long Count = 1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CharRight( 
            /* [defaultvalue][in] */ long Count = 1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EndOfLine( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE StartOfLine( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EndOfDocument( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE StartOfDocument( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE WordLeft( 
            /* [defaultvalue][in] */ long Count = 1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE WordRight( 
            /* [defaultvalue][in] */ long Count = 1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LineUp( 
            /* [defaultvalue][in] */ long Count = 1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LineDown( 
            /* [defaultvalue][in] */ long Count = 1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE MoveToPoint( 
            /* [in] */ TextPoint *Point) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE MoveToLineAndOffset( 
            /* [in] */ long Line,
            /* [in] */ long Offset) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE MoveToAbsoluteOffset( 
            /* [in] */ long Offset) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetBookmark( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ClearBookmark( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE NextBookmark( 
            /* [retval][out] */ VARIANT_BOOL *pbFound) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE PreviousBookmark( 
            /* [retval][out] */ VARIANT_BOOL *pbFound) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE PadToColumn( 
            /* [in] */ long Column) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Insert( 
            /* [in] */ BSTR Text) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertFromFile( 
            /* [in] */ BSTR File) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetText( 
            /* [in] */ VARIANT PointOrCount,
            /* [retval][out] */ BSTR *pbstrText) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetLines( 
            /* [in] */ long Start,
            /* [in] */ long ExclusiveEnd,
            /* [retval][out] */ BSTR *pbstrText) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Copy( 
            /* [in] */ VARIANT PointOrCount,
            /* [defaultvalue][in] */ VARIANT_BOOL Append = 0) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Cut( 
            /* [in] */ VARIANT PointOrCount,
            /* [defaultvalue][in] */ VARIANT_BOOL Append = 0) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( 
            /* [in] */ VARIANT PointOrCount) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Paste( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ReadOnly( 
            /* [in] */ VARIANT PointOrCount,
            /* [retval][out] */ VARIANT_BOOL *lfResult) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FindPattern( 
            /* [in] */ BSTR Pattern,
            /* [defaultvalue][in] */ long vsFindOptionsValue,
            /* [defaultvalue][out][in] */ EditPoint **EndPoint,
            /* [defaultvalue][out][in] */ TextRanges **Tags,
            /* [retval][out] */ VARIANT_BOOL *pbFound) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ReplacePattern( 
            /* [in] */ TextPoint *Point,
            /* [in] */ BSTR Pattern,
            /* [in] */ BSTR Replace,
            /* [defaultvalue][in] */ long vsFindOptionsValue,
            /* [defaultvalue][out][in] */ TextRanges **Tags,
            /* [retval][out] */ VARIANT_BOOL *pbFound) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Indent( 
            /* [defaultvalue][in] */ TextPoint *Point = 0,
            /* [defaultvalue][in] */ long Count = 1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Unindent( 
            /* [defaultvalue][in] */ TextPoint *Point = 0,
            /* [defaultvalue][in] */ long Count = 1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SmartFormat( 
            /* [in] */ TextPoint *Point) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OutlineSection( 
            /* [in] */ VARIANT PointOrCount) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ReplaceText( 
            /* [in] */ VARIANT PointOrCount,
            /* [in] */ BSTR Text,
            /* [in] */ long Flags) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ChangeCase( 
            /* [in] */ VARIANT PointOrCount,
            /* [in] */ vsCaseOptions How) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE DeleteWhitespace( 
            /* [defaultvalue][in] */ vsWhitespaceOptions Direction = vsWhitespaceOptionsHorizontal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct EditPointVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            EditPoint * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            EditPoint * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            EditPoint * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            EditPoint * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            EditPoint * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            EditPoint * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            EditPoint * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            EditPoint * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            EditPoint * This,
            /* [retval][out] */ TextDocument **lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Line )( 
            EditPoint * This,
            /* [retval][out] */ long *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LineCharOffset )( 
            EditPoint * This,
            /* [retval][out] */ long *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AbsoluteCharOffset )( 
            EditPoint * This,
            /* [retval][out] */ long *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayColumn )( 
            EditPoint * This,
            /* [retval][out] */ long *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AtEndOfDocument )( 
            EditPoint * This,
            /* [retval][out] */ VARIANT_BOOL *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AtStartOfDocument )( 
            EditPoint * This,
            /* [retval][out] */ VARIANT_BOOL *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AtEndOfLine )( 
            EditPoint * This,
            /* [retval][out] */ VARIANT_BOOL *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AtStartOfLine )( 
            EditPoint * This,
            /* [retval][out] */ VARIANT_BOOL *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LineLength )( 
            EditPoint * This,
            /* [retval][out] */ long *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *EqualTo )( 
            EditPoint * This,
            /* [in] */ TextPoint *Point,
            /* [retval][out] */ VARIANT_BOOL *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LessThan )( 
            EditPoint * This,
            /* [in] */ TextPoint *Point,
            /* [retval][out] */ VARIANT_BOOL *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GreaterThan )( 
            EditPoint * This,
            /* [in] */ TextPoint *Point,
            /* [retval][out] */ VARIANT_BOOL *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *TryToShow )( 
            EditPoint * This,
            /* [defaultvalue][in] */ vsPaneShowHow How,
            /* [optional][in] */ VARIANT PointOrCount,
            /* [retval][out] */ VARIANT_BOOL *pbResult);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CodeElement )( 
            EditPoint * This,
            /* [in] */ vsCMElement Scope,
            /* [retval][out] */ CodeElement **ppResult);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateEditPoint )( 
            EditPoint * This,
            /* [retval][out] */ EditPoint **lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CharLeft )( 
            EditPoint * This,
            /* [defaultvalue][in] */ long Count);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CharRight )( 
            EditPoint * This,
            /* [defaultvalue][in] */ long Count);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *EndOfLine )( 
            EditPoint * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *StartOfLine )( 
            EditPoint * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *EndOfDocument )( 
            EditPoint * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *StartOfDocument )( 
            EditPoint * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *WordLeft )( 
            EditPoint * This,
            /* [defaultvalue][in] */ long Count);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *WordRight )( 
            EditPoint * This,
            /* [defaultvalue][in] */ long Count);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LineUp )( 
            EditPoint * This,
            /* [defaultvalue][in] */ long Count);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LineDown )( 
            EditPoint * This,
            /* [defaultvalue][in] */ long Count);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MoveToPoint )( 
            EditPoint * This,
            /* [in] */ TextPoint *Point);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MoveToLineAndOffset )( 
            EditPoint * This,
            /* [in] */ long Line,
            /* [in] */ long Offset);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MoveToAbsoluteOffset )( 
            EditPoint * This,
            /* [in] */ long Offset);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetBookmark )( 
            EditPoint * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ClearBookmark )( 
            EditPoint * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *NextBookmark )( 
            EditPoint * This,
            /* [retval][out] */ VARIANT_BOOL *pbFound);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PreviousBookmark )( 
            EditPoint * This,
            /* [retval][out] */ VARIANT_BOOL *pbFound);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PadToColumn )( 
            EditPoint * This,
            /* [in] */ long Column);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Insert )( 
            EditPoint * This,
            /* [in] */ BSTR Text);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertFromFile )( 
            EditPoint * This,
            /* [in] */ BSTR File);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetText )( 
            EditPoint * This,
            /* [in] */ VARIANT PointOrCount,
            /* [retval][out] */ BSTR *pbstrText);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetLines )( 
            EditPoint * This,
            /* [in] */ long Start,
            /* [in] */ long ExclusiveEnd,
            /* [retval][out] */ BSTR *pbstrText);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            EditPoint * This,
            /* [in] */ VARIANT PointOrCount,
            /* [defaultvalue][in] */ VARIANT_BOOL Append);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Cut )( 
            EditPoint * This,
            /* [in] */ VARIANT PointOrCount,
            /* [defaultvalue][in] */ VARIANT_BOOL Append);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            EditPoint * This,
            /* [in] */ VARIANT PointOrCount);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Paste )( 
            EditPoint * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ReadOnly )( 
            EditPoint * This,
            /* [in] */ VARIANT PointOrCount,
            /* [retval][out] */ VARIANT_BOOL *lfResult);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *FindPattern )( 
            EditPoint * This,
            /* [in] */ BSTR Pattern,
            /* [defaultvalue][in] */ long vsFindOptionsValue,
            /* [defaultvalue][out][in] */ EditPoint **EndPoint,
            /* [defaultvalue][out][in] */ TextRanges **Tags,
            /* [retval][out] */ VARIANT_BOOL *pbFound);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ReplacePattern )( 
            EditPoint * This,
            /* [in] */ TextPoint *Point,
            /* [in] */ BSTR Pattern,
            /* [in] */ BSTR Replace,
            /* [defaultvalue][in] */ long vsFindOptionsValue,
            /* [defaultvalue][out][in] */ TextRanges **Tags,
            /* [retval][out] */ VARIANT_BOOL *pbFound);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Indent )( 
            EditPoint * This,
            /* [defaultvalue][in] */ TextPoint *Point,
            /* [defaultvalue][in] */ long Count);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Unindent )( 
            EditPoint * This,
            /* [defaultvalue][in] */ TextPoint *Point,
            /* [defaultvalue][in] */ long Count);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SmartFormat )( 
            EditPoint * This,
            /* [in] */ TextPoint *Point);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OutlineSection )( 
            EditPoint * This,
            /* [in] */ VARIANT PointOrCount);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ReplaceText )( 
            EditPoint * This,
            /* [in] */ VARIANT PointOrCount,
            /* [in] */ BSTR Text,
            /* [in] */ long Flags);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ChangeCase )( 
            EditPoint * This,
            /* [in] */ VARIANT PointOrCount,
            /* [in] */ vsCaseOptions How);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteWhitespace )( 
            EditPoint * This,
            /* [defaultvalue][in] */ vsWhitespaceOptions Direction);
        
        END_INTERFACE
    } EditPointVtbl;

    interface EditPoint
    {
        CONST_VTBL struct EditPointVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define EditPoint_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define EditPoint_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define EditPoint_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define EditPoint_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define EditPoint_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define EditPoint_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define EditPoint_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define EditPoint_get_DTE(This,lppaReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppaReturn)

#define EditPoint_get_Parent(This,lppaReturn)	\
    (This)->lpVtbl -> get_Parent(This,lppaReturn)

#define EditPoint_get_Line(This,lppaReturn)	\
    (This)->lpVtbl -> get_Line(This,lppaReturn)

#define EditPoint_get_LineCharOffset(This,lppaReturn)	\
    (This)->lpVtbl -> get_LineCharOffset(This,lppaReturn)

#define EditPoint_get_AbsoluteCharOffset(This,lppaReturn)	\
    (This)->lpVtbl -> get_AbsoluteCharOffset(This,lppaReturn)

#define EditPoint_get_DisplayColumn(This,lppaReturn)	\
    (This)->lpVtbl -> get_DisplayColumn(This,lppaReturn)

#define EditPoint_get_AtEndOfDocument(This,lppaReturn)	\
    (This)->lpVtbl -> get_AtEndOfDocument(This,lppaReturn)

#define EditPoint_get_AtStartOfDocument(This,lppaReturn)	\
    (This)->lpVtbl -> get_AtStartOfDocument(This,lppaReturn)

#define EditPoint_get_AtEndOfLine(This,lppaReturn)	\
    (This)->lpVtbl -> get_AtEndOfLine(This,lppaReturn)

#define EditPoint_get_AtStartOfLine(This,lppaReturn)	\
    (This)->lpVtbl -> get_AtStartOfLine(This,lppaReturn)

#define EditPoint_get_LineLength(This,lppaReturn)	\
    (This)->lpVtbl -> get_LineLength(This,lppaReturn)

#define EditPoint_EqualTo(This,Point,lppaReturn)	\
    (This)->lpVtbl -> EqualTo(This,Point,lppaReturn)

#define EditPoint_LessThan(This,Point,lppaReturn)	\
    (This)->lpVtbl -> LessThan(This,Point,lppaReturn)

#define EditPoint_GreaterThan(This,Point,lppaReturn)	\
    (This)->lpVtbl -> GreaterThan(This,Point,lppaReturn)

#define EditPoint_TryToShow(This,How,PointOrCount,pbResult)	\
    (This)->lpVtbl -> TryToShow(This,How,PointOrCount,pbResult)

#define EditPoint_get_CodeElement(This,Scope,ppResult)	\
    (This)->lpVtbl -> get_CodeElement(This,Scope,ppResult)

#define EditPoint_CreateEditPoint(This,lppaReturn)	\
    (This)->lpVtbl -> CreateEditPoint(This,lppaReturn)


#define EditPoint_CharLeft(This,Count)	\
    (This)->lpVtbl -> CharLeft(This,Count)

#define EditPoint_CharRight(This,Count)	\
    (This)->lpVtbl -> CharRight(This,Count)

#define EditPoint_EndOfLine(This)	\
    (This)->lpVtbl -> EndOfLine(This)

#define EditPoint_StartOfLine(This)	\
    (This)->lpVtbl -> StartOfLine(This)

#define EditPoint_EndOfDocument(This)	\
    (This)->lpVtbl -> EndOfDocument(This)

#define EditPoint_StartOfDocument(This)	\
    (This)->lpVtbl -> StartOfDocument(This)

#define EditPoint_WordLeft(This,Count)	\
    (This)->lpVtbl -> WordLeft(This,Count)

#define EditPoint_WordRight(This,Count)	\
    (This)->lpVtbl -> WordRight(This,Count)

#define EditPoint_LineUp(This,Count)	\
    (This)->lpVtbl -> LineUp(This,Count)

#define EditPoint_LineDown(This,Count)	\
    (This)->lpVtbl -> LineDown(This,Count)

#define EditPoint_MoveToPoint(This,Point)	\
    (This)->lpVtbl -> MoveToPoint(This,Point)

#define EditPoint_MoveToLineAndOffset(This,Line,Offset)	\
    (This)->lpVtbl -> MoveToLineAndOffset(This,Line,Offset)

#define EditPoint_MoveToAbsoluteOffset(This,Offset)	\
    (This)->lpVtbl -> MoveToAbsoluteOffset(This,Offset)

#define EditPoint_SetBookmark(This)	\
    (This)->lpVtbl -> SetBookmark(This)

#define EditPoint_ClearBookmark(This)	\
    (This)->lpVtbl -> ClearBookmark(This)

#define EditPoint_NextBookmark(This,pbFound)	\
    (This)->lpVtbl -> NextBookmark(This,pbFound)

#define EditPoint_PreviousBookmark(This,pbFound)	\
    (This)->lpVtbl -> PreviousBookmark(This,pbFound)

#define EditPoint_PadToColumn(This,Column)	\
    (This)->lpVtbl -> PadToColumn(This,Column)

#define EditPoint_Insert(This,Text)	\
    (This)->lpVtbl -> Insert(This,Text)

#define EditPoint_InsertFromFile(This,File)	\
    (This)->lpVtbl -> InsertFromFile(This,File)

#define EditPoint_GetText(This,PointOrCount,pbstrText)	\
    (This)->lpVtbl -> GetText(This,PointOrCount,pbstrText)

#define EditPoint_GetLines(This,Start,ExclusiveEnd,pbstrText)	\
    (This)->lpVtbl -> GetLines(This,Start,ExclusiveEnd,pbstrText)

#define EditPoint_Copy(This,PointOrCount,Append)	\
    (This)->lpVtbl -> Copy(This,PointOrCount,Append)

#define EditPoint_Cut(This,PointOrCount,Append)	\
    (This)->lpVtbl -> Cut(This,PointOrCount,Append)

#define EditPoint_Delete(This,PointOrCount)	\
    (This)->lpVtbl -> Delete(This,PointOrCount)

#define EditPoint_Paste(This)	\
    (This)->lpVtbl -> Paste(This)

#define EditPoint_ReadOnly(This,PointOrCount,lfResult)	\
    (This)->lpVtbl -> ReadOnly(This,PointOrCount,lfResult)

#define EditPoint_FindPattern(This,Pattern,vsFindOptionsValue,EndPoint,Tags,pbFound)	\
    (This)->lpVtbl -> FindPattern(This,Pattern,vsFindOptionsValue,EndPoint,Tags,pbFound)

#define EditPoint_ReplacePattern(This,Point,Pattern,Replace,vsFindOptionsValue,Tags,pbFound)	\
    (This)->lpVtbl -> ReplacePattern(This,Point,Pattern,Replace,vsFindOptionsValue,Tags,pbFound)

#define EditPoint_Indent(This,Point,Count)	\
    (This)->lpVtbl -> Indent(This,Point,Count)

#define EditPoint_Unindent(This,Point,Count)	\
    (This)->lpVtbl -> Unindent(This,Point,Count)

#define EditPoint_SmartFormat(This,Point)	\
    (This)->lpVtbl -> SmartFormat(This,Point)

#define EditPoint_OutlineSection(This,PointOrCount)	\
    (This)->lpVtbl -> OutlineSection(This,PointOrCount)

#define EditPoint_ReplaceText(This,PointOrCount,Text,Flags)	\
    (This)->lpVtbl -> ReplaceText(This,PointOrCount,Text,Flags)

#define EditPoint_ChangeCase(This,PointOrCount,How)	\
    (This)->lpVtbl -> ChangeCase(This,PointOrCount,How)

#define EditPoint_DeleteWhitespace(This,Direction)	\
    (This)->lpVtbl -> DeleteWhitespace(This,Direction)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_CharLeft_Proxy( 
    EditPoint * This,
    /* [defaultvalue][in] */ long Count);


void __RPC_STUB EditPoint_CharLeft_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_CharRight_Proxy( 
    EditPoint * This,
    /* [defaultvalue][in] */ long Count);


void __RPC_STUB EditPoint_CharRight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_EndOfLine_Proxy( 
    EditPoint * This);


void __RPC_STUB EditPoint_EndOfLine_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_StartOfLine_Proxy( 
    EditPoint * This);


void __RPC_STUB EditPoint_StartOfLine_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_EndOfDocument_Proxy( 
    EditPoint * This);


void __RPC_STUB EditPoint_EndOfDocument_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_StartOfDocument_Proxy( 
    EditPoint * This);


void __RPC_STUB EditPoint_StartOfDocument_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_WordLeft_Proxy( 
    EditPoint * This,
    /* [defaultvalue][in] */ long Count);


void __RPC_STUB EditPoint_WordLeft_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_WordRight_Proxy( 
    EditPoint * This,
    /* [defaultvalue][in] */ long Count);


void __RPC_STUB EditPoint_WordRight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_LineUp_Proxy( 
    EditPoint * This,
    /* [defaultvalue][in] */ long Count);


void __RPC_STUB EditPoint_LineUp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_LineDown_Proxy( 
    EditPoint * This,
    /* [defaultvalue][in] */ long Count);


void __RPC_STUB EditPoint_LineDown_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_MoveToPoint_Proxy( 
    EditPoint * This,
    /* [in] */ TextPoint *Point);


void __RPC_STUB EditPoint_MoveToPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_MoveToLineAndOffset_Proxy( 
    EditPoint * This,
    /* [in] */ long Line,
    /* [in] */ long Offset);


void __RPC_STUB EditPoint_MoveToLineAndOffset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_MoveToAbsoluteOffset_Proxy( 
    EditPoint * This,
    /* [in] */ long Offset);


void __RPC_STUB EditPoint_MoveToAbsoluteOffset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_SetBookmark_Proxy( 
    EditPoint * This);


void __RPC_STUB EditPoint_SetBookmark_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_ClearBookmark_Proxy( 
    EditPoint * This);


void __RPC_STUB EditPoint_ClearBookmark_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_NextBookmark_Proxy( 
    EditPoint * This,
    /* [retval][out] */ VARIANT_BOOL *pbFound);


void __RPC_STUB EditPoint_NextBookmark_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_PreviousBookmark_Proxy( 
    EditPoint * This,
    /* [retval][out] */ VARIANT_BOOL *pbFound);


void __RPC_STUB EditPoint_PreviousBookmark_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_PadToColumn_Proxy( 
    EditPoint * This,
    /* [in] */ long Column);


void __RPC_STUB EditPoint_PadToColumn_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_Insert_Proxy( 
    EditPoint * This,
    /* [in] */ BSTR Text);


void __RPC_STUB EditPoint_Insert_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_InsertFromFile_Proxy( 
    EditPoint * This,
    /* [in] */ BSTR File);


void __RPC_STUB EditPoint_InsertFromFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_GetText_Proxy( 
    EditPoint * This,
    /* [in] */ VARIANT PointOrCount,
    /* [retval][out] */ BSTR *pbstrText);


void __RPC_STUB EditPoint_GetText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_GetLines_Proxy( 
    EditPoint * This,
    /* [in] */ long Start,
    /* [in] */ long ExclusiveEnd,
    /* [retval][out] */ BSTR *pbstrText);


void __RPC_STUB EditPoint_GetLines_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_Copy_Proxy( 
    EditPoint * This,
    /* [in] */ VARIANT PointOrCount,
    /* [defaultvalue][in] */ VARIANT_BOOL Append);


void __RPC_STUB EditPoint_Copy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_Cut_Proxy( 
    EditPoint * This,
    /* [in] */ VARIANT PointOrCount,
    /* [defaultvalue][in] */ VARIANT_BOOL Append);


void __RPC_STUB EditPoint_Cut_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_Delete_Proxy( 
    EditPoint * This,
    /* [in] */ VARIANT PointOrCount);


void __RPC_STUB EditPoint_Delete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_Paste_Proxy( 
    EditPoint * This);


void __RPC_STUB EditPoint_Paste_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_ReadOnly_Proxy( 
    EditPoint * This,
    /* [in] */ VARIANT PointOrCount,
    /* [retval][out] */ VARIANT_BOOL *lfResult);


void __RPC_STUB EditPoint_ReadOnly_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_FindPattern_Proxy( 
    EditPoint * This,
    /* [in] */ BSTR Pattern,
    /* [defaultvalue][in] */ long vsFindOptionsValue,
    /* [defaultvalue][out][in] */ EditPoint **EndPoint,
    /* [defaultvalue][out][in] */ TextRanges **Tags,
    /* [retval][out] */ VARIANT_BOOL *pbFound);


void __RPC_STUB EditPoint_FindPattern_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_ReplacePattern_Proxy( 
    EditPoint * This,
    /* [in] */ TextPoint *Point,
    /* [in] */ BSTR Pattern,
    /* [in] */ BSTR Replace,
    /* [defaultvalue][in] */ long vsFindOptionsValue,
    /* [defaultvalue][out][in] */ TextRanges **Tags,
    /* [retval][out] */ VARIANT_BOOL *pbFound);


void __RPC_STUB EditPoint_ReplacePattern_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_Indent_Proxy( 
    EditPoint * This,
    /* [defaultvalue][in] */ TextPoint *Point,
    /* [defaultvalue][in] */ long Count);


void __RPC_STUB EditPoint_Indent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_Unindent_Proxy( 
    EditPoint * This,
    /* [defaultvalue][in] */ TextPoint *Point,
    /* [defaultvalue][in] */ long Count);


void __RPC_STUB EditPoint_Unindent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_SmartFormat_Proxy( 
    EditPoint * This,
    /* [in] */ TextPoint *Point);


void __RPC_STUB EditPoint_SmartFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_OutlineSection_Proxy( 
    EditPoint * This,
    /* [in] */ VARIANT PointOrCount);


void __RPC_STUB EditPoint_OutlineSection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_ReplaceText_Proxy( 
    EditPoint * This,
    /* [in] */ VARIANT PointOrCount,
    /* [in] */ BSTR Text,
    /* [in] */ long Flags);


void __RPC_STUB EditPoint_ReplaceText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_ChangeCase_Proxy( 
    EditPoint * This,
    /* [in] */ VARIANT PointOrCount,
    /* [in] */ vsCaseOptions How);


void __RPC_STUB EditPoint_ChangeCase_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EditPoint_DeleteWhitespace_Proxy( 
    EditPoint * This,
    /* [defaultvalue][in] */ vsWhitespaceOptions Direction);


void __RPC_STUB EditPoint_DeleteWhitespace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __EditPoint_INTERFACE_DEFINED__ */


#ifndef __TextSelection_INTERFACE_DEFINED__
#define __TextSelection_INTERFACE_DEFINED__

/* interface TextSelection */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_TextSelection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1fa0e135-399a-4d2c-a4fe-d21e2480f921")
    TextSelection : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**ppDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ TextDocument **ppParent) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_AnchorPoint( 
            /* [retval][out] */ VirtualPoint **ppPoint) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActivePoint( 
            /* [retval][out] */ VirtualPoint **ppPoint) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_AnchorColumn( 
            /* [retval][out] */ long *pColumn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_BottomLine( 
            /* [retval][out] */ long *pLine) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_BottomPoint( 
            /* [retval][out] */ VirtualPoint **ppPoint) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_CurrentColumn( 
            /* [retval][out] */ long *pColumn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_CurrentLine( 
            /* [retval][out] */ long *pLine) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsEmpty( 
            /* [retval][out] */ VARIANT_BOOL *pfEmpty) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsActiveEndGreater( 
            /* [retval][out] */ VARIANT_BOOL *pfGreater) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Text( 
            /* [retval][out] */ BSTR *pText) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Text( 
            /* [in] */ BSTR Text) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_TopLine( 
            /* [retval][out] */ long *pLine) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TopPoint( 
            /* [retval][out] */ VirtualPoint **ppPoint) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ChangeCase( 
            /* [in] */ vsCaseOptions How) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CharLeft( 
            /* [defaultvalue][in] */ VARIANT_BOOL Extend = 0,
            /* [defaultvalue][in] */ long Count = 1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CharRight( 
            /* [defaultvalue][in] */ VARIANT_BOOL Extend = 0,
            /* [defaultvalue][in] */ long Count = 1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ClearBookmark( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Collapse( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE OutlineSection( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Copy( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Cut( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Paste( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( 
            /* [defaultvalue][in] */ long Count = 1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE DeleteLeft( 
            /* [defaultvalue][in] */ long Count = 1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE DeleteWhitespace( 
            /* [defaultvalue][in] */ vsWhitespaceOptions Direction = vsWhitespaceOptionsHorizontal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EndOfLine( 
            /* [defaultvalue][in] */ VARIANT_BOOL Extend = 0) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE StartOfLine( 
            /* [defaultvalue][in] */ vsStartOfLineOptions Where = vsStartOfLineOptionsFirstColumn,
            /* [defaultvalue][in] */ VARIANT_BOOL Extend = 0) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE EndOfDocument( 
            /* [defaultvalue][in] */ VARIANT_BOOL Extend = 0) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE StartOfDocument( 
            /* [defaultvalue][in] */ VARIANT_BOOL Extend = 0) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FindPattern( 
            /* [in] */ BSTR Pattern,
            /* [defaultvalue][in] */ long vsFindOptionsValue,
            /* [defaultvalue][out][in] */ TextRanges **Tags,
            /* [retval][out] */ VARIANT_BOOL *pfFound) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ReplacePattern( 
            /* [in] */ BSTR Pattern,
            /* [in] */ BSTR Replace,
            /* [defaultvalue][in] */ long vsFindOptionsValue,
            /* [defaultvalue][out][in] */ TextRanges **Tags,
            /* [retval][out] */ VARIANT_BOOL *pfFound) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE FindText( 
            /* [in] */ BSTR Pattern,
            /* [defaultvalue][in] */ long vsFindOptionsValue,
            /* [retval][out] */ VARIANT_BOOL *pfFound) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE ReplaceText( 
            /* [in] */ BSTR Pattern,
            /* [in] */ BSTR Replace,
            /* [defaultvalue][in] */ long vsFindOptionsValue,
            /* [retval][out] */ VARIANT_BOOL *pfFound) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GotoLine( 
            /* [in] */ long Line,
            /* [defaultvalue][in] */ VARIANT_BOOL Select = 0) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Indent( 
            /* [defaultvalue][in] */ long Count = 1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Unindent( 
            /* [defaultvalue][in] */ long Count = 1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Insert( 
            /* [in] */ BSTR Text,
            /* [defaultvalue][in] */ long vsInsertFlagsCollapseToEndValue = vsInsertFlagsCollapseToEnd) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE InsertFromFile( 
            /* [in] */ BSTR File) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LineDown( 
            /* [defaultvalue][in] */ VARIANT_BOOL Extend = 0,
            /* [defaultvalue][in] */ long Count = 1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE LineUp( 
            /* [defaultvalue][in] */ VARIANT_BOOL Extend = 0,
            /* [defaultvalue][in] */ long Count = 1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE MoveToPoint( 
            /* [in] */ TextPoint *Point,
            /* [defaultvalue][in] */ VARIANT_BOOL Extend = 0) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE MoveToLineAndOffset( 
            /* [in] */ long Line,
            /* [in] */ long Offset,
            /* [defaultvalue][in] */ VARIANT_BOOL Extend = 0) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE MoveToAbsoluteOffset( 
            /* [in] */ long Offset,
            /* [defaultvalue][in] */ VARIANT_BOOL Extend = 0) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE NewLine( 
            /* [defaultvalue][in] */ long Count = 1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SetBookmark( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE NextBookmark( 
            /* [retval][out] */ VARIANT_BOOL *pbFound) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE PreviousBookmark( 
            /* [retval][out] */ VARIANT_BOOL *pbFound) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE PadToColumn( 
            /* [in] */ long Column) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SmartFormat( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SelectAll( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SelectLine( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE SwapAnchor( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Tabify( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Untabify( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE WordLeft( 
            /* [defaultvalue][in] */ VARIANT_BOOL Extend = 0,
            /* [defaultvalue][in] */ long Count = 1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE WordRight( 
            /* [defaultvalue][in] */ VARIANT_BOOL Extend = 0,
            /* [defaultvalue][in] */ long Count = 1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextPane( 
            /* [retval][out] */ TextPane **ppPane) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Mode( 
            /* [retval][out] */ vsSelectionMode *pMode) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Mode( 
            /* [in] */ vsSelectionMode Mode) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_TextRanges( 
            /* [retval][out] */ TextRanges **ppRanges) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE Backspace( 
            /* [defaultvalue][in] */ long Count = 1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE Cancel( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE DestructiveInsert( 
            /* [in] */ BSTR Text) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE MoveTo( 
            /* [in] */ long Line,
            /* [in] */ long Column,
            /* [defaultvalue][in] */ VARIANT_BOOL Extend = 0) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE MoveToDisplayColumn( 
            /* [in] */ long Line,
            /* [in] */ long Column,
            /* [defaultvalue][in] */ VARIANT_BOOL Extend = 0) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE PageUp( 
            /* [defaultvalue][in] */ VARIANT_BOOL Extend = 0,
            /* [defaultvalue][in] */ long Count = 1) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE PageDown( 
            /* [defaultvalue][in] */ VARIANT_BOOL Extend = 0,
            /* [defaultvalue][in] */ long Count = 1) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TextSelectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TextSelection * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TextSelection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TextSelection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TextSelection * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TextSelection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TextSelection * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TextSelection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            TextSelection * This,
            /* [retval][out] */ DTE	**ppDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TextSelection * This,
            /* [retval][out] */ TextDocument **ppParent);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AnchorPoint )( 
            TextSelection * This,
            /* [retval][out] */ VirtualPoint **ppPoint);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActivePoint )( 
            TextSelection * This,
            /* [retval][out] */ VirtualPoint **ppPoint);
        
        /* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AnchorColumn )( 
            TextSelection * This,
            /* [retval][out] */ long *pColumn);
        
        /* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BottomLine )( 
            TextSelection * This,
            /* [retval][out] */ long *pLine);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_BottomPoint )( 
            TextSelection * This,
            /* [retval][out] */ VirtualPoint **ppPoint);
        
        /* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentColumn )( 
            TextSelection * This,
            /* [retval][out] */ long *pColumn);
        
        /* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentLine )( 
            TextSelection * This,
            /* [retval][out] */ long *pLine);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsEmpty )( 
            TextSelection * This,
            /* [retval][out] */ VARIANT_BOOL *pfEmpty);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsActiveEndGreater )( 
            TextSelection * This,
            /* [retval][out] */ VARIANT_BOOL *pfGreater);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Text )( 
            TextSelection * This,
            /* [retval][out] */ BSTR *pText);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Text )( 
            TextSelection * This,
            /* [in] */ BSTR Text);
        
        /* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TopLine )( 
            TextSelection * This,
            /* [retval][out] */ long *pLine);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TopPoint )( 
            TextSelection * This,
            /* [retval][out] */ VirtualPoint **ppPoint);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ChangeCase )( 
            TextSelection * This,
            /* [in] */ vsCaseOptions How);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CharLeft )( 
            TextSelection * This,
            /* [defaultvalue][in] */ VARIANT_BOOL Extend,
            /* [defaultvalue][in] */ long Count);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CharRight )( 
            TextSelection * This,
            /* [defaultvalue][in] */ VARIANT_BOOL Extend,
            /* [defaultvalue][in] */ long Count);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ClearBookmark )( 
            TextSelection * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Collapse )( 
            TextSelection * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *OutlineSection )( 
            TextSelection * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Copy )( 
            TextSelection * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Cut )( 
            TextSelection * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Paste )( 
            TextSelection * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            TextSelection * This,
            /* [defaultvalue][in] */ long Count);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteLeft )( 
            TextSelection * This,
            /* [defaultvalue][in] */ long Count);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteWhitespace )( 
            TextSelection * This,
            /* [defaultvalue][in] */ vsWhitespaceOptions Direction);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *EndOfLine )( 
            TextSelection * This,
            /* [defaultvalue][in] */ VARIANT_BOOL Extend);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *StartOfLine )( 
            TextSelection * This,
            /* [defaultvalue][in] */ vsStartOfLineOptions Where,
            /* [defaultvalue][in] */ VARIANT_BOOL Extend);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *EndOfDocument )( 
            TextSelection * This,
            /* [defaultvalue][in] */ VARIANT_BOOL Extend);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *StartOfDocument )( 
            TextSelection * This,
            /* [defaultvalue][in] */ VARIANT_BOOL Extend);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *FindPattern )( 
            TextSelection * This,
            /* [in] */ BSTR Pattern,
            /* [defaultvalue][in] */ long vsFindOptionsValue,
            /* [defaultvalue][out][in] */ TextRanges **Tags,
            /* [retval][out] */ VARIANT_BOOL *pfFound);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ReplacePattern )( 
            TextSelection * This,
            /* [in] */ BSTR Pattern,
            /* [in] */ BSTR Replace,
            /* [defaultvalue][in] */ long vsFindOptionsValue,
            /* [defaultvalue][out][in] */ TextRanges **Tags,
            /* [retval][out] */ VARIANT_BOOL *pfFound);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *FindText )( 
            TextSelection * This,
            /* [in] */ BSTR Pattern,
            /* [defaultvalue][in] */ long vsFindOptionsValue,
            /* [retval][out] */ VARIANT_BOOL *pfFound);
        
        /* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *ReplaceText )( 
            TextSelection * This,
            /* [in] */ BSTR Pattern,
            /* [in] */ BSTR Replace,
            /* [defaultvalue][in] */ long vsFindOptionsValue,
            /* [retval][out] */ VARIANT_BOOL *pfFound);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GotoLine )( 
            TextSelection * This,
            /* [in] */ long Line,
            /* [defaultvalue][in] */ VARIANT_BOOL Select);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Indent )( 
            TextSelection * This,
            /* [defaultvalue][in] */ long Count);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Unindent )( 
            TextSelection * This,
            /* [defaultvalue][in] */ long Count);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Insert )( 
            TextSelection * This,
            /* [in] */ BSTR Text,
            /* [defaultvalue][in] */ long vsInsertFlagsCollapseToEndValue);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *InsertFromFile )( 
            TextSelection * This,
            /* [in] */ BSTR File);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LineDown )( 
            TextSelection * This,
            /* [defaultvalue][in] */ VARIANT_BOOL Extend,
            /* [defaultvalue][in] */ long Count);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LineUp )( 
            TextSelection * This,
            /* [defaultvalue][in] */ VARIANT_BOOL Extend,
            /* [defaultvalue][in] */ long Count);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MoveToPoint )( 
            TextSelection * This,
            /* [in] */ TextPoint *Point,
            /* [defaultvalue][in] */ VARIANT_BOOL Extend);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MoveToLineAndOffset )( 
            TextSelection * This,
            /* [in] */ long Line,
            /* [in] */ long Offset,
            /* [defaultvalue][in] */ VARIANT_BOOL Extend);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MoveToAbsoluteOffset )( 
            TextSelection * This,
            /* [in] */ long Offset,
            /* [defaultvalue][in] */ VARIANT_BOOL Extend);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *NewLine )( 
            TextSelection * This,
            /* [defaultvalue][in] */ long Count);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SetBookmark )( 
            TextSelection * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *NextBookmark )( 
            TextSelection * This,
            /* [retval][out] */ VARIANT_BOOL *pbFound);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PreviousBookmark )( 
            TextSelection * This,
            /* [retval][out] */ VARIANT_BOOL *pbFound);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PadToColumn )( 
            TextSelection * This,
            /* [in] */ long Column);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SmartFormat )( 
            TextSelection * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SelectAll )( 
            TextSelection * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SelectLine )( 
            TextSelection * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *SwapAnchor )( 
            TextSelection * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Tabify )( 
            TextSelection * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Untabify )( 
            TextSelection * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *WordLeft )( 
            TextSelection * This,
            /* [defaultvalue][in] */ VARIANT_BOOL Extend,
            /* [defaultvalue][in] */ long Count);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *WordRight )( 
            TextSelection * This,
            /* [defaultvalue][in] */ VARIANT_BOOL Extend,
            /* [defaultvalue][in] */ long Count);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextPane )( 
            TextSelection * This,
            /* [retval][out] */ TextPane **ppPane);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Mode )( 
            TextSelection * This,
            /* [retval][out] */ vsSelectionMode *pMode);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Mode )( 
            TextSelection * This,
            /* [in] */ vsSelectionMode Mode);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TextRanges )( 
            TextSelection * This,
            /* [retval][out] */ TextRanges **ppRanges);
        
        /* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Backspace )( 
            TextSelection * This,
            /* [defaultvalue][in] */ long Count);
        
        /* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Cancel )( 
            TextSelection * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *DestructiveInsert )( 
            TextSelection * This,
            /* [in] */ BSTR Text);
        
        /* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *MoveTo )( 
            TextSelection * This,
            /* [in] */ long Line,
            /* [in] */ long Column,
            /* [defaultvalue][in] */ VARIANT_BOOL Extend);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MoveToDisplayColumn )( 
            TextSelection * This,
            /* [in] */ long Line,
            /* [in] */ long Column,
            /* [defaultvalue][in] */ VARIANT_BOOL Extend);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PageUp )( 
            TextSelection * This,
            /* [defaultvalue][in] */ VARIANT_BOOL Extend,
            /* [defaultvalue][in] */ long Count);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *PageDown )( 
            TextSelection * This,
            /* [defaultvalue][in] */ VARIANT_BOOL Extend,
            /* [defaultvalue][in] */ long Count);
        
        END_INTERFACE
    } TextSelectionVtbl;

    interface TextSelection
    {
        CONST_VTBL struct TextSelectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TextSelection_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define TextSelection_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define TextSelection_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define TextSelection_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define TextSelection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define TextSelection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define TextSelection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define TextSelection_get_DTE(This,ppDTE)	\
    (This)->lpVtbl -> get_DTE(This,ppDTE)

#define TextSelection_get_Parent(This,ppParent)	\
    (This)->lpVtbl -> get_Parent(This,ppParent)

#define TextSelection_get_AnchorPoint(This,ppPoint)	\
    (This)->lpVtbl -> get_AnchorPoint(This,ppPoint)

#define TextSelection_get_ActivePoint(This,ppPoint)	\
    (This)->lpVtbl -> get_ActivePoint(This,ppPoint)

#define TextSelection_get_AnchorColumn(This,pColumn)	\
    (This)->lpVtbl -> get_AnchorColumn(This,pColumn)

#define TextSelection_get_BottomLine(This,pLine)	\
    (This)->lpVtbl -> get_BottomLine(This,pLine)

#define TextSelection_get_BottomPoint(This,ppPoint)	\
    (This)->lpVtbl -> get_BottomPoint(This,ppPoint)

#define TextSelection_get_CurrentColumn(This,pColumn)	\
    (This)->lpVtbl -> get_CurrentColumn(This,pColumn)

#define TextSelection_get_CurrentLine(This,pLine)	\
    (This)->lpVtbl -> get_CurrentLine(This,pLine)

#define TextSelection_get_IsEmpty(This,pfEmpty)	\
    (This)->lpVtbl -> get_IsEmpty(This,pfEmpty)

#define TextSelection_get_IsActiveEndGreater(This,pfGreater)	\
    (This)->lpVtbl -> get_IsActiveEndGreater(This,pfGreater)

#define TextSelection_get_Text(This,pText)	\
    (This)->lpVtbl -> get_Text(This,pText)

#define TextSelection_put_Text(This,Text)	\
    (This)->lpVtbl -> put_Text(This,Text)

#define TextSelection_get_TopLine(This,pLine)	\
    (This)->lpVtbl -> get_TopLine(This,pLine)

#define TextSelection_get_TopPoint(This,ppPoint)	\
    (This)->lpVtbl -> get_TopPoint(This,ppPoint)

#define TextSelection_ChangeCase(This,How)	\
    (This)->lpVtbl -> ChangeCase(This,How)

#define TextSelection_CharLeft(This,Extend,Count)	\
    (This)->lpVtbl -> CharLeft(This,Extend,Count)

#define TextSelection_CharRight(This,Extend,Count)	\
    (This)->lpVtbl -> CharRight(This,Extend,Count)

#define TextSelection_ClearBookmark(This)	\
    (This)->lpVtbl -> ClearBookmark(This)

#define TextSelection_Collapse(This)	\
    (This)->lpVtbl -> Collapse(This)

#define TextSelection_OutlineSection(This)	\
    (This)->lpVtbl -> OutlineSection(This)

#define TextSelection_Copy(This)	\
    (This)->lpVtbl -> Copy(This)

#define TextSelection_Cut(This)	\
    (This)->lpVtbl -> Cut(This)

#define TextSelection_Paste(This)	\
    (This)->lpVtbl -> Paste(This)

#define TextSelection_Delete(This,Count)	\
    (This)->lpVtbl -> Delete(This,Count)

#define TextSelection_DeleteLeft(This,Count)	\
    (This)->lpVtbl -> DeleteLeft(This,Count)

#define TextSelection_DeleteWhitespace(This,Direction)	\
    (This)->lpVtbl -> DeleteWhitespace(This,Direction)

#define TextSelection_EndOfLine(This,Extend)	\
    (This)->lpVtbl -> EndOfLine(This,Extend)

#define TextSelection_StartOfLine(This,Where,Extend)	\
    (This)->lpVtbl -> StartOfLine(This,Where,Extend)

#define TextSelection_EndOfDocument(This,Extend)	\
    (This)->lpVtbl -> EndOfDocument(This,Extend)

#define TextSelection_StartOfDocument(This,Extend)	\
    (This)->lpVtbl -> StartOfDocument(This,Extend)

#define TextSelection_FindPattern(This,Pattern,vsFindOptionsValue,Tags,pfFound)	\
    (This)->lpVtbl -> FindPattern(This,Pattern,vsFindOptionsValue,Tags,pfFound)

#define TextSelection_ReplacePattern(This,Pattern,Replace,vsFindOptionsValue,Tags,pfFound)	\
    (This)->lpVtbl -> ReplacePattern(This,Pattern,Replace,vsFindOptionsValue,Tags,pfFound)

#define TextSelection_FindText(This,Pattern,vsFindOptionsValue,pfFound)	\
    (This)->lpVtbl -> FindText(This,Pattern,vsFindOptionsValue,pfFound)

#define TextSelection_ReplaceText(This,Pattern,Replace,vsFindOptionsValue,pfFound)	\
    (This)->lpVtbl -> ReplaceText(This,Pattern,Replace,vsFindOptionsValue,pfFound)

#define TextSelection_GotoLine(This,Line,Select)	\
    (This)->lpVtbl -> GotoLine(This,Line,Select)

#define TextSelection_Indent(This,Count)	\
    (This)->lpVtbl -> Indent(This,Count)

#define TextSelection_Unindent(This,Count)	\
    (This)->lpVtbl -> Unindent(This,Count)

#define TextSelection_Insert(This,Text,vsInsertFlagsCollapseToEndValue)	\
    (This)->lpVtbl -> Insert(This,Text,vsInsertFlagsCollapseToEndValue)

#define TextSelection_InsertFromFile(This,File)	\
    (This)->lpVtbl -> InsertFromFile(This,File)

#define TextSelection_LineDown(This,Extend,Count)	\
    (This)->lpVtbl -> LineDown(This,Extend,Count)

#define TextSelection_LineUp(This,Extend,Count)	\
    (This)->lpVtbl -> LineUp(This,Extend,Count)

#define TextSelection_MoveToPoint(This,Point,Extend)	\
    (This)->lpVtbl -> MoveToPoint(This,Point,Extend)

#define TextSelection_MoveToLineAndOffset(This,Line,Offset,Extend)	\
    (This)->lpVtbl -> MoveToLineAndOffset(This,Line,Offset,Extend)

#define TextSelection_MoveToAbsoluteOffset(This,Offset,Extend)	\
    (This)->lpVtbl -> MoveToAbsoluteOffset(This,Offset,Extend)

#define TextSelection_NewLine(This,Count)	\
    (This)->lpVtbl -> NewLine(This,Count)

#define TextSelection_SetBookmark(This)	\
    (This)->lpVtbl -> SetBookmark(This)

#define TextSelection_NextBookmark(This,pbFound)	\
    (This)->lpVtbl -> NextBookmark(This,pbFound)

#define TextSelection_PreviousBookmark(This,pbFound)	\
    (This)->lpVtbl -> PreviousBookmark(This,pbFound)

#define TextSelection_PadToColumn(This,Column)	\
    (This)->lpVtbl -> PadToColumn(This,Column)

#define TextSelection_SmartFormat(This)	\
    (This)->lpVtbl -> SmartFormat(This)

#define TextSelection_SelectAll(This)	\
    (This)->lpVtbl -> SelectAll(This)

#define TextSelection_SelectLine(This)	\
    (This)->lpVtbl -> SelectLine(This)

#define TextSelection_SwapAnchor(This)	\
    (This)->lpVtbl -> SwapAnchor(This)

#define TextSelection_Tabify(This)	\
    (This)->lpVtbl -> Tabify(This)

#define TextSelection_Untabify(This)	\
    (This)->lpVtbl -> Untabify(This)

#define TextSelection_WordLeft(This,Extend,Count)	\
    (This)->lpVtbl -> WordLeft(This,Extend,Count)

#define TextSelection_WordRight(This,Extend,Count)	\
    (This)->lpVtbl -> WordRight(This,Extend,Count)

#define TextSelection_get_TextPane(This,ppPane)	\
    (This)->lpVtbl -> get_TextPane(This,ppPane)

#define TextSelection_get_Mode(This,pMode)	\
    (This)->lpVtbl -> get_Mode(This,pMode)

#define TextSelection_put_Mode(This,Mode)	\
    (This)->lpVtbl -> put_Mode(This,Mode)

#define TextSelection_get_TextRanges(This,ppRanges)	\
    (This)->lpVtbl -> get_TextRanges(This,ppRanges)

#define TextSelection_Backspace(This,Count)	\
    (This)->lpVtbl -> Backspace(This,Count)

#define TextSelection_Cancel(This)	\
    (This)->lpVtbl -> Cancel(This)

#define TextSelection_DestructiveInsert(This,Text)	\
    (This)->lpVtbl -> DestructiveInsert(This,Text)

#define TextSelection_MoveTo(This,Line,Column,Extend)	\
    (This)->lpVtbl -> MoveTo(This,Line,Column,Extend)

#define TextSelection_MoveToDisplayColumn(This,Line,Column,Extend)	\
    (This)->lpVtbl -> MoveToDisplayColumn(This,Line,Column,Extend)

#define TextSelection_PageUp(This,Extend,Count)	\
    (This)->lpVtbl -> PageUp(This,Extend,Count)

#define TextSelection_PageDown(This,Extend,Count)	\
    (This)->lpVtbl -> PageDown(This,Extend,Count)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextSelection_get_DTE_Proxy( 
    TextSelection * This,
    /* [retval][out] */ DTE	**ppDTE);


void __RPC_STUB TextSelection_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextSelection_get_Parent_Proxy( 
    TextSelection * This,
    /* [retval][out] */ TextDocument **ppParent);


void __RPC_STUB TextSelection_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextSelection_get_AnchorPoint_Proxy( 
    TextSelection * This,
    /* [retval][out] */ VirtualPoint **ppPoint);


void __RPC_STUB TextSelection_get_AnchorPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextSelection_get_ActivePoint_Proxy( 
    TextSelection * This,
    /* [retval][out] */ VirtualPoint **ppPoint);


void __RPC_STUB TextSelection_get_ActivePoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE TextSelection_get_AnchorColumn_Proxy( 
    TextSelection * This,
    /* [retval][out] */ long *pColumn);


void __RPC_STUB TextSelection_get_AnchorColumn_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE TextSelection_get_BottomLine_Proxy( 
    TextSelection * This,
    /* [retval][out] */ long *pLine);


void __RPC_STUB TextSelection_get_BottomLine_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextSelection_get_BottomPoint_Proxy( 
    TextSelection * This,
    /* [retval][out] */ VirtualPoint **ppPoint);


void __RPC_STUB TextSelection_get_BottomPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE TextSelection_get_CurrentColumn_Proxy( 
    TextSelection * This,
    /* [retval][out] */ long *pColumn);


void __RPC_STUB TextSelection_get_CurrentColumn_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE TextSelection_get_CurrentLine_Proxy( 
    TextSelection * This,
    /* [retval][out] */ long *pLine);


void __RPC_STUB TextSelection_get_CurrentLine_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextSelection_get_IsEmpty_Proxy( 
    TextSelection * This,
    /* [retval][out] */ VARIANT_BOOL *pfEmpty);


void __RPC_STUB TextSelection_get_IsEmpty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextSelection_get_IsActiveEndGreater_Proxy( 
    TextSelection * This,
    /* [retval][out] */ VARIANT_BOOL *pfGreater);


void __RPC_STUB TextSelection_get_IsActiveEndGreater_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextSelection_get_Text_Proxy( 
    TextSelection * This,
    /* [retval][out] */ BSTR *pText);


void __RPC_STUB TextSelection_get_Text_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE TextSelection_put_Text_Proxy( 
    TextSelection * This,
    /* [in] */ BSTR Text);


void __RPC_STUB TextSelection_put_Text_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE TextSelection_get_TopLine_Proxy( 
    TextSelection * This,
    /* [retval][out] */ long *pLine);


void __RPC_STUB TextSelection_get_TopLine_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextSelection_get_TopPoint_Proxy( 
    TextSelection * This,
    /* [retval][out] */ VirtualPoint **ppPoint);


void __RPC_STUB TextSelection_get_TopPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_ChangeCase_Proxy( 
    TextSelection * This,
    /* [in] */ vsCaseOptions How);


void __RPC_STUB TextSelection_ChangeCase_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_CharLeft_Proxy( 
    TextSelection * This,
    /* [defaultvalue][in] */ VARIANT_BOOL Extend,
    /* [defaultvalue][in] */ long Count);


void __RPC_STUB TextSelection_CharLeft_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_CharRight_Proxy( 
    TextSelection * This,
    /* [defaultvalue][in] */ VARIANT_BOOL Extend,
    /* [defaultvalue][in] */ long Count);


void __RPC_STUB TextSelection_CharRight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_ClearBookmark_Proxy( 
    TextSelection * This);


void __RPC_STUB TextSelection_ClearBookmark_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_Collapse_Proxy( 
    TextSelection * This);


void __RPC_STUB TextSelection_Collapse_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_OutlineSection_Proxy( 
    TextSelection * This);


void __RPC_STUB TextSelection_OutlineSection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_Copy_Proxy( 
    TextSelection * This);


void __RPC_STUB TextSelection_Copy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_Cut_Proxy( 
    TextSelection * This);


void __RPC_STUB TextSelection_Cut_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_Paste_Proxy( 
    TextSelection * This);


void __RPC_STUB TextSelection_Paste_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_Delete_Proxy( 
    TextSelection * This,
    /* [defaultvalue][in] */ long Count);


void __RPC_STUB TextSelection_Delete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_DeleteLeft_Proxy( 
    TextSelection * This,
    /* [defaultvalue][in] */ long Count);


void __RPC_STUB TextSelection_DeleteLeft_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_DeleteWhitespace_Proxy( 
    TextSelection * This,
    /* [defaultvalue][in] */ vsWhitespaceOptions Direction);


void __RPC_STUB TextSelection_DeleteWhitespace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_EndOfLine_Proxy( 
    TextSelection * This,
    /* [defaultvalue][in] */ VARIANT_BOOL Extend);


void __RPC_STUB TextSelection_EndOfLine_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_StartOfLine_Proxy( 
    TextSelection * This,
    /* [defaultvalue][in] */ vsStartOfLineOptions Where,
    /* [defaultvalue][in] */ VARIANT_BOOL Extend);


void __RPC_STUB TextSelection_StartOfLine_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_EndOfDocument_Proxy( 
    TextSelection * This,
    /* [defaultvalue][in] */ VARIANT_BOOL Extend);


void __RPC_STUB TextSelection_EndOfDocument_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_StartOfDocument_Proxy( 
    TextSelection * This,
    /* [defaultvalue][in] */ VARIANT_BOOL Extend);


void __RPC_STUB TextSelection_StartOfDocument_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_FindPattern_Proxy( 
    TextSelection * This,
    /* [in] */ BSTR Pattern,
    /* [defaultvalue][in] */ long vsFindOptionsValue,
    /* [defaultvalue][out][in] */ TextRanges **Tags,
    /* [retval][out] */ VARIANT_BOOL *pfFound);


void __RPC_STUB TextSelection_FindPattern_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_ReplacePattern_Proxy( 
    TextSelection * This,
    /* [in] */ BSTR Pattern,
    /* [in] */ BSTR Replace,
    /* [defaultvalue][in] */ long vsFindOptionsValue,
    /* [defaultvalue][out][in] */ TextRanges **Tags,
    /* [retval][out] */ VARIANT_BOOL *pfFound);


void __RPC_STUB TextSelection_ReplacePattern_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_FindText_Proxy( 
    TextSelection * This,
    /* [in] */ BSTR Pattern,
    /* [defaultvalue][in] */ long vsFindOptionsValue,
    /* [retval][out] */ VARIANT_BOOL *pfFound);


void __RPC_STUB TextSelection_FindText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE TextSelection_ReplaceText_Proxy( 
    TextSelection * This,
    /* [in] */ BSTR Pattern,
    /* [in] */ BSTR Replace,
    /* [defaultvalue][in] */ long vsFindOptionsValue,
    /* [retval][out] */ VARIANT_BOOL *pfFound);


void __RPC_STUB TextSelection_ReplaceText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_GotoLine_Proxy( 
    TextSelection * This,
    /* [in] */ long Line,
    /* [defaultvalue][in] */ VARIANT_BOOL Select);


void __RPC_STUB TextSelection_GotoLine_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_Indent_Proxy( 
    TextSelection * This,
    /* [defaultvalue][in] */ long Count);


void __RPC_STUB TextSelection_Indent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_Unindent_Proxy( 
    TextSelection * This,
    /* [defaultvalue][in] */ long Count);


void __RPC_STUB TextSelection_Unindent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_Insert_Proxy( 
    TextSelection * This,
    /* [in] */ BSTR Text,
    /* [defaultvalue][in] */ long vsInsertFlagsCollapseToEndValue);


void __RPC_STUB TextSelection_Insert_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_InsertFromFile_Proxy( 
    TextSelection * This,
    /* [in] */ BSTR File);


void __RPC_STUB TextSelection_InsertFromFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_LineDown_Proxy( 
    TextSelection * This,
    /* [defaultvalue][in] */ VARIANT_BOOL Extend,
    /* [defaultvalue][in] */ long Count);


void __RPC_STUB TextSelection_LineDown_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_LineUp_Proxy( 
    TextSelection * This,
    /* [defaultvalue][in] */ VARIANT_BOOL Extend,
    /* [defaultvalue][in] */ long Count);


void __RPC_STUB TextSelection_LineUp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_MoveToPoint_Proxy( 
    TextSelection * This,
    /* [in] */ TextPoint *Point,
    /* [defaultvalue][in] */ VARIANT_BOOL Extend);


void __RPC_STUB TextSelection_MoveToPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_MoveToLineAndOffset_Proxy( 
    TextSelection * This,
    /* [in] */ long Line,
    /* [in] */ long Offset,
    /* [defaultvalue][in] */ VARIANT_BOOL Extend);


void __RPC_STUB TextSelection_MoveToLineAndOffset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_MoveToAbsoluteOffset_Proxy( 
    TextSelection * This,
    /* [in] */ long Offset,
    /* [defaultvalue][in] */ VARIANT_BOOL Extend);


void __RPC_STUB TextSelection_MoveToAbsoluteOffset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_NewLine_Proxy( 
    TextSelection * This,
    /* [defaultvalue][in] */ long Count);


void __RPC_STUB TextSelection_NewLine_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_SetBookmark_Proxy( 
    TextSelection * This);


void __RPC_STUB TextSelection_SetBookmark_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_NextBookmark_Proxy( 
    TextSelection * This,
    /* [retval][out] */ VARIANT_BOOL *pbFound);


void __RPC_STUB TextSelection_NextBookmark_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_PreviousBookmark_Proxy( 
    TextSelection * This,
    /* [retval][out] */ VARIANT_BOOL *pbFound);


void __RPC_STUB TextSelection_PreviousBookmark_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_PadToColumn_Proxy( 
    TextSelection * This,
    /* [in] */ long Column);


void __RPC_STUB TextSelection_PadToColumn_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_SmartFormat_Proxy( 
    TextSelection * This);


void __RPC_STUB TextSelection_SmartFormat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_SelectAll_Proxy( 
    TextSelection * This);


void __RPC_STUB TextSelection_SelectAll_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_SelectLine_Proxy( 
    TextSelection * This);


void __RPC_STUB TextSelection_SelectLine_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_SwapAnchor_Proxy( 
    TextSelection * This);


void __RPC_STUB TextSelection_SwapAnchor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_Tabify_Proxy( 
    TextSelection * This);


void __RPC_STUB TextSelection_Tabify_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_Untabify_Proxy( 
    TextSelection * This);


void __RPC_STUB TextSelection_Untabify_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_WordLeft_Proxy( 
    TextSelection * This,
    /* [defaultvalue][in] */ VARIANT_BOOL Extend,
    /* [defaultvalue][in] */ long Count);


void __RPC_STUB TextSelection_WordLeft_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_WordRight_Proxy( 
    TextSelection * This,
    /* [defaultvalue][in] */ VARIANT_BOOL Extend,
    /* [defaultvalue][in] */ long Count);


void __RPC_STUB TextSelection_WordRight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextSelection_get_TextPane_Proxy( 
    TextSelection * This,
    /* [retval][out] */ TextPane **ppPane);


void __RPC_STUB TextSelection_get_TextPane_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextSelection_get_Mode_Proxy( 
    TextSelection * This,
    /* [retval][out] */ vsSelectionMode *pMode);


void __RPC_STUB TextSelection_get_Mode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE TextSelection_put_Mode_Proxy( 
    TextSelection * This,
    /* [in] */ vsSelectionMode Mode);


void __RPC_STUB TextSelection_put_Mode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextSelection_get_TextRanges_Proxy( 
    TextSelection * This,
    /* [retval][out] */ TextRanges **ppRanges);


void __RPC_STUB TextSelection_get_TextRanges_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE TextSelection_Backspace_Proxy( 
    TextSelection * This,
    /* [defaultvalue][in] */ long Count);


void __RPC_STUB TextSelection_Backspace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE TextSelection_Cancel_Proxy( 
    TextSelection * This);


void __RPC_STUB TextSelection_Cancel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_DestructiveInsert_Proxy( 
    TextSelection * This,
    /* [in] */ BSTR Text);


void __RPC_STUB TextSelection_DestructiveInsert_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE TextSelection_MoveTo_Proxy( 
    TextSelection * This,
    /* [in] */ long Line,
    /* [in] */ long Column,
    /* [defaultvalue][in] */ VARIANT_BOOL Extend);


void __RPC_STUB TextSelection_MoveTo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_MoveToDisplayColumn_Proxy( 
    TextSelection * This,
    /* [in] */ long Line,
    /* [in] */ long Column,
    /* [defaultvalue][in] */ VARIANT_BOOL Extend);


void __RPC_STUB TextSelection_MoveToDisplayColumn_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_PageUp_Proxy( 
    TextSelection * This,
    /* [defaultvalue][in] */ VARIANT_BOOL Extend,
    /* [defaultvalue][in] */ long Count);


void __RPC_STUB TextSelection_PageUp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextSelection_PageDown_Proxy( 
    TextSelection * This,
    /* [defaultvalue][in] */ VARIANT_BOOL Extend,
    /* [defaultvalue][in] */ long Count);


void __RPC_STUB TextSelection_PageDown_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __TextSelection_INTERFACE_DEFINED__ */


#ifndef __TextRanges_INTERFACE_DEFINED__
#define __TextRanges_INTERFACE_DEFINED__

/* interface TextRanges */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_TextRanges;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b6422e9c-9efd-4f87-bddc-c7fd8f2fd303")
    TextRanges : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**ppDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ TextDocument **ppParent) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *pCount) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ TextRange **ppRange) = 0;
        
        virtual /* [id][restricted] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **lppiuReturn) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TextRangesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TextRanges * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TextRanges * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TextRanges * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TextRanges * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TextRanges * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TextRanges * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TextRanges * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            TextRanges * This,
            /* [retval][out] */ DTE	**ppDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TextRanges * This,
            /* [retval][out] */ TextDocument **ppParent);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            TextRanges * This,
            /* [retval][out] */ long *pCount);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            TextRanges * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ TextRange **ppRange);
        
        /* [id][restricted] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            TextRanges * This,
            /* [retval][out] */ IUnknown **lppiuReturn);
        
        END_INTERFACE
    } TextRangesVtbl;

    interface TextRanges
    {
        CONST_VTBL struct TextRangesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TextRanges_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define TextRanges_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define TextRanges_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define TextRanges_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define TextRanges_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define TextRanges_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define TextRanges_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define TextRanges_get_DTE(This,ppDTE)	\
    (This)->lpVtbl -> get_DTE(This,ppDTE)

#define TextRanges_get_Parent(This,ppParent)	\
    (This)->lpVtbl -> get_Parent(This,ppParent)

#define TextRanges_get_Count(This,pCount)	\
    (This)->lpVtbl -> get_Count(This,pCount)

#define TextRanges_Item(This,Index,ppRange)	\
    (This)->lpVtbl -> Item(This,Index,ppRange)

#define TextRanges__NewEnum(This,lppiuReturn)	\
    (This)->lpVtbl -> _NewEnum(This,lppiuReturn)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextRanges_get_DTE_Proxy( 
    TextRanges * This,
    /* [retval][out] */ DTE	**ppDTE);


void __RPC_STUB TextRanges_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextRanges_get_Parent_Proxy( 
    TextRanges * This,
    /* [retval][out] */ TextDocument **ppParent);


void __RPC_STUB TextRanges_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextRanges_get_Count_Proxy( 
    TextRanges * This,
    /* [retval][out] */ long *pCount);


void __RPC_STUB TextRanges_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextRanges_Item_Proxy( 
    TextRanges * This,
    /* [in] */ VARIANT Index,
    /* [retval][out] */ TextRange **ppRange);


void __RPC_STUB TextRanges_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][restricted] */ HRESULT STDMETHODCALLTYPE TextRanges__NewEnum_Proxy( 
    TextRanges * This,
    /* [retval][out] */ IUnknown **lppiuReturn);


void __RPC_STUB TextRanges__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __TextRanges_INTERFACE_DEFINED__ */


#ifndef __TextRange_INTERFACE_DEFINED__
#define __TextRange_INTERFACE_DEFINED__

/* interface TextRange */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_TextRange;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("72767524-e3b3-43d0-bb46-bbe1d556a9ff")
    TextRange : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**ppDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ TextRanges **ppParent) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartPoint( 
            /* [retval][out] */ EditPoint **ppPoint) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndPoint( 
            /* [retval][out] */ EditPoint **ppPoint) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TextRangeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TextRange * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TextRange * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TextRange * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TextRange * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TextRange * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TextRange * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TextRange * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            TextRange * This,
            /* [retval][out] */ DTE	**ppDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            TextRange * This,
            /* [retval][out] */ TextRanges **ppParent);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartPoint )( 
            TextRange * This,
            /* [retval][out] */ EditPoint **ppPoint);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndPoint )( 
            TextRange * This,
            /* [retval][out] */ EditPoint **ppPoint);
        
        END_INTERFACE
    } TextRangeVtbl;

    interface TextRange
    {
        CONST_VTBL struct TextRangeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TextRange_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define TextRange_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define TextRange_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define TextRange_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define TextRange_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define TextRange_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define TextRange_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define TextRange_get_DTE(This,ppDTE)	\
    (This)->lpVtbl -> get_DTE(This,ppDTE)

#define TextRange_get_Collection(This,ppParent)	\
    (This)->lpVtbl -> get_Collection(This,ppParent)

#define TextRange_get_StartPoint(This,ppPoint)	\
    (This)->lpVtbl -> get_StartPoint(This,ppPoint)

#define TextRange_get_EndPoint(This,ppPoint)	\
    (This)->lpVtbl -> get_EndPoint(This,ppPoint)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextRange_get_DTE_Proxy( 
    TextRange * This,
    /* [retval][out] */ DTE	**ppDTE);


void __RPC_STUB TextRange_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextRange_get_Collection_Proxy( 
    TextRange * This,
    /* [retval][out] */ TextRanges **ppParent);


void __RPC_STUB TextRange_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextRange_get_StartPoint_Proxy( 
    TextRange * This,
    /* [retval][out] */ EditPoint **ppPoint);


void __RPC_STUB TextRange_get_StartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextRange_get_EndPoint_Proxy( 
    TextRange * This,
    /* [retval][out] */ EditPoint **ppPoint);


void __RPC_STUB TextRange_get_EndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __TextRange_INTERFACE_DEFINED__ */


#ifndef __TextDocument_INTERFACE_DEFINED__
#define __TextDocument_INTERFACE_DEFINED__

/* interface TextDocument */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_TextDocument;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("cb218890-1382-472b-9118-782700c88115")
    TextDocument : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**ppDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Document **ppParent) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Selection( 
            /* [out][retval] */ TextSelection **ppSel) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ClearBookmarks( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE MarkText( 
            /* [in] */ BSTR Pattern,
            /* [defaultvalue][in] */ long vsFindOptionsValue,
            /* [retval][out] */ VARIANT_BOOL *pbRetVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE ReplacePattern( 
            /* [in] */ BSTR Pattern,
            /* [in] */ BSTR Replace,
            /* [defaultvalue][in] */ long vsFindOptionsValue,
            /* [defaultvalue][out][in] */ TextRanges **Tags,
            /* [retval][out] */ VARIANT_BOOL *pbRetVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateEditPoint( 
            /* [defaultvalue][in] */ TextPoint *TextPoint,
            /* [retval][out] */ EditPoint **lppaReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartPoint( 
            /* [out][retval] */ TextPoint **pStartPoint) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndPoint( 
            /* [out][retval] */ TextPoint **pEndPoint) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_Language( 
            /* [retval][out] */ BSTR *pLanguage) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE put_Language( 
            /* [in] */ BSTR Language) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][hidden][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [out][retval] */ BSTR *pType) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_IndentSize( 
            /* [retval][out] */ long *pSize) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE get_TabSize( 
            /* [retval][out] */ long *pSize) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE ReplaceText( 
            /* [in] */ BSTR FindText,
            /* [in] */ BSTR ReplaceText,
            /* [defaultvalue][in] */ long vsFindOptionsValue,
            /* [retval][out] */ VARIANT_BOOL *pbRetVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE PrintOut( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TextDocumentVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TextDocument * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TextDocument * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TextDocument * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TextDocument * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TextDocument * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TextDocument * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TextDocument * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            TextDocument * This,
            /* [retval][out] */ DTE	**ppDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TextDocument * This,
            /* [retval][out] */ Document **ppParent);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Selection )( 
            TextDocument * This,
            /* [out][retval] */ TextSelection **ppSel);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ClearBookmarks )( 
            TextDocument * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *MarkText )( 
            TextDocument * This,
            /* [in] */ BSTR Pattern,
            /* [defaultvalue][in] */ long vsFindOptionsValue,
            /* [retval][out] */ VARIANT_BOOL *pbRetVal);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *ReplacePattern )( 
            TextDocument * This,
            /* [in] */ BSTR Pattern,
            /* [in] */ BSTR Replace,
            /* [defaultvalue][in] */ long vsFindOptionsValue,
            /* [defaultvalue][out][in] */ TextRanges **Tags,
            /* [retval][out] */ VARIANT_BOOL *pbRetVal);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateEditPoint )( 
            TextDocument * This,
            /* [defaultvalue][in] */ TextPoint *TextPoint,
            /* [retval][out] */ EditPoint **lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartPoint )( 
            TextDocument * This,
            /* [out][retval] */ TextPoint **pStartPoint);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndPoint )( 
            TextDocument * This,
            /* [out][retval] */ TextPoint **pEndPoint);
        
        /* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Language )( 
            TextDocument * This,
            /* [retval][out] */ BSTR *pLanguage);
        
        /* [helpstringcontext][helpstring][helpcontext][hidden][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Language )( 
            TextDocument * This,
            /* [in] */ BSTR Language);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            TextDocument * This,
            /* [out][retval] */ BSTR *pType);
        
        /* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IndentSize )( 
            TextDocument * This,
            /* [retval][out] */ long *pSize);
        
        /* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_TabSize )( 
            TextDocument * This,
            /* [retval][out] */ long *pSize);
        
        /* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *ReplaceText )( 
            TextDocument * This,
            /* [in] */ BSTR FindText,
            /* [in] */ BSTR ReplaceText,
            /* [defaultvalue][in] */ long vsFindOptionsValue,
            /* [retval][out] */ VARIANT_BOOL *pbRetVal);
        
        /* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *PrintOut )( 
            TextDocument * This);
        
        END_INTERFACE
    } TextDocumentVtbl;

    interface TextDocument
    {
        CONST_VTBL struct TextDocumentVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TextDocument_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define TextDocument_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define TextDocument_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define TextDocument_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define TextDocument_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define TextDocument_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define TextDocument_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define TextDocument_get_DTE(This,ppDTE)	\
    (This)->lpVtbl -> get_DTE(This,ppDTE)

#define TextDocument_get_Parent(This,ppParent)	\
    (This)->lpVtbl -> get_Parent(This,ppParent)

#define TextDocument_get_Selection(This,ppSel)	\
    (This)->lpVtbl -> get_Selection(This,ppSel)

#define TextDocument_ClearBookmarks(This)	\
    (This)->lpVtbl -> ClearBookmarks(This)

#define TextDocument_MarkText(This,Pattern,vsFindOptionsValue,pbRetVal)	\
    (This)->lpVtbl -> MarkText(This,Pattern,vsFindOptionsValue,pbRetVal)

#define TextDocument_ReplacePattern(This,Pattern,Replace,vsFindOptionsValue,Tags,pbRetVal)	\
    (This)->lpVtbl -> ReplacePattern(This,Pattern,Replace,vsFindOptionsValue,Tags,pbRetVal)

#define TextDocument_CreateEditPoint(This,TextPoint,lppaReturn)	\
    (This)->lpVtbl -> CreateEditPoint(This,TextPoint,lppaReturn)

#define TextDocument_get_StartPoint(This,pStartPoint)	\
    (This)->lpVtbl -> get_StartPoint(This,pStartPoint)

#define TextDocument_get_EndPoint(This,pEndPoint)	\
    (This)->lpVtbl -> get_EndPoint(This,pEndPoint)

#define TextDocument_get_Language(This,pLanguage)	\
    (This)->lpVtbl -> get_Language(This,pLanguage)

#define TextDocument_put_Language(This,Language)	\
    (This)->lpVtbl -> put_Language(This,Language)

#define TextDocument_get_Type(This,pType)	\
    (This)->lpVtbl -> get_Type(This,pType)

#define TextDocument_get_IndentSize(This,pSize)	\
    (This)->lpVtbl -> get_IndentSize(This,pSize)

#define TextDocument_get_TabSize(This,pSize)	\
    (This)->lpVtbl -> get_TabSize(This,pSize)

#define TextDocument_ReplaceText(This,FindText,ReplaceText,vsFindOptionsValue,pbRetVal)	\
    (This)->lpVtbl -> ReplaceText(This,FindText,ReplaceText,vsFindOptionsValue,pbRetVal)

#define TextDocument_PrintOut(This)	\
    (This)->lpVtbl -> PrintOut(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextDocument_get_DTE_Proxy( 
    TextDocument * This,
    /* [retval][out] */ DTE	**ppDTE);


void __RPC_STUB TextDocument_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextDocument_get_Parent_Proxy( 
    TextDocument * This,
    /* [retval][out] */ Document **ppParent);


void __RPC_STUB TextDocument_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextDocument_get_Selection_Proxy( 
    TextDocument * This,
    /* [out][retval] */ TextSelection **ppSel);


void __RPC_STUB TextDocument_get_Selection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextDocument_ClearBookmarks_Proxy( 
    TextDocument * This);


void __RPC_STUB TextDocument_ClearBookmarks_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextDocument_MarkText_Proxy( 
    TextDocument * This,
    /* [in] */ BSTR Pattern,
    /* [defaultvalue][in] */ long vsFindOptionsValue,
    /* [retval][out] */ VARIANT_BOOL *pbRetVal);


void __RPC_STUB TextDocument_MarkText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextDocument_ReplacePattern_Proxy( 
    TextDocument * This,
    /* [in] */ BSTR Pattern,
    /* [in] */ BSTR Replace,
    /* [defaultvalue][in] */ long vsFindOptionsValue,
    /* [defaultvalue][out][in] */ TextRanges **Tags,
    /* [retval][out] */ VARIANT_BOOL *pbRetVal);


void __RPC_STUB TextDocument_ReplacePattern_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextDocument_CreateEditPoint_Proxy( 
    TextDocument * This,
    /* [defaultvalue][in] */ TextPoint *TextPoint,
    /* [retval][out] */ EditPoint **lppaReturn);


void __RPC_STUB TextDocument_CreateEditPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextDocument_get_StartPoint_Proxy( 
    TextDocument * This,
    /* [out][retval] */ TextPoint **pStartPoint);


void __RPC_STUB TextDocument_get_StartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextDocument_get_EndPoint_Proxy( 
    TextDocument * This,
    /* [out][retval] */ TextPoint **pEndPoint);


void __RPC_STUB TextDocument_get_EndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE TextDocument_get_Language_Proxy( 
    TextDocument * This,
    /* [retval][out] */ BSTR *pLanguage);


void __RPC_STUB TextDocument_get_Language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][hidden][propput][id] */ HRESULT STDMETHODCALLTYPE TextDocument_put_Language_Proxy( 
    TextDocument * This,
    /* [in] */ BSTR Language);


void __RPC_STUB TextDocument_put_Language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][hidden][id] */ HRESULT STDMETHODCALLTYPE TextDocument_get_Type_Proxy( 
    TextDocument * This,
    /* [out][retval] */ BSTR *pType);


void __RPC_STUB TextDocument_get_Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE TextDocument_get_IndentSize_Proxy( 
    TextDocument * This,
    /* [retval][out] */ long *pSize);


void __RPC_STUB TextDocument_get_IndentSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][hidden][propget][id] */ HRESULT STDMETHODCALLTYPE TextDocument_get_TabSize_Proxy( 
    TextDocument * This,
    /* [retval][out] */ long *pSize);


void __RPC_STUB TextDocument_get_TabSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE TextDocument_ReplaceText_Proxy( 
    TextDocument * This,
    /* [in] */ BSTR FindText,
    /* [in] */ BSTR ReplaceText,
    /* [defaultvalue][in] */ long vsFindOptionsValue,
    /* [retval][out] */ VARIANT_BOOL *pbRetVal);


void __RPC_STUB TextDocument_ReplaceText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][hidden][id] */ HRESULT STDMETHODCALLTYPE TextDocument_PrintOut_Proxy( 
    TextDocument * This);


void __RPC_STUB TextDocument_PrintOut_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __TextDocument_INTERFACE_DEFINED__ */


#ifndef __VirtualPoint_INTERFACE_DEFINED__
#define __VirtualPoint_INTERFACE_DEFINED__

/* interface VirtualPoint */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_VirtualPoint;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("42320454-626c-4dd0-9ecb-357c4f1966d8")
    VirtualPoint : public TextPoint
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_VirtualCharOffset( 
            /* [retval][out] */ long *pOffset) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_VirtualDisplayColumn( 
            /* [retval][out] */ long *lppaReturn) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct VirtualPointVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            VirtualPoint * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            VirtualPoint * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            VirtualPoint * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            VirtualPoint * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            VirtualPoint * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            VirtualPoint * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            VirtualPoint * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            VirtualPoint * This,
            /* [retval][out] */ DTE	**lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            VirtualPoint * This,
            /* [retval][out] */ TextDocument **lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Line )( 
            VirtualPoint * This,
            /* [retval][out] */ long *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LineCharOffset )( 
            VirtualPoint * This,
            /* [retval][out] */ long *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AbsoluteCharOffset )( 
            VirtualPoint * This,
            /* [retval][out] */ long *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DisplayColumn )( 
            VirtualPoint * This,
            /* [retval][out] */ long *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AtEndOfDocument )( 
            VirtualPoint * This,
            /* [retval][out] */ VARIANT_BOOL *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AtStartOfDocument )( 
            VirtualPoint * This,
            /* [retval][out] */ VARIANT_BOOL *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AtEndOfLine )( 
            VirtualPoint * This,
            /* [retval][out] */ VARIANT_BOOL *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_AtStartOfLine )( 
            VirtualPoint * This,
            /* [retval][out] */ VARIANT_BOOL *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_LineLength )( 
            VirtualPoint * This,
            /* [retval][out] */ long *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *EqualTo )( 
            VirtualPoint * This,
            /* [in] */ TextPoint *Point,
            /* [retval][out] */ VARIANT_BOOL *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *LessThan )( 
            VirtualPoint * This,
            /* [in] */ TextPoint *Point,
            /* [retval][out] */ VARIANT_BOOL *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GreaterThan )( 
            VirtualPoint * This,
            /* [in] */ TextPoint *Point,
            /* [retval][out] */ VARIANT_BOOL *lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *TryToShow )( 
            VirtualPoint * This,
            /* [defaultvalue][in] */ vsPaneShowHow How,
            /* [optional][in] */ VARIANT PointOrCount,
            /* [retval][out] */ VARIANT_BOOL *pbResult);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CodeElement )( 
            VirtualPoint * This,
            /* [in] */ vsCMElement Scope,
            /* [retval][out] */ CodeElement **ppResult);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateEditPoint )( 
            VirtualPoint * This,
            /* [retval][out] */ EditPoint **lppaReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VirtualCharOffset )( 
            VirtualPoint * This,
            /* [retval][out] */ long *pOffset);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VirtualDisplayColumn )( 
            VirtualPoint * This,
            /* [retval][out] */ long *lppaReturn);
        
        END_INTERFACE
    } VirtualPointVtbl;

    interface VirtualPoint
    {
        CONST_VTBL struct VirtualPointVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define VirtualPoint_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define VirtualPoint_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define VirtualPoint_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define VirtualPoint_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define VirtualPoint_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define VirtualPoint_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define VirtualPoint_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define VirtualPoint_get_DTE(This,lppaReturn)	\
    (This)->lpVtbl -> get_DTE(This,lppaReturn)

#define VirtualPoint_get_Parent(This,lppaReturn)	\
    (This)->lpVtbl -> get_Parent(This,lppaReturn)

#define VirtualPoint_get_Line(This,lppaReturn)	\
    (This)->lpVtbl -> get_Line(This,lppaReturn)

#define VirtualPoint_get_LineCharOffset(This,lppaReturn)	\
    (This)->lpVtbl -> get_LineCharOffset(This,lppaReturn)

#define VirtualPoint_get_AbsoluteCharOffset(This,lppaReturn)	\
    (This)->lpVtbl -> get_AbsoluteCharOffset(This,lppaReturn)

#define VirtualPoint_get_DisplayColumn(This,lppaReturn)	\
    (This)->lpVtbl -> get_DisplayColumn(This,lppaReturn)

#define VirtualPoint_get_AtEndOfDocument(This,lppaReturn)	\
    (This)->lpVtbl -> get_AtEndOfDocument(This,lppaReturn)

#define VirtualPoint_get_AtStartOfDocument(This,lppaReturn)	\
    (This)->lpVtbl -> get_AtStartOfDocument(This,lppaReturn)

#define VirtualPoint_get_AtEndOfLine(This,lppaReturn)	\
    (This)->lpVtbl -> get_AtEndOfLine(This,lppaReturn)

#define VirtualPoint_get_AtStartOfLine(This,lppaReturn)	\
    (This)->lpVtbl -> get_AtStartOfLine(This,lppaReturn)

#define VirtualPoint_get_LineLength(This,lppaReturn)	\
    (This)->lpVtbl -> get_LineLength(This,lppaReturn)

#define VirtualPoint_EqualTo(This,Point,lppaReturn)	\
    (This)->lpVtbl -> EqualTo(This,Point,lppaReturn)

#define VirtualPoint_LessThan(This,Point,lppaReturn)	\
    (This)->lpVtbl -> LessThan(This,Point,lppaReturn)

#define VirtualPoint_GreaterThan(This,Point,lppaReturn)	\
    (This)->lpVtbl -> GreaterThan(This,Point,lppaReturn)

#define VirtualPoint_TryToShow(This,How,PointOrCount,pbResult)	\
    (This)->lpVtbl -> TryToShow(This,How,PointOrCount,pbResult)

#define VirtualPoint_get_CodeElement(This,Scope,ppResult)	\
    (This)->lpVtbl -> get_CodeElement(This,Scope,ppResult)

#define VirtualPoint_CreateEditPoint(This,lppaReturn)	\
    (This)->lpVtbl -> CreateEditPoint(This,lppaReturn)


#define VirtualPoint_get_VirtualCharOffset(This,pOffset)	\
    (This)->lpVtbl -> get_VirtualCharOffset(This,pOffset)

#define VirtualPoint_get_VirtualDisplayColumn(This,lppaReturn)	\
    (This)->lpVtbl -> get_VirtualDisplayColumn(This,lppaReturn)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE VirtualPoint_get_VirtualCharOffset_Proxy( 
    VirtualPoint * This,
    /* [retval][out] */ long *pOffset);


void __RPC_STUB VirtualPoint_get_VirtualCharOffset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE VirtualPoint_get_VirtualDisplayColumn_Proxy( 
    VirtualPoint * This,
    /* [retval][out] */ long *lppaReturn);


void __RPC_STUB VirtualPoint_get_VirtualDisplayColumn_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __VirtualPoint_INTERFACE_DEFINED__ */


#ifndef __TextPane_INTERFACE_DEFINED__
#define __TextPane_INTERFACE_DEFINED__

/* interface TextPane */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_TextPane;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0a3bf283-05f8-4669-9bcb-a84b6423349a")
    TextPane : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**ppDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ TextPanes **ppPanes) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Window( 
            /* [retval][out] */ Window **ppWin) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Height( 
            /* [retval][out] */ long *pHeight) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Width( 
            /* [retval][out] */ long *pWidth) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Selection( 
            /* [retval][out] */ TextSelection **ppSel) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartPoint( 
            /* [retval][out] */ TextPoint **ppPoint) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Activate( void) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE IsVisible( 
            /* [in] */ TextPoint *Point,
            /* [optional][in] */ VARIANT PointOrCount,
            /* [retval][out] */ VARIANT_BOOL *pbResult) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TryToShow( 
            /* [in] */ TextPoint *Point,
            /* [defaultvalue][in] */ vsPaneShowHow How,
            /* [optional][in] */ VARIANT PointOrCount,
            /* [retval][out] */ VARIANT_BOOL *pbResult) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TextPaneVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TextPane * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TextPane * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TextPane * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TextPane * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TextPane * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TextPane * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TextPane * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            TextPane * This,
            /* [retval][out] */ DTE	**ppDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            TextPane * This,
            /* [retval][out] */ TextPanes **ppPanes);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Window )( 
            TextPane * This,
            /* [retval][out] */ Window **ppWin);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Height )( 
            TextPane * This,
            /* [retval][out] */ long *pHeight);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Width )( 
            TextPane * This,
            /* [retval][out] */ long *pWidth);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Selection )( 
            TextPane * This,
            /* [retval][out] */ TextSelection **ppSel);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartPoint )( 
            TextPane * This,
            /* [retval][out] */ TextPoint **ppPoint);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Activate )( 
            TextPane * This);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IsVisible )( 
            TextPane * This,
            /* [in] */ TextPoint *Point,
            /* [optional][in] */ VARIANT PointOrCount,
            /* [retval][out] */ VARIANT_BOOL *pbResult);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *TryToShow )( 
            TextPane * This,
            /* [in] */ TextPoint *Point,
            /* [defaultvalue][in] */ vsPaneShowHow How,
            /* [optional][in] */ VARIANT PointOrCount,
            /* [retval][out] */ VARIANT_BOOL *pbResult);
        
        END_INTERFACE
    } TextPaneVtbl;

    interface TextPane
    {
        CONST_VTBL struct TextPaneVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TextPane_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define TextPane_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define TextPane_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define TextPane_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define TextPane_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define TextPane_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define TextPane_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define TextPane_get_DTE(This,ppDTE)	\
    (This)->lpVtbl -> get_DTE(This,ppDTE)

#define TextPane_get_Collection(This,ppPanes)	\
    (This)->lpVtbl -> get_Collection(This,ppPanes)

#define TextPane_get_Window(This,ppWin)	\
    (This)->lpVtbl -> get_Window(This,ppWin)

#define TextPane_get_Height(This,pHeight)	\
    (This)->lpVtbl -> get_Height(This,pHeight)

#define TextPane_get_Width(This,pWidth)	\
    (This)->lpVtbl -> get_Width(This,pWidth)

#define TextPane_get_Selection(This,ppSel)	\
    (This)->lpVtbl -> get_Selection(This,ppSel)

#define TextPane_get_StartPoint(This,ppPoint)	\
    (This)->lpVtbl -> get_StartPoint(This,ppPoint)

#define TextPane_Activate(This)	\
    (This)->lpVtbl -> Activate(This)

#define TextPane_IsVisible(This,Point,PointOrCount,pbResult)	\
    (This)->lpVtbl -> IsVisible(This,Point,PointOrCount,pbResult)

#define TextPane_TryToShow(This,Point,How,PointOrCount,pbResult)	\
    (This)->lpVtbl -> TryToShow(This,Point,How,PointOrCount,pbResult)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextPane_get_DTE_Proxy( 
    TextPane * This,
    /* [retval][out] */ DTE	**ppDTE);


void __RPC_STUB TextPane_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextPane_get_Collection_Proxy( 
    TextPane * This,
    /* [retval][out] */ TextPanes **ppPanes);


void __RPC_STUB TextPane_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextPane_get_Window_Proxy( 
    TextPane * This,
    /* [retval][out] */ Window **ppWin);


void __RPC_STUB TextPane_get_Window_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextPane_get_Height_Proxy( 
    TextPane * This,
    /* [retval][out] */ long *pHeight);


void __RPC_STUB TextPane_get_Height_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextPane_get_Width_Proxy( 
    TextPane * This,
    /* [retval][out] */ long *pWidth);


void __RPC_STUB TextPane_get_Width_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextPane_get_Selection_Proxy( 
    TextPane * This,
    /* [retval][out] */ TextSelection **ppSel);


void __RPC_STUB TextPane_get_Selection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextPane_get_StartPoint_Proxy( 
    TextPane * This,
    /* [retval][out] */ TextPoint **ppPoint);


void __RPC_STUB TextPane_get_StartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextPane_Activate_Proxy( 
    TextPane * This);


void __RPC_STUB TextPane_Activate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextPane_IsVisible_Proxy( 
    TextPane * This,
    /* [in] */ TextPoint *Point,
    /* [optional][in] */ VARIANT PointOrCount,
    /* [retval][out] */ VARIANT_BOOL *pbResult);


void __RPC_STUB TextPane_IsVisible_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextPane_TryToShow_Proxy( 
    TextPane * This,
    /* [in] */ TextPoint *Point,
    /* [defaultvalue][in] */ vsPaneShowHow How,
    /* [optional][in] */ VARIANT PointOrCount,
    /* [retval][out] */ VARIANT_BOOL *pbResult);


void __RPC_STUB TextPane_TryToShow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __TextPane_INTERFACE_DEFINED__ */


#ifndef __TextWindow_INTERFACE_DEFINED__
#define __TextWindow_INTERFACE_DEFINED__

/* interface TextWindow */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_TextWindow;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2fc54dc9-922b-44eb-8cc0-ba182584dc4b")
    TextWindow : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**ppDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Window **ppParent) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Selection( 
            /* [retval][out] */ TextSelection **ppSel) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ActivePane( 
            /* [retval][out] */ TextPane **ppPane) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Panes( 
            /* [retval][out] */ TextPanes **ppPanes) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TextWindowVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TextWindow * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TextWindow * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TextWindow * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TextWindow * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TextWindow * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TextWindow * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TextWindow * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            TextWindow * This,
            /* [retval][out] */ DTE	**ppDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TextWindow * This,
            /* [retval][out] */ Window **ppParent);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Selection )( 
            TextWindow * This,
            /* [retval][out] */ TextSelection **ppSel);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ActivePane )( 
            TextWindow * This,
            /* [retval][out] */ TextPane **ppPane);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Panes )( 
            TextWindow * This,
            /* [retval][out] */ TextPanes **ppPanes);
        
        END_INTERFACE
    } TextWindowVtbl;

    interface TextWindow
    {
        CONST_VTBL struct TextWindowVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TextWindow_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define TextWindow_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define TextWindow_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define TextWindow_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define TextWindow_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define TextWindow_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define TextWindow_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define TextWindow_get_DTE(This,ppDTE)	\
    (This)->lpVtbl -> get_DTE(This,ppDTE)

#define TextWindow_get_Parent(This,ppParent)	\
    (This)->lpVtbl -> get_Parent(This,ppParent)

#define TextWindow_get_Selection(This,ppSel)	\
    (This)->lpVtbl -> get_Selection(This,ppSel)

#define TextWindow_get_ActivePane(This,ppPane)	\
    (This)->lpVtbl -> get_ActivePane(This,ppPane)

#define TextWindow_get_Panes(This,ppPanes)	\
    (This)->lpVtbl -> get_Panes(This,ppPanes)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextWindow_get_DTE_Proxy( 
    TextWindow * This,
    /* [retval][out] */ DTE	**ppDTE);


void __RPC_STUB TextWindow_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextWindow_get_Parent_Proxy( 
    TextWindow * This,
    /* [retval][out] */ Window **ppParent);


void __RPC_STUB TextWindow_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextWindow_get_Selection_Proxy( 
    TextWindow * This,
    /* [retval][out] */ TextSelection **ppSel);


void __RPC_STUB TextWindow_get_Selection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextWindow_get_ActivePane_Proxy( 
    TextWindow * This,
    /* [retval][out] */ TextPane **ppPane);


void __RPC_STUB TextWindow_get_ActivePane_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextWindow_get_Panes_Proxy( 
    TextWindow * This,
    /* [retval][out] */ TextPanes **ppPanes);


void __RPC_STUB TextWindow_get_Panes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __TextWindow_INTERFACE_DEFINED__ */


#ifndef __TextPanes_INTERFACE_DEFINED__
#define __TextPanes_INTERFACE_DEFINED__

/* interface TextPanes */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_TextPanes;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("d9013d31-3652-46b2-a25a-29a881b9f86b")
    TextPanes : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**ppDTE) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ TextWindow **ppParent) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *pCount) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ VARIANT Index,
            /* [retval][out] */ TextPane **ppPane) = 0;
        
        virtual /* [id][restricted] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **lppiuReturn) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TextPanesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TextPanes * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TextPanes * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TextPanes * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TextPanes * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TextPanes * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TextPanes * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TextPanes * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            TextPanes * This,
            /* [retval][out] */ DTE	**ppDTE);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TextPanes * This,
            /* [retval][out] */ TextWindow **ppParent);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            TextPanes * This,
            /* [retval][out] */ long *pCount);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            TextPanes * This,
            /* [in] */ VARIANT Index,
            /* [retval][out] */ TextPane **ppPane);
        
        /* [id][restricted] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            TextPanes * This,
            /* [retval][out] */ IUnknown **lppiuReturn);
        
        END_INTERFACE
    } TextPanesVtbl;

    interface TextPanes
    {
        CONST_VTBL struct TextPanesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TextPanes_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define TextPanes_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define TextPanes_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define TextPanes_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define TextPanes_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define TextPanes_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define TextPanes_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define TextPanes_get_DTE(This,ppDTE)	\
    (This)->lpVtbl -> get_DTE(This,ppDTE)

#define TextPanes_get_Parent(This,ppParent)	\
    (This)->lpVtbl -> get_Parent(This,ppParent)

#define TextPanes_get_Count(This,pCount)	\
    (This)->lpVtbl -> get_Count(This,pCount)

#define TextPanes_Item(This,Index,ppPane)	\
    (This)->lpVtbl -> Item(This,Index,ppPane)

#define TextPanes__NewEnum(This,lppiuReturn)	\
    (This)->lpVtbl -> _NewEnum(This,lppiuReturn)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextPanes_get_DTE_Proxy( 
    TextPanes * This,
    /* [retval][out] */ DTE	**ppDTE);


void __RPC_STUB TextPanes_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextPanes_get_Parent_Proxy( 
    TextPanes * This,
    /* [retval][out] */ TextWindow **ppParent);


void __RPC_STUB TextPanes_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextPanes_get_Count_Proxy( 
    TextPanes * This,
    /* [retval][out] */ long *pCount);


void __RPC_STUB TextPanes_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE TextPanes_Item_Proxy( 
    TextPanes * This,
    /* [in] */ VARIANT Index,
    /* [retval][out] */ TextPane **ppPane);


void __RPC_STUB TextPanes_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [id][restricted] */ HRESULT STDMETHODCALLTYPE TextPanes__NewEnum_Proxy( 
    TextPanes * This,
    /* [retval][out] */ IUnknown **lppiuReturn);


void __RPC_STUB TextPanes__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __TextPanes_INTERFACE_DEFINED__ */


#ifndef __TextEditor_INTERFACE_DEFINED__
#define __TextEditor_INTERFACE_DEFINED__

/* interface TextEditor */
/* [hidden][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_TextEditor;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9ff3ddca-1795-4191-a5b1-02d1ae35d074")
    TextEditor : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Application( 
            /* [retval][out] */ DTE	**ppApp) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ DTE	**ppParent) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Emulation( 
            /* [retval][out] */ long *pEditorType) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Emulation( 
            /* [in] */ long EditorType) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Overtype( 
            /* [retval][out] */ VARIANT_BOOL *pbOT) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Overtype( 
            /* [in] */ VARIANT_BOOL bOT) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_VisibleWhitespace( 
            /* [retval][out] */ VARIANT_BOOL *pbVW) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_VisibleWhitespace( 
            /* [in] */ VARIANT_BOOL bVW) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct TextEditorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            TextEditor * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            TextEditor * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            TextEditor * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            TextEditor * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            TextEditor * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            TextEditor * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            TextEditor * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Application )( 
            TextEditor * This,
            /* [retval][out] */ DTE	**ppApp);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            TextEditor * This,
            /* [retval][out] */ DTE	**ppParent);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Emulation )( 
            TextEditor * This,
            /* [retval][out] */ long *pEditorType);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Emulation )( 
            TextEditor * This,
            /* [in] */ long EditorType);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Overtype )( 
            TextEditor * This,
            /* [retval][out] */ VARIANT_BOOL *pbOT);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Overtype )( 
            TextEditor * This,
            /* [in] */ VARIANT_BOOL bOT);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_VisibleWhitespace )( 
            TextEditor * This,
            /* [retval][out] */ VARIANT_BOOL *pbVW);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_VisibleWhitespace )( 
            TextEditor * This,
            /* [in] */ VARIANT_BOOL bVW);
        
        END_INTERFACE
    } TextEditorVtbl;

    interface TextEditor
    {
        CONST_VTBL struct TextEditorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define TextEditor_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define TextEditor_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define TextEditor_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define TextEditor_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define TextEditor_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define TextEditor_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define TextEditor_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define TextEditor_get_Application(This,ppApp)	\
    (This)->lpVtbl -> get_Application(This,ppApp)

#define TextEditor_get_Parent(This,ppParent)	\
    (This)->lpVtbl -> get_Parent(This,ppParent)

#define TextEditor_get_Emulation(This,pEditorType)	\
    (This)->lpVtbl -> get_Emulation(This,pEditorType)

#define TextEditor_put_Emulation(This,EditorType)	\
    (This)->lpVtbl -> put_Emulation(This,EditorType)

#define TextEditor_get_Overtype(This,pbOT)	\
    (This)->lpVtbl -> get_Overtype(This,pbOT)

#define TextEditor_put_Overtype(This,bOT)	\
    (This)->lpVtbl -> put_Overtype(This,bOT)

#define TextEditor_get_VisibleWhitespace(This,pbVW)	\
    (This)->lpVtbl -> get_VisibleWhitespace(This,pbVW)

#define TextEditor_put_VisibleWhitespace(This,bVW)	\
    (This)->lpVtbl -> put_VisibleWhitespace(This,bVW)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextEditor_get_Application_Proxy( 
    TextEditor * This,
    /* [retval][out] */ DTE	**ppApp);


void __RPC_STUB TextEditor_get_Application_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextEditor_get_Parent_Proxy( 
    TextEditor * This,
    /* [retval][out] */ DTE	**ppParent);


void __RPC_STUB TextEditor_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextEditor_get_Emulation_Proxy( 
    TextEditor * This,
    /* [retval][out] */ long *pEditorType);


void __RPC_STUB TextEditor_get_Emulation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE TextEditor_put_Emulation_Proxy( 
    TextEditor * This,
    /* [in] */ long EditorType);


void __RPC_STUB TextEditor_put_Emulation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextEditor_get_Overtype_Proxy( 
    TextEditor * This,
    /* [retval][out] */ VARIANT_BOOL *pbOT);


void __RPC_STUB TextEditor_get_Overtype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE TextEditor_put_Overtype_Proxy( 
    TextEditor * This,
    /* [in] */ VARIANT_BOOL bOT);


void __RPC_STUB TextEditor_put_Overtype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE TextEditor_get_VisibleWhitespace_Proxy( 
    TextEditor * This,
    /* [retval][out] */ VARIANT_BOOL *pbVW);


void __RPC_STUB TextEditor_get_VisibleWhitespace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE TextEditor_put_VisibleWhitespace_Proxy( 
    TextEditor * This,
    /* [in] */ VARIANT_BOOL bVW);


void __RPC_STUB TextEditor_put_VisibleWhitespace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __TextEditor_INTERFACE_DEFINED__ */


#ifndef __CodeModel_INTERFACE_DEFINED__
#define __CodeModel_INTERFACE_DEFINED__

/* interface CodeModel */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_CodeModel;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0CFBC2B4-0D4E-11D3-8997-00C04F688DDE")
    CodeModel : public IDispatch
    {
    public:
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ Project **pProj) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Language( 
            /* [retval][out] */ BSTR *pLanguage) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CodeElements( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeTypeFromFullName( 
            BSTR Name,
            /* [retval][out] */ CodeType **ppCodeType) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddNamespace( 
            BSTR Name,
            VARIANT Location,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeNamespace **ppCodeNamespace) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddClass( 
            BSTR Name,
            VARIANT Location,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [optional] */ VARIANT ImplementedInterfaces,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeClass **ppCodeClass) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddInterface( 
            BSTR Name,
            VARIANT Location,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeInterface **ppCodeInterface) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddFunction( 
            BSTR Name,
            VARIANT Location,
            enum vsCMFunction Kind,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeFunction **ppCodeFunction) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddVariable( 
            BSTR Name,
            VARIANT Location,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeVariable **ppCodeVariable) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddStruct( 
            BSTR Name,
            VARIANT Location,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [optional] */ VARIANT ImplementedInterfaces,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeStruct **ppCodeStruct) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddEnum( 
            BSTR Name,
            VARIANT Location,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeEnum **ppCodeEnum) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddDelegate( 
            BSTR Name,
            VARIANT Location,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeDelegate **ppCodeDelegate) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddAttribute( 
            BSTR Name,
            VARIANT Location,
            BSTR Value,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeAttribute **ppCodeAttribute) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Remove( 
            VARIANT Element) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE IsValidID( 
            BSTR Name,
            /* [retval][out] */ VARIANT_BOOL *pValid) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsCaseSensitive( 
            /* [retval][out] */ VARIANT_BOOL *pSensitive) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateCodeTypeRef( 
            VARIANT Type,
            /* [retval][out] */ CodeTypeRef **ppCodeTypeRef) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CodeModelVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CodeModel * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CodeModel * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CodeModel * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CodeModel * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CodeModel * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CodeModel * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CodeModel * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            CodeModel * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CodeModel * This,
            /* [retval][out] */ Project **pProj);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Language )( 
            CodeModel * This,
            /* [retval][out] */ BSTR *pLanguage);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CodeElements )( 
            CodeModel * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CodeTypeFromFullName )( 
            CodeModel * This,
            BSTR Name,
            /* [retval][out] */ CodeType **ppCodeType);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddNamespace )( 
            CodeModel * This,
            BSTR Name,
            VARIANT Location,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeNamespace **ppCodeNamespace);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddClass )( 
            CodeModel * This,
            BSTR Name,
            VARIANT Location,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [optional] */ VARIANT ImplementedInterfaces,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeClass **ppCodeClass);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddInterface )( 
            CodeModel * This,
            BSTR Name,
            VARIANT Location,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeInterface **ppCodeInterface);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddFunction )( 
            CodeModel * This,
            BSTR Name,
            VARIANT Location,
            enum vsCMFunction Kind,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeFunction **ppCodeFunction);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddVariable )( 
            CodeModel * This,
            BSTR Name,
            VARIANT Location,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeVariable **ppCodeVariable);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddStruct )( 
            CodeModel * This,
            BSTR Name,
            VARIANT Location,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [optional] */ VARIANT ImplementedInterfaces,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeStruct **ppCodeStruct);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddEnum )( 
            CodeModel * This,
            BSTR Name,
            VARIANT Location,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeEnum **ppCodeEnum);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddDelegate )( 
            CodeModel * This,
            BSTR Name,
            VARIANT Location,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeDelegate **ppCodeDelegate);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            CodeModel * This,
            BSTR Name,
            VARIANT Location,
            BSTR Value,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeAttribute **ppCodeAttribute);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Remove )( 
            CodeModel * This,
            VARIANT Element);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *IsValidID )( 
            CodeModel * This,
            BSTR Name,
            /* [retval][out] */ VARIANT_BOOL *pValid);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsCaseSensitive )( 
            CodeModel * This,
            /* [retval][out] */ VARIANT_BOOL *pSensitive);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateCodeTypeRef )( 
            CodeModel * This,
            VARIANT Type,
            /* [retval][out] */ CodeTypeRef **ppCodeTypeRef);
        
        END_INTERFACE
    } CodeModelVtbl;

    interface CodeModel
    {
        CONST_VTBL struct CodeModelVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CodeModel_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define CodeModel_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define CodeModel_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define CodeModel_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define CodeModel_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define CodeModel_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define CodeModel_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define CodeModel_get_DTE(This,DTEObject)	\
    (This)->lpVtbl -> get_DTE(This,DTEObject)

#define CodeModel_get_Parent(This,pProj)	\
    (This)->lpVtbl -> get_Parent(This,pProj)

#define CodeModel_get_Language(This,pLanguage)	\
    (This)->lpVtbl -> get_Language(This,pLanguage)

#define CodeModel_get_CodeElements(This,ppCodeElements)	\
    (This)->lpVtbl -> get_CodeElements(This,ppCodeElements)

#define CodeModel_CodeTypeFromFullName(This,Name,ppCodeType)	\
    (This)->lpVtbl -> CodeTypeFromFullName(This,Name,ppCodeType)

#define CodeModel_AddNamespace(This,Name,Location,Position,ppCodeNamespace)	\
    (This)->lpVtbl -> AddNamespace(This,Name,Location,Position,ppCodeNamespace)

#define CodeModel_AddClass(This,Name,Location,Position,Bases,ImplementedInterfaces,Access,ppCodeClass)	\
    (This)->lpVtbl -> AddClass(This,Name,Location,Position,Bases,ImplementedInterfaces,Access,ppCodeClass)

#define CodeModel_AddInterface(This,Name,Location,Position,Bases,Access,ppCodeInterface)	\
    (This)->lpVtbl -> AddInterface(This,Name,Location,Position,Bases,Access,ppCodeInterface)

#define CodeModel_AddFunction(This,Name,Location,Kind,Type,Position,Access,ppCodeFunction)	\
    (This)->lpVtbl -> AddFunction(This,Name,Location,Kind,Type,Position,Access,ppCodeFunction)

#define CodeModel_AddVariable(This,Name,Location,Type,Position,Access,ppCodeVariable)	\
    (This)->lpVtbl -> AddVariable(This,Name,Location,Type,Position,Access,ppCodeVariable)

#define CodeModel_AddStruct(This,Name,Location,Position,Bases,ImplementedInterfaces,Access,ppCodeStruct)	\
    (This)->lpVtbl -> AddStruct(This,Name,Location,Position,Bases,ImplementedInterfaces,Access,ppCodeStruct)

#define CodeModel_AddEnum(This,Name,Location,Position,Bases,Access,ppCodeEnum)	\
    (This)->lpVtbl -> AddEnum(This,Name,Location,Position,Bases,Access,ppCodeEnum)

#define CodeModel_AddDelegate(This,Name,Location,Type,Position,Access,ppCodeDelegate)	\
    (This)->lpVtbl -> AddDelegate(This,Name,Location,Type,Position,Access,ppCodeDelegate)

#define CodeModel_AddAttribute(This,Name,Location,Value,Position,ppCodeAttribute)	\
    (This)->lpVtbl -> AddAttribute(This,Name,Location,Value,Position,ppCodeAttribute)

#define CodeModel_Remove(This,Element)	\
    (This)->lpVtbl -> Remove(This,Element)

#define CodeModel_IsValidID(This,Name,pValid)	\
    (This)->lpVtbl -> IsValidID(This,Name,pValid)

#define CodeModel_get_IsCaseSensitive(This,pSensitive)	\
    (This)->lpVtbl -> get_IsCaseSensitive(This,pSensitive)

#define CodeModel_CreateCodeTypeRef(This,Type,ppCodeTypeRef)	\
    (This)->lpVtbl -> CreateCodeTypeRef(This,Type,ppCodeTypeRef)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeModel_get_DTE_Proxy( 
    CodeModel * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB CodeModel_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeModel_get_Parent_Proxy( 
    CodeModel * This,
    /* [retval][out] */ Project **pProj);


void __RPC_STUB CodeModel_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeModel_get_Language_Proxy( 
    CodeModel * This,
    /* [retval][out] */ BSTR *pLanguage);


void __RPC_STUB CodeModel_get_Language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeModel_get_CodeElements_Proxy( 
    CodeModel * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeModel_get_CodeElements_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeModel_CodeTypeFromFullName_Proxy( 
    CodeModel * This,
    BSTR Name,
    /* [retval][out] */ CodeType **ppCodeType);


void __RPC_STUB CodeModel_CodeTypeFromFullName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeModel_AddNamespace_Proxy( 
    CodeModel * This,
    BSTR Name,
    VARIANT Location,
    /* [optional] */ VARIANT Position,
    /* [retval][out] */ CodeNamespace **ppCodeNamespace);


void __RPC_STUB CodeModel_AddNamespace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeModel_AddClass_Proxy( 
    CodeModel * This,
    BSTR Name,
    VARIANT Location,
    /* [optional] */ VARIANT Position,
    /* [optional] */ VARIANT Bases,
    /* [optional] */ VARIANT ImplementedInterfaces,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeClass **ppCodeClass);


void __RPC_STUB CodeModel_AddClass_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeModel_AddInterface_Proxy( 
    CodeModel * This,
    BSTR Name,
    VARIANT Location,
    /* [optional] */ VARIANT Position,
    /* [optional] */ VARIANT Bases,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeInterface **ppCodeInterface);


void __RPC_STUB CodeModel_AddInterface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeModel_AddFunction_Proxy( 
    CodeModel * This,
    BSTR Name,
    VARIANT Location,
    enum vsCMFunction Kind,
    VARIANT Type,
    /* [optional] */ VARIANT Position,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeFunction **ppCodeFunction);


void __RPC_STUB CodeModel_AddFunction_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeModel_AddVariable_Proxy( 
    CodeModel * This,
    BSTR Name,
    VARIANT Location,
    VARIANT Type,
    /* [optional] */ VARIANT Position,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeVariable **ppCodeVariable);


void __RPC_STUB CodeModel_AddVariable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeModel_AddStruct_Proxy( 
    CodeModel * This,
    BSTR Name,
    VARIANT Location,
    /* [optional] */ VARIANT Position,
    /* [optional] */ VARIANT Bases,
    /* [optional] */ VARIANT ImplementedInterfaces,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeStruct **ppCodeStruct);


void __RPC_STUB CodeModel_AddStruct_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeModel_AddEnum_Proxy( 
    CodeModel * This,
    BSTR Name,
    VARIANT Location,
    /* [optional] */ VARIANT Position,
    /* [optional] */ VARIANT Bases,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeEnum **ppCodeEnum);


void __RPC_STUB CodeModel_AddEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeModel_AddDelegate_Proxy( 
    CodeModel * This,
    BSTR Name,
    VARIANT Location,
    VARIANT Type,
    /* [optional] */ VARIANT Position,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeDelegate **ppCodeDelegate);


void __RPC_STUB CodeModel_AddDelegate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeModel_AddAttribute_Proxy( 
    CodeModel * This,
    BSTR Name,
    VARIANT Location,
    BSTR Value,
    /* [optional] */ VARIANT Position,
    /* [retval][out] */ CodeAttribute **ppCodeAttribute);


void __RPC_STUB CodeModel_AddAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeModel_Remove_Proxy( 
    CodeModel * This,
    VARIANT Element);


void __RPC_STUB CodeModel_Remove_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeModel_IsValidID_Proxy( 
    CodeModel * This,
    BSTR Name,
    /* [retval][out] */ VARIANT_BOOL *pValid);


void __RPC_STUB CodeModel_IsValidID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeModel_get_IsCaseSensitive_Proxy( 
    CodeModel * This,
    /* [retval][out] */ VARIANT_BOOL *pSensitive);


void __RPC_STUB CodeModel_get_IsCaseSensitive_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeModel_CreateCodeTypeRef_Proxy( 
    CodeModel * This,
    VARIANT Type,
    /* [retval][out] */ CodeTypeRef **ppCodeTypeRef);


void __RPC_STUB CodeModel_CreateCodeTypeRef_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __CodeModel_INTERFACE_DEFINED__ */


#ifndef __CodeElements_INTERFACE_DEFINED__
#define __CodeElements_INTERFACE_DEFINED__

/* interface CodeElements */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_CodeElements;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0CFBC2B5-0D4E-11D3-8997-00C04F688DDE")
    CodeElements : public IDispatch
    {
    public:
        virtual /* [restricted][id] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ IUnknown **lppiuReturn) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **ParentObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Item( 
            VARIANT index,
            /* [retval][out] */ CodeElement **ppCodeElement) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ long *CountOfCodeElements) = 0;
        
        virtual /* [restricted][hidden][id] */ HRESULT STDMETHODCALLTYPE Reserved1( 
            VARIANT Element) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CreateUniqueID( 
            /* [in] */ BSTR Prefix,
            /* [defaultvalue][out][in] */ BSTR *NewName,
            /* [retval][out] */ VARIANT_BOOL *pRootUnique) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CodeElementsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CodeElements * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CodeElements * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CodeElements * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CodeElements * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CodeElements * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CodeElements * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CodeElements * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            CodeElements * This,
            /* [retval][out] */ IUnknown **lppiuReturn);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            CodeElements * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CodeElements * This,
            /* [retval][out] */ IDispatch **ParentObject);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            CodeElements * This,
            VARIANT index,
            /* [retval][out] */ CodeElement **ppCodeElement);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            CodeElements * This,
            /* [retval][out] */ long *CountOfCodeElements);
        
        /* [restricted][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *Reserved1 )( 
            CodeElements * This,
            VARIANT Element);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *CreateUniqueID )( 
            CodeElements * This,
            /* [in] */ BSTR Prefix,
            /* [defaultvalue][out][in] */ BSTR *NewName,
            /* [retval][out] */ VARIANT_BOOL *pRootUnique);
        
        END_INTERFACE
    } CodeElementsVtbl;

    interface CodeElements
    {
        CONST_VTBL struct CodeElementsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CodeElements_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define CodeElements_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define CodeElements_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define CodeElements_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define CodeElements_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define CodeElements_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define CodeElements_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define CodeElements__NewEnum(This,lppiuReturn)	\
    (This)->lpVtbl -> _NewEnum(This,lppiuReturn)

#define CodeElements_get_DTE(This,DTEObject)	\
    (This)->lpVtbl -> get_DTE(This,DTEObject)

#define CodeElements_get_Parent(This,ParentObject)	\
    (This)->lpVtbl -> get_Parent(This,ParentObject)

#define CodeElements_Item(This,index,ppCodeElement)	\
    (This)->lpVtbl -> Item(This,index,ppCodeElement)

#define CodeElements_get_Count(This,CountOfCodeElements)	\
    (This)->lpVtbl -> get_Count(This,CountOfCodeElements)

#define CodeElements_Reserved1(This,Element)	\
    (This)->lpVtbl -> Reserved1(This,Element)

#define CodeElements_CreateUniqueID(This,Prefix,NewName,pRootUnique)	\
    (This)->lpVtbl -> CreateUniqueID(This,Prefix,NewName,pRootUnique)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [restricted][id] */ HRESULT STDMETHODCALLTYPE CodeElements__NewEnum_Proxy( 
    CodeElements * This,
    /* [retval][out] */ IUnknown **lppiuReturn);


void __RPC_STUB CodeElements__NewEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeElements_get_DTE_Proxy( 
    CodeElements * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB CodeElements_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeElements_get_Parent_Proxy( 
    CodeElements * This,
    /* [retval][out] */ IDispatch **ParentObject);


void __RPC_STUB CodeElements_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeElements_Item_Proxy( 
    CodeElements * This,
    VARIANT index,
    /* [retval][out] */ CodeElement **ppCodeElement);


void __RPC_STUB CodeElements_Item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeElements_get_Count_Proxy( 
    CodeElements * This,
    /* [retval][out] */ long *CountOfCodeElements);


void __RPC_STUB CodeElements_get_Count_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted][hidden][id] */ HRESULT STDMETHODCALLTYPE CodeElements_Reserved1_Proxy( 
    CodeElements * This,
    VARIANT Element);


void __RPC_STUB CodeElements_Reserved1_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeElements_CreateUniqueID_Proxy( 
    CodeElements * This,
    /* [in] */ BSTR Prefix,
    /* [defaultvalue][out][in] */ BSTR *NewName,
    /* [retval][out] */ VARIANT_BOOL *pRootUnique);


void __RPC_STUB CodeElements_CreateUniqueID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __CodeElements_INTERFACE_DEFINED__ */


#ifndef __CodeElement_INTERFACE_DEFINED__
#define __CodeElement_INTERFACE_DEFINED__

/* interface CodeElement */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_CodeElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0CFBC2B6-0D4E-11D3-8997-00C04F688DDE")
    CodeElement : public IDispatch
    {
    public:
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ CodeElements **ppCollection) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            BSTR NewName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FullName( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProjectItem( 
            /* [retval][out] */ ProjectItem **pProjItem) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Kind( 
            /* [retval][out] */ enum vsCMElement *pCodeEltKind) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsCodeType( 
            /* [retval][out] */ VARIANT_BOOL *pIsCodeType) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InfoLocation( 
            /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Children( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Language( 
            /* [retval][out] */ BSTR *pLanguage) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartPoint( 
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndPoint( 
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderNames( 
            /* [retval][out] */ VARIANT *ExtenderNames) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_Extender( 
            BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderCATID( 
            /* [retval][out] */ BSTR *pRetval) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetStartPoint( 
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetEndPoint( 
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CodeElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CodeElement * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CodeElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CodeElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CodeElement * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CodeElement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CodeElement * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CodeElement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            CodeElement * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            CodeElement * This,
            /* [retval][out] */ CodeElements **ppCollection);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            CodeElement * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            CodeElement * This,
            BSTR NewName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullName )( 
            CodeElement * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProjectItem )( 
            CodeElement * This,
            /* [retval][out] */ ProjectItem **pProjItem);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Kind )( 
            CodeElement * This,
            /* [retval][out] */ enum vsCMElement *pCodeEltKind);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsCodeType )( 
            CodeElement * This,
            /* [retval][out] */ VARIANT_BOOL *pIsCodeType);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InfoLocation )( 
            CodeElement * This,
            /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            CodeElement * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Language )( 
            CodeElement * This,
            /* [retval][out] */ BSTR *pLanguage);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartPoint )( 
            CodeElement * This,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndPoint )( 
            CodeElement * This,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderNames )( 
            CodeElement * This,
            /* [retval][out] */ VARIANT *ExtenderNames);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Extender )( 
            CodeElement * This,
            BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderCATID )( 
            CodeElement * This,
            /* [retval][out] */ BSTR *pRetval);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetStartPoint )( 
            CodeElement * This,
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetEndPoint )( 
            CodeElement * This,
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        END_INTERFACE
    } CodeElementVtbl;

    interface CodeElement
    {
        CONST_VTBL struct CodeElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CodeElement_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define CodeElement_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define CodeElement_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define CodeElement_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define CodeElement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define CodeElement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define CodeElement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define CodeElement_get_DTE(This,DTEObject)	\
    (This)->lpVtbl -> get_DTE(This,DTEObject)

#define CodeElement_get_Collection(This,ppCollection)	\
    (This)->lpVtbl -> get_Collection(This,ppCollection)

#define CodeElement_get_Name(This,pVal)	\
    (This)->lpVtbl -> get_Name(This,pVal)

#define CodeElement_put_Name(This,NewName)	\
    (This)->lpVtbl -> put_Name(This,NewName)

#define CodeElement_get_FullName(This,pVal)	\
    (This)->lpVtbl -> get_FullName(This,pVal)

#define CodeElement_get_ProjectItem(This,pProjItem)	\
    (This)->lpVtbl -> get_ProjectItem(This,pProjItem)

#define CodeElement_get_Kind(This,pCodeEltKind)	\
    (This)->lpVtbl -> get_Kind(This,pCodeEltKind)

#define CodeElement_get_IsCodeType(This,pIsCodeType)	\
    (This)->lpVtbl -> get_IsCodeType(This,pIsCodeType)

#define CodeElement_get_InfoLocation(This,pInfoLocation)	\
    (This)->lpVtbl -> get_InfoLocation(This,pInfoLocation)

#define CodeElement_get_Children(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Children(This,ppCodeElements)

#define CodeElement_get_Language(This,pLanguage)	\
    (This)->lpVtbl -> get_Language(This,pLanguage)

#define CodeElement_get_StartPoint(This,ppTextPoint)	\
    (This)->lpVtbl -> get_StartPoint(This,ppTextPoint)

#define CodeElement_get_EndPoint(This,ppTextPoint)	\
    (This)->lpVtbl -> get_EndPoint(This,ppTextPoint)

#define CodeElement_get_ExtenderNames(This,ExtenderNames)	\
    (This)->lpVtbl -> get_ExtenderNames(This,ExtenderNames)

#define CodeElement_get_Extender(This,ExtenderName,Extender)	\
    (This)->lpVtbl -> get_Extender(This,ExtenderName,Extender)

#define CodeElement_get_ExtenderCATID(This,pRetval)	\
    (This)->lpVtbl -> get_ExtenderCATID(This,pRetval)

#define CodeElement_GetStartPoint(This,Part,ppTextPoint)	\
    (This)->lpVtbl -> GetStartPoint(This,Part,ppTextPoint)

#define CodeElement_GetEndPoint(This,Part,ppTextPoint)	\
    (This)->lpVtbl -> GetEndPoint(This,Part,ppTextPoint)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeElement_get_DTE_Proxy( 
    CodeElement * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB CodeElement_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeElement_get_Collection_Proxy( 
    CodeElement * This,
    /* [retval][out] */ CodeElements **ppCollection);


void __RPC_STUB CodeElement_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeElement_get_Name_Proxy( 
    CodeElement * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB CodeElement_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeElement_put_Name_Proxy( 
    CodeElement * This,
    BSTR NewName);


void __RPC_STUB CodeElement_put_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeElement_get_FullName_Proxy( 
    CodeElement * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB CodeElement_get_FullName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeElement_get_ProjectItem_Proxy( 
    CodeElement * This,
    /* [retval][out] */ ProjectItem **pProjItem);


void __RPC_STUB CodeElement_get_ProjectItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeElement_get_Kind_Proxy( 
    CodeElement * This,
    /* [retval][out] */ enum vsCMElement *pCodeEltKind);


void __RPC_STUB CodeElement_get_Kind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeElement_get_IsCodeType_Proxy( 
    CodeElement * This,
    /* [retval][out] */ VARIANT_BOOL *pIsCodeType);


void __RPC_STUB CodeElement_get_IsCodeType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeElement_get_InfoLocation_Proxy( 
    CodeElement * This,
    /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation);


void __RPC_STUB CodeElement_get_InfoLocation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeElement_get_Children_Proxy( 
    CodeElement * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeElement_get_Children_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeElement_get_Language_Proxy( 
    CodeElement * This,
    /* [retval][out] */ BSTR *pLanguage);


void __RPC_STUB CodeElement_get_Language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeElement_get_StartPoint_Proxy( 
    CodeElement * This,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeElement_get_StartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeElement_get_EndPoint_Proxy( 
    CodeElement * This,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeElement_get_EndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeElement_get_ExtenderNames_Proxy( 
    CodeElement * This,
    /* [retval][out] */ VARIANT *ExtenderNames);


void __RPC_STUB CodeElement_get_ExtenderNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeElement_get_Extender_Proxy( 
    CodeElement * This,
    BSTR ExtenderName,
    /* [retval][out] */ IDispatch **Extender);


void __RPC_STUB CodeElement_get_Extender_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeElement_get_ExtenderCATID_Proxy( 
    CodeElement * This,
    /* [retval][out] */ BSTR *pRetval);


void __RPC_STUB CodeElement_get_ExtenderCATID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeElement_GetStartPoint_Proxy( 
    CodeElement * This,
    /* [defaultvalue][in] */ enum vsCMPart Part,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeElement_GetStartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeElement_GetEndPoint_Proxy( 
    CodeElement * This,
    /* [defaultvalue][in] */ enum vsCMPart Part,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeElement_GetEndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __CodeElement_INTERFACE_DEFINED__ */


#ifndef __CodeType_INTERFACE_DEFINED__
#define __CodeType_INTERFACE_DEFINED__

/* interface CodeType */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_CodeType;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0CFBC2B7-0D4E-11D3-8997-00C04F688DDE")
    CodeType : public IDispatch
    {
    public:
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ CodeElements **ppCollection) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            BSTR NewName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FullName( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProjectItem( 
            /* [retval][out] */ ProjectItem **pProjItem) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Kind( 
            /* [retval][out] */ enum vsCMElement *pCodeEltKind) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsCodeType( 
            /* [retval][out] */ VARIANT_BOOL *pIsCodeType) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InfoLocation( 
            /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Children( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Language( 
            /* [retval][out] */ BSTR *pLanguage) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartPoint( 
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndPoint( 
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderNames( 
            /* [retval][out] */ VARIANT *ExtenderNames) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_Extender( 
            BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderCATID( 
            /* [retval][out] */ BSTR *pRetval) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetStartPoint( 
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetEndPoint( 
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **ParentObject) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Namespace( 
            /* [retval][out] */ CodeNamespace **ppCodeNamespace) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Bases( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Members( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Access( 
            enum vsCMAccess Access) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Access( 
            /* [retval][out] */ enum vsCMAccess *pAccess) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Attributes( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DocComment( 
            /* [retval][out] */ BSTR *pDocComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DocComment( 
            BSTR DocComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Comment( 
            /* [retval][out] */ BSTR *pComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Comment( 
            BSTR Comment) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddBase( 
            VARIANT Base,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeElement **ppOut) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddAttribute( 
            BSTR Name,
            BSTR Value,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeAttribute **ppCodeAttribute) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveBase( 
            VARIANT Element) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveMember( 
            VARIANT Element) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsDerivedFrom( 
            BSTR FullName,
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DerivedTypes( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CodeTypeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CodeType * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CodeType * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CodeType * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CodeType * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CodeType * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CodeType * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CodeType * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            CodeType * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            CodeType * This,
            /* [retval][out] */ CodeElements **ppCollection);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            CodeType * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            CodeType * This,
            BSTR NewName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullName )( 
            CodeType * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProjectItem )( 
            CodeType * This,
            /* [retval][out] */ ProjectItem **pProjItem);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Kind )( 
            CodeType * This,
            /* [retval][out] */ enum vsCMElement *pCodeEltKind);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsCodeType )( 
            CodeType * This,
            /* [retval][out] */ VARIANT_BOOL *pIsCodeType);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InfoLocation )( 
            CodeType * This,
            /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            CodeType * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Language )( 
            CodeType * This,
            /* [retval][out] */ BSTR *pLanguage);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartPoint )( 
            CodeType * This,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndPoint )( 
            CodeType * This,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderNames )( 
            CodeType * This,
            /* [retval][out] */ VARIANT *ExtenderNames);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Extender )( 
            CodeType * This,
            BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderCATID )( 
            CodeType * This,
            /* [retval][out] */ BSTR *pRetval);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetStartPoint )( 
            CodeType * This,
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetEndPoint )( 
            CodeType * This,
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CodeType * This,
            /* [retval][out] */ IDispatch **ParentObject);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Namespace )( 
            CodeType * This,
            /* [retval][out] */ CodeNamespace **ppCodeNamespace);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Bases )( 
            CodeType * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Members )( 
            CodeType * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Access )( 
            CodeType * This,
            enum vsCMAccess Access);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Access )( 
            CodeType * This,
            /* [retval][out] */ enum vsCMAccess *pAccess);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Attributes )( 
            CodeType * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DocComment )( 
            CodeType * This,
            /* [retval][out] */ BSTR *pDocComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DocComment )( 
            CodeType * This,
            BSTR DocComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Comment )( 
            CodeType * This,
            /* [retval][out] */ BSTR *pComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Comment )( 
            CodeType * This,
            BSTR Comment);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddBase )( 
            CodeType * This,
            VARIANT Base,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeElement **ppOut);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            CodeType * This,
            BSTR Name,
            BSTR Value,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeAttribute **ppCodeAttribute);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveBase )( 
            CodeType * This,
            VARIANT Element);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveMember )( 
            CodeType * This,
            VARIANT Element);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDerivedFrom )( 
            CodeType * This,
            BSTR FullName,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DerivedTypes )( 
            CodeType * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        END_INTERFACE
    } CodeTypeVtbl;

    interface CodeType
    {
        CONST_VTBL struct CodeTypeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CodeType_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define CodeType_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define CodeType_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define CodeType_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define CodeType_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define CodeType_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define CodeType_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define CodeType_get_DTE(This,DTEObject)	\
    (This)->lpVtbl -> get_DTE(This,DTEObject)

#define CodeType_get_Collection(This,ppCollection)	\
    (This)->lpVtbl -> get_Collection(This,ppCollection)

#define CodeType_get_Name(This,pVal)	\
    (This)->lpVtbl -> get_Name(This,pVal)

#define CodeType_put_Name(This,NewName)	\
    (This)->lpVtbl -> put_Name(This,NewName)

#define CodeType_get_FullName(This,pVal)	\
    (This)->lpVtbl -> get_FullName(This,pVal)

#define CodeType_get_ProjectItem(This,pProjItem)	\
    (This)->lpVtbl -> get_ProjectItem(This,pProjItem)

#define CodeType_get_Kind(This,pCodeEltKind)	\
    (This)->lpVtbl -> get_Kind(This,pCodeEltKind)

#define CodeType_get_IsCodeType(This,pIsCodeType)	\
    (This)->lpVtbl -> get_IsCodeType(This,pIsCodeType)

#define CodeType_get_InfoLocation(This,pInfoLocation)	\
    (This)->lpVtbl -> get_InfoLocation(This,pInfoLocation)

#define CodeType_get_Children(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Children(This,ppCodeElements)

#define CodeType_get_Language(This,pLanguage)	\
    (This)->lpVtbl -> get_Language(This,pLanguage)

#define CodeType_get_StartPoint(This,ppTextPoint)	\
    (This)->lpVtbl -> get_StartPoint(This,ppTextPoint)

#define CodeType_get_EndPoint(This,ppTextPoint)	\
    (This)->lpVtbl -> get_EndPoint(This,ppTextPoint)

#define CodeType_get_ExtenderNames(This,ExtenderNames)	\
    (This)->lpVtbl -> get_ExtenderNames(This,ExtenderNames)

#define CodeType_get_Extender(This,ExtenderName,Extender)	\
    (This)->lpVtbl -> get_Extender(This,ExtenderName,Extender)

#define CodeType_get_ExtenderCATID(This,pRetval)	\
    (This)->lpVtbl -> get_ExtenderCATID(This,pRetval)

#define CodeType_GetStartPoint(This,Part,ppTextPoint)	\
    (This)->lpVtbl -> GetStartPoint(This,Part,ppTextPoint)

#define CodeType_GetEndPoint(This,Part,ppTextPoint)	\
    (This)->lpVtbl -> GetEndPoint(This,Part,ppTextPoint)

#define CodeType_get_Parent(This,ParentObject)	\
    (This)->lpVtbl -> get_Parent(This,ParentObject)

#define CodeType_get_Namespace(This,ppCodeNamespace)	\
    (This)->lpVtbl -> get_Namespace(This,ppCodeNamespace)

#define CodeType_get_Bases(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Bases(This,ppCodeElements)

#define CodeType_get_Members(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Members(This,ppCodeElements)

#define CodeType_put_Access(This,Access)	\
    (This)->lpVtbl -> put_Access(This,Access)

#define CodeType_get_Access(This,pAccess)	\
    (This)->lpVtbl -> get_Access(This,pAccess)

#define CodeType_get_Attributes(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Attributes(This,ppCodeElements)

#define CodeType_get_DocComment(This,pDocComment)	\
    (This)->lpVtbl -> get_DocComment(This,pDocComment)

#define CodeType_put_DocComment(This,DocComment)	\
    (This)->lpVtbl -> put_DocComment(This,DocComment)

#define CodeType_get_Comment(This,pComment)	\
    (This)->lpVtbl -> get_Comment(This,pComment)

#define CodeType_put_Comment(This,Comment)	\
    (This)->lpVtbl -> put_Comment(This,Comment)

#define CodeType_AddBase(This,Base,Position,ppOut)	\
    (This)->lpVtbl -> AddBase(This,Base,Position,ppOut)

#define CodeType_AddAttribute(This,Name,Value,Position,ppCodeAttribute)	\
    (This)->lpVtbl -> AddAttribute(This,Name,Value,Position,ppCodeAttribute)

#define CodeType_RemoveBase(This,Element)	\
    (This)->lpVtbl -> RemoveBase(This,Element)

#define CodeType_RemoveMember(This,Element)	\
    (This)->lpVtbl -> RemoveMember(This,Element)

#define CodeType_get_IsDerivedFrom(This,FullName,pVal)	\
    (This)->lpVtbl -> get_IsDerivedFrom(This,FullName,pVal)

#define CodeType_get_DerivedTypes(This,ppCodeElements)	\
    (This)->lpVtbl -> get_DerivedTypes(This,ppCodeElements)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeType_get_DTE_Proxy( 
    CodeType * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB CodeType_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeType_get_Collection_Proxy( 
    CodeType * This,
    /* [retval][out] */ CodeElements **ppCollection);


void __RPC_STUB CodeType_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeType_get_Name_Proxy( 
    CodeType * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB CodeType_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeType_put_Name_Proxy( 
    CodeType * This,
    BSTR NewName);


void __RPC_STUB CodeType_put_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeType_get_FullName_Proxy( 
    CodeType * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB CodeType_get_FullName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeType_get_ProjectItem_Proxy( 
    CodeType * This,
    /* [retval][out] */ ProjectItem **pProjItem);


void __RPC_STUB CodeType_get_ProjectItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeType_get_Kind_Proxy( 
    CodeType * This,
    /* [retval][out] */ enum vsCMElement *pCodeEltKind);


void __RPC_STUB CodeType_get_Kind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeType_get_IsCodeType_Proxy( 
    CodeType * This,
    /* [retval][out] */ VARIANT_BOOL *pIsCodeType);


void __RPC_STUB CodeType_get_IsCodeType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeType_get_InfoLocation_Proxy( 
    CodeType * This,
    /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation);


void __RPC_STUB CodeType_get_InfoLocation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeType_get_Children_Proxy( 
    CodeType * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeType_get_Children_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeType_get_Language_Proxy( 
    CodeType * This,
    /* [retval][out] */ BSTR *pLanguage);


void __RPC_STUB CodeType_get_Language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeType_get_StartPoint_Proxy( 
    CodeType * This,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeType_get_StartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeType_get_EndPoint_Proxy( 
    CodeType * This,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeType_get_EndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeType_get_ExtenderNames_Proxy( 
    CodeType * This,
    /* [retval][out] */ VARIANT *ExtenderNames);


void __RPC_STUB CodeType_get_ExtenderNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeType_get_Extender_Proxy( 
    CodeType * This,
    BSTR ExtenderName,
    /* [retval][out] */ IDispatch **Extender);


void __RPC_STUB CodeType_get_Extender_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeType_get_ExtenderCATID_Proxy( 
    CodeType * This,
    /* [retval][out] */ BSTR *pRetval);


void __RPC_STUB CodeType_get_ExtenderCATID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeType_GetStartPoint_Proxy( 
    CodeType * This,
    /* [defaultvalue][in] */ enum vsCMPart Part,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeType_GetStartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeType_GetEndPoint_Proxy( 
    CodeType * This,
    /* [defaultvalue][in] */ enum vsCMPart Part,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeType_GetEndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeType_get_Parent_Proxy( 
    CodeType * This,
    /* [retval][out] */ IDispatch **ParentObject);


void __RPC_STUB CodeType_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeType_get_Namespace_Proxy( 
    CodeType * This,
    /* [retval][out] */ CodeNamespace **ppCodeNamespace);


void __RPC_STUB CodeType_get_Namespace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeType_get_Bases_Proxy( 
    CodeType * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeType_get_Bases_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeType_get_Members_Proxy( 
    CodeType * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeType_get_Members_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeType_put_Access_Proxy( 
    CodeType * This,
    enum vsCMAccess Access);


void __RPC_STUB CodeType_put_Access_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeType_get_Access_Proxy( 
    CodeType * This,
    /* [retval][out] */ enum vsCMAccess *pAccess);


void __RPC_STUB CodeType_get_Access_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeType_get_Attributes_Proxy( 
    CodeType * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeType_get_Attributes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeType_get_DocComment_Proxy( 
    CodeType * This,
    /* [retval][out] */ BSTR *pDocComment);


void __RPC_STUB CodeType_get_DocComment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeType_put_DocComment_Proxy( 
    CodeType * This,
    BSTR DocComment);


void __RPC_STUB CodeType_put_DocComment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeType_get_Comment_Proxy( 
    CodeType * This,
    /* [retval][out] */ BSTR *pComment);


void __RPC_STUB CodeType_get_Comment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeType_put_Comment_Proxy( 
    CodeType * This,
    BSTR Comment);


void __RPC_STUB CodeType_put_Comment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeType_AddBase_Proxy( 
    CodeType * This,
    VARIANT Base,
    /* [optional] */ VARIANT Position,
    /* [retval][out] */ CodeElement **ppOut);


void __RPC_STUB CodeType_AddBase_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeType_AddAttribute_Proxy( 
    CodeType * This,
    BSTR Name,
    BSTR Value,
    /* [optional] */ VARIANT Position,
    /* [retval][out] */ CodeAttribute **ppCodeAttribute);


void __RPC_STUB CodeType_AddAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeType_RemoveBase_Proxy( 
    CodeType * This,
    VARIANT Element);


void __RPC_STUB CodeType_RemoveBase_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeType_RemoveMember_Proxy( 
    CodeType * This,
    VARIANT Element);


void __RPC_STUB CodeType_RemoveMember_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeType_get_IsDerivedFrom_Proxy( 
    CodeType * This,
    BSTR FullName,
    /* [retval][out] */ VARIANT_BOOL *pVal);


void __RPC_STUB CodeType_get_IsDerivedFrom_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeType_get_DerivedTypes_Proxy( 
    CodeType * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeType_get_DerivedTypes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __CodeType_INTERFACE_DEFINED__ */


#ifndef __CodeNamespace_INTERFACE_DEFINED__
#define __CodeNamespace_INTERFACE_DEFINED__

/* interface CodeNamespace */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_CodeNamespace;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0CFBC2B8-0D4E-11D3-8997-00C04F688DDE")
    CodeNamespace : public IDispatch
    {
    public:
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ CodeElements **ppCollection) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            BSTR NewName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FullName( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProjectItem( 
            /* [retval][out] */ ProjectItem **pProjItem) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Kind( 
            /* [retval][out] */ enum vsCMElement *pCodeEltKind) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsCodeType( 
            /* [retval][out] */ VARIANT_BOOL *pIsCodeType) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InfoLocation( 
            /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Children( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Language( 
            /* [retval][out] */ BSTR *pLanguage) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartPoint( 
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndPoint( 
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderNames( 
            /* [retval][out] */ VARIANT *ExtenderNames) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_Extender( 
            BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderCATID( 
            /* [retval][out] */ BSTR *pRetval) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetStartPoint( 
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetEndPoint( 
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **ParentObject) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Members( 
            /* [retval][out] */ CodeElements **ppMembers) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DocComment( 
            /* [retval][out] */ BSTR *pDocComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DocComment( 
            BSTR DocComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Comment( 
            /* [retval][out] */ BSTR *pComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Comment( 
            BSTR Comment) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddNamespace( 
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeNamespace **ppCodeNamespace) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddClass( 
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [optional] */ VARIANT ImplementedInterfaces,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeClass **ppCodeClass) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddInterface( 
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeInterface **ppCodeInterface) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddStruct( 
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [optional] */ VARIANT ImplementedInterfaces,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeStruct **ppCodeStruct) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddEnum( 
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeEnum **ppCodeEnum) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddDelegate( 
            BSTR Name,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeDelegate **ppCodeDelegate) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Remove( 
            VARIANT Element) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CodeNamespaceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CodeNamespace * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CodeNamespace * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CodeNamespace * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CodeNamespace * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CodeNamespace * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CodeNamespace * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CodeNamespace * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            CodeNamespace * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            CodeNamespace * This,
            /* [retval][out] */ CodeElements **ppCollection);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            CodeNamespace * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            CodeNamespace * This,
            BSTR NewName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullName )( 
            CodeNamespace * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProjectItem )( 
            CodeNamespace * This,
            /* [retval][out] */ ProjectItem **pProjItem);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Kind )( 
            CodeNamespace * This,
            /* [retval][out] */ enum vsCMElement *pCodeEltKind);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsCodeType )( 
            CodeNamespace * This,
            /* [retval][out] */ VARIANT_BOOL *pIsCodeType);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InfoLocation )( 
            CodeNamespace * This,
            /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            CodeNamespace * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Language )( 
            CodeNamespace * This,
            /* [retval][out] */ BSTR *pLanguage);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartPoint )( 
            CodeNamespace * This,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndPoint )( 
            CodeNamespace * This,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderNames )( 
            CodeNamespace * This,
            /* [retval][out] */ VARIANT *ExtenderNames);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Extender )( 
            CodeNamespace * This,
            BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderCATID )( 
            CodeNamespace * This,
            /* [retval][out] */ BSTR *pRetval);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetStartPoint )( 
            CodeNamespace * This,
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetEndPoint )( 
            CodeNamespace * This,
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CodeNamespace * This,
            /* [retval][out] */ IDispatch **ParentObject);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Members )( 
            CodeNamespace * This,
            /* [retval][out] */ CodeElements **ppMembers);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DocComment )( 
            CodeNamespace * This,
            /* [retval][out] */ BSTR *pDocComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DocComment )( 
            CodeNamespace * This,
            BSTR DocComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Comment )( 
            CodeNamespace * This,
            /* [retval][out] */ BSTR *pComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Comment )( 
            CodeNamespace * This,
            BSTR Comment);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddNamespace )( 
            CodeNamespace * This,
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeNamespace **ppCodeNamespace);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddClass )( 
            CodeNamespace * This,
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [optional] */ VARIANT ImplementedInterfaces,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeClass **ppCodeClass);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddInterface )( 
            CodeNamespace * This,
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeInterface **ppCodeInterface);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddStruct )( 
            CodeNamespace * This,
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [optional] */ VARIANT ImplementedInterfaces,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeStruct **ppCodeStruct);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddEnum )( 
            CodeNamespace * This,
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeEnum **ppCodeEnum);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddDelegate )( 
            CodeNamespace * This,
            BSTR Name,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeDelegate **ppCodeDelegate);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Remove )( 
            CodeNamespace * This,
            VARIANT Element);
        
        END_INTERFACE
    } CodeNamespaceVtbl;

    interface CodeNamespace
    {
        CONST_VTBL struct CodeNamespaceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CodeNamespace_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define CodeNamespace_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define CodeNamespace_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define CodeNamespace_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define CodeNamespace_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define CodeNamespace_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define CodeNamespace_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define CodeNamespace_get_DTE(This,DTEObject)	\
    (This)->lpVtbl -> get_DTE(This,DTEObject)

#define CodeNamespace_get_Collection(This,ppCollection)	\
    (This)->lpVtbl -> get_Collection(This,ppCollection)

#define CodeNamespace_get_Name(This,pVal)	\
    (This)->lpVtbl -> get_Name(This,pVal)

#define CodeNamespace_put_Name(This,NewName)	\
    (This)->lpVtbl -> put_Name(This,NewName)

#define CodeNamespace_get_FullName(This,pVal)	\
    (This)->lpVtbl -> get_FullName(This,pVal)

#define CodeNamespace_get_ProjectItem(This,pProjItem)	\
    (This)->lpVtbl -> get_ProjectItem(This,pProjItem)

#define CodeNamespace_get_Kind(This,pCodeEltKind)	\
    (This)->lpVtbl -> get_Kind(This,pCodeEltKind)

#define CodeNamespace_get_IsCodeType(This,pIsCodeType)	\
    (This)->lpVtbl -> get_IsCodeType(This,pIsCodeType)

#define CodeNamespace_get_InfoLocation(This,pInfoLocation)	\
    (This)->lpVtbl -> get_InfoLocation(This,pInfoLocation)

#define CodeNamespace_get_Children(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Children(This,ppCodeElements)

#define CodeNamespace_get_Language(This,pLanguage)	\
    (This)->lpVtbl -> get_Language(This,pLanguage)

#define CodeNamespace_get_StartPoint(This,ppTextPoint)	\
    (This)->lpVtbl -> get_StartPoint(This,ppTextPoint)

#define CodeNamespace_get_EndPoint(This,ppTextPoint)	\
    (This)->lpVtbl -> get_EndPoint(This,ppTextPoint)

#define CodeNamespace_get_ExtenderNames(This,ExtenderNames)	\
    (This)->lpVtbl -> get_ExtenderNames(This,ExtenderNames)

#define CodeNamespace_get_Extender(This,ExtenderName,Extender)	\
    (This)->lpVtbl -> get_Extender(This,ExtenderName,Extender)

#define CodeNamespace_get_ExtenderCATID(This,pRetval)	\
    (This)->lpVtbl -> get_ExtenderCATID(This,pRetval)

#define CodeNamespace_GetStartPoint(This,Part,ppTextPoint)	\
    (This)->lpVtbl -> GetStartPoint(This,Part,ppTextPoint)

#define CodeNamespace_GetEndPoint(This,Part,ppTextPoint)	\
    (This)->lpVtbl -> GetEndPoint(This,Part,ppTextPoint)

#define CodeNamespace_get_Parent(This,ParentObject)	\
    (This)->lpVtbl -> get_Parent(This,ParentObject)

#define CodeNamespace_get_Members(This,ppMembers)	\
    (This)->lpVtbl -> get_Members(This,ppMembers)

#define CodeNamespace_get_DocComment(This,pDocComment)	\
    (This)->lpVtbl -> get_DocComment(This,pDocComment)

#define CodeNamespace_put_DocComment(This,DocComment)	\
    (This)->lpVtbl -> put_DocComment(This,DocComment)

#define CodeNamespace_get_Comment(This,pComment)	\
    (This)->lpVtbl -> get_Comment(This,pComment)

#define CodeNamespace_put_Comment(This,Comment)	\
    (This)->lpVtbl -> put_Comment(This,Comment)

#define CodeNamespace_AddNamespace(This,Name,Position,ppCodeNamespace)	\
    (This)->lpVtbl -> AddNamespace(This,Name,Position,ppCodeNamespace)

#define CodeNamespace_AddClass(This,Name,Position,Bases,ImplementedInterfaces,Access,ppCodeClass)	\
    (This)->lpVtbl -> AddClass(This,Name,Position,Bases,ImplementedInterfaces,Access,ppCodeClass)

#define CodeNamespace_AddInterface(This,Name,Position,Bases,Access,ppCodeInterface)	\
    (This)->lpVtbl -> AddInterface(This,Name,Position,Bases,Access,ppCodeInterface)

#define CodeNamespace_AddStruct(This,Name,Position,Bases,ImplementedInterfaces,Access,ppCodeStruct)	\
    (This)->lpVtbl -> AddStruct(This,Name,Position,Bases,ImplementedInterfaces,Access,ppCodeStruct)

#define CodeNamespace_AddEnum(This,Name,Position,Bases,Access,ppCodeEnum)	\
    (This)->lpVtbl -> AddEnum(This,Name,Position,Bases,Access,ppCodeEnum)

#define CodeNamespace_AddDelegate(This,Name,Type,Position,Access,ppCodeDelegate)	\
    (This)->lpVtbl -> AddDelegate(This,Name,Type,Position,Access,ppCodeDelegate)

#define CodeNamespace_Remove(This,Element)	\
    (This)->lpVtbl -> Remove(This,Element)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_get_DTE_Proxy( 
    CodeNamespace * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB CodeNamespace_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_get_Collection_Proxy( 
    CodeNamespace * This,
    /* [retval][out] */ CodeElements **ppCollection);


void __RPC_STUB CodeNamespace_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_get_Name_Proxy( 
    CodeNamespace * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB CodeNamespace_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_put_Name_Proxy( 
    CodeNamespace * This,
    BSTR NewName);


void __RPC_STUB CodeNamespace_put_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_get_FullName_Proxy( 
    CodeNamespace * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB CodeNamespace_get_FullName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_get_ProjectItem_Proxy( 
    CodeNamespace * This,
    /* [retval][out] */ ProjectItem **pProjItem);


void __RPC_STUB CodeNamespace_get_ProjectItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_get_Kind_Proxy( 
    CodeNamespace * This,
    /* [retval][out] */ enum vsCMElement *pCodeEltKind);


void __RPC_STUB CodeNamespace_get_Kind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_get_IsCodeType_Proxy( 
    CodeNamespace * This,
    /* [retval][out] */ VARIANT_BOOL *pIsCodeType);


void __RPC_STUB CodeNamespace_get_IsCodeType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_get_InfoLocation_Proxy( 
    CodeNamespace * This,
    /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation);


void __RPC_STUB CodeNamespace_get_InfoLocation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_get_Children_Proxy( 
    CodeNamespace * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeNamespace_get_Children_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_get_Language_Proxy( 
    CodeNamespace * This,
    /* [retval][out] */ BSTR *pLanguage);


void __RPC_STUB CodeNamespace_get_Language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_get_StartPoint_Proxy( 
    CodeNamespace * This,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeNamespace_get_StartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_get_EndPoint_Proxy( 
    CodeNamespace * This,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeNamespace_get_EndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_get_ExtenderNames_Proxy( 
    CodeNamespace * This,
    /* [retval][out] */ VARIANT *ExtenderNames);


void __RPC_STUB CodeNamespace_get_ExtenderNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_get_Extender_Proxy( 
    CodeNamespace * This,
    BSTR ExtenderName,
    /* [retval][out] */ IDispatch **Extender);


void __RPC_STUB CodeNamespace_get_Extender_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_get_ExtenderCATID_Proxy( 
    CodeNamespace * This,
    /* [retval][out] */ BSTR *pRetval);


void __RPC_STUB CodeNamespace_get_ExtenderCATID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_GetStartPoint_Proxy( 
    CodeNamespace * This,
    /* [defaultvalue][in] */ enum vsCMPart Part,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeNamespace_GetStartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_GetEndPoint_Proxy( 
    CodeNamespace * This,
    /* [defaultvalue][in] */ enum vsCMPart Part,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeNamespace_GetEndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_get_Parent_Proxy( 
    CodeNamespace * This,
    /* [retval][out] */ IDispatch **ParentObject);


void __RPC_STUB CodeNamespace_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_get_Members_Proxy( 
    CodeNamespace * This,
    /* [retval][out] */ CodeElements **ppMembers);


void __RPC_STUB CodeNamespace_get_Members_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_get_DocComment_Proxy( 
    CodeNamespace * This,
    /* [retval][out] */ BSTR *pDocComment);


void __RPC_STUB CodeNamespace_get_DocComment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_put_DocComment_Proxy( 
    CodeNamespace * This,
    BSTR DocComment);


void __RPC_STUB CodeNamespace_put_DocComment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_get_Comment_Proxy( 
    CodeNamespace * This,
    /* [retval][out] */ BSTR *pComment);


void __RPC_STUB CodeNamespace_get_Comment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_put_Comment_Proxy( 
    CodeNamespace * This,
    BSTR Comment);


void __RPC_STUB CodeNamespace_put_Comment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_AddNamespace_Proxy( 
    CodeNamespace * This,
    BSTR Name,
    /* [optional] */ VARIANT Position,
    /* [retval][out] */ CodeNamespace **ppCodeNamespace);


void __RPC_STUB CodeNamespace_AddNamespace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_AddClass_Proxy( 
    CodeNamespace * This,
    BSTR Name,
    /* [optional] */ VARIANT Position,
    /* [optional] */ VARIANT Bases,
    /* [optional] */ VARIANT ImplementedInterfaces,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeClass **ppCodeClass);


void __RPC_STUB CodeNamespace_AddClass_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_AddInterface_Proxy( 
    CodeNamespace * This,
    BSTR Name,
    /* [optional] */ VARIANT Position,
    /* [optional] */ VARIANT Bases,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeInterface **ppCodeInterface);


void __RPC_STUB CodeNamespace_AddInterface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_AddStruct_Proxy( 
    CodeNamespace * This,
    BSTR Name,
    /* [optional] */ VARIANT Position,
    /* [optional] */ VARIANT Bases,
    /* [optional] */ VARIANT ImplementedInterfaces,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeStruct **ppCodeStruct);


void __RPC_STUB CodeNamespace_AddStruct_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_AddEnum_Proxy( 
    CodeNamespace * This,
    BSTR Name,
    /* [optional] */ VARIANT Position,
    /* [optional] */ VARIANT Bases,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeEnum **ppCodeEnum);


void __RPC_STUB CodeNamespace_AddEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_AddDelegate_Proxy( 
    CodeNamespace * This,
    BSTR Name,
    VARIANT Type,
    /* [optional] */ VARIANT Position,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeDelegate **ppCodeDelegate);


void __RPC_STUB CodeNamespace_AddDelegate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeNamespace_Remove_Proxy( 
    CodeNamespace * This,
    VARIANT Element);


void __RPC_STUB CodeNamespace_Remove_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __CodeNamespace_INTERFACE_DEFINED__ */


#ifndef __CodeFunction_INTERFACE_DEFINED__
#define __CodeFunction_INTERFACE_DEFINED__

/* interface CodeFunction */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_CodeFunction;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0CFBC2B9-0D4E-11D3-8997-00C04F688DDE")
    CodeFunction : public IDispatch
    {
    public:
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ CodeElements **ppCollection) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            BSTR NewName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FullName( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProjectItem( 
            /* [retval][out] */ ProjectItem **pProjItem) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Kind( 
            /* [retval][out] */ enum vsCMElement *pCodeEltKind) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsCodeType( 
            /* [retval][out] */ VARIANT_BOOL *pIsCodeType) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InfoLocation( 
            /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Children( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Language( 
            /* [retval][out] */ BSTR *pLanguage) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartPoint( 
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndPoint( 
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderNames( 
            /* [retval][out] */ VARIANT *ExtenderNames) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_Extender( 
            BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderCATID( 
            /* [retval][out] */ BSTR *pRetval) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetStartPoint( 
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetEndPoint( 
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **ParentObject) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FunctionKind( 
            /* [retval][out] */ enum vsCMFunction *ppFunctionKind) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Prototype( 
            /* [defaultvalue][in] */ long Flags,
            /* [retval][out] */ BSTR *pFullName) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ CodeTypeRef **ppCodeTypeRef) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Type( 
            CodeTypeRef *pCodeTypeRef) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parameters( 
            /* [retval][out] */ CodeElements **ppMembers) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Access( 
            enum vsCMAccess Access) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Access( 
            /* [retval][out] */ enum vsCMAccess *Access) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsOverloaded( 
            /* [retval][out] */ VARIANT_BOOL *pvbOverloaded) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsShared( 
            /* [retval][out] */ VARIANT_BOOL *Shared) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_IsShared( 
            VARIANT_BOOL Shared) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_MustImplement( 
            /* [retval][out] */ VARIANT_BOOL *MustImplement) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_MustImplement( 
            VARIANT_BOOL MustImplement) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Overloads( 
            /* [retval][out] */ CodeElements **ppMembers) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Attributes( 
            /* [retval][out] */ CodeElements **ppMembers) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DocComment( 
            /* [retval][out] */ BSTR *pDocComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DocComment( 
            BSTR DocComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Comment( 
            /* [retval][out] */ BSTR *pComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Comment( 
            BSTR Comment) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddParameter( 
            BSTR Name,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeParameter **ppCodeParameter) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddAttribute( 
            BSTR Name,
            BSTR Value,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeAttribute **ppCodeAttribute) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveParameter( 
            VARIANT Element) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_CanOverride( 
            /* [retval][out] */ VARIANT_BOOL *pCanOverride) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_CanOverride( 
            VARIANT_BOOL CanOverride) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CodeFunctionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CodeFunction * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CodeFunction * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CodeFunction * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CodeFunction * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CodeFunction * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CodeFunction * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CodeFunction * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            CodeFunction * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            CodeFunction * This,
            /* [retval][out] */ CodeElements **ppCollection);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            CodeFunction * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            CodeFunction * This,
            BSTR NewName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullName )( 
            CodeFunction * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProjectItem )( 
            CodeFunction * This,
            /* [retval][out] */ ProjectItem **pProjItem);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Kind )( 
            CodeFunction * This,
            /* [retval][out] */ enum vsCMElement *pCodeEltKind);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsCodeType )( 
            CodeFunction * This,
            /* [retval][out] */ VARIANT_BOOL *pIsCodeType);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InfoLocation )( 
            CodeFunction * This,
            /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            CodeFunction * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Language )( 
            CodeFunction * This,
            /* [retval][out] */ BSTR *pLanguage);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartPoint )( 
            CodeFunction * This,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndPoint )( 
            CodeFunction * This,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderNames )( 
            CodeFunction * This,
            /* [retval][out] */ VARIANT *ExtenderNames);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Extender )( 
            CodeFunction * This,
            BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderCATID )( 
            CodeFunction * This,
            /* [retval][out] */ BSTR *pRetval);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetStartPoint )( 
            CodeFunction * This,
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetEndPoint )( 
            CodeFunction * This,
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CodeFunction * This,
            /* [retval][out] */ IDispatch **ParentObject);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FunctionKind )( 
            CodeFunction * This,
            /* [retval][out] */ enum vsCMFunction *ppFunctionKind);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Prototype )( 
            CodeFunction * This,
            /* [defaultvalue][in] */ long Flags,
            /* [retval][out] */ BSTR *pFullName);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            CodeFunction * This,
            /* [retval][out] */ CodeTypeRef **ppCodeTypeRef);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Type )( 
            CodeFunction * This,
            CodeTypeRef *pCodeTypeRef);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parameters )( 
            CodeFunction * This,
            /* [retval][out] */ CodeElements **ppMembers);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Access )( 
            CodeFunction * This,
            enum vsCMAccess Access);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Access )( 
            CodeFunction * This,
            /* [retval][out] */ enum vsCMAccess *Access);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsOverloaded )( 
            CodeFunction * This,
            /* [retval][out] */ VARIANT_BOOL *pvbOverloaded);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsShared )( 
            CodeFunction * This,
            /* [retval][out] */ VARIANT_BOOL *Shared);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IsShared )( 
            CodeFunction * This,
            VARIANT_BOOL Shared);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_MustImplement )( 
            CodeFunction * This,
            /* [retval][out] */ VARIANT_BOOL *MustImplement);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_MustImplement )( 
            CodeFunction * This,
            VARIANT_BOOL MustImplement);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Overloads )( 
            CodeFunction * This,
            /* [retval][out] */ CodeElements **ppMembers);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Attributes )( 
            CodeFunction * This,
            /* [retval][out] */ CodeElements **ppMembers);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DocComment )( 
            CodeFunction * This,
            /* [retval][out] */ BSTR *pDocComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DocComment )( 
            CodeFunction * This,
            BSTR DocComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Comment )( 
            CodeFunction * This,
            /* [retval][out] */ BSTR *pComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Comment )( 
            CodeFunction * This,
            BSTR Comment);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddParameter )( 
            CodeFunction * This,
            BSTR Name,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeParameter **ppCodeParameter);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            CodeFunction * This,
            BSTR Name,
            BSTR Value,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeAttribute **ppCodeAttribute);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveParameter )( 
            CodeFunction * This,
            VARIANT Element);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_CanOverride )( 
            CodeFunction * This,
            /* [retval][out] */ VARIANT_BOOL *pCanOverride);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_CanOverride )( 
            CodeFunction * This,
            VARIANT_BOOL CanOverride);
        
        END_INTERFACE
    } CodeFunctionVtbl;

    interface CodeFunction
    {
        CONST_VTBL struct CodeFunctionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CodeFunction_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define CodeFunction_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define CodeFunction_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define CodeFunction_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define CodeFunction_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define CodeFunction_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define CodeFunction_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define CodeFunction_get_DTE(This,DTEObject)	\
    (This)->lpVtbl -> get_DTE(This,DTEObject)

#define CodeFunction_get_Collection(This,ppCollection)	\
    (This)->lpVtbl -> get_Collection(This,ppCollection)

#define CodeFunction_get_Name(This,pVal)	\
    (This)->lpVtbl -> get_Name(This,pVal)

#define CodeFunction_put_Name(This,NewName)	\
    (This)->lpVtbl -> put_Name(This,NewName)

#define CodeFunction_get_FullName(This,pVal)	\
    (This)->lpVtbl -> get_FullName(This,pVal)

#define CodeFunction_get_ProjectItem(This,pProjItem)	\
    (This)->lpVtbl -> get_ProjectItem(This,pProjItem)

#define CodeFunction_get_Kind(This,pCodeEltKind)	\
    (This)->lpVtbl -> get_Kind(This,pCodeEltKind)

#define CodeFunction_get_IsCodeType(This,pIsCodeType)	\
    (This)->lpVtbl -> get_IsCodeType(This,pIsCodeType)

#define CodeFunction_get_InfoLocation(This,pInfoLocation)	\
    (This)->lpVtbl -> get_InfoLocation(This,pInfoLocation)

#define CodeFunction_get_Children(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Children(This,ppCodeElements)

#define CodeFunction_get_Language(This,pLanguage)	\
    (This)->lpVtbl -> get_Language(This,pLanguage)

#define CodeFunction_get_StartPoint(This,ppTextPoint)	\
    (This)->lpVtbl -> get_StartPoint(This,ppTextPoint)

#define CodeFunction_get_EndPoint(This,ppTextPoint)	\
    (This)->lpVtbl -> get_EndPoint(This,ppTextPoint)

#define CodeFunction_get_ExtenderNames(This,ExtenderNames)	\
    (This)->lpVtbl -> get_ExtenderNames(This,ExtenderNames)

#define CodeFunction_get_Extender(This,ExtenderName,Extender)	\
    (This)->lpVtbl -> get_Extender(This,ExtenderName,Extender)

#define CodeFunction_get_ExtenderCATID(This,pRetval)	\
    (This)->lpVtbl -> get_ExtenderCATID(This,pRetval)

#define CodeFunction_GetStartPoint(This,Part,ppTextPoint)	\
    (This)->lpVtbl -> GetStartPoint(This,Part,ppTextPoint)

#define CodeFunction_GetEndPoint(This,Part,ppTextPoint)	\
    (This)->lpVtbl -> GetEndPoint(This,Part,ppTextPoint)

#define CodeFunction_get_Parent(This,ParentObject)	\
    (This)->lpVtbl -> get_Parent(This,ParentObject)

#define CodeFunction_get_FunctionKind(This,ppFunctionKind)	\
    (This)->lpVtbl -> get_FunctionKind(This,ppFunctionKind)

#define CodeFunction_get_Prototype(This,Flags,pFullName)	\
    (This)->lpVtbl -> get_Prototype(This,Flags,pFullName)

#define CodeFunction_get_Type(This,ppCodeTypeRef)	\
    (This)->lpVtbl -> get_Type(This,ppCodeTypeRef)

#define CodeFunction_put_Type(This,pCodeTypeRef)	\
    (This)->lpVtbl -> put_Type(This,pCodeTypeRef)

#define CodeFunction_get_Parameters(This,ppMembers)	\
    (This)->lpVtbl -> get_Parameters(This,ppMembers)

#define CodeFunction_put_Access(This,Access)	\
    (This)->lpVtbl -> put_Access(This,Access)

#define CodeFunction_get_Access(This,Access)	\
    (This)->lpVtbl -> get_Access(This,Access)

#define CodeFunction_get_IsOverloaded(This,pvbOverloaded)	\
    (This)->lpVtbl -> get_IsOverloaded(This,pvbOverloaded)

#define CodeFunction_get_IsShared(This,Shared)	\
    (This)->lpVtbl -> get_IsShared(This,Shared)

#define CodeFunction_put_IsShared(This,Shared)	\
    (This)->lpVtbl -> put_IsShared(This,Shared)

#define CodeFunction_get_MustImplement(This,MustImplement)	\
    (This)->lpVtbl -> get_MustImplement(This,MustImplement)

#define CodeFunction_put_MustImplement(This,MustImplement)	\
    (This)->lpVtbl -> put_MustImplement(This,MustImplement)

#define CodeFunction_get_Overloads(This,ppMembers)	\
    (This)->lpVtbl -> get_Overloads(This,ppMembers)

#define CodeFunction_get_Attributes(This,ppMembers)	\
    (This)->lpVtbl -> get_Attributes(This,ppMembers)

#define CodeFunction_get_DocComment(This,pDocComment)	\
    (This)->lpVtbl -> get_DocComment(This,pDocComment)

#define CodeFunction_put_DocComment(This,DocComment)	\
    (This)->lpVtbl -> put_DocComment(This,DocComment)

#define CodeFunction_get_Comment(This,pComment)	\
    (This)->lpVtbl -> get_Comment(This,pComment)

#define CodeFunction_put_Comment(This,Comment)	\
    (This)->lpVtbl -> put_Comment(This,Comment)

#define CodeFunction_AddParameter(This,Name,Type,Position,ppCodeParameter)	\
    (This)->lpVtbl -> AddParameter(This,Name,Type,Position,ppCodeParameter)

#define CodeFunction_AddAttribute(This,Name,Value,Position,ppCodeAttribute)	\
    (This)->lpVtbl -> AddAttribute(This,Name,Value,Position,ppCodeAttribute)

#define CodeFunction_RemoveParameter(This,Element)	\
    (This)->lpVtbl -> RemoveParameter(This,Element)

#define CodeFunction_get_CanOverride(This,pCanOverride)	\
    (This)->lpVtbl -> get_CanOverride(This,pCanOverride)

#define CodeFunction_put_CanOverride(This,CanOverride)	\
    (This)->lpVtbl -> put_CanOverride(This,CanOverride)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_DTE_Proxy( 
    CodeFunction * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB CodeFunction_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_Collection_Proxy( 
    CodeFunction * This,
    /* [retval][out] */ CodeElements **ppCollection);


void __RPC_STUB CodeFunction_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_Name_Proxy( 
    CodeFunction * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB CodeFunction_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_put_Name_Proxy( 
    CodeFunction * This,
    BSTR NewName);


void __RPC_STUB CodeFunction_put_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_FullName_Proxy( 
    CodeFunction * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB CodeFunction_get_FullName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_ProjectItem_Proxy( 
    CodeFunction * This,
    /* [retval][out] */ ProjectItem **pProjItem);


void __RPC_STUB CodeFunction_get_ProjectItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_Kind_Proxy( 
    CodeFunction * This,
    /* [retval][out] */ enum vsCMElement *pCodeEltKind);


void __RPC_STUB CodeFunction_get_Kind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_IsCodeType_Proxy( 
    CodeFunction * This,
    /* [retval][out] */ VARIANT_BOOL *pIsCodeType);


void __RPC_STUB CodeFunction_get_IsCodeType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_InfoLocation_Proxy( 
    CodeFunction * This,
    /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation);


void __RPC_STUB CodeFunction_get_InfoLocation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_Children_Proxy( 
    CodeFunction * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeFunction_get_Children_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_Language_Proxy( 
    CodeFunction * This,
    /* [retval][out] */ BSTR *pLanguage);


void __RPC_STUB CodeFunction_get_Language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_StartPoint_Proxy( 
    CodeFunction * This,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeFunction_get_StartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_EndPoint_Proxy( 
    CodeFunction * This,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeFunction_get_EndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_ExtenderNames_Proxy( 
    CodeFunction * This,
    /* [retval][out] */ VARIANT *ExtenderNames);


void __RPC_STUB CodeFunction_get_ExtenderNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_Extender_Proxy( 
    CodeFunction * This,
    BSTR ExtenderName,
    /* [retval][out] */ IDispatch **Extender);


void __RPC_STUB CodeFunction_get_Extender_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_ExtenderCATID_Proxy( 
    CodeFunction * This,
    /* [retval][out] */ BSTR *pRetval);


void __RPC_STUB CodeFunction_get_ExtenderCATID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_GetStartPoint_Proxy( 
    CodeFunction * This,
    /* [defaultvalue][in] */ enum vsCMPart Part,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeFunction_GetStartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_GetEndPoint_Proxy( 
    CodeFunction * This,
    /* [defaultvalue][in] */ enum vsCMPart Part,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeFunction_GetEndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_Parent_Proxy( 
    CodeFunction * This,
    /* [retval][out] */ IDispatch **ParentObject);


void __RPC_STUB CodeFunction_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_FunctionKind_Proxy( 
    CodeFunction * This,
    /* [retval][out] */ enum vsCMFunction *ppFunctionKind);


void __RPC_STUB CodeFunction_get_FunctionKind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_Prototype_Proxy( 
    CodeFunction * This,
    /* [defaultvalue][in] */ long Flags,
    /* [retval][out] */ BSTR *pFullName);


void __RPC_STUB CodeFunction_get_Prototype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_Type_Proxy( 
    CodeFunction * This,
    /* [retval][out] */ CodeTypeRef **ppCodeTypeRef);


void __RPC_STUB CodeFunction_get_Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_put_Type_Proxy( 
    CodeFunction * This,
    CodeTypeRef *pCodeTypeRef);


void __RPC_STUB CodeFunction_put_Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_Parameters_Proxy( 
    CodeFunction * This,
    /* [retval][out] */ CodeElements **ppMembers);


void __RPC_STUB CodeFunction_get_Parameters_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_put_Access_Proxy( 
    CodeFunction * This,
    enum vsCMAccess Access);


void __RPC_STUB CodeFunction_put_Access_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_Access_Proxy( 
    CodeFunction * This,
    /* [retval][out] */ enum vsCMAccess *Access);


void __RPC_STUB CodeFunction_get_Access_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_IsOverloaded_Proxy( 
    CodeFunction * This,
    /* [retval][out] */ VARIANT_BOOL *pvbOverloaded);


void __RPC_STUB CodeFunction_get_IsOverloaded_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_IsShared_Proxy( 
    CodeFunction * This,
    /* [retval][out] */ VARIANT_BOOL *Shared);


void __RPC_STUB CodeFunction_get_IsShared_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_put_IsShared_Proxy( 
    CodeFunction * This,
    VARIANT_BOOL Shared);


void __RPC_STUB CodeFunction_put_IsShared_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_MustImplement_Proxy( 
    CodeFunction * This,
    /* [retval][out] */ VARIANT_BOOL *MustImplement);


void __RPC_STUB CodeFunction_get_MustImplement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_put_MustImplement_Proxy( 
    CodeFunction * This,
    VARIANT_BOOL MustImplement);


void __RPC_STUB CodeFunction_put_MustImplement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_Overloads_Proxy( 
    CodeFunction * This,
    /* [retval][out] */ CodeElements **ppMembers);


void __RPC_STUB CodeFunction_get_Overloads_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_Attributes_Proxy( 
    CodeFunction * This,
    /* [retval][out] */ CodeElements **ppMembers);


void __RPC_STUB CodeFunction_get_Attributes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_DocComment_Proxy( 
    CodeFunction * This,
    /* [retval][out] */ BSTR *pDocComment);


void __RPC_STUB CodeFunction_get_DocComment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_put_DocComment_Proxy( 
    CodeFunction * This,
    BSTR DocComment);


void __RPC_STUB CodeFunction_put_DocComment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_Comment_Proxy( 
    CodeFunction * This,
    /* [retval][out] */ BSTR *pComment);


void __RPC_STUB CodeFunction_get_Comment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_put_Comment_Proxy( 
    CodeFunction * This,
    BSTR Comment);


void __RPC_STUB CodeFunction_put_Comment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_AddParameter_Proxy( 
    CodeFunction * This,
    BSTR Name,
    VARIANT Type,
    /* [optional] */ VARIANT Position,
    /* [retval][out] */ CodeParameter **ppCodeParameter);


void __RPC_STUB CodeFunction_AddParameter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_AddAttribute_Proxy( 
    CodeFunction * This,
    BSTR Name,
    BSTR Value,
    /* [optional] */ VARIANT Position,
    /* [retval][out] */ CodeAttribute **ppCodeAttribute);


void __RPC_STUB CodeFunction_AddAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_RemoveParameter_Proxy( 
    CodeFunction * This,
    VARIANT Element);


void __RPC_STUB CodeFunction_RemoveParameter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_get_CanOverride_Proxy( 
    CodeFunction * This,
    /* [retval][out] */ VARIANT_BOOL *pCanOverride);


void __RPC_STUB CodeFunction_get_CanOverride_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeFunction_put_CanOverride_Proxy( 
    CodeFunction * This,
    VARIANT_BOOL CanOverride);


void __RPC_STUB CodeFunction_put_CanOverride_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __CodeFunction_INTERFACE_DEFINED__ */


#ifndef __CodeVariable_INTERFACE_DEFINED__
#define __CodeVariable_INTERFACE_DEFINED__

/* interface CodeVariable */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_CodeVariable;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0CFBC2BA-0D4E-11D3-8997-00C04F688DDE")
    CodeVariable : public IDispatch
    {
    public:
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ CodeElements **ppCollection) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            BSTR NewName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FullName( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProjectItem( 
            /* [retval][out] */ ProjectItem **pProjItem) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Kind( 
            /* [retval][out] */ enum vsCMElement *pCodeEltKind) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsCodeType( 
            /* [retval][out] */ VARIANT_BOOL *pIsCodeType) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InfoLocation( 
            /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Children( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Language( 
            /* [retval][out] */ BSTR *pLanguage) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartPoint( 
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndPoint( 
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderNames( 
            /* [retval][out] */ VARIANT *ExtenderNames) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_Extender( 
            BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderCATID( 
            /* [retval][out] */ BSTR *pRetval) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetStartPoint( 
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetEndPoint( 
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **ParentObject) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InitExpression( 
            /* [retval][out] */ VARIANT *pExpr) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_InitExpression( 
            VARIANT Expr) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Prototype( 
            /* [defaultvalue][in] */ long Flags,
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Type( 
            CodeTypeRef *pCodeTypeRef) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ CodeTypeRef **pCodeTypeRef) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Access( 
            enum vsCMAccess Access) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Access( 
            /* [retval][out] */ enum vsCMAccess *Access) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsConstant( 
            /* [retval][out] */ VARIANT_BOOL *pIsConstant) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_IsConstant( 
            VARIANT_BOOL IsConstant) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Attributes( 
            /* [retval][out] */ CodeElements **ppMembers) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DocComment( 
            /* [retval][out] */ BSTR *pDocComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DocComment( 
            BSTR DocComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Comment( 
            /* [retval][out] */ BSTR *pComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Comment( 
            BSTR Comment) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddAttribute( 
            BSTR Name,
            BSTR Value,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeAttribute **ppCodeAttribute) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsShared( 
            /* [retval][out] */ VARIANT_BOOL *pShared) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_IsShared( 
            VARIANT_BOOL Shared) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CodeVariableVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CodeVariable * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CodeVariable * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CodeVariable * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CodeVariable * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CodeVariable * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CodeVariable * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CodeVariable * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            CodeVariable * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            CodeVariable * This,
            /* [retval][out] */ CodeElements **ppCollection);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            CodeVariable * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            CodeVariable * This,
            BSTR NewName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullName )( 
            CodeVariable * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProjectItem )( 
            CodeVariable * This,
            /* [retval][out] */ ProjectItem **pProjItem);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Kind )( 
            CodeVariable * This,
            /* [retval][out] */ enum vsCMElement *pCodeEltKind);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsCodeType )( 
            CodeVariable * This,
            /* [retval][out] */ VARIANT_BOOL *pIsCodeType);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InfoLocation )( 
            CodeVariable * This,
            /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            CodeVariable * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Language )( 
            CodeVariable * This,
            /* [retval][out] */ BSTR *pLanguage);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartPoint )( 
            CodeVariable * This,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndPoint )( 
            CodeVariable * This,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderNames )( 
            CodeVariable * This,
            /* [retval][out] */ VARIANT *ExtenderNames);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Extender )( 
            CodeVariable * This,
            BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderCATID )( 
            CodeVariable * This,
            /* [retval][out] */ BSTR *pRetval);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetStartPoint )( 
            CodeVariable * This,
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetEndPoint )( 
            CodeVariable * This,
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CodeVariable * This,
            /* [retval][out] */ IDispatch **ParentObject);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InitExpression )( 
            CodeVariable * This,
            /* [retval][out] */ VARIANT *pExpr);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_InitExpression )( 
            CodeVariable * This,
            VARIANT Expr);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Prototype )( 
            CodeVariable * This,
            /* [defaultvalue][in] */ long Flags,
            /* [retval][out] */ BSTR *pVal);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Type )( 
            CodeVariable * This,
            CodeTypeRef *pCodeTypeRef);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            CodeVariable * This,
            /* [retval][out] */ CodeTypeRef **pCodeTypeRef);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Access )( 
            CodeVariable * This,
            enum vsCMAccess Access);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Access )( 
            CodeVariable * This,
            /* [retval][out] */ enum vsCMAccess *Access);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsConstant )( 
            CodeVariable * This,
            /* [retval][out] */ VARIANT_BOOL *pIsConstant);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IsConstant )( 
            CodeVariable * This,
            VARIANT_BOOL IsConstant);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Attributes )( 
            CodeVariable * This,
            /* [retval][out] */ CodeElements **ppMembers);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DocComment )( 
            CodeVariable * This,
            /* [retval][out] */ BSTR *pDocComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DocComment )( 
            CodeVariable * This,
            BSTR DocComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Comment )( 
            CodeVariable * This,
            /* [retval][out] */ BSTR *pComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Comment )( 
            CodeVariable * This,
            BSTR Comment);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            CodeVariable * This,
            BSTR Name,
            BSTR Value,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeAttribute **ppCodeAttribute);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsShared )( 
            CodeVariable * This,
            /* [retval][out] */ VARIANT_BOOL *pShared);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IsShared )( 
            CodeVariable * This,
            VARIANT_BOOL Shared);
        
        END_INTERFACE
    } CodeVariableVtbl;

    interface CodeVariable
    {
        CONST_VTBL struct CodeVariableVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CodeVariable_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define CodeVariable_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define CodeVariable_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define CodeVariable_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define CodeVariable_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define CodeVariable_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define CodeVariable_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define CodeVariable_get_DTE(This,DTEObject)	\
    (This)->lpVtbl -> get_DTE(This,DTEObject)

#define CodeVariable_get_Collection(This,ppCollection)	\
    (This)->lpVtbl -> get_Collection(This,ppCollection)

#define CodeVariable_get_Name(This,pVal)	\
    (This)->lpVtbl -> get_Name(This,pVal)

#define CodeVariable_put_Name(This,NewName)	\
    (This)->lpVtbl -> put_Name(This,NewName)

#define CodeVariable_get_FullName(This,pVal)	\
    (This)->lpVtbl -> get_FullName(This,pVal)

#define CodeVariable_get_ProjectItem(This,pProjItem)	\
    (This)->lpVtbl -> get_ProjectItem(This,pProjItem)

#define CodeVariable_get_Kind(This,pCodeEltKind)	\
    (This)->lpVtbl -> get_Kind(This,pCodeEltKind)

#define CodeVariable_get_IsCodeType(This,pIsCodeType)	\
    (This)->lpVtbl -> get_IsCodeType(This,pIsCodeType)

#define CodeVariable_get_InfoLocation(This,pInfoLocation)	\
    (This)->lpVtbl -> get_InfoLocation(This,pInfoLocation)

#define CodeVariable_get_Children(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Children(This,ppCodeElements)

#define CodeVariable_get_Language(This,pLanguage)	\
    (This)->lpVtbl -> get_Language(This,pLanguage)

#define CodeVariable_get_StartPoint(This,ppTextPoint)	\
    (This)->lpVtbl -> get_StartPoint(This,ppTextPoint)

#define CodeVariable_get_EndPoint(This,ppTextPoint)	\
    (This)->lpVtbl -> get_EndPoint(This,ppTextPoint)

#define CodeVariable_get_ExtenderNames(This,ExtenderNames)	\
    (This)->lpVtbl -> get_ExtenderNames(This,ExtenderNames)

#define CodeVariable_get_Extender(This,ExtenderName,Extender)	\
    (This)->lpVtbl -> get_Extender(This,ExtenderName,Extender)

#define CodeVariable_get_ExtenderCATID(This,pRetval)	\
    (This)->lpVtbl -> get_ExtenderCATID(This,pRetval)

#define CodeVariable_GetStartPoint(This,Part,ppTextPoint)	\
    (This)->lpVtbl -> GetStartPoint(This,Part,ppTextPoint)

#define CodeVariable_GetEndPoint(This,Part,ppTextPoint)	\
    (This)->lpVtbl -> GetEndPoint(This,Part,ppTextPoint)

#define CodeVariable_get_Parent(This,ParentObject)	\
    (This)->lpVtbl -> get_Parent(This,ParentObject)

#define CodeVariable_get_InitExpression(This,pExpr)	\
    (This)->lpVtbl -> get_InitExpression(This,pExpr)

#define CodeVariable_put_InitExpression(This,Expr)	\
    (This)->lpVtbl -> put_InitExpression(This,Expr)

#define CodeVariable_get_Prototype(This,Flags,pVal)	\
    (This)->lpVtbl -> get_Prototype(This,Flags,pVal)

#define CodeVariable_put_Type(This,pCodeTypeRef)	\
    (This)->lpVtbl -> put_Type(This,pCodeTypeRef)

#define CodeVariable_get_Type(This,pCodeTypeRef)	\
    (This)->lpVtbl -> get_Type(This,pCodeTypeRef)

#define CodeVariable_put_Access(This,Access)	\
    (This)->lpVtbl -> put_Access(This,Access)

#define CodeVariable_get_Access(This,Access)	\
    (This)->lpVtbl -> get_Access(This,Access)

#define CodeVariable_get_IsConstant(This,pIsConstant)	\
    (This)->lpVtbl -> get_IsConstant(This,pIsConstant)

#define CodeVariable_put_IsConstant(This,IsConstant)	\
    (This)->lpVtbl -> put_IsConstant(This,IsConstant)

#define CodeVariable_get_Attributes(This,ppMembers)	\
    (This)->lpVtbl -> get_Attributes(This,ppMembers)

#define CodeVariable_get_DocComment(This,pDocComment)	\
    (This)->lpVtbl -> get_DocComment(This,pDocComment)

#define CodeVariable_put_DocComment(This,DocComment)	\
    (This)->lpVtbl -> put_DocComment(This,DocComment)

#define CodeVariable_get_Comment(This,pComment)	\
    (This)->lpVtbl -> get_Comment(This,pComment)

#define CodeVariable_put_Comment(This,Comment)	\
    (This)->lpVtbl -> put_Comment(This,Comment)

#define CodeVariable_AddAttribute(This,Name,Value,Position,ppCodeAttribute)	\
    (This)->lpVtbl -> AddAttribute(This,Name,Value,Position,ppCodeAttribute)

#define CodeVariable_get_IsShared(This,pShared)	\
    (This)->lpVtbl -> get_IsShared(This,pShared)

#define CodeVariable_put_IsShared(This,Shared)	\
    (This)->lpVtbl -> put_IsShared(This,Shared)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_get_DTE_Proxy( 
    CodeVariable * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB CodeVariable_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_get_Collection_Proxy( 
    CodeVariable * This,
    /* [retval][out] */ CodeElements **ppCollection);


void __RPC_STUB CodeVariable_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_get_Name_Proxy( 
    CodeVariable * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB CodeVariable_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_put_Name_Proxy( 
    CodeVariable * This,
    BSTR NewName);


void __RPC_STUB CodeVariable_put_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_get_FullName_Proxy( 
    CodeVariable * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB CodeVariable_get_FullName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_get_ProjectItem_Proxy( 
    CodeVariable * This,
    /* [retval][out] */ ProjectItem **pProjItem);


void __RPC_STUB CodeVariable_get_ProjectItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_get_Kind_Proxy( 
    CodeVariable * This,
    /* [retval][out] */ enum vsCMElement *pCodeEltKind);


void __RPC_STUB CodeVariable_get_Kind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_get_IsCodeType_Proxy( 
    CodeVariable * This,
    /* [retval][out] */ VARIANT_BOOL *pIsCodeType);


void __RPC_STUB CodeVariable_get_IsCodeType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_get_InfoLocation_Proxy( 
    CodeVariable * This,
    /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation);


void __RPC_STUB CodeVariable_get_InfoLocation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_get_Children_Proxy( 
    CodeVariable * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeVariable_get_Children_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_get_Language_Proxy( 
    CodeVariable * This,
    /* [retval][out] */ BSTR *pLanguage);


void __RPC_STUB CodeVariable_get_Language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_get_StartPoint_Proxy( 
    CodeVariable * This,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeVariable_get_StartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_get_EndPoint_Proxy( 
    CodeVariable * This,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeVariable_get_EndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_get_ExtenderNames_Proxy( 
    CodeVariable * This,
    /* [retval][out] */ VARIANT *ExtenderNames);


void __RPC_STUB CodeVariable_get_ExtenderNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_get_Extender_Proxy( 
    CodeVariable * This,
    BSTR ExtenderName,
    /* [retval][out] */ IDispatch **Extender);


void __RPC_STUB CodeVariable_get_Extender_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_get_ExtenderCATID_Proxy( 
    CodeVariable * This,
    /* [retval][out] */ BSTR *pRetval);


void __RPC_STUB CodeVariable_get_ExtenderCATID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_GetStartPoint_Proxy( 
    CodeVariable * This,
    /* [defaultvalue][in] */ enum vsCMPart Part,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeVariable_GetStartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_GetEndPoint_Proxy( 
    CodeVariable * This,
    /* [defaultvalue][in] */ enum vsCMPart Part,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeVariable_GetEndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_get_Parent_Proxy( 
    CodeVariable * This,
    /* [retval][out] */ IDispatch **ParentObject);


void __RPC_STUB CodeVariable_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_get_InitExpression_Proxy( 
    CodeVariable * This,
    /* [retval][out] */ VARIANT *pExpr);


void __RPC_STUB CodeVariable_get_InitExpression_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_put_InitExpression_Proxy( 
    CodeVariable * This,
    VARIANT Expr);


void __RPC_STUB CodeVariable_put_InitExpression_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_get_Prototype_Proxy( 
    CodeVariable * This,
    /* [defaultvalue][in] */ long Flags,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB CodeVariable_get_Prototype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_put_Type_Proxy( 
    CodeVariable * This,
    CodeTypeRef *pCodeTypeRef);


void __RPC_STUB CodeVariable_put_Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_get_Type_Proxy( 
    CodeVariable * This,
    /* [retval][out] */ CodeTypeRef **pCodeTypeRef);


void __RPC_STUB CodeVariable_get_Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_put_Access_Proxy( 
    CodeVariable * This,
    enum vsCMAccess Access);


void __RPC_STUB CodeVariable_put_Access_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_get_Access_Proxy( 
    CodeVariable * This,
    /* [retval][out] */ enum vsCMAccess *Access);


void __RPC_STUB CodeVariable_get_Access_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_get_IsConstant_Proxy( 
    CodeVariable * This,
    /* [retval][out] */ VARIANT_BOOL *pIsConstant);


void __RPC_STUB CodeVariable_get_IsConstant_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_put_IsConstant_Proxy( 
    CodeVariable * This,
    VARIANT_BOOL IsConstant);


void __RPC_STUB CodeVariable_put_IsConstant_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_get_Attributes_Proxy( 
    CodeVariable * This,
    /* [retval][out] */ CodeElements **ppMembers);


void __RPC_STUB CodeVariable_get_Attributes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_get_DocComment_Proxy( 
    CodeVariable * This,
    /* [retval][out] */ BSTR *pDocComment);


void __RPC_STUB CodeVariable_get_DocComment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_put_DocComment_Proxy( 
    CodeVariable * This,
    BSTR DocComment);


void __RPC_STUB CodeVariable_put_DocComment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_get_Comment_Proxy( 
    CodeVariable * This,
    /* [retval][out] */ BSTR *pComment);


void __RPC_STUB CodeVariable_get_Comment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_put_Comment_Proxy( 
    CodeVariable * This,
    BSTR Comment);


void __RPC_STUB CodeVariable_put_Comment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_AddAttribute_Proxy( 
    CodeVariable * This,
    BSTR Name,
    BSTR Value,
    /* [optional] */ VARIANT Position,
    /* [retval][out] */ CodeAttribute **ppCodeAttribute);


void __RPC_STUB CodeVariable_AddAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_get_IsShared_Proxy( 
    CodeVariable * This,
    /* [retval][out] */ VARIANT_BOOL *pShared);


void __RPC_STUB CodeVariable_get_IsShared_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeVariable_put_IsShared_Proxy( 
    CodeVariable * This,
    VARIANT_BOOL Shared);


void __RPC_STUB CodeVariable_put_IsShared_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __CodeVariable_INTERFACE_DEFINED__ */


#ifndef __CodeProperty_INTERFACE_DEFINED__
#define __CodeProperty_INTERFACE_DEFINED__

/* interface CodeProperty */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_CodeProperty;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0CFBC2BB-0D4E-11D3-8997-00C04F688DDE")
    CodeProperty : public IDispatch
    {
    public:
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ CodeElements **ppCollection) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            BSTR NewName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FullName( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProjectItem( 
            /* [retval][out] */ ProjectItem **pProjItem) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Kind( 
            /* [retval][out] */ enum vsCMElement *pCodeEltKind) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsCodeType( 
            /* [retval][out] */ VARIANT_BOOL *pIsCodeType) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InfoLocation( 
            /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Children( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Language( 
            /* [retval][out] */ BSTR *pLanguage) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartPoint( 
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndPoint( 
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderNames( 
            /* [retval][out] */ VARIANT *ExtenderNames) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_Extender( 
            BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderCATID( 
            /* [retval][out] */ BSTR *pRetval) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetStartPoint( 
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetEndPoint( 
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ CodeClass **ParentObject) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Prototype( 
            /* [defaultvalue][in] */ long Flags,
            /* [retval][out] */ BSTR *pFullName) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Type( 
            CodeTypeRef *pCodeTypeRef) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ CodeTypeRef **pCodeTypeRef) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Getter( 
            /* [retval][out] */ CodeFunction **ppCodeFunction) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Getter( 
            CodeFunction *pCodeFunction) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Setter( 
            /* [retval][out] */ CodeFunction **ppCodeFunction) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Setter( 
            CodeFunction *pCodeFunction) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Access( 
            enum vsCMAccess Access) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Access( 
            /* [retval][out] */ enum vsCMAccess *Access) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Attributes( 
            /* [retval][out] */ CodeElements **ppMembers) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DocComment( 
            /* [retval][out] */ BSTR *pDocComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DocComment( 
            BSTR DocComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Comment( 
            /* [retval][out] */ BSTR *pComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Comment( 
            BSTR Comment) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddAttribute( 
            BSTR Name,
            BSTR Value,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeAttribute **ppCodeAttribute) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CodePropertyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CodeProperty * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CodeProperty * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CodeProperty * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CodeProperty * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CodeProperty * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CodeProperty * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CodeProperty * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            CodeProperty * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            CodeProperty * This,
            /* [retval][out] */ CodeElements **ppCollection);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            CodeProperty * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            CodeProperty * This,
            BSTR NewName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullName )( 
            CodeProperty * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProjectItem )( 
            CodeProperty * This,
            /* [retval][out] */ ProjectItem **pProjItem);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Kind )( 
            CodeProperty * This,
            /* [retval][out] */ enum vsCMElement *pCodeEltKind);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsCodeType )( 
            CodeProperty * This,
            /* [retval][out] */ VARIANT_BOOL *pIsCodeType);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InfoLocation )( 
            CodeProperty * This,
            /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            CodeProperty * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Language )( 
            CodeProperty * This,
            /* [retval][out] */ BSTR *pLanguage);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartPoint )( 
            CodeProperty * This,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndPoint )( 
            CodeProperty * This,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderNames )( 
            CodeProperty * This,
            /* [retval][out] */ VARIANT *ExtenderNames);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Extender )( 
            CodeProperty * This,
            BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderCATID )( 
            CodeProperty * This,
            /* [retval][out] */ BSTR *pRetval);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetStartPoint )( 
            CodeProperty * This,
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetEndPoint )( 
            CodeProperty * This,
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CodeProperty * This,
            /* [retval][out] */ CodeClass **ParentObject);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Prototype )( 
            CodeProperty * This,
            /* [defaultvalue][in] */ long Flags,
            /* [retval][out] */ BSTR *pFullName);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Type )( 
            CodeProperty * This,
            CodeTypeRef *pCodeTypeRef);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            CodeProperty * This,
            /* [retval][out] */ CodeTypeRef **pCodeTypeRef);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Getter )( 
            CodeProperty * This,
            /* [retval][out] */ CodeFunction **ppCodeFunction);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Getter )( 
            CodeProperty * This,
            CodeFunction *pCodeFunction);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Setter )( 
            CodeProperty * This,
            /* [retval][out] */ CodeFunction **ppCodeFunction);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Setter )( 
            CodeProperty * This,
            CodeFunction *pCodeFunction);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Access )( 
            CodeProperty * This,
            enum vsCMAccess Access);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Access )( 
            CodeProperty * This,
            /* [retval][out] */ enum vsCMAccess *Access);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Attributes )( 
            CodeProperty * This,
            /* [retval][out] */ CodeElements **ppMembers);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DocComment )( 
            CodeProperty * This,
            /* [retval][out] */ BSTR *pDocComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DocComment )( 
            CodeProperty * This,
            BSTR DocComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Comment )( 
            CodeProperty * This,
            /* [retval][out] */ BSTR *pComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Comment )( 
            CodeProperty * This,
            BSTR Comment);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            CodeProperty * This,
            BSTR Name,
            BSTR Value,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeAttribute **ppCodeAttribute);
        
        END_INTERFACE
    } CodePropertyVtbl;

    interface CodeProperty
    {
        CONST_VTBL struct CodePropertyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CodeProperty_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define CodeProperty_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define CodeProperty_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define CodeProperty_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define CodeProperty_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define CodeProperty_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define CodeProperty_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define CodeProperty_get_DTE(This,DTEObject)	\
    (This)->lpVtbl -> get_DTE(This,DTEObject)

#define CodeProperty_get_Collection(This,ppCollection)	\
    (This)->lpVtbl -> get_Collection(This,ppCollection)

#define CodeProperty_get_Name(This,pVal)	\
    (This)->lpVtbl -> get_Name(This,pVal)

#define CodeProperty_put_Name(This,NewName)	\
    (This)->lpVtbl -> put_Name(This,NewName)

#define CodeProperty_get_FullName(This,pVal)	\
    (This)->lpVtbl -> get_FullName(This,pVal)

#define CodeProperty_get_ProjectItem(This,pProjItem)	\
    (This)->lpVtbl -> get_ProjectItem(This,pProjItem)

#define CodeProperty_get_Kind(This,pCodeEltKind)	\
    (This)->lpVtbl -> get_Kind(This,pCodeEltKind)

#define CodeProperty_get_IsCodeType(This,pIsCodeType)	\
    (This)->lpVtbl -> get_IsCodeType(This,pIsCodeType)

#define CodeProperty_get_InfoLocation(This,pInfoLocation)	\
    (This)->lpVtbl -> get_InfoLocation(This,pInfoLocation)

#define CodeProperty_get_Children(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Children(This,ppCodeElements)

#define CodeProperty_get_Language(This,pLanguage)	\
    (This)->lpVtbl -> get_Language(This,pLanguage)

#define CodeProperty_get_StartPoint(This,ppTextPoint)	\
    (This)->lpVtbl -> get_StartPoint(This,ppTextPoint)

#define CodeProperty_get_EndPoint(This,ppTextPoint)	\
    (This)->lpVtbl -> get_EndPoint(This,ppTextPoint)

#define CodeProperty_get_ExtenderNames(This,ExtenderNames)	\
    (This)->lpVtbl -> get_ExtenderNames(This,ExtenderNames)

#define CodeProperty_get_Extender(This,ExtenderName,Extender)	\
    (This)->lpVtbl -> get_Extender(This,ExtenderName,Extender)

#define CodeProperty_get_ExtenderCATID(This,pRetval)	\
    (This)->lpVtbl -> get_ExtenderCATID(This,pRetval)

#define CodeProperty_GetStartPoint(This,Part,ppTextPoint)	\
    (This)->lpVtbl -> GetStartPoint(This,Part,ppTextPoint)

#define CodeProperty_GetEndPoint(This,Part,ppTextPoint)	\
    (This)->lpVtbl -> GetEndPoint(This,Part,ppTextPoint)

#define CodeProperty_get_Parent(This,ParentObject)	\
    (This)->lpVtbl -> get_Parent(This,ParentObject)

#define CodeProperty_get_Prototype(This,Flags,pFullName)	\
    (This)->lpVtbl -> get_Prototype(This,Flags,pFullName)

#define CodeProperty_put_Type(This,pCodeTypeRef)	\
    (This)->lpVtbl -> put_Type(This,pCodeTypeRef)

#define CodeProperty_get_Type(This,pCodeTypeRef)	\
    (This)->lpVtbl -> get_Type(This,pCodeTypeRef)

#define CodeProperty_get_Getter(This,ppCodeFunction)	\
    (This)->lpVtbl -> get_Getter(This,ppCodeFunction)

#define CodeProperty_put_Getter(This,pCodeFunction)	\
    (This)->lpVtbl -> put_Getter(This,pCodeFunction)

#define CodeProperty_get_Setter(This,ppCodeFunction)	\
    (This)->lpVtbl -> get_Setter(This,ppCodeFunction)

#define CodeProperty_put_Setter(This,pCodeFunction)	\
    (This)->lpVtbl -> put_Setter(This,pCodeFunction)

#define CodeProperty_put_Access(This,Access)	\
    (This)->lpVtbl -> put_Access(This,Access)

#define CodeProperty_get_Access(This,Access)	\
    (This)->lpVtbl -> get_Access(This,Access)

#define CodeProperty_get_Attributes(This,ppMembers)	\
    (This)->lpVtbl -> get_Attributes(This,ppMembers)

#define CodeProperty_get_DocComment(This,pDocComment)	\
    (This)->lpVtbl -> get_DocComment(This,pDocComment)

#define CodeProperty_put_DocComment(This,DocComment)	\
    (This)->lpVtbl -> put_DocComment(This,DocComment)

#define CodeProperty_get_Comment(This,pComment)	\
    (This)->lpVtbl -> get_Comment(This,pComment)

#define CodeProperty_put_Comment(This,Comment)	\
    (This)->lpVtbl -> put_Comment(This,Comment)

#define CodeProperty_AddAttribute(This,Name,Value,Position,ppCodeAttribute)	\
    (This)->lpVtbl -> AddAttribute(This,Name,Value,Position,ppCodeAttribute)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_get_DTE_Proxy( 
    CodeProperty * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB CodeProperty_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_get_Collection_Proxy( 
    CodeProperty * This,
    /* [retval][out] */ CodeElements **ppCollection);


void __RPC_STUB CodeProperty_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_get_Name_Proxy( 
    CodeProperty * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB CodeProperty_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_put_Name_Proxy( 
    CodeProperty * This,
    BSTR NewName);


void __RPC_STUB CodeProperty_put_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_get_FullName_Proxy( 
    CodeProperty * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB CodeProperty_get_FullName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_get_ProjectItem_Proxy( 
    CodeProperty * This,
    /* [retval][out] */ ProjectItem **pProjItem);


void __RPC_STUB CodeProperty_get_ProjectItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_get_Kind_Proxy( 
    CodeProperty * This,
    /* [retval][out] */ enum vsCMElement *pCodeEltKind);


void __RPC_STUB CodeProperty_get_Kind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_get_IsCodeType_Proxy( 
    CodeProperty * This,
    /* [retval][out] */ VARIANT_BOOL *pIsCodeType);


void __RPC_STUB CodeProperty_get_IsCodeType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_get_InfoLocation_Proxy( 
    CodeProperty * This,
    /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation);


void __RPC_STUB CodeProperty_get_InfoLocation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_get_Children_Proxy( 
    CodeProperty * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeProperty_get_Children_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_get_Language_Proxy( 
    CodeProperty * This,
    /* [retval][out] */ BSTR *pLanguage);


void __RPC_STUB CodeProperty_get_Language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_get_StartPoint_Proxy( 
    CodeProperty * This,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeProperty_get_StartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_get_EndPoint_Proxy( 
    CodeProperty * This,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeProperty_get_EndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_get_ExtenderNames_Proxy( 
    CodeProperty * This,
    /* [retval][out] */ VARIANT *ExtenderNames);


void __RPC_STUB CodeProperty_get_ExtenderNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_get_Extender_Proxy( 
    CodeProperty * This,
    BSTR ExtenderName,
    /* [retval][out] */ IDispatch **Extender);


void __RPC_STUB CodeProperty_get_Extender_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_get_ExtenderCATID_Proxy( 
    CodeProperty * This,
    /* [retval][out] */ BSTR *pRetval);


void __RPC_STUB CodeProperty_get_ExtenderCATID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_GetStartPoint_Proxy( 
    CodeProperty * This,
    /* [defaultvalue][in] */ enum vsCMPart Part,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeProperty_GetStartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_GetEndPoint_Proxy( 
    CodeProperty * This,
    /* [defaultvalue][in] */ enum vsCMPart Part,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeProperty_GetEndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_get_Parent_Proxy( 
    CodeProperty * This,
    /* [retval][out] */ CodeClass **ParentObject);


void __RPC_STUB CodeProperty_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_get_Prototype_Proxy( 
    CodeProperty * This,
    /* [defaultvalue][in] */ long Flags,
    /* [retval][out] */ BSTR *pFullName);


void __RPC_STUB CodeProperty_get_Prototype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_put_Type_Proxy( 
    CodeProperty * This,
    CodeTypeRef *pCodeTypeRef);


void __RPC_STUB CodeProperty_put_Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_get_Type_Proxy( 
    CodeProperty * This,
    /* [retval][out] */ CodeTypeRef **pCodeTypeRef);


void __RPC_STUB CodeProperty_get_Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_get_Getter_Proxy( 
    CodeProperty * This,
    /* [retval][out] */ CodeFunction **ppCodeFunction);


void __RPC_STUB CodeProperty_get_Getter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_put_Getter_Proxy( 
    CodeProperty * This,
    CodeFunction *pCodeFunction);


void __RPC_STUB CodeProperty_put_Getter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_get_Setter_Proxy( 
    CodeProperty * This,
    /* [retval][out] */ CodeFunction **ppCodeFunction);


void __RPC_STUB CodeProperty_get_Setter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_put_Setter_Proxy( 
    CodeProperty * This,
    CodeFunction *pCodeFunction);


void __RPC_STUB CodeProperty_put_Setter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_put_Access_Proxy( 
    CodeProperty * This,
    enum vsCMAccess Access);


void __RPC_STUB CodeProperty_put_Access_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_get_Access_Proxy( 
    CodeProperty * This,
    /* [retval][out] */ enum vsCMAccess *Access);


void __RPC_STUB CodeProperty_get_Access_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_get_Attributes_Proxy( 
    CodeProperty * This,
    /* [retval][out] */ CodeElements **ppMembers);


void __RPC_STUB CodeProperty_get_Attributes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_get_DocComment_Proxy( 
    CodeProperty * This,
    /* [retval][out] */ BSTR *pDocComment);


void __RPC_STUB CodeProperty_get_DocComment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_put_DocComment_Proxy( 
    CodeProperty * This,
    BSTR DocComment);


void __RPC_STUB CodeProperty_put_DocComment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_get_Comment_Proxy( 
    CodeProperty * This,
    /* [retval][out] */ BSTR *pComment);


void __RPC_STUB CodeProperty_get_Comment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_put_Comment_Proxy( 
    CodeProperty * This,
    BSTR Comment);


void __RPC_STUB CodeProperty_put_Comment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeProperty_AddAttribute_Proxy( 
    CodeProperty * This,
    BSTR Name,
    BSTR Value,
    /* [optional] */ VARIANT Position,
    /* [retval][out] */ CodeAttribute **ppCodeAttribute);


void __RPC_STUB CodeProperty_AddAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __CodeProperty_INTERFACE_DEFINED__ */


#ifndef __CodeParameter_INTERFACE_DEFINED__
#define __CodeParameter_INTERFACE_DEFINED__

/* interface CodeParameter */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_CodeParameter;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0CFBC2BD-0D4E-11D3-8997-00C04F688DDE")
    CodeParameter : public IDispatch
    {
    public:
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ CodeElements **ppCollection) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            BSTR NewName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FullName( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProjectItem( 
            /* [retval][out] */ ProjectItem **pProjItem) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Kind( 
            /* [retval][out] */ enum vsCMElement *pCodeEltKind) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsCodeType( 
            /* [retval][out] */ VARIANT_BOOL *pIsCodeType) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InfoLocation( 
            /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Children( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Language( 
            /* [retval][out] */ BSTR *pLanguage) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartPoint( 
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndPoint( 
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderNames( 
            /* [retval][out] */ VARIANT *ExtenderNames) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_Extender( 
            BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderCATID( 
            /* [retval][out] */ BSTR *pRetval) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetStartPoint( 
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetEndPoint( 
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ CodeElement **ppCodeElement) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Type( 
            CodeTypeRef *Type) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ CodeTypeRef **pCodeTypeRef) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Attributes( 
            /* [retval][out] */ CodeElements **ppMembers) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DocComment( 
            /* [retval][out] */ BSTR *pDocComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DocComment( 
            BSTR DocComment) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddAttribute( 
            BSTR Name,
            BSTR Value,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeAttribute **ppCodeAttribute) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CodeParameterVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CodeParameter * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CodeParameter * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CodeParameter * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CodeParameter * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CodeParameter * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CodeParameter * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CodeParameter * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            CodeParameter * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            CodeParameter * This,
            /* [retval][out] */ CodeElements **ppCollection);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            CodeParameter * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            CodeParameter * This,
            BSTR NewName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullName )( 
            CodeParameter * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProjectItem )( 
            CodeParameter * This,
            /* [retval][out] */ ProjectItem **pProjItem);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Kind )( 
            CodeParameter * This,
            /* [retval][out] */ enum vsCMElement *pCodeEltKind);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsCodeType )( 
            CodeParameter * This,
            /* [retval][out] */ VARIANT_BOOL *pIsCodeType);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InfoLocation )( 
            CodeParameter * This,
            /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            CodeParameter * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Language )( 
            CodeParameter * This,
            /* [retval][out] */ BSTR *pLanguage);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartPoint )( 
            CodeParameter * This,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndPoint )( 
            CodeParameter * This,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderNames )( 
            CodeParameter * This,
            /* [retval][out] */ VARIANT *ExtenderNames);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Extender )( 
            CodeParameter * This,
            BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderCATID )( 
            CodeParameter * This,
            /* [retval][out] */ BSTR *pRetval);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetStartPoint )( 
            CodeParameter * This,
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetEndPoint )( 
            CodeParameter * This,
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CodeParameter * This,
            /* [retval][out] */ CodeElement **ppCodeElement);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Type )( 
            CodeParameter * This,
            CodeTypeRef *Type);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            CodeParameter * This,
            /* [retval][out] */ CodeTypeRef **pCodeTypeRef);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Attributes )( 
            CodeParameter * This,
            /* [retval][out] */ CodeElements **ppMembers);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DocComment )( 
            CodeParameter * This,
            /* [retval][out] */ BSTR *pDocComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DocComment )( 
            CodeParameter * This,
            BSTR DocComment);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            CodeParameter * This,
            BSTR Name,
            BSTR Value,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeAttribute **ppCodeAttribute);
        
        END_INTERFACE
    } CodeParameterVtbl;

    interface CodeParameter
    {
        CONST_VTBL struct CodeParameterVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CodeParameter_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define CodeParameter_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define CodeParameter_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define CodeParameter_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define CodeParameter_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define CodeParameter_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define CodeParameter_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define CodeParameter_get_DTE(This,DTEObject)	\
    (This)->lpVtbl -> get_DTE(This,DTEObject)

#define CodeParameter_get_Collection(This,ppCollection)	\
    (This)->lpVtbl -> get_Collection(This,ppCollection)

#define CodeParameter_get_Name(This,pVal)	\
    (This)->lpVtbl -> get_Name(This,pVal)

#define CodeParameter_put_Name(This,NewName)	\
    (This)->lpVtbl -> put_Name(This,NewName)

#define CodeParameter_get_FullName(This,pVal)	\
    (This)->lpVtbl -> get_FullName(This,pVal)

#define CodeParameter_get_ProjectItem(This,pProjItem)	\
    (This)->lpVtbl -> get_ProjectItem(This,pProjItem)

#define CodeParameter_get_Kind(This,pCodeEltKind)	\
    (This)->lpVtbl -> get_Kind(This,pCodeEltKind)

#define CodeParameter_get_IsCodeType(This,pIsCodeType)	\
    (This)->lpVtbl -> get_IsCodeType(This,pIsCodeType)

#define CodeParameter_get_InfoLocation(This,pInfoLocation)	\
    (This)->lpVtbl -> get_InfoLocation(This,pInfoLocation)

#define CodeParameter_get_Children(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Children(This,ppCodeElements)

#define CodeParameter_get_Language(This,pLanguage)	\
    (This)->lpVtbl -> get_Language(This,pLanguage)

#define CodeParameter_get_StartPoint(This,ppTextPoint)	\
    (This)->lpVtbl -> get_StartPoint(This,ppTextPoint)

#define CodeParameter_get_EndPoint(This,ppTextPoint)	\
    (This)->lpVtbl -> get_EndPoint(This,ppTextPoint)

#define CodeParameter_get_ExtenderNames(This,ExtenderNames)	\
    (This)->lpVtbl -> get_ExtenderNames(This,ExtenderNames)

#define CodeParameter_get_Extender(This,ExtenderName,Extender)	\
    (This)->lpVtbl -> get_Extender(This,ExtenderName,Extender)

#define CodeParameter_get_ExtenderCATID(This,pRetval)	\
    (This)->lpVtbl -> get_ExtenderCATID(This,pRetval)

#define CodeParameter_GetStartPoint(This,Part,ppTextPoint)	\
    (This)->lpVtbl -> GetStartPoint(This,Part,ppTextPoint)

#define CodeParameter_GetEndPoint(This,Part,ppTextPoint)	\
    (This)->lpVtbl -> GetEndPoint(This,Part,ppTextPoint)

#define CodeParameter_get_Parent(This,ppCodeElement)	\
    (This)->lpVtbl -> get_Parent(This,ppCodeElement)

#define CodeParameter_put_Type(This,Type)	\
    (This)->lpVtbl -> put_Type(This,Type)

#define CodeParameter_get_Type(This,pCodeTypeRef)	\
    (This)->lpVtbl -> get_Type(This,pCodeTypeRef)

#define CodeParameter_get_Attributes(This,ppMembers)	\
    (This)->lpVtbl -> get_Attributes(This,ppMembers)

#define CodeParameter_get_DocComment(This,pDocComment)	\
    (This)->lpVtbl -> get_DocComment(This,pDocComment)

#define CodeParameter_put_DocComment(This,DocComment)	\
    (This)->lpVtbl -> put_DocComment(This,DocComment)

#define CodeParameter_AddAttribute(This,Name,Value,Position,ppCodeAttribute)	\
    (This)->lpVtbl -> AddAttribute(This,Name,Value,Position,ppCodeAttribute)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeParameter_get_DTE_Proxy( 
    CodeParameter * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB CodeParameter_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeParameter_get_Collection_Proxy( 
    CodeParameter * This,
    /* [retval][out] */ CodeElements **ppCollection);


void __RPC_STUB CodeParameter_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeParameter_get_Name_Proxy( 
    CodeParameter * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB CodeParameter_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeParameter_put_Name_Proxy( 
    CodeParameter * This,
    BSTR NewName);


void __RPC_STUB CodeParameter_put_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeParameter_get_FullName_Proxy( 
    CodeParameter * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB CodeParameter_get_FullName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeParameter_get_ProjectItem_Proxy( 
    CodeParameter * This,
    /* [retval][out] */ ProjectItem **pProjItem);


void __RPC_STUB CodeParameter_get_ProjectItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeParameter_get_Kind_Proxy( 
    CodeParameter * This,
    /* [retval][out] */ enum vsCMElement *pCodeEltKind);


void __RPC_STUB CodeParameter_get_Kind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeParameter_get_IsCodeType_Proxy( 
    CodeParameter * This,
    /* [retval][out] */ VARIANT_BOOL *pIsCodeType);


void __RPC_STUB CodeParameter_get_IsCodeType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeParameter_get_InfoLocation_Proxy( 
    CodeParameter * This,
    /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation);


void __RPC_STUB CodeParameter_get_InfoLocation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeParameter_get_Children_Proxy( 
    CodeParameter * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeParameter_get_Children_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeParameter_get_Language_Proxy( 
    CodeParameter * This,
    /* [retval][out] */ BSTR *pLanguage);


void __RPC_STUB CodeParameter_get_Language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeParameter_get_StartPoint_Proxy( 
    CodeParameter * This,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeParameter_get_StartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeParameter_get_EndPoint_Proxy( 
    CodeParameter * This,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeParameter_get_EndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeParameter_get_ExtenderNames_Proxy( 
    CodeParameter * This,
    /* [retval][out] */ VARIANT *ExtenderNames);


void __RPC_STUB CodeParameter_get_ExtenderNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeParameter_get_Extender_Proxy( 
    CodeParameter * This,
    BSTR ExtenderName,
    /* [retval][out] */ IDispatch **Extender);


void __RPC_STUB CodeParameter_get_Extender_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeParameter_get_ExtenderCATID_Proxy( 
    CodeParameter * This,
    /* [retval][out] */ BSTR *pRetval);


void __RPC_STUB CodeParameter_get_ExtenderCATID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeParameter_GetStartPoint_Proxy( 
    CodeParameter * This,
    /* [defaultvalue][in] */ enum vsCMPart Part,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeParameter_GetStartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeParameter_GetEndPoint_Proxy( 
    CodeParameter * This,
    /* [defaultvalue][in] */ enum vsCMPart Part,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeParameter_GetEndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeParameter_get_Parent_Proxy( 
    CodeParameter * This,
    /* [retval][out] */ CodeElement **ppCodeElement);


void __RPC_STUB CodeParameter_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeParameter_put_Type_Proxy( 
    CodeParameter * This,
    CodeTypeRef *Type);


void __RPC_STUB CodeParameter_put_Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeParameter_get_Type_Proxy( 
    CodeParameter * This,
    /* [retval][out] */ CodeTypeRef **pCodeTypeRef);


void __RPC_STUB CodeParameter_get_Type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeParameter_get_Attributes_Proxy( 
    CodeParameter * This,
    /* [retval][out] */ CodeElements **ppMembers);


void __RPC_STUB CodeParameter_get_Attributes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeParameter_get_DocComment_Proxy( 
    CodeParameter * This,
    /* [retval][out] */ BSTR *pDocComment);


void __RPC_STUB CodeParameter_get_DocComment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeParameter_put_DocComment_Proxy( 
    CodeParameter * This,
    BSTR DocComment);


void __RPC_STUB CodeParameter_put_DocComment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeParameter_AddAttribute_Proxy( 
    CodeParameter * This,
    BSTR Name,
    BSTR Value,
    /* [optional] */ VARIANT Position,
    /* [retval][out] */ CodeAttribute **ppCodeAttribute);


void __RPC_STUB CodeParameter_AddAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __CodeParameter_INTERFACE_DEFINED__ */


#ifndef __CodeAttribute_INTERFACE_DEFINED__
#define __CodeAttribute_INTERFACE_DEFINED__

/* interface CodeAttribute */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_CodeAttribute;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0CFBC2BE-0D4E-11D3-8997-00C04F688DDE")
    CodeAttribute : public IDispatch
    {
    public:
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ CodeElements **ppCollection) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            BSTR NewName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FullName( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProjectItem( 
            /* [retval][out] */ ProjectItem **pProjItem) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Kind( 
            /* [retval][out] */ enum vsCMElement *pCodeEltKind) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsCodeType( 
            /* [retval][out] */ VARIANT_BOOL *pIsCodeType) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InfoLocation( 
            /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Children( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Language( 
            /* [retval][out] */ BSTR *pLanguage) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartPoint( 
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndPoint( 
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderNames( 
            /* [retval][out] */ VARIANT *ExtenderNames) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_Extender( 
            BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderCATID( 
            /* [retval][out] */ BSTR *pRetval) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetStartPoint( 
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetEndPoint( 
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **ppParent) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Value( 
            /* [retval][out] */ BSTR *pValue) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Value( 
            BSTR Value) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CodeAttributeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CodeAttribute * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CodeAttribute * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CodeAttribute * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CodeAttribute * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CodeAttribute * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CodeAttribute * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CodeAttribute * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            CodeAttribute * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            CodeAttribute * This,
            /* [retval][out] */ CodeElements **ppCollection);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            CodeAttribute * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            CodeAttribute * This,
            BSTR NewName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullName )( 
            CodeAttribute * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProjectItem )( 
            CodeAttribute * This,
            /* [retval][out] */ ProjectItem **pProjItem);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Kind )( 
            CodeAttribute * This,
            /* [retval][out] */ enum vsCMElement *pCodeEltKind);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsCodeType )( 
            CodeAttribute * This,
            /* [retval][out] */ VARIANT_BOOL *pIsCodeType);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InfoLocation )( 
            CodeAttribute * This,
            /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            CodeAttribute * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Language )( 
            CodeAttribute * This,
            /* [retval][out] */ BSTR *pLanguage);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartPoint )( 
            CodeAttribute * This,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndPoint )( 
            CodeAttribute * This,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderNames )( 
            CodeAttribute * This,
            /* [retval][out] */ VARIANT *ExtenderNames);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Extender )( 
            CodeAttribute * This,
            BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderCATID )( 
            CodeAttribute * This,
            /* [retval][out] */ BSTR *pRetval);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetStartPoint )( 
            CodeAttribute * This,
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetEndPoint )( 
            CodeAttribute * This,
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CodeAttribute * This,
            /* [retval][out] */ IDispatch **ppParent);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            CodeAttribute * This,
            /* [retval][out] */ BSTR *pValue);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Value )( 
            CodeAttribute * This,
            BSTR Value);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            CodeAttribute * This);
        
        END_INTERFACE
    } CodeAttributeVtbl;

    interface CodeAttribute
    {
        CONST_VTBL struct CodeAttributeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CodeAttribute_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define CodeAttribute_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define CodeAttribute_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define CodeAttribute_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define CodeAttribute_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define CodeAttribute_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define CodeAttribute_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define CodeAttribute_get_DTE(This,DTEObject)	\
    (This)->lpVtbl -> get_DTE(This,DTEObject)

#define CodeAttribute_get_Collection(This,ppCollection)	\
    (This)->lpVtbl -> get_Collection(This,ppCollection)

#define CodeAttribute_get_Name(This,pVal)	\
    (This)->lpVtbl -> get_Name(This,pVal)

#define CodeAttribute_put_Name(This,NewName)	\
    (This)->lpVtbl -> put_Name(This,NewName)

#define CodeAttribute_get_FullName(This,pVal)	\
    (This)->lpVtbl -> get_FullName(This,pVal)

#define CodeAttribute_get_ProjectItem(This,pProjItem)	\
    (This)->lpVtbl -> get_ProjectItem(This,pProjItem)

#define CodeAttribute_get_Kind(This,pCodeEltKind)	\
    (This)->lpVtbl -> get_Kind(This,pCodeEltKind)

#define CodeAttribute_get_IsCodeType(This,pIsCodeType)	\
    (This)->lpVtbl -> get_IsCodeType(This,pIsCodeType)

#define CodeAttribute_get_InfoLocation(This,pInfoLocation)	\
    (This)->lpVtbl -> get_InfoLocation(This,pInfoLocation)

#define CodeAttribute_get_Children(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Children(This,ppCodeElements)

#define CodeAttribute_get_Language(This,pLanguage)	\
    (This)->lpVtbl -> get_Language(This,pLanguage)

#define CodeAttribute_get_StartPoint(This,ppTextPoint)	\
    (This)->lpVtbl -> get_StartPoint(This,ppTextPoint)

#define CodeAttribute_get_EndPoint(This,ppTextPoint)	\
    (This)->lpVtbl -> get_EndPoint(This,ppTextPoint)

#define CodeAttribute_get_ExtenderNames(This,ExtenderNames)	\
    (This)->lpVtbl -> get_ExtenderNames(This,ExtenderNames)

#define CodeAttribute_get_Extender(This,ExtenderName,Extender)	\
    (This)->lpVtbl -> get_Extender(This,ExtenderName,Extender)

#define CodeAttribute_get_ExtenderCATID(This,pRetval)	\
    (This)->lpVtbl -> get_ExtenderCATID(This,pRetval)

#define CodeAttribute_GetStartPoint(This,Part,ppTextPoint)	\
    (This)->lpVtbl -> GetStartPoint(This,Part,ppTextPoint)

#define CodeAttribute_GetEndPoint(This,Part,ppTextPoint)	\
    (This)->lpVtbl -> GetEndPoint(This,Part,ppTextPoint)

#define CodeAttribute_get_Parent(This,ppParent)	\
    (This)->lpVtbl -> get_Parent(This,ppParent)

#define CodeAttribute_get_Value(This,pValue)	\
    (This)->lpVtbl -> get_Value(This,pValue)

#define CodeAttribute_put_Value(This,Value)	\
    (This)->lpVtbl -> put_Value(This,Value)

#define CodeAttribute_Delete(This)	\
    (This)->lpVtbl -> Delete(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeAttribute_get_DTE_Proxy( 
    CodeAttribute * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB CodeAttribute_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeAttribute_get_Collection_Proxy( 
    CodeAttribute * This,
    /* [retval][out] */ CodeElements **ppCollection);


void __RPC_STUB CodeAttribute_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeAttribute_get_Name_Proxy( 
    CodeAttribute * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB CodeAttribute_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeAttribute_put_Name_Proxy( 
    CodeAttribute * This,
    BSTR NewName);


void __RPC_STUB CodeAttribute_put_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeAttribute_get_FullName_Proxy( 
    CodeAttribute * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB CodeAttribute_get_FullName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeAttribute_get_ProjectItem_Proxy( 
    CodeAttribute * This,
    /* [retval][out] */ ProjectItem **pProjItem);


void __RPC_STUB CodeAttribute_get_ProjectItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeAttribute_get_Kind_Proxy( 
    CodeAttribute * This,
    /* [retval][out] */ enum vsCMElement *pCodeEltKind);


void __RPC_STUB CodeAttribute_get_Kind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeAttribute_get_IsCodeType_Proxy( 
    CodeAttribute * This,
    /* [retval][out] */ VARIANT_BOOL *pIsCodeType);


void __RPC_STUB CodeAttribute_get_IsCodeType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeAttribute_get_InfoLocation_Proxy( 
    CodeAttribute * This,
    /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation);


void __RPC_STUB CodeAttribute_get_InfoLocation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeAttribute_get_Children_Proxy( 
    CodeAttribute * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeAttribute_get_Children_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeAttribute_get_Language_Proxy( 
    CodeAttribute * This,
    /* [retval][out] */ BSTR *pLanguage);


void __RPC_STUB CodeAttribute_get_Language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeAttribute_get_StartPoint_Proxy( 
    CodeAttribute * This,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeAttribute_get_StartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeAttribute_get_EndPoint_Proxy( 
    CodeAttribute * This,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeAttribute_get_EndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeAttribute_get_ExtenderNames_Proxy( 
    CodeAttribute * This,
    /* [retval][out] */ VARIANT *ExtenderNames);


void __RPC_STUB CodeAttribute_get_ExtenderNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeAttribute_get_Extender_Proxy( 
    CodeAttribute * This,
    BSTR ExtenderName,
    /* [retval][out] */ IDispatch **Extender);


void __RPC_STUB CodeAttribute_get_Extender_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeAttribute_get_ExtenderCATID_Proxy( 
    CodeAttribute * This,
    /* [retval][out] */ BSTR *pRetval);


void __RPC_STUB CodeAttribute_get_ExtenderCATID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeAttribute_GetStartPoint_Proxy( 
    CodeAttribute * This,
    /* [defaultvalue][in] */ enum vsCMPart Part,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeAttribute_GetStartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeAttribute_GetEndPoint_Proxy( 
    CodeAttribute * This,
    /* [defaultvalue][in] */ enum vsCMPart Part,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeAttribute_GetEndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeAttribute_get_Parent_Proxy( 
    CodeAttribute * This,
    /* [retval][out] */ IDispatch **ppParent);


void __RPC_STUB CodeAttribute_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeAttribute_get_Value_Proxy( 
    CodeAttribute * This,
    /* [retval][out] */ BSTR *pValue);


void __RPC_STUB CodeAttribute_get_Value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeAttribute_put_Value_Proxy( 
    CodeAttribute * This,
    BSTR Value);


void __RPC_STUB CodeAttribute_put_Value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeAttribute_Delete_Proxy( 
    CodeAttribute * This);


void __RPC_STUB CodeAttribute_Delete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __CodeAttribute_INTERFACE_DEFINED__ */


#ifndef __CodeInterface_INTERFACE_DEFINED__
#define __CodeInterface_INTERFACE_DEFINED__

/* interface CodeInterface */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_CodeInterface;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B1F42510-91CD-4D3A-8B25-A317D8032B24")
    CodeInterface : public IDispatch
    {
    public:
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ CodeElements **ppCollection) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            BSTR NewName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FullName( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProjectItem( 
            /* [retval][out] */ ProjectItem **pProjItem) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Kind( 
            /* [retval][out] */ enum vsCMElement *pCodeEltKind) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsCodeType( 
            /* [retval][out] */ VARIANT_BOOL *pIsCodeType) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InfoLocation( 
            /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Children( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Language( 
            /* [retval][out] */ BSTR *pLanguage) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartPoint( 
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndPoint( 
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderNames( 
            /* [retval][out] */ VARIANT *ExtenderNames) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_Extender( 
            BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderCATID( 
            /* [retval][out] */ BSTR *pRetval) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetStartPoint( 
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetEndPoint( 
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **ParentObject) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Namespace( 
            /* [retval][out] */ CodeNamespace **ppCodeNamespace) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Bases( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Members( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Access( 
            enum vsCMAccess Access) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Access( 
            /* [retval][out] */ enum vsCMAccess *pAccess) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Attributes( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DocComment( 
            /* [retval][out] */ BSTR *pDocComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DocComment( 
            BSTR DocComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Comment( 
            /* [retval][out] */ BSTR *pComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Comment( 
            BSTR Comment) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddBase( 
            VARIANT Base,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeElement **ppOut) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddAttribute( 
            BSTR Name,
            BSTR Value,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeAttribute **ppCodeAttribute) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveBase( 
            VARIANT Element) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveMember( 
            VARIANT Element) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsDerivedFrom( 
            BSTR FullName,
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DerivedTypes( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddFunction( 
            BSTR Name,
            enum vsCMFunction Kind,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeFunction **ppCodeFunction) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddProperty( 
            BSTR GetterName,
            BSTR PutterName,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [optional] */ VARIANT Location,
            /* [retval][out] */ CodeProperty **ppCodeProperty) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CodeInterfaceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CodeInterface * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CodeInterface * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CodeInterface * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CodeInterface * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CodeInterface * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CodeInterface * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CodeInterface * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            CodeInterface * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            CodeInterface * This,
            /* [retval][out] */ CodeElements **ppCollection);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            CodeInterface * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            CodeInterface * This,
            BSTR NewName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullName )( 
            CodeInterface * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProjectItem )( 
            CodeInterface * This,
            /* [retval][out] */ ProjectItem **pProjItem);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Kind )( 
            CodeInterface * This,
            /* [retval][out] */ enum vsCMElement *pCodeEltKind);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsCodeType )( 
            CodeInterface * This,
            /* [retval][out] */ VARIANT_BOOL *pIsCodeType);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InfoLocation )( 
            CodeInterface * This,
            /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            CodeInterface * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Language )( 
            CodeInterface * This,
            /* [retval][out] */ BSTR *pLanguage);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartPoint )( 
            CodeInterface * This,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndPoint )( 
            CodeInterface * This,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderNames )( 
            CodeInterface * This,
            /* [retval][out] */ VARIANT *ExtenderNames);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Extender )( 
            CodeInterface * This,
            BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderCATID )( 
            CodeInterface * This,
            /* [retval][out] */ BSTR *pRetval);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetStartPoint )( 
            CodeInterface * This,
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetEndPoint )( 
            CodeInterface * This,
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CodeInterface * This,
            /* [retval][out] */ IDispatch **ParentObject);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Namespace )( 
            CodeInterface * This,
            /* [retval][out] */ CodeNamespace **ppCodeNamespace);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Bases )( 
            CodeInterface * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Members )( 
            CodeInterface * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Access )( 
            CodeInterface * This,
            enum vsCMAccess Access);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Access )( 
            CodeInterface * This,
            /* [retval][out] */ enum vsCMAccess *pAccess);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Attributes )( 
            CodeInterface * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DocComment )( 
            CodeInterface * This,
            /* [retval][out] */ BSTR *pDocComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DocComment )( 
            CodeInterface * This,
            BSTR DocComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Comment )( 
            CodeInterface * This,
            /* [retval][out] */ BSTR *pComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Comment )( 
            CodeInterface * This,
            BSTR Comment);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddBase )( 
            CodeInterface * This,
            VARIANT Base,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeElement **ppOut);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            CodeInterface * This,
            BSTR Name,
            BSTR Value,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeAttribute **ppCodeAttribute);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveBase )( 
            CodeInterface * This,
            VARIANT Element);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveMember )( 
            CodeInterface * This,
            VARIANT Element);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDerivedFrom )( 
            CodeInterface * This,
            BSTR FullName,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DerivedTypes )( 
            CodeInterface * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddFunction )( 
            CodeInterface * This,
            BSTR Name,
            enum vsCMFunction Kind,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeFunction **ppCodeFunction);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddProperty )( 
            CodeInterface * This,
            BSTR GetterName,
            BSTR PutterName,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [optional] */ VARIANT Location,
            /* [retval][out] */ CodeProperty **ppCodeProperty);
        
        END_INTERFACE
    } CodeInterfaceVtbl;

    interface CodeInterface
    {
        CONST_VTBL struct CodeInterfaceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CodeInterface_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define CodeInterface_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define CodeInterface_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define CodeInterface_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define CodeInterface_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define CodeInterface_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define CodeInterface_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define CodeInterface_get_DTE(This,DTEObject)	\
    (This)->lpVtbl -> get_DTE(This,DTEObject)

#define CodeInterface_get_Collection(This,ppCollection)	\
    (This)->lpVtbl -> get_Collection(This,ppCollection)

#define CodeInterface_get_Name(This,pVal)	\
    (This)->lpVtbl -> get_Name(This,pVal)

#define CodeInterface_put_Name(This,NewName)	\
    (This)->lpVtbl -> put_Name(This,NewName)

#define CodeInterface_get_FullName(This,pVal)	\
    (This)->lpVtbl -> get_FullName(This,pVal)

#define CodeInterface_get_ProjectItem(This,pProjItem)	\
    (This)->lpVtbl -> get_ProjectItem(This,pProjItem)

#define CodeInterface_get_Kind(This,pCodeEltKind)	\
    (This)->lpVtbl -> get_Kind(This,pCodeEltKind)

#define CodeInterface_get_IsCodeType(This,pIsCodeType)	\
    (This)->lpVtbl -> get_IsCodeType(This,pIsCodeType)

#define CodeInterface_get_InfoLocation(This,pInfoLocation)	\
    (This)->lpVtbl -> get_InfoLocation(This,pInfoLocation)

#define CodeInterface_get_Children(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Children(This,ppCodeElements)

#define CodeInterface_get_Language(This,pLanguage)	\
    (This)->lpVtbl -> get_Language(This,pLanguage)

#define CodeInterface_get_StartPoint(This,ppTextPoint)	\
    (This)->lpVtbl -> get_StartPoint(This,ppTextPoint)

#define CodeInterface_get_EndPoint(This,ppTextPoint)	\
    (This)->lpVtbl -> get_EndPoint(This,ppTextPoint)

#define CodeInterface_get_ExtenderNames(This,ExtenderNames)	\
    (This)->lpVtbl -> get_ExtenderNames(This,ExtenderNames)

#define CodeInterface_get_Extender(This,ExtenderName,Extender)	\
    (This)->lpVtbl -> get_Extender(This,ExtenderName,Extender)

#define CodeInterface_get_ExtenderCATID(This,pRetval)	\
    (This)->lpVtbl -> get_ExtenderCATID(This,pRetval)

#define CodeInterface_GetStartPoint(This,Part,ppTextPoint)	\
    (This)->lpVtbl -> GetStartPoint(This,Part,ppTextPoint)

#define CodeInterface_GetEndPoint(This,Part,ppTextPoint)	\
    (This)->lpVtbl -> GetEndPoint(This,Part,ppTextPoint)

#define CodeInterface_get_Parent(This,ParentObject)	\
    (This)->lpVtbl -> get_Parent(This,ParentObject)

#define CodeInterface_get_Namespace(This,ppCodeNamespace)	\
    (This)->lpVtbl -> get_Namespace(This,ppCodeNamespace)

#define CodeInterface_get_Bases(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Bases(This,ppCodeElements)

#define CodeInterface_get_Members(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Members(This,ppCodeElements)

#define CodeInterface_put_Access(This,Access)	\
    (This)->lpVtbl -> put_Access(This,Access)

#define CodeInterface_get_Access(This,pAccess)	\
    (This)->lpVtbl -> get_Access(This,pAccess)

#define CodeInterface_get_Attributes(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Attributes(This,ppCodeElements)

#define CodeInterface_get_DocComment(This,pDocComment)	\
    (This)->lpVtbl -> get_DocComment(This,pDocComment)

#define CodeInterface_put_DocComment(This,DocComment)	\
    (This)->lpVtbl -> put_DocComment(This,DocComment)

#define CodeInterface_get_Comment(This,pComment)	\
    (This)->lpVtbl -> get_Comment(This,pComment)

#define CodeInterface_put_Comment(This,Comment)	\
    (This)->lpVtbl -> put_Comment(This,Comment)

#define CodeInterface_AddBase(This,Base,Position,ppOut)	\
    (This)->lpVtbl -> AddBase(This,Base,Position,ppOut)

#define CodeInterface_AddAttribute(This,Name,Value,Position,ppCodeAttribute)	\
    (This)->lpVtbl -> AddAttribute(This,Name,Value,Position,ppCodeAttribute)

#define CodeInterface_RemoveBase(This,Element)	\
    (This)->lpVtbl -> RemoveBase(This,Element)

#define CodeInterface_RemoveMember(This,Element)	\
    (This)->lpVtbl -> RemoveMember(This,Element)

#define CodeInterface_get_IsDerivedFrom(This,FullName,pVal)	\
    (This)->lpVtbl -> get_IsDerivedFrom(This,FullName,pVal)

#define CodeInterface_get_DerivedTypes(This,ppCodeElements)	\
    (This)->lpVtbl -> get_DerivedTypes(This,ppCodeElements)

#define CodeInterface_AddFunction(This,Name,Kind,Type,Position,Access,ppCodeFunction)	\
    (This)->lpVtbl -> AddFunction(This,Name,Kind,Type,Position,Access,ppCodeFunction)

#define CodeInterface_AddProperty(This,GetterName,PutterName,Type,Position,Access,Location,ppCodeProperty)	\
    (This)->lpVtbl -> AddProperty(This,GetterName,PutterName,Type,Position,Access,Location,ppCodeProperty)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_get_DTE_Proxy( 
    CodeInterface * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB CodeInterface_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_get_Collection_Proxy( 
    CodeInterface * This,
    /* [retval][out] */ CodeElements **ppCollection);


void __RPC_STUB CodeInterface_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_get_Name_Proxy( 
    CodeInterface * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB CodeInterface_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_put_Name_Proxy( 
    CodeInterface * This,
    BSTR NewName);


void __RPC_STUB CodeInterface_put_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_get_FullName_Proxy( 
    CodeInterface * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB CodeInterface_get_FullName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_get_ProjectItem_Proxy( 
    CodeInterface * This,
    /* [retval][out] */ ProjectItem **pProjItem);


void __RPC_STUB CodeInterface_get_ProjectItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_get_Kind_Proxy( 
    CodeInterface * This,
    /* [retval][out] */ enum vsCMElement *pCodeEltKind);


void __RPC_STUB CodeInterface_get_Kind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_get_IsCodeType_Proxy( 
    CodeInterface * This,
    /* [retval][out] */ VARIANT_BOOL *pIsCodeType);


void __RPC_STUB CodeInterface_get_IsCodeType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_get_InfoLocation_Proxy( 
    CodeInterface * This,
    /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation);


void __RPC_STUB CodeInterface_get_InfoLocation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_get_Children_Proxy( 
    CodeInterface * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeInterface_get_Children_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_get_Language_Proxy( 
    CodeInterface * This,
    /* [retval][out] */ BSTR *pLanguage);


void __RPC_STUB CodeInterface_get_Language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_get_StartPoint_Proxy( 
    CodeInterface * This,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeInterface_get_StartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_get_EndPoint_Proxy( 
    CodeInterface * This,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeInterface_get_EndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_get_ExtenderNames_Proxy( 
    CodeInterface * This,
    /* [retval][out] */ VARIANT *ExtenderNames);


void __RPC_STUB CodeInterface_get_ExtenderNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_get_Extender_Proxy( 
    CodeInterface * This,
    BSTR ExtenderName,
    /* [retval][out] */ IDispatch **Extender);


void __RPC_STUB CodeInterface_get_Extender_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_get_ExtenderCATID_Proxy( 
    CodeInterface * This,
    /* [retval][out] */ BSTR *pRetval);


void __RPC_STUB CodeInterface_get_ExtenderCATID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_GetStartPoint_Proxy( 
    CodeInterface * This,
    /* [defaultvalue][in] */ enum vsCMPart Part,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeInterface_GetStartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_GetEndPoint_Proxy( 
    CodeInterface * This,
    /* [defaultvalue][in] */ enum vsCMPart Part,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeInterface_GetEndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_get_Parent_Proxy( 
    CodeInterface * This,
    /* [retval][out] */ IDispatch **ParentObject);


void __RPC_STUB CodeInterface_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_get_Namespace_Proxy( 
    CodeInterface * This,
    /* [retval][out] */ CodeNamespace **ppCodeNamespace);


void __RPC_STUB CodeInterface_get_Namespace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_get_Bases_Proxy( 
    CodeInterface * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeInterface_get_Bases_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_get_Members_Proxy( 
    CodeInterface * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeInterface_get_Members_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_put_Access_Proxy( 
    CodeInterface * This,
    enum vsCMAccess Access);


void __RPC_STUB CodeInterface_put_Access_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_get_Access_Proxy( 
    CodeInterface * This,
    /* [retval][out] */ enum vsCMAccess *pAccess);


void __RPC_STUB CodeInterface_get_Access_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_get_Attributes_Proxy( 
    CodeInterface * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeInterface_get_Attributes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_get_DocComment_Proxy( 
    CodeInterface * This,
    /* [retval][out] */ BSTR *pDocComment);


void __RPC_STUB CodeInterface_get_DocComment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_put_DocComment_Proxy( 
    CodeInterface * This,
    BSTR DocComment);


void __RPC_STUB CodeInterface_put_DocComment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_get_Comment_Proxy( 
    CodeInterface * This,
    /* [retval][out] */ BSTR *pComment);


void __RPC_STUB CodeInterface_get_Comment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_put_Comment_Proxy( 
    CodeInterface * This,
    BSTR Comment);


void __RPC_STUB CodeInterface_put_Comment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_AddBase_Proxy( 
    CodeInterface * This,
    VARIANT Base,
    /* [optional] */ VARIANT Position,
    /* [retval][out] */ CodeElement **ppOut);


void __RPC_STUB CodeInterface_AddBase_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_AddAttribute_Proxy( 
    CodeInterface * This,
    BSTR Name,
    BSTR Value,
    /* [optional] */ VARIANT Position,
    /* [retval][out] */ CodeAttribute **ppCodeAttribute);


void __RPC_STUB CodeInterface_AddAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_RemoveBase_Proxy( 
    CodeInterface * This,
    VARIANT Element);


void __RPC_STUB CodeInterface_RemoveBase_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_RemoveMember_Proxy( 
    CodeInterface * This,
    VARIANT Element);


void __RPC_STUB CodeInterface_RemoveMember_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_get_IsDerivedFrom_Proxy( 
    CodeInterface * This,
    BSTR FullName,
    /* [retval][out] */ VARIANT_BOOL *pVal);


void __RPC_STUB CodeInterface_get_IsDerivedFrom_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_get_DerivedTypes_Proxy( 
    CodeInterface * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeInterface_get_DerivedTypes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_AddFunction_Proxy( 
    CodeInterface * This,
    BSTR Name,
    enum vsCMFunction Kind,
    VARIANT Type,
    /* [optional] */ VARIANT Position,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeFunction **ppCodeFunction);


void __RPC_STUB CodeInterface_AddFunction_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeInterface_AddProperty_Proxy( 
    CodeInterface * This,
    BSTR GetterName,
    BSTR PutterName,
    VARIANT Type,
    /* [optional] */ VARIANT Position,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [optional] */ VARIANT Location,
    /* [retval][out] */ CodeProperty **ppCodeProperty);


void __RPC_STUB CodeInterface_AddProperty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __CodeInterface_INTERFACE_DEFINED__ */


#ifndef __CodeStruct_INTERFACE_DEFINED__
#define __CodeStruct_INTERFACE_DEFINED__

/* interface CodeStruct */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_CodeStruct;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B1F42511-91CD-4D3A-8B25-A317D8032B24")
    CodeStruct : public IDispatch
    {
    public:
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ CodeElements **ppCollection) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            BSTR NewName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FullName( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProjectItem( 
            /* [retval][out] */ ProjectItem **pProjItem) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Kind( 
            /* [retval][out] */ enum vsCMElement *pCodeEltKind) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsCodeType( 
            /* [retval][out] */ VARIANT_BOOL *pIsCodeType) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InfoLocation( 
            /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Children( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Language( 
            /* [retval][out] */ BSTR *pLanguage) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartPoint( 
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndPoint( 
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderNames( 
            /* [retval][out] */ VARIANT *ExtenderNames) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_Extender( 
            BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderCATID( 
            /* [retval][out] */ BSTR *pRetval) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetStartPoint( 
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetEndPoint( 
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **ParentObject) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Namespace( 
            /* [retval][out] */ CodeNamespace **ppCodeNamespace) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Bases( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Members( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Access( 
            enum vsCMAccess Access) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Access( 
            /* [retval][out] */ enum vsCMAccess *pAccess) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Attributes( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DocComment( 
            /* [retval][out] */ BSTR *pDocComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DocComment( 
            BSTR DocComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Comment( 
            /* [retval][out] */ BSTR *pComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Comment( 
            BSTR Comment) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddBase( 
            VARIANT Base,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeElement **ppOut) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddAttribute( 
            BSTR Name,
            BSTR Value,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeAttribute **ppCodeAttribute) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveBase( 
            VARIANT Element) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveMember( 
            VARIANT Element) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsDerivedFrom( 
            BSTR FullName,
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DerivedTypes( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ImplementedInterfaces( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsAbstract( 
            /* [retval][out] */ VARIANT_BOOL *pIsAbstract) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_IsAbstract( 
            VARIANT_BOOL Abstract) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddImplementedInterface( 
            VARIANT Base,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeInterface **ppCodeInterface) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddFunction( 
            BSTR Name,
            enum vsCMFunction Kind,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [optional] */ VARIANT Location,
            /* [retval][out] */ CodeFunction **ppCodeFunction) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddVariable( 
            BSTR Name,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [optional] */ VARIANT Location,
            /* [retval][out] */ CodeVariable **ppCodeVariable) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddProperty( 
            BSTR GetterName,
            BSTR PutterName,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [optional] */ VARIANT Location,
            /* [retval][out] */ CodeProperty **ppCodeProperty) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddClass( 
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [optional] */ VARIANT ImplementedInterfaces,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeClass **ppCodeClass) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddStruct( 
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [optional] */ VARIANT ImplementedInterfaces,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeStruct **ppCodeStruct) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddEnum( 
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeEnum **ppCodeEnum) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddDelegate( 
            BSTR Name,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeDelegate **ppCodeDelegate) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveInterface( 
            VARIANT Element) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CodeStructVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CodeStruct * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CodeStruct * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CodeStruct * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CodeStruct * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CodeStruct * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CodeStruct * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CodeStruct * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            CodeStruct * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            CodeStruct * This,
            /* [retval][out] */ CodeElements **ppCollection);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            CodeStruct * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            CodeStruct * This,
            BSTR NewName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullName )( 
            CodeStruct * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProjectItem )( 
            CodeStruct * This,
            /* [retval][out] */ ProjectItem **pProjItem);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Kind )( 
            CodeStruct * This,
            /* [retval][out] */ enum vsCMElement *pCodeEltKind);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsCodeType )( 
            CodeStruct * This,
            /* [retval][out] */ VARIANT_BOOL *pIsCodeType);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InfoLocation )( 
            CodeStruct * This,
            /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            CodeStruct * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Language )( 
            CodeStruct * This,
            /* [retval][out] */ BSTR *pLanguage);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartPoint )( 
            CodeStruct * This,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndPoint )( 
            CodeStruct * This,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderNames )( 
            CodeStruct * This,
            /* [retval][out] */ VARIANT *ExtenderNames);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Extender )( 
            CodeStruct * This,
            BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderCATID )( 
            CodeStruct * This,
            /* [retval][out] */ BSTR *pRetval);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetStartPoint )( 
            CodeStruct * This,
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetEndPoint )( 
            CodeStruct * This,
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CodeStruct * This,
            /* [retval][out] */ IDispatch **ParentObject);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Namespace )( 
            CodeStruct * This,
            /* [retval][out] */ CodeNamespace **ppCodeNamespace);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Bases )( 
            CodeStruct * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Members )( 
            CodeStruct * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Access )( 
            CodeStruct * This,
            enum vsCMAccess Access);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Access )( 
            CodeStruct * This,
            /* [retval][out] */ enum vsCMAccess *pAccess);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Attributes )( 
            CodeStruct * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DocComment )( 
            CodeStruct * This,
            /* [retval][out] */ BSTR *pDocComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DocComment )( 
            CodeStruct * This,
            BSTR DocComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Comment )( 
            CodeStruct * This,
            /* [retval][out] */ BSTR *pComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Comment )( 
            CodeStruct * This,
            BSTR Comment);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddBase )( 
            CodeStruct * This,
            VARIANT Base,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeElement **ppOut);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            CodeStruct * This,
            BSTR Name,
            BSTR Value,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeAttribute **ppCodeAttribute);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveBase )( 
            CodeStruct * This,
            VARIANT Element);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveMember )( 
            CodeStruct * This,
            VARIANT Element);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDerivedFrom )( 
            CodeStruct * This,
            BSTR FullName,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DerivedTypes )( 
            CodeStruct * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ImplementedInterfaces )( 
            CodeStruct * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsAbstract )( 
            CodeStruct * This,
            /* [retval][out] */ VARIANT_BOOL *pIsAbstract);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_IsAbstract )( 
            CodeStruct * This,
            VARIANT_BOOL Abstract);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddImplementedInterface )( 
            CodeStruct * This,
            VARIANT Base,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeInterface **ppCodeInterface);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddFunction )( 
            CodeStruct * This,
            BSTR Name,
            enum vsCMFunction Kind,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [optional] */ VARIANT Location,
            /* [retval][out] */ CodeFunction **ppCodeFunction);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddVariable )( 
            CodeStruct * This,
            BSTR Name,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [optional] */ VARIANT Location,
            /* [retval][out] */ CodeVariable **ppCodeVariable);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddProperty )( 
            CodeStruct * This,
            BSTR GetterName,
            BSTR PutterName,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [optional] */ VARIANT Location,
            /* [retval][out] */ CodeProperty **ppCodeProperty);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddClass )( 
            CodeStruct * This,
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [optional] */ VARIANT ImplementedInterfaces,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeClass **ppCodeClass);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddStruct )( 
            CodeStruct * This,
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [optional] */ VARIANT ImplementedInterfaces,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeStruct **ppCodeStruct);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddEnum )( 
            CodeStruct * This,
            BSTR Name,
            /* [optional] */ VARIANT Position,
            /* [optional] */ VARIANT Bases,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeEnum **ppCodeEnum);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddDelegate )( 
            CodeStruct * This,
            BSTR Name,
            VARIANT Type,
            /* [optional] */ VARIANT Position,
            /* [defaultvalue] */ enum vsCMAccess Access,
            /* [retval][out] */ CodeDelegate **ppCodeDelegate);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveInterface )( 
            CodeStruct * This,
            VARIANT Element);
        
        END_INTERFACE
    } CodeStructVtbl;

    interface CodeStruct
    {
        CONST_VTBL struct CodeStructVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CodeStruct_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define CodeStruct_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define CodeStruct_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define CodeStruct_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define CodeStruct_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define CodeStruct_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define CodeStruct_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define CodeStruct_get_DTE(This,DTEObject)	\
    (This)->lpVtbl -> get_DTE(This,DTEObject)

#define CodeStruct_get_Collection(This,ppCollection)	\
    (This)->lpVtbl -> get_Collection(This,ppCollection)

#define CodeStruct_get_Name(This,pVal)	\
    (This)->lpVtbl -> get_Name(This,pVal)

#define CodeStruct_put_Name(This,NewName)	\
    (This)->lpVtbl -> put_Name(This,NewName)

#define CodeStruct_get_FullName(This,pVal)	\
    (This)->lpVtbl -> get_FullName(This,pVal)

#define CodeStruct_get_ProjectItem(This,pProjItem)	\
    (This)->lpVtbl -> get_ProjectItem(This,pProjItem)

#define CodeStruct_get_Kind(This,pCodeEltKind)	\
    (This)->lpVtbl -> get_Kind(This,pCodeEltKind)

#define CodeStruct_get_IsCodeType(This,pIsCodeType)	\
    (This)->lpVtbl -> get_IsCodeType(This,pIsCodeType)

#define CodeStruct_get_InfoLocation(This,pInfoLocation)	\
    (This)->lpVtbl -> get_InfoLocation(This,pInfoLocation)

#define CodeStruct_get_Children(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Children(This,ppCodeElements)

#define CodeStruct_get_Language(This,pLanguage)	\
    (This)->lpVtbl -> get_Language(This,pLanguage)

#define CodeStruct_get_StartPoint(This,ppTextPoint)	\
    (This)->lpVtbl -> get_StartPoint(This,ppTextPoint)

#define CodeStruct_get_EndPoint(This,ppTextPoint)	\
    (This)->lpVtbl -> get_EndPoint(This,ppTextPoint)

#define CodeStruct_get_ExtenderNames(This,ExtenderNames)	\
    (This)->lpVtbl -> get_ExtenderNames(This,ExtenderNames)

#define CodeStruct_get_Extender(This,ExtenderName,Extender)	\
    (This)->lpVtbl -> get_Extender(This,ExtenderName,Extender)

#define CodeStruct_get_ExtenderCATID(This,pRetval)	\
    (This)->lpVtbl -> get_ExtenderCATID(This,pRetval)

#define CodeStruct_GetStartPoint(This,Part,ppTextPoint)	\
    (This)->lpVtbl -> GetStartPoint(This,Part,ppTextPoint)

#define CodeStruct_GetEndPoint(This,Part,ppTextPoint)	\
    (This)->lpVtbl -> GetEndPoint(This,Part,ppTextPoint)

#define CodeStruct_get_Parent(This,ParentObject)	\
    (This)->lpVtbl -> get_Parent(This,ParentObject)

#define CodeStruct_get_Namespace(This,ppCodeNamespace)	\
    (This)->lpVtbl -> get_Namespace(This,ppCodeNamespace)

#define CodeStruct_get_Bases(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Bases(This,ppCodeElements)

#define CodeStruct_get_Members(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Members(This,ppCodeElements)

#define CodeStruct_put_Access(This,Access)	\
    (This)->lpVtbl -> put_Access(This,Access)

#define CodeStruct_get_Access(This,pAccess)	\
    (This)->lpVtbl -> get_Access(This,pAccess)

#define CodeStruct_get_Attributes(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Attributes(This,ppCodeElements)

#define CodeStruct_get_DocComment(This,pDocComment)	\
    (This)->lpVtbl -> get_DocComment(This,pDocComment)

#define CodeStruct_put_DocComment(This,DocComment)	\
    (This)->lpVtbl -> put_DocComment(This,DocComment)

#define CodeStruct_get_Comment(This,pComment)	\
    (This)->lpVtbl -> get_Comment(This,pComment)

#define CodeStruct_put_Comment(This,Comment)	\
    (This)->lpVtbl -> put_Comment(This,Comment)

#define CodeStruct_AddBase(This,Base,Position,ppOut)	\
    (This)->lpVtbl -> AddBase(This,Base,Position,ppOut)

#define CodeStruct_AddAttribute(This,Name,Value,Position,ppCodeAttribute)	\
    (This)->lpVtbl -> AddAttribute(This,Name,Value,Position,ppCodeAttribute)

#define CodeStruct_RemoveBase(This,Element)	\
    (This)->lpVtbl -> RemoveBase(This,Element)

#define CodeStruct_RemoveMember(This,Element)	\
    (This)->lpVtbl -> RemoveMember(This,Element)

#define CodeStruct_get_IsDerivedFrom(This,FullName,pVal)	\
    (This)->lpVtbl -> get_IsDerivedFrom(This,FullName,pVal)

#define CodeStruct_get_DerivedTypes(This,ppCodeElements)	\
    (This)->lpVtbl -> get_DerivedTypes(This,ppCodeElements)

#define CodeStruct_get_ImplementedInterfaces(This,ppCodeElements)	\
    (This)->lpVtbl -> get_ImplementedInterfaces(This,ppCodeElements)

#define CodeStruct_get_IsAbstract(This,pIsAbstract)	\
    (This)->lpVtbl -> get_IsAbstract(This,pIsAbstract)

#define CodeStruct_put_IsAbstract(This,Abstract)	\
    (This)->lpVtbl -> put_IsAbstract(This,Abstract)

#define CodeStruct_AddImplementedInterface(This,Base,Position,ppCodeInterface)	\
    (This)->lpVtbl -> AddImplementedInterface(This,Base,Position,ppCodeInterface)

#define CodeStruct_AddFunction(This,Name,Kind,Type,Position,Access,Location,ppCodeFunction)	\
    (This)->lpVtbl -> AddFunction(This,Name,Kind,Type,Position,Access,Location,ppCodeFunction)

#define CodeStruct_AddVariable(This,Name,Type,Position,Access,Location,ppCodeVariable)	\
    (This)->lpVtbl -> AddVariable(This,Name,Type,Position,Access,Location,ppCodeVariable)

#define CodeStruct_AddProperty(This,GetterName,PutterName,Type,Position,Access,Location,ppCodeProperty)	\
    (This)->lpVtbl -> AddProperty(This,GetterName,PutterName,Type,Position,Access,Location,ppCodeProperty)

#define CodeStruct_AddClass(This,Name,Position,Bases,ImplementedInterfaces,Access,ppCodeClass)	\
    (This)->lpVtbl -> AddClass(This,Name,Position,Bases,ImplementedInterfaces,Access,ppCodeClass)

#define CodeStruct_AddStruct(This,Name,Position,Bases,ImplementedInterfaces,Access,ppCodeStruct)	\
    (This)->lpVtbl -> AddStruct(This,Name,Position,Bases,ImplementedInterfaces,Access,ppCodeStruct)

#define CodeStruct_AddEnum(This,Name,Position,Bases,Access,ppCodeEnum)	\
    (This)->lpVtbl -> AddEnum(This,Name,Position,Bases,Access,ppCodeEnum)

#define CodeStruct_AddDelegate(This,Name,Type,Position,Access,ppCodeDelegate)	\
    (This)->lpVtbl -> AddDelegate(This,Name,Type,Position,Access,ppCodeDelegate)

#define CodeStruct_RemoveInterface(This,Element)	\
    (This)->lpVtbl -> RemoveInterface(This,Element)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_get_DTE_Proxy( 
    CodeStruct * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB CodeStruct_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_get_Collection_Proxy( 
    CodeStruct * This,
    /* [retval][out] */ CodeElements **ppCollection);


void __RPC_STUB CodeStruct_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_get_Name_Proxy( 
    CodeStruct * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB CodeStruct_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_put_Name_Proxy( 
    CodeStruct * This,
    BSTR NewName);


void __RPC_STUB CodeStruct_put_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_get_FullName_Proxy( 
    CodeStruct * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB CodeStruct_get_FullName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_get_ProjectItem_Proxy( 
    CodeStruct * This,
    /* [retval][out] */ ProjectItem **pProjItem);


void __RPC_STUB CodeStruct_get_ProjectItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_get_Kind_Proxy( 
    CodeStruct * This,
    /* [retval][out] */ enum vsCMElement *pCodeEltKind);


void __RPC_STUB CodeStruct_get_Kind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_get_IsCodeType_Proxy( 
    CodeStruct * This,
    /* [retval][out] */ VARIANT_BOOL *pIsCodeType);


void __RPC_STUB CodeStruct_get_IsCodeType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_get_InfoLocation_Proxy( 
    CodeStruct * This,
    /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation);


void __RPC_STUB CodeStruct_get_InfoLocation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_get_Children_Proxy( 
    CodeStruct * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeStruct_get_Children_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_get_Language_Proxy( 
    CodeStruct * This,
    /* [retval][out] */ BSTR *pLanguage);


void __RPC_STUB CodeStruct_get_Language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_get_StartPoint_Proxy( 
    CodeStruct * This,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeStruct_get_StartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_get_EndPoint_Proxy( 
    CodeStruct * This,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeStruct_get_EndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_get_ExtenderNames_Proxy( 
    CodeStruct * This,
    /* [retval][out] */ VARIANT *ExtenderNames);


void __RPC_STUB CodeStruct_get_ExtenderNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_get_Extender_Proxy( 
    CodeStruct * This,
    BSTR ExtenderName,
    /* [retval][out] */ IDispatch **Extender);


void __RPC_STUB CodeStruct_get_Extender_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_get_ExtenderCATID_Proxy( 
    CodeStruct * This,
    /* [retval][out] */ BSTR *pRetval);


void __RPC_STUB CodeStruct_get_ExtenderCATID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_GetStartPoint_Proxy( 
    CodeStruct * This,
    /* [defaultvalue][in] */ enum vsCMPart Part,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeStruct_GetStartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_GetEndPoint_Proxy( 
    CodeStruct * This,
    /* [defaultvalue][in] */ enum vsCMPart Part,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeStruct_GetEndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_get_Parent_Proxy( 
    CodeStruct * This,
    /* [retval][out] */ IDispatch **ParentObject);


void __RPC_STUB CodeStruct_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_get_Namespace_Proxy( 
    CodeStruct * This,
    /* [retval][out] */ CodeNamespace **ppCodeNamespace);


void __RPC_STUB CodeStruct_get_Namespace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_get_Bases_Proxy( 
    CodeStruct * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeStruct_get_Bases_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_get_Members_Proxy( 
    CodeStruct * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeStruct_get_Members_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_put_Access_Proxy( 
    CodeStruct * This,
    enum vsCMAccess Access);


void __RPC_STUB CodeStruct_put_Access_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_get_Access_Proxy( 
    CodeStruct * This,
    /* [retval][out] */ enum vsCMAccess *pAccess);


void __RPC_STUB CodeStruct_get_Access_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_get_Attributes_Proxy( 
    CodeStruct * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeStruct_get_Attributes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_get_DocComment_Proxy( 
    CodeStruct * This,
    /* [retval][out] */ BSTR *pDocComment);


void __RPC_STUB CodeStruct_get_DocComment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_put_DocComment_Proxy( 
    CodeStruct * This,
    BSTR DocComment);


void __RPC_STUB CodeStruct_put_DocComment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_get_Comment_Proxy( 
    CodeStruct * This,
    /* [retval][out] */ BSTR *pComment);


void __RPC_STUB CodeStruct_get_Comment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_put_Comment_Proxy( 
    CodeStruct * This,
    BSTR Comment);


void __RPC_STUB CodeStruct_put_Comment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_AddBase_Proxy( 
    CodeStruct * This,
    VARIANT Base,
    /* [optional] */ VARIANT Position,
    /* [retval][out] */ CodeElement **ppOut);


void __RPC_STUB CodeStruct_AddBase_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_AddAttribute_Proxy( 
    CodeStruct * This,
    BSTR Name,
    BSTR Value,
    /* [optional] */ VARIANT Position,
    /* [retval][out] */ CodeAttribute **ppCodeAttribute);


void __RPC_STUB CodeStruct_AddAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_RemoveBase_Proxy( 
    CodeStruct * This,
    VARIANT Element);


void __RPC_STUB CodeStruct_RemoveBase_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_RemoveMember_Proxy( 
    CodeStruct * This,
    VARIANT Element);


void __RPC_STUB CodeStruct_RemoveMember_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_get_IsDerivedFrom_Proxy( 
    CodeStruct * This,
    BSTR FullName,
    /* [retval][out] */ VARIANT_BOOL *pVal);


void __RPC_STUB CodeStruct_get_IsDerivedFrom_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_get_DerivedTypes_Proxy( 
    CodeStruct * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeStruct_get_DerivedTypes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_get_ImplementedInterfaces_Proxy( 
    CodeStruct * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeStruct_get_ImplementedInterfaces_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_get_IsAbstract_Proxy( 
    CodeStruct * This,
    /* [retval][out] */ VARIANT_BOOL *pIsAbstract);


void __RPC_STUB CodeStruct_get_IsAbstract_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_put_IsAbstract_Proxy( 
    CodeStruct * This,
    VARIANT_BOOL Abstract);


void __RPC_STUB CodeStruct_put_IsAbstract_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_AddImplementedInterface_Proxy( 
    CodeStruct * This,
    VARIANT Base,
    /* [optional] */ VARIANT Position,
    /* [retval][out] */ CodeInterface **ppCodeInterface);


void __RPC_STUB CodeStruct_AddImplementedInterface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_AddFunction_Proxy( 
    CodeStruct * This,
    BSTR Name,
    enum vsCMFunction Kind,
    VARIANT Type,
    /* [optional] */ VARIANT Position,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [optional] */ VARIANT Location,
    /* [retval][out] */ CodeFunction **ppCodeFunction);


void __RPC_STUB CodeStruct_AddFunction_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_AddVariable_Proxy( 
    CodeStruct * This,
    BSTR Name,
    VARIANT Type,
    /* [optional] */ VARIANT Position,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [optional] */ VARIANT Location,
    /* [retval][out] */ CodeVariable **ppCodeVariable);


void __RPC_STUB CodeStruct_AddVariable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_AddProperty_Proxy( 
    CodeStruct * This,
    BSTR GetterName,
    BSTR PutterName,
    VARIANT Type,
    /* [optional] */ VARIANT Position,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [optional] */ VARIANT Location,
    /* [retval][out] */ CodeProperty **ppCodeProperty);


void __RPC_STUB CodeStruct_AddProperty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_AddClass_Proxy( 
    CodeStruct * This,
    BSTR Name,
    /* [optional] */ VARIANT Position,
    /* [optional] */ VARIANT Bases,
    /* [optional] */ VARIANT ImplementedInterfaces,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeClass **ppCodeClass);


void __RPC_STUB CodeStruct_AddClass_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_AddStruct_Proxy( 
    CodeStruct * This,
    BSTR Name,
    /* [optional] */ VARIANT Position,
    /* [optional] */ VARIANT Bases,
    /* [optional] */ VARIANT ImplementedInterfaces,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeStruct **ppCodeStruct);


void __RPC_STUB CodeStruct_AddStruct_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_AddEnum_Proxy( 
    CodeStruct * This,
    BSTR Name,
    /* [optional] */ VARIANT Position,
    /* [optional] */ VARIANT Bases,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeEnum **ppCodeEnum);


void __RPC_STUB CodeStruct_AddEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_AddDelegate_Proxy( 
    CodeStruct * This,
    BSTR Name,
    VARIANT Type,
    /* [optional] */ VARIANT Position,
    /* [defaultvalue] */ enum vsCMAccess Access,
    /* [retval][out] */ CodeDelegate **ppCodeDelegate);


void __RPC_STUB CodeStruct_AddDelegate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeStruct_RemoveInterface_Proxy( 
    CodeStruct * This,
    VARIANT Element);


void __RPC_STUB CodeStruct_RemoveInterface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __CodeStruct_INTERFACE_DEFINED__ */


#ifndef __CodeEnum_INTERFACE_DEFINED__
#define __CodeEnum_INTERFACE_DEFINED__

/* interface CodeEnum */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_CodeEnum;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B1F42512-91CD-4D3A-8B25-A317D8032B24")
    CodeEnum : public IDispatch
    {
    public:
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ CodeElements **ppCollection) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            BSTR NewName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FullName( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProjectItem( 
            /* [retval][out] */ ProjectItem **pProjItem) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Kind( 
            /* [retval][out] */ enum vsCMElement *pCodeEltKind) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsCodeType( 
            /* [retval][out] */ VARIANT_BOOL *pIsCodeType) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InfoLocation( 
            /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Children( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Language( 
            /* [retval][out] */ BSTR *pLanguage) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_StartPoint( 
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_EndPoint( 
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderNames( 
            /* [retval][out] */ VARIANT *ExtenderNames) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_Extender( 
            BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE get_ExtenderCATID( 
            /* [retval][out] */ BSTR *pRetval) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetStartPoint( 
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE GetEndPoint( 
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Parent( 
            /* [retval][out] */ IDispatch **ParentObject) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Namespace( 
            /* [retval][out] */ CodeNamespace **ppCodeNamespace) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Bases( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Members( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Access( 
            enum vsCMAccess Access) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Access( 
            /* [retval][out] */ enum vsCMAccess *pAccess) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Attributes( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DocComment( 
            /* [retval][out] */ BSTR *pDocComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_DocComment( 
            BSTR DocComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Comment( 
            /* [retval][out] */ BSTR *pComment) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Comment( 
            BSTR Comment) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddBase( 
            VARIANT Base,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeElement **ppOut) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddAttribute( 
            BSTR Name,
            BSTR Value,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeAttribute **ppCodeAttribute) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveBase( 
            VARIANT Element) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE RemoveMember( 
            VARIANT Element) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsDerivedFrom( 
            BSTR FullName,
            /* [retval][out] */ VARIANT_BOOL *pVal) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DerivedTypes( 
            /* [retval][out] */ CodeElements **ppCodeElements) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE AddMember( 
            BSTR Name,
            /* [optional] */ VARIANT Value,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeVariable **ppCodeElements) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct CodeEnumVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            CodeEnum * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            CodeEnum * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            CodeEnum * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            CodeEnum * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            CodeEnum * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            CodeEnum * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            CodeEnum * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DTE )( 
            CodeEnum * This,
            /* [retval][out] */ DTE	**DTEObject);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Collection )( 
            CodeEnum * This,
            /* [retval][out] */ CodeElements **ppCollection);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            CodeEnum * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            CodeEnum * This,
            BSTR NewName);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_FullName )( 
            CodeEnum * This,
            /* [retval][out] */ BSTR *pVal);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ProjectItem )( 
            CodeEnum * This,
            /* [retval][out] */ ProjectItem **pProjItem);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Kind )( 
            CodeEnum * This,
            /* [retval][out] */ enum vsCMElement *pCodeEltKind);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsCodeType )( 
            CodeEnum * This,
            /* [retval][out] */ VARIANT_BOOL *pIsCodeType);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_InfoLocation )( 
            CodeEnum * This,
            /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Children )( 
            CodeEnum * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Language )( 
            CodeEnum * This,
            /* [retval][out] */ BSTR *pLanguage);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_StartPoint )( 
            CodeEnum * This,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_EndPoint )( 
            CodeEnum * This,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderNames )( 
            CodeEnum * This,
            /* [retval][out] */ VARIANT *ExtenderNames);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Extender )( 
            CodeEnum * This,
            BSTR ExtenderName,
            /* [retval][out] */ IDispatch **Extender);
        
        /* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_ExtenderCATID )( 
            CodeEnum * This,
            /* [retval][out] */ BSTR *pRetval);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetStartPoint )( 
            CodeEnum * This,
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *GetEndPoint )( 
            CodeEnum * This,
            /* [defaultvalue][in] */ enum vsCMPart Part,
            /* [retval][out] */ TextPoint **ppTextPoint);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Parent )( 
            CodeEnum * This,
            /* [retval][out] */ IDispatch **ParentObject);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Namespace )( 
            CodeEnum * This,
            /* [retval][out] */ CodeNamespace **ppCodeNamespace);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Bases )( 
            CodeEnum * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Members )( 
            CodeEnum * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Access )( 
            CodeEnum * This,
            enum vsCMAccess Access);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Access )( 
            CodeEnum * This,
            /* [retval][out] */ enum vsCMAccess *pAccess);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Attributes )( 
            CodeEnum * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DocComment )( 
            CodeEnum * This,
            /* [retval][out] */ BSTR *pDocComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_DocComment )( 
            CodeEnum * This,
            BSTR DocComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_Comment )( 
            CodeEnum * This,
            /* [retval][out] */ BSTR *pComment);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT ( STDMETHODCALLTYPE *put_Comment )( 
            CodeEnum * This,
            BSTR Comment);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddBase )( 
            CodeEnum * This,
            VARIANT Base,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeElement **ppOut);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddAttribute )( 
            CodeEnum * This,
            BSTR Name,
            BSTR Value,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeAttribute **ppCodeAttribute);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveBase )( 
            CodeEnum * This,
            VARIANT Element);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveMember )( 
            CodeEnum * This,
            VARIANT Element);
        
        /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_IsDerivedFrom )( 
            CodeEnum * This,
            BSTR FullName,
            /* [retval][out] */ VARIANT_BOOL *pVal);
        
        /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT ( STDMETHODCALLTYPE *get_DerivedTypes )( 
            CodeEnum * This,
            /* [retval][out] */ CodeElements **ppCodeElements);
        
        /* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT ( STDMETHODCALLTYPE *AddMember )( 
            CodeEnum * This,
            BSTR Name,
            /* [optional] */ VARIANT Value,
            /* [optional] */ VARIANT Position,
            /* [retval][out] */ CodeVariable **ppCodeElements);
        
        END_INTERFACE
    } CodeEnumVtbl;

    interface CodeEnum
    {
        CONST_VTBL struct CodeEnumVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define CodeEnum_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define CodeEnum_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define CodeEnum_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define CodeEnum_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define CodeEnum_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define CodeEnum_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define CodeEnum_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define CodeEnum_get_DTE(This,DTEObject)	\
    (This)->lpVtbl -> get_DTE(This,DTEObject)

#define CodeEnum_get_Collection(This,ppCollection)	\
    (This)->lpVtbl -> get_Collection(This,ppCollection)

#define CodeEnum_get_Name(This,pVal)	\
    (This)->lpVtbl -> get_Name(This,pVal)

#define CodeEnum_put_Name(This,NewName)	\
    (This)->lpVtbl -> put_Name(This,NewName)

#define CodeEnum_get_FullName(This,pVal)	\
    (This)->lpVtbl -> get_FullName(This,pVal)

#define CodeEnum_get_ProjectItem(This,pProjItem)	\
    (This)->lpVtbl -> get_ProjectItem(This,pProjItem)

#define CodeEnum_get_Kind(This,pCodeEltKind)	\
    (This)->lpVtbl -> get_Kind(This,pCodeEltKind)

#define CodeEnum_get_IsCodeType(This,pIsCodeType)	\
    (This)->lpVtbl -> get_IsCodeType(This,pIsCodeType)

#define CodeEnum_get_InfoLocation(This,pInfoLocation)	\
    (This)->lpVtbl -> get_InfoLocation(This,pInfoLocation)

#define CodeEnum_get_Children(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Children(This,ppCodeElements)

#define CodeEnum_get_Language(This,pLanguage)	\
    (This)->lpVtbl -> get_Language(This,pLanguage)

#define CodeEnum_get_StartPoint(This,ppTextPoint)	\
    (This)->lpVtbl -> get_StartPoint(This,ppTextPoint)

#define CodeEnum_get_EndPoint(This,ppTextPoint)	\
    (This)->lpVtbl -> get_EndPoint(This,ppTextPoint)

#define CodeEnum_get_ExtenderNames(This,ExtenderNames)	\
    (This)->lpVtbl -> get_ExtenderNames(This,ExtenderNames)

#define CodeEnum_get_Extender(This,ExtenderName,Extender)	\
    (This)->lpVtbl -> get_Extender(This,ExtenderName,Extender)

#define CodeEnum_get_ExtenderCATID(This,pRetval)	\
    (This)->lpVtbl -> get_ExtenderCATID(This,pRetval)

#define CodeEnum_GetStartPoint(This,Part,ppTextPoint)	\
    (This)->lpVtbl -> GetStartPoint(This,Part,ppTextPoint)

#define CodeEnum_GetEndPoint(This,Part,ppTextPoint)	\
    (This)->lpVtbl -> GetEndPoint(This,Part,ppTextPoint)

#define CodeEnum_get_Parent(This,ParentObject)	\
    (This)->lpVtbl -> get_Parent(This,ParentObject)

#define CodeEnum_get_Namespace(This,ppCodeNamespace)	\
    (This)->lpVtbl -> get_Namespace(This,ppCodeNamespace)

#define CodeEnum_get_Bases(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Bases(This,ppCodeElements)

#define CodeEnum_get_Members(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Members(This,ppCodeElements)

#define CodeEnum_put_Access(This,Access)	\
    (This)->lpVtbl -> put_Access(This,Access)

#define CodeEnum_get_Access(This,pAccess)	\
    (This)->lpVtbl -> get_Access(This,pAccess)

#define CodeEnum_get_Attributes(This,ppCodeElements)	\
    (This)->lpVtbl -> get_Attributes(This,ppCodeElements)

#define CodeEnum_get_DocComment(This,pDocComment)	\
    (This)->lpVtbl -> get_DocComment(This,pDocComment)

#define CodeEnum_put_DocComment(This,DocComment)	\
    (This)->lpVtbl -> put_DocComment(This,DocComment)

#define CodeEnum_get_Comment(This,pComment)	\
    (This)->lpVtbl -> get_Comment(This,pComment)

#define CodeEnum_put_Comment(This,Comment)	\
    (This)->lpVtbl -> put_Comment(This,Comment)

#define CodeEnum_AddBase(This,Base,Position,ppOut)	\
    (This)->lpVtbl -> AddBase(This,Base,Position,ppOut)

#define CodeEnum_AddAttribute(This,Name,Value,Position,ppCodeAttribute)	\
    (This)->lpVtbl -> AddAttribute(This,Name,Value,Position,ppCodeAttribute)

#define CodeEnum_RemoveBase(This,Element)	\
    (This)->lpVtbl -> RemoveBase(This,Element)

#define CodeEnum_RemoveMember(This,Element)	\
    (This)->lpVtbl -> RemoveMember(This,Element)

#define CodeEnum_get_IsDerivedFrom(This,FullName,pVal)	\
    (This)->lpVtbl -> get_IsDerivedFrom(This,FullName,pVal)

#define CodeEnum_get_DerivedTypes(This,ppCodeElements)	\
    (This)->lpVtbl -> get_DerivedTypes(This,ppCodeElements)

#define CodeEnum_AddMember(This,Name,Value,Position,ppCodeElements)	\
    (This)->lpVtbl -> AddMember(This,Name,Value,Position,ppCodeElements)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_get_DTE_Proxy( 
    CodeEnum * This,
    /* [retval][out] */ DTE	**DTEObject);


void __RPC_STUB CodeEnum_get_DTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_get_Collection_Proxy( 
    CodeEnum * This,
    /* [retval][out] */ CodeElements **ppCollection);


void __RPC_STUB CodeEnum_get_Collection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_get_Name_Proxy( 
    CodeEnum * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB CodeEnum_get_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_put_Name_Proxy( 
    CodeEnum * This,
    BSTR NewName);


void __RPC_STUB CodeEnum_put_Name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_get_FullName_Proxy( 
    CodeEnum * This,
    /* [retval][out] */ BSTR *pVal);


void __RPC_STUB CodeEnum_get_FullName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_get_ProjectItem_Proxy( 
    CodeEnum * This,
    /* [retval][out] */ ProjectItem **pProjItem);


void __RPC_STUB CodeEnum_get_ProjectItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_get_Kind_Proxy( 
    CodeEnum * This,
    /* [retval][out] */ enum vsCMElement *pCodeEltKind);


void __RPC_STUB CodeEnum_get_Kind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_get_IsCodeType_Proxy( 
    CodeEnum * This,
    /* [retval][out] */ VARIANT_BOOL *pIsCodeType);


void __RPC_STUB CodeEnum_get_IsCodeType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_get_InfoLocation_Proxy( 
    CodeEnum * This,
    /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation);


void __RPC_STUB CodeEnum_get_InfoLocation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_get_Children_Proxy( 
    CodeEnum * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeEnum_get_Children_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_get_Language_Proxy( 
    CodeEnum * This,
    /* [retval][out] */ BSTR *pLanguage);


void __RPC_STUB CodeEnum_get_Language_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_get_StartPoint_Proxy( 
    CodeEnum * This,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeEnum_get_StartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_get_EndPoint_Proxy( 
    CodeEnum * This,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeEnum_get_EndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_get_ExtenderNames_Proxy( 
    CodeEnum * This,
    /* [retval][out] */ VARIANT *ExtenderNames);


void __RPC_STUB CodeEnum_get_ExtenderNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_get_Extender_Proxy( 
    CodeEnum * This,
    BSTR ExtenderName,
    /* [retval][out] */ IDispatch **Extender);


void __RPC_STUB CodeEnum_get_Extender_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][nonbrowsable][propget][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_get_ExtenderCATID_Proxy( 
    CodeEnum * This,
    /* [retval][out] */ BSTR *pRetval);


void __RPC_STUB CodeEnum_get_ExtenderCATID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_GetStartPoint_Proxy( 
    CodeEnum * This,
    /* [defaultvalue][in] */ enum vsCMPart Part,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeEnum_GetStartPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_GetEndPoint_Proxy( 
    CodeEnum * This,
    /* [defaultvalue][in] */ enum vsCMPart Part,
    /* [retval][out] */ TextPoint **ppTextPoint);


void __RPC_STUB CodeEnum_GetEndPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_get_Parent_Proxy( 
    CodeEnum * This,
    /* [retval][out] */ IDispatch **ParentObject);


void __RPC_STUB CodeEnum_get_Parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_get_Namespace_Proxy( 
    CodeEnum * This,
    /* [retval][out] */ CodeNamespace **ppCodeNamespace);


void __RPC_STUB CodeEnum_get_Namespace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_get_Bases_Proxy( 
    CodeEnum * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeEnum_get_Bases_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_get_Members_Proxy( 
    CodeEnum * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeEnum_get_Members_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_put_Access_Proxy( 
    CodeEnum * This,
    enum vsCMAccess Access);


void __RPC_STUB CodeEnum_put_Access_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_get_Access_Proxy( 
    CodeEnum * This,
    /* [retval][out] */ enum vsCMAccess *pAccess);


void __RPC_STUB CodeEnum_get_Access_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_get_Attributes_Proxy( 
    CodeEnum * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeEnum_get_Attributes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_get_DocComment_Proxy( 
    CodeEnum * This,
    /* [retval][out] */ BSTR *pDocComment);


void __RPC_STUB CodeEnum_get_DocComment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_put_DocComment_Proxy( 
    CodeEnum * This,
    BSTR DocComment);


void __RPC_STUB CodeEnum_put_DocComment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_get_Comment_Proxy( 
    CodeEnum * This,
    /* [retval][out] */ BSTR *pComment);


void __RPC_STUB CodeEnum_get_Comment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_put_Comment_Proxy( 
    CodeEnum * This,
    BSTR Comment);


void __RPC_STUB CodeEnum_put_Comment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_AddBase_Proxy( 
    CodeEnum * This,
    VARIANT Base,
    /* [optional] */ VARIANT Position,
    /* [retval][out] */ CodeElement **ppOut);


void __RPC_STUB CodeEnum_AddBase_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_AddAttribute_Proxy( 
    CodeEnum * This,
    BSTR Name,
    BSTR Value,
    /* [optional] */ VARIANT Position,
    /* [retval][out] */ CodeAttribute **ppCodeAttribute);


void __RPC_STUB CodeEnum_AddAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_RemoveBase_Proxy( 
    CodeEnum * This,
    VARIANT Element);


void __RPC_STUB CodeEnum_RemoveBase_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_RemoveMember_Proxy( 
    CodeEnum * This,
    VARIANT Element);


void __RPC_STUB CodeEnum_RemoveMember_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_get_IsDerivedFrom_Proxy( 
    CodeEnum * This,
    BSTR FullName,
    /* [retval][out] */ VARIANT_BOOL *pVal);


void __RPC_STUB CodeEnum_get_IsDerivedFrom_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_get_DerivedTypes_Proxy( 
    CodeEnum * This,
    /* [retval][out] */ CodeElements **ppCodeElements);


void __RPC_STUB CodeEnum_get_DerivedTypes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstringcontext][helpstring][helpcontext][id] */ HRESULT STDMETHODCALLTYPE CodeEnum_AddMember_Proxy( 
    CodeEnum * This,
    BSTR Name,
    /* [optional] */ VARIANT Value,
    /* [optional] */ VARIANT Position,
    /* [retval][out] */ CodeVariable **ppCodeElements);


void __RPC_STUB CodeEnum_AddMember_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __CodeEnum_INTERFACE_DEFINED__ */


#ifndef __CodeDelegate_INTERFACE_DEFINED__
#define __CodeDelegate_INTERFACE_DEFINED__

/* interface CodeDelegate */
/* [helpstringcontext][helpstring][helpcontext][uuid][object][oleautomation][dual] */ 


EXTERN_C const IID IID_CodeDelegate;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B1F42513-91CD-4D3A-8B25-A317D8032B24")
    CodeDelegate : public IDispatch
    {
    public:
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_DTE( 
            /* [retval][out] */ DTE	**DTEObject) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Collection( 
            /* [retval][out] */ CodeElements **ppCollection) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propput][id] */ HRESULT STDMETHODCALLTYPE put_Name( 
            BSTR NewName) = 0;
        
        virtual /* [helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_FullName( 
            /* [retval][out] */ BSTR *pVal) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_ProjectItem( 
            /* [retval][out] */ ProjectItem **pProjItem) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_Kind( 
            /* [retval][out] */ enum vsCMElement *pCodeEltKind) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_IsCodeType( 
            /* [retval][out] */ VARIANT_BOOL *pIsCodeType) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHODCALLTYPE get_InfoLocation( 
            /* [retval][out] */ enum vsCMInfoLocation *pInfoLocation) = 0;
        
        virtual /* [nonbrowsable][helpstringcontext][helpstring][helpcontext][propget][id] */ HRESULT STDMETHO