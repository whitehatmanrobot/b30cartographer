ry.
//
#define PP_E_PPS_MAXAGEBASEDSETTINGSITEIDSEXCEEDED ((HRESULT)0x80044305L)

//
// MessageId: PP_E_PPS_INVALIDQUERYCONDITION
//
// MessageText:
//
//  The application specified an invalid query condition.
//
#define PP_E_PPS_INVALIDQUERYCONDITION   ((HRESULT)0x80044306L)

//
// MessageId: PP_E_PPS_MAXAGEBASEDSETTINGPGIDSEXCEEDED
//
// MessageText:
//
//  The maximum number of policy group ids has been exceeded in query.
//
#define PP_E_PPS_MAXAGEBASEDSETTINGPGIDSEXCEEDED ((HRESULT)0x80044307L)

//
// MessageId: PP_E_PPS_USERMUSTBEKID
//
// MessageText:
//
//  The user must be an Age Based kid for this operation.
//
#define PP_E_PPS_USERMUSTBEKID           ((HRESULT)0x80044308L)

// base 0x4380
//validation engine error code
//#define PP_E_VALIDATEENGINE_BASE            0x4380
//
// MessageId: PP_E_VE_ICS_EXCEPTION
//
// MessageText:
//
//  Internal error: exception in the Cybersource module
//
#define PP_E_VE_ICS_EXCEPTION            ((HRESULT)0x80044380L)

//
// MessageId: PP_E_VE_INVALID_ICSCONFIG
//
// MessageText:
//
//  Internal error: the cybersource configuration data is invalid
//
#define PP_E_VE_INVALID_ICSCONFIG        ((HRESULT)0x80044381L)

//
// MessageId: PP_E_VE_INVALID_CCNUMBER
//
// MessageText:
//
//  The credit card number is invalid
//
#define PP_E_VE_INVALID_CCNUMBER         ((HRESULT)0x80044382L)

//
// MessageId: PP_E_VE_INVALID_CCMONTH
//
// MessageText:
//
//  The credit card month is invalid
//
#define PP_E_VE_INVALID_CCMONTH          ((HRESULT)0x80044383L)

//
// MessageId: PP_E_VE_INVALID_CCYEAR
//
// MessageText:
//
//  The credit card year is invalid
//
#define PP_E_VE_INVALID_CCYEAR           ((HRESULT)0x80044384L)

//
// MessageId: PP_E_VE_INVALID_CCFIRSTNAME
//
// MessageText:
//
//  The first name is empty or invalid
//
#define PP_E_VE_INVALID_CCFIRSTNAME      ((HRESULT)0x80044385L)

//
// MessageId: PP_E_VE_INVALID_CCLASTNAME
//
// MessageText:
//
//  The last name is empty or invalid
//
#define PP_E_VE_INVALID_CCLASTNAME       ((HRESULT)0x80044386L)

//
// MessageId: PP_E_VE_INVALID_POLICYID
//
// MessageText:
//
//  Invalid policy id
//
#define PP_E_VE_INVALID_POLICYID         ((HRESULT)0x80044387L)

//
// MessageId: PP_E_VE_ICS_SENDFAILED
//
// MessageText:
//
//  The request to the cybersource server failed
//
#define PP_E_VE_ICS_SENDFAILED           ((HRESULT)0x80044388L)

//
// MessageId: PP_E_VE_INVALID_XMLDATA
//
// MessageText:
//
//  The request contains parameters that do not conform to the XML schema.
//
#define PP_E_VE_INVALID_XMLDATA          ((HRESULT)0x80044389L)

//
// MessageId: PP_E_VE_XMLNODE_NOTFOUND
//
// MessageText:
//
//  The input xml is missing a required node
//
#define PP_E_VE_XMLNODE_NOTFOUND         ((HRESULT)0x8004438AL)

//
// MessageId: PP_E_VE_INCOMPATIBLE_DATA
//
// MessageText:
//
//  The input data is invalid, the validation type and the validation blob are incompatible
//
#define PP_E_VE_INCOMPATIBLE_DATA        ((HRESULT)0x8004438BL)

//
// MessageId: PP_E_VE_INVALID_PUID
//
// MessageText:
//
//  Invalid Passport ID
//
#define PP_E_VE_INVALID_PUID             ((HRESULT)0x8004438CL)

//
// MessageId: PP_E_VE_INVALID_HANDLER
//
// MessageText:
//
//  Internal error: invalid Passport handler
//
#define PP_E_VE_INVALID_HANDLER          ((HRESULT)0x8004438DL)

//
// MessageId: PP_E_VE_INVALID_SITEID
//
// MessageText:
//
//  Invalid site ID
//
#define PP_E_VE_INVALID_SITEID           ((HRESULT)0x8004438EL)

//
// MessageId: PP_E_VE_INVALID_CCMSETTINGS
//
// MessageText:
//
//  Intenal error: invalid CCM configuration settings
//
#define PP_E_VE_INVALID_CCMSETTINGS      ((HRESULT)0x8004438FL)

//
// MessageId: PP_E_VE_INVALID_CCTYPE
//
// MessageText:
//
//  Invalid credit card type
//
#define PP_E_VE_INVALID_CCTYPE           ((HRESULT)0x80044390L)

//
// MessageId: PP_E_VE_INVALID_MEMBERNAME
//
// MessageText:
//
//  Invalid member name
//
#define PP_E_VE_INVALID_MEMBERNAME       ((HRESULT)0x80044391L)

//
// MessageId: PP_E_VE_KOREAN_INVALID_RESULT
//
// MessageText:
//
//  The response from the KIS server contains invalid data
//
#define PP_E_VE_KOREAN_INVALID_RESULT    ((HRESULT)0x80044392L)

//
// MessageId: PP_E_VE_KOREAN_INVALID_NRRN
//
// MessageText:
//
//  The Korean NRRN
//
#define PP_E_VE_KOREAN_INVALID_NRRN      ((HRESULT)0x80044393L)

//
// MessageId: PP_E_VE_KOREAN_INVALID_NAME
//
// MessageText:
//
//  The name is empty or invalid
//
#define PP_E_VE_KOREAN_INVALID_NAME      ((HRESULT)0x80044394L)

//
// MessageId: PP_E_VE_KOREAN_INVALID_RESPONSE
//
// MessageText:
//
//  The KIS server returned an invalid response
//
#define PP_E_VE_KOREAN_INVALID_RESPONSE  ((HRESULT)0x80044395L)

//
// MessageId: PP_E_VE_KOREAN_HTTP_STATUS_CODE
//
// MessageText:
//
//  The http request to the KIS server failed
//
#define PP_E_VE_KOREAN_HTTP_STATUS_CODE  ((HRESULT)0x80044396L)

//
// MessageId: PP_E_VE_KOREAN_INVALID_ID
//
// MessageText:
//
//  Invalid KIS site id
//
#define PP_E_VE_KOREAN_INVALID_ID        ((HRESULT)0x80044397L)

//
// MessageId: PP_E_VE_KOREAN_INVALID_PASSWORD
//
// MessageText:
//
//  Invalid KIS password
//
#define PP_E_VE_KOREAN_INVALID_PASSWORD  ((HRESULT)0x80044398L)

//
// MessageId: PP_E_VE_KOREAN_INVALID_URL
//
// MessageText:
//
//  Invalid KIS url
//
#define PP_E_VE_KOREAN_INVALID_URL       ((HRESULT)0x80044399L)

//
// MessageId: PP_E_VE_KOREAN_INVALID_NONCE
//
// MessageText:
//
//  Invalid KIS nonce
//
#define PP_E_VE_KOREAN_INVALID_NONCE     ((HRESULT)0x8004439AL)

//
// MessageId: PP_E_VE_KOREAN_NEEDINIT
//
// MessageText:
//
//  Internal error: the KIS component must be initialzied
//
#define PP_E_VE_KOREAN_NEEDINIT          ((HRESULT)0x8004439BL)

//
// MessageId: PP_E_VE_KOREAN_INVALID_KEY
//
// MessageText:
//
//  Invalid KIS key
//
#define PP_E_VE_KOREAN_INVALID_KEY       ((HRESULT)0x8004439CL)

//
// MessageId: PP_E_VE_KOREAN_KIS_RETURN_OVER_LIMIT
//
// MessageText:
//
//  The error returned by KIS is not within the expected range
//
#define PP_E_VE_KOREAN_KIS_RETURN_OVER_LIMIT ((HRESULT)0x8004439DL)

//
// MessageId: PP_E_VE_KOREAN_ALREADY_INIT
//
// MessageText:
//
//  Internal error: the KIS component is already initialzied
//
#define PP_E_VE_KOREAN_ALREADY_INIT      ((HRESULT)0x8004439EL)

//
// MessageId: PP_E_VE_KOREAN_POLICYCHECK_FAIL
//
// MessageText:
//
//  The account does not satisfy the Korean Kids policy
//
#define PP_E_VE_KOREAN_POLICYCHECK_FAIL  ((HRESULT)0x8004439FL)

//
// MessageId: PP_E_VE_NOT_TRUSTED_SITE
//
// MessageText:
//
//  The site specified is not a trusted site
//
#define PP_E_VE_NOT_TRUSTED_SITE         ((HRESULT)0x800443A0L)

//
// MessageId: PP_E_VE_VALIDATION_FAIL
//
// MessageText:
//
//  The data validation failed
//
#define PP_E_VE_VALIDATION_FAIL          ((HRESULT)0x800443A1L)

//
// MessageId: PP_E_VE_KOREAN_HTTP_TIMEOUT
//
// MessageText:
//
//  Timeout during a http request to the KIS servers
//
#define PP_E_VE_KOREAN_HTTP_TIMEOUT      ((HRESULT)0x800443A2L)

//
// MessageId: PP_E_VE_UNABLE_TO_GET_VALIDATOROBJECT
//
// MessageText:
//
//  Internal error: cannot get a validator object
//
#define PP_E_VE_UNABLE_TO_GET_VALIDATOROBJECT ((HRESULT)0x800443A3L)

//
// MessageId: PP_E_UNABLETOMAPLCID
//
// MessageText:
//
//  Unable to map lcid to an ISO lang. Check ILCid pointer passed in.
//
#define PP_E_UNABLETOMAPLCID             ((HRESULT)0x800443A4L)

// base 0x43CC
// !!!!!!!!! Warning !!!!!!!!!
//
// The following errors need to be kept between 
// PP_E_VE_KOREAN_KIS_RETURN_BASE and 
// PP_E_VE_KOREAN_KIS_RETURN_LIMIT
//
// MessageId: PP_E_VE_KOREAN_KIS_RETURN_BASE
//
// MessageText:
//
//  This error code is the base of Korean validator error code. It should not be used as a return value.
//
#define PP_E_VE_KOREAN_KIS_RETURN_BASE   ((HRESULT)0x800443CCL)

//
// MessageId: PP_E_VE_KOREAN_KIS_NOT_MATCH
//
// MessageText:
//
//  NRRN and name don't match.
//
#define PP_E_VE_KOREAN_KIS_NOT_MATCH     ((HRESULT)0x800443CEL)

//
// MessageId: PP_E_VE_KOREAN_KIS_NO_DATA
//
// MessageText:
//
//  Request has no data in it.
//
#define PP_E_VE_KOREAN_KIS_NO_DATA       ((HRESULT)0x800443CFL)

//
// MessageId: PP_E_VE_KOREAN_KIS_INVALID_NRRN_CHECKSUM
//
// MessageText:
//
//  NRRN check sum failed.
//
#define PP_E_VE_KOREAN_KIS_INVALID_NRRN_CHECKSUM ((HRESULT)0x800443D1L)

//
// MessageId: PP_E_VE_KOREAN_KIS_RETURN_LIMIT
//
// MessageText:
//
//  This error code is the upper limit of Korean validator error code. It should not be used as a return value.
//
#define PP_E_VE_KOREAN_KIS_RETURN_LIMIT  ((HRESULT)0x800443FFL)

// base 0x4400
// Errors
//#define PP_E_PKSERVICE_BASE  0x4400
//
// MessageId: PP_E_CA_NO_CLIENTCERT
//
// MessageText:
//
//  Failed to retrieve the SSL client certificate with ISAPI Server Support Function.
//
#define PP_E_CA_NO_CLIENTCERT            ((HRESULT)0x80044401L)

//
// MessageId: PP_E_CA_INITHANDLER
//
// MessageText:
//
//  The PPSOAPHANDLER InitializeHandler failed.
//
#define PP_E_CA_INITHANDLER              ((HRESULT)0x80044402L)

//
// MessageId: PP_E_CA_NULL_CERTINFOPTR
//
// MessageText:
//
//  The CA policy returned a NULL pointer for PPCertInfo that has the certificate extensions for the issued certificate.
//
#define PP_E_CA_NULL_CERTINFOPTR         ((HRESULT)0x80044403L)

//
// MessageId: PP_E_CA_BAD_EXTENSION
//
// MessageText:
//
//  An invalid extension is detected during certificate construction.
//
#define PP_E_CA_BAD_EXTENSION            ((HRESULT)0x80044404L)

//
// MessageId: PP_E_CA_PKCS10_CERTINFO
//
// MessageText:
//
//  The PKCS-10 validation must have previously failed so that IssueCertificate cannot continue to issue a certificate.
//
#define PP_E_CA_PKCS10_CERTINFO          ((HRESULT)0x80044405L)

// base 0x44e0
// Errors
#define PP_E_PKSERVICE_BASE  0x4400
//
// MessageId: PP_E_PK_GETCERT
//
// MessageText:
//
//  Client certificate can not be decoded.
//
#define PP_E_PK_GETCERT                  ((HRESULT)0x800444E0L)

//
// MessageId: PP_E_PK_CLIENTCERT
//
// MessageText:
//
//  Client certificate missing
//
#define PP_E_PK_CLIENTCERT               ((HRESULT)0x800444E1L)

//
// MessageId: PP_E_PK_INVALIDCLIENTCERT
//
// MessageText:
//
//  Invalid client certificate
//
#define PP_E_PK_INVALIDCLIENTCERT        ((HRESULT)0x800444E2L)

//
// MessageId: PP_E_PK_CACERT
//
// MessageText:
//
//  Invalid CA on client certificate
//
#define PP_E_PK_CACERT                   ((HRESULT)0x800444E3L)

//
// MessageId: PP_E_NEED_CERT
//
// MessageText:
//
//  Certificate needed
//
#define PP_E_NEED_CERT                   ((HRESULT)0x800444E4L)

//
// MessageId: PP_E_NO_CLIENT_CERT
//
// MessageText:
//
//  Failed to retrieve certificate from browser
//
#define PP_E_NO_CLIENT_CERT              ((HRESULT)0x800444E5L)

//
// MessageId: PP_E_PK_CERT_UNBOUND_REQUIRE_NONE
//
// MessageText:
//
//  Authentication required
//
#define PP_E_PK_CERT_UNBOUND_REQUIRE_NONE ((HRESULT)0x800444E6L)

//
// MessageId: PP_E_PK_UI_MANAGECERT_BADARG
//
// MessageText:
//
//  Bad internal name
//
#define PP_E_PK_UI_MANAGECERT_BADARG     ((HRESULT)0x800444F0L)

//
// MessageId: PP_E_UI_GETASSOC_INVALIDNAME
//
// MessageText:
//
//  Invalid internal member name
//
#define PP_E_UI_GETASSOC_INVALIDNAME     ((HRESULT)0x800444F1L)

//
// MessageId: PP_E_UI_GETASSOC_INVALIDPURPOSE
//
// MessageText:
//
//  Invalid certificate purpose
//
#define PP_E_UI_GETASSOC_INVALIDPURPOSE  ((HRESULT)0x800444F2L)

//
// MessageId: PP_E_UI_GETASSOC_TOOMANY_PURPOSES
//
// MessageText:
//
//  Invalid certificate purposes count
//
#define PP_E_UI_GETASSOC_TOOMANY_PURPOSES ((HRESULT)0x800444F3L)

// base 0x4500
//------------------------------------------------------------------------
// Profile Server error codes
//------------------------------------------------------------------------
#define PP_E_UPO_BASE 0x4500
//
// MessageId: PP_E_UPO_PROPERTY_NOTVALIDATED
//
// MessageText:
//
//  The property has not yet been validated.
//
#define PP_E_UPO_PROPERTY_NOTVALIDATED   ((HRESULT)0x80044500L)

//
// MessageId: PP_E_UPO_BAG_NOTSET
//
// MessageText:
//
//  A bag has not been set in the property iterator.
//
#define PP_E_UPO_BAG_NOTSET              ((HRESULT)0x80044501L)

//
// MessageId: PP_E_UPO_FILTER_NOTSET
//
// MessageText:
//
//  A filter has not been set in the property iterator.
//
#define PP_E_UPO_FILTER_NOTSET           ((HRESULT)0x80044502L)

//
// MessageId: PP_E_UPO_PROPERTY_ASSOC_SET
//
// MessageText:
//
//  Property association has already been set.
//
#define PP_E_UPO_PROPERTY_ASSOC_SET      ((HRESULT)0x80044503L)

//
// MessageId: PP_E_UPO_PROPERTY_ASSOC_NOTSET
//
// MessageText:
//
//  Property association has not been set.
//
#define PP_E_UPO_PROPERTY_ASSOC_NOTSET   ((HRESULT)0x80044504L)

//
// MessageId: PP_E_UPO_PROPERTYBAG_PROPERTYNOTPRESENT
//
// MessageText:
//
//  The specified property is not in the property bag.
//
#define PP_E_UPO_PROPERTYBAG_PROPERTYNOTPRESENT ((HRESULT)0x80044505L)

//
// MessageId: PP_E_UPO_PROPERTY_IDSET
//
// MessageText:
//
//  The property ID has already been set.
//
#define PP_E_UPO_PROPERTY_IDSET          ((HRESULT)0x80044506L)

//
// MessageId: PP_E_UPO_PROPERTY_IDNOTSET
//
// MessageText:
//
//  The property ID has not been set.
//
#define PP_E_UPO_PROPERTY_IDNOTSET       ((HRESULT)0x80044507L)

//
// MessageId: PP_E_UPO_PROPERTYBAG_PUIDSET
//
// MessageText:
//
//  The PUID has already been set in the property bag.
//
#define PP_E_UPO_PROPERTYBAG_PUIDSET     ((HRESULT)0x80044508L)

//
// MessageId: PP_E_UPO_PROPERTYBAG_PUIDNOTSET
//
// MessageText:
//
//  The PUID has not yet been set in the property bag.
//
#define PP_E_UPO_PROPERTYBAG_PUIDNOTSET  ((HRESULT)0x80044509L)

//
// MessageId: PP_E_UPO_PROPERTYBAG_CREDNAMESET
//
// MessageText:
//
//  The credential membername has already been set in the property bag.
//
#define PP_E_UPO_PROPERTYBAG_CREDNAMESET ((HRESULT)0x8004450AL)

//
// MessageId: PP_E_UPO_CREDDB_ATTRITNOTSET
//
// MessageText:
//
//  The DB attributes have not been set for a load or persist.
//
#define PP_E_UPO_CREDDB_ATTRITNOTSET     ((HRESULT)0x8004450BL)

//
// MessageId: PP_E_UPO_PROPERTY_INVALIDCREDID
//
// MessageText:
//
//  The cred ID was not a valid ID.
//
#define PP_E_UPO_PROPERTY_INVALIDCREDID  ((HRESULT)0x8004450CL)

//
// MessageId: PP_E_UPO_PROPERTY_INVALIDCREDNAME
//
// MessageText:
//
//  The cred name was not a valid name.
//
#define PP_E_UPO_PROPERTY_INVALIDCREDNAME ((HRESULT)0x8004450DL)

//
// MessageId: PP_E_UPO_PROPERTY_INVALIDPUID
//
// MessageText:
//
//  The PUID was not a valid PUID.
//
#define PP_E_UPO_PROPERTY_INVALIDPUID    ((HRESULT)0x8004450EL)

//
// MessageId: PP_E_UPO_PROPERTY_INVALIDCREDFIELD
//
// MessageText:
//
//  The cred field provided was not valid on the operation being performed.
//
#define PP_E_UPO_PROPERTY_INVALIDCREDFIELD ((HRESULT)0x8004450FL)

//
// MessageId: PP_E_UPO_PROPERTY_INVALIDCREDTYPE
//
// MessageText:
//
//  The credential type provided was not valid.
//
#define PP_E_UPO_PROPERTY_INVALIDCREDTYPE ((HRESULT)0x80044510L)

//
// MessageId: PP_E_UPO_MULTICREDPERTYPE
//
// MessageText:
//
//  The credential xml contains multiple credentials for the same type.
//
#define PP_E_UPO_MULTICREDPERTYPE        ((HRESULT)0x80044511L)

//
// MessageId: PP_E_UPO_INTERNAL
//
// MessageText:
//
//  An internal error occurred in User Properties code.
//
#define PP_E_UPO_INTERNAL                ((HRESULT)0x80044512L)

//
// MessageId: PP_E_UPO_PROPERTYBAG_INVALID
//
// MessageText:
//
//  The property bag is not valid.
//
#define PP_E_UPO_PROPERTYBAG_INVALID     ((HRESULT)0x80044513L)

//
// MessageId: PP_E_UPO_GETPOLICYGROUP_FAILED
//
// MessageText:
//
//  Unable to get the policy group for a site.
//
#define PP_E_UPO_GETPOLICYGROUP_FAILED   ((HRESULT)0x80044514L)

//
// MessageId: PP_E_UPO_PROPERTY_MISSING
//
// MessageText:
//
//  The retrieved property was NULL.
//
#define PP_E_UPO_PROPERTY_MISSING        ((HRESULT)0x80044515L)

//
// MessageId: PP_E_UPO_DSPROPERTYBAG_INSERTFAILED
//
// MessageText:
//
//  Unable to insert a property in the dataset property bag.
//
#define PP_E_UPO_DSPROPERTYBAG_INSERTFAILED ((HRESULT)0x80044516L)

//
// MessageId: PP_E_UPO_DATASET_NOTFOUND
//
// MessageText:
//
//  The specified dataset was not found.
//
#define PP_E_UPO_DATASET_NOTFOUND        ((HRESULT)0x80044517L)

//
// MessageId: PP_E_LCID_NOT_FOUND
//
// MessageText:
//
//  Unable to get the request locale.
//
#define PP_E_LCID_NOT_FOUND              ((HRESULT)0x80044518L)

//
// MessageId: PP_E_MEMBERNAME_NOT_FOUND
//
// MessageText:
//
//  The membername was not set or set with an invalid type in the property bag.
//
#define PP_E_MEMBERNAME_NOT_FOUND        ((HRESULT)0x80044519L)

//
// MessageId: PP_E_CB_INVALIDCONSENTTYPE
//
// MessageText:
//
//  Consent type requested is not valid.
//
#define PP_E_CB_INVALIDCONSENTTYPE       ((HRESULT)0x8004451AL)

//
// MessageId: PP_E_CB_CONSENTMISSING
//
// MessageText:
//
//  Consent element is NULL or missing.
//
#define PP_E_CB_CONSENTMISSING           ((HRESULT)0x8004451BL)

//
// MessageId: PP_E_CB_DATASOURCENULL
//
// MessageText:
//
//  The consent datasource has not been set.
//
#define PP_E_CB_DATASOURCENULL           ((HRESULT)0x8004451CL)

//
// MessageId: PP_E_CB_PROPERTYNOTFOUND
//
// MessageText:
//
//  The consent property requested does not exist in the bag.
//
#define PP_E_CB_PROPERTYNOTFOUND         ((HRESULT)0x8004451DL)

//
// MessageId: PP_E_CB_INVALIDPUID
//
// MessageText:
//
//  The consent bag's PUID is invalid or empty.
//
#define PP_E_CB_INVALIDPUID              ((HRESULT)0x8004451EL)

//
// MessageId: PP_E_CB_INVALIDGID
//
// MessageText:
//
//  The group ID was invalid or not set.
//
#define PP_E_CB_INVALIDGID               ((HRESULT)0x8004451FL)

//
// MessageId: PP_E_CB_GCBNOTFOUND
//
// MessageText:
//
//  Group consent bag was not found or was NULL.
//
#define PP_E_CB_GCBNOTFOUND              ((HRESULT)0x80044520L)

//
// MessageId: PP_E_CB_NOTINITIALIZED
//
// MessageText:
//
//  The consent bag was not properly initialized before use.
//
#define PP_E_CB_NOTINITIALIZED           ((HRESULT)0x80044521L)

//
// MessageId: PP_E_DATASOURCE_MAXSIZEXCEEDED
//
// MessageText:
//
//  One of the fields in the datasource exceeded the max size.
//
#define PP_E_DATASOURCE_MAXSIZEXCEEDED   ((HRESULT)0x80044522L)

//
// MessageId: PP_E_JITGRADUATION_EFAIL
//
// MessageText:
//
//  An E_FAIL is returned during JIT graduation.
//
#define PP_E_JITGRADUATION_EFAIL         ((HRESULT)0x80044523L)

// base 0x4601
// Errors
#define PP_E_CERTBIND_BASE  0x4600
//
// MessageId: PP_E_CERTBIND_INVALID_MEMBERNAME
//
// MessageText:
//
//  This is an internal error. No member name was given during disassociation of a client certificate from a credential.
//
#define PP_E_CERTBIND_INVALID_MEMBERNAME ((HRESULT)0x80044605L)

//
// MessageId: PP_E_CERTBIND_NONMATCHING
//
// MessageText:
//
//  This is an error used internally to determine whether the current certificate matches one that is being associated.
//
#define PP_E_CERTBIND_NONMATCHING        ((HRESULT)0x8004460FL)

//
// MessageId: PP_E_CERTBIND_DETAIL_CN_BAD_DN
//
// MessageText:
//
//  This is an internal error. The function to parse the DN for the CN is called with a bad or empty DN.
//
#define PP_E_CERTBIND_DETAIL_CN_BAD_DN   ((HRESULT)0x80044612L)

//
// MessageId: PP_E_CERTBIND_GETFIELD_NOCERT
//
// MessageText:
//
//  This is an internal error. The function to parse the CertInfo data is called with a NULL CertElm pointer.
//
#define PP_E_CERTBIND_GETFIELD_NOCERT    ((HRESULT)0x80044615L)

//
// MessageId: PP_E_CERTBIND_BAD_CERTINFO
//
// MessageText:
//
//  This is an internal error. The function to parse the CertInfo data is called with a NULL CertInfo pointer.
//
#define PP_E_CERTBIND_BAD_CERTINFO       ((HRESULT)0x8004461CL)

//
// MessageId: PP_E_CERTBIND_ASSOC_CONFLICT
//
// MessageText:
//
//  This is an internal error used to redirect the client to the conflict page during certificate association.
//
#define PP_E_CERTBIND_ASSOC_CONFLICT     ((HRESULT)0x8004461EL)

//
// MessageId: PP_E_CERTBIND_FLOWTOKEN_EMPTY
//
// MessageText:
//
//  An internal error due to missing flow token during client certificate management flow.
//
#define PP_E_CERTBIND_FLOWTOKEN_EMPTY    ((HRESULT)0x8004461FL)

//
// MessageId: PP_E_CERTINFO_SET_INVALIDARG
//
// MessageText:
//
//  There are more than 11 certificates found in the CertInfo during binding.
//
#define PP_E_CERTINFO_SET_INVALIDARG     ((HRESULT)0x80044660L)

//
// MessageId: PP_E_CERTINFO_SET_BADHEADER
//
// MessageText:
//
//  The header field for the CertInfo data stream is corrupted.
//
#define PP_E_CERTINFO_SET_BADHEADER      ((HRESULT)0x80044661L)

//
// MessageId: PP_E_CERTINFO_SET_BADCERTFIELD
//
// MessageText:
//
//  The CertInfo data stream is corrupted.
//
#define PP_E_CERTINFO_SET_BADCERTFIELD   ((HRESULT)0x80044662L)

//
// MessageId: PP_E_CERTINFO_SET_BADCERT_SUBJECT
//
// MessageText:
//
//  The CertInfo data stream does not have a value for the subject field.
//
#define PP_E_CERTINFO_SET_BADCERT_SUBJECT ((HRESULT)0x80044663L)

//
// MessageId: PP_E_CERTINFO_SET_BADCERT_ISSUER
//
// MessageText:
//
//  The CertInfo data stream does not have a value for the issuer field.
//
#define PP_E_CERTINFO_SET_BADCERT_ISSUER ((HRESULT)0x80044664L)

//
// MessageId: PP_E_CERTINFO_SET_BADCERT_SERIALNO
//
// MessageText:
//
//  The CertInfo data stream does not have a value for the serial number field.
//
#define PP_E_CERTINFO_SET_BADCERT_SERIALNO ((HRESULT)0x80044665L)

//
// MessageId: PP_E_CERTINFO_SET_BADCERT_PURPOSES
//
// MessageText:
//
//  The CertInfo data stream does not have a value for the purposes field.
//
#define PP_E_CERTINFO_SET_BADCERT_PURPOSES ((HRESULT)0x80044666L)

//
// MessageId: PP_E_CERTINFO_SET_BADCERT_USAGE
//
// MessageText:
//
//  The CertInfo data stream does not have a value for the key usage field.
//
#define PP_E_CERTINFO_SET_BADCERT_USAGE  ((HRESULT)0x80044667L)

//
// MessageId: PP_E_CERTINFO_SET_BADCERT_EXPIRY_LOW
//
// MessageText:
//
//  The CertInfo data stream does not have a value for the low part of the date for NotBefore or NotAfter field.
//
#define PP_E_CERTINFO_SET_BADCERT_EXPIRY_LOW ((HRESULT)0x80044669L)

//
// MessageId: PP_E_CERTINFO_SET_BADCERT_EXPIRY_HIGH
//
// MessageText:
//
//  The CertInfo data stream does not have a value for the high part of the date for NotBefore or NotAfter field.
//
#define PP_E_CERTINFO_SET_BADCERT_EXPIRY_HIGH ((HRESULT)0x8004466AL)

//
// MessageId: PP_E_CERTINFO_SET_BADCERT_BADUSAGE
//
// MessageText:
//
//  The CertInfo data stream does not have a value for the usage field.
//
#define PP_E_CERTINFO_SET_BADCERT_BADUSAGE ((HRESULT)0x8004466BL)

//
// MessageId: PP_E_CERTINFO_SET_BADCERT_BADPURPOSES
//
// MessageText:
//
//  The CertInfo data stream does not have a value for the purposes-used field.
//
#define PP_E_CERTINFO_SET_BADCERT_BADPURPOSES ((HRESULT)0x8004466CL)

//
// MessageId: PP_E_CERTINFO_SET_BADHEADER_PURPOSECOUNT
//
// MessageText:
//
//  The CertInfo data stream has a value of 0 for the purposes-used field.
//
#define PP_E_CERTINFO_SET_BADHEADER_PURPOSECOUNT ((HRESULT)0x8004466DL)

//
// MessageId: PP_E_CERTINFO_SET_BADHEADER_ACTIONS
//
// MessageText:
//
//  The CertInfo data stream does not have a value for the Actions field in the header.
//
#define PP_E_CERTINFO_SET_BADHEADER_ACTIONS ((HRESULT)0x8004466EL)

//
// MessageId: PP_E_CERTINFO_SET_BADHEADER_CURRENTTIME
//
// MessageText:
//
//  The CertInfo data stream does not have a value for the time field in the header.
//
#define PP_E_CERTINFO_SET_BADHEADER_CURRENTTIME ((HRESULT)0x8004466FL)

//
// MessageId: PP_E_CERTINFO_SET_BADHEADER_PUID
//
// MessageText:
//
//  The CertInfo data stream does not have a value for the PUID field in the header.
//
#define PP_E_CERTINFO_SET_BADHEADER_PUID ((HRESULT)0x80044670L)

//
// MessageId: PP_E_CERTINFO_STR2CERTELEM_NO_ISSUER
//
// MessageText:
//
//  No value was specified for the issuer while constructing a CertInfo.
//
#define PP_E_CERTINFO_STR2CERTELEM_NO_ISSUER ((HRESULT)0x80044671L)

//
// MessageId: PP_E_CERTINFO_STR2CERTELEM_NO_SUBJECT
//
// MessageText:
//
//  No value was specified for the subject while constructing a CertInfo.
//
#define PP_E_CERTINFO_STR2CERTELEM_NO_SUBJECT ((HRESULT)0x80044672L)

//
// MessageId: PP_E_CERTINFO_STR2CERTELEM_NO_SERIALNO
//
// MessageText:
//
//  No value was specified for the serial number while constructing a CertInfo.
//
#define PP_E_CERTINFO_STR2CERTELEM_NO_SERIALNO ((HRESULT)0x80044673L)

//
// MessageId: PP_E_CERTINFO_STR2CERTELEM_NO_EXPIRY
//
// MessageText:
//
//  No value was specified for the NotBefore or NotAfter fields while constructing a CertInfo.
//
#define PP_E_CERTINFO_STR2CERTELEM_NO_EXPIRY ((HRESULT)0x80044674L)

//
// MessageId: PP_E_CERTINFO_STR2CERTELEM_NO_CALOGO
//
// MessageText:
//
//  No value was specified for the URL for CA Partner logo while constructing a CertInfo.
//
#define PP_E_CERTINFO_STR2CERTELEM_NO_CALOGO ((HRESULT)0x80044675L)

//
// MessageId: PP_E_CERTINFO_STR2CERTELEM_NO_X509
//
// MessageText:
//
//  No value was specified for the certificate data while constructing a CertInfo.
//
#define PP_E_CERTINFO_STR2CERTELEM_NO_X509 ((HRESULT)0x80044676L)

//
// MessageId: PP_E_CERTINFO_STR2CERTELEM_BAD_USAGE
//
// MessageText:
//
//  No value or an invalid usage was specified for the usage while constructing a CertInfo.
//
#define PP_E_CERTINFO_STR2CERTELEM_BAD_USAGE ((HRESULT)0x80044677L)

//
// MessageId: PP_E_CERTINFO_STR2CERTELEM_BAD_PURPOSES
//
// MessageText:
//
//  No value or an invalid usage was specified for the purposed-used while constructing a CertInfo.
//
#define PP_E_CERTINFO_STR2CERTELEM_BAD_PURPOSES ((HRESULT)0x80044678L)

//
// MessageId: PP_E_CERTINFO_STR2CERTELEM_INCONSISTENT_USAGE
//
// MessageText:
//
//  An attempt to add a certificate with a different usage into a CertInfo stream that already has this certificate.
//
#define PP_E_CERTINFO_STR2CERTELEM_INCONSISTENT_USAGE ((HRESULT)0x80044679L)

//
// MessageId: PP_E_CERTINFO_SET_BAD_COUNT
//
// MessageText:
//
//  The integrity check on the purpose count has failed while constructing the CertInfo stream.
//
#define PP_E_CERTINFO_SET_BAD_COUNT      ((HRESULT)0x8004467AL)

//
// MessageId: PP_E_CERTINFO_SETHEADER_BAD_PUID
//
// MessageText:
//
//  The specified PUID during construction of the CertInfo  header is invalid.
//
#define PP_E_CERTINFO_SETHEADER_BAD_PUID ((HRESULT)0x8004467BL)

//
// MessageId: PP_E_CERTINFO_SETHEADER_BAD_ACTION
//
// MessageText:
//
//  The specified Action during construction of the CertInfo header is invalid.
//
#define PP_E_CERTINFO_SETHEADER_BAD_ACTION ((HRESULT)0x8004467CL)

//
// MessageId: PP_E_CERTINFO_GETCERT_INVALID_INDEX
//
// MessageText:
//
//  The specified index for a certificate in the CertInfo stream is invalid.
//
#define PP_E_CERTINFO_GETCERT_INVALID_INDEX ((HRESULT)0x8004467DL)

//
// MessageId: PP_E_CERTINFO_SET_INVALID_STRING
//
// MessageText:
//
//  There was no data during deserializing of the CertInfo data stream.
//
#define PP_E_CERTINFO_SET_INVALID_STRING ((HRESULT)0x8004467FL)

//
// MessageId: PP_E_CERTINFO_CONSTRUCT_BAD_COUNT
//
// MessageText:
//
//  The purposes-used count failed integrity check during serializing of the CertInfo.
//
#define PP_E_CERTINFO_CONSTRUCT_BAD_COUNT ((HRESULT)0x80044680L)

//
// MessageId: PP_E_CERTINFO_CONSTRUCT_NO_ISSUER
//
// MessageText:
//
//  No issuer was found while serializing the CertInfo.
//
#define PP_E_CERTINFO_CONSTRUCT_NO_ISSUER ((HRESULT)0x80044681L)

//
// MessageId: PP_E_CERTINFO_CONSTRUCT_NO_SUBJECT
//
// MessageText:
//
//  No subject was found while serializing the CertInfo.
//
#define PP_E_CERTINFO_CONSTRUCT_NO_SUBJECT ((HRESULT)0x80044682L)

//
// MessageId: PP_E_CERTINFO_CONSTRUCT_NO_SERIALNO
//
// MessageText:
//
//  No serial number was found while serializing the CertInfo.
//
#define PP_E_CERTINFO_CONSTRUCT_NO_SERIALNO ((HRESULT)0x80044683L)

//
// MessageId: PP_E_CERTINFO_CONSTRUCT_INVALID_USAGE
//
// MessageText:
//
//  No usage was found while serializing the CertInfo.
//
#define PP_E_CERTINFO_CONSTRUCT_INVALID_USAGE ((HRESULT)0x80044684L)

//
// MessageId: PP_E_CERTINFO_CONSTRUCT_INVALID_PURPOSES
//
// MessageText:
//
//  No purposes-used was found while serializing the CertInfo.
//
#define PP_E_CERTINFO_CONSTRUCT_INVALID_PURPOSES ((HRESULT)0x80044685L)

//
// MessageId: PP_E_CERTINFO_GETSINGLECERT_BAD_COUNT
//
// MessageText:
//
//  There are more than one certificate in the CertInfo data stream.
//
#define PP_E_CERTINFO_GETSINGLECERT_BAD_COUNT ((HRESULT)0x80044687L)

//
// MessageId: PP_E_CERTINFO_GETSINGLECERT_BAD_INDEX
//
// MessageText:
//
//  Attempting to retrieve a single certificate with an index that is out of bounds in the CertInfo object.
//
#define PP_E_CERTINFO_GETSINGLECERT_BAD_INDEX ((HRESULT)0x80044688L)

//
// MessageId: PP_E_CERTINFO_GETCERT_NOT_SIGNLE
//
// MessageText:
//
//  The CertInfo stream has more than one certificate; it is not for a single certificate.
//
#define PP_E_CERTINFO_GETCERT_NOT_SIGNLE ((HRESULT)0x80044689L)

//
// MessageId: PP_E_CERTINFO_MAX_REACHED
//
// MessageText:
//
//  Failed to add a certificate to a CertInfo object because it already has the maximum number of certificates.
//
#define PP_E_CERTINFO_MAX_REACHED        ((HRESULT)0x8004468AL)

//
// MessageId: PP_E_CERTINFO_STR2CERTELEM_NO_THUMBPRINT
//
// MessageText:
//
//  No value was specified for the thumbprint while constructing a CertInfo.
//
#define PP_E_CERTINFO_STR2CERTELEM_NO_THUMBPRINT ((HRESULT)0x8004468BL)

//
// MessageId: PP_E_CERTINFO_STR2CERTELEM_NO_EMAIL
//
// MessageText:
//
//  No value was specified for the email address while constructing a CertInfo.
//
#define PP_E_CERTINFO_STR2CERTELEM_NO_EMAIL ((HRESULT)0x8004468CL)

//
// MessageId: PP_E_CERTINFO_SET_BADCERT_HR
//
// MessageText:
//
//  No value was found for the HR field while deserializing the CertInfo data stream.
//
#define PP_E_CERTINFO_SET_BADCERT_HR     ((HRESULT)0x8004468DL)

//
// MessageId: PP_E_BAD_BASE_URL
//
// MessageText:
//
//  The base URL used to construct a new URL is invalid. It is missing the "//" or a ".".
//
#define PP_E_BAD_BASE_URL                ((HRESULT)0x800446A2L)

//
// MessageId: PP_E_CERTINFO_BAD_ALGORITHM
//
// MessageText:
//
//  The CertInfo public key is not of a supported algorithm.
//
#define PP_E_CERTINFO_BAD_ALGORITHM      ((HRESULT)0x800446A3L)

//
// MessageId: PP_E_PK_CERTINFO_INVALID_FIELD_
//
// MessageText:
//
//  The CertInfo data stream does not have a valid header.
//
#define PP_E_PK_CERTINFO_INVALID_FIELD_  ((HRESULT)0x800446B0L)

// DO NOT USE THE NEXT 15 error codes
// PLEASE SEE certInfo.h for the number of error
// codes reserved.
// base 0x4701
// Errors
#define PP_E_RA_BASE  0x4700
//
// MessageId: PP_E_RA_INIT_EVTLOGGER
//
// MessageText:
//
//  Failed to get eventlogger interface
//
#define PP_E_RA_INIT_EVTLOGGER           ((HRESULT)0x80044701L)

//
// MessageId: PP_E_RA_INVALID_BLOB_SIZE
//
// MessageText:
//
//  Invalid blob size
//
#define PP_E_RA_INVALID_BLOB_SIZE        ((HRESULT)0x80044702L)

//
// MessageId: PP_E_RA_INVALID_CRYPT_ALGOID_SIZE
//
// MessageText:
//
//  Invalid blob size
//
#define PP_E_RA_INVALID_CRYPT_ALGOID_SIZE ((HRESULT)0x80044703L)

//
// MessageId: PP_E_RA_INVALID_CERT_EXT_SIZE
//
// MessageText:
//
//  Invalid certificate extension size
//
#define PP_E_RA_INVALID_CERT_EXT_SIZE    ((HRESULT)0x80044704L)

//
// MessageId: PP_E_RA_INVALID_PKI_BLOB_SIZE
//
// MessageText:
//
//  Invalid blob size for CERT_PUBLIC_KEY_INFO
//
#define PP_E_RA_INVALID_PKI_BLOB_SIZE    ((HRESULT)0x80044705L)

//
// MessageId: PP_E_RA_BAD_MEMBERNAME
//
// MessageText:
//
//  Bad membername
//
#define PP_E_RA_BAD_MEMBERNAME           ((HRESULT)0x80044706L)

//
// MessageId: PP_E_RA_GET_DOMAIN
//
// MessageText:
//
//  Failed to get domain
//
#define PP_E_RA_GET_DOMAIN               ((HRESULT)0x80044708L)

//
// MessageId: PP_E_RA_INIT_CA_BAD_CONFIG
//
// MessageText:
//
//  Bad configuration file
//
#define PP_E_RA_INIT_CA_BAD_CONFIG       ((HRESULT)0x80044709L)

//
// MessageId: PP_E_RA_BAD_PUID
//
// MessageText:
//
//  Bad PUID
//
#define PP_E_RA_BAD_PUID                 ((HRESULT)0x8004470AL)

//
// MessageId: PP_E_CERTREQUEST_TOOMANY_ATTRIBUTES
//
// MessageText:
//
//  The number of attributes in the certificate request has exceeded the maximum number, k_cMaxCertAttributes.
//
#define PP_E_CERTREQUEST_TOOMANY_ATTRIBUTES ((HRESULT)0x8004470BL)

//
// MessageId: PP_E_CERTREQUEST_TOOMANY_ATTRIBBLOBS
//
// MessageText:
//
//  The number of attribute blobs in an attribute in the certificate request has exceeded the maximum number, k_cMaxCertAttribBlobs.
//
#define PP_E_CERTREQUEST_TOOMANY_ATTRIBBLOBS ((HRESULT)0x8004470CL)

//
// MessageId: PP_E_RAAPI_INIT_NO_CAMACHINE_UP
//
// MessageText:
//
//  No CA machines available
//
#define PP_E_RAAPI_INIT_NO_CAMACHINE_UP  ((HRESULT)0x80044710L)

//
// MessageId: PP_E_RAAPI_INIT_NO_CAMACHINE
//
// MessageText:
//
//  No CA machines available
//
#define PP_E_RAAPI_INIT_NO_CAMACHINE     ((HRESULT)0x80044711L)

//
// MessageId: PP_E_RAAPI_INIT_GETCOMPUTERNAME
//
// MessageText:
//
//  Failed while determining computer name length
//
#define PP_E_RAAPI_INIT_GETCOMPUTERNAME  ((HRESULT)0x80044712L)

//
// MessageId: PP_E_RAAPI_PROV_INVALID_PURPOSE_ARG
//
// MessageText:
//
//  Invalid purpose specified
//
#define PP_E_RAAPI_PROV_INVALID_PURPOSE_ARG ((HRESULT)0x80044715L)

//
// MessageId: PP_E_RAAPI_PROV_BAD_KEYSPEC
//
// MessageText:
//
//  Bad keyspec
//
#define PP_E_RAAPI_PROV_BAD_KEYSPEC      ((HRESULT)0x80044719L)

//
// MessageId: PP_E_RAAPI_PARTNERCA_NOTFOUND
//
// MessageText:
//
//  Partner CA could not be found
//
#define PP_E_RAAPI_PARTNERCA_NOTFOUND    ((HRESULT)0x8004471FL)

//
// MessageId: PP_E_RAAPI_SETCERT_BADEMAIL
//
// MessageText:
//
//  Email address from the certificate does not match member name
//
#define PP_E_RAAPI_SETCERT_BADEMAIL      ((HRESULT)0x80044737L)

//
// MessageId: PP_E_RAAPI_SETCERT_NO_AKI
//
// MessageText:
//
//  No AKI in user certificate
//
#define PP_E_RAAPI_SETCERT_NO_AKI        ((HRESULT)0x8004473CL)

//
// MessageId: PP_E_CERT_BAD_X509_LEN
//
// MessageText:
//
//  Bad X509 length
//
#define PP_E_CERT_BAD_X509_LEN           ((HRESULT)0x80044740L)

//
// MessageId: PP_E_CERT_BAD_X509_ENCODING
//
// MessageText:
//
//  Bad X509 encoding
//
#define PP_E_CERT_BAD_X509_ENCODING      ((HRESULT)0x80044741L)

//
// MessageId: PP_E_CERT_BAD_BASE64_LEN
//
// MessageText:
//
//  Bad base 64 length
//
#define PP_E_CERT_BAD_BASE64_LEN         ((HRESULT)0x80044742L)

//
// MessageId: PP_E_CERT_BAD_BASE64_ENCODING
//
// MessageText:
//
//  Bade base 64 encoding
//
#define PP_E_CERT_BAD_BASE64_ENCODING    ((HRESULT)0x80044743L)

//
// MessageId: PP_E_CERT_BAD_CERTCONTEXT_ARG
//
// MessageText:
//
//  Invalid cert context pointer
//
#define PP_E_CERT_BAD_CERTCONTEXT_ARG    ((HRESULT)0x80044744L)

//
// MessageId: PP_E_CERT_GET_SERIALNO_NOTFOUND
//
// MessageText:
//
//  Can not find certificate serial number
//
#define PP_E_CERT_GET_SERIALNO_NOTFOUND  ((HRESULT)0x80044745L)

//
// MessageId: PP_E_CERT_GET_NOTAFTER_NOTFOUND
//
// MessageText:
//
//  Cannot find NotAfter value
//
#define PP_E_CERT_GET_NOTAFTER_NOTFOUND  ((HRESULT)0x80044746L)

//
// MessageId: PP_E_CERT_GET_NOTBEFORE_NOTFOUND
//
// MessageText:
//
//  Cannot find NotBefore value
//
#define PP_E_CERT_GET_NOTBEFORE_NOTFOUND ((HRESULT)0x80044747L)

//
// MessageId: PP_E_CERT_GET_ENCODINGTYPE_NOTFOUND
//
// MessageText:
//
//  Cannot find certificate encoding type
//
#define PP_E_CERT_GET_ENCODINGTYPE_NOTFOUND ((HRESULT)0x80044748L)

//
// MessageId: PP_E_CERT_NO_CERT_CONTEXT_EX
//
// MessageText:
//
//  Bad CERT_CONTEXT_EX pointer
//
#define PP_E_CERT_NO_CERT_CONTEXT_EX     ((HRESULT)0x80044749L)

//
// MessageId: PP_E_CERT_BAD_FROM_CCM
//
// MessageText:
//
//  Detected bad cert length
//
#define PP_E_CERT_BAD_FROM_CCM           ((HRESULT)0x8004474CL)

//
// MessageId: PP_E_CERTDB_NO_EMAIL
//
// MessageText:
//
//  Email missing
//
#define PP_E_CERTDB_NO_EMAIL             ((HRESULT)0x80044750L)

//
// MessageId: PP_E_CERTDB_GETCERTSERNO_BAD_PURPOSE
//
// MessageText:
//
//  Bad purpose
//
#define PP_E_CERTDB_GETCERTSERNO_BAD_PURPOSE ((HRESULT)0x80044757L)

//
// MessageId: PP_E_CERTDB_GETCERTSERNO_MEMBERNAME_TOOLONG
//
// MessageText:
//
//  Bad member name size
//
#define PP_E_CERTDB_GETCERTSERNO_MEMBERNAME_TOOLONG ((HRESULT)0x80044758L)

//
// MessageId: PP_E_CERTDB_GETCERTSERNO_ISSUER_TOOLONG
//
// MessageText:
//
//  Bad issuer name size
//
#define PP_E_CERTDB_GETCERTSERNO_ISSUER_TOOLONG ((HRESULT)0x80044759L)

//
// MessageId: PP_E_CERTDB_GETCERTSERNO_SERIALNO_TOOLONG
//
// MessageText:
//
//  Bad serial number size
//
#define PP_E_CERTDB_GETCERTSERNO_SERIALNO_TOOLONG ((HRESULT)0x8004475AL)

//
// MessageId: PP_E_CERTDB_INSERTUPDATE_BAD_MEMBERNAME
//
// MessageText:
//
//  Bad member name
//
#define PP_E_CERTDB_INSERTUPDATE_BAD_MEMBERNAME ((HRESULT)0x80044760L)

//
// MessageId: PP_E_CERTDB_INSERTUPDATE_BAD_PURPOSE
//
// MessageText:
//
//  Bad purpose
//
#define PP_E_CERTDB_INSERTUPDATE_BAD_PURPOSE ((HRESULT)0x80044761L)

//
// MessageId: PP_E_CERTDB_INSERTUPDATE_BAD_STATUS
//
// MessageText:
//
//  Bad status
//
#define PP_E_CERTDB_INSERTUPDATE_BAD_STATUS ((HRESULT)0x80044762L)

//
// MessageId: PP_E_CERTDB_INSERTUPDATE_BAD_NUM_PURPOSES
//
// MessageText:
//
//  Invalid number of purposes
//
#define PP_E_CERTDB_INSERTUPDATE_BAD_NUM_PURPOSES ((HRESULT)0x80044764L)

//
// MessageId: PP_E_CERTDB_INSERTUPDATE_BAD_PURPOSEPTR
//
// MessageText:
//
//  Bad purpose pointer
//
#define PP_E_CERTDB_INSERTUPDATE_BAD_PURPOSEPTR ((HRESULT)0x80044765L)

//
// MessageId: PP_E_CERTDB_INSERTUPDATE_BAD_PRIVATEKEY
//
// MessageText:
//
//  Bad private key
//
#define PP_E_CERTDB_INSERTUPDATE_BAD_PRIVATEKEY ((HRESULT)0x80044766L)

//
// MessageId: PP_E_CERTDB_GETCERT_NOTFOUND
//
// MessageText:
//
//  Certificate not found
//
#define PP_E_CERTDB_GETCERT_NOTFOUND     ((HRESULT)0x80044769L)

//
// MessageId: PP_E_CERTDB_GETCERTSERNO_BAD_MEMBERNAME
//
// MessageText:
//
//  Bad membername
//
#define PP_E_CERTDB_GETCERTSERNO_BAD_MEMBERNAME ((HRESULT)0x8004476BL)

//
// MessageId: PP_E_CERTDB_INVALID_EMAIL
//
// MessageText:
//
//  Invalid email address
//
#define PP_E_CERTDB_INVALID_EMAIL        ((HRESULT)0x8004476EL)

//
// MessageId: PP_E_DBCERT_NO_CERTBLOB
//
// MessageText:
//
//  Bad encoded certificate pointer
//
#define PP_E_DBCERT_NO_CERTBLOB          ((HRESULT)0x80044773L)

//
// MessageId: PP_E_DBCERT_NO_PRIVATEKEY
//
// MessageText:
//
//  Bad private key pointer
//
#define PP_E_DBCERT_NO_PRIVATEKEY        ((HRESULT)0x80044777L)

//
// MessageId: PP_E_DBCERT_MEMBERNAME_LONG
//
// MessageText:
//
//  Bad member name size 
//
#define PP_E_DBCERT_MEMBERNAME_LONG      ((HRESULT)0x8004477EL)

//
// MessageId: PP_E_DBCERT_ISSUER_LONG
//
// MessageText:
//
//  Bad issuer name size
//
#define PP_E_DBCERT_ISSUER_LONG          ((HRESULT)0x8004477FL)

//
// MessageId: PP_E_DBCERT_SUBJECT_LONG
//
// MessageText:
//
//  Bad subject name size
//
#define PP_E_DBCERT_SUBJECT_LONG         ((HRESULT)0x80044780L)

//
// MessageId: PP_E_DBCERT_SERIALNO_LONG
//
// MessageText:
//
//  Bad serial number size
//
#define PP_E_DBCERT_SERIALNO_LONG        ((HRESULT)0x80044781L)

//
// MessageId: PP_E_DBCERT_PRIVATEKEY_LONG
//
// MessageText:
//
//  Bad private key size
//
#define PP_E_DBCERT_PRIVATEKEY_LONG      ((HRESULT)0x80044782L)

//
// MessageId: PP_E_DBCERT_NO_CERTPURPOSES
//
// MessageText:
//
//  Invalid certificate purpose
//
#define PP_E_DBCERT_NO_CERTPURPOSES      ((HRESULT)0x80044783L)

//
// MessageId: PP_E_DBCERT_INVALIDPURPOSES
//
// MessageText:
//
//  Invalid certificate purpose
//
#define PP_E_DBCERT_INVALIDPURPOSES      ((HRESULT)0x80044784L)

//
// MessageId: PP_E_CERTDB_CERTPRESENT_BADPURPOSE
//
// MessageText:
//
//  Bad certificate purpose
//
#define PP_E_CERTDB_CERTPRESENT_BADPURPOSE ((HRESULT)0x80044785L)

//
// MessageId: PP_E_CERT_NULL_CONTEXT
//
// MessageText:
//
//  Bad certificate context
//
#define PP_E_CERT_NULL_CONTEXT           ((HRESULT)0x80044786L)

//
// MessageId: PP_E_CERT_BAD_CERTBLOB
//
// MessageText:
//
//  Bad certificate blob
//
#define PP_E_CERT_BAD_CERTBLOB           ((HRESULT)0x80044787L)

//
// MessageId: PP_E_CERT_BAD_CONTEXT
//
// MessageText:
//
//  Bad certificate context
//
#define PP_E_CERT_BAD_CONTEXT            ((HRESULT)0x80044789L)

//
// MessageId: PP_E_DBCERT_BAD_CONTEXT
//
// MessageText:
//
//  Bad certificate context
//
#define PP_E_DBCERT_BAD_CONTEXT          ((HRESULT)0x8004478AL)

//
// MessageId: PP_CERTDIRDB_NO_PPSTS
//
// MessageText:
//
//  Failed to find a certificate
//
#define PP_CERTDIRDB_NO_PPSTS            ((HRESULT)0x8004478CL)

//
// MessageId: PP_E_CERT_BASE64X509_LENGTH
//
// MessageText:
//
//  Invalid x509 length
//
#define PP_E_CERT_BASE64X509_LENGTH      ((HRESULT)0x8004478FL)

//
// MessageId: PP_E_CERT_BASE64X509_LENGTH2
//
// MessageText:
//
//  Invalid x509 length
//
#define PP_E_CERT_BASE64X509_LENGTH2     ((HRESULT)0x80044790L)

//
// MessageId: PP_E_DBCERT_MAXNUMCERT_REACHED
//
// MessageText:
//
//  Maximum number ofcertificates is reached
//
#define PP_E_DBCERT_MAXNUMCERT_REACHED   ((HRESULT)0x80044791L)

//
// MessageId: PP_E_CERTDB_CERTPRESENT_NULLCERT
//
// MessageText:
//
//  Invalid certificate
//
#define PP_E_CERTDB_CERTPRESENT_NULLCERT ((HRESULT)0x80044796L)

//
// MessageId: PP_E_RAAPI_CERT_BAD_PURPOSES
//
// MessageText:
//
//  Invalid bits for cert purpose
//
#define PP_E_RAAPI_CERT_BAD_PURPOSES     ((HRESULT)0x800447A7L)

//
// MessageId: PP_E_RAAPI_CERT_NOT_YET_VALID
//
// MessageText:
//
//  Certificate is not valid yet
//
#define PP_E_RAAPI_CERT_NOT_YET_VALID    ((HRESULT)0x800447A9L)

//
// MessageId: PP_E_RAAPI_CERT_EXPIRED
//
// MessageText:
//
//  Certificate has expired
//
#define PP_E_RAAPI_CERT_EXPIRED          ((HRESULT)0x800447AAL)

//
// MessageId: PP_E_RAAPI_CERT_BAD_ENC_KEYUSAGE
//
// MessageText:
//
//  Certificate does not have encryption key usage
//
#define PP_E_RAAPI_CERT_BAD_ENC_KEYUSAGE ((HRESULT)0x800447ACL)

//
// MessageId: PP_E_RAAPI_CERT_BAD_SIGN_KEYUSAGE
//
// MessageText:
//
//  Certificate does not have signature key usage
//
#define PP_E_RAAPI_CERT_BAD_SIGN_KEYUSAGE ((HRESULT)0x800447ADL)

//
// MessageId: PP_E_RAAPI_CA_NOT_AVAILABLE
//
// MessageText:
//
//  The CA cannot be found
//
#define PP_E_RAAPI_CA_NOT_AVAILABLE      ((HRESULT)0x800447B0L)

//
// MessageId: PP_E_RAAPI_GETCERT_EXPIRED
//
// MessageText:
//
//  Certificate is expired and not auto extendible
//
#define PP_E_RAAPI_GETCERT_EXPIRED       ((HRESULT)0x800447B4L)

//
// MessageId: PP_E_CERT_GET_ISSUER_BADARG
//
// MessageText:
//
//  Invalid issuer name
//
#define PP_E_CERT_GET_ISSUER_BADARG      ((HRESULT)0x800447C0L)

//
// MessageId: PP_E_CERT_GET_ISSUER_BAD
//
// MessageText:
//
//  Bad issuer name
//
#define PP_E_CERT_GET_ISSUER_BAD         ((HRESULT)0x800447C1L)

//
// MessageId: PP_E_CERT_GETCERTNAME_BAD_CONTEXT
//
// MessageText:
//
//  Bad certificate context
//
#define PP_E_CERT_GETCERTNAME_BAD_CONTEXT ((HRESULT)0x800447C2L)

//
// MessageId: PP_E_CERT_GETCERTNAME_BAD_NAMETYPE
//
// MessageText:
//
//  Email missing
//
#define PP_E_CERT_GETCERTNAME_BAD_NAMETYPE ((HRESULT)0x800447C3L)

//
// MessageId: PP_E_CERT_GETCERTNAME_BAD_NAMETYPE_2
//
// MessageText:
//
//  Bad name type
//
#define PP_E_CERT_GETCERTNAME_BAD_NAMETYPE_2 ((HRESULT)0x800447C4L)

//
// MessageId: PP_E_CERT_GETCERTNAME_BAD_NAMETYPE_3
//
// MessageText:
//
//  Bad name type
//
#define PP_E_CERT_GETCERTNAME_BAD_NAMETYPE_3 ((HRESULT)0x800447C5L)

//
// MessageId: PP_E_CERT_GET_SUBJECT_BADARG
//
// MessageText:
//
//  Bad argument
//
#define PP_E_CERT_GET_SUBJECT_BADARG     ((HRESULT)0x800447C6L)

//
// MessageId: PP_E_CERT_GET_SUBJECT_BAD
//
// MessageText:
//
//  Bad subject
//
#define PP_E_CERT_GET_SUBJECT_BAD        ((HRESULT)0x800447C7L)

//
// MessageId: PP_E_CERT_GET_SERIALNO_BADARG
//
// MessageText:
//
//  Bad argument
//
#define PP_E_CERT_GET_SERIALNO_BADARG    ((HRESULT)0x800447C8L)

//
// MessageId: PP_E_CERT_GET_SERIALNO_BAD
//
// MessageText:
//
//  Bad serial number
//
#define PP_E_CERT_GET_SERIALNO_BAD       ((HRESULT)0x800447C9L)

//
// MessageId: PP_E_CERT_GET_CERTBLOB_BAD_COUNTPTR
//
// MessageText:
//
//  Null byte count pointer
//
#define PP_E_CERT_GET_CERTBLOB_BAD_COUNTPTR ((HRESULT)0x800447CAL)

//
// MessageId: PP_E_CERT_GET_CERTBLOB_BAD_BYTEPTR
//
// MessageText:
//
//  Null byte count pointer
//
#define PP_E_CERT_GET_CERTBLOB_BAD_BYTEPTR ((HRESULT)0x800447CBL)

//
// MessageId: PP_E_CERT_GET_THUMBPRINT_NOTINIT
//
// MessageText:
//
//  Certificate object not properly initialized
//
#define PP_E_CERT_GET_THUMBPRINT_NOTINIT ((HRESULT)0x800447CCL)

//
// MessageId: PP_E_CERT_GET_KEYUSAGE_NOTINIT
//
// MessageText:
//
//  Certificate object not properly initialized
//
#define PP_E_CERT_GET_KEYUSAGE_NOTINIT   ((HRESULT)0x800447CDL)

//
// MessageId: PP_E_CERT_GET_NOTBEFORE_BAD
//
// MessageText:
//
//  Invalid not before time
//
#define PP_E_CERT_GET_NOTBEFORE_BAD      ((HRESULT)0x800447CEL)

//
// MessageId: PP_E_CERT_BAD_HASHLENGTH
//
// MessageText:
//
//  Bad certificate thumbprint length
//
#define PP_E_CERT_BAD_HASHLENGTH         ((HRESULT)0x800447CFL)

//
// MessageId: PP_E_CERT_GET_NOTAFTER_BAD
//
// MessageText:
//
//  Bad not after time
//
#define PP_E_CERT_GET_NOTAFTER_BAD       ((HRESULT)0x800447D0L)

//
// MessageId: PP_E_CERT_GET_ENCODINGTYPE_BAD
//
// MessageText:
//
//  Bad encoding type
//
#define PP_E_CERT_GET_ENCODINGTYPE_BAD   ((HRESULT)0x800447D2L)

//
// MessageId: PP_E_CERT_GET_CERTBLOB_NOTFOUND
//
// MessageText:
//
//  Certificate blob not found
//
#define PP_E_CERT_GET_CERTBLOB_NOTFOUND  ((HRESULT)0x800447D3L)

//
// MessageId: PP_E_CERT_GET_EMAIL_BADARG
//
// MessageText:
//
//  Invalid email address argument
//
#define PP_E_CERT_GET_EMAIL_BADARG       ((HRESULT)0x800447D4L)

//
// MessageId: PP_E_CERT_GET_EMAIL_BAD
//
// MessageText:
//
//  Bad email address
//
#define PP_E_CERT_GET_EMAIL_BAD          ((HRESULT)0x800447D5L)

//
// MessageId: PP_E_CERT_GET_NAMESTRING_NOTFOUND
//
// MessageText:
//
//  Certificate object not initialized properly
//
#define PP_E_CERT_GET_NAMESTRING_NOTFOUND ((HRESULT)0x800447D6L)

//
// MessageId: PP_E_CERT_GET_NAMESTRING_BAD
//
// MessageText:
//
//  Bad name string
//
#define PP_E_CERT_GET_NAMESTRING_BAD     ((HRESULT)0x800447D7L)

//
// MessageId: PP_E_CERT_GET_PKI_BADARG
//
// MessageText:
//
//  Bad public key argument
//
#define PP_E_CERT_GET_PKI_BADARG         ((HRESULT)0x800447D8L)

//
// MessageId: PP_E_CERT_GET_PKI_NOTFOUND
//
// MessageText:
//
//  Certificate object not initialized properly
//
#define PP_E_CERT_GET_PKI_NOTFOUND       ((HRESULT)0x800447D9L)

//
// MessageId: PP_E_CERT_GET_PKI_BAD
//
// MessageText:
//
//  Bad public key
//
#define PP_E_CERT_GET_PKI_BAD            ((HRESULT)0x800447DAL)

//
// MessageId: PP_E_RAAPI_CERT_BAD_CERTINFO2
//
// MessageText:
//
//  Certificate object not initialized properly
//
#define PP_E_RAAPI_CERT_BAD_CERTINFO2    ((HRESULT)0x800447DBL)

//
// MessageId: PP_E_CERT_ISCA_NOTFOUND
//
// MessageText:
//
//  Certificate object not initialized properly
//
#define PP_E_CERT_ISCA_NOTFOUND          ((HRESULT)0x800447DCL)

//
// MessageId: PP_E_CERT_ISCA_BAD_EXT
//
// MessageText:
//
//  Certificate extensions missing
//
#define PP_E_CERT_ISCA_BAD_EXT           ((HRESULT)0x800447DDL)

//
// MessageId: PP_E_CERT_ISCA_NOEXT
//
// MessageText:
//
//  Basic constraints missing
//
#define PP_E_CERT_ISCA_NOEXT             ((HRESULT)0x800447DEL)

//
// MessageId: PP_E_CERT_ISCA_BAD_DECODE
//
// MessageText:
//
//  Can not decrypt extensions
//
#define PP_E_CERT_ISCA_BAD_DECODE        ((HRESULT)0x800447E0L)

//
// MessageId: PP_E_CERT_ISCA_NOTCA
//
// MessageText:
//
//  Invalid CA
//
#define PP_E_CERT_ISCA_NOTCA             ((HRESULT)0x800447E1L)

//
// MessageId: PP_E_CERT_GETEXT_BADARG
//
// MessageText:
//
//  Invalid extensions parameter
//
#define PP_E_CERT_GETEXT_BADARG          ((HRESULT)0x800447E2L)

//
// MessageId: PP_E_CERT_GETEXT_TOOMANY_EXTENSIONS
//
// MessageText:
//
//  Invalid number of extensions
//
#define PP_E_CERT_GETEXT_TOOMANY_EXTENSIONS ((HRESULT)0x800447E3L)

//
// MessageId: PP_E_CERT_GETEXT_BAD_EXTENSION
//
// MessageText:
//
//  Bad extension
//
#define PP_E_CERT_GETEXT_BAD_EXTENSION   ((HRESULT)0x800447E4L)

//
// MessageId: PP_E_CERT_GETEXT_NOTFOUND
//
// MessageText:
//
//  Extension not found
//
#define PP_E_CERT_GETEXT_NOTFOUND        ((HRESULT)0x800447E5L)

//
// MessageId: PP_E_PKCS10_DECODE
//
// MessageText:
//
//  The CERT_REQUEST_INFO is invalid after decoding the PKCS-10 blob.
//
#define PP_E_PKCS10_DECODE               ((HRESULT)0x800447E6L)

//
// MessageId: PP_E_NOT_FOUND
//
// MessageText:
//
//  A CERT_EXTENSION or attribute is not found based on the OID.
//
#define PP_E_NOT_FOUND                   ((HRESULT)0x800447E7L)

//
// MessageId: PP_E_CERT_GETKI_BADLENGTH
//
// MessageText:
//
//  Invalid key identifier length
//
#define PP_E_CERT_GETKI_BADLENGTH        ((HRESULT)0x800447E8L)

//
// MessageId: PP_E_CERTDIRDB_BADSKI
//
// MessageText:
//
//  Invalid subject key identifier length is specified.
//
#define PP_E_CERTDIRDB_BADSKI            ((HRESULT)0x800447E9L)

//
// MessageId: PP_E_CERTDIRDB_HEXDECODE
//
// MessageText:
//
//  Hex decoding specified subject key identifier length failed.
//
#define PP_E_CERTDIRDB_HEXDECODE         ((HRESULT)0x800447EAL)

//
// MessageId: PP_E_RA_BAD_AUTHTIME
//
// MessageText:
//
//  Failed to convert to system time
//
#define PP_E_RA_BAD_AUTHTIME             ((HRESULT)0x800447FEL)

//
// MessageId: PP_E_PKI_NONUNIQUE_CERT
//
// MessageText:
//
//  More than one certificates match the criteria
//
#define PP_E_PKI_NONUNIQUE_CERT          ((HRESULT)0x800447FFL)

// base 0x4800
// Errors
//#define PP_E_CERTPOLICY_BASE  0x4800
//
// MessageId: PP_E_CERTPOLICY_USE_DEFAULT
//
// MessageText:
//
//  The base policy is telling the application policy that it is willing to let the Registration or Certificate authority core to handle this policy.
//
#define PP_E_CERTPOLICY_USE_DEFAULT      ((HRESULT)0x80044800L)

//
// MessageId: PP_E_CA_POLICYCOMMON_BADHASH
//
// MessageText:
//
//  The computed hash for the certificate serial number is bad.
//
#define PP_E_CA_POLICYCOMMON_BADHASH     ((HRESULT)0x80044801L)

//
// MessageId: PP_E_CA_POLICYCOMMON_UNSUPPORTED_PUBALGID
//
// MessageText:
//
//  The algorithm for the public key is not supported. Passport 3.0 Certificate Authority only supports RSA.
//
#define PP_E_CA_POLICYCOMMON_UNSUPPORTED_PUBALGID ((HRESULT)0x80044802L)

//
// MessageId: PP_E_CA_POLICYCOMMON_INVALID_KEYLENGTH
//
// MessageText:
//
//  The key length for the public key is not within the allowed range.
//
#define PP_E_CA_POLICYCOMMON_INVALID_KEYLENGTH ((HRESULT)0x80044803L)

//
// MessageId: PP_E_CA_FAIL_CREATECERTEXT
//
// MessageText:
//
//  The CA policy failed to create certificate extension for signing.
//
#define PP_E_CA_FAIL_CREATECERTEXT       ((HRESULT)0x80044804L)

//
// MessageId: PP_E_CA_ZERO_CERTENCODE_LENGTH
//
// MessageText:
//
//  CryptSignAndEncodeCertificate returned 0 bytes for encoded certificate length.
//
#define PP_E_CA_ZERO_CERTENCODE_LENGTH   ((HRESULT)0x80044805L)

//
// MessageId: PP_E_STDCERTPOLICY_INIT_BAD_CONFIG
//
// MessageText:
//
//  The standard certificate policy detected a bad path to a configuration file.
//
#define PP_E_STDCERTPOLICY_INIT_BAD_CONFIG ((HRESULT)0x80044806L)

//
// MessageId: PP_E_CA_CERTPOLICY_INIT_BAD_CONFIG
//
// MessageText:
//
//  The CA certificate policy detected a bad path to a configuration file.
//
#define PP_E_CA_CERTPOLICY_INIT_BAD_CONFIG ((HRESULT)0x80044807L)

//
// MessageId: PP_E_RA_CERTPOLICY_INIT_BAD_CONFIG
//
// MessageText:
//
//  The RA certificate policy detected a bad path to a configuration file.
//
#define PP_E_RA_CERTPOLICY_INIT_BAD_CONFIG ((HRESULT)0x80044808L)

//
// MessageId: PP_E_CA_KEYUSAGE_ZEROENCODE
//
// MessageText:
//
//  The certificate policy was returned a 0 byte length during key usage encoding.
//
#define PP_E_CA_KEYUSAGE_ZEROENCODE      ((HRESULT)0x80044809L)

//
// MessageId: PP_E_CA_SETCPS_ZEROENCODE
//
// MessageText:
//
//  The certificate policy was returned a 0 byte length during the certificate policy qualifier CPS encoding.
//
#define PP_E_CA_SETCPS_ZEROENCODE        ((HRESULT)0x8004480AL)

//
// MessageId: PP_E_CA_SETUSERNOTICE_ZEROENCODE
//
// MessageText:
//
//  The certificate policy was returned a 0 byte length during the certificate policy qualifier User Notice encoding.
//
#define PP_E_CA_SETUSERNOTICE_ZEROENCODE ((HRESULT)0x8004480BL)

//
// MessageId: PP_E_CA_GETCA_NULLCERTINFO
//
// MessageText:
//
//  The certificate policy was returned a 0 byte length for the cert_info by Crypto API for the certificate.
//
#define PP_E_CA_GETCA_NULLCERTINFO       ((HRESULT)0x8004480CL)

//
// MessageId: PP_E_CA_AKI2_ZEROENCODE
//
// MessageText:
//
//  The certificate policy was returned a 0 byte length during CryptHashPublicKeyInfo while creating the Authority Key Identifier2.
//
#define PP_E_CA_AKI2_ZEROENCODE          ((HRESULT)0x8004480DL)

//
// MessageId: PP_E_CA_SKI_ZEROENCODE
//
// MessageText:
//
//  The certificate policy was returned a 0 byte length during CryptHashPublicKeyInfo while creating the Subject Key Identifier.
//
#define PP_E_CA_SKI_ZEROENCODE           ((HRESULT)0x8004480EL)

//
// MessageId: PP_E_CA_POLICY_BADCONFIG_DEFAULTLIFE
//
// MessageText:
//
//  The certificate policy read an invalid value for the default certificate life in years.
//
#define PP_E_CA_POLICY_BADCONFIG_DEFAULTLIFE ((HRESULT)0x8004480FL)

//
// MessageId: PP_E_CA_POLICY_GETCA_NULLCERTINFO
//
// MessageText:
//
//  The certificate policy module was returned a NULL cert_info by the Crypto API.
//
#define PP_E_CA_POLICY_GETCA_NULLCERTINFO ((HRESULT)0x80044810L)

//
// MessageId: PP_E_CA_GENSUBJECT_ZEROENCODE
//
// MessageText:
//
//  The certificate policy module was returned a 0 length encoded subject while creating the subject.
//
#define PP_E_CA_GENSUBJECT_ZEROENCODE    ((HRESULT)0x80044811L)

// base 0x4900
//policy engine error code
//#define  PP_E_PE_BASE                       0x4900
//
// MessageId: PP_E_PE_NOCOMMAND
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_NOCOMMAND                ((HRESULT)0x80044900L)

//
// MessageId: PP_E_PE_NOACTION
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_NOACTION                 ((HRESULT)0x80044901L)

//
// MessageId: PP_E_PE_INVALIDRULE
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_INVALIDRULE              ((HRESULT)0x80044902L)

//
// MessageId: PP_E_PE_BADPOLICY
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_BADPOLICY                ((HRESULT)0x80044903L)

//
// MessageId: PP_E_PE_INVALIDINPUT_COUNT
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_INVALIDINPUT_COUNT       ((HRESULT)0x80044904L)

//
// MessageId: PP_E_PE_INVALIDPOLICYINFO
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_INVALIDPOLICYINFO        ((HRESULT)0x80044905L)

//
// MessageId: PP_E_PE_INVALIDINPUT_PIPE
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_INVALIDINPUT_PIPE        ((HRESULT)0x80044906L)

//
// MessageId: PP_E_PE_TOOMANYINPUTS
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_TOOMANYINPUTS            ((HRESULT)0x80044907L)

//
// MessageId: PP_E_PE_INVALIDPREDICATEINDEX
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_INVALIDPREDICATEINDEX    ((HRESULT)0x80044908L)

//
// MessageId: PP_E_PE_RULESTACKOVERFLOW
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_RULESTACKOVERFLOW        ((HRESULT)0x80044909L)

//
// MessageId: PP_E_PE_RULESTACKUNDERFLOW
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_RULESTACKUNDERFLOW       ((HRESULT)0x8004490AL)

//
// MessageId: PP_E_PE_INVALIDRULESYNTAX
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_INVALIDRULESYNTAX        ((HRESULT)0x8004490BL)

//
// MessageId: PP_E_PE_RULEFALSE
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_RULEFALSE                ((HRESULT)0x8004490CL)

//
// MessageId: PP_E_PE_DLLHASNOINITFUNC
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_DLLHASNOINITFUNC         ((HRESULT)0x8004490DL)

//
// MessageId: PP_E_PE_DLLHASNOSHUTDOWNFUNC
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_DLLHASNOSHUTDOWNFUNC     ((HRESULT)0x8004490EL)

//
// MessageId: PP_E_PE_DLLHASNOINVOKEFUNC
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_DLLHASNOINVOKEFUNC       ((HRESULT)0x8004490FL)

//
// MessageId: PP_E_PE_DLLNOTLOADED
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_DLLNOTLOADED             ((HRESULT)0x80044910L)

//
// MessageId: PP_E_PE_INVALIDCONSTANTTYPE
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_INVALIDCONSTANTTYPE      ((HRESULT)0x80044911L)

//
// MessageId: PP_E_PE_DUPLICATEPOLICY
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_DUPLICATEPOLICY          ((HRESULT)0x80044912L)

//
// MessageId: PP_E_PE_NOPOLICY
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_NOPOLICY                 ((HRESULT)0x80044913L)

//
// MessageId: PP_E_PE_NOPREDICATE
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_NOPREDICATE              ((HRESULT)0x80044914L)

//
// MessageId: PP_E_PE_TYPEMISMATCH
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_TYPEMISMATCH             ((HRESULT)0x80044915L)

//
// MessageId: PP_E_PE_MODIFYROWSETCOLUMN
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_MODIFYROWSETCOLUMN       ((HRESULT)0x80044916L)

//
// MessageId: PP_E_PE_REQUIREDPROPSNOTPRESENT
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_REQUIREDPROPSNOTPRESENT  ((HRESULT)0x80044917L)

//
// MessageId: PP_E_PE_TOOMANYACTIONS
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_TOOMANYACTIONS           ((HRESULT)0x80044918L)

//
// MessageId: PP_E_PE_POLICYASACTIONALREADYSET
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_POLICYASACTIONALREADYSET ((HRESULT)0x80044919L)

//
// MessageId: PP_E_PE_POLICYNOTBSTR
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_POLICYNOTBSTR            ((HRESULT)0x8004491AL)

//
// MessageId: PP_E_PE_EMPTYPOLICY
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_EMPTYPOLICY              ((HRESULT)0x8004491BL)

// base 0x4d00
// Errors
#define PP_E_CHECKCRL_BASE  0x4d00
//
// MessageId: PP_E_CHECKCRL_EARLY_THAN_NOTBEFORE
//
// MessageText:
//
//  Revocation checking has detected that the certificate has expired.
//
#define PP_E_CHECKCRL_EARLY_THAN_NOTBEFORE ((HRESULT)0x80044D00L)

//
// MessageId: PP_E_CHECKCRL_LATER_THAN_NOTAFTER
//
// MessageText:
//
//  Revocation checking has detected that the certificate is only valid in the future.
//
#define PP_E_CHECKCRL_LATER_THAN_NOTAFTER ((HRESULT)0x80044D01L)

//
// MessageId: PP_E_CHECKCRL_NO_CDP
//
// MessageText:
//
//  The CRL agent could not retrieve the CRL because the CDP is missing from the certificate.
//
#define PP_E_CHECKCRL_NO_CDP             ((HRESULT)0x80044D02L)

//
// MessageId: PP_E_CHECKCRL_CANNOT_GET_CRL
//
// MessageText:
//
//  The CRL agent failed to retrieve the full CRL.
//
#define PP_E_CHECKCRL_CANNOT_GET_CRL     ((HRESULT)0x80044D03L)

//
// MessageId: PP_E_CHECKCRL_CANNOT_GET_DELTA_CRL
//
// MessageText:
//
//  The CRL agent failed to retrive the delta CRL.
//
#define PP_E_CHECKCRL_CANNOT_GET_DELTA_CRL ((HRESULT)0x80044D04L)

//
// MessageId: PP_E_CHECKCRL_CANNOT_GET_LATEST_CRL
//
// MessageText:
//
//  Failed to fetch the latest CRL from the CCM.
//
#define PP_E_CHECKCRL_CANNOT_GET_LATEST_CRL ((HRESULT)0x80044D05L)

//
// MessageId: PP_E_CHECKCRL_CERT_REVOKED
//
// MessageText:
//
//  The certificate is revoked.
//
#define PP_E_CHECKCRL_CERT_REVOKED       ((HRESULT)0x80044D0AL)

//
// MessageId: PP_E_CHECKCRL_INVALID_ENCODING
//
// MessageText:
//
//  The revocation checker was called with a bad encoding. It should be ASN.1.
//
#define PP_E_CHECKCRL_INVALID_ENCODING   ((HRESULT)0x80044D0BL)

//
// MessageId: PP_E_CHECKCRL_INVALID_REVTYPE
//
// MessageText:
//
//  The revocation checker is called with an invalid revocation type.
//
#define PP_E_CHECKCRL_INVALID_REVTYPE    ((HRESULT)0x80044D0CL)

//
// MessageId: PP_E_CHECKCRL_NO_CONTEXT
//
// MessageText:
//
//  The revocation checker is called without any certificate context.
//
#define PP_E_CHECKCRL_NO_CONTEXT         ((HRESULT)0x80044D0DL)

//
// MessageId: PP_E_CHECKCRL_NO_REVSTATUS
//
// MessageText:
//
//  The revocation checker is called without a CERTIFICATE_REVOCATION_STATUS structure.
//
#define PP_E_CHECKCRL_NO_REVSTATUS       ((HRESULT)0x80044D0EL)

//
// MessageId: PP_E_CHECKCRL_INVALID_ISSUER_NOBCE
//
// MessageText:
//
//  The revocation checker did not find the Basic Constraint extension while checking a CA certificate.
//
#define PP_E_CHECKCRL_INVALID_ISSUER_NOBCE ((HRESULT)0x80044D0FL)

//
// MessageId: PP_E_CHECKCRL_INVALID_ISSUER_BADBCE
//
// MessageText:
//
//  The revocation checker found a bad value for the Basic Constraint extension while checking a CA certificate.
//
#define PP_E_CHECKCRL_INVALID_ISSUER_BADBCE ((HRESULT)0x80044D10L)

//
// MessageId: PP_E_CHECKCRL_INVALID_ISSUER_BADBCE_PATH
//
// MessageText:
//
//  The revocation checker has found a bad value for the Path Length constraint in either a issuer or subject certificate.
//
#define PP_E_CHECKCRL_INVALID_ISSUER_BADBCE_PATH ((HRESULT)0x80044D11L)

//
// MessageId: PP_E_CHECKCRL_CRLAGENT_NOT_INIT
//
// MessageText:
//
//  The CRL agent was called without proper initialization; the subject certificate was not set.
//
#define PP_E_CHECKCRL_CRLAGENT_NOT_INIT  ((HRESULT)0x80044D13L)

//
// MessageId: PP_E_CHECKCRL_UNSUPPORTED_CRITICAL_EXT
//
// MessageText:
//
//  The CRL agent has detected a CRL that has critical extension that Passport does not support.
//
#define PP_E_CHECKCRL_UNSUPPORTED_CRITICAL_EXT ((HRESULT)0x80044D14L)

//
// MessageId: PP_E_CHECKCRL_BASECRL_FAILED_TIMECHECK
//
// MessageText:
//
//  The CRL agent has found a CRL that is no longer valid.
//
#define PP_E_CHECKCRL_BASECRL_FAILED_TIMECHECK ((HRESULT)0x80044D15L)

//
// MessageId: PP_E_CHECKCRL_BASECRL_NUMBER_ERROR
//
// MessageText:
//
//  The base CRL number is missing.
//
#define PP_E_CHECKCRL_BASECRL_NUMBER_ERROR ((HRESULT)0x80044D17L)

//
// MessageId: PP_E_CHECKCRL_DELTACRL_INDICATOREXT_ERROR
//
// MessageText:
//
//  The delta CRL indicator is missing.
//
#define PP_E_CHECKCRL_DELTACRL_INDICATOREXT_ERROR ((HRESULT)0x80044D18L)

//
// MessageId: PP_E_CHECKCRL_DELTACRL_INDICATOR_ERROR
//
// MessageText:
//
//  The delta CRL indicator is invalid.
//
#define PP_E_CHECKCRL_DELTACRL_INDICATOR_ERROR ((HRESULT)0x80044D19L)

//
// MessageId: PP_E_CHECKCRL_CANNOT_FIND_ISSUER
//
// MessageText:
//
//  The CRL does not have the issuer field.
//
#define PP_E_CHECKCRL_CANNOT_FIND_ISSUER ((HRESULT)0x80044D1BL)

//
// MessageId: PP_E_POPUPATECA_ALREADY_INITED
//
// MessageText:
//
//  The PPAdmin service component to populate root CA certificates is already initialized.
//
#define PP_E_POPUPATECA_ALREADY_INITED   ((HRESULT)0x80044D30L)

//
// MessageId: PP_E_POPUPATECA_NOT_INITED
//
// MessageText:
//
//  The PPAdmin service component to populate root CA certificates is not initialized.
//
#define PP_E_POPUPATECA_NOT_INITED       ((HRESULT)0x80044D31L)

//
// MessageId: PP_E_POPUPATECA_FAILED
//
// MessageText:
//
//  The PPAdmin service component to populate root CA certificates failed to populate one or more certificates.
//
#define PP_E_POPUPATECA_FAILED           ((HRESULT)0x80044D32L)

// base 0x4e01
//
// MessageId: PP_E_CDP_NOTFOUND_IN_DB
//
// MessageText:
//
//  Can not find CDP in the DB.
//
#define PP_E_CDP_NOTFOUND_IN_DB          ((HRESULT)0x80044E01L)

//
// MessageId: PP_E_CRL_NOTFOUND_IN_DB
//
// MessageText:
//
//  The CRL Blob for the CDP is not present in the CCM DB.
//
#define PP_E_CRL_NOTFOUND_IN_DB          ((HRESULT)0x80044E02L)

//
// MessageId: PP_E__BLOB_TOO_LARGE
//
// MessageText:
//
//  Data blob passed is lager than maximun supported by this instance.
//
#define PP_E__BLOB_TOO_LARGE             ((HRESULT)0x80044E03L)

//
// MessageId: PP_E_CRL_BLOB_TOO_LARGE
//
// MessageText:
//
//  CRL blob larger than maximum supported limit (Currently defined as 64K).
//
#define PP_E_CRL_BLOB_TOO_LARGE          ((HRESULT)0x80044E04L)

//
// MessageId: PP_E_CDP_WITHNO_KEY
//
// MessageText:
//
//  Failed to get CDP key in the CDP.
//
#define PP_E_CDP_WITHNO_KEY              ((HRESULT)0x80044E05L)

//
// MessageId: PP_E_CDP_INIT_CDPINFO_ZERO
//
// MessageText:
//
//  CDP is blank.
//
#define PP_E_CDP_INIT_CDPINFO_ZERO       ((HRESULT)0x80044E07L)

//
// MessageId: PP_E_CERTPROV_ADDCDP_INVALID_ARG
//
// MessageText:
//
//  Invalid parameter passed to Add CRL blob function.
//
#define PP_E_CERTPROV_ADDCDP_INVALID_ARG ((HRESULT)0x80044E08L)

//
// MessageId: PP_E_CERTPROV_ADDCDP_NOKEY
//
// MessageText:
//
//  Failed to get CDP key in the CDP.
//
#define PP_E_CERTPROV_ADDCDP_NOKEY       ((HRESULT)0x80044E09L)

//
// MessageId: PP_E_CERTPROV_ADDCDP_ISSUER_LONG
//
// MessageText:
//
//  Issuer name is longer than supported (Currently defined as 512 chars).
//
#define PP_E_CERTPROV_ADDCDP_ISSUER_LONG ((HRESULT)0x80044E0AL)

//
// MessageId: PP_E_CDP_NO_CCMCACHE_POINTER
//
// MessageText:
//
//  CCM Pointer is null while fetching CRL from CCM.
//
#define PP_E_CDP_NO_CCMCACHE_POINTER     ((HRESULT)0x80044E10L)

// base 0x4f00
//
// MessageId: PP_E_MSNT_TAGINX_OUTOFBOUND
//
// MessageText:
//
//  TraceTag index is out of legal range.
//
#define PP_E_MSNT_TAGINX_OUTOFBOUND      ((HRESULT)0x80044F05L)

//
// MessageId: PP_E_MSNT_PID_NOTPRESENT
//
// MessageText:
//
//  Process with this ID is not present in shared memory.
//
#define PP_E_MSNT_PID_NOTPRESENT         ((HRESULT)0x80044F06L)

//
// MessageId: PP_E_MSNT_TRACE_DISABLED
//
// MessageText:
//
//  Trace is not currently active.
//
#define PP_E_MSNT_TRACE_DISABLED         ((HRESULT)0x80044F08L)

//
// MessageId: PP_E_MSNT_TRACE_NOT_INITIALIZED
//
// MessageText:
//
//  Trace is not initialized.
//
#define PP_E_MSNT_TRACE_NOT_INITIALIZED  ((HRESULT)0x80044F09L)

//
// MessageId: PP_E_MSNT_CRITICAL_ERROR
//
// MessageText:
//
//  There is an unrecoverable error in trace. Most likely shared memory has been corrupted. You need to restart the process you are tracing and the trace controller.
//
#define PP_E_MSNT_CRITICAL_ERROR         ((HRESULT)0x80044F0AL)

// base 0x4f51
//
// MessageId: PP_E_NS_HTTPSESSIONCREATE
//
// MessageText:
//
//  Could not create http session for HTTP notification sender.
//
#define PP_E_NS_HTTPSESSIONCREATE        ((HRESULT)0x80044F51L)

//
// MessageId: PP_E_NS_HTTPCRACKURL
//
// MessageText:
//
//  Could not crack URL in HTTP notification sender.
//
#define PP_E_NS_HTTPCRACKURL             ((HRESULT)0x80044F52L)

//
// MessageId: PP_E_NS_HTTPCONNECT
//
// MessageText:
//
//  Could not create HTTP connection in HTTP notification sender.
//
#define PP_E_NS_HTTPCONNECT              ((HRESULT)0x80044F53L)

//
// MessageId: PP_E_NS_HTTPOPENREQUEST
//
// MessageText:
//
//  Could not open request in HTTP notification sender.
//
#define PP_E_NS_HTTPOPENREQUEST          ((HRESULT)0x80044F54L)

//
// MessageId: PP_E_NS_HTTPSETCREDENTIALS
//
// MessageText:
//
//  Could not set request credentials in HTTP notification sender.
//
#define PP_E_NS_HTTPSETCREDENTIALS       ((HRESULT)0x80044F55L)

//
// MessageId: PP_E_NS_HTTPSENDREQUEST
//
// MessageText:
//
//  Failed to send request in HTTP notification sender.
//
#define PP_E_NS_HTTPSENDREQUEST          ((HRESULT)0x80044F56L)

//
// MessageId: PP_E_NS_HTTPASYNCCREATE
//
// MessageText:
//
//  Not currently used.
//
#define PP_E_NS_HTTPASYNCCREATE          ((HRESULT)0x80044F5BL)

//
// MessageId: PP_E_NS_SHUTDOWNPENDING
//
// MessageText:
//
//  Can not complete the request because service is shutting down.
//
#define PP_E_NS_SHUTDOWNPENDING          ((HRESULT)0x80044F5CL)

//
// MessageId: PP_E_NS_NOTSNDRCREATEFAILED
//
// MessageText:
//
//  Failed to create notification sender object.
//
#define PP_E_NS_NOTSNDRCREATEFAILED      ((HRESULT)0x80044F5EL)

//
// MessageId: PP_E_NS_EXCEEDEDMAX
//
// MessageText:
//
//  There are too many notifications being processed right now.
//
#define PP_E_NS_EXCEEDEDMAX              ((HRESULT)0x80044F62L)

//
// MessageId: PP_E_NS_SUBSCRIBERNAME
//
// MessageText:
//
//  Subscriber name is too long.
//
#define PP_E_NS_SUBSCRIBERNAME           ((HRESULT)0x80044F63L)

//
// MessageId: PP_E_NS_TRANSPORTPARAMS
//
// MessageText:
//
//  Transport parameters are too long.
//
#define PP_E_NS_TRANSPORTPARAMS          ((HRESULT)0x80044F64L)

//
// MessageId: PP_E_NS_PACKETS
//
// MessageText:
//
//  Too many notification packets.
//
#define PP_E_NS_PACKETS                  ((HRESULT)0x80044F65L)

//
// MessageId: PP_E_NS_PACKETSIZE
//
// MessageText:
//
//  Notification packet is too big.
//
#define PP_E_NS_PACKETSIZE               ((HRESULT)0x80044F66L)

//
// MessageId: PP_E_NS_EMPTYNOTIFICATION
//
// MessageText:
//
//  Notification can not be empty.
//
#define PP_E_NS_EMPTYNOTIFICATION        ((HRESULT)0x80044F67L)

//
// MessageId: PP_E_NS_MACHINENAMENOTUNIQUE
//
// MessageText:
//
//  Machine name is multiinstance.
//
#define PP_E_NS_MACHINENAMENOTUNIQUE     ((HRESULT)0x80044F68L)

//
// MessageId: PP_E_NS_MACHINENOTRELATEDTODATACENTER
//
// MessageText:
//
//  Machine is not a part of a datacenter.
//
#define PP_E_NS_MACHINENOTRELATEDTODATACENTER ((HRESULT)0x80044F69L)

//
// MessageId: PP_E_NS_MACHINENOTINDB
//
// MessageText:
//
//  Machine does not exist in CCM.
//
#define PP_E_NS_MACHINENOTINDB           ((HRESULT)0x80044F6BL)

//
// MessageId: PP_E_NOTSVC_PARSER_MISSING_TRANSPORT_ELEMENT
//
// MessageText:
//
//  Transport element with this index does not exist in transport map.
//
#define PP_E_NOTSVC_PARSER_MISSING_TRANSPORT_ELEMENT ((HRESULT)0x80044F71L)

//
// MessageId: PP_E_NOTSVC_PARSER_MISSING_CREDENTIAL_ELEMENT
//
// MessageText:
//
//  Credential element with this index does not exist in credential map.
//
#define PP_E_NOTSVC_PARSER_MISSING_CREDENTIAL_ELEMENT ((HRESULT)0x80044F72L)

//
// MessageId: PP_E_NOTSVC_FAILED_LOAD_XSLT
//
// MessageText:
//
//  Not able to load XSLT for manifest transformation.
//
#define PP_E_NOTSVC_FAILED_LOAD_XSLT     ((HRESULT)0x80044F73L)

//
// MessageId: PP_E_NOTSVC_FAILED_COCREATE_MSXML4
//
// MessageText:
//
//  Could not cocreate MSXML4.
//
#define PP_E_NOTSVC_FAILED_COCREATE_MSXML4 ((HRESULT)0x80044F74L)

//
// MessageId: PP_E_NOTSVC_MISSING_DATACENTER
//
// MessageText:
//
//  Can not retrieve datacenter info from CCM.
//
#define PP_E_NOTSVC_MISSING_DATACENTER   ((HRESULT)0x80044F75L)

//
// MessageId: PP_E_NOTSVC_INVALID_MANIFEST_DATATYPE
//
// MessageText:
//
//  Manifest variant is of invalid datatype.
//
#define PP_E_NOTSVC_INVALID_MANIFEST_DATATYPE ((HRESULT)0x80044F76L)

//
// MessageId: PP_E_NOTSVC_NO_TRIGGER_MANIFEST
//
// MessageText:
//
//  Trigger not found in DB.
//
#define PP_E_NOTSVC_NO_TRIGGER_MANIFEST  ((HRESULT)0x80044F77L)

//
// MessageId: PP_E_NOTSVC_INVALID_MANIFEST_BLOB_TYPE
//
// MessageText:
//
//  Invalid manifest blob type.
//
#define PP_E_NOTSVC_INVALID_MANIFEST_BLOB_TYPE ((HRESULT)0x80044F78L)

// base 0x5000
//------------------------------------------------------------------------------
// Authorization error codes
//------------------------------------------------------------------------------
#define PP_E_AZ_BASE       0x5000
//
// MessageId: PP_E_AZ_RESOURCEINDEX_INVALID
//
// MessageText:
//
//  Internal Error: Resource index is invalid
//
#define PP_E_AZ_RESOURCEINDEX_INVALID    ((HRESULT)0x80045000L)

//
// MessageId: PP_E_AZ_PROPPAIRINDEX_INVALID
//
// MessageText:
//
//  Internal Error: Property pair index is invalid
//
#define PP_E_AZ_PROPPAIRINDEX_INVALID    ((HRESULT)0x80045001L)

//
// MessageId: PP_E_AZ_PROPNAME_NOTFOUND
//
// MessageText:
//
//  Internal Error: Property name not found
//
#define PP_E_AZ_PROPNAME_NOTFOUND        ((HRESULT)0x80045002L)

//
// MessageId: PP_E_AZ_PROPIDINDEX_INVALID
//
// MessageText:
//
//  Internal Error: Property id index not found
//
#define PP_E_AZ_PROPIDINDEX_INVALID      ((HRESULT)0x80045003L)

//
// MessageId: PP_E_AZ_RESOURCETYPE_NOTFOUND
//
// MessageText:
//
//  Unknown resource type
//
#define PP_E_AZ_RESOURCETYPE_NOTFOUND    ((HRESULT)0x80045004L)

//
// MessageId: PP_E_AZ_RESOURCENAME_NOTFOUND
//
// MessageText:
//
//  Unknown resource name
//
#define PP_E_AZ_RESOURCENAME_NOTFOUND    ((HRESULT)0x80045005L)

//
// MessageId: PP_E_AZ_RESTYPEENTRY_INVALID
//
// MessageText:
//
//  Resource entry is invalid
//
#define PP_E_AZ_RESTYPEENTRY_INVALID     ((HRESULT)0x80045006L)

//
// MessageId: PP_E_AZ_RESSCHEMA_INVALIDSTRING
//
// MessageText:
//
//  The resource schema contains an invalid string
//
#define PP_E_AZ_RESSCHEMA_INVALIDSTRING  ((HRESULT)0x80045007L)

//
// MessageId: PP_E_AZ_RESSCHEMA_INVALIDTYPE
//
// MessageText:
//
//  The resource schema contains an invalid resource type
//
#define PP_E_AZ_RESSCHEMA_INVALIDTYPE    ((HRESULT)0x80045008L)

//
// MessageId: PP_E_AZ_RESSCHEMA_INVALIDNAME
//
// MessageText:
//
//  The resource schema contains an invalid resource name
//
#define PP_E_AZ_RESSCHEMA_INVALIDNAME    ((HRESULT)0x80045009L)

//
// MessageId: PP_E_AZ_RESOURCETYPE_INVALID
//
// MessageText:
//
//  The scope expression contains an invalid resource type
//
#define PP_E_AZ_RESOURCETYPE_INVALID     ((HRESULT)0x8004500AL)

//
// MessageId: PP_E_AZ_CLAIMMAPINDEX_INVALID
//
// MessageText:
//
//  Internal Error: Invalid claimmap index
//
#define PP_E_AZ_CLAIMMAPINDEX_INVALID    ((HRESULT)0x8004500BL)

//
// MessageId: PP_E_AZ_PROPNAME_INVALID
//
// MessageText:
//
//  The scope expression contains an invalid property name
//
#define PP_E_AZ_PROPNAME_INVALID         ((HRESULT)0x8004500CL)

//
// MessageId: PP_E_AZ_PROPVALUE_INVALID
//
// MessageText:
//
//  The scope expression contains an invalid property value
//
#define PP_E_AZ_PROPVALUE_INVALID        ((HRESULT)0x8004500DL)

//
// MessageId: PP_E_AZ_PROPID_INVALID
//
// MessageText:
//
//  The scope expression contains an invalid property id
//
#define PP_E_AZ_PROPID_INVALID           ((HRESULT)0x8004500EL)

//
// MessageId: PP_E_AZ_NORESOURCE
//
// MessageText:
//
//  The scope expression contains no resource
//
#define PP_E_AZ_NORESOURCE               ((HRESULT)0x8004500FL)

//
// MessageId: PP_E_AZ_CLAIMINDEX_INVALID
//
// MessageText:
//
//  Internal Error: claim index is invalid
//
#define PP_E_AZ_CLAIMINDEX_INVALID       ((HRESULT)0x80045010L)

//
// MessageId: PP_E_AZ_SCOPEINDEX_INVALID
//
// MessageText:
//
//  Internal Error: scope index is invalid
//
#define PP_E_AZ_SCOPEINDEX_INVALID       ((HRESULT)0x80045011L)

//
// MessageId: PP_E_AZ_ROLEMAPINDEX_INVALID
//
// MessageText:
//
//  Internal Error: rolemap index is invalid
//
#define PP_E_AZ_ROLEMAPINDEX_INVALID     ((HRESULT)0x80045012L)

//
// MessageId: PP_E_AZ_CLAIM_INVALID
//
// MessageText:
//
//  The input data contains an invalid claim
//
#define PP_E_AZ_CLAIM_INVALID            ((HRESULT)0x80045013L)

//
// MessageId: PP_E_AZ_SCOPE_INVALID
//
// MessageText:
//
//  The input data contains an invalid scope expression
//
#define PP_E_AZ_SCOPE_INVALID            ((HRESULT)0x80045014L)

//
// MessageId: PP_E_AZ_SCOPETYPE_INVALID
//
// MessageText:
//
//  The input data contains an invalid scope type
//
#define PP_E_AZ_SCOPETYPE_INVALID        ((HRESULT)0x80045015L)

//
// MessageId: PP_E_AZ_CLAIMNAME_NOTFOUND
//
// MessageText:
//
//  The claim name is not defined
//
#define PP_E_AZ_CLAIMNAME_NOTFOUND       ((HRESULT)0x80045016L)

//
// MessageId: PP_E_AZ_CLAIMID_NOTFOUND
//
// MessageText:
//
//  The claim id is not defined
//
#define PP_E_AZ_CLAIMID_NOTFOUND         ((HRESULT)0x80045017L)

//
// MessageId: PP_E_AZ_CLAIMSCHEMA_INVALIDNAME
//
// MessageText:
//
//  The resource schema contains an invalid claim name
//
#define PP_E_AZ_CLAIMSCHEMA_INVALIDNAME  ((HRESULT)0x80045018L)

//
// MessageId: PP_E_AZ_CLAIMSCHEMA_INVALIDID
//
// MessageText:
//
//  The resource schema contains an invalid claim id
//
#define PP_E_AZ_CLAIMSCHEMA_INVALIDID    ((HRESULT)0x80045019L)

//
// MessageId: PP_E_AZ_CLAIMENTRY_INVALID
//
// MessageText:
//
//  The resource schema contains an invalid claim entry
//
#define PP_E_AZ_CLAIMENTRY_INVALID       ((HRESULT)0x8004501AL)

//
// MessageId: PP_E_AZ_EVALUATOR_NOTFOUND
//
// MessageText:
//
//  Internal error: no evaluator for the given scope type
//
#define PP_E_AZ_EVALUATOR_NOTFOUND       ((HRESULT)0x8004501BL)

//
// MessageId: PP_E_AZ_NOTINSCOPE
//
// MessageText:
//
//  The resource is not in scope
//
#define PP_E_AZ_NOTINSCOPE               ((HRESULT)0x8004501CL)

//
// MessageId: PP_E_AZ_SCOPEEXPR_MISSINGSLASH
//
// MessageText:
//
//  The scope expression is invalid: missing forward slash
//
#define PP_E_AZ_SCOPEEXPR_MISSINGSLASH   ((HRESULT)0x8004501DL)

//
// MessageId: PP_E_AZ_RESOURCENAME_INVALID
//
// MessageText:
//
//  The scope expression contains an invalid resource name
//
#define PP_E_AZ_RESOURCENAME_INVALID     ((HRESULT)0x8004501EL)

//
// MessageId: PP_E_AZ_SCOPEEXPR_MISSINGEQUAL
//
// MessageText:
//
//  The scope expression is invalid: missing equal sign
//
#define PP_E_AZ_SCOPEEXPR_MISSINGEQUAL   ((HRESULT)0x8004501FL)

//
// MessageId: PP_E_AZ_TOKENCLAIMMAP_INVALID
//
// MessageText:
//
//  Invalid claimmap in the input token
//
#define PP_E_AZ_TOKENCLAIMMAP_INVALID    ((HRESULT)0x80045020L)

//
// MessageId: PP_E_AZ_TOKEN_NOROLEMAP
//
// MessageText:
//
//  No rolemaps in the input token
//
#define PP_E_AZ_TOKEN_NOROLEMAP          ((HRESULT)0x80045021L)

//
// MessageId: PP_E_AZ_TOKENSCOPE_INVALID
//
// MessageText:
//
//  Invalid scope in the input token
//
#define PP_E_AZ_TOKENSCOPE_INVALID       ((HRESULT)0x80045022L)

//
// MessageId: PP_E_AZ_AUTHZTOKEN_INVALID
//
// MessageText:
//
//  The input token is invalid
//
#define PP_E_AZ_AUTHZTOKEN_INVALID       ((HRESULT)0x80045023L)

//
// MessageId: PP_E_AZ_NOT_AUTHORIZED
//
// MessageText:
//
//  The specified user is not authorized to perform the requested operation.
//
#define PP_E_AZ_NOT_AUTHORIZED           ((HRESULT)0x80045024L)

//
// MessageId: PP_E_AZ_AUTHZ_NOBINDING
//
// MessageText:
//
//  Internal error: not token binding for this operation
//
#define PP_E_AZ_AUTHZ_NOBINDING          ((HRESULT)0x80045025L)

//
// MessageId: PP_E_AZ_SOURCESCOPE_INVALID
//
// MessageText:
//
//  The source scope expression is invalid
//
#define PP_E_AZ_SOURCESCOPE_INVALID      ((HRESULT)0x80045026L)

//
// MessageId: PP_E_AZ_ROLETEMPLATE_NOTFOUND
//
// MessageText:
//
//  Role template not found
//
#define PP_E_AZ_ROLETEMPLATE_NOTFOUND    ((HRESULT)0x80045027L)

//
// MessageId: PP_E_AZ_TEMPLATEENTRY_INVALID
//
// MessageText:
//
//  Invalid template entry
//
#define PP_E_AZ_TEMPLATEENTRY_INVALID    ((HRESULT)0x80045028L)

//
// MessageId: PP_E_AZ_TEMPLATEID_INVALID
//
// MessageText:
//
//  Invalid template id
//
#define PP_E_AZ_TEMPLATEID_INVALID       ((HRESULT)0x80045029L)

//
// MessageId: PP_E_AZ_TEMPLATEXML_INVALID
//
// MessageText:
//
//  Invalid template xml
//
#define PP_E_AZ_TEMPLATEXML_INVALID      ((HRESULT)0x8004502AL)

//
// MessageId: PP_E_AZ_EVALTYPE_INVALID
//
// MessageText:
//
//  Invalid evaluation type
//
#define PP_E_AZ_EVALTYPE_INVALID         ((HRESULT)0x8004502BL)

//
// MessageId: PP_E_AZ_BINDINGCLAIMMAP_INVALID
//
// MessageText:
//
//  The input data contains an invalid claimmap
//
#define PP_E_AZ_BINDINGCLAIMMAP_INVALID  ((HRESULT)0x8004502CL)

//
// MessageId: PP_E_AZ_BINDINGSCOPEEXPR_INVALID
//
// MessageText:
//
//  The input data contains an invalid scope expression
//
#define PP_E_AZ_BINDINGSCOPEEXPR_INVALID ((HRESULT)0x8004502DL)

//
// MessageId: PP_E_AZ_BINDINGSCOPE_INVALID
//
// MessageText:
//
//  The input data contains an invalid scope
//
#define PP_E_AZ_BINDINGSCOPE_INVALID     ((HRESULT)0x8004502EL)

//
// MessageId: PP_E_AZ_PROPID_NOTFOUND
//
// MessageText:
//
//  Internal error: property id not found
//
#define PP_E_AZ_PROPID_NOTFOUND          ((HRESULT)0x8004502FL)

//
// MessageId: PP_E_AZ_AUTHZTOKEN_NOROLEMAP
//
// MessageText:
//
//  The input token has no rolemaps
//
#define PP_E_AZ_AUTHZTOKEN_NOROLEMAP     ((HRESULT)0x80045030L)

//
// MessageId: PP_E_AZ_AUTHZTOKEN_NOROOTSCOPE
//
// MessageText:
//
//  The input token has no root scope
//
#define PP_E_AZ_AUTHZTOKEN_NOROOTSCOPE   ((HRESULT)0x80045031L)

//
// MessageId: PP_E_AZ_BINDINGS_NOCLAIMMAP
//
// MessageText:
//
//  The input data has no claimmap
//
#define PP_E_AZ_BINDINGS_NOCLAIMMAP      ((HRESULT)0x80045032L)

//
// MessageId: PP_E_AZ_AUTHZTOKEN_NOCLAIMMAP
//
// MessageText:
//
//  The input token has no claimmap
//
#define PP_E_AZ_AUTHZTOKEN_NOCLAIMMAP    ((HRESULT)0x80045033L)

//
// MessageId: PP_E_AZ_CLAIMMAP_NOCLAIMS
//
// MessageText:
//
//  The input claimmap has no claims
//
#define PP_E_AZ_CLAIMMAP_NOCLAIMS        ((HRESULT)0x80045034L)

//
// MessageId: PP_E_AZ_ROOTSCOPE_INVALIDTYPE
//
// MessageText:
//
//  The input root scope has an invalid type
//
#define PP_E_AZ_ROOTSCOPE_INVALIDTYPE    ((HRESULT)0x80045035L)

//
// MessageId: PP_E_AZ_SCOPEEVAL_NOTEVALUATED
//
// MessageText:
//
//  Internal error: the bindings are not yet evaluated
//
#define PP_E_AZ_SCOPEEVAL_NOTEVALUATED   ((HRESULT)0x80045036L)

//
// MessageId: PP_E_AZ_SCOPEEVAL_NOINIT
//
// MessageText:
//
//  Internal error: the evaluation results are not initialized
//
#define PP_E_AZ_SCOPEEVAL_NOINIT         ((HRESULT)0x80045037L)

//
// MessageId: PP_E_AZ_CANNOT_NORMALIZE
//
// MessageText:
//
//  Internal error: cannot normalized internal structures
//
#define PP_E_AZ_CANNOT_NORMALIZE         ((HRESULT)0x80045038L)

//
// MessageId: PP_E_AZ_DBCONVERSION_FAIL
//
// MessageText:
//
//  Internal error: errors during conversion to/from DB format
//
#define PP_E_AZ_DBCONVERSION_FAIL        ((HRESULT)0x80045039L)

//
// MessageId: PP_E_AZ_NORMALIZEDSCOPE_INVALID
//
// MessageText:
//
//  The normalized scope expression is invalid
//
#define PP_E_AZ_NORMALIZEDSCOPE_INVALID  ((HRESULT)0x8004503AL)

//
// MessageId: PP_E_AZ_CLAIMMAP_EMPTY
//
// MessageText:
//
//  The input data contains an empty claimmap
//
#define PP_E_AZ_CLAIMMAP_EMPTY           ((HRESULT)0x8004503BL)

//
// MessageId: PP_E_AZ_SCOPESCHEMA_INVALIDTYPE
//
// MessageText:
//
//  The schema for the scope hierarchy contains an invalid resource type
//
#define PP_E_AZ_SCOPESCHEMA_INVALIDTYPE  ((HRESULT)0x8004503CL)

//
// MessageId: PP_E_AZ_SCOPESCHEMA_INVALIDNAME
//
// MessageText:
//
//  The schema for the scope hierarchy contains an invalid resource name
//
#define PP_E_AZ_SCOPESCHEMA_INVALIDNAME  ((HRESULT)0x8004503DL)

//
// MessageId: PP_E_AZ_SCOPEMAPENTRY_INVALID
//
// MessageText:
//
//  The schema for the scope hierarchy contains an invalid entry
//
#define PP_E_AZ_SCOPEMAPENTRY_INVALID    ((HRESULT)0x8004503EL)

//
// MessageId: PP_E_AZ_SCOPEMAPPING_NOTFOUND
//
// MessageText:
//
//  Internal error: there is no such hierarchy for the input resource types
//
#define PP_E_AZ_SCOPEMAPPING_NOTFOUND    ((HRESULT)0x8004503FL)

//
// MessageId: PP_E_AZ_SCOPELEN_TOOBIG
//
// MessageText:
//
//  The scope expression is too long
//
#define PP_E_AZ_SCOPELEN_TOOBIG          ((HRESULT)0x80045040L)

//
// MessageId: PP_E_AZ_SCOPECOUNT_TOOBIG
//
// MessageText:
//
//  The resource count is too large
//
#define PP_E_AZ_SCOPECOUNT_TOOBIG        ((HRESULT)0x80045041L)

//
// MessageId: PP_E_AZ_CLAIMLEN_TOOBIG
//
// MessageText:
//
//  The claim name is too large
//
#define PP_E_AZ_CLAIMLEN_TOOBIG          ((HRESULT)0x80045042L)

//
// MessageId: PP_E_AZ_CLAIMCOUNT_TOOBIG
//
// MessageText:
//
//  The claim count is too large
//
#define PP_E_AZ_CLAIMCOUNT_TOOBIG        ((HRESULT)0x80045043L)

//
// MessageId: PP_E_AZ_TOKENLEN_TOOBIG
//
// MessageText:
//
//  The token size is too large
//
#define PP_E_AZ_TOKENLEN_TOOBIG          ((HRESULT)0x80045044L)

//
// MessageId: PP_E_AZ_BINDINGSLEN_TOOBIG
//
// MessageText:
//
//  The input bindings data is too large
//
#define PP_E_AZ_BINDINGSLEN_TOOBIG       ((HRESULT)0x80045045L)

//
// MessageId: PP_E_AZ_ROLE_NOTFOUND
//
// MessageText:
//
//  Internal error: the role name does not exist
//
#define PP_E_AZ_ROLE_NOTFOUND            ((HRESULT)0x80045046L)

//
// MessageId: PP_E_AZ_ROLE_NAMEMISSING
//
// MessageText:
//
//  Internal error: the role name is missing in the input data
//
#define PP_E_AZ_ROLE_NAMEMISSING         ((HRESULT)0x80045047L)

//
// MessageId: PP_E_AZ_DA_ID_INVALID
//
// MessageText:
//
//  Internal error: invalid DA identifier
//
#define PP_E_AZ_DA_ID_INVALID            ((HRESULT)0x80045048L)

//
// MessageId: PP_E_AZ_IDENTITY_INVALID
//
// MessageText:
//
//  Internal error: invalid identifier
//
#define PP_E_AZ_IDENTITY_INVALID         ((HRESULT)0x80045049L)

//
// MessageId: PP_E_AZ_QUOTA_SETTINGS_INVALID
//
// MessageText:
//
//  Internal error: the quota settings are invalid
//
#define PP_E_AZ_QUOTA_SETTINGS_INVALID   ((HRESULT)0x8004504AL)

//
// MessageId: PP_E_AZ_NAMESPACE_ID_INVALID
//
// MessageText:
//
//  Internal error: invalid namespace identifier
//
#define PP_E_AZ_NAMESPACE_ID_INVALID     ((HRESULT)0x8004504BL)

//
// MessageId: PP_E_AZ_ENUMSCOPE_ID_INVALID
//
// MessageText:
//
//  Internal error: invalid group identifier
//
#define PP_E_AZ_ENUMSCOPE_ID_INVALID     ((HRESULT)0x8004504CL)

//
// MessageId: PP_E_AZ_MEMBERID_INVALID
//
// MessageText:
//
//  Internal error: invalid identifier
//
#define PP_E_AZ_MEMBERID_INVALID         ((HRESULT)0x8004504DL)

//
// MessageId: PP_E_AZ_ENUMSCOPE_NOTSUPPORTED
//
// MessageText:
//
//  Internal error: the type of the enumerated scope is not supported
//
#define PP_E_AZ_ENUMSCOPE_NOTSUPPORTED   ((HRESULT)0x8004504EL)

//
// MessageId: PP_E_AZ_OBJECT_ID_INVALID
//
// MessageText:
//
//  Internal error: invalid object identifier
//
#define PP_E_AZ_OBJECT_ID_INVALID        ((HRESULT)0x8004504FL)

//
// MessageId: PP_E_AZ_GENERATEXML_BADVARIANT
//
// MessageText:
//
//  Internal error: XML writer returns an invalid variant type
//
#define PP_E_AZ_GENERATEXML_BADVARIANT   ((HRESULT)0x80045050L)

//
// MessageId: PP_E_AZ_SCOPE_NOTSUPPORTED
//
// MessageText:
//
//  Hierarchical scope expressions are not supported for this version
//
#define PP_E_AZ_SCOPE_NOTSUPPORTED       ((HRESULT)0x80045051L)

//
// MessageId: PP_E_AZ_NO_CLAIMS
//
// MessageText:
//
//  The input claims array is empty
//
#define PP_E_AZ_NO_CLAIMS                ((HRESULT)0x80045052L)

//
// MessageId: PP_E_AZ_BINDINGS_EMPTY
//
// MessageText:
//
//  The input bindings xml is empty
//
#define PP_E_AZ_BINDINGS_EMPTY           ((HRESULT)0x80045053L)

//
// MessageId: PP_E_AZ_TOKENTYPE_INVALID
//
// MessageText:
//
//  The type of the authorization token is invalid
//
#define PP_E_AZ_TOKENTYPE_INVALID        ((HRESULT)0x80045054L)

//
// MessageId: PP_E_AZ_SOURCETYPE_NOTSUPPORTED
//
// MessageText:
//
//  The source scope is not supported
//
#define PP_E_AZ_SOURCETYPE_NOTSUPPORTED  ((HRESULT)0x80045055L)

//
// MessageId: PP_E_AZ_ROLEFILTER_INVALID
//
// MessageText:
//
//  Invalid role filtering data
//
#define PP_E_AZ_ROLEFILTER_INVALID       ((HRESULT)0x80045056L)

//
// MessageId: PP_E_AZ_SITECONFIG_INVALID
//
// MessageText:
//
//  Invalid site configuration data
//
#define PP_E_AZ_SITECONFIG_INVALID       ((HRESULT)0x80045057L)

//
// MessageId: PP_E_AZ_TOKENHEADER_INVALID
//
// MessageText:
//
//  Invalid header field in the authorization token
//
#define PP_E_AZ_TOKENHEADER_INVALID      ((HRESULT)0x80045058L)

//
// MessageId: PP_E_AZ_CALLCONTEXT_INVALID
//
// MessageText:
//
//  Invalid call context data
//
#define PP_E_AZ_CALLCONTEXT_INVALID      ((HRESULT)0x80045059L)

//
// MessageId: PP_E_AZ_CACHEDTOKEN_INVALID
//
// MessageText:
//
//  Invalid cache entry for an authz token
//
#define PP_E_AZ_CACHEDTOKEN_INVALID      ((HRESULT)0x8004505AL)

//
// MessageId: PP_E_AZ_CACHEDTOKEN_NOTFOUND
//
// MessageText:
//
//  Cached token not found
//
#define PP_E_AZ_CACHEDTOKEN_NOTFOUND     ((HRESULT)0x8004505BL)

//
// MessageId: PP_E_AZ_CACHEDTYPE_INVALID
//
// MessageText:
//
//  Invalid cached token type
//
#define PP_E_AZ_CACHEDTYPE_INVALID       ((HRESULT)0x8004505CL)

//
// MessageId: PP_E_AZ_STRINGINDEX_INVALID
//
// MessageText:
//
//  Internal error: invalid string index
//
#define PP_E_AZ_STRINGINDEX_INVALID      ((HRESULT)0x8004505DL)

//
// MessageId: PP_E_AZ_CLIENTCONTEXT_INVALID
//
// MessageText:
//
//  Invalid client context
//
#define PP_E_AZ_CLIENTCONTEXT_INVALID    ((HRESULT)0x8004505EL)

//
// MessageId: PP_E_AZ_CLIENTTOKEN_ALREADYBOUND
//
// MessageText:
//
//  The token is already bound
//
#define PP_E_AZ_CLIENTTOKEN_ALREADYBOUND ((HRESULT)0x8004505FL)

//
// MessageId: PP_E_AZ_BUFFERLEN_INVALID
//
// MessageText:
//
//  Internal error: invalid buffer length
//
#define PP_E_AZ_BUFFERLEN_INVALID        ((HRESULT)0x80045060L)

//
// MessageId: PP_E_AZ_CONVERSION_ERROR
//
// MessageText:
//
//  Internal error: string conversion error
//
#define PP_E_AZ_CONVERSION_ERROR         ((HRESULT)0x80045061L)

//
// MessageId: PP_E_AZ_SERVERCERT_INVALID
//
// MessageText:
//
//  Server certificate is invalid
//
#define PP_E_AZ_SERVERCERT_INVALID       ((HRESULT)0x80045062L)

//
// MessageId: PP_E_AZ_CLIENT_NOTINITIALIZED
//
// MessageText:
//
//  Client library: structure not initialized
//
#define PP_E_AZ_CLIENT_NOTINITIALIZED    ((HRESULT)0x80045063L)

//
// MessageId: PP_E_AZ_ENCRYPTIONERROR
//
// MessageText:
//
//  Encrypt/decrypt error
//
#define PP_E_AZ_ENCRYPTIONERROR          ((HRESULT)0x80045064L)

//
// MessageId: PP_E_AZ_SESSIONKEYTOKEN_INVALID
//
// MessageText:
//
//  Invalid session key in input token
//
#define PP_E_AZ_SESSIONKEYTOKEN_INVALID  ((HRESULT)0x80045065L)

//
// MessageId: PP_E_AZ_CLIENTKEYTOKEN_INVALID
//
// MessageText:
//
//  Invalid client key in input token
//
#define PP_E_AZ_CLIENTKEYTOKEN_INVALID   ((HRESULT)0x80045066L)

//
// MessageId: PP_E_AZ_KEYTOKEN_INVALID
//
// MessageText:
//
//  Invalid key in input token
//
#define PP_E_AZ_KEYTOKEN_INVALID         ((HRESULT)0x80045067L)

//
// MessageId: PP_E_AZ_CRYPTPROVIDER_INVALIDOP
//
// MessageText:
//
//  Internal error: invalid crypt provider operation
//
#define PP_E_AZ_CRYPTPROVIDER_INVALIDOP  ((HRESULT)0x80045068L)

//
// MessageId: PP_E_AZ_CRYPTHANDLE_INVALID
//
// MessageText:
//
//  Internal error: invalid crypt handle
//
#define PP_E_AZ_CRYPTHANDLE_INVALID      ((HRESULT)0x80045069L)

//
// MessageId: PP_E_AZ_NOTAUTHZOWNER
//
// MessageText:
//
//  The user can request a token only for itself
//
#define PP_E_AZ_NOTAUTHZOWNER            ((HRESULT)0x8004506AL)

//
// MessageId: PP_E_AZ_DBVALUE_INVALID
//
// MessageText:
//
//  Internal error: invalid database value
//
#define PP_E_AZ_DBVALUE_INVALID          ((HRESULT)0x8004506BL)

//
// MessageId: PP_E_AZ_NAMESPACE_NOTFOUND
//
// MessageText:
//
//  Namespace not found
//
#define PP_E_AZ_NAMESPACE_NOTFOUND       ((HRESULT)0x8004506CL)

//
// MessageId: PP_E_AZ_RESSCHEMA_INVALID
//
// MessageText:
//
//  Internal error: Invalid resource schema object
//
#define PP_E_AZ_RESSCHEMA_INVALID        ((HRESULT)0x8004506DL)

//
// MessageId: PP_E_AZ_BINDINGTYPE_NOSCOPE
//
// MessageText:
//
//  The target type is provided with an empty target scope
//
#define PP_E_AZ_BINDINGTYPE_NOSCOPE      ((HRESULT)0x8004506EL)

//
// MessageId: PP_E_AZ_AUTHZTOKEN_INVALIDXML
//
// MessageText:
//
//  The authz token xml does not conform with the XML standards
//
#define PP_E_AZ_AUTHZTOKEN_INVALIDXML    ((HRESULT)0x8004506FL)

//
// MessageId: PP_E_AZ_BINDINGS_INVALIDXML
//
// MessageText:
//
//  The claim bindings xml does not conform with the XML standards
//
#define PP_E_AZ_BINDINGS_INVALIDXML      ((HRESULT)0x80045070L)

//
// MessageId: PP_E_AZ_CRYPTAPI_FAILURE
//
// MessageText:
//
//  Failed to encrypt/decrypt the authorization data
//
#define PP_E_AZ_CRYPTAPI_FAILURE         ((HRESULT)0x80045071L)

//
// MessageId: PP_E_AZ_NODELEGATEHEADERS
//
// MessageText:
//
//  The calling context does not include a delegation header
//
#define PP_E_AZ_NODELEGATEHEADERS        ((HRESULT)0x80045072L)

//
// MessageId: PP_E_AZ_DELEGATE_INVALIDXML
//
// MessageText:
//
//  The delegation header xml does not conform to the current schema
//
#define PP_E_AZ_DELEGATE_INVALIDXML      ((HRESULT)0x80045073L)

//
// MessageId: PP_E_AZ_DELEGATE_INVALIDPUID
//
// MessageText:
//
//  The delegated passport id is invalid or does not match the identity for the current request
//
#define PP_E_AZ_DELEGATE_INVALIDPUID     ((HRESULT)0x80045074L)

//
// MessageId: PP_E_AZ_TOKEN_NODELEGATE
//
// MessageText:
//
//  The authorization token does not contain delegate information
//
#define PP_E_AZ_TOKEN_NODELEGATE         ((HRESULT)0x80045075L)

//
// MessageId: PP_E_AZ_DELEGATESCOPE_INVALID
//
// MessageText:
//
//  The delegation scope is invalid
//
#define PP_E_AZ_DELEGATESCOPE_INVALID    ((HRESULT)0x80045076L)

//
// MessageId: PP_E_AZ_DELEGATESCOPE_NOMATCH
//
// MessageText:
//
//  The passport id included in the delegation scope does not match the id in the delegation headers
//
#define PP_E_AZ_DELEGATESCOPE_NOMATCH    ((HRESULT)0x80045077L)

//
// MessageId: PP_E_AZ_ROLEFILTERXML_INVALID
//
// MessageText:
//
//  The role filter xml does not conform to the current schema
//
#define PP_E_AZ_ROLEFILTERXML_INVALID    ((HRESULT)0x80045078L)

//
// MessageId: PP_E_AZ_USERAUTHMETHOD_INVALID
//
// MessageText:
//
//  Invalid user authentication method
//
#define PP_E_AZ_USERAUTHMETHOD_INVALID   ((HRESULT)0x80045079L)

//
// MessageId: PP_E_AZ_SITEAUTHFLAG_INVALID
//
// MessageText:
//
//  Invalid site authentication flags
//
#define PP_E_AZ_SITEAUTHFLAG_INVALID     ((HRESULT)0x8004507AL)

//
// MessageId: PP_E_AZ_INVALIDFLAGS
//
// MessageText:
//
//  Flags argument is currently reserved and should be set to 0
//
#define PP_E_AZ_INVALIDFLAGS             ((HRESULT)0x8004507BL)

//
// MessageId: PP_E_AZ_SCOPETYPELEN_TOOBIG
//
// MessageText:
//
//  The scope type string is too long
//
#define PP_E_AZ_SCOPETYPELEN_TOOBIG      ((HRESULT)0x8004507CL)

//
// MessageId: PP_E_AZ_HEADERDATE_INVALID
//
// MessageText:
//
//  Invalid date field in the authorization token
//
#define PP_E_AZ_HEADERDATE_INVALID       ((HRESULT)0x8004507DL)

//
// MessageId: PP_E_AZ_AUTHZTOKEN_EXPIRED
//
// MessageText:
//
//  The authorization token expired
//
#define PP_E_AZ_AUTHZTOKEN_EXPIRED       ((HRESULT)0x8004507EL)

// base 0x5100
//
// MessageId: PP_E_ES_SENDTRDPL_MISSINGHOSTNAME
//
// MessageText:
//
//  Send thread pool could not initialize because SMTP host name is missing.
//
#define PP_E_ES_SENDTRDPL_MISSINGHOSTNAME ((HRESULT)0x80045100L)

//
// MessageId: PP_E_ES_SENDTRDPL_COULD_NOT_OPEN_SMPT_CONNECTION
//
// MessageText:
//
//  Sending thread could not connect to SMTP.
//
#define PP_E_ES_SENDTRDPL_COULD_NOT_OPEN_SMPT_CONNECTION ((HRESULT)0x80045102L)

//
// MessageId: PP_E_ES_PARTITIONKEEPER_NOT_INITIALIZED
//
// MessageText:
//
//  Partition keeper is not yet initialized.
//
#define PP_E_ES_PARTITIONKEEPER_NOT_INITIALIZED ((HRESULT)0x80045106L)

//
// MessageId: PP_E_ES_INVALID_PARTITIONINFO_SUPPLIED
//
// MessageText:
//
//  Incorrect info supplied for partition keeper initialization.
//
#define PP_E_ES_INVALID_PARTITIONINFO_SUPPLIED ((HRESULT)0x80045107L)

//
// MessageId: PP_E_ES_DEPOSITORY_ALREADY_INITIALIZED
//
// MessageText:
//
//  Attempt to initialize email depository multiple times.
//
#define PP_E_ES_DEPOSITORY_ALREADY_INITIALIZED ((HRESULT)0x8004510AL)

//
// MessageId: PP_E_ES_INVALID_DEPOZITORY_SIZE_SUPPLIED
//
// MessageText:
//
//  Invalid email depository size supplied for initialization.
//
#define PP_E_ES_INVALID_DEPOZITORY_SIZE_SUPPLIED ((HRESULT)0x8004510BL)

//
// MessageId: PP_E_ES_SENDTRDPL_CONFIG_NOT_INITIALIZED
//
// MessageText:
//
//  Config object is not initialized during send thread initialization.
//
#define PP_E_ES_SENDTRDPL_CONFIG_NOT_INITIALIZED ((HRESULT)0x8004510DL)

//
// MessageId: PP_E_ES_SENDTRDPL_COULD_NOT_CLOSE_SMPT_CONNECTION
//
// MessageText:
//
//  Send thread could not close SMTP connection.
//
#define PP_E_ES_SENDTRDPL_COULD_NOT_CLOSE_SMPT_CONNECTION ((HRESULT)0x8004510EL)

//
// MessageId: PP_E_ES_GETTRDPL_INVALID_DEPOSITORY_SUPPLIED
//
// MessageText:
//
//  Invalid depository pointer supplied.
//
#define PP_E_ES_GETTRDPL_INVALID_DEPOSITORY_SUPPLIED ((HRESULT)0x8004510FL)

//
// MessageId: PP_E_ES_DEPOSITORY_NOT_INITIALIZED
//
// MessageText:
//
//  Email depository is not initialized.
//
#define PP_E_ES_DEPOSITORY_NOT_INITIALIZED ((HRESULT)0x80045110L)

//
// MessageId: PP_E_ES_CONFIG_ALREADY_INITIALIZED
//
// MessageText:
//
//  Attempt to initialize config multiple times.
//
#define PP_E_ES_CONFIG_ALREADY_INITIALIZED ((HRESULT)0x8004511BL)

//
// MessageId: PP_E_ES_CONFIG_EMPTY
//
// MessageText:
//
//  Config object has no config data.
//
#define PP_E_ES_CONFIG_EMPTY             ((HRESULT)0x8004511CL)

//
// MessageId: PP_E_ES_CONFIG_SECTIONNAME_EMPTY
//
// MessageText:
//
//  Section name is invalid for config initialization.
//
#define PP_E_ES_CONFIG_SECTIONNAME_EMPTY ((HRESULT)0x8004511DL)

//
// MessageId: PP_E_ES_CONFIG_INVALID_INIFILE_NAME
//
// MessageText:
//
//  Invalid INI file name.
//
#define PP_E_ES_CONFIG_INVALID_INIFILE_NAME ((HRESULT)0x8004511EL)

//
// MessageId: PP_E_ES_CONFIG_SECTION_BUFFER_TOO_SMALL
//
// MessageText:
//
//  Could not initialize config because buffer to read data from config file is too small.
//
#define PP_E_ES_CONFIG_SECTION_BUFFER_TOO_SMALL ((HRESULT)0x8004511FL)

//
// MessageId: PP_E_ES_CONFIG_EMPTY_ITEM_NAME
//
// MessageText:
//
//  Item name is invalid.
//
#define PP_E_ES_CONFIG_EMPTY_ITEM_NAME   ((HRESULT)0x80045120L)

//
// MessageId: PP_E_ES_CONFIG_NO_SUCH_ITEM
//
// MessageText:
//
//  No item with this name is config file.
//
#define PP_E_ES_CONFIG_NO_SUCH_ITEM      ((HRESULT)0x80045121L)

//
// MessageId: PP_E_ES_CONFIG_CAN_NOT_CHANGE_ITEM_TYPE
//
// MessageText:
//
//  Can not convert item type to expected.
//
#define PP_E_ES_CONFIG_CAN_NOT_CHANGE_ITEM_TYPE ((HRESULT)0x80045122L)

//
// MessageId: PP_E_ES_CONFIG_NOT_INITIALIZED
//
// MessageText:
//
//  Config not initialized.
//
#define PP_E_ES_CONFIG_NOT_INITIALIZED   ((HRESULT)0x80045124L)

//
// MessageId: PP_E_ES_EIDEPOSITORY_INVALID_THREADPOOL_POINTER
//
// MessageText:
//
//  Invalid pointer to email depository supplied.
//
#define PP_E_ES_EIDEPOSITORY_INVALID_THREADPOOL_POINTER ((HRESULT)0x80045125L)

//
// MessageId: PP_E_ES_EIDEPOSITORY_INVALID_SIZE
//
// MessageText:
//
//  Invalid size of email depository.
//
#define PP_E_ES_EIDEPOSITORY_INVALID_SIZE ((HRESULT)0x80045126L)

//
// MessageId: PP_E_ES_TEMPLATECACHE_NOT_INITIALIZED
//
// MessageText:
//
//  Email templace cache is not initialized.
//
#define PP_E_ES_TEMPLATECACHE_NOT_INITIALIZED ((HRESULT)0x80045129L)

//
// MessageId: PP_E_ES_TEMPLATECACHE_SIZE_IS_ZERO
//
// MessageText:
//
//  Email template cache size is zero.
//
#define PP_E_ES_TEMPLATECACHE_SIZE_IS_ZERO ((HRESULT)0x8004512AL)

//
// MessageId: PP_E_ES_TEMPLATECACHE_INVALID_LCID
//
// MessageText:
//
//  Invalid LCID supplied to email template cache.
//
#define PP_E_ES_TEMPLATECACHE_INVALID_LCID ((HRESULT)0x8004512DL)

//
// MessageId: PP_E_ES_TEMPLATECACHE_INVALID_TEMPLATEID
//
// MessageText:
//
//  Invalid template ID is supplied to email template cache.
//
#define PP_E_ES_TEMPLATECACHE_INVALID_TEMPLATEID ((HRESULT)0x8004512EL)

//
// MessageId: PP_E_ES_SENDTRDPL_NO_TAGS_TO_REPLACE
//
// MessageText:
//
//  No tags to be replaced were found in this message.
//
#define PP_E_ES_SENDTRDPL_NO_TAGS_TO_REPLACE ((HRESULT)0x8004512FL)

//
// MessageId: PP_E_ES_SENDTRDPL_FAILED_TO_SETUP_MSG
//
// MessageText:
//
//  Send thread failed to create email message.
//
#define PP_E_ES_SENDTRDPL_FAILED_TO_SETUP_MSG ((HRESULT)0x80045130L)

//
// MessageId: PP_E_ES_STATISTICS_INVALID_LOAD_LEVEL
//
// MessageText:
//
//  Require load level is invalid.
//
#define PP_E_ES_STATISTICS_INVALID_LOAD_LEVEL ((HRESULT)0x80045131L)

//
// MessageId: PP_E_ES_STATISTICS_INVALID_MINIMAL_TIME
//
// MessageText:
//
//  Minimal time between calls to get emails from DB is invalid.
//
#define PP_E_ES_STATISTICS_INVALID_MINIMAL_TIME ((HRESULT)0x80045133L)

//
// MessageId: PP_E_ES_STATISTICS_INVALID_TRIGGER_VALUE
//
// MessageText:
//
//  Trigger value is invalid.
//
#define PP_E_ES_STATISTICS_INVALID_TRIGGER_VALUE ((HRESULT)0x80045134L)

//
// MessageId: PP_E_ES_GETTRDPL_INVALID_STATISTICS_SUPPLIED
//
// MessageText:
//
//  Invalid pointer to statistics object supplied.
//
#define PP_E_ES_GETTRDPL_INVALID_STATISTICS_SUPPLIED ((HRESULT)0x80045135L)

//
// MessageId: PP_E_ES_STATISTICS_NOT_INITIALIZED
//
// MessageText:
//
//  Statistics object not initialized.
//
#define PP_E_ES_STATISTICS_NOT_INITIALIZED ((HRESULT)0x80045136L)

//
// MessageId: PP_E_ES_SENDTRDPL_SMTPRECONNECTTIMEOUT_INCORRECT
//
// MessageText:
//
//  SMTP reconnect time interval is invalid.
//
#define PP_E_ES_SENDTRDPL_SMTPRECONNECTTIMEOUT_INCORRECT ((HRESULT)0x80045138L)

//
// MessageId: PP_E_ES_STATISTICS_INVALID_THROTTLEPERNUMBEROFCALLS_VALUE
//
// MessageText:
//
//  Throttle per number of calls parameter value is invalid.
//
#define PP_E_ES_STATISTICS_INVALID_THROTTLEPERNUMBEROFCALLS_VALUE ((HRESULT)0x80045139L)

//
// MessageId: PP_E_ES_STATISTICS_INVALID_MAXIMUM_TIME
//
// MessageText:
//
//  Maximum time between calls to get emails out of DB is invalid.
//
#define PP_E_ES_STATISTICS_INVALID_MAXIMUM_TIME ((HRESULT)0x8004513AL)

//
// MessageId: PP_E_ES_CONFIG_INVALID_RESPONSE_URL
//
// MessageText:
//
//  Invalid response URL is supplied in config.
//
#define PP_E_ES_CONFIG_INVALID_RESPONSE_URL ((HRESULT)0x8004513BL)

//
// MessageId: PP_E_ES_CONFIG_NO_SUCH_LCID
//
// MessageText:
//
//  Requested LCID does not exist.
//
#define PP_E_ES_CONFIG_NO_SUCH_LCID      ((HRESULT)0x8004513CL)

//
// MessageId: PP_E_ES_SENDTRDPL_HASH_FAILED
//
// MessageText:
//
//  Could not hash email ID.
//
#define PP_E_ES_SENDTRDPL_HASH_FAILED    ((HRESULT)0x8004513DL)

//
// MessageId: PP_E_ES_EVENTLOGGER_COULD_NOT_CREATE
//
// MessageText:
//
//  Could not create Global Event Logger.
//
#define PP_E_ES_EVENTLOGGER_COULD_NOT_CREATE ((HRESULT)0x8004513EL)

//
// MessageId: PP_E_ES_EVENTLOGGER_NOT_INITIALIZED
//
// MessageText:
//
//  Event Logger not initialized.
//
#define PP_E_ES_EVENTLOGGER_NOT_INITIALIZED ((HRESULT)0x8004513FL)

//
// MessageId: PP_E_ES_SENDTRDPL_DICSONNECT_FAILED
//
// MessageText:
//
//  SMTP disconnect failed.
//
#define PP_E_ES_SENDTRDPL_DICSONNECT_FAILED ((HRESULT)0x80045140L)

//
// MessageId: PP_E_ES_STATISTICS_LOADLEVELTRIGGERCOMBO_OUTSIDE_LEGAL_RANGE
//
// MessageText:
//
//  Load level plus trigger is either greater maximum load or less than minimum load.
//
#define PP_E_ES_STATISTICS_LOADLEVELTRIGGERCOMBO_OUTSIDE_LEGAL_RANGE ((HRESULT)0x80045141L)

//
// MessageId: PP_E_ES_EMAILINFODEPOT_SIZE_INVALID
//
// MessageText:
//
//  Imail Info Depository size is invalid.
//
#define PP_E_ES_EMAILINFODEPOT_SIZE_INVALID ((HRESULT)0x80045142L)

//
// MessageId: PP_E_ES_SENDTRDPL_DUMPPATH_MISSING
//
// MessageText:
//
//  Path to dump emails for debugging is missing.
//
#define PP_E_ES_SENDTRDPL_DUMPPATH_MISSING ((HRESULT)0x80045143L)

//
// MessageId: PP_E_ES_SENDTRDPL_UNREPLACED_TAGS
//
// MessageText:
//
//  There are still tag markers in email which did not get replaced. Verify there are enough URLs and Tags for this email.
//
#define PP_E_ES_SENDTRDPL_UNREPLACED_TAGS ((HRESULT)0x80045144L)

// base 0x5201
//
// MessageId: PP_E_UILP_INVALIDPARAM
//
// MessageText:
//
//  Invalid token passed in UI Parameters. Either the name value pair is missing or name is not recognized.
//
#define PP_E_UILP_INVALIDPARAM           ((HRESULT)0x80045201L)

// base 0x5300
//------------------------------------------------------------------------------
// CachedProvisionedObject
//------------------------------------------------------------------------------
#define PP_E_CPO_BASE 0x5300
//
// MessageId: PP_E_CPO_INDEXOUTOFRANGE
//
// MessageText:
//
//  Index into an array or list is out of range. (hr=%1)
//
#define PP_E_CPO_INDEXOUTOFRANGE         ((HRESULT)0x80045300L)

//
// MessageId: PP_E_CPO_CANTGETCCMCACHE
//
// MessageText:
//
//  Cannot get pointer to the CCM Cache. (hr=%1)
//
#define PP_E_CPO_CANTGETCCMCACHE         ((HRESULT)0x80045301L)

//
// MessageId: PP_E_CPO_OBJECTNOTFOUND
//
// MessageText:
//
//  Object not found in DB. (hr=%1)
//
#define PP_E_CPO_OBJECTNOTFOUND          ((HRESULT)0x80045302L)

//
// MessageId: PP_E_CPO_CANTGETDATASOURCE
//
// MessageText:
//
//  Cannot get the internal DataSource object. (hr=%1)
//
#define PP_E_CPO_CANTGETDATASOURCE       ((HRESULT)0x80045303L)

//
// MessageId: PP_E_CPO_OBJECTIDMISMATCH
//
// MessageText:
//
//  Object IDs do not match in some way. (hr=%1)
//
#define PP_E_CPO_OBJECTIDMISMATCH        ((HRESULT)0x80045304L)

//
// MessageId: PP_E_CPO_RELEASEMISMATCH
//
// MessageText:
//
//  Object Release Versions do not match in some way. (hr=%1)
//
#define PP_E_CPO_RELEASEMISMATCH         ((HRESULT)0x80045305L)

//
// MessageId: PP_E_CPO_INCORRECTDATASOURCE
//
// MessageText:
//
//  Incorrect DataSource type. (hr=%1)
//
#define PP_E_CPO_INCORRECTDATASOURCE     ((HRESULT)0x80045306L)

//
// MessageId: PP_E_CPO_CANTGETOBJECT
//
// MessageText:
//
//  Cannot get the requested object. (hr=%1)
//
#define PP_E_CPO_CANTGETOBJECT           ((HRESULT)0x80045307L)

//
// MessageId: PP_E_CPO_INVALIDOBJECTID
//
// MessageText:
//
//  Object ID is not valid. (hr=%1)
//
#define PP_E_CPO_INVALIDOBJECTID         ((HRESULT)0x80045308L)

//
// MessageId: PP_E_CPO_BADPATH
//
// MessageText:
//
//  Badly formatted property or object path. (hr=%1)
//
#define PP_E_CPO_BADPATH                 ((HRESULT)0x80045309L)

//
// MessageId: PP_E_CPO_VARSUBST_ATTR_REPL_NOTFOUND
//
// MessageText:
//
//  Variable substitution replacement tag was not found. (hr=%1)
//
#define PP_E_CPO_VARSUBST_ATTR_REPL_NOTFOUND ((HRESULT)0x8004530AL)

//
// MessageId: PP_E_CPO_VARSUBST_REPL_ATTR_PARSEERR
//
// MessageText:
//
//  Variable substitution parse error. (hr=%1)
//
#define PP_E_CPO_VARSUBST_REPL_ATTR_PARSEERR ((HRESULT)0x8004530BL)

//
// MessageId: PP_E_CPO_VARSUBST_ENV_PARSEERR
//
// MessageText:
//
//  Error parsing the Environment node for Variable Substitution. (hr=%1)
//
#define PP_E_CPO_VARSUBST_ENV_PARSEERR   ((HRESULT)0x8004530CL)

//
// MessageId: PP_E_CPO_XML_PARSE_ERR
//
// MessageText:
//
//  General XML parse error. (hr=%1)
//
#define PP_E_CPO_XML_PARSE_ERR           ((HRESULT)0x8004530DL)

//
// MessageId: PP_E_CPO_LOADFROMXML_FAILED
//
// MessageText:
//
//  Cannot load this Cached Prov Obj from XML.  See the detailed error string. (hr=%1)
//
#define PP_E_CPO_LOADFROMXML_FAILED      ((HRESULT)0x8004530EL)

//
// MessageId: PP_E_CPO_OBJECTNOTCPO
//
// MessageText:
//
//  Object is not a CachedProvisionedObject.  Does not implement ICachedProvObj. (hr=%1)
//
#define PP_E_CPO_OBJECTNOTCPO            ((HRESULT)0x8004530FL)

//
// MessageId: PP_E_CPO_UNEXPECTED_DOM_NODE_TYPE
//
// MessageText:
//
//  Unexpected XMLDOM Node Type. (hr=%1)
//
#define PP_E_CPO_UNEXPECTED_DOM_NODE_TYPE ((HRESULT)0x80045310L)

//
// MessageId: PP_E_CPO_UNEXPECTED_VARIANT_TYPE
//
// MessageText:
//
//  Unexpected Variant data type. (hr=%1)
//
#define PP_E_CPO_UNEXPECTED_VARIANT_TYPE ((HRESULT)0x80045311L)

//
// MessageId: PP_E_CPO_PROPERTYNOTEXIST
//
// MessageText:
//
//  Requested property does not exist. (hr=%1)
//
#define PP_E_CPO_PROPERTYNOTEXIST        ((HRESULT)0x80045312L)

//
// MessageId: PP_E_CPO_OBJECTNOTEXIST
//
// MessageText:
//
//  Requested object does not exist. (hr=%1)
//
#define PP_E_CPO_OBJECTNOTEXIST          ((HRESULT)0x80045313L)

//
// MessageId: PP_E_CPO_XML_SCHEMA_PARSE_ERR
//
// MessageText:
//
//  Error parsing validation schema. (hr=%1)
//
#define PP_E_CPO_XML_SCHEMA_PARSE_ERR    ((HRESULT)0x80045314L)

//
// MessageId: PP_E_CPO_XML_ATTR_MISSING
//
// MessageText:
//
//  Required XML Attribute is missing. (hr=%1)
//
#define PP_E_CPO_XML_ATTR_MISSING        ((HRESULT)0x80045315L)

//
// MessageId: PP_E_CPO_EXPECTING_SINGLE_INSTANCE
//
// MessageText:
//
//  A property has more than one instance where were expecting only one. (hr=%1)
//
#define PP_E_CPO_EXPECTING_SINGLE_INSTANCE ((HRESULT)0x80045316L)

//
// MessageId: PP_E_CPO_PERSISTBLOCKED
//
// MessageText:
//
//  Persist has been blocked by a PrePersist callback. (hr=%1)
//
#define PP_E_CPO_PERSISTBLOCKED          ((HRESULT)0x80045317L)

//
// MessageId: PP_E_CPO_DELETEBLOCKED
//
// MessageText:
//
//  Delete has been blocked by a PreDelete callback. (hr=%1)
//
#define PP_E_CPO_DELETEBLOCKED           ((HRESULT)0x80045318L)

//
// MessageId: PP_E_CPO_VALIDATION_FAILED
//
// MessageText:
//
//  Validation failed for an object. (hr=%1)
//
#define PP_E_CPO_VALIDATION_FAILED       ((HRESULT)0x80045319L)

//
// MessageId: PP_E_CPO_INVALID_CATEGORY
//
// MessageText:
//
//  Invalid category to provision.  Object is not PROVISIONED catgeory. (hr=%1)
//
#define PP_E_CPO_INVALID_CATEGORY        ((HRESULT)0x8004531AL)

//
// MessageId: PP_E_CPO_PROPERTY_MARKED_FOR_DELETE
//
// MessageText:
//
//  Current property is marked for deletion. (hr=%1)
//
#define PP_E_CPO_PROPERTY_MARKED_FOR_DELETE ((HRESULT)0x8004531BL)

// base 0x5350
//------------------------------------------------------------------------------
// ProvisionedEntity Error Codes
//------------------------------------------------------------------------------
#define PP_E_PROVENT_BASE 0x5350
//
// MessageId: PP_E_PROVENT_XMLERR_ATTR_NOT_FOUND
//
// MessageText:
//
//  A required XML attribute was not found. (hr=%1)
//
#define PP_E_PROVENT_XMLERR_ATTR_NOT_FOUND ((HRESULT)0x80045350L)

//
// MessageId: PP_E_PROVENT_SITE_NAME_NOT_VALID_ID
//
// MessageText:
//
//  Site name is not numeric, less than 1, or greater than INT_MAX.  It must be numeric and fit in a signed 32bit value to be valid. (hr=%1)
//
#define PP_E_PROVENT_SITE_NAME_NOT_VALID_ID ((HRESULT)0x80045351L)

//
// MessageId: PP_E_PROVENT_POLICYGROUP_NOT_PRESENT
//
// MessageText:
//
//  Requested PolicyGroup is not present (hr=%1)
//
#define PP_E_PROVENT_POLICYGROUP_NOT_PRESENT ((HRESULT)0x80045352L)

//
// MessageId: PP_E_PROVENT_CANT_MERGE_PROPERTIES
//
// MessageText:
//
//  Cannot merge the requested properties.  There is likely some incompatability. (hr=%1)
//
#define PP_E_PROVENT_CANT_MERGE_PROPERTIES ((HRESULT)0x80045353L)

//
// MessageId: PP_E_PROVENT_OBJ_UNEXPECTED_TYPE
//
// MessageText:
//
//  Object of unexpected type. (hr=%1)
//
#define PP_E_PROVENT_OBJ_UNEXPECTED_TYPE ((HRESULT)0x80045354L)

//
// MessageId: PP_E_PROVENT_OBJ_NOT_STRINGTABLE
//
// MessageText:
//
//  Expecting a StringTable object; did not get one. (hr=%1)
//
#define PP_E_PROVENT_OBJ_NOT_STRINGTABLE ((HRESULT)0x80045355L)

//
// MessageId: PP_E_PROVENT_OBJ_NOT_REQUIREDPROPS
//
// MessageText:
//
//  Expecting a RequiredProperties object; did not get one. (hr=%1)
//
#define PP_E_PROVENT_OBJ_NOT_REQUIREDPROPS ((HRESULT)0x80045356L)

//
// MessageId: PP_E_PROVENT_OBJ_NOT_SITE
//
// MessageText:
//
//  Expecting a Site object; did not get one. (hr=%1)
//
#define PP_E_PROVENT_OBJ_NOT_SITE        ((HRESULT)0x80045357L)

//
// MessageId: PP_E_PROVENT_OBJ_NOT_POLICYGROUP
//
// MessageText:
//
//  Expecting a PolicyGroup object; did not get one. (hr=%1)
//
#define PP_E_PROVENT_OBJ_NOT_POLICYGROUP ((HRESULT)0x80045358L)

//
// MessageId: PP_E_PROVENT_PROPCOLLECTION_EMPTY
//
// MessageText:
//
//  PropertyCollection is empty (hr=%1)
//
#define PP_E_PROVENT_PROPCOLLECTION_EMPTY ((HRESULT)0x80045359L)

//
// MessageId: PP_E_PROVENT_PROPERTYDEF_NOTYPEDATANODE
//
// MessageText:
//
//  The PropertyDef object does not have a TypeData node (hr=%1)
//
#define PP_E_PROVENT_PROPERTYDEF_NOTYPEDATANODE ((HRESULT)0x8004535AL)

//
// MessageId: PP_E_PROVENT_PROPERTYDEF_DATE_INVALIDDATE
//
// MessageText:
//
//  Type Validation - Date - Invalid date format. (hr=%1)
//
#define PP_E_PROVENT_PROPERTYDEF_DATE_INVALIDDATE ((HRESULT)0x8004535BL)

//
// MessageId: PP_E_PROVENT_PROPERTYDEF_NUMCOMPONENTID_INCORRECT
//
// MessageText:
//
//  The number of component property IDs for this property definition does not match the type specification. (hr=%1)
//
#define PP_E_PROVENT_PROPERTYDEF_NUMCOMPONENTID_INCORRECT ((HRESULT)0x8004535CL)

//
// MessageId: PP_E_PROVENT_PROPERTYDEF_COMPONENTPROPID_INVALID
//
// MessageText:
//
//  One or more of the component property IDs is invalid. (hr=%1)
//
#define PP_E_PROVENT_PROPERTYDEF_COMPONENTPROPID_INVALID ((HRESULT)0x8004535DL)

//
// MessageId: PP_E_PROVENT_PROPERTYDEF_NOTYPEDATA
//
// MessageText:
//
//  The PropertyDef does not have any TypeData (hr=%1)
//
#define PP_E_PROVENT_PROPERTYDEF_NOTYPEDATA ((HRESULT)0x8004535EL)

//
// MessageId: PP_E_PROVENT_PROPERTYDEF_CANNOT_CHANGE_PROPID
//
// MessageText:
//
//  You cannot change the PropertyID of an existing PropertyDef (hr=%1)
//
#define PP_E_PROVENT_PROPERTYDEF_CANNOT_CHANGE_PROPID ((HRESULT)0x8004535FL)

//
// MessageId: PP_E_PROVENT_PROPERTYDEF_PROPID_USED
//
// MessageText:
//
//  The requested PropertyID or component PropertyID is already used. (hr=%1)
//
#define PP_E_PROVENT_PROPERTYDEF_PROPID_USED ((HRESULT)0x80045360L)

//
// MessageId: PP_E_PROVENT_PROPERTYDEF_INVALIDCOMPONENTINDEX
//
// MessageText:
//
//  Looking for a component ID that is out of range with what this type should have. (hr=%1)
//
#define PP_E_PROVENT_PROPERTYDEF_INVALIDCOMPONENTINDEX ((HRESULT)0x80045361L)

//
// MessageId: PP_E_PROVENT_PROPERTYDEF_NAMEINVALID
//
// MessageText:
//
//  The name of the requested PropertyDef is invalid. (hr=%1)
//
#define PP_E_PROVENT_PROPERTYDEF_NAMEINVALID ((HRESULT)0x80045362L)

//
// MessageId: PP_E_PROVENT_STRINGTABLE_NOT_PRESENT
//
// MessageText:
//
//  StringTable is not present for a given object. (hr=%1)
//
#define PP_E_PROVENT_STRINGTABLE_NOT_PRESENT ((HRESULT)0x80045363L)

//
// MessageId: PP_E_PROVENT_PROPERTY_ID_NOT_EXIST
//
// MessageText:
//
//  PropertyID does not exist (hr=%1)
//
#define PP_E_PROVENT_PROPERTY_ID_NOT_EXIST ((HRESULT)0x80045364L)

//
// MessageId: PP_E_PROVENT_PROPERTY_UNKNOWN_TYPE
//
// MessageText:
//
//  Property is of an unknown or unsupported type. (hr=%1)
//
#define PP_E_PROVENT_PROPERTY_UNKNOWN_TYPE ((HRESULT)0x80045365L)

//
// MessageId: PP_E_PROVENT_OBJ_BADPOINTER
//
// MessageText:
//
//  Bad pointer in ProvisionedEntity code (hr=%1)
//
#define PP_E_PROVENT_OBJ_BADPOINTER      ((HRESULT)0x80045366L)

//
// MessageId: PP_E_PROVENT_OBJ_GETGLOBALCACHE
//
// MessageText:
//
//  Unable to get a pointer to the CCMCache (hr=%1)
//
#define PP_E_PROVENT_OBJ_GETGLOBALCACHE  ((HRESULT)0x80045367L)

//
// MessageId: PP_E_PROVENT_NAMESPACE_NOT_PRESENT
//
// MessageText:
//
//  Referenced NameSpace object is not present (hr=%1)
//
#define PP_E_PROVENT_NAMESPACE_NOT_PRESENT ((HRESULT)0x80045368L)

//
// MessageId: PP_E_PROVENT_OBJ_GETPARENTID
//
// MessageText:
//
//  Error getting object parent CCM ID. (hr=%1)
//
#define PP_E_PROVENT_OBJ_GETPARENTID     ((HRESULT)0x80045369L)

//
// MessageId: PP_E_PROVENT_CACERT_NOTFOUND
//
// MessageText:
//
//  CA Certificate was not found in CCM.  (hr=%1)
//
#define PP_E_PROVENT_CACERT_NOTFOUND     ((HRESULT)0x8004536AL)

//
// MessageId: PP_E_PROVENT_CANT_GENERATE_ID_FOR_NON_PROFILE
//
// MessageText:
//
//  Cannot generate a PropertyID for a property that is not of Profile type. (hr=%1)
//
#define PP_E_PROVENT_CANT_GENERATE_ID_FOR_NON_PROFILE ((HRESULT)0x8004536BL)

//
// MessageId: PP_E_PROVENT_XMLNS_CCM_NOTINITIALIZED
//
// MessageText:
//
//  CCM library is not initialized
//
#define PP_E_PROVENT_XMLNS_CCM_NOTINITIALIZED ((HRESULT)0x8004536CL)

//
// MessageId: PP_E_PROVENT_XMLNS_CCMNAME_INVALID
//
// MessageText:
//
//  The property name returned by CCM Cache is invalid
//
#define PP_E_PROVENT_XMLNS_CCMNAME_INVALID ((HRESULT)0x8004536DL)

//
// MessageId: PP_E_PROVENT_XMLNS_CCMSAFEARRAY_INVALID
//
// MessageText:
//
//  The safe array returned by CCM Cache is invalid
//
#define PP_E_PROVENT_XMLNS_CCMSAFEARRAY_INVALID ((HRESULT)0x8004536EL)

//
// MessageId: PP_E_PROVENT_XMLNS_CCMVALUE_INVALID
//
// MessageText:
//
//  The value returned by CCM Cache is invalid
//
#define PP_E_PROVENT_XMLNS_CCMVALUE_INVALID ((HRESULT)0x8004536FL)

//
// MessageId: PP_E_PROVENT_XMLNS_PROP_NOTFOUND
//
// MessageText:
//
//  CCM property not found
//
#define PP_E_PROVENT_XMLNS_PROP_NOTFOUND ((HRESULT)0x80045370L)

//
// MessageId: PP_E_PROVENT_XMLNS_CCMOBJECT_INVALID
//
// MessageText:
//
//  Invalid pointer to ICCMObject
//
#define PP_E_PROVENT_XMLNS_CCMOBJECT_INVALID ((HRESULT)0x80045371L)

//
// MessageId: PP_E_PROVENT_XMLNS_CCMCACHE_INVALID
//
// MessageText:
//
//  Invalid pointer to ICCMCache
//
#define PP_E_PROVENT_XMLNS_CCMCACHE_INVALID ((HRESULT)0x80045372L)

//
// MessageId: PP_E_PROVENT_XMLNS_CCMID_INVALID
//
// MessageText:
//
//  Invalid ccm identifier
//
#define PP_E_PROVENT_XMLNS_CCMID_INVALID ((HRESULT)0x80045373L)

//
// MessageId: PP_E_PROVENT_XMLNS_EMPTYCOLLECTION
//
// MessageText:
//
//  The CCM Cached schema object contains no XML schemas
//
#define PP_E_PROVENT_XMLNS_EMPTYCOLLECTION ((HRESULT)0x80045374L)

//
// MessageId: PP_E_PROVENT_XMLNS_INVALIDENTRY
//
// MessageText:
//
//  The CCM Cached schema contains an invalid entry
//
#define PP_E_PROVENT_XMLNS_INVALIDENTRY  ((HRESULT)0x80045375L)

//
// MessageId: PP_E_PROVENT_CLOGSUBSCRIPTION_NOTFOUND
//
// MessageText:
//
//  Cannot find the requested CLog subscription
//
#define PP_E_PROVENT_CLOGSUBSCRIPTION_NOTFOUND ((HRESULT)0x80045376L)

//
// MessageId: PP_E_PROVENT_CLOGSUBSCRIPTION_NAMEINVALID
//
// MessageText:
//
//  Invalid name for a CLog subscription
//
#define PP_E_PROVENT_CLOGSUBSCRIPTION_NAMEINVALID ((HRESULT)0x80045377L)

//------------------------------------------------------------------------------
// Provisioned Property Rendering Engine Error Codes
//------------------------------------------------------------------------------
#define PP_E_PROVPROPERTY_RENDER_BASE                  PP_E_PROVENT_BASE + 0x30
//
// MessageId: PP_E_PROVPROPERTY_RENDER_ITERATORNOTINIT
//
// MessageText:
//
//  Iterator not initialized. (hr=%1)
//
#define PP_E_PROVPROPERTY_RENDER_ITERATORNOTINIT ((HRESULT)0x80045380L)

//
// MessageId: PP_E_PROVPROPERTY_RENDER_NOCOLL
//
// MessageText:
//
//  No property collection to iterate over. (hr=%1)
//
#define PP_E_PROVPROPERTY_RENDER_NOCOLL  ((HRESULT)0x80045381L)

//
// MessageId: PP_E_PROVPROPERTY_RENDER_BADFILTER
//
// MessageText:
//
//  Bad iterator filter specified on the PropertyCollection. (hr=%1)
//
#define PP_E_PROVPROPERTY_RENDER_BADFILTER ((HRESULT)0x80045382L)

//
// MessageId: PP_E_PROVPROPERTY_RENDER_INCORRECT_FIELD_TYPE
//
// MessageText:
//
//  Incorrect Property type. (hr=%1)
//
#define PP_E_PROVPROPERTY_RENDER_INCORRECT_FIELD_TYPE ((HRESULT)0x80045383L)

//
// MessageId: PP_E_PROVPROPERTY_RENDER_TWOTOUACCEPTANCE
//
// MessageText:
//
//  Two or more TOUAcceptance blocks; error. (hr=%1)
//
#define PP_E_PROVPROPERTY_RENDER_TWOTOUACCEPTANCE ((HRESULT)0x80045384L)

//
// MessageId: PP_E_PROVPROPERTY_RENDER_TWOPROPERTYSTAR
//
// MessageText:
//
//  Two or more Property* node in the PageData. (hr=%1)
//
#define PP_E_PROVPROPERTY_RENDER_TWOPROPERTYSTAR ((HRESULT)0x80045385L)

//------------------------------------------------------------------------------
// Provisioned Property Validation Error Codes
//------------------------------------------------------------------------------
#define PP_E_PROVPROPERTY_VALIDATE_BASE  PP_E_PROVPROPERTY_RENDER_BASE + 0x20
//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_USE_SINGLE_VALIDATE
//
// MessageText:
//
//  Calling the wrong Validate function; call the single property validate. (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_USE_SINGLE_VALIDATE ((HRESULT)0x800453A0L)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_USE_COMPOUND_VALIDATE
//
// MessageText:
//
//  Calling the wrong Validate function; call the compound property validate. (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_USE_COMPOUND_VALIDATE ((HRESULT)0x800453A1L)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_INTEGER_NOTNUMERIC
//
// MessageText:
//
//  Type Validation - Integer - Value is not numeric. (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_INTEGER_NOTNUMERIC ((HRESULT)0x800453A2L)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_INTEGER_NOTINT
//
// MessageText:
//
//  Type Validation - Integer - Value is not an integer. (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_INTEGER_NOTINT ((HRESULT)0x800453A3L)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_INTEGER_TOOLOW
//
// MessageText:
//
//  Type Validation - Integer - Value is too low. (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_INTEGER_TOOLOW ((HRESULT)0x800453A4L)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_INTEGER_TOOHIGH
//
// MessageText:
//
//  Type Validation - Integer - Value is too high. (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_INTEGER_TOOHIGH ((HRESULT)0x800453A5L)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_FLOAT_NOTNUMERIC
//
// MessageText:
//
//  Type Validation - Float - Value is not numeric. (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_FLOAT_NOTNUMERIC ((HRESULT)0x800453A6L)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_FLOAT_TOOLOW
//
// MessageText:
//
//  Type Validation - Float - Value is too low. (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_FLOAT_TOOLOW ((HRESULT)0x800453A7L)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_FLOAT_TOOHIGH
//
// MessageText:
//
//  Type Validation - Float - Value is too high. (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_FLOAT_TOOHIGH ((HRESULT)0x800453A8L)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_STRING_TOOSHORT
//
// MessageText:
//
//  Type Validation - String - Too Short. (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_STRING_TOOSHORT ((HRESULT)0x800453A9L)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_STRING_TOOLONG
//
// MessageText:
//
//  Type Validation - String - Too Long. (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_STRING_TOOLONG ((HRESULT)0x800453AAL)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_LIST_INVALID
//
// MessageText:
//
//  Type Validation - List - Invalid Entry. (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_LIST_INVALID ((HRESULT)0x800453ABL)

//
// MessageId: PP_E_COMPONENT_NAME_MISSING
//
// MessageText:
//
//  Component name missing. (hr=%1)
//
#define PP_E_COMPONENT_NAME_MISSING      ((HRESULT)0x800453ACL)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_LOCATION_STREET_BLANK
//
// MessageText:
//
//  Type Validation - Location - Street is blank (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_LOCATION_STREET_BLANK ((HRESULT)0x800453ADL)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_LOCATION_COUNTY_BLANK
//
// MessageText:
//
//  Type Validation - Location - County is blank (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_LOCATION_COUNTY_BLANK ((HRESULT)0x800453AEL)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_LOCATION_CITY_BLANK
//
// MessageText:
//
//  Type Validation - Location - City is blank (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_LOCATION_CITY_BLANK ((HRESULT)0x800453AFL)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_LOCATION_COUNTY_INVALID
//
// MessageText:
//
//  Type Validation - Location - County is invalid (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_LOCATION_COUNTY_INVALID ((HRESULT)0x800453B0L)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_LOCATION_NICKNAME_NOT_ALLOWED
//
// MessageText:
//
//  Type Validation - Location - Nickname is not supported in this location (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_LOCATION_NICKNAME_NOT_ALLOWED ((HRESULT)0x800453B1L)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_PHONENUM_INVALID
//
// MessageText:
//
//  Type Validation - Phone Number - Invalid (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_PHONENUM_INVALID ((HRESULT)0x800453B2L)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_DATE_MISSING
//
// MessageText:
//
//  Type Validation - Date - Missing (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_DATE_MISSING ((HRESULT)0x800453B3L)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_DATE_YEAR_MISSING
//
// MessageText:
//
//  Type Validation - Date - Year Missing (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_DATE_YEAR_MISSING ((HRESULT)0x800453B4L)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_DATE_YEAR_INVALID_CHARS
//
// MessageText:
//
//  Type Validation - Date - Year contains invalid chars (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_DATE_YEAR_INVALID_CHARS ((HRESULT)0x800453B5L)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_DATE_YEAR_NOT_4DIGIT
//
// MessageText:
//
//  Type Validation - Date - Year is not 4 digits (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_DATE_YEAR_NOT_4DIGIT ((HRESULT)0x800453B6L)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_DATE_MONTH_MISSING
//
// MessageText:
//
//  Type Validation - Date - Month Missing (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_DATE_MONTH_MISSING ((HRESULT)0x800453B7L)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_DATE_MONTH_INVALID
//
// MessageText:
//
//  Type Validation - Date - Month is Invalid (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_DATE_MONTH_INVALID ((HRESULT)0x800453B8L)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_DATE_DAY_MISSING
//
// MessageText:
//
//  Type Validation - Date - Day Missing (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_DATE_DAY_MISSING ((HRESULT)0x800453B9L)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_DATE_DAY_INVALID
//
// MessageText:
//
//  Type Validation - Date - Day is Invalid (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_DATE_DAY_INVALID ((HRESULT)0x800453BAL)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_DATE_INVALID
//
// MessageText:
//
//  Type Validation - Date - Invalid (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_DATE_INVALID ((HRESULT)0x800453BBL)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_DATE_TOOLOW
//
// MessageText:
//
//  Type Validation - Date - Too far in past (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_DATE_TOOLOW ((HRESULT)0x800453BCL)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_DATE_TOOHIGH
//
// MessageText:
//
//  Type Validation - Date - Too far in future (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_DATE_TOOHIGH ((HRESULT)0x800453BDL)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_DATE_IN_FUTURE
//
// MessageText:
//
//  Type Validation - Date - In Future - Not Allowed (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_DATE_IN_FUTURE ((HRESULT)0x800453BEL)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_DATE_IN_PAST
//
// MessageText:
//
//  Type Validation - Date - In Past - Not Allowed (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_DATE_IN_PAST ((HRESULT)0x800453BFL)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_CHECKBOX_INVALID
//
// MessageText:
//
//  Type Validation - Checkbox - Invalid value (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_CHECKBOX_INVALID ((HRESULT)0x800453C0L)

//
// MessageId: PP_E_PROVPROPERTY_LOCATION_MISSINGVALIDATION
//
// MessageText:
//
//  A component of location is missing validation rules (hr=%1)
//
#define PP_E_PROVPROPERTY_LOCATION_MISSINGVALIDATION ((HRESULT)0x800453C1L)

//
// MessageId: PP_E_PROVPROPERTY_LONGITUDEOUTOFRANGE
//
// MessageText:
//
//  longitude must be between -180 and 180 (hr=%1)
//
#define PP_E_PROVPROPERTY_LONGITUDEOUTOFRANGE ((HRESULT)0x800453C2L)

//
// MessageId: PP_E_PROVPROPERTY_LATITUDEOUTOFRANGE
//
// MessageText:
//
//  latitude must be between -90 and 90 (hr=%1)
//
#define PP_E_PROVPROPERTY_LATITUDEOUTOFRANGE ((HRESULT)0x800453C3L)

//------------------------------------------------------------------------------
// Provisioned Entity for site certs
//------------------------------------------------------------------------------
#define PP_E_PROVENT_SITECERT_BASE PP_E_PROVPROPERTY_VALIDATE_BASE + 0x30                    
//
// MessageId: PP_E_PROVENT_CCMCERT_BADFMT
//
// MessageText:
//
//  The certificate parsing code failed to find a required field in the certificate during conversion from external to internal XML format.
//
#define PP_E_PROVENT_CCMCERT_BADFMT      ((HRESULT)0x800453D0L)

//
// MessageId: PP_E_PROVENT_CCMCERT_NULLSITENAME
//
// MessageText:
//
//  The certificate provisioning code into CCM failed to retrieve the name for the parent object. This parent object could be a partner site, partner CA or trusted realm.
//
#define PP_E_PROVENT_CCMCERT_NULLSITENAME ((HRESULT)0x800453D1L)

//
// MessageId: PP_E_PROVENT_CCMCERT_NODATA
//
// MessageText:
//
//  The certificate provisioning code into CCM did not find a value for the certificate, name of the certificate, encoding type or IsCurrent flag.
//
#define PP_E_PROVENT_CCMCERT_NODATA      ((HRESULT)0x800453D2L)

//
// MessageId: PP_E_PROVENT_CCMCERT_ADDPROP_BADARG
//
// MessageText:
//
//  The certificate provisioning code into CCM detected an invalid value when converting from the external XML to internal XML formats.
//
#define PP_E_PROVENT_CCMCERT_ADDPROP_BADARG ((HRESULT)0x800453D3L)

//
// MessageId: PP_E_PROVENT_CCMCERT_FMT_NULLDOMNODE
//
// MessageText:
//
//  The certificate provisioning code into CCM failed to create an XML node when converting from the external XML to internal XML formats.
//
#define PP_E_PROVENT_CCMCERT_FMT_NULLDOMNODE ((HRESULT)0x800453D4L)

//
// MessageId: PP_E_PROVENT_CCMCERT_NO_SITENAME
//
// MessageText:
//
//  The certificate provisioning code into CCM could not find the name for the site or CA Partner to generate a unique name for the certificate.
//
#define PP_E_PROVENT_CCMCERT_NO_SITENAME ((HRESULT)0x800453D5L)

//
// MessageId: PP_E_PROVENT_SITECERT_VALIDATE_UNEXPECTED
//
// MessageText:
//
//  The initialization step was not completed during the certificate provisioning code into CCM.
//
#define PP_E_PROVENT_SITECERT_VALIDATE_UNEXPECTED ((HRESULT)0x800453D6L)

//
// MessageId: PP_E_PROVENT_CCMCERT_GET_EMPTYPROP
//
// MessageText:
//
//  There is no value in a retrieved site, CA partner or trusted realm certificate property.
//
#define PP_E_PROVENT_CCMCERT_GET_EMPTYPROP ((HRESULT)0x800453D7L)

//
// MessageId: PP_E_PROVENT_SITECERT_UNEXPECTED
//
// MessageText:
//
//  The base64 encoded certificate was not loaded. This is an internal error.
//
#define PP_E_PROVENT_SITECERT_UNEXPECTED ((HRESULT)0x800453D8L)

//
// MessageId: PP_E_PROVENT_CCMCERT_GETPROP_UNEXPECTED
//
// MessageText:
//
//  The base64 encoded certificate was already loaded. This is an internal error.
//
#define PP_E_PROVENT_CCMCERT_GETPROP_UNEXPECTED ((HRESULT)0x800453D9L)

//
// MessageId: PP_E_PROVENT_CCMCERT_NOPROPNODE
//
// MessageText:
//
//  Unexpected NULL DOM node pointer detected when removing derived certificate property for exporting from CCM.
//
#define PP_E_PROVENT_CCMCERT_NOPROPNODE  ((HRESULT)0x800453DAL)

//
// MessageId: PP_E_PROVENT_CCMCERT_BAD_ENCODING
//
// MessageText:
//
//  The encoding type is invalid. Only ASN.1 (1) is supported.
//
#define PP_E_PROVENT_CCMCERT_BAD_ENCODING ((HRESULT)0x800453DBL)

//
// MessageId: PP_E_PROVENT_CCMCERT_ADD_CERTNAME
//
// MessageText:
//
//  The certificate provisioning code into CCM failed to retrieve the name node for a site, CA partner or trusted realm certificate.
//
#define PP_E_PROVENT_CCMCERT_ADD_CERTNAME ((HRESULT)0x800453DCL)

//
// MessageId: PP_E_PROVENT_CCMCERT_BAD_CERTDATA
//
// MessageText:
//
//  The certificate provisioning code into CCM detected bad data type.
//
#define PP_E_PROVENT_CCMCERT_BAD_CERTDATA ((HRESULT)0x800453DDL)

//
// MessageId: PP_E_PROVENT_CCMCERT_PROPUNINIT
//
// MessageText:
//
//  The certificate provisioning code into CCM detected wrong sequence of operations: certificate was not loaded for generating DB properties.
//
#define PP_E_PROVENT_CCMCERT_PROPUNINIT  ((HRESULT)0x800453DEL)

//
// MessageId: PP_E_PROVENT_CACERT_MISSINGPROPS
//
// MessageText:
//
//  The certificate name or data is missing during provisioning of CA certificate into CCM.
//
#define PP_E_PROVENT_CACERT_MISSINGPROPS ((HRESULT)0x800453DFL)

//
// MessageId: PP_E_PROVENT_SITECERT_MISSINGPROPS
//
// MessageText:
//
//  The certificate name or data is missing during provisioning of site certificate into CCM.
//
#define PP_E_PROVENT_SITECERT_MISSINGPROPS ((HRESULT)0x800453E0L)

//
// MessageId: PP_E_PROVENT_CACERT_BADISSUEDCERT
//
// MessageText:
//
//  The certificate provisioning code in CCM failed to verify signature of CA certificate. This could be due to bad or corrupted certificate.
//
#define PP_E_PROVENT_CACERT_BADISSUEDCERT ((HRESULT)0x800453E1L)

//
// MessageId: PP_E_PROVENT_CACERT_EMPTYCDP
//
// MessageText:
//
//  The certificate provisioning code in CCM failed to verify signature of CA certificate. This could be due to missing CDP in the CA certificate.
//
#define PP_E_PROVENT_CACERT_EMPTYCDP     ((HRESULT)0x800453E2L)

//
// MessageId: PP_E_PROVENT_CACERT_BADCDP
//
// MessageText:
//
//  The provisioning code in CCM failed to create a CRL object. This could be due to bad or corrupted CDP in the CA certificate.
//
#define PP_E_PROVENT_CACERT_BADCDP       ((HRESULT)0x800453E3L)

//
// MessageId: PP_E_PROVENT_CACERT_EMPTYFRESHESTCRL
//
// MessageText:
//
//  The provisioning code in CCM failed to create a CRL object. This could be due to missing freshest CRL in the CA certificate.
//
#define PP_E_PROVENT_CACERT_EMPTYFRESHESTCRL ((HRESULT)0x800453E4L)

//
// MessageId: PP_E_PROVENT_CACERT_ISSUEDCERTNODE
//
// MessageText:
//
//  The CA certificate provisioning code failed to remove the <CACertificate_IssuedCertificate> after creating the CDP object in CCM.
//
#define PP_E_PROVENT_CACERT_ISSUEDCERTNODE ((HRESULT)0x800453E5L)

//
// MessageId: PP_E_PROVENT_CCMCERT_NO_AKI
//
// MessageText:
//
//  The certificate provisioning code did not find the AUTHORITY_KEY_IDENTIFIER2 in the certificate.
//
#define PP_E_PROVENT_CCMCERT_NO_AKI      ((HRESULT)0x800453E6L)

//------------------------------------------------------------------------------
// Wrapper class for site certs
//------------------------------------------------------------------------------
#define PP_E_SITECERTS_BASE    PP_E_PROVENT_SITECERT_BASE + 0x20  
//
// MessageId: PP_E_SITECERTS_BADSITENAMELENGTH
//
// MessageText:
//
//  The name parent object retrieved from CCM for the site certificate to be removed is empty.
//
#define PP_E_SITECERTS_BADSITENAMELENGTH ((HRESULT)0x800453F1L)

//
// MessageId: PP_E_SITECERTS_BADCERTID
//
// MessageText:
//
//  The instance ID in CCM for the site certificate that is being removed is invalid.
//
#define PP_E_SITECERTS_BADCERTID         ((HRESULT)0x800453F2L)

//
// MessageId: PP_E_SITECERTS_BADCERTNAMELENGTH
//
// MessageText:
//
//  The site certificate that is either being inserted or made current has a name longer than 256 characters.
//
#define PP_E_SITECERTS_BADCERTNAMELENGTH ((HRESULT)0x800453F3L)

//
// MessageId: PP_E_SITECERTS_REPLACEMENT_CERT
//
// MessageText:
//
//  The site certificate that is replacing the current certificate is already current.
//
#define PP_E_SITECERTS_REPLACEMENT_CERT  ((HRESULT)0x800453F4L)

//
// MessageId: PP_E_SITECERTS_REPLACEMENT_CERT_NOTFOUND
//
// MessageText:
//
//  No non-current certificate is found to replace the current certificate.
//
#define PP_E_SITECERTS_REPLACEMENT_CERT_NOTFOUND ((HRESULT)0x800453F5L)

//
// MessageId: PP_E_SITECERTS_SEARCH_CRITERIA
//
// MessageText:
//
//  An invalid search criteria for site/CA partner/trusted realm certificates was detected
//
#define PP_E_SITECERTS_SEARCH_CRITERIA   ((HRESULT)0x800453F6L)

//
// MessageId: PP_E_SITECERT_NOTFOUND
//
// MessageText:
//
//  The site/CA partner/trusted realm certificate with the given name cannot be found.
//
#define PP_E_SITECERT_NOTFOUND           ((HRESULT)0x800453F7L)

//
// MessageId: PP_E_SITECERTS_TOOMANY_SUBOBJECTS
//
// MessageText:
//
//  There are more than 256 sub objects including certificates for the site.
//
#define PP_E_SITECERTS_TOOMANY_SUBOBJECTS ((HRESULT)0x800453F8L)

//
// MessageId: PP_W_SITECERTS_REMOVE_INCOMPLETE
//
// MessageText:
//
//  The specified certificate could not be deleted. However, it is no longer current. The replacement certificate or the first non-current certificate has been made current.
//
#define PP_W_SITECERTS_REMOVE_INCOMPLETE ((HRESULT)0x800453F9L)

//
// MessageId: PP_E_SITECERTS_CURRENT_CERT_EXISTS
//
// MessageText:
//
//  There is already a current certificate on the requested site.  This must be made non-current before inserting a new current certificate.
//
#define PP_E_SITECERTS_CURRENT_CERT_EXISTS ((HRESULT)0x800453FAL)

//
// MessageId: PP_E_SITECERTS_TOO_MANY_CURRENT_CERTS
//
// MessageText:
//
//  There are more than one current certs of the specified algorithm.  This is an error state; please cleanup CCM.
//
#define PP_E_SITECERTS_TOO_MANY_CURRENT_CERTS ((HRESULT)0x800453FBL)

//
// MessageId: PP_E_SITECERTS_EXISTING_CERT_WITH_SAME_NAME
//
// MessageText:
//
//  There already exists a certificate with the same name as the one being inserted.
//
#define PP_E_SITECERTS_EXISTING_CERT_WITH_SAME_NAME ((HRESULT)0x800453FCL)

//
// MessageId: PP_E_SITECERTS_CANNOT_RENAME_CERT
//
// MessageText:
//
//  The certificate being inserted already exists with a different name.
//
#define PP_E_SITECERTS_CANNOT_RENAME_CERT ((HRESULT)0x800453FDL)

//------------------------------------------------------------------------------
// CRL provisioning
//------------------------------------------------------------------------------
#define PP_E_PROVENT_CRL_BASE  PP_E_PROVENT_SITECERT_BASE + 0x10  = PP_E_PROVENT_BASE + 0xB0
//
// MessageId: PP_E_PROVENT_CRL_NOPROP
//
// MessageText:
//
//  A NULL XML DOM node pointer was detected while provisioning a CRL into CCM.
//
#define PP_E_PROVENT_CRL_NOPROP          ((HRESULT)0x80045400L)

//
// MessageId: PP_E_PROVENT_CRL_NOCACERT
//
// MessageText:
//
//  No parent (CA Certificate) object was found in CCM for the given CRL.
//
#define PP_E_PROVENT_CRL_NOCACERT        ((HRESULT)0x80045401L)

//
// MessageId: PP_E_PROVENT_CRL_EMPTYVALUE
//
// MessageText:
//
//  Invalid XML stream was detected during the provisioning of a CRL object into CCM.
//
#define PP_E_PROVENT_CRL_EMPTYVALUE      ((HRESULT)0x80045402L)

//
// MessageId: PP_E_PROVENT_CRL_TYPE_UNEXPECTED
//
// MessageText:
//
//  An invalid internal type was detected when provisioning a CRL type into CCM.
//
#define PP_E_PROVENT_CRL_TYPE_UNEXPECTED ((HRESULT)0x80045403L)

//
// MessageId: PP_E_PROVENT_CRLINFO_BADLENGTH
//
// MessageText:
//
//  The base64 ASN.1 encoded CRL resulted in an empty string during provisioning of a CRL object into CCM.
//
#define PP_E_PROVENT_CRLINFO_BADLENGTH   ((HRESULT)0x80045404L)

//
// MessageId: PP_E_PROVENT_CRLINFO_BADTIME
//
// MessageText:
//
//  The next update or current time on the CRL is bad.
//
#define PP_E_PROVENT_CRLINFO_BADTIME     ((HRESULT)0x80045405L)

//
// MessageId: PP_E_PROVENT_CRLINFO_NUMBER
//
// MessageText:
//
//  No CRL number was found during provisioning of a CRL into CCM.
//
#define PP_E_PROVENT_CRLINFO_NUMBER      ((HRESULT)0x80045406L)

//
// MessageId: PP_E_PROVENT_CRL_NOKEY
//
// MessageText:
//
//  The CRL provisioning failed to generate a name for the CRL object.
//
#define PP_E_PROVENT_CRL_NOKEY           ((HRESULT)0x80045407L)

//
// MessageId: PP_E_PROVENT_CRL_NODERIVEDPROP
//
// MessageText:
//
//  The CRL provisioning failed because it could not find one or more of CRL number, base number, this or next update time.
//
#define PP_E_PROVENT_CRL_NODERIVEDPROP   ((HRESULT)0x80045408L)

//
// MessageId: PP_E_PROVENT_CRL_HASDERIVEDPROP
//
// MessageText:
//
//  The XML to provision a CRL object is invalid; there are one or more of CRL number, base number, this or next update time.
//
#define PP_E_PROVENT_CRL_HASDERIVEDPROP  ((HRESULT)0x80045409L)

//
// MessageId: PP_E_PROVENT_CRL_XML
//
// MessageText:
//
//  An invalid XML was detected while provisioning a CRL object into CCM.
//
#define PP_E_PROVENT_CRL_XML             ((HRESULT)0x8004540AL)

//
// MessageId: PP_E_PROVENT_CRL_NOCACERTNAME
//
// MessageText:
//
//  The parent object (CA partner certificate) for a CRL object in CCM does not have a name in CCM.
//
#define PP_E_PROVENT_CRL_NOCACERTNAME    ((HRESULT)0x8004540BL)

//
// MessageId: PP_E_PROVENT_CRL_BADID
//
// MessageText:
//
//  The CRL object in CCM has an invalid instance id.
//
#define PP_E_PROVENT_CRL_BADID           ((HRESULT)0x8004540CL)

//
// MessageId: PP_E_PROVENT_CRL_NOTFOUND
//
// MessageText:
//
//  No CRL object was found in CCM for the given name. (The name is derived from the CDP.)
//
#define PP_E_PROVENT_CRL_NOTFOUND        ((HRESULT)0x8004540DL)

//
// MessageId: PP_E_PROVENT_CRL_TOOMANY
//
// MessageText:
//
//  More than 8 CRL objects with the given name was found. (The name is derived from the CDP.)
//
#define PP_E_PROVENT_CRL_TOOMANY         ((HRESULT)0x8004540EL)

//------------------------------------------------------------------------------
// CA Partner
//------------------------------------------------------------------------------
#define PP_E_PROVENT_CAPARTNER_BASE   PP_E_PROVENT_CRL_BASE + 0x10 = PP_E_PROVENT_BASE + 0xC0                            
//
// MessageId: PP_E_PROVENT_CAPARTNER_GET_EMPTYPROP
//
// MessageText:
//
//  A property for a CA partner object in CCM has no value. This property could be the certificate name, data, thumbprint, subject key identifier, or authority key identifier.
//
#define PP_E_PROVENT_CAPARTNER_GET_EMPTYPROP ((HRESULT)0x80045410L)

//
// MessageId: PP_E_COMPONENT_NAME_NOT_SPECIFIED
//
// MessageText:
//
//  A value was given for a compound property without specifying the component name.
//
#define PP_E_COMPONENT_NAME_NOT_SPECIFIED ((HRESULT)0x80045411L)

// base 0x5500
//
// MessageId: PP_E_HIP_INVALID_CONFIG
//
// MessageText:
//
//  HIP - Invalid HIP Configuration
//
#define PP_E_HIP_INVALID_CONFIG          ((HRESULT)0x80045500L)

//
// MessageId: PP_E_HIP_IMAGE_CONFIGSTR_PARSE_ERR
//
// MessageText:
//
//  HIP - Error parsing the HIPImage configuration string
//
#define PP_E_HIP_IMAGE_CONFIGSTR_PARSE_ERR ((HRESULT)0x80045501L)

//
// MessageId: PP_E_HIP_CACHE_MISSING
//
// MessageText:
//
//  HIP - Cache is missing
//
#define PP_E_HIP_CACHE_MISSING           ((HRESULT)0x80045502L)

//
// MessageId: PP_E_HIP_CACHE_ERROR
//
// MessageText:
//
//  HIP - Cache error
//
#define PP_E_HIP_CACHE_ERROR             ((HRESULT)0x80045503L)

//
// MessageId: PP_E_HIP_VALIDATION_ERROR
//
// MessageText:
//
//  HIP - Validation Error
//
#define PP_E_HIP_VALIDATION_ERROR        ((HRESULT)0x80045504L)

//
// MessageId: PP_E_HIP_VALIDATION_WRONG
//
// MessageText:
//
//  HIP Validation - Solution was incorrect
//
#define PP_E_HIP_VALIDATION_WRONG        ((HRESULT)0x80045505L)

//
// MessageId: PP_E_HIP_NOAUDIO
//
// MessageText:
//
//  HIP - This server does not support HIP Audio
//
#define PP_E_HIP_NOAUDIO                 ((HRESULT)0x80045506L)

//
// MessageId: PP_E_HIP_AUDIO_NOTINIT
//
// MessageText:
//
//  HIP - HIP Audio has not yet been initialized
//
#define PP_E_HIP_AUDIO_NOTINIT           ((HRESULT)0x80045507L)

//
// MessageId: PP_E_HIP_MINIMAL_COOKIE
//
// MessageText:
//
//  HIP - We have a minimal cookie when we expected the full one.
//
#define PP_E_HIP_MINIMAL_COOKIE          ((HRESULT)0x80045508L)

//
// MessageId: PP_E_HIP_AUDIO_BAD_REVERBLEN
//
// MessageText:
//
//  HIP Audio - Bad Reverb Length; expect > 0
//
#define PP_E_HIP_AUDIO_BAD_REVERBLEN     ((HRESULT)0x80045509L)

//
// MessageId: PP_E_HIP_AUDIO_BAD_SNR
//
// MessageText:
//
//  HIP Audio - Bad SignalToNoise Ratio; expect > 0
//
#define PP_E_HIP_AUDIO_BAD_SNR           ((HRESULT)0x8004550AL)

//
// MessageId: PP_E_HIP_GDIPLUS_ERROR
//
// MessageText:
//
//  HIP - GDI Plus Failed to Initialize Corbuirectly
//
#define PP_E_HIP_GDIPLUS_ERROR           ((HRESULT)0x8004550BL)

//
// MessageId: PP_E_HIP_IMAGE_VALIDCHARS_TOO_LONG
//
// MessageText:
//
//  HIP - List of valid chars is too long
//
#define PP_E_HIP_IMAGE_VALIDCHARS_TOO_LONG ((HRESULT)0x8004550CL)

//
// MessageId: PP_E_HIP_IMAGE_VALIDCHARS_TOO_SHORT
//
// MessageText:
//
//  HIP - List of valid chars is too short (< 10)
//
#define PP_E_HIP_IMAGE_VALIDCHARS_TOO_SHORT ((HRESULT)0x8004550DL)

//
// MessageId: PP_E_HIP_SIGNATURE_BASE64FAIL
//
// MessageText:
//
//  HIP Signatures - Base 64 Encoding Failed
//
#define PP_E_HIP_SIGNATURE_BASE64FAIL    ((HRESULT)0x8004550EL)

//
// MessageId: PP_E_HIP_DISABLED_UNKNOWN
//
// MessageText:
//
//  HIP - Disabled (Reason Unknown)
//
#define PP_E_HIP_DISABLED_UNKNOWN        ((HRESULT)0x8004550FL)

//
// MessageId: PP_E_HIP_DISABLED_SERVER
//
// MessageText:
//
//  HIP - Disabled on this Server
//
#define PP_E_HIP_DISABLED_SERVER         ((HRESULT)0x80045510L)

//
// MessageId: PP_E_HIP_DISABLED_APPLICATION
//
// MessageText:
//
//  HIP - Disabled.  Requested Application is not allowed on this server.
//
#define PP_E_HIP_DISABLED_APPLICATION    ((HRESULT)0x80045511L)

//
// MessageId: PP_E_HIP_TEST_INJECTED_ERROR
//
// MessageText:
//
//  HIP - TEST Fault Injection
//
#define PP_E_HIP_TEST_INJECTED_ERROR     ((HRESULT)0x80045512L)

// base 0x5601
//
// MessageId: PP_E_SOFTAUTH_FAILED
//
// MessageText:
//
//  Soft auth failed.
//
#define PP_E_SOFTAUTH_FAILED             ((HRESULT)0x80045601L)

// base 0x5700
// Errors
#define PP_E_ROLLINGUPGRADE_BASE  0x5700
//
// MessageId: PP_E_CURRENTRELEASETOOLONG
//
// MessageText:
//
//  Current release string too long
//
#define PP_E_CURRENTRELEASETOOLONG       ((HRESULT)0x80045700L)

//
// MessageId: PP_E_NEWRELEASETOOLONG
//
// MessageText:
//
//  New release string too long
//
#define PP_E_NEWRELEASETOOLONG           ((HRESULT)0x80045701L)

//
// MessageId: PP_E_NOROLUP_SETTINGS
//
// MessageText:
//
//  Rolling upgrade state is missing or can't be initialized
//
#define PP_E_NOROLUP_SETTINGS            ((HRESULT)0x80045703L)

//
// MessageId: PP_E_WRONG_MACHINESTATE
//
// MessageText:
//
//  Machine state is wrong
//
#define PP_E_WRONG_MACHINESTATE          ((HRESULT)0x80045704L)

//
// MessageId: PP_E_CURRENTRELEASE_MUSTBEDIGITS
//
// MessageText:
//
//  Current release string must contain only digits
//
#define PP_E_CURRENTRELEASE_MUSTBEDIGITS ((HRESULT)0x80045705L)

//
// MessageId: PP_E_NEWRELEASE_MUSTBEDIGITS
//
// MessageText:
//
//  New release string must contain only digits
//
#define PP_E_NEWRELEASE_MUSTBEDIGITS     ((HRESULT)0x80045706L)

//
// MessageId: PP_E_NO_PERFCOUNTER
//
// MessageText:
//
//  Can not initialize rolling upgrade perf counters
//
#define PP_E_NO_PERFCOUNTER              ((HRESULT)0x80045709L)

//
// MessageId: PP_E_NO_OSFILEMALFORMED
//
// MessageText:
//
//  File path is mal-formatted
//
#define PP_E_NO_OSFILEMALFORMED          ((HRESULT)0x8004570AL)

//
// MessageId: PP_E_NO_CURRENTRELEASE
//
// MessageText:
//
//  current release is not specified
//
#define PP_E_NO_CURRENTRELEASE           ((HRESULT)0x8004570BL)

//
// MessageId: PP_E_NO_NEWRELEASE
//
// MessageText:
//
//  New release is not specified
//
#define PP_E_NO_NEWRELEASE               ((HRESULT)0x8004570CL)

//
// MessageId: PP_E_RU_INVALIDURLMAPPING
//
// MessageText:
//
//  New release is not specified
//
#define PP_E_RU_INVALIDURLMAPPING        ((HRESULT)0x8004570DL)

// base 0x5800
//
// MessageId: PP_E_MOBILECREDS_PHONENUMBER_INVALID
//
// MessageText:
//
//  Phone number in mobile credential is not valid (Shorter than 4 digits or non-digit charater present).
//
#define PP_E_MOBILECREDS_PHONENUMBER_INVALID ((HRESULT)0x80045800L)

//
// MessageId: PP_E_MOBILECREDS_PHONENUMBER_BLANK
//
// MessageText:
//
//  Phone number in mobile credential is blank.
//
#define PP_E_MOBILECREDS_PHONENUMBER_BLANK ((HRESULT)0x80045801L)

//
// MessageId: PP_E_MOBILECREDS_PHONENUMBER_EXIST
//
// MessageText:
//
//  Mobile credential for the phone number already exists.
//
#define PP_E_MOBILECREDS_PHONENUMBER_EXIST ((HRESULT)0x80045802L)

//
// MessageId: PP_E_MOBILECREDS_PIN_BLANK
//
// MessageText:
//
//  Mobile pin in the mobile credential is blank.
//
#define PP_E_MOBILECREDS_PIN_BLANK       ((HRESULT)0x80045803L)

//
// MessageId: PP_E_MOBILECREDS_PIN_MISMATCH
//
// MessageText:
//
//  Mobile pin does not match.
//
#define PP_E_MOBILECREDS_PIN_MISMATCH    ((HRESULT)0x80045804L)

//
// MessageId: PP_E_MOBILECREDS_PIN_INVALID
//
// MessageText:
//
//  Mobile pin in mobile credential is not valid (Shorter than 4 digits, longer than 16 or non-digit charater present).
//
#define PP_E_MOBILECREDS_PIN_INVALID     ((HRESULT)0x80045805L)

//
// MessageId: PP_E_MOBILECREDS_PHONENUMBER_TOOSHORT
//
// MessageText:
//
//  Mobile phone in mobile credential is too short.
//
#define PP_E_MOBILECREDS_PHONENUMBER_TOOSHORT ((HRESULT)0x80045806L)

//
// MessageId: PP_E_MOBILECREDS_PHONENUMBER_TOOLONG
//
// MessageText:
//
//  Mobile phone in mobile credential is too long.
//
#define PP_E_MOBILECREDS_PHONENUMBER_TOOLONG ((HRESULT)0x80045807L)

//
// MessageId: PP_E_PHONE_CONTAINS_PIN
//
// MessageText:
//
//  The phone number contains the pin.
//
#define PP_E_PHONE_CONTAINS_PIN          ((HRESULT)0x80045808L)

// base 0x5850
//
// MessageId: PP_E_MOBILEREG_INVALID_SITEID
//
// MessageText:
//
//  Invalid site id passed to mobile registration. Make sure muid is one in the allowed list.
//
#define PP_E_MOBILEREG_INVALID_SITEID    ((HRESULT)0x80045850L)

//
// MessageId: PP_E_MOBILEREG_ALREADY_LOGGED_IN
//
// MessageText:
//
//  User already signed in before registration.
//
#define PP_E_MOBILEREG_ALREADY_LOGGED_IN ((HRESULT)0x80045851L)

//
// MessageId: PP_E_MOBILEREG_MISSING_HIPDATA
//
// MessageText:
//
//  Hip data missing in the mobile registration post.
//
#define PP_E_MOBILEREG_MISSING_HIPDATA   ((HRESULT)0x80045852L)

//
// MessageId: PP_E_MOBILEREG_MISSING_TOU_VERSION
//
// MessageText:
//
//  TOU version missing or less than 1 in the mobile registration post.
//
#define PP_E_MOBILEREG_MISSING_TOU_VERSION ((HRESULT)0x80045855L)

//
// MessageId: PP_E_MOBILEREG_INVALID_DOMAIN
//
// MessageText:
//
//  Invalid domain for the mobile registration post.
//
#define PP_E_MOBILEREG_INVALID_DOMAIN    ((HRESULT)0x80045856L)

//
// MessageId: PP_E_MOBILEREG_INVALID_ALT_EMAIL
//
// MessageText:
//
//  Alternate email address is invalid in the mobile registration post.
//
#define PP_E_MOBILEREG_INVALID_ALT_EMAIL ((HRESULT)0x80045857L)

//
// MessageId: PP_E_MOBILEREG_INVALID_HIPDATA
//
// MessageText:
//
//  Invalid Hip data in the mobile registration post.
//
#define PP_E_MOBILEREG_INVALID_HIPDATA   ((HRESULT)0x80045858L)

//
// MessageId: PP_E_MOBILEREG_MISSING_HIPTIME
//
// MessageText:
//
//  Hip time missing in the hip data for the mobile registration post.
//
#define PP_E_MOBILEREG_MISSING_HIPTIME   ((HRESULT)0x80045859L)

//
// MessageId: PP_E_MOBILEREG_HIP_TIMEOUT
//
// MessageText:
//
//  Hip time out for the mobile registration post.
//
#define PP_E_MOBILEREG_HIP_TIMEOUT       ((HRESULT)0x80045860L)

//
// MessageId: PP_E_MOBILEREG_INVALIDREGFLAG
//
// MessageText:
//
//  MobileReg flag is not set in the hip data for the mobile registration post.
//
#define PP_E_MOBILEREG_INVALIDREGFLAG    ((HRESULT)0x80045861L)

//
// MessageId: PP_E_MOBILEREG_INVALID_HIPID
//
// MessageText:
//
//  Invliad HIP ID (Not all digits or 0) in the hip data for the mobile registration post.
//
#define PP_E_MOBILEREG_INVALID_HIPID     ((HRESULT)0x80045862L)

//
// MessageId: PP_E_MOBILEREG_MISSING_HIPID
//
// MessageText:
//
//  HIP ID missing in the hip data for the mobile registration post.
//
#define PP_E_MOBILEREG_MISSING_HIPID     ((HRESULT)0x80045863L)

//
// MessageId: PP_E_MOBILEREG_USED_HIPID
//
// MessageText:
//
//  HIP ID already used in the hip data for the mobile registration post.
//
#define PP_E_MOBILEREG_USED_HIPID        ((HRESULT)0x80045864L)

// base 0x5900
//
// MessageId: PP_E_INTERNALTOKEN_MALFORMED_ISSUE_TIME
//
// MessageText:
//
//  The issue time in the pin reset request is invalid.
//
#define PP_E_INTERNALTOKEN_MALFORMED_ISSUE_TIME ((HRESULT)0x80045900L)

//
// MessageId: PP_E_INTERNALTOKEN_UNEXPECTED_LENGTH
//
// MessageText:
//
//  The length of the answers for pin reset request is bad.
//
#define PP_E_INTERNALTOKEN_UNEXPECTED_LENGTH ((HRESULT)0x80045901L)

//
// MessageId: PP_E_INTERNALTOKEN_MISSING_FIELD
//
// MessageText:
//
//  The issue time, expire time or question/answer in the pin reset request is missing or bad.
//
#define PP_E_INTERNALTOKEN_MISSING_FIELD ((HRESULT)0x80045902L)

//
// MessageId: PP_E_INTERNALTOKEN_EXPIRED
//
// MessageText:
//
//  The pin reset request contains data that have expired.
//
#define PP_E_INTERNALTOKEN_EXPIRED       ((HRESULT)0x80045903L)

// base 0x5b00
//
// MessageId: PP_E_AUTHPOLICY_NOTFOUND
//
// MessageText:
//
//  The partner policy used in the login request cannot be found as a property of "AuthPolicyXml" property type under the object "AuthPolicyHolder" in CCM, or the certificate for this partner site cannot be found in CCM.
//
#define PP_E_AUTHPOLICY_NOTFOUND         ((HRESULT)0x80045B00L)

//
// MessageId: PP_E_INVALID_AUTHPOLICY
//
// MessageText:
//
//  The XML describing the partner policy in the login request cannot be parsed.
//
#define PP_E_INVALID_AUTHPOLICY          ((HRESULT)0x80045B01L)

//
// MessageId: PP_E_INVALID_SITE_DNS
//
// MessageText:
//
//  The partner DNS used in the login request cannot be found.
//
#define PP_E_INVALID_SITE_DNS            ((HRESULT)0x80045B02L)

// base 0x5c00
//
// MessageId: PP_E_STS_REQUEST_NOTSUPPORTED
//
// MessageText:
//
//  STS request type not supported (Only http://schemas.xmlsoap.org/ws/2004/04/security/trust/Issue supported).
//
#define PP_E_STS_REQUEST_NOTSUPPORTED    ((HRESULT)0x80045C00L)

//
// MessageId: PP_E_STS_INVALID_REQUEST
//
// MessageText:
//
//  Invalid STS request.
//
#define PP_E_STS_INVALID_REQUEST         ((HRESULT)0x80045C01L)

//
// MessageId: PP_E_WEBSSO_SERVICE_REFERRAL
//
// MessageText:
//
//  Referral not supported (Only http://Passport.NET/tb supported).
//
#define PP_E_WEBSSO_SERVICE_REFERRAL     ((HRESULT)0x80045C02L)

//
// MessageId: PP_E_WEBSSO_INVALID_REQUEST
//
// MessageText:
//
//  Invalid WebSSO request, either user name is empty or request not over SSL.
//
#define PP_E_WEBSSO_INVALID_REQUEST      ((HRESULT)0x80045C03L)

//
// MessageId: PP_E_WEBSSO_REQUEST_BADXML
//
// MessageText:
//
//  UNUSED: This error code is not used anymore.
//
#define PP_E_WEBSSO_REQUEST_BADXML       ((HRESULT)0x80045C04L)

//
// MessageId: PP_E_WEBSSO_ASSERTION_MISMATCH
//
// MessageText:
//
//  UNUSED: This error code is not used anymore.
//
#define PP_E_WEBSSO_ASSERTION_MISMATCH   ((HRESULT)0x80045C05L)

//
// MessageId: PP_E_WEBSSO_EXPIRED_TOKEN
//
// MessageText:
//
//  WebSSO token expired.
//
#define PP_E_WEBSSO_EXPIRED_TOKEN        ((HRESULT)0x80045C06L)

//
// MessageId: PP_E_WEBSSO_FORCEDSIGNIN_NEEDED
//
// MessageText:
//
//  Forced signin required.
//
#define PP_E_WEBSSO_FORCEDSIGNIN_NEEDED  ((HRESULT)0x80045C07L)

//
// MessageId: PP_E_WEBSSO_PASSWORDAUTH_NEEDED
//
// MessageText:
//
//  Password authentication required.
//
#define PP_E_WEBSSO_PASSWORDAUTH_NEEDED  ((HRESULT)0x80045C08L)

//
// MessageId: PP_E_WEBSSO_PINAUTH_NEEDED
//
// MessageText:
//
//  Pin authentication required.
//
#define PP_E_WEBSSO_PINAUTH_NEEDED       ((HRESULT)0x80045C09L)

//
// MessageId: PP_E_WEBSSO_CERTAUTH_NEEDED
//
// MessageText:
//
//  Certificate authentication required.
//
#define PP_E_WEBSSO_CERTAUTH_NEEDED      ((HRESULT)0x80045C0AL)

//
// MessageId: PP_E_WEBSSO_STONGERCREDS_NEEDED
//
// MessageText:
//
//  Strong credential authentication required.
//
#define PP_E_WEBSSO_STONGERCREDS_NEEDED  ((HRESULT)0x80045C0BL)

//
// MessageId: PP_E_STS_SIGALGORITHM_NOTSUPPORTED
//
// MessageText:
//
//  Alogrithm not supported (Only http://www.w3.org/2000/09/xmldsig#rsa-sha1 supported).
//
#define PP_E_STS_SIGALGORITHM_NOTSUPPORTED ((HRESULT)0x80045C0CL)

//
// MessageId: PP_E_WEBSSO_TOKENTYPE_MISMATCH
//
// MessageText:
//
//  WebSSO Token type mismatch (Either Passport 1.4 or GXA V1 allowed).
//
#define PP_E_WEBSSO_TOKENTYPE_MISMATCH   ((HRESULT)0x80045C0DL)

//
// MessageId: PP_E_BASE64ENCODE_FAILED
//
// MessageText:
//
//  Failed to do base64 encoding.
//
#define PP_E_BASE64ENCODE_FAILED         ((HRESULT)0x80045C0EL)

//
// MessageId: PP_E_BASE64DECODE_FAILED
//
// MessageText:
//
//  Failed to do base64 decoding.
//
#define PP_E_BASE64DECODE_FAILED         ((HRESULT)0x80045C0FL)

//
// MessageId: PP_E_WEBSSO_INVALID_TIME
//
// MessageText:
//
//  Time format is invalid.
//
#define PP_E_WEBSSO_INVALID_TIME         ((HRESULT)0x80045C10L)

//
// MessageId: PP_E_WEBSSO_REQUEST_TOOLARGE
//
// MessageText:
//
//  UNUSED: This error code is not used anymore.
//
#define PP_E_WEBSSO_REQUEST_TOOLARGE     ((HRESULT)0x80045C11L)

//
// MessageId: PP_E_WEBSSO_CORRUPTED_ASSERTION
//
// MessageText:
//
//  Invalid WebSSO assertion.
//
#define PP_E_WEBSSO_CORRUPTED_ASSERTION  ((HRESULT)0x80045C12L)

//
// MessageId: PP_E_STS_INVALID_SECONDARY_CREDTYPE
//
// MessageText:
//
//  UNUSED: This error code is not used anymore.
//
#define PP_E_STS_INVALID_SECONDARY_CREDTYPE ((HRESULT)0x80045C13L)

//
// MessageId: PP_E_STS_BAD_SECONDARY_CRED
//
// MessageText:
//
//  UNUSED: This error code is not used anymore.
//
#define PP_E_STS_BAD_SECONDARY_CRED      ((HRESULT)0x80045C14L)

//
// MessageId: PP_E_WEBSSO_CORRUPTED_SESSION_KEY
//
// MessageText:
//
//  WebSSO session key invalid.
//
#define PP_E_WEBSSO_CORRUPTED_SESSION_KEY ((HRESULT)0x80045C15L)

//
// MessageId: PP_E_INVALID_ASSERTION
//
// MessageText:
//
//  WebSSO invalid assertion.
//
#define PP_E_INVALID_ASSERTION           ((HRESULT)0x80045C17L)

//
// MessageId: PP_E_STS_PARTNER_NOT_FOUND
//
// MessageText:
//
//  STS partner not found.
//
#define PP_E_STS_PARTNER_NOT_FOUND       ((HRESULT)0x80045C18L)

//
// MessageId: PP_E_STS_PARTNER_DOES_NOT_HAVE_CERT
//
// MessageText:
//
//  STS partner do not have a certificate provisioned.
//
#define PP_E_STS_PARTNER_DOES_NOT_HAVE_CERT ((HRESULT)0x80045C19L)

//
// MessageId: PP_E_STS_INVALID_POLICY
//
// MessageText:
//
//  STS invalid policy.
//
#define PP_E_STS_INVALID_POLICY          ((HRESULT)0x80045C1AL)

//
// MessageId: PP_E_STS_PROFILE_ACCRUE_REDIR
//
// MessageText:
//
//  Profile accural redirect.
//
#define PP_E_STS_PROFILE_ACCRUE_REDIR    ((HRESULT)0x80045C1BL)

//
// MessageId: PP_E_PROXYSTS_INVALID_REQ_TIMEWINDOW
//
// MessageText:
//
//  The encrypted proxy auth request timewindow has expired or invalide.
//
#define PP_E_PROXYSTS_INVALID_REQ_TIMEWINDOW ((HRESULT)0x80045C1CL)

//
// MessageId: PP_E_PROXYSTS_INVALID_PASSWORD_HASH
//
// MessageText:
//
//  Invalid password (hash) in the encrypted proxy auth request.
//
#define PP_E_PROXYSTS_INVALID_PASSWORD_HASH ((HRESULT)0x80045C1DL)

//
// MessageId: PP_E_PROXYSTS_INVALID_REQUEST
//
// MessageText:
//
//  Invalid encrypted proxy auth request.
//
#define PP_E_PROXYSTS_INVALID_REQUEST    ((HRESULT)0x80045C1EL)

//
// MessageId: PP_E_PROXYSTS_EXCEEDED_REQUEST_LIMIT
//
// MessageText:
//
//  Invalid encrypted proxy auth request.
//
#define PP_E_PROXYSTS_EXCEEDED_REQUEST_LIMIT ((HRESULT)0x80045C1FL)

//
// MessageId: PP_E_PROXYSTS_INVALID_RSA_ENCRYPTION_KEY
//
// MessageText:
//
//  Invalid encrypted proxy auth request.
//
#define PP_E_PROXYSTS_INVALID_RSA_ENCRYPTION_KEY ((HRESULT)0x80045C20L)

//
// MessageId: PP_E_PROXYSTS_UNEXPECTED_FAILURE
//
// MessageText:
//
//  An unexpect failure has occurred.
//
#define PP_E_PROXYSTS_UNEXPECTED_FAILURE ((HRESULT)0x80045C21L)

//
// MessageId: PP_E_PARTNERPUBLICKEY_JSCRIPT_HEADERERROR
//
// MessageText:
//
//  Public key blob failed in signature verification
//
#define PP_E_PARTNERPUBLICKEY_JSCRIPT_HEADERERROR ((HRESULT)0x80045C22L)

// base 0x5e00
//CCM Cache client errors
//#define PP_E_CCMCACHE_BASE  0x5e00
//
// MessageId: PP_E_CCM_INSTANCENOTEXIST
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_INSTANCENOTEXIST        ((HRESULT)0x80045E00L)

//
// MessageId: PP_E_CCM_PROPERTYNOTEXIST
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_PROPERTYNOTEXIST        ((HRESULT)0x80045E01L)

//
// MessageId: PP_E_CCM_OBJECTTYPENOTEXIST
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_OBJECTTYPENOTEXIST      ((HRESULT)0x80045E02L)

//
// MessageId: PP_E_CCM_CACHEITEMNOTEXIST
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_CACHEITEMNOTEXIST       ((HRESULT)0x80045E03L)

//
// MessageId: PP_E_CCM_ENTITYNAMENOTEXIST
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_ENTITYNAMENOTEXIST      ((HRESULT)0x80045E04L)

//
// MessageId: PP_E_CCM_INSTANCENOTINITIALIZED
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_INSTANCENOTINITIALIZED  ((HRESULT)0x80045E05L)

//
// MessageId: PP_E_CCM_PROPERTYNOTINITIALIZED
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_PROPERTYNOTINITIALIZED  ((HRESULT)0x80045E06L)

//
// MessageId: PP_E_CCM_PROPERTYTYPENOTEXIST
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_PROPERTYTYPENOTEXIST    ((HRESULT)0x80045E07L)

//
// MessageId: PP_E_CCM_PROPERTYTYPEINVALID
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_PROPERTYTYPEINVALID     ((HRESULT)0x80045E08L)

//
// MessageId: PP_E_CCM_PROPERTYVALUEINVALID
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_PROPERTYVALUEINVALID    ((HRESULT)0x80045E09L)

//
// MessageId: PP_E_CCM_RELATIONSHIPVALUEINVALID
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_RELATIONSHIPVALUEINVALID ((HRESULT)0x80045E0AL)

//
// MessageId: PP_E_CCM_OBJTYPEID_NOT_FOUND
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_OBJTYPEID_NOT_FOUND     ((HRESULT)0x80045E0BL)

//
// MessageId: PP_E_CCM_INSTANCECACHE_NULL
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_INSTANCECACHE_NULL      ((HRESULT)0x80045E0CL)

//
// MessageId: PP_E_CCM_INSTANCE_NULL
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_INSTANCE_NULL           ((HRESULT)0x80045E0DL)

//
// MessageId: PP_E_CCM_NOTINITIALIZED
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_NOTINITIALIZED          ((HRESULT)0x80045E0EL)

//
// MessageId: PP_E_CCM_PROPERTYBAGINVALID
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_PROPERTYBAGINVALID      ((HRESULT)0x80045E0FL)

//
// MessageId: PP_E_CCM_INVALIDPROGID
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_INVALIDPROGID           ((HRESULT)0x80045E10L)

//
// MessageId: PP_E_CCM_RELEASEENTRY
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_RELEASEENTRY            ((HRESULT)0x80045E11L)

//
// MessageId: PP_E_CCM_ADDREFENTRY
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_ADDREFENTRY             ((HRESULT)0x80045E12L)

//
// MessageId: PP_E_CCM_OBJINSTANCEEXISTS
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_OBJINSTANCEEXISTS       ((HRESULT)0x80045E13L)

//
// MessageId: PP_E_CCM_OBJINSTANCECONFLICT
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_OBJINSTANCECONFLICT     ((HRESULT)0x80045E14L)

//
// MessageId: PP_E_CCM_ENTITYIDNOTEXIST
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_ENTITYIDNOTEXIST        ((HRESULT)0x80045E15L)

//
// MessageId: PP_E_CCM_RENAMEINSTANCENOTEFFECTIVE
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_RENAMEINSTANCENOTEFFECTIVE ((HRESULT)0x80045E16L)

//
// MessageId: PP_E_CCM_INVALIDOBJTYPEXML
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_INVALIDOBJTYPEXML       ((HRESULT)0x80045E17L)

//
// MessageId: PP_E_CCM_INVALIDBLOB
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_INVALIDBLOB             ((HRESULT)0x80045E18L)

//
// MessageId: PP_E_CCM_INVALIDDATE
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_INVALIDDATE             ((HRESULT)0x80045E19L)

//
// MessageId: PP_E_CCMINVALIDRELATIONSHIPVALUE
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCMINVALIDRELATIONSHIPVALUE ((HRESULT)0x80045E1AL)

//
// MessageId: PP_E_CCM_PROPERTYVALUENULL
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_PROPERTYVALUENULL       ((HRESULT)0x80045E1BL)

//
// MessageId: PP_E_CCM_SERVICENAMENOTEXIST
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_SERVICENAMENOTEXIST     ((HRESULT)0x80045E1CL)

//
// MessageId: PP_E_CCM_INVALIDMACHINEID
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_INVALIDMACHINEID        ((HRESULT)0x80045E1DL)

//
// MessageId: PP_E_CCM_FILETRNOTFOUND
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_FILETRNOTFOUND          ((HRESULT)0x80045E1EL)

//
// MessageId: PP_E_CCM_MAXFILTERSEXCEEDED
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_MAXFILTERSEXCEEDED      ((HRESULT)0x80045E1FL)

//
// MessageId: PP_E_CCM_FILTERNOTINITIALIZED
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//  
//
#define PP_E_CCM_FILTERNOTINITIALIZED    ((HRESULT)0x80045E20L)

//
// MessageId: PP_E_CCM_FILTERAREADYEXIST
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//  
//  
//
#define PP_E_CCM_FILTERAREADYEXIST       ((HRESULT)0x80045E21L)

//
// MessageId: PP_E_CCM_INVALIDFILTERPROPID
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_INVALIDFILTERPROPID     ((HRESULT)0x80045E22L)

//
// MessageId: PP_E_CCM_FILTER_NULL
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_FILTER_NULL             ((HRESULT)0x80045E23L)

//
// MessageId: PP_E_CCM_RELEASE_SET
//
// MessageText:
//
//  SetRelease() can only be called once
//
#define PP_E_CCM_RELEASE_SET             ((HRESULT)0x80045E24L)

//
// MessageId: PP_E_CCM_MACHINEID_SET
//
// MessageText:
//
//  SetMachineID() can only be called once
//
#define PP_E_CCM_MACHINEID_SET           ((HRESULT)0x80045E25L)

//
// MessageId: PP_E_CCM_INVALIDNOTIFICATION
//
// MessageText:
//
//  the notification data is invalid
//
#define PP_E_CCM_INVALIDNOTIFICATION     ((HRESULT)0x80045E26L)

// base 0x5f00
//
// MessageId: PP_E_SCHED_NAMEBUFFER_TOOSMALL
//
// MessageText:
//
//  Name buffer is too small
//
#define PP_E_SCHED_NAMEBUFFER_TOOSMALL   ((HRESULT)0x80045F00L)

//
// MessageId: PP_E_SCHED_NOCONFIG_PROPS
//
// MessageText:
//
//  No configuration properties for PPScheduler
//
#define PP_E_SCHED_NOCONFIG_PROPS        ((HRESULT)0x80045F01L)

//
// MessageId: PP_E_SCHED_TIMESERVER_INVALIDPROP
//
// MessageText:
//
//  Invalid property for time server
//
#define PP_E_SCHED_TIMESERVER_INVALIDPROP ((HRESULT)0x80045F02L)

//
// MessageId: PP_E_SCHED_WORKITEM_EXISTS
//
// MessageText:
//
//  Duplicate workitem
//
#define PP_E_SCHED_WORKITEM_EXISTS       ((HRESULT)0x80045F03L)

//
// MessageId: PP_E_SCHED_TASKID_INVALID
//
// MessageText:
//
//  The task id is invalid
//
#define PP_E_SCHED_TASKID_INVALID        ((HRESULT)0x80045F04L)

//
// MessageId: PP_E_SCHED_TASKSTARTTIME_INVALID
//
// MessageText:
//
//  The task start time is invalid
//
#define PP_E_SCHED_TASKSTARTTIME_INVALID ((HRESULT)0x80045F05L)

//
// MessageId: PP_E_SCHED_TASKENDTIME_INVALID
//
// MessageText:
//
//  The task end time is invalid
//
#define PP_E_SCHED_TASKENDTIME_INVALID   ((HRESULT)0x80045F06L)

//
// MessageId: PP_E_SCHED_TASKTIMEOFDAY_INVALID
//
// MessageText:
//
//  The task time-of-day is invalid
//
#define PP_E_SCHED_TASKTIMEOFDAY_INVALID ((HRESULT)0x80045F07L)

//
// MessageId: PP_E_SCHED_TASKLASTRUN_INVALID
//
// MessageText:
//
//  The task last run is invalid
//
#define PP_E_SCHED_TASKLASTRUN_INVALID   ((HRESULT)0x80045F08L)

//
// MessageId: PP_E_SCHED_TASKCOMMANDXML_INVALID
//
// MessageText:
//
//  The task command xml is invalid
//
#define PP_E_SCHED_TASKCOMMANDXML_INVALID ((HRESULT)0x80045F09L)

//
// MessageId: PP_E_SCHED_TASKPROGID_INVALID
//
// MessageText:
//
//  The task progid is invalid
//
#define PP_E_SCHED_TASKPROGID_INVALID    ((HRESULT)0x80045F0AL)

//
// MessageId: PP_E_SCHED_TASKMAXOCCUR_EXCEEDED
//
// MessageText:
//
//  The task max oocurences is invalid
//
#define PP_E_SCHED_TASKMAXOCCUR_EXCEEDED ((HRESULT)0x80045F0CL)

//
// MessageId: PP_E_SCHED_TASK_EXPIRED
//
// MessageText:
//
//  The task expired
//
#define PP_E_SCHED_TASK_EXPIRED          ((HRESULT)0x80045F0DL)

//
// MessageId: PP_E_SCHED_TASKRECURRINGTIME_INVALID
//
// MessageText:
//
//  The task recurring time is invalid
//
#define PP_E_SCHED_TASKRECURRINGTIME_INVALID ((HRESULT)0x80045F0EL)

//
// MessageId: PP_E_SCHED_WORKITEM_NOTFOUND
//
// MessageText:
//
//  Workitem doesn't exist
//
#define PP_E_SCHED_WORKITEM_NOTFOUND     ((HRESULT)0x80045F0FL)

//
// MessageId: PP_E_SCHED_SHUTTINGDOWN
//
// MessageText:
//
//  Scheduler is shutting down
//
#define PP_E_SCHED_SHUTTINGDOWN          ((HRESULT)0x80045F10L)

//
// MessageId: PP_E_SCHED_TASK_NOTPENDING
//
// MessageText:
//
//  The specified task is not pending
//
#define PP_E_SCHED_TASK_NOTPENDING       ((HRESULT)0x80045F11L)

//
// MessageId: PP_E_SCHED_SCHEDULER_NOT_INITIALIZED
//
// MessageText:
//
//  Scheduler is not initialized
//
#define PP_E_SCHED_SCHEDULER_NOT_INITIALIZED ((HRESULT)0x80045F12L)

//
// MessageId: PP_E_SCHED_DISPATCHER_NOT_INITIALIZED
//
// MessageText:
//
//  Dispatcher is not initialized
//
#define PP_E_SCHED_DISPATCHER_NOT_INITIALIZED ((HRESULT)0x80045F13L)

//
// MessageId: PP_E_SCHED_COMMANDID_INVALID
//
// MessageText:
//
//  Invalid command id
//
#define PP_E_SCHED_COMMANDID_INVALID     ((HRESULT)0x80045F14L)

//
// MessageId: PP_E_SCHED_COMMANDID_NOTFOUND
//
// MessageText:
//
//  The specified command id doesn't exist
//
#define PP_E_SCHED_COMMANDID_NOTFOUND    ((HRESULT)0x80045F15L)

//
// MessageId: PP_E_SCHED_COMMANDTYPE_INVALID
//
// MessageText:
//
//  The command type is invalid
//
#define PP_E_SCHED_COMMANDTYPE_INVALID   ((HRESULT)0x80045F16L)

//
// MessageId: PP_E_SCHED_COMMANDPROGID_INVALID
//
// MessageText:
//
//  The command progid is invalid
//
#define PP_E_SCHED_COMMANDPROGID_INVALID ((HRESULT)0x80045F17L)

//
// MessageId: PP_E_SCHED_TASKEXECUTE_EXCEPTION
//
// MessageText:
//
//  Exception while executing a task
//
#define PP_E_SCHED_TASKEXECUTE_EXCEPTION ((HRESULT)0x80045F18L)

//
// MessageId: PP_E_SCHED_TASK_REMOVE
//
// MessageText:
//
//  The task will be removed from the pending list
//
#define PP_E_SCHED_TASK_REMOVE           ((HRESULT)0x80045F19L)

//
// MessageId: PP_E_SCHED_COMMANDXML_INVALID
//
// MessageText:
//
//  Invalid xml in the input command
//
#define PP_E_SCHED_COMMANDXML_INVALID    ((HRESULT)0x80045F1AL)

//
// MessageId: PP_E_SCHED_DISPVARTYPE_INVALID
//
// MessageText:
//
//  Invalid VT type for a dispatch command
//
#define PP_E_SCHED_DISPVARTYPE_INVALID   ((HRESULT)0x80045F1BL)

//
// MessageId: PP_E_SCHED_DISPPROGID_INVALID
//
// MessageText:
//
//  Invalid prog id for a dispatch command
//
#define PP_E_SCHED_DISPPROGID_INVALID    ((HRESULT)0x80045F1CL)

//
// MessageId: PP_E_SCHED_DISPMETHOD_INVALID
//
// MessageText:
//
//  Invalid method for a dispatch command
//
#define PP_E_SCHED_DISPMETHOD_INVALID    ((HRESULT)0x80045F1DL)

//
// MessageId: PP_E_SCHED_COMMANDLINE_INVALID
//
// MessageText:
//
//  Invalid command line
//
#define PP_E_SCHED_COMMANDLINE_INVALID   ((HRESULT)0x80045F1EL)

//
// MessageId: PP_E_SCHED_POLICYPATH_INVALID
//
// MessageText:
//
//  Invalid policy path
//
#define PP_E_SCHED_POLICYPATH_INVALID    ((HRESULT)0x80045F1FL)

//
// MessageId: PP_E_SCHED_CCMOBJECT_NOTFOUND
//
// MessageText:
//
//  The specified CCM object doesn't exist
//
#define PP_E_SCHED_CCMOBJECT_NOTFOUND    ((HRESULT)0x80045F21L)

//
// MessageId: PP_E_SCHED_W32TIMESYNC_NOTAVAILABLE
//
// MessageText:
//
//  The time sync service is not available
//
#define PP_E_SCHED_W32TIMESYNC_NOTAVAILABLE ((HRESULT)0x80045F22L)

//
// MessageId: PP_E_SCHED_W32TIMESYNC_EXCEPTION
//
// MessageText:
//
//  Exception while calling the time sync service 
//
#define PP_E_SCHED_W32TIMESYNC_EXCEPTION ((HRESULT)0x80045F23L)

//
// MessageId: PP_E_SCHED_DATACENTER_NOTFOUND
//
// MessageText:
//
//  The specified data center doesn't exist
//
#define PP_E_SCHED_DATACENTER_NOTFOUND   ((HRESULT)0x80045F24L)

//
// MessageId: PP_E_SCHED_POLICYNAME_INVALID
//
// MessageText:
//
//  Invalid policy name
//
#define PP_E_SCHED_POLICYNAME_INVALID    ((HRESULT)0x80045F25L)

//
// MessageId: PP_E_SCHED_POLICYINPUT_INVALID
//
// MessageText:
//
//  Invalid policy input
//
#define PP_E_SCHED_POLICYINPUT_INVALID   ((HRESULT)0x80045F26L)

//
// MessageId: PP_E_SCHED_POLICYHANDLER_INVALID
//
// MessageText:
//
//  Invalid policy handler
//
#define PP_E_SCHED_POLICYHANDLER_INVALID ((HRESULT)0x80045F27L)

// base 0x5F50
//------------------------------------------------------------------------------
// UPS Connector errors
//------------------------------------------------------------------------------
#define PP_E_UPSCON_BASE       0x5F50
//
// MessageId: PP_E_UPSCON_SHUTTINGDOWN
//
// MessageText:
//
//  The service is shutting down
//
#define PP_E_UPSCON_SHUTTINGDOWN         ((HRESULT)0x80045F50L)

//
// MessageId: PP_E_UPSCON_CLOSETIMEOUT
//
// MessageText:
//
//  Timeout while waiting for he http connection to close.
//
#define PP_E_UPSCON_CLOSETIMEOUT         ((HRESULT)0x80045F51L)

//
// MessageId: PP_E_UPSCON_ALREADYSENDING
//
// MessageText:
//
//  The current soap client is currently in use and cannot send another request.
//
#define PP_E_UPSCON_ALREADYSENDING       ((HRESULT)0x80045F52L)

//
// MessageId: PP_E_UPSCON_INVALIDRESPONSEPTR
//
// MessageText:
//
//  Invalid pointer to a CAsyncResponse object
//
#define PP_E_UPSCON_INVALIDRESPONSEPTR   ((HRESULT)0x80045F53L)

//
// MessageId: PP_E_UPSCON_INVALIDMETHOD
//
// MessageText:
//
//  The soap method is not supported.
//
#define PP_E_UPSCON_INVALIDMETHOD        ((HRESULT)0x80045F54L)

//
// MessageId: PP_E_UPSCON_HTTPREQUESTERROR
//
// MessageText:
//
//  Unknown http request error
//
#define PP_E_UPSCON_HTTPREQUESTERROR     ((HRESULT)0x80045F55L)

//
// MessageId: PP_E_UPSCON_SOAPFAULT
//
// MessageText:
//
//  The soap request returned a soap fault
//
#define PP_E_UPSCON_SOAPFAULT            ((HRESULT)0x80045F56L)

//
// MessageId: PP_E_UPSCON_INVALIDASYNCOBJ
//
// MessageText:
//
//  Invalid pointer to an asynchronous object
//
#define PP_E_UPSCON_INVALIDASYNCOBJ      ((HRESULT)0x80045F57L)

//
// MessageId: PP_E_UPSCON_RETRYREQUEST
//
// MessageText:
//
//  The request will be retried
//
#define PP_E_UPSCON_RETRYREQUEST         ((HRESULT)0x80045F58L)

//
// MessageId: PP_E_UPSCON_INVALIDHANDLE
//
// MessageText:
//
//  Invalid win32 handle
//
#define PP_E_UPSCON_INVALIDHANDLE        ((HRESULT)0x80045F59L)

//
// MessageId: PP_E_UPSCON_EMPTYQUEUE
//
// MessageText:
//
//  The batching queue is empty (unexpected)
//
#define PP_E_UPSCON_EMPTYQUEUE           ((HRESULT)0x80045F5AL)

//
// MessageId: PP_E_UPSCON_EMPTYPOOL
//
// MessageText:
//
//  The pool of soap connections is empty
//
#define PP_E_UPSCON_EMPTYPOOL            ((HRESULT)0x80045F5BL)

//
// MessageId: PP_E_UPSCON_INVALIDPUID
//
// MessageText:
//
//  Input parameter: Invalid NET id
//
#define PP_E_UPSCON_INVALIDPUID          ((HRESULT)0x80045F5CL)

//
// MessageId: PP_E_UPSCON_INVALIDDATASET
//
// MessageText:
//
//  Input parameter: Invalid dataset string
//
#define PP_E_UPSCON_INVALIDDATASET       ((HRESULT)0x80045F5DL)

//
// MessageId: PP_E_UPSCON_UNKSOAPFAULTERROR
//
// MessageText:
//
//  Unknwon soap fault error
//
#define PP_E_UPSCON_UNKSOAPFAULTERROR    ((HRESULT)0x80045F5EL)

//
// MessageId: PP_E_UPSCON_CCMCACHE_INVALID
//
// MessageText:
//
//  Invalid CCM cache pointer
//
#define PP_E_UPSCON_CCMCACHE_INVALID     ((HRESULT)0x80045F5FL)

//
// MessageId: PP_E_UPSCON_INVALIDURL
//
// MessageText:
//
//  Invalid url string
//
#define PP_E_UPSCON_INVALIDURL           ((HRESULT)0x80045F60L)

//
// MessageId: PP_E_UPSCON_INVALIDMAPPING
//
// MessageText:
//
//  Invalid string in the PP-UPS property map
//
#define PP_E_UPSCON_INVALIDMAPPING       ((HRESULT)0x80045F61L)

//
// MessageId: PP_E_UPSCON_INVALIDPROPNAME
//
// MessageText:
//
//  Invalid property name
//
#define PP_E_UPSCON_INVALIDPROPNAME      ((HRESULT)0x80045F62L)

//
// MessageId: PP_E_UPSCON_VERSIONMISSING
//
// MessageText:
//
//  The version property is missing
//
#define PP_E_UPSCON_VERSIONMISSING       ((HRESULT)0x80045F63L)

//
// MessageId: PP_E_UPSCON_INVALIDCLOGPUID
//
// MessageText:
//
//  The PUID in clog is invalid
//
#define PP_E_UPSCON_INVALIDCLOGPUID      ((HRESULT)0x80045F64L)

//
// MessageId: PP_E_UPSCON_NOTINITIALIZED
//
// MessageText:
//
//  Service not initialized
//
#define PP_E_UPSCON_NOTINITIALIZED       ((HRESULT)0x80045F65L)

//
// MessageId: PP_E_UPSCON_SLEEPNODATA
//
// MessageText:
//
//  The query returned no data, service can sleep
//
#define PP_E_UPSCON_SLEEPNODATA          ((HRESULT)0x80045F66L)

//
// MessageId: PP_E_UPSCON_ENDOFROWSET
//
// MessageText:
//
//  No more data
//
#define PP_E_UPSCON_ENDOFROWSET          ((HRESULT)0x80045F67L)

//
// MessageId: PP_E_UPSCON_WORKERINVALIDARRAY
//
// MessageText:
//
//  The input array is invalid
//
#define PP_E_UPSCON_WORKERINVALIDARRAY   ((HRESULT)0x80045F68L)

//
// MessageId: PP_E_UPSCON_BATCHMAXSIZE_EXCEEDED
//
// MessageText:
//
//  The input exceeds the maximum batch size
//
#define PP_E_UPSCON_BATCHMAXSIZE_EXCEEDED ((HRESULT)0x80045F69L)

//
// MessageId: PP_E_UPSCON_EMPTYBATCH
//
// MessageText:
//
//  The current batch is empty (unexpected)
//
#define PP_E_UPSCON_EMPTYBATCH           ((HRESULT)0x80045F6AL)

//
// MessageId: PP_E_UPSCON_BADBATCHENTRY
//
// MessageText:
//
//  The current batch contains an invalid entry
//
#define PP_E_UPSCON_BADBATCHENTRY        ((HRESULT)0x80045F6BL)

//
// MessageId: PP_E_UPSCON_CLOGPUIDNOTFOUND
//
// MessageText:
//
//  No PUID found in the clog entry
//
#define PP_E_UPSCON_CLOGPUIDNOTFOUND     ((HRESULT)0x80045F6CL)

//
// MessageId: PP_E_UPSCON_INVALIDCLOGSUBSCRIPTION
//
// MessageText:
//
//  Invalid clog subscription
//
#define PP_E_UPSCON_INVALIDCLOGSUBSCRIPTION ((HRESULT)0x80045F6DL)

//
// MessageId: PP_E_UPSCON_SUBSCRIPTIONNOTFOUND
//
// MessageText:
//
//  Subscription configured in CCM not found
//
#define PP_E_UPSCON_SUBSCRIPTIONNOTFOUND ((HRESULT)0x80045F6EL)

//
// MessageId: PP_E_UPSCON_INVALIDSUBSCRIPTIONTYPE
//
// MessageText:
//
//  Invalid subscription type
//
#define PP_E_UPSCON_INVALIDSUBSCRIPTIONTYPE ((HRESULT)0x80045F6FL)

//
// MessageId: PP_E_UPSCON_POOLMAXSIZE_EXCEEDED
//
// MessageText:
//
//  Maximum size of the connections pool exceeded
//
#define PP_E_UPSCON_POOLMAXSIZE_EXCEEDED ((HRESULT)0x80045F70L)

//
// MessageId: PP_E_UPSCON_EVENTLOGGER_INVALID
//
// MessageText:
//
//  Internal COM object for event logging is invalid
//
#define PP_E_UPSCON_EVENTLOGGER_INVALID  ((HRESULT)0x80045F71L)

//
// MessageId: PP_E_UPSCON_CLOGACTION_NOTSUPPORTED
//
// MessageText:
//
//  CLog action invalid or not supported
//
#define PP_E_UPSCON_CLOGACTION_NOTSUPPORTED ((HRESULT)0x80045F72L)

//
// MessageId: PP_E_UPSCON_UPSCONNECTOROBJECT_INVALID
//
// MessageText:
//
//  Internal COM object for UPS connections is invalid
//
#define PP_E_UPSCON_UPSCONNECTOROBJECT_INVALID ((HRESULT)0x80045F73L)

//
// MessageId: PP_E_UPSCON_INVALIDCLOGACTION
//
// MessageText:
//
//  CLog action property is invalid
//
#define PP_E_UPSCON_INVALIDCLOGACTION    ((HRESULT)0x80045F74L)

//
// MessageId: PP_E_UPSCON_CCMOBJECT_INVALID
//
// MessageText:
//
//  Invalid object returned by the CCM Cache Client
//
#define PP_E_UPSCON_CCMOBJECT_INVALID    ((HRESULT)0x80045F75L)

//
// MessageId: PP_E_UPSCON_INVALID_MEMBERNAME
//
// MessageText:
//
//  Member name property is invalid
//
#define PP_E_UPSCON_INVALID_MEMBERNAME   ((HRESULT)0x80045F76L)

//
// MessageId: PP_E_UPSCON_INVALID_PASSPORTID
//
// MessageText:
//
//  The Passport id for UPS authorization is invalid
//
#define PP_E_UPSCON_INVALID_PASSPORTID   ((HRESULT)0x80045F77L)

//
// MessageId: PP_E_UPSCON_CLOGCREDNAME_INVALID
//
// MessageText:
//
//  CLog credential name is invalid
//
#define PP_E_UPSCON_CLOGCREDNAME_INVALID ((HRESULT)0x80045F78L)

//
// MessageId: PP_E_UPSCON_CLOGENTRY_NOOP
//
// MessageText:
//
//  No processing for the current clog entry, entry is skipped
//
#define PP_E_UPSCON_CLOGENTRY_NOOP       ((HRESULT)0x80045F79L)

//
// MessageId: PP_E_UPSCON_CLOGENTRY_FATALERROR
//
// MessageText:
//
//  Fatal error in processing the clog entry
//
#define PP_E_UPSCON_CLOGENTRY_FATALERROR ((HRESULT)0x80045F7AL)

//
// MessageId: PP_E_UPSCON_CCMID_INVALID
//
// MessageText:
//
//  The CCM id returned by the CCM cache is invalid
//
#define PP_E_UPSCON_CCMID_INVALID        ((HRESULT)0x80045F7BL)

//
// MessageId: PP_E_UPSCON_CCMSAFEARRAY_INVALID
//
// MessageText:
//
//  The safearray returned by the CCM cache is invalid
//
#define PP_E_UPSCON_CCMSAFEARRAY_INVALID ((HRESULT)0x80045F7CL)

//
// MessageId: PP_E_UPSCON_PROPERTYMSNUSER_INVALID
//
// MessageText:
//
//  The type or data of the MSNUser property is invalid
//
#define PP_E_UPSCON_PROPERTYMSNUSER_INVALID ((HRESULT)0x80045F7DL)

//
// MessageId: PP_E_UPSCON_ASYNCCALL_FAILED
//
// MessageText:
//
//  The asynchronous call to UPS failed
//
#define PP_E_UPSCON_ASYNCCALL_FAILED     ((HRESULT)0x80045F7EL)

//
// MessageId: PP_E_UPSCON_CREDFLAGSPROP_INVALID
//
// MessageText:
//
//  The type or data of the Credential flags property is invalid
//
#define PP_E_UPSCON_CREDFLAGSPROP_INVALID ((HRESULT)0x80045F7FL)

//
// MessageId: PP_E_UPSCON_PROPERTYMSNUSER_NOTFOUND
//
// MessageText:
//
//  The MSNUser property doesn't exist, in the current migration status the property is required
//
#define PP_E_UPSCON_PROPERTYMSNUSER_NOTFOUND ((HRESULT)0x80045F80L)

//
// MessageId: PP_E_UPSCON_PROPERTYID_INVALID
//
// MessageText:
//
//  Invalid property id
//
#define PP_E_UPSCON_PROPERTYID_INVALID   ((HRESULT)0x80045F81L)

//
// MessageId: PP_E_UPSCON_PROFILEPUIDNOTFOUND
//
// MessageText:
//
//  Invalid PUID found in the profile rowset
//
#define PP_E_UPSCON_PROFILEPUIDNOTFOUND  ((HRESULT)0x80045F82L)

//
// MessageId: PP_E_UPSCON_CREDENTIALPUIDNOTFOUND
//
// MessageText:
//
//  Invalid PUID found in the credential rowset
//
#define PP_E_UPSCON_CREDENTIALPUIDNOTFOUND ((HRESULT)0x80045F83L)

//
// MessageId: PP_E_UPSCON_INVALIDMIGTYPE
//
// MessageText:
//
//  Invalid migration type specified for ups migration.
//
#define PP_E_UPSCON_INVALIDMIGTYPE       ((HRESULT)0x80045F84L)

//
// MessageId: PP_E_UPSCON_INVALIDMODULEPATH
//
// MessageText:
//
//  The current module has an invalid path.
//
#define PP_E_UPSCON_INVALIDMODULEPATH    ((HRESULT)0x80045F85L)

//
// MessageId: PP_E_UPSCON_INTERFACE_NOTSUPPORTED
//
// MessageText:
//
//  The passport object does not support the requested interface.
//
#define PP_E_UPSCON_INTERFACE_NOTSUPPORTED ((HRESULT)0x80045F86L)

//
// MessageId: PP_E_UPSCON_INVALID_VERSION
//
// MessageText:
//
//  The profile/credential version is invalid, it should be a positive number.
//
#define PP_E_UPSCON_INVALID_VERSION      ((HRESULT)0x80045F87L)

//
// MessageId: PP_E_UPSCON_MAX_ERRORS_EXCEEDED
//
// MessageText:
//
//  The numbers of errors encountered is greater than the maximum allowable value
//
#define PP_E_UPSCON_MAX_ERRORS_EXCEEDED  ((HRESULT)0x80045F88L)

//
// MessageId: PP_E_SEEDING_USER_IS_KID
//
// MessageText:
//
//  The user is a kid and thus will not be pushed to UPS
//
#define PP_E_SEEDING_USER_IS_KID         ((HRESULT)0x80045F89L)

//
// MessageId: PP_E_UPSCON_POOL_NEWCONNECTION
//
// MessageText:
//
//  Internal error, a new connection resource was created
//
#define PP_E_UPSCON_POOL_NEWCONNECTION   ((HRESULT)0x80045F8AL)

//
// MessageId: PP_E_UPSCON_INVALID_CLOGDATAPARTITIONING
//
// MessageText:
//
//  Invalid CCM value for Clog data partitioning
//
#define PP_E_UPSCON_INVALID_CLOGDATAPARTITIONING ((HRESULT)0x80045F8BL)

// base 0x6016
//
// MessageId: PP_E_CCMMGR_SERVICENOTFOUND
//
// MessageText:
//
//  Service specified in the notification command not found in list of registered services.
//
#define PP_E_CCMMGR_SERVICENOTFOUND      ((HRESULT)0x80046016L)

//
// MessageId: PP_E_CCMMGR_INAVLID_ACTION
//
// MessageText:
//
//  Action specified in the cache update command is invalid (Only add, remove and modify allowed).
//
#define PP_E_CCMMGR_INAVLID_ACTION       ((HRESULT)0x80046017L)

//
// MessageId: PP_E_CCMMGR_CMD_THREADCOUNT
//
// MessageText:
//
//  The DCOM worker thread count is invalid (Less than 1 or more than max allowed).
//
#define PP_E_CCMMGR_CMD_THREADCOUNT      ((HRESULT)0x80046025L)

//
// MessageId: PP_E_CCMMGR_CMD_BADCMDTHREAD_DECCOUNT
//
// MessageText:
//
//  The DCOM worker thread count is less than 0.
//
#define PP_E_CCMMGR_CMD_BADCMDTHREAD_DECCOUNT ((HRESULT)0x80046027L)

//
// MessageId: PP_E_CCMMGR_CMD_BADCMDTHREAD_INCCOUNT
//
// MessageText:
//
//  The DCOM worker thread count is less than or equal to 0 after increment.
//
#define PP_E_CCMMGR_CMD_BADCMDTHREAD_INCCOUNT ((HRESULT)0x80046028L)

//
// MessageId: PP_E_CCMMGR_SVC_DOMAIN_LENGTH
//
// MessageText:
//
//  Domain name length for the account of notification service is invalid (Less than 0 or greater than 256)
//
#define PP_E_CCMMGR_SVC_DOMAIN_LENGTH    ((HRESULT)0x80046029L)

//
// MessageId: PP_E_CCMMGR_SVC_SID_LENGTH
//
// MessageText:
//
//  SID length for the account of notification service is invalid (Less than 0 or greater than 512)
//
#define PP_E_CCMMGR_SVC_SID_LENGTH       ((HRESULT)0x80046030L)

//
// MessageId: PP_E_CCMMGR_DBSERVER_GETCOMPUTERNAME
//
// MessageText:
//
//  Computer DNS name length is invalid (Less than 0 or greater than 256)
//
#define PP_E_CCMMGR_DBSERVER_GETCOMPUTERNAME ((HRESULT)0x80046031L)

//
// MessageId: PP_E_CCMMGR_DBSERVER_BADSTATE
//
// MessageText:
//
//  DBServer class is in invalid state.
//
#define PP_E_CCMMGR_DBSERVER_BADSTATE    ((HRESULT)0x80046032L)

//
// MessageId: PP_E_CCMMGR_DBSERVER_BADMACHINENAME
//
// MessageText:
//
//  Failed to get computer DNS name.
//
#define PP_E_CCMMGR_DBSERVER_BADMACHINENAME ((HRESULT)0x80046033L)

//
// MessageId: PP_E_CCMMGR_DBSERVER_MACHINENOTFOUND
//
// MessageText:
//
//  Computer name entry not found in CCM DB.
//
#define PP_E_CCMMGR_DBSERVER_MACHINENOTFOUND ((HRESULT)0x80046034L)

//
// MessageId: PP_E_CCMMGR_DBSERVER_MACHINETOOMANY
//
// MessageText:
//
//  More than one computer name entry not found in CCM DB.
//
#define PP_E_CCMMGR_DBSERVER_MACHINETOOMANY ((HRESULT)0x80046035L)

//
// MessageId: PP_E_CCMMGR_DBSERVER_DATACENTERNOTFOUND
//
// MessageText:
//
//  Datacenter id not found in the CCM DB.
//
#define PP_E_CCMMGR_DBSERVER_DATACENTERNOTFOUND ((HRESULT)0x80046036L)

//
// MessageId: PP_E_CCMMGR_DBSERVER_DATACENTERTOOMANY
//
// MessageText:
//
//  More than one datacenter id found in the CCM DB.
//
#define PP_E_CCMMGR_DBSERVER_DATACENTERTOOMANY ((HRESULT)0x80046037L)

//
// MessageId: PP_E_CCMMGR_DBSERVER_SERVICESNOTFOUND
//
// MessageText:
//
//  No service entery for this computer found on in CCM DB.
//
#define PP_E_CCMMGR_DBSERVER_SERVICESNOTFOUND ((HRESULT)0x80046038L)

//
// MessageId: PP_E_CCMMGR_DBSERVER_HEARTBEAT_BADTYPE
//
// MessageText:
//
//  HeartBeat parameter in CCM DB is of wrong type (should be VT_I4).
//
#define PP_E_CCMMGR_DBSERVER_HEARTBEAT_BADTYPE ((HRESULT)0x80046041L)

//
// MessageId: PP_E_CCMMGR_DBSERVER_ACCESSGROUP_BADTYPE
//
// MessageText:
//
//  AccessDomainGroup parameter in CCM DB is of wrong type (should be VT_BSTR).
//
#define PP_E_CCMMGR_DBSERVER_ACCESSGROUP_BADTYPE ((HRESULT)0x80046042L)

//
// MessageId: PP_E_CCMMGR_DBSERVER_ACCESSGROUP_EMPTY
//
// MessageText:
//
//  AccessDomainGroup parameter in CCM DB is empty or null.
//
#define PP_E_CCMMGR_DBSERVER_ACCESSGROUP_EMPTY ((HRESULT)0x80046043L)

//
// MessageId: PP_E_CCMMGR_DBSERVER_NOTIFICATIONSETTING_TIMEOUT
//
// MessageText:
//
//  Notification thread wait time in CCM DB more than max allowed. (greater than 300000).
//
#define PP_E_CCMMGR_DBSERVER_NOTIFICATIONSETTING_TIMEOUT ((HRESULT)0x80046044L)

//
// MessageId: PP_E_CCMMGR_DBSERVER_NOTIFICATIONSETTING_NOHEARTBEAT
//
// MessageText:
//
//  HeartBeat time not found in CCM DB or is zero.
//
#define PP_E_CCMMGR_DBSERVER_NOTIFICATIONSETTING_NOHEARTBEAT ((HRESULT)0x80046045L)

//
// MessageId: PP_E_CCMMGR_DBSERVER_NOTIFICATIONSETTING_THREADCOUNT
//
// MessageText:
//
//  Notification thread count in CCM DB is more than max allowed. (greater than 32)
//
#define PP_E_CCMMGR_DBSERVER_NOTIFICATIONSETTING_THREADCOUNT ((HRESULT)0x80046046L)

//
// MessageId: PP_E_CCMMGR_DBSERVER_NOTIFICATIONSETTING_HEARTBEAT
//
// MessageText:
//
//  HeartBeat time in the CCM DB is more than max allowed (greater than 60).
//
#define PP_E_CCMMGR_DBSERVER_NOTIFICATIONSETTING_HEARTBEAT ((HRESULT)0x80046047L)

//
// MessageId: PP_E_CCMMGRSVC_DCOM_DATACENTERID
//
// MessageText:
//
//  Datacenter id specified in notification call does not match datacenter id in CCM DB.
//
#define PP_E_CCMMGRSVC_DCOM_DATACENTERID ((HRESULT)0x80046048L)

//
// MessageId: PP_E_CCMMGRSVC_DCOM_SERVERID
//
// MessageText:
//
//  Server id specified in notification call does not match server id in CCM DB.
//
#define PP_E_CCMMGRSVC_DCOM_SERVERID     ((HRESULT)0x80046049L)

//
// MessageId: PP_E_CCMMGRSVC_DCOM_TRIGGERID
//
// MessageText:
//
//  Trigger ID is 0 for the notification.
//
#define PP_E_CCMMGRSVC_DCOM_TRIGGERID    ((HRESULT)0x8004604AL)

//
// MessageId: PP_E_CCMMGR_CMD_TRIGGERID_MISMATCH
//
// MessageText:
//
//  Trigger id in the notification command does not match with trigger id in the notification call.
//
#define PP_E_CCMMGR_CMD_TRIGGERID_MISMATCH ((HRESULT)0x80046050L)

//
// MessageId: PP_E_CCMMGR_CMD_SERVERID_MISMATCH
//
// MessageText:
//
//  Server id in the notification command does not match with server id in the notification call.
//
#define PP_E_CCMMGR_CMD_SERVERID_MISMATCH ((HRESULT)0x80046051L)

//
// MessageId: PP_E_CCMMGR_CMD_INVALID_COMMAND_COUNT
//
// MessageText:
//
//  No of commands in the command list are either less than 1 or more than 128.
//
#define PP_E_CCMMGR_CMD_INVALID_COMMAND_COUNT ((HRESULT)0x80046052L)

//
// MessageId: PP_E_CCMMGR_DBSERVER_NOTIFICATIONSETTING_NOTFOUND
//
// MessageText:
//
//  Notification setting for CCMMgrSvc not found in the CCM DB.
//
#define PP_E_CCMMGR_DBSERVER_NOTIFICATIONSETTING_NOTFOUND ((HRESULT)0x80046053L)

//
// MessageId: PP_E_CCMMGR_DBSERVER_NOTIFICATIONSETTING_NOMAXTHREAD
//
// MessageText:
//
//  Max notification worker thread count in not defined in the CCM DB.
//
#define PP_E_CCMMGR_DBSERVER_NOTIFICATIONSETTING_NOMAXTHREAD ((HRESULT)0x80046054L)

//
// MessageId: PP_E_CCMMGR_DBSERVER_NOTIFICATIONSETTING_NODOMGROUP
//
// MessageText:
//
//  AccessDomainGroup notification setting empty in the CCM DB.
//
#define PP_E_CCMMGR_DBSERVER_NOTIFICATIONSETTING_NODOMGROUP ((HRESULT)0x80046055L)

//
// MessageId: PP_E_CCMMGR_DBSERVER_MAXTIMEOUT_BADTYPE
//
// MessageText:
//
//  Notification thread wait time in CCM DB is of invalid type (should be VT_I4).
//
#define PP_E_CCMMGR_DBSERVER_MAXTIMEOUT_BADTYPE ((HRESULT)0x80046056L)

//
// MessageId: PP_E_CCMMGR_ADDSERVICE_NOT_FOUND
//
// MessageText:
//
//  Service trying to register not found in the services list for this computer.
//
#define PP_E_CCMMGR_ADDSERVICE_NOT_FOUND ((HRESULT)0x80046057L)

//
// MessageId: PP_E_CCMMGR_DELSERVICE_NOT_FOUND
//
// MessageText:
//
//  Service trying to unregister not found in the services list for this computer.
//
#define PP_E_CCMMGR_DELSERVICE_NOT_FOUND ((HRESULT)0x80046058L)

//
// MessageId: PP_E_CCMMGR_DELSERVICE_NOT_REGISTERED
//
// MessageText:
//
//  Service trying to unregister is not registered.
//
#define PP_E_CCMMGR_DELSERVICE_NOT_REGISTERED ((HRESULT)0x80046059L)

//
// MessageId: PP_E_CCMMGR_CMD_NULLSVCPTR
//
// MessageText:
//
//  Service list pointer is NULL.
//
#define PP_E_CCMMGR_CMD_NULLSVCPTR       ((HRESULT)0x80046060L)

//
// MessageId: PP_E_CCMMGR_CMD_NULLNOTIFYPTR
//
// MessageText:
//
//  Notification pointer is NULL.
//
#define PP_E_CCMMGR_CMD_NULLNOTIFYPTR    ((HRESULT)0x80046061L)

//
// MessageId: PP_E_CCMMGRSVC_LONG_MODULE_PATH
//
// MessageText:
//
//  CCMMgrSvc module path is logner thax MAX_PATH.
//
#define PP_E_CCMMGRSVC_LONG_MODULE_PATH  ((HRESULT)0x80046062L)

//
// MessageId: PP_E_CCMMGRSVC_REMOVE_FILESPEC
//
// MessageText:
//
//  Failed to remove the file name path of module name.
//
#define PP_E_CCMMGRSVC_REMOVE_FILESPEC   ((HRESULT)0x80046063L)

//
// MessageId: PP_E_CCMMGR_CMD_SERVERSTART_FAILED
//
// MessageText:
//
//  Failed to start a webservice after stopping.
//
#define PP_E_CCMMGR_CMD_SERVERSTART_FAILED ((HRESULT)0x80046064L)

//
// MessageId: PP_E_CCMMGR_CMD_NOTFOUND
//
// MessageText:
//
//  Service not found in service state list.
//
#define PP_E_CCMMGR_CMD_NOTFOUND         ((HRESULT)0x80046065L)

//
// MessageId: PP_E_CCMMGR_SVC_BADCCMSVC_PTR
//
// MessageText:
//
//  Bad service pointer.
//
#define PP_E_CCMMGR_SVC_BADCCMSVC_PTR    ((HRESULT)0x80046066L)

//
// MessageId: PP_E_CCMMGR_SVC_TIMEOUT
//
// MessageText:
//
//  Notifcation thread timed out waiting for complete the notification processing.
//
#define PP_E_CCMMGR_SVC_TIMEOUT          ((HRESULT)0x80046067L)

//
// MessageId: PP_E_CCMMGR_SVC_ABANDONED
//
// MessageText:
//
//  Notifcation thread abandoned waiting for complete the notification processing.
//
#define PP_E_CCMMGR_SVC_ABANDONED        ((HRESULT)0x80046068L)

//
// MessageId: PP_E_CCMMGR_SVC_NONE_REGISTERED
//
// MessageText:
//
//  No service registered with CCMMgrSvc.
//
#define PP_E_CCMMGR_SVC_NONE_REGISTERED  ((HRESULT)0x80046069L)

//
// MessageId: PP_E_CCMMGR_SVC_BADSTATE_REG
//
// MessageText:
//
//  CCMMgrSvc is not in good state (Some globals are not initialized, etc) to register client.
//
#define PP_E_CCMMGR_SVC_BADSTATE_REG     ((HRESULT)0x8004606AL)

//
// MessageId: PP_E_CCMMGR_SVC_BADSTATE_UNREG
//
// MessageText:
//
//  CCMMgrSvc is not in good state (Some globals are not initialized, etc) to unregister client.
//
#define PP_E_CCMMGR_SVC_BADSTATE_UNREG   ((HRESULT)0x80046070L)

//
// MessageId: PP_E_CCMMGR_SVC_BADSTATE_NOTIFEXECUTE
//
// MessageText:
//
//  CCMMgrSvc is not in good state (Some globals are not initialized, etc) to execute notifications.
//
#define PP_E_CCMMGR_SVC_BADSTATE_NOTIFEXECUTE ((HRESULT)0x80046071L)

//
// MessageId: PP_E_CCMMGR_DBSERVER_MAXTHREAD_BADTYPE
//
// MessageText:
//
//  Notification thread count in CCM DB is of invalid type (should be VT_I4).
//
#define PP_E_CCMMGR_DBSERVER_MAXTHREAD_BADTYPE ((HRESULT)0x80046072L)

//
// MessageId: PP_E_CCMMGR_INAVLID_DATEFORMAT
//
// MessageText:
//
//  Date format in the XML node or attribute is invalid (Should be in YYYY:MM:DD:HH:MM:SS:FFFF).
//
#define PP_E_CCMMGR_INAVLID_DATEFORMAT   ((HRESULT)0x80046073L)

//
// MessageId: PP_E_CCMMGR_INAVLID_NTSVC_NO_ARGS
//
// MessageText:
//
//  Arguments missing for the NT Service command.
//
#define PP_E_CCMMGR_INAVLID_NTSVC_NO_ARGS ((HRESULT)0x80046074L)

//
// MessageId: PP_E_CCMMGR_INAVLID_NTSVC_ACTION
//
// MessageText:
//
//  Action is invalid for NT service command (Only start, stop and restart allowed).
//
#define PP_E_CCMMGR_INAVLID_NTSVC_ACTION ((HRESULT)0x80046075L)

//
// MessageId: PP_E_CCMMGR_CMD_GETSTATUS_INVALIDARG
//
// MessageText:
//
//  Arugments to Get Cache status command are missing or invalid.
//
#define PP_E_CCMMGR_CMD_GETSTATUS_INVALIDARG ((HRESULT)0x80046076L)

//
// MessageId: PP_E_CCMMGR_CMD_CACHEUPDATE_BAD_STATE
//
// MessageText:
//
//  Service is in bad state before commiting changes. Changes to commited.
//
#define PP_E_CCMMGR_CMD_CACHEUPDATE_BAD_STATE ((HRESULT)0x80046077L)

//
// MessageId: PP_E_CCMMGR_CMD_SVCRESET_BAD_ADSI_CLASS
//
// MessageText:
//
//  ADSI class name for WebService is null.
//
#define PP_E_CCMMGR_CMD_SVCRESET_BAD_ADSI_CLASS ((HRESULT)0x80046078L)

//
// MessageId: PP_E_CCMMGR_CMD_SVCRESET_BAD_ADSI_PATH
//
// MessageText:
//
//  ADSI path for WebService is null.
//
#define PP_E_CCMMGR_CMD_SVCRESET_BAD_ADSI_PATH ((HRESULT)0x80046079L)

//
// MessageId: PP_E_CCMMGR_CMD_SVCRESET_BAD_ADSI_SERVERCOMMENT
//
// MessageText:
//
//  ServerComment property is either not of type BSTR or NULL
//
#define PP_E_CCMMGR_CMD_SVCRESET_BAD_ADSI_SERVERCOMMENT ((HRESULT)0x8004607AL)

//
// MessageId: PP_E_CCMMGR_CMD_SVCRESET_SVC_NOTFOUND
//
// MessageText:
//
//  Web Service not installed on the machine.
//
#define PP_E_CCMMGR_CMD_SVCRESET_SVC_NOTFOUND ((HRESULT)0x8004607BL)

//
// MessageId: PP_E_CCMMGR_CMD_CACHEUPDATE_INVALID_RELTYPE
//
// MessageText:
//
//  Relation Type not supported by the client.
//
#define PP_E_CCMMGR_CMD_CACHEUPDATE_INVALID_RELTYPE ((HRESULT)0x8004607CL)

//
// MessageId: PP_E_CCMMGR_INVALID_SVC_TYPE
//
// MessageText:
//
//  Type of the service in the command XML is invalid.
//
#define PP_E_CCMMGR_INVALID_SVC_TYPE     ((HRESULT)0x8004607DL)

//
// MessageId: PP_E_CCMMGR_DBSERVER_POLLTIME_BADTYPE
//
// MessageText:
//
//  PollTime parameter in CCM DB is of wrong type (should be VT_I4).
//
#define PP_E_CCMMGR_DBSERVER_POLLTIME_BADTYPE ((HRESULT)0x8004607EL)

//
// MessageId: PP_E_CCMMGR_DBSERVER_POLLSKEW_BADTYPE
//
// MessageText:
//
//  PollSkew parameter in CCM DB is of wrong type (should be VT_I4).
//
#define PP_E_CCMMGR_DBSERVER_POLLSKEW_BADTYPE ((HRESULT)0x8004607FL)

// base 0x6100
//
// MessageId: PP_E_CCMAZ_NOTAUTHORIZED
//
// MessageText:
//
//  User is not authorizate to execute the command
//
#define PP_E_CCMAZ_NOTAUTHORIZED         ((HRESULT)0x80046100L)

//
// MessageId: PP_E_CCMAZ_INVALIDCLAIM
//
// MessageText:
//
//  Invalid operation/claim name
//
#define PP_E_CCMAZ_INVALIDCLAIM          ((HRESULT)0x80046101L)

//
// MessageId: PP_E_CCMAZ_INVALIDCLAIMCOUNT
//
// MessageText:
//
//  Invalid operations/claims count
//
#define PP_E_CCMAZ_INVALIDCLAIMCOUNT     ((HRESULT)0x80046102L)

//
// MessageId: PP_E_CCMAZ_INVALIDIMPFLAG
//
// MessageText:
//
//  Internal error: Invalid impersonation flag
//
#define PP_E_CCMAZ_INVALIDIMPFLAG        ((HRESULT)0x80046103L)

//
// MessageId: PP_E_CCMAZ_NOCONFIGKEY
//
// MessageText:
//
//  CCMAz registry key is missing or invalid
//
#define PP_E_CCMAZ_NOCONFIGKEY           ((HRESULT)0x80046104L)

//
// MessageId: PP_E_CCMAZ_STORENAME_NOTFOUND
//
// MessageText:
//
//  CCMAz store name not found in the registry
//
#define PP_E_CCMAZ_STORENAME_NOTFOUND    ((HRESULT)0x80046105L)

//
// MessageId: PP_E_CCMAZ_BADVARIANT
//
// MessageText:
//
//  Internal error: bad variant
//
#define PP_E_CCMAZ_BADVARIANT            ((HRESULT)0x80046106L)

//
// MessageId: PP_E_CCMAZ_INVALIDOBJECTCOUNT
//
// MessageText:
//
//  Invalid object types count
//
#define PP_E_CCMAZ_INVALIDOBJECTCOUNT    ((HRESULT)0x80046107L)

//
// MessageId: PP_E_CCMAZ_INVALIDOBJECTTYPE
//
// MessageText:
//
//  Invalid object type
//
#define PP_E_CCMAZ_INVALIDOBJECTTYPE     ((HRESULT)0x80046108L)

//
// MessageId: PP_E_CCMAZ_NOTINITIALIZED
//
// MessageText:
//
//  CCM Az library is not initialized
//
#define PP_E_CCMAZ_NOTINITIALIZED        ((HRESULT)0x80046109L)

//
// MessageId: PP_E_CCMAZ_AZAPPLICATION_INVALID
//
// MessageText:
//
//  The internal AzApplication object is null
//
#define PP_E_CCMAZ_AZAPPLICATION_INVALID ((HRESULT)0x8004610AL)

// base 0x6350
//
// MessageId: PP_E_PERF_ADDINSTANCE
//
// MessageText:
//
//  Failed to add perfmon instance
//
#define PP_E_PERF_ADDINSTANCE            ((HRESULT)0x80046350L)

// base 0x6400
//code manager error code
//#define  PP_E_CODEMAPS_BASE 0x6400
//
// MessageId: PP_E_RWLOCK_NOTINITIALIZED
//
// MessageText:
//
//  Service temporarily unavailable due to internal CodeManager Component error (hr=%1), please try later.
//
#define PP_E_RWLOCK_NOTINITIALIZED       ((HRESULT)0x80046400L)

//
// MessageId: PP_E_RWLOCK_CLAIMFAILED
//
// MessageText:
//
//  Service temporarily unavailable due to internal CodeManager Component error (hr=%1, Unable to acquire the lock), please try later.
//
#define PP_E_RWLOCK_CLAIMFAILED          ((HRESULT)0x80046401L)

//
// MessageId: PP_E_MAPPATH_NOTINITIALIZED
//
// MessageText:
//
//  Service temporarily unavailable due to internal CodeManager Component error (hr=%1, No PATH where to load the files from), please try later.
//
#define PP_E_MAPPATH_NOTINITIALIZED      ((HRESULT)0x80046402L)

//
// MessageId: PP_E_MAPPATH_BADPATH
//
// MessageText:
//
//  Service temporarily unavailable due to internal CodeManager Component error (hr=%1, Unable to get the path for the files), please try later.
//
#define PP_E_MAPPATH_BADPATH             ((HRESULT)0x80046403L)

//
// MessageId: PP_E_CODEFILES_BADINIPAIRS
//
// MessageText:
//
//  Service temporarily unavailable due to internal CodeManager Component error (hr=%1, Unable to load the CODEFILES section), please try later.
//
#define PP_E_CODEFILES_BADINIPAIRS       ((HRESULT)0x80046404L)

// base 0x6450
//
// MessageId: PP_E_CDS_EVHELPER_INIT_FAILED
//
// MessageText:
//
//  Service temporarily unavailable due to internal Email Validation object initialization error, please try later.
//
#define PP_E_CDS_EVHELPER_INIT_FAILED    ((HRESULT)0x80046450L)

// base 0x6500
//
// MessageId: PP_E_SRVCRYPT_INVALID_PUID
//
// MessageText:
//
//  Decrypted data successfully but PUID does not match.
//
#define PP_E_SRVCRYPT_INVALID_PUID       ((HRESULT)0x80046500L)

//
// MessageId: PP_E_SRVCRYPT_EXPIRED_BLOB
//
// MessageText:
//
//  Decrypted data successfully but the data is expired.
//
#define PP_E_SRVCRYPT_EXPIRED_BLOB       ((HRESULT)0x80046501L)

//
// MessageId: PP_E_SRVCRYPT_INVALID_PURPOSE
//
// MessageText:
//
//  The encryption purpose is invalid. Internal error.
//
#define PP_E_SRVCRYPT_INVALID_PURPOSE    ((HRESULT)0x80046502L)

//
// MessageId: PP_E_SRVCRYPT_HMAC_MISMATCH
//
// MessageText:
//
//  Failed to decrypt data. HMAC hash does not match.
//
#define PP_E_SRVCRYPT_HMAC_MISMATCH      ((HRESULT)0x80046503L)

// base 0x6550
//
// MessageId: PP_E_AS_PROCESSTRDPL_CONFIG_NOT_INITIALIZED
//
// MessageText:
//
//  In initializeing processing thread pool we see config is not inited.
//
#define PP_E_AS_PROCESSTRDPL_CONFIG_NOT_INITIALIZED ((HRESULT)0x80046550L)

//
// MessageId: PP_E_AS_PIDEPOSITORY_INVALID_THREADPOOL_POINTER
//
// MessageText:
//
//  Puid info depository is supplied with invalid back pointer to thread pool.
//
#define PP_E_AS_PIDEPOSITORY_INVALID_THREADPOOL_POINTER ((HRESULT)0x80046551L)

//
// MessageId: PP_E_AS_PIDEPOSITORY_INVALID_SIZE
//
// MessageText:
//
//  Invalid size supplied to initialize puid info depository.
//
#define PP_E_AS_PIDEPOSITORY_INVALID_SIZE ((HRESULT)0x80046552L)

//
// MessageId: PP_E_AS_CONFIG_NOT_INITIALIZED
//
// MessageText:
//
//  Configuration object is not initialized.
//
#define PP_E_AS_CONFIG_NOT_INITIALIZED   ((HRESULT)0x80046553L)

//
// MessageId: PP_E_AS_STATISTICS_NOT_INITIALIZED
//
// MessageText:
//
//  Statistics object is not initialized.
//
#define PP_E_AS_STATISTICS_NOT_INITIALIZED ((HRESULT)0x80046554L)

//
// MessageId: PP_E_AS_DEPOSITORY_NOT_INITIALIZED
//
// MessageText:
//
//  Puid depository is used before it is initialized.
//
#define PP_E_AS_DEPOSITORY_NOT_INITIALIZED ((HRESULT)0x80046555L)

//
// MessageId: PP_E_AS_EVENTLOGGER_NOT_INITIALIZED
//
// MessageText:
//
//  Event logger is not initialized.
//
#define PP_E_AS_EVENTLOGGER_NOT_INITIALIZED ((HRESULT)0x80046556L)

//
// MessageId: PP_E_AS_EVENTLOGGER_COULD_NOT_CREATE
//
// MessageText:
//
//  Failed to create event logger.
//
#define PP_E_AS_EVENTLOGGER_COULD_NOT_CREATE ((HRESULT)0x80046559L)

//
// MessageId: PP_E_AS_CONFIG_ALREADY_INITIALIZED
//
// MessageText:
//
//  Second attmpt to initialize config, it is already initialized.
//
#define PP_E_AS_CONFIG_ALREADY_INITIALIZED ((HRESULT)0x8004655AL)

//
// MessageId: PP_E_AS_CONFIG_INVALID_INIFILE_NAME
//
// MessageText:
//
//  Configuration object was supplied invalid INI file name to initialize.
//
#define PP_E_AS_CONFIG_INVALID_INIFILE_NAME ((HRESULT)0x8004655BL)

//
// MessageId: PP_E_AS_CONFIG_SECTIONNAME_EMPTY
//
// MessageText:
//
//  Invalid section name in INI file was supplied to configuration object during initialization.
//
#define PP_E_AS_CONFIG_SECTIONNAME_EMPTY ((HRESULT)0x8004655CL)

//
// MessageId: PP_E_AS_CONFIG_SECTION_BUFFER_TOO_SMALL
//
// MessageText:
//
//  To much data in this section of config file to process.
//
#define PP_E_AS_CONFIG_SECTION_BUFFER_TOO_SMALL ((HRESULT)0x8004655DL)

//
// MessageId: PP_E_AS_CONFIG_EMPTY_ITEM_NAME
//
// MessageText:
//
//  Empty item name in INI file.
//
#define PP_E_AS_CONFIG_EMPTY_ITEM_NAME   ((HRESULT)0x8004655EL)

//
// MessageId: PP_E_AS_CONFIG_NO_SUCH_ITEM
//
// MessageText:
//
//  No item with given name exists in INI file.
//
#define PP_E_AS_CONFIG_NO_SUCH_ITEM      ((HRESULT)0x8004655FL)

//
// MessageId: PP_E_AS_CONFIG_CAN_NOT_CHANGE_ITEM_TYPE
//
// MessageText:
//
//  INI file item type can not be changed to the storage type.
//
#define PP_E_AS_CONFIG_CAN_NOT_CHANGE_ITEM_TYPE ((HRESULT)0x80046560L)

//
// MessageId: PP_E_AS_PUIDINFODEPOT_SIZE_INVALID
//
// MessageText:
//
//  Invalid size of PUID info depository.
//
#define PP_E_AS_PUIDINFODEPOT_SIZE_INVALID ((HRESULT)0x80046561L)

//
// MessageId: PP_E_AS_INVALID_PARTITIONINFO_SUPPLIED
//
// MessageText:
//
//  Invalid info on partition supplied during initialization.
//
#define PP_E_AS_INVALID_PARTITIONINFO_SUPPLIED ((HRESULT)0x80046562L)

//
// MessageId: PP_E_AS_STATISTICS_INVALID_LOAD_LEVEL
//
// MessageText:
//
//  Invalid load level supplied to statistics object on initialization.
//
#define PP_E_AS_STATISTICS_INVALID_LOAD_LEVEL ((HRESULT)0x80046563L)

//
// MessageId: PP_E_AS_STATISTICS_INVALID_MINIMAL_TIME
//
// MessageText:
//
//  Invalid minimal time between DB calls supplied to statistics object during initialization.
//
#define PP_E_AS_STATISTICS_INVALID_MINIMAL_TIME ((HRESULT)0x80046564L)

//
// MessageId: PP_E_AS_STATISTICS_INVALID_MAXIMUM_TIME
//
// MessageText:
//
//  Invalid maximum time between DB calls supplied to statistics object during initialization.
//
#define PP_E_AS_STATISTICS_INVALID_MAXIMUM_TIME ((HRESULT)0x80046565L)

//
// MessageId: PP_E_AS_STATISTICS_INVALID_TRIGGER_VALUE
//
// MessageText:
//
//  Invalid trigger value supplied to statistics object during initialization.
//
#define PP_E_AS_STATISTICS_INVALID_TRIGGER_VALUE ((HRESULT)0x80046566L)

//
// MessageId: PP_E_AS_STATISTICS_INVALID_THROTTLEPERNUMBEROFCALLS_VALUE
//
// MessageText:
//
//  Invalid throttle per number of calls parameter supplied to statistics object during initialization.
//
#define PP_E_AS_STATISTICS_INVALID_THROTTLEPERNUMBEROFCALLS_VALUE ((HRESULT)0x80046567L)

//
// MessageId: PP_E_AS_STATISTICS_LOADLEVELTRIGGERCOMBO_OUTSIDE_LEGAL_RANGE
//
// MessageText:
//
//  Combination of trigger value and load level is outside legal range.
//
#define PP_E_AS_STATISTICS_LOADLEVELTRIGGERCOMBO_OUTSIDE_LEGAL_RANGE ((HRESULT)0x80046568L)

//
// MessageId: PP_E_AS_EVENTLOGGER_IVALID_CONFIGPTR
//
// MessageText:
//
//  Invalid configuration pointer supplied to event logger during initialization.
//
#define PP_E_AS_EVENTLOGGER_IVALID_CONFIGPTR ((HRESULT)0x80046569L)

//
// MessageId: PP_E_AS_IVALID_DOMAIN_INX
//
// MessageText:
//
//  Invalid domain index.
//
#define PP_E_AS_IVALID_DOMAIN_INX        ((HRESULT)0x8004656AL)

//
// MessageId: PP_E_AS_STATISTICS_CRITSEC_SHOTDOWN_FAILED
//
// MessageText:
//
//  Critical section returned an error during shutdown.
//
#define PP_E_AS_STATISTICS_CRITSEC_SHOTDOWN_FAILED ((HRESULT)0x8004656BL)

//
// MessageId: PP_E_AS_STATISTICS_FILEWRITE_FAILED
//
// MessageText:
//
//  Unable to write log file.
//
#define PP_E_AS_STATISTICS_FILEWRITE_FAILED ((HRESULT)0x8004656CL)

//
// MessageId: PP_E_AS_STATISTICS_LOGFILENAME_MISSING
//
// MessageText:
//
//  Log file name is not supplied during initialization.
//
#define PP_E_AS_STATISTICS_LOGFILENAME_MISSING ((HRESULT)0x8004656DL)

//
// MessageId: PP_E_AS_STATISTICS_LOGFILE_OPEN_FAILED
//
// MessageText:
//
//  Error opening log file.
//
#define PP_E_AS_STATISTICS_LOGFILE_OPEN_FAILED ((HRESULT)0x8004656EL)

//
// MessageId: PP_E_AS_GETPUIDS_INVALID_TIME_INTERVAL
//
// MessageText:
//
//  Invalid time interval between DB calls specified for get thread .
//
#define PP_E_AS_GETPUIDS_INVALID_TIME_INTERVAL ((HRESULT)0x80046571L)

//
// MessageId: PP_E_AS_STATISTICS_LOGFILEPATH_MISSING
//
// MessageText:
//
//  Config file does not contain a valid entry location which specifies path where to place error log file.
//
#define PP_E_AS_STATISTICS_LOGFILEPATH_MISSING ((HRESULT)0x80046572L)

//
// MessageId: PP_E_AS_GETPARTITIONCOUNT_FAILED
//
// MessageText:
//
//  Failed to retrieve physical partition count for this domain.
//
#define PP_E_AS_GETPARTITIONCOUNT_FAILED ((HRESULT)0x80046573L)

//
// MessageId: PP_E_AS_PUIDFILEPATH_MISSING
//
// MessageText:
//
//  Path where we will be looking for files to do ageout-from-file is missing
//
#define PP_E_AS_PUIDFILEPATH_MISSING     ((HRESULT)0x80046574L)

//
// MessageId: PP_E_AS_PUIDFILE_MISSING
//
// MessageText:
//
//  Path where we will be looking for files to do ageout-from-file is missing
//
#define PP_E_AS_PUIDFILE_MISSING         ((HRESULT)0x80046575L)

//
// MessageId: PP_E_AS_NO_PERMISSION_TORUN_AGEOUT
//
// MessageText:
//
//  This machine is not in the list of machines allowed to run ageout. 
//
#define PP_E_AS_NO_PERMISSION_TORUN_AGEOUT ((HRESULT)0x80046576L)

//
// MessageId: PP_E_AS_DEFAULTAGEOUTDAYS_INVALID
//
// MessageText:
//
//  DefaultAgeOutDays value is missing or invalid in CCM. 
//
#define PP_E_AS_DEFAULTAGEOUTDAYS_INVALID ((HRESULT)0x80046577L)

//
// MessageId: PP_E_AS_PUIDSPERCALL_INVALID
//
// MessageText:
//
//  AgeOutPuidsPerCall value is missing or invalid in CCM. 
//
#define PP_E_AS_PUIDSPERCALL_INVALID     ((HRESULT)0x80046578L)

//
// MessageId: PP_E_AS_POLICYHANDLER_NAME_MISSING
//
// MessageText:
//
//  PolicyHandler name is missing or invalid in CCM. 
//
#define PP_E_AS_POLICYHANDLER_NAME_MISSING ((HRESULT)0x80046579L)

//
// MessageId: PP_E_AS_PUIDFILE_INVALID_POLICY_NAME
//
// MessageText:
//
//  Policy name is agout file is invalid. Must be a policy existing in CCM PolicyEvaluatorPolicyHolder. 
//
#define PP_E_AS_PUIDFILE_INVALID_POLICY_NAME ((HRESULT)0x8004657AL)

//
// MessageId: PP_E_AS_PUIDFILE_INVALID_CREDTYPE
//
// MessageText:
//
//  Second occupied line in puid file has to be either credentialname or puid to indicate if file will have cred names or puids to work with
//
#define PP_E_AS_PUIDFILE_INVALID_CREDTYPE ((HRESULT)0x8004657BL)

//
// MessageId: PP_E_AS_PUIDFILE_INVALID_PUIDTYPE
//
// MessageText:
//
//  Third occupied line in puid file has to be either DECIMAL or HEX to indicate if puids will be in DECIMAL or HEX form
//
#define PP_E_AS_PUIDFILE_INVALID_PUIDTYPE ((HRESULT)0x8004657CL)

//
// MessageId: PP_E_AS_PUIDFILE_LINE_INVALID
//
// MessageText:
//
//  Line in puidfile is invalid. It has to be in the following format: credentalname,credentialtype where credential type is web or mobile or secure and credentialname is external credentail name
//
#define PP_E_AS_PUIDFILE_LINE_INVALID    ((HRESULT)0x8004657DL)

//
// MessageId: PP_E_AS_PUIDFILE_LINE_CREDENTIALTYPE_INVALID
//
// MessageText:
//
//  One of the credential names in ageout file has invalid credential type. Credentail type can be web or mobile or secure for kPasswordIndex or kMobilePINIndex or kSecurityTokenIndex respectively
//
#define PP_E_AS_PUIDFILE_LINE_CREDENTIALTYPE_INVALID ((HRESULT)0x8004657EL)

//
// MessageId: PP_E_AS_GETPUIDTHRDPL_SUBMIT_FAILED
//
// MessageText:
//
//  Queue request to thread pool for processing failed
//
#define PP_E_AS_GETPUIDTHRDPL_SUBMIT_FAILED ((HRESULT)0x8004657FL)

//
// MessageId: PP_E_AS_GETPUIDTHRDPL_INVALID_DOMAIN_ID
//
// MessageText:
//
//  Queue request to thread pool for processing failed
//
#define PP_E_AS_GETPUIDTHRDPL_INVALID_DOMAIN_ID ((HRESULT)0x80046580L)

// base 0x6600
//
// MessageId: PP_E_RNG_INVALIDNODEINDEX
//
// MessageText:
//
//  Internal error: invalid node index
//
#define PP_E_RNG_INVALIDNODEINDEX        ((HRESULT)0x80046600L)

//
// MessageId: PP_E_RNG_EMPTYTREE
//
// MessageText:
//
//  The rendering tree is empty
//
#define PP_E_RNG_EMPTYTREE               ((HRESULT)0x80046601L)

//
// MessageId: PP_E_RNG_INVALIDATTRIBUTE
//
// MessageText:
//
//  Invalid rendering attribute
//
#define PP_E_RNG_INVALIDATTRIBUTE        ((HRESULT)0x80046602L)

//
// MessageId: PP_E_RNG_INVALIDNODETYPE
//
// MessageText:
//
//  Invalid rendering node type
//
#define PP_E_RNG_INVALIDNODETYPE         ((HRESULT)0x80046603L)

//
// MessageId: PP_E_RNG_INVALIDSTACKNODE
//
// MessageText:
//
//  Internal error: invalid stack node
//
#define PP_E_RNG_INVALIDSTACKNODE        ((HRESULT)0x80046604L)

//
// MessageId: PP_E_RNG_INVALIDPARSINGSTACK
//
// MessageText:
//
//  Internal error: invalid parsing stack
//
#define PP_E_RNG_INVALIDPARSINGSTACK     ((HRESULT)0x80046605L)

//
// MessageId: PP_E_RNG_INVALIDTREENODE
//
// MessageText:
//
//  Internal error: invalid tree node
//
#define PP_E_RNG_INVALIDTREENODE         ((HRESULT)0x80046606L)

//
// MessageId: PP_E_RNG_XMLNODE_NOTALLOWED
//
// MessageText:
//
//  Invalid xml node. The xml does not conform to the curent schema specifications.
//
#define PP_E_RNG_XMLNODE_NOTALLOWED      ((HRESULT)0x80046607L)

//
// MessageId: PP_E_RNG_NOTINITIALIZED
//
// MessageText:
//
//  Internal error: object is not initialized
//
#define PP_E_RNG_NOTINITIALIZED          ((HRESULT)0x80046608L)

//
// MessageId: PP_E_RNG_HANDLE_INVALID
//
// MessageText:
//
//  Internal error: invalid handle for a rendering object 
//
#define PP_E_RNG_HANDLE_INVALID          ((HRESULT)0x80046609L)

//
// MessageId: PP_E_RNG_BAD_RENDENGINE
//
// MessageText:
//
//  Internal error: bad rendering engine object
//
#define PP_E_RNG_BAD_RENDENGINE          ((HRESULT)0x8004660AL)

//
// MessageId: PP_E_RNG_CCMVALUE_INVALID
//
// MessageText:
//
//  Rendering engine: invalid ccm value
//
#define PP_E_RNG_CCMVALUE_INVALID        ((HRESULT)0x8004660BL)

//
// MessageId: PP_E_RNG_PROP_NOTFOUND
//
// MessageText:
//
//  Rendering engine: property was not found
//
#define PP_E_RNG_PROP_NOTFOUND           ((HRESULT)0x8004660CL)

//
// MessageId: PP_E_RNG_PAGETREE_NOTFOUND
//
// MessageText:
//
//  Rendering engine: page tree cannot be found
//
#define PP_E_RNG_PAGETREE_NOTFOUND       ((HRESULT)0x8004660DL)

//
// MessageId: PP_E_RNG_DUPLICATED_PAGENAME
//
// MessageText:
//
//  Rendering engine: duplicate page name
//
#define PP_E_RNG_DUPLICATED_PAGENAME     ((HRESULT)0x8004660EL)

//
// MessageId: PP_E_RNG_PAGE_CCMPROPID_NOTFOUND
//
// MessageText:
//
//  Rendering engine: ccm property id was not found
//
#define PP_E_RNG_PAGE_CCMPROPID_NOTFOUND ((HRESULT)0x8004660FL)

//
// MessageId: PP_E_RNG_CCMSAFEARRAY_INVALID
//
// MessageText:
//
//  Rendering engine: ccm safe array is invalid
//
#define PP_E_RNG_CCMSAFEARRAY_INVALID    ((HRESULT)0x80046610L)

//
// MessageId: PP_E_RNG_CCMNAME_INVALID
//
// MessageText:
//
//  Rendering engine: ccm name is invalid
//
#define PP_E_RNG_CCMNAME_INVALID         ((HRESULT)0x80046611L)

//
// MessageId: PP_E_RNG_CCMACTION_INVALID
//
// MessageText:
//
//  Rendering engine: ccm action is invalid
//
#define PP_E_RNG_CCMACTION_INVALID       ((HRESULT)0x80046612L)

//
// MessageId: PP_E_RNG_PAGEUIMAP_INVALID
//
// MessageText:
//
//  Internal error: the page UI map is invalid
//
#define PP_E_RNG_PAGEUIMAP_INVALID       ((HRESULT)0x80046613L)

//
// MessageId: PP_E_RNG_CCM_NOTINITIALIZED
//
// MessageText:
//
//  Rendering engine: ccm is not initialized
//
#define PP_E_RNG_CCM_NOTINITIALIZED      ((HRESULT)0x80046614L)

//
// MessageId: PP_E_RNG_CCMTYPE_INVALID
//
// MessageText:
//
//  Rendering engine: ccm type is invalid
//
#define PP_E_RNG_CCMTYPE_INVALID         ((HRESULT)0x80046615L)

//
// MessageId: PP_E_RNG_CCMOBJECT_INVALID
//
// MessageText:
//
//  Rendering engine: ccm object is invalid
//
#define PP_E_RNG_CCMOBJECT_INVALID       ((HRESULT)0x80046616L)

//
// MessageId: PP_E_RNG_UIPAGESINTF_INVALID
//
// MessageText:
//
//  The rendering com interface cannot be created
//
#define PP_E_RNG_UIPAGESINTF_INVALID     ((HRESULT)0x80046617L)

//
// MessageId: PP_E_RNG_CCMCACHE_INVALID
//
// MessageText:
//
//  Rendering engine: ccm cache pointer is invalid
//
#define PP_E_RNG_CCMCACHE_INVALID        ((HRESULT)0x80046618L)

//
// MessageId: PP_E_RNG_EXPR_NULLINPUT
//
// MessageText:
//
//  Predicate expression is null
//
#define PP_E_RNG_EXPR_NULLINPUT          ((HRESULT)0x80046619L)

//
// MessageId: PP_E_RNG_EXPR_INVALID_NUMERIC
//
// MessageText:
//
//  Invalid numeric in a predicate expression
//
#define PP_E_RNG_EXPR_INVALID_NUMERIC    ((HRESULT)0x8004661AL)

//
// MessageId: PP_E_RNG_EXPR_INVALID_STRING
//
// MessageText:
//
//  Invalid string in a predicate expression
//
#define PP_E_RNG_EXPR_INVALID_STRING     ((HRESULT)0x8004661BL)

//
// MessageId: PP_E_RNG_EXPR_INVALID_OPERATOR
//
// MessageText:
//
//  Invalid operator in a predicate expression
//
#define PP_E_RNG_EXPR_INVALID_OPERATOR   ((HRESULT)0x8004661CL)

//
// MessageId: PP_E_RNG_EXPR_NOMATCHINGPAR
//
// MessageText:
//
//  Mismatch parentheses in a predicate expression
//
#define PP_E_RNG_EXPR_NOMATCHINGPAR      ((HRESULT)0x8004661DL)

//
// MessageId: PP_E_RNG_EXPR_INVALID_STACK
//
// MessageText:
//
//  Internal error: invalid stack in evaluating a predicate expression
//
#define PP_E_RNG_EXPR_INVALID_STACK      ((HRESULT)0x8004661EL)

//
// MessageId: PP_E_RNG_EXPR_INVALID_ARGCOUNT
//
// MessageText:
//
//  Invalid argument count in a predicate expression
//
#define PP_E_RNG_EXPR_INVALID_ARGCOUNT   ((HRESULT)0x8004661FL)

//
// MessageId: PP_E_RNG_EXPR_INVALID_COMMA
//
// MessageText:
//
//  Invalid use of a comma operator in a predicate expression
//
#define PP_E_RNG_EXPR_INVALID_COMMA      ((HRESULT)0x80046620L)

//
// MessageId: PP_E_RNG_EXPR_INVALID_TOKEN
//
// MessageText:
//
//  Invalid token in a predicate expression
//
#define PP_E_RNG_EXPR_INVALID_TOKEN      ((HRESULT)0x80046621L)

//
// MessageId: PP_E_RNG_EXPR_NOADVANCE
//
// MessageText:
//
//  Internal error: the stack evaluation is cycling
//
#define PP_E_RNG_EXPR_NOADVANCE          ((HRESULT)0x80046622L)

//
// MessageId: PP_E_RNG_EXPR_EMPTY
//
// MessageText:
//
//  The expression to evaluate is empty
//
#define PP_E_RNG_EXPR_EMPTY              ((HRESULT)0x80046623L)

//
// MessageId: PP_E_RNG_EXPR_INVALID_CALLBACK
//
// MessageText:
//
//  Invalid evaluation function
//
#define PP_E_RNG_EXPR_INVALID_CALLBACK   ((HRESULT)0x80046624L)

//
// MessageId: PP_E_RNG_EXPR_INVALID_RPN
//
// MessageText:
//
//  Internal error: invalid RPN object 
//
#define PP_E_RNG_EXPR_INVALID_RPN        ((HRESULT)0x80046625L)

//
// MessageId: PP_E_RNG_EXPR_INVALID_RPNINDEX
//
// MessageText:
//
//  Internal error: invalid RPN index
//
#define PP_E_RNG_EXPR_INVALID_RPNINDEX   ((HRESULT)0x80046626L)

//
// MessageId: PP_E_RNG_EXPR_TYPE_NOTSUPPORTED
//
// MessageText:
//
//  The VT type is not supported in the current version
//
#define PP_E_RNG_EXPR_TYPE_NOTSUPPORTED  ((HRESULT)0x80046627L)

// base 0x6700
//
// MessageId: PP_E_FLOWTOKEN_INVALID_PAGEID
//
// MessageText:
//
//  Invalid Page ID for the flow token.
//
#define PP_E_FLOWTOKEN_INVALID_PAGEID    ((HRESULT)0x80046700L)

//
// MessageId: PP_E_FLOWTOKEN_INVALID_FLOWID
//
// MessageText:
//
//  Invalid flow ID for the flow token.
//
#define PP_E_FLOWTOKEN_INVALID_FLOWID    ((HRESULT)0x80046701L)

//
// MessageId: PP_E_FLOWTOKEN_INVALID_PUID
//
// MessageText:
//
//  Invalid PUID for the flow token.
//
#define PP_E_FLOWTOKEN_INVALID_PUID      ((HRESULT)0x80046702L)

//
// MessageId: PP_E_FLOWTOKEN_INVALID_OTHERDATA
//
// MessageText:
//
//  Data is invalid for the flow token.
//
#define PP_E_FLOWTOKEN_INVALID_OTHERDATA ((HRESULT)0x80046703L)

//
// MessageId: PP_E_FLOWTOKEN_MISSING
//
// MessageText:
//
//  Required flow token is missing.
//
#define PP_E_FLOWTOKEN_MISSING           ((HRESULT)0x80046704L)

//
// MessageId: PP_E_FLOWTOKEN_MISSING_PAGEID
//
// MessageText:
//
//  Page ID is missing in flow token.
//
#define PP_E_FLOWTOKEN_MISSING_PAGEID    ((HRESULT)0x80046705L)

//
// MessageId: PP_E_FLOWTOKEN_UNINITIALIZED
//
// MessageText:
//
//  InitializeFlow has not been called .
//
#define PP_E_FLOWTOKEN_UNINITIALIZED     ((HRESULT)0x80046707L)

//
// MessageId: PP_E_FLOW_DISABLED
//
// MessageText:
//
//  The current flow is being disabled.
//
#define PP_E_FLOW_DISABLED               ((HRESULT)0x80046708L)

// base 0x6800
//
// MessageId: PP_E_AOP_ISFLAGSET_INVALID_FIELD
//
// MessageText:
//
//  IsFlagSet predicate was supplied invalid parameter.
//
#define PP_E_AOP_ISFLAGSET_INVALID_FIELD ((HRESULT)0x80046800L)

//
// MessageId: PP_E_AOP_ISNAMESPACEPRESENTINLIST_BAG_MISSING_NAMESPACE
//
// MessageText:
//
//  IsNamePresentInList predicate,  namespace property is not present in propertybag.
//
#define PP_E_AOP_ISNAMESPACEPRESENTINLIST_BAG_MISSING_NAMESPACE ((HRESULT)0x80046801L)

//
// MessageId: PP_E_AOP_INVALID_CRED_NAME
//
// MessageText:
//
//  Credential name is not valid in CredentialBag for creation of message to HM.
//
#define PP_E_AOP_INVALID_CRED_NAME       ((HRESULT)0x80046802L)

//
// MessageId: PP_E_AOP_FAILED_TO_SEND_HM_POST
//
// MessageText:
//
//  Post to HM failed.
//
#define PP_E_AOP_FAILED_TO_SEND_HM_POST  ((HRESULT)0x80046803L)

//
// MessageId: PP_E_AOP_HMPOST_RESPONSE_TOO_LARGE
//
// MessageText:
//
//  Too much data to be posted to HM.
//
#define PP_E_AOP_HMPOST_RESPONSE_TOO_LARGE ((HRESULT)0x80046804L)

//
// MessageId: PP_E_AOP_HMPOST_RESPONSE_FAIL
//
// MessageText:
//
//  Ageout request to HM failed, can not age out this account.
//
#define PP_E_AOP_HMPOST_RESPONSE_FAIL    ((HRESULT)0x80046805L)

//
// MessageId: PP_E_AOP_EASIDELETEACTION_FAILED
//
// MessageText:
//
//  Easi account deletion failed.
//
#define PP_E_AOP_EASIDELETEACTION_FAILED ((HRESULT)0x80046806L)

//
// MessageId: PP_E_AOP_HMDELETEACTION_FAILED
//
// MessageText:
//
//  HM account deletion failed.
//
#define PP_E_AOP_HMDELETEACTION_FAILED   ((HRESULT)0x80046807L)

//
// MessageId: PP_E_AOP_MSNDELETEACTION_FAILED
//
// MessageText:
//
//  MSN account deletion failed.
//
#define PP_E_AOP_MSNDELETEACTION_FAILED  ((HRESULT)0x80046808L)

//
// MessageId: PP_E_AOP_LOADCREDBAG_FAILED
//
// MessageText:
//
//  MSN account deletion failed.
//
#define PP_E_AOP_LOADCREDBAG_FAILED      ((HRESULT)0x80046809L)

// base 0x6900
//Perfmon
//#definedefine PP_E_PERFMON_BASE 0x6900
//
// MessageId: PP_E_PERFMON_INVALID_INSTANCECLASS
//
// MessageText:
//
//  Invalid perfmon instance class
//
#define PP_E_PERFMON_INVALID_INSTANCECLASS ((HRESULT)0x80046900L)

//
// MessageId: PP_E_PERFMON_INVALID_INSTANCEXML
//
// MessageText:
//
//  Invalid perfmon instance configuration xml
//
#define PP_E_PERFMON_INVALID_INSTANCEXML ((HRESULT)0x80046901L)

//
// MessageId: PP_E_PERFMON_DUPINSTANCEID
//
// MessageText:
//
//  Duplicated perfmon instance id
//
#define PP_E_PERFMON_DUPINSTANCEID       ((HRESULT)0x80046902L)

//
// MessageId: PP_E_PERFMON_DUPINSTANCENAME
//
// MessageText:
//
//  Duplicated perfmon instance name
//
#define PP_E_PERFMON_DUPINSTANCENAME     ((HRESULT)0x80046903L)

//
// MessageId: PP_E_PERFMON_INVALIDINSTANCEID
//
// MessageText:
//
//  invalidate perfmon instance id
//
#define PP_E_PERFMON_INVALIDINSTANCEID   ((HRESULT)0x80046904L)

//
// MessageId: PP_E_PERFMON_INVALIDINSTANCENAME
//
// MessageText:
//
//  invalidate perfmon instance name
//
#define PP_E_PERFMON_INVALIDINSTANCENAME ((HRESULT)0x80046905L)

//
// MessageId: PP_E_PERFMON_NOTOTAL
//
// MessageText:
//
//  Can't find _Total instance
//
#define PP_E_PERFMON_NOTOTAL             ((HRESULT)0x80046906L)

// base 0x7000
//
// MessageId: PP_E_CONFIGSERVER_BAD_FILEVERINFOSIZE
//
// MessageText:
//
//  The client config service has detected an invalid size for the VS_FIXEDFILEINFO structure.
//
#define PP_E_CONFIGSERVER_BAD_FILEVERINFOSIZE ((HRESULT)0x80047000L)

//
// MessageId: PP_E_CONFIGSERVER_BAD_FIXEDFILEVERINFOSIZE
//
// MessageText:
//
//  The client config service has detected an incorrect size for the VS_FIXEDFILEINFO structure.
//
#define PP_E_CONFIGSERVER_BAD_FIXEDFILEVERINFOSIZE ((HRESULT)0x80047001L)

//
// MessageId: PP_E_CONFIGSERVER_BAD_UILOCALPATH
//
// MessageText:
//
//  The client config service has failed to determine the local path for the .SRFs.
//
#define PP_E_CONFIGSERVER_BAD_UILOCALPATH ((HRESULT)0x80047011L)

//
// MessageId: PP_E_CONFIGSERVER_FILESIZE
//
// MessageText:
//
//  The client config service found a file that is bigger than 200K bytes.
//
#define PP_E_CONFIGSERVER_FILESIZE       ((HRESULT)0x80047012L)

//
// MessageId: PP_E_CONFIGSERVER_GETFILESIZE
//
// MessageText:
//
//  The client config service failed to determine the file size.
//
#define PP_E_CONFIGSERVER_GETFILESIZE    ((HRESULT)0x80047013L)

//
// MessageId: PP_E_CONFIGSERVER_CANAME
//
// MessageText:
//
//  The Passport CA service name that was retrieved from CCM is bad.
//
#define PP_E_CONFIGSERVER_CANAME         ((HRESULT)0x80047015L)

//
// MessageId: PP_E_CONFIGSERVER_NO_CACERT
//
// MessageText:
//
//  No certificate was found for the Passport CA service.
//
#define PP_E_CONFIGSERVER_NO_CACERT      ((HRESULT)0x80047016L)

//
// MessageId: PP_E_CONFIGSERVER_CACERT_CONVERSION
//
// MessageText:
//
//  The client config service failed to retrieve the data for the Passport CA service.
//
#define PP_E_CONFIGSERVER_CACERT_CONVERSION ((HRESULT)0x80047017L)

// base 0x7200
//
// MessageId: PP_E_CCMCERT_NO_CERTSITENAME
//
// MessageText:
//
//  The site certificate does not have a name for the Common Name ("CN") component in Subject field.
//
#define PP_E_CCMCERT_NO_CERTSITENAME     ((HRESULT)0x80047200L)

//
// MessageId: PP_E_CCMCERT_MISMATCH_SITENAME
//
// MessageText:
//
//  The site name and the Common Name in the Subject field of the site certificate do not match.
//
#define PP_E_CCMCERT_MISMATCH_SITENAME   ((HRESULT)0x80047201L)

//
// MessageId: PP_E_CCMCERT_NO_PUBLICKEYINFO
//
// MessageText:
//
//  The site certificate does not have the Subject Public Key Info field.
//
#define PP_E_CCMCERT_NO_PUBLICKEYINFO    ((HRESULT)0x80047202L)

//
// MessageId: PP_E_CCMCERT_MISMATCH_KEYALGO
//
// MessageText:
//
//  The algorithm identified in the Public Key Info field in the site certificate is not RSA. Only RSA is supported.
//
#define PP_E_CCMCERT_MISMATCH_KEYALGO    ((HRESULT)0x80047203L)

//
// MessageId: PP_E_CCMCERT_BAD_KEYLEN
//
// MessageText:
//
//  The key length identified in the Public Key Info field in the site certificate is not supported. Only key lengths between 512 to 2048 bits are supported.
//
#define PP_E_CCMCERT_BAD_KEYLEN          ((HRESULT)0x80047204L)

//
// MessageId: PP_E_CCMCERT_BAD_KEYUSAGE
//
// MessageText:
//
//  The key usage in the site certificate is not supported. Only key encipherment and digital signature are supported.
//
#define PP_E_CCMCERT_BAD_KEYUSAGE        ((HRESULT)0x80047205L)

//
// MessageId: PP_E_CCMCERT_BASIC_CONSTRAINT
//
// MessageText:
//
//  The Basic Constraint field in the site certificate is set. The site certificate can not be a Certificate Authority certificate.
//
#define PP_E_CCMCERT_BASIC_CONSTRAINT    ((HRESULT)0x80047207L)

//
// MessageId: PP_E_CCMCERT_UNIQUENAME_BADARG
//
// MessageText:
//
//  A unique name can not be constructed based on the thumbprint of the site certificate and the site name. One of these values is invalid.
//
#define PP_E_CCMCERT_UNIQUENAME_BADARG   ((HRESULT)0x80047208L)

//
// MessageId: PP_E_CCMCERT_SITECERT_CCMBLOBPTR
//
// MessageText:
//
//  This is an internal error while reading the site certificate from CCM. A NULL pointer is returned for the certificate data.
//
#define PP_E_CCMCERT_SITECERT_CCMBLOBPTR ((HRESULT)0x80047209L)

//
// MessageId: PP_E_CCMCERT_SITECERT_BADCERTTYPE
//
// MessageText:
//
//  This is an internal error while reading the site certificate from CCM. An unexpected variant type was returned for the certificate data.
//
#define PP_E_CCMCERT_SITECERT_BADCERTTYPE ((HRESULT)0x80047210L)

//
// MessageId: PP_E_CCMCERT_SITECERT_CCMBLOBCERTSIZE
//
// MessageText:
//
//  This is an internal error while reading the site certificate from CCM. An unexpected length was returned for the certificate data.
//
#define PP_E_CCMCERT_SITECERT_CCMBLOBCERTSIZE ((HRESULT)0x80047211L)

//
// MessageId: PP_E_CCMCERT_SITECERT_CCMBLOBCERTPTR
//
// MessageText:
//
//  This is an internal error while reading the site certificate from CCM. A NULL byte pointer is returned for the certificate data.
//
#define PP_E_CCMCERT_SITECERT_CCMBLOBCERTPTR ((HRESULT)0x80047212L)

//
// MessageId: PP_E_CCMCERTS_TOBASE64
//
// MessageText:
//
//  This is an internal error while base64 encoding a site certificate. There was no data.
//
#define PP_E_CCMCERTS_TOBASE64           ((HRESULT)0x80047213L)

//
// MessageId: PP_E_CCMCERT_TOOMANY_PARENTOBJECTS
//
// MessageText:
//
//  There are more than 32 CA partners for this CA certificate.
//
#define PP_E_CCMCERT_TOOMANY_PARENTOBJECTS ((HRESULT)0x80047214L)

// base 0x7300
//
// MessageId: PP_E_CCMPRXY_MACHINE_NOT_CONNECTED_TO_NETWORK_DEVICE
//
// MessageText:
//
//  This machine is not connected to any network device.
//
#define PP_E_CCMPRXY_MACHINE_NOT_CONNECTED_TO_NETWORK_DEVICE ((HRESULT)0x80047300L)

// base 0x7400
//Cobranding Errors
#define PP_E_COBRANDING_BASE 0x7400
//
// MessageId: PP_E_PROVENT_COBRANDING_NOT_PRESENT
//
// MessageText:
//
//  Cobranding node was not present for site.
//
#define PP_E_PROVENT_COBRANDING_NOT_PRESENT ((HRESULT)0x80047400L)

//
// MessageId: PP_E_PROVENT_SS_COBRANDING_NOT_PRESENT
//
// MessageText:
//
//  SS_Cobranding node was not present for namespace.
//
#define PP_E_PROVENT_SS_COBRANDING_NOT_PRESENT ((HRESULT)0x80047401L)

//
// MessageId: PP_E_PROVENT_TC_COBRANDING_NOT_PRESENT
//
// MessageText:
//
//  Cobranding_TC node was not present for site.
//
#define PP_E_PROVENT_TC_COBRANDING_NOT_PRESENT ((HRESULT)0x80047402L)

//
// MessageId: PP_E_COBRANDING_SERVICESPONSOR_EMPTY
//
// MessageText:
//
//  SetCobrandingServiceSponsor was called with an empty value for pwszServiceSponsor.
//
#define PP_E_COBRANDING_SERVICESPONSOR_EMPTY ((HRESULT)0x80047403L)

//
// MessageId: PP_E_COBRANDING_INVALID_SITEID_PASSED
//
// MessageText:
//
//  Invalid siteID was passed.
//
#define PP_E_COBRANDING_INVALID_SITEID_PASSED ((HRESULT)0x80047404L)

//
// MessageId: PP_E_COBRANDING_VALIDATION_FAILED
//
// MessageText:
//
//  Cobranding validation failed during insert.
//
#define PP_E_COBRANDING_VALIDATION_FAILED ((HRESULT)0x80047405L)

// base 0x7500
//------------------------------------------------------------------------------
// TaskFlow/EXTERNAL properties: remote soap persist/validate errors
//------------------------------------------------------------------------------
#define PP_E_TF_BASE 0x7500
//
// MessageId: PP_E_EXTERNALPROPERTY_PERSIST_FAILED
//
// MessageText:
//
//  Soap call to external data store to persist failed.
//
#define PP_E_EXTERNALPROPERTY_PERSIST_FAILED ((HRESULT)0x80047500L)

//
// MessageId: PP_E_EXTERNALPROPERTY_SOAPVALIDATE_FAILED
//
// MessageText:
//
//  Soap call to external data store to validate failed.
//
#define PP_E_EXTERNALPROPERTY_SOAPVALIDATE_FAILED ((HRESULT)0x80047501L)

//
// MessageId: PP_E_EXTERNALPROPERTY_REQUIREDNOTEXIST
//
// MessageText:
//
//  Error processing external task check that the xml is correct in the taskflow.
//
#define PP_E_EXTERNALPROPERTY_REQUIREDNOTEXIST ((HRESULT)0x80047502L)

//
// MessageId: PP_E_EXTERNALPROPERTY_NONCE_INVALID
//
// MessageText:
//
//  The nonce passed back from the external partner is missing.
//
#define PP_E_EXTERNALPROPERTY_NONCE_INVALID ((HRESULT)0x80047503L)

//
// MessageId: PP_E_EXTERNALPROPERTY_NONCE_MISMATCH
//
// MessageText:
//
//  The nonce passed back from partner does not match what we sent.
//
#define PP_E_EXTERNALPROPERTY_NONCE_MISMATCH ((HRESULT)0x80047504L)

//
// MessageId: PP_E_TMPREDICATE_FUNC_NOT_SUPPORTED
//
// MessageText:
//
//  A predicate is being used in the task flow XML that does not have a callback.
//
#define PP_E_TMPREDICATE_FUNC_NOT_SUPPORTED ((HRESULT)0x80047505L)

//
// MessageId: PP_E_TM_TMDATA_ATTRIBUTE_DOESNOTEXIST
//
// MessageText:
//
//  Attempted to lookup attribute that does not exist in the taskmanager map.
//
#define PP_E_TM_TMDATA_ATTRIBUTE_DOESNOTEXIST ((HRESULT)0x80047506L)

//
// MessageId: PP_E_TM_TMDATA_CUSTOMTAG_DOESNOTEXIST
//
// MessageText:
//
//  Trying to lookup a tag from the map that does not exist.
//
#define PP_E_TM_TMDATA_CUSTOMTAG_DOESNOTEXIST ((HRESULT)0x80047507L)

//
// MessageId: PP_E_TM_TMDATA_ARRAY_OUTOFBOUND
//
// MessageText:
//
//  The index position to lookup passed in by the Callee was out of bounds
//
#define PP_E_TM_TMDATA_ARRAY_OUTOFBOUND  ((HRESULT)0x80047508L)

//
// MessageId: PP_E_TM_TMDATA_CUSTOMTAG_ATTRIUBTE_NOTSUPPORTED
//
// MessageText:
//
//  The custom tag passed in is not supported.
//
#define PP_E_TM_TMDATA_CUSTOMTAG_ATTRIUBTE_NOTSUPPORTED ((HRESULT)0x80047509L)

//
// MessageId: PP_E_TM_PREDICATE_DLL_NOT_LOADED
//
// MessageText:
//
//  Trying to run predicates when the predicate dll has not been loaded.
//
#define PP_E_TM_PREDICATE_DLL_NOT_LOADED ((HRESULT)0x8004750AL)

//
// MessageId: PP_E_TM_NAVIGATION_STACK_UNDERFLOW
//
// MessageText:
//
//  Trying to pop off more items on the navigation stack than currently exist.
//
#define PP_E_TM_NAVIGATION_STACK_UNDERFLOW ((HRESULT)0x8004750BL)

//
// MessageId: PP_E_TM_INVALIDARG
//
// MessageText:
//
//  A parameter passed to a task manager function was invalid. Most likely due to a null pointer.
//
#define PP_E_TM_INVALIDARG               ((HRESULT)0x8004750CL)    

//
// MessageId: E_TM_CANNOTPOPOFFPERSISTEDTASK
//
// MessageText:
//
//  Attempting to navigate before a task that has already been persisted
//
#define E_TM_CANNOTPOPOFFPERSISTEDTASK   ((HRESULT)0x8004750DL)    

//
// MessageId: E_TM_INVALIDTASKTYPE
//
// MessageText:
//
//  Check task type in task flow xml, a task type is present that is not supported.
//
#define E_TM_INVALIDTASKTYPE             ((HRESULT)0x8004750EL)    

//
// MessageId: E_TM_NONNUMERICTASKTYPE
//
// MessageText:
//
//  Task type in flow xml is non numeric.
//
#define E_TM_NONNUMERICTASKTYPE          ((HRESULT)0x8004750FL)    

//
// MessageId: E_TM_CORRUPTEDSTACK
//
// MessageText:
//
//  The navigation stack is corrupted
//
#define E_TM_CORRUPTEDSTACK              ((HRESULT)0x80047510L)

//
// MessageId: E_TM_TASKFLOWISNOTACCMBLOB
//
// MessageText:
//
//  The task flow property in CCM was not returned as a blob
//
#define E_TM_TASKFLOWISNOTACCMBLOB       ((HRESULT)0x80047511L)

//
// MessageId: E_TM_TASKFLOWCCMBLOBINVALID
//
// MessageText:
//
//  The task flow property CCM Blob returned was invalid
//
#define E_TM_TASKFLOWCCMBLOBINVALID      ((HRESULT)0x80047512L)

// base 0x7701
//
// MessageId: PP_E_SPA_BASE64DECODE_FAILURE
//
// MessageText:
//
//  Base64 Decode failed.
//
#define PP_E_SPA_BASE64DECODE_FAILURE    ((HRESULT)0x80047701L)

//
// MessageId: PP_E_SPA_INVALID_AUTH_MESSAGE
//
// MessageText:
//
//  Invalid user authentication message.
//
#define PP_E_SPA_INVALID_AUTH_MESSAGE    ((HRESULT)0x80047702L)

//
// MessageId: PP_E_SPA_UNSUPPORTED_AUTH_MSG_TYPE
//
// MessageText:
//
//  Unsupported Authentication message type.
//
#define PP_E_SPA_UNSUPPORTED_AUTH_MSG_TYPE ((HRESULT)0x80047703L)

//
// MessageId: PP_E_SPA_INVALID_NONCE
//
// MessageText:
//
//  Invalid Nonce.
//
#define PP_E_SPA_INVALID_NONCE           ((HRESULT)0x80047704L)

//
// MessageId: PP_E_SPA_INVALID_CHALLENGE_RESPONSE
//
// MessageText:
//
//  Invalid Challenge-Response.
//
#define PP_E_SPA_INVALID_CHALLENGE_RESPONSE ((HRESULT)0x80047705L)

//
// MessageId: PP_E_SPA_USERBLOB_NOT_INIT
//
// MessageText:
//
//  The user blob has not been initialized.
//
#define PP_E_SPA_USERBLOB_NOT_INIT       ((HRESULT)0x80047706L)

// base 0x7800
//CCM Proxy errors
//#define PP_E_CCMCACHE_BASE  0x7800
//
// MessageId: PP_E_CCMPROXY_NODEVICE
//
// MessageText:
//
//  Service can not start due to error (hr=%1)
//
#define PP_E_CCMPROXY_NODEVICE           ((HRESULT)0x80047800L)

//
// MessageId: PP_E_CSMPROXY_SERVICE_NOIP
//
// MessageText:
//
//  can't find the DIP for the service
//
#define PP_E_CSMPROXY_SERVICE_NOIP       ((HRESULT)0x80047801L)

//
// MessageId: PP_E_INVALID_IP
//
// MessageText:
//
//  the IP address is invalid
//
#define PP_E_INVALID_IP                  ((HRESULT)0x80047802L)

//
// MessageId: PP_E_INVALID_IP_NOT_IN_CSM
//
// MessageText:
//
//  the IP address is invalid
//
#define PP_E_INVALID_IP_NOT_IN_CSM       ((HRESULT)0x80047803L)

//
// MessageId: PP_E_INVALID_PENDING_ACTION
//
// MessageText:
//
//  the pending action is invalid
//
#define PP_E_INVALID_PENDING_ACTION      ((HRESULT)0x80047804L)

//
// MessageId: PP_E_INVALID_DEVICE_DIP
//
// MessageText:
//
//  the dip info structure returned by device is invalid
//
#define PP_E_INVALID_DEVICE_DIP          ((HRESULT)0x80047805L)

//
// MessageId: PP_E_CCM_CSM_MISMATCH
//
// MessageText:
//
//  found a inconsistency between CSM and CCM
//
#define PP_E_CCM_CSM_MISMATCH            ((HRESULT)0x80047806L)

//
// MessageId: PP_E_INVALID_IADMIN_INFO
//
// MessageText:
//
//  The IAdmin suppress info is incorrect
//
#define PP_E_INVALID_IADMIN_INFO         ((HRESULT)0x80047807L)

//
// MessageId: PP_E_NO_MONAME
//
// MessageText:
//
//  The IAdmin suppress info is incorrect
//
#define PP_E_NO_MONAME                   ((HRESULT)0x80047808L)

// base 0x7850
//
// MessageId: PP_E_UPDATE_COUNTRY
//
// MessageText:
//
//  This is an internal error to switch the user from secret question and answer update UI to country update UI.
//
#define PP_E_UPDATE_COUNTRY              ((HRESULT)0x80047850L)

//
// MessageId: PP_E_STRONG_PASSWORD_TOO_SHORT
//
// MessageText:
//
//  The given password does not meet the strong password criteria. It must be at least 7 characters long.
//
#define PP_E_STRONG_PASSWORD_TOO_SHORT   ((HRESULT)0x80047851L)

//
// MessageId: PP_E_BLANK_ALT_EMAIL
//
// MessageText:
//
//  No alternate email is entered.
//
#define PP_E_BLANK_ALT_EMAIL             ((HRESULT)0x80047852L)

//
// MessageId: PP_E_BLANK_ALT_EMAILRETYPE
//
// MessageText:
//
//  Retype alternate email field is empty
//
#define PP_E_BLANK_ALT_EMAILRETYPE       ((HRESULT)0x80047853L)

//
// MessageId: PP_E_ALT_EMAIL_MISMATCH
//
// MessageText:
//
//  Mismatching alternate email address entries.
//
#define PP_E_ALT_EMAIL_MISMATCH          ((HRESULT)0x80047854L)

//
// MessageId: PP_E_ALT_EMAIL_SAME_AS_MEMBERNAME
//
// MessageText:
//
//  Alternate email address can not equal to the member name.
//
#define PP_E_ALT_EMAIL_SAME_AS_MEMBERNAME ((HRESULT)0x80047855L)

//
// MessageId: PP_E_INVALID_UIPARAMS
//
// MessageText:
//
//  The member variable m_pUIParams is null or invalid.
//
#define PP_E_INVALID_UIPARAMS            ((HRESULT)0x80047856L)

//
// MessageId: PP_E_PROFILE_ACCRUAL_REQUIRED
//
// MessageText:
//
//  Profile accrual is required. The interface does not support accrual.
//
#define PP_E_PROFILE_ACCRUAL_REQUIRED    ((HRESULT)0x80047857L)

//
// MessageId: PP_E_EMAIL_VALIDATION_REQUIRED_WARNING
//
// MessageText:
//
//  Email validation warning is required for the account
//
#define PP_E_EMAIL_VALIDATION_REQUIRED_WARNING ((HRESULT)0x80047858L)

//
// MessageId: PP_E_EMAIL_VALIDATION_REQUIRED_BLOCKED
//
// MessageText:
//
//  Email validation is required for the account
//
#define PP_E_EMAIL_VALIDATION_REQUIRED_BLOCKED ((HRESULT)0x80047859L)

//
// MessageId: PP_E_BAD_FEDERATED_NAMESPACE
//
// MessageText:
//
//  Federated namespace missing required properties
//
#define PP_E_BAD_FEDERATED_NAMESPACE     ((HRESULT)0x8004785AL)

//
// MessageId: PP_E_ACCOUNT_VERIFY_CANCEL
//
// MessageText:
//
//  User pressed cancel on account verification page
//
#define PP_E_ACCOUNT_VERIFY_CANCEL       ((HRESULT)0x8004785BL)

//
// MessageId: PP_E_ALT_EMAIL_TOO_LONG
//
// MessageText:
//
//  Alternate email address is too long
//
#define PP_E_ALT_EMAIL_TOO_LONG          ((HRESULT)0x8004785CL)

//
// MessageId: PP_E_ALT_EMAIL_INVALID
//
// MessageText:
//
//  Alternate email address is incorrectly formatted
//
#define PP_E_ALT_EMAIL_INVALID           ((HRESULT)0x8004785DL)

//base 0x7900
// Errors
//
// MessageId: PP_E_FWORDS_INVALID_VARIANTVALUE
//
// MessageText:
//
//  Forbidden words retrieval: Expected value retrieved from CCM is a string 
//
#define PP_E_FWORDS_INVALID_VARIANTVALUE ((HRESULT)0x80047901L)

//
// MessageId: PP_E_FWORDS_EMPTY_STRING
//
// MessageText:
//
//  Forbidden words retrieval: List is empty
//
#define PP_E_FWORDS_EMPTY_STRING         ((HRESULT)0x80047902L)

//
// MessageId: PP_E_FWORDS_EMPTY_WORD
//
// MessageText:
//
//  Forbidden words retrieval: the word entered has zero length
//
#define PP_E_FWORDS_EMPTY_WORD           ((HRESULT)0x80047903L)

//base 0x7A00
// Errors
#define PP_E_CLS3RA_BASE  0x7A00
//
// MessageId: PP_E_CLS3RA_INVALIDARG
//
// MessageText:
//
//  One of the argument passed is invalid.
//
#define PP_E_CLS3RA_INVALIDARG           ((HRESULT)0x80047A00L)

//
// MessageId: PP_E_CLS3RA_INVALIDTICKET
//
// MessageText:
//
//  Failed to validate authenticiation ticket.
//
#define PP_E_CLS3RA_INVALIDTICKET        ((HRESULT)0x80047A01L)

//
// MessageId: PP_E_CLS3RA_CERTAUTHREQUIRED
//
// MessageText:
//
//  Certificate authentication is required to complete this operation.
//
#define PP_E_CLS3RA_CERTAUTHREQUIRED     ((HRESULT)0x80047A02L)

//
// MessageId: PP_E_CLS3RA_CLIENTCERTMISSING
//
// MessageText:
//
//  Client certificate is missing or bad in SSL authentication.
//
#define PP_E_CLS3RA_CLIENTCERTMISSING    ((HRESULT)0x80047A03L)

//
// MessageId: PP_E_CLS3RA_CLIENTCERTMISMATCH
//
// MessageText:
//
//  Client certificate does not match for the authorized sites client certifcate.
//
#define PP_E_CLS3RA_CLIENTCERTMISMATCH   ((HRESULT)0x80047A04L)

//
// MessageId: PP_E_CLS3RA_NOTAUTHORIZED
//
// MessageText:
//
//  User is not authozied to perform requested operation.
//
#define PP_E_CLS3RA_NOTAUTHORIZED        ((HRESULT)0x80047A05L)

//
// MessageId: PP_E_CLS3RA_INVALIDSUBJECT
//
// MessageText:
//
//  Subject PUID is invalid, failed to map subject puid to valid member name.
//
#define PP_E_CLS3RA_INVALIDSUBJECT       ((HRESULT)0x80047A06L)

//
// MessageId: PP_E_CLS3RA_APPROVALFAILED
//
// MessageText:
//
//  Failed to approve the specified user.
//
#define PP_E_CLS3RA_APPROVALFAILED       ((HRESULT)0x80047A07L)

//
// MessageId: PP_E_CLS3RA_INVALIDPKCS10
//
// MessageText:
//
//  PKCS10 in the request is invalid.
//
#define PP_E_CLS3RA_INVALIDPKCS10        ((HRESULT)0x80047A08L)

//
// MessageId: PP_E_CLS3RA_INVALIDSENDER
//
// MessageText:
//
//  Caller PUID is invalid, failed to map caller puid to valid member name.
//
#define PP_E_CLS3RA_INVALIDSENDER        ((HRESULT)0x80047A09L)

//
// MessageId: PP_E_CLS3RA_INVALIDSUBJECTINPKCS10
//
// MessageText:
//
//  Subject name in the PKCS10 is missing or not same as caller.
//
#define PP_E_CLS3RA_INVALIDSUBJECTINPKCS10 ((HRESULT)0x80047A0AL)

//
// MessageId: PP_E_CLS3RA_ICSMISSING
//
// MessageText:
//
//  Identiry confirmation string is missing in the PKCS10 request.
//
#define PP_E_CLS3RA_ICSMISSING           ((HRESULT)0x80047A0BL)

//
// MessageId: PP_E_CLS3RA_ICSINVALID
//
// MessageText:
//
//  Either Identiry confirmation string is wrong or the caller is not approved.
//
#define PP_E_CLS3RA_ICSINVALID           ((HRESULT)0x80047A0CL)

//
// MessageId: PP_E_CLS3RA_ICSSTALE
//
// MessageText:
//
//  Identiry confirmation string is already consumed.
//
#define PP_E_CLS3RA_ICSSTALE             ((HRESULT)0x80047A0DL)

//
// MessageId: PP_E_CLS3RA_PROVISIONFAILED
//
// MessageText:
//
//  Failed to provision certificate.
//
#define PP_E_CLS3RA_PROVISIONFAILED      ((HRESULT)0x80047A0EL)

//
// MessageId: PP_E_CLS3RA_CAFAILED
//
// MessageText:
//
//  Passport CA failed to issue certificate.
//
#define PP_E_CLS3RA_CAFAILED             ((HRESULT)0x80047A0FL)

//
// MessageId: PP_E_CLS3RA_MISSINGTHUMBPRINT
//
// MessageText:
//
//  Certificate thumbprint parameter is missing.
//
#define PP_E_CLS3RA_MISSINGTHUMBPRINT    ((HRESULT)0x80047A10L)

//
// MessageId: PP_E_CLS3RA_ASSOCFAILED
//
// MessageText:
//
//  Failed to assocaite certificate with caller account.
//
#define PP_E_CLS3RA_ASSOCFAILED          ((HRESULT)0x80047A11L)

//
// MessageId: PP_E_CLS3RA_NOPENDINGASSOCS
//
// MessageText:
//
//  Caller do not have any pending associations or the thumbprint is invalid.
//
#define PP_E_CLS3RA_NOPENDINGASSOCS      ((HRESULT)0x80047A12L)

//
// MessageId: PP_S_CLS3RA_MOREDATA
//
// MessageText:
//
//  More data is available for the query request.
//
#define PP_S_CLS3RA_MOREDATA             ((HRESULT)0x00047A13L)

//
// MessageId: PP_E_CLS3RA_NOPARTNERSITEID
//
// MessageText:
//
//  No partner site is configured under the RAPolicySettings object. 
//
#define PP_E_CLS3RA_NOPARTNERSITEID      ((HRESULT)0x80047A14L)

//
// MessageId: PP_E_CLS3RA_INVALIDDATE
//
// MessageText:
//
//  Failed to convert DATE to DBDATETIME. 
//
#define PP_E_CLS3RA_INVALIDDATE          ((HRESULT)0x80047A15L)

//
// MessageId: PP_E_CLS3RA_HPROV_FAILED
//
// MessageText:
//
//  Failed to get the crypto provider for RA Certificate. 
//
#define PP_E_CLS3RA_HPROV_FAILED         ((HRESULT)0x80047A16L)

//base 0x8000
//code manager error code
//#define EVT_E_BASE 0x8000
//
// MessageId: EVT_E_INVALIDCAT
//
// MessageText:
//
//  Invalid category
//
#define EVT_E_INVALIDCAT                 ((HRESULT)0x80048000L)

//
// MessageId: EVT_E_INVALIDXDR
//
// MessageText:
//
//  Invalid xdr schema
//
#define EVT_E_INVALIDXDR                 ((HRESULT)0x80048001L)

//
// MessageId: EVT_E_XMLPATH
//
// MessageText:
//
//  invalid path for event xml file
//
#define EVT_E_XMLPATH                    ((HRESULT)0x80048002L)

//
// MessageId: EVT_E_PARAMNUMBERINVALID
//
// MessageText:
//
//  invalid parameter number
//
#define EVT_E_PARAMNUMBERINVALID         ((HRESULT)0x80048003L)

//
// MessageId: EVT_E_PARAMUNDEFINED
//
// MessageText:
//
//  Parameter is not defined
//
#define EVT_E_PARAMUNDEFINED             ((HRESULT)0x80048004L)

//
// MessageId: EVT_E_PARAMUNUSED
//
// MessageText:
//
//  A defined parameter is not used in the message
//
#define EVT_E_PARAMUNUSED                ((HRESULT)0x80048005L)

//
// MessageId: EVT_E_CATALREADYUSED
//
// MessageText:
//
//  Category is alread used
//
#define EVT_E_CATALREADYUSED             ((HRESULT)0x80048006L)

//
// MessageId: EVT_E_PROPERTYDIFFER
//
// MessageText:
//
//  A different MSN property is used
//
#define EVT_E_PROPERTYDIFFER             ((HRESULT)0x80048007L)

//
// MessageId: EVT_E_BASEIDDIFFER
//
// MessageText:
//
//  A different base id is used for a category
//
#define EVT_E_BASEIDDIFFER               ((HRESULT)0x80048008L)

// base 0x8100
//code manager error code
// base 0x8100
//
// MessageId: PP_E_PPSA_FIRST
//
// MessageText:
//
//  Place holder for the first service api error
//
#define PP_E_PPSA_FIRST                  ((HRESULT)0x80048100L)

//
// MessageId: PP_E_PPSA_INVALIDHEADER
//
// MessageText:
//
//  The header in the soap request is invalid
//
#define PP_E_PPSA_INVALIDHEADER          ((HRESULT)0x80048101L)

//
// MessageId: PP_E_PPSA_GENERIC
//
// MessageText:
//
//  An internal error was encountered, check the soap fault for detailed information
//
#define PP_E_PPSA_GENERIC                ((HRESULT)0x80048102L)

//
// MessageId: PP_E_PPSA_MEMBEREXIST
//
// MessageText:
//
//  The data already exist in database
//
#define PP_E_PPSA_MEMBEREXIST            ((HRESULT)0x80048103L)

//
// MessageId: PP_E_PPSA_MEMBERNOTEXIST
//
// MessageText:
//
//  The data do not exist in database
//
#define PP_E_PPSA_MEMBERNOTEXIST         ((HRESULT)0x80048104L)

//
// MessageId: PP_E_PPSA_NOTAUTHORIZED
//
// MessageText:
//
//  Caller Not Authorized
//
#define PP_E_PPSA_NOTAUTHORIZED          ((HRESULT)0x80048105L)

//
// MessageId: PP_E_PPSA_NOSITENAME
//
// MessageText:
//
//  Site Name Missing
//
#define PP_E_PPSA_NOSITENAME             ((HRESULT)0x80048106L)

//
// MessageId: PP_E_PPSA_NOATTLIST
//
// MessageText:
//
//  Attribute List Missing
//
#define PP_E_PPSA_NOATTLIST              ((HRESULT)0x80048107L)

//
// MessageId: PP_E_PPSA_NOXPATH
//
// MessageText:
//
//  XPath Parameter Missing
//
#define PP_E_PPSA_NOXPATH                ((HRESULT)0x80048108L)

//
// MessageId: PP_E_PPSA_NOXML
//
// MessageText:
//
//  XML parameter is empty
//
#define PP_E_PPSA_NOXML                  ((HRESULT)0x80048109L)

//
// MessageId: PP_E_PPSA_BADNETID
//
// MessageText:
//
//  Invalid NetID
//
#define PP_E_PPSA_BADNETID               ((HRESULT)0x8004810AL)

//
// MessageId: PP_E_PPSA_BADADMINPUID
//
// MessageText:
//
//  Invalid NetID in Admin Ticket
//
#define PP_E_PPSA_BADADMINPUID           ((HRESULT)0x8004810BL)

//
// MessageId: PP_E_PPSA_INVALIDXML
//
// MessageText:
//
//  Invalid XML Parameter
//
#define PP_E_PPSA_INVALIDXML             ((HRESULT)0x8004810CL)

//
// MessageId: PP_E_PPSA_NOSITEID
//
// MessageText:
//
//  Site ID Missing
//
#define PP_E_PPSA_NOSITEID               ((HRESULT)0x8004810DL)

//
// MessageId: PP_E_PPSA_PROFILEXMLARRAYEMPTY
//
// MessageText:
//
//  Profile XML Array is Empty
//
#define PP_E_PPSA_PROFILEXMLARRAYEMPTY   ((HRESULT)0x8004810EL)

//
// MessageId: PP_E_PPSA_PROFILEXMLARRAYTOOBIG
//
// MessageText:
//
//  Profile XML Array Too Large
//
#define PP_E_PPSA_PROFILEXMLARRAYTOOBIG  ((HRESULT)0x8004810FL)

//
// MessageId: PP_E_PPSA_NETIDARRAYEMPTY
//
// MessageText:
//
//  NetID Array is Empty
//
#define PP_E_PPSA_NETIDARRAYEMPTY        ((HRESULT)0x80048110L)

//
// MessageId: PP_E_PPSA_NETIDARRAYTOOBIG
//
// MessageText:
//
//  NetID Array Too Large
//
#define PP_E_PPSA_NETIDARRAYTOOBIG       ((HRESULT)0x80048111L)

//
// MessageId: PP_E_PPSA_MULTIPLEERRORS
//
// MessageText:
//
//  Multiple Errors Occurred
//
#define PP_E_PPSA_MULTIPLEERRORS         ((HRESULT)0x80048112L)

//
// MessageId: PP_E_PPSA_XPATHARRAYEMPTY
//
// MessageText:
//
//  XPath Array is Empty
//
#define PP_E_PPSA_XPATHARRAYEMPTY        ((HRESULT)0x80048113L)

//
// MessageId: PP_E_PPSA_NETIDXPATHMISMATCH
//
// MessageText:
//
//  NetID XPath Mismatch
//
#define PP_E_PPSA_NETIDXPATHMISMATCH     ((HRESULT)0x80048114L)

//
// MessageId: PP_E_PPSA_NONSNAME
//
// MessageText:
//
//  Namespace Name Missing
//
#define PP_E_PPSA_NONSNAME               ((HRESULT)0x80048115L)

//
// MessageId: PP_E_PPSA_NAMESPACENOTACTIVE
//
// MessageText:
//
//  The namespace is not a managed namespace
//
#define PP_E_PPSA_NAMESPACENOTACTIVE     ((HRESULT)0x80048116L)

//
// MessageId: PP_E_PPSA_RPT_NOREQUEST
//
// MessageText:
//
//  Report Request XML Missing
//
#define PP_E_PPSA_RPT_NOREQUEST          ((HRESULT)0x80048117L)

//
// MessageId: PP_E_PPSA_RPT_BADREQUEST
//
// MessageText:
//
//  Report Request XML Invalid
//
#define PP_E_PPSA_RPT_BADREQUEST         ((HRESULT)0x80048118L)

//
// MessageId: PP_E_PPSA_RPT_NOTYPE
//
// MessageText:
//
//  Report Type Missing
//
#define PP_E_PPSA_RPT_NOTYPE             ((HRESULT)0x80048119L)

//
// MessageId: PP_E_PPSA_RPT_BADTYPE
//
// MessageText:
//
//  Report Type Invalid
//
#define PP_E_PPSA_RPT_BADTYPE            ((HRESULT)0x8004811AL)

//
// MessageId: PP_E_PPSA_RPT_SIGNINSUM_BADVAL
//
// MessageText:
//
//  Invalid Signin Summary Value
//
#define PP_E_PPSA_RPT_SIGNINSUM_BADVAL   ((HRESULT)0x8004811BL)

//
// MessageId: PP_E_PPSA_RPT_BADEMAILID
//
// MessageText:
//
//  Invalid Email ID
//
#define PP_E_PPSA_RPT_BADEMAILID         ((HRESULT)0x8004811CL)

//
// MessageId: PP_E_PPSA_RPT_BADSTATUSFORRESEND
//
// MessageText:
//
//  The Email cannot currently be resent
//
#define PP_E_PPSA_RPT_BADSTATUSFORRESEND ((HRESULT)0x8004811DL)

//
// MessageId: PP_E_PPSA_RPT_BADSTATUSFORCANCEL
//
// MessageText:
//
//  The Email cannot currently be cancelled
//
#define PP_E_PPSA_RPT_BADSTATUSFORCANCEL ((HRESULT)0x8004811EL)

//
// MessageId: PP_E_PPSA_RPT_NOLCID
//
// MessageText:
//
//  Locale ID Missing or Invalid
//
#define PP_E_PPSA_RPT_NOLCID             ((HRESULT)0x8004811FL)

//
// MessageId: PP_E_PPSA_RPT_NOTOADDRESS
//
// MessageText:
//
//  Destination Address Missing or Invalid
//
#define PP_E_PPSA_RPT_NOTOADDRESS        ((HRESULT)0x80048120L)

//
// MessageId: PP_E_PPSA_RPT_INVALIDDA
//
// MessageText:
//
//  Invalid Domain Authority
//
#define PP_E_PPSA_RPT_INVALIDDA          ((HRESULT)0x80048121L)

//
// MessageId: PP_E_PPSA_BADPASSID
//
// MessageText:
//
//  Invalid Passport ID
//
#define PP_E_PPSA_BADPASSID              ((HRESULT)0x80048122L)

//
// MessageId: PP_E_PPSA_RPT_NOTANEASI
//
// MessageText:
//
//  The account is not an EASI account
//
#define PP_E_PPSA_RPT_NOTANEASI          ((HRESULT)0x80048123L)

//
// MessageId: PP_E_PPSA_BADATTRIBUTENAME
//
// MessageText:
//
//  Invalid Attribute Name
//
#define PP_E_PPSA_BADATTRIBUTENAME       ((HRESULT)0x80048124L)

//
// MessageId: PP_E_PPSA_INVALIDPROPVALUE
//
// MessageText:
//
//  Invalid Property Value
//
#define PP_E_PPSA_INVALIDPROPVALUE       ((HRESULT)0x80048125L)

//
// MessageId: PP_E_PPSA_NO_INPUT
//
// MessageText:
//
//  Input Missing
//
#define PP_E_PPSA_NO_INPUT               ((HRESULT)0x80048126L)

//
// MessageId: PP_E_PPSA_MULTIPUID
//
// MessageText:
//
//  Error in Multi-PUID request
//
#define PP_E_PPSA_MULTIPUID              ((HRESULT)0x80048127L)

//
// MessageId: PP_E_PPSA_INVALIDCATEGORY
//
// MessageText:
//
//  Invalid Category Specified
//
#define PP_E_PPSA_INVALIDCATEGORY        ((HRESULT)0x80048128L)

//
// MessageId: PP_E_PPSA_MULTIPLEPUIDNOTALLOWED
//
// MessageText:
//
//  Multi-PUID Update/Insert Not Allowed
//
#define PP_E_PPSA_MULTIPLEPUIDNOTALLOWED ((HRESULT)0x80048129L)

//
// MessageId: PP_E_PPSA_MULTIACCOUNT
//
// MessageText:
//
//  Credential insert/update only support one account
//
#define PP_E_PPSA_MULTIACCOUNT           ((HRESULT)0x8004812AL)

//
// MessageId: PP_E_PPSA_EMPTYCREDXML
//
// MessageText:
//
//  Credential xml contains no credentials
//
#define PP_E_PPSA_EMPTYCREDXML           ((HRESULT)0x8004812BL)

//
// MessageId: PP_E_PPSA_INVALIDNAMESPACE
//
// MessageText:
//
//  The namespace does not exist or is not managed
//
#define PP_E_PPSA_INVALIDNAMESPACE       ((HRESULT)0x8004812CL)

//
// MessageId: PP_E_PPSA_CANTBLOCKUNBLOCKSELF
//
// MessageText:
//
//  A user cannot block or unblock themselves
//
#define PP_E_PPSA_CANTBLOCKUNBLOCKSELF   ((HRESULT)0x8004812DL)

//
// MessageId: PP_E_PPSA_NSDAOPERATIONUNSUPPORTED
//
// MessageText:
//
//  The DA or NS does not support this operation
//
#define PP_E_PPSA_NSDAOPERATIONUNSUPPORTED ((HRESULT)0x8004812EL)

//
// MessageId: PP_E_PPSA_PROFILENOTFOUND
//
// MessageText:
//
//  The specified profile does not exist
//
#define PP_E_PPSA_PROFILENOTFOUND        ((HRESULT)0x8004812FL)

//
// MessageId: PP_E_PPSA_NETIDMISMATCH
//
// MessageText:
//
//  The NetID specified in the input parameter does not match the NetID in the XML Profile
//
#define PP_E_PPSA_NETIDMISMATCH          ((HRESULT)0x80048130L)

//
// MessageId: PP_E_PPSA_ALREADYGRANTED
//
// MessageText:
//
//  Duplicate role binding for source and target scopes
//
#define PP_E_PPSA_ALREADYGRANTED         ((HRESULT)0x80048131L)

//
// MessageId: PP_E_PPSA_PROFILEEXISTS
//
// MessageText:
//
//  The specified profile already exists
//
#define PP_E_PPSA_PROFILEEXISTS          ((HRESULT)0x80048132L)

//
// MessageId: PP_E_PPSA_ROLETEMPLATE_EMPTY
//
// MessageText:
//
//  The role template xml is empty
//
#define PP_E_PPSA_ROLETEMPLATE_EMPTY     ((HRESULT)0x80048133L)

//
// MessageId: PP_E_PPSA_ROLETEMPLATE_EMPTYSTRING
//
// MessageText:
//
//  The role template input is an empty string
//
#define PP_E_PPSA_ROLETEMPLATE_EMPTYSTRING ((HRESULT)0x80048134L)

//
// MessageId: PP_E_PPSA_SOURCESCOPE_INVALID
//
// MessageText:
//
//  Source scope is empty or invalid
//
#define PP_E_PPSA_SOURCESCOPE_INVALID    ((HRESULT)0x80048135L)

//
// MessageId: PP_E_PPSA_SOURCESCOPETYPE_INVALID
//
// MessageText:
//
//  Source scope type is empty or invalid
//
#define PP_E_PPSA_SOURCESCOPETYPE_INVALID ((HRESULT)0x80048136L)

//
// MessageId: PP_E_PPSA_TARGETSCOPE_MISMATCH
//
// MessageText:
//
//  If used, both target scope and target scope type should be not empty
//
#define PP_E_PPSA_TARGETSCOPE_MISMATCH   ((HRESULT)0x80048137L)

//
// MessageId: PP_E_PPSA_ROLEID_INVALID
//
// MessageText:
//
//  Invalid role id
//
#define PP_E_PPSA_ROLEID_INVALID         ((HRESULT)0x80048138L)

//
// MessageId: PP_E_PPSA_PASSIDTYPE_INVALID
//
// MessageText:
//
//  Invalid PASSID type
//
#define PP_E_PPSA_PASSIDTYPE_INVALID     ((HRESULT)0x80048139L)

//
// MessageId: PP_E_PPSA_ROLEIDXML_EMPTY
//
// MessageText:
//
//  Empty role id xml
//
#define PP_E_PPSA_ROLEIDXML_EMPTY        ((HRESULT)0x8004813AL)

//
// MessageId: PP_E_PPSA_SOURCESCOPE_NOTSUPPORTED
//
// MessageText:
//
//  Source scope type is not supported
//
#define PP_E_PPSA_SOURCESCOPE_NOTSUPPORTED ((HRESULT)0x8004813BL)

//
// MessageId: PP_E_PPSA_SOURCESCOPE_IDINVALID
//
// MessageText:
//
//  The source scope id is invalid
//
#define PP_E_PPSA_SOURCESCOPE_IDINVALID  ((HRESULT)0x8004813CL)

//
// MessageId: PP_E_PPSA_ROLETEMPLATE_NOCLAIMS
//
// MessageText:
//
//  The role template does not contain any claims
//
#define PP_E_PPSA_ROLETEMPLATE_NOCLAIMS  ((HRESULT)0x8004813DL)

//
// MessageId: PP_E_PPSA_CLAIMMAPS_TOOMANY
//
// MessageText:
//
//  The role template contains too many claim maps
//
#define PP_E_PPSA_CLAIMMAPS_TOOMANY      ((HRESULT)0x8004813EL)

//
// MessageId: PP_E_PPSA_DENYCLAIMS_NOTSUPPORTED
//
// MessageText:
//
//  The deny claims are not supported in the current version
//
#define PP_E_PPSA_DENYCLAIMS_NOTSUPPORTED ((HRESULT)0x8004813FL)

//
// MessageId: PP_E_PPSA_SCOPEEXPR_INVALID
//
// MessageText:
//
//  The scope expression is empty or invalid
//
#define PP_E_PPSA_SCOPEEXPR_INVALID      ((HRESULT)0x80048140L)

//
// MessageId: PP_E_PPSA_ROLENAME_TOOLONG
//
// MessageText:
//
//  The role name is too long
//
#define PP_E_PPSA_ROLENAME_TOOLONG       ((HRESULT)0x80048141L)

//
// MessageId: PP_E_PPSA_ROLENAME_INVALIDCHARS
//
// MessageText:
//
//  Invalid characters in the role name
//
#define PP_E_PPSA_ROLENAME_INVALIDCHARS  ((HRESULT)0x80048142L)

//
// MessageId: PP_E_PPSA_ROLENAME_EMPTY
//
// MessageText:
//
//  The role name is missing in the input data
//
#define PP_E_PPSA_ROLENAME_EMPTY         ((HRESULT)0x80048143L)

//
// MessageId: PP_E_PPSA_ROLE_NOTFOUND
//
// MessageText:
//
//  The role does not exist in the database
//
#define PP_E_PPSA_ROLE_NOTFOUND          ((HRESULT)0x80048144L)

//
// MessageId: PP_E_PPSA_ROLE_ALREADYEXISTS
//
// MessageText:
//
//  The role already exist in the database
//
#define PP_E_PPSA_ROLE_ALREADYEXISTS     ((HRESULT)0x80048145L)

//
// MessageId: PP_E_PPSA_MAXROWS_TOOBIG
//
// MessageText:
//
//  The required numbers of rows exceeed the maximum value supported
//
#define PP_E_PPSA_MAXROWS_TOOBIG         ((HRESULT)0x80048146L)

//
// MessageId: PP_E_PPSA_MAXROWS_INVALID
//
// MessageText:
//
//  The maximum numbers of rows must be a positive number
//
#define PP_E_PPSA_MAXROWS_INVALID        ((HRESULT)0x80048147L)

//
// MessageId: PP_E_PPSA_TARGETSCOPE_INVALID
//
// MessageText:
//
//  Target scope is empty or invalid
//
#define PP_E_PPSA_TARGETSCOPE_INVALID    ((HRESULT)0x80048148L)

//
// MessageId: PP_E_PPSA_TARGETSCOPETYPE_INVALID
//
// MessageText:
//
//  Target scope type is empty or invalid
//
#define PP_E_PPSA_TARGETSCOPETYPE_INVALID ((HRESULT)0x80048149L)

//
// MessageId: PP_E_PPSA_NAMESPACESCOPE_NOTFOUND
//
// MessageText:
//
//  The namespace scope does not exist or is invalid
//
#define PP_E_PPSA_NAMESPACESCOPE_NOTFOUND ((HRESULT)0x8004814AL)

//
// MessageId: PP_E_PPSA_INVALID_DOMAIN_ROOT
//
// MessageText:
//
//  The specified domain root is invalid
//
#define PP_E_PPSA_INVALID_DOMAIN_ROOT    ((HRESULT)0x8004814BL)

//
// MessageId: PP_E_PPSA_EMPTY_SITEKEY
//
// MessageText:
//
//  The site key buffer is empty
//
#define PP_E_PPSA_EMPTY_SITEKEY          ((HRESULT)0x8004814CL)

//
// MessageId: PP_E_PPSA_INTERNALCRYPT_INVALID
//
// MessageText:
//
//  Invalid crypter object
//
#define PP_E_PPSA_INTERNALCRYPT_INVALID  ((HRESULT)0x8004814DL)

//
// MessageId: PP_E_PPSA_SITEENCRYPTION_ERROR
//
// MessageText:
//
//  The data encryption failed for the calling site
//
#define PP_E_PPSA_SITEENCRYPTION_ERROR   ((HRESULT)0x8004814EL)

//
// MessageId: PP_E_PPSA_SITEKEY_NOTFOUND
//
// MessageText:
//
//  The requested site key does not exist
//
#define PP_E_PPSA_SITEKEY_NOTFOUND       ((HRESULT)0x8004814FL)

//
// MessageId: PP_E_PPSA_NOT_IN_NAMESPACE
//
// MessageText:
//
//  The credential name is not in the specified managed namespace
//
#define PP_E_PPSA_NOT_IN_NAMESPACE       ((HRESULT)0x80048150L)

//
// MessageId: PP_E_PPSA_INVALIDCREDNAME
//
// MessageText:
//
//  The credential name is not valid
//
#define PP_E_PPSA_INVALIDCREDNAME        ((HRESULT)0x80048151L)

//
// MessageId: PP_E_PPSA_SAMECREDNAME
//
// MessageText:
//
//  Try to rename a credential to the same name.
//
#define PP_E_PPSA_SAMECREDNAME           ((HRESULT)0x80048152L)

//
// MessageId: PP_E_PPSA_INVALIDCREDXML
//
// MessageText:
//
//  The credential xml is not valid
//
#define PP_E_PPSA_INVALIDCREDXML         ((HRESULT)0x80048153L)

//
// MessageId: PP_E_PPSA_INVALIDCREDTYPE
//
// MessageText:
//
//  The credential type is not valid
//
#define PP_E_PPSA_INVALIDCREDTYPE        ((HRESULT)0x80048154L)

//
// MessageId: PP_E_PPSA_UNABLETOGETCRED
//
// MessageText:
//
//  Unable to get the credential for the specified account.
//
#define PP_E_PPSA_UNABLETOGETCRED        ((HRESULT)0x80048155L)

//
// MessageId: PP_E_PPSA_NAMESPACE_NOTMANAGED
//
// MessageText:
//
//  The input namespace is not managed
//
#define PP_E_PPSA_NAMESPACE_NOTMANAGED   ((HRESULT)0x80048156L)

//
// MessageId: PP_E_PPSA_NAMESPACEID_INVALID
//
// MessageText:
//
//  Invalid namespace id
//
#define PP_E_PPSA_NAMESPACEID_INVALID    ((HRESULT)0x80048157L)

//
// MessageId: PP_E_PPSA_NAMESPACEATTR_NOTFOUND
//
// MessageText:
//
//  The specified attribute is not set for the given namespace
//
#define PP_E_PPSA_NAMESPACEATTR_NOTFOUND ((HRESULT)0x80048158L)

//
// MessageId: PP_E_PPSA_ADMINS_NOTALLOWED
//
// MessageText:
//
//  Cannot add the administrator, the namespace does not allow outside administrators
//
#define PP_E_PPSA_ADMINS_NOTALLOWED      ((HRESULT)0x80048159L)

//
// MessageId: PP_E_PPSA_NAMESPACEATTR_INVALIDTYPE
//
// MessageText:
//
//  The specified namespace attribute does not have the expected type
//
#define PP_E_PPSA_NAMESPACEATTR_INVALIDTYPE ((HRESULT)0x8004815AL)

//
// MessageId: PP_E_PPSA_PASSID_INVALIDACCOUNT
//
// MessageText:
//
//  The specified account is invalid
//
#define PP_E_PPSA_PASSID_INVALIDACCOUNT  ((HRESULT)0x8004815BL)

//
// MessageId: PP_E_PPSA_NAMESPACE_SITEIDINVALID
//
// MessageText:
//
//  The site id for the specified namespace is invalid
//
#define PP_E_PPSA_NAMESPACE_SITEIDINVALID ((HRESULT)0x8004815CL)

//
// MessageId: PP_E_PPSA_ROLE_NOTGRANTED
//
// MessageText:
//
//  The specified role is not granted for the input source and target scopes
//
#define PP_E_PPSA_ROLE_NOTGRANTED        ((HRESULT)0x8004815DL)

//
// MessageId: PP_E_PPSA_NAMESPACE_LASTADMIN
//
// MessageText:
//
//  The last namespace/site administrator cannot be removed
//
#define PP_E_PPSA_NAMESPACE_LASTADMIN    ((HRESULT)0x8004815EL)

//
// MessageId: PP_E_PPSA_NAMESPACE_NOTADMIN
//
// MessageText:
//
//  The input account is not an administrator for the specified namespace
//
#define PP_E_PPSA_NAMESPACE_NOTADMIN     ((HRESULT)0x8004815FL)

//
// MessageId: PP_E_PPSA_TOOMANYROWS
//
// MessageText:
//
//  The db query returns too many rows, expecting at most one
//
#define PP_E_PPSA_TOOMANYROWS            ((HRESULT)0x80048160L)

//
// MessageId: PP_E_PPSA_NAMESPACE_INVALIDSIGNIN
//
// MessageText:
//
//  Empty or invalid signin name
//
#define PP_E_PPSA_NAMESPACE_INVALIDSIGNIN ((HRESULT)0x80048161L)

//
// MessageId: PP_E_PPSA_NAMESPACE_DNSCHECKFAILED
//
// MessageText:
//
//  The DNS entry for the input namespace was not found or is invalid
//
#define PP_E_PPSA_NAMESPACE_DNSCHECKFAILED ((HRESULT)0x80048162L)

//
// MessageId: PP_E_PPSA_NAMESPACE_NOTFOUND
//
// MessageText:
//
//  The input namespace was not found
//
#define PP_E_PPSA_NAMESPACE_NOTFOUND     ((HRESULT)0x80048163L)

//
// MessageId: PP_E_PPSA_NAMESPACE_ALREADYRESERVED
//
// MessageText:
//
//  The input namespace is already reserved
//
#define PP_E_PPSA_NAMESPACE_ALREADYRESERVED ((HRESULT)0x80048164L)

//
// MessageId: PP_E_PPSA_NAMESPACE_INVALIDATTRXML
//
// MessageText:
//
//  The input attributes xml is invalid or contains no attributes
//
#define PP_E_PPSA_NAMESPACE_INVALIDATTRXML ((HRESULT)0x80048165L)

//
// MessageId: PP_E_PPSA_NAMESPACE_FORBIDDENNAME
//
// MessageText:
//
//  The input name is not allowed for a namespace
//
#define PP_E_PPSA_NAMESPACE_FORBIDDENNAME ((HRESULT)0x80048166L)

//
// MessageId: PP_E_PPSA_NAMESPACE_ALREADYADMIN
//
// MessageText:
//
//  The given account is already an administrator for the specified namespace
//
#define PP_E_PPSA_NAMESPACE_ALREADYADMIN ((HRESULT)0x80048167L)

//
// MessageId: PP_E_PPSA_NAMESPACE_DELADMIN_NODOMAIN
//
// MessageText:
//
//  Cannot determine the DelegatedAdmin domain for input site
//
#define PP_E_PPSA_NAMESPACE_DELADMIN_NODOMAIN ((HRESULT)0x80048168L)

//
// MessageId: PP_E_PPSA_NAMESPACE_DELADMIN_INVALIDNAME
//
// MessageText:
//
//  Invalid DelegatedAdmin domain name for the input site
//
#define PP_E_PPSA_NAMESPACE_DELADMIN_INVALIDNAME ((HRESULT)0x80048169L)

//
// MessageId: PP_E_PPSA_NAMESPACE_DNSERROR
//
// MessageText:
//
//  Failure during query function for DNS records
//
#define PP_E_PPSA_NAMESPACE_DNSERROR     ((HRESULT)0x8004816AL)

//
// MessageId: PP_E_PPSA_NOCREDENTIALNAME
//
// MessageText:
//
//  Credential Name Missing
//
#define PP_E_PPSA_NOCREDENTIALNAME       ((HRESULT)0x8004816BL)

//
// MessageId: PP_E_PPSA_NOMOBILEPHONENUM
//
// MessageText:
//
//  Mobile phone Missing
//
#define PP_E_PPSA_NOMOBILEPHONENUM       ((HRESULT)0x8004816CL)

//
// MessageId: PP_E_PPSA_NONETID
//
// MessageText:
//
//  NETID Missing
//
#define PP_E_PPSA_NONETID                ((HRESULT)0x8004816DL)

//
// MessageId: PP_E_PPSA_NONETIDFORSECURE
//
// MessageText:
//
//  NETID is Missing for secure token
//
#define PP_E_PPSA_NONETIDFORSECURE       ((HRESULT)0x8004816EL)

//
// MessageId: PP_E_PPSA_NOPASSWORD
//
// MessageText:
//
//  Password Missing
//
#define PP_E_PPSA_NOPASSWORD             ((HRESULT)0x8004816FL)

//
// MessageId: PP_E_PPSA_NOMOBILEPIN
//
// MessageText:
//
//  Mobile pin Missing
//
#define PP_E_PPSA_NOMOBILEPIN            ((HRESULT)0x80048170L)

//
// MessageId: PP_E_PPSA_NOSECUREPIN
//
// MessageText:
//
//  Secure pin Missing
//
#define PP_E_PPSA_NOSECUREPIN            ((HRESULT)0x80048171L)

//
// MessageId: PP_E_PPSA_NOSQ
//
// MessageText:
//
//  Secret question missing
//
#define PP_E_PPSA_NOSQ                   ((HRESULT)0x80048172L)

//
// MessageId: PP_E_PPSA_NOSA
//
// MessageText:
//
//  Secret anwser missing
//
#define PP_E_PPSA_NOSA                   ((HRESULT)0x80048173L)

//
// MessageId: PP_E_PPSA_CLAIMMAPINDEX_INVALID
//
// MessageText:
//
//  UserInput error: invalid claimmap index
//
#define PP_E_PPSA_CLAIMMAPINDEX_INVALID  ((HRESULT)0x80048174L)

//
// MessageId: PP_E_PPSA_CLAIMMAP_NOCLAIMS
//
// MessageText:
//
//  The role template contains a claim map with no claims
//
#define PP_E_PPSA_CLAIMMAP_NOCLAIMS      ((HRESULT)0x80048175L)

//
// MessageId: PP_E_PPSA_CLAIMMAP_NOSCOPES
//
// MessageText:
//
//  The role template contains a claim map with no scopes
//
#define PP_E_PPSA_CLAIMMAP_NOSCOPES      ((HRESULT)0x80048176L)

//
// MessageId: PP_E_PPSA_DUPLICATECLAIM
//
// MessageText:
//
//  The claim map contains a duplicated claim
//
#define PP_E_PPSA_DUPLICATECLAIM         ((HRESULT)0x80048177L)

//
// MessageId: PP_E_PPSA_DUPLICATESCOPE
//
// MessageText:
//
//  The claim map contains a duplicated scope
//
#define PP_E_PPSA_DUPLICATESCOPE         ((HRESULT)0x80048178L)

//
// MessageId: PP_E_PPSA_SCOPECONFLICT
//
// MessageText:
//
//  The role template contains a scope defined both as included and excluded
//
#define PP_E_PPSA_SCOPECONFLICT          ((HRESULT)0x80048179L)

//
// MessageId: PP_E_PPSA_SCOPETYPE_INVALID
//
// MessageText:
//
//  Invalid scope type
//
#define PP_E_PPSA_SCOPETYPE_INVALID      ((HRESULT)0x8004817AL)

//
// MessageId: PP_E_PPSA_SCOPETYPE_MISMATCH
//
// MessageText:
//
//  If a scope type is provided then the scope expression should be not empty
//
#define PP_E_PPSA_SCOPETYPE_MISMATCH     ((HRESULT)0x8004817BL)

//
// MessageId: PP_E_PPSA_CLAIMID_INVALID
//
// MessageText:
//
//  Invalid claim id
//
#define PP_E_PPSA_CLAIMID_INVALID        ((HRESULT)0x8004817CL)

//
// MessageId: PP_E_PPSA_DBCONVERSION_FAILED
//
// MessageText:
//
//  UserInput error: failed to convert to db format
//
#define PP_E_PPSA_DBCONVERSION_FAILED    ((HRESULT)0x8004817DL)

//
// MessageId: PP_E_PPSA_SCOPEEXPR_TOOLONG
//
// MessageText:
//
//  Input scope expression is too long
//
#define PP_E_PPSA_SCOPEEXPR_TOOLONG      ((HRESULT)0x8004817EL)

//
// MessageId: PP_E_PPSA_ROLETEMPLATE_INVALIDXML
//
// MessageText:
//
//  Invalid xml format for a role template
//
#define PP_E_PPSA_ROLETEMPLATE_INVALIDXML ((HRESULT)0x8004817FL)

//
// MessageId: PP_E_PPSA_CLAIMNAME_NOTDEFINED
//
// MessageText:
//
//  Input claim name is not defined
//
#define PP_E_PPSA_CLAIMNAME_NOTDEFINED   ((HRESULT)0x80048180L)

//
// MessageId: PP_E_PPSA_SCOPEEXPR_BADSYNTAX
//
// MessageText:
//
//  Invalid scope expression: bad syntax or invalid scope type
//
#define PP_E_PPSA_SCOPEEXPR_BADSYNTAX    ((HRESULT)0x80048181L)

//
// MessageId: PP_E_PPSA_TARGETSCOPE_IDINVALID
//
// MessageText:
//
//  The target scope id is invalid
//
#define PP_E_PPSA_TARGETSCOPE_IDINVALID  ((HRESULT)0x80048182L)

//
// MessageId: PP_E_PPSA_ROLEID_INVALIDXML
//
// MessageText:
//
//  Invalid xml format for a role id
//
#define PP_E_PPSA_ROLEID_INVALIDXML      ((HRESULT)0x80048183L)

//
// MessageId: PP_E_PPSA_TARGETPOLICY_NOTSUPPORTED
//
// MessageText:
//
//  The target policy xml is not supported
//
#define PP_E_PPSA_TARGETPOLICY_NOTSUPPORTED ((HRESULT)0x80048184L)

//
// MessageId: PP_E_PPSA_NAMESPACE_INVALIDNAME
//
// MessageText:
//
//  The namespace name contains invalid characters or the format is invalid
//
#define PP_E_PPSA_NAMESPACE_INVALIDNAME  ((HRESULT)0x80048185L)

//
// MessageId: PP_E_PPSA_NAMESPACE_PROPCONVERSIONERROR
//
// MessageText:
//
//  Conversion error for a namespace property
//
#define PP_E_PPSA_NAMESPACE_PROPCONVERSIONERROR ((HRESULT)0x80048186L)

//
// MessageId: PP_E_PPSA_NAMESPACE_ATTRXMLEMPTY
//
// MessageText:
//
//  The namespace attributes xml is empty
//
#define PP_E_PPSA_NAMESPACE_ATTRXMLEMPTY ((HRESULT)0x80048187L)

//
// MessageId: PP_E_PPSA_NAMESPACE_XMLNOATTRIBUTES
//
// MessageText:
//
//  The namespace attributes xml contains no valid attributes
//
#define PP_E_PPSA_NAMESPACE_XMLNOATTRIBUTES ((HRESULT)0x80048188L)

//
// MessageId: PP_E_PPSA_SITE_NOT_EXIST
//
// MessageText:
//
//  The specified site does not exist
//
#define PP_E_PPSA_SITE_NOT_EXIST         ((HRESULT)0x80048189L)

//
// MessageId: PP_E_PPSA_NAMESPACE_INVALIDSITEID
//
// MessageText:
//
//  The specified site id is invalid
//
#define PP_E_PPSA_NAMESPACE_INVALIDSITEID ((HRESULT)0x8004818AL)

//
// MessageId: PP_E_PPSA_NAMESPACE_USERNOTINDOMAIN
//
// MessageText:
//
//  The user account is not in the domain registered for the input site
//
#define PP_E_PPSA_NAMESPACE_USERNOTINDOMAIN ((HRESULT)0x8004818BL)

//
// MessageId: PP_E_PPSA_NAMESPACE_ALREADYSITEADMIN
//
// MessageText:
//
//  The user account is already an administrator for the specified site
//
#define PP_E_PPSA_NAMESPACE_ALREADYSITEADMIN ((HRESULT)0x8004818CL)

//
// MessageId: PP_E_PPSA_NAMESPACE_NOTSITEADMIN
//
// MessageText:
//
//  The user account is not an administrator for the specified site
//
#define PP_E_PPSA_NAMESPACE_NOTSITEADMIN ((HRESULT)0x8004818DL)

//
// MessageId: PP_E_PPSA_DELETEACCOUNTNOTALLOWED
//
// MessageText:
//
//  The account has issues preventing it from being deleted
//
#define PP_E_PPSA_DELETEACCOUNTNOTALLOWED ((HRESULT)0x8004818EL)

//
// MessageId: PP_E_PPSA_NAMESPACE_EMPTYPROPNAME
//
// MessageText:
//
//  Empty property name for a namespace attribute
//
#define PP_E_PPSA_NAMESPACE_EMPTYPROPNAME ((HRESULT)0x8004818FL)

//
// MessageId: PP_E_PPSA_NAMESPACE_PROPTYPEINVALID
//
// MessageText:
//
//  Invalid property type for a namespace attribute
//
#define PP_E_PPSA_NAMESPACE_PROPTYPEINVALID ((HRESULT)0x80048190L)

//
// MessageId: PP_E_PPSA_NAMESPACE_PROPNAMEINVALID
//
// MessageText:
//
//  Invalid property name for a namespace attribute
//
#define PP_E_PPSA_NAMESPACE_PROPNAMEINVALID ((HRESULT)0x80048191L)

//
// MessageId: PP_E_PPSA_NAMESPACE_WORDLISTINVALID
//
// MessageText:
//
//  Forbidden word list not found or is invalid
//
#define PP_E_PPSA_NAMESPACE_WORDLISTINVALID ((HRESULT)0x80048192L)

//
// MessageId: PP_E_PPSA_NAMESPACE_PROPNOTSUPPORTED
//
// MessageText:
//
//  Property not supported in this version
//
#define PP_E_PPSA_NAMESPACE_PROPNOTSUPPORTED ((HRESULT)0x80048193L)

//
// MessageId: PP_E_PPSA_NAMESPACE_PROPIDINVALID
//
// MessageText:
//
//  Invalid id for a namespace property
//
#define PP_E_PPSA_NAMESPACE_PROPIDINVALID ((HRESULT)0x80048194L)

//
// MessageId: PP_E_PPSA_NAMESPACE_PROPNAMETOOLONG
//
// MessageText:
//
//  The property name is too long
//
#define PP_E_PPSA_NAMESPACE_PROPNAMETOOLONG ((HRESULT)0x80048195L)

//
// MessageId: PP_E_PPSA_NAMESPACE_PROPNOTFOUND
//
// MessageText:
//
//  The specified property name/id does not exist
//
#define PP_E_PPSA_NAMESPACE_PROPNOTFOUND ((HRESULT)0x80048196L)

//
// MessageId: PP_E_PPSA_NAMESPACE_PROPBADVARIANT
//
// MessageText:
//
//  Invalid variant value for a namespace property
//
#define PP_E_PPSA_NAMESPACE_PROPBADVARIANT ((HRESULT)0x80048197L)

//
// MessageId: PP_E_PPSA_NAMESPACE_STATUSINVALID
//
// MessageText:
//
//  Invalid namespace status
//
#define PP_E_PPSA_NAMESPACE_STATUSINVALID ((HRESULT)0x80048198L)

//
// MessageId: PP_E_PPSA_NAMESPACE_PROPOBJECT_INVALID
//
// MessageText:
//
//  UserInput error: Invalid property object
//
#define PP_E_PPSA_NAMESPACE_PROPOBJECT_INVALID ((HRESULT)0x80048199L)

//
// MessageId: PP_E_PPSA_NAMESPACE_PROPNOTSET
//
// MessageText:
//
//  The specified namespace property is not set
//
#define PP_E_PPSA_NAMESPACE_PROPNOTSET   ((HRESULT)0x8004819AL)

//
// MessageId: PP_E_PPSA_NAMESPACE_PROPVALUEINVALID
//
// MessageText:
//
//  Invalid value for a namespace property
//
#define PP_E_PPSA_NAMESPACE_PROPVALUEINVALID ((HRESULT)0x8004819BL)

//
// MessageId: PP_E_PPSA_NAMESPACE_PROPDEPRECATED
//
// MessageText:
//
//  The input contains a namespace property that is deprecated
//
#define PP_E_PPSA_NAMESPACE_PROPDEPRECATED ((HRESULT)0x8004819CL)

//
// MessageId: PP_E_PPSA_ACCOUNTXMLARRAYEMPTY
//
// MessageText:
//
//  Account XML Array is Empty
//
#define PP_E_PPSA_ACCOUNTXMLARRAYEMPTY   ((HRESULT)0x8004819DL)

//
// MessageId: PP_E_PPSA_ACCOUNTXMLARRAYTOOBIG
//
// MessageText:
//
//  Account XML Array Too Large
//
#define PP_E_PPSA_ACCOUNTXMLARRAYTOOBIG  ((HRESULT)0x8004819EL)

//
// MessageId: PP_E_PPSA_LAST
//
// MessageText:
//
//  Place holder for the last service api error
//
#define PP_E_PPSA_LAST                   ((HRESULT)0x800490FFL)

//!!!!Next base please start from 0x9100
// base 0x9100
//------------------------------------------------------------------------
// Graduation Service error codes
//------------------------------------------------------------------------
//
// MessageId: PP_E_KGS_INVALID_TIME_INTERVAL
//
// MessageText:
//
//  The CCM parameter KidsGraduation_TimeInterval did not meet the required 
//  guidelines.  This parameter must be an integer value greater than 0.
//
#define PP_E_KGS_INVALID_TIME_INTERVAL   ((HRESULT)0x80049100L)

//
// MessageId: PP_E_KGS_INVALID_LOCATION
//
// MessageText:
//
//  The config parameter Location in the section Minidump of the INI file was
//  empty or undefined.
//
#define PP_E_KGS_INVALID_LOCATION        ((HRESULT)0x80049101L)

//
// MessageId: PP_E_KGS_INVALID_LOG_FILE_NAME
//
// MessageText:
//
//  The CCM parameter KidsGraduation_LogFileName was empty or undefined.
//
#define PP_E_KGS_INVALID_LOG_FILE_NAME   ((HRESULT)0x80049102L)

//
// MessageId: PP_E_KGS_INVALID_REQUIRED_LOAD_LEVEL
//
// MessageText:
//
//  The CCM parameter KidsGraduation_RequiredLoadLevel did not meet the required
//  guidelines.  This parameter must be a positive integer less than or equal to
//  100.
//
#define PP_E_KGS_INVALID_REQUIRED_LOAD_LEVEL ((HRESULT)0x80049103L)

//
// MessageId: PP_E_KGS_INVALID_MIN_TIME_INTERVAL
//
// MessageText:
//
//  The CCM parameter KidsGraduation_TimeIntervalMin did not meet the required
//  guidelines.  This parameter must be a positive integer.
//
#define PP_E_KGS_INVALID_MIN_TIME_INTERVAL ((HRESULT)0x80049104L)

//
// MessageId: PP_E_KGS_INVALID_MAX_TIME_INTERVAL
//
// MessageText:
//
//  The CCM parameter KidsGraduation_TimeIntervalMax did not meet the required
//  guidelines.  This parameter must be a positive integer greater than the CCM
//  parameter KidsGraduation_TimeIntervalMin.
//
#define PP_E_KGS_INVALID_MAX_TIME_INTERVAL ((HRESULT)0x80049105L)

//
// MessageId: PP_E_KGS_INVALID_TRIGGER_VALUE
//
// MessageText:
//
//  The CCM parameter KidsGraduation_TriggerValue did not meet the required
//  guidelines.  This parameter must be a positive integer less than the CCM
//  parameter KidsGraduation_RequiredLoadLevel and which, summed with the CCM
//  parameter KidsGraduation_RequiredLoadLevel, may not exceed 100.
//
#define PP_E_KGS_INVALID_TRIGGER_VALUE   ((HRESULT)0x80049106L)

//
// MessageId: PP_E_KGS_INVALID_THROTTLE_PER_CALLS
//
// MessageText:
//
//  The CCM parameter KidsGraduation_ThrottlePerNumberOfCalls did not meet the
//  required guidelines.  This parameter must be a positive integer.
//
#define PP_E_KGS_INVALID_THROTTLE_PER_CALLS ((HRESULT)0x80049107L)

//
// MessageId: PP_E_KGS_INVALID_DOMAIN
//
// MessageText:
//
//  The CCM parameter KidsGraduation_DomainsList did not meet the required
//  guidelines.  This parameter must contain only valid domain IDs (1, 2,
//  and/or 3).
//
#define PP_E_KGS_INVALID_DOMAIN          ((HRESULT)0x80049108L)

//
// MessageId: PP_E_KGS_INVALID_NUMBER_GET_THREADS
//
// MessageText:
//
//  The CCM parameter KidsGraduation_NumberOfGetThreads did not meet the required
//  guidelines.  This parameter must be a positive integer.
//
#define PP_E_KGS_INVALID_NUMBER_GET_THREADS ((HRESULT)0x80049109L)

//
// MessageId: PP_E_KGS_INVALID_NUMBER_PROCESS_THREADS
//
// MessageText:
//
//  The CCM parameter KidsGraduation_NumberOfProcessThreads did not meet the
//  required guidelines.  This parameter must be a positive integer.
//
#define PP_E_KGS_INVALID_NUMBER_PROCESS_THREADS ((HRESULT)0x8004910AL)

// base 0x9200 - 0x93ff
//
// MessageId: PP_E_RPS_NOT_INITIALIZED
//
// MessageText:
//
//  RPS is not initialized. Other RPS api can be called only after RPS.Initialize succeed. Action: If Initialize failed, check event log for errors.
//
#define PP_E_RPS_NOT_INITIALIZED         ((HRESULT)0x80049200L)

//
// MessageId: PP_E_RPS_FAILED_TO_CREATE_DOM
//
// MessageText:
//
//  Failed to create DOM object. Action: check if msxml4 has been installed correctly.
//
#define PP_E_RPS_FAILED_TO_CREATE_DOM    ((HRESULT)0x80049201L)

//
// MessageId: PP_E_RPS_INTERNAL_ERROR
//
// MessageText:
//
//  Internal program or unexpected error.  It also could be caused by programming or configuration error. Action: Please check the event log history, the code calling RPS, RPS configuration. Try the steps in the Trouble Shooting sections of the RPS SDK. 
//
#define PP_E_RPS_INTERNAL_ERROR          ((HRESULT)0x80049202L)

//
// MessageId: PP_E_RPS_INVALID_OBJECT_ID
//
// MessageText:
//
//  The object ID is invalid. This is can be caused by RPS internal error, or error from a custom component.
//
#define PP_E_RPS_INVALID_OBJECT_ID       ((HRESULT)0x80049203L)

//
// MessageId: PP_E_RPS_OBJECT_ID_CANNOT_OVERWRITE
//
// MessageText:
//
//  The object ID cannot be overridden. CUSTOM component only: caused by trying to override object that can not be overridden.
//
#define PP_E_RPS_OBJECT_ID_CANNOT_OVERWRITE ((HRESULT)0x80049204L)

//
// MessageId: PP_E_RPS_FAILED_TO_TLS
//
// MessageText:
//
//  TLS (thread local storage) call failed. The system is in a bad state. TlsAlloc failed.
//
#define PP_E_RPS_FAILED_TO_TLS           ((HRESULT)0x80049205L)

//
// MessageId: PP_E_RPS_XML_FILE_ERROR
//
// MessageText:
//
//  XML file has error. RPS is seeing an invalid XML file, caused by configuration error.
//
#define PP_E_RPS_XML_FILE_ERROR          ((HRESULT)0x80049206L)

//
// MessageId: PP_E_RPS_READ_ONLY
//
// MessageText:
//
//  Property is read only. This is caused by writing to a readonly property bag.
//
#define PP_E_RPS_READ_ONLY               ((HRESULT)0x80049207L)

//
// MessageId: PP_E_RPS_SERVER_CONFIG_ALREADY_INITTED
//
// MessageText:
//
//  The server config has been already initialized. Caused by RPS internal error.
//
#define PP_E_RPS_SERVER_CONFIG_ALREADY_INITTED ((HRESULT)0x80049208L)

//
// MessageId: PP_E_RPS_INVALIDCONFIG
//
// MessageText:
//
//  Invalid configuration. Check event log for actions.
//
#define PP_E_RPS_INVALIDCONFIG           ((HRESULT)0x80049209L)

//
// MessageId: PP_E_RPS_CERT_NOT_FOUND
//
// MessageText:
//
//  Certificate cannot be found. Certificate required for the operation cannot be found.
//
#define PP_E_RPS_CERT_NOT_FOUND          ((HRESULT)0x8004920AL)

//
// MessageId: PP_E_RPS_SKIBUFFER_TOO_SMALL
//
// MessageText:
//
//  Buffer for SKI is too small. The SKI buffer is too small. Caused by RPS internal error or invalid certificate with large SKI
//
#define PP_E_RPS_SKIBUFFER_TOO_SMALL     ((HRESULT)0x8004920BL)

//
// MessageId: PP_E_RPS_FILE_TOO_LARGE
//
// MessageText:
//
//  File is too large. Caused by large Certificate file. Max size is: 512K
//
#define PP_E_RPS_FILE_TOO_LARGE          ((HRESULT)0x8004920CL)

//
// MessageId: PP_E_RPS_INVALID_DATATYPE
//
// MessageText:
//
//  Data type is invalid. The data type is different from the expected data type.
//
#define PP_E_RPS_INVALID_DATATYPE        ((HRESULT)0x8004920DL)

//
// MessageId: PP_E_RPS_MORE_DATA
//
// MessageText:
//
//  Insufficient data buffer.
//
#define PP_E_RPS_MORE_DATA               ((HRESULT)0x8004920EL)

//
// MessageId: PP_E_RPS_INVALID_SIGNATURE
//
// MessageText:
//
//  Signatures do not match.
//
#define PP_E_RPS_INVALID_SIGNATURE       ((HRESULT)0x8004920FL)

//
// MessageId: PP_E_RPS_ENCRYPTEDKEY_TOO_LARGE
//
// MessageText:
//
//  The encrypted key data is too large. Max: 1024 bytes
//
#define PP_E_RPS_ENCRYPTEDKEY_TOO_LARGE  ((HRESULT)0x80049211L)

//
// MessageId: PP_E_RPS_DATA_INTEGRITY_CHECK_FAILED
//
// MessageText:
//
//  Failed data integrity check - hash mismatch.
//
#define PP_E_RPS_DATA_INTEGRITY_CHECK_FAILED ((HRESULT)0x80049212L)

//
// MessageId: PP_E_RPS_CERT_WITHOUT_PRIVATE_KEY
//
// MessageText:
//
//  The certificate used for decryption did not have private key.
//
#define PP_E_RPS_CERT_WITHOUT_PRIVATE_KEY ((HRESULT)0x80049214L)

//
// MessageId: PP_E_RPS_NET_CONFIG_CACHE_ALREADY_INITTED
//
// MessageText:
//
//  Network config cache has already been initialized. Caused by RPS internal error.
//
#define PP_E_RPS_NET_CONFIG_CACHE_ALREADY_INITTED ((HRESULT)0x80049215L)

//
// MessageId: PP_E_RPS_DOMAIN_ATTRIBUTE_NOT_FOUND
//
// MessageText:
//
//  Requested domain attribute was not found in rpsnetwork.xml.
//
#define PP_E_RPS_DOMAIN_ATTRIBUTE_NOT_FOUND ((HRESULT)0x80049216L)

//
// MessageId: PP_E_RPS_INVALIDDATA
//
// MessageText:
//
//  The data to pack/unpack is not valid RPS data.
//
#define PP_E_RPS_INVALIDDATA             ((HRESULT)0x80049217L)

//
// MessageId: PP_E_RPS_TICKET_NOT_INITIALIZED
//
// MessageText:
//
//  Ticket was not initialized. Call ProcessToken or Authenticate API to initialize the ticket before making other calls in ticket object.
//
#define PP_E_RPS_TICKET_NOT_INITIALIZED  ((HRESULT)0x80049218L)

//
// MessageId: PP_E_RPS_TICKET_CANNOT_BE_INITIALIZED_MORE_THAN_ONCE
//
// MessageText:
//
//  Ticket has already been initialized. Ticket object cannot be reused. Call RPS.GetObject to get a new ticket object.
//
#define PP_E_RPS_TICKET_CANNOT_BE_INITIALIZED_MORE_THAN_ONCE ((HRESULT)0x80049219L)

//
// MessageId: PP_E_RPS_SAML_ASSERTION_MISSINGDATA
//
// MessageText:
//
//  SAML assertion or WebSSO ticket missing data member. Invalid Assertion.
//
#define PP_E_RPS_SAML_ASSERTION_MISSINGDATA ((HRESULT)0x8004921AL)

//
// MessageId: PP_E_RPS_INVALID_TIMEWINDOW
//
// MessageText:
//
//  Invalid time window. The timewindow parameter in site configuraion or input parameter is either too large or too small. Check rps.h for the min and max values.
//
#define PP_E_RPS_INVALID_TIMEWINDOW      ((HRESULT)0x8004921BL)

//
// MessageId: PP_E_RPS_HTTP_BODY_REQUIRED
//
// MessageText:
//
//  HTTP body is requried to authenticate. Application should call the API again with http body.
//
#define PP_E_RPS_HTTP_BODY_REQUIRED      ((HRESULT)0x8004921DL)

//
// MessageId: PP_E_RPS_INVALID_TICKET_TYPE
//
// MessageText:
//
//  Ticket type is invalid. Could be caused by incorrect ticket type or switching of rpsauth and rpssecauth cookies.
//
#define PP_E_RPS_INVALID_TICKET_TYPE     ((HRESULT)0x8004921EL)

//
// MessageId: PP_E_RPS_INVALID_SLIDINGWINDOW
//
// MessageText:
//
//  Sliding timewindow is invalid. Input parameter sliding time window must be smaller than time window. These values can be from site configuration or api arguments.
//
#define PP_E_RPS_INVALID_SLIDINGWINDOW   ((HRESULT)0x8004921FL)

//
// MessageId: PP_E_RPS_REASON_INVALID_AUTHMETHOD
//
// MessageText:
//
//  Failed the Validate call, reason: failed the authmethod check. 
//
#define PP_E_RPS_REASON_INVALID_AUTHMETHOD ((HRESULT)0x80049220L)

//
// MessageId: PP_E_RPS_NO_SUCH_PROFILE_ATTRIBUTE
//
// MessageText:
//
//  The attribute index asked for is greater than the attribute count in the profile schema.
//
#define PP_E_RPS_NO_SUCH_PROFILE_ATTRIBUTE ((HRESULT)0x80049222L)

//
// MessageId: PP_E_RPS_INVALID_PROFILESCHEMA_TYPE
//
// MessageText:
//
//  The data type asked for is not defined in the profile schema - unsupported data type in proflie.
//
#define PP_E_RPS_INVALID_PROFILESCHEMA_TYPE ((HRESULT)0x80049223L)

//
// MessageId: PP_E_RPS_FAILED_DOWNLOAD
//
// MessageText:
//
//  RPS service failed to download rpsnetwork.xml.
//
#define PP_E_RPS_FAILED_DOWNLOAD         ((HRESULT)0x80049224L)

//
// MessageId: PP_E_RPS_INVALID_SITEID
//
// MessageText:
//
//  SiteId does not match the Ticket TargetId or Audience.
//
#define PP_E_RPS_INVALID_SITEID          ((HRESULT)0x80049226L)

//
// MessageId: PP_E_RPS_BASE64DECODE_FAILED
//
// MessageText:
//
//  Failed to do base64 decoding.
//
#define PP_E_RPS_BASE64DECODE_FAILED     ((HRESULT)0x80049227L)

//
// MessageId: PP_E_RPS_REASON_TIMEWINDOW_EXPIRED
//
// MessageText:
//
//  Failed the Validate call, reason: Time window expired.
//
#define PP_E_RPS_REASON_TIMEWINDOW_EXPIRED ((HRESULT)0x80049228L)

//
// MessageId: PP_E_RPS_REASON_SLIDINGWINDOW_EXPIRED
//
// MessageText:
//
//  Failed the Validate call, reason: Sliding time window expired.
//
#define PP_E_RPS_REASON_SLIDINGWINDOW_EXPIRED ((HRESULT)0x80049229L)

//
// MessageId: PP_E_RPS_CERT_INVALID_KEY_SPEC
//
// MessageText:
//
//  The certificate private key has an invalid key spec. The key spec should be AT_KEYEXCHANGE.
//
#define PP_E_RPS_CERT_INVALID_KEY_SPEC   ((HRESULT)0x8004922AL)

//
// MessageId: PP_E_RPS_INTERNAL_ERROR_CODE_UNSET_IN_EXCEPTION
//
// MessageText:
//
//  Internal program error.
//
#define PP_E_RPS_INTERNAL_ERROR_CODE_UNSET_IN_EXCEPTION ((HRESULT)0x8004922BL)

//
// MessageId: PP_E_RPS_REASON_INVALID_AUTHINSTANT_DATATYPE
//
// MessageText:
//
//  Invalid AuthInstant data type encountered during time window validation.
//
#define PP_E_RPS_REASON_INVALID_AUTHINSTANT_DATATYPE ((HRESULT)0x8004922CL)

//
// MessageId: PP_E_RPS_REASON_HTTPS_OR_ENCRYPTED_TICKET_NEEDED
//
// MessageText:
//
//  Https or encrypted ticket is needed.
//
#define PP_E_RPS_REASON_HTTPS_OR_ENCRYPTED_TICKET_NEEDED ((HRESULT)0x8004922DL)

//
// MessageId: PP_E_RPS_REASON_INCORRECT_IV_BYTES
//
// MessageText:
//
//  Https or encrypted ticket is needed.
//
#define PP_E_RPS_REASON_INCORRECT_IV_BYTES ((HRESULT)0x8004922EL)

//
// MessageId: PP_E_RPS_REASON_PASSPORT_F_ERROR_ENCOUNTERED
//
// MessageText:
//
//  Passport f error is encountered in the query string.
//
#define PP_E_RPS_REASON_PASSPORT_F_ERROR_ENCOUNTERED ((HRESULT)0x8004922FL)

//
// MessageId: PP_E_RPS_NO_SESSION_KEY
//
// MessageText:
//
//  There is no session key in the ticket.
//
#define PP_E_RPS_NO_SESSION_KEY          ((HRESULT)0x80049230L)

//
// MessageId: PP_E_RPS_INVALID_COOKIE_NAME
//
// MessageText:
//
//  The reserved cookie name is specified.
//
#define PP_E_RPS_INVALID_COOKIE_NAME     ((HRESULT)0x80049231L)

//
// MessageId: PP_E_RPS_INVALID_AUTHPOLICY
//
// MessageText:
//
//  The AuthPolicy parameter in site configuration or input parameter is invalid or missing. Check rpsnetwork.xml file for valid AuthPolicy names.
//
#define PP_E_RPS_INVALID_AUTHPOLICY      ((HRESULT)0x80049232L)

//
// MessageId: PP_E_RPS_INVALID_ENCRYPT_ALGID
//
// MessageText:
//
//  The encryption method algid is invalid.
//
#define PP_E_RPS_INVALID_ENCRYPT_ALGID   ((HRESULT)0x80049233L)

//
// MessageId: PP_E_RPS_REASON_POST_TICKET_TIMEWINDOW_EXPIRED
//
// MessageText:
//
//  Post ticket time window expired.  Ticket could be reposted.
//
#define PP_E_RPS_REASON_POST_TICKET_TIMEWINDOW_EXPIRED ((HRESULT)0x80049234L)

//
// MessageId: PP_E_RPS_TICKET_HAS_NO_SESSIONKEY
//
// MessageText:
//
//  The ticket does not have sessionkey.
//
#define PP_E_RPS_TICKET_HAS_NO_SESSIONKEY ((HRESULT)0x80049235L)

//
// MessageId: PP_E_RPS_INVALID_INPUT_STRING
//
// MessageText:
//
//  The input string contains invalid or unexpected chars.
//
#define PP_E_RPS_INVALID_INPUT_STRING    ((HRESULT)0x80049244L)

// base 0x9400
//
// MessageId: PP_E_RPSDATA_DATA_TOO_LARGE
//
// MessageText:
//
//  The data is larger than the RPSData limit.
//
#define PP_E_RPSDATA_DATA_TOO_LARGE      ((HRESULT)0x80049400L)

//
// MessageId: PP_E_RPSDATA_INVALID_DATATYPE
//
// MessageText:
//
//  The data type in data schema is not supported.
//
#define PP_E_RPSDATA_INVALID_DATATYPE    ((HRESULT)0x80049401L)

//
// MessageId: PP_E_RPSDATA_MORE_DATA
//
// MessageText:
//
//  Data buffer is insufficient.
//
#define PP_E_RPSDATA_MORE_DATA           ((HRESULT)0x80049402L)

//
// MessageId: PP_E_RPSDATA_INVALID_DATAOFFSET
//
// MessageText:
//
//  The data offset is too large or invalid.
//
#define PP_E_RPSDATA_INVALID_DATAOFFSET  ((HRESULT)0x80049403L)

//
// MessageId: PP_E_RPSDATA_INVALIDDATA
//
// MessageText:
//
//  The data is invalid.
//
#define PP_E_RPSDATA_INVALIDDATA         ((HRESULT)0x80049404L)

//
// MessageId: PP_E_RPSDATA_UNSUPPORTED_DATATYPE
//
// MessageText:
//
//  The legacy data type in the ticket is not supported.
//
#define PP_E_RPSDATA_UNSUPPORTED_DATATYPE ((HRESULT)0x80049405L)

// base 0x9600
//------------------------------------------------------------------------------
// PPMT Errors
//------------------------------------------------------------------------------
#define PP_E_PPMT_BASE       0x9600
//
// MessageId: PP_E_PPMT_INVALIDSERVICEDA
//
// MessageText:
//
//  Object PPMTSettings, property PPMTServiceDAMap had invalid value. The expected format for each instance is <Service Name>,<DA>. DA is EASI/HM/MSN.
//
#define PP_E_PPMT_INVALIDSERVICEDA       ((HRESULT)0x80049600L)

// base 0xF000
//code manager error code
//#define CCM_E_CCMCORELIBBASE 0xF000
//
// MessageId: CCM_E_DEF_IN_USE
//
// MessageText:
//
//  The definition is in use, this entity is currently actively referenced (hr = %1)
//
#define CCM_E_DEF_IN_USE                 ((HRESULT)0x8004F000L)

//
// MessageId: CCM_E_VARCONVERTFAILED
//
// MessageText:
//
//  The conversion failed, one of the value couldn't be converted to declared datatype (hr = %1)
//
#define CCM_E_VARCONVERTFAILED           ((HRESULT)0x8004F001L)

//
// MessageId: CCM_E_DATATYPENOTSUPPORTED
//
// MessageText:
//
//  The datatype is not supported (hr = %1)
//
#define CCM_E_DATATYPENOTSUPPORTED       ((HRESULT)0x8004F002L)

//
// MessageId: CCM_E_INVALIDOTAVALUE
//
// MessageText:
//
//  The value for the Object Type Attribute is invalid (hr = %1)
//
#define CCM_E_INVALIDOTAVALUE            ((HRESULT)0x8004F003L)

//
// MessageId: CCM_E_OTANOTHONORED
//
// MessageText:
//
//  The request violates one or more Object Type Attributes (hr = %1)
//
#define CCM_E_OTANOTHONORED              ((HRESULT)0x8004F004L)

//
// MessageId: CCM_E_PROPANOTHONORED
//
// MessageText:
//
//  The request violates one or more Property Attributes (hr = %1)
//
#define CCM_E_PROPANOTHONORED            ((HRESULT)0x8004F005L)

//
// MessageId: CCM_E_RELNOTHONORED
//
// MessageText:
//
//  The request violates one or more Relationship constraints (hr = %1)
//
#define CCM_E_RELNOTHONORED              ((HRESULT)0x8004F006L)

//
// MessageId: CCM_E_DATATYPEREQUIRED
//
// MessageText:
//
//  DataType is a required Property Attribute (hr = %1)
//
#define CCM_E_DATATYPEREQUIRED           ((HRESULT)0x8004F007L)

//
// MessageId: CCM_E_PROPANOUPDATE
//
// MessageText:
//
//  The Property is marked No Update (hr = %1)
//
#define CCM_E_PROPANOUPDATE              ((HRESULT)0x8004F008L)

//
// MessageId: CCM_E_PROPAMULTIINSTANCE
//
// MessageText:
//
//  The Multi Instance Property attribute is not respected (hr = %1)
//
#define CCM_E_PROPAMULTIINSTANCE         ((HRESULT)0x8004F009L)

//
// MessageId: CCM_E_OTANOCREATE
//
// MessageText:
//
//  The Object Type is marked as Non Creatable (hr = %1)
//
#define CCM_E_OTANOCREATE                ((HRESULT)0x8004F00AL)

//
// MessageId: CCM_E_OTANODELETE
//
// MessageText:
//
//  The Object Type is marked as Non Deleteable (hr = %1)
//
#define CCM_E_OTANODELETE                ((HRESULT)0x8004F00BL)

//
// MessageId: CCM_E_OTASINGLEOBJECT
//
// MessageText:
//
//  The Object Type is marked as Single Object (hr = %1)
//
#define CCM_E_OTASINGLEOBJECT            ((HRESULT)0x8004F00CL)

//
// MessageId: CCM_E_OTASINGLEINSTANCEPEROBJECT
//
// MessageText:
//
//  The Object Type is marked as Single Instance per Object (hr = %1)
//
#define CCM_E_OTASINGLEINSTANCEPEROBJECT ((HRESULT)0x8004F00DL)

//
// MessageId: CCM_E_OTASINGLEINSTANCE
//
// MessageText:
//
//  The Object Type is marked as Single Instance (hr = %1)
//
#define CCM_E_OTASINGLEINSTANCE          ((HRESULT)0x8004F00EL)

//
// MessageId: CCM_E_OTANOUPDATE
//
// MessageText:
//
//  The Object Type is marked as No Update (hr = %1)
//
#define CCM_E_OTANOUPDATE                ((HRESULT)0x8004F00FL)

//
// MessageId: CCM_E_INVALIDACTION
//
// MessageText:
//
//  An invalid action has been specified (hr = %1)
//
#define CCM_E_INVALIDACTION              ((HRESULT)0x8004F010L)

//
// MessageId: CCM_E_OTA_CATEGORY_REQUIRED
//
// MessageText:
//
//  Category is a required Object Type Attribute (hr = %1)
//
#define CCM_E_OTA_CATEGORY_REQUIRED      ((HRESULT)0x8004F011L)

//
// MessageId: CCM_E_CANNOT_DEFINE_BUILTIN_TYPE
//
// MessageText:
//
//  Object Types of the Built-in Category cannot be defined (hr = %1)
//
#define CCM_E_CANNOT_DEFINE_BUILTIN_TYPE ((HRESULT)0x8004F012L)

//
// MessageId: CCM_E_CANNOT_DEFINE_BUILTIN_PROPERTY
//
// MessageText:
//
//  Properties with the Built-in property attribute set cannot be defined (hr = %1)
//
#define CCM_E_CANNOT_DEFINE_BUILTIN_PROPERTY ((HRESULT)0x8004F013L)

//
// MessageId: CCM_E_CANNOT_UPDATE_BUILTIN_TYPE
//
// MessageText:
//
//  The definition of Object Types of the Built-in Category cannot be updated (hr = %1)
//
#define CCM_E_CANNOT_UPDATE_BUILTIN_TYPE ((HRESULT)0x8004F014L)

//
// MessageId: CCM_E_CANNOT_UPDATE_BUILTIN_PROPERTY
//
// MessageText:
//
//  The definition of Properties with the Built-in property attribute set cannot be updated (hr = %1)
//
#define CCM_E_CANNOT_UPDATE_BUILTIN_PROPERTY ((HRESULT)0x8004F015L)

//
// MessageId: CCM_E_CANNOT_USE_BUILTIN_PROPERTY
//
// MessageText:
//
//  Properties with the Built-in property attribute set cannot be used by user defined object types (hr = %1)
//
#define CCM_E_CANNOT_USE_BUILTIN_PROPERTY ((HRESULT)0x8004F016L)

//
// MessageId: CCM_E_COULD_NOT_GET_CURRENTUTC_DBTIMESTAMP
//
// MessageText:
//
//  Unable to get the current UTC time in DBTIMESTAMP format (hr = %1)
//
#define CCM_E_COULD_NOT_GET_CURRENTUTC_DBTIMESTAMP ((HRESULT)0x80049601L)

//
// MessageId: CCM_E_INVALIDTYPEFORBLOB
//
// MessageText:
//
//  Invalid data type for Blob from DB (hr = %1)
//
#define CCM_E_INVALIDTYPEFORBLOB         ((HRESULT)0x80049602L)

//
// MessageId: CCM_E_CANTREADBLOBTYPE
//
// MessageText:
//
//  Unable to read Blob type from DB (hr = %1)
//
#define CCM_E_CANTREADBLOBTYPE           ((HRESULT)0x80049603L)

//
// MessageId: CCM_E_CANTREADBLOBLEN
//
// MessageText:
//
//  Unable to read Blob length from DB (hr = %1)
//
#define CCM_E_CANTREADBLOBLEN            ((HRESULT)0x80049604L)

//
// MessageId: CCM_E_CANTREADBLOBBSTR
//
// MessageText:
//
//  Unable to read 'string' data part of the blob (hr = %1)
//
#define CCM_E_CANTREADBLOBBSTR           ((HRESULT)0x80049605L)

//
// MessageId: CCM_E_CANTREADBLOBARRAY
//
// MessageText:
//
//  Unable to read 'array' data part of the blob (hr = %1)
//
#define CCM_E_CANTREADBLOBARRAY          ((HRESULT)0x80049606L)

//
// MessageId: CCM_E_CMDNOTALLOWED
//
// MessageText:
//
//  The requested command either is of unknow type or is not allowed to be run thru the API (hr = %1)
//
#define CCM_E_CMDNOTALLOWED              ((HRESULT)0x8004F017L)

//
// MessageId: CCM_E_NULLBLOBPTR
//
// MessageText:
//
//  Empty Blob returned from DB (hr = %1)
//
#define CCM_E_NULLBLOBPTR                ((HRESULT)0x80049607L)

//
// MessageId: CCM_E_MANIFESTMISMATCHWITHIMPACTS
//
// MessageText:
//
//  The manifest mismatches with the list of generated impacts (hr = %1)
//
#define CCM_E_MANIFESTMISMATCHWITHIMPACTS ((HRESULT)0x80049608L)

//
// MessageId: CCM_E_OTCNOTROLLABLE
//
// MessageText:
//
//  The category does not allow for RollBack/UndoRollBack etc.. kind of operations (hr = %1)
//
#define CCM_E_OTCNOTROLLABLE             ((HRESULT)0x8004F018L)

//
// MessageId: CCM_E_PROPAUSEBLOBINVALIDDATATYPE
//
// MessageText:
//
//  The UseBlob property attribute can only be used in combination with 'strings' or 'array' datatypes (hr = %1)
//
#define CCM_E_PROPAUSEBLOBINVALIDDATATYPE ((HRESULT)0x8004F019L)

//
// MessageId: CCM_E_OTAWRONGNOTIFICATIONTARGET
//
// MessageText:
//
//  The NotificationTarget object type attribute is invalid (hr = %1)
//
#define CCM_E_OTAWRONGNOTIFICATIONTARGET ((HRESULT)0x8004F01AL)

//
// MessageId: CCM_E_CMDNOTFOUNDORMULTIDEF
//
// MessageText:
//
//  The command does not exist or is defined multiple times (hr = %1)
//
#define CCM_E_CMDNOTFOUNDORMULTIDEF      ((HRESULT)0x80049609L)

//
// MessageId: CCM_E_EMPTYTARGETMACHINESSET
//
// MessageText:
//
//  No resulting machine to which to issue the command (hr = %1)
//
#define CCM_E_EMPTYTARGETMACHINESSET     ((HRESULT)0x8004F01BL)

//
// MessageId: CCM_E_NOPROPERTIES
//
// MessageText:
//
//  No properties (hr = %1)
//
#define CCM_E_NOPROPERTIES               ((HRESULT)0x8004960AL)

//
// MessageId: CCM_E_NORELATIONSHIPS
//
// MessageText:
//
//  No relationships (hr = %1)
//
#define CCM_E_NORELATIONSHIPS            ((HRESULT)0x8004960BL)

//
// MessageId: CCM_E_NOENTITIES
//
// MessageText:
//
//  No entities (hr = %1)
//
#define CCM_E_NOENTITIES                 ((HRESULT)0x8004960CL)

//
// MessageId: CCM_E_EMPTYINPUTXML
//
// MessageText:
//
//  The XML in input is totally empty (hr = %1)
//
#define CCM_E_EMPTYINPUTXML              ((HRESULT)0x8004F01CL)

//
// MessageId: CCM_E_REQUIREDINPUTISEMPTY
//
// MessageText:
//
//  One or more required parameters do not contain a value (hr = %1)
//
#define CCM_E_REQUIREDINPUTISEMPTY       ((HRESULT)0x8004F01DL)

//
// MessageId: CCM_E_CONVERSIONFAILEDFORINPUT
//
// MessageText:
//
//  Failed to convert input (hr = %1)
//
#define CCM_E_CONVERSIONFAILEDFORINPUT   ((HRESULT)0x8004960DL)

//
// MessageId: CCM_E_INVALIDSCHEMA
//
// MessageText:
//
//  An invalid schema has been specified (hr = %1)
//
#define CCM_E_INVALIDSCHEMA              ((HRESULT)0x8004960EL)

//
// MessageId: CCM_E_INVALIDFID
//
// MessageText:
//
//  An invalid subtle ID has been specified (hr = %1)
//
#define CCM_E_INVALIDFID                 ((HRESULT)0x8004F01EL)

//
// MessageId: CCM_E_OTNOTFOUND
//
// MessageText:
//
//  Object Type not found in DB or cache (hr = %1)
//
#define CCM_E_OTNOTFOUND                 ((HRESULT)0x8004F01FL)

//
// MessageId: CCM_E_OTANOTFOUND
//
// MessageText:
//
//  Object Type Attribute not found in DB or cache (hr = %1)
//
#define CCM_E_OTANOTFOUND                ((HRESULT)0x8004F020L)

//
// MessageId: CCM_E_PROPNOTFOUND
//
// MessageText:
//
//  Property not found in DB or cache, or Object type no longer referencing the property (hr = %1)
//
#define CCM_E_PROPNOTFOUND               ((HRESULT)0x8004F021L)

//
// MessageId: CCM_E_PROPANOTFOUND
//
// MessageText:
//
//  Property Attribute not found in DB or cache (hr = %1)
//
#define CCM_E_PROPANOTFOUND              ((HRESULT)0x8004F022L)

//
// MessageId: CCM_E_IDALREADYUSED
//
// MessageText:
//
//  One of the IDs is used more than once (hr = %1)
//
#define CCM_E_IDALREADYUSED              ((HRESULT)0x8004F023L)

//
// MessageId: CCM_E_DANGLINGFAKEID
//
// MessageText:
//
//  One of the subtle IDs is used in a relationship but not in an entity creation (hr = %1)
//
#define CCM_E_DANGLINGFAKEID             ((HRESULT)0x8004F024L)

//
// MessageId: CCM_E_MULTICATEGORYNOTSUPPORTED
//
// MessageText:
//
//  The objects pertain to multiple categories (hr = %1)
//
#define CCM_E_MULTICATEGORYNOTSUPPORTED  ((HRESULT)0x8004F025L)

//
// MessageId: CCM_E_ESCAPEXMLFAILED
//
// MessageText:
//
//  Escaping of data for XML failed (hr = %1)
//
#define CCM_E_ESCAPEXMLFAILED            ((HRESULT)0x8004960FL)

//
// MessageId: CCM_E_INVALIDCMD
//
// MessageText:
//
//  An invalid 'cmd' has been detected (hr = %1)
//
#define CCM_E_INVALIDCMD                 ((HRESULT)0x8004F026L)

//
// MessageId: CCM_E_CONFLICTINGIDS
//
// MessageText:
//
//  Multiple conflicting IDs are used (hr = %1)
//
#define CCM_E_CONFLICTINGIDS             ((HRESULT)0x8004F027L)

//
// MessageId: CCM_E_CMDCREATENOOBJECTNAME
//
// MessageText:
//
//  cmd='create' requires object name (hr = %1)
//
#define CCM_E_CMDCREATENOOBJECTNAME      ((HRESULT)0x8004F028L)

//
// MessageId: CCM_E_CMDNOCREATEFAKEID
//
// MessageText:
//
//  Subtle IDs are allowed only for cmd='create' (hr = %1)
//
#define CCM_E_CMDNOCREATEFAKEID          ((HRESULT)0x8004F029L)

//
// MessageId: CCM_E_INVALIDENTITYTYPE
//
// MessageText:
//
//  An invalid entity type has been specified (hr = %1)
//
#define CCM_E_INVALIDENTITYTYPE          ((HRESULT)0x8004F02AL)

//
// MessageId: CCM_E_CONTRADDICTINGCMD
//
// MessageText:
//
//  Contraddicting commands detected (hr = %1)
//
#define CCM_E_CONTRADDICTINGCMD          ((HRESULT)0x8004F02BL)

//
// MessageId: CCM_E_IDREQUIRED
//
// MessageText:
//
//  ID is required (hr = %1)
//
#define CCM_E_IDREQUIRED                 ((HRESULT)0x8004F02CL)

//
// MessageId: CCM_E_INVALIDRELTYPE
//
// MessageText:
//
//  An invalid relationship type has been detected (hr = %1)
//
#define CCM_E_INVALIDRELTYPE             ((HRESULT)0x8004F02DL)

//
// MessageId: CCM_E_INVALIDRELEASE
//
// MessageText:
//
//  An invalid release number has been detected (hr = %1)
//
#define CCM_E_INVALIDRELEASE             ((HRESULT)0x8004F02EL)

//
// MessageId: CCM_E_OTCNOTFOUNDORMULTIDEF
//
// MessageText:
//
//  The Object Type Category does not exist or is defined multiple times (hr = %1)
//
#define CCM_E_OTCNOTFOUNDORMULTIDEF      ((HRESULT)0x8004F02FL)

//
// MessageId: CCM_E_ALLOWEDRELALREADYPRESENTBUTDIFFER
//
// MessageText:
//
//  One of the Allowed Relationship specified already exists but differs from the user input (hr = %1)
//
#define CCM_E_ALLOWEDRELALREADYPRESENTBUTDIFFER ((HRESULT)0x8004F030L)

//
// MessageId: CCM_E_RELTARGETANDSOURCEPRESENT
//
// MessageText:
//
//  A relationship with both target and source info has been detected (hr = %1)
//
#define CCM_E_RELTARGETANDSOURCEPRESENT  ((HRESULT)0x8004F031L)

//
// MessageId: CCM_E_RELSOURCEWITHTARGETINFO
//
// MessageText:
//
//  A relationship for source with target info has been detected (hr = %1)
//
#define CCM_E_RELSOURCEWITHTARGETINFO    ((HRESULT)0x8004F032L)

//
// MessageId: CCM_E_RELTARGETWITHSOURCEINFO
//
// MessageText:
//
//  A relationship for target with source info has been detected (hr = %1)
//
#define CCM_E_RELTARGETWITHSOURCEINFO    ((HRESULT)0x8004F033L)

//
// MessageId: CCM_E_RELSOURCEANDCMD
//
// MessageText:
//
//  A relationship for source with cmd has been detected (hr = %1)
//
#define CCM_E_RELSOURCEANDCMD            ((HRESULT)0x8004F034L)

//
// MessageId: CCM_E_INVALIDSEARCHTYPEANDINPUT
//
// MessageText:
//
//  The specified search type and the specified input do not match (hr = %1)
//
#define CCM_E_INVALIDSEARCHTYPEANDINPUT  ((HRESULT)0x8004F035L)

//
// MessageId: CCM_E_NOTANOBJECT
//
// MessageText:
//
//  The requested entity is not an object (hr = %1)
//
#define CCM_E_NOTANOBJECT                ((HRESULT)0x8004F036L)

//
// MessageId: CCM_E_OTALREADYDEFINED
//
// MessageText:
//
//  The Object Type already exists (hr = %1)
//
#define CCM_E_OTALREADYDEFINED           ((HRESULT)0x8004F037L)

//
// MessageId: CCM_E_OTAALREADYDEFINED
//
// MessageText:
//
//  The Object Type Attribute already exists (hr = %1)
//
#define CCM_E_OTAALREADYDEFINED          ((HRESULT)0x8004F038L)

//
// MessageId: CCM_E_PROPALREADYDEFINED
//
// MessageText:
//
//  The Property already exists (hr = %1)
//
#define CCM_E_PROPALREADYDEFINED         ((HRESULT)0x8004F039L)

//
// MessageId: CCM_E_PROPAALREADYDEFINED
//
// MessageText:
//
//  The Property Attribute already exists (hr = %1)
//
#define CCM_E_PROPAALREADYDEFINED        ((HRESULT)0x8004F03AL)

//
// MessageId: CCM_E_ALLOWEDRELINVALIDVALUE
//
// MessageText:
//
//  The value specified for the allowed relationship is not valid (hr = %1)
//
#define CCM_E_ALLOWEDRELINVALIDVALUE     ((HRESULT)0x8004F03BL)

//
// MessageId: CCM_E_OTABUILTINPREFIXNOTPERMITTED
//
// MessageText:
//
//  User defined Object Type Attribute cannot have the 'OTA_' prefix of built-in Object Type Attribute (hr = %1)
//
#define CCM_E_OTABUILTINPREFIXNOTPERMITTED ((HRESULT)0x8004F03CL)

//
// MessageId: CCM_E_PROPABUILTINPREFIXNOTPERMITTED
//
// MessageText:
//
//  User defined Property Attribute cannot have the 'PropA_' prefix of built-in Property Attribute (hr = %1)
//
#define CCM_E_PROPABUILTINPREFIXNOTPERMITTED ((HRESULT)0x8004F03DL)

//
// MessageId: CCM_E_CANNOTDELETEBUILTINOTA
//
// MessageText:
//
//  Built-in OTAs are not deleteable (hr = %1)
//
#define CCM_E_CANNOTDELETEBUILTINOTA     ((HRESULT)0x8004F03EL)

//
// MessageId: CCM_E_CANNOTDELETEBUILTINPROPA
//
// MessageText:
//
//  Built in PropAs are not deleteable (hr = %1)
//
#define CCM_E_CANNOTDELETEBUILTINPROPA   ((HRESULT)0x8004F03FL)

//
// MessageId: CCM_E_NONZERO_INSTANCE_IN_BOOTSTRAP
//
// MessageText:
//
//  Bootstrap mode does not take non zero object instances (hr = %1)
//
#define CCM_E_NONZERO_INSTANCE_IN_BOOTSTRAP ((HRESULT)0x8004F040L)

//
// MessageId: CCM_E_PROPBUILTINPREFIXNOTPERMITTED
//
// MessageText:
//
//  User defined Property cannot have the '__' prefix of built-in Property (hr = %1)
//
#define CCM_E_PROPBUILTINPREFIXNOTPERMITTED ((HRESULT)0x8004F041L)

//
// MessageId: CCM_E_OTA_DESCRIPTION_REQUIRED
//
// MessageText:
//
//  Description is a required Object Type Attribute (hr = %1)
//
#define CCM_E_OTA_DESCRIPTION_REQUIRED   ((HRESULT)0x8004F042L)

//
// MessageId: CCM_E_OTA_OWNER_REQUIRED
//
// MessageText:
//
//  Owner is a required Object Type Attribute (hr = %1)
//
#define CCM_E_OTA_OWNER_REQUIRED         ((HRESULT)0x8004F043L)

//
// MessageId: CCM_E_PROPA_DESCRIPTION_REQUIRED
//
// MessageText:
//
//  Description is a required Property Attribute (hr = %1)
//
#define CCM_E_PROPA_DESCRIPTION_REQUIRED ((HRESULT)0x8004F044L)

//
// MessageId: CCM_E_LOCKFAILURE
//
// MessageText:
//
//  The internal lock failed to initialize correctly (hr = %1)
//
#define CCM_E_LOCKFAILURE                ((HRESULT)0x80049610L)

//
// MessageId: CCM_E_CANTCLAIMREADLOCK
//
// MessageText:
//
//  Unable to claim the internal lock in shared mode (hr = %1)
//
#define CCM_E_CANTCLAIMREADLOCK          ((HRESULT)0x80049611L)

//
// MessageId: CCM_E_CANTCLAIMWRITELOCK
//
// MessageText:
//
//  Unable to claim the internal lock in exclusive mode (hr = %1)
//
#define CCM_E_CANTCLAIMWRITELOCK         ((HRESULT)0x80049612L)

//
// MessageId: CCM_E_EXPECTEDONEFOUNDMULTIPLE
//
// MessageText:
//
//  Expecting at the most one instance instead found multiple (hr = %1)
//
#define CCM_E_EXPECTEDONEFOUNDMULTIPLE   ((HRESULT)0x80049613L)

//
// MessageId: CCM_E_INVALIDATTRIBUTETTYPE
//
// MessageText:
//
//  Only 'per type' and 'per property' queries are supported (hr = %1)
//
#define CCM_E_INVALIDATTRIBUTETTYPE      ((HRESULT)0x8004F045L)

//
// MessageId: CCM_E_DATAVANISHED
//
// MessageText:
//
//  Mandatory data (like Object Type definition, Property definition ...), present at the moment of creation, has vanished (hr = %1)
//
#define CCM_E_DATAVANISHED               ((HRESULT)0x80049614L)

//
// MessageId: CCM_E_INTERNALSCHEMALOADFAILURE
//
// MessageText:
//
//  Unable to load the internal schema (hr = %1)
//
#define CCM_E_INTERNALSCHEMALOADFAILURE  ((HRESULT)0x80049615L)

//
// MessageId: CCM_E_NOCATEGORY
//
// MessageText:
//
//  No valid category has been found (hr = %1)
//
#define CCM_E_NOCATEGORY                 ((HRESULT)0x80049616L)

//
// MessageId: CCM_E_CMDNOSERVICES
//
// MessageText:
//
//  The command does not tolerate any CCMService (hr = %1)
//
#define CCM_E_CMDNOSERVICES              ((HRESULT)0x8004F046L)

//
// MessageId: CCM_E_CMDNOARGS
//
// MessageText:
//
//  The command does not tolerate any extra arguments (hr = %1)
//
#define CCM_E_CMDNOARGS                  ((HRESULT)0x8004F047L)

//
// MessageId: CCM_E_CMDBLOCKED
//
// MessageText:
//
//  The command is blocked because of the status of some CCMServer (hr = %1)
//
#define CCM_E_CMDBLOCKED                 ((HRESULT)0x8004F048L)

//
// MessageId: CCM_E_CMDREQUIRESERVICES
//
// MessageText:
//
//  The command requires CCMService, either no service was specified or the services specified are of the wrong type, only services of type NT(2) or Web(1) are, if required, acceptable (hr = %1)
//
#define CCM_E_CMDREQUIRESERVICES         ((HRESULT)0x8004F049L)

//
// MessageId: CCM_E_CMDREQUIREARGS
//
// MessageText:
//
//  The command requires extra arguments (hr = %1)
//
#define CCM_E_CMDREQUIREARGS             ((HRESULT)0x8004F04AL)

//
// MessageId: CCM_E_UNABLETOGETTHISMACHINENAME
//
// MessageText:
//
//  Unable to obtain this machine name (hr = %1)
//
#define CCM_E_UNABLETOGETTHISMACHINENAME ((HRESULT)0x80049617L)

//
// MessageId: CCM_E_THISMACHINENOTINCCM
//
// MessageText:
//
//  This machine is not in CCM therefore it cannot update the TransactionHistoryLog (hr = %1)
//
#define CCM_E_THISMACHINENOTINCCM        ((HRESULT)0x80049618L)

//
// MessageId: CCM_E_THISMACHINENODC
//
// MessageText:
//
//  This machine has no DataCenter associated therefore it cannot update the TransactionHistoryLog (hr = %1)
//
#define CCM_E_THISMACHINENODC            ((HRESULT)0x80049619L)

//
// MessageId: CCM_E_THISMACHINEMULTIDC
//
// MessageText:
//
//  This machine has multiple DataCenter associated therefore it cannot update the TransactionHistoryLog (hr = %1)
//
#define CCM_E_THISMACHINEMULTIDC         ((HRESULT)0x8004961AL)

//
// MessageId: CCM_E_EXECUTENOTAUTHORIZED
//
// MessageText:
//
//  Execute permission denied on this API (hr = %1)
//
#define CCM_E_EXECUTENOTAUTHORIZED       ((HRESULT)0x8004F04BL)

//
// MessageId: CCM_E_OBJECTTYPEOPERATIONNOTAUTHORIZED
//
// MessageText:
//
//  For one or more object types in the request the required operation is not authorized (hr = %1)
//
#define CCM_E_OBJECTTYPEOPERATIONNOTAUTHORIZED ((HRESULT)0x8004F04CL)

//
// MessageId: CCM_E_EXECUTENOTAUTHORIZEDONCOMMAND
//
// MessageText:
//
//  Execute permission denied on this CCMCommand (hr = %1)
//
#define CCM_E_EXECUTENOTAUTHORIZEDONCOMMAND ((HRESULT)0x8004F04DL)

//
// MessageId: CCM_E_RELATIONSHIPOPERATIONNOTAUTHORIZED
//
// MessageText:
//
//  For one or more object types in the request the required operation about relationships is not authorized (hr = %1)
//
#define CCM_E_RELATIONSHIPOPERATIONNOTAUTHORIZED ((HRESULT)0x8004F04EL)

//
// MessageId: CCM_E_MACHINEMULTIDEFNODEF
//
// MessageText:
//
//  The machine is defined multiple time in CCM or not at all (hr = %1)
//
#define CCM_E_MACHINEMULTIDEFNODEF       ((HRESULT)0x8004961BL)

//
// MessageId: CCM_E_SERVICEMULTIDEFNODEF
//
// MessageText:
//
//  The service is defined multiple time in CCM or not at all (hr = %1)
//
#define CCM_E_SERVICEMULTIDEFNODEF       ((HRESULT)0x8004961CL)

//
// MessageId: CCM_E_DCMULTIDEFNODEF
//
// MessageText:
//
//  The DataCenter is defined multiple time in CCM or not at all (hr = %1)
//
#define CCM_E_DCMULTIDEFNODEF            ((HRESULT)0x8004961DL)

//
// MessageId: PP_E_MFSTGEN_NON_CREATE_TRANSACT
//
// MessageText:
//
//  Non create trasact object in create code path (hr = %1)
//
#define PP_E_MFSTGEN_NON_CREATE_TRANSACT ((HRESULT)0x8004961EL)

//
// MessageId: PP_E_MFSTGEN_NON_NOTIFY_TRANSACT
//
// MessageText:
//
//  Object which does not require notification is being processed (hr = %1)
//
#define PP_E_MFSTGEN_NON_NOTIFY_TRANSACT ((HRESULT)0x8004961FL)

//
// MessageId: PP_E_MFSTGEN_NON_UPDATE_TRANSACT
//
// MessageText:
//
//  Non update trasact object in update code path (hr = %1)
//
#define PP_E_MFSTGEN_NON_UPDATE_TRANSACT ((HRESULT)0x80049620L)

//
// MessageId: PP_E_MFSTGEN_INVALID_TRANSACT_TARGET
//
// MessageText:
//
//  Transact target is not a machine or a group (hr = %1)
//
#define PP_E_MFSTGEN_INVALID_TRANSACT_TARGET ((HRESULT)0x80049621L)

//
// MessageId: PP_E_MFSTGEN_OBJ_DOESNOT_EXIST
//
// MessageText:
//
//  An object we are trying to load is not present in DB (hr = %1)
//
#define PP_E_MFSTGEN_OBJ_DOESNOT_EXIST   ((HRESULT)0x80049622L)

//
// MessageId: PP_E_MFSTGEN_AFNTYOBJ_DOESNOT_EXIST
//
// MessageText:
//
//  Affinity Class object does not exist (hr = %1)
//
#define PP_E_MFSTGEN_AFNTYOBJ_DOESNOT_EXIST ((HRESULT)0x80049623L)

//
// MessageId: PP_E_MFSTGEN_MULTIPLE_OVERWRITES
//
// MessageText:
//
//  An object has multiple overwrites of the same type (hr = %1)
//
#define PP_E_MFSTGEN_MULTIPLE_OVERWRITES ((HRESULT)0x80049624L)

//
// MessageId: PP_E_MFSTGEN_NON_DELETE_TRANSACT
//
// MessageText:
//
//  Non delete trasact object in delete code path (hr = %1)
//
#define PP_E_MFSTGEN_NON_DELETE_TRANSACT ((HRESULT)0x80049625L)

//
// MessageId: PP_E_MFSTGEN_NON_MASHINE_OR_GROUP_OBJ
//
// MessageText:
//
//  We are trying to get affinity class for an object which is not a group or a machine (hr = %1)
//
#define PP_E_MFSTGEN_NON_MASHINE_OR_GROUP_OBJ ((HRESULT)0x80049626L)

//
// MessageId: PP_E_MFSTGEN_IMPACTS_DO_NOT_MATCH
//
// MessageText:
//
//  Trying to append impacts to wrong object (hr = %1)
//
#define PP_E_MFSTGEN_IMPACTS_DO_NOT_MATCH ((HRESULT)0x80049627L)

//
// MessageId: PP_E_MFSTGEN_INVALID_OBJ_TYPE
//
// MessageText:
//
//  Type of an object is invalid for this operation (hr = %1)
//
#define PP_E_MFSTGEN_INVALID_OBJ_TYPE    ((HRESULT)0x80049628L)

//
// MessageId: PP_E_MFSTGEN_NO_TRANSACTS
//
// MessageText:
//
//  We have been given an empty transact array for processing (hr = %1)
//
#define PP_E_MFSTGEN_NO_TRANSACTS        ((HRESULT)0x80049629L)

//
// MessageId: PP_E_MFSTGEN_MISSING_NOTIFICATION_SETTINGS
//
// MessageText:
//
//  Notification Settings object is missing in DB (hr = %1)
//
#define PP_E_MFSTGEN_MISSING_NOTIFICATION_SETTINGS ((HRESULT)0x8004962AL)

//
// MessageId: PP_E_MFSTGEN_TRANSPORTGUID_IS_MULTIINSTANCE_OR_MISSING
//
// MessageText:
//
//  There are multiple TransportGUIDs properties in Notification Settings object or none at all(hr = %1)
//
#define PP_E_MFSTGEN_TRANSPORTGUID_IS_MULTIINSTANCE_OR_MISSING ((HRESULT)0x8004962BL)

//
// MessageId: PP_E_MFSTGEN_TRANSPORTTYPE_IS_MULTIINSTANCE_OR_MISSING
//
// MessageText:
//
//  There are multiple TransportTypes properties in NotificationSettings object or none at all (hr = %1)
//
#define PP_E_MFSTGEN_TRANSPORTTYPE_IS_MULTIINSTANCE_OR_MISSING ((HRESULT)0x8004962CL)

//
// MessageId: PP_E_MFSTGEN_CMDPROGID_IS_MULTIINSTANCE_OR_MISSING
//
// MessageText:
//
//  There are multiple instances of CommandProg id property of this command object or none at all (hr = %1)
//
#define PP_E_MFSTGEN_CMDPROGID_IS_MULTIINSTANCE_OR_MISSING ((HRESULT)0x8004962DL)

//
// MessageId: PP_E_MFSTGEN_MISSING_DATACENTER
//
// MessageText:
//
//  This object is not a part of a datacenter (hr = %1)
//
#define PP_E_MFSTGEN_MISSING_DATACENTER  ((HRESULT)0x8004962EL)

//
// MessageId: PP_E_MFSTGEN_MISSING_SERVICE
//
// MessageText:
//
//  This service is not present (hr = %1)
//
#define PP_E_MFSTGEN_MISSING_SERVICE     ((HRESULT)0x8004962FL)

//
// MessageId: PP_E_MFSTGEN_MISSING_COMMAND
//
// MessageText:
//
//  This command is not present (hr = %1)
//
#define PP_E_MFSTGEN_MISSING_COMMAND     ((HRESULT)0x80049630L)

//
// MessageId: PP_E_MFSTGEN_WEBSERVICENAME_IS_MULTIINSTANCE_OR_MISSING
//
// MessageText:
//
//  WebServiceName is a multi instance attribute of this service object or it is missing(hr = %1)
//
#define PP_E_MFSTGEN_WEBSERVICENAME_IS_MULTIINSTANCE_OR_MISSING ((HRESULT)0x80049631L)

//
// MessageId: PP_E_MFSTGEN_SERVICETYPE_IS_MULTIINSTANCE_OR_MISSING
//
// MessageText:
//
//  WebServiceType is a multi instance attribute of this service object or it is missing (hr = %1)
//
#define PP_E_MFSTGEN_SERVICETYPE_IS_MULTIINSTANCE_OR_MISSING ((HRESULT)0x80049632L)

//
// MessageId: PP_E_CCMOCT_BAD_DEPLOYMENT_HIERARCHY
//
// MessageText:
//
//  A problem was encountered during finding affinity class for a machine. The machine may not be member of any group. The generated deployment xml may have more details on the error. (hr = %1)
//
#define PP_E_CCMOCT_BAD_DEPLOYMENT_HIERARCHY ((HRESULT)0x80049633L)

//
// MessageId: PP_E_CCMOCT_NO_MACHINE_OVERRIDE
//
// MessageText:
//
//  The __SERVICEPROPERTYMAP property did not specify any property override(s) for a service. CCM cannot generate deployment XML for the machine. The generated deployment xml may have more details on the error. (hr = %1)
//
#define PP_E_CCMOCT_NO_MACHINE_OVERRIDE  ((HRESULT)0x80049634L)

//
// MessageId: PP_E_CCMOCT_NO_INSTANCE_FOR_PROP
//
// MessageText:
//
//  Some needed properties were not defined in __SERVICEPROPERTYMAP property of a machine. CCM cannot generate deployment XML for the machine. The generated deployment xml may have more details on the error. (hr = %1)
//
#define PP_E_CCMOCT_NO_INSTANCE_FOR_PROP ((HRESULT)0x80049635L)

//
// MessageId: PP_E_CCMOCT_NO_MATCHING_INSTANCE_FOR_PROP
//
// MessageText:
//
//  An instance name specified in __SERVICEPROPERTYMAP was not actually defined for the property. CCM cannot generate deployment XML for the machine. The generated deployment xml may have more details on the error. (hr = %1)
//
#define PP_E_CCMOCT_NO_MATCHING_INSTANCE_FOR_PROP ((HRESULT)0x80049636L)

//
// MessageId: PP_E_CCMOCT_NO_PROP
//
// MessageText:
//
//  A property required for deployment XML generation was not defined for the machine. CCM cannot generate deployment XML for the machine. The generated deployment xml may have more details on the error. (hr = %1)
//
#define PP_E_CCMOCT_NO_PROP              ((HRESULT)0x80049637L)

//
// MessageId: PP_E_CCMOCT_NO_OBJECT
//
// MessageText:
//
//  The requested object was not found in CCM database. CCM cannot generate deployment XML for the machine. The generated deployment xml may have more details on the error. (hr = %1)
//
#define PP_E_CCMOCT_NO_OBJECT            ((HRESULT)0x80049638L)

//
// MessageId: PP_E_CCMOCT_MULTIPLE_OBJECTS
//
// MessageText:
//
//  Multiple objects were found in CCM database where a single object was expected. CCM cannot generate deployment XML for the machine. The generated deployment xml may have more details on the error. (hr = %1)
//
#define PP_E_CCMOCT_MULTIPLE_OBJECTS     ((HRESULT)0x80049639L)

//
// MessageId: PP_E_CCMOCT_NODATACENTER
//
// MessageText:
//
//  No datacenter id was found. Make sure all machines for deployment are part of exactly one datacenter. (hr = %1)
//
#define PP_E_CCMOCT_NODATACENTER         ((HRESULT)0x8004963AL)

//
// MessageId: CCM_E_INVALIDTRANSACTIONID
//
// MessageText:
//
//  This transaction id is not associated with any trigger. (hr = %1)
//
#define CCM_E_INVALIDTRANSACTIONID       ((HRESULT)0x8004963BL)

//
// MessageId: CCM_E_NOCMDTRIGGER
//
// MessageText:
//
//  Trigger with no command. (hr = %1)
//
#define CCM_E_NOCMDTRIGGER               ((HRESULT)0x8004963CL)

//
// MessageId: CCM_E_INVCMDTRIGGER
//
// MessageText:
//
//  Trigger with no command. (hr = %1)
//
#define CCM_E_INVCMDTRIGGER              ((HRESULT)0x8004963DL)

//
// MessageId: CCM_E_FAILEDUPDATEMACHINESTATUS
//
// MessageText:
//
//  Unable to update the machine status after a transaction. (hr = %1)
//
#define CCM_E_FAILEDUPDATEMACHINESTATUS  ((HRESULT)0x8004963EL)

//
// MessageId: CCM_E_FAILEDTHL
//
// MessageText:
//
//  Unable to enter Transaction History Log trigger record after a transaction. (hr = %1)
//
#define CCM_E_FAILEDTHL                  ((HRESULT)0x8004963FL)

//
// MessageId: CCM_E_FAILEDTHLANDUPDATEMACHINESTATUS
//
// MessageText:
//
//  Unable to update the machine status and to enter Transaction History Log trigger record after a transaction. (hr = %1)
//
#define CCM_E_FAILEDTHLANDUPDATEMACHINESTATUS ((HRESULT)0x80049640L)

//
// MessageId: CCM_E_FAILEDTRIGGERCREATE
//
// MessageText:
//
//  Unable to create Trigger after a transaction. (hr = %1)
//
#define CCM_E_FAILEDTRIGGERCREATE        ((HRESULT)0x80049641L)

//
// MessageId: CCM_E_FAILEDTRIGGERCREATEDANDUPDATEMACHINESTATUS
//
// MessageText:
//
//  Unable to create Trigger and to update the machine status after a transaction. (hr = %1)
//
#define CCM_E_FAILEDTRIGGERCREATEDANDUPDATEMACHINESTATUS ((HRESULT)0x80049642L)

//
// MessageId: CCM_E_FAILEDTRIGGERCREATEDANDTHL
//
// MessageText:
//
//  Unable to create Trigger and to enter Transaction History Log trigger record after a transaction. (hr = %1)
//
#define CCM_E_FAILEDTRIGGERCREATEDANDTHL ((HRESULT)0x80049643L)

//
// MessageId: CCM_E_FAILEDTRIGGERCREATEDANDTHLANDUPDATEMACHINESTATUS
//
// MessageText:
//
//  Unable to create Trigger and to enter Transaction History Log trigger record and to update the machine status after a transaction. (hr = %1)
//
#define CCM_E_FAILEDTRIGGERCREATEDANDTHLANDUPDATEMACHINESTATUS ((HRESULT)0x80049644L)

//
// MessageId: CCM_E_SAMEINSTANCE
//
// MessageText:
//
//  Same instance already in DB (hr = %1)
//
#define CCM_E_SAMEINSTANCE               ((HRESULT)0x8004F04FL)

//
// MessageId: CCM_E_THLEXPIREDTOOLONG
//
// MessageText:
//
//  The length for the details is too long (hr = %1)
//
#define CCM_E_THLEXPIREDTOOLONG          ((HRESULT)0x8004F050L)

//
// MessageId: PP_E_CCMOCT_RESULTXML_INVALID
//
// MessageText:
//
//  The generated xml is invalid (hr = %1), the input Octopus Attributes is not in a valid xml format
//
#define PP_E_CCMOCT_RESULTXML_INVALID    ((HRESULT)0x8004F051L)

//
// MessageId: CCM_E_INVALIDINSTANCE
//
// MessageText:
//
//  Invalid object instance detected (hr = %1), only values between 0 and 32767 are acceptable.
//
#define CCM_E_INVALIDINSTANCE            ((HRESULT)0x8004F052L)

//
// MessageId: CCM_E_OBJECTDOESNOTEXIST
//
// MessageText:
//
//  An object specified in the request does not exist, so the required operation cannot be performed (hr = %1).
//
#define CCM_E_OBJECTDOESNOTEXIST         ((HRESULT)0x8004F053L)

//
// MessageId: CCM_E_ENTITYNAME_INVALID
//
// MessageText:
//
//  CCM entity name is invalid
//
#define CCM_E_ENTITYNAME_INVALID         ((HRESULT)0x8004F054L)

//
// MessageId: CCM_E_VALUETYPE_INVALID
//
// MessageText:
//
//  CCM entity value type is invalid
//
#define CCM_E_VALUETYPE_INVALID          ((HRESULT)0x8004F055L)

//
// MessageId: CCM_E_ITEMTYPE_INVALID
//
// MessageText:
//
//  Internal error: invalid type for a CCM item
//
#define CCM_E_ITEMTYPE_INVALID           ((HRESULT)0x8004F056L)

//
// MessageId: CCM_E_ITEMINDEX_INVALID
//
// MessageText:
//
//  Internal error: invalid index for a CCM item
//
#define CCM_E_ITEMINDEX_INVALID          ((HRESULT)0x8004F057L)

//
// MessageId: CCM_E_ITEM_NOTFOUND
//
// MessageText:
//
//  CCM item not found
//
#define CCM_E_ITEM_NOTFOUND              ((HRESULT)0x8004F058L)

//
// MessageId: CCM_E_OBJECTTYPE_INVALID
//
// MessageText:
//
//  Object type is invalid
//
#define CCM_E_OBJECTTYPE_INVALID         ((HRESULT)0x8004F059L)

//
// MessageId: CCM_E_INSTANCE_INVALID
//
// MessageText:
//
//  Object instance is invalid
//
#define CCM_E_INSTANCE_INVALID           ((HRESULT)0x8004F05AL)

//
// MessageId: CCM_E_RELARITY_INVALID
//
// MessageText:
//
//  Invalid relationship arity
//
#define CCM_E_RELARITY_INVALID           ((HRESULT)0x8004F05BL)

//
// MessageId: CCM_E_ITEMPOINTER_INVALID
//
// MessageText:
//
//  Internal error: pointer to CCM item is invalid
//
#define CCM_E_ITEMPOINTER_INVALID        ((HRESULT)0x8004F05CL)

//
// MessageId: CCM_E_TYPENAME_INVALID
//
// MessageText:
//
//  CCM type name is invalid
//
#define CCM_E_TYPENAME_INVALID           ((HRESULT)0x8004F05DL)

//
// MessageId: CCM_E_INVALIDFILENAME
//
// MessageText:
//
//  Input file name is invalid
//
#define CCM_E_INVALIDFILENAME            ((HRESULT)0x8004F05EL)

//
// MessageId: CCM_E_NOMOREFILES
//
// MessageText:
//
//  There are no more files in the input path
//
#define CCM_E_NOMOREFILES                ((HRESULT)0x8004F05FL)

//
// MessageId: CCM_E_INVALID_CCMID
//
// MessageText:
//
//  Invalid ccm id
//
#define CCM_E_INVALID_CCMID              ((HRESULT)0x8004F060L)

//
// MessageId: PP_E_CCMOCT_GETIPFORSERVICE
//
// MessageText:
//
//  The generated xml is invalid (hr = %1), the input Octopus Attributes is not in a valid xml format
//
#define PP_E_CCMOCT_GETIPFORSERVICE      ((HRESULT)0x8004F061L)

//
// MessageId: PP_E_CCMOCT_INVALID_CALCULATEDPROPERTY
//
// MessageText:
//
//  The specified property instance name is not supported as a calculated property in CCM.
//
#define PP_E_CCMOCT_INVALID_CALCULATEDPROPERTY ((HRESULT)0x8004F062L)

//
// MessageId: PP_E_CCMOCT_UNK_PROPERTYVALUETYPE
//
// MessageText:
//
//  The specified property instance value could not be mapped to any known value type.
//
#define PP_E_CCMOCT_UNK_PROPERTYVALUETYPE ((HRESULT)0x8004F063L)

//
// MessageId: PP_E_CCMOCT_INVALID_CCMSERVERPROPERTY
//
// MessageText:
//
//  The specified property instance name is not supported as a CCMServer property in CCM.
//
#define PP_E_CCMOCT_INVALID_CCMSERVERPROPERTY ((HRESULT)0x8004F064L)

//
// MessageId: CCM_E_INVAPIMODE
//
// MessageText:
//
//  The specified API mode is not supported.
//
#define CCM_E_INVAPIMODE                 ((HRESULT)0x8004F065L)

//
// MessageId: CCM_E_ROAPIMODE
//
// MessageText:
//
//  The CCM API is set to Read Only mode as such no write operations are allowed.
//
#define CCM_E_ROAPIMODE                  ((HRESULT)0x8004F066L)

//
// MessageId: CCM_E_INVAPIMETADATAMODE
//
// MessageText:
//
//  The specified API metadata mode is not supported.
//
#define CCM_E_INVAPIMETADATAMODE         ((HRESULT)0x8004F067L)

//
// MessageId: CCM_E_INVALIDBUFFER
//
// MessageText:
//
//  Input buffer is invalid
//
#define CCM_E_INVALIDBUFFER              ((HRESULT)0x8004F068L)

//
// MessageId: CCM_E_CONVERSIONERROR
//
// MessageText:
//
//  Conversion error
//
#define CCM_E_CONVERSIONERROR            ((HRESULT)0x8004F069L)

//
// MessageId: CCM_E_TRXINPUT_INVALID
//
// MessageText:
//
//  Invalid transaction input
//
#define CCM_E_TRXINPUT_INVALID           ((HRESULT)0x8004F06AL)

//
// MessageId: CCM_E_PROPA_OWNER_REQUIRED
//
// MessageText:
//
//  Owner is a required Property Attribute (hr = %1)
//
#define CCM_E_PROPA_OWNER_REQUIRED       ((HRESULT)0x8004F06BL)

//
// MessageId: CCM_E_FORBIDDENOT
//
// MessageText:
//
//  One of the Objects involved in the operation is member of a list of object types that are not available for other than read operations (hr = %1)
//
#define CCM_E_FORBIDDENOT                ((HRESULT)0x8004F06CL)

//
// MessageId: PP_E_MFSTGEN_WEBSERVICENAME_IS_MISSING
//
// MessageText:
//
//  One of the Objects involved in the operation is member of a list of object types that are not available for other than read operations (hr = %1)
//
#define PP_E_MFSTGEN_WEBSERVICENAME_IS_MISSING ((HRESULT)0x8004F06DL)

//
// MessageId: CCM_E_INVALIDOTAVALUEFORCACHETYPE
//
// MessageText:
//
//  The value for the Object Type Attribute OTA_CacheType is invalid (hr = %1)
//
#define CCM_E_INVALIDOTAVALUEFORCACHETYPE ((HRESULT)0x8004F06EL)

//
// MessageId: CCM_E_INVALIDOTAVALUEFORCATEGROY
//
// MessageText:
//
//  The value for the Object Type Attribute OTA_Category is invalid (hr = %1)
//
#define CCM_E_INVALIDOTAVALUEFORCATEGROY ((HRESULT)0x8004F06FL)

//
// MessageId: CCM_E_INVALIDOTAVALUEFORINDEX
//
// MessageText:
//
//  The value for the Object Type Attribute OTA_Index1 or OTA_Index2 or OTA_Index3 is invalid (hr = %1)
//
#define CCM_E_INVALIDOTAVALUEFORINDEX    ((HRESULT)0x8004F070L)

//
// MessageId: CCM_E_PROPBLEMSWITHCONSTRAINTS
//
// MessageText:
//
//  Critical error while dealing with Constraints XML (hr = %1)
//
#define CCM_E_PROPBLEMSWITHCONSTRAINTS   ((HRESULT)0x8004F071L)

//
// MessageId: CCM_E_INVALIDOPINCONSTRAINTS
//
// MessageText:
//
//  Invalid operator detected in Constraints XML (hr = %1)
//
#define CCM_E_INVALIDOPINCONSTRAINTS     ((HRESULT)0x8004F072L)

//
// MessageId: CCM_E_ATTRINCONSTRAINTSOP
//
// MessageText:
//
//  Invalid attributes detected in Constraints XML (hr = %1)
//
#define CCM_E_ATTRINCONSTRAINTSOP        ((HRESULT)0x8004F073L)

//
// MessageId: CCM_E_UNKNODETYPEINCONSTRAINTSOP
//
// MessageText:
//
//  Invalid node type detected in Constraints XML (hr = %1)
//
#define CCM_E_UNKNODETYPEINCONSTRAINTSOP ((HRESULT)0x8004F074L)

//
// MessageId: CCM_E_MIXNODECONTENTINCONSTRAINTS
//
// MessageText:
//
//  Mixed content node detected in Constraints XML (hr = %1)
//
#define CCM_E_MIXNODECONTENTINCONSTRAINTS ((HRESULT)0x8004F075L)

//
// MessageId: CCM_E_TERMINALNODEHASCHILDRENINCONSTRAINTS
//
// MessageText:
//
//  Terminal node with children detected in Constraints XML (hr = %1)
//
#define CCM_E_TERMINALNODEHASCHILDRENINCONSTRAINTS ((HRESULT)0x8004F076L)

//
// MessageId: CCM_E_NONTERMINALNODEMINARITYINCONSTRAINTS
//
// MessageText:
//
//  Non terminal node with less than required minimum arity detected in Constraints XML (hr = %1)
//
#define CCM_E_NONTERMINALNODEMINARITYINCONSTRAINTS ((HRESULT)0x8004F077L)

//
// MessageId: CCM_E_NONTERMINALNODEMAXARITYINCONSTRAINTS
//
// MessageText:
//
//  Non terminal node with greater than allowed maximum arity detected in Constraints XML (hr = %1)
//
#define CCM_E_NONTERMINALNODEMAXARITYINCONSTRAINTS ((HRESULT)0x8004F078L)

//
// MessageId: CCM_E_CONTENTNODEINCONSTRAINTS
//
// MessageText:
//
//  Node with content and should not, or node without content and it should, detected in Constraints XML (hr = %1)
//
#define CCM_E_CONTENTNODEINCONSTRAINTS   ((HRESULT)0x8004F079L)

//
// MessageId: CCM_E_OPERANDCONVERSIONFAILEDINCONSTRAINTS
//
// MessageText:
//
//  A costant value specified for an operator cannot be converted to the required data type (hr = %1)
//
#define CCM_E_OPERANDCONVERSIONFAILEDINCONSTRAINTS ((HRESULT)0x8004F07AL)

//
// MessageId: CCM_E_OPERANDBSTRINCONSTRAINTS
//
// MessageText:
//
//  Operator for BSTR only detected with other datatype in Constraints XML (hr = %1)
//
#define CCM_E_OPERANDBSTRINCONSTRAINTS   ((HRESULT)0x8004F07BL)

//
// MessageId: CCM_E_OPERANDMUSTBEBSTRINCONSTRAINTS
//
// MessageText:
//
//  An operator that only take valid BSTRs as values detected with other datatype in Constraints XML (hr = %1)
//
#define CCM_E_OPERANDMUSTBEBSTRINCONSTRAINTS ((HRESULT)0x8004F07CL)

//
// MessageId: CCM_E_OPERANDMUSTBEUI4INCONSTRAINTS
//
// MessageText:
//
//  An operator that only take valid UI4s as values detected with other datatype in Constraints XML (hr = %1)
//
#define CCM_E_OPERANDMUSTBEUI4INCONSTRAINTS ((HRESULT)0x8004F07DL)

//
// MessageId: CCM_E_INVALIDCONSTRAINTSXML
//
// MessageText:
//
//  Invalid Constraints XML (hr = %1)
//
#define CCM_E_INVALIDCONSTRAINTSXML      ((HRESULT)0x8004F07EL)

//
// MessageId: CCM_E_TOPLEVELNODEONLY1CHILDINCONSTRAINTSXML
//
// MessageText:
//
//  Constraints XML must contain one, and only one, operand node right below the top level <constraints> node (hr = %1)
//
#define CCM_E_TOPLEVELNODEONLY1CHILDINCONSTRAINTSXML ((HRESULT)0x8004F07FL)

//
// MessageId: CCM_E_UNSUPPDATATYPECONSTRAINTS
//
// MessageText:
//
//  Unsupported data type to be constrained (hr = %1)
//
#define CCM_E_UNSUPPDATATYPECONSTRAINTS  ((HRESULT)0x8004F080L)

//
// MessageId: CCM_E_VALUECANNOTBECOERCEDTOREQUIREDDATATYPE
//
// MessageText:
//
//  Value cannot be coerced to required data type (hr = %1)
//
#define CCM_E_VALUECANNOTBECOERCEDTOREQUIREDDATATYPE ((HRESULT)0x8004F081L)

//
// MessageId: CCM_E_PROBLEMSWITHCONSTRAINTSINOPERATOR
//
// MessageText:
//
//  Critical error while dealing with Constraints for the 'in' operator (hr = %1)
//
#define CCM_E_PROBLEMSWITHCONSTRAINTSINOPERATOR ((HRESULT)0x8004F082L)

//
// MessageId: CCM_E_CONSTRAINTSINOPERATORSETERROR
//
// MessageText:
//
//  Operator 'in' requires sets to be separated by '..' and have the first elemet be less than or equal to the second (hr = %1)
//
#define CCM_E_CONSTRAINTSINOPERATORSETERROR ((HRESULT)0x8004F083L)

//
// MessageId: CCM_E_CONSTRAINTSINOPERATORNULL
//
// MessageText:
//
//  Operator 'in' requires cannot be used with an empty operand (hr = %1)
//
#define CCM_E_CONSTRAINTSINOPERATORNULL  ((HRESULT)0x8004F084L)

//
// MessageId: CCM_E_CONSTRAINTSINOPERATORTOOLONG
//
// MessageText:
//
//  Operator 'in' with longer than max expression detected (hr = %1)
//
#define CCM_E_CONSTRAINTSINOPERATORTOOLONG ((HRESULT)0x8004F085L)

//
// MessageId: CCM_E_CONSTRAINTSINOPERATORINVEXPR
//
// MessageText:
//
//  Operator 'in' with invalid expression detected (hr = %1)
//
#define CCM_E_CONSTRAINTSINOPERATORINVEXPR ((HRESULT)0x8004F086L)

//
// MessageId: CCM_E_CONSTRAINTSVIOLATION
//
// MessageText:
//
//  Constraints violation (hr = %1)
//
#define CCM_E_CONSTRAINTSVIOLATION       ((HRESULT)0x8004F087L)

//
// MessageId: CCM_E_PROPADEFAULTVARCONVERTFAILED
//
// MessageText:
//
//  PropA_Default couldn't be converted to declared datatype (hr = %1)
//
#define CCM_E_PROPADEFAULTVARCONVERTFAILED ((HRESULT)0x8004F088L)

//
// MessageId: CCM_E_PROPADEFAULTCONSTRAINTSVIOLATION
//
// MessageText:
//
//  PropA_Default constraints violation (hr = %1)
//
#define CCM_E_PROPADEFAULTCONSTRAINTSVIOLATION ((HRESULT)0x8004F089L)

//
// MessageId: CCM_E_CONSTRAINTSREOPERATORINVEXPR
//
// MessageText:
//
//  Operator 're' with invalid expression detected (hr = %1)
//
#define CCM_E_CONSTRAINTSREOPERATORINVEXPR ((HRESULT)0x8004F08AL)

//
// MessageId: CCM_E_PROBLEMSWITHCONSTRAINTSURLOPERATOR
//
// MessageText:
//
//  Critical error while dealing with Constraints for the 'url' operator (hr = %1)
//
#define CCM_E_PROBLEMSWITHCONSTRAINTSURLOPERATOR ((HRESULT)0x8004F08BL)

//
// MessageId: CCM_E_CONSTRAINTSURLOPERATORNULL
//
// MessageText:
//
//  Operator 'url' requires cannot be used with an empty operand (hr = %1)
//
#define CCM_E_CONSTRAINTSURLOPERATORNULL ((HRESULT)0x8004F08CL)

//
// MessageId: CCM_E_CONSTRAINTSURLOPERATORTOOLONG
//
// MessageText:
//
//  Operator 'url' with longer than max expression detected (hr = %1)
//
#define CCM_E_CONSTRAINTSURLOPERATORTOOLONG ((HRESULT)0x8004F08DL)

//
// MessageId: CCM_E_CONSTRAINTSURLOPERATORINVEXPR
//
// MessageText:
//
//  Operator 'url' with invalid expression detected (hr = %1)
//
#define CCM_E_CONSTRAINTSURLOPERATORINVEXPR ((HRESULT)0x8004F08EL)

//
// MessageId: CCM_E_CONSTRAINTSURLOPERATORTOOMANYWILDCARDS
//
// MessageText:
//
//  Operator 'url' with too many wildcard (*) elements expression detected (hr = %1)
//
#define CCM_E_CONSTRAINTSURLOPERATORTOOMANYWILDCARDS ((HRESULT)0x8004F08FL)

//
// MessageId: CCM_E_CONSTRAINTSURLOPERATORINVALIDWILDCARDUSAGE
//
// MessageText:
//
//  Operator 'url' with wildcard (*) cannot have other protocols (hr = %1)
//
#define CCM_E_CONSTRAINTSURLOPERATORINVALIDWILDCARDUSAGE ((HRESULT)0x8004F090L)

//
// MessageId: CCM_E_CONSTRAINTSURLOPERATORINVPROTOCOL
//
// MessageText:
//
//  Operator 'url' with invalid protocol detected (hr = %1)
//
#define CCM_E_CONSTRAINTSURLOPERATORINVPROTOCOL ((HRESULT)0x8004F091L)

// base 0xFF9C
////internal db errors
//#define kErrorStringTooLong                  -100  //0xFFFFFF9C
//
// MessageId: PP_E_kErrorStringTooLong
//
// MessageText:
//
//  Input string is too long, (hr=%1), please examine input.
//
#define PP_E_kErrorStringTooLong         ((HRESULT)0xCFFFFF9CL)

//#define kErrorStringTooShort                 -101  //0xFFFFFF9B
//
// MessageId: PP_E_kErrorStringTooShort
//
// MessageText:
//
//  Input string is too short, (hr=%1), please examine input.
//
#define PP_E_kErrorStringTooShort        ((HRESULT)0xCFFFFF9BL)

//#define kErrorInvalidPassword                -102  //0xFFFFFF9A
//
// MessageId: PP_E_kErrorInvalidPassword
//
// MessageText:
//
//  The password is invalid
//
#define PP_E_kErrorInvalidPassword       ((HRESULT)0xCFFFFF9AL)

//#define kErrorInvalidEMail                   -103  //0xFFFFFF99
//
// MessageId: PP_E_kErrorInvalidEMail
//
// MessageText:
//
//  The email address is invalid
//
#define PP_E_kErrorInvalidEMail          ((HRESULT)0xCFFFFF99L)

//#define kErrorInvalidMemberName              -104  //0xFFFFFF98
//
// MessageId: PP_E_kErrorInvalidMemberName
//
// MessageText:
//
//  The member name is invalid
//
#define PP_E_kErrorInvalidMemberName     ((HRESULT)0xCFFFFF98L)

//#define kErrorMissingParameters              -105  //0xFFFFFF97
//
// MessageId: PP_E_kErrorMissingParameters
//
// MessageText:
//
//  Internal Database error, missing required stored procedure parameters, (hr=%1), please examine input.
//
#define PP_E_kErrorMissingParameters     ((HRESULT)0xCFFFFF97L)

//#define kErrorForbiddenWord                  -106  //0xFFFFFF96
//
// MessageId: PP_E_kErrorForbiddenWord
//
// MessageText:
//
//  String contained words that are forbidden by namespace administrator, examine input.
//
#define PP_E_kErrorForbiddenWord         ((HRESULT)0xCFFFFF96L)

//#define kErrorInvalidDomainName              -107  //0xFFFFFF95
//
// MessageId: PP_E_kErrorInvalidDomainName
//
// MessageText:
//
//  Domain name is invalid, (hr=%1), please try later.
//
#define PP_E_kErrorInvalidDomainName     ((HRESULT)0xCFFFFF95L)

//#define kErrorInvalidDomainAuthority         -108  //0xFFFFFF94
//
// MessageId: PP_E_kErrorInvalidDomainAuthority
//
// MessageText:
//
//  Invalid Domain Authority value for this input, (hr=%1), please examine input or try again later.
//
#define PP_E_kErrorInvalidDomainAuthority ((HRESULT)0xCFFFFF94L)

//#define kErrorInvalidDatetime                -109  //0xFFFFFF93 (1.4)
//
// MessageId: PP_E_kErrorInvalidDatetime
//
// MessageText:
//
//  Internal Database error due to invalid datetime value, (hr=%1), please try later.
//
#define PP_E_kErrorInvalidDatetime       ((HRESULT)0xCFFFFF93L)

//#define kErrorIDGenNotAvailable              -110  //0xFFFFFF92 (1.4)
//
// MessageId: PP_E_kErrorIDGenNotAvailable
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorIDGenNotAvailable     ((HRESULT)0xCFFFFF92L)

//#define kErrorDbAddressReferencedByCard      -111  //0xFFFFFF91
//
// MessageId: PP_E_kErrorDbAddressReferencedByCard
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbAddressReferencedByCard ((HRESULT)0xCFFFFF91L)

//#define kErrorDbSprocDoesNotExist            -1012  //0xFFFFFF90
//
// MessageId: PP_E_kErrorDbSprocDoesNotExist
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbSprocDoesNotExist   ((HRESULT)0xCFFFFF90L)

//#define kErrorDbCriticalError                -1000  //0xFFFFFC18
//
// MessageId: PP_E_kErrorDbCriticalError
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbCriticalError       ((HRESULT)0xCFFFFC18L)

//#define kErrorDbError                        -1001  //0xFFFFFC17
//
// MessageId: PP_E_kErrorDbError
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbError               ((HRESULT)0xCFFFFC17L)

//#define kErrorDbMemberExists                 -1002  //0xFFFFFC16
//
// MessageId: PP_E_kErrorDbMemberExists
//
// MessageText:
//
//  The record already exists in Database
//
#define PP_E_kErrorDbMemberExists        ((HRESULT)0xCFFFFC16L)

//#define kErrorDbMemberDoesNotExist           -1003  //0xFFFFFC15
//
// MessageId: PP_E_kErrorDbMemberDoesNotExist
//
// MessageText:
//
//  Can not find the record in Database
//
#define PP_E_kErrorDbMemberDoesNotExist  ((HRESULT)0xCFFFFC15L)

//#define kErrorDbNoData                       -1004  //0xFFFFFC14
//
// MessageId: PP_E_kErrorDbNoData
//
// MessageText:
//
//  Can not find the record in Database
//
#define PP_E_kErrorDbNoData              ((HRESULT)0xCFFFFC14L)

//#define kErrorDbDuplicateFriendlyName        -1005  //0xFFFFFC13
//
// MessageId: PP_E_kErrorDbDuplicateFriendlyName
//
// MessageText:
//
//  Duplicated friendly names
//
#define PP_E_kErrorDbDuplicateFriendlyName ((HRESULT)0xCFFFFC13L)

//#define kErrorDbAddressDoesNotExist          -1006  //0xFFFFFC12
//
// MessageId: PP_E_kErrorDbAddressDoesNotExist
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbAddressDoesNotExist ((HRESULT)0xCFFFFC12L)

//#define kErrorDbCardDoesNotExist             -1007  //0xFFFFFC11
//
// MessageId: PP_E_kErrorDbCardDoesNotExist
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbCardDoesNotExist    ((HRESULT)0xCFFFFC11L)

//#define kErrorDbURLDoesNotExist              -1009  //0xFFFFFC0F
//
// MessageId: PP_E_kErrorDbURLDoesNotExist
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbURLDoesNotExist     ((HRESULT)0xCFFFFC0FL)

//#define kErrorKidsSiteNotListed              -1011  //0xFFFFFC0D
//
// MessageId: PP_E_kErrorKidsSiteNotListed
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorKidsSiteNotListed     ((HRESULT)0xCFFFFC0DL)

//#define kErrorKidsSiteAlreadyRequested       -1012  //0xFFFFFC0C
//
// MessageId: PP_E_kErrorKidsSiteAlreadyRequested
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorKidsSiteAlreadyRequested ((HRESULT)0xCFFFFC0CL)

//#define kErrorDbTooManyCards                 -1013  //0xFFFFFC0B
//
// MessageId: PP_E_kErrorDbTooManyCards
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbTooManyCards        ((HRESULT)0xCFFFFC0BL)

//#define kErrorDbTooManyAddresses             -1014  //0xFFFFFC0A
//
// MessageId: PP_E_kErrorDbTooManyAddresses
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbTooManyAddresses    ((HRESULT)0xCFFFFC0AL)

//#define kErrorKidsIdentityDoesNotExist       -1015  //0xFFFFFC09
//
// MessageId: PP_E_kErrorKidsIdentityDoesNotExist
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorKidsIdentityDoesNotExist ((HRESULT)0xCFFFFC09L)

//#define kErrorKidsCannotUpdateMoreThanOnce   -1016  //0xFFFFFC08
//
// MessageId: PP_E_kErrorKidsCannotUpdateMoreThanOnce
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorKidsCannotUpdateMoreThanOnce ((HRESULT)0xCFFFFC08L)

//#define kErrorDbNotListedAsParent            -1017  //0xFFFFFC07
//
// MessageId: PP_E_kErrorDbNotListedAsParent
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbNotListedAsParent   ((HRESULT)0xCFFFFC07L)

//#define kErrorBadArgument                    -1018  //0xFFFFFC06
//
// MessageId: PP_E_kErrorBadArgument
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorBadArgument           ((HRESULT)0xCFFFFC06L)

//#define kErrorIDGenTranCountExist            -1019  //0xFFFFFC05 (1.4)
//
// MessageId: PP_E_kErrorIDGenTranCountExist
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorIDGenTranCountExist   ((HRESULT)0xCFFFFC05L)

//#define kErrorIDGenDepleted                  -1020  //0xFFFFFC04 (1.4)
//
// MessageId: PP_E_kErrorIDGenDepleted
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorIDGenDepleted         ((HRESULT)0xCFFFFC04L)

//#define kErrorDbMemberIsNotActive            -1021  //0xFFFFFC03
//
// MessageId: PP_E_kErrorDbMemberIsNotActive
//
// MessageText:
//
//  Member is not active
//
#define PP_E_kErrorDbMemberIsNotActive   ((HRESULT)0xCFFFFC03L)

//#define kErrorManagedCredsMustBeActive       -1022  //0xFFFFFC02
//
// MessageId: PP_E_kErrorManagedCredsMustBeActive
//
// MessageText:
//
//  A credential must have active status to be considered managed, (hr=%1)
//
#define PP_E_kErrorManagedCredsMustBeActive ((HRESULT)0xCFFFFC02L)

//#define kErrorCredentialTypeAlreadyExists    -1023  //0xFFFFFC01
//
// MessageId: PP_E_kErrorCredentialTypeAlreadyExists
//
// MessageText:
//
//  Credential type already exists for this user
//
#define PP_E_kErrorCredentialTypeAlreadyExists ((HRESULT)0xCFFFFC01L)

//#define kErrorDbMultipleCredsSameType        -1024  //0xFFFFFC00
//
// MessageId: PP_E_kErrorDbMultipleCredsSameType
//
// MessageText:
//
//  Database error (hr=%1). A credential of this type already exists.
//
#define PP_E_kErrorDbMultipleCredsSameType ((HRESULT)0xCFFFFC00L)

//#define kErrorTooManyUsersWithThisName       -1025  //0xFFFFFBFF
//
// MessageId: PP_E_kErrorTooManyUsersWithThisName
//
// MessageText:
//
//  Database error (hr=%1), too many users already have this name.
//
#define PP_E_kErrorTooManyUsersWithThisName ((HRESULT)0xCFFFFBFFL)

//#define kErrorPPBKDANotSupported             -1026
//
// MessageId: PP_E_kErrorPPBKDANotSupported
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorPPBKDANotSupported    ((HRESULT)0xCFFFFBFEL)

//#define kErrorDbReplicationTimeout           -1027  //0xFFFFFBFD
//
// MessageId: PP_E_kErrorDbReplicationTimeout
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbReplicationTimeout  ((HRESULT)0xCFFFFBFDL)

//#define kErrorCredentialTypeDoesNotExist     -1028
//
// MessageId: PP_E_kErrorCredentialTypeDoesNotExist
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorCredentialTypeDoesNotExist ((HRESULT)0xCFFFFBFCL)

//#define kErrorRecordDoesNotExist kErrorDbRecordDoesNotExist
//
// MessageId: PP_E_kErrorRecordDoesNotExist
//
// MessageText:
//
//  Can not find record in Database
//
#define PP_E_kErrorRecordDoesNotExist    ((HRESULT)0xCFFFFBFBL)

//#define kErrorDbRowNotUpdated                -1030
//
// MessageId: PP_E_kErrorDbRowNotUpdated
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbRowNotUpdated       ((HRESULT)0xCFFFFBFAL)

//#define kErrorDbAccessDenied                 -1031
//
// MessageId: PP_E_kErrorDbAccessDenied
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbAccessDenied        ((HRESULT)0xCFFFFBF9L)

//#define kErrorDbRecordExists                 -1032  //0xFFFFFBF8
//
// MessageId: PP_E_kErrorDbRecordExists2
//
// MessageText:
//
//  Can not find record in Database
//
#define PP_E_kErrorDbRecordExists2       ((HRESULT)0xCFFFFBF8L)

//#define kErrorDbUpdateCausesDuplicateRow     -1034 //0xFFFFFBF6
//
// MessageId: PP_E_kErrorDbUpdateCausesDuplicateRow
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbUpdateCausesDuplicateRow ((HRESULT)0xCFFFFBF6L)

//#define kErrorDbManagedCredNoNamespace       -1035
//
// MessageId: PP_E_kErrorDbManagedCredNoNamespace
//
// MessageText:
//
//  Could not find managed namespace for this user, (hr=%1), please try later.
//
#define PP_E_kErrorDbManagedCredNoNamespace ((HRESULT)0xCFFFFBF5L)

//#define kErrorDbNamespaceIsManaged           -1036
//
// MessageId: PP_E_kErrorDbNamespaceIsManaged
//
// MessageText:
//
//  Database error (hr=%1), namespace is managed and operation not permitted.
//
#define PP_E_kErrorDbNamespaceIsManaged  ((HRESULT)0xCFFFFBF4L)

//#define kErrorDbManagedNoOverflowRow         -1037
//
// MessageId: PP_E_kErrorDbManagedNoOverflowRow
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbManagedNoOverflowRow ((HRESULT)0xCFFFFBF3L)

//#define kErrorDbManagedUpdateDisallowed      -1038
//
// MessageId: PP_E_kErrorDbManagedUpdateDisallowed
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbManagedUpdateDisallowed ((HRESULT)0xCFFFFBF2L)

//#define kErrorDbOverWriteDisallowed          -1039
//
// MessageId: PP_E_kErrorDbOverWriteDisallowed
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbOverWriteDisallowed ((HRESULT)0xCFFFFBF1L)

//#define kErrorBadApplicationMapData          -1040
//
// MessageId: PP_E_kErrorBadApplicationMapData
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorBadApplicationMapData ((HRESULT)0xCFFFFBF0L)

//#define kErrorTooManyEmailservers            -1041
//
// MessageId: PP_E_kErrorTooManyEmailservers
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorTooManyEmailservers   ((HRESULT)0xCFFFFBEFL)

//#define kErrorDbInvalidEntityType            -1042
//
// MessageId: PP_E_kErrorDbInvalidEntityType
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbInvalidEntityType   ((HRESULT)0xCFFFFBEEL)

//#define kErrorDbCyclicRelationship           -1044
//
// MessageId: PP_E_kErrorDbCyclicRelationship
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbCyclicRelationship  ((HRESULT)0xCFFFFBECL)

//#define kErrorDbInvalidRelationship          -1045
//
// MessageId: PP_E_kErrorDbInvalidRelationship
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbInvalidRelationship ((HRESULT)0xCFFFFBEBL)

//#define kErrorDbOneToManyRelationship        -1046
//
// MessageId: PP_E_kErrorDbOneToManyRelationship
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbOneToManyRelationship ((HRESULT)0xCFFFFBEAL)

//#define kErrorDbManyToOneRelationship        -1047
//
// MessageId: PP_E_kErrorDbManyToOneRelationship
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbManyToOneRelationship ((HRESULT)0xCFFFFBE9L)

//#define kErrorDbInvalidParameters            -1048
//
// MessageId: PP_E_kErrorDbInvalidParameters
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbInvalidParameters   ((HRESULT)0xCFFFFBE8L)

//#define kErrorDbNotSupportedYet              -1049
//
// MessageId: PP_E_kErrorDbNotSupportedYet
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbNotSupportedYet     ((HRESULT)0xCFFFFBE7L)

//#define kErrorDbCertificateDoesNotExist      -1050  //0xFFFFFBE6
//
// MessageId: PP_E_kErrorDbCertificateDoesNotExist
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbCertificateDoesNotExist ((HRESULT)0xCFFFFBE6L)

//#define kErrorDbEntityIdNameMismatch         -1051
//
// MessageId: PP_E_kErrorDbEntityIdNameMismatch
//
// MessageText:
//
//  Database error (hr=%1), the name and id used were mismatched, please examine input.
//
#define PP_E_kErrorDbEntityIdNameMismatch ((HRESULT)0xCFFFFBE5L)

//#define kErrorDbMaxPropIDExceeded            -1052
//
// MessageId: PP_E_kErrorDbMaxPropIDExceeded
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbMaxPropIDExceeded   ((HRESULT)0xCFFFFBE4L)

//#define kErrorDBTooManyCertificates          -1053
//
// MessageId: PP_E_kErrorDBTooManyCertificates
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDBTooManyCertificates ((HRESULT)0xCFFFFBE3L)

//#define kErrorDbEmailBitWrongCredType        -1060
////There is no rowset for GetRowset() call
//
// MessageId: PP_E_kErrorDbEmailBitWrongCredType
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbEmailBitWrongCredType ((HRESULT)0xCFFFFBDCL)

//#define kErrorDBMissingPrimaryRow        -1061
////There is no rowset for GetRowset() call
//
// MessageId: PP_E_kErrorDBMissingPrimaryRow
//
// MessageText:
//
//  Database error (hr=%1), account is missing primary rows for this credential type.
//
#define PP_E_kErrorDBMissingPrimaryRow   ((HRESULT)0xCFFFFBDBL)

//#define kErrorMemberInBlockedState        -1100
////Trying to block a blocked member
//
// MessageId: PP_E_kErrorMemberInBlockedState
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorMemberInBlockedState  ((HRESULT)0xCFFFFBB4L)

//#define kErrorMemberInUnBlockedState        -1101
////Trying to unblock an unblocked member
//
// MessageId: PP_E_kErrorMemberInUnBlockedState
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorMemberInUnBlockedState ((HRESULT)0xCFFFFBB3L)

//#define kErrorDbMemberInDelayedRecycle       -1102
//
// MessageId: PP_E_kErrorDbMemberInDelayedRecycle
//
// MessageText:
//
//  Name cannot be used again since it is protected by namespace EvictRecycleDays setting, hr=%1.
//
#define PP_E_kErrorDbMemberInDelayedRecycle ((HRESULT)0xCFFFFBB2L)

//#define kErrorNullRowset                     -1103
//
// MessageId: PP_E_kErrorNullRowset
//
// MessageText:
//
//  Can not find record in Database
//
#define PP_E_kErrorNullRowset            ((HRESULT)0xCFFFFBB1L)

//#define kErrorDbMemberSoftDeleted            -1500
//
// MessageId: PP_E_kErrorDbMemberSoftDeleted
//
// MessageText:
//
//  Record already deleted from Database
//
#define PP_E_kErrorDbMemberSoftDeleted   ((HRESULT)0xCFFFFA24L)

//#define kErrorMSNIAError                     -2003  //0xFFFFF82D
//
// MessageId: PP_E_kErrorMSNIAError
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorMSNIAError            ((HRESULT)0xCFFFF82DL)

//#define kErrorNoBinding                      -2004  //0xFFFFF82C
//
// MessageId: PP_E_kErrorNoBinding
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorNoBinding             ((HRESULT)0xCFFFF82CL)

//#define kErrorHMserverDownState0             -2028  //(2.1)
//
// MessageId: PP_E_kErrorHMserverDownState0
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorHMserverDownState0    ((HRESULT)0xCFFFF814L)

//#define kErrorHMserverDownState1             -2029 // (2.1)
//
// MessageId: PP_E_kErrorHMserverDownState1
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorHMserverDownState1    ((HRESULT)0xCFFFF813L)

//#define kErrorHMserverDownState2             -2030 // (2.1)
//
// MessageId: PP_E_kErrorHMserverDownState2
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorHMserverDownState2    ((HRESULT)0xCFFFF812L)

//#define KErrorPCLCriticalError               -2031 // (2.5)
//
// MessageId: PP_E_kErrorPCLCriticalError
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorPCLCriticalError      ((HRESULT)0xCFFFF811L)

//#define KErrorSSOCommCriticalError           -2032 // (2.5)
//
// MessageId: PP_E_kErrorSSOCommCriticalError
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorSSOCommCriticalError  ((HRESULT)0xCFFFF810L)

//#define KErrorSSOHMCriticalError             -2033 // (2.5)
//
// MessageId: PP_E_kErrorSSOHMCriticalError
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorSSOHMCriticalError    ((HRESULT)0xCFFFF80FL)

//#define kErrorSSOSettingsNotFound            -3000  //0xFFFFF448
//
// MessageId: PP_E_kErrorSSOSettingsNotFound
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorSSOSettingsNotFound   ((HRESULT)0xCFFFF448L)

//#define kErrorUpdateNotRequired              -4000  //2.0
//
// MessageId: PP_E_kErrorUpdateNotRequired
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorUpdateNotRequired     ((HRESULT)0xCFFFF060L)

//#define kErrorInvalidDAId                   -4001 
//
// MessageId: PP_E_kErrorInvalidDAId
//
// MessageText:
//
//  The format of the specified NetID was invalid.
//
#define PP_E_kErrorInvalidDAId           ((HRESULT)0xCFFFF05FL)

//#define kErrorDualDAMigrationFail           -4002  
//
// MessageId: PP_E_kErrorDualDAMigrationFail
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDualDAMigrationFail   ((HRESULT)0xCFFFF05EL)

//#define kInvalidPhysicalPartition           -4003
//
// MessageId: PP_E_kInvalidPhysicalPartition
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kInvalidPhysicalPartition   ((HRESULT)0xCFFFF05DL)

//#define kInvalidLogicalPartition            -4004
//
// MessageId: PP_E_kInvalidLogicalPartition
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kInvalidLogicalPartition    ((HRESULT)0xCFFFF05CL)

//#define kErrorTooManyBatchElements          -4005
//
// MessageId: PP_E_kErrorTooManyBatchElements
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorTooManyBatchElements  ((HRESULT)0xCFFFF05BL)

//#define kErrorDbMissingNamespaceName     -1601
//
// MessageId: PP_E_kErrorDbMissingNamespaceName
//
// MessageText:
//
//  Database error, namespace name missing (hr=%1), please try later.
//
#define PP_E_kErrorDbMissingNamespaceName ((HRESULT)0xCFFFF9BFL)

//#define kErrorDbInvalidNamespaceID       -5002
//
// MessageId: PP_E_kErrorDbInvalidNamespaceID
//
// MessageText:
//
//  Database error, (hr=%1), the namespace id was not found.
//
#define PP_E_kErrorDbInvalidNamespaceID  ((HRESULT)0xCFFFEC76L)

//#define kErrorDbDuplicateNamespaceName   -5003
//
// MessageId: PP_E_kErrorDbDuplicateNamespaceName
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbDuplicateNamespaceName ((HRESULT)0xCFFFEC75L)

//#define kErrorDbMissingERTName           -1604
//
// MessageId: PP_E_kErrorDbMissingERTName
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbMissingERTName      ((HRESULT)0xCFFFF9BCL)

//#define kErrorDbInvalidERT               -1043
//
// MessageId: PP_E_kErrorDbInvalidERT
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbInvalidERT          ((HRESULT)0xCFFFFBEDL)

//#define kErrorDbDuplicateERTName         -1606
//
// MessageId: PP_E_kErrorDbDuplicateERTName
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbDuplicateERTName    ((HRESULT)0xCFFFF9BAL)

//#define kErrorDbInvalidTargetType        -1008
//
// MessageId: PP_E_kErrorDbInvalidTargetType
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbInvalidTargetType   ((HRESULT)0xCFFFFC10L)

//#define kErrorDbNullKeyValue             -1010
//
// MessageId: PP_E_kErrorDbNullKeyValue
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbNullKeyValue        ((HRESULT)0xCFFFFC0EL)

//#define kErrorDbUpdateNotSupported       -1614
//
// MessageId: PP_E_kErrorDbUpdateNotSupported
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbUpdateNotSupported  ((HRESULT)0xCFFFF9B2L)

//#define kErrorDbDuplicateEntity          -1616
//
// MessageId: PP_E_kErrorDbDuplicateEntity
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbDuplicateEntity     ((HRESULT)0xCFFFF9B0L)

//#define kErrorDbCantUpdateNS             -5017
//MessageId=0xEC67
//Facility=Database
//Severity=DBError
//SymbolicName=PP_E_kErrorDbCantUpdateNS
//Language=English
//Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//.
//#define kErrorDbInvalidEntityID          -1618
//
// MessageId: PP_E_kErrorDbInvalidEntityID
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbInvalidEntityID     ((HRESULT)0xCFFFF9AEL)

//#define kErrorDbRollbackNotAllowed       -5020
//
// MessageId: PP_E_kErrorDbRollbackNotAllowed
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbRollbackNotAllowed  ((HRESULT)0xCFFFEC64L)

//#define kErrorDbMissingTrxIndex          -5021
//
// MessageId: PP_E_kErrorDbMissingTrxIndex
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbMissingTrxIndex     ((HRESULT)0xCFFFEC63L)

//#define kErrorDbOutOfRange               -1622
//
// MessageId: PP_E_kCCMErrorDbOutOfRange
//
// MessageText:
//
//  Internal Database error (hr=%1), input value is outside of expected range.
//
#define PP_E_kCCMErrorDbOutOfRange       ((HRESULT)0xCFFFF9AAL)

//#define kErrorDbCCMTransactionExists        -5024
//
// MessageId: PP_E_kErrorDbCCMTransactionExists
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbCCMTransactionExists ((HRESULT)0xCFFFEC60L)

//#define kErrorDbBadData                     -1626
//
// MessageId: PP_E_kErrorDbBadData
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbBadData             ((HRESULT)0xCFFFF9A6L)

//#define kErrorDbEmptyTrxStack               -5027
//
// MessageId: PP_E_kErrorDbEmptyTrxStack
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbEmptyTrxStack       ((HRESULT)0xCFFFEC5DL)

//#define kErrorDbInvalidTrxID                -5028
//
// MessageId: PP_E_kErrorDbInvalidTrxID
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbInvalidTrxID        ((HRESULT)0xCFFFEC5CL)

//#define kErrorDbLKGSNotFound                -5029
//
// MessageId: PP_E_kErrorDbLKGSNotFound
//
// MessageText:
//
//  Database error (hr=%1), no last known good state was found for this object type.
//
#define PP_E_kErrorDbLKGSNotFound        ((HRESULT)0xCFFFEC5BL)

//#define kErrorDbRollForwardNotAllowed       -5030
//
// MessageId: PP_E_kErrorDbRollForwardNotAllowed
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbRollForwardNotAllowed ((HRESULT)0xCFFFEC5AL)

//#define kErrorDbInvalidName                 -1631
//
// MessageId: PP_E_kErrorDbInvalidName
//
// MessageText:
//
//  Database error, (hr=%1), name did not meet validation requirements.
//
#define PP_E_kErrorDbInvalidName         ((HRESULT)0xCFFFF9A1L)

//#define kErrorDbOnlyOneInstanceAllowed      -1632
// note on this one (constraint violation):
// best bet when getting this error code is to simply try again.
// happens on race condition with multi-master.
//
//
// MessageId: PP_E_kErrorDbOnlyOneInstanceAllowed
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbOnlyOneInstanceAllowed ((HRESULT)0xCFFFF9A0L)

//#define kErrorDbConstraintViolation         -1633
//
// MessageId: PP_E_kErrorDbConstraintViolation
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbConstraintViolation ((HRESULT)0xCFFFF99FL)

//#define kErrorDbInvalidInstance             -1634
//
// MessageId: PP_E_kErrorDbInvalidInstance
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbInvalidInstance     ((HRESULT)0xCFFFF99EL)

//#define kErrorDbInvalidAction               -1635
//
// MessageId: PP_E_kErrorDbInvalidAction
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbInvalidAction       ((HRESULT)0xCFFFF99DL)

//#define kErrorDbInvalidRelease              -5036
//
// MessageId: PP_E_kErrorDbInvalidRelease
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbInvalidRelease      ((HRESULT)0xCFFFEC54L)

//#define kErrorDbNoAllowInsertBuiltInObj     -1638
//
// MessageId: PP_E_kErrorDbNoAllowInsertBuiltInObj
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbNoAllowInsertBuiltInObj ((HRESULT)0xCFFFF99AL)

//#define kErrorDbNoAllowDeleteBuiltInObj     -1639
//
// MessageId: PP_E_kErrorDbNoAllowDeleteBuiltInObj
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbNoAllowDeleteBuiltInObj ((HRESULT)0xCFFFF999L)

//#define kErrorDbInvalidScopeID                -1602
//
// MessageId: PP_E_kErrorDbInvalidScopeID
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbInvalidScopeID      ((HRESULT)0xCFFFF9BEL)

//#define kErrorDbDuplicateScopeName            -1603
//
// MessageId: PP_E_kErrorDbDuplicateScopeName
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbDuplicateScopeName  ((HRESULT)0xCFFFF9BDL)

//#define kErrorDbCantUpdateScope               -1617
//
// MessageId: PP_E_kErrorDbCantUpdateScope
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbCantUpdateScope     ((HRESULT)0xCFFFF9AFL)

//#define kErrorDbEntityExistsAsScope           -1637
//
// MessageId: PP_E_kErrorDbEntityExistsAsScope
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbEntityExistsAsScope ((HRESULT)0xCFFFF99BL)

//#define kErrorDbMemberTypeNotAllowed          -1640
//
// MessageId: PP_E_kErrorDbMemberTypeNotAllowed
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbMemberTypeNotAllowed ((HRESULT)0xCFFFF998L)

//#define kErrorDbPropertyExists                -1641
//
// MessageId: PP_E_kErrorDbPropertyExists
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbPropertyExists      ((HRESULT)0xCFFFF997L)

//#define kErrorDbPropertyFailsInsertConditions -1642
//
// MessageId: PP_E_kErrorDbPropertyFailsInsertConditions
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbPropertyFailsInsertConditions ((HRESULT)0xCFFFF996L)

//#define kErrorDbRelationshipExists            -1643
//
// MessageId: PP_E_kErrorDbRelationshipExists
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbRelationshipExists  ((HRESULT)0xCFFFF995L)

//#define kErrorDbEntityExists                  -1644
//
// MessageId: PP_E_kErrorDbEntityExists
//
// MessageText:
//
//  The specified object already exists in the the Database.
//
#define PP_E_kErrorDbEntityExists        ((HRESULT)0xCFFFF994L)

//#define kErrorDbNamespaceIsNotActive          -1645
//
// MessageId: PP_E_kErrorDbNamespaceIsNotActive
//
// MessageText:
//
//  Database error (hr=%1), namespace is not active.
//
#define PP_E_kErrorDbNamespaceIsNotActive ((HRESULT)0xCFFFF993L)

//#define kErrorDbInvalidTargetID               -1646
//
// MessageId: PP_E_kErrorDbInvalidTargetID
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbInvalidTargetID     ((HRESULT)0xCFFFF992L)

//#define kErrorDbInvalidSourceID               -1647
//
// MessageId: PP_E_kErrorDbInvalidSourceID
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbInvalidSourceID     ((HRESULT)0xCFFFF991L)

//#define kErrorDbPropertyDoesNotExist          -1648
// could use below codes 6004-5 for cred bag db, but I don't want to have
// problem where we don't know what db the error code came from
//
// MessageId: PP_E_kErrorDbPropertyDoesNotExist
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbPropertyDoesNotExist ((HRESULT)0xCFFFF990L)

//#define kErrorDbGroupPropertyDatatypeMismatch    -1649
//
// MessageId: PP_E_kErrorDbGroupPropertyDatatypeMismatch
//
// MessageText:
//
//  Database error (hr=%1), invalid data type used for property value.
//
#define PP_E_kErrorDbGroupPropertyDatatypeMismatch ((HRESULT)0xCFFFF98FL)

//#define kErrorDbEntityDoesNotExist -5050
//
// MessageId: PP_E_kErrorDbEntityDoesNotExist
//
// MessageText:
//
//  Database error (hr=%1), record not found in database.
//
#define PP_E_kErrorDbEntityDoesNotExist  ((HRESULT)0xCFFFEC46L)

// GROUP UPPI ERRORS
//
// MessageId: PP_E_kErrorGroupInvalidActionType
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorGroupInvalidActionType ((HRESULT)0xCFFFF973L)

//
// MessageId: PP_E_kErrorGroupPropertyValueCannotChange
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorGroupPropertyValueCannotChange ((HRESULT)0xCFFFF972L)

//
// MessageId: PP_E_kErrorGroupInvalidInstance
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorGroupInvalidInstance  ((HRESULT)0xCFFFF971L)

//
// MessageId: PP_E_kErrorGroupNamespaceReleaseInternalError
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorGroupNamespaceReleaseInternalError ((HRESULT)0xCFFFF970L)

//
// MessageId: PP_E_kErrorGroupNamespaceReserveInternalError
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorGroupNamespaceReserveInternalError ((HRESULT)0xCFFFF96FL)

//
// MessageId: PP_E_kErrorGroupNamespaceIDAndNameMismatch
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorGroupNamespaceIDAndNameMismatch ((HRESULT)0xCFFFF96EL)

//
// MessageId: PP_E_kErrorGroupNamespaceNotManaged
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorGroupNamespaceNotManaged ((HRESULT)0xCFFFF96DL)

//
// MessageId: PP_E_kErrorGroupPropertyIDAndNameMismatch
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorGroupPropertyIDAndNameMismatch ((HRESULT)0xCFFFF96CL)

//
// MessageId: PP_E_kErrorGroupInvalidPropertyID
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorGroupInvalidPropertyID ((HRESULT)0xCFFFF96BL)

//
// MessageId: PP_E_kErrorGroupInvalidPropertyName
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorGroupInvalidPropertyName ((HRESULT)0xCFFFF96AL)

//
// MessageId: PP_E_kErrorGroupTooManyPropertiesInFilter
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorGroupTooManyPropertiesInFilter ((HRESULT)0xCFFFF969L)

//
// MessageId: PP_E_kErrorGroupSiteDeleteFailedInNSRelease
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorGroupSiteDeleteFailedInNSRelease ((HRESULT)0xCFFFF968L)

//
// MessageId: PP_E_kErrorGroupNSExistsAsInternallyManaged
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorGroupNSExistsAsInternallyManaged ((HRESULT)0xCFFFF967L)

//
// MessageId: PP_E_kErrorGroupInvalidSiteID
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorGroupInvalidSiteID    ((HRESULT)0xCFFFF966L)

//
// MessageId: PP_E_kErrorGroupInvalidScopeID
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorGroupInvalidScopeID   ((HRESULT)0xCFFFF965L)

//
// MessageId: PP_E_kErrorGroupSiteInsertFailedInNSReserve
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorGroupSiteInsertFailedInNSReserve ((HRESULT)0xCFFFF964L)

//
// MessageId: PP_E_kErrorGroupInvalidNamespaceName
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorGroupInvalidNamespaceName ((HRESULT)0xCFFFF963L)

//
// MessageId: PP_E_kErrorGroupInvalidHashError
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorGroupInvalidHashError ((HRESULT)0xCFFFF962L)

//
// MessageId: PP_E_kErrorNoNamespaceInCredName
//
// MessageText:
//
//  Member name has wrong email syntax and is invalid (hr=%1), please fix and try again.
//
#define PP_E_kErrorNoNamespaceInCredName ((HRESULT)0xCFFFF961L)

//
// MessageId: PP_E_kErrorGroupCacheInvalidInput
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorGroupCacheInvalidInput ((HRESULT)0xCFFFF960L)

//
// MessageId: PP_E_kErrorGroupCacheInternalError
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorGroupCacheInternalError ((HRESULT)0xCFFFF95FL)

//
// MessageId: PP_E_kErrorGroupCacheFetchError
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorGroupCacheFetchError  ((HRESULT)0xCFFFF95EL)

//
// MessageId: PP_E_kErrorGroupCacheLoadError
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorGroupCacheLoadError   ((HRESULT)0xCFFFF95DL)

//
// MessageId: PP_E_kErrorInternalNamespaceNotFound
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorInternalNamespaceNotFound ((HRESULT)0xCFFFF95BL)

//
// MessageId: PP_E_kErrorGroupInvalidAttributeID
//
// MessageText:
//
//  Call to Group cache used an unrecognized metadata attribute ID.
//
#define PP_E_kErrorGroupInvalidAttributeID ((HRESULT)0xCFFFF94FL)

// END OF GROUP UPPI ERRORS
//#define kErrorDbInvalidCredentialPropertyID     -6000
//
// MessageId: PP_E_kErrorDbInvalidCredentialPropertyID
//
// MessageText:
//
//  Database error (hr=%1), invalid property id.
//
#define PP_E_kErrorDbInvalidCredentialPropertyID ((HRESULT)0xCFFFE890L)

//#define kErrorDbInvalidCredentialSubPropertyID  -6001
//
// MessageId: PP_E_kErrorDbInvalidCredentialSubPropertyID
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbInvalidCredentialSubPropertyID ((HRESULT)0xCFFFE88FL)

//#define kErrorDbInvalidCredentialTypeAndPropertyIDCombination -6002
//
// MessageId: PP_E_kErrorDbInvalidCredentialTypeAndPropertyIDCombination
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbInvalidCredentialTypeAndPropertyIDCombination ((HRESULT)0xCFFFE88EL)

//#define kErrorDbBadPropertyReturnedFromDB       -6003
//
// MessageId: PP_E_kErrorDbBadPropertyReturnedFromDB
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbBadPropertyReturnedFromDB ((HRESULT)0xCFFFE88DL)

//#define kErrorDbVariantTypePropertyIDMismatch   -6004
//
// MessageId: PP_E_kErrorDbVariantTypePropertyIDMismatch
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbVariantTypePropertyIDMismatch ((HRESULT)0xCFFFE88CL)

//#define kErrorDbValidationFailure               -1700
//
// MessageId: PP_E_kErrorDbValidationFailure
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbValidationFailure   ((HRESULT)0xCFFFF95CL)

//#define kErrorDbNamespaceIsNotFederated         -1702
//
// MessageId: PP_E_kErrorDbNamespaceIsNotFederated
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbNamespaceIsNotFederated ((HRESULT)0xCFFFF95AL)

//#define kErrorDbStringExceedsMaxEncryptionLength
//
// MessageId: PP_E_kErrorDbStringExceedsMaxEncryptionLength
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbStringExceedsMaxEncryptionLength ((HRESULT)0xCFFFE88BL)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\PassportRPS\4.5.2135\inc\rps_i.c ===
/* this ALWAYS GENERATED file contains the IIDs and CLSIDs */

/* link this file in with the server and any clients */


 /* File created by MIDL compiler version 6.00.0366 */
/* Compiler settings for rps.idl:
    Oicf, W1, Zp8, env=Win64 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#pragma warning( disable: 4049 )  /* more than 64k source lines */


#ifdef __cplusplus
extern "C"{
#endif 


#include <rpc.h>
#include <rpcndr.h>

#ifdef _MIDL_USE_GUIDDEF_

#ifndef INITGUID
#define INITGUID
#include <guiddef.h>
#undef INITGUID
#else
#include <guiddef.h>
#endif

#define MIDL_DEFINE_GUID(type,name,l,w1,w2,b1,b2,b3,b4,b5,b6,b7,b8) \
        DEFINE_GUID(name,l,w1,w2,b1,b2,b3,b4,b5,b6,b7,b8)

#else // !_MIDL_USE_GUIDDEF_

#ifndef __IID_DEFINED__
#define __IID_DEFINED__

typedef struct _IID
{
    unsigned long x;
    unsigned short s1;
    unsigned short s2;
    unsigned char  c[8];
} IID;

#endif // __IID_DEFINED__

#ifndef CLSID_DEFINED
#define CLSID_DEFINED
typedef IID CLSID;
#endif // CLSID_DEFINED

#define MIDL_DEFINE_GUID(type,name,l,w1,w2,b1,b2,b3,b4,b5,b6,b7,b8) \
        const type name = {l,w1,w2,{b1,b2,b3,b4,b5,b6,b7,b8}}

#endif !_MIDL_USE_GUIDDEF_

MIDL_DEFINE_GUID(IID, IID_IRPS,0x01732744,0xd1a2,0x11d7,0x99,0xeb,0x50,0x50,0x54,0x50,0x30,0x30);


MIDL_DEFINE_GUID(IID, IID_IRPSNotify,0x01732745,0xd1a2,0x11d7,0x99,0xeb,0x50,0x50,0x54,0x50,0x30,0x30);


MIDL_DEFINE_GUID(IID, IID_IRPSComponent,0x01732746,0xd1a2,0x11d7,0x99,0xeb,0x50,0x50,0x54,0x50,0x30,0x30);


MIDL_DEFINE_GUID(IID, IID__IRPSPropBagEnum,0x01732751,0xd1a2,0x11d7,0x99,0xeb,0x50,0x50,0x54,0x50,0x30,0x30);


MIDL_DEFINE_GUID(IID, IID_IRPSPropBag,0x01732747,0xd1a2,0x11d7,0x99,0xeb,0x50,0x50,0x54,0x50,0x30,0x30);


MIDL_DEFINE_GUID(IID, IID_IRPSDomainMap,0x01732748,0xd1a2,0x11d7,0x99,0xeb,0x50,0x50,0x54,0x50,0x30,0x30);


MIDL_DEFINE_GUID(IID, IID_IRPSPKCrypt,0x01732749,0xd1a2,0x11d7,0x99,0xeb,0x50,0x50,0x54,0x50,0x30,0x30);


MIDL_DEFINE_GUID(IID, IID_IRPSCookieCrypt,0x0173274a,0xd1a2,0x11d7,0x99,0xeb,0x50,0x50,0x54,0x50,0x30,0x30);


MIDL_DEFINE_GUID(IID, IID_IRPSSiteCrypt,0x7aeafa0c,0xce51,0x4c3d,0x8d,0xe5,0x3a,0x09,0xff,0x37,0xd4,0xa5);


MIDL_DEFINE_GUID(IID, IID_IRPSDataCrypt_P,0x0173274c,0xd1a2,0x11d7,0x99,0xeb,0x50,0x50,0x54,0x50,0x30,0x30);


MIDL_DEFINE_GUID(IID, IID_IRPSPackData,0x01732752,0xd1a2,0x11d7,0x99,0xeb,0x50,0x50,0x54,0x50,0x30,0x30);


MIDL_DEFINE_GUID(IID, IID_IRPSTicket,0x0173274d,0xd1a2,0x11d7,0x99,0xeb,0x50,0x50,0x54,0x50,0x30,0x30);


MIDL_DEFINE_GUID(IID, IID_IRPSTicket2,0x86844cae,0x6483,0x480e,0x81,0x1a,0xfe,0x67,0xb9,0x84,0x6f,0x4d);


MIDL_DEFINE_GUID(IID, IID_IRPSSessionTokenGen,0x0173274e,0xd1a2,0x11d7,0x99,0xeb,0x50,0x50,0x54,0x50,0x30,0x30);


MIDL_DEFINE_GUID(IID, IID_IRPSAuth,0x0173274f,0xd1a2,0x11d7,0x99,0xeb,0x50,0x50,0x54,0x50,0x30,0x30);


MIDL_DEFINE_GUID(IID, IID_IRPSEventLog,0xed7db9c6,0xec60,0x4f7d,0x9c,0xe3,0x63,0xbb,0x1d,0xb5,0x3d,0x42);


MIDL_DEFINE_GUID(IID, IID_IRPSHttpAuth,0x01732750,0xd1a2,0x11d7,0x99,0xeb,0x50,0x50,0x54,0x50,0x30,0x30);


MIDL_DEFINE_GUID(IID, IID_IRPSConfigInfo,0x35B6CEB7,0x402F,0x4564,0xA3,0xDF,0xD2,0x44,0x75,0x88,0x70,0xAD);


MIDL_DEFINE_GUID(IID, LIBID_RPS,0x01732743,0xd1a2,0x11d7,0x99,0xeb,0x50,0x50,0x54,0x50,0x30,0x30);


MIDL_DEFINE_GUID(CLSID, CLSID_RPS,0x01732742,0xd1a2,0x11d7,0x99,0xeb,0x50,0x50,0x54,0x50,0x30,0x30);


MIDL_DEFINE_GUID(CLSID, CLSID_RPSConfigInfo,0xDC6EF879,0x37CE,0x44E3,0x88,0x37,0x5C,0x79,0xD8,0x84,0x28,0x32);

#undef MIDL_DEFINE_GUID

#ifdef __cplusplus
}
#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\PassportRPS\4.5.2135\inc\rps.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 6.00.0366 */
/* Compiler settings for rps.idl:
    Oicf, W1, Zp8, env=Win64 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __rps_h__
#define __rps_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IRPS_FWD_DEFINED__
#define __IRPS_FWD_DEFINED__
typedef interface IRPS IRPS;
#endif 	/* __IRPS_FWD_DEFINED__ */


#ifndef __IRPSNotify_FWD_DEFINED__
#define __IRPSNotify_FWD_DEFINED__
typedef interface IRPSNotify IRPSNotify;
#endif 	/* __IRPSNotify_FWD_DEFINED__ */


#ifndef __IRPSComponent_FWD_DEFINED__
#define __IRPSComponent_FWD_DEFINED__
typedef interface IRPSComponent IRPSComponent;
#endif 	/* __IRPSComponent_FWD_DEFINED__ */


#ifndef ___IRPSPropBagEnum_FWD_DEFINED__
#define ___IRPSPropBagEnum_FWD_DEFINED__
typedef interface _IRPSPropBagEnum _IRPSPropBagEnum;
#endif 	/* ___IRPSPropBagEnum_FWD_DEFINED__ */


#ifndef __IRPSPropBag_FWD_DEFINED__
#define __IRPSPropBag_FWD_DEFINED__
typedef interface IRPSPropBag IRPSPropBag;
#endif 	/* __IRPSPropBag_FWD_DEFINED__ */


#ifndef __IRPSDomainMap_FWD_DEFINED__
#define __IRPSDomainMap_FWD_DEFINED__
typedef interface IRPSDomainMap IRPSDomainMap;
#endif 	/* __IRPSDomainMap_FWD_DEFINED__ */


#ifndef __IRPSPKCrypt_FWD_DEFINED__
#define __IRPSPKCrypt_FWD_DEFINED__
typedef interface IRPSPKCrypt IRPSPKCrypt;
#endif 	/* __IRPSPKCrypt_FWD_DEFINED__ */


#ifndef __IRPSCookieCrypt_FWD_DEFINED__
#define __IRPSCookieCrypt_FWD_DEFINED__
typedef interface IRPSCookieCrypt IRPSCookieCrypt;
#endif 	/* __IRPSCookieCrypt_FWD_DEFINED__ */


#ifndef __IRPSSiteCrypt_FWD_DEFINED__
#define __IRPSSiteCrypt_FWD_DEFINED__
typedef interface IRPSSiteCrypt IRPSSiteCrypt;
#endif 	/* __IRPSSiteCrypt_FWD_DEFINED__ */


#ifndef __IRPSDataCrypt_P_FWD_DEFINED__
#define __IRPSDataCrypt_P_FWD_DEFINED__
typedef interface IRPSDataCrypt_P IRPSDataCrypt_P;
#endif 	/* __IRPSDataCrypt_P_FWD_DEFINED__ */


#ifndef __IRPSPackData_FWD_DEFINED__
#define __IRPSPackData_FWD_DEFINED__
typedef interface IRPSPackData IRPSPackData;
#endif 	/* __IRPSPackData_FWD_DEFINED__ */


#ifndef __IRPSTicket_FWD_DEFINED__
#define __IRPSTicket_FWD_DEFINED__
typedef interface IRPSTicket IRPSTicket;
#endif 	/* __IRPSTicket_FWD_DEFINED__ */


#ifndef __IRPSTicket2_FWD_DEFINED__
#define __IRPSTicket2_FWD_DEFINED__
typedef interface IRPSTicket2 IRPSTicket2;
#endif 	/* __IRPSTicket2_FWD_DEFINED__ */


#ifndef __IRPSSessionTokenGen_FWD_DEFINED__
#define __IRPSSessionTokenGen_FWD_DEFINED__
typedef interface IRPSSessionTokenGen IRPSSessionTokenGen;
#endif 	/* __IRPSSessionTokenGen_FWD_DEFINED__ */


#ifndef __IRPSAuth_FWD_DEFINED__
#define __IRPSAuth_FWD_DEFINED__
typedef interface IRPSAuth IRPSAuth;
#endif 	/* __IRPSAuth_FWD_DEFINED__ */


#ifndef __IRPSEventLog_FWD_DEFINED__
#define __IRPSEventLog_FWD_DEFINED__
typedef interface IRPSEventLog IRPSEventLog;
#endif 	/* __IRPSEventLog_FWD_DEFINED__ */


#ifndef __IRPSHttpAuth_FWD_DEFINED__
#define __IRPSHttpAuth_FWD_DEFINED__
typedef interface IRPSHttpAuth IRPSHttpAuth;
#endif 	/* __IRPSHttpAuth_FWD_DEFINED__ */


#ifndef __IRPSConfigInfo_FWD_DEFINED__
#define __IRPSConfigInfo_FWD_DEFINED__
typedef interface IRPSConfigInfo IRPSConfigInfo;
#endif 	/* __IRPSConfigInfo_FWD_DEFINED__ */


#ifndef __IRPS_FWD_DEFINED__
#define __IRPS_FWD_DEFINED__
typedef interface IRPS IRPS;
#endif 	/* __IRPS_FWD_DEFINED__ */


#ifndef __IRPSTicket_FWD_DEFINED__
#define __IRPSTicket_FWD_DEFINED__
typedef interface IRPSTicket IRPSTicket;
#endif 	/* __IRPSTicket_FWD_DEFINED__ */


#ifndef __IRPSTicket2_FWD_DEFINED__
#define __IRPSTicket2_FWD_DEFINED__
typedef interface IRPSTicket2 IRPSTicket2;
#endif 	/* __IRPSTicket2_FWD_DEFINED__ */


#ifndef __IRPSSiteCrypt_FWD_DEFINED__
#define __IRPSSiteCrypt_FWD_DEFINED__
typedef interface IRPSSiteCrypt IRPSSiteCrypt;
#endif 	/* __IRPSSiteCrypt_FWD_DEFINED__ */


#ifndef __IRPSAuth_FWD_DEFINED__
#define __IRPSAuth_FWD_DEFINED__
typedef interface IRPSAuth IRPSAuth;
#endif 	/* __IRPSAuth_FWD_DEFINED__ */


#ifndef __IRPSHttpAuth_FWD_DEFINED__
#define __IRPSHttpAuth_FWD_DEFINED__
typedef interface IRPSHttpAuth IRPSHttpAuth;
#endif 	/* __IRPSHttpAuth_FWD_DEFINED__ */


#ifndef __IRPSPropBag_FWD_DEFINED__
#define __IRPSPropBag_FWD_DEFINED__
typedef interface IRPSPropBag IRPSPropBag;
#endif 	/* __IRPSPropBag_FWD_DEFINED__ */


#ifndef __IRPSDomainMap_FWD_DEFINED__
#define __IRPSDomainMap_FWD_DEFINED__
typedef interface IRPSDomainMap IRPSDomainMap;
#endif 	/* __IRPSDomainMap_FWD_DEFINED__ */


#ifndef __IRPSPackData_FWD_DEFINED__
#define __IRPSPackData_FWD_DEFINED__
typedef interface IRPSPackData IRPSPackData;
#endif 	/* __IRPSPackData_FWD_DEFINED__ */


#ifndef __IRPSSessionTokenGen_FWD_DEFINED__
#define __IRPSSessionTokenGen_FWD_DEFINED__
typedef interface IRPSSessionTokenGen IRPSSessionTokenGen;
#endif 	/* __IRPSSessionTokenGen_FWD_DEFINED__ */


#ifndef __IRPSEventLog_FWD_DEFINED__
#define __IRPSEventLog_FWD_DEFINED__
typedef interface IRPSEventLog IRPSEventLog;
#endif 	/* __IRPSEventLog_FWD_DEFINED__ */


#ifndef __RPS_FWD_DEFINED__
#define __RPS_FWD_DEFINED__

#ifdef __cplusplus
typedef class RPS RPS;
#else
typedef struct RPS RPS;
#endif /* __cplusplus */

#endif 	/* __RPS_FWD_DEFINED__ */


#ifndef __RPSConfigInfo_FWD_DEFINED__
#define __RPSConfigInfo_FWD_DEFINED__

#ifdef __cplusplus
typedef class RPSConfigInfo RPSConfigInfo;
#else
typedef struct RPSConfigInfo RPSConfigInfo;
#endif /* __cplusplus */

#endif 	/* __RPSConfigInfo_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "ocidl.h"

#ifdef __cplusplus
extern "C"{
#endif 

void * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void * ); 

/* interface __MIDL_itf_rps_0000 */
/* [local] */ 

//  object - Names
//  internal
const CComBSTR ObjectName_RPS_EventLog              = L"rps.eventlog";
//  
//  public
const CComBSTR ObjectName_RPS_Server_Config         = L"rps.server.config";
//  public
const CComBSTR ObjectName_RPS_Property_Bag          = L"rps.property.bag";
//  public
const CComBSTR ObjectName_RPS_Net_DomainMap         = L"rps.net.domainmap";
//  internal
const CComBSTR ObjectName_RPS_Net_DataSchema        = L"rps.net.dataschema";
//  internal
const CComBSTR ObjectName_RPS_Net_ProfileSchema     = L"rps.net.profileschema";
//  internal
const CComBSTR ObjectName_RPS_Cookie_Crypt          = L"rps.cookie.crypt";
//  public
const CComBSTR ObjectName_RPS_Site_Crypt            = L"rps.site.crypt";
//  internal
const CComBSTR ObjectName_RPS_PK_Crypt_Partner      = L"rps.pk.crypt.partner";
//  internal
const CComBSTR ObjectName_RPS_PK_Crypt_Login        = L"rps.pk.crypt.Login";
//  internal
const CComBSTR ObjectName_RPS_PK_Crypt_Other        = L"rps.pk.crypt.Other";
//  public
const CComBSTR ObjectName_RPS_Data_Object           = L"rps.data.object";
//  public
const CComBSTR ObjectName_RPS_Auth                  = L"rps.auth";
const CComBSTR ObjectName_RPS_Http_Auth             = L"rps.http.auth";
const CComBSTR ObjectName_RPS_WebSSO_Ticket         = L"rps.websso.ticket";
const CComBSTR ObjectName_RPS_Compact_Ticket        = L"rps.compact.ticket";
const CComBSTR ObjectName_RPS_Auth_Cookie           = L"rps.auth.cookie";
const CComBSTR ObjectName_RPS_SecAuth_Cookie        = L"rps.secauth.cookie";
//  internal
const CComBSTR ObjectName_RPS_Auth_Cookie_Maker     = L"rps.auth.cookie.creator";
//  RPS ticket common Fields
const CComBSTR Ticket_Property_MemberIdLow          = L"MemberIdLow";
const CComBSTR Ticket_Property_MemberIdHigh         = L"MemberIdHigh";
const CComBSTR Ticket_Property_IssueInstant         = L"IssueInstant";
const CComBSTR Ticket_Property_AuthInstant          = L"AuthInstant";
const CComBSTR Ticket_Property_AuthMethod           = L"AuthMethod";
const CComBSTR Ticket_Property_AuthFlags            = L"AuthFlags";
const CComBSTR Ticket_Property_CIdLow               = L"CIdLow";
const CComBSTR Ticket_Property_CIdHigh              = L"CIdHigh";
const CComBSTR Ticket_Property_HexCId               = L"HexCId";
const CComBSTR Ticket_Property_Membername           = L"Membername";
const CComBSTR Ticket_Property_Profile              = L"Profile";
const CComBSTR Ticket_Property_SessionKey           = L"SessionKey";
const CComBSTR Ticket_Property_EncryptedSessionKey  = L"Base64EncodedEncryptedSessionKey";
const CComBSTR Ticket_Property_HexPUID              = L"HexPUID";
const CComBSTR Ticket_Property_Audience             = L"Audience";
const CComBSTR Ticket_Property_NotBefore            = L"NotBefore";
const CComBSTR Ticket_Property_NotAfter             = L"NotAfter";
const CComBSTR Ticket_Property_LinkIdLow            = L"LinkIdLow";
const CComBSTR Ticket_Property_LinkIdHigh           = L"LinkIdHigh";
const CComBSTR Ticket_Property_LinkIdTimeStamp      = L"LinkIdTimeStamp";
//  RPS WEBSSO ticket special Fields
const CComBSTR Ticket_Property_Issuer               = L"Issuer";
const CComBSTR Ticket_Property_AssertionID          = L"AssertionID";
const CComBSTR Ticket_Property_AuthMethodStr        = L"AuthMethodStr";
const CComBSTR Ticket_Property_NameIdentifier       = L"NameIdentifier";
//  RPS Compact Ticket special Fields
const CComBSTR Ticket_Property_TargetId             = L"TargetId";
//  RPS Cookie special Fields
const CComBSTR Ticket_Property_CookieInstant        = L"CookieInstant";
const CComBSTR Ticket_Property_CookieFlags          = L"CookieFlags";
const CComBSTR Ticket_Property_TicketType           = L"TicketType";
//  PPM ticket fields, added for RPS migration. See Windows Live bug 328439
const CComBSTR Ticket_Property_SavePassword            = L"SavePassword";
const CComBSTR Ticket_Property_AuthenticationInstant   = L"AuthenticationInstant";
const CComBSTR Ticket_Property_SecureLevel             = L"SecureLevel";
const CComBSTR Ticket_Property_DATicketTime            = L"DATicketTime";
const CComBSTR Ticket_Property_SignInTime              = L"SignInTime";
const CComBSTR Ticket_Property_PartnerTicketTime       = L"PartnerTicketTime";
const CComBSTR Ticket_Property_NetworkFlags            = L"NetworkFlags";
const CComBSTR Ticket_Property_DA_Skew                 = L"DA_Skew";
const CComBSTR Ticket_Property_CredInfo                = L"CredInfo";
const CComBSTR Ticket_Property_PassportFlags           = L"PassportFlags";
const CComBSTR Ticket_Property_PinTime                 = L"PinTime";
typedef /* [public][v1_enum] */ 
enum __MIDL___MIDL_itf_rps_0000_0001
    {	RPS_CHANGE_SERVER_CONFIG	= 0x1,
	RPS_CHANGE_NET_CONFIG	= 0x2,
	RPS_CHANGE_SERVER_CERTS	= 0x3
    } 	RPS_CHANGE_NOTIFICATION_TYPE;

const CComBSTR RPS_CHANGE_NOTIFY_COMP_NAME    = L"RPS change notification";
#define	RPS_CHANGE_NOTIFY_FLAG_FAILED	( 0x1 )

//  RPS object ID, used when writing custom component
typedef /* [public][v1_enum] */ 
enum __MIDL___MIDL_itf_rps_0000_0002
    {	RPS_OBJ_ID_EVENT	= 0x1,
	RPS_OBJ_ID_SERVERCONFIG	= 0x2,
	RPS_OBJ_ID_DOMAINMAP	= 0x3,
	RPS_OBJ_ID_DATASCHEMA	= 0x4,
	RPS_OBJ_ID_PPCERTSTORE	= 0x5,
	RPS_OBJ_ID_PARTNERCERTSTORE	= 0x6,
	RPS_OBJ_ID_SERVERCONFIGCACHE	= 0x8,
	RPS_OBJ_ID_NETCONFIGCACHE	= 0x9,
	RPS_OBJ_ID_PROFILESCHEMA	= 0xa,
	RPS_OBJ_ID_COOKIECRYPT	= 0x20,
	RPS_OBJ_ID_PKCRYPT_PARTNER	= 0x21,
	RPS_OBJ_ID_PKCRYPT_LOGIN	= 0x22,
	RPS_OBJ_ID_PKCRYPT_OTHER	= 0x23,
	RPS_OBJ_ID_PROPERTYBAG	= 0x24,
	RPS_OBJ_ID_DATACRYPT	= 0x25,
	RPS_OBJ_ID_DATACRYPT_INTERNAL	= 0x26,
	RPS_OBJ_ID_LOGIN_CERTCACHE	= 0x27,
	RPS_OBJ_ID_OTHER_CERTCACHE	= 0x28,
	RPS_OBJ_ID_PARTNER_CERTCACHE	= 0x29,
	RPS_OBJ_ID_PKCRYPT_SERVER	= 0x2a,
	RPS_OBJ_ID_SITECRYPT	= 0x2b,
	RPS_OBJ_ID_AUTH	= 0x40,
	RPS_OBJ_ID_HTTPAUTH	= 0x42,
	RPS_OBJ_ID_RPSAUTHCOOKIE	= 0x60,
	RPS_OBJ_ID_RPSCOOKIE_GEN	= 0x61,
	RPS_OBJ_ID_COMPACTTICKET	= 0x62,
	RPS_OBJ_ID_WEBSSOTICKET	= 0x63,
	RPS_OBJ_ID_RPSSECAUTHCOOKIE	= 0x64,
	RPS_OBJ_ID_PPM	= 0x65
    } 	RPS_OBJECT_ID;

//  min & max for time window
#define	RPS_TIMEWINDOW_MIN	( 20 )

#define	RPS_TIMEWINDOW_MAX	( 91 * 24 * 60 * 60 )

//  min session key cache size
#define	MIN_RPS_SESSION_KEY_CACHE_SIZE	( 600 )

//  min post ticket timewindow
#define	MIN_POST_TICKET_TIMEWINDOW	( 5 )

//  session key cache method enum
typedef /* [public][v1_enum] */ 
enum __MIDL___MIDL_itf_rps_0000_0003
    {	RPS_CACHE_METHOD_EVICT_OLD_CACHE	= 0,
	RPS_CACHE_METHOD_CLEAR_ALL	= 1,
	RPS_CACHE_METHOD_NONE	= 2,
	RPS_CACHE_METHOD_MAX	= RPS_CACHE_METHOD_NONE
    } 	RPS_SessionKeyCache_Method;

//  ticket type enum
typedef /* [public][v1_enum] */ 
enum __MIDL___MIDL_itf_rps_0000_0004
    {	Ticket_Type_None	= 0,
	Ticket_Type_WebSSO	= 1,
	Ticket_Type_Compact	= 2,
	Ticket_Type_RPSAuth	= 3,
	Ticket_Type_RPSSecAuth	= 4,
	Ticket_Type_PPM	= 5
    } 	RPS_Ticket_Type;



extern RPC_IF_HANDLE __MIDL_itf_rps_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_rps_0000_v0_0_s_ifspec;

#ifndef __IRPS_INTERFACE_DEFINED__
#define __IRPS_INTERFACE_DEFINED__

/* interface IRPS */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IRPS;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("01732744-d1a2-11d7-99eb-505054503030")
    IRPS : public IDispatch
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Initialize( 
            /* [in] */ BSTR bstrReserved) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetObject( 
            /* [in] */ BSTR objectName,
            /* [retval][out] */ IDispatch **ppComp) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Shutdown( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRPSVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRPS * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRPS * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRPS * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IRPS * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IRPS * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IRPS * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IRPS * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Initialize )( 
            IRPS * This,
            /* [in] */ BSTR bstrReserved);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetObject )( 
            IRPS * This,
            /* [in] */ BSTR objectName,
            /* [retval][out] */ IDispatch **ppComp);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Shutdown )( 
            IRPS * This);
        
        END_INTERFACE
    } IRPSVtbl;

    interface IRPS
    {
        CONST_VTBL struct IRPSVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRPS_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IRPS_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IRPS_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IRPS_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IRPS_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IRPS_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IRPS_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IRPS_Initialize(This,bstrReserved)	\
    (This)->lpVtbl -> Initialize(This,bstrReserved)

#define IRPS_GetObject(This,objectName,ppComp)	\
    (This)->lpVtbl -> GetObject(This,objectName,ppComp)

#define IRPS_Shutdown(This)	\
    (This)->lpVtbl -> Shutdown(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IRPS_Initialize_Proxy( 
    IRPS * This,
    /* [in] */ BSTR bstrReserved);


void __RPC_STUB IRPS_Initialize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IRPS_GetObject_Proxy( 
    IRPS * This,
    /* [in] */ BSTR objectName,
    /* [retval][out] */ IDispatch **ppComp);


void __RPC_STUB IRPS_GetObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IRPS_Shutdown_Proxy( 
    IRPS * This);


void __RPC_STUB IRPS_Shutdown_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IRPS_INTERFACE_DEFINED__ */


#ifndef __IRPSNotify_INTERFACE_DEFINED__
#define __IRPSNotify_INTERFACE_DEFINED__

/* interface IRPSNotify */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IRPSNotify;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("01732745-d1a2-11d7-99eb-505054503030")
    IRPSNotify : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE OnChanged( 
            /* [in] */ LPCWSTR compName,
            /* [in] */ DWORD dwConfigId) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRPSNotifyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRPSNotify * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRPSNotify * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRPSNotify * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *OnChanged )( 
            IRPSNotify * This,
            /* [in] */ LPCWSTR compName,
            /* [in] */ DWORD dwConfigId);
        
        END_INTERFACE
    } IRPSNotifyVtbl;

    interface IRPSNotify
    {
        CONST_VTBL struct IRPSNotifyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRPSNotify_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IRPSNotify_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IRPSNotify_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IRPSNotify_OnChanged(This,compName,dwConfigId)	\
    (This)->lpVtbl -> OnChanged(This,compName,dwConfigId)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring] */ HRESULT STDMETHODCALLTYPE IRPSNotify_OnChanged_Proxy( 
    IRPSNotify * This,
    /* [in] */ LPCWSTR compName,
    /* [in] */ DWORD dwConfigId);


void __RPC_STUB IRPSNotify_OnChanged_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IRPSNotify_INTERFACE_DEFINED__ */


#ifndef __IRPSComponent_INTERFACE_DEFINED__
#define __IRPSComponent_INTERFACE_DEFINED__

/* interface IRPSComponent */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IRPSComponent;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("01732746-d1a2-11d7-99eb-505054503030")
    IRPSComponent : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Initialize( 
            /* [in] */ IRPS *pRPS,
            /* [in] */ LPCWSTR pwszConfigDir,
            /* [in] */ IRPSNotify *pChangeNotify) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE OnChanged( 
            /* [in] */ IRPS *pRPS,
            /* [in] */ DWORD dwConfigId,
            /* [in] */ DWORD dwFlags) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetObjectByID( 
            /* [in] */ DWORD dwObjectId,
            /* [retval][out] */ IUnknown **ppObj) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Shutdown( 
            /* [in] */ IRPS *pRPS) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRPSComponentVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRPSComponent * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRPSComponent * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRPSComponent * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Initialize )( 
            IRPSComponent * This,
            /* [in] */ IRPS *pRPS,
            /* [in] */ LPCWSTR pwszConfigDir,
            /* [in] */ IRPSNotify *pChangeNotify);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *OnChanged )( 
            IRPSComponent * This,
            /* [in] */ IRPS *pRPS,
            /* [in] */ DWORD dwConfigId,
            /* [in] */ DWORD dwFlags);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetObjectByID )( 
            IRPSComponent * This,
            /* [in] */ DWORD dwObjectId,
            /* [retval][out] */ IUnknown **ppObj);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Shutdown )( 
            IRPSComponent * This,
            /* [in] */ IRPS *pRPS);
        
        END_INTERFACE
    } IRPSComponentVtbl;

    interface IRPSComponent
    {
        CONST_VTBL struct IRPSComponentVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRPSComponent_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IRPSComponent_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IRPSComponent_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IRPSComponent_Initialize(This,pRPS,pwszConfigDir,pChangeNotify)	\
    (This)->lpVtbl -> Initialize(This,pRPS,pwszConfigDir,pChangeNotify)

#define IRPSComponent_OnChanged(This,pRPS,dwConfigId,dwFlags)	\
    (This)->lpVtbl -> OnChanged(This,pRPS,dwConfigId,dwFlags)

#define IRPSComponent_GetObjectByID(This,dwObjectId,ppObj)	\
    (This)->lpVtbl -> GetObjectByID(This,dwObjectId,ppObj)

#define IRPSComponent_Shutdown(This,pRPS)	\
    (This)->lpVtbl -> Shutdown(This,pRPS)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring] */ HRESULT STDMETHODCALLTYPE IRPSComponent_Initialize_Proxy( 
    IRPSComponent * This,
    /* [in] */ IRPS *pRPS,
    /* [in] */ LPCWSTR pwszConfigDir,
    /* [in] */ IRPSNotify *pChangeNotify);


void __RPC_STUB IRPSComponent_Initialize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IRPSComponent_OnChanged_Proxy( 
    IRPSComponent * This,
    /* [in] */ IRPS *pRPS,
    /* [in] */ DWORD dwConfigId,
    /* [in] */ DWORD dwFlags);


void __RPC_STUB IRPSComponent_OnChanged_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IRPSComponent_GetObjectByID_Proxy( 
    IRPSComponent * This,
    /* [in] */ DWORD dwObjectId,
    /* [retval][out] */ IUnknown **ppObj);


void __RPC_STUB IRPSComponent_GetObjectByID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IRPSComponent_Shutdown_Proxy( 
    IRPSComponent * This,
    /* [in] */ IRPS *pRPS);


void __RPC_STUB IRPSComponent_Shutdown_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IRPSComponent_INTERFACE_DEFINED__ */


#ifndef ___IRPSPropBagEnum_INTERFACE_DEFINED__
#define ___IRPSPropBagEnum_INTERFACE_DEFINED__

/* interface _IRPSPropBagEnum */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID__IRPSPropBagEnum;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("01732751-d1a2-11d7-99eb-505054503030")
    _IRPSPropBagEnum : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetStartPos( 
            /* [retval][out] */ BYTE **pos) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetNameValuePair( 
            /* [out][in] */ BYTE **pos,
            /* [out] */ LPWSTR *ppName,
            /* [out] */ VARIANT **ppvValue) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _IRPSPropBagEnumVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _IRPSPropBagEnum * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _IRPSPropBagEnum * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _IRPSPropBagEnum * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetStartPos )( 
            _IRPSPropBagEnum * This,
            /* [retval][out] */ BYTE **pos);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetNameValuePair )( 
            _IRPSPropBagEnum * This,
            /* [out][in] */ BYTE **pos,
            /* [out] */ LPWSTR *ppName,
            /* [out] */ VARIANT **ppvValue);
        
        END_INTERFACE
    } _IRPSPropBagEnumVtbl;

    interface _IRPSPropBagEnum
    {
        CONST_VTBL struct _IRPSPropBagEnumVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _IRPSPropBagEnum_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _IRPSPropBagEnum_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _IRPSPropBagEnum_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _IRPSPropBagEnum_GetStartPos(This,pos)	\
    (This)->lpVtbl -> GetStartPos(This,pos)

#define _IRPSPropBagEnum_GetNameValuePair(This,pos,ppName,ppvValue)	\
    (This)->lpVtbl -> GetNameValuePair(This,pos,ppName,ppvValue)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring] */ HRESULT STDMETHODCALLTYPE _IRPSPropBagEnum_GetStartPos_Proxy( 
    _IRPSPropBagEnum * This,
    /* [retval][out] */ BYTE **pos);


void __RPC_STUB _IRPSPropBagEnum_GetStartPos_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE _IRPSPropBagEnum_GetNameValuePair_Proxy( 
    _IRPSPropBagEnum * This,
    /* [out][in] */ BYTE **pos,
    /* [out] */ LPWSTR *ppName,
    /* [out] */ VARIANT **ppvValue);


void __RPC_STUB _IRPSPropBagEnum_GetNameValuePair_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* ___IRPSPropBagEnum_INTERFACE_DEFINED__ */


#ifndef __IRPSPropBag_INTERFACE_DEFINED__
#define __IRPSPropBag_INTERFACE_DEFINED__

/* interface IRPSPropBag */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IRPSPropBag;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("01732747-d1a2-11d7-99eb-505054503030")
    IRPSPropBag : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Names( 
            /* [retval][out] */ VARIANT *pArrayVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetValue( 
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvValue) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetValue( 
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vValue) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RemoveAll( void) = 0;
        
        virtual /* [helpstring][hidden][id] */ HRESULT STDMETHODCALLTYPE _GetEnum( 
            _IRPSPropBagEnum **ppEnum) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRPSPropBagVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRPSPropBag * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRPSPropBag * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRPSPropBag * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IRPSPropBag * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IRPSPropBag * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IRPSPropBag * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IRPSPropBag * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Names )( 
            IRPSPropBag * This,
            /* [retval][out] */ VARIANT *pArrayVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetValue )( 
            IRPSPropBag * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetValue )( 
            IRPSPropBag * This,
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveAll )( 
            IRPSPropBag * This);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *_GetEnum )( 
            IRPSPropBag * This,
            _IRPSPropBagEnum **ppEnum);
        
        END_INTERFACE
    } IRPSPropBagVtbl;

    interface IRPSPropBag
    {
        CONST_VTBL struct IRPSPropBagVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRPSPropBag_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IRPSPropBag_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IRPSPropBag_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IRPSPropBag_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IRPSPropBag_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IRPSPropBag_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IRPSPropBag_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IRPSPropBag_get_Names(This,pArrayVal)	\
    (This)->lpVtbl -> get_Names(This,pArrayVal)

#define IRPSPropBag_GetValue(This,bstrName,pvValue)	\
    (This)->lpVtbl -> GetValue(This,bstrName,pvValue)

#define IRPSPropBag_SetValue(This,bstrName,vValue)	\
    (This)->lpVtbl -> SetValue(This,bstrName,vValue)

#define IRPSPropBag_RemoveAll(This)	\
    (This)->lpVtbl -> RemoveAll(This)

#define IRPSPropBag__GetEnum(This,ppEnum)	\
    (This)->lpVtbl -> _GetEnum(This,ppEnum)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE IRPSPropBag_get_Names_Proxy( 
    IRPSPropBag * This,
    /* [retval][out] */ VARIANT *pArrayVal);


void __RPC_STUB IRPSPropBag_get_Names_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IRPSPropBag_GetValue_Proxy( 
    IRPSPropBag * This,
    /* [in] */ BSTR bstrName,
    /* [retval][out] */ VARIANT *pvValue);


void __RPC_STUB IRPSPropBag_GetValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IRPSPropBag_SetValue_Proxy( 
    IRPSPropBag * This,
    /* [in] */ BSTR bstrName,
    /* [in] */ VARIANT vValue);


void __RPC_STUB IRPSPropBag_SetValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IRPSPropBag_RemoveAll_Proxy( 
    IRPSPropBag * This);


void __RPC_STUB IRPSPropBag_RemoveAll_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][hidden][id] */ HRESULT STDMETHODCALLTYPE IRPSPropBag__GetEnum_Proxy( 
    IRPSPropBag * This,
    _IRPSPropBagEnum **ppEnum);


void __RPC_STUB IRPSPropBag__GetEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IRPSPropBag_INTERFACE_DEFINED__ */


#ifndef __IRPSDomainMap_INTERFACE_DEFINED__
#define __IRPSDomainMap_INTERFACE_DEFINED__

/* interface IRPSDomainMap */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IRPSDomainMap;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("01732748-d1a2-11d7-99eb-505054503030")
    IRPSDomainMap : public IDispatch
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetDomainAttribute( 
            /* [in] */ BSTR attributeName,
            /* [in] */ DWORD lcid,
            /* [in] */ BSTR domain,
            /* [retval][out] */ BSTR *pAttrVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Domains( 
            /* [retval][out] */ VARIANT *pArrayVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE DomainExists( 
            /* [in] */ BSTR domainName,
            /* [retval][out] */ VARIANT_BOOL *pbExists) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ConstructURL( 
            /* [in] */ BSTR bstrAttrName,
            /* [in] */ BSTR bstrSiteName,
            /* [in] */ BSTR bstrDomain,
            /* [in] */ IRPSPropBag *pParametersInBag,
            /* [retval][out] */ BSTR *pbstrURL) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRPSDomainMapVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRPSDomainMap * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRPSDomainMap * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRPSDomainMap * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IRPSDomainMap * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IRPSDomainMap * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IRPSDomainMap * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IRPSDomainMap * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetDomainAttribute )( 
            IRPSDomainMap * This,
            /* [in] */ BSTR attributeName,
            /* [in] */ DWORD lcid,
            /* [in] */ BSTR domain,
            /* [retval][out] */ BSTR *pAttrVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Domains )( 
            IRPSDomainMap * This,
            /* [retval][out] */ VARIANT *pArrayVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *DomainExists )( 
            IRPSDomainMap * This,
            /* [in] */ BSTR domainName,
            /* [retval][out] */ VARIANT_BOOL *pbExists);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ConstructURL )( 
            IRPSDomainMap * This,
            /* [in] */ BSTR bstrAttrName,
            /* [in] */ BSTR bstrSiteName,
            /* [in] */ BSTR bstrDomain,
            /* [in] */ IRPSPropBag *pParametersInBag,
            /* [retval][out] */ BSTR *pbstrURL);
        
        END_INTERFACE
    } IRPSDomainMapVtbl;

    interface IRPSDomainMap
    {
        CONST_VTBL struct IRPSDomainMapVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRPSDomainMap_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IRPSDomainMap_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IRPSDomainMap_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IRPSDomainMap_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IRPSDomainMap_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IRPSDomainMap_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IRPSDomainMap_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IRPSDomainMap_GetDomainAttribute(This,attributeName,lcid,domain,pAttrVal)	\
    (This)->lpVtbl -> GetDomainAttribute(This,attributeName,lcid,domain,pAttrVal)

#define IRPSDomainMap_get_Domains(This,pArrayVal)	\
    (This)->lpVtbl -> get_Domains(This,pArrayVal)

#define IRPSDomainMap_DomainExists(This,domainName,pbExists)	\
    (This)->lpVtbl -> DomainExists(This,domainName,pbExists)

#define IRPSDomainMap_ConstructURL(This,bstrAttrName,bstrSiteName,bstrDomain,pParametersInBag,pbstrURL)	\
    (This)->lpVtbl -> ConstructURL(This,bstrAttrName,bstrSiteName,bstrDomain,pParametersInBag,pbstrURL)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IRPSDomainMap_GetDomainAttribute_Proxy( 
    IRPSDomainMap * This,
    /* [in] */ BSTR attributeName,
    /* [in] */ DWORD lcid,
    /* [in] */ BSTR domain,
    /* [retval][out] */ BSTR *pAttrVal);


void __RPC_STUB IRPSDomainMap_GetDomainAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE IRPSDomainMap_get_Domains_Proxy( 
    IRPSDomainMap * This,
    /* [retval][out] */ VARIANT *pArrayVal);


void __RPC_STUB IRPSDomainMap_get_Domains_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IRPSDomainMap_DomainExists_Proxy( 
    IRPSDomainMap * This,
    /* [in] */ BSTR domainName,
    /* [retval][out] */ VARIANT_BOOL *pbExists);


void __RPC_STUB IRPSDomainMap_DomainExists_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IRPSDomainMap_ConstructURL_Proxy( 
    IRPSDomainMap * This,
    /* [in] */ BSTR bstrAttrName,
    /* [in] */ BSTR bstrSiteName,
    /* [in] */ BSTR bstrDomain,
    /* [in] */ IRPSPropBag *pParametersInBag,
    /* [retval][out] */ BSTR *pbstrURL);


void __RPC_STUB IRPSDomainMap_ConstructURL_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IRPSDomainMap_INTERFACE_DEFINED__ */


#ifndef __IRPSPKCrypt_INTERFACE_DEFINED__
#define __IRPSPKCrypt_INTERFACE_DEFINED__

/* interface IRPSPKCrypt */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IRPSPKCrypt;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("01732749-d1a2-11d7-99eb-505054503030")
    IRPSPKCrypt : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Encrypt( 
            /* [in] */ LPCWSTR certName,
            /* [out] */ BYTE *pbCertSKI,
            /* [out][in] */ DWORD *pcbCertSKI,
            /* [out][in] */ BYTE *pbData,
            /* [out][in] */ DWORD *pdwDataLen,
            /* [in] */ DWORD dwBufLen) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE VerifySignature( 
            /* [in] */ BYTE *pbCertSKI,
            /* [in] */ DWORD cbCertSKI,
            /* [in] */ BYTE *hHash,
            /* [in] */ BYTE *pbSigData,
            /* [in] */ DWORD dwSigDataLen,
            /* [out] */ BOOL *pbMatch,
            /* [out] */ BSTR *pbstrCertName) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE VerifySignature2( 
            /* [in] */ LPCWSTR certName,
            /* [in] */ BYTE *hHash,
            /* [in] */ BYTE *pbSigData,
            /* [in] */ DWORD dwSigDataLen,
            /* [out] */ BOOL *pbMatch) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE SignHash( 
            /* [in] */ LPCWSTR certName,
            /* [out] */ BYTE *pbCertSKI,
            /* [out][in] */ DWORD *pcbCertSKI,
            /* [in] */ BYTE *hHash,
            /* [out] */ BYTE *pbSignature,
            /* [out][in] */ DWORD *pdwSignatureLen) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Decrypt( 
            /* [in] */ BYTE *pbCertSKI,
            /* [in] */ DWORD cbCertSKI,
            /* [out][in] */ BYTE *pbData,
            /* [out][in] */ DWORD *pdwDataLen,
            /* [out] */ BSTR *pbstrCertName) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Decrypt2( 
            /* [in] */ DWORD dwFlags,
            /* [in] */ BYTE *pbCertSKI,
            /* [in] */ DWORD cbCertSKI,
            /* [out][in] */ BYTE *pbData,
            /* [out][in] */ DWORD *pdwDataLen,
            /* [out] */ BSTR *pbstrCertName) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRPSPKCryptVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRPSPKCrypt * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRPSPKCrypt * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRPSPKCrypt * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Encrypt )( 
            IRPSPKCrypt * This,
            /* [in] */ LPCWSTR certName,
            /* [out] */ BYTE *pbCertSKI,
            /* [out][in] */ DWORD *pcbCertSKI,
            /* [out][in] */ BYTE *pbData,
            /* [out][in] */ DWORD *pdwDataLen,
            /* [in] */ DWORD dwBufLen);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *VerifySignature )( 
            IRPSPKCrypt * This,
            /* [in] */ BYTE *pbCertSKI,
            /* [in] */ DWORD cbCertSKI,
            /* [in] */ BYTE *hHash,
            /* [in] */ BYTE *pbSigData,
            /* [in] */ DWORD dwSigDataLen,
            /* [out] */ BOOL *pbMatch,
            /* [out] */ BSTR *pbstrCertName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *VerifySignature2 )( 
            IRPSPKCrypt * This,
            /* [in] */ LPCWSTR certName,
            /* [in] */ BYTE *hHash,
            /* [in] */ BYTE *pbSigData,
            /* [in] */ DWORD dwSigDataLen,
            /* [out] */ BOOL *pbMatch);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SignHash )( 
            IRPSPKCrypt * This,
            /* [in] */ LPCWSTR certName,
            /* [out] */ BYTE *pbCertSKI,
            /* [out][in] */ DWORD *pcbCertSKI,
            /* [in] */ BYTE *hHash,
            /* [out] */ BYTE *pbSignature,
            /* [out][in] */ DWORD *pdwSignatureLen);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Decrypt )( 
            IRPSPKCrypt * This,
            /* [in] */ BYTE *pbCertSKI,
            /* [in] */ DWORD cbCertSKI,
            /* [out][in] */ BYTE *pbData,
            /* [out][in] */ DWORD *pdwDataLen,
            /* [out] */ BSTR *pbstrCertName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Decrypt2 )( 
            IRPSPKCrypt * This,
            /* [in] */ DWORD dwFlags,
            /* [in] */ BYTE *pbCertSKI,
            /* [in] */ DWORD cbCertSKI,
            /* [out][in] */ BYTE *pbData,
            /* [out][in] */ DWORD *pdwDataLen,
            /* [out] */ BSTR *pbstrCertName);
        
        END_INTERFACE
    } IRPSPKCryptVtbl;

    interface IRPSPKCrypt
    {
        CONST_VTBL struct IRPSPKCryptVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRPSPKCrypt_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IRPSPKCrypt_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IRPSPKCrypt_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IRPSPKCrypt_Encrypt(This,certName,pbCertSKI,pcbCertSKI,pbData,pdwDataLen,dwBufLen)	\
    (This)->lpVtbl -> Encrypt(This,certName,pbCertSKI,pcbCertSKI,pbData,pdwDataLen,dwBufLen)

#define IRPSPKCrypt_VerifySignature(This,pbCertSKI,cbCertSKI,hHash,pbSigData,dwSigDataLen,pbMatch,pbstrCertName)	\
    (This)->lpVtbl -> VerifySignature(This,pbCertSKI,cbCertSKI,hHash,pbSigData,dwSigDataLen,pbMatch,pbstrCertName)

#define IRPSPKCrypt_VerifySignature2(This,certName,hHash,pbSigData,dwSigDataLen,pbMatch)	\
    (This)->lpVtbl -> VerifySignature2(This,certName,hHash,pbSigData,dwSigDataLen,pbMatch)

#define IRPSPKCrypt_SignHash(This,certName,pbCertSKI,pcbCertSKI,hHash,pbSignature,pdwSignatureLen)	\
    (This)->lpVtbl -> SignHash(This,certName,pbCertSKI,pcbCertSKI,hHash,pbSignature,pdwSignatureLen)

#define IRPSPKCrypt_Decrypt(This,pbCertSKI,cbCertSKI,pbData,pdwDataLen,pbstrCertName)	\
    (This)->lpVtbl -> Decrypt(This,pbCertSKI,cbCertSKI,pbData,pdwDataLen,pbstrCertName)

#define IRPSPKCrypt_Decrypt2(This,dwFlags,pbCertSKI,cbCertSKI,pbData,pdwDataLen,pbstrCertName)	\
    (This)->lpVtbl -> Decrypt2(This,dwFlags,pbCertSKI,cbCertSKI,pbData,pdwDataLen,pbstrCertName)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring] */ HRESULT STDMETHODCALLTYPE IRPSPKCrypt_Encrypt_Proxy( 
    IRPSPKCrypt * This,
    /* [in] */ LPCWSTR certName,
    /* [out] */ BYTE *pbCertSKI,
    /* [out][in] */ DWORD *pcbCertSKI,
    /* [out][in] */ BYTE *pbData,
    /* [out][in] */ DWORD *pdwDataLen,
    /* [in] */ DWORD dwBufLen);


void __RPC_STUB IRPSPKCrypt_Encrypt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IRPSPKCrypt_VerifySignature_Proxy( 
    IRPSPKCrypt * This,
    /* [in] */ BYTE *pbCertSKI,
    /* [in] */ DWORD cbCertSKI,
    /* [in] */ BYTE *hHash,
    /* [in] */ BYTE *pbSigData,
    /* [in] */ DWORD dwSigDataLen,
    /* [out] */ BOOL *pbMatch,
    /* [out] */ BSTR *pbstrCertName);


void __RPC_STUB IRPSPKCrypt_VerifySignature_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IRPSPKCrypt_VerifySignature2_Proxy( 
    IRPSPKCrypt * This,
    /* [in] */ LPCWSTR certName,
    /* [in] */ BYTE *hHash,
    /* [in] */ BYTE *pbSigData,
    /* [in] */ DWORD dwSigDataLen,
    /* [out] */ BOOL *pbMatch);


void __RPC_STUB IRPSPKCrypt_VerifySignature2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IRPSPKCrypt_SignHash_Proxy( 
    IRPSPKCrypt * This,
    /* [in] */ LPCWSTR certName,
    /* [out] */ BYTE *pbCertSKI,
    /* [out][in] */ DWORD *pcbCertSKI,
    /* [in] */ BYTE *hHash,
    /* [out] */ BYTE *pbSignature,
    /* [out][in] */ DWORD *pdwSignatureLen);


void __RPC_STUB IRPSPKCrypt_SignHash_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IRPSPKCrypt_Decrypt_Proxy( 
    IRPSPKCrypt * This,
    /* [in] */ BYTE *pbCertSKI,
    /* [in] */ DWORD cbCertSKI,
    /* [out][in] */ BYTE *pbData,
    /* [out][in] */ DWORD *pdwDataLen,
    /* [out] */ BSTR *pbstrCertName);


void __RPC_STUB IRPSPKCrypt_Decrypt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IRPSPKCrypt_Decrypt2_Proxy( 
    IRPSPKCrypt * This,
    /* [in] */ DWORD dwFlags,
    /* [in] */ BYTE *pbCertSKI,
    /* [in] */ DWORD cbCertSKI,
    /* [out][in] */ BYTE *pbData,
    /* [out][in] */ DWORD *pdwDataLen,
    /* [out] */ BSTR *pbstrCertName);


void __RPC_STUB IRPSPKCrypt_Decrypt2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IRPSPKCrypt_INTERFACE_DEFINED__ */


#ifndef __IRPSCookieCrypt_INTERFACE_DEFINED__
#define __IRPSCookieCrypt_INTERFACE_DEFINED__

/* interface IRPSCookieCrypt */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IRPSCookieCrypt;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0173274a-d1a2-11d7-99eb-505054503030")
    IRPSCookieCrypt : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Encrypt( 
            /* [in] */ LPCWSTR siteName,
            /* [out][in] */ DWORD *pdwKeyId,
            /* [out][in] */ BYTE *pbData,
            /* [out][in] */ DWORD *pdwDataLen,
            /* [in] */ DWORD dwBufLen) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Decrypt( 
            /* [in] */ LPCWSTR siteName,
            /* [in] */ DWORD keyId,
            /* [out][in] */ BYTE *pbData,
            /* [out][in] */ DWORD *pdwDataLen) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRPSCookieCryptVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRPSCookieCrypt * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRPSCookieCrypt * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRPSCookieCrypt * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Encrypt )( 
            IRPSCookieCrypt * This,
            /* [in] */ LPCWSTR siteName,
            /* [out][in] */ DWORD *pdwKeyId,
            /* [out][in] */ BYTE *pbData,
            /* [out][in] */ DWORD *pdwDataLen,
            /* [in] */ DWORD dwBufLen);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Decrypt )( 
            IRPSCookieCrypt * This,
            /* [in] */ LPCWSTR siteName,
            /* [in] */ DWORD keyId,
            /* [out][in] */ BYTE *pbData,
            /* [out][in] */ DWORD *pdwDataLen);
        
        END_INTERFACE
    } IRPSCookieCryptVtbl;

    interface IRPSCookieCrypt
    {
        CONST_VTBL struct IRPSCookieCryptVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRPSCookieCrypt_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IRPSCookieCrypt_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IRPSCookieCrypt_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IRPSCookieCrypt_Encrypt(This,siteName,pdwKeyId,pbData,pdwDataLen,dwBufLen)	\
    (This)->lpVtbl -> Encrypt(This,siteName,pdwKeyId,pbData,pdwDataLen,dwBufLen)

#define IRPSCookieCrypt_Decrypt(This,siteName,keyId,pbData,pdwDataLen)	\
    (This)->lpVtbl -> Decrypt(This,siteName,keyId,pbData,pdwDataLen)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring] */ HRESULT STDMETHODCALLTYPE IRPSCookieCrypt_Encrypt_Proxy( 
    IRPSCookieCrypt * This,
    /* [in] */ LPCWSTR siteName,
    /* [out][in] */ DWORD *pdwKeyId,
    /* [out][in] */ BYTE *pbData,
    /* [out][in] */ DWORD *pdwDataLen,
    /* [in] */ DWORD dwBufLen);


void __RPC_STUB IRPSCookieCrypt_Encrypt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IRPSCookieCrypt_Decrypt_Proxy( 
    IRPSCookieCrypt * This,
    /* [in] */ LPCWSTR siteName,
    /* [in] */ DWORD keyId,
    /* [out][in] */ BYTE *pbData,
    /* [out][in] */ DWORD *pdwDataLen);


void __RPC_STUB IRPSCookieCrypt_Decrypt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IRPSCookieCrypt_INTERFACE_DEFINED__ */


#ifndef __IRPSSiteCrypt_INTERFACE_DEFINED__
#define __IRPSSiteCrypt_INTERFACE_DEFINED__

/* interface IRPSSiteCrypt */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IRPSSiteCrypt;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7aeafa0c-ce51-4c3d-8de5-3a09ff37d4a5")
    IRPSSiteCrypt : public IDispatch
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Encrypt( 
            /* [in] */ BSTR siteName,
            /* [in] */ DWORD dwKeyId,
            /* [in] */ BSTR bstrData,
            /* [retval][out] */ BSTR *pbstrEncryptedData) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Decrypt( 
            /* [in] */ BSTR siteName,
            /* [in] */ DWORD keyId,
            /* [in] */ BSTR bstrEncryptedData,
            /* [retval][out] */ BSTR *pbstrData) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRPSSiteCryptVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRPSSiteCrypt * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRPSSiteCrypt * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRPSSiteCrypt * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IRPSSiteCrypt * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IRPSSiteCrypt * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IRPSSiteCrypt * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IRPSSiteCrypt * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Encrypt )( 
            IRPSSiteCrypt * This,
            /* [in] */ BSTR siteName,
            /* [in] */ DWORD dwKeyId,
            /* [in] */ BSTR bstrData,
            /* [retval][out] */ BSTR *pbstrEncryptedData);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Decrypt )( 
            IRPSSiteCrypt * This,
            /* [in] */ BSTR siteName,
            /* [in] */ DWORD keyId,
            /* [in] */ BSTR bstrEncryptedData,
            /* [retval][out] */ BSTR *pbstrData);
        
        END_INTERFACE
    } IRPSSiteCryptVtbl;

    interface IRPSSiteCrypt
    {
        CONST_VTBL struct IRPSSiteCryptVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRPSSiteCrypt_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IRPSSiteCrypt_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IRPSSiteCrypt_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IRPSSiteCrypt_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IRPSSiteCrypt_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IRPSSiteCrypt_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IRPSSiteCrypt_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IRPSSiteCrypt_Encrypt(This,siteName,dwKeyId,bstrData,pbstrEncryptedData)	\
    (This)->lpVtbl -> Encrypt(This,siteName,dwKeyId,bstrData,pbstrEncryptedData)

#define IRPSSiteCrypt_Decrypt(This,siteName,keyId,bstrEncryptedData,pbstrData)	\
    (This)->lpVtbl -> Decrypt(This,siteName,keyId,bstrEncryptedData,pbstrData)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IRPSSiteCrypt_Encrypt_Proxy( 
    IRPSSiteCrypt * This,
    /* [in] */ BSTR siteName,
    /* [in] */ DWORD dwKeyId,
    /* [in] */ BSTR bstrData,
    /* [retval][out] */ BSTR *pbstrEncryptedData);


void __RPC_STUB IRPSSiteCrypt_Encrypt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IRPSSiteCrypt_Decrypt_Proxy( 
    IRPSSiteCrypt * This,
    /* [in] */ BSTR siteName,
    /* [in] */ DWORD keyId,
    /* [in] */ BSTR bstrEncryptedData,
    /* [retval][out] */ BSTR *pbstrData);


void __RPC_STUB IRPSSiteCrypt_Decrypt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IRPSSiteCrypt_INTERFACE_DEFINED__ */


#ifndef __IRPSDataCrypt_P_INTERFACE_DEFINED__
#define __IRPSDataCrypt_P_INTERFACE_DEFINED__

/* interface IRPSDataCrypt_P */
/* [unique][helpstring][hidden][uuid][object] */ 


EXTERN_C const IID IID_IRPSDataCrypt_P;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0173274c-d1a2-11d7-99eb-505054503030")
    IRPSDataCrypt_P : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Pack( 
            /* [in] */ DWORD dataType,
            /* [in] */ IRPSPropBag *pData,
            /* [out] */ BSTR *pPackedData) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Unpack( 
            /* [in] */ DWORD expectedDataType,
            /* [in] */ BYTE *pbData,
            /* [in] */ DWORD cbData,
            /* [out] */ IRPSPropBag **ppDataBag) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE SignData( 
            /* [in] */ DWORD signerId,
            /* [in][string] */ LPCWSTR signerCert,
            /* [in] */ BYTE *pbData,
            /* [in] */ DWORD dwDataLen,
            /* [out] */ BSTR *pstrSignedData) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE EncryptData( 
            /* [in] */ DWORD recipientId,
            /* [in][string] */ LPCWSTR recipientCert,
            /* [in] */ BYTE *pbData,
            /* [in] */ DWORD dwDataLen,
            /* [out] */ BSTR *pstrSignedData) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE VerifySignedData( 
            /* [in] */ DWORD signerId,
            /* [in] */ BYTE *pbData,
            /* [in] */ DWORD dwDataLen,
            /* [out][in] */ BYTE *pbSignedData,
            /* [out][in] */ DWORD *pdwSignedDataLen,
            /* [out] */ BSTR *pstrSignerCert) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE DecryptData( 
            /* [in] */ DWORD recipientId,
            /* [in] */ BYTE *pbData,
            /* [in] */ DWORD dwDataLen,
            /* [out] */ BSTR *pstrRecipientCert,
            /* [out] */ BSTR *pstrClearData) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRPSDataCrypt_PVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRPSDataCrypt_P * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRPSDataCrypt_P * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRPSDataCrypt_P * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Pack )( 
            IRPSDataCrypt_P * This,
            /* [in] */ DWORD dataType,
            /* [in] */ IRPSPropBag *pData,
            /* [out] */ BSTR *pPackedData);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Unpack )( 
            IRPSDataCrypt_P * This,
            /* [in] */ DWORD expectedDataType,
            /* [in] */ BYTE *pbData,
            /* [in] */ DWORD cbData,
            /* [out] */ IRPSPropBag **ppDataBag);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SignData )( 
            IRPSDataCrypt_P * This,
            /* [in] */ DWORD signerId,
            /* [in][string] */ LPCWSTR signerCert,
            /* [in] */ BYTE *pbData,
            /* [in] */ DWORD dwDataLen,
            /* [out] */ BSTR *pstrSignedData);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *EncryptData )( 
            IRPSDataCrypt_P * This,
            /* [in] */ DWORD recipientId,
            /* [in][string] */ LPCWSTR recipientCert,
            /* [in] */ BYTE *pbData,
            /* [in] */ DWORD dwDataLen,
            /* [out] */ BSTR *pstrSignedData);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *VerifySignedData )( 
            IRPSDataCrypt_P * This,
            /* [in] */ DWORD signerId,
            /* [in] */ BYTE *pbData,
            /* [in] */ DWORD dwDataLen,
            /* [out][in] */ BYTE *pbSignedData,
            /* [out][in] */ DWORD *pdwSignedDataLen,
            /* [out] */ BSTR *pstrSignerCert);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *DecryptData )( 
            IRPSDataCrypt_P * This,
            /* [in] */ DWORD recipientId,
            /* [in] */ BYTE *pbData,
            /* [in] */ DWORD dwDataLen,
            /* [out] */ BSTR *pstrRecipientCert,
            /* [out] */ BSTR *pstrClearData);
        
        END_INTERFACE
    } IRPSDataCrypt_PVtbl;

    interface IRPSDataCrypt_P
    {
        CONST_VTBL struct IRPSDataCrypt_PVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRPSDataCrypt_P_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IRPSDataCrypt_P_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IRPSDataCrypt_P_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IRPSDataCrypt_P_Pack(This,dataType,pData,pPackedData)	\
    (This)->lpVtbl -> Pack(This,dataType,pData,pPackedData)

#define IRPSDataCrypt_P_Unpack(This,expectedDataType,pbData,cbData,ppDataBag)	\
    (This)->lpVtbl -> Unpack(This,expectedDataType,pbData,cbData,ppDataBag)

#define IRPSDataCrypt_P_SignData(This,signerId,signerCert,pbData,dwDataLen,pstrSignedData)	\
    (This)->lpVtbl -> SignData(This,signerId,signerCert,pbData,dwDataLen,pstrSignedData)

#define IRPSDataCrypt_P_EncryptData(This,recipientId,recipientCert,pbData,dwDataLen,pstrSignedData)	\
    (This)->lpVtbl -> EncryptData(This,recipientId,recipientCert,pbData,dwDataLen,pstrSignedData)

#define IRPSDataCrypt_P_VerifySignedData(This,signerId,pbData,dwDataLen,pbSignedData,pdwSignedDataLen,pstrSignerCert)	\
    (This)->lpVtbl -> VerifySignedData(This,signerId,pbData,dwDataLen,pbSignedData,pdwSignedDataLen,pstrSignerCert)

#define IRPSDataCrypt_P_DecryptData(This,recipientId,pbData,dwDataLen,pstrRecipientCert,pstrClearData)	\
    (This)->lpVtbl -> DecryptData(This,recipientId,pbData,dwDataLen,pstrRecipientCert,pstrClearData)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring] */ HRESULT STDMETHODCALLTYPE IRPSDataCrypt_P_Pack_Proxy( 
    IRPSDataCrypt_P * This,
    /* [in] */ DWORD dataType,
    /* [in] */ IRPSPropBag *pData,
    /* [out] */ BSTR *pPackedData);


void __RPC_STUB IRPSDataCrypt_P_Pack_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IRPSDataCrypt_P_Unpack_Proxy( 
    IRPSDataCrypt_P * This,
    /* [in] */ DWORD expectedDataType,
    /* [in] */ BYTE *pbData,
    /* [in] */ DWORD cbData,
    /* [out] */ IRPSPropBag **ppDataBag);


void __RPC_STUB IRPSDataCrypt_P_Unpack_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IRPSDataCrypt_P_SignData_Proxy( 
    IRPSDataCrypt_P * This,
    /* [in] */ DWORD signerId,
    /* [in][string] */ LPCWSTR signerCert,
    /* [in] */ BYTE *pbData,
    /* [in] */ DWORD dwDataLen,
    /* [out] */ BSTR *pstrSignedData);


void __RPC_STUB IRPSDataCrypt_P_SignData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IRPSDataCrypt_P_EncryptData_Proxy( 
    IRPSDataCrypt_P * This,
    /* [in] */ DWORD recipientId,
    /* [in][string] */ LPCWSTR recipientCert,
    /* [in] */ BYTE *pbData,
    /* [in] */ DWORD dwDataLen,
    /* [out] */ BSTR *pstrSignedData);


void __RPC_STUB IRPSDataCrypt_P_EncryptData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IRPSDataCrypt_P_VerifySignedData_Proxy( 
    IRPSDataCrypt_P * This,
    /* [in] */ DWORD signerId,
    /* [in] */ BYTE *pbData,
    /* [in] */ DWORD dwDataLen,
    /* [out][in] */ BYTE *pbSignedData,
    /* [out][in] */ DWORD *pdwSignedDataLen,
    /* [out] */ BSTR *pstrSignerCert);


void __RPC_STUB IRPSDataCrypt_P_VerifySignedData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IRPSDataCrypt_P_DecryptData_Proxy( 
    IRPSDataCrypt_P * This,
    /* [in] */ DWORD recipientId,
    /* [in] */ BYTE *pbData,
    /* [in] */ DWORD dwDataLen,
    /* [out] */ BSTR *pstrRecipientCert,
    /* [out] */ BSTR *pstrClearData);


void __RPC_STUB IRPSDataCrypt_P_DecryptData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IRPSDataCrypt_P_INTERFACE_DEFINED__ */


#ifndef __IRPSPackData_INTERFACE_DEFINED__
#define __IRPSPackData_INTERFACE_DEFINED__

/* interface IRPSPackData */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IRPSPackData;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("01732752-d1a2-11d7-99eb-505054503030")
    IRPSPackData : public IDispatch
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE PackData( 
            /* [in] */ DWORD signerId,
            /* [in] */ BSTR signerCert,
            /* [in] */ DWORD recipientId,
            /* [in] */ BSTR recipientCert,
            /* [in] */ DWORD dataType,
            /* [in] */ IDispatch *pDataBag,
            /* [retval][out] */ BSTR *pstrPackedData) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE UnpackData( 
            /* [in] */ DWORD expectedSigner,
            /* [in] */ DWORD expectedDataType,
            /* [in] */ VARIANT_BOOL bEncrypted,
            /* [in] */ BSTR data,
            /* [in] */ IDispatch *pEnvelopBag,
            /* [retval][out] */ IDispatch **ppDataBag) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE CheckIDSSignature( 
            /* [in] */ VARIANT chPurpose,
            /* [in] */ VARIANT vSignedData,
            /* [in] */ BSTR bsSKI,
            /* [in] */ BSTR bsSignature,
            /* [retval][out] */ VARIANT_BOOL *pbMatched) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE VerifyLinkedPUIDsSignature( 
            /* [in] */ DWORD dwLinkedIDHigh,
            /* [in] */ DWORD dwLinkedIDLow,
            /* [in] */ DWORD dwLinkedIDTime,
            /* [in] */ VARIANT vPUIDs,
            /* [in] */ BSTR bsSKI,
            /* [in] */ BSTR bsSignature,
            /* [retval][out] */ VARIANT_BOOL *pbMatched) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRPSPackDataVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRPSPackData * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRPSPackData * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRPSPackData * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IRPSPackData * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IRPSPackData * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IRPSPackData * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IRPSPackData * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *PackData )( 
            IRPSPackData * This,
            /* [in] */ DWORD signerId,
            /* [in] */ BSTR signerCert,
            /* [in] */ DWORD recipientId,
            /* [in] */ BSTR recipientCert,
            /* [in] */ DWORD dataType,
            /* [in] */ IDispatch *pDataBag,
            /* [retval][out] */ BSTR *pstrPackedData);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *UnpackData )( 
            IRPSPackData * This,
            /* [in] */ DWORD expectedSigner,
            /* [in] */ DWORD expectedDataType,
            /* [in] */ VARIANT_BOOL bEncrypted,
            /* [in] */ BSTR data,
            /* [in] */ IDispatch *pEnvelopBag,
            /* [retval][out] */ IDispatch **ppDataBag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CheckIDSSignature )( 
            IRPSPackData * This,
            /* [in] */ VARIANT chPurpose,
            /* [in] */ VARIANT vSignedData,
            /* [in] */ BSTR bsSKI,
            /* [in] */ BSTR bsSignature,
            /* [retval][out] */ VARIANT_BOOL *pbMatched);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *VerifyLinkedPUIDsSignature )( 
            IRPSPackData * This,
            /* [in] */ DWORD dwLinkedIDHigh,
            /* [in] */ DWORD dwLinkedIDLow,
            /* [in] */ DWORD dwLinkedIDTime,
            /* [in] */ VARIANT vPUIDs,
            /* [in] */ BSTR bsSKI,
            /* [in] */ BSTR bsSignature,
            /* [retval][out] */ VARIANT_BOOL *pbMatched);
        
        END_INTERFACE
    } IRPSPackDataVtbl;

    interface IRPSPackData
    {
        CONST_VTBL struct IRPSPackDataVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRPSPackData_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IRPSPackData_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IRPSPackData_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IRPSPackData_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IRPSPackData_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IRPSPackData_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IRPSPackData_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IRPSPackData_PackData(This,signerId,signerCert,recipientId,recipientCert,dataType,pDataBag,pstrPackedData)	\
    (This)->lpVtbl -> PackData(This,signerId,signerCert,recipientId,recipientCert,dataType,pDataBag,pstrPackedData)

#define IRPSPackData_UnpackData(This,expectedSigner,expectedDataType,bEncrypted,data,pEnvelopBag,ppDataBag)	\
    (This)->lpVtbl -> UnpackData(This,expectedSigner,expectedDataType,bEncrypted,data,pEnvelopBag,ppDataBag)

#define IRPSPackData_CheckIDSSignature(This,chPurpose,vSignedData,bsSKI,bsSignature,pbMatched)	\
    (This)->lpVtbl -> CheckIDSSignature(This,chPurpose,vSignedData,bsSKI,bsSignature,pbMatched)

#define IRPSPackData_VerifyLinkedPUIDsSignature(This,dwLinkedIDHigh,dwLinkedIDLow,dwLinkedIDTime,vPUIDs,bsSKI,bsSignature,pbMatched)	\
    (This)->lpVtbl -> VerifyLinkedPUIDsSignature(This,dwLinkedIDHigh,dwLinkedIDLow,dwLinkedIDTime,vPUIDs,bsSKI,bsSignature,pbMatched)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IRPSPackData_PackData_Proxy( 
    IRPSPackData * This,
    /* [in] */ DWORD signerId,
    /* [in] */ BSTR signerCert,
    /* [in] */ DWORD recipientId,
    /* [in] */ BSTR recipientCert,
    /* [in] */ DWORD dataType,
    /* [in] */ IDispatch *pDataBag,
    /* [retval][out] */ BSTR *pstrPackedData);


void __RPC_STUB IRPSPackData_PackData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IRPSPackData_UnpackData_Proxy( 
    IRPSPackData * This,
    /* [in] */ DWORD expectedSigner,
    /* [in] */ DWORD expectedDataType,
    /* [in] */ VARIANT_BOOL bEncrypted,
    /* [in] */ BSTR data,
    /* [in] */ IDispatch *pEnvelopBag,
    /* [retval][out] */ IDispatch **ppDataBag);


void __RPC_STUB IRPSPackData_UnpackData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IRPSPackData_CheckIDSSignature_Proxy( 
    IRPSPackData * This,
    /* [in] */ VARIANT chPurpose,
    /* [in] */ VARIANT vSignedData,
    /* [in] */ BSTR bsSKI,
    /* [in] */ BSTR bsSignature,
    /* [retval][out] */ VARIANT_BOOL *pbMatched);


void __RPC_STUB IRPSPackData_CheckIDSSignature_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IRPSPackData_VerifyLinkedPUIDsSignature_Proxy( 
    IRPSPackData * This,
    /* [in] */ DWORD dwLinkedIDHigh,
    /* [in] */ DWORD dwLinkedIDLow,
    /* [in] */ DWORD dwLinkedIDTime,
    /* [in] */ VARIANT vPUIDs,
    /* [in] */ BSTR bsSKI,
    /* [in] */ BSTR bsSignature,
    /* [retval][out] */ VARIANT_BOOL *pbMatched);


void __RPC_STUB IRPSPackData_VerifyLinkedPUIDsSignature_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IRPSPackData_INTERFACE_DEFINED__ */


#ifndef __IRPSTicket_INTERFACE_DEFINED__
#define __IRPSTicket_INTERFACE_DEFINED__

/* interface IRPSTicket */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IRPSTicket;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0173274d-d1a2-11d7-99eb-505054503030")
    IRPSTicket : public IDispatch
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ProcessToken( 
            /* [in] */ BSTR siteName,
            /* [in] */ BSTR ticketToken) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Property( 
            /* [in] */ BSTR name,
            /* [retval][out] */ VARIANT *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_TicketType( 
            /* [retval][out] */ DWORD *pType) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsEncrypted( 
            /* [retval][out] */ VARIANT_BOOL *pType) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Token( 
            /* [retval][out] */ BSTR *pType) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Validate( 
            /* [in] */ IDispatch *pParamBag,
            /* [retval][out] */ VARIANT_BOOL *pbValid) = 0;
        
        virtual /* [helpstring][id][hidden][propget] */ HRESULT STDMETHODCALLTYPE get_PropertyBag( 
            /* [retval][out] */ IDispatch **pVal) = 0;
        
        virtual /* [helpstring][id][hidden][propget] */ HRESULT STDMETHODCALLTYPE get_ProfileProperty( 
            /* [in] */ BSTR name,
            /* [retval][out] */ VARIANT *pVal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRPSTicketVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRPSTicket * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRPSTicket * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRPSTicket * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IRPSTicket * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IRPSTicket * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IRPSTicket * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IRPSTicket * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ProcessToken )( 
            IRPSTicket * This,
            /* [in] */ BSTR siteName,
            /* [in] */ BSTR ticketToken);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Property )( 
            IRPSTicket * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TicketType )( 
            IRPSTicket * This,
            /* [retval][out] */ DWORD *pType);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsEncrypted )( 
            IRPSTicket * This,
            /* [retval][out] */ VARIANT_BOOL *pType);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Token )( 
            IRPSTicket * This,
            /* [retval][out] */ BSTR *pType);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Validate )( 
            IRPSTicket * This,
            /* [in] */ IDispatch *pParamBag,
            /* [retval][out] */ VARIANT_BOOL *pbValid);
        
        /* [helpstring][id][hidden][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PropertyBag )( 
            IRPSTicket * This,
            /* [retval][out] */ IDispatch **pVal);
        
        /* [helpstring][id][hidden][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProfileProperty )( 
            IRPSTicket * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ VARIANT *pVal);
        
        END_INTERFACE
    } IRPSTicketVtbl;

    interface IRPSTicket
    {
        CONST_VTBL struct IRPSTicketVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRPSTicket_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IRPSTicket_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IRPSTicket_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IRPSTicket_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IRPSTicket_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IRPSTicket_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IRPSTicket_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IRPSTicket_ProcessToken(This,siteName,ticketToken)	\
    (This)->lpVtbl -> ProcessToken(This,siteName,ticketToken)

#define IRPSTicket_get_Property(This,name,pVal)	\
    (This)->lpVtbl -> get_Property(This,name,pVal)

#define IRPSTicket_get_TicketType(This,pType)	\
    (This)->lpVtbl -> get_TicketType(This,pType)

#define IRPSTicket_get_IsEncrypted(This,pType)	\
    (This)->lpVtbl -> get_IsEncrypted(This,pType)

#define IRPSTicket_get_Token(This,pType)	\
    (This)->lpVtbl -> get_Token(This,pType)

#define IRPSTicket_Validate(This,pParamBag,pbValid)	\
    (This)->lpVtbl -> Validate(This,pParamBag,pbValid)

#define IRPSTicket_get_PropertyBag(This,pVal)	\
    (This)->lpVtbl -> get_PropertyBag(This,pVal)

#define IRPSTicket_get_ProfileProperty(This,name,pVal)	\
    (This)->lpVtbl -> get_ProfileProperty(This,name,pVal)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IRPSTicket_ProcessToken_Proxy( 
    IRPSTicket * This,
    /* [in] */ BSTR siteName,
    /* [in] */ BSTR ticketToken);


void __RPC_STUB IRPSTicket_ProcessToken_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE IRPSTicket_get_Property_Proxy( 
    IRPSTicket * This,
    /* [in] */ BSTR name,
    /* [retval][out] */ VARIANT *pVal);


void __RPC_STUB IRPSTicket_get_Property_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE IRPSTicket_get_TicketType_Proxy( 
    IRPSTicket * This,
    /* [retval][out] */ DWORD *pType);


void __RPC_STUB IRPSTicket_get_TicketType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE IRPSTicket_get_IsEncrypted_Proxy( 
    IRPSTicket * This,
    /* [retval][out] */ VARIANT_BOOL *pType);


void __RPC_STUB IRPSTicket_get_IsEncrypted_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE IRPSTicket_get_Token_Proxy( 
    IRPSTicket * This,
    /* [retval][out] */ BSTR *pType);


void __RPC_STUB IRPSTicket_get_Token_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IRPSTicket_Validate_Proxy( 
    IRPSTicket * This,
    /* [in] */ IDispatch *pParamBag,
    /* [retval][out] */ VARIANT_BOOL *pbValid);


void __RPC_STUB IRPSTicket_Validate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id][hidden][propget] */ HRESULT STDMETHODCALLTYPE IRPSTicket_get_PropertyBag_Proxy( 
    IRPSTicket * This,
    /* [retval][out] */ IDispatch **pVal);


void __RPC_STUB IRPSTicket_get_PropertyBag_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id][hidden][propget] */ HRESULT STDMETHODCALLTYPE IRPSTicket_get_ProfileProperty_Proxy( 
    IRPSTicket * This,
    /* [in] */ BSTR name,
    /* [retval][out] */ VARIANT *pVal);


void __RPC_STUB IRPSTicket_get_ProfileProperty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IRPSTicket_INTERFACE_DEFINED__ */


#ifndef __IRPSTicket2_INTERFACE_DEFINED__
#define __IRPSTicket2_INTERFACE_DEFINED__

/* interface IRPSTicket2 */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IRPSTicket2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("86844cae-6483-480e-811a-fe67b9846f4d")
    IRPSTicket2 : public IRPSTicket
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE EncryptWithSessionKey( 
            /* [in] */ UINT nAlgIdEncrypt,
            /* [in] */ UINT nAlgIdHash,
            /* [in] */ VARIANT bstrInput,
            /* [retval][out] */ VARIANT *pbstrOutput) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE DecryptWithSessionKey( 
            /* [in] */ UINT nAlgIdEncrypt,
            /* [in] */ UINT nAlgIdHash,
            /* [in] */ VARIANT bstrInput,
            /* [retval][out] */ VARIANT *pbstrOutput) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRPSTicket2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRPSTicket2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRPSTicket2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRPSTicket2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IRPSTicket2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IRPSTicket2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IRPSTicket2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IRPSTicket2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ProcessToken )( 
            IRPSTicket2 * This,
            /* [in] */ BSTR siteName,
            /* [in] */ BSTR ticketToken);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Property )( 
            IRPSTicket2 * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TicketType )( 
            IRPSTicket2 * This,
            /* [retval][out] */ DWORD *pType);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsEncrypted )( 
            IRPSTicket2 * This,
            /* [retval][out] */ VARIANT_BOOL *pType);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Token )( 
            IRPSTicket2 * This,
            /* [retval][out] */ BSTR *pType);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Validate )( 
            IRPSTicket2 * This,
            /* [in] */ IDispatch *pParamBag,
            /* [retval][out] */ VARIANT_BOOL *pbValid);
        
        /* [helpstring][id][hidden][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PropertyBag )( 
            IRPSTicket2 * This,
            /* [retval][out] */ IDispatch **pVal);
        
        /* [helpstring][id][hidden][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProfileProperty )( 
            IRPSTicket2 * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *EncryptWithSessionKey )( 
            IRPSTicket2 * This,
            /* [in] */ UINT nAlgIdEncrypt,
            /* [in] */ UINT nAlgIdHash,
            /* [in] */ VARIANT bstrInput,
            /* [retval][out] */ VARIANT *pbstrOutput);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *DecryptWithSessionKey )( 
            IRPSTicket2 * This,
            /* [in] */ UINT nAlgIdEncrypt,
            /* [in] */ UINT nAlgIdHash,
            /* [in] */ VARIANT bstrInput,
            /* [retval][out] */ VARIANT *pbstrOutput);
        
        END_INTERFACE
    } IRPSTicket2Vtbl;

    interface IRPSTicket2
    {
        CONST_VTBL struct IRPSTicket2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRPSTicket2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IRPSTicket2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IRPSTicket2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IRPSTicket2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IRPSTicket2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IRPSTicket2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IRPSTicket2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IRPSTicket2_ProcessToken(This,siteName,ticketToken)	\
    (This)->lpVtbl -> ProcessToken(This,siteName,ticketToken)

#define IRPSTicket2_get_Property(This,name,pVal)	\
    (This)->lpVtbl -> get_Property(This,name,pVal)

#define IRPSTicket2_get_TicketType(This,pType)	\
    (This)->lpVtbl -> get_TicketType(This,pType)

#define IRPSTicket2_get_IsEncrypted(This,pType)	\
    (This)->lpVtbl -> get_IsEncrypted(This,pType)

#define IRPSTicket2_get_Token(This,pType)	\
    (This)->lpVtbl -> get_Token(This,pType)

#define IRPSTicket2_Validate(This,pParamBag,pbValid)	\
    (This)->lpVtbl -> Validate(This,pParamBag,pbValid)

#define IRPSTicket2_get_PropertyBag(This,pVal)	\
    (This)->lpVtbl -> get_PropertyBag(This,pVal)

#define IRPSTicket2_get_ProfileProperty(This,name,pVal)	\
    (This)->lpVtbl -> get_ProfileProperty(This,name,pVal)


#define IRPSTicket2_EncryptWithSessionKey(This,nAlgIdEncrypt,nAlgIdHash,bstrInput,pbstrOutput)	\
    (This)->lpVtbl -> EncryptWithSessionKey(This,nAlgIdEncrypt,nAlgIdHash,bstrInput,pbstrOutput)

#define IRPSTicket2_DecryptWithSessionKey(This,nAlgIdEncrypt,nAlgIdHash,bstrInput,pbstrOutput)	\
    (This)->lpVtbl -> DecryptWithSessionKey(This,nAlgIdEncrypt,nAlgIdHash,bstrInput,pbstrOutput)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IRPSTicket2_EncryptWithSessionKey_Proxy( 
    IRPSTicket2 * This,
    /* [in] */ UINT nAlgIdEncrypt,
    /* [in] */ UINT nAlgIdHash,
    /* [in] */ VARIANT bstrInput,
    /* [retval][out] */ VARIANT *pbstrOutput);


void __RPC_STUB IRPSTicket2_EncryptWithSessionKey_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IRPSTicket2_DecryptWithSessionKey_Proxy( 
    IRPSTicket2 * This,
    /* [in] */ UINT nAlgIdEncrypt,
    /* [in] */ UINT nAlgIdHash,
    /* [in] */ VARIANT bstrInput,
    /* [retval][out] */ VARIANT *pbstrOutput);


void __RPC_STUB IRPSTicket2_DecryptWithSessionKey_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IRPSTicket2_INTERFACE_DEFINED__ */


#ifndef __IRPSSessionTokenGen_INTERFACE_DEFINED__
#define __IRPSSessionTokenGen_INTERFACE_DEFINED__

/* interface IRPSSessionTokenGen */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IRPSSessionTokenGen;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0173274e-d1a2-11d7-99eb-505054503030")
    IRPSSessionTokenGen : public IDispatch
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GenerateToken( 
            /* [in] */ BSTR siteName,
            /* [in] */ DWORD tokenType,
            /* [in] */ IRPSTicket *pTicket,
            /* [retval][out] */ BSTR *pSessionToken) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Generate2Tokens( 
            /* [in] */ BSTR siteName,
            /* [in] */ IRPSTicket *pTicket,
            /* [out] */ BSTR *pNonSecureToken,
            /* [out] */ BSTR *pSecureToken) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRPSSessionTokenGenVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRPSSessionTokenGen * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRPSSessionTokenGen * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRPSSessionTokenGen * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IRPSSessionTokenGen * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IRPSSessionTokenGen * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IRPSSessionTokenGen * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IRPSSessionTokenGen * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GenerateToken )( 
            IRPSSessionTokenGen * This,
            /* [in] */ BSTR siteName,
            /* [in] */ DWORD tokenType,
            /* [in] */ IRPSTicket *pTicket,
            /* [retval][out] */ BSTR *pSessionToken);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Generate2Tokens )( 
            IRPSSessionTokenGen * This,
            /* [in] */ BSTR siteName,
            /* [in] */ IRPSTicket *pTicket,
            /* [out] */ BSTR *pNonSecureToken,
            /* [out] */ BSTR *pSecureToken);
        
        END_INTERFACE
    } IRPSSessionTokenGenVtbl;

    interface IRPSSessionTokenGen
    {
        CONST_VTBL struct IRPSSessionTokenGenVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRPSSessionTokenGen_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IRPSSessionTokenGen_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IRPSSessionTokenGen_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IRPSSessionTokenGen_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IRPSSessionTokenGen_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IRPSSessionTokenGen_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IRPSSessionTokenGen_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IRPSSessionTokenGen_GenerateToken(This,siteName,tokenType,pTicket,pSessionToken)	\
    (This)->lpVtbl -> GenerateToken(This,siteName,tokenType,pTicket,pSessionToken)

#define IRPSSessionTokenGen_Generate2Tokens(This,siteName,pTicket,pNonSecureToken,pSecureToken)	\
    (This)->lpVtbl -> Generate2Tokens(This,siteName,pTicket,pNonSecureToken,pSecureToken)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IRPSSessionTokenGen_GenerateToken_Proxy( 
    IRPSSessionTokenGen * This,
    /* [in] */ BSTR siteName,
    /* [in] */ DWORD tokenType,
    /* [in] */ IRPSTicket *pTicket,
    /* [retval][out] */ BSTR *pSessionToken);


void __RPC_STUB IRPSSessionTokenGen_GenerateToken_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IRPSSessionTokenGen_Generate2Tokens_Proxy( 
    IRPSSessionTokenGen * This,
    /* [in] */ BSTR siteName,
    /* [in] */ IRPSTicket *pTicket,
    /* [out] */ BSTR *pNonSecureToken,
    /* [out] */ BSTR *pSecureToken);


void __RPC_STUB IRPSSessionTokenGen_Generate2Tokens_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IRPSSessionTokenGen_INTERFACE_DEFINED__ */


#ifndef __IRPSAuth_INTERFACE_DEFINED__
#define __IRPSAuth_INTERFACE_DEFINED__

/* interface IRPSAuth */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IRPSAuth;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0173274f-d1a2-11d7-99eb-505054503030")
    IRPSAuth : public IDispatch
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Authenticate( 
            /* [in] */ BSTR siteName,
            /* [in] */ BSTR ticketToken,
            /* [in] */ DWORD ticketType,
            /* [in] */ IDispatch *propBagForSessionTokens,
            /* [retval][out] */ IDispatch **ppTicket) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRPSAuthVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRPSAuth * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRPSAuth * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRPSAuth * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IRPSAuth * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IRPSAuth * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IRPSAuth * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IRPSAuth * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Authenticate )( 
            IRPSAuth * This,
            /* [in] */ BSTR siteName,
            /* [in] */ BSTR ticketToken,
            /* [in] */ DWORD ticketType,
            /* [in] */ IDispatch *propBagForSessionTokens,
            /* [retval][out] */ IDispatch **ppTicket);
        
        END_INTERFACE
    } IRPSAuthVtbl;

    interface IRPSAuth
    {
        CONST_VTBL struct IRPSAuthVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRPSAuth_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IRPSAuth_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IRPSAuth_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IRPSAuth_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IRPSAuth_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IRPSAuth_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IRPSAuth_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IRPSAuth_Authenticate(This,siteName,ticketToken,ticketType,propBagForSessionTokens,ppTicket)	\
    (This)->lpVtbl -> Authenticate(This,siteName,ticketToken,ticketType,propBagForSessionTokens,ppTicket)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IRPSAuth_Authenticate_Proxy( 
    IRPSAuth * This,
    /* [in] */ BSTR siteName,
    /* [in] */ BSTR ticketToken,
    /* [in] */ DWORD ticketType,
    /* [in] */ IDispatch *propBagForSessionTokens,
    /* [retval][out] */ IDispatch **ppTicket);


void __RPC_STUB IRPSAuth_Authenticate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IRPSAuth_INTERFACE_DEFINED__ */


#ifndef __IRPSEventLog_INTERFACE_DEFINED__
#define __IRPSEventLog_INTERFACE_DEFINED__

/* interface IRPSEventLog */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IRPSEventLog;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ed7db9c6-ec60-4f7d-9ce3-63bb1db53d42")
    IRPSEventLog : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Log( 
            /* [in] */ LPCWSTR pwszSourceName,
            /* [in] */ WORD wEventType,
            /* [in] */ WORD wCategory,
            /* [in] */ DWORD dwEventID,
            /* [in] */ LPCWSTR *ppwszEventStringsArray,
            /* [in] */ WORD wEventArrayStringCount) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRPSEventLogVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRPSEventLog * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRPSEventLog * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRPSEventLog * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Log )( 
            IRPSEventLog * This,
            /* [in] */ LPCWSTR pwszSourceName,
            /* [in] */ WORD wEventType,
            /* [in] */ WORD wCategory,
            /* [in] */ DWORD dwEventID,
            /* [in] */ LPCWSTR *ppwszEventStringsArray,
            /* [in] */ WORD wEventArrayStringCount);
        
        END_INTERFACE
    } IRPSEventLogVtbl;

    interface IRPSEventLog
    {
        CONST_VTBL struct IRPSEventLogVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRPSEventLog_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IRPSEventLog_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IRPSEventLog_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IRPSEventLog_Log(This,pwszSourceName,wEventType,wCategory,dwEventID,ppwszEventStringsArray,wEventArrayStringCount)	\
    (This)->lpVtbl -> Log(This,pwszSourceName,wEventType,wCategory,dwEventID,ppwszEventStringsArray,wEventArrayStringCount)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring] */ HRESULT STDMETHODCALLTYPE IRPSEventLog_Log_Proxy( 
    IRPSEventLog * This,
    /* [in] */ LPCWSTR pwszSourceName,
    /* [in] */ WORD wEventType,
    /* [in] */ WORD wCategory,
    /* [in] */ DWORD dwEventID,
    /* [in] */ LPCWSTR *ppwszEventStringsArray,
    /* [in] */ WORD wEventArrayStringCount);


void __RPC_STUB IRPSEventLog_Log_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IRPSEventLog_INTERFACE_DEFINED__ */


#ifndef __IRPSHttpAuth_INTERFACE_DEFINED__
#define __IRPSHttpAuth_INTERFACE_DEFINED__

/* interface IRPSHttpAuth */
/* [unique][helpstring][dual][uuid][object] */ 

typedef /* [v1_enum] */ 
enum tagAUTH_STATE
    {	RPS_HASTICKET_NO	= 0,
	RPS_HASTICKET_YES	= 1,
	RPS_HASTICKET_MAYBE	= 2
    } 	AUTH_STATE;


EXTERN_C const IID IID_IRPSHttpAuth;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("01732750-d1a2-11d7-99eb-505054503030")
    IRPSHttpAuth : public IDispatch
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AuthenticateASP( 
            /* [in] */ BSTR siteName,
            /* [in] */ IDispatch *pRequest,
            /* [in] */ IDispatch *pAuthResultsBag,
            /* [retval][out] */ IDispatch **ppTicket) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AuthenticateECB( 
            /* [in] */ BSTR siteName,
            /* [in] */ BYTE *pECB,
            /* [in] */ IDispatch *pAuthResultsBag,
            /* [out] */ IRPSTicket **ppTicket) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AuthenticateRawHttp( 
            /* [in] */ BSTR siteName,
            /* [in] */ BSTR httpVerb,
            /* [in] */ BSTR path,
            /* [in] */ BSTR QS,
            /* [in] */ BSTR httpVersion,
            /* [in] */ VARIANT_BOOL bHTTPs,
            /* [in] */ BSTR httpHeaders,
            /* [in] */ BSTR httpBody,
            /* [in] */ IDispatch *pAuthResultsBag,
            /* [retval][out] */ IDispatch **ppTicket) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetLogoutHeaders( 
            /* [in] */ BSTR siteName,
            /* [retval][out] */ BSTR *pLogoutHeaders) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetTweenerChallengeHeader( 
            /* [in] */ BSTR siteName,
            /* [in] */ IDispatch *pParamBag,
            /* [retval][out] */ BSTR *pTweenerHeader) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE LogoTag( 
            /* [in] */ VARIANT_BOOL bLogin,
            /* [in] */ VARIANT_BOOL bSecure,
            /* [in] */ BSTR urlName,
            /* [in] */ BSTR domainName,
            /* [in] */ BSTR siteName,
            /* [in] */ IDispatch *pParamBag,
            /* [retval][out] */ BSTR *pLogoTagStr) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE WriteHeadersASP( 
            /* [in] */ IDispatch *pResponse,
            /* [in] */ BSTR headers) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRPSHttpAuthVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRPSHttpAuth * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRPSHttpAuth * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRPSHttpAuth * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IRPSHttpAuth * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IRPSHttpAuth * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IRPSHttpAuth * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IRPSHttpAuth * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AuthenticateASP )( 
            IRPSHttpAuth * This,
            /* [in] */ BSTR siteName,
            /* [in] */ IDispatch *pRequest,
            /* [in] */ IDispatch *pAuthResultsBag,
            /* [retval][out] */ IDispatch **ppTicket);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AuthenticateECB )( 
            IRPSHttpAuth * This,
            /* [in] */ BSTR siteName,
            /* [in] */ BYTE *pECB,
            /* [in] */ IDispatch *pAuthResultsBag,
            /* [out] */ IRPSTicket **ppTicket);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AuthenticateRawHttp )( 
            IRPSHttpAuth * This,
            /* [in] */ BSTR siteName,
            /* [in] */ BSTR httpVerb,
            /* [in] */ BSTR path,
            /* [in] */ BSTR QS,
            /* [in] */ BSTR httpVersion,
            /* [in] */ VARIANT_BOOL bHTTPs,
            /* [in] */ BSTR httpHeaders,
            /* [in] */ BSTR httpBody,
            /* [in] */ IDispatch *pAuthResultsBag,
            /* [retval][out] */ IDispatch **ppTicket);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetLogoutHeaders )( 
            IRPSHttpAuth * This,
            /* [in] */ BSTR siteName,
            /* [retval][out] */ BSTR *pLogoutHeaders);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetTweenerChallengeHeader )( 
            IRPSHttpAuth * This,
            /* [in] */ BSTR siteName,
            /* [in] */ IDispatch *pParamBag,
            /* [retval][out] */ BSTR *pTweenerHeader);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *LogoTag )( 
            IRPSHttpAuth * This,
            /* [in] */ VARIANT_BOOL bLogin,
            /* [in] */ VARIANT_BOOL bSecure,
            /* [in] */ BSTR urlName,
            /* [in] */ BSTR domainName,
            /* [in] */ BSTR siteName,
            /* [in] */ IDispatch *pParamBag,
            /* [retval][out] */ BSTR *pLogoTagStr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *WriteHeadersASP )( 
            IRPSHttpAuth * This,
            /* [in] */ IDispatch *pResponse,
            /* [in] */ BSTR headers);
        
        END_INTERFACE
    } IRPSHttpAuthVtbl;

    interface IRPSHttpAuth
    {
        CONST_VTBL struct IRPSHttpAuthVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRPSHttpAuth_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IRPSHttpAuth_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IRPSHttpAuth_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IRPSHttpAuth_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IRPSHttpAuth_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IRPSHttpAuth_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IRPSHttpAuth_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IRPSHttpAuth_AuthenticateASP(This,siteName,pRequest,pAuthResultsBag,ppTicket)	\
    (This)->lpVtbl -> AuthenticateASP(This,siteName,pRequest,pAuthResultsBag,ppTicket)

#define IRPSHttpAuth_AuthenticateECB(This,siteName,pECB,pAuthResultsBag,ppTicket)	\
    (This)->lpVtbl -> AuthenticateECB(This,siteName,pECB,pAuthResultsBag,ppTicket)

#define IRPSHttpAuth_AuthenticateRawHttp(This,siteName,httpVerb,path,QS,httpVersion,bHTTPs,httpHeaders,httpBody,pAuthResultsBag,ppTicket)	\
    (This)->lpVtbl -> AuthenticateRawHttp(This,siteName,httpVerb,path,QS,httpVersion,bHTTPs,httpHeaders,httpBody,pAuthResultsBag,ppTicket)

#define IRPSHttpAuth_GetLogoutHeaders(This,siteName,pLogoutHeaders)	\
    (This)->lpVtbl -> GetLogoutHeaders(This,siteName,pLogoutHeaders)

#define IRPSHttpAuth_GetTweenerChallengeHeader(This,siteName,pParamBag,pTweenerHeader)	\
    (This)->lpVtbl -> GetTweenerChallengeHeader(This,siteName,pParamBag,pTweenerHeader)

#define IRPSHttpAuth_LogoTag(This,bLogin,bSecure,urlName,domainName,siteName,pParamBag,pLogoTagStr)	\
    (This)->lpVtbl -> LogoTag(This,bLogin,bSecure,urlName,domainName,siteName,pParamBag,pLogoTagStr)

#define IRPSHttpAuth_WriteHeadersASP(This,pResponse,headers)	\
    (This)->lpVtbl -> WriteHeadersASP(This,pResponse,headers)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IRPSHttpAuth_AuthenticateASP_Proxy( 
    IRPSHttpAuth * This,
    /* [in] */ BSTR siteName,
    /* [in] */ IDispatch *pRequest,
    /* [in] */ IDispatch *pAuthResultsBag,
    /* [retval][out] */ IDispatch **ppTicket);


void __RPC_STUB IRPSHttpAuth_AuthenticateASP_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IRPSHttpAuth_AuthenticateECB_Proxy( 
    IRPSHttpAuth * This,
    /* [in] */ BSTR siteName,
    /* [in] */ BYTE *pECB,
    /* [in] */ IDispatch *pAuthResultsBag,
    /* [out] */ IRPSTicket **ppTicket);


void __RPC_STUB IRPSHttpAuth_AuthenticateECB_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IRPSHttpAuth_AuthenticateRawHttp_Proxy( 
    IRPSHttpAuth * This,
    /* [in] */ BSTR siteName,
    /* [in] */ BSTR httpVerb,
    /* [in] */ BSTR path,
    /* [in] */ BSTR QS,
    /* [in] */ BSTR httpVersion,
    /* [in] */ VARIANT_BOOL bHTTPs,
    /* [in] */ BSTR httpHeaders,
    /* [in] */ BSTR httpBody,
    /* [in] */ IDispatch *pAuthResultsBag,
    /* [retval][out] */ IDispatch **ppTicket);


void __RPC_STUB IRPSHttpAuth_AuthenticateRawHttp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IRPSHttpAuth_GetLogoutHeaders_Proxy( 
    IRPSHttpAuth * This,
    /* [in] */ BSTR siteName,
    /* [retval][out] */ BSTR *pLogoutHeaders);


void __RPC_STUB IRPSHttpAuth_GetLogoutHeaders_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IRPSHttpAuth_GetTweenerChallengeHeader_Proxy( 
    IRPSHttpAuth * This,
    /* [in] */ BSTR siteName,
    /* [in] */ IDispatch *pParamBag,
    /* [retval][out] */ BSTR *pTweenerHeader);


void __RPC_STUB IRPSHttpAuth_GetTweenerChallengeHeader_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IRPSHttpAuth_LogoTag_Proxy( 
    IRPSHttpAuth * This,
    /* [in] */ VARIANT_BOOL bLogin,
    /* [in] */ VARIANT_BOOL bSecure,
    /* [in] */ BSTR urlName,
    /* [in] */ BSTR domainName,
    /* [in] */ BSTR siteName,
    /* [in] */ IDispatch *pParamBag,
    /* [retval][out] */ BSTR *pLogoTagStr);


void __RPC_STUB IRPSHttpAuth_LogoTag_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IRPSHttpAuth_WriteHeadersASP_Proxy( 
    IRPSHttpAuth * This,
    /* [in] */ IDispatch *pResponse,
    /* [in] */ BSTR headers);


void __RPC_STUB IRPSHttpAuth_WriteHeadersASP_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IRPSHttpAuth_INTERFACE_DEFINED__ */


#ifndef __IRPSConfigInfo_INTERFACE_DEFINED__
#define __IRPSConfigInfo_INTERFACE_DEFINED__

/* interface IRPSConfigInfo */
/* [unique][helpstring][nonextensible][oleautomation][uuid][object] */ 


EXTERN_C const IID IID_IRPSConfigInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("35B6CEB7-402F-4564-A3DF-D244758870AD")
    IRPSConfigInfo : public IUnknown
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetConfigDirectory( 
            /* [out] */ BSTR *bstrConfigDirectory) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRPSConfigInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRPSConfigInfo * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRPSConfigInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRPSConfigInfo * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetConfigDirectory )( 
            IRPSConfigInfo * This,
            /* [out] */ BSTR *bstrConfigDirectory);
        
        END_INTERFACE
    } IRPSConfigInfoVtbl;

    interface IRPSConfigInfo
    {
        CONST_VTBL struct IRPSConfigInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRPSConfigInfo_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IRPSConfigInfo_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IRPSConfigInfo_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IRPSConfigInfo_GetConfigDirectory(This,bstrConfigDirectory)	\
    (This)->lpVtbl -> GetConfigDirectory(This,bstrConfigDirectory)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IRPSConfigInfo_GetConfigDirectory_Proxy( 
    IRPSConfigInfo * This,
    /* [out] */ BSTR *bstrConfigDirectory);


void __RPC_STUB IRPSConfigInfo_GetConfigDirectory_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IRPSConfigInfo_INTERFACE_DEFINED__ */



#ifndef __RPS_LIBRARY_DEFINED__
#define __RPS_LIBRARY_DEFINED__

/* library RPS */
/* [helpstring][version][uuid] */ 













EXTERN_C const IID LIBID_RPS;

EXTERN_C const CLSID CLSID_RPS;

#ifdef __cplusplus

class DECLSPEC_UUID("01732742-d1a2-11d7-99eb-505054503030")
RPS;
#endif

EXTERN_C const CLSID CLSID_RPSConfigInfo;

#ifdef __cplusplus

class DECLSPEC_UUID("DC6EF879-37CE-44E3-8837-5C79D8842832")
RPSConfigInfo;
#endif
#endif /* __RPS_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR * ); 
void                      __RPC_USER  BSTR_UserFree(     unsigned long *, BSTR * ); 

unsigned long             __RPC_USER  VARIANT_UserSize(     unsigned long *, unsigned long            , VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserMarshal(  unsigned long *, unsigned char *, VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserUnmarshal(unsigned long *, unsigned char *, VARIANT * ); 
void                      __RPC_USER  VARIANT_UserFree(     unsigned long *, VARIANT * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\PassportRPS\6.2\inc\errormsg.h ===
// Master error message MC file
//
//  Values are 32 bit values laid out as follows:
//
//   3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1
//   1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
//  +---+-+-+-----------------------+-------------------------------+
//  |Sev|C|R|     Facility          |               Code            |
//  +---+-+-+-----------------------+-------------------------------+
//
//  where
//
//      Sev - is the severity code
//
//          00 - Success
//          01 - Informational
//          10 - Warning
//          11 - Error
//
//      C - is the Customer code flag
//
//      R - is a reserved bit
//
//      Facility - is the facility code
//
//      Code - is the facility's status code
//
//
// Define the facility codes
//
#define FACILITY_PP_USERINPUT            0x4
#define FACILITY_PP_UPPI                 0xFFF
#define FACILITY_PP_RESERVED             0xFFE
#define FACILITY_PP_INTERNAL             0x4
#define FACILITY_PP_DB                   0xFFF


//
// Define the severity codes
//
#define SEVERITY_PP_SUCCESS              0x0
#define SEVERITY_PP_ERROR                0x2
#define SEVERITY_PP_DBERROR              0x3


//
// MessageId: PP_E_INTERNAL_ERROR
//
// MessageText:
//
//  Service temporarily unavailable due to internal error (hr=%1), please try later.
//
#define PP_E_INTERNAL_ERROR              ((HRESULT)0x8FFE0001L)

//
// MessageId: PP_E_NOT_PP_ERROR
//
// MessageText:
//
//  This is not an error code defined by Passport (hr=%1).
//
#define PP_E_NOT_PP_ERROR                ((HRESULT)0x8FFE0002L)    

// base 0x1000
//
// MessageId: PP_S_TIMEZONE_OLD
//
// MessageText:
//
//  A pre 2.0 time zone is detected.
//
#define PP_S_TIMEZONE_OLD                ((HRESULT)0x00041000L)

//
// MessageId: PP_S_REDIRECT_TO_PARTNER
//
// MessageText:
//
//  Login is successful; redirect back to the partner.
//
#define PP_S_REDIRECT_TO_PARTNER         ((HRESULT)0x00041001L)

//
// MessageId: E_PPFAIL
//
// MessageText:
//
//  Login server failed to read site object properties.
//
#define E_PPFAIL                         ((HRESULT)0x80040FFFL)

//
// MessageId: PP_E_COMFAIL
//
// MessageText:
//
//  The PPMT callback failed to either set or get properties.
//
#define PP_E_COMFAIL                     ((HRESULT)0x80041000L)

//
// MessageId: PP_E_TOOMANYREQUESTS
//
// MessageText:
//
//  Login server has detected too many cookie copy request for the same cookie in the configured time window.
//
#define PP_E_TOOMANYREQUESTS             ((HRESULT)0x80041002L)

//
// MessageId: PP_E_SVC_NOT_CONFIGURED
//
// MessageText:
//
//  The delegated admin service was not configured with the crypt COM object, or the login server could not find the domain for a webSSO request.
//
#define PP_E_SVC_NOT_CONFIGURED          ((HRESULT)0x80041003L)

//
// MessageId: PP_E_PROFILENOTEXIST
//
// MessageText:
//
//  Profile was not found.
//
#define PP_E_PROFILENOTEXIST             ((HRESULT)0x80041007L)

//
// MessageId: PP_E_TICKETEXPIRED
//
// MessageText:
//
//  The Passport authentication ticket has expired
//
#define PP_E_TICKETEXPIRED               ((HRESULT)0x80041008L)

//
// MessageId: PP_E_TICKETNOTEXIST
//
// MessageText:
//
//  The current client does not have a Passport auth. ticket.
//
#define PP_E_TICKETNOTEXIST              ((HRESULT)0x80041009L)

//
// MessageId: PP_E_SECTICKETNOTEXIST
//
// MessageText:
//
//  Missing secure ticket.
//
#define PP_E_SECTICKETNOTEXIST           ((HRESULT)0x8004100AL)

//
// MessageId: PP_E_SECTICKETNOTMATCH
//
// MessageText:
//
//  The secure ticket has invalid length.
//
#define PP_E_SECTICKETNOTMATCH           ((HRESULT)0x8004100BL)

//
// MessageId: PP_E_FORCESIGNIN
//
// MessageText:
//
//  The client is required to sign in because the ticket is not present or the partner requires a forced-sign in.
//
#define PP_E_FORCESIGNIN                 ((HRESULT)0x8004100CL)

//
// MessageId: PP_E_EXCLUDED
//
// MessageText:
//
//  The credential is blocked.
//
#define PP_E_EXCLUDED                    ((HRESULT)0x80041010L)

//
// MessageId: PP_E_MEMBER_LOCKED
//
// MessageText:
//
//  The credential is locked out.
//
#define PP_E_MEMBER_LOCKED               ((HRESULT)0x80041011L)

//
// MessageId: PP_E_BAD_PASSWORD
//
// MessageText:
//
//  The entered and stored passwords do not match.
//
#define PP_E_BAD_PASSWORD                ((HRESULT)0x80041012L)

//
// MessageId: PP_E_NOT_OVER_SSL
//
// MessageText:
//
//  The request needs to be made over SSL.
//
#define PP_E_NOT_OVER_SSL                ((HRESULT)0x80041016L)

//
// MessageId: PP_E_INVALIDSITEID
//
// MessageText:
//
//  The site id could be invalid, or the specified return URL does not match the return URL for the site, or the return URL for the given site is not valid.
//
#define PP_E_INVALIDSITEID               ((HRESULT)0x80041018L)

//
// MessageId: PP_E_INVALIDMEMBERNAME
//
// MessageText:
//
//  The specified member name is invalid; the domain or syntax could be invalid.
//
#define PP_E_INVALIDMEMBERNAME           ((HRESULT)0x80041019L)

//
// MessageId: PP_E_INVALIDRETURNURL
//
// MessageText:
//
//  The return URL for the given site is not valid.
//
#define PP_E_INVALIDRETURNURL            ((HRESULT)0x8004101AL)

//
// MessageId: PP_E_INVALIDKEYVERSION
//
// MessageText:
//
//  The key for the specified version could not be found.
//
#define PP_E_INVALIDKEYVERSION           ((HRESULT)0x8004101BL)

//
// MessageId: PP_E_INVALIDREQUEST
//
// MessageText:
//
//  The member name or Passport ticket is invalid during password reset.
//
#define PP_E_INVALIDREQUEST              ((HRESULT)0x8004101CL)

//
// MessageId: PP_E_INVALIDPARAMS
//
// MessageText:
//
//  An invalid parameter or member variable was encountered.
//
#define PP_E_INVALIDPARAMS               ((HRESULT)0x8004101DL)

//
// MessageId: PP_E_NOCREDENTIALS
//
// MessageText:
//
//  No credential was found in the DB for the specified name.
//
#define PP_E_NOCREDENTIALS               ((HRESULT)0x8004101EL)

//
// MessageId: PP_E_NOAUTH
//
// MessageText:
//
//  No value was found for the MSPAuth cookie in MD5 auth.
//
#define PP_E_NOAUTH                      ((HRESULT)0x8004101FL)

//
// MessageId: PP_E_NO_SL
//
// MessageText:
//
//  No value was found for the session length in MD5 auth
//
#define PP_E_NO_SL                       ((HRESULT)0x80041020L)

//
// MessageId: PP_E_NO_ALIAS
//
// MessageText:
//
//  The member name was not specified in MD5 auth or password change.
//
#define PP_E_NO_ALIAS                    ((HRESULT)0x80041022L)

//
// MessageId: PP_E_NO_PASSWORD
//
// MessageText:
//
//  No password was entered for the password change.
//
#define PP_E_NO_PASSWORD                 ((HRESULT)0x80041023L)

//
// MessageId: PP_E_NO_DOMAIN
//
// MessageText:
//
//  There is no domain in the specified member name.
//
#define PP_E_NO_DOMAIN                   ((HRESULT)0x80041024L)

//
// MessageId: PP_E_INVALIDMODE
//
// MessageText:
//
//  The domain portion of the member name specified in the XML registration is invalid.
//
#define PP_E_INVALIDMODE                 ((HRESULT)0x80041026L)

//
// MessageId: PP_E_USER_BAD_LOGIN
//
// MessageText:
//
//  The client could not login.
//
#define PP_E_USER_BAD_LOGIN              ((HRESULT)0x80041027L)

//
// MessageId: PP_E_DIFFERENT_USER
//
// MessageText:
//
//  The current ticket does not belong to the specified member.
//
#define PP_E_DIFFERENT_USER              ((HRESULT)0x80041029L)

//
// MessageId: PP_E_NOT_EMAIL_INPUT
//
// MessageText:
//
//  The specified member name does not have the right syntax; the '@' is missing.
//
#define PP_E_NOT_EMAIL_INPUT             ((HRESULT)0x8004102FL)

//
// MessageId: PP_E_MISSING_CREDS
//
// MessageText:
//
//  The hash is not provided during MD5 or digest auth.
//
#define PP_E_MISSING_CREDS               ((HRESULT)0x80041030L)

//
// MessageId: PP_E_MISSING_MEMBERNAME
//
// MessageText:
//
//  The specified member name during password reset or certificate login is empty.
//
#define PP_E_MISSING_MEMBERNAME          ((HRESULT)0x80041031L)

//
// MessageId: PP_E_MISSING_PASSWORD
//
// MessageText:
//
//  No password was specified during login.
//
#define PP_E_MISSING_PASSWORD            ((HRESULT)0x80041032L)

//
// MessageId: PP_E_INVALID_MEMBERNAME
//
// MessageText:
//
//  The specified member name is either invalid or empty.
//
#define PP_E_INVALID_MEMBERNAME          ((HRESULT)0x80041034L)

//
// MessageId: PP_E_WRONG_DA_DOMAIN
//
// MessageText:
//
//  The domain is not supported.
//
#define PP_E_WRONG_DA_DOMAIN             ((HRESULT)0x80041035L)

//
// MessageId: PP_E_LOCATION_WRONG
//
// MessageText:
//
//  The specified country, postal code or region is wrong or empty.
//
#define PP_E_LOCATION_WRONG              ((HRESULT)0x80041038L)

//
// MessageId: PP_E_SECRET_ANS_WRONG
//
// MessageText:
//
//  The specified country, postal code or region does not match the ones in the profile, or the secret answer does not match the one in the DB.
//
#define PP_E_SECRET_ANS_WRONG            ((HRESULT)0x80041039L)

//
// MessageId: PP_E_KID_HAS_NO_CONSENT
//
// MessageText:
//
//  The PP kids account does not have consent.
//
#define PP_E_KID_HAS_NO_CONSENT          ((HRESULT)0x8004103AL)

//
// MessageId: PP_E_NO_COUNTRY
//
// MessageText:
//
//  The specified country is empty during password reset.
//
#define PP_E_NO_COUNTRY                  ((HRESULT)0x8004103BL)

//
// MessageId: PP_E_NO_REGION
//
// MessageText:
//
//  The specified region is empty during password reset.
//
#define PP_E_NO_REGION                   ((HRESULT)0x8004103CL)

//
// MessageId: PP_E_NO_POSTALCODE
//
// MessageText:
//
//  The specified postal code is empty during password reset.
//
#define PP_E_NO_POSTALCODE               ((HRESULT)0x8004103DL)

//
// MessageId: PP_E_NO_SECRET_ANSWER
//
// MessageText:
//
//  No secret answer was provided.
//
#define PP_E_NO_SECRET_ANSWER            ((HRESULT)0x8004103EL)

//
// MessageId: PP_E_NEED_STRONG_CREDENTIALS
//
// MessageText:
//
//  Strong credential is needed. The current ticket with strong credential could have expired.
//
#define PP_E_NEED_STRONG_CREDENTIALS     ((HRESULT)0x80041040L)

//
// MessageId: PP_E_BAD_PIN
//
// MessageText:
//
//  The entered PIN does not match one in the DB for the member.
//
#define PP_E_BAD_PIN                     ((HRESULT)0x80041041L)

//
// MessageId: PP_E_EMAIL_TAKEN
//
// MessageText:
//
//  The specified member name is being used.
//
#define PP_E_EMAIL_TAKEN                 ((HRESULT)0x80041042L)

//
// MessageId: PP_E_BAD_PINSA
//
// MessageText:
//
//  The answer for the secret question during secure auth is incorrect.
//
#define PP_E_BAD_PINSA                   ((HRESULT)0x80041043L)

//
// MessageId: PP_E_MISSING_PIN
//
// MessageText:
//
//  No PIN was entered.
//
#define PP_E_MISSING_PIN                 ((HRESULT)0x80041044L)

//
// MessageId: PP_E_MISSING_PINSA
//
// MessageText:
//
//  Not all the secret questions were answered.
//
#define PP_E_MISSING_PINSA               ((HRESULT)0x80041045L)

//
// MessageId: PP_E_PIN_MISMATCH
//
// MessageText:
//
//  The confirmation and specified PINs do not match for mobile auth.
//
#define PP_E_PIN_MISMATCH                ((HRESULT)0x80041046L)

//
// MessageId: PP_E_PIN_INVALID
//
// MessageText:
//
//  The PIN entered for mobile auth is invalid.
//
#define PP_E_PIN_INVALID                 ((HRESULT)0x80041047L)

//
// MessageId: PP_E_PIN_BLANK
//
// MessageText:
//
//  No PIN was entered for mobile auth.
//
#define PP_E_PIN_BLANK                   ((HRESULT)0x80041048L)

//
// MessageId: PP_E_PIN_TOO_SHORT
//
// MessageText:
//
//  The entered PIN for mobile auth is too short. The default minimum is 6 characters.
//
#define PP_E_PIN_TOO_SHORT               ((HRESULT)0x80041049L)

//
// MessageId: PP_E_PIN_TOO_LONG
//
// MessageText:
//
//  The entered PIN for mobile auth is too long. The default maximum is 16 characters.
//
#define PP_E_PIN_TOO_LONG                ((HRESULT)0x8004104AL)

//
// MessageId: PP_E_PIN_CONTAINS_MEMBERNAME
//
// MessageText:
//
//  The entered PIN for mobile auth contains the member name.
//
#define PP_E_PIN_CONTAINS_MEMBERNAME     ((HRESULT)0x8004104BL)

//
// MessageId: PP_E_FORCE_RENAME
//
// MessageText:
//
//  The credential is in a forced renamed state (either non-active, or active but not managed in a managed domain.)
//
#define PP_E_FORCE_RENAME                ((HRESULT)0x8004104CL)

//
// MessageId: PP_E_MISSING_PHONENUM
//
// MessageText:
//
//  No phone number was entered.
//
#define PP_E_MISSING_PHONENUM            ((HRESULT)0x8004104DL)

//
// MessageId: PP_E_MISSING_PHONEPIN
//
// MessageText:
//
//  No phone PIN was provided for auth.
//
#define PP_E_MISSING_PHONEPIN            ((HRESULT)0x8004104EL)

//
// MessageId: PP_E_PPM_NOTCAPABLE
//
// MessageText:
//
//  The mobile login request came through an unsupported version of passport manager.
//
#define PP_E_PPM_NOTCAPABLE              ((HRESULT)0x8004104FL)

//
// MessageId: PP_E_CREATECOOKIE_FAILED
//
// MessageText:
//
//  Failed to create profile cookie.
//
#define PP_E_CREATECOOKIE_FAILED         ((HRESULT)0x80041050L)

//
// MessageId: PP_E_BLANK_PASSWORD
//
// MessageText:
//
//  The current password is empty.
//
#define PP_E_BLANK_PASSWORD              ((HRESULT)0x80041053L)

//
// MessageId: PP_E_LOADSTRING_NOT_HANDLED
//
// MessageText:
//
//  The string is not handled by the current handler.
//
#define PP_E_LOADSTRING_NOT_HANDLED      ((HRESULT)0x80041054L)

//
// MessageId: PP_E_INVALIDNAMESPACE
//
// MessageText:
//
//  (This error code needs to be deprecated.)
//
#define PP_E_INVALIDNAMESPACE            ((HRESULT)0x80041058L)

//
// MessageId: PP_E_NOBROWSERINFO
//
// MessageText:
//
//  Failed to get browser info.
//
#define PP_E_NOBROWSERINFO               ((HRESULT)0x80041059L)

//
// MessageId: PP_E_NOSERVERNAME
//
// MessageText:
//
//  Failed to retrieve the server's host name for the current request.
//
#define PP_E_NOSERVERNAME                ((HRESULT)0x80041060L)

//
// MessageId: PP_E_NO_URL
//
// MessageText:
//
//  Failed to get the URL of the current request.
//
#define PP_E_NO_URL                      ((HRESULT)0x80041061L)

//
// MessageId: PP_E_NO_AUTHHEADER
//
// MessageText:
//
//  Failed to find the HTTP_authorization or tweener signature in the header.
//
#define PP_E_NO_AUTHHEADER               ((HRESULT)0x80041062L)

//
// MessageId: PP_E_DONT_EVER_RETURN_THIS
//
// MessageText:
//
//  This error code is not supposed to be return. It should be reported and the code should be fixed.
//
#define PP_E_DONT_EVER_RETURN_THIS       ((HRESULT)0x80041063L)

//
// MessageId: PP_E_PCR_COUNTRY
//
// MessageText:
//
//  Country must be U.S.A., U.S. Territory or Korea. (This message is deprecated.)
//
#define PP_E_PCR_COUNTRY                 ((HRESULT)0x80041065L)

//
// MessageId: PP_E_PCR_BIRTHDATE
//
// MessageText:
//
//  Age is above valid value. (This message is deprecated.)
//
#define PP_E_PCR_BIRTHDATE               ((HRESULT)0x80041066L)

//
// MessageId: PP_E_INVALID_TPF
//
// MessageText:
//
//  The signature on the query string is incorrect. (This message is deprecated.)
//
#define PP_E_INVALID_TPF                 ((HRESULT)0x80041068L)

//
// MessageId: PP_E_URL_NOT_HANDLED
//
// MessageText:
//
//  The default handler could not be found for the URL.
//
#define PP_E_URL_NOT_HANDLED             ((HRESULT)0x80041069L)

//
// MessageId: PP_E_URL_NOT_INIT
//
// MessageText:
//
//  The URL builder object was not initialized before it is used.
//
#define PP_E_URL_NOT_INIT                ((HRESULT)0x80041070L)

//
// MessageId: PP_E_REJECT_RESPONSE
//
// MessageText:
//
//  The user has rejected a password reset from email.
//
#define PP_E_REJECT_RESPONSE             ((HRESULT)0x80041072L)

//
// MessageId: PP_E_GETPPHANDLER_FAILED
//
// MessageText:
//
//  No PP handler was found.
//
#define PP_E_GETPPHANDLER_FAILED         ((HRESULT)0x80041075L)

//
// MessageId: PP_E_GETSTRINGTABLE_FAILED
//
// MessageText:
//
//  The internal string table cannot be retrieved.
//
#define PP_E_GETSTRINGTABLE_FAILED       ((HRESULT)0x80041076L)

//
// MessageId: PP_E_LOGIN_CERT_NOTSUPPORTED
//
// MessageText:
//
//  The partner site does not support this seclevel.
//
#define PP_E_LOGIN_CERT_NOTSUPPORTED     ((HRESULT)0x8004107CL)

//
// MessageId: PP_E_LOGIN_NEED_CERT_PROVISIONING
//
// MessageText:
//
//  The account needs to go through certificate provisioning flow.
//
#define PP_E_LOGIN_NEED_CERT_PROVISIONING ((HRESULT)0x8004107DL)

//
// MessageId: PP_E_LOGIN_RESTRICTIONS
//
// MessageText:
//
//  The account is in a forced renamed state.
//
#define PP_E_LOGIN_RESTRICTIONS          ((HRESULT)0x8004107EL)

//
// MessageId: PP_E_LOGIN_NEED_STRONGPW
//
// MessageText:
//
//  A site requires strong password and account does not have it.
//
#define PP_E_LOGIN_NEED_STRONGPW         ((HRESULT)0x8004107FL)

//
// MessageId: PP_E_LOGIN_NEED_EXPIRY
//
// MessageText:
//
//  The site requires password expiry.
//
#define PP_E_LOGIN_NEED_EXPIRY           ((HRESULT)0x80041080L)

//
// MessageId: PP_E_LOGIN_NEED_EXPIRY_WARINING
//
// MessageText:
//
//  After logging in successfully, the password is about to expire.
//
#define PP_E_LOGIN_NEED_EXPIRY_WARINING  ((HRESULT)0x80041081L)

//
// MessageId: PP_E_LOGIN_EXPIRED_PASSWORD
//
// MessageText:
//
//  The password for the account has expired.
//
#define PP_E_LOGIN_EXPIRED_PASSWORD      ((HRESULT)0x80041082L)

//
// MessageId: PP_E_LOGIN_FORCECHANGE_SQSA
//
// MessageText:
//
//  The secret question and answer has to be changed.
//
#define PP_E_LOGIN_FORCECHANGE_SQSA      ((HRESULT)0x80041083L)

//
// MessageId: PP_E_LOGIN_FORCECHANGE_PASSWORD
//
// MessageText:
//
//  The password has to be changed.
//
#define PP_E_LOGIN_FORCECHANGE_PASSWORD  ((HRESULT)0x80041084L)

//
// MessageId: PP_E_NO_VALID_LOGIN_KEYS
//
// MessageText:
//
//  No login server symmetric key is found.
//
#define PP_E_NO_VALID_LOGIN_KEYS         ((HRESULT)0x80041085L)

//
// MessageId: PP_E_NO_VALID_SITE10_KEYS
//
// MessageText:
//
//  No site 10 symmetric key is found.
//
#define PP_E_NO_VALID_SITE10_KEYS        ((HRESULT)0x80041086L)

//
// MessageId: PP_E_INVALID_SITE_KEY
//
// MessageText:
//
//  The symmetric key data read out from the Key DB is bad.
//
#define PP_E_INVALID_SITE_KEY            ((HRESULT)0x80041087L)

//
// MessageId: PP_E_NO_ASYNC_SUPPORT
//
// MessageText:
//
//  A third party DB provider is called without a callback function.
//
#define PP_E_NO_ASYNC_SUPPORT            ((HRESULT)0x8004108AL)

//
// MessageId: PP_E_UNKNOWN_THIRDPARTY_DB_ERROR
//
// MessageText:
//
//  An unknown third party DB provider error.
//
#define PP_E_UNKNOWN_THIRDPARTY_DB_ERROR ((HRESULT)0x8004108BL)

//
// MessageId: PP_E_INVALID_REALM_CERT
//
// MessageText:
//
//  No certificate was found for a trusted realm, or the login server failed to instantiate a certificate context.
//
#define PP_E_INVALID_REALM_CERT          ((HRESULT)0x8004108EL)

//
// MessageId: PP_E_PPMGR_NOT_INITED
//
// MessageText:
//
//  Passport manager has failed to update the local nexus configuration.
//
#define PP_E_PPMGR_NOT_INITED            ((HRESULT)0x8004108FL)

//
// MessageId: PP_E_SECLEVEL_NOTSUPPORTED
//
// MessageText:
//
//  The requested secure level is not supported.
//
#define PP_E_SECLEVEL_NOTSUPPORTED       ((HRESULT)0x80041090L)

//
// MessageId: PP_E_TOU_NOTSUPPORTEDBYMOBILE
//
// MessageText:
//
//  No TOU support for mobile devices.
//
#define PP_E_TOU_NOTSUPPORTEDBYMOBILE    ((HRESULT)0x80041091L)

//
// MessageId: PP_E_MOBILE_CANCEL_SIGNIN
//
// MessageText:
//
//  The mobile sign in is canceled.
//
#define PP_E_MOBILE_CANCEL_SIGNIN        ((HRESULT)0x80041093L)

//
// MessageId: PP_E_NAME_BLANK
//
// MessageText:
//
//  The signin name is blank.
//
#define PP_E_NAME_BLANK                  ((HRESULT)0x80041100L)

//
// MessageId: PP_E_NAME_TOO_SHORT
//
// MessageText:
//
//  The signin name is too short.
//
#define PP_E_NAME_TOO_SHORT              ((HRESULT)0x80041101L)

//
// MessageId: PP_E_NAME_TOO_LONG
//
// MessageText:
//
//  The signin name is too long.
//
#define PP_E_NAME_TOO_LONG               ((HRESULT)0x80041102L)

//
// MessageId: PP_E_NAME_INVALID
//
// MessageText:
//
//  The signin name is incomplete or has invalid characters.
//
#define PP_E_NAME_INVALID                ((HRESULT)0x80041103L)

//
// MessageId: PP_E_PASSWORD_BLANK
//
// MessageText:
//
//  The password is blank.
//
#define PP_E_PASSWORD_BLANK              ((HRESULT)0x80041104L)

//
// MessageId: PP_E_PASSWORD_TOO_SHORT
//
// MessageText:
//
//  The password is too short.
//
#define PP_E_PASSWORD_TOO_SHORT          ((HRESULT)0x80041105L)

//
// MessageId: PP_E_PASSWORD_TOO_LONG
//
// MessageText:
//
//  The password is too long.
//
#define PP_E_PASSWORD_TOO_LONG           ((HRESULT)0x80041106L)

//
// MessageId: PP_E_PASSWORD_CONTAINS_MEMBERNAME
//
// MessageText:
//
//  The password contains the member name.
//
#define PP_E_PASSWORD_CONTAINS_MEMBERNAME ((HRESULT)0x80041107L)

//
// MessageId: PP_E_PASSWORD_INVALID
//
// MessageText:
//
//  The password contains invalid characters.
//
#define PP_E_PASSWORD_INVALID            ((HRESULT)0x80041108L)

//
// MessageId: PP_E_PASSWORD_MISMATCH
//
// MessageText:
//
//  The passwords do not match.
//
#define PP_E_PASSWORD_MISMATCH           ((HRESULT)0x80041109L)

//
// MessageId: PP_E_EMAIL_BLANK
//
// MessageText:
//
//  The email is blank.
//
#define PP_E_EMAIL_BLANK                 ((HRESULT)0x8004110AL)

//
// MessageId: PP_E_EMAIL_INVALID
//
// MessageText:
//
//  The email is invalid.
//
#define PP_E_EMAIL_INVALID               ((HRESULT)0x8004110BL)

//
// MessageId: PP_E_EMAIL_RIGHT_TOO_LONG
//
// MessageText:
//
//  The string after the '@' in the email address is too long.
//
#define PP_E_EMAIL_RIGHT_TOO_LONG        ((HRESULT)0x8004110CL)

//
// MessageId: PP_E_EMAIL_INCOMPLETE
//
// MessageText:
//
//  The email address is incomplete. This is usually due to missing '@' or '.'.
//
#define PP_E_EMAIL_INCOMPLETE            ((HRESULT)0x8004110DL)

//
// MessageId: PP_E_EMAIL_INVALID_CHARS
//
// MessageText:
//
//  There is invalid characters in the email address.
//
#define PP_E_EMAIL_INVALID_CHARS         ((HRESULT)0x8004110EL)

//
// MessageId: PP_E_BIRTHDATE_NOTENTERED
//
// MessageText:
//
//  No birth date was entered.
//
#define PP_E_BIRTHDATE_NOTENTERED        ((HRESULT)0x8004110FL)

//
// MessageId: PP_E_BIRTHYEAR_INVALID_CHARS
//
// MessageText:
//
//  The year of birth has invalid characters.
//
#define PP_E_BIRTHYEAR_INVALID_CHARS     ((HRESULT)0x80041110L)

//
// MessageId: PP_E_BIRTHYEAR_NOT_4DIGIT
//
// MessageText:
//
//  The year of birth is not four digit long.
//
#define PP_E_BIRTHYEAR_NOT_4DIGIT        ((HRESULT)0x80041111L)

//
// MessageId: PP_E_BIRTHYEAR_TOO_LOW
//
// MessageText:
//
//  The year of birth is too small.
//
#define PP_E_BIRTHYEAR_TOO_LOW           ((HRESULT)0x80041112L)

//
// MessageId: PP_E_BIRTHYEAR_MISSING
//
// MessageText:
//
//  The year of birth is missing.
//
#define PP_E_BIRTHYEAR_MISSING           ((HRESULT)0x80041113L)

//
// MessageId: PP_E_BIRTHMONTH_MISSING
//
// MessageText:
//
//  The month of birth is missing.
//
#define PP_E_BIRTHMONTH_MISSING          ((HRESULT)0x80041114L)

//
// MessageId: PP_E_BIRTHMONTH_INVALID
//
// MessageText:
//
//  The year of birth is invalid.
//
#define PP_E_BIRTHMONTH_INVALID          ((HRESULT)0x80041115L)

//
// MessageId: PP_E_BIRTHDAY_MISSING
//
// MessageText:
//
//  The day of birth is missing.
//
#define PP_E_BIRTHDAY_MISSING            ((HRESULT)0x80041116L)

//
// MessageId: PP_E_BIRTHDAY_INVALID
//
// MessageText:
//
//  The day of birth is invalid.
//
#define PP_E_BIRTHDAY_INVALID            ((HRESULT)0x80041117L)

//
// MessageId: PP_E_BADDAYFORMONTH
//
// MessageText:
//
//  The day of the month is invalid.
//
#define PP_E_BADDAYFORMONTH              ((HRESULT)0x80041118L)

//
// MessageId: PP_E_BIRTHDATE_UNDER18
//
// MessageText:
//
//  The person is under 18. (This message should be deprecated.)
//
#define PP_E_BIRTHDATE_UNDER18           ((HRESULT)0x80041119L)

//
// MessageId: PP_E_BIRTHDATE_IN_FUTURE
//
// MessageText:
//
//  The date of birth is in the future.
//
#define PP_E_BIRTHDATE_IN_FUTURE         ((HRESULT)0x8004111AL)

//
// MessageId: PP_E_PARENT_UNDER13
//
// MessageText:
//
//  A parent is under 13.
//
#define PP_E_PARENT_UNDER13              ((HRESULT)0x8004111BL)

//
// MessageId: PP_E_SECRETQA_NOQUESTION
//
// MessageText:
//
//  No secret question was entered or found.
//
#define PP_E_SECRETQA_NOQUESTION         ((HRESULT)0x8004111CL)

//
// MessageId: PP_E_SECRETQA_NOANSWER
//
// MessageText:
//
//  No answer to secret question was entered or found.
//
#define PP_E_SECRETQA_NOANSWER           ((HRESULT)0x8004111DL)

//
// MessageId: PP_E_SQ_INVALID
//
// MessageText:
//
//  The secret question is invalid.(This message should be deprecated.)
//
#define PP_E_SQ_INVALID                  ((HRESULT)0x8004111EL)

//
// MessageId: PP_E_SA_INVALID
//
// MessageText:
//
//  The answer to the secret question is invalid. (This message should be deprecated.)
//
#define PP_E_SA_INVALID                  ((HRESULT)0x8004111FL)

//
// MessageId: PP_E_SA_TOOSHORT
//
// MessageText:
//
//  The answer to the secret question is too short.
//
#define PP_E_SA_TOOSHORT                 ((HRESULT)0x80041120L)

//
// MessageId: PP_E_SA_TOOLONG
//
// MessageText:
//
//  The answer to the secret question is too long.
//
#define PP_E_SA_TOOLONG                  ((HRESULT)0x80041121L)

//
// MessageId: PP_E_SQ_TOOSHORT
//
// MessageText:
//
//  The secret question is too short.
//
#define PP_E_SQ_TOOSHORT                 ((HRESULT)0x80041122L)

//
// MessageId: PP_E_SQ_TOOLONG
//
// MessageText:
//
//  The secret question is too long.
//
#define PP_E_SQ_TOOLONG                  ((HRESULT)0x80041123L)

//
// MessageId: PP_E_LOCATION_INVALID_REGION
//
// MessageText:
//
//  No country or region was found.
//
#define PP_E_LOCATION_INVALID_REGION     ((HRESULT)0x80041124L)

//
// MessageId: PP_E_LOCATION_INVALID_POSTALCODE
//
// MessageText:
//
//  No postal was found.
//
#define PP_E_LOCATION_INVALID_POSTALCODE ((HRESULT)0x80041125L)

//
// MessageId: PP_E_LOCATION_INVALID_POSTALCODECHARS
//
// MessageText:
//
//  The postal code has invalid characters.
//
#define PP_E_LOCATION_INVALID_POSTALCODECHARS ((HRESULT)0x80041126L)

//
// MessageId: PP_E_LOCATION_INVALID_COUNTRY
//
// MessageText:
//
//  The value for country has invalid length.
//
#define PP_E_LOCATION_INVALID_COUNTRY    ((HRESULT)0x80041127L)

//
// MessageId: PP_E_GENDER_BLANK
//
// MessageText:
//
//  The gender field is blank.
//
#define PP_E_GENDER_BLANK                ((HRESULT)0x80041128L)

//
// MessageId: PP_E_GENDER_INVALID
//
// MessageText:
//
//  The gender is invalid.
//
#define PP_E_GENDER_INVALID              ((HRESULT)0x80041129L)

//
// MessageId: PP_E_LANGUAGE_BLANK
//
// MessageText:
//
//  The language is blank.
//
#define PP_E_LANGUAGE_BLANK              ((HRESULT)0x8004112AL)

//
// MessageId: PP_E_TIMEZONE_BLANK
//
// MessageText:
//
//  The time zone is blank.
//
#define PP_E_TIMEZONE_BLANK              ((HRESULT)0x8004112BL)

//
// MessageId: PP_E_OCCUPATION_BLANK
//
// MessageText:
//
//  The occupation is blank.
//
#define PP_E_OCCUPATION_BLANK            ((HRESULT)0x8004112CL)

//
// MessageId: PP_E_SVC_BLANK
//
// MessageText:
//
//  The service routing parameter is blank.
//
#define PP_E_SVC_BLANK                   ((HRESULT)0x8004112DL)

//
// MessageId: PP_E_SAVEPASSWORD_BLANK
//
// MessageText:
//
//  The save password parameter is blank.
//
#define PP_E_SAVEPASSWORD_BLANK          ((HRESULT)0x8004112EL)

//
// MessageId: PP_E_ACCESSIBILITY_BLANK
//
// MessageText:
//
//  The assessibility parameter is blank.
//
#define PP_E_ACCESSIBILITY_BLANK         ((HRESULT)0x8004112FL)

//
// MessageId: PP_E_ALLOWEMAILINPROFILE_BLANK
//
// MessageText:
//
//  The allow email in profile parameter is blank.
//
#define PP_E_ALLOWEMAILINPROFILE_BLANK   ((HRESULT)0x80041130L)

//
// MessageId: PP_E_ALLOWPASSPORTNETWORKEMAIL_BLANK
//
// MessageText:
//
//  The allow passport network email parameter is blank.
//
#define PP_E_ALLOWPASSPORTNETWORKEMAIL_BLANK ((HRESULT)0x80041131L)

//
// MessageId: PP_E_MEMBER_EXIST
//
// MessageText:
//
//  The non EASI member exists.
//
#define PP_E_MEMBER_EXIST                ((HRESULT)0x80041132L)

//
// MessageId: PP_E_EMAIL_MEMBER_EXIST
//
// MessageText:
//
//  The EASI member exists.
//
#define PP_E_EMAIL_MEMBER_EXIST          ((HRESULT)0x80041133L)

//
// MessageId: PP_E_EMAIL_MANAGED
//
// MessageText:
//
//  The domain is managed.
//
#define PP_E_EMAIL_MANAGED               ((HRESULT)0x80041134L)

//
// MessageId: PP_E_SECRETQA_DUPLICATE_Q
//
// MessageText:
//
//  The secret question is duplicated.
//
#define PP_E_SECRETQA_DUPLICATE_Q        ((HRESULT)0x80041135L)

//
// MessageId: PP_E_FIRSTNAME_BLANK
//
// MessageText:
//
//  The first name is blank.
//
#define PP_E_FIRSTNAME_BLANK             ((HRESULT)0x80041136L)

//
// MessageId: PP_E_LASTNAME_BLANK
//
// MessageText:
//
//  The last name is blank.
//
#define PP_E_LASTNAME_BLANK              ((HRESULT)0x80041137L)

//
// MessageId: PP_E_NICKNAME_BLANK
//
// MessageText:
//
//  The nick name is blank.
//
#define PP_E_NICKNAME_BLANK              ((HRESULT)0x80041138L)

//
// MessageId: PP_E_EMAIL_RESERVED
//
// MessageText:
//
//  The domain does not allow the name to be changed.
//
#define PP_E_EMAIL_RESERVED              ((HRESULT)0x80041139L)

//
// MessageId: PP_E_DOMAIN_INVALID
//
// MessageText:
//
//  The domain does not exist.
//
#define PP_E_DOMAIN_INVALID              ((HRESULT)0x8004113AL)

//
// MessageId: PP_E_SECRETQA_DUPLICATE_A
//
// MessageText:
//
//  The answer to the secret question is duplicated.
//
#define PP_E_SECRETQA_DUPLICATE_A        ((HRESULT)0x8004113BL)

//
// MessageId: PP_E_SECRETQA_NOMATCH
//
// MessageText:
//
//  (This error is not used in the code!)
//
#define PP_E_SECRETQA_NOMATCH            ((HRESULT)0x8004113CL)

//
// MessageId: PP_E_EXTERNALFIELD_BLANK
//
// MessageText:
//
//  (This error is not used in the code!)
//
#define PP_E_EXTERNALFIELD_BLANK         ((HRESULT)0x8004113DL)

//
// MessageId: PP_E_PARENT_INVALID
//
// MessageText:
//
//  This is not the parent.
//
#define PP_E_PARENT_INVALID              ((HRESULT)0x8004113EL)

//
// MessageId: PP_E_INVALID_PHONENUMBER
//
// MessageText:
//
//  (This error is not used in the code!)
//
#define PP_E_INVALID_PHONENUMBER         ((HRESULT)0x8004113FL)

//
// MessageId: PP_E_PHONENUMBER_EXIST
//
// MessageText:
//
//  (This error is not used in the code!).
//
#define PP_E_PHONENUMBER_EXIST           ((HRESULT)0x80041140L)

//
// MessageId: PP_E_TIMEZONE_INVALID
//
// MessageText:
//
//  The time zone is invalid.
//
#define PP_E_TIMEZONE_INVALID            ((HRESULT)0x80041141L)

//
// MessageId: PP_E_OCCUPATION_INVALID
//
// MessageText:
//
//  The occupation is invalid.
//
#define PP_E_OCCUPATION_INVALID          ((HRESULT)0x80041142L)

//
// MessageId: PP_E_LANGUAGE_INVALID
//
// MessageText:
//
//  The language is invalid.
//
#define PP_E_LANGUAGE_INVALID            ((HRESULT)0x80041143L)

//
// MessageId: PP_E_INVALID_PINNUMBER
//
// MessageText:
//
//  The PIN is invalid.
//
#define PP_E_INVALID_PINNUMBER           ((HRESULT)0x80041144L)

//
// MessageId: PP_E_SECUREPIN_MISMATCH
//
// MessageText:
//
//  The secure PIN does not match.
//
#define PP_E_SECUREPIN_MISMATCH          ((HRESULT)0x80041145L)

//
// MessageId: PP_E_SECUREPIN_INVALID
//
// MessageText:
//
//  The secure PIN is invalid.
//
#define PP_E_SECUREPIN_INVALID           ((HRESULT)0x80041146L)

//
// MessageId: PP_E_SECUREPIN_BLANK
//
// MessageText:
//
//  The secure PIN is blank.
//
#define PP_E_SECUREPIN_BLANK             ((HRESULT)0x80041147L)

//
// MessageId: PP_E_SECUREPIN_TOO_SHORT
//
// MessageText:
//
//  The secure PIN is too short.
//
#define PP_E_SECUREPIN_TOO_SHORT         ((HRESULT)0x80041148L)

//
// MessageId: PP_E_SECUREPIN_TOO_LONG
//
// MessageText:
//
//  The secure PIN is too long.
//
#define PP_E_SECUREPIN_TOO_LONG          ((HRESULT)0x80041149L)

//
// MessageId: PP_E_SECUREPIN_CONTAINS_MEMBERNAME
//
// MessageText:
//
//  The secure PIN contains the member name.
//
#define PP_E_SECUREPIN_CONTAINS_MEMBERNAME ((HRESULT)0x8004114AL)

//
// MessageId: PP_E_SECRETQA_VERIFY_NOANSWER
//
// MessageText:
//
//  The answer to verify secret question is blank.
//
#define PP_E_SECRETQA_VERIFY_NOANSWER    ((HRESULT)0x8004114BL)

//
// MessageId: PP_E_FIELD_TOO_LONG
//
// MessageText:
//
//  The field is too long.
//
#define PP_E_FIELD_TOO_LONG              ((HRESULT)0x8004114CL)

//
// MessageId: PP_E_FIRSTNAME_TOO_LONG
//
// MessageText:
//
//  The first name is too long.
//
#define PP_E_FIRSTNAME_TOO_LONG          ((HRESULT)0x8004114DL)

//
// MessageId: PP_E_LASTNAME_TOO_LONG
//
// MessageText:
//
//  The last name is too long.
//
#define PP_E_LASTNAME_TOO_LONG           ((HRESULT)0x8004114EL)

//
// MessageId: PP_E_FORCERENAME_RESPONSE_INVALID
//
// MessageText:
//
//  The password entered matches one of the accounts with the same member name.
//
#define PP_E_FORCERENAME_RESPONSE_INVALID ((HRESULT)0x8004114FL)

//
// MessageId: PP_E_LOCATION_INVALID_POSTALCODEBLANK
//
// MessageText:
//
//  The postal code is blank.
//
#define PP_E_LOCATION_INVALID_POSTALCODEBLANK ((HRESULT)0x80041150L)

//
// MessageId: PP_E_EMAIL_TOO_LONG
//
// MessageText:
//
//  The email address is too long.
//
#define PP_E_EMAIL_TOO_LONG              ((HRESULT)0x80041151L)

//
// MessageId: PP_E_NAME_FIRST_LAST_DOT
//
// MessageText:
//
//  The email name starts and ends with '.'.
//
#define PP_E_NAME_FIRST_LAST_DOT         ((HRESULT)0x80041153L)

//
// MessageId: PP_E_NAME_DOT_AFTER_DOT
//
// MessageText:
//
//  The email name starts after a '.'.
//
#define PP_E_NAME_DOT_AFTER_DOT          ((HRESULT)0x80041154L)

//
// MessageId: PP_E_DOMAIN_INVALID_CHAR
//
// MessageText:
//
//  The domain has invalid characters.
//
#define PP_E_DOMAIN_INVALID_CHAR         ((HRESULT)0x80041155L)

//
// MessageId: PP_E_NAME_INVALID_CHAR
//
// MessageText:
//
//  The email name has invalid characters.
//
#define PP_E_NAME_INVALID_CHAR           ((HRESULT)0x80041156L)

//
// MessageId: PP_E_DOMAIN_FIRST_LAST_CHAR_INVALID
//
// MessageText:
//
//  The first and last characters of the domain are invalid.
//
#define PP_E_DOMAIN_FIRST_LAST_CHAR_INVALID ((HRESULT)0x80041157L)

//
// MessageId: PP_E_DOMAIN_DOT_AFTER_DOT
//
// MessageText:
//
//  The domain portion begins with a dot.
//
#define PP_E_DOMAIN_DOT_AFTER_DOT        ((HRESULT)0x80041158L)

//
// MessageId: PP_E_FIELD_STARTS_ENDS_WITH_WHITESPACE
//
// MessageText:
//
//  The field starts or ends with white space.
//
#define PP_E_FIELD_STARTS_ENDS_WITH_WHITESPACE ((HRESULT)0x80041159L)

//
// MessageId: PP_E_NAME_STARTS_ENDS_WITH_WHITESPACE
//
// MessageText:
//
//  The name start or ends with white space.
//
#define PP_E_NAME_STARTS_ENDS_WITH_WHITESPACE ((HRESULT)0x8004115AL)

//
// MessageId: PP_E_SECRETA_STARTS_ENDS_WITH_WHITESPACE
//
// MessageText:
//
//  The answer to the secret question starts or ends with white space.
//
#define PP_E_SECRETA_STARTS_ENDS_WITH_WHITESPACE ((HRESULT)0x8004115BL)

//
// MessageId: PP_E_POSTALCODE_STARTS_ENDS_WITH_WHITESPACE
//
// MessageText:
//
//  The postal code starts or ends with white space.
//
#define PP_E_POSTALCODE_STARTS_ENDS_WITH_WHITESPACE ((HRESULT)0x8004115CL)

//
// MessageId: PP_E_TOUVERSION_INVALID
//
// MessageText:
//
//  The TOU version either has invalid characters or newer than the current version.
//
#define PP_E_TOUVERSION_INVALID          ((HRESULT)0x8004115DL)

//
// MessageId: PP_E_EMAIL_SAME
//
// MessageText:
//
//  The alternate email is the same as the member name.
//
#define PP_E_EMAIL_SAME                  ((HRESULT)0x8004115EL)

//
// MessageId: PP_E_FIRSTNAME_FORBIDDEN
//
// MessageText:
//
//  The first name contains a phrase or word that is not allowed.
//
#define PP_E_FIRSTNAME_FORBIDDEN         ((HRESULT)0x8004115FL)

//
// MessageId: PP_E_LASTNAME_FORBIDDEN
//
// MessageText:
//
//  The last name contains a phrase or word that is not allowed.
//
#define PP_E_LASTNAME_FORBIDDEN          ((HRESULT)0x80041160L)

//
// MessageId: PP_E_PASSWORD_MISMATCH_WITH_DB
//
// MessageText:
//
//  The password does not match the one in the DB.
//
#define PP_E_PASSWORD_MISMATCH_WITH_DB   ((HRESULT)0x80041161L)

//
// MessageId: PP_E_SECUREPIN_MISMATCH_WITH_DB
//
// MessageText:
//
//  The secure PIN does not match the one in the DB.
//
#define PP_E_SECUREPIN_MISMATCH_WITH_DB  ((HRESULT)0x80041162L)

//
// MessageId: PP_E_FIELD_CONTAINS_INVALID_CHARS
//
// MessageText:
//
//  The field contains invalid characters.
//
#define PP_E_FIELD_CONTAINS_INVALID_CHARS ((HRESULT)0x80041163L)

//
// MessageId: PP_E_PASSWORD_SAME_AS_SA
//
// MessageText:
//
//  The password is the same as the answer for the secret question.
//
#define PP_E_PASSWORD_SAME_AS_SA         ((HRESULT)0x80041164L)

//
// MessageId: PP_E_SECRETQ_CONTAINS_SECRETA
//
// MessageText:
//
//  The secret question contains the answer.
//
#define PP_E_SECRETQ_CONTAINS_SECRETA    ((HRESULT)0x80041165L)

//
// MessageId: PP_E_PASSWORD_CONTAINED_IN_SA
//
// MessageText:
//
//  The password is contained in the answer for the secret question.
//
#define PP_E_PASSWORD_CONTAINED_IN_SA    ((HRESULT)0x80041166L)

//
// MessageId: PP_E_PASSWORD_CONTAINED_IN_SQ
//
// MessageText:
//
//  The password is contained in the secret question.
//
#define PP_E_PASSWORD_CONTAINED_IN_SQ    ((HRESULT)0x80041167L)

//
// MessageId: PP_E_PASSWORD_CONTAINS_FIRSTNAME
//
// MessageText:
//
//  The password contains the first name.
//
#define PP_E_PASSWORD_CONTAINS_FIRSTNAME ((HRESULT)0x80041168L)

//
// MessageId: PP_E_PASSWORD_CONTAINS_LASTNAME
//
// MessageText:
//
//  The password contains the last name.
//
#define PP_E_PASSWORD_CONTAINS_LASTNAME  ((HRESULT)0x80041169L)

//
// MessageId: PP_E_SA_CONTAINS_MEMBERNAME
//
// MessageText:
//
//  The answer for the secret question contains the member name.
//
#define PP_E_SA_CONTAINS_MEMBERNAME      ((HRESULT)0x8004116AL)

//
// MessageId: PP_E_PASSWORD_INVALID_MSN
//
// MessageText:
//
//  The password is invalid; it must be at least 6 characters long.
//
#define PP_E_PASSWORD_INVALID_MSN        ((HRESULT)0x8004116BL)

//
// MessageId: PP_E_FIRSTNAME_FORBIDDEN_MSN
//
// MessageText:
//
//  The first name contains a phrase or word that is not allowed in MSN.
//
#define PP_E_FIRSTNAME_FORBIDDEN_MSN     ((HRESULT)0x8004116CL)

//
// MessageId: PP_E_NAME_FORBIDDEN_GENERIC
//
// MessageText:
//
//  The name contains a phrase or word that is not allowed.
//
#define PP_E_NAME_FORBIDDEN_GENERIC      ((HRESULT)0x8004116DL)

//
// MessageId: PP_E_FIRSTNAME_TOO_SHORT
//
// MessageText:
//
//  The first name is too short.
//
#define PP_E_FIRSTNAME_TOO_SHORT         ((HRESULT)0x8004116EL)

//
// MessageId: PP_E_LASTNAME_TOO_SHORT
//
// MessageText:
//
//  The last name is too short.
//
#define PP_E_LASTNAME_TOO_SHORT          ((HRESULT)0x8004116FL)

//
// MessageId: PP_E_LASTNAME_FORBIDDEN_MSN
//
// MessageText:
//
//  The last name contains a phrase or word that is not allowed in MSN.
//
#define PP_E_LASTNAME_FORBIDDEN_MSN      ((HRESULT)0x80041170L)

//
// MessageId: PP_E_FIRSTNAME_FORBIDDEN_HOTMAIL
//
// MessageText:
//
//  The first name contains a phrase or word that is not allowed in Hotmail.
//
#define PP_E_FIRSTNAME_FORBIDDEN_HOTMAIL ((HRESULT)0x80041171L)

//
// MessageId: PP_E_LASTNAME_FORBIDDEN_HOTMAIL
//
// MessageText:
//
//  The last name contains a phrase or word that is not allowed in Hotmail.
//
#define PP_E_LASTNAME_FORBIDDEN_HOTMAIL  ((HRESULT)0x80041172L)

//
// MessageId: PP_E_INVALID_DA_DOMAIN
//
// MessageText:
//
//  Invalid domain name for EASI account.
//
#define PP_E_INVALID_DA_DOMAIN           ((HRESULT)0x80041173L)

//
// MessageId: PP_E_EMAIL_CANT_BEGIN_WITH_HYPHEN
//
// MessageText:
//
//  The email name can not begin with hyphen.
//
#define PP_E_EMAIL_CANT_BEGIN_WITH_HYPHEN ((HRESULT)0x80041174L)

//
// MessageId: PP_E_EMAIL_CANT_BEGIN_WITH_DOT
//
// MessageText:
//
//  The email name can not begin with a dot.
//
#define PP_E_EMAIL_CANT_BEGIN_WITH_DOT   ((HRESULT)0x80041175L)

//
// MessageId: PP_E_EMAIL_CANT_END_WITH_HYPHEN
//
// MessageText:
//
//  The email name can not end with hyphen.
//
#define PP_E_EMAIL_CANT_END_WITH_HYPHEN  ((HRESULT)0x80041176L)

//
// MessageId: PP_E_EMAIL_CANT_END_WITH_DOT
//
// MessageText:
//
//  The email name can not end with a dot.
//
#define PP_E_EMAIL_CANT_END_WITH_DOT     ((HRESULT)0x80041177L)

//
// MessageId: PP_E_EMAIL_CANT_END_WITH_DOTORHYPHEN
//
// MessageText:
//
//  The email name can not end with a dot or hyphen.
//
#define PP_E_EMAIL_CANT_END_WITH_DOTORHYPHEN ((HRESULT)0x80041178L)

//
// MessageId: PP_E_EMAIL_CANT_BEGIN_WITH_DOTORHYPHEN
//
// MessageText:
//
//  The email name can not begin with a dot or hyphen.
//
#define PP_E_EMAIL_CANT_BEGIN_WITH_DOTORHYPHEN ((HRESULT)0x80041179L)

//
// MessageId: PP_E_DOMAIN_HYPHEN_AFTER_HYPHEN
//
// MessageText:
//
//  The domain portion of the email address cannot contain two consecutive hyphens.
//
#define PP_E_DOMAIN_HYPHEN_AFTER_HYPHEN  ((HRESULT)0x8004117AL)

//
// MessageId: PP_E_DOMAIN_CANT_END_WITH_DOTORHYPHEN
//
// MessageText:
//
//  The domain portion of the email address cannot end with dot or hyphen.
//
#define PP_E_DOMAIN_CANT_END_WITH_DOTORHYPHEN ((HRESULT)0x8004117BL)

//
// MessageId: PP_E_DOMAIN_CANT_BEGIN_WITH_DOTORHYPHEN
//
// MessageText:
//
//  The domain portion of the email address cannot start with dot or hyphen.
//
#define PP_E_DOMAIN_CANT_BEGIN_WITH_DOTORHYPHEN ((HRESULT)0x8004117CL)

//
// MessageId: PP_E_SECRETA_CONTAINS_SECRETQ
//
// MessageText:
//
//  The answer to the secret question contains that question.
//
#define PP_E_SECRETA_CONTAINS_SECRETQ    ((HRESULT)0x8004117DL)

//
// MessageId: PP_E_PASSWORD_CONTAINS_SA
//
// MessageText:
//
//  The password validation code detected the answer to the secret question in the password.
//
#define PP_E_PASSWORD_CONTAINS_SA        ((HRESULT)0x8004117EL)

//
// MessageId: PP_E_EMAIL_DOT_AFTER_DOT
//
// MessageText:
//
//  The email name cannot have two consecutive dots.
//
#define PP_E_EMAIL_DOT_AFTER_DOT         ((HRESULT)0x80041180L)

//
// MessageId: PP_E_REQUIRED_INPUTFIELD_MISSING
//
// MessageText:
//
//  The required field is blank.
//
#define PP_E_REQUIRED_INPUTFIELD_MISSING ((HRESULT)0x8004118DL)

//
// MessageId: PP_E_REQUIRED_DROPDOWNFIELD_MISSING
//
// MessageText:
//
//  The required field is blank.
//
#define PP_E_REQUIRED_DROPDOWNFIELD_MISSING ((HRESULT)0x8004118EL)

//
// MessageId: PP_E_PARENT_NOT_OLD_ENOUGH
//
// MessageText:
//
//  The parent is not old enough.
//
#define PP_E_PARENT_NOT_OLD_ENOUGH       ((HRESULT)0x8004118FL)

//
// MessageId: PP_E_FRIENDLYNAME_BLANK
//
// MessageText:
//
//  The friendly name is blank.
//
#define PP_E_FRIENDLYNAME_BLANK          ((HRESULT)0x8004119AL)

//
// MessageId: PP_E_PASSWORD_SAME_AS_CURRENT
//
// MessageText:
//
//  The password has not changed.
//
#define PP_E_PASSWORD_SAME_AS_CURRENT    ((HRESULT)0x8004119DL)

//
// MessageId: PP_E_PASSWORD_SAME_AS_OLD
//
// MessageText:
//
//  The new and old passwords are the same.
//
#define PP_E_PASSWORD_SAME_AS_OLD        ((HRESULT)0x8004119EL)

//
// MessageId: PP_E_PASSWORD_TOO_SIMILAR_TO_CURRENT
//
// MessageText:
//
//  The new password is too similar to the current password.
//
#define PP_E_PASSWORD_TOO_SIMILAR_TO_CURRENT ((HRESULT)0x8004119FL)

//
// MessageId: PP_E_TOUACCEPT_VALIDATION_WRONG
//
// MessageText:
//
//  The TOU is not validated properly; enter the email again.
//
#define PP_E_TOUACCEPT_VALIDATION_WRONG  ((HRESULT)0x800411A0L)

//
// MessageId: PP_E_GLOBALINIT_MISSING_STRINGTABLE_SERVICE
//
// MessageText:
//
//  The string table COM object has not been configured for this service. The string table service is not loaded.
//
#define PP_E_GLOBALINIT_MISSING_STRINGTABLE_SERVICE ((HRESULT)0x80041403L)

//
// MessageId: PP_E_GLOBALINIT_MISSING_MANAGER_SERVICE
//
// MessageText:
//
//  The Passport Manager instance is not configured for this service. Make sure that config.ini has Passport.Manager.
//
#define PP_E_GLOBALINIT_MISSING_MANAGER_SERVICE ((HRESULT)0x80041408L)

//
// MessageId: PP_E_GLOBALINIT_ADDSTRING_FAILED
//
// MessageText:
//
//  Failed to load strings from registry into the string table.
//
#define PP_E_GLOBALINIT_ADDSTRING_FAILED ((HRESULT)0x80041409L)

//
// MessageId: PP_E_GLOBALINIT_ADDNUMBER_FAILED
//
// MessageText:
//
//  Failed to add one of the strings referred to in UI resources strings into the string table.
//
#define PP_E_GLOBALINIT_ADDNUMBER_FAILED ((HRESULT)0x8004140CL)

//
// MessageId: PP_E_GLOBALINIT_BADPTR
//
// MessageText:
//
//  Failed to add substitution strings into the string table.
//
#define PP_E_GLOBALINIT_BADPTR           ((HRESULT)0x80041410L)

//
// MessageId: PP_E_GLOBALCOMMIT_BADPTR
//
// MessageText:
//
//  Bad service provider pointer.
//
#define PP_E_GLOBALCOMMIT_BADPTR         ((HRESULT)0x80041411L)

//
// MessageId: PP_E_GLOBALLOADDOMAIN_BADPTR
//
// MessageText:
//
//  Bad service provider pointer during domain loading.
//
#define PP_E_GLOBALLOADDOMAIN_BADPTR     ((HRESULT)0x80041412L)

//
// MessageId: PP_E_GLOBALLOADDOMAIN_STRINGTABLE_BADPTR
//
// MessageText:
//
//  Bad string table pointer during domain loading.
//
#define PP_E_GLOBALLOADDOMAIN_STRINGTABLE_BADPTR ((HRESULT)0x80041413L)

//
// MessageId: PP_E_GLOBALLOADREG_STRINGTABLE_BADPTR
//
// MessageText:
//
//  Bad string table pointer during loading from registry.
//
#define PP_E_GLOBALLOADREG_STRINGTABLE_BADPTR ((HRESULT)0x80041414L)

//
// MessageId: PP_E_GLOBALLOADSTRING_STRINGTABLE_BADPTR
//
// MessageText:
//
//  Bad string table pointer during loading of substitution resource strings.
//
#define PP_E_GLOBALLOADSTRING_STRINGTABLE_BADPTR ((HRESULT)0x80041415L)

//
// MessageId: PP_E_GLOBALLOADCONFIG_BADPTR
//
// MessageText:
//
//  Bad service provider pointer during global initialization.
//
#define PP_E_GLOBALLOADCONFIG_BADPTR     ((HRESULT)0x80041416L)

//
// MessageId: PP_E_GLOBALGETDOMAIN_BADPTR
//
// MessageText:
//
//  Bad Passport Manager pointer during domain loading.
//
#define PP_E_GLOBALGETDOMAIN_BADPTR      ((HRESULT)0x80041417L)

//
// MessageId: PP_E_GLOBALGETDOMAIN_BADVARTYPE
//
// MessageText:
//
//  Bad data type for domains returned by Passport Manager. 
//
#define PP_E_GLOBALGETDOMAIN_BADVARTYPE  ((HRESULT)0x80041418L)

//
// MessageId: PP_E_GLOBALGETDOMAIN_BADACCESSPTR
//
// MessageText:
//
//  Bad safe array access pointer to read domains returned from Passport Manager.
//
#define PP_E_GLOBALGETDOMAIN_BADACCESSPTR ((HRESULT)0x80041419L)

//
// MessageId: PP_E_GLOBALGETDOMAIN_TOOMANYDOMAINS
//
// MessageText:
//
//  More than 64 domains were read by Passport Manager during global initialization.
//
#define PP_E_GLOBALGETDOMAIN_TOOMANYDOMAINS ((HRESULT)0x80041420L)

//
// MessageId: PP_E_GLOBALGETDOMAIN_BADDOMAINVARTYPE
//
// MessageText:
//
//  The domain variant type is unexpected when loading a domain that was read by Passport Manager during global initialization.
//
#define PP_E_GLOBALGETDOMAIN_BADDOMAINVARTYPE ((HRESULT)0x80041421L)

//
// MessageId: PP_E_GLOBALGETDOMAIN_BADDOMAINPTR
//
// MessageText:
//
//  The pointer to the domain value is bad when loading a domain that was read by Passport Manager during global initialization.
//
#define PP_E_GLOBALGETDOMAIN_BADDOMAINPTR ((HRESULT)0x80041422L)

//
// MessageId: PP_E_MD5SILENT_SITEID_IS_ONE
//
// MessageText:
//
//  The messenger application partner id is 1.
//
#define PP_E_MD5SILENT_SITEID_IS_ONE     ((HRESULT)0x80041600L)

//
// MessageId: PP_E_MD5SILENT_INVALID_SITE
//
// MessageText:
//
//  Invalid site for MD5.
//
#define PP_E_MD5SILENT_INVALID_SITE      ((HRESULT)0x80041604L)

//
// MessageId: PP_E_HASHSTRING_ADDRECORD_FAILED
//
// MessageText:
//
//  Failed to add string into the string table.
//
#define PP_E_HASHSTRING_ADDRECORD_FAILED ((HRESULT)0x80041900L)

//
// MessageId: PP_E_MD5_HASH_FAILED
//
// MessageText:
//
//  Failed to compute the MD5 hash.
//
#define PP_E_MD5_HASH_FAILED             ((HRESULT)0x80041901L)

//
// MessageId: PP_E_EMAILRESPONSE_INTERNALERROR
//
// MessageText:
//
//  Internal error while processing the email response.
//
#define PP_E_EMAILRESPONSE_INTERNALERROR ((HRESULT)0x80041D01L)

//
// MessageId: PP_E_EMAIL_NOT_FOUND
//
// MessageText:
//
//  Failed to find email record in DB to validate email response.
//
#define PP_E_EMAIL_NOT_FOUND             ((HRESULT)0x80041D02L)

//
// MessageId: PP_E_EMAILRESPONSE_CHECKSECRET
//
// MessageText:
//
//  The email response has failed validation.
//
#define PP_E_EMAILRESPONSE_CHECKSECRET   ((HRESULT)0x80041D04L)

//
// MessageId: PP_E_EMAIL_ALREADY_PROCESSED
//
// MessageText:
//
//  The email response was previously processed.
//
#define PP_E_EMAIL_ALREADY_PROCESSED     ((HRESULT)0x80041D08L)

//
// MessageId: PP_E_PSTUTIL_INVALID_EMAIL_STATUS
//
// MessageText:
//
//  The email validation for an account has reached a state that email can not be resent.
//
#define PP_E_PSTUTIL_INVALID_EMAIL_STATUS ((HRESULT)0x80041E00L)

//
// MessageId: PP_E_LOGIN_NEED_STRONGPW_EXPIRY
//
// MessageText:
//
//  The partner site requires a strong password and password expiry.
//
#define PP_E_LOGIN_NEED_STRONGPW_EXPIRY  ((HRESULT)0x80041E01L)

//
// MessageId: PP_E_BROWSERINFO_INITFAIL
//
// MessageText:
//
//  The browser info look up failed because the internal browser table is not set up. 
//
#define PP_E_BROWSERINFO_INITFAIL        ((HRESULT)0x80042050L)

//
// MessageId: PP_E_CBROWSERINFO_INITFAIL
//
// MessageText:
//
//  The handler could not get browser info on this request.
//
#define PP_E_CBROWSERINFO_INITFAIL       ((HRESULT)0x80042051L)

//
// MessageId: PP_E_URL_TOOLONG
//
// MessageText:
//
//  The URL is too long.
//
#define PP_E_URL_TOOLONG                 ((HRESULT)0x80042700L)

//
// MessageId: PP_E_NO_FIELD
//
// MessageText:
//
//  Failed to get the field id from its name.
//
#define PP_E_NO_FIELD                    ((HRESULT)0x80043401L)

//
// MessageId: PP_E_INVALID_FIELD
//
// MessageText:
//
//  The field value is invalid.
//
#define PP_E_INVALID_FIELD               ((HRESULT)0x80043402L)

//
// MessageId: PP_E_CRITICAL
//
// MessageText:
//
//  Failed to set a cookie due to insufficient buffer to format cookie content.
//
#define PP_E_CRITICAL                    ((HRESULT)0x80043403L)

//
// MessageId: PP_E_TRUSTED_REALM_NOT_FOUND
//
// MessageText:
//
//  Unable to find trusted realm.
//
#define PP_E_TRUSTED_REALM_NOT_FOUND     ((HRESULT)0x80043404L)

//
// MessageId: PP_E_CERT_BLOB_UNDECODEABLE
//
// MessageText:
//
//  Unable to decode trusted realm certificate blob.
//
#define PP_E_CERT_BLOB_UNDECODEABLE      ((HRESULT)0x80043405L)

//
// MessageId: PP_E_NAME_DOMAINFIXED_BLANK
//
// MessageText:
//
//  The member name is blank.
//
#define PP_E_NAME_DOMAINFIXED_BLANK      ((HRESULT)0x80043406L)

//
// MessageId: PP_E_NAME_DOMAINFIXED_TOO_SHORT
//
// MessageText:
//
//  The member name is too short.
//
#define PP_E_NAME_DOMAINFIXED_TOO_SHORT  ((HRESULT)0x80043407L)

//
// MessageId: PP_E_NAME_DOMAINFIXED_TOO_LONG
//
// MessageText:
//
//  The member name is too long.
//
#define PP_E_NAME_DOMAINFIXED_TOO_LONG   ((HRESULT)0x80043408L)

//
// MessageId: PP_E_NAME_DOMAINFIXED_INVALID
//
// MessageText:
//
//  The member name has invalid characters.
//
#define PP_E_NAME_DOMAINFIXED_INVALID    ((HRESULT)0x80043409L)

//
// MessageId: PP_E_ALTEMAIL_SAMEASMEMNAME
//
// MessageText:
//
//  The alternate email address is the same as the member name.
//
#define PP_E_ALTEMAIL_SAMEASMEMNAME      ((HRESULT)0x8004340AL)

//
// MessageId: PP_E_MEMBER_EXISTHOTMAIL
//
// MessageText:
//
//  The users email already exists
//
#define PP_E_MEMBER_EXISTHOTMAIL         ((HRESULT)0x8004340BL)

//
// MessageId: PP_E_BROWSER_NOT_SUPPORTED
//
// MessageText:
//
//  The browser the user is using is not supported by the Passport Network.
//
#define PP_E_BROWSER_NOT_SUPPORTED       ((HRESULT)0x8004340CL)

//
// MessageId: PP_E_TIMEZONE_NOTMATCHCOUNTRY
//
// MessageText:
//
//  The user has selected a timezone that does not match their country
//
#define PP_E_TIMEZONE_NOTMATCHCOUNTRY    ((HRESULT)0x8004340DL)

//
// MessageId: PP_E_LOCATION_INVALID_CITY
//
// MessageText:
//
//  Country does not allow city in profile.
//
#define PP_E_LOCATION_INVALID_CITY       ((HRESULT)0x8004340EL)

//
// MessageId: PP_E_LOCATION_INVALID_ADDRESS
//
// MessageText:
//
//  Country does not allow address in profile.
//
#define PP_E_LOCATION_INVALID_ADDRESS    ((HRESULT)0x8004340FL)

//
// MessageId: PP_E_RESETPWD_MEMBER_LOCKED
//
// MessageText:
//
//  The credential is locked out.
//
#define PP_E_RESETPWD_MEMBER_LOCKED      ((HRESULT)0x80043410L)

//
// MessageId: PP_E_RESETPWDBYEMAIL_MEMBER_LOCKED
//
// MessageText:
//
//  The credential is locked out while reset password by email.
//
#define PP_E_RESETPWDBYEMAIL_MEMBER_LOCKED ((HRESULT)0x80043411L)

//
// MessageId: PP_E_RESETPWD_CRED_BLANK
//
// MessageText:
//
//  The membername is not entered during reset password.
//
#define PP_E_RESETPWD_CRED_BLANK         ((HRESULT)0x80043412L)

//
// MessageId: PP_E_RESETPWD_CRED_INVALID_FORMAT
//
// MessageText:
//
//  The membername does not follow SMTP standard.
//
#define PP_E_RESETPWD_CRED_INVALID_FORMAT ((HRESULT)0x80043413L)

//
// MessageId: PP_E_RESETPWD_HIP_BLANK
//
// MessageText:
//
//  The HIP is not entered during reset password.
//
#define PP_E_RESETPWD_HIP_BLANK          ((HRESULT)0x80043414L)

//
// MessageId: PP_E_RESETPWD_CRED_HIP_MISMATCH
//
// MessageText:
//
//  The membername and/or HIP is not correctly entered during reset password.
//
#define PP_E_RESETPWD_CRED_HIP_MISMATCH  ((HRESULT)0x80043415L)

//
// MessageId: PP_E_RESETPWD_HIP_MISMATCH
//
// MessageText:
//
//  The HIP is not correctly entered during reset password.
//
#define PP_E_RESETPWD_HIP_MISMATCH       ((HRESULT)0x80043416L)

//
// MessageId: PP_E_RESETPWD_PROFSA_BLANK
//
// MessageText:
//
//  The Secret Answer is not entered during reset password.
//
#define PP_E_RESETPWD_PROFSA_BLANK       ((HRESULT)0x80043417L)

//
// MessageId: PP_E_RESETPWD_PROFSA_MISMATCH
//
// MessageText:
//
//  The Profile and/or Secret Answer is not correctly entered during reset password.
//
#define PP_E_RESETPWD_PROFSA_MISMATCH    ((HRESULT)0x80043418L)

//
// MessageId: PP_E_RESETPWD_CCINFO_BLANK
//
// MessageText:
//
//  The billing information is not entered during reset password.
//
#define PP_E_RESETPWD_CCINFO_BLANK       ((HRESULT)0x80043419L)

//
// MessageId: PP_E_RESETPWD_CCINFO_MISMATCH
//
// MessageText:
//
//  The billing information is not correctly entered during reset password.
//
#define PP_E_RESETPWD_CCINFO_MISMATCH    ((HRESULT)0x8004341AL)

//
// MessageId: PP_E_INVALID_REALM_AUTHURL
//
// MessageText:
//
//  No Atuh URL was found for a trusted realm.
//
#define PP_E_INVALID_REALM_AUTHURL       ((HRESULT)0x8004341BL)

//
// MessageId: PP_E_SA_CONTAINS_PASSWORD
//
// MessageText:
//
//  The answer for the secret question contains the password.
//
#define PP_E_SA_CONTAINS_PASSWORD        ((HRESULT)0x8004341CL)

//
// MessageId: PP_E_SA_CONTAINED_IN_PASSWORD
//
// MessageText:
//
//  The answer for the secret question contained in the password.
//
#define PP_E_SA_CONTAINED_IN_PASSWORD    ((HRESULT)0x8004341DL)

//
// MessageId: PP_E_SQ_CONTAINS_PASSWORD
//
// MessageText:
//
//  The secret question contains the password.
//
#define PP_E_SQ_CONTAINS_PASSWORD        ((HRESULT)0x8004341EL)

//
// MessageId: PP_E_RESETPWD_WRONG_EMAIL
//
// MessageText:
//
//  The wrong e-mail is entered incorrectly during reset password by email.
//
#define PP_E_RESETPWD_WRONG_EMAIL        ((HRESULT)0x8004341FL)

//
// MessageId: PP_E_RESETPWD_WRONG_SA
//
// MessageText:
//
//  The secret answer is entered incorrectly during reset strong password by email.
//
#define PP_E_RESETPWD_WRONG_SA           ((HRESULT)0x80043420L)

//
// MessageId: PP_E_CUSTOMSTR_NOT_HANDLED
//
// MessageText:
//
//  The custom string requested is not handled.
//
#define PP_E_CUSTOMSTR_NOT_HANDLED       ((HRESULT)0x80043421L)

//
// MessageId: PP_E_FLOWDISABLED
//
// MessageText:
//
//  The flow has been disabled via CCM.
//
#define PP_E_FLOWDISABLED                ((HRESULT)0x80043422L)

//
// MessageId: PP_E_EMAIL_CHANGE_NOT_ALLOWED
//
// MessageText:
//
//  The email domain does not allow email name change.
//
#define PP_E_EMAIL_CHANGE_NOT_ALLOWED    ((HRESULT)0x80043423L)

//
// MessageId: PP_E_EMAIL_CONTAINS_PASSWORD
//
// MessageText:
//
//  The left part of the email name cannot contain the password.
//
#define PP_E_EMAIL_CONTAINS_PASSWORD     ((HRESULT)0x80043424L)

//
// MessageId: PP_E_EMAIL_LINK_INVALID
//
// MessageText:
//
//  The email link has expired.
//
#define PP_E_EMAIL_LINK_INVALID          ((HRESULT)0x80043425L)

// base 0x1200
// Errors
//#define PP_E_TMP  0x1200
//
// MessageId: PP_E_DB_DOMAINNOTSUPPORTED
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_DB_DOMAINNOTSUPPORTED       ((HRESULT)0x80041226L)

//
// MessageId: PP_E_DB_SERVERDOWNSTATE0
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_DB_SERVERDOWNSTATE0         ((HRESULT)0x80041227L)

//
// MessageId: PP_E_DB_SERVERDOWNSTATE1
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_DB_SERVERDOWNSTATE1         ((HRESULT)0x80041228L)

//
// MessageId: PP_E_DB_SERVERDOWNSTATE2
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_DB_SERVERDOWNSTATE2         ((HRESULT)0x80041229L)

//
// MessageId: PP_E_DBSTATUS_ERROR
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_DBSTATUS_ERROR              ((HRESULT)0x80041230L)

//
// MessageId: PP_E_SRFCONTENTERROR
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_SRFCONTENTERROR             ((HRESULT)0x80041231L)

//
// MessageId: PP_E_DBGLOBALNULL
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_DBGLOBALNULL                ((HRESULT)0x80041232L)

//
// MessageId: PP_E_NOOTHERCREDENTIAL
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_NOOTHERCREDENTIAL           ((HRESULT)0x80041233L)

//
// MessageId: PP_E_DB_CERTASSOCDOESNOTEXIST
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_DB_CERTASSOCDOESNOTEXIST    ((HRESULT)0x80041234L)

//
// MessageId: PP_E_MEMBER_IN_DELAYED_RECYCLE
//
// MessageText:
//
//  Membername cannot be used at this time
//
#define PP_E_MEMBER_IN_DELAYED_RECYCLE   ((HRESULT)0x80041238L)

// BKWD COMPAT WITH 2.5 ERROR CODES
//
// MessageId: PP_E_OLDDB_STRINGTOOLONG
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_OLDDB_STRINGTOOLONG         ((HRESULT)0x80041200L)

//
// MessageId: PP_E_OLDDB_STRINGTOOSHORT
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_OLDDB_STRINGTOOSHORT        ((HRESULT)0x80041201L)

//
// MessageId: PP_E_OLDDB_INVALIDPASSWORD
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_OLDDB_INVALIDPASSWORD       ((HRESULT)0x80041202L)

//
// MessageId: PP_E_OLDDB_INVALIDEMAIL
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_OLDDB_INVALIDEMAIL          ((HRESULT)0x80041203L)

//
// MessageId: PP_E_OLDDB_INVALIDMEMBERNAME
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_OLDDB_INVALIDMEMBERNAME     ((HRESULT)0x80041204L)

//
// MessageId: PP_E_OLDDB_MISSINGPARAMETERS
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_OLDDB_MISSINGPARAMETERS     ((HRESULT)0x80041205L)

//
// MessageId: PP_E_OLDDB_FORBIDDENWORD
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_OLDDB_FORBIDDENWORD         ((HRESULT)0x80041206L)

//
// MessageId: PP_E_OLDDB_INVALIDDOMAINNAME
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_OLDDB_INVALIDDOMAINNAME     ((HRESULT)0x80041207L)

//
// MessageId: PP_E_OLDDB_CRITICALERROR
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_OLDDB_CRITICALERROR         ((HRESULT)0x80041208L)

//
// MessageId: PP_E_OLDDB_ERROR
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_OLDDB_ERROR                 ((HRESULT)0x80041209L)

//
// MessageId: PP_E_OLDDB_MEMBEREXISTS
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_OLDDB_MEMBEREXISTS          ((HRESULT)0x8004120AL)

//
// MessageId: PP_E_OLDDB_MEMBERDOESNOTEXIST
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_OLDDB_MEMBERDOESNOTEXIST    ((HRESULT)0x8004120BL)

//
// MessageId: PP_E_OLDDB_NODATA
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_OLDDB_NODATA                ((HRESULT)0x8004120CL)

//
// MessageId: PP_E_OLDDB_DUPLICATEFRIENDLYNAME
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_OLDDB_DUPLICATEFRIENDLYNAME ((HRESULT)0x8004120DL)

//
// MessageId: PP_E_OLDDB_ADDRESSDOESNOTEXIST
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_OLDDB_ADDRESSDOESNOTEXIST   ((HRESULT)0x8004120EL)

//
// MessageId: PP_E_OLDDB_CARDDOESNOTEXIST
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_OLDDB_CARDDOESNOTEXIST      ((HRESULT)0x8004120FL)

//
// MessageId: PP_E_OLDDB_ADDRESSREFERENCEDBYCARD
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_OLDDB_ADDRESSREFERENCEDBYCARD ((HRESULT)0x80041210L)

//
// MessageId: PP_E_OLDDB_KIDSSITENOTLISTED
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_OLDDB_KIDSSITENOTLISTED     ((HRESULT)0x80041211L)

//
// MessageId: PP_E_OLDDB_SITEALREADYREQUESTED
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_OLDDB_SITEALREADYREQUESTED  ((HRESULT)0x80041212L)

//
// MessageId: PP_E_OLDDB_CONNECTIONTIMEOUT
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_OLDDB_CONNECTIONTIMEOUT     ((HRESULT)0x80041213L)

//
// MessageId: PP_E_OLDDB_NOCONNECTIONAVAILABLE
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_OLDDB_NOCONNECTIONAVAILABLE ((HRESULT)0x80041224L)

//
// MessageId: PP_E_OLDDB_TOOMANYUSERSWITHTHISNAME
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_OLDDB_TOOMANYUSERSWITHTHISNAME ((HRESULT)0x80041225L)

//
// MessageId: PP_E_OLDDB_CERTSTOOMANY
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_OLDDB_CERTSTOOMANY          ((HRESULT)0x80041235L)

//
// MessageId: PP_E_OLDDB_EMAILBITWRONGCREDTYPE
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_OLDDB_EMAILBITWRONGCREDTYPE ((HRESULT)0x80041236L)

// base 0x1300
// Errors
#define PP_E_XML_BASE  0x1300
//
// MessageId: PP_E_XML_PARSE_ERROR
//
// MessageText:
//
//  Failed to Parse XML input.
//
#define PP_E_XML_PARSE_ERROR             ((HRESULT)0x80041300L)

//
// MessageId: PP_E_XML_NO_CLIENTINFO
//
// MessageText:
//
//  The client info not is absent.
//
#define PP_E_XML_NO_CLIENTINFO           ((HRESULT)0x80041301L)

//
// MessageId: PP_E_XML_UNKNOWN_CLIENTVERSION
//
// MessageText:
//
//  Client version is not supported.
//
#define PP_E_XML_UNKNOWN_CLIENTVERSION   ((HRESULT)0x80041302L)

//
// MessageId: PP_E_XML_NAME_AND_PASSWORD_BLANK
//
// MessageText:
//
//  User name or password is blank.
//
#define PP_E_XML_NAME_AND_PASSWORD_BLANK ((HRESULT)0x80041303L)

//
// MessageId: PP_E_XML_DOMAIN_BLANK
//
// MessageText:
//
//  Domain field is blank.
//
#define PP_E_XML_DOMAIN_BLANK            ((HRESULT)0x80041304L)

//
// MessageId: PP_E_XML_INCOMPLETE_MEMBERNAME
//
// MessageText:
//
//  Membername is incomplete.
//
#define PP_E_XML_INCOMPLETE_MEMBERNAME   ((HRESULT)0x80041305L)

//
// MessageId: PP_E_XML_NO_SUCH_NODE
//
// MessageText:
//
//  Missing XML node.
//
#define PP_E_XML_NO_SUCH_NODE            ((HRESULT)0x80041306L)

//
// MessageId: PP_E_XML_NO_TEXT
//
// MessageText:
//
//  The XML node has no text.
//
#define PP_E_XML_NO_TEXT                 ((HRESULT)0x80041307L)

//
// MessageId: PP_E_XML_INVALID_ROOTTAG
//
// MessageText:
//
//  The ROOT tag is invalid.
//
#define PP_E_XML_INVALID_ROOTTAG         ((HRESULT)0x80041308L)

//
// MessageId: PP_E_XML_USER_ALREADY_LOGGEDIN
//
// MessageText:
//
//  The user was already logged in.
//
#define PP_E_XML_USER_ALREADY_LOGGEDIN   ((HRESULT)0x80041309L)

//
// MessageId: PP_E_XML_KEYVERSION_NOT_A_NUMBER
//
// MessageText:
//
//  Key version is not a valid number.
//
#define PP_E_XML_KEYVERSION_NOT_A_NUMBER ((HRESULT)0x8004130AL)

//
// MessageId: PP_E_XML_NO_USER_LOGGED_IN
//
// MessageText:
//
//  No user has logged in.
//
#define PP_E_XML_NO_USER_LOGGED_IN       ((HRESULT)0x8004130BL)

//
// MessageId: PP_E_XML_NO_SUCH_ATTRIBUTE
//
// MessageText:
//
//  Missing XML attribute.
//
#define PP_E_XML_NO_SUCH_ATTRIBUTE       ((HRESULT)0x8004130CL)

//
// MessageId: PP_E_XML_PROXY_SITE_NOT_ALLOWED
//
// MessageText:
//
//  Proxy is not allowed for the site.
//
#define PP_E_XML_PROXY_SITE_NOT_ALLOWED  ((HRESULT)0x8004130DL)

//
// MessageId: PP_E_XML_PROXY_INVALID_LOGIN_SITE
//
// MessageText:
//
//  Proxy cannot sign in to the site.
//
#define PP_E_XML_PROXY_INVALID_LOGIN_SITE ((HRESULT)0x8004130EL)

//
// MessageId: PP_E_XML_PROXY_FAILED_TIMEWINDOW
//
// MessageText:
//
//  Invalid time window for xml proxy auth.
//
#define PP_E_XML_PROXY_FAILED_TIMEWINDOW ((HRESULT)0x8004130FL)

//
// MessageId: PP_E_XML_PROXY_PUID_INVALID
//
// MessageText:
//
//  Invalid PUID for xml proxy auth.
//
#define PP_E_XML_PROXY_PUID_INVALID      ((HRESULT)0x80041310L)

//
// MessageId: PP_E_XML_PROXY_PROOF_INVALID
//
// MessageText:
//
//  Invalid proof for proxy auth.
//
#define PP_E_XML_PROXY_PROOF_INVALID     ((HRESULT)0x80041311L)

//
// MessageId: PP_E_XML_PROXY_NOT_NAMESPACE_OWNER
//
// MessageText:
//
//  The proxy site does not own the namespace.
//
#define PP_E_XML_PROXY_NOT_NAMESPACE_OWNER ((HRESULT)0x80041312L)

//
// MessageId: PP_E_XML_NO_SIGNATURE_ELEMENT
//
// MessageText:
//
//  XML signature is missing.
//
#define PP_E_XML_NO_SIGNATURE_ELEMENT    ((HRESULT)0x80041313L)

//
// MessageId: PP_E_XML_INVALID_SIGNATURE
//
// MessageText:
//
//  Invalid XML signature.
//
#define PP_E_XML_INVALID_SIGNATURE       ((HRESULT)0x80041317L)

//
// MessageId: PP_E_XML_LOADFAILED
//
// MessageText:
//
//  Failed to load xml into DOM.
//
#define PP_E_XML_LOADFAILED              ((HRESULT)0x80041318L)

//
// MessageId: PP_E_XMLSIG_INCOMPLETE_INFO
//
// MessageText:
//
//  Incomplete XML signature.
//
#define PP_E_XMLSIG_INCOMPLETE_INFO      ((HRESULT)0x80041319L)

//
// MessageId: PP_E_XMLSIG_BAD_SIG_XML_TEXT
//
// MessageText:
//
//  XML signature text is incorrect.
//
#define PP_E_XMLSIG_BAD_SIG_XML_TEXT     ((HRESULT)0x8004131AL)

//
// MessageId: PP_E_XML_FCP_USER_NOT_FCP_IN_DB
//
// MessageText:
//
//  User force change password state was not written in DB.
//
#define PP_E_XML_FCP_USER_NOT_FCP_IN_DB  ((HRESULT)0x8004131BL)

// base 0x1500
//
// MessageId: PP_E_DIGEST_PARSE_AUTH_HEADER
//
// MessageText:
//
//  Failed to parse digest header.
//
#define PP_E_DIGEST_PARSE_AUTH_HEADER    ((HRESULT)0x80041500L)

//
// MessageId: PP_E_DIGEST_OPAQUE_MISSMATCH
//
// MessageText:
//
//  OPAQUE in the digest header does not match the challenge.
//
#define PP_E_DIGEST_OPAQUE_MISSMATCH     ((HRESULT)0x80041501L)

//
// MessageId: PP_E_DIGEST_ALGORITHM_MISSMATCH
//
// MessageText:
//
//  The Digest algorithm does not match the challenge.
//
#define PP_E_DIGEST_ALGORITHM_MISSMATCH  ((HRESULT)0x80041502L)

//
// MessageId: PP_E_DIGEST_REALMS_MISSMATCH
//
// MessageText:
//
//  Realms in the digest header does not match the challenge.
//
#define PP_E_DIGEST_REALMS_MISSMATCH     ((HRESULT)0x80041503L)

//
// MessageId: PP_E_DIGEST_URI_MISSMATCH
//
// MessageText:
//
//  Worng URI.
//
#define PP_E_DIGEST_URI_MISSMATCH        ((HRESULT)0x80041504L)

//
// MessageId: PP_E_DIGEST_USERNAME_MISSING
//
// MessageText:
//
//  User name is missing from the digest header.
//
#define PP_E_DIGEST_USERNAME_MISSING     ((HRESULT)0x80041505L)

//
// MessageId: PP_E_DIGEST_CNONCE_MISSING
//
// MessageText:
//
//  The CNONCE is missing from the digest header.
//
#define PP_E_DIGEST_CNONCE_MISSING       ((HRESULT)0x80041506L)

//
// MessageId: PP_E_DIGEST_NONCE_COUNT_MISSING
//
// MessageText:
//
//  The Nonce count is missing from the digest header.
//
#define PP_E_DIGEST_NONCE_COUNT_MISSING  ((HRESULT)0x80041507L)

//
// MessageId: PP_E_DIGEST_NONCE_MISSING
//
// MessageText:
//
//  The Nonce is missing from the digest header.
//
#define PP_E_DIGEST_NONCE_MISSING        ((HRESULT)0x80041508L)

//
// MessageId: PP_E_DIGEST_UNSUPPORTED_KPP_MODE
//
// MessageText:
//
//  The given KPP mode is not supported by Digest protocol.
//
#define PP_E_DIGEST_UNSUPPORTED_KPP_MODE ((HRESULT)0x80041509L)

//
// MessageId: PP_E_DIGEST_NONCE_MISSMATCH
//
// MessageText:
//
//  The Nonce does not match the challenge.
//
#define PP_E_DIGEST_NONCE_MISSMATCH      ((HRESULT)0x8004150AL)

//
// MessageId: PP_E_DIGEST_RESPONSE_TIMEOUT
//
// MessageText:
//
//  The response has timeout.
//
#define PP_E_DIGEST_RESPONSE_TIMEOUT     ((HRESULT)0x8004150BL)

//
// MessageId: PP_E_DIGEST_RESPONSE_MISSING
//
// MessageText:
//
//  The digest response is missing.
//
#define PP_E_DIGEST_RESPONSE_MISSING     ((HRESULT)0x8004150CL)

//
// MessageId: PP_E_DIGEST_QOP_MISSMATCH
//
// MessageText:
//
//  The digest QOP does not match the chellenge.
//
#define PP_E_DIGEST_QOP_MISSMATCH        ((HRESULT)0x8004150DL)

//
// MessageId: PP_E_DIGEST_INVALID_NONCE_COUNT
//
// MessageText:
//
//  The Nonce count in the header is invalid.
//
#define PP_E_DIGEST_INVALID_NONCE_COUNT  ((HRESULT)0x8004150EL)

//
// MessageId: PP_E_DIGEST_HOTMAIL_USERNAME_MISMATCH
//
// MessageText:
//
//  The user name in the header does not match the request. For HM account only.
//
#define PP_E_DIGEST_HOTMAIL_USERNAME_MISMATCH ((HRESULT)0x8004150FL)

// base 0x1800
// Errors
#define PP_E_NETPARTNERINFO_BASE  0x1800
//
// MessageId: PP_E_NETPARTNERINFO_UNINITIALZED
//
// MessageText:
//
//  The Netpartnerinfo object is uninitialized.
//
#define PP_E_NETPARTNERINFO_UNINITIALZED ((HRESULT)0x80041800L)

//
// MessageId: PP_E_NETPARTNERINFO_SITEID_NOT_FOUND
//
// MessageText:
//
//  The site id does not exist.
//
#define PP_E_NETPARTNERINFO_SITEID_NOT_FOUND ((HRESULT)0x80041801L)

//
// MessageId: PP_E_NETPARTNERINFO_DECRYPT_FAILED
//
// MessageText:
//
//  Failed to decrypt data. Check error code for reason.
//
#define PP_E_NETPARTNERINFO_DECRYPT_FAILED ((HRESULT)0x80041802L)

//
// MessageId: PP_E_NETPARTNERINFO_KEYSIZE_MISMATCH
//
// MessageText:
//
//  The size of the partner key is invalid.
//
#define PP_E_NETPARTNERINFO_KEYSIZE_MISMATCH ((HRESULT)0x80041803L)

//
// MessageId: PP_E_NETPARTNERINFO_CREATEFILE
//
// MessageText:
//
//  Failed to create the file for cached sites.
//
#define PP_E_NETPARTNERINFO_CREATEFILE   ((HRESULT)0x80041804L)

//
// MessageId: PP_E_NETPARTNERINFO_WRITEFILE
//
// MessageText:
//
//  Failed to write to site cache file.
//
#define PP_E_NETPARTNERINFO_WRITEFILE    ((HRESULT)0x80041805L)

//
// MessageId: PP_E_NETPARTNERINFO_READFILE
//
// MessageText:
//
//  Failed to read from the site cache file.
//
#define PP_E_NETPARTNERINFO_READFILE     ((HRESULT)0x80041806L)

//
// MessageId: PP_E_NETPARTNERINFO_KEY_EXPIRED
//
// MessageText:
//
//  The specific partner key has expired.
//
#define PP_E_NETPARTNERINFO_KEY_EXPIRED  ((HRESULT)0x80041807L)

//
// MessageId: PP_E_NSO_NOT_STARTED
//
// MessageText:
//
//  The NSO object is not started.
//
#define PP_E_NSO_NOT_STARTED             ((HRESULT)0x80041808L)

//
// MessageId: PP_E_ASYMKEYVER_BADKEYGROUP
//
// MessageText:
//
//  The value used for "keygroup" for the multiinstance property "AsymKeyGroupKeyIdPair" in CCM for this service is not supported.
//
#define PP_E_ASYMKEYVER_BADKEYGROUP      ((HRESULT)0x80041809L)

//
// MessageId: PP_E_ASYMKEYVER_NOTFOUND
//
// MessageText:
//
//  The asymmetric key for the specified key version and keygroup & key/key id cannot be found.
//
#define PP_E_ASYMKEYVER_NOTFOUND         ((HRESULT)0x8004180AL)

//
// MessageId: PP_E_ASYMKEYSKI_NOTFOUND
//
// MessageText:
//
//  The asymmetric key for the specified subject key identifier and keygroup & key/key id cannot be found.
//
#define PP_E_ASYMKEYSKI_NOTFOUND         ((HRESULT)0x8004180BL)

//
// MessageId: PP_E_ASYMKEY_DB_BADTYPE
//
// MessageText:
//
//  The data type for the row in PPKeys DB is not VT_BSTR or the PFX is 0 byte length.
//
#define PP_E_ASYMKEY_DB_BADTYPE          ((HRESULT)0x8004180CL)

//
// MessageId: PP_E_ASYMKEY_NONE_VALID
//
// MessageText:
//
//  No valid asymmetric keys (ie PFX) was found for the given key group and key id.
//
#define PP_E_ASYMKEY_NONE_VALID          ((HRESULT)0x8004180DL)

//
// MessageId: PP_E_ASYMKEY_HEXENCODE_SKI
//
// MessageText:
//
//  Fail to hex encode the subject key identifier.
//
#define PP_E_ASYMKEY_HEXENCODE_SKI       ((HRESULT)0x8004180EL)

//
// MessageId: PP_E_ASYMKEY_NOCOLON_KEYGROUPKEYIDPAIR
//
// MessageText:
//
//  The value for an instance of AsymKeyGroupKeyIdPair in CCM for the service is missing a colon.
//
#define PP_E_ASYMKEY_NOCOLON_KEYGROUPKEYIDPAIR ((HRESULT)0x8004180FL)

//
// MessageId: PP_E_ASYMKEY_KEYGROUP_INVALID
//
// MessageText:
//
//  The KeyGroup value for an instance of AsymKeyGroupKeyIdPair in CCM for the service is not supported.
//
#define PP_E_ASYMKEY_KEYGROUP_INVALID    ((HRESULT)0x80041810L)

//
// MessageId: PP_E_ASYMKEY_KEYID_MISSING
//
// MessageText:
//
//  The KeyId value for an instance of AsymKeyGroupKeyIdPair in CCM for the service is not missing. The format of the AsymKeyGroupKeyIdPair is keygroup:keyid.
//
#define PP_E_ASYMKEY_KEYID_MISSING       ((HRESULT)0x80041811L)

//
// MessageId: PP_E_ASYMKEY_KEYID_INVALID
//
// MessageText:
//
//  The KeyId value for an instance of AsymKeyGroupKeyIdPair in CCM for the service is invalid.
//
#define PP_E_ASYMKEY_KEYID_INVALID       ((HRESULT)0x80041812L)

//
// MessageId: PP_E_ASYMKEY_INSUFFICIENT_BUFFER
//
// MessageText:
//
//  There are more key group and key id combination than expected.
//
#define PP_E_ASYMKEY_INSUFFICIENT_BUFFER ((HRESULT)0x80041813L)

//
// MessageId: PP_E_ASYMKEY_NOT_INITIALIZED
//
// MessageText:
//
//  The asymmetric key cache has not been initialized.
//
#define PP_E_ASYMKEY_NOT_INITIALIZED     ((HRESULT)0x80041814L)

//
// MessageId: PP_E_ASYMKEYINFO_NOTINIT
//
// MessageText:
//
//  The asymmetric key interface was not initialized in the current object.
//
#define PP_E_ASYMKEYINFO_NOTINIT         ((HRESULT)0x80041815L)

// base 0x1A00
//
// MessageId: PP_E_GLOBALIZATION_INVALID_COUNTRY_ID
//
// MessageText:
//
//  Invalid Country Code specified. (hr=%1)
//
#define PP_E_GLOBALIZATION_INVALID_COUNTRY_ID ((HRESULT)0x80041A00L)

//
// MessageId: PP_E_GLOBALIZATION_INVALID_GEO_ID
//
// MessageText:
//
//  Invalid GEOID. (hr=%1)
//
#define PP_E_GLOBALIZATION_INVALID_GEO_ID ((HRESULT)0x80041A03L)

//
// MessageId: PP_E_GLOBALIZATION_INVALID_TIMEZONE_ID
//
// MessageText:
//
//  Invalid Timezone ID. (hr=%1)
//
#define PP_E_GLOBALIZATION_INVALID_TIMEZONE_ID ((HRESULT)0x80041A04L)

//
// MessageId: PP_E_GLOBALIZATION_INVALID_TIMEZONE
//
// MessageText:
//
//  Invalid Timezone. (hr=%1)
//
#define PP_E_GLOBALIZATION_INVALID_TIMEZONE ((HRESULT)0x80041A06L)

//
// MessageId: PP_E_GLOBALIZATION_INVALID_INDEX
//
// MessageText:
//
//  Invalid index into an array or list speficied. (hr=%1)
//
#define PP_E_GLOBALIZATION_INVALID_INDEX ((HRESULT)0x80041A07L)

//
// MessageId: PP_E_GLOBALIZATION_INVALID_DATA
//
// MessageText:
//
//  Invalid data specified. (hr=%1)
//
#define PP_E_GLOBALIZATION_INVALID_DATA  ((HRESULT)0x80041A08L)

//
// MessageId: PP_E_GLOBALIZATION_INVALID_DATA_TYPE
//
// MessageText:
//
//  Data has invalid data type. (hr=%1)
//
#define PP_E_GLOBALIZATION_INVALID_DATA_TYPE ((HRESULT)0x80041A09L)

//
// MessageId: PP_E_GLOBALIZATION_OBJ_IS_NULL
//
// MessageText:
//
//  Object is NULL. (hr=%1)
//
#define PP_E_GLOBALIZATION_OBJ_IS_NULL   ((HRESULT)0x80041A0AL)

//
// MessageId: PP_E_GLOBALIZATION_PTR_IS_NULL
//
// MessageText:
//
//  Pointer is NULL. (hr=%1)
//
#define PP_E_GLOBALIZATION_PTR_IS_NULL   ((HRESULT)0x80041A0BL)

//
// MessageId: PP_E_GLOBALIZATION_STREAM_IS_NULL
//
// MessageText:
//
//  File reading stream is NULL. (hr=%1)
//
#define PP_E_GLOBALIZATION_STREAM_IS_NULL ((HRESULT)0x80041A0CL)

//
// MessageId: PP_E_GLOBALIZATION_LCIDINFO_PARSE_ERROR
//
// MessageText:
//
//  Error parsing LCIDInfo file. (hr=%1)
//
#define PP_E_GLOBALIZATION_LCIDINFO_PARSE_ERROR ((HRESULT)0x80041A0EL)

//
// MessageId: PP_E_GLOBALIZATION_LCIDMAP_PARSE_ERR
//
// MessageText:
//
//  Error parsing LCID Map. (hr=%1)
//
#define PP_E_GLOBALIZATION_LCIDMAP_PARSE_ERR ((HRESULT)0x80041A0FL)

//
// MessageId: PP_E_GLOBALIZATION_ALREADY_LOADED
//
// MessageText:
//
//  Engine already loaded. (hr=%1)
//
#define PP_E_GLOBALIZATION_ALREADY_LOADED ((HRESULT)0x80041A10L)

//
// MessageId: PP_E_GLOBALIZATION_LCIDINFO_NOT_LOADED
//
// MessageText:
//
//  LCIDInfo is not yet loaded. (hr=%1)
//
#define PP_E_GLOBALIZATION_LCIDINFO_NOT_LOADED ((HRESULT)0x80041A11L)

//
// MessageId: PP_E_GLOBALIZATION_LCIDINFO_NOT_PREPARED
//
// MessageText:
//
//  LCIDInfo not prepared for reload. (hr=%1)
//
#define PP_E_GLOBALIZATION_LCIDINFO_NOT_PREPARED ((HRESULT)0x80041A12L)

//
// MessageId: PP_E_GLOBALIZATION_REGION_LOAD_FAILED
//
// MessageText:
//
//  Error loading Region object. (hr=%1)
//
#define PP_E_GLOBALIZATION_REGION_LOAD_FAILED ((HRESULT)0x80041A13L)

//
// MessageId: PP_E_GLOBALIZATION_TIMEZONE_LOAD_FAILED
//
// MessageText:
//
//  Error loading Timezone object. (hr=%1)
//
#define PP_E_GLOBALIZATION_TIMEZONE_LOAD_FAILED ((HRESULT)0x80041A14L)

//
// MessageId: PP_E_GLOBALIZATION_LOOKUP_OBJ_FAILED
//
// MessageText:
//
//  Error looking up a glb object such as country or region. (hr=%1)
//
#define PP_E_GLOBALIZATION_LOOKUP_OBJ_FAILED ((HRESULT)0x80041A15L)

//
// MessageId: PP_E_GLOBALIZATION_LOADVALUES_FAILED
//
// MessageText:
//
//  Data population failed. (hr=%1)
//
#define PP_E_GLOBALIZATION_LOADVALUES_FAILED ((HRESULT)0x80041A16L)

//
// MessageId: PP_E_GLOBALIZATION_GETLOCALEINFO_FAILED
//
// MessageText:
//
//  Error getting LocaleInfo object. (hr=%1)
//
#define PP_E_GLOBALIZATION_GETLOCALEINFO_FAILED ((HRESULT)0x80041A17L)

//
// MessageId: PP_E_GLOBALIZATION_STRING_RETURNED
//
// MessageText:
//
//  Error parsing.  String returned. (hr=%1)
//
#define PP_E_GLOBALIZATION_STRING_RETURNED ((HRESULT)0x80041A18L)

//
// MessageId: PP_E_GLOBALIZATION_W2A_FAILED
//
// MessageText:
//
//  String conversion failed. (hr=%1)
//
#define PP_E_GLOBALIZATION_W2A_FAILED    ((HRESULT)0x80041A19L)

//
// MessageId: PP_E_GLOBALIZATION_A2W_FAILED
//
// MessageText:
//
//  String conversion failed. (hr=%1)
//
#define PP_E_GLOBALIZATION_A2W_FAILED    ((HRESULT)0x80041A1AL)

//
// MessageId: PP_E_GLOBALIZATION_INSTREAM_FAILED
//
// MessageText:
//
//  Stream failure. (hr=%1)
//
#define PP_E_GLOBALIZATION_INSTREAM_FAILED ((HRESULT)0x80041A1BL)

//
// MessageId: PP_E_GLOBALIZATION_GET_LCIDINFODIR_FAILED
//
// MessageText:
//
//  Error getting the LCIDInfo directory. (hr=%1)
//
#define PP_E_GLOBALIZATION_GET_LCIDINFODIR_FAILED ((HRESULT)0x80041A1CL)

//
// MessageId: PP_E_GLOBALIZATION_STRING_TOO_LONG
//
// MessageText:
//
//  String too long. (hr=%1)
//
#define PP_E_GLOBALIZATION_STRING_TOO_LONG ((HRESULT)0x80041A1DL)

//
// MessageId: PP_E_GLOBALIZATION_IDTABLE_NOT_INIT
//
// MessageText:
//
//  IDTable not initialized yet. (hr=%1)
//
#define PP_E_GLOBALIZATION_IDTABLE_NOT_INIT ((HRESULT)0x80041A1EL)

//
// MessageId: PP_E_GLOBALIZATION_CS_INIT_FAILED
//
// MessageText:
//
//  CriticalSection init failed. (hr=%1)
//
#define PP_E_GLOBALIZATION_CS_INIT_FAILED ((HRESULT)0x80041A20L)

//
// MessageId: PP_E_GLOBALIZATION_DICTIONARY_IS_NULL
//
// MessageText:
//
//  Dictionary is null. (hr=%1)
//
#define PP_E_GLOBALIZATION_DICTIONARY_IS_NULL ((HRESULT)0x80041A21L)

//
// MessageId: PP_E_GLOBALIZATION_GET_LIBRARYPATH_FAILED
//
// MessageText:
//
//  Getting the library path failed. (hr=%1)
//
#define PP_E_GLOBALIZATION_GET_LIBRARYPATH_FAILED ((HRESULT)0x80041A22L)

//
// MessageId: PP_E_GLOBALIZATION_EUCOUNTRYNEEDSOPTOUT
//
// MessageText:
//
//  Eu country is missing opt out data. (hr=%1)
//
#define PP_E_GLOBALIZATION_EUCOUNTRYNEEDSOPTOUT ((HRESULT)0x80041A23L)

//
// MessageId: PP_E_GLOBALIZATION_INVALID_LOCATION_ELEMENT_NAME
//
// MessageText:
//
//  Invalid location element name. (hr=%1)
//
#define PP_E_GLOBALIZATION_INVALID_LOCATION_ELEMENT_NAME ((HRESULT)0x80041A24L)

//
// MessageId: PP_E_GLOBALIZATION_DUPLICATE_LOCATION_ELEMENT_NAME
//
// MessageText:
//
//  Duplicate location element name. (hr=%1)
//
#define PP_E_GLOBALIZATION_DUPLICATE_LOCATION_ELEMENT_NAME ((HRESULT)0x80041A25L)

// base 0x1B00
//
// MessageId: PP_E_DELEGADMIN_INVALID_ADMIN_ELE
//
// MessageText:
//
//  Invalid Admin element
//
#define PP_E_DELEGADMIN_INVALID_ADMIN_ELE ((HRESULT)0x80041B00L)

//
// MessageId: PP_E_DELEGADMIN_INVALID_ADMIN_TICKET
//
// MessageText:
//
//  Invalid Admin Ticket
//
#define PP_E_DELEGADMIN_INVALID_ADMIN_TICKET ((HRESULT)0x80041B01L)

//
// MessageId: PP_E_DELEGADMIN_DOMAIN_ALREADY_MANAGED
//
// MessageText:
//
//  Domain already managed
//
#define PP_E_DELEGADMIN_DOMAIN_ALREADY_MANAGED ((HRESULT)0x80041B02L)

//
// MessageId: PP_E_DELEGADMIN_DOMAIN_NOT_MANAGED
//
// MessageText:
//
//  Domain not managed
//
#define PP_E_DELEGADMIN_DOMAIN_NOT_MANAGED ((HRESULT)0x80041B03L)

//
// MessageId: PP_E_DELEGADMIN_DOMAIN_NOT_PARTNERS
//
// MessageText:
//
//  Domain not managed by partner
//
#define PP_E_DELEGADMIN_DOMAIN_NOT_PARTNERS ((HRESULT)0x80041B04L)

//
// MessageId: PP_E_DELEGADMIN_INVALID_NS_ADMIN
//
// MessageText:
//
//  Invalid namespace admin
//
#define PP_E_DELEGADMIN_INVALID_NS_ADMIN ((HRESULT)0x80041B05L)

//
// MessageId: PP_E_DELEGADMIN_INVALID_PARTNER_ADMIN
//
// MessageText:
//
//  Invalid partner admin
//
#define PP_E_DELEGADMIN_INVALID_PARTNER_ADMIN ((HRESULT)0x80041B06L)

//
// MessageId: PP_E_DELEGADMIN_ERROR_LOADING_XMLRQ
//
// MessageText:
//
//  Error loading XML request
//
#define PP_E_DELEGADMIN_ERROR_LOADING_XMLRQ ((HRESULT)0x80041B07L)

//
// MessageId: PP_E_DELEGADMIN_INVALID_AUTH_ELE
//
// MessageText:
//
//  Invalid Authorization element
//
#define PP_E_DELEGADMIN_INVALID_AUTH_ELE ((HRESULT)0x80041B08L)

//
// MessageId: PP_E_DELEGADMIN_INVALID_DOMAIN
//
// MessageText:
//
//  Invalid domain - invalid character or too many characters in domain name.
//
#define PP_E_DELEGADMIN_INVALID_DOMAIN   ((HRESULT)0x80041B09L)

//
// MessageId: PP_E_DELEGADMIN_INVALID_ACTION
//
// MessageText:
//
//  Invalid action paramter
//
#define PP_E_DELEGADMIN_INVALID_ACTION   ((HRESULT)0x80041B0AL)

//
// MessageId: PP_E_DELEGADMIN_NOTALLOWED
//
// MessageText:
//
//  Action not allowed
//
#define PP_E_DELEGADMIN_NOTALLOWED       ((HRESULT)0x80041B0CL)

//
// MessageId: PP_E_DELEGADMIN_INVALID_CLIENTVERSION
//
// MessageText:
//
//  Invalid version
//
#define PP_E_DELEGADMIN_INVALID_CLIENTVERSION ((HRESULT)0x80041B0BL)

//
// MessageId: PP_E_DELEGADMIN_INVALID_USER
//
// MessageText:
//
//  Invalid user
//
#define PP_E_DELEGADMIN_INVALID_USER     ((HRESULT)0x80041B0DL)

//
// MessageId: PP_E_DELEGADMIN_INVALID_USER_ELE
//
// MessageText:
//
//  Invalid user element
//
#define PP_E_DELEGADMIN_INVALID_USER_ELE ((HRESULT)0x80041B0EL)

//
// MessageId: PP_E_DELEGADMIN_INVALID_PARAM
//
// MessageText:
//
//  Invalid parameter
//
#define PP_E_DELEGADMIN_INVALID_PARAM    ((HRESULT)0x80041B0FL)

//
// MessageId: PP_E_DELEGADMIN_NOT_NAMESPACE_PARTNER
//
// MessageText:
//
//  Not a namespace partner
//
#define PP_E_DELEGADMIN_NOT_NAMESPACE_PARTNER ((HRESULT)0x80041B10L)

//
// MessageId: PP_E_DELEGADMIN_INVALID_SITEID
//
// MessageText:
//
//  Invalid site ID
//
#define PP_E_DELEGADMIN_INVALID_SITEID   ((HRESULT)0x80041B11L)

//
// MessageId: PP_E_DELEGADMIN_TICKET_EXPIRED
//
// MessageText:
//
//  Admin ticket has expired
//
#define PP_E_DELEGADMIN_TICKET_EXPIRED   ((HRESULT)0x80041B12L)

//
// MessageId: PP_E_DELEGADMIN_INVALID_ENUM_TYPE
//
// MessageText:
//
//  Invalid enumeration type
//
#define PP_E_DELEGADMIN_INVALID_ENUM_TYPE ((HRESULT)0x80041B14L)

//
// MessageId: PP_E_DELEGADMIN_ALREADY_AN_ADMIN
//
// MessageText:
//
//  Already an admin
//
#define PP_E_DELEGADMIN_ALREADY_AN_ADMIN ((HRESULT)0x80041B15L)

//
// MessageId: PP_E_DELEGADMIN_LAST_ADMIN
//
// MessageText:
//
//  Can't delete last admin
//
#define PP_E_DELEGADMIN_LAST_ADMIN       ((HRESULT)0x80041B16L)

//
// MessageId: PP_E_DELEGADMIN_INVALID_ADMIN
//
// MessageText:
//
//  Invalid admin
//
#define PP_E_DELEGADMIN_INVALID_ADMIN    ((HRESULT)0x80041B17L)

//
// MessageId: PP_E_DELEGADMIN_INVALID_CRED_TYPE
//
// MessageText:
//
//  Invalid credential type
//
#define PP_E_DELEGADMIN_INVALID_CRED_TYPE ((HRESULT)0x80041B18L)

//
// MessageId: PP_E_DELEGADMIN_INVALID_PASSWORD
//
// MessageText:
//
//  Invalid password
//
#define PP_E_DELEGADMIN_INVALID_PASSWORD ((HRESULT)0x80041B1BL)

//
// MessageId: PP_E_DELEGADMIN_INVALID_STATUS
//
// MessageText:
//
//  Invalid status
//
#define PP_E_DELEGADMIN_INVALID_STATUS   ((HRESULT)0x80041B20L)

//
// MessageId: PP_E_DELEGADMIN_CANTRELEASEINTERNAL
//
// MessageText:
//
//  Can not release internally managed domain
//
#define PP_E_DELEGADMIN_CANTRELEASEINTERNAL ((HRESULT)0x80041B21L)

//
// MessageId: PP_E_DELEGADMIN_INVALID_OPTIONS_ELE
//
// MessageText:
//
//  Error in Options element
//
#define PP_E_DELEGADMIN_INVALID_OPTIONS_ELE ((HRESULT)0x80041B22L)

//
// MessageId: PP_E_DELEGADMIN_INVALID_FIELDS_ELE
//
// MessageText:
//
//  Invalid Fields element
//
#define PP_E_DELEGADMIN_INVALID_FIELDS_ELE ((HRESULT)0x80041B23L)

//
// MessageId: PP_E_DELEGADMIN_INVALID_CATEGORY
//
// MessageText:
//
//  Invalid or missing category
//
#define PP_E_DELEGADMIN_INVALID_CATEGORY ((HRESULT)0x80041B24L)

//
// MessageId: PP_E_DELEGADMIN_INVALID_START_TIME
//
// MessageText:
//
//  Invalid or missing start date/time
//
#define PP_E_DELEGADMIN_INVALID_START_TIME ((HRESULT)0x80041B25L)

//
// MessageId: PP_E_DELEGADMIN_INVALID_END_TIME
//
// MessageText:
//
//  Invalid or missing end date/time
//
#define PP_E_DELEGADMIN_INVALID_END_TIME ((HRESULT)0x80041B26L)

//
// MessageId: PP_E_DELEGADMIN_INVALID_DA
//
// MessageText:
//
//  Invalid DA
//
#define PP_E_DELEGADMIN_INVALID_DA       ((HRESULT)0x80041B27L)

//
// MessageId: PP_E_DELEGADMIN_INVALID_MAXRECORDS
//
// MessageText:
//
//  Invalid maximum number of records
//
#define PP_E_DELEGADMIN_INVALID_MAXRECORDS ((HRESULT)0x80041B28L)

// base 0x1D00
//------------------------------------------------------------------------
// Profile Server error codes
//------------------------------------------------------------------------
//
// MessageId: PP_E_UPDATE_UPDATES_NOT_ALLOWED
//
// MessageText:
//
//  Partner not allowed to update protected field.
//
#define PP_E_UPDATE_UPDATES_NOT_ALLOWED  ((HRESULT)0x80041C00L)

//
// MessageId: PP_E_UPDATE_PARSER_NOTINITED
//
// MessageText:
//
//  Update parser was not initialized before use.
//
#define PP_E_UPDATE_PARSER_NOTINITED     ((HRESULT)0x80041B29L)

//
// MessageId: PP_E_UPDATE_DECRYPT_FAILED
//
// MessageText:
//
//  Update was unable to decrypt input.
//
#define PP_E_UPDATE_DECRYPT_FAILED       ((HRESULT)0x80041C01L)

//
// MessageId: PP_E_UPDATE_MULTIBYTECONVERSIONFAILED
//
// MessageText:
//
//  Update was unable to convert multi-byte input to wide char.
//
#define PP_E_UPDATE_MULTIBYTECONVERSIONFAILED ((HRESULT)0x80041C02L)

//
// MessageId: PP_E_UPDATE_UNABLETOGETPUID
//
// MessageText:
//
//  Update was unable to find a PUID for the provided user information.
//
#define PP_E_UPDATE_UNABLETOGETPUID      ((HRESULT)0x80041C03L)

#define PP_E_PROFILE_BASE 0x1D09
//
// MessageId: PP_E_KID_CANNOT_CHANGE_PROPERTY
//
// MessageText:
//
//  Child not allowed to change age-based policy dependent property.
//
#define PP_E_KID_CANNOT_CHANGE_PROPERTY  ((HRESULT)0x80041D09L)

//
// MessageId: PP_E_CCVALIDATIONFAILED
//
// MessageText:
//
//  Credit card validation failed.
//
#define PP_E_CCVALIDATIONFAILED          ((HRESULT)0x80041D0AL)

//
// MessageId: PP_E_PROFILEFLAGS_MISSING
//
// MessageText:
//
//  Passport Manager could not return the Profile flags.
//
#define PP_E_PROFILEFLAGS_MISSING        ((HRESULT)0x80041B2AL)

//
// MessageId: PP_E_XMLEDITPROF_FAILED
//
// MessageText:
//
//  XML Edit Profile failed due to validation errors.
//
#define PP_E_XMLEDITPROF_FAILED          ((HRESULT)0x80041D0BL)

//
// MessageId: PP_E_XMLREG_FAILED
//
// MessageText:
//
//  XML Registration failed.
//
#define PP_E_XMLREG_FAILED               ((HRESULT)0x80041B2BL)

//
// MessageId: PP_E_EMAILRESPONSE_ERROR
//
// MessageText:
//
//  The email response returned an error.
//
#define PP_E_EMAILRESPONSE_ERROR         ((HRESULT)0x80041B2CL)

//
// MessageId: PP_E_IsSiteIDValid_RETURN_INVALID
//
// MessageText:
//
//  IsSiteIDValid function returned an invalid result.
//
#define PP_E_IsSiteIDValid_RETURN_INVALID ((HRESULT)0x80041B2DL)

//
// MessageId: PP_E_dwAuxErr
//
// MessageText:
//
//  An error occurred during XML Registration.
//
#define PP_E_dwAuxErr                    ((HRESULT)0x80041B2EL)

//
// MessageId: PP_E_PROFILEVERSION_IS_EMPTY
//
// MessageText:
//
//  The setting for the Profile Version property is empty.
//
#define PP_E_PROFILEVERSION_IS_EMPTY     ((HRESULT)0x80041B2FL)

//
// MessageId: PP_E_COUNTRY_IS_NOTBSTR
//
// MessageText:
//
//  The profile property Country is set with an unexpected type.
//
#define PP_E_COUNTRY_IS_NOTBSTR          ((HRESULT)0x80041B30L)

//
// MessageId: PP_E_POSTALCODE_IS_NOTBSTR
//
// MessageText:
//
//  The profile property Postal Code is set with an unexpected type.
//
#define PP_E_POSTALCODE_IS_NOTBSTR       ((HRESULT)0x80041B31L)

//
// MessageId: PP_E_FIRSTNAME_IS_NOTBSTR
//
// MessageText:
//
//  The profile property First Name is set with an unexpected type.
//
#define PP_E_FIRSTNAME_IS_NOTBSTR        ((HRESULT)0x80041B32L)

//
// MessageId: PP_E_LASTNAME_IS_NOTBSTR
//
// MessageText:
//
//  The profile property Last Name is set with an unexpected type.
//
#define PP_E_LASTNAME_IS_NOTBSTR         ((HRESULT)0x80041B33L)

//
// MessageId: PP_E_OCCUPATION_IS_NOTBSTR
//
// MessageText:
//
//  The profile property Occupation is set with an unexpected type.
//
#define PP_E_OCCUPATION_IS_NOTBSTR       ((HRESULT)0x80041B34L)

//Profile
////#define PP_E_PROFILE_BASE 0x1D30
//
// MessageId: PP_E_PROF_GETREQUESTLOCALE_FAILED
//
// MessageText:
//
//  GetRequestLocale failed
//
#define PP_E_PROF_GETREQUESTLOCALE_FAILED ((HRESULT)0x80041D30L)

//
// MessageId: PP_E_PROF_GETDICTIONARY_FAILED
//
// MessageText:
//
//  GetDictionary failed
//
#define PP_E_PROF_GETDICTIONARY_FAILED   ((HRESULT)0x80041D31L)

//
// MessageId: PP_E_PROF_UNABLE_TO_GET_VALIDATOROBJECT
//
// MessageText:
//
//  GetValidatorObject failed
//
#define PP_E_PROF_UNABLE_TO_GET_VALIDATOROBJECT ((HRESULT)0x80041D32L)

//
// MessageId: PP_E_PROF_PCR_RELATIONSHIPID_NULL
//
// MessageText:
//
//  Parent-Child relationship ID is null
//
#define PP_E_PROF_PCR_RELATIONSHIPID_NULL ((HRESULT)0x80041D33L)

//
// MessageId: PP_E_PROF_GLOBALIZATION_DICTIONARY_IS_NULL
//
// MessageText:
//
//  GetDictionaryObject returned a Null pointer
//
#define PP_E_PROF_GLOBALIZATION_DICTIONARY_IS_NULL ((HRESULT)0x80041D34L)

//
// MessageId: PP_E_PROF_XMLEDITPROF_FAILED
//
// MessageText:
//
//  XML Edit profile failed
//
#define PP_E_PROF_XMLEDITPROF_FAILED     ((HRESULT)0x80041D35L)

//
// MessageId: PP_E_PROF_IsSiteIDValid_RETURN_INVALID
//
// MessageText:
//
//  Invalid site ID fallthrough case
//
#define PP_E_PROF_IsSiteIDValid_RETURN_INVALID ((HRESULT)0x80041D36L)

//
// MessageId: PP_E_PROF_PROFILEFLAGS_MISSING
//
// MessageText:
//
//  Profile flags missing
//
#define PP_E_PROF_PROFILEFLAGS_MISSING   ((HRESULT)0x80041D37L)

//
// MessageId: PP_E_PROF_EMAILRESPONSE_ERROR
//
// MessageText:
//
//  EmailResponse is returning S_FALSE, which is actually an error condition
//
#define PP_E_PROF_EMAILRESPONSE_ERROR    ((HRESULT)0x80041D38L)

//
// MessageId: PP_E_PROF_CCVALIDATIONFAILED
//
// MessageText:
//
//  Credit card validation failed
//
#define PP_E_PROF_CCVALIDATIONFAILED     ((HRESULT)0x80041D0CL)

//
// MessageId: PP_E_PROF_KID_CANNOT_CHANGE_PROPERTY
//
// MessageText:
//
//  Kid can not change property
//
#define PP_E_PROF_KID_CANNOT_CHANGE_PROPERTY ((HRESULT)0x80041D0DL)

//
// MessageId: PP_E_PROF_DELETEACCOUNTNOTALLOWED
//
// MessageText:
//
//  The account being closed has issues preventing it from being deleted.
//
#define PP_E_PROF_DELETEACCOUNTNOTALLOWED ((HRESULT)0x80041D39L)

//Registration
////#define PP_E_REG_BASE 0x7600
//
// MessageId: PP_E_REG_NO_STEPS_PRESENT
//
// MessageText:
//
//  No steps present
//
#define PP_E_REG_NO_STEPS_PRESENT        ((HRESULT)0x80047600L)

//
// MessageId: PP_E_REG_dwAuxErr
//
// MessageText:
//
//  XML Reg internal error
//
#define PP_E_REG_dwAuxErr                ((HRESULT)0x80047601L)

//
// MessageId: PP_E_REG_XMLREG_FAILED
//
// MessageText:
//
//  XML Reg failed
//
#define PP_E_REG_XMLREG_FAILED           ((HRESULT)0x80047602L)

//
// MessageId: PP_E_UPDATE_INVALID_BAMDATE
//
// MessageText:
//
//  Invalid bam date string passed to update server
//
#define PP_E_UPDATE_INVALID_BAMDATE      ((HRESULT)0x80047603L)

//
// MessageId: PP_E_MEMBERNAMEMALFORMED
//
// MessageText:
//
//  Membername is not in the expected format
//
#define PP_E_MEMBERNAMEMALFORMED         ((HRESULT)0x80047604L)

//
// MessageId: PP_E_MOBILEREGNOTPOST
//
// MessageText:
//
//  All requests to mobile reg must be posts
//
#define PP_E_MOBILEREGNOTPOST            ((HRESULT)0x80047605L)

// base 0x1E10
//
// MessageId: PP_E_PST_INVSEARCHTYPE
//
// MessageText:
//
//  Invalid search type
//
#define PP_E_PST_INVSEARCHTYPE           ((HRESULT)0x80047606L)

//
// MessageId: PP_E_PST_INVSIGNIN
//
// MessageText:
//
//  Invalid sign in
//
#define PP_E_PST_INVSIGNIN               ((HRESULT)0x80047607L)

//
// MessageId: PP_E_PST_INVPUID
//
// MessageText:
//
//  Invalid PUID
//
#define PP_E_PST_INVPUID                 ((HRESULT)0x80047608L)

//
// MessageId: PP_E_PST_SEARCH_ERR
//
// MessageText:
//
//  Search error
//
#define PP_E_PST_SEARCH_ERR              ((HRESULT)0x80047609L)

//
// MessageId: PP_E_PST_SEARCH_NOTFOUND
//
// MessageText:
//
//  Not found
//
#define PP_E_PST_SEARCH_NOTFOUND         ((HRESULT)0x8004760AL)

//
// MessageId: PP_E_PST_SEARCH_BADRESULTS
//
// MessageText:
//
//  Bad results from search
//
#define PP_E_PST_SEARCH_BADRESULTS       ((HRESULT)0x8004760BL)

//
// MessageId: PP_E_PST_INVTICKET
//
// MessageText:
//
//  Invalid ticket
//
#define PP_E_PST_INVTICKET               ((HRESULT)0x8004760CL)

//
// MessageId: PP_E_PST_INVDUALINPUT
//
// MessageText:
//
//  Dual input
//
#define PP_E_PST_INVDUALINPUT            ((HRESULT)0x8004760DL)

//
// MessageId: PP_E_PST_INVDUALEMPTY
//
// MessageText:
//
//  No input
//
#define PP_E_PST_INVDUALEMPTY            ((HRESULT)0x8004760EL)

//
// MessageId: PP_E_PST_DECLERR
//
// MessageText:
//
//  Declaration error
//
#define PP_E_PST_DECLERR                 ((HRESULT)0x8004760FL)

//
// MessageId: PP_E_PST_INVNAME
//
// MessageText:
//
//  Invalid name
//
#define PP_E_PST_INVNAME                 ((HRESULT)0x80047610L)

//
// MessageId: PP_E_PST_CSRSEARCH_BADRESULTS
//
// MessageText:
//
//  Bad results
//
#define PP_E_PST_CSRSEARCH_BADRESULTS    ((HRESULT)0x80047611L)

//
// MessageId: PP_E_PST_FINDCSR_EMPTY
//
// MessageText:
//
//  No CSRs
//
#define PP_E_PST_FINDCSR_EMPTY           ((HRESULT)0x80047612L)

//
// MessageId: PP_E_PST_NOHEADERFORCALL
//
// MessageText:
//
//  Missing Header
//
#define PP_E_PST_NOHEADERFORCALL         ((HRESULT)0x80047613L)

//
// MessageId: PP_E_PST_NOEXTPROF
//
// MessageText:
//
//  No Extended Profile
//
#define PP_E_PST_NOEXTPROF               ((HRESULT)0x80047614L)

//
// MessageId: PP_E_PST_NOROLE
//
// MessageText:
//
//  No Extended Profile
//
#define PP_E_PST_NOROLE                  ((HRESULT)0x80047615L)

//
// MessageId: PP_E_PST_INVCSRXML
//
// MessageText:
//
//  Invalid Query CSRs XML
//
#define PP_E_PST_INVCSRXML               ((HRESULT)0x80047616L)

//
// MessageId: PP_E_PST_INVMENUXML
//
// MessageText:
//
//  Invalid Menu XML
//
#define PP_E_PST_INVMENUXML              ((HRESULT)0x80047617L)

//
// MessageId: PP_E_PST_INVPROFXML
//
// MessageText:
//
//  Invalid Profile XML
//
#define PP_E_PST_INVPROFXML              ((HRESULT)0x80047618L)

//
// MessageId: PP_E_PST_INVEXTPROFXML
//
// MessageText:
//
//  Invalid CSR Ext Profile XML
//
#define PP_E_PST_INVEXTPROFXML           ((HRESULT)0x80047619L)

//
// MessageId: PP_E_PST_INVCREDXML
//
// MessageText:
//
//  Invalid Credentials XML
//
#define PP_E_PST_INVCREDXML              ((HRESULT)0x8004761AL)

//
// MessageId: PP_E_PST_INVRELSXML
//
// MessageText:
//
//  Invalid Relationships (internally generated) XML
//
#define PP_E_PST_INVRELSXML              ((HRESULT)0x8004761BL)

//
// MessageId: PP_E_PST_INVKCONSXML
//
// MessageText:
//
//  Invalid Per site consent XML
//
#define PP_E_PST_INVKCONSXML             ((HRESULT)0x8004761CL)

//
// MessageId: PP_E_PST_INVFTCONSXML
//
// MessageText:
//
//  Invalid Per policy group consent XML
//
#define PP_E_PST_INVFTCONSXML            ((HRESULT)0x8004761DL)

//
// MessageId: PP_E_PST_INVINTXML
//
// MessageText:
//
//  Invalid Intention XML
//
#define PP_E_PST_INVINTXML               ((HRESULT)0x8004761EL)

//
// MessageId: PP_E_PST_INVAUTHZXML
//
// MessageText:
//
//  Invalid AuthZ XML
//
#define PP_E_PST_INVAUTHZXML             ((HRESULT)0x8004761FL)

//
// MessageId: PP_E_PST_INVEVALAUTHZXML
//
// MessageText:
//
//  Invalid EvalAuthZ XML
//
#define PP_E_PST_INVEVALAUTHZXML         ((HRESULT)0x80047620L)

//
// MessageId: PP_E_PST_INVROLELISTXML
//
// MessageText:
//
//  Invalid RoleList XML
//
#define PP_E_PST_INVROLELISTXML          ((HRESULT)0x80047621L)

//
// MessageId: PP_E_PST_INVFIELDONLYREPORTXML
//
// MessageText:
//
//  Invalid Field only report XML
//
#define PP_E_PST_INVFIELDONLYREPORTXML   ((HRESULT)0x80047622L)

//
// MessageId: PP_E_PST_INVCREDRENAMEREPORTXML
//
// MessageText:
//
//  Invalid Credential rename report XML
//
#define PP_E_PST_INVCREDRENAMEREPORTXML  ((HRESULT)0x80047623L)

//
// MessageId: PP_E_PST_INVATTRONLYREPORTXML
//
// MessageText:
//
//  Invalid Attribute only report XML
//
#define PP_E_PST_INVATTRONLYREPORTXML    ((HRESULT)0x80047624L)

//
// MessageId: PP_E_PST_INVCERTXML
//
// MessageText:
//
//  Invalid Certificates XML
//
#define PP_E_PST_INVCERTXML              ((HRESULT)0x80047625L)

//
// MessageId: PP_E_PST_INVCLOGREPORTXML
//
// MessageText:
//
//  Invalid CLog report XML
//
#define PP_E_PST_INVCLOGREPORTXML        ((HRESULT)0x80047626L)

//
// MessageId: PP_E_PST_INVPUID2SIXML
//
// MessageText:
//
//  Invalid PUID to SignIn XML
//
#define PP_E_PST_INVPUID2SIXML           ((HRESULT)0x80047627L)

//
// MessageId: PP_E_PST_INVPROFFAILXML
//
// MessageText:
//
//  Invalid Profile failures XML
//
#define PP_E_PST_INVPROFFAILXML          ((HRESULT)0x80047628L)

//
// MessageId: PP_E_PST_INVSOAPFAILXML
//
// MessageText:
//
//  Invalid SOAP failure XML
//
#define PP_E_PST_INVSOAPFAILXML          ((HRESULT)0x80047629L)

//
// MessageId: PP_E_PST_PARTNERXMLLOOKUPFAILED
//
// MessageText:
//
//  Unable to look up URL in Partner XML
//
#define PP_E_PST_PARTNERXMLLOOKUPFAILED  ((HRESULT)0x8004762AL)

//
// MessageId: PP_E_PST_NOPPTICKET
//
// MessageText:
//
//  No passport Ticket information available to put into the request
//
#define PP_E_PST_NOPPTICKET              ((HRESULT)0x8004762BL)

// base 0x1f00
// Errors
#define PP_E_MSPPEXT_BASE  0x1F00
//
// MessageId: PP_E_MSPPEXT_GETEXTVERSION_FAILED
//
// MessageText:
//
//  The web service has failed during initialization of the ISAPI extension. Threads and memory are initialized during this time.
//
#define PP_E_MSPPEXT_GETEXTVERSION_FAILED ((HRESULT)0x80041F00L)

//
// MessageId: PP_E_MSPPEXT_GETENV_FAILED
//
// MessageText:
//
//  The config.ini file used by the web service does not have an "environment" section.
//
#define PP_E_MSPPEXT_GETENV_FAILED       ((HRESULT)0x80041F01L)

//
// MessageId: PP_E_MSPPEXT_SET_EVENT_FAILED
//
// MessageText:
//
//  The web service has failed during initialization: it has failed to set the event to mark the start of execution.
//
#define PP_E_MSPPEXT_SET_EVENT_FAILED    ((HRESULT)0x80041F02L)

//
// MessageId: PP_E_MSPPEXT_INIT_UPDATEMGR_FAILED
//
// MessageText:
//
//  The web service has failed during initialization: it has failed to initialize the live prop component.
//
#define PP_E_MSPPEXT_INIT_UPDATEMGR_FAILED ((HRESULT)0x80041F03L)

//
// MessageId: PP_E_MSPPEXT_INIT_EVENT_FAILED
//
// MessageText:
//
//  The web service has failed during initialization: it has failed to reset the events to mark the reload of COM components.
//
#define PP_E_MSPPEXT_INIT_EVENT_FAILED   ((HRESULT)0x80041F04L)

//
// MessageId: PP_E_MSPPEXT_CREATE_THREAD_FAILED
//
// MessageText:
//
//  The web service has failed during initialization: it has failed to create the thread that CoInitialize, loads all the COM components and waits for shutdown.
//
#define PP_E_MSPPEXT_CREATE_THREAD_FAILED ((HRESULT)0x80041F05L)

//
// MessageId: PP_E_MSPPEXT_WAIT_EVENT_FAILED
//
// MessageText:
//
//  The web service has failed during initialization: the Initialize thread has either failed on a wait for services to load, or at least one service has failed to load.
//
#define PP_E_MSPPEXT_WAIT_EVENT_FAILED   ((HRESULT)0x80041F06L)

//
// MessageId: PP_E_MSPPEXT_SERVICE_NOT_LOADED
//
// MessageText:
//
//  The queried service or interface is not among the loaded services (i.e., COM components.)
//
#define PP_E_MSPPEXT_SERVICE_NOT_LOADED  ((HRESULT)0x80041F08L)

//
// MessageId: PP_E_MSPPEXT_SERVICEMGR_PATH_NOTFOUND
//
// MessageText:
//
//  The web service has failed during initialization: it has failed to get its ADS path.
//
#define PP_E_MSPPEXT_SERVICEMGR_PATH_NOTFOUND ((HRESULT)0x80041F0CL)

// base 0x2200
//
// MessageId: PP_E_MEMMGR_HEAPCREATE
//
// MessageText:
//
//  The memory manager failed to create a heap.
//
#define PP_E_MEMMGR_HEAPCREATE           ((HRESULT)0x80042200L)

//
// MessageId: PP_E_MEMMGR_SETTLSVALUE
//
// MessageText:
//
//  The memory manager failed to set the TLS with the heap object pointer.
//
#define PP_E_MEMMGR_SETTLSVALUE          ((HRESULT)0x80042202L)

//
// MessageId: PP_E_MEMMGR_BADTLS
//
// MessageText:
//
//  The memory manager failed to set the TLS with -1 to mark it as bad.
//
#define PP_E_MEMMGR_BADTLS               ((HRESULT)0x80042203L)

//
// MessageId: PP_E_MEMMGR_INIT_ALREADY
//
// MessageText:
//
//  The memory manager was initialized previously.
//
#define PP_E_MEMMGR_INIT_ALREADY         ((HRESULT)0x80042204L)

//
// MessageId: PP_E_MEMMGR_THREADHEAPCREATE
//
// MessageText:
//
//  The memory manager failed to allocate memory for the CThreadHeap object.
//
#define PP_E_MEMMGR_THREADHEAPCREATE     ((HRESULT)0x80042205L)

//
// MessageId: PP_E_MEMMGR_INIT_SETTLS
//
// MessageText:
//
//  The memory manager failed to initalize the TLS.
//
#define PP_E_MEMMGR_INIT_SETTLS          ((HRESULT)0x80042206L)

//
// MessageId: PP_E_MEMMGR_PPHEAPCREATE
//
// MessageText:
//
//  The memory manager failed to allocate memory for CPPHeap object.
//
#define PP_E_MEMMGR_PPHEAPCREATE         ((HRESULT)0x80042207L)

//
// MessageId: PP_E_MEMMGR_FINISH_TLS
//
// MessageText:
//
//  The memory manager failed to zero out the TLS.
//
#define PP_E_MEMMGR_FINISH_TLS           ((HRESULT)0x8004220BL)

//
// MessageId: PP_E_MEMMGR_NOTINITIALIZED
//
// MessageText:
//
//  The memory manager is called without being initialized.
//
#define PP_E_MEMMGR_NOTINITIALIZED       ((HRESULT)0x8004220CL)

//
// MessageId: PP_E_MEMMGR_FINISH
//
// MessageText:
//
//  No TLS value was found at the end of a request.
//
#define PP_E_MEMMGR_FINISH               ((HRESULT)0x8004220DL)

//
// MessageId: PP_E_MEMMGR_FINISH_NOTLS
//
// MessageText:
//
//  The TLS value for this thread does not hold a pointer to a CPPHeap object.
//
#define PP_E_MEMMGR_FINISH_NOTLS         ((HRESULT)0x8004220EL)

// base 0x2500
//
// MessageId: PP_E_SOAP_XMLDOC
//
// MessageText:
//
//  The XML document is invalid
//
#define PP_E_SOAP_XMLDOC                 ((HRESULT)0x80042500L)

//
// MessageId: PP_E_SOAP_ENV
//
// MessageText:
//
//  The soap envelope is invalid
//
#define PP_E_SOAP_ENV                    ((HRESULT)0x80042501L)

//
// MessageId: PP_E_SOAP_BODY
//
// MessageText:
//
//  The soap body is invalid
//
#define PP_E_SOAP_BODY                   ((HRESULT)0x80042502L)

//
// MessageId: PP_E_SOAP_METHOD
//
// MessageText:
//
//  No soap method found
//
#define PP_E_SOAP_METHOD                 ((HRESULT)0x80042503L)

//
// MessageId: PP_E_SOAP_FAULT
//
// MessageText:
//
//  The response contains a soap fault
//
#define PP_E_SOAP_FAULT                  ((HRESULT)0x80042504L)

// base 0x2600
//
// MessageId: PP_E_SCHEMA_ELE
//
// MessageText:
//
//  Returned when the number of attributes in the profile or ticket schema is 0.
//
#define PP_E_SCHEMA_ELE                  ((HRESULT)0x80042600L)

//
// MessageId: PP_E_SCHEMA_DATATYPE
//
// MessageText:
//
//  Schema has an invalid datatype for one of the attributes.
//
#define PP_E_SCHEMA_DATATYPE             ((HRESULT)0x80042601L)

// base 0x2900
//
// MessageId: PP_E_CRYPT_DECRYPT
//
// MessageText:
//
//  Failed to decrypt Key.
//
#define PP_E_CRYPT_DECRYPT               ((HRESULT)0x80042900L)

//
// MessageId: PP_E_CRYPT_KEYSIZE
//
// MessageText:
//
//  The key has incorrect size.
//
#define PP_E_CRYPT_KEYSIZE               ((HRESULT)0x80042901L)

//
// MessageId: PP_E_KEYINSTALL_NODCOM
//
// MessageText:
//
//  DCOM is not enabled on the machine.
//
#define PP_E_KEYINSTALL_NODCOM           ((HRESULT)0x80042902L)

//
// MessageId: PP_E_CRYPT_ENCRYPT
//
// MessageText:
//
//  Failed to encrypt.
//
#define PP_E_CRYPT_ENCRYPT               ((HRESULT)0x80042903L)

//
// MessageId: PP_E_CRYPT_DATATOOLARGE
//
// MessageText:
//
//  Data is too large for encryption or decryption.
//
#define PP_E_CRYPT_DATATOOLARGE          ((HRESULT)0x80042904L)

//
// MessageId: PP_E_CRYPT_BADKV
//
// MessageText:
//
//  Key cannot be found, could be an invalid key version.
//
#define PP_E_CRYPT_BADKV                 ((HRESULT)0x80042905L)

//
// MessageId: PP_E_CRYPT_NOKEY
//
// MessageText:
//
//  Registry Key KeyData is missing.
//
#define PP_E_CRYPT_NOKEY                 ((HRESULT)0x80042906L)

//
// MessageId: PP_E_PPCRYPT_FAILED
//
// MessageText:
//
//  Failed to encrypt/decrypt crypto key.
//
#define PP_E_PPCRYPT_FAILED              ((HRESULT)0x80043100L)

//
// MessageId: PP_E_SESSIONKEY_ALREADY_INITIALIZED
//
// MessageText:
//
//  The object has already been initialized.
//
#define PP_E_SESSIONKEY_ALREADY_INITIALIZED ((HRESULT)0x80043101L)

//
// MessageId: PP_E_SESSIONKEY_NOT_INITIALIZED
//
// MessageText:
//
//  The object has not been initialized.
//
#define PP_E_SESSIONKEY_NOT_INITIALIZED  ((HRESULT)0x80043102L)

//
// MessageId: PP_E_SESSIONKEY_INVALIDDATA
//
// MessageText:
//
//  The data is invalid.
//
#define PP_E_SESSIONKEY_INVALIDDATA      ((HRESULT)0x80043103L)

//
// MessageId: PP_E_SESSIONKEY_INVALIDSIGNATURE
//
// MessageText:
//
//  The hash doesn't match.
//
#define PP_E_SESSIONKEY_INVALIDSIGNATURE ((HRESULT)0x80043104L)

// base 0x3201
// webstore errors, from wststoreidl.idl, inca build
// these first three are from original file, legacy.
// the facility used is Internal.
//
// MessageId: PP_E_WSTORE_CheckOLEDBVersion
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_WSTORE_CheckOLEDBVersion    ((HRESULT)0x80043201L)

//
// MessageId: PP_E_WSTORE_GetNewAccountIDByPadding
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_WSTORE_GetNewAccountIDByPadding ((HRESULT)0x80043202L)

//
// MessageId: PP_E_WSTORE__FetchNewBlock
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_WSTORE__FetchNewBlock       ((HRESULT)0x80043203L)

// 3.0m2, PP version of webstore errors, 
// using passport database facility code
//#define WST_E_CONNECTIONTIMEOUT      ((HRESULT)-2001) // 0xFFFFF82F
//
// MessageId: PP_E_WST_E_CONNECTIONTIMEOUT
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_WST_E_CONNECTIONTIMEOUT     ((HRESULT)0xCFFFF82FL)

//#define WST_E_NOCONNECTIONAVAIL      ((HRESULT)-2002) // 0xFFFFF82E
//
// MessageId: PP_E_WST_E_NOCONNECTIONAVAIL
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_WST_E_NOCONNECTIONAVAIL     ((HRESULT)0xCFFFF82EL)

//#define WST_E_MARKEDOFFLINE          ((HRESULT)-2005) // 0xFFFFF82B
//
// MessageId: PP_E_WST_E_MARKEDOFFLINE
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_WST_E_MARKEDOFFLINE         ((HRESULT)0xCFFFF82BL)

//#define WST_E_MARKEDREADONLY         ((HRESULT)-2006) // 0xFFFFF82A
//
// MessageId: PP_E_WST_E_MARKEDREADONLY
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_WST_E_MARKEDREADONLY        ((HRESULT)0xCFFFF82AL)

//#define kErrorWstTimeOutNoFailover           -2008 // 0xFFFFF828
//
// MessageId: PP_E_kErrorWstTimeOutNoFailover
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorWstTimeOutNoFailover  ((HRESULT)0xCFFFF828L)

//#define kErrorWstCmdOrConnectionFailed      -2009 // 0xFFFFF827
//
// MessageId: PP_E_kErrorWstCmdOrConnectionFailed
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorWstCmdOrConnectionFailed ((HRESULT)0xCFFFF827L)

// webstore error
//#define WST_E_SERVERNOTREGISTERED    ((HRESULT)-2027) // 0xFFFFF815
//
// MessageId: PP_E_WST_E_SERVERNOTREGISTERED
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_WST_E_SERVERNOTREGISTERED   ((HRESULT)0xCFFFF815L)

//
// MessageId: PP_E_WST_E_APPLICATIONNOTEXIST
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_WST_E_APPLICATIONNOTEXIST   ((HRESULT)0xCFFFF447L)

//#define WST_E_TRANCOUNTEXIST         ((HRESULT)-3002) // 0xFFFFF446
//
// MessageId: PP_E_WST_E_TRANCOUNTEXIST
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_WST_E_TRANCOUNTEXIST        ((HRESULT)0xCFFFF446L)

//#define WST_E_ADMINCONSOLENOTEXIST   ((HRESULT)-3003) // 0xFFFFF445
//
// MessageId: PP_E_WST_E_ADMINCONSOLENOTEXIST
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_WST_E_ADMINCONSOLENOTEXIST  ((HRESULT)0xCFFFF445L)

//#define WST_E_MISMATCHVERSION        ((HRESULT)-3004) // 0xFFFFF444
//
// MessageId: PP_E_WST_E_MISMATCHVERSION
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_WST_E_MISMATCHVERSION       ((HRESULT)0xCFFFF444L)

// #define WST_E_NOSERVICEAVAIL         ((HRESULT)-3005) // 0xFFFFF443
//
// MessageId: PP_E_WST_E_NOSERVICEAVAIL
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_WST_E_NOSERVICEAVAIL        ((HRESULT)0xCFFFF443L)

// #define WST_E_NOREGISTRY             ((HRESULT)-3006) // 0xFFFFF442
//
// MessageId: PP_E_WST_E_NOREGISTRY
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_WST_E_NOREGISTRY            ((HRESULT)0xCFFFF442L)

// #define WST_E_APPCONFIGCHANGED       ((HRESULT)-3007) // 0xFFFFF441
//
// MessageId: PP_E_WST_E_APPCONFIGCHANGED
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_WST_E_APPCONFIGCHANGED      ((HRESULT)0xCFFFF441L)

// #define WST_E_NAMEDPIPE              ((HRESULT)-3008) // 0xFFFFF440
//
// MessageId: PP_E_WST_E_NAMEDPIPE
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_WST_E_NAMEDPIPE             ((HRESULT)0xCFFFF440L)

// #define WST_E_NOTINITIALIZED         ((HRESULT)-3009) // 0xFFFFF43F
//
// MessageId: PP_E_WST_E_NOTINITIALIZED
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_WST_E_NOTINITIALIZED        ((HRESULT)0xCFFFF43FL)

// #define WST_E_BADTICKET              ((HRESULT)-3010) // 0xFFFFF43E
//
// MessageId: PP_E_WST_E_BADTICKET
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_WST_E_BADTICKET             ((HRESULT)0xCFFFF43EL)

// #define WST_E_ALREADYINITIALIZED     ((HRESULT)-3011) // 0xFFFFF43D
//
// MessageId: PP_E_WST_E_ALREADYINITIALIZED
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_WST_E_ALREADYINITIALIZED    ((HRESULT)0xCFFFF43DL)

// #define WST_E_CONFIGEXPIRED          ((HRESULT)-3012) // 0xFFFFF43C
//
// MessageId: PP_E_WST_E_CONFIGEXPIRED
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_WST_E_CONFIGEXPIRED         ((HRESULT)0xCFFFF43CL)

// base 0x3684
//
// MessageId: PP_E_SETUP_KEYMIG_ERROR
//
// MessageText:
//
//  Could not migrate passport manager key to new version. Please update the key in the registry manually.
//
#define PP_E_SETUP_KEYMIG_ERROR          ((HRESULT)0x80043684L)

// base 0x3801
//
// MessageId: PP_E_KEYMIG_MAPREAD
//
// MessageText:
//
//  Failed to import networkserver.xml to nexus db (2.5 only)
//
#define PP_E_KEYMIG_MAPREAD              ((HRESULT)0x80043801L)

//
// MessageId: PP_E_KEYMIG_DECRYPTKEY
//
// MessageText:
//
//  Failed to decrypt nexus site key for key export (2.5 only)
//
#define PP_E_KEYMIG_DECRYPTKEY           ((HRESULT)0x80043802L)

//
// MessageId: PP_E_KEYMIG_LOADDOC
//
// MessageText:
//
//  Failed to open xml file for import (2.5 only)
//
#define PP_E_KEYMIG_LOADDOC              ((HRESULT)0x80043803L)

//
// MessageId: PP_E_KEYMIG_SITELIST
//
// MessageText:
//
//  No kid site in the site list (2.5 only)
//
#define PP_E_KEYMIG_SITELIST             ((HRESULT)0x80043804L)

//
// MessageId: PP_E_LOADNAMESPACE
//
// MessageText:
//
//  Failed to load xml (Gerneric error used by multiple obj?)
//
#define PP_E_LOADNAMESPACE               ((HRESULT)0x80043805L)

//
// MessageId: PP_E_SITEMGR
//
// MessageText:
//
//  Generic error for parsing ns xml. (2.5 only)
//
#define PP_E_SITEMGR                     ((HRESULT)0x80043806L)

//
// MessageId: PP_E_MODIFYANTIHACKPARAM
//
// MessageText:
//
//  AntihackerTuner tool. Generic xml error.
//
#define PP_E_MODIFYANTIHACKPARAM         ((HRESULT)0x80043809L)

//
// MessageId: PP_E_SITEMGR_SITE_EXCLUDED
//
// MessageText:
//
//  Provisioning. The given site id is not allow to modify.
//
#define PP_E_SITEMGR_SITE_EXCLUDED       ((HRESULT)0x8004380AL)

//
// MessageId: PP_E_SITEMGR_SITE_NOT_EXIST
//
// MessageText:
//
//  Provisioning. Try to modify site key with a non existing site id.
//
#define PP_E_SITEMGR_SITE_NOT_EXIST      ((HRESULT)0x8004380BL)

//
// MessageId: PP_E_SITEMGR_NESTED_ROOT
//
// MessageText:
//
//  Provisioning. Try to crete nested root share key. Only single level share root is allowed.
//
#define PP_E_SITEMGR_NESTED_ROOT         ((HRESULT)0x8004380CL)

//
// MessageId: PP_E_SITEMGR_UNSHARED_ROOT
//
// MessageText:
//
//  Provisioning. Try to unshare site key with the root site, but site does not has root id.
//
#define PP_E_SITEMGR_UNSHARED_ROOT       ((HRESULT)0x8004380DL)

//
// MessageId: PP_E_SITEMGR_SITE_HAS_ROOT
//
// MessageText:
//
//  Provisioning. Beacuse this site has root site id it's not allow to modify site key.
//
#define PP_E_SITEMGR_SITE_HAS_ROOT       ((HRESULT)0x8004380EL)

//
// MessageId: PP_E_LOADSERVERFROMFILE_GENERAL_ERROR
//
// MessageText:
//
//  Refresh util. Failed to load server file.
//
#define PP_E_LOADSERVERFROMFILE_GENERAL_ERROR ((HRESULT)0x8004380FL)

//
// MessageId: PP_E_LOADCONFIG_GENERAL_ERROR
//
// MessageText:
//
//  Refresh util. Failed to load configuation file.
//
#define PP_E_LOADCONFIG_GENERAL_ERROR    ((HRESULT)0x80043810L)

//
// MessageId: PP_E_LOADXML_GENERAL_ERROR
//
// MessageText:
//
//  Refresh util. Failed to load xml.
//
#define PP_E_LOADXML_GENERAL_ERROR       ((HRESULT)0x80043811L)

//
// MessageId: PP_E_LOADREFRESHCONFIG_GENERAL_ERROR
//
// MessageText:
//
//  Refresh util. Failed to load configuation file.
//
#define PP_E_LOADREFRESHCONFIG_GENERAL_ERROR ((HRESULT)0x80043812L)

// base 0x3901
//
// MessageId: PP_E_MD_INVALIDLOCATION
//
// MessageText:
//
//  Minidump location path in registry or INI file is missing or invalid (longer than MAX_PATH).
//
#define PP_E_MD_INVALIDLOCATION          ((HRESULT)0x80043901L)

//
// MessageId: PP_E_MD_INVALIDPREFIX
//
// MessageText:
//
//  Minidump prefix in INI file is missing or invalid (longer than MAX_PATH).
//
#define PP_E_MD_INVALIDPREFIX            ((HRESULT)0x80043902L)

//
// MessageId: PP_E_MD_INVALIDDUMPTYPE
//
// MessageText:
//
//  Minidump type in INI file is missing or invalid (Valid values are 0,1,2,4,8,16).
//
#define PP_E_MD_INVALIDDUMPTYPE          ((HRESULT)0x80043903L)

//
// MessageId: PP_E_MD_FAILTOCREATEFILE
//
// MessageText:
//
//  Failed to create the minidump file. Check the event log for error code.
//
#define PP_E_MD_FAILTOCREATEFILE         ((HRESULT)0x80043904L)

//
// MessageId: PP_E_MD_FAILTOWRITEDUMP
//
// MessageText:
//
//  Failed to write the minidump file. Check the event log for error code.
//
#define PP_E_MD_FAILTOWRITEDUMP          ((HRESULT)0x80043905L)

//
// MessageId: PP_E_MD_LOADLIB
//
// MessageText:
//
//  Failed to load the dbghelp DLL (Either ppdbghelp.dll or dbghelp.dll).
//
#define PP_E_MD_LOADLIB                  ((HRESULT)0x80043906L)

//
// MessageId: PP_E_MD_GETPROC
//
// MessageText:
//
//  Failed to get the address of MiniDumpWriteDump function from the DLL.
//
#define PP_E_MD_GETPROC                  ((HRESULT)0x80043907L)

//
// MessageId: PP_E_MD_NOTINIT
//
// MessageText:
//
//  Minidump not initialized.
//
#define PP_E_MD_NOTINIT                  ((HRESULT)0x80043908L)

// base 0x3a00
//
// MessageId: PP_E_RADIUS_INVALIDCONFIG
//
// MessageText:
//
//  Invalid Radius Configuration.
//
#define PP_E_RADIUS_INVALIDCONFIG        ((HRESULT)0x80043A02L)

//
// MessageId: PP_E_RADIUS_GETENV_FAILED
//
// MessageText:
//
//  Failed to Get environment settings in config.
//
#define PP_E_RADIUS_GETENV_FAILED        ((HRESULT)0x80043A03L)

//
// MessageId: PP_E_RADIUS_ATTRNOTFOUND
//
// MessageText:
//
//  Missing Radius Attribute in request.
//
#define PP_E_RADIUS_ATTRNOTFOUND         ((HRESULT)0x80043A09L)

//
// MessageId: PP_E_RADIUS_ATTRTYPEMISMATCH
//
// MessageText:
//
//  Attribute type mismatch.
//
#define PP_E_RADIUS_ATTRTYPEMISMATCH     ((HRESULT)0x80043A0AL)

//
// MessageId: PP_E_RADIUS_PSAINITFAILED
//
// MessageText:
//
//  PSA initilization failed.
//
#define PP_E_RADIUS_PSAINITFAILED        ((HRESULT)0x80043A0BL)

//
// MessageId: PP_E_RADIUS_UNINITIALIZE
//
// MessageText:
//
//  Failed to unitialize Radius.
//
#define PP_E_RADIUS_UNINITIALIZE         ((HRESULT)0x80043A0CL)

//
// MessageId: PP_E_RADIUS_INVALID_DOMAIN
//
// MessageText:
//
//  The user domain is not valid.
//
#define PP_E_RADIUS_INVALID_DOMAIN       ((HRESULT)0x80043A0EL)

//
// MessageId: PP_E_RADIUS_INVALID_ATTRIBUTE_SIZE
//
// MessageText:
//
//  The attribute is either too large or too small.
//
#define PP_E_RADIUS_INVALID_ATTRIBUTE_SIZE ((HRESULT)0x80043A0FL)

//
// MessageId: PP_E_RADIUS_INVALID_ATTRIBUTE
//
// MessageText:
//
//  Invalid Radius attributes.
//
#define PP_E_RADIUS_INVALID_ATTRIBUTE    ((HRESULT)0x80043A10L)

//
// MessageId: PP_E_RADIUS_INVALID_AUTHMETHOD
//
// MessageText:
//
//  Authentication method is not allowed for the site.
//
#define PP_E_RADIUS_INVALID_AUTHMETHOD   ((HRESULT)0x80043A12L)

//
// MessageId: PP_E_RADIUS_INVALID_PACKET
//
// MessageText:
//
//  Invalid Radius Packet.
//
#define PP_E_RADIUS_INVALID_PACKET       ((HRESULT)0x80043A13L)

//
// MessageId: PP_E_RADIUS_CRP_NULL_SERVICE
//
// MessageText:
//
//  Cannot access service object in SDO.
//
#define PP_E_RADIUS_CRP_NULL_SERVICE     ((HRESULT)0x80043A14L)

//
// MessageId: PP_E_RADIUS_CRP_NULL_DICTIONARY
//
// MessageText:
//
//  Cannot access directory object in SDO.
//
#define PP_E_RADIUS_CRP_NULL_DICTIONARY  ((HRESULT)0x80043A15L)

//
// MessageId: PP_E_RADIUS_CREATEATTR_BADARG
//
// MessageText:
//
//  Invalid Attribute for SDO.
//
#define PP_E_RADIUS_CREATEATTR_BADARG    ((HRESULT)0x80043A16L)

//
// MessageId: PP_E_RADIUS_CCM_NOTIFY_SINK_ALREADY_SET
//
// MessageText:
//
//  Radius CCM change notification sink was already setup.
//
#define PP_E_RADIUS_CCM_NOTIFY_SINK_ALREADY_SET ((HRESULT)0x80043A19L)

//
// MessageId: PP_E_RADIUS_CCM_NOTIFY_SINK_NOT_SET
//
// MessageText:
//
//  Radius CCM change notification sink has not been setup.
//
#define PP_E_RADIUS_CCM_NOTIFY_SINK_NOT_SET ((HRESULT)0x80043A1AL)

// base 0x4000
//relationship server error code
//#define PP_E_SOAPSERVICE_BASE                0x4000
//
// MessageId: PP_E_CERTPROV_INSTALLSTS_NO_CONTEXT
//
// MessageText:
//
//  The service failed to retrieve the certificate context for the Passport login server.
//
#define PP_E_CERTPROV_INSTALLSTS_NO_CONTEXT ((HRESULT)0x80044006L)

//
// MessageId: PP_E_SS_INVALIDSCHEMA
//
// MessageText:
//
//  The application contains invalid schema. For information about valid schema formats, see the WSDL documents.
//
#define PP_E_SS_INVALIDSCHEMA            ((HRESULT)0x80044007L)

//
// MessageId: PP_E_SS_SCHEMA_NOTFOUND
//
// MessageText:
//
//  The service cannot use the schema specified in the application. For information about valid schema formats, see the WSDL documents.
//
#define PP_E_SS_SCHEMA_NOTFOUND          ((HRESULT)0x80044008L)

//
// MessageId: PP_E_SS_SCHEMA_NOTINITIALISED
//
// MessageText:
//
//  The service was unable to initialize the schema in the request.
//
#define PP_E_SS_SCHEMA_NOTINITIALISED    ((HRESULT)0x80044009L)

//
// MessageId: PP_E_SS_NODATA
//
// MessageText:
//
//  The input data is empty
//
#define PP_E_SS_NODATA                   ((HRESULT)0x8004400AL)

//
// MessageId: PP_E_SS_MISCONFIGURED
//
// MessageText:
//
//  Internal error: the soap service is misconfigured
//
#define PP_E_SS_MISCONFIGURED            ((HRESULT)0x8004400DL)

//
// MessageId: PP_E_SS_TICKETFIELDMISSING
//
// MessageText:
//
//  The credential field does not contain any data.
//
#define PP_E_SS_TICKETFIELDMISSING       ((HRESULT)0x8004400EL)

//
// MessageId: PP_E_SS_CRYPTOBJECTEMPTY
//
// MessageText:
//
//  The service cannot decrypt the credential specified in the request.
//
#define PP_E_SS_CRYPTOBJECTEMPTY         ((HRESULT)0x8004400FL)

//
// MessageId: PP_E_SS_INVALIDPUID
//
// MessageText:
//
//  The application attempted to reference an invalid .NET Passport unique identifier (PUID).
//
#define PP_E_SS_INVALIDPUID              ((HRESULT)0x80044010L)

//
// MessageId: PP_E_SS_INVALIDNAMESPACE
//
// MessageText:
//
//  The application attempted to reference an invalid namespace.
//
#define PP_E_SS_INVALIDNAMESPACE         ((HRESULT)0x80044011L)

//
// MessageId: PP_E_SS_HEADERTOOLARGE
//
// MessageText:
//
//  The request header exceeds the maximum size allowed. For more information, see the WSDL documents.
//
#define PP_E_SS_HEADERTOOLARGE           ((HRESULT)0x80044012L)

//
// MessageId: PP_E_SS_INVALIDHEADERVERSION
//
// MessageText:
//
//  The request header version is invalid. For more information, see the WSDL documents.
//
#define PP_E_SS_INVALIDHEADERVERSION     ((HRESULT)0x80044013L)

//
// MessageId: PP_E_SS_INVALIDHEADERNAMESPACE
//
// MessageText:
//
//  The request header does not contain a namespace. For more information, see the WSDL documents.
//
#define PP_E_SS_INVALIDHEADERNAMESPACE   ((HRESULT)0x80044014L)

//
// MessageId: PP_E_SS_REQUIREDNODEMISSING
//
// MessageText:
//
//  One or more required nodes are missing. For more information, see the WSDL documents.
//
#define PP_E_SS_REQUIREDNODEMISSING      ((HRESULT)0x80044016L)

//
// MessageId: PP_E_SS_NAMESPACEMISSING
//
// MessageText:
//
//  The request does not contain a namespace. For more information, see the WSDL documents.
//
#define PP_E_SS_NAMESPACEMISSING         ((HRESULT)0x80044017L)

//
// MessageId: PP_E_SS_INVALIDNUMERIC
//
// MessageText:
//
//  The application attempted to reference an invalid numeric value. For more information, see the WSDL documents.
//
#define PP_E_SS_INVALIDNUMERIC           ((HRESULT)0x80044018L)

//
// MessageId: PP_E_SS_INVALIDSITEID
//
// MessageText:
//
//  The application specified an invalid site identifier (SiteID).
//
#define PP_E_SS_INVALIDSITEID            ((HRESULT)0x80044019L)

//
// MessageId: PP_E_SS_INVALIDSTATUS
//
// MessageText:
//
//  The application specified an invalid status field value.
//
#define PP_E_SS_INVALIDSTATUS            ((HRESULT)0x8004401AL)

//
// MessageId: PP_E_SS_INVALIDCLIENTPARAMS
//
// MessageText:
//
//  The request contains parameters that do not conform to the specifications described in the WSDL documents.
//
#define PP_E_SS_INVALIDCLIENTPARAMS      ((HRESULT)0x8004401CL)

//
// MessageId: PP_E_SS_HTTPS_REQUIRED
//
// MessageText:
//
//  This service can only be accessed using HTTPS.
//
#define PP_E_SS_HTTPS_REQUIRED           ((HRESULT)0x8004401EL)

//
// MessageId: PP_W_SS_SENDMAILFAILED
//
// MessageText:
//
//  An unexpected error occurred while trying to send the e-mail you requested. Please try again.
//
#define PP_W_SS_SENDMAILFAILED           ((HRESULT)0x80044020L)

//
// MessageId: PP_E_SS_SITE_NOTAUTHENTICATED
//
// MessageText:
//
//  The site cannot be authenticated, the certificate provided cannot be verified.
//
#define PP_E_SS_SITE_NOTAUTHENTICATED    ((HRESULT)0x80044021L)

//
// MessageId: PP_E_SS_SITE_NOTAUTHORIZED
//
// MessageText:
//
//  The site is not authorized to execute this method.
//
#define PP_E_SS_SITE_NOTAUTHORIZED       ((HRESULT)0x80044022L)

//
// MessageId: PP_E_SS_NOCRYPTPROV
//
// MessageText:
//
//  Internal error: cannot acquire a crypt provider
//
#define PP_E_SS_NOCRYPTPROV              ((HRESULT)0x80044023L)

//
// MessageId: PP_E_SS_CLIENTCERT_INVALID
//
// MessageText:
//
//  The client certificate is invalid. The calling site cannot be authenticated.
//
#define PP_E_SS_CLIENTCERT_INVALID       ((HRESULT)0x80044024L)

//
// MessageId: PP_E_SS_CERTCN_INVALID
//
// MessageText:
//
//  The client certificate contains an invalid common name (CN). The calling site cannot be authenticated.
//
#define PP_E_SS_CERTCN_INVALID           ((HRESULT)0x80044025L)

//
// MessageId: PP_E_SS_INVALIDPGROUP
//
// MessageText:
//
//  The application specified an invalid policy group name (PGroup).
//
#define PP_E_SS_INVALIDPGROUP            ((HRESULT)0x80044026L)

//
// MessageId: PP_E_NO_KEY_FOUND
//
// MessageText:
//
//  The pfx not found for the site (Empty rowset).
//
#define PP_E_NO_KEY_FOUND                ((HRESULT)0x80044027L)

//
// MessageId: PP_E_SS_INVALIDHEADERXML
//
// MessageText:
//
//  Invalid soap header xml. The request contains parameters that do not conform to the specifications described in the WSDL documents.
//
#define PP_E_SS_INVALIDHEADERXML         ((HRESULT)0x80044028L)

//
// MessageId: PP_E_EMAIL_LIMITED_ACCT
//
// MessageText:
//
//  Trying to send e-mails to a Limited Passport account.
//
#define PP_E_EMAIL_LIMITED_ACCT          ((HRESULT)0x80044029L)

//
// MessageId: PP_E_EMAIL_MISSINGDATA
//
// MessageText:
//
//  Some required data missing when trying to send e-mail
//
#define PP_E_EMAIL_MISSINGDATA           ((HRESULT)0x8004402AL)

//
// MessageId: PP_E_SS_INVALIDSOAPMETHOD
//
// MessageText:
//
//  Invalid soap method. The requested method does not conform to the specifications described in the WSDL documents.
//
#define PP_E_SS_INVALIDSOAPMETHOD        ((HRESULT)0x8004402BL)

//
// MessageId: PP_E_SS_AUDITINFO_TOOLARGE
//
// MessageText:
//
//  The audit information exceeds the maximum size allowed.
//
#define PP_E_SS_AUDITINFO_TOOLARGE       ((HRESULT)0x8004402CL)

//
// MessageId: PP_E_SS_URL_BUFFERTOOSMALL
//
// MessageText:
//
//  Buffer too small for the service root url
//
#define PP_E_SS_URL_BUFFERTOOSMALL       ((HRESULT)0x8004402DL)

//
// MessageId: PP_E_SS_SITETOKEN_INVALID
//
// MessageText:
//
//  Site token xml is empty
//
#define PP_E_SS_SITETOKEN_INVALID        ((HRESULT)0x8004402EL)

//
// MessageId: PP_E_SS_ISSUER_NOTSUPPORTED
//
// MessageText:
//
//  The websso issuer is not supported
//
#define PP_E_SS_ISSUER_NOTSUPPORTED      ((HRESULT)0x8004402FL)

//
// MessageId: PP_E_SS_SENDEMAIL_EFAIL
//
// MessageText:
//
//  Sending email returns an E_FAIL
//
#define PP_E_SS_SENDEMAIL_EFAIL          ((HRESULT)0x80044030L)

// base 0x4050
//PP SAX parser error code
//base = 0x4055
//
// MessageId: PP_E_SS_SAX_NOTINITIALIZED
//
// MessageText:
//
//  Internal error: Sax parser is not initialzied properly
//
#define PP_E_SS_SAX_NOTINITIALIZED       ((HRESULT)0x80044055L)

//
// MessageId: PP_E_SS_SAX_INVALIDMAPENTRY
//
// MessageText:
//
//  Internal error: SaxParser, invalid methods/namespaces map entry
//
#define PP_E_SS_SAX_INVALIDMAPENTRY      ((HRESULT)0x80044056L)

//
// MessageId: PP_E_SS_SAX_INVALIDSAXNODE
//
// MessageText:
//
//  Internal error: SaxParser, unexpected sax node
//
#define PP_E_SS_SAX_INVALIDSAXNODE       ((HRESULT)0x80044057L)

//
// MessageId: PP_E_SS_SAX_BADSTACK
//
// MessageText:
//
//  Internal error: SaxParser, bad stack
//
#define PP_E_SS_SAX_BADSTACK             ((HRESULT)0x80044058L)

//
// MessageId: PP_E_SS_SAX_BADCALLBACK
//
// MessageText:
//
//  Internal error: SaxParser, invalid callback type
//
#define PP_E_SS_SAX_BADCALLBACK          ((HRESULT)0x80044059L)

//
// MessageId: PP_E_SS_SAX_INVALIDNUMERIC
//
// MessageText:
//
//  Invalid data, expected numeric
//
#define PP_E_SS_SAX_INVALIDNUMERIC       ((HRESULT)0x8004405AL)

//
// MessageId: PP_E_SS_SAX_INVALIDPUID
//
// MessageText:
//
//  Invalid data, expected puid
//
#define PP_E_SS_SAX_INVALIDPUID          ((HRESULT)0x8004405BL)

//
// MessageId: PP_E_SS_SAX_INVALIDGUID
//
// MessageText:
//
//  Invalid data, expected guid
//
#define PP_E_SS_SAX_INVALIDGUID          ((HRESULT)0x8004405CL)

//
// MessageId: PP_E_SS_SAX_INVALIDDATE
//
// MessageText:
//
//  Invalid data, expected date
//
#define PP_E_SS_SAX_INVALIDDATE          ((HRESULT)0x8004405DL)

//
// MessageId: PP_E_SS_SAX_INVALIDBOOL
//
// MessageText:
//
//  Invalid data, expected bool
//
#define PP_E_SS_SAX_INVALIDBOOL          ((HRESULT)0x8004405EL)

//
// MessageId: PP_E_SS_SAX_INVALIDHANDLER
//
// MessageText:
//
//  Internal error: SaxParser, invalid content handler
//
#define PP_E_SS_SAX_INVALIDHANDLER       ((HRESULT)0x8004405FL)

//
// MessageId: PP_E_SS_SAX_INVALIDSAXREADER
//
// MessageText:
//
//  Internal error: SaxParser, invalid sax reader
//
#define PP_E_SS_SAX_INVALIDSAXREADER     ((HRESULT)0x80044060L)

//
// MessageId: PP_E_SS_SAX_NONODEPARSED
//
// MessageText:
//
//  Internal error: SaxParser, no node has been parsed yet
//
#define PP_E_SS_SAX_NONODEPARSED         ((HRESULT)0x80044061L)

//
// MessageId: PP_E_SS_SAX_BADINDEX
//
// MessageText:
//
//  Internal error: SaxParser, bad internal index
//
#define PP_E_SS_SAX_BADINDEX             ((HRESULT)0x80044062L)

//
// MessageId: PP_E_SS_SAX_BADVARIANT
//
// MessageText:
//
//  Internal error: SaxWriter, msxml bad variant
//
#define PP_E_SS_SAX_BADVARIANT           ((HRESULT)0x80044063L)

//
// MessageId: PP_E_SS_SAX_PARSER_ERROR
//
// MessageText:
//
//  Invalid data, the xml input does not conform with the XML standards
//
#define PP_E_SS_SAX_PARSER_ERROR         ((HRESULT)0x80044064L)

//
// MessageId: PP_E_SS_SAX_WRITER_ERROR
//
// MessageText:
//
//  Internal error: the msxml writer failed
//
#define PP_E_SS_SAX_WRITER_ERROR         ((HRESULT)0x80044065L)

//
// MessageId: PP_E_SS_SAX_NODEINVALID
//
// MessageText:
//
//  The node/attribute is not valid in the current schema
//
#define PP_E_SS_SAX_NODEINVALID          ((HRESULT)0x80044066L)

//
// MessageId: PP_E_SS_SAX_ESCAPEXMLFAILED
//
// MessageText:
//
//  Escape xml failed
//
#define PP_E_SS_SAX_ESCAPEXMLFAILED      ((HRESULT)0x80044067L)

// base 0x4080
//relationship server error code
//#define PP_E_RELSERVICE_BASE                0x4080
//
// MessageId: PP_E_RS_RELATIONSHIPID_NULL
//
// MessageText:
//
//  No data exists in the RelationshipID field, or the request did not contain a RelationshipID field.
//
#define PP_E_RS_RELATIONSHIPID_NULL      ((HRESULT)0x80044081L)

//
// MessageId: PP_E_RS_INVALIDRESOLVEPENDING
//
// MessageText:
//
//  A relationship may be resolved only to the following values: accepted, declined, or deleted.
//
#define PP_E_RS_INVALIDRESOLVEPENDING    ((HRESULT)0x80044085L)

//
// MessageId: PP_E_RS_ORIGINATORUNDEFINED
//
// MessageText:
//
//  The request does not specify the originator of the request.
//  
//
#define PP_E_RS_ORIGINATORUNDEFINED      ((HRESULT)0x80044086L)

//
// MessageId: PP_E_RS_SOURCEANDTARGETNULL
//
// MessageText:
//
//  No data exists in the .NET Passport Source and Target user identification fields.
//
#define PP_E_RS_SOURCEANDTARGETNULL      ((HRESULT)0x80044087L)

//
// MessageId: PP_E_RS_SOURCEANDTARGETEQUAL
//
// MessageText:
//
//  A relationship can be proposed only between different users; the Source and Target user identification fields cannot be identical.
//
#define PP_E_RS_SOURCEANDTARGETEQUAL     ((HRESULT)0x80044088L)

//
// MessageId: PP_E_RS_ORIGNOTMANAGER
//
// MessageText:
//
//  The originator of the request is not a manager of the relationship.
//
#define PP_E_RS_ORIGNOTMANAGER           ((HRESULT)0x8004408AL)

//
// MessageId: PP_E_RS_INVALIDRELATIONSHIPID
//
// MessageText:
//
//  The application specified an invalid relationship identifier (RelationshipID).
//
#define PP_E_RS_INVALIDRELATIONSHIPID    ((HRESULT)0x8004408BL)

//
// MessageId: PP_E_RS_INVALIDPOLICYID
//
// MessageText:
//
//  The application specified an invalid policy identifier (PolicyID).
//
#define PP_E_RS_INVALIDPOLICYID          ((HRESULT)0x8004408CL)

//
// MessageId: PP_E_RS_INVALIDPASSID
//
// MessageText:
//
//  The application specified an invalid .NET Passport identifier (PASSID).
//
#define PP_E_RS_INVALIDPASSID            ((HRESULT)0x8004408DL)

//
// MessageId: PP_E_RS_INVALIDGUID
//
// MessageText:
//
//  The relationship specified an invalid globally unique identifier (GUID).
//
#define PP_E_RS_INVALIDGUID              ((HRESULT)0x8004408EL)

//
// MessageId: PP_E_RS_QUERYRESULTERROR
//
// MessageText:
//
//  An unexpected error occurred while processing your query. Please try again.
//
#define PP_E_RS_QUERYRESULTERROR         ((HRESULT)0x8004408FL)

//
// MessageId: PP_E_RS_RELIDNOTFOUND
//
// MessageText:
//
//  The application specified a relationship identifier (RelationshipID) that does not exist.
//
#define PP_E_RS_RELIDNOTFOUND            ((HRESULT)0x80044090L)

//
// MessageId: PP_E_RS_ROWNOTFOUND
//
// MessageText:
//
//  The row you specified does not exist in the database.
//
#define PP_E_RS_ROWNOTFOUND              ((HRESULT)0x80044091L)

//
// MessageId: PP_E_RS_UPDATEFAILED
//
// MessageText:
//
//  Relationship update failed.
//
#define PP_E_RS_UPDATEFAILED             ((HRESULT)0x80044092L)

//
// MessageId: PP_E_RS_VALIDATIONFAILED
//
// MessageText:
//
//  The service is unable to validate your request.
//
#define PP_E_RS_VALIDATIONFAILED         ((HRESULT)0x80044094L)

//
// MessageId: PP_E_RS_PROPOSERELFAILED
//
// MessageText:
//
//  The service is unable to process your request because the Propose Relationship function failed.
//
#define PP_E_RS_PROPOSERELFAILED         ((HRESULT)0x80044095L)

//
// MessageId: PP_E_RS_RESOLVERELFAILED
//
// MessageText:
//
//  The service is unable to process your request because the Resolve Relationship function failed.
//
#define PP_E_RS_RESOLVERELFAILED         ((HRESULT)0x80044096L)

//
// MessageId: PP_E_RS_QUERYRELFAILED
//
// MessageText:
//
//  The service is unable to process your request because the Query Relationship function failed.
//
#define PP_E_RS_QUERYRELFAILED           ((HRESULT)0x80044097L)

//
// MessageId: PP_E_RS_INVALIDTARGETARRAY
//
// MessageText:
//
//  The request contained an invalid array of .NET Passport identifiers.
//
#define PP_E_RS_INVALIDTARGETARRAY       ((HRESULT)0x80044098L)

//
// MessageId: PP_E_RS_ORIGINRESOLVEAPPROVE
//
// MessageText:
//
//  Third party approval of relationship is not allowed without being eithera manager of the managed or has BDB data.
//
#define PP_E_RS_ORIGINRESOLVEAPPROVE     ((HRESULT)0x80044099L)

//
// MessageId: PP_W_RS_VALIDATIONFAILED
//
// MessageText:
//
//  Relationship validation failed.
//
#define PP_W_RS_VALIDATIONFAILED         ((HRESULT)0x8004409BL)

//
// MessageId: PP_E_RS_NOVALIDATIONDATA
//
// MessageText:
//
//  The request did not contain validation data.
//
#define PP_E_RS_NOVALIDATIONDATA         ((HRESULT)0x8004409DL)

//
// MessageId: PP_E_RS_NOPUIDORMEMBERNAME
//
// MessageText:
//
//  The request failed because no valid puid or membername was supplied.
//
#define PP_E_RS_NOPUIDORMEMBERNAME       ((HRESULT)0x8004409EL)

//
// MessageId: PP_E_RS_GETRELTICKETFAILED
//
// MessageText:
//
//  Get relationship ticket failed.
//
#define PP_E_RS_GETRELTICKETFAILED       ((HRESULT)0x800440A0L)

//
// MessageId: PP_E_RS_PACKRELTICKETERROR
//
// MessageText:
//
//  Service temporarily unavailable due to internal RelationshipServer Component error (hr=%1), please try later.
//
#define PP_E_RS_PACKRELTICKETERROR       ((HRESULT)0x800440A1L)

//
// MessageId: PP_E_RS_KIDDENYREL_NOTALLOWED
//
// MessageText:
//
//  Kids are not allowed to deny age based relationship.
//
#define PP_E_RS_KIDDENYREL_NOTALLOWED    ((HRESULT)0x800440A2L)

//
// MessageId: PP_E_RS_BDBVALIDATIONFAILED
//
// MessageText:
//
//  BDB validation failed.
//
#define PP_E_RS_BDBVALIDATIONFAILED      ((HRESULT)0x800440A3L)

//
// MessageId: PP_E_RS_UNKNOWNVALIDATIONTYPE
//
// MessageText:
//
//  Unknown validation type.
//
#define PP_E_RS_UNKNOWNVALIDATIONTYPE    ((HRESULT)0x800440A4L)

// base 0x4200
//consent server error code
//#define PP_E_CONSENTSERVICE_BASE                0x4200
//
// MessageId: PP_E_CS_QUERYDATA_TOOLARGE
//
// MessageText:
//
//  Your query returned too many results to display. Please refine the query and try again.
//
#define PP_E_CS_QUERYDATA_TOOLARGE       ((HRESULT)0x80044200L)

//
// MessageId: PP_E_CS_INVALIDCONSENTLEVEL
//
// MessageText:
//
//  The application referenced an invalid consent level. It must specify one of the following: full, limited, or deny.
//
#define PP_E_CS_INVALIDCONSENTLEVEL      ((HRESULT)0x80044201L)

//
// MessageId: PP_E_CS_MAXPARAMSIZEEXCEEDED
//
// MessageText:
//
//  One or more parameters exceeded the maximum limit allowed.
//
#define PP_E_CS_MAXPARAMSIZEEXCEEDED     ((HRESULT)0x80044202L)

//
// MessageId: PP_E_CS_REQPARAMSMISSING
//
// MessageText:
//
//  One or more required parameters were not specified. For more information, see the Association, Consent Management, and Settings Service WSDL documents.
//
#define PP_E_CS_REQPARAMSMISSING         ((HRESULT)0x80044203L)

//
// MessageId: PP_E_CS_TSNOTSUPPORTED
//
// MessageText:
//
//  The application specified an invalid task status value. For more information, see the Consent Management Service WSDL document.
//
#define PP_E_CS_TSNOTSUPPORTED           ((HRESULT)0x80044204L)

//
// MessageId: PP_E_CS_CSNOTSUPPORTED
//
// MessageText:
//
//  The application specified a consent status that the system does not support.
//
#define PP_E_CS_CSNOTSUPPORTED           ((HRESULT)0x80044205L)

//
// MessageId: PP_E_CS_INVALIDTASKTYPE
//
// MessageText:
//
//  The manifest contains an invalid or missing task type field.
//
#define PP_E_CS_INVALIDTASKTYPE          ((HRESULT)0x80044206L)

//
// MessageId: PP_E_CS_INVALIDTASKMANIFEST
//
// MessageText:
//
//  The application specified an invalid or incomplete task manifest.
//
#define PP_E_CS_INVALIDTASKMANIFEST      ((HRESULT)0x80044207L)

//
// MessageId: PP_E_CS_INVALIDTASKID
//
// MessageText:
//
//  The application specified an invalid task identifier (TaskID) or a task that may have been deleted.
//
#define PP_E_CS_INVALIDTASKID            ((HRESULT)0x80044208L)

//
// MessageId: PP_E_CS_MAXAGEBASEDSETTINGSITEIDSEXCEEDED
//
// MessageText:
//
//  The number of siteids in request for AgeBasedConsent submit task has been exceeded.
//
#define PP_E_CS_MAXAGEBASEDSETTINGSITEIDSEXCEEDED ((HRESULT)0x8004420BL)

//
// MessageId: PP_E_CS_INVALIDSITEORPOLICYGROUP
//
// MessageText:
//
//  The application specified a non-MSN site or policy group in a consent submit call.
//
#define PP_E_CS_INVALIDSITEORPOLICYGROUP ((HRESULT)0x8004420CL)

// base 0x4280
//ManagedConsent
//#define PP_E_MANAGEDCONSENT_BASE 0x4280
//
// MessageId: PP_E_MC_KPPVCINVALID
//
// MessageText:
//
//  KPPVC has invalid data
//
#define PP_E_MC_KPPVCINVALID             ((HRESULT)0x80044280L)

//
// MessageId: PP_E_MC_KPPVCMISSING
//
// MessageText:
//
//  KPPVC is missing
//
#define PP_E_MC_KPPVCMISSING             ((HRESULT)0x80044281L)

//
// MessageId: PP_E_MC_PARENT_INVALID
//
// MessageText:
//
//  Invalid parent
//
#define PP_E_MC_PARENT_INVALID           ((HRESULT)0x80044282L)

//
// MessageId: PP_E_MC_FLOW_INVALID
//
// MessageText:
//
//  Invalid flow
//
#define PP_E_MC_FLOW_INVALID             ((HRESULT)0x80044283L)

//
// MessageId: PP_E_MC_CONSENT_INVALID
//
// MessageText:
//
//  Invalid consent level
//
#define PP_E_MC_CONSENT_INVALID          ((HRESULT)0x80044284L)

//
// MessageId: PP_E_MC_REQUIRED_INPUTFIELD_MISSING
//
// MessageText:
//
//  Required user input missing
//
#define PP_E_MC_REQUIRED_INPUTFIELD_MISSING ((HRESULT)0x80041D0EL)

// base 0x4300
//relationship server error code
//#define PP_E_PPSETTINGS_BASE                0x4300
//
// MessageId: PP_E_PPS_INVALIDQUERY
//
// MessageText:
//
//  The application specified an invalid query.
//
#define PP_E_PPS_INVALIDQUERY            ((HRESULT)0x80044300L)

//
// MessageId: PP_E_PPS_INVALIDVERSIONTOKEN
//
// MessageText:
//
//  The application specified an invalid version token.
//
#define PP_E_PPS_INVALIDVERSIONTOKEN     ((HRESULT)0x80044301L)

//
// MessageId: PP_E_PPS_SAME_SETTINGS
//
// MessageText:
//
//  The client settings have not been modified since your last query.
//
#define PP_E_PPS_SAME_SETTINGS           ((HRESULT)0x80044302L)

//
// MessageId: PP_E_PPS_NO_SETTINGS
//
// MessageText:
//
//  No .NET Passport settings exist for this user.
//
#define PP_E_PPS_NO_SETTINGS             ((HRESULT)0x80044303L)

//
// MessageId: PP_E_PPS_SITE_REQUIRES_FULL_CONSENT
//
// MessageText:
//
//  The site supports only full or denied consent settings; it does not support limited consent.
//
#define PP_E_PPS_SITE_REQUIRES_FULL_CONSENT ((HRESULT)0x80044304L)

//
// MessageId: PP_E_PPS_MAXAGEBASEDSETTINGSITEIDSEXCEEDED
//
// MessageText:
//
//  The maximum number of site ids has been exceeded in query.
//
#define PP_E_PPS_MAXAGEBASEDSETTINGSITEIDSEXCEEDED ((HRESULT)0x80044305L)

//
// MessageId: PP_E_PPS_INVALIDQUERYCONDITION
//
// MessageText:
//
//  The application specified an invalid query condition.
//
#define PP_E_PPS_INVALIDQUERYCONDITION   ((HRESULT)0x80044306L)

//
// MessageId: PP_E_PPS_MAXAGEBASEDSETTINGPGIDSEXCEEDED
//
// MessageText:
//
//  The maximum number of policy group ids has been exceeded in query.
//
#define PP_E_PPS_MAXAGEBASEDSETTINGPGIDSEXCEEDED ((HRESULT)0x80044307L)

//
// MessageId: PP_E_PPS_USERMUSTBEKID
//
// MessageText:
//
//  The user must be an Age Based kid for this operation.
//
#define PP_E_PPS_USERMUSTBEKID           ((HRESULT)0x80044308L)

// base 0x4380
//validation engine error code
//#define PP_E_VALIDATEENGINE_BASE            0x4380
//
// MessageId: PP_E_VE_ICS_EXCEPTION
//
// MessageText:
//
//  Internal error: exception in the Cybersource module
//
#define PP_E_VE_ICS_EXCEPTION            ((HRESULT)0x80044380L)

//
// MessageId: PP_E_VE_INVALID_ICSCONFIG
//
// MessageText:
//
//  Internal error: the cybersource configuration data is invalid
//
#define PP_E_VE_INVALID_ICSCONFIG        ((HRESULT)0x80044381L)

//
// MessageId: PP_E_VE_INVALID_CCNUMBER
//
// MessageText:
//
//  The credit card number is invalid
//
#define PP_E_VE_INVALID_CCNUMBER         ((HRESULT)0x80044382L)

//
// MessageId: PP_E_VE_INVALID_CCMONTH
//
// MessageText:
//
//  The credit card month is invalid
//
#define PP_E_VE_INVALID_CCMONTH          ((HRESULT)0x80044383L)

//
// MessageId: PP_E_VE_INVALID_CCYEAR
//
// MessageText:
//
//  The credit card year is invalid
//
#define PP_E_VE_INVALID_CCYEAR           ((HRESULT)0x80044384L)

//
// MessageId: PP_E_VE_INVALID_CCFIRSTNAME
//
// MessageText:
//
//  The first name is empty or invalid
//
#define PP_E_VE_INVALID_CCFIRSTNAME      ((HRESULT)0x80044385L)

//
// MessageId: PP_E_VE_INVALID_CCLASTNAME
//
// MessageText:
//
//  The last name is empty or invalid
//
#define PP_E_VE_INVALID_CCLASTNAME       ((HRESULT)0x80044386L)

//
// MessageId: PP_E_VE_INVALID_POLICYID
//
// MessageText:
//
//  Invalid policy id
//
#define PP_E_VE_INVALID_POLICYID         ((HRESULT)0x80044387L)

//
// MessageId: PP_E_VE_ICS_SENDFAILED
//
// MessageText:
//
//  The request to the cybersource server failed
//
#define PP_E_VE_ICS_SENDFAILED           ((HRESULT)0x80044388L)

//
// MessageId: PP_E_VE_INVALID_XMLDATA
//
// MessageText:
//
//  The request contains parameters that do not conform to the XML schema.
//
#define PP_E_VE_INVALID_XMLDATA          ((HRESULT)0x80044389L)

//
// MessageId: PP_E_VE_XMLNODE_NOTFOUND
//
// MessageText:
//
//  The input xml is missing a required node
//
#define PP_E_VE_XMLNODE_NOTFOUND         ((HRESULT)0x8004438AL)

//
// MessageId: PP_E_VE_INCOMPATIBLE_DATA
//
// MessageText:
//
//  The input data is invalid, the validation type and the validation blob are incompatible
//
#define PP_E_VE_INCOMPATIBLE_DATA        ((HRESULT)0x8004438BL)

//
// MessageId: PP_E_VE_INVALID_PUID
//
// MessageText:
//
//  Invalid Passport ID
//
#define PP_E_VE_INVALID_PUID             ((HRESULT)0x8004438CL)

//
// MessageId: PP_E_VE_INVALID_HANDLER
//
// MessageText:
//
//  Internal error: invalid Passport handler
//
#define PP_E_VE_INVALID_HANDLER          ((HRESULT)0x8004438DL)

//
// MessageId: PP_E_VE_INVALID_SITEID
//
// MessageText:
//
//  Invalid site ID
//
#define PP_E_VE_INVALID_SITEID           ((HRESULT)0x8004438EL)

//
// MessageId: PP_E_VE_INVALID_CCMSETTINGS
//
// MessageText:
//
//  Intenal error: invalid CCM configuration settings
//
#define PP_E_VE_INVALID_CCMSETTINGS      ((HRESULT)0x8004438FL)

//
// MessageId: PP_E_VE_INVALID_CCTYPE
//
// MessageText:
//
//  Invalid credit card type
//
#define PP_E_VE_INVALID_CCTYPE           ((HRESULT)0x80044390L)

//
// MessageId: PP_E_VE_INVALID_MEMBERNAME
//
// MessageText:
//
//  Invalid member name
//
#define PP_E_VE_INVALID_MEMBERNAME       ((HRESULT)0x80044391L)

//
// MessageId: PP_E_VE_KOREAN_INVALID_RESULT
//
// MessageText:
//
//  The response from the KIS server contains invalid data
//
#define PP_E_VE_KOREAN_INVALID_RESULT    ((HRESULT)0x80044392L)

//
// MessageId: PP_E_VE_KOREAN_INVALID_NRRN
//
// MessageText:
//
//  The Korean NRRN
//
#define PP_E_VE_KOREAN_INVALID_NRRN      ((HRESULT)0x80044393L)

//
// MessageId: PP_E_VE_KOREAN_INVALID_NAME
//
// MessageText:
//
//  The name is empty or invalid
//
#define PP_E_VE_KOREAN_INVALID_NAME      ((HRESULT)0x80044394L)

//
// MessageId: PP_E_VE_KOREAN_INVALID_RESPONSE
//
// MessageText:
//
//  The KIS server returned an invalid response
//
#define PP_E_VE_KOREAN_INVALID_RESPONSE  ((HRESULT)0x80044395L)

//
// MessageId: PP_E_VE_KOREAN_HTTP_STATUS_CODE
//
// MessageText:
//
//  The http request to the KIS server failed
//
#define PP_E_VE_KOREAN_HTTP_STATUS_CODE  ((HRESULT)0x80044396L)

//
// MessageId: PP_E_VE_KOREAN_INVALID_ID
//
// MessageText:
//
//  Invalid KIS site id
//
#define PP_E_VE_KOREAN_INVALID_ID        ((HRESULT)0x80044397L)

//
// MessageId: PP_E_VE_KOREAN_INVALID_PASSWORD
//
// MessageText:
//
//  Invalid KIS password
//
#define PP_E_VE_KOREAN_INVALID_PASSWORD  ((HRESULT)0x80044398L)

//
// MessageId: PP_E_VE_KOREAN_INVALID_URL
//
// MessageText:
//
//  Invalid KIS url
//
#define PP_E_VE_KOREAN_INVALID_URL       ((HRESULT)0x80044399L)

//
// MessageId: PP_E_VE_KOREAN_INVALID_NONCE
//
// MessageText:
//
//  Invalid KIS nonce
//
#define PP_E_VE_KOREAN_INVALID_NONCE     ((HRESULT)0x8004439AL)

//
// MessageId: PP_E_VE_KOREAN_NEEDINIT
//
// MessageText:
//
//  Internal error: the KIS component must be initialzied
//
#define PP_E_VE_KOREAN_NEEDINIT          ((HRESULT)0x8004439BL)

//
// MessageId: PP_E_VE_KOREAN_INVALID_KEY
//
// MessageText:
//
//  Invalid KIS key
//
#define PP_E_VE_KOREAN_INVALID_KEY       ((HRESULT)0x8004439CL)

//
// MessageId: PP_E_VE_KOREAN_KIS_RETURN_OVER_LIMIT
//
// MessageText:
//
//  The error returned by KIS is not within the expected range
//
#define PP_E_VE_KOREAN_KIS_RETURN_OVER_LIMIT ((HRESULT)0x8004439DL)

//
// MessageId: PP_E_VE_KOREAN_ALREADY_INIT
//
// MessageText:
//
//  Internal error: the KIS component is already initialzied
//
#define PP_E_VE_KOREAN_ALREADY_INIT      ((HRESULT)0x8004439EL)

//
// MessageId: PP_E_VE_KOREAN_POLICYCHECK_FAIL
//
// MessageText:
//
//  The account does not satisfy the Korean Kids policy
//
#define PP_E_VE_KOREAN_POLICYCHECK_FAIL  ((HRESULT)0x8004439FL)

//
// MessageId: PP_E_VE_NOT_TRUSTED_SITE
//
// MessageText:
//
//  The site specified is not a trusted site
//
#define PP_E_VE_NOT_TRUSTED_SITE         ((HRESULT)0x800443A0L)

//
// MessageId: PP_E_VE_VALIDATION_FAIL
//
// MessageText:
//
//  The data validation failed
//
#define PP_E_VE_VALIDATION_FAIL          ((HRESULT)0x800443A1L)

//
// MessageId: PP_E_VE_KOREAN_HTTP_TIMEOUT
//
// MessageText:
//
//  Timeout during a http request to the KIS servers
//
#define PP_E_VE_KOREAN_HTTP_TIMEOUT      ((HRESULT)0x800443A2L)

//
// MessageId: PP_E_VE_UNABLE_TO_GET_VALIDATOROBJECT
//
// MessageText:
//
//  Internal error: cannot get a validator object
//
#define PP_E_VE_UNABLE_TO_GET_VALIDATOROBJECT ((HRESULT)0x800443A3L)

//
// MessageId: PP_E_UNABLETOMAPLCID
//
// MessageText:
//
//  Unable to map lcid to an ISO lang. Check ILCid pointer passed in.
//
#define PP_E_UNABLETOMAPLCID             ((HRESULT)0x800443A4L)

// base 0x43CC
// !!!!!!!!! Warning !!!!!!!!!
//
// The following errors need to be kept between 
// PP_E_VE_KOREAN_KIS_RETURN_BASE and 
// PP_E_VE_KOREAN_KIS_RETURN_LIMIT
//
// MessageId: PP_E_VE_KOREAN_KIS_RETURN_BASE
//
// MessageText:
//
//  This error code is the base of Korean validator error code. It should not be used as a return value.
//
#define PP_E_VE_KOREAN_KIS_RETURN_BASE   ((HRESULT)0x800443CCL)

//
// MessageId: PP_E_VE_KOREAN_KIS_NOT_MATCH
//
// MessageText:
//
//  NRRN and name don't match.
//
#define PP_E_VE_KOREAN_KIS_NOT_MATCH     ((HRESULT)0x800443CEL)

//
// MessageId: PP_E_VE_KOREAN_KIS_NO_DATA
//
// MessageText:
//
//  Request has no data in it.
//
#define PP_E_VE_KOREAN_KIS_NO_DATA       ((HRESULT)0x800443CFL)

//
// MessageId: PP_E_VE_KOREAN_KIS_INVALID_NRRN_CHECKSUM
//
// MessageText:
//
//  NRRN check sum failed.
//
#define PP_E_VE_KOREAN_KIS_INVALID_NRRN_CHECKSUM ((HRESULT)0x800443D1L)

//
// MessageId: PP_E_VE_KOREAN_KIS_RETURN_LIMIT
//
// MessageText:
//
//  This error code is the upper limit of Korean validator error code. It should not be used as a return value.
//
#define PP_E_VE_KOREAN_KIS_RETURN_LIMIT  ((HRESULT)0x800443FFL)

// base 0x4400
// Errors
//#define PP_E_PKSERVICE_BASE  0x4400
//
// MessageId: PP_E_CA_NO_CLIENTCERT
//
// MessageText:
//
//  Failed to retrieve the SSL client certificate with ISAPI Server Support Function.
//
#define PP_E_CA_NO_CLIENTCERT            ((HRESULT)0x80044401L)

//
// MessageId: PP_E_CA_INITHANDLER
//
// MessageText:
//
//  The PPSOAPHANDLER InitializeHandler failed.
//
#define PP_E_CA_INITHANDLER              ((HRESULT)0x80044402L)

//
// MessageId: PP_E_CA_NULL_CERTINFOPTR
//
// MessageText:
//
//  The CA policy returned a NULL pointer for PPCertInfo that has the certificate extensions for the issued certificate.
//
#define PP_E_CA_NULL_CERTINFOPTR         ((HRESULT)0x80044403L)

//
// MessageId: PP_E_CA_BAD_EXTENSION
//
// MessageText:
//
//  An invalid extension is detected during certificate construction.
//
#define PP_E_CA_BAD_EXTENSION            ((HRESULT)0x80044404L)

//
// MessageId: PP_E_CA_PKCS10_CERTINFO
//
// MessageText:
//
//  The PKCS-10 validation must have previously failed so that IssueCertificate cannot continue to issue a certificate.
//
#define PP_E_CA_PKCS10_CERTINFO          ((HRESULT)0x80044405L)

// base 0x44e0
// Errors
#define PP_E_PKSERVICE_BASE  0x4400
//
// MessageId: PP_E_PK_GETCERT
//
// MessageText:
//
//  Client certificate can not be decoded.
//
#define PP_E_PK_GETCERT                  ((HRESULT)0x800444E0L)

//
// MessageId: PP_E_PK_CLIENTCERT
//
// MessageText:
//
//  Client certificate missing
//
#define PP_E_PK_CLIENTCERT               ((HRESULT)0x800444E1L)

//
// MessageId: PP_E_PK_INVALIDCLIENTCERT
//
// MessageText:
//
//  Invalid client certificate
//
#define PP_E_PK_INVALIDCLIENTCERT        ((HRESULT)0x800444E2L)

//
// MessageId: PP_E_PK_CACERT
//
// MessageText:
//
//  Invalid CA on client certificate
//
#define PP_E_PK_CACERT                   ((HRESULT)0x800444E3L)

//
// MessageId: PP_E_NEED_CERT
//
// MessageText:
//
//  Certificate needed
//
#define PP_E_NEED_CERT                   ((HRESULT)0x800444E4L)

//
// MessageId: PP_E_NO_CLIENT_CERT
//
// MessageText:
//
//  Failed to retrieve certificate from browser
//
#define PP_E_NO_CLIENT_CERT              ((HRESULT)0x800444E5L)

//
// MessageId: PP_E_PK_CERT_UNBOUND_REQUIRE_NONE
//
// MessageText:
//
//  Authentication required
//
#define PP_E_PK_CERT_UNBOUND_REQUIRE_NONE ((HRESULT)0x800444E6L)

//
// MessageId: PP_E_PK_UI_MANAGECERT_BADARG
//
// MessageText:
//
//  Bad internal name
//
#define PP_E_PK_UI_MANAGECERT_BADARG     ((HRESULT)0x800444F0L)

//
// MessageId: PP_E_UI_GETASSOC_INVALIDNAME
//
// MessageText:
//
//  Invalid internal member name
//
#define PP_E_UI_GETASSOC_INVALIDNAME     ((HRESULT)0x800444F1L)

//
// MessageId: PP_E_UI_GETASSOC_INVALIDPURPOSE
//
// MessageText:
//
//  Invalid certificate purpose
//
#define PP_E_UI_GETASSOC_INVALIDPURPOSE  ((HRESULT)0x800444F2L)

//
// MessageId: PP_E_UI_GETASSOC_TOOMANY_PURPOSES
//
// MessageText:
//
//  Invalid certificate purposes count
//
#define PP_E_UI_GETASSOC_TOOMANY_PURPOSES ((HRESULT)0x800444F3L)

// base 0x4500
//------------------------------------------------------------------------
// Profile Server error codes
//------------------------------------------------------------------------
#define PP_E_UPO_BASE 0x4500
//
// MessageId: PP_E_UPO_PROPERTY_NOTVALIDATED
//
// MessageText:
//
//  The property has not yet been validated.
//
#define PP_E_UPO_PROPERTY_NOTVALIDATED   ((HRESULT)0x80044500L)

//
// MessageId: PP_E_UPO_BAG_NOTSET
//
// MessageText:
//
//  A bag has not been set in the property iterator.
//
#define PP_E_UPO_BAG_NOTSET              ((HRESULT)0x80044501L)

//
// MessageId: PP_E_UPO_FILTER_NOTSET
//
// MessageText:
//
//  A filter has not been set in the property iterator.
//
#define PP_E_UPO_FILTER_NOTSET           ((HRESULT)0x80044502L)

//
// MessageId: PP_E_UPO_PROPERTY_ASSOC_SET
//
// MessageText:
//
//  Property association has already been set.
//
#define PP_E_UPO_PROPERTY_ASSOC_SET      ((HRESULT)0x80044503L)

//
// MessageId: PP_E_UPO_PROPERTY_ASSOC_NOTSET
//
// MessageText:
//
//  Property association has not been set.
//
#define PP_E_UPO_PROPERTY_ASSOC_NOTSET   ((HRESULT)0x80044504L)

//
// MessageId: PP_E_UPO_PROPERTYBAG_PROPERTYNOTPRESENT
//
// MessageText:
//
//  The specified property is not in the property bag.
//
#define PP_E_UPO_PROPERTYBAG_PROPERTYNOTPRESENT ((HRESULT)0x80044505L)

//
// MessageId: PP_E_UPO_PROPERTY_IDSET
//
// MessageText:
//
//  The property ID has already been set.
//
#define PP_E_UPO_PROPERTY_IDSET          ((HRESULT)0x80044506L)

//
// MessageId: PP_E_UPO_PROPERTY_IDNOTSET
//
// MessageText:
//
//  The property ID has not been set.
//
#define PP_E_UPO_PROPERTY_IDNOTSET       ((HRESULT)0x80044507L)

//
// MessageId: PP_E_UPO_PROPERTYBAG_PUIDSET
//
// MessageText:
//
//  The PUID has already been set in the property bag.
//
#define PP_E_UPO_PROPERTYBAG_PUIDSET     ((HRESULT)0x80044508L)

//
// MessageId: PP_E_UPO_PROPERTYBAG_PUIDNOTSET
//
// MessageText:
//
//  The PUID has not yet been set in the property bag.
//
#define PP_E_UPO_PROPERTYBAG_PUIDNOTSET  ((HRESULT)0x80044509L)

//
// MessageId: PP_E_UPO_PROPERTYBAG_CREDNAMESET
//
// MessageText:
//
//  The credential membername has already been set in the property bag.
//
#define PP_E_UPO_PROPERTYBAG_CREDNAMESET ((HRESULT)0x8004450AL)

//
// MessageId: PP_E_UPO_CREDDB_ATTRITNOTSET
//
// MessageText:
//
//  The DB attributes have not been set for a load or persist.
//
#define PP_E_UPO_CREDDB_ATTRITNOTSET     ((HRESULT)0x8004450BL)

//
// MessageId: PP_E_UPO_PROPERTY_INVALIDCREDID
//
// MessageText:
//
//  The cred ID was not a valid ID.
//
#define PP_E_UPO_PROPERTY_INVALIDCREDID  ((HRESULT)0x8004450CL)

//
// MessageId: PP_E_UPO_PROPERTY_INVALIDCREDNAME
//
// MessageText:
//
//  The cred name was not a valid name.
//
#define PP_E_UPO_PROPERTY_INVALIDCREDNAME ((HRESULT)0x8004450DL)

//
// MessageId: PP_E_UPO_PROPERTY_INVALIDPUID
//
// MessageText:
//
//  The PUID was not a valid PUID.
//
#define PP_E_UPO_PROPERTY_INVALIDPUID    ((HRESULT)0x8004450EL)

//
// MessageId: PP_E_UPO_PROPERTY_INVALIDCREDFIELD
//
// MessageText:
//
//  The cred field provided was not valid on the operation being performed.
//
#define PP_E_UPO_PROPERTY_INVALIDCREDFIELD ((HRESULT)0x8004450FL)

//
// MessageId: PP_E_UPO_PROPERTY_INVALIDCREDTYPE
//
// MessageText:
//
//  The credential type provided was not valid.
//
#define PP_E_UPO_PROPERTY_INVALIDCREDTYPE ((HRESULT)0x80044510L)

//
// MessageId: PP_E_UPO_MULTICREDPERTYPE
//
// MessageText:
//
//  The credential xml contains multiple credentials for the same type.
//
#define PP_E_UPO_MULTICREDPERTYPE        ((HRESULT)0x80044511L)

//
// MessageId: PP_E_UPO_INTERNAL
//
// MessageText:
//
//  An internal error occurred in User Properties code.
//
#define PP_E_UPO_INTERNAL                ((HRESULT)0x80044512L)

//
// MessageId: PP_E_UPO_PROPERTYBAG_INVALID
//
// MessageText:
//
//  The property bag is not valid.
//
#define PP_E_UPO_PROPERTYBAG_INVALID     ((HRESULT)0x80044513L)

//
// MessageId: PP_E_UPO_GETPOLICYGROUP_FAILED
//
// MessageText:
//
//  Unable to get the policy group for a site.
//
#define PP_E_UPO_GETPOLICYGROUP_FAILED   ((HRESULT)0x80044514L)

//
// MessageId: PP_E_UPO_PROPERTY_MISSING
//
// MessageText:
//
//  The retrieved property was NULL.
//
#define PP_E_UPO_PROPERTY_MISSING        ((HRESULT)0x80044515L)

//
// MessageId: PP_E_UPO_DSPROPERTYBAG_INSERTFAILED
//
// MessageText:
//
//  Unable to insert a property in the dataset property bag.
//
#define PP_E_UPO_DSPROPERTYBAG_INSERTFAILED ((HRESULT)0x80044516L)

//
// MessageId: PP_E_UPO_DATASET_NOTFOUND
//
// MessageText:
//
//  The specified dataset was not found.
//
#define PP_E_UPO_DATASET_NOTFOUND        ((HRESULT)0x80044517L)

//
// MessageId: PP_E_LCID_NOT_FOUND
//
// MessageText:
//
//  Unable to get the request locale.
//
#define PP_E_LCID_NOT_FOUND              ((HRESULT)0x80044518L)

//
// MessageId: PP_E_MEMBERNAME_NOT_FOUND
//
// MessageText:
//
//  The membername was not set or set with an invalid type in the property bag.
//
#define PP_E_MEMBERNAME_NOT_FOUND        ((HRESULT)0x80044519L)

//
// MessageId: PP_E_CB_INVALIDCONSENTTYPE
//
// MessageText:
//
//  Consent type requested is not valid.
//
#define PP_E_CB_INVALIDCONSENTTYPE       ((HRESULT)0x8004451AL)

//
// MessageId: PP_E_CB_CONSENTMISSING
//
// MessageText:
//
//  Consent element is NULL or missing.
//
#define PP_E_CB_CONSENTMISSING           ((HRESULT)0x8004451BL)

//
// MessageId: PP_E_CB_DATASOURCENULL
//
// MessageText:
//
//  The consent datasource has not been set.
//
#define PP_E_CB_DATASOURCENULL           ((HRESULT)0x8004451CL)

//
// MessageId: PP_E_CB_PROPERTYNOTFOUND
//
// MessageText:
//
//  The consent property requested does not exist in the bag.
//
#define PP_E_CB_PROPERTYNOTFOUND         ((HRESULT)0x8004451DL)

//
// MessageId: PP_E_CB_INVALIDPUID
//
// MessageText:
//
//  The consent bag's PUID is invalid or empty.
//
#define PP_E_CB_INVALIDPUID              ((HRESULT)0x8004451EL)

//
// MessageId: PP_E_CB_INVALIDGID
//
// MessageText:
//
//  The group ID was invalid or not set.
//
#define PP_E_CB_INVALIDGID               ((HRESULT)0x8004451FL)

//
// MessageId: PP_E_CB_GCBNOTFOUND
//
// MessageText:
//
//  Group consent bag was not found or was NULL.
//
#define PP_E_CB_GCBNOTFOUND              ((HRESULT)0x80044520L)

//
// MessageId: PP_E_CB_NOTINITIALIZED
//
// MessageText:
//
//  The consent bag was not properly initialized before use.
//
#define PP_E_CB_NOTINITIALIZED           ((HRESULT)0x80044521L)

//
// MessageId: PP_E_DATASOURCE_MAXSIZEXCEEDED
//
// MessageText:
//
//  One of the fields in the datasource exceeded the max size.
//
#define PP_E_DATASOURCE_MAXSIZEXCEEDED   ((HRESULT)0x80044522L)

//
// MessageId: PP_E_JITGRADUATION_EFAIL
//
// MessageText:
//
//  An E_FAIL is returned during JIT graduation.
//
#define PP_E_JITGRADUATION_EFAIL         ((HRESULT)0x80044523L)

// base 0x4601
// Errors
#define PP_E_CERTBIND_BASE  0x4600
//
// MessageId: PP_E_CERTBIND_INVALID_MEMBERNAME
//
// MessageText:
//
//  This is an internal error. No member name was given during disassociation of a client certificate from a credential.
//
#define PP_E_CERTBIND_INVALID_MEMBERNAME ((HRESULT)0x80044605L)

//
// MessageId: PP_E_CERTBIND_NONMATCHING
//
// MessageText:
//
//  This is an error used internally to determine whether the current certificate matches one that is being associated.
//
#define PP_E_CERTBIND_NONMATCHING        ((HRESULT)0x8004460FL)

//
// MessageId: PP_E_CERTBIND_DETAIL_CN_BAD_DN
//
// MessageText:
//
//  This is an internal error. The function to parse the DN for the CN is called with a bad or empty DN.
//
#define PP_E_CERTBIND_DETAIL_CN_BAD_DN   ((HRESULT)0x80044612L)

//
// MessageId: PP_E_CERTBIND_GETFIELD_NOCERT
//
// MessageText:
//
//  This is an internal error. The function to parse the CertInfo data is called with a NULL CertElm pointer.
//
#define PP_E_CERTBIND_GETFIELD_NOCERT    ((HRESULT)0x80044615L)

//
// MessageId: PP_E_CERTBIND_BAD_CERTINFO
//
// MessageText:
//
//  This is an internal error. The function to parse the CertInfo data is called with a NULL CertInfo pointer.
//
#define PP_E_CERTBIND_BAD_CERTINFO       ((HRESULT)0x8004461CL)

//
// MessageId: PP_E_CERTBIND_ASSOC_CONFLICT
//
// MessageText:
//
//  This is an internal error used to redirect the client to the conflict page during certificate association.
//
#define PP_E_CERTBIND_ASSOC_CONFLICT     ((HRESULT)0x8004461EL)

//
// MessageId: PP_E_CERTBIND_FLOWTOKEN_EMPTY
//
// MessageText:
//
//  An internal error due to missing flow token during client certificate management flow.
//
#define PP_E_CERTBIND_FLOWTOKEN_EMPTY    ((HRESULT)0x8004461FL)

//
// MessageId: PP_E_CERTINFO_SET_INVALIDARG
//
// MessageText:
//
//  There are more than 11 certificates found in the CertInfo during binding.
//
#define PP_E_CERTINFO_SET_INVALIDARG     ((HRESULT)0x80044660L)

//
// MessageId: PP_E_CERTINFO_SET_BADHEADER
//
// MessageText:
//
//  The header field for the CertInfo data stream is corrupted.
//
#define PP_E_CERTINFO_SET_BADHEADER      ((HRESULT)0x80044661L)

//
// MessageId: PP_E_CERTINFO_SET_BADCERTFIELD
//
// MessageText:
//
//  The CertInfo data stream is corrupted.
//
#define PP_E_CERTINFO_SET_BADCERTFIELD   ((HRESULT)0x80044662L)

//
// MessageId: PP_E_CERTINFO_SET_BADCERT_SUBJECT
//
// MessageText:
//
//  The CertInfo data stream does not have a value for the subject field.
//
#define PP_E_CERTINFO_SET_BADCERT_SUBJECT ((HRESULT)0x80044663L)

//
// MessageId: PP_E_CERTINFO_SET_BADCERT_ISSUER
//
// MessageText:
//
//  The CertInfo data stream does not have a value for the issuer field.
//
#define PP_E_CERTINFO_SET_BADCERT_ISSUER ((HRESULT)0x80044664L)

//
// MessageId: PP_E_CERTINFO_SET_BADCERT_SERIALNO
//
// MessageText:
//
//  The CertInfo data stream does not have a value for the serial number field.
//
#define PP_E_CERTINFO_SET_BADCERT_SERIALNO ((HRESULT)0x80044665L)

//
// MessageId: PP_E_CERTINFO_SET_BADCERT_PURPOSES
//
// MessageText:
//
//  The CertInfo data stream does not have a value for the purposes field.
//
#define PP_E_CERTINFO_SET_BADCERT_PURPOSES ((HRESULT)0x80044666L)

//
// MessageId: PP_E_CERTINFO_SET_BADCERT_USAGE
//
// MessageText:
//
//  The CertInfo data stream does not have a value for the key usage field.
//
#define PP_E_CERTINFO_SET_BADCERT_USAGE  ((HRESULT)0x80044667L)

//
// MessageId: PP_E_CERTINFO_SET_BADCERT_EXPIRY_LOW
//
// MessageText:
//
//  The CertInfo data stream does not have a value for the low part of the date for NotBefore or NotAfter field.
//
#define PP_E_CERTINFO_SET_BADCERT_EXPIRY_LOW ((HRESULT)0x80044669L)

//
// MessageId: PP_E_CERTINFO_SET_BADCERT_EXPIRY_HIGH
//
// MessageText:
//
//  The CertInfo data stream does not have a value for the high part of the date for NotBefore or NotAfter field.
//
#define PP_E_CERTINFO_SET_BADCERT_EXPIRY_HIGH ((HRESULT)0x8004466AL)

//
// MessageId: PP_E_CERTINFO_SET_BADCERT_BADUSAGE
//
// MessageText:
//
//  The CertInfo data stream does not have a value for the usage field.
//
#define PP_E_CERTINFO_SET_BADCERT_BADUSAGE ((HRESULT)0x8004466BL)

//
// MessageId: PP_E_CERTINFO_SET_BADCERT_BADPURPOSES
//
// MessageText:
//
//  The CertInfo data stream does not have a value for the purposes-used field.
//
#define PP_E_CERTINFO_SET_BADCERT_BADPURPOSES ((HRESULT)0x8004466CL)

//
// MessageId: PP_E_CERTINFO_SET_BADHEADER_PURPOSECOUNT
//
// MessageText:
//
//  The CertInfo data stream has a value of 0 for the purposes-used field.
//
#define PP_E_CERTINFO_SET_BADHEADER_PURPOSECOUNT ((HRESULT)0x8004466DL)

//
// MessageId: PP_E_CERTINFO_SET_BADHEADER_ACTIONS
//
// MessageText:
//
//  The CertInfo data stream does not have a value for the Actions field in the header.
//
#define PP_E_CERTINFO_SET_BADHEADER_ACTIONS ((HRESULT)0x8004466EL)

//
// MessageId: PP_E_CERTINFO_SET_BADHEADER_CURRENTTIME
//
// MessageText:
//
//  The CertInfo data stream does not have a value for the time field in the header.
//
#define PP_E_CERTINFO_SET_BADHEADER_CURRENTTIME ((HRESULT)0x8004466FL)

//
// MessageId: PP_E_CERTINFO_SET_BADHEADER_PUID
//
// MessageText:
//
//  The CertInfo data stream does not have a value for the PUID field in the header.
//
#define PP_E_CERTINFO_SET_BADHEADER_PUID ((HRESULT)0x80044670L)

//
// MessageId: PP_E_CERTINFO_STR2CERTELEM_NO_ISSUER
//
// MessageText:
//
//  No value was specified for the issuer while constructing a CertInfo.
//
#define PP_E_CERTINFO_STR2CERTELEM_NO_ISSUER ((HRESULT)0x80044671L)

//
// MessageId: PP_E_CERTINFO_STR2CERTELEM_NO_SUBJECT
//
// MessageText:
//
//  No value was specified for the subject while constructing a CertInfo.
//
#define PP_E_CERTINFO_STR2CERTELEM_NO_SUBJECT ((HRESULT)0x80044672L)

//
// MessageId: PP_E_CERTINFO_STR2CERTELEM_NO_SERIALNO
//
// MessageText:
//
//  No value was specified for the serial number while constructing a CertInfo.
//
#define PP_E_CERTINFO_STR2CERTELEM_NO_SERIALNO ((HRESULT)0x80044673L)

//
// MessageId: PP_E_CERTINFO_STR2CERTELEM_NO_EXPIRY
//
// MessageText:
//
//  No value was specified for the NotBefore or NotAfter fields while constructing a CertInfo.
//
#define PP_E_CERTINFO_STR2CERTELEM_NO_EXPIRY ((HRESULT)0x80044674L)

//
// MessageId: PP_E_CERTINFO_STR2CERTELEM_NO_CALOGO
//
// MessageText:
//
//  No value was specified for the URL for CA Partner logo while constructing a CertInfo.
//
#define PP_E_CERTINFO_STR2CERTELEM_NO_CALOGO ((HRESULT)0x80044675L)

//
// MessageId: PP_E_CERTINFO_STR2CERTELEM_NO_X509
//
// MessageText:
//
//  No value was specified for the certificate data while constructing a CertInfo.
//
#define PP_E_CERTINFO_STR2CERTELEM_NO_X509 ((HRESULT)0x80044676L)

//
// MessageId: PP_E_CERTINFO_STR2CERTELEM_BAD_USAGE
//
// MessageText:
//
//  No value or an invalid usage was specified for the usage while constructing a CertInfo.
//
#define PP_E_CERTINFO_STR2CERTELEM_BAD_USAGE ((HRESULT)0x80044677L)

//
// MessageId: PP_E_CERTINFO_STR2CERTELEM_BAD_PURPOSES
//
// MessageText:
//
//  No value or an invalid usage was specified for the purposed-used while constructing a CertInfo.
//
#define PP_E_CERTINFO_STR2CERTELEM_BAD_PURPOSES ((HRESULT)0x80044678L)

//
// MessageId: PP_E_CERTINFO_STR2CERTELEM_INCONSISTENT_USAGE
//
// MessageText:
//
//  An attempt to add a certificate with a different usage into a CertInfo stream that already has this certificate.
//
#define PP_E_CERTINFO_STR2CERTELEM_INCONSISTENT_USAGE ((HRESULT)0x80044679L)

//
// MessageId: PP_E_CERTINFO_SET_BAD_COUNT
//
// MessageText:
//
//  The integrity check on the purpose count has failed while constructing the CertInfo stream.
//
#define PP_E_CERTINFO_SET_BAD_COUNT      ((HRESULT)0x8004467AL)

//
// MessageId: PP_E_CERTINFO_SETHEADER_BAD_PUID
//
// MessageText:
//
//  The specified PUID during construction of the CertInfo  header is invalid.
//
#define PP_E_CERTINFO_SETHEADER_BAD_PUID ((HRESULT)0x8004467BL)

//
// MessageId: PP_E_CERTINFO_SETHEADER_BAD_ACTION
//
// MessageText:
//
//  The specified Action during construction of the CertInfo header is invalid.
//
#define PP_E_CERTINFO_SETHEADER_BAD_ACTION ((HRESULT)0x8004467CL)

//
// MessageId: PP_E_CERTINFO_GETCERT_INVALID_INDEX
//
// MessageText:
//
//  The specified index for a certificate in the CertInfo stream is invalid.
//
#define PP_E_CERTINFO_GETCERT_INVALID_INDEX ((HRESULT)0x8004467DL)

//
// MessageId: PP_E_CERTINFO_SET_INVALID_STRING
//
// MessageText:
//
//  There was no data during deserializing of the CertInfo data stream.
//
#define PP_E_CERTINFO_SET_INVALID_STRING ((HRESULT)0x8004467FL)

//
// MessageId: PP_E_CERTINFO_CONSTRUCT_BAD_COUNT
//
// MessageText:
//
//  The purposes-used count failed integrity check during serializing of the CertInfo.
//
#define PP_E_CERTINFO_CONSTRUCT_BAD_COUNT ((HRESULT)0x80044680L)

//
// MessageId: PP_E_CERTINFO_CONSTRUCT_NO_ISSUER
//
// MessageText:
//
//  No issuer was found while serializing the CertInfo.
//
#define PP_E_CERTINFO_CONSTRUCT_NO_ISSUER ((HRESULT)0x80044681L)

//
// MessageId: PP_E_CERTINFO_CONSTRUCT_NO_SUBJECT
//
// MessageText:
//
//  No subject was found while serializing the CertInfo.
//
#define PP_E_CERTINFO_CONSTRUCT_NO_SUBJECT ((HRESULT)0x80044682L)

//
// MessageId: PP_E_CERTINFO_CONSTRUCT_NO_SERIALNO
//
// MessageText:
//
//  No serial number was found while serializing the CertInfo.
//
#define PP_E_CERTINFO_CONSTRUCT_NO_SERIALNO ((HRESULT)0x80044683L)

//
// MessageId: PP_E_CERTINFO_CONSTRUCT_INVALID_USAGE
//
// MessageText:
//
//  No usage was found while serializing the CertInfo.
//
#define PP_E_CERTINFO_CONSTRUCT_INVALID_USAGE ((HRESULT)0x80044684L)

//
// MessageId: PP_E_CERTINFO_CONSTRUCT_INVALID_PURPOSES
//
// MessageText:
//
//  No purposes-used was found while serializing the CertInfo.
//
#define PP_E_CERTINFO_CONSTRUCT_INVALID_PURPOSES ((HRESULT)0x80044685L)

//
// MessageId: PP_E_CERTINFO_GETSINGLECERT_BAD_COUNT
//
// MessageText:
//
//  There are more than one certificate in the CertInfo data stream.
//
#define PP_E_CERTINFO_GETSINGLECERT_BAD_COUNT ((HRESULT)0x80044687L)

//
// MessageId: PP_E_CERTINFO_GETSINGLECERT_BAD_INDEX
//
// MessageText:
//
//  Attempting to retrieve a single certificate with an index that is out of bounds in the CertInfo object.
//
#define PP_E_CERTINFO_GETSINGLECERT_BAD_INDEX ((HRESULT)0x80044688L)

//
// MessageId: PP_E_CERTINFO_GETCERT_NOT_SIGNLE
//
// MessageText:
//
//  The CertInfo stream has more than one certificate; it is not for a single certificate.
//
#define PP_E_CERTINFO_GETCERT_NOT_SIGNLE ((HRESULT)0x80044689L)

//
// MessageId: PP_E_CERTINFO_MAX_REACHED
//
// MessageText:
//
//  Failed to add a certificate to a CertInfo object because it already has the maximum number of certificates.
//
#define PP_E_CERTINFO_MAX_REACHED        ((HRESULT)0x8004468AL)

//
// MessageId: PP_E_CERTINFO_STR2CERTELEM_NO_THUMBPRINT
//
// MessageText:
//
//  No value was specified for the thumbprint while constructing a CertInfo.
//
#define PP_E_CERTINFO_STR2CERTELEM_NO_THUMBPRINT ((HRESULT)0x8004468BL)

//
// MessageId: PP_E_CERTINFO_STR2CERTELEM_NO_EMAIL
//
// MessageText:
//
//  No value was specified for the email address while constructing a CertInfo.
//
#define PP_E_CERTINFO_STR2CERTELEM_NO_EMAIL ((HRESULT)0x8004468CL)

//
// MessageId: PP_E_CERTINFO_SET_BADCERT_HR
//
// MessageText:
//
//  No value was found for the HR field while deserializing the CertInfo data stream.
//
#define PP_E_CERTINFO_SET_BADCERT_HR     ((HRESULT)0x8004468DL)

//
// MessageId: PP_E_BAD_BASE_URL
//
// MessageText:
//
//  The base URL used to construct a new URL is invalid. It is missing the "//" or a ".".
//
#define PP_E_BAD_BASE_URL                ((HRESULT)0x800446A2L)

//
// MessageId: PP_E_CERTINFO_BAD_ALGORITHM
//
// MessageText:
//
//  The CertInfo public key is not of a supported algorithm.
//
#define PP_E_CERTINFO_BAD_ALGORITHM      ((HRESULT)0x800446A3L)

//
// MessageId: PP_E_PK_CERTINFO_INVALID_FIELD_
//
// MessageText:
//
//  The CertInfo data stream does not have a valid header.
//
#define PP_E_PK_CERTINFO_INVALID_FIELD_  ((HRESULT)0x800446B0L)

// DO NOT USE THE NEXT 15 error codes
// PLEASE SEE certInfo.h for the number of error
// codes reserved.
// base 0x4701
// Errors
#define PP_E_RA_BASE  0x4700
//
// MessageId: PP_E_RA_INIT_EVTLOGGER
//
// MessageText:
//
//  Failed to get eventlogger interface
//
#define PP_E_RA_INIT_EVTLOGGER           ((HRESULT)0x80044701L)

//
// MessageId: PP_E_RA_INVALID_BLOB_SIZE
//
// MessageText:
//
//  Invalid blob size
//
#define PP_E_RA_INVALID_BLOB_SIZE        ((HRESULT)0x80044702L)

//
// MessageId: PP_E_RA_INVALID_CRYPT_ALGOID_SIZE
//
// MessageText:
//
//  Invalid blob size
//
#define PP_E_RA_INVALID_CRYPT_ALGOID_SIZE ((HRESULT)0x80044703L)

//
// MessageId: PP_E_RA_INVALID_CERT_EXT_SIZE
//
// MessageText:
//
//  Invalid certificate extension size
//
#define PP_E_RA_INVALID_CERT_EXT_SIZE    ((HRESULT)0x80044704L)

//
// MessageId: PP_E_RA_INVALID_PKI_BLOB_SIZE
//
// MessageText:
//
//  Invalid blob size for CERT_PUBLIC_KEY_INFO
//
#define PP_E_RA_INVALID_PKI_BLOB_SIZE    ((HRESULT)0x80044705L)

//
// MessageId: PP_E_RA_BAD_MEMBERNAME
//
// MessageText:
//
//  Bad membername
//
#define PP_E_RA_BAD_MEMBERNAME           ((HRESULT)0x80044706L)

//
// MessageId: PP_E_RA_GET_DOMAIN
//
// MessageText:
//
//  Failed to get domain
//
#define PP_E_RA_GET_DOMAIN               ((HRESULT)0x80044708L)

//
// MessageId: PP_E_RA_INIT_CA_BAD_CONFIG
//
// MessageText:
//
//  Bad configuration file
//
#define PP_E_RA_INIT_CA_BAD_CONFIG       ((HRESULT)0x80044709L)

//
// MessageId: PP_E_RA_BAD_PUID
//
// MessageText:
//
//  Bad PUID
//
#define PP_E_RA_BAD_PUID                 ((HRESULT)0x8004470AL)

//
// MessageId: PP_E_CERTREQUEST_TOOMANY_ATTRIBUTES
//
// MessageText:
//
//  The number of attributes in the certificate request has exceeded the maximum number, k_cMaxCertAttributes.
//
#define PP_E_CERTREQUEST_TOOMANY_ATTRIBUTES ((HRESULT)0x8004470BL)

//
// MessageId: PP_E_CERTREQUEST_TOOMANY_ATTRIBBLOBS
//
// MessageText:
//
//  The number of attribute blobs in an attribute in the certificate request has exceeded the maximum number, k_cMaxCertAttribBlobs.
//
#define PP_E_CERTREQUEST_TOOMANY_ATTRIBBLOBS ((HRESULT)0x8004470CL)

//
// MessageId: PP_E_RAAPI_INIT_NO_CAMACHINE_UP
//
// MessageText:
//
//  No CA machines available
//
#define PP_E_RAAPI_INIT_NO_CAMACHINE_UP  ((HRESULT)0x80044710L)

//
// MessageId: PP_E_RAAPI_INIT_NO_CAMACHINE
//
// MessageText:
//
//  No CA machines available
//
#define PP_E_RAAPI_INIT_NO_CAMACHINE     ((HRESULT)0x80044711L)

//
// MessageId: PP_E_RAAPI_INIT_GETCOMPUTERNAME
//
// MessageText:
//
//  Failed while determining computer name length
//
#define PP_E_RAAPI_INIT_GETCOMPUTERNAME  ((HRESULT)0x80044712L)

//
// MessageId: PP_E_RAAPI_PROV_INVALID_PURPOSE_ARG
//
// MessageText:
//
//  Invalid purpose specified
//
#define PP_E_RAAPI_PROV_INVALID_PURPOSE_ARG ((HRESULT)0x80044715L)

//
// MessageId: PP_E_RAAPI_PROV_BAD_KEYSPEC
//
// MessageText:
//
//  Bad keyspec
//
#define PP_E_RAAPI_PROV_BAD_KEYSPEC      ((HRESULT)0x80044719L)

//
// MessageId: PP_E_RAAPI_PARTNERCA_NOTFOUND
//
// MessageText:
//
//  Partner CA could not be found
//
#define PP_E_RAAPI_PARTNERCA_NOTFOUND    ((HRESULT)0x8004471FL)

//
// MessageId: PP_E_RAAPI_SETCERT_BADEMAIL
//
// MessageText:
//
//  Email address from the certificate does not match member name
//
#define PP_E_RAAPI_SETCERT_BADEMAIL      ((HRESULT)0x80044737L)

//
// MessageId: PP_E_RAAPI_SETCERT_NO_AKI
//
// MessageText:
//
//  No AKI in user certificate
//
#define PP_E_RAAPI_SETCERT_NO_AKI        ((HRESULT)0x8004473CL)

//
// MessageId: PP_E_CERT_BAD_X509_LEN
//
// MessageText:
//
//  Bad X509 length
//
#define PP_E_CERT_BAD_X509_LEN           ((HRESULT)0x80044740L)

//
// MessageId: PP_E_CERT_BAD_X509_ENCODING
//
// MessageText:
//
//  Bad X509 encoding
//
#define PP_E_CERT_BAD_X509_ENCODING      ((HRESULT)0x80044741L)

//
// MessageId: PP_E_CERT_BAD_BASE64_LEN
//
// MessageText:
//
//  Bad base 64 length
//
#define PP_E_CERT_BAD_BASE64_LEN         ((HRESULT)0x80044742L)

//
// MessageId: PP_E_CERT_BAD_BASE64_ENCODING
//
// MessageText:
//
//  Bade base 64 encoding
//
#define PP_E_CERT_BAD_BASE64_ENCODING    ((HRESULT)0x80044743L)

//
// MessageId: PP_E_CERT_BAD_CERTCONTEXT_ARG
//
// MessageText:
//
//  Invalid cert context pointer
//
#define PP_E_CERT_BAD_CERTCONTEXT_ARG    ((HRESULT)0x80044744L)

//
// MessageId: PP_E_CERT_GET_SERIALNO_NOTFOUND
//
// MessageText:
//
//  Can not find certificate serial number
//
#define PP_E_CERT_GET_SERIALNO_NOTFOUND  ((HRESULT)0x80044745L)

//
// MessageId: PP_E_CERT_GET_NOTAFTER_NOTFOUND
//
// MessageText:
//
//  Cannot find NotAfter value
//
#define PP_E_CERT_GET_NOTAFTER_NOTFOUND  ((HRESULT)0x80044746L)

//
// MessageId: PP_E_CERT_GET_NOTBEFORE_NOTFOUND
//
// MessageText:
//
//  Cannot find NotBefore value
//
#define PP_E_CERT_GET_NOTBEFORE_NOTFOUND ((HRESULT)0x80044747L)

//
// MessageId: PP_E_CERT_GET_ENCODINGTYPE_NOTFOUND
//
// MessageText:
//
//  Cannot find certificate encoding type
//
#define PP_E_CERT_GET_ENCODINGTYPE_NOTFOUND ((HRESULT)0x80044748L)

//
// MessageId: PP_E_CERT_NO_CERT_CONTEXT_EX
//
// MessageText:
//
//  Bad CERT_CONTEXT_EX pointer
//
#define PP_E_CERT_NO_CERT_CONTEXT_EX     ((HRESULT)0x80044749L)

//
// MessageId: PP_E_CERT_BAD_FROM_CCM
//
// MessageText:
//
//  Detected bad cert length
//
#define PP_E_CERT_BAD_FROM_CCM           ((HRESULT)0x8004474CL)

//
// MessageId: PP_E_CERTDB_NO_EMAIL
//
// MessageText:
//
//  Email missing
//
#define PP_E_CERTDB_NO_EMAIL             ((HRESULT)0x80044750L)

//
// MessageId: PP_E_CERTDB_GETCERTSERNO_BAD_PURPOSE
//
// MessageText:
//
//  Bad purpose
//
#define PP_E_CERTDB_GETCERTSERNO_BAD_PURPOSE ((HRESULT)0x80044757L)

//
// MessageId: PP_E_CERTDB_GETCERTSERNO_MEMBERNAME_TOOLONG
//
// MessageText:
//
//  Bad member name size
//
#define PP_E_CERTDB_GETCERTSERNO_MEMBERNAME_TOOLONG ((HRESULT)0x80044758L)

//
// MessageId: PP_E_CERTDB_GETCERTSERNO_ISSUER_TOOLONG
//
// MessageText:
//
//  Bad issuer name size
//
#define PP_E_CERTDB_GETCERTSERNO_ISSUER_TOOLONG ((HRESULT)0x80044759L)

//
// MessageId: PP_E_CERTDB_GETCERTSERNO_SERIALNO_TOOLONG
//
// MessageText:
//
//  Bad serial number size
//
#define PP_E_CERTDB_GETCERTSERNO_SERIALNO_TOOLONG ((HRESULT)0x8004475AL)

//
// MessageId: PP_E_CERTDB_INSERTUPDATE_BAD_MEMBERNAME
//
// MessageText:
//
//  Bad member name
//
#define PP_E_CERTDB_INSERTUPDATE_BAD_MEMBERNAME ((HRESULT)0x80044760L)

//
// MessageId: PP_E_CERTDB_INSERTUPDATE_BAD_PURPOSE
//
// MessageText:
//
//  Bad purpose
//
#define PP_E_CERTDB_INSERTUPDATE_BAD_PURPOSE ((HRESULT)0x80044761L)

//
// MessageId: PP_E_CERTDB_INSERTUPDATE_BAD_STATUS
//
// MessageText:
//
//  Bad status
//
#define PP_E_CERTDB_INSERTUPDATE_BAD_STATUS ((HRESULT)0x80044762L)

//
// MessageId: PP_E_CERTDB_INSERTUPDATE_BAD_NUM_PURPOSES
//
// MessageText:
//
//  Invalid number of purposes
//
#define PP_E_CERTDB_INSERTUPDATE_BAD_NUM_PURPOSES ((HRESULT)0x80044764L)

//
// MessageId: PP_E_CERTDB_INSERTUPDATE_BAD_PURPOSEPTR
//
// MessageText:
//
//  Bad purpose pointer
//
#define PP_E_CERTDB_INSERTUPDATE_BAD_PURPOSEPTR ((HRESULT)0x80044765L)

//
// MessageId: PP_E_CERTDB_INSERTUPDATE_BAD_PRIVATEKEY
//
// MessageText:
//
//  Bad private key
//
#define PP_E_CERTDB_INSERTUPDATE_BAD_PRIVATEKEY ((HRESULT)0x80044766L)

//
// MessageId: PP_E_CERTDB_GETCERT_NOTFOUND
//
// MessageText:
//
//  Certificate not found
//
#define PP_E_CERTDB_GETCERT_NOTFOUND     ((HRESULT)0x80044769L)

//
// MessageId: PP_E_CERTDB_GETCERTSERNO_BAD_MEMBERNAME
//
// MessageText:
//
//  Bad membername
//
#define PP_E_CERTDB_GETCERTSERNO_BAD_MEMBERNAME ((HRESULT)0x8004476BL)

//
// MessageId: PP_E_CERTDB_INVALID_EMAIL
//
// MessageText:
//
//  Invalid email address
//
#define PP_E_CERTDB_INVALID_EMAIL        ((HRESULT)0x8004476EL)

//
// MessageId: PP_E_DBCERT_NO_CERTBLOB
//
// MessageText:
//
//  Bad encoded certificate pointer
//
#define PP_E_DBCERT_NO_CERTBLOB          ((HRESULT)0x80044773L)

//
// MessageId: PP_E_DBCERT_NO_PRIVATEKEY
//
// MessageText:
//
//  Bad private key pointer
//
#define PP_E_DBCERT_NO_PRIVATEKEY        ((HRESULT)0x80044777L)

//
// MessageId: PP_E_DBCERT_MEMBERNAME_LONG
//
// MessageText:
//
//  Bad member name size 
//
#define PP_E_DBCERT_MEMBERNAME_LONG      ((HRESULT)0x8004477EL)

//
// MessageId: PP_E_DBCERT_ISSUER_LONG
//
// MessageText:
//
//  Bad issuer name size
//
#define PP_E_DBCERT_ISSUER_LONG          ((HRESULT)0x8004477FL)

//
// MessageId: PP_E_DBCERT_SUBJECT_LONG
//
// MessageText:
//
//  Bad subject name size
//
#define PP_E_DBCERT_SUBJECT_LONG         ((HRESULT)0x80044780L)

//
// MessageId: PP_E_DBCERT_SERIALNO_LONG
//
// MessageText:
//
//  Bad serial number size
//
#define PP_E_DBCERT_SERIALNO_LONG        ((HRESULT)0x80044781L)

//
// MessageId: PP_E_DBCERT_PRIVATEKEY_LONG
//
// MessageText:
//
//  Bad private key size
//
#define PP_E_DBCERT_PRIVATEKEY_LONG      ((HRESULT)0x80044782L)

//
// MessageId: PP_E_DBCERT_NO_CERTPURPOSES
//
// MessageText:
//
//  Invalid certificate purpose
//
#define PP_E_DBCERT_NO_CERTPURPOSES      ((HRESULT)0x80044783L)

//
// MessageId: PP_E_DBCERT_INVALIDPURPOSES
//
// MessageText:
//
//  Invalid certificate purpose
//
#define PP_E_DBCERT_INVALIDPURPOSES      ((HRESULT)0x80044784L)

//
// MessageId: PP_E_CERTDB_CERTPRESENT_BADPURPOSE
//
// MessageText:
//
//  Bad certificate purpose
//
#define PP_E_CERTDB_CERTPRESENT_BADPURPOSE ((HRESULT)0x80044785L)

//
// MessageId: PP_E_CERT_NULL_CONTEXT
//
// MessageText:
//
//  Bad certificate context
//
#define PP_E_CERT_NULL_CONTEXT           ((HRESULT)0x80044786L)

//
// MessageId: PP_E_CERT_BAD_CERTBLOB
//
// MessageText:
//
//  Bad certificate blob
//
#define PP_E_CERT_BAD_CERTBLOB           ((HRESULT)0x80044787L)

//
// MessageId: PP_E_CERT_BAD_CONTEXT
//
// MessageText:
//
//  Bad certificate context
//
#define PP_E_CERT_BAD_CONTEXT            ((HRESULT)0x80044789L)

//
// MessageId: PP_E_DBCERT_BAD_CONTEXT
//
// MessageText:
//
//  Bad certificate context
//
#define PP_E_DBCERT_BAD_CONTEXT          ((HRESULT)0x8004478AL)

//
// MessageId: PP_CERTDIRDB_NO_PPSTS
//
// MessageText:
//
//  Failed to find a certificate
//
#define PP_CERTDIRDB_NO_PPSTS            ((HRESULT)0x8004478CL)

//
// MessageId: PP_E_CERT_BASE64X509_LENGTH
//
// MessageText:
//
//  Invalid x509 length
//
#define PP_E_CERT_BASE64X509_LENGTH      ((HRESULT)0x8004478FL)

//
// MessageId: PP_E_CERT_BASE64X509_LENGTH2
//
// MessageText:
//
//  Invalid x509 length
//
#define PP_E_CERT_BASE64X509_LENGTH2     ((HRESULT)0x80044790L)

//
// MessageId: PP_E_DBCERT_MAXNUMCERT_REACHED
//
// MessageText:
//
//  Maximum number ofcertificates is reached
//
#define PP_E_DBCERT_MAXNUMCERT_REACHED   ((HRESULT)0x80044791L)

//
// MessageId: PP_E_CERTDB_CERTPRESENT_NULLCERT
//
// MessageText:
//
//  Invalid certificate
//
#define PP_E_CERTDB_CERTPRESENT_NULLCERT ((HRESULT)0x80044796L)

//
// MessageId: PP_E_RAAPI_CERT_BAD_PURPOSES
//
// MessageText:
//
//  Invalid bits for cert purpose
//
#define PP_E_RAAPI_CERT_BAD_PURPOSES     ((HRESULT)0x800447A7L)

//
// MessageId: PP_E_RAAPI_CERT_NOT_YET_VALID
//
// MessageText:
//
//  Certificate is not valid yet
//
#define PP_E_RAAPI_CERT_NOT_YET_VALID    ((HRESULT)0x800447A9L)

//
// MessageId: PP_E_RAAPI_CERT_EXPIRED
//
// MessageText:
//
//  Certificate has expired
//
#define PP_E_RAAPI_CERT_EXPIRED          ((HRESULT)0x800447AAL)

//
// MessageId: PP_E_RAAPI_CERT_BAD_ENC_KEYUSAGE
//
// MessageText:
//
//  Certificate does not have encryption key usage
//
#define PP_E_RAAPI_CERT_BAD_ENC_KEYUSAGE ((HRESULT)0x800447ACL)

//
// MessageId: PP_E_RAAPI_CERT_BAD_SIGN_KEYUSAGE
//
// MessageText:
//
//  Certificate does not have signature key usage
//
#define PP_E_RAAPI_CERT_BAD_SIGN_KEYUSAGE ((HRESULT)0x800447ADL)

//
// MessageId: PP_E_RAAPI_CA_NOT_AVAILABLE
//
// MessageText:
//
//  The CA cannot be found
//
#define PP_E_RAAPI_CA_NOT_AVAILABLE      ((HRESULT)0x800447B0L)

//
// MessageId: PP_E_RAAPI_GETCERT_EXPIRED
//
// MessageText:
//
//  Certificate is expired and not auto extendible
//
#define PP_E_RAAPI_GETCERT_EXPIRED       ((HRESULT)0x800447B4L)

//
// MessageId: PP_E_CERT_GET_ISSUER_BADARG
//
// MessageText:
//
//  Invalid issuer name
//
#define PP_E_CERT_GET_ISSUER_BADARG      ((HRESULT)0x800447C0L)

//
// MessageId: PP_E_CERT_GET_ISSUER_BAD
//
// MessageText:
//
//  Bad issuer name
//
#define PP_E_CERT_GET_ISSUER_BAD         ((HRESULT)0x800447C1L)

//
// MessageId: PP_E_CERT_GETCERTNAME_BAD_CONTEXT
//
// MessageText:
//
//  Bad certificate context
//
#define PP_E_CERT_GETCERTNAME_BAD_CONTEXT ((HRESULT)0x800447C2L)

//
// MessageId: PP_E_CERT_GETCERTNAME_BAD_NAMETYPE
//
// MessageText:
//
//  Email missing
//
#define PP_E_CERT_GETCERTNAME_BAD_NAMETYPE ((HRESULT)0x800447C3L)

//
// MessageId: PP_E_CERT_GETCERTNAME_BAD_NAMETYPE_2
//
// MessageText:
//
//  Bad name type
//
#define PP_E_CERT_GETCERTNAME_BAD_NAMETYPE_2 ((HRESULT)0x800447C4L)

//
// MessageId: PP_E_CERT_GETCERTNAME_BAD_NAMETYPE_3
//
// MessageText:
//
//  Bad name type
//
#define PP_E_CERT_GETCERTNAME_BAD_NAMETYPE_3 ((HRESULT)0x800447C5L)

//
// MessageId: PP_E_CERT_GET_SUBJECT_BADARG
//
// MessageText:
//
//  Bad argument
//
#define PP_E_CERT_GET_SUBJECT_BADARG     ((HRESULT)0x800447C6L)

//
// MessageId: PP_E_CERT_GET_SUBJECT_BAD
//
// MessageText:
//
//  Bad subject
//
#define PP_E_CERT_GET_SUBJECT_BAD        ((HRESULT)0x800447C7L)

//
// MessageId: PP_E_CERT_GET_SERIALNO_BADARG
//
// MessageText:
//
//  Bad argument
//
#define PP_E_CERT_GET_SERIALNO_BADARG    ((HRESULT)0x800447C8L)

//
// MessageId: PP_E_CERT_GET_SERIALNO_BAD
//
// MessageText:
//
//  Bad serial number
//
#define PP_E_CERT_GET_SERIALNO_BAD       ((HRESULT)0x800447C9L)

//
// MessageId: PP_E_CERT_GET_CERTBLOB_BAD_COUNTPTR
//
// MessageText:
//
//  Null byte count pointer
//
#define PP_E_CERT_GET_CERTBLOB_BAD_COUNTPTR ((HRESULT)0x800447CAL)

//
// MessageId: PP_E_CERT_GET_CERTBLOB_BAD_BYTEPTR
//
// MessageText:
//
//  Null byte count pointer
//
#define PP_E_CERT_GET_CERTBLOB_BAD_BYTEPTR ((HRESULT)0x800447CBL)

//
// MessageId: PP_E_CERT_GET_THUMBPRINT_NOTINIT
//
// MessageText:
//
//  Certificate object not properly initialized
//
#define PP_E_CERT_GET_THUMBPRINT_NOTINIT ((HRESULT)0x800447CCL)

//
// MessageId: PP_E_CERT_GET_KEYUSAGE_NOTINIT
//
// MessageText:
//
//  Certificate object not properly initialized
//
#define PP_E_CERT_GET_KEYUSAGE_NOTINIT   ((HRESULT)0x800447CDL)

//
// MessageId: PP_E_CERT_GET_NOTBEFORE_BAD
//
// MessageText:
//
//  Invalid not before time
//
#define PP_E_CERT_GET_NOTBEFORE_BAD      ((HRESULT)0x800447CEL)

//
// MessageId: PP_E_CERT_BAD_HASHLENGTH
//
// MessageText:
//
//  Bad certificate thumbprint length
//
#define PP_E_CERT_BAD_HASHLENGTH         ((HRESULT)0x800447CFL)

//
// MessageId: PP_E_CERT_GET_NOTAFTER_BAD
//
// MessageText:
//
//  Bad not after time
//
#define PP_E_CERT_GET_NOTAFTER_BAD       ((HRESULT)0x800447D0L)

//
// MessageId: PP_E_CERT_GET_ENCODINGTYPE_BAD
//
// MessageText:
//
//  Bad encoding type
//
#define PP_E_CERT_GET_ENCODINGTYPE_BAD   ((HRESULT)0x800447D2L)

//
// MessageId: PP_E_CERT_GET_CERTBLOB_NOTFOUND
//
// MessageText:
//
//  Certificate blob not found
//
#define PP_E_CERT_GET_CERTBLOB_NOTFOUND  ((HRESULT)0x800447D3L)

//
// MessageId: PP_E_CERT_GET_EMAIL_BADARG
//
// MessageText:
//
//  Invalid email address argument
//
#define PP_E_CERT_GET_EMAIL_BADARG       ((HRESULT)0x800447D4L)

//
// MessageId: PP_E_CERT_GET_EMAIL_BAD
//
// MessageText:
//
//  Bad email address
//
#define PP_E_CERT_GET_EMAIL_BAD          ((HRESULT)0x800447D5L)

//
// MessageId: PP_E_CERT_GET_NAMESTRING_NOTFOUND
//
// MessageText:
//
//  Certificate object not initialized properly
//
#define PP_E_CERT_GET_NAMESTRING_NOTFOUND ((HRESULT)0x800447D6L)

//
// MessageId: PP_E_CERT_GET_NAMESTRING_BAD
//
// MessageText:
//
//  Bad name string
//
#define PP_E_CERT_GET_NAMESTRING_BAD     ((HRESULT)0x800447D7L)

//
// MessageId: PP_E_CERT_GET_PKI_BADARG
//
// MessageText:
//
//  Bad public key argument
//
#define PP_E_CERT_GET_PKI_BADARG         ((HRESULT)0x800447D8L)

//
// MessageId: PP_E_CERT_GET_PKI_NOTFOUND
//
// MessageText:
//
//  Certificate object not initialized properly
//
#define PP_E_CERT_GET_PKI_NOTFOUND       ((HRESULT)0x800447D9L)

//
// MessageId: PP_E_CERT_GET_PKI_BAD
//
// MessageText:
//
//  Bad public key
//
#define PP_E_CERT_GET_PKI_BAD            ((HRESULT)0x800447DAL)

//
// MessageId: PP_E_RAAPI_CERT_BAD_CERTINFO2
//
// MessageText:
//
//  Certificate object not initialized properly
//
#define PP_E_RAAPI_CERT_BAD_CERTINFO2    ((HRESULT)0x800447DBL)

//
// MessageId: PP_E_CERT_ISCA_NOTFOUND
//
// MessageText:
//
//  Certificate object not initialized properly
//
#define PP_E_CERT_ISCA_NOTFOUND          ((HRESULT)0x800447DCL)

//
// MessageId: PP_E_CERT_ISCA_BAD_EXT
//
// MessageText:
//
//  Certificate extensions missing
//
#define PP_E_CERT_ISCA_BAD_EXT           ((HRESULT)0x800447DDL)

//
// MessageId: PP_E_CERT_ISCA_NOEXT
//
// MessageText:
//
//  Basic constraints missing
//
#define PP_E_CERT_ISCA_NOEXT             ((HRESULT)0x800447DEL)

//
// MessageId: PP_E_CERT_ISCA_BAD_DECODE
//
// MessageText:
//
//  Can not decrypt extensions
//
#define PP_E_CERT_ISCA_BAD_DECODE        ((HRESULT)0x800447E0L)

//
// MessageId: PP_E_CERT_ISCA_NOTCA
//
// MessageText:
//
//  Invalid CA
//
#define PP_E_CERT_ISCA_NOTCA             ((HRESULT)0x800447E1L)

//
// MessageId: PP_E_CERT_GETEXT_BADARG
//
// MessageText:
//
//  Invalid extensions parameter
//
#define PP_E_CERT_GETEXT_BADARG          ((HRESULT)0x800447E2L)

//
// MessageId: PP_E_CERT_GETEXT_TOOMANY_EXTENSIONS
//
// MessageText:
//
//  Invalid number of extensions
//
#define PP_E_CERT_GETEXT_TOOMANY_EXTENSIONS ((HRESULT)0x800447E3L)

//
// MessageId: PP_E_CERT_GETEXT_BAD_EXTENSION
//
// MessageText:
//
//  Bad extension
//
#define PP_E_CERT_GETEXT_BAD_EXTENSION   ((HRESULT)0x800447E4L)

//
// MessageId: PP_E_CERT_GETEXT_NOTFOUND
//
// MessageText:
//
//  Extension not found
//
#define PP_E_CERT_GETEXT_NOTFOUND        ((HRESULT)0x800447E5L)

//
// MessageId: PP_E_PKCS10_DECODE
//
// MessageText:
//
//  The CERT_REQUEST_INFO is invalid after decoding the PKCS-10 blob.
//
#define PP_E_PKCS10_DECODE               ((HRESULT)0x800447E6L)

//
// MessageId: PP_E_NOT_FOUND
//
// MessageText:
//
//  A CERT_EXTENSION or attribute is not found based on the OID.
//
#define PP_E_NOT_FOUND                   ((HRESULT)0x800447E7L)

//
// MessageId: PP_E_CERT_GETKI_BADLENGTH
//
// MessageText:
//
//  Invalid key identifier length
//
#define PP_E_CERT_GETKI_BADLENGTH        ((HRESULT)0x800447E8L)

//
// MessageId: PP_E_CERTDIRDB_BADSKI
//
// MessageText:
//
//  Invalid subject key identifier length is specified.
//
#define PP_E_CERTDIRDB_BADSKI            ((HRESULT)0x800447E9L)

//
// MessageId: PP_E_CERTDIRDB_HEXDECODE
//
// MessageText:
//
//  Hex decoding specified subject key identifier length failed.
//
#define PP_E_CERTDIRDB_HEXDECODE         ((HRESULT)0x800447EAL)

//
// MessageId: PP_E_RA_BAD_AUTHTIME
//
// MessageText:
//
//  Failed to convert to system time
//
#define PP_E_RA_BAD_AUTHTIME             ((HRESULT)0x800447FEL)

//
// MessageId: PP_E_PKI_NONUNIQUE_CERT
//
// MessageText:
//
//  More than one certificates match the criteria
//
#define PP_E_PKI_NONUNIQUE_CERT          ((HRESULT)0x800447FFL)

// base 0x4800
// Errors
//#define PP_E_CERTPOLICY_BASE  0x4800
//
// MessageId: PP_E_CERTPOLICY_USE_DEFAULT
//
// MessageText:
//
//  The base policy is telling the application policy that it is willing to let the Registration or Certificate authority core to handle this policy.
//
#define PP_E_CERTPOLICY_USE_DEFAULT      ((HRESULT)0x80044800L)

//
// MessageId: PP_E_CA_POLICYCOMMON_BADHASH
//
// MessageText:
//
//  The computed hash for the certificate serial number is bad.
//
#define PP_E_CA_POLICYCOMMON_BADHASH     ((HRESULT)0x80044801L)

//
// MessageId: PP_E_CA_POLICYCOMMON_UNSUPPORTED_PUBALGID
//
// MessageText:
//
//  The algorithm for the public key is not supported. Passport 3.0 Certificate Authority only supports RSA.
//
#define PP_E_CA_POLICYCOMMON_UNSUPPORTED_PUBALGID ((HRESULT)0x80044802L)

//
// MessageId: PP_E_CA_POLICYCOMMON_INVALID_KEYLENGTH
//
// MessageText:
//
//  The key length for the public key is not within the allowed range.
//
#define PP_E_CA_POLICYCOMMON_INVALID_KEYLENGTH ((HRESULT)0x80044803L)

//
// MessageId: PP_E_CA_FAIL_CREATECERTEXT
//
// MessageText:
//
//  The CA policy failed to create certificate extension for signing.
//
#define PP_E_CA_FAIL_CREATECERTEXT       ((HRESULT)0x80044804L)

//
// MessageId: PP_E_CA_ZERO_CERTENCODE_LENGTH
//
// MessageText:
//
//  CryptSignAndEncodeCertificate returned 0 bytes for encoded certificate length.
//
#define PP_E_CA_ZERO_CERTENCODE_LENGTH   ((HRESULT)0x80044805L)

//
// MessageId: PP_E_STDCERTPOLICY_INIT_BAD_CONFIG
//
// MessageText:
//
//  The standard certificate policy detected a bad path to a configuration file.
//
#define PP_E_STDCERTPOLICY_INIT_BAD_CONFIG ((HRESULT)0x80044806L)

//
// MessageId: PP_E_CA_CERTPOLICY_INIT_BAD_CONFIG
//
// MessageText:
//
//  The CA certificate policy detected a bad path to a configuration file.
//
#define PP_E_CA_CERTPOLICY_INIT_BAD_CONFIG ((HRESULT)0x80044807L)

//
// MessageId: PP_E_RA_CERTPOLICY_INIT_BAD_CONFIG
//
// MessageText:
//
//  The RA certificate policy detected a bad path to a configuration file.
//
#define PP_E_RA_CERTPOLICY_INIT_BAD_CONFIG ((HRESULT)0x80044808L)

//
// MessageId: PP_E_CA_KEYUSAGE_ZEROENCODE
//
// MessageText:
//
//  The certificate policy was returned a 0 byte length during key usage encoding.
//
#define PP_E_CA_KEYUSAGE_ZEROENCODE      ((HRESULT)0x80044809L)

//
// MessageId: PP_E_CA_SETCPS_ZEROENCODE
//
// MessageText:
//
//  The certificate policy was returned a 0 byte length during the certificate policy qualifier CPS encoding.
//
#define PP_E_CA_SETCPS_ZEROENCODE        ((HRESULT)0x8004480AL)

//
// MessageId: PP_E_CA_SETUSERNOTICE_ZEROENCODE
//
// MessageText:
//
//  The certificate policy was returned a 0 byte length during the certificate policy qualifier User Notice encoding.
//
#define PP_E_CA_SETUSERNOTICE_ZEROENCODE ((HRESULT)0x8004480BL)

//
// MessageId: PP_E_CA_GETCA_NULLCERTINFO
//
// MessageText:
//
//  The certificate policy was returned a 0 byte length for the cert_info by Crypto API for the certificate.
//
#define PP_E_CA_GETCA_NULLCERTINFO       ((HRESULT)0x8004480CL)

//
// MessageId: PP_E_CA_AKI2_ZEROENCODE
//
// MessageText:
//
//  The certificate policy was returned a 0 byte length during CryptHashPublicKeyInfo while creating the Authority Key Identifier2.
//
#define PP_E_CA_AKI2_ZEROENCODE          ((HRESULT)0x8004480DL)

//
// MessageId: PP_E_CA_SKI_ZEROENCODE
//
// MessageText:
//
//  The certificate policy was returned a 0 byte length during CryptHashPublicKeyInfo while creating the Subject Key Identifier.
//
#define PP_E_CA_SKI_ZEROENCODE           ((HRESULT)0x8004480EL)

//
// MessageId: PP_E_CA_POLICY_BADCONFIG_DEFAULTLIFE
//
// MessageText:
//
//  The certificate policy read an invalid value for the default certificate life in years.
//
#define PP_E_CA_POLICY_BADCONFIG_DEFAULTLIFE ((HRESULT)0x8004480FL)

//
// MessageId: PP_E_CA_POLICY_GETCA_NULLCERTINFO
//
// MessageText:
//
//  The certificate policy module was returned a NULL cert_info by the Crypto API.
//
#define PP_E_CA_POLICY_GETCA_NULLCERTINFO ((HRESULT)0x80044810L)

//
// MessageId: PP_E_CA_GENSUBJECT_ZEROENCODE
//
// MessageText:
//
//  The certificate policy module was returned a 0 length encoded subject while creating the subject.
//
#define PP_E_CA_GENSUBJECT_ZEROENCODE    ((HRESULT)0x80044811L)

// base 0x4900
//policy engine error code
//#define  PP_E_PE_BASE                       0x4900
//
// MessageId: PP_E_PE_NOCOMMAND
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_NOCOMMAND                ((HRESULT)0x80044900L)

//
// MessageId: PP_E_PE_NOACTION
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_NOACTION                 ((HRESULT)0x80044901L)

//
// MessageId: PP_E_PE_INVALIDRULE
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_INVALIDRULE              ((HRESULT)0x80044902L)

//
// MessageId: PP_E_PE_BADPOLICY
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_BADPOLICY                ((HRESULT)0x80044903L)

//
// MessageId: PP_E_PE_INVALIDINPUT_COUNT
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_INVALIDINPUT_COUNT       ((HRESULT)0x80044904L)

//
// MessageId: PP_E_PE_INVALIDPOLICYINFO
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_INVALIDPOLICYINFO        ((HRESULT)0x80044905L)

//
// MessageId: PP_E_PE_INVALIDINPUT_PIPE
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_INVALIDINPUT_PIPE        ((HRESULT)0x80044906L)

//
// MessageId: PP_E_PE_TOOMANYINPUTS
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_TOOMANYINPUTS            ((HRESULT)0x80044907L)

//
// MessageId: PP_E_PE_INVALIDPREDICATEINDEX
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_INVALIDPREDICATEINDEX    ((HRESULT)0x80044908L)

//
// MessageId: PP_E_PE_RULESTACKOVERFLOW
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_RULESTACKOVERFLOW        ((HRESULT)0x80044909L)

//
// MessageId: PP_E_PE_RULESTACKUNDERFLOW
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_RULESTACKUNDERFLOW       ((HRESULT)0x8004490AL)

//
// MessageId: PP_E_PE_INVALIDRULESYNTAX
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_INVALIDRULESYNTAX        ((HRESULT)0x8004490BL)

//
// MessageId: PP_E_PE_RULEFALSE
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_RULEFALSE                ((HRESULT)0x8004490CL)

//
// MessageId: PP_E_PE_DLLHASNOINITFUNC
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_DLLHASNOINITFUNC         ((HRESULT)0x8004490DL)

//
// MessageId: PP_E_PE_DLLHASNOSHUTDOWNFUNC
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_DLLHASNOSHUTDOWNFUNC     ((HRESULT)0x8004490EL)

//
// MessageId: PP_E_PE_DLLHASNOINVOKEFUNC
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_DLLHASNOINVOKEFUNC       ((HRESULT)0x8004490FL)

//
// MessageId: PP_E_PE_DLLNOTLOADED
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_DLLNOTLOADED             ((HRESULT)0x80044910L)

//
// MessageId: PP_E_PE_INVALIDCONSTANTTYPE
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_INVALIDCONSTANTTYPE      ((HRESULT)0x80044911L)

//
// MessageId: PP_E_PE_DUPLICATEPOLICY
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_DUPLICATEPOLICY          ((HRESULT)0x80044912L)

//
// MessageId: PP_E_PE_NOPOLICY
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_NOPOLICY                 ((HRESULT)0x80044913L)

//
// MessageId: PP_E_PE_NOPREDICATE
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_NOPREDICATE              ((HRESULT)0x80044914L)

//
// MessageId: PP_E_PE_TYPEMISMATCH
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_TYPEMISMATCH             ((HRESULT)0x80044915L)

//
// MessageId: PP_E_PE_MODIFYROWSETCOLUMN
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_MODIFYROWSETCOLUMN       ((HRESULT)0x80044916L)

//
// MessageId: PP_E_PE_REQUIREDPROPSNOTPRESENT
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_REQUIREDPROPSNOTPRESENT  ((HRESULT)0x80044917L)

//
// MessageId: PP_E_PE_TOOMANYACTIONS
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_TOOMANYACTIONS           ((HRESULT)0x80044918L)

//
// MessageId: PP_E_PE_POLICYASACTIONALREADYSET
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_POLICYASACTIONALREADYSET ((HRESULT)0x80044919L)

//
// MessageId: PP_E_PE_POLICYNOTBSTR
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_POLICYNOTBSTR            ((HRESULT)0x8004491AL)

//
// MessageId: PP_E_PE_EMPTYPOLICY
//
// MessageText:
//
//  Service temporarily unavailable due to internal PolicyEngine Component error (hr=%1), please try later.
//
#define PP_E_PE_EMPTYPOLICY              ((HRESULT)0x8004491BL)

// base 0x4d00
// Errors
#define PP_E_CHECKCRL_BASE  0x4d00
//
// MessageId: PP_E_CHECKCRL_EARLY_THAN_NOTBEFORE
//
// MessageText:
//
//  Revocation checking has detected that the certificate has expired.
//
#define PP_E_CHECKCRL_EARLY_THAN_NOTBEFORE ((HRESULT)0x80044D00L)

//
// MessageId: PP_E_CHECKCRL_LATER_THAN_NOTAFTER
//
// MessageText:
//
//  Revocation checking has detected that the certificate is only valid in the future.
//
#define PP_E_CHECKCRL_LATER_THAN_NOTAFTER ((HRESULT)0x80044D01L)

//
// MessageId: PP_E_CHECKCRL_NO_CDP
//
// MessageText:
//
//  The CRL agent could not retrieve the CRL because the CDP is missing from the certificate.
//
#define PP_E_CHECKCRL_NO_CDP             ((HRESULT)0x80044D02L)

//
// MessageId: PP_E_CHECKCRL_CANNOT_GET_CRL
//
// MessageText:
//
//  The CRL agent failed to retrieve the full CRL.
//
#define PP_E_CHECKCRL_CANNOT_GET_CRL     ((HRESULT)0x80044D03L)

//
// MessageId: PP_E_CHECKCRL_CANNOT_GET_DELTA_CRL
//
// MessageText:
//
//  The CRL agent failed to retrive the delta CRL.
//
#define PP_E_CHECKCRL_CANNOT_GET_DELTA_CRL ((HRESULT)0x80044D04L)

//
// MessageId: PP_E_CHECKCRL_CANNOT_GET_LATEST_CRL
//
// MessageText:
//
//  Failed to fetch the latest CRL from the CCM.
//
#define PP_E_CHECKCRL_CANNOT_GET_LATEST_CRL ((HRESULT)0x80044D05L)

//
// MessageId: PP_E_CHECKCRL_CERT_REVOKED
//
// MessageText:
//
//  The certificate is revoked.
//
#define PP_E_CHECKCRL_CERT_REVOKED       ((HRESULT)0x80044D0AL)

//
// MessageId: PP_E_CHECKCRL_INVALID_ENCODING
//
// MessageText:
//
//  The revocation checker was called with a bad encoding. It should be ASN.1.
//
#define PP_E_CHECKCRL_INVALID_ENCODING   ((HRESULT)0x80044D0BL)

//
// MessageId: PP_E_CHECKCRL_INVALID_REVTYPE
//
// MessageText:
//
//  The revocation checker is called with an invalid revocation type.
//
#define PP_E_CHECKCRL_INVALID_REVTYPE    ((HRESULT)0x80044D0CL)

//
// MessageId: PP_E_CHECKCRL_NO_CONTEXT
//
// MessageText:
//
//  The revocation checker is called without any certificate context.
//
#define PP_E_CHECKCRL_NO_CONTEXT         ((HRESULT)0x80044D0DL)

//
// MessageId: PP_E_CHECKCRL_NO_REVSTATUS
//
// MessageText:
//
//  The revocation checker is called without a CERTIFICATE_REVOCATION_STATUS structure.
//
#define PP_E_CHECKCRL_NO_REVSTATUS       ((HRESULT)0x80044D0EL)

//
// MessageId: PP_E_CHECKCRL_INVALID_ISSUER_NOBCE
//
// MessageText:
//
//  The revocation checker did not find the Basic Constraint extension while checking a CA certificate.
//
#define PP_E_CHECKCRL_INVALID_ISSUER_NOBCE ((HRESULT)0x80044D0FL)

//
// MessageId: PP_E_CHECKCRL_INVALID_ISSUER_BADBCE
//
// MessageText:
//
//  The revocation checker found a bad value for the Basic Constraint extension while checking a CA certificate.
//
#define PP_E_CHECKCRL_INVALID_ISSUER_BADBCE ((HRESULT)0x80044D10L)

//
// MessageId: PP_E_CHECKCRL_INVALID_ISSUER_BADBCE_PATH
//
// MessageText:
//
//  The revocation checker has found a bad value for the Path Length constraint in either a issuer or subject certificate.
//
#define PP_E_CHECKCRL_INVALID_ISSUER_BADBCE_PATH ((HRESULT)0x80044D11L)

//
// MessageId: PP_E_CHECKCRL_CRLAGENT_NOT_INIT
//
// MessageText:
//
//  The CRL agent was called without proper initialization; the subject certificate was not set.
//
#define PP_E_CHECKCRL_CRLAGENT_NOT_INIT  ((HRESULT)0x80044D13L)

//
// MessageId: PP_E_CHECKCRL_UNSUPPORTED_CRITICAL_EXT
//
// MessageText:
//
//  The CRL agent has detected a CRL that has critical extension that Passport does not support.
//
#define PP_E_CHECKCRL_UNSUPPORTED_CRITICAL_EXT ((HRESULT)0x80044D14L)

//
// MessageId: PP_E_CHECKCRL_BASECRL_FAILED_TIMECHECK
//
// MessageText:
//
//  The CRL agent has found a CRL that is no longer valid.
//
#define PP_E_CHECKCRL_BASECRL_FAILED_TIMECHECK ((HRESULT)0x80044D15L)

//
// MessageId: PP_E_CHECKCRL_BASECRL_NUMBER_ERROR
//
// MessageText:
//
//  The base CRL number is missing.
//
#define PP_E_CHECKCRL_BASECRL_NUMBER_ERROR ((HRESULT)0x80044D17L)

//
// MessageId: PP_E_CHECKCRL_DELTACRL_INDICATOREXT_ERROR
//
// MessageText:
//
//  The delta CRL indicator is missing.
//
#define PP_E_CHECKCRL_DELTACRL_INDICATOREXT_ERROR ((HRESULT)0x80044D18L)

//
// MessageId: PP_E_CHECKCRL_DELTACRL_INDICATOR_ERROR
//
// MessageText:
//
//  The delta CRL indicator is invalid.
//
#define PP_E_CHECKCRL_DELTACRL_INDICATOR_ERROR ((HRESULT)0x80044D19L)

//
// MessageId: PP_E_CHECKCRL_CANNOT_FIND_ISSUER
//
// MessageText:
//
//  The CRL does not have the issuer field.
//
#define PP_E_CHECKCRL_CANNOT_FIND_ISSUER ((HRESULT)0x80044D1BL)

//
// MessageId: PP_E_POPUPATECA_ALREADY_INITED
//
// MessageText:
//
//  The PPAdmin service component to populate root CA certificates is already initialized.
//
#define PP_E_POPUPATECA_ALREADY_INITED   ((HRESULT)0x80044D30L)

//
// MessageId: PP_E_POPUPATECA_NOT_INITED
//
// MessageText:
//
//  The PPAdmin service component to populate root CA certificates is not initialized.
//
#define PP_E_POPUPATECA_NOT_INITED       ((HRESULT)0x80044D31L)

//
// MessageId: PP_E_POPUPATECA_FAILED
//
// MessageText:
//
//  The PPAdmin service component to populate root CA certificates failed to populate one or more certificates.
//
#define PP_E_POPUPATECA_FAILED           ((HRESULT)0x80044D32L)

// base 0x4e01
//
// MessageId: PP_E_CDP_NOTFOUND_IN_DB
//
// MessageText:
//
//  Can not find CDP in the DB.
//
#define PP_E_CDP_NOTFOUND_IN_DB          ((HRESULT)0x80044E01L)

//
// MessageId: PP_E_CRL_NOTFOUND_IN_DB
//
// MessageText:
//
//  The CRL Blob for the CDP is not present in the CCM DB.
//
#define PP_E_CRL_NOTFOUND_IN_DB          ((HRESULT)0x80044E02L)

//
// MessageId: PP_E__BLOB_TOO_LARGE
//
// MessageText:
//
//  Data blob passed is lager than maximun supported by this instance.
//
#define PP_E__BLOB_TOO_LARGE             ((HRESULT)0x80044E03L)

//
// MessageId: PP_E_CRL_BLOB_TOO_LARGE
//
// MessageText:
//
//  CRL blob larger than maximum supported limit (Currently defined as 64K).
//
#define PP_E_CRL_BLOB_TOO_LARGE          ((HRESULT)0x80044E04L)

//
// MessageId: PP_E_CDP_WITHNO_KEY
//
// MessageText:
//
//  Failed to get CDP key in the CDP.
//
#define PP_E_CDP_WITHNO_KEY              ((HRESULT)0x80044E05L)

//
// MessageId: PP_E_CDP_INIT_CDPINFO_ZERO
//
// MessageText:
//
//  CDP is blank.
//
#define PP_E_CDP_INIT_CDPINFO_ZERO       ((HRESULT)0x80044E07L)

//
// MessageId: PP_E_CERTPROV_ADDCDP_INVALID_ARG
//
// MessageText:
//
//  Invalid parameter passed to Add CRL blob function.
//
#define PP_E_CERTPROV_ADDCDP_INVALID_ARG ((HRESULT)0x80044E08L)

//
// MessageId: PP_E_CERTPROV_ADDCDP_NOKEY
//
// MessageText:
//
//  Failed to get CDP key in the CDP.
//
#define PP_E_CERTPROV_ADDCDP_NOKEY       ((HRESULT)0x80044E09L)

//
// MessageId: PP_E_CERTPROV_ADDCDP_ISSUER_LONG
//
// MessageText:
//
//  Issuer name is longer than supported (Currently defined as 512 chars).
//
#define PP_E_CERTPROV_ADDCDP_ISSUER_LONG ((HRESULT)0x80044E0AL)

//
// MessageId: PP_E_CDP_NO_CCMCACHE_POINTER
//
// MessageText:
//
//  CCM Pointer is null while fetching CRL from CCM.
//
#define PP_E_CDP_NO_CCMCACHE_POINTER     ((HRESULT)0x80044E10L)

// base 0x4f00
//
// MessageId: PP_E_MSNT_TAGINX_OUTOFBOUND
//
// MessageText:
//
//  TraceTag index is out of legal range.
//
#define PP_E_MSNT_TAGINX_OUTOFBOUND      ((HRESULT)0x80044F05L)

//
// MessageId: PP_E_MSNT_PID_NOTPRESENT
//
// MessageText:
//
//  Process with this ID is not present in shared memory.
//
#define PP_E_MSNT_PID_NOTPRESENT         ((HRESULT)0x80044F06L)

//
// MessageId: PP_E_MSNT_TRACE_DISABLED
//
// MessageText:
//
//  Trace is not currently active.
//
#define PP_E_MSNT_TRACE_DISABLED         ((HRESULT)0x80044F08L)

//
// MessageId: PP_E_MSNT_TRACE_NOT_INITIALIZED
//
// MessageText:
//
//  Trace is not initialized.
//
#define PP_E_MSNT_TRACE_NOT_INITIALIZED  ((HRESULT)0x80044F09L)

//
// MessageId: PP_E_MSNT_CRITICAL_ERROR
//
// MessageText:
//
//  There is an unrecoverable error in trace. Most likely shared memory has been corrupted. You need to restart the process you are tracing and the trace controller.
//
#define PP_E_MSNT_CRITICAL_ERROR         ((HRESULT)0x80044F0AL)

// base 0x4f51
//
// MessageId: PP_E_NS_HTTPSESSIONCREATE
//
// MessageText:
//
//  Could not create http session for HTTP notification sender.
//
#define PP_E_NS_HTTPSESSIONCREATE        ((HRESULT)0x80044F51L)

//
// MessageId: PP_E_NS_HTTPCRACKURL
//
// MessageText:
//
//  Could not crack URL in HTTP notification sender.
//
#define PP_E_NS_HTTPCRACKURL             ((HRESULT)0x80044F52L)

//
// MessageId: PP_E_NS_HTTPCONNECT
//
// MessageText:
//
//  Could not create HTTP connection in HTTP notification sender.
//
#define PP_E_NS_HTTPCONNECT              ((HRESULT)0x80044F53L)

//
// MessageId: PP_E_NS_HTTPOPENREQUEST
//
// MessageText:
//
//  Could not open request in HTTP notification sender.
//
#define PP_E_NS_HTTPOPENREQUEST          ((HRESULT)0x80044F54L)

//
// MessageId: PP_E_NS_HTTPSETCREDENTIALS
//
// MessageText:
//
//  Could not set request credentials in HTTP notification sender.
//
#define PP_E_NS_HTTPSETCREDENTIALS       ((HRESULT)0x80044F55L)

//
// MessageId: PP_E_NS_HTTPSENDREQUEST
//
// MessageText:
//
//  Failed to send request in HTTP notification sender.
//
#define PP_E_NS_HTTPSENDREQUEST          ((HRESULT)0x80044F56L)

//
// MessageId: PP_E_NS_HTTPASYNCCREATE
//
// MessageText:
//
//  Not currently used.
//
#define PP_E_NS_HTTPASYNCCREATE          ((HRESULT)0x80044F5BL)

//
// MessageId: PP_E_NS_SHUTDOWNPENDING
//
// MessageText:
//
//  Can not complete the request because service is shutting down.
//
#define PP_E_NS_SHUTDOWNPENDING          ((HRESULT)0x80044F5CL)

//
// MessageId: PP_E_NS_NOTSNDRCREATEFAILED
//
// MessageText:
//
//  Failed to create notification sender object.
//
#define PP_E_NS_NOTSNDRCREATEFAILED      ((HRESULT)0x80044F5EL)

//
// MessageId: PP_E_NS_EXCEEDEDMAX
//
// MessageText:
//
//  There are too many notifications being processed right now.
//
#define PP_E_NS_EXCEEDEDMAX              ((HRESULT)0x80044F62L)

//
// MessageId: PP_E_NS_SUBSCRIBERNAME
//
// MessageText:
//
//  Subscriber name is too long.
//
#define PP_E_NS_SUBSCRIBERNAME           ((HRESULT)0x80044F63L)

//
// MessageId: PP_E_NS_TRANSPORTPARAMS
//
// MessageText:
//
//  Transport parameters are too long.
//
#define PP_E_NS_TRANSPORTPARAMS          ((HRESULT)0x80044F64L)

//
// MessageId: PP_E_NS_PACKETS
//
// MessageText:
//
//  Too many notification packets.
//
#define PP_E_NS_PACKETS                  ((HRESULT)0x80044F65L)

//
// MessageId: PP_E_NS_PACKETSIZE
//
// MessageText:
//
//  Notification packet is too big.
//
#define PP_E_NS_PACKETSIZE               ((HRESULT)0x80044F66L)

//
// MessageId: PP_E_NS_EMPTYNOTIFICATION
//
// MessageText:
//
//  Notification can not be empty.
//
#define PP_E_NS_EMPTYNOTIFICATION        ((HRESULT)0x80044F67L)

//
// MessageId: PP_E_NS_MACHINENAMENOTUNIQUE
//
// MessageText:
//
//  Machine name is multiinstance.
//
#define PP_E_NS_MACHINENAMENOTUNIQUE     ((HRESULT)0x80044F68L)

//
// MessageId: PP_E_NS_MACHINENOTRELATEDTODATACENTER
//
// MessageText:
//
//  Machine is not a part of a datacenter.
//
#define PP_E_NS_MACHINENOTRELATEDTODATACENTER ((HRESULT)0x80044F69L)

//
// MessageId: PP_E_NS_MACHINENOTINDB
//
// MessageText:
//
//  Machine does not exist in CCM.
//
#define PP_E_NS_MACHINENOTINDB           ((HRESULT)0x80044F6BL)

//
// MessageId: PP_E_NOTSVC_PARSER_MISSING_TRANSPORT_ELEMENT
//
// MessageText:
//
//  Transport element with this index does not exist in transport map.
//
#define PP_E_NOTSVC_PARSER_MISSING_TRANSPORT_ELEMENT ((HRESULT)0x80044F71L)

//
// MessageId: PP_E_NOTSVC_PARSER_MISSING_CREDENTIAL_ELEMENT
//
// MessageText:
//
//  Credential element with this index does not exist in credential map.
//
#define PP_E_NOTSVC_PARSER_MISSING_CREDENTIAL_ELEMENT ((HRESULT)0x80044F72L)

//
// MessageId: PP_E_NOTSVC_FAILED_LOAD_XSLT
//
// MessageText:
//
//  Not able to load XSLT for manifest transformation.
//
#define PP_E_NOTSVC_FAILED_LOAD_XSLT     ((HRESULT)0x80044F73L)

//
// MessageId: PP_E_NOTSVC_FAILED_COCREATE_MSXML4
//
// MessageText:
//
//  Could not cocreate MSXML4.
//
#define PP_E_NOTSVC_FAILED_COCREATE_MSXML4 ((HRESULT)0x80044F74L)

//
// MessageId: PP_E_NOTSVC_MISSING_DATACENTER
//
// MessageText:
//
//  Can not retrieve datacenter info from CCM.
//
#define PP_E_NOTSVC_MISSING_DATACENTER   ((HRESULT)0x80044F75L)

//
// MessageId: PP_E_NOTSVC_INVALID_MANIFEST_DATATYPE
//
// MessageText:
//
//  Manifest variant is of invalid datatype.
//
#define PP_E_NOTSVC_INVALID_MANIFEST_DATATYPE ((HRESULT)0x80044F76L)

//
// MessageId: PP_E_NOTSVC_NO_TRIGGER_MANIFEST
//
// MessageText:
//
//  Trigger not found in DB.
//
#define PP_E_NOTSVC_NO_TRIGGER_MANIFEST  ((HRESULT)0x80044F77L)

//
// MessageId: PP_E_NOTSVC_INVALID_MANIFEST_BLOB_TYPE
//
// MessageText:
//
//  Invalid manifest blob type.
//
#define PP_E_NOTSVC_INVALID_MANIFEST_BLOB_TYPE ((HRESULT)0x80044F78L)

// base 0x5000
//------------------------------------------------------------------------------
// Authorization error codes
//------------------------------------------------------------------------------
#define PP_E_AZ_BASE       0x5000
//
// MessageId: PP_E_AZ_RESOURCEINDEX_INVALID
//
// MessageText:
//
//  Internal Error: Resource index is invalid
//
#define PP_E_AZ_RESOURCEINDEX_INVALID    ((HRESULT)0x80045000L)

//
// MessageId: PP_E_AZ_PROPPAIRINDEX_INVALID
//
// MessageText:
//
//  Internal Error: Property pair index is invalid
//
#define PP_E_AZ_PROPPAIRINDEX_INVALID    ((HRESULT)0x80045001L)

//
// MessageId: PP_E_AZ_PROPNAME_NOTFOUND
//
// MessageText:
//
//  Internal Error: Property name not found
//
#define PP_E_AZ_PROPNAME_NOTFOUND        ((HRESULT)0x80045002L)

//
// MessageId: PP_E_AZ_PROPIDINDEX_INVALID
//
// MessageText:
//
//  Internal Error: Property id index not found
//
#define PP_E_AZ_PROPIDINDEX_INVALID      ((HRESULT)0x80045003L)

//
// MessageId: PP_E_AZ_RESOURCETYPE_NOTFOUND
//
// MessageText:
//
//  Unknown resource type
//
#define PP_E_AZ_RESOURCETYPE_NOTFOUND    ((HRESULT)0x80045004L)

//
// MessageId: PP_E_AZ_RESOURCENAME_NOTFOUND
//
// MessageText:
//
//  Unknown resource name
//
#define PP_E_AZ_RESOURCENAME_NOTFOUND    ((HRESULT)0x80045005L)

//
// MessageId: PP_E_AZ_RESTYPEENTRY_INVALID
//
// MessageText:
//
//  Resource entry is invalid
//
#define PP_E_AZ_RESTYPEENTRY_INVALID     ((HRESULT)0x80045006L)

//
// MessageId: PP_E_AZ_RESSCHEMA_INVALIDSTRING
//
// MessageText:
//
//  The resource schema contains an invalid string
//
#define PP_E_AZ_RESSCHEMA_INVALIDSTRING  ((HRESULT)0x80045007L)

//
// MessageId: PP_E_AZ_RESSCHEMA_INVALIDTYPE
//
// MessageText:
//
//  The resource schema contains an invalid resource type
//
#define PP_E_AZ_RESSCHEMA_INVALIDTYPE    ((HRESULT)0x80045008L)

//
// MessageId: PP_E_AZ_RESSCHEMA_INVALIDNAME
//
// MessageText:
//
//  The resource schema contains an invalid resource name
//
#define PP_E_AZ_RESSCHEMA_INVALIDNAME    ((HRESULT)0x80045009L)

//
// MessageId: PP_E_AZ_RESOURCETYPE_INVALID
//
// MessageText:
//
//  The scope expression contains an invalid resource type
//
#define PP_E_AZ_RESOURCETYPE_INVALID     ((HRESULT)0x8004500AL)

//
// MessageId: PP_E_AZ_CLAIMMAPINDEX_INVALID
//
// MessageText:
//
//  Internal Error: Invalid claimmap index
//
#define PP_E_AZ_CLAIMMAPINDEX_INVALID    ((HRESULT)0x8004500BL)

//
// MessageId: PP_E_AZ_PROPNAME_INVALID
//
// MessageText:
//
//  The scope expression contains an invalid property name
//
#define PP_E_AZ_PROPNAME_INVALID         ((HRESULT)0x8004500CL)

//
// MessageId: PP_E_AZ_PROPVALUE_INVALID
//
// MessageText:
//
//  The scope expression contains an invalid property value
//
#define PP_E_AZ_PROPVALUE_INVALID        ((HRESULT)0x8004500DL)

//
// MessageId: PP_E_AZ_PROPID_INVALID
//
// MessageText:
//
//  The scope expression contains an invalid property id
//
#define PP_E_AZ_PROPID_INVALID           ((HRESULT)0x8004500EL)

//
// MessageId: PP_E_AZ_NORESOURCE
//
// MessageText:
//
//  The scope expression contains no resource
//
#define PP_E_AZ_NORESOURCE               ((HRESULT)0x8004500FL)

//
// MessageId: PP_E_AZ_CLAIMINDEX_INVALID
//
// MessageText:
//
//  Internal Error: claim index is invalid
//
#define PP_E_AZ_CLAIMINDEX_INVALID       ((HRESULT)0x80045010L)

//
// MessageId: PP_E_AZ_SCOPEINDEX_INVALID
//
// MessageText:
//
//  Internal Error: scope index is invalid
//
#define PP_E_AZ_SCOPEINDEX_INVALID       ((HRESULT)0x80045011L)

//
// MessageId: PP_E_AZ_ROLEMAPINDEX_INVALID
//
// MessageText:
//
//  Internal Error: rolemap index is invalid
//
#define PP_E_AZ_ROLEMAPINDEX_INVALID     ((HRESULT)0x80045012L)

//
// MessageId: PP_E_AZ_CLAIM_INVALID
//
// MessageText:
//
//  The input data contains an invalid claim
//
#define PP_E_AZ_CLAIM_INVALID            ((HRESULT)0x80045013L)

//
// MessageId: PP_E_AZ_SCOPE_INVALID
//
// MessageText:
//
//  The input data contains an invalid scope expression
//
#define PP_E_AZ_SCOPE_INVALID            ((HRESULT)0x80045014L)

//
// MessageId: PP_E_AZ_SCOPETYPE_INVALID
//
// MessageText:
//
//  The input data contains an invalid scope type
//
#define PP_E_AZ_SCOPETYPE_INVALID        ((HRESULT)0x80045015L)

//
// MessageId: PP_E_AZ_CLAIMNAME_NOTFOUND
//
// MessageText:
//
//  The claim name is not defined
//
#define PP_E_AZ_CLAIMNAME_NOTFOUND       ((HRESULT)0x80045016L)

//
// MessageId: PP_E_AZ_CLAIMID_NOTFOUND
//
// MessageText:
//
//  The claim id is not defined
//
#define PP_E_AZ_CLAIMID_NOTFOUND         ((HRESULT)0x80045017L)

//
// MessageId: PP_E_AZ_CLAIMSCHEMA_INVALIDNAME
//
// MessageText:
//
//  The resource schema contains an invalid claim name
//
#define PP_E_AZ_CLAIMSCHEMA_INVALIDNAME  ((HRESULT)0x80045018L)

//
// MessageId: PP_E_AZ_CLAIMSCHEMA_INVALIDID
//
// MessageText:
//
//  The resource schema contains an invalid claim id
//
#define PP_E_AZ_CLAIMSCHEMA_INVALIDID    ((HRESULT)0x80045019L)

//
// MessageId: PP_E_AZ_CLAIMENTRY_INVALID
//
// MessageText:
//
//  The resource schema contains an invalid claim entry
//
#define PP_E_AZ_CLAIMENTRY_INVALID       ((HRESULT)0x8004501AL)

//
// MessageId: PP_E_AZ_EVALUATOR_NOTFOUND
//
// MessageText:
//
//  Internal error: no evaluator for the given scope type
//
#define PP_E_AZ_EVALUATOR_NOTFOUND       ((HRESULT)0x8004501BL)

//
// MessageId: PP_E_AZ_NOTINSCOPE
//
// MessageText:
//
//  The resource is not in scope
//
#define PP_E_AZ_NOTINSCOPE               ((HRESULT)0x8004501CL)

//
// MessageId: PP_E_AZ_SCOPEEXPR_MISSINGSLASH
//
// MessageText:
//
//  The scope expression is invalid: missing forward slash
//
#define PP_E_AZ_SCOPEEXPR_MISSINGSLASH   ((HRESULT)0x8004501DL)

//
// MessageId: PP_E_AZ_RESOURCENAME_INVALID
//
// MessageText:
//
//  The scope expression contains an invalid resource name
//
#define PP_E_AZ_RESOURCENAME_INVALID     ((HRESULT)0x8004501EL)

//
// MessageId: PP_E_AZ_SCOPEEXPR_MISSINGEQUAL
//
// MessageText:
//
//  The scope expression is invalid: missing equal sign
//
#define PP_E_AZ_SCOPEEXPR_MISSINGEQUAL   ((HRESULT)0x8004501FL)

//
// MessageId: PP_E_AZ_TOKENCLAIMMAP_INVALID
//
// MessageText:
//
//  Invalid claimmap in the input token
//
#define PP_E_AZ_TOKENCLAIMMAP_INVALID    ((HRESULT)0x80045020L)

//
// MessageId: PP_E_AZ_TOKEN_NOROLEMAP
//
// MessageText:
//
//  No rolemaps in the input token
//
#define PP_E_AZ_TOKEN_NOROLEMAP          ((HRESULT)0x80045021L)

//
// MessageId: PP_E_AZ_TOKENSCOPE_INVALID
//
// MessageText:
//
//  Invalid scope in the input token
//
#define PP_E_AZ_TOKENSCOPE_INVALID       ((HRESULT)0x80045022L)

//
// MessageId: PP_E_AZ_AUTHZTOKEN_INVALID
//
// MessageText:
//
//  The input token is invalid
//
#define PP_E_AZ_AUTHZTOKEN_INVALID       ((HRESULT)0x80045023L)

//
// MessageId: PP_E_AZ_NOT_AUTHORIZED
//
// MessageText:
//
//  The specified user is not authorized to perform the requested operation.
//
#define PP_E_AZ_NOT_AUTHORIZED           ((HRESULT)0x80045024L)

//
// MessageId: PP_E_AZ_AUTHZ_NOBINDING
//
// MessageText:
//
//  Internal error: not token binding for this operation
//
#define PP_E_AZ_AUTHZ_NOBINDING          ((HRESULT)0x80045025L)

//
// MessageId: PP_E_AZ_SOURCESCOPE_INVALID
//
// MessageText:
//
//  The source scope expression is invalid
//
#define PP_E_AZ_SOURCESCOPE_INVALID      ((HRESULT)0x80045026L)

//
// MessageId: PP_E_AZ_ROLETEMPLATE_NOTFOUND
//
// MessageText:
//
//  Role template not found
//
#define PP_E_AZ_ROLETEMPLATE_NOTFOUND    ((HRESULT)0x80045027L)

//
// MessageId: PP_E_AZ_TEMPLATEENTRY_INVALID
//
// MessageText:
//
//  Invalid template entry
//
#define PP_E_AZ_TEMPLATEENTRY_INVALID    ((HRESULT)0x80045028L)

//
// MessageId: PP_E_AZ_TEMPLATEID_INVALID
//
// MessageText:
//
//  Invalid template id
//
#define PP_E_AZ_TEMPLATEID_INVALID       ((HRESULT)0x80045029L)

//
// MessageId: PP_E_AZ_TEMPLATEXML_INVALID
//
// MessageText:
//
//  Invalid template xml
//
#define PP_E_AZ_TEMPLATEXML_INVALID      ((HRESULT)0x8004502AL)

//
// MessageId: PP_E_AZ_EVALTYPE_INVALID
//
// MessageText:
//
//  Invalid evaluation type
//
#define PP_E_AZ_EVALTYPE_INVALID         ((HRESULT)0x8004502BL)

//
// MessageId: PP_E_AZ_BINDINGCLAIMMAP_INVALID
//
// MessageText:
//
//  The input data contains an invalid claimmap
//
#define PP_E_AZ_BINDINGCLAIMMAP_INVALID  ((HRESULT)0x8004502CL)

//
// MessageId: PP_E_AZ_BINDINGSCOPEEXPR_INVALID
//
// MessageText:
//
//  The input data contains an invalid scope expression
//
#define PP_E_AZ_BINDINGSCOPEEXPR_INVALID ((HRESULT)0x8004502DL)

//
// MessageId: PP_E_AZ_BINDINGSCOPE_INVALID
//
// MessageText:
//
//  The input data contains an invalid scope
//
#define PP_E_AZ_BINDINGSCOPE_INVALID     ((HRESULT)0x8004502EL)

//
// MessageId: PP_E_AZ_PROPID_NOTFOUND
//
// MessageText:
//
//  Internal error: property id not found
//
#define PP_E_AZ_PROPID_NOTFOUND          ((HRESULT)0x8004502FL)

//
// MessageId: PP_E_AZ_AUTHZTOKEN_NOROLEMAP
//
// MessageText:
//
//  The input token has no rolemaps
//
#define PP_E_AZ_AUTHZTOKEN_NOROLEMAP     ((HRESULT)0x80045030L)

//
// MessageId: PP_E_AZ_AUTHZTOKEN_NOROOTSCOPE
//
// MessageText:
//
//  The input token has no root scope
//
#define PP_E_AZ_AUTHZTOKEN_NOROOTSCOPE   ((HRESULT)0x80045031L)

//
// MessageId: PP_E_AZ_BINDINGS_NOCLAIMMAP
//
// MessageText:
//
//  The input data has no claimmap
//
#define PP_E_AZ_BINDINGS_NOCLAIMMAP      ((HRESULT)0x80045032L)

//
// MessageId: PP_E_AZ_AUTHZTOKEN_NOCLAIMMAP
//
// MessageText:
//
//  The input token has no claimmap
//
#define PP_E_AZ_AUTHZTOKEN_NOCLAIMMAP    ((HRESULT)0x80045033L)

//
// MessageId: PP_E_AZ_CLAIMMAP_NOCLAIMS
//
// MessageText:
//
//  The input claimmap has no claims
//
#define PP_E_AZ_CLAIMMAP_NOCLAIMS        ((HRESULT)0x80045034L)

//
// MessageId: PP_E_AZ_ROOTSCOPE_INVALIDTYPE
//
// MessageText:
//
//  The input root scope has an invalid type
//
#define PP_E_AZ_ROOTSCOPE_INVALIDTYPE    ((HRESULT)0x80045035L)

//
// MessageId: PP_E_AZ_SCOPEEVAL_NOTEVALUATED
//
// MessageText:
//
//  Internal error: the bindings are not yet evaluated
//
#define PP_E_AZ_SCOPEEVAL_NOTEVALUATED   ((HRESULT)0x80045036L)

//
// MessageId: PP_E_AZ_SCOPEEVAL_NOINIT
//
// MessageText:
//
//  Internal error: the evaluation results are not initialized
//
#define PP_E_AZ_SCOPEEVAL_NOINIT         ((HRESULT)0x80045037L)

//
// MessageId: PP_E_AZ_CANNOT_NORMALIZE
//
// MessageText:
//
//  Internal error: cannot normalized internal structures
//
#define PP_E_AZ_CANNOT_NORMALIZE         ((HRESULT)0x80045038L)

//
// MessageId: PP_E_AZ_DBCONVERSION_FAIL
//
// MessageText:
//
//  Internal error: errors during conversion to/from DB format
//
#define PP_E_AZ_DBCONVERSION_FAIL        ((HRESULT)0x80045039L)

//
// MessageId: PP_E_AZ_NORMALIZEDSCOPE_INVALID
//
// MessageText:
//
//  The normalized scope expression is invalid
//
#define PP_E_AZ_NORMALIZEDSCOPE_INVALID  ((HRESULT)0x8004503AL)

//
// MessageId: PP_E_AZ_CLAIMMAP_EMPTY
//
// MessageText:
//
//  The input data contains an empty claimmap
//
#define PP_E_AZ_CLAIMMAP_EMPTY           ((HRESULT)0x8004503BL)

//
// MessageId: PP_E_AZ_SCOPESCHEMA_INVALIDTYPE
//
// MessageText:
//
//  The schema for the scope hierarchy contains an invalid resource type
//
#define PP_E_AZ_SCOPESCHEMA_INVALIDTYPE  ((HRESULT)0x8004503CL)

//
// MessageId: PP_E_AZ_SCOPESCHEMA_INVALIDNAME
//
// MessageText:
//
//  The schema for the scope hierarchy contains an invalid resource name
//
#define PP_E_AZ_SCOPESCHEMA_INVALIDNAME  ((HRESULT)0x8004503DL)

//
// MessageId: PP_E_AZ_SCOPEMAPENTRY_INVALID
//
// MessageText:
//
//  The schema for the scope hierarchy contains an invalid entry
//
#define PP_E_AZ_SCOPEMAPENTRY_INVALID    ((HRESULT)0x8004503EL)

//
// MessageId: PP_E_AZ_SCOPEMAPPING_NOTFOUND
//
// MessageText:
//
//  Internal error: there is no such hierarchy for the input resource types
//
#define PP_E_AZ_SCOPEMAPPING_NOTFOUND    ((HRESULT)0x8004503FL)

//
// MessageId: PP_E_AZ_SCOPELEN_TOOBIG
//
// MessageText:
//
//  The scope expression is too long
//
#define PP_E_AZ_SCOPELEN_TOOBIG          ((HRESULT)0x80045040L)

//
// MessageId: PP_E_AZ_SCOPECOUNT_TOOBIG
//
// MessageText:
//
//  The resource count is too large
//
#define PP_E_AZ_SCOPECOUNT_TOOBIG        ((HRESULT)0x80045041L)

//
// MessageId: PP_E_AZ_CLAIMLEN_TOOBIG
//
// MessageText:
//
//  The claim name is too large
//
#define PP_E_AZ_CLAIMLEN_TOOBIG          ((HRESULT)0x80045042L)

//
// MessageId: PP_E_AZ_CLAIMCOUNT_TOOBIG
//
// MessageText:
//
//  The claim count is too large
//
#define PP_E_AZ_CLAIMCOUNT_TOOBIG        ((HRESULT)0x80045043L)

//
// MessageId: PP_E_AZ_TOKENLEN_TOOBIG
//
// MessageText:
//
//  The token size is too large
//
#define PP_E_AZ_TOKENLEN_TOOBIG          ((HRESULT)0x80045044L)

//
// MessageId: PP_E_AZ_BINDINGSLEN_TOOBIG
//
// MessageText:
//
//  The input bindings data is too large
//
#define PP_E_AZ_BINDINGSLEN_TOOBIG       ((HRESULT)0x80045045L)

//
// MessageId: PP_E_AZ_ROLE_NOTFOUND
//
// MessageText:
//
//  Internal error: the role name does not exist
//
#define PP_E_AZ_ROLE_NOTFOUND            ((HRESULT)0x80045046L)

//
// MessageId: PP_E_AZ_ROLE_NAMEMISSING
//
// MessageText:
//
//  Internal error: the role name is missing in the input data
//
#define PP_E_AZ_ROLE_NAMEMISSING         ((HRESULT)0x80045047L)

//
// MessageId: PP_E_AZ_DA_ID_INVALID
//
// MessageText:
//
//  Internal error: invalid DA identifier
//
#define PP_E_AZ_DA_ID_INVALID            ((HRESULT)0x80045048L)

//
// MessageId: PP_E_AZ_IDENTITY_INVALID
//
// MessageText:
//
//  Internal error: invalid identifier
//
#define PP_E_AZ_IDENTITY_INVALID         ((HRESULT)0x80045049L)

//
// MessageId: PP_E_AZ_QUOTA_SETTINGS_INVALID
//
// MessageText:
//
//  Internal error: the quota settings are invalid
//
#define PP_E_AZ_QUOTA_SETTINGS_INVALID   ((HRESULT)0x8004504AL)

//
// MessageId: PP_E_AZ_NAMESPACE_ID_INVALID
//
// MessageText:
//
//  Internal error: invalid namespace identifier
//
#define PP_E_AZ_NAMESPACE_ID_INVALID     ((HRESULT)0x8004504BL)

//
// MessageId: PP_E_AZ_ENUMSCOPE_ID_INVALID
//
// MessageText:
//
//  Internal error: invalid group identifier
//
#define PP_E_AZ_ENUMSCOPE_ID_INVALID     ((HRESULT)0x8004504CL)

//
// MessageId: PP_E_AZ_MEMBERID_INVALID
//
// MessageText:
//
//  Internal error: invalid identifier
//
#define PP_E_AZ_MEMBERID_INVALID         ((HRESULT)0x8004504DL)

//
// MessageId: PP_E_AZ_ENUMSCOPE_NOTSUPPORTED
//
// MessageText:
//
//  Internal error: the type of the enumerated scope is not supported
//
#define PP_E_AZ_ENUMSCOPE_NOTSUPPORTED   ((HRESULT)0x8004504EL)

//
// MessageId: PP_E_AZ_OBJECT_ID_INVALID
//
// MessageText:
//
//  Internal error: invalid object identifier
//
#define PP_E_AZ_OBJECT_ID_INVALID        ((HRESULT)0x8004504FL)

//
// MessageId: PP_E_AZ_GENERATEXML_BADVARIANT
//
// MessageText:
//
//  Internal error: XML writer returns an invalid variant type
//
#define PP_E_AZ_GENERATEXML_BADVARIANT   ((HRESULT)0x80045050L)

//
// MessageId: PP_E_AZ_SCOPE_NOTSUPPORTED
//
// MessageText:
//
//  Hierarchical scope expressions are not supported for this version
//
#define PP_E_AZ_SCOPE_NOTSUPPORTED       ((HRESULT)0x80045051L)

//
// MessageId: PP_E_AZ_NO_CLAIMS
//
// MessageText:
//
//  The input claims array is empty
//
#define PP_E_AZ_NO_CLAIMS                ((HRESULT)0x80045052L)

//
// MessageId: PP_E_AZ_BINDINGS_EMPTY
//
// MessageText:
//
//  The input bindings xml is empty
//
#define PP_E_AZ_BINDINGS_EMPTY           ((HRESULT)0x80045053L)

//
// MessageId: PP_E_AZ_TOKENTYPE_INVALID
//
// MessageText:
//
//  The type of the authorization token is invalid
//
#define PP_E_AZ_TOKENTYPE_INVALID        ((HRESULT)0x80045054L)

//
// MessageId: PP_E_AZ_SOURCETYPE_NOTSUPPORTED
//
// MessageText:
//
//  The source scope is not supported
//
#define PP_E_AZ_SOURCETYPE_NOTSUPPORTED  ((HRESULT)0x80045055L)

//
// MessageId: PP_E_AZ_ROLEFILTER_INVALID
//
// MessageText:
//
//  Invalid role filtering data
//
#define PP_E_AZ_ROLEFILTER_INVALID       ((HRESULT)0x80045056L)

//
// MessageId: PP_E_AZ_SITECONFIG_INVALID
//
// MessageText:
//
//  Invalid site configuration data
//
#define PP_E_AZ_SITECONFIG_INVALID       ((HRESULT)0x80045057L)

//
// MessageId: PP_E_AZ_TOKENHEADER_INVALID
//
// MessageText:
//
//  Invalid header field in the authorization token
//
#define PP_E_AZ_TOKENHEADER_INVALID      ((HRESULT)0x80045058L)

//
// MessageId: PP_E_AZ_CALLCONTEXT_INVALID
//
// MessageText:
//
//  Invalid call context data
//
#define PP_E_AZ_CALLCONTEXT_INVALID      ((HRESULT)0x80045059L)

//
// MessageId: PP_E_AZ_CACHEDTOKEN_INVALID
//
// MessageText:
//
//  Invalid cache entry for an authz token
//
#define PP_E_AZ_CACHEDTOKEN_INVALID      ((HRESULT)0x8004505AL)

//
// MessageId: PP_E_AZ_CACHEDTOKEN_NOTFOUND
//
// MessageText:
//
//  Cached token not found
//
#define PP_E_AZ_CACHEDTOKEN_NOTFOUND     ((HRESULT)0x8004505BL)

//
// MessageId: PP_E_AZ_CACHEDTYPE_INVALID
//
// MessageText:
//
//  Invalid cached token type
//
#define PP_E_AZ_CACHEDTYPE_INVALID       ((HRESULT)0x8004505CL)

//
// MessageId: PP_E_AZ_STRINGINDEX_INVALID
//
// MessageText:
//
//  Internal error: invalid string index
//
#define PP_E_AZ_STRINGINDEX_INVALID      ((HRESULT)0x8004505DL)

//
// MessageId: PP_E_AZ_CLIENTCONTEXT_INVALID
//
// MessageText:
//
//  Invalid client context
//
#define PP_E_AZ_CLIENTCONTEXT_INVALID    ((HRESULT)0x8004505EL)

//
// MessageId: PP_E_AZ_CLIENTTOKEN_ALREADYBOUND
//
// MessageText:
//
//  The token is already bound
//
#define PP_E_AZ_CLIENTTOKEN_ALREADYBOUND ((HRESULT)0x8004505FL)

//
// MessageId: PP_E_AZ_BUFFERLEN_INVALID
//
// MessageText:
//
//  Internal error: invalid buffer length
//
#define PP_E_AZ_BUFFERLEN_INVALID        ((HRESULT)0x80045060L)

//
// MessageId: PP_E_AZ_CONVERSION_ERROR
//
// MessageText:
//
//  Internal error: string conversion error
//
#define PP_E_AZ_CONVERSION_ERROR         ((HRESULT)0x80045061L)

//
// MessageId: PP_E_AZ_SERVERCERT_INVALID
//
// MessageText:
//
//  Server certificate is invalid
//
#define PP_E_AZ_SERVERCERT_INVALID       ((HRESULT)0x80045062L)

//
// MessageId: PP_E_AZ_CLIENT_NOTINITIALIZED
//
// MessageText:
//
//  Client library: structure not initialized
//
#define PP_E_AZ_CLIENT_NOTINITIALIZED    ((HRESULT)0x80045063L)

//
// MessageId: PP_E_AZ_ENCRYPTIONERROR
//
// MessageText:
//
//  Encrypt/decrypt error
//
#define PP_E_AZ_ENCRYPTIONERROR          ((HRESULT)0x80045064L)

//
// MessageId: PP_E_AZ_SESSIONKEYTOKEN_INVALID
//
// MessageText:
//
//  Invalid session key in input token
//
#define PP_E_AZ_SESSIONKEYTOKEN_INVALID  ((HRESULT)0x80045065L)

//
// MessageId: PP_E_AZ_CLIENTKEYTOKEN_INVALID
//
// MessageText:
//
//  Invalid client key in input token
//
#define PP_E_AZ_CLIENTKEYTOKEN_INVALID   ((HRESULT)0x80045066L)

//
// MessageId: PP_E_AZ_KEYTOKEN_INVALID
//
// MessageText:
//
//  Invalid key in input token
//
#define PP_E_AZ_KEYTOKEN_INVALID         ((HRESULT)0x80045067L)

//
// MessageId: PP_E_AZ_CRYPTPROVIDER_INVALIDOP
//
// MessageText:
//
//  Internal error: invalid crypt provider operation
//
#define PP_E_AZ_CRYPTPROVIDER_INVALIDOP  ((HRESULT)0x80045068L)

//
// MessageId: PP_E_AZ_CRYPTHANDLE_INVALID
//
// MessageText:
//
//  Internal error: invalid crypt handle
//
#define PP_E_AZ_CRYPTHANDLE_INVALID      ((HRESULT)0x80045069L)

//
// MessageId: PP_E_AZ_NOTAUTHZOWNER
//
// MessageText:
//
//  The user can request a token only for itself
//
#define PP_E_AZ_NOTAUTHZOWNER            ((HRESULT)0x8004506AL)

//
// MessageId: PP_E_AZ_DBVALUE_INVALID
//
// MessageText:
//
//  Internal error: invalid database value
//
#define PP_E_AZ_DBVALUE_INVALID          ((HRESULT)0x8004506BL)

//
// MessageId: PP_E_AZ_NAMESPACE_NOTFOUND
//
// MessageText:
//
//  Namespace not found
//
#define PP_E_AZ_NAMESPACE_NOTFOUND       ((HRESULT)0x8004506CL)

//
// MessageId: PP_E_AZ_RESSCHEMA_INVALID
//
// MessageText:
//
//  Internal error: Invalid resource schema object
//
#define PP_E_AZ_RESSCHEMA_INVALID        ((HRESULT)0x8004506DL)

//
// MessageId: PP_E_AZ_BINDINGTYPE_NOSCOPE
//
// MessageText:
//
//  The target type is provided with an empty target scope
//
#define PP_E_AZ_BINDINGTYPE_NOSCOPE      ((HRESULT)0x8004506EL)

//
// MessageId: PP_E_AZ_AUTHZTOKEN_INVALIDXML
//
// MessageText:
//
//  The authz token xml does not conform with the XML standards
//
#define PP_E_AZ_AUTHZTOKEN_INVALIDXML    ((HRESULT)0x8004506FL)

//
// MessageId: PP_E_AZ_BINDINGS_INVALIDXML
//
// MessageText:
//
//  The claim bindings xml does not conform with the XML standards
//
#define PP_E_AZ_BINDINGS_INVALIDXML      ((HRESULT)0x80045070L)

//
// MessageId: PP_E_AZ_CRYPTAPI_FAILURE
//
// MessageText:
//
//  Failed to encrypt/decrypt the authorization data
//
#define PP_E_AZ_CRYPTAPI_FAILURE         ((HRESULT)0x80045071L)

//
// MessageId: PP_E_AZ_NODELEGATEHEADERS
//
// MessageText:
//
//  The calling context does not include a delegation header
//
#define PP_E_AZ_NODELEGATEHEADERS        ((HRESULT)0x80045072L)

//
// MessageId: PP_E_AZ_DELEGATE_INVALIDXML
//
// MessageText:
//
//  The delegation header xml does not conform to the current schema
//
#define PP_E_AZ_DELEGATE_INVALIDXML      ((HRESULT)0x80045073L)

//
// MessageId: PP_E_AZ_DELEGATE_INVALIDPUID
//
// MessageText:
//
//  The delegated passport id is invalid or does not match the identity for the current request
//
#define PP_E_AZ_DELEGATE_INVALIDPUID     ((HRESULT)0x80045074L)

//
// MessageId: PP_E_AZ_TOKEN_NODELEGATE
//
// MessageText:
//
//  The authorization token does not contain delegate information
//
#define PP_E_AZ_TOKEN_NODELEGATE         ((HRESULT)0x80045075L)

//
// MessageId: PP_E_AZ_DELEGATESCOPE_INVALID
//
// MessageText:
//
//  The delegation scope is invalid
//
#define PP_E_AZ_DELEGATESCOPE_INVALID    ((HRESULT)0x80045076L)

//
// MessageId: PP_E_AZ_DELEGATESCOPE_NOMATCH
//
// MessageText:
//
//  The passport id included in the delegation scope does not match the id in the delegation headers
//
#define PP_E_AZ_DELEGATESCOPE_NOMATCH    ((HRESULT)0x80045077L)

//
// MessageId: PP_E_AZ_ROLEFILTERXML_INVALID
//
// MessageText:
//
//  The role filter xml does not conform to the current schema
//
#define PP_E_AZ_ROLEFILTERXML_INVALID    ((HRESULT)0x80045078L)

//
// MessageId: PP_E_AZ_USERAUTHMETHOD_INVALID
//
// MessageText:
//
//  Invalid user authentication method
//
#define PP_E_AZ_USERAUTHMETHOD_INVALID   ((HRESULT)0x80045079L)

//
// MessageId: PP_E_AZ_SITEAUTHFLAG_INVALID
//
// MessageText:
//
//  Invalid site authentication flags
//
#define PP_E_AZ_SITEAUTHFLAG_INVALID     ((HRESULT)0x8004507AL)

//
// MessageId: PP_E_AZ_INVALIDFLAGS
//
// MessageText:
//
//  Flags argument is currently reserved and should be set to 0
//
#define PP_E_AZ_INVALIDFLAGS             ((HRESULT)0x8004507BL)

//
// MessageId: PP_E_AZ_SCOPETYPELEN_TOOBIG
//
// MessageText:
//
//  The scope type string is too long
//
#define PP_E_AZ_SCOPETYPELEN_TOOBIG      ((HRESULT)0x8004507CL)

//
// MessageId: PP_E_AZ_HEADERDATE_INVALID
//
// MessageText:
//
//  Invalid date field in the authorization token
//
#define PP_E_AZ_HEADERDATE_INVALID       ((HRESULT)0x8004507DL)

//
// MessageId: PP_E_AZ_AUTHZTOKEN_EXPIRED
//
// MessageText:
//
//  The authorization token expired
//
#define PP_E_AZ_AUTHZTOKEN_EXPIRED       ((HRESULT)0x8004507EL)

// base 0x5100
//
// MessageId: PP_E_ES_SENDTRDPL_MISSINGHOSTNAME
//
// MessageText:
//
//  Send thread pool could not initialize because SMTP host name is missing.
//
#define PP_E_ES_SENDTRDPL_MISSINGHOSTNAME ((HRESULT)0x80045100L)

//
// MessageId: PP_E_ES_SENDTRDPL_COULD_NOT_OPEN_SMPT_CONNECTION
//
// MessageText:
//
//  Sending thread could not connect to SMTP.
//
#define PP_E_ES_SENDTRDPL_COULD_NOT_OPEN_SMPT_CONNECTION ((HRESULT)0x80045102L)

//
// MessageId: PP_E_ES_PARTITIONKEEPER_NOT_INITIALIZED
//
// MessageText:
//
//  Partition keeper is not yet initialized.
//
#define PP_E_ES_PARTITIONKEEPER_NOT_INITIALIZED ((HRESULT)0x80045106L)

//
// MessageId: PP_E_ES_INVALID_PARTITIONINFO_SUPPLIED
//
// MessageText:
//
//  Incorrect info supplied for partition keeper initialization.
//
#define PP_E_ES_INVALID_PARTITIONINFO_SUPPLIED ((HRESULT)0x80045107L)

//
// MessageId: PP_E_ES_DEPOSITORY_ALREADY_INITIALIZED
//
// MessageText:
//
//  Attempt to initialize email depository multiple times.
//
#define PP_E_ES_DEPOSITORY_ALREADY_INITIALIZED ((HRESULT)0x8004510AL)

//
// MessageId: PP_E_ES_INVALID_DEPOZITORY_SIZE_SUPPLIED
//
// MessageText:
//
//  Invalid email depository size supplied for initialization.
//
#define PP_E_ES_INVALID_DEPOZITORY_SIZE_SUPPLIED ((HRESULT)0x8004510BL)

//
// MessageId: PP_E_ES_SENDTRDPL_CONFIG_NOT_INITIALIZED
//
// MessageText:
//
//  Config object is not initialized during send thread initialization.
//
#define PP_E_ES_SENDTRDPL_CONFIG_NOT_INITIALIZED ((HRESULT)0x8004510DL)

//
// MessageId: PP_E_ES_SENDTRDPL_COULD_NOT_CLOSE_SMPT_CONNECTION
//
// MessageText:
//
//  Send thread could not close SMTP connection.
//
#define PP_E_ES_SENDTRDPL_COULD_NOT_CLOSE_SMPT_CONNECTION ((HRESULT)0x8004510EL)

//
// MessageId: PP_E_ES_GETTRDPL_INVALID_DEPOSITORY_SUPPLIED
//
// MessageText:
//
//  Invalid depository pointer supplied.
//
#define PP_E_ES_GETTRDPL_INVALID_DEPOSITORY_SUPPLIED ((HRESULT)0x8004510FL)

//
// MessageId: PP_E_ES_DEPOSITORY_NOT_INITIALIZED
//
// MessageText:
//
//  Email depository is not initialized.
//
#define PP_E_ES_DEPOSITORY_NOT_INITIALIZED ((HRESULT)0x80045110L)

//
// MessageId: PP_E_ES_CONFIG_ALREADY_INITIALIZED
//
// MessageText:
//
//  Attempt to initialize config multiple times.
//
#define PP_E_ES_CONFIG_ALREADY_INITIALIZED ((HRESULT)0x8004511BL)

//
// MessageId: PP_E_ES_CONFIG_EMPTY
//
// MessageText:
//
//  Config object has no config data.
//
#define PP_E_ES_CONFIG_EMPTY             ((HRESULT)0x8004511CL)

//
// MessageId: PP_E_ES_CONFIG_SECTIONNAME_EMPTY
//
// MessageText:
//
//  Section name is invalid for config initialization.
//
#define PP_E_ES_CONFIG_SECTIONNAME_EMPTY ((HRESULT)0x8004511DL)

//
// MessageId: PP_E_ES_CONFIG_INVALID_INIFILE_NAME
//
// MessageText:
//
//  Invalid INI file name.
//
#define PP_E_ES_CONFIG_INVALID_INIFILE_NAME ((HRESULT)0x8004511EL)

//
// MessageId: PP_E_ES_CONFIG_SECTION_BUFFER_TOO_SMALL
//
// MessageText:
//
//  Could not initialize config because buffer to read data from config file is too small.
//
#define PP_E_ES_CONFIG_SECTION_BUFFER_TOO_SMALL ((HRESULT)0x8004511FL)

//
// MessageId: PP_E_ES_CONFIG_EMPTY_ITEM_NAME
//
// MessageText:
//
//  Item name is invalid.
//
#define PP_E_ES_CONFIG_EMPTY_ITEM_NAME   ((HRESULT)0x80045120L)

//
// MessageId: PP_E_ES_CONFIG_NO_SUCH_ITEM
//
// MessageText:
//
//  No item with this name is config file.
//
#define PP_E_ES_CONFIG_NO_SUCH_ITEM      ((HRESULT)0x80045121L)

//
// MessageId: PP_E_ES_CONFIG_CAN_NOT_CHANGE_ITEM_TYPE
//
// MessageText:
//
//  Can not convert item type to expected.
//
#define PP_E_ES_CONFIG_CAN_NOT_CHANGE_ITEM_TYPE ((HRESULT)0x80045122L)

//
// MessageId: PP_E_ES_CONFIG_NOT_INITIALIZED
//
// MessageText:
//
//  Config not initialized.
//
#define PP_E_ES_CONFIG_NOT_INITIALIZED   ((HRESULT)0x80045124L)

//
// MessageId: PP_E_ES_EIDEPOSITORY_INVALID_THREADPOOL_POINTER
//
// MessageText:
//
//  Invalid pointer to email depository supplied.
//
#define PP_E_ES_EIDEPOSITORY_INVALID_THREADPOOL_POINTER ((HRESULT)0x80045125L)

//
// MessageId: PP_E_ES_EIDEPOSITORY_INVALID_SIZE
//
// MessageText:
//
//  Invalid size of email depository.
//
#define PP_E_ES_EIDEPOSITORY_INVALID_SIZE ((HRESULT)0x80045126L)

//
// MessageId: PP_E_ES_TEMPLATECACHE_NOT_INITIALIZED
//
// MessageText:
//
//  Email templace cache is not initialized.
//
#define PP_E_ES_TEMPLATECACHE_NOT_INITIALIZED ((HRESULT)0x80045129L)

//
// MessageId: PP_E_ES_TEMPLATECACHE_SIZE_IS_ZERO
//
// MessageText:
//
//  Email template cache size is zero.
//
#define PP_E_ES_TEMPLATECACHE_SIZE_IS_ZERO ((HRESULT)0x8004512AL)

//
// MessageId: PP_E_ES_TEMPLATECACHE_INVALID_LCID
//
// MessageText:
//
//  Invalid LCID supplied to email template cache.
//
#define PP_E_ES_TEMPLATECACHE_INVALID_LCID ((HRESULT)0x8004512DL)

//
// MessageId: PP_E_ES_TEMPLATECACHE_INVALID_TEMPLATEID
//
// MessageText:
//
//  Invalid template ID is supplied to email template cache.
//
#define PP_E_ES_TEMPLATECACHE_INVALID_TEMPLATEID ((HRESULT)0x8004512EL)

//
// MessageId: PP_E_ES_SENDTRDPL_NO_TAGS_TO_REPLACE
//
// MessageText:
//
//  No tags to be replaced were found in this message.
//
#define PP_E_ES_SENDTRDPL_NO_TAGS_TO_REPLACE ((HRESULT)0x8004512FL)

//
// MessageId: PP_E_ES_SENDTRDPL_FAILED_TO_SETUP_MSG
//
// MessageText:
//
//  Send thread failed to create email message.
//
#define PP_E_ES_SENDTRDPL_FAILED_TO_SETUP_MSG ((HRESULT)0x80045130L)

//
// MessageId: PP_E_ES_STATISTICS_INVALID_LOAD_LEVEL
//
// MessageText:
//
//  Require load level is invalid.
//
#define PP_E_ES_STATISTICS_INVALID_LOAD_LEVEL ((HRESULT)0x80045131L)

//
// MessageId: PP_E_ES_STATISTICS_INVALID_MINIMAL_TIME
//
// MessageText:
//
//  Minimal time between calls to get emails from DB is invalid.
//
#define PP_E_ES_STATISTICS_INVALID_MINIMAL_TIME ((HRESULT)0x80045133L)

//
// MessageId: PP_E_ES_STATISTICS_INVALID_TRIGGER_VALUE
//
// MessageText:
//
//  Trigger value is invalid.
//
#define PP_E_ES_STATISTICS_INVALID_TRIGGER_VALUE ((HRESULT)0x80045134L)

//
// MessageId: PP_E_ES_GETTRDPL_INVALID_STATISTICS_SUPPLIED
//
// MessageText:
//
//  Invalid pointer to statistics object supplied.
//
#define PP_E_ES_GETTRDPL_INVALID_STATISTICS_SUPPLIED ((HRESULT)0x80045135L)

//
// MessageId: PP_E_ES_STATISTICS_NOT_INITIALIZED
//
// MessageText:
//
//  Statistics object not initialized.
//
#define PP_E_ES_STATISTICS_NOT_INITIALIZED ((HRESULT)0x80045136L)

//
// MessageId: PP_E_ES_SENDTRDPL_SMTPRECONNECTTIMEOUT_INCORRECT
//
// MessageText:
//
//  SMTP reconnect time interval is invalid.
//
#define PP_E_ES_SENDTRDPL_SMTPRECONNECTTIMEOUT_INCORRECT ((HRESULT)0x80045138L)

//
// MessageId: PP_E_ES_STATISTICS_INVALID_THROTTLEPERNUMBEROFCALLS_VALUE
//
// MessageText:
//
//  Throttle per number of calls parameter value is invalid.
//
#define PP_E_ES_STATISTICS_INVALID_THROTTLEPERNUMBEROFCALLS_VALUE ((HRESULT)0x80045139L)

//
// MessageId: PP_E_ES_STATISTICS_INVALID_MAXIMUM_TIME
//
// MessageText:
//
//  Maximum time between calls to get emails out of DB is invalid.
//
#define PP_E_ES_STATISTICS_INVALID_MAXIMUM_TIME ((HRESULT)0x8004513AL)

//
// MessageId: PP_E_ES_CONFIG_INVALID_RESPONSE_URL
//
// MessageText:
//
//  Invalid response URL is supplied in config.
//
#define PP_E_ES_CONFIG_INVALID_RESPONSE_URL ((HRESULT)0x8004513BL)

//
// MessageId: PP_E_ES_CONFIG_NO_SUCH_LCID
//
// MessageText:
//
//  Requested LCID does not exist.
//
#define PP_E_ES_CONFIG_NO_SUCH_LCID      ((HRESULT)0x8004513CL)

//
// MessageId: PP_E_ES_SENDTRDPL_HASH_FAILED
//
// MessageText:
//
//  Could not hash email ID.
//
#define PP_E_ES_SENDTRDPL_HASH_FAILED    ((HRESULT)0x8004513DL)

//
// MessageId: PP_E_ES_EVENTLOGGER_COULD_NOT_CREATE
//
// MessageText:
//
//  Could not create Global Event Logger.
//
#define PP_E_ES_EVENTLOGGER_COULD_NOT_CREATE ((HRESULT)0x8004513EL)

//
// MessageId: PP_E_ES_EVENTLOGGER_NOT_INITIALIZED
//
// MessageText:
//
//  Event Logger not initialized.
//
#define PP_E_ES_EVENTLOGGER_NOT_INITIALIZED ((HRESULT)0x8004513FL)

//
// MessageId: PP_E_ES_SENDTRDPL_DICSONNECT_FAILED
//
// MessageText:
//
//  SMTP disconnect failed.
//
#define PP_E_ES_SENDTRDPL_DICSONNECT_FAILED ((HRESULT)0x80045140L)

//
// MessageId: PP_E_ES_STATISTICS_LOADLEVELTRIGGERCOMBO_OUTSIDE_LEGAL_RANGE
//
// MessageText:
//
//  Load level plus trigger is either greater maximum load or less than minimum load.
//
#define PP_E_ES_STATISTICS_LOADLEVELTRIGGERCOMBO_OUTSIDE_LEGAL_RANGE ((HRESULT)0x80045141L)

//
// MessageId: PP_E_ES_EMAILINFODEPOT_SIZE_INVALID
//
// MessageText:
//
//  Imail Info Depository size is invalid.
//
#define PP_E_ES_EMAILINFODEPOT_SIZE_INVALID ((HRESULT)0x80045142L)

//
// MessageId: PP_E_ES_SENDTRDPL_DUMPPATH_MISSING
//
// MessageText:
//
//  Path to dump emails for debugging is missing.
//
#define PP_E_ES_SENDTRDPL_DUMPPATH_MISSING ((HRESULT)0x80045143L)

//
// MessageId: PP_E_ES_SENDTRDPL_UNREPLACED_TAGS
//
// MessageText:
//
//  There are still tag markers in email which did not get replaced. Verify there are enough URLs and Tags for this email.
//
#define PP_E_ES_SENDTRDPL_UNREPLACED_TAGS ((HRESULT)0x80045144L)

// base 0x5201
//
// MessageId: PP_E_UILP_INVALIDPARAM
//
// MessageText:
//
//  Invalid token passed in UI Parameters. Either the name value pair is missing or name is not recognized.
//
#define PP_E_UILP_INVALIDPARAM           ((HRESULT)0x80045201L)

// base 0x5300
//------------------------------------------------------------------------------
// CachedProvisionedObject
//------------------------------------------------------------------------------
#define PP_E_CPO_BASE 0x5300
//
// MessageId: PP_E_CPO_INDEXOUTOFRANGE
//
// MessageText:
//
//  Index into an array or list is out of range. (hr=%1)
//
#define PP_E_CPO_INDEXOUTOFRANGE         ((HRESULT)0x80045300L)

//
// MessageId: PP_E_CPO_CANTGETCCMCACHE
//
// MessageText:
//
//  Cannot get pointer to the CCM Cache. (hr=%1)
//
#define PP_E_CPO_CANTGETCCMCACHE         ((HRESULT)0x80045301L)

//
// MessageId: PP_E_CPO_OBJECTNOTFOUND
//
// MessageText:
//
//  Object not found in DB. (hr=%1)
//
#define PP_E_CPO_OBJECTNOTFOUND          ((HRESULT)0x80045302L)

//
// MessageId: PP_E_CPO_CANTGETDATASOURCE
//
// MessageText:
//
//  Cannot get the internal DataSource object. (hr=%1)
//
#define PP_E_CPO_CANTGETDATASOURCE       ((HRESULT)0x80045303L)

//
// MessageId: PP_E_CPO_OBJECTIDMISMATCH
//
// MessageText:
//
//  Object IDs do not match in some way. (hr=%1)
//
#define PP_E_CPO_OBJECTIDMISMATCH        ((HRESULT)0x80045304L)

//
// MessageId: PP_E_CPO_RELEASEMISMATCH
//
// MessageText:
//
//  Object Release Versions do not match in some way. (hr=%1)
//
#define PP_E_CPO_RELEASEMISMATCH         ((HRESULT)0x80045305L)

//
// MessageId: PP_E_CPO_INCORRECTDATASOURCE
//
// MessageText:
//
//  Incorrect DataSource type. (hr=%1)
//
#define PP_E_CPO_INCORRECTDATASOURCE     ((HRESULT)0x80045306L)

//
// MessageId: PP_E_CPO_CANTGETOBJECT
//
// MessageText:
//
//  Cannot get the requested object. (hr=%1)
//
#define PP_E_CPO_CANTGETOBJECT           ((HRESULT)0x80045307L)

//
// MessageId: PP_E_CPO_INVALIDOBJECTID
//
// MessageText:
//
//  Object ID is not valid. (hr=%1)
//
#define PP_E_CPO_INVALIDOBJECTID         ((HRESULT)0x80045308L)

//
// MessageId: PP_E_CPO_BADPATH
//
// MessageText:
//
//  Badly formatted property or object path. (hr=%1)
//
#define PP_E_CPO_BADPATH                 ((HRESULT)0x80045309L)

//
// MessageId: PP_E_CPO_VARSUBST_ATTR_REPL_NOTFOUND
//
// MessageText:
//
//  Variable substitution replacement tag was not found. (hr=%1)
//
#define PP_E_CPO_VARSUBST_ATTR_REPL_NOTFOUND ((HRESULT)0x8004530AL)

//
// MessageId: PP_E_CPO_VARSUBST_REPL_ATTR_PARSEERR
//
// MessageText:
//
//  Variable substitution parse error. (hr=%1)
//
#define PP_E_CPO_VARSUBST_REPL_ATTR_PARSEERR ((HRESULT)0x8004530BL)

//
// MessageId: PP_E_CPO_VARSUBST_ENV_PARSEERR
//
// MessageText:
//
//  Error parsing the Environment node for Variable Substitution. (hr=%1)
//
#define PP_E_CPO_VARSUBST_ENV_PARSEERR   ((HRESULT)0x8004530CL)

//
// MessageId: PP_E_CPO_XML_PARSE_ERR
//
// MessageText:
//
//  General XML parse error. (hr=%1)
//
#define PP_E_CPO_XML_PARSE_ERR           ((HRESULT)0x8004530DL)

//
// MessageId: PP_E_CPO_LOADFROMXML_FAILED
//
// MessageText:
//
//  Cannot load this Cached Prov Obj from XML.  See the detailed error string. (hr=%1)
//
#define PP_E_CPO_LOADFROMXML_FAILED      ((HRESULT)0x8004530EL)

//
// MessageId: PP_E_CPO_OBJECTNOTCPO
//
// MessageText:
//
//  Object is not a CachedProvisionedObject.  Does not implement ICachedProvObj. (hr=%1)
//
#define PP_E_CPO_OBJECTNOTCPO            ((HRESULT)0x8004530FL)

//
// MessageId: PP_E_CPO_UNEXPECTED_DOM_NODE_TYPE
//
// MessageText:
//
//  Unexpected XMLDOM Node Type. (hr=%1)
//
#define PP_E_CPO_UNEXPECTED_DOM_NODE_TYPE ((HRESULT)0x80045310L)

//
// MessageId: PP_E_CPO_UNEXPECTED_VARIANT_TYPE
//
// MessageText:
//
//  Unexpected Variant data type. (hr=%1)
//
#define PP_E_CPO_UNEXPECTED_VARIANT_TYPE ((HRESULT)0x80045311L)

//
// MessageId: PP_E_CPO_PROPERTYNOTEXIST
//
// MessageText:
//
//  Requested property does not exist. (hr=%1)
//
#define PP_E_CPO_PROPERTYNOTEXIST        ((HRESULT)0x80045312L)

//
// MessageId: PP_E_CPO_OBJECTNOTEXIST
//
// MessageText:
//
//  Requested object does not exist. (hr=%1)
//
#define PP_E_CPO_OBJECTNOTEXIST          ((HRESULT)0x80045313L)

//
// MessageId: PP_E_CPO_XML_SCHEMA_PARSE_ERR
//
// MessageText:
//
//  Error parsing validation schema. (hr=%1)
//
#define PP_E_CPO_XML_SCHEMA_PARSE_ERR    ((HRESULT)0x80045314L)

//
// MessageId: PP_E_CPO_XML_ATTR_MISSING
//
// MessageText:
//
//  Required XML Attribute is missing. (hr=%1)
//
#define PP_E_CPO_XML_ATTR_MISSING        ((HRESULT)0x80045315L)

//
// MessageId: PP_E_CPO_EXPECTING_SINGLE_INSTANCE
//
// MessageText:
//
//  A property has more than one instance where were expecting only one. (hr=%1)
//
#define PP_E_CPO_EXPECTING_SINGLE_INSTANCE ((HRESULT)0x80045316L)

//
// MessageId: PP_E_CPO_PERSISTBLOCKED
//
// MessageText:
//
//  Persist has been blocked by a PrePersist callback. (hr=%1)
//
#define PP_E_CPO_PERSISTBLOCKED          ((HRESULT)0x80045317L)

//
// MessageId: PP_E_CPO_DELETEBLOCKED
//
// MessageText:
//
//  Delete has been blocked by a PreDelete callback. (hr=%1)
//
#define PP_E_CPO_DELETEBLOCKED           ((HRESULT)0x80045318L)

//
// MessageId: PP_E_CPO_VALIDATION_FAILED
//
// MessageText:
//
//  Validation failed for an object. (hr=%1)
//
#define PP_E_CPO_VALIDATION_FAILED       ((HRESULT)0x80045319L)

//
// MessageId: PP_E_CPO_INVALID_CATEGORY
//
// MessageText:
//
//  Invalid category to provision.  Object is not PROVISIONED catgeory. (hr=%1)
//
#define PP_E_CPO_INVALID_CATEGORY        ((HRESULT)0x8004531AL)

//
// MessageId: PP_E_CPO_PROPERTY_MARKED_FOR_DELETE
//
// MessageText:
//
//  Current property is marked for deletion. (hr=%1)
//
#define PP_E_CPO_PROPERTY_MARKED_FOR_DELETE ((HRESULT)0x8004531BL)

// base 0x5350
//------------------------------------------------------------------------------
// ProvisionedEntity Error Codes
//------------------------------------------------------------------------------
#define PP_E_PROVENT_BASE 0x5350
//
// MessageId: PP_E_PROVENT_XMLERR_ATTR_NOT_FOUND
//
// MessageText:
//
//  A required XML attribute was not found. (hr=%1)
//
#define PP_E_PROVENT_XMLERR_ATTR_NOT_FOUND ((HRESULT)0x80045350L)

//
// MessageId: PP_E_PROVENT_SITE_NAME_NOT_VALID_ID
//
// MessageText:
//
//  Site name is not numeric, less than 1, or greater than INT_MAX.  It must be numeric and fit in a signed 32bit value to be valid. (hr=%1)
//
#define PP_E_PROVENT_SITE_NAME_NOT_VALID_ID ((HRESULT)0x80045351L)

//
// MessageId: PP_E_PROVENT_POLICYGROUP_NOT_PRESENT
//
// MessageText:
//
//  Requested PolicyGroup is not present (hr=%1)
//
#define PP_E_PROVENT_POLICYGROUP_NOT_PRESENT ((HRESULT)0x80045352L)

//
// MessageId: PP_E_PROVENT_CANT_MERGE_PROPERTIES
//
// MessageText:
//
//  Cannot merge the requested properties.  There is likely some incompatability. (hr=%1)
//
#define PP_E_PROVENT_CANT_MERGE_PROPERTIES ((HRESULT)0x80045353L)

//
// MessageId: PP_E_PROVENT_OBJ_UNEXPECTED_TYPE
//
// MessageText:
//
//  Object of unexpected type. (hr=%1)
//
#define PP_E_PROVENT_OBJ_UNEXPECTED_TYPE ((HRESULT)0x80045354L)

//
// MessageId: PP_E_PROVENT_OBJ_NOT_STRINGTABLE
//
// MessageText:
//
//  Expecting a StringTable object; did not get one. (hr=%1)
//
#define PP_E_PROVENT_OBJ_NOT_STRINGTABLE ((HRESULT)0x80045355L)

//
// MessageId: PP_E_PROVENT_OBJ_NOT_REQUIREDPROPS
//
// MessageText:
//
//  Expecting a RequiredProperties object; did not get one. (hr=%1)
//
#define PP_E_PROVENT_OBJ_NOT_REQUIREDPROPS ((HRESULT)0x80045356L)

//
// MessageId: PP_E_PROVENT_OBJ_NOT_SITE
//
// MessageText:
//
//  Expecting a Site object; did not get one. (hr=%1)
//
#define PP_E_PROVENT_OBJ_NOT_SITE        ((HRESULT)0x80045357L)

//
// MessageId: PP_E_PROVENT_OBJ_NOT_POLICYGROUP
//
// MessageText:
//
//  Expecting a PolicyGroup object; did not get one. (hr=%1)
//
#define PP_E_PROVENT_OBJ_NOT_POLICYGROUP ((HRESULT)0x80045358L)

//
// MessageId: PP_E_PROVENT_PROPCOLLECTION_EMPTY
//
// MessageText:
//
//  PropertyCollection is empty (hr=%1)
//
#define PP_E_PROVENT_PROPCOLLECTION_EMPTY ((HRESULT)0x80045359L)

//
// MessageId: PP_E_PROVENT_PROPERTYDEF_NOTYPEDATANODE
//
// MessageText:
//
//  The PropertyDef object does not have a TypeData node (hr=%1)
//
#define PP_E_PROVENT_PROPERTYDEF_NOTYPEDATANODE ((HRESULT)0x8004535AL)

//
// MessageId: PP_E_PROVENT_PROPERTYDEF_DATE_INVALIDDATE
//
// MessageText:
//
//  Type Validation - Date - Invalid date format. (hr=%1)
//
#define PP_E_PROVENT_PROPERTYDEF_DATE_INVALIDDATE ((HRESULT)0x8004535BL)

//
// MessageId: PP_E_PROVENT_PROPERTYDEF_NUMCOMPONENTID_INCORRECT
//
// MessageText:
//
//  The number of component property IDs for this property definition does not match the type specification. (hr=%1)
//
#define PP_E_PROVENT_PROPERTYDEF_NUMCOMPONENTID_INCORRECT ((HRESULT)0x8004535CL)

//
// MessageId: PP_E_PROVENT_PROPERTYDEF_COMPONENTPROPID_INVALID
//
// MessageText:
//
//  One or more of the component property IDs is invalid. (hr=%1)
//
#define PP_E_PROVENT_PROPERTYDEF_COMPONENTPROPID_INVALID ((HRESULT)0x8004535DL)

//
// MessageId: PP_E_PROVENT_PROPERTYDEF_NOTYPEDATA
//
// MessageText:
//
//  The PropertyDef does not have any TypeData (hr=%1)
//
#define PP_E_PROVENT_PROPERTYDEF_NOTYPEDATA ((HRESULT)0x8004535EL)

//
// MessageId: PP_E_PROVENT_PROPERTYDEF_CANNOT_CHANGE_PROPID
//
// MessageText:
//
//  You cannot change the PropertyID of an existing PropertyDef (hr=%1)
//
#define PP_E_PROVENT_PROPERTYDEF_CANNOT_CHANGE_PROPID ((HRESULT)0x8004535FL)

//
// MessageId: PP_E_PROVENT_PROPERTYDEF_PROPID_USED
//
// MessageText:
//
//  The requested PropertyID or component PropertyID is already used. (hr=%1)
//
#define PP_E_PROVENT_PROPERTYDEF_PROPID_USED ((HRESULT)0x80045360L)

//
// MessageId: PP_E_PROVENT_PROPERTYDEF_INVALIDCOMPONENTINDEX
//
// MessageText:
//
//  Looking for a component ID that is out of range with what this type should have. (hr=%1)
//
#define PP_E_PROVENT_PROPERTYDEF_INVALIDCOMPONENTINDEX ((HRESULT)0x80045361L)

//
// MessageId: PP_E_PROVENT_PROPERTYDEF_NAMEINVALID
//
// MessageText:
//
//  The name of the requested PropertyDef is invalid. (hr=%1)
//
#define PP_E_PROVENT_PROPERTYDEF_NAMEINVALID ((HRESULT)0x80045362L)

//
// MessageId: PP_E_PROVENT_STRINGTABLE_NOT_PRESENT
//
// MessageText:
//
//  StringTable is not present for a given object. (hr=%1)
//
#define PP_E_PROVENT_STRINGTABLE_NOT_PRESENT ((HRESULT)0x80045363L)

//
// MessageId: PP_E_PROVENT_PROPERTY_ID_NOT_EXIST
//
// MessageText:
//
//  PropertyID does not exist (hr=%1)
//
#define PP_E_PROVENT_PROPERTY_ID_NOT_EXIST ((HRESULT)0x80045364L)

//
// MessageId: PP_E_PROVENT_PROPERTY_UNKNOWN_TYPE
//
// MessageText:
//
//  Property is of an unknown or unsupported type. (hr=%1)
//
#define PP_E_PROVENT_PROPERTY_UNKNOWN_TYPE ((HRESULT)0x80045365L)

//
// MessageId: PP_E_PROVENT_OBJ_BADPOINTER
//
// MessageText:
//
//  Bad pointer in ProvisionedEntity code (hr=%1)
//
#define PP_E_PROVENT_OBJ_BADPOINTER      ((HRESULT)0x80045366L)

//
// MessageId: PP_E_PROVENT_OBJ_GETGLOBALCACHE
//
// MessageText:
//
//  Unable to get a pointer to the CCMCache (hr=%1)
//
#define PP_E_PROVENT_OBJ_GETGLOBALCACHE  ((HRESULT)0x80045367L)

//
// MessageId: PP_E_PROVENT_NAMESPACE_NOT_PRESENT
//
// MessageText:
//
//  Referenced NameSpace object is not present (hr=%1)
//
#define PP_E_PROVENT_NAMESPACE_NOT_PRESENT ((HRESULT)0x80045368L)

//
// MessageId: PP_E_PROVENT_OBJ_GETPARENTID
//
// MessageText:
//
//  Error getting object parent CCM ID. (hr=%1)
//
#define PP_E_PROVENT_OBJ_GETPARENTID     ((HRESULT)0x80045369L)

//
// MessageId: PP_E_PROVENT_CACERT_NOTFOUND
//
// MessageText:
//
//  CA Certificate was not found in CCM.  (hr=%1)
//
#define PP_E_PROVENT_CACERT_NOTFOUND     ((HRESULT)0x8004536AL)

//
// MessageId: PP_E_PROVENT_CANT_GENERATE_ID_FOR_NON_PROFILE
//
// MessageText:
//
//  Cannot generate a PropertyID for a property that is not of Profile type. (hr=%1)
//
#define PP_E_PROVENT_CANT_GENERATE_ID_FOR_NON_PROFILE ((HRESULT)0x8004536BL)

//
// MessageId: PP_E_PROVENT_XMLNS_CCM_NOTINITIALIZED
//
// MessageText:
//
//  CCM library is not initialized
//
#define PP_E_PROVENT_XMLNS_CCM_NOTINITIALIZED ((HRESULT)0x8004536CL)

//
// MessageId: PP_E_PROVENT_XMLNS_CCMNAME_INVALID
//
// MessageText:
//
//  The property name returned by CCM Cache is invalid
//
#define PP_E_PROVENT_XMLNS_CCMNAME_INVALID ((HRESULT)0x8004536DL)

//
// MessageId: PP_E_PROVENT_XMLNS_CCMSAFEARRAY_INVALID
//
// MessageText:
//
//  The safe array returned by CCM Cache is invalid
//
#define PP_E_PROVENT_XMLNS_CCMSAFEARRAY_INVALID ((HRESULT)0x8004536EL)

//
// MessageId: PP_E_PROVENT_XMLNS_CCMVALUE_INVALID
//
// MessageText:
//
//  The value returned by CCM Cache is invalid
//
#define PP_E_PROVENT_XMLNS_CCMVALUE_INVALID ((HRESULT)0x8004536FL)

//
// MessageId: PP_E_PROVENT_XMLNS_PROP_NOTFOUND
//
// MessageText:
//
//  CCM property not found
//
#define PP_E_PROVENT_XMLNS_PROP_NOTFOUND ((HRESULT)0x80045370L)

//
// MessageId: PP_E_PROVENT_XMLNS_CCMOBJECT_INVALID
//
// MessageText:
//
//  Invalid pointer to ICCMObject
//
#define PP_E_PROVENT_XMLNS_CCMOBJECT_INVALID ((HRESULT)0x80045371L)

//
// MessageId: PP_E_PROVENT_XMLNS_CCMCACHE_INVALID
//
// MessageText:
//
//  Invalid pointer to ICCMCache
//
#define PP_E_PROVENT_XMLNS_CCMCACHE_INVALID ((HRESULT)0x80045372L)

//
// MessageId: PP_E_PROVENT_XMLNS_CCMID_INVALID
//
// MessageText:
//
//  Invalid ccm identifier
//
#define PP_E_PROVENT_XMLNS_CCMID_INVALID ((HRESULT)0x80045373L)

//
// MessageId: PP_E_PROVENT_XMLNS_EMPTYCOLLECTION
//
// MessageText:
//
//  The CCM Cached schema object contains no XML schemas
//
#define PP_E_PROVENT_XMLNS_EMPTYCOLLECTION ((HRESULT)0x80045374L)

//
// MessageId: PP_E_PROVENT_XMLNS_INVALIDENTRY
//
// MessageText:
//
//  The CCM Cached schema contains an invalid entry
//
#define PP_E_PROVENT_XMLNS_INVALIDENTRY  ((HRESULT)0x80045375L)

//
// MessageId: PP_E_PROVENT_CLOGSUBSCRIPTION_NOTFOUND
//
// MessageText:
//
//  Cannot find the requested CLog subscription
//
#define PP_E_PROVENT_CLOGSUBSCRIPTION_NOTFOUND ((HRESULT)0x80045376L)

//
// MessageId: PP_E_PROVENT_CLOGSUBSCRIPTION_NAMEINVALID
//
// MessageText:
//
//  Invalid name for a CLog subscription
//
#define PP_E_PROVENT_CLOGSUBSCRIPTION_NAMEINVALID ((HRESULT)0x80045377L)

//------------------------------------------------------------------------------
// Provisioned Property Rendering Engine Error Codes
//------------------------------------------------------------------------------
#define PP_E_PROVPROPERTY_RENDER_BASE                  PP_E_PROVENT_BASE + 0x30
//
// MessageId: PP_E_PROVPROPERTY_RENDER_ITERATORNOTINIT
//
// MessageText:
//
//  Iterator not initialized. (hr=%1)
//
#define PP_E_PROVPROPERTY_RENDER_ITERATORNOTINIT ((HRESULT)0x80045380L)

//
// MessageId: PP_E_PROVPROPERTY_RENDER_NOCOLL
//
// MessageText:
//
//  No property collection to iterate over. (hr=%1)
//
#define PP_E_PROVPROPERTY_RENDER_NOCOLL  ((HRESULT)0x80045381L)

//
// MessageId: PP_E_PROVPROPERTY_RENDER_BADFILTER
//
// MessageText:
//
//  Bad iterator filter specified on the PropertyCollection. (hr=%1)
//
#define PP_E_PROVPROPERTY_RENDER_BADFILTER ((HRESULT)0x80045382L)

//
// MessageId: PP_E_PROVPROPERTY_RENDER_INCORRECT_FIELD_TYPE
//
// MessageText:
//
//  Incorrect Property type. (hr=%1)
//
#define PP_E_PROVPROPERTY_RENDER_INCORRECT_FIELD_TYPE ((HRESULT)0x80045383L)

//
// MessageId: PP_E_PROVPROPERTY_RENDER_TWOTOUACCEPTANCE
//
// MessageText:
//
//  Two or more TOUAcceptance blocks; error. (hr=%1)
//
#define PP_E_PROVPROPERTY_RENDER_TWOTOUACCEPTANCE ((HRESULT)0x80045384L)

//
// MessageId: PP_E_PROVPROPERTY_RENDER_TWOPROPERTYSTAR
//
// MessageText:
//
//  Two or more Property* node in the PageData. (hr=%1)
//
#define PP_E_PROVPROPERTY_RENDER_TWOPROPERTYSTAR ((HRESULT)0x80045385L)

//------------------------------------------------------------------------------
// Provisioned Property Validation Error Codes
//------------------------------------------------------------------------------
#define PP_E_PROVPROPERTY_VALIDATE_BASE  PP_E_PROVPROPERTY_RENDER_BASE + 0x20
//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_USE_SINGLE_VALIDATE
//
// MessageText:
//
//  Calling the wrong Validate function; call the single property validate. (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_USE_SINGLE_VALIDATE ((HRESULT)0x800453A0L)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_USE_COMPOUND_VALIDATE
//
// MessageText:
//
//  Calling the wrong Validate function; call the compound property validate. (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_USE_COMPOUND_VALIDATE ((HRESULT)0x800453A1L)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_INTEGER_NOTNUMERIC
//
// MessageText:
//
//  Type Validation - Integer - Value is not numeric. (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_INTEGER_NOTNUMERIC ((HRESULT)0x800453A2L)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_INTEGER_NOTINT
//
// MessageText:
//
//  Type Validation - Integer - Value is not an integer. (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_INTEGER_NOTINT ((HRESULT)0x800453A3L)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_INTEGER_TOOLOW
//
// MessageText:
//
//  Type Validation - Integer - Value is too low. (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_INTEGER_TOOLOW ((HRESULT)0x800453A4L)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_INTEGER_TOOHIGH
//
// MessageText:
//
//  Type Validation - Integer - Value is too high. (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_INTEGER_TOOHIGH ((HRESULT)0x800453A5L)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_FLOAT_NOTNUMERIC
//
// MessageText:
//
//  Type Validation - Float - Value is not numeric. (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_FLOAT_NOTNUMERIC ((HRESULT)0x800453A6L)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_FLOAT_TOOLOW
//
// MessageText:
//
//  Type Validation - Float - Value is too low. (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_FLOAT_TOOLOW ((HRESULT)0x800453A7L)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_FLOAT_TOOHIGH
//
// MessageText:
//
//  Type Validation - Float - Value is too high. (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_FLOAT_TOOHIGH ((HRESULT)0x800453A8L)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_STRING_TOOSHORT
//
// MessageText:
//
//  Type Validation - String - Too Short. (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_STRING_TOOSHORT ((HRESULT)0x800453A9L)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_STRING_TOOLONG
//
// MessageText:
//
//  Type Validation - String - Too Long. (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_STRING_TOOLONG ((HRESULT)0x800453AAL)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_LIST_INVALID
//
// MessageText:
//
//  Type Validation - List - Invalid Entry. (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_LIST_INVALID ((HRESULT)0x800453ABL)

//
// MessageId: PP_E_COMPONENT_NAME_MISSING
//
// MessageText:
//
//  Component name missing. (hr=%1)
//
#define PP_E_COMPONENT_NAME_MISSING      ((HRESULT)0x800453ACL)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_LOCATION_STREET_BLANK
//
// MessageText:
//
//  Type Validation - Location - Street is blank (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_LOCATION_STREET_BLANK ((HRESULT)0x800453ADL)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_LOCATION_COUNTY_BLANK
//
// MessageText:
//
//  Type Validation - Location - County is blank (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_LOCATION_COUNTY_BLANK ((HRESULT)0x800453AEL)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_LOCATION_CITY_BLANK
//
// MessageText:
//
//  Type Validation - Location - City is blank (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_LOCATION_CITY_BLANK ((HRESULT)0x800453AFL)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_LOCATION_COUNTY_INVALID
//
// MessageText:
//
//  Type Validation - Location - County is invalid (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_LOCATION_COUNTY_INVALID ((HRESULT)0x800453B0L)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_LOCATION_NICKNAME_NOT_ALLOWED
//
// MessageText:
//
//  Type Validation - Location - Nickname is not supported in this location (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_LOCATION_NICKNAME_NOT_ALLOWED ((HRESULT)0x800453B1L)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_PHONENUM_INVALID
//
// MessageText:
//
//  Type Validation - Phone Number - Invalid (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_PHONENUM_INVALID ((HRESULT)0x800453B2L)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_DATE_MISSING
//
// MessageText:
//
//  Type Validation - Date - Missing (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_DATE_MISSING ((HRESULT)0x800453B3L)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_DATE_YEAR_MISSING
//
// MessageText:
//
//  Type Validation - Date - Year Missing (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_DATE_YEAR_MISSING ((HRESULT)0x800453B4L)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_DATE_YEAR_INVALID_CHARS
//
// MessageText:
//
//  Type Validation - Date - Year contains invalid chars (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_DATE_YEAR_INVALID_CHARS ((HRESULT)0x800453B5L)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_DATE_YEAR_NOT_4DIGIT
//
// MessageText:
//
//  Type Validation - Date - Year is not 4 digits (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_DATE_YEAR_NOT_4DIGIT ((HRESULT)0x800453B6L)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_DATE_MONTH_MISSING
//
// MessageText:
//
//  Type Validation - Date - Month Missing (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_DATE_MONTH_MISSING ((HRESULT)0x800453B7L)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_DATE_MONTH_INVALID
//
// MessageText:
//
//  Type Validation - Date - Month is Invalid (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_DATE_MONTH_INVALID ((HRESULT)0x800453B8L)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_DATE_DAY_MISSING
//
// MessageText:
//
//  Type Validation - Date - Day Missing (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_DATE_DAY_MISSING ((HRESULT)0x800453B9L)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_DATE_DAY_INVALID
//
// MessageText:
//
//  Type Validation - Date - Day is Invalid (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_DATE_DAY_INVALID ((HRESULT)0x800453BAL)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_DATE_INVALID
//
// MessageText:
//
//  Type Validation - Date - Invalid (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_DATE_INVALID ((HRESULT)0x800453BBL)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_DATE_TOOLOW
//
// MessageText:
//
//  Type Validation - Date - Too far in past (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_DATE_TOOLOW ((HRESULT)0x800453BCL)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_DATE_TOOHIGH
//
// MessageText:
//
//  Type Validation - Date - Too far in future (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_DATE_TOOHIGH ((HRESULT)0x800453BDL)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_DATE_IN_FUTURE
//
// MessageText:
//
//  Type Validation - Date - In Future - Not Allowed (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_DATE_IN_FUTURE ((HRESULT)0x800453BEL)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_DATE_IN_PAST
//
// MessageText:
//
//  Type Validation - Date - In Past - Not Allowed (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_DATE_IN_PAST ((HRESULT)0x800453BFL)

//
// MessageId: PP_E_PROVPROPERTY_VALIDATE_CHECKBOX_INVALID
//
// MessageText:
//
//  Type Validation - Checkbox - Invalid value (hr=%1)
//
#define PP_E_PROVPROPERTY_VALIDATE_CHECKBOX_INVALID ((HRESULT)0x800453C0L)

//
// MessageId: PP_E_PROVPROPERTY_LOCATION_MISSINGVALIDATION
//
// MessageText:
//
//  A component of location is missing validation rules (hr=%1)
//
#define PP_E_PROVPROPERTY_LOCATION_MISSINGVALIDATION ((HRESULT)0x800453C1L)

//
// MessageId: PP_E_PROVPROPERTY_LONGITUDEOUTOFRANGE
//
// MessageText:
//
//  longitude must be between -180 and 180 (hr=%1)
//
#define PP_E_PROVPROPERTY_LONGITUDEOUTOFRANGE ((HRESULT)0x800453C2L)

//
// MessageId: PP_E_PROVPROPERTY_LATITUDEOUTOFRANGE
//
// MessageText:
//
//  latitude must be between -90 and 90 (hr=%1)
//
#define PP_E_PROVPROPERTY_LATITUDEOUTOFRANGE ((HRESULT)0x800453C3L)

//------------------------------------------------------------------------------
// Provisioned Entity for site certs
//------------------------------------------------------------------------------
#define PP_E_PROVENT_SITECERT_BASE PP_E_PROVPROPERTY_VALIDATE_BASE + 0x30                    
//
// MessageId: PP_E_PROVENT_CCMCERT_BADFMT
//
// MessageText:
//
//  The certificate parsing code failed to find a required field in the certificate during conversion from external to internal XML format.
//
#define PP_E_PROVENT_CCMCERT_BADFMT      ((HRESULT)0x800453D0L)

//
// MessageId: PP_E_PROVENT_CCMCERT_NULLSITENAME
//
// MessageText:
//
//  The certificate provisioning code into CCM failed to retrieve the name for the parent object. This parent object could be a partner site, partner CA or trusted realm.
//
#define PP_E_PROVENT_CCMCERT_NULLSITENAME ((HRESULT)0x800453D1L)

//
// MessageId: PP_E_PROVENT_CCMCERT_NODATA
//
// MessageText:
//
//  The certificate provisioning code into CCM did not find a value for the certificate, name of the certificate, encoding type or IsCurrent flag.
//
#define PP_E_PROVENT_CCMCERT_NODATA      ((HRESULT)0x800453D2L)

//
// MessageId: PP_E_PROVENT_CCMCERT_ADDPROP_BADARG
//
// MessageText:
//
//  The certificate provisioning code into CCM detected an invalid value when converting from the external XML to internal XML formats.
//
#define PP_E_PROVENT_CCMCERT_ADDPROP_BADARG ((HRESULT)0x800453D3L)

//
// MessageId: PP_E_PROVENT_CCMCERT_FMT_NULLDOMNODE
//
// MessageText:
//
//  The certificate provisioning code into CCM failed to create an XML node when converting from the external XML to internal XML formats.
//
#define PP_E_PROVENT_CCMCERT_FMT_NULLDOMNODE ((HRESULT)0x800453D4L)

//
// MessageId: PP_E_PROVENT_CCMCERT_NO_SITENAME
//
// MessageText:
//
//  The certificate provisioning code into CCM could not find the name for the site or CA Partner to generate a unique name for the certificate.
//
#define PP_E_PROVENT_CCMCERT_NO_SITENAME ((HRESULT)0x800453D5L)

//
// MessageId: PP_E_PROVENT_SITECERT_VALIDATE_UNEXPECTED
//
// MessageText:
//
//  The initialization step was not completed during the certificate provisioning code into CCM.
//
#define PP_E_PROVENT_SITECERT_VALIDATE_UNEXPECTED ((HRESULT)0x800453D6L)

//
// MessageId: PP_E_PROVENT_CCMCERT_GET_EMPTYPROP
//
// MessageText:
//
//  There is no value in a retrieved site, CA partner or trusted realm certificate property.
//
#define PP_E_PROVENT_CCMCERT_GET_EMPTYPROP ((HRESULT)0x800453D7L)

//
// MessageId: PP_E_PROVENT_SITECERT_UNEXPECTED
//
// MessageText:
//
//  The base64 encoded certificate was not loaded. This is an internal error.
//
#define PP_E_PROVENT_SITECERT_UNEXPECTED ((HRESULT)0x800453D8L)

//
// MessageId: PP_E_PROVENT_CCMCERT_GETPROP_UNEXPECTED
//
// MessageText:
//
//  The base64 encoded certificate was already loaded. This is an internal error.
//
#define PP_E_PROVENT_CCMCERT_GETPROP_UNEXPECTED ((HRESULT)0x800453D9L)

//
// MessageId: PP_E_PROVENT_CCMCERT_NOPROPNODE
//
// MessageText:
//
//  Unexpected NULL DOM node pointer detected when removing derived certificate property for exporting from CCM.
//
#define PP_E_PROVENT_CCMCERT_NOPROPNODE  ((HRESULT)0x800453DAL)

//
// MessageId: PP_E_PROVENT_CCMCERT_BAD_ENCODING
//
// MessageText:
//
//  The encoding type is invalid. Only ASN.1 (1) is supported.
//
#define PP_E_PROVENT_CCMCERT_BAD_ENCODING ((HRESULT)0x800453DBL)

//
// MessageId: PP_E_PROVENT_CCMCERT_ADD_CERTNAME
//
// MessageText:
//
//  The certificate provisioning code into CCM failed to retrieve the name node for a site, CA partner or trusted realm certificate.
//
#define PP_E_PROVENT_CCMCERT_ADD_CERTNAME ((HRESULT)0x800453DCL)

//
// MessageId: PP_E_PROVENT_CCMCERT_BAD_CERTDATA
//
// MessageText:
//
//  The certificate provisioning code into CCM detected bad data type.
//
#define PP_E_PROVENT_CCMCERT_BAD_CERTDATA ((HRESULT)0x800453DDL)

//
// MessageId: PP_E_PROVENT_CCMCERT_PROPUNINIT
//
// MessageText:
//
//  The certificate provisioning code into CCM detected wrong sequence of operations: certificate was not loaded for generating DB properties.
//
#define PP_E_PROVENT_CCMCERT_PROPUNINIT  ((HRESULT)0x800453DEL)

//
// MessageId: PP_E_PROVENT_CACERT_MISSINGPROPS
//
// MessageText:
//
//  The certificate name or data is missing during provisioning of CA certificate into CCM.
//
#define PP_E_PROVENT_CACERT_MISSINGPROPS ((HRESULT)0x800453DFL)

//
// MessageId: PP_E_PROVENT_SITECERT_MISSINGPROPS
//
// MessageText:
//
//  The certificate name or data is missing during provisioning of site certificate into CCM.
//
#define PP_E_PROVENT_SITECERT_MISSINGPROPS ((HRESULT)0x800453E0L)

//
// MessageId: PP_E_PROVENT_CACERT_BADISSUEDCERT
//
// MessageText:
//
//  The certificate provisioning code in CCM failed to verify signature of CA certificate. This could be due to bad or corrupted certificate.
//
#define PP_E_PROVENT_CACERT_BADISSUEDCERT ((HRESULT)0x800453E1L)

//
// MessageId: PP_E_PROVENT_CACERT_EMPTYCDP
//
// MessageText:
//
//  The certificate provisioning code in CCM failed to verify signature of CA certificate. This could be due to missing CDP in the CA certificate.
//
#define PP_E_PROVENT_CACERT_EMPTYCDP     ((HRESULT)0x800453E2L)

//
// MessageId: PP_E_PROVENT_CACERT_BADCDP
//
// MessageText:
//
//  The provisioning code in CCM failed to create a CRL object. This could be due to bad or corrupted CDP in the CA certificate.
//
#define PP_E_PROVENT_CACERT_BADCDP       ((HRESULT)0x800453E3L)

//
// MessageId: PP_E_PROVENT_CACERT_EMPTYFRESHESTCRL
//
// MessageText:
//
//  The provisioning code in CCM failed to create a CRL object. This could be due to missing freshest CRL in the CA certificate.
//
#define PP_E_PROVENT_CACERT_EMPTYFRESHESTCRL ((HRESULT)0x800453E4L)

//
// MessageId: PP_E_PROVENT_CACERT_ISSUEDCERTNODE
//
// MessageText:
//
//  The CA certificate provisioning code failed to remove the <CACertificate_IssuedCertificate> after creating the CDP object in CCM.
//
#define PP_E_PROVENT_CACERT_ISSUEDCERTNODE ((HRESULT)0x800453E5L)

//
// MessageId: PP_E_PROVENT_CCMCERT_NO_AKI
//
// MessageText:
//
//  The certificate provisioning code did not find the AUTHORITY_KEY_IDENTIFIER2 in the certificate.
//
#define PP_E_PROVENT_CCMCERT_NO_AKI      ((HRESULT)0x800453E6L)

//------------------------------------------------------------------------------
// Wrapper class for site certs
//------------------------------------------------------------------------------
#define PP_E_SITECERTS_BASE    PP_E_PROVENT_SITECERT_BASE + 0x20  
//
// MessageId: PP_E_SITECERTS_BADSITENAMELENGTH
//
// MessageText:
//
//  The name parent object retrieved from CCM for the site certificate to be removed is empty.
//
#define PP_E_SITECERTS_BADSITENAMELENGTH ((HRESULT)0x800453F1L)

//
// MessageId: PP_E_SITECERTS_BADCERTID
//
// MessageText:
//
//  The instance ID in CCM for the site certificate that is being removed is invalid.
//
#define PP_E_SITECERTS_BADCERTID         ((HRESULT)0x800453F2L)

//
// MessageId: PP_E_SITECERTS_BADCERTNAMELENGTH
//
// MessageText:
//
//  The site certificate that is either being inserted or made current has a name longer than 256 characters.
//
#define PP_E_SITECERTS_BADCERTNAMELENGTH ((HRESULT)0x800453F3L)

//
// MessageId: PP_E_SITECERTS_REPLACEMENT_CERT
//
// MessageText:
//
//  The site certificate that is replacing the current certificate is already current.
//
#define PP_E_SITECERTS_REPLACEMENT_CERT  ((HRESULT)0x800453F4L)

//
// MessageId: PP_E_SITECERTS_REPLACEMENT_CERT_NOTFOUND
//
// MessageText:
//
//  No non-current certificate is found to replace the current certificate.
//
#define PP_E_SITECERTS_REPLACEMENT_CERT_NOTFOUND ((HRESULT)0x800453F5L)

//
// MessageId: PP_E_SITECERTS_SEARCH_CRITERIA
//
// MessageText:
//
//  An invalid search criteria for site/CA partner/trusted realm certificates was detected
//
#define PP_E_SITECERTS_SEARCH_CRITERIA   ((HRESULT)0x800453F6L)

//
// MessageId: PP_E_SITECERT_NOTFOUND
//
// MessageText:
//
//  The site/CA partner/trusted realm certificate with the given name cannot be found.
//
#define PP_E_SITECERT_NOTFOUND           ((HRESULT)0x800453F7L)

//
// MessageId: PP_E_SITECERTS_TOOMANY_SUBOBJECTS
//
// MessageText:
//
//  There are more than 256 sub objects including certificates for the site.
//
#define PP_E_SITECERTS_TOOMANY_SUBOBJECTS ((HRESULT)0x800453F8L)

//
// MessageId: PP_W_SITECERTS_REMOVE_INCOMPLETE
//
// MessageText:
//
//  The specified certificate could not be deleted. However, it is no longer current. The replacement certificate or the first non-current certificate has been made current.
//
#define PP_W_SITECERTS_REMOVE_INCOMPLETE ((HRESULT)0x800453F9L)

//
// MessageId: PP_E_SITECERTS_CURRENT_CERT_EXISTS
//
// MessageText:
//
//  There is already a current certificate on the requested site.  This must be made non-current before inserting a new current certificate.
//
#define PP_E_SITECERTS_CURRENT_CERT_EXISTS ((HRESULT)0x800453FAL)

//
// MessageId: PP_E_SITECERTS_TOO_MANY_CURRENT_CERTS
//
// MessageText:
//
//  There are more than one current certs of the specified algorithm.  This is an error state; please cleanup CCM.
//
#define PP_E_SITECERTS_TOO_MANY_CURRENT_CERTS ((HRESULT)0x800453FBL)

//
// MessageId: PP_E_SITECERTS_EXISTING_CERT_WITH_SAME_NAME
//
// MessageText:
//
//  There already exists a certificate with the same name as the one being inserted.
//
#define PP_E_SITECERTS_EXISTING_CERT_WITH_SAME_NAME ((HRESULT)0x800453FCL)

//
// MessageId: PP_E_SITECERTS_CANNOT_RENAME_CERT
//
// MessageText:
//
//  The certificate being inserted already exists with a different name.
//
#define PP_E_SITECERTS_CANNOT_RENAME_CERT ((HRESULT)0x800453FDL)

//------------------------------------------------------------------------------
// CRL provisioning
//------------------------------------------------------------------------------
#define PP_E_PROVENT_CRL_BASE  PP_E_PROVENT_SITECERT_BASE + 0x10  = PP_E_PROVENT_BASE + 0xB0
//
// MessageId: PP_E_PROVENT_CRL_NOPROP
//
// MessageText:
//
//  A NULL XML DOM node pointer was detected while provisioning a CRL into CCM.
//
#define PP_E_PROVENT_CRL_NOPROP          ((HRESULT)0x80045400L)

//
// MessageId: PP_E_PROVENT_CRL_NOCACERT
//
// MessageText:
//
//  No parent (CA Certificate) object was found in CCM for the given CRL.
//
#define PP_E_PROVENT_CRL_NOCACERT        ((HRESULT)0x80045401L)

//
// MessageId: PP_E_PROVENT_CRL_EMPTYVALUE
//
// MessageText:
//
//  Invalid XML stream was detected during the provisioning of a CRL object into CCM.
//
#define PP_E_PROVENT_CRL_EMPTYVALUE      ((HRESULT)0x80045402L)

//
// MessageId: PP_E_PROVENT_CRL_TYPE_UNEXPECTED
//
// MessageText:
//
//  An invalid internal type was detected when provisioning a CRL type into CCM.
//
#define PP_E_PROVENT_CRL_TYPE_UNEXPECTED ((HRESULT)0x80045403L)

//
// MessageId: PP_E_PROVENT_CRLINFO_BADLENGTH
//
// MessageText:
//
//  The base64 ASN.1 encoded CRL resulted in an empty string during provisioning of a CRL object into CCM.
//
#define PP_E_PROVENT_CRLINFO_BADLENGTH   ((HRESULT)0x80045404L)

//
// MessageId: PP_E_PROVENT_CRLINFO_BADTIME
//
// MessageText:
//
//  The next update or current time on the CRL is bad.
//
#define PP_E_PROVENT_CRLINFO_BADTIME     ((HRESULT)0x80045405L)

//
// MessageId: PP_E_PROVENT_CRLINFO_NUMBER
//
// MessageText:
//
//  No CRL number was found during provisioning of a CRL into CCM.
//
#define PP_E_PROVENT_CRLINFO_NUMBER      ((HRESULT)0x80045406L)

//
// MessageId: PP_E_PROVENT_CRL_NOKEY
//
// MessageText:
//
//  The CRL provisioning failed to generate a name for the CRL object.
//
#define PP_E_PROVENT_CRL_NOKEY           ((HRESULT)0x80045407L)

//
// MessageId: PP_E_PROVENT_CRL_NODERIVEDPROP
//
// MessageText:
//
//  The CRL provisioning failed because it could not find one or more of CRL number, base number, this or next update time.
//
#define PP_E_PROVENT_CRL_NODERIVEDPROP   ((HRESULT)0x80045408L)

//
// MessageId: PP_E_PROVENT_CRL_HASDERIVEDPROP
//
// MessageText:
//
//  The XML to provision a CRL object is invalid; there are one or more of CRL number, base number, this or next update time.
//
#define PP_E_PROVENT_CRL_HASDERIVEDPROP  ((HRESULT)0x80045409L)

//
// MessageId: PP_E_PROVENT_CRL_XML
//
// MessageText:
//
//  An invalid XML was detected while provisioning a CRL object into CCM.
//
#define PP_E_PROVENT_CRL_XML             ((HRESULT)0x8004540AL)

//
// MessageId: PP_E_PROVENT_CRL_NOCACERTNAME
//
// MessageText:
//
//  The parent object (CA partner certificate) for a CRL object in CCM does not have a name in CCM.
//
#define PP_E_PROVENT_CRL_NOCACERTNAME    ((HRESULT)0x8004540BL)

//
// MessageId: PP_E_PROVENT_CRL_BADID
//
// MessageText:
//
//  The CRL object in CCM has an invalid instance id.
//
#define PP_E_PROVENT_CRL_BADID           ((HRESULT)0x8004540CL)

//
// MessageId: PP_E_PROVENT_CRL_NOTFOUND
//
// MessageText:
//
//  No CRL object was found in CCM for the given name. (The name is derived from the CDP.)
//
#define PP_E_PROVENT_CRL_NOTFOUND        ((HRESULT)0x8004540DL)

//
// MessageId: PP_E_PROVENT_CRL_TOOMANY
//
// MessageText:
//
//  More than 8 CRL objects with the given name was found. (The name is derived from the CDP.)
//
#define PP_E_PROVENT_CRL_TOOMANY         ((HRESULT)0x8004540EL)

//------------------------------------------------------------------------------
// CA Partner
//------------------------------------------------------------------------------
#define PP_E_PROVENT_CAPARTNER_BASE   PP_E_PROVENT_CRL_BASE + 0x10 = PP_E_PROVENT_BASE + 0xC0                            
//
// MessageId: PP_E_PROVENT_CAPARTNER_GET_EMPTYPROP
//
// MessageText:
//
//  A property for a CA partner object in CCM has no value. This property could be the certificate name, data, thumbprint, subject key identifier, or authority key identifier.
//
#define PP_E_PROVENT_CAPARTNER_GET_EMPTYPROP ((HRESULT)0x80045410L)

//
// MessageId: PP_E_COMPONENT_NAME_NOT_SPECIFIED
//
// MessageText:
//
//  A value was given for a compound property without specifying the component name.
//
#define PP_E_COMPONENT_NAME_NOT_SPECIFIED ((HRESULT)0x80045411L)

// base 0x5500
//
// MessageId: PP_E_HIP_INVALID_CONFIG
//
// MessageText:
//
//  HIP - Invalid HIP Configuration
//
#define PP_E_HIP_INVALID_CONFIG          ((HRESULT)0x80045500L)

//
// MessageId: PP_E_HIP_IMAGE_CONFIGSTR_PARSE_ERR
//
// MessageText:
//
//  HIP - Error parsing the HIPImage configuration string
//
#define PP_E_HIP_IMAGE_CONFIGSTR_PARSE_ERR ((HRESULT)0x80045501L)

//
// MessageId: PP_E_HIP_CACHE_MISSING
//
// MessageText:
//
//  HIP - Cache is missing
//
#define PP_E_HIP_CACHE_MISSING           ((HRESULT)0x80045502L)

//
// MessageId: PP_E_HIP_CACHE_ERROR
//
// MessageText:
//
//  HIP - Cache error
//
#define PP_E_HIP_CACHE_ERROR             ((HRESULT)0x80045503L)

//
// MessageId: PP_E_HIP_VALIDATION_ERROR
//
// MessageText:
//
//  HIP - Validation Error
//
#define PP_E_HIP_VALIDATION_ERROR        ((HRESULT)0x80045504L)

//
// MessageId: PP_E_HIP_VALIDATION_WRONG
//
// MessageText:
//
//  HIP Validation - Solution was incorrect
//
#define PP_E_HIP_VALIDATION_WRONG        ((HRESULT)0x80045505L)

//
// MessageId: PP_E_HIP_NOAUDIO
//
// MessageText:
//
//  HIP - This server does not support HIP Audio
//
#define PP_E_HIP_NOAUDIO                 ((HRESULT)0x80045506L)

//
// MessageId: PP_E_HIP_AUDIO_NOTINIT
//
// MessageText:
//
//  HIP - HIP Audio has not yet been initialized
//
#define PP_E_HIP_AUDIO_NOTINIT           ((HRESULT)0x80045507L)

//
// MessageId: PP_E_HIP_MINIMAL_COOKIE
//
// MessageText:
//
//  HIP - We have a minimal cookie when we expected the full one.
//
#define PP_E_HIP_MINIMAL_COOKIE          ((HRESULT)0x80045508L)

//
// MessageId: PP_E_HIP_AUDIO_BAD_REVERBLEN
//
// MessageText:
//
//  HIP Audio - Bad Reverb Length; expect > 0
//
#define PP_E_HIP_AUDIO_BAD_REVERBLEN     ((HRESULT)0x80045509L)

//
// MessageId: PP_E_HIP_AUDIO_BAD_SNR
//
// MessageText:
//
//  HIP Audio - Bad SignalToNoise Ratio; expect > 0
//
#define PP_E_HIP_AUDIO_BAD_SNR           ((HRESULT)0x8004550AL)

//
// MessageId: PP_E_HIP_GDIPLUS_ERROR
//
// MessageText:
//
//  HIP - GDI Plus Failed to Initialize Corbuirectly
//
#define PP_E_HIP_GDIPLUS_ERROR           ((HRESULT)0x8004550BL)

//
// MessageId: PP_E_HIP_IMAGE_VALIDCHARS_TOO_LONG
//
// MessageText:
//
//  HIP - List of valid chars is too long
//
#define PP_E_HIP_IMAGE_VALIDCHARS_TOO_LONG ((HRESULT)0x8004550CL)

//
// MessageId: PP_E_HIP_IMAGE_VALIDCHARS_TOO_SHORT
//
// MessageText:
//
//  HIP - List of valid chars is too short (< 10)
//
#define PP_E_HIP_IMAGE_VALIDCHARS_TOO_SHORT ((HRESULT)0x8004550DL)

//
// MessageId: PP_E_HIP_SIGNATURE_BASE64FAIL
//
// MessageText:
//
//  HIP Signatures - Base 64 Encoding Failed
//
#define PP_E_HIP_SIGNATURE_BASE64FAIL    ((HRESULT)0x8004550EL)

//
// MessageId: PP_E_HIP_DISABLED_UNKNOWN
//
// MessageText:
//
//  HIP - Disabled (Reason Unknown)
//
#define PP_E_HIP_DISABLED_UNKNOWN        ((HRESULT)0x8004550FL)

//
// MessageId: PP_E_HIP_DISABLED_SERVER
//
// MessageText:
//
//  HIP - Disabled on this Server
//
#define PP_E_HIP_DISABLED_SERVER         ((HRESULT)0x80045510L)

//
// MessageId: PP_E_HIP_DISABLED_APPLICATION
//
// MessageText:
//
//  HIP - Disabled.  Requested Application is not allowed on this server.
//
#define PP_E_HIP_DISABLED_APPLICATION    ((HRESULT)0x80045511L)

//
// MessageId: PP_E_HIP_TEST_INJECTED_ERROR
//
// MessageText:
//
//  HIP - TEST Fault Injection
//
#define PP_E_HIP_TEST_INJECTED_ERROR     ((HRESULT)0x80045512L)

// base 0x5601
//
// MessageId: PP_E_SOFTAUTH_FAILED
//
// MessageText:
//
//  Soft auth failed.
//
#define PP_E_SOFTAUTH_FAILED             ((HRESULT)0x80045601L)

// base 0x5700
// Errors
#define PP_E_ROLLINGUPGRADE_BASE  0x5700
//
// MessageId: PP_E_CURRENTRELEASETOOLONG
//
// MessageText:
//
//  Current release string too long
//
#define PP_E_CURRENTRELEASETOOLONG       ((HRESULT)0x80045700L)

//
// MessageId: PP_E_NEWRELEASETOOLONG
//
// MessageText:
//
//  New release string too long
//
#define PP_E_NEWRELEASETOOLONG           ((HRESULT)0x80045701L)

//
// MessageId: PP_E_NOROLUP_SETTINGS
//
// MessageText:
//
//  Rolling upgrade state is missing or can't be initialized
//
#define PP_E_NOROLUP_SETTINGS            ((HRESULT)0x80045703L)

//
// MessageId: PP_E_WRONG_MACHINESTATE
//
// MessageText:
//
//  Machine state is wrong
//
#define PP_E_WRONG_MACHINESTATE          ((HRESULT)0x80045704L)

//
// MessageId: PP_E_CURRENTRELEASE_MUSTBEDIGITS
//
// MessageText:
//
//  Current release string must contain only digits
//
#define PP_E_CURRENTRELEASE_MUSTBEDIGITS ((HRESULT)0x80045705L)

//
// MessageId: PP_E_NEWRELEASE_MUSTBEDIGITS
//
// MessageText:
//
//  New release string must contain only digits
//
#define PP_E_NEWRELEASE_MUSTBEDIGITS     ((HRESULT)0x80045706L)

//
// MessageId: PP_E_NO_PERFCOUNTER
//
// MessageText:
//
//  Can not initialize rolling upgrade perf counters
//
#define PP_E_NO_PERFCOUNTER              ((HRESULT)0x80045709L)

//
// MessageId: PP_E_NO_OSFILEMALFORMED
//
// MessageText:
//
//  File path is mal-formatted
//
#define PP_E_NO_OSFILEMALFORMED          ((HRESULT)0x8004570AL)

//
// MessageId: PP_E_NO_CURRENTRELEASE
//
// MessageText:
//
//  current release is not specified
//
#define PP_E_NO_CURRENTRELEASE           ((HRESULT)0x8004570BL)

//
// MessageId: PP_E_NO_NEWRELEASE
//
// MessageText:
//
//  New release is not specified
//
#define PP_E_NO_NEWRELEASE               ((HRESULT)0x8004570CL)

//
// MessageId: PP_E_RU_INVALIDURLMAPPING
//
// MessageText:
//
//  New release is not specified
//
#define PP_E_RU_INVALIDURLMAPPING        ((HRESULT)0x8004570DL)

// base 0x5750
// Errors
// MOBILE_TICKET_ERROR_BASE
//
// MessageId: PP_E_MOBILE_KEY_GEN_FAIL
//
// MessageText:
//
//  Failed to generate the mobile key.
//
#define PP_E_MOBILE_KEY_GEN_FAIL         ((HRESULT)0x80045750L)

//
// MessageId: PP_E_MOBILE_KEY_INVALID_KEY_DATA
//
// MessageText:
//
//  The mobile key being inserted has invalid format or invalid data.
//
#define PP_E_MOBILE_KEY_INVALID_KEY_DATA ((HRESULT)0x80045751L)

//
// MessageId: PP_E_MOBILE_KEY_DECRYPT_FAIL
//
// MessageText:
//
//  Failed to decrypt the mobile key data encrypted with passport certificate.
//
#define PP_E_MOBILE_KEY_DECRYPT_FAIL     ((HRESULT)0x80045752L)

//
// MessageId: PP_E_MOBILE_KEY_EXISTING_KEY_WITH_SAME_NAME
//
// MessageText:
//
//  There already exists a mobile key with the same name as the one being inserted.
//
#define PP_E_MOBILE_KEY_EXISTING_KEY_WITH_SAME_NAME ((HRESULT)0x80045753L)

//
// MessageId: PP_E_MOBILE_KEY_CANNOT_RENAME
//
// MessageText:
//
//  The mobile key being inserted already exists with a different name.
//
#define PP_E_MOBILE_KEY_CANNOT_RENAME    ((HRESULT)0x80045754L)

//
// MessageId: PP_E_MOBILE_KEY_BAD_KEY_NAME_LENGTH
//
// MessageText:
//
//  The site mobile key that is either being inserted or made current has a name longer than 256 characters.
//
#define PP_E_MOBILE_KEY_BAD_KEY_NAME_LENGTH ((HRESULT)0x80045755L)

//
// MessageId: PP_E_MOBILE_KEY_CURRENT_KEY_EXISTS
//
// MessageText:
//
//  There is already a current mobile key on the requested site. This must be made non-current before inserting a new current mobile key.
//
#define PP_E_MOBILE_KEY_CURRENT_KEY_EXISTS ((HRESULT)0x80045756L)

//
// MessageId: PP_E_MOBILE_KEY_NOTFOUND
//
// MessageText:
//
//  The site mobile key with the given name cannot be found.
//
#define PP_E_MOBILE_KEY_NOTFOUND         ((HRESULT)0x80045757L)

//
// MessageId: PP_E_MOBILE_KEY_REPLACEMENT_NOTFOUND
//
// MessageText:
//
//  No non-current mobile key is found to replace the current mobile key.
//
#define PP_E_MOBILE_KEY_REPLACEMENT_NOTFOUND ((HRESULT)0x80045758L)

//
// MessageId: PP_E_MOBIL_KEY_BAD_CCMID
//
// MessageText:
//
//  The instance ID in CCM for the site mobile key that is being removed is invalid.
//
#define PP_E_MOBIL_KEY_BAD_CCMID         ((HRESULT)0x80045759L)

//
// MessageId: PP_W_MOBILE_KEY_REMOVE_INCOMPLETE
//
// MessageText:
//
//  The specified mobile key could not be deleted. However, it is no longer current. The replacement mobile key or the first non-current mobile key has been made current.
//
#define PP_W_MOBILE_KEY_REMOVE_INCOMPLETE ((HRESULT)0x8004575AL)

//
// MessageId: PP_E_MOBILE_KEY_MISSING
//
// MessageText:
//
//  There is no current mobile key found for the site, which is required to have encrypted mobile ticket.
//
#define PP_E_MOBILE_KEY_MISSING          ((HRESULT)0x8004575BL)

//
// MessageId: PP_E_MOBILE_TICKET_AUTH_POLICY_NOT_SUPPORTED
//
// MessageText:
//
//  The mobile ticket auth policy used in the login request is not supported for this protocol or the version of RPS.
//
#define PP_E_MOBILE_TICKET_AUTH_POLICY_NOT_SUPPORTED ((HRESULT)0x8004575CL)

//
// MessageId: PP_E_MOBILE_KEY_INVALID_KEY_NAME
//
// MessageText:
//
//  The site mobile key that is either being inserted or made current has a name that contains unsupported characters.
//
#define PP_E_MOBILE_KEY_INVALID_KEY_NAME ((HRESULT)0x8004575DL)

// base 0x5800
//
// MessageId: PP_E_MOBILECREDS_PHONENUMBER_INVALID
//
// MessageText:
//
//  Phone number in mobile credential is not valid (Shorter than 4 digits or non-digit charater present).
//
#define PP_E_MOBILECREDS_PHONENUMBER_INVALID ((HRESULT)0x80045800L)

//
// MessageId: PP_E_MOBILECREDS_PHONENUMBER_BLANK
//
// MessageText:
//
//  Phone number in mobile credential is blank.
//
#define PP_E_MOBILECREDS_PHONENUMBER_BLANK ((HRESULT)0x80045801L)

//
// MessageId: PP_E_MOBILECREDS_PHONENUMBER_EXIST
//
// MessageText:
//
//  Mobile credential for the phone number already exists.
//
#define PP_E_MOBILECREDS_PHONENUMBER_EXIST ((HRESULT)0x80045802L)

//
// MessageId: PP_E_MOBILECREDS_PIN_BLANK
//
// MessageText:
//
//  Mobile pin in the mobile credential is blank.
//
#define PP_E_MOBILECREDS_PIN_BLANK       ((HRESULT)0x80045803L)

//
// MessageId: PP_E_MOBILECREDS_PIN_MISMATCH
//
// MessageText:
//
//  Mobile pin does not match.
//
#define PP_E_MOBILECREDS_PIN_MISMATCH    ((HRESULT)0x80045804L)

//
// MessageId: PP_E_MOBILECREDS_PIN_INVALID
//
// MessageText:
//
//  Mobile pin in mobile credential is not valid (Shorter than 4 digits, longer than 16 or non-digit charater present).
//
#define PP_E_MOBILECREDS_PIN_INVALID     ((HRESULT)0x80045805L)

//
// MessageId: PP_E_MOBILECREDS_PHONENUMBER_TOOSHORT
//
// MessageText:
//
//  Mobile phone in mobile credential is too short.
//
#define PP_E_MOBILECREDS_PHONENUMBER_TOOSHORT ((HRESULT)0x80045806L)

//
// MessageId: PP_E_MOBILECREDS_PHONENUMBER_TOOLONG
//
// MessageText:
//
//  Mobile phone in mobile credential is too long.
//
#define PP_E_MOBILECREDS_PHONENUMBER_TOOLONG ((HRESULT)0x80045807L)

//
// MessageId: PP_E_PHONE_CONTAINS_PIN
//
// MessageText:
//
//  The phone number contains the pin.
//
#define PP_E_PHONE_CONTAINS_PIN          ((HRESULT)0x80045808L)

// base 0x5850
//
// MessageId: PP_E_MOBILEREG_INVALID_SITEID
//
// MessageText:
//
//  Invalid site id passed to mobile registration. Make sure muid is one in the allowed list.
//
#define PP_E_MOBILEREG_INVALID_SITEID    ((HRESULT)0x80045850L)

//
// MessageId: PP_E_MOBILEREG_ALREADY_LOGGED_IN
//
// MessageText:
//
//  User already signed in before registration.
//
#define PP_E_MOBILEREG_ALREADY_LOGGED_IN ((HRESULT)0x80045851L)

//
// MessageId: PP_E_MOBILEREG_MISSING_HIPDATA
//
// MessageText:
//
//  Hip data missing in the mobile registration post.
//
#define PP_E_MOBILEREG_MISSING_HIPDATA   ((HRESULT)0x80045852L)

//
// MessageId: PP_E_MOBILEREG_MISSING_TOU_VERSION
//
// MessageText:
//
//  TOU version missing or less than 1 in the mobile registration post.
//
#define PP_E_MOBILEREG_MISSING_TOU_VERSION ((HRESULT)0x80045855L)

//
// MessageId: PP_E_MOBILEREG_INVALID_DOMAIN
//
// MessageText:
//
//  Invalid domain for the mobile registration post.
//
#define PP_E_MOBILEREG_INVALID_DOMAIN    ((HRESULT)0x80045856L)

//
// MessageId: PP_E_MOBILEREG_INVALID_ALT_EMAIL
//
// MessageText:
//
//  Alternate email address is invalid in the mobile registration post.
//
#define PP_E_MOBILEREG_INVALID_ALT_EMAIL ((HRESULT)0x80045857L)

//
// MessageId: PP_E_MOBILEREG_INVALID_HIPDATA
//
// MessageText:
//
//  Invalid Hip data in the mobile registration post.
//
#define PP_E_MOBILEREG_INVALID_HIPDATA   ((HRESULT)0x80045858L)

//
// MessageId: PP_E_MOBILEREG_MISSING_HIPTIME
//
// MessageText:
//
//  Hip time missing in the hip data for the mobile registration post.
//
#define PP_E_MOBILEREG_MISSING_HIPTIME   ((HRESULT)0x80045859L)

//
// MessageId: PP_E_MOBILEREG_HIP_TIMEOUT
//
// MessageText:
//
//  Hip time out for the mobile registration post.
//
#define PP_E_MOBILEREG_HIP_TIMEOUT       ((HRESULT)0x80045860L)

//
// MessageId: PP_E_MOBILEREG_INVALIDREGFLAG
//
// MessageText:
//
//  MobileReg flag is not set in the hip data for the mobile registration post.
//
#define PP_E_MOBILEREG_INVALIDREGFLAG    ((HRESULT)0x80045861L)

//
// MessageId: PP_E_MOBILEREG_INVALID_HIPID
//
// MessageText:
//
//  Invliad HIP ID (Not all digits or 0) in the hip data for the mobile registration post.
//
#define PP_E_MOBILEREG_INVALID_HIPID     ((HRESULT)0x80045862L)

//
// MessageId: PP_E_MOBILEREG_MISSING_HIPID
//
// MessageText:
//
//  HIP ID missing in the hip data for the mobile registration post.
//
#define PP_E_MOBILEREG_MISSING_HIPID     ((HRESULT)0x80045863L)

//
// MessageId: PP_E_MOBILEREG_USED_HIPID
//
// MessageText:
//
//  HIP ID already used in the hip data for the mobile registration post.
//
#define PP_E_MOBILEREG_USED_HIPID        ((HRESULT)0x80045864L)

// base 0x5900
//
// MessageId: PP_E_INTERNALTOKEN_MALFORMED_ISSUE_TIME
//
// MessageText:
//
//  The issue time in the pin reset request is invalid.
//
#define PP_E_INTERNALTOKEN_MALFORMED_ISSUE_TIME ((HRESULT)0x80045900L)

//
// MessageId: PP_E_INTERNALTOKEN_UNEXPECTED_LENGTH
//
// MessageText:
//
//  The length of the answers for pin reset request is bad.
//
#define PP_E_INTERNALTOKEN_UNEXPECTED_LENGTH ((HRESULT)0x80045901L)

//
// MessageId: PP_E_INTERNALTOKEN_MISSING_FIELD
//
// MessageText:
//
//  The issue time, expire time or question/answer in the pin reset request is missing or bad.
//
#define PP_E_INTERNALTOKEN_MISSING_FIELD ((HRESULT)0x80045902L)

//
// MessageId: PP_E_INTERNALTOKEN_EXPIRED
//
// MessageText:
//
//  The pin reset request contains data that have expired.
//
#define PP_E_INTERNALTOKEN_EXPIRED       ((HRESULT)0x80045903L)

// base 0x5b00
//
// MessageId: PP_E_AUTHPOLICY_NOTFOUND
//
// MessageText:
//
//  The partner policy used in the login request cannot be found as a property of "AuthPolicyXml" property type under the object "AuthPolicyHolder" in CCM, or the certificate for this partner site cannot be found in CCM.
//
#define PP_E_AUTHPOLICY_NOTFOUND         ((HRESULT)0x80045B00L)

//
// MessageId: PP_E_INVALID_AUTHPOLICY
//
// MessageText:
//
//  The XML describing the partner policy in the login request cannot be parsed.
//
#define PP_E_INVALID_AUTHPOLICY          ((HRESULT)0x80045B01L)

//
// MessageId: PP_E_INVALID_SITE_DNS
//
// MessageText:
//
//  The partner DNS used in the login request cannot be found.
//
#define PP_E_INVALID_SITE_DNS            ((HRESULT)0x80045B02L)

// base 0x5c00
//
// MessageId: PP_E_STS_REQUEST_NOTSUPPORTED
//
// MessageText:
//
//  STS request type not supported (Only http://schemas.xmlsoap.org/ws/2004/04/security/trust/Issue supported).
//
#define PP_E_STS_REQUEST_NOTSUPPORTED    ((HRESULT)0x80045C00L)

//
// MessageId: PP_E_STS_INVALID_REQUEST
//
// MessageText:
//
//  Invalid STS request.
//
#define PP_E_STS_INVALID_REQUEST         ((HRESULT)0x80045C01L)

//
// MessageId: PP_E_WEBSSO_SERVICE_REFERRAL
//
// MessageText:
//
//  Referral not supported (Only http://Passport.NET/tb supported).
//
#define PP_E_WEBSSO_SERVICE_REFERRAL     ((HRESULT)0x80045C02L)

//
// MessageId: PP_E_WEBSSO_INVALID_REQUEST
//
// MessageText:
//
//  Invalid WebSSO request, either user name is empty or request not over SSL.
//
#define PP_E_WEBSSO_INVALID_REQUEST      ((HRESULT)0x80045C03L)

//
// MessageId: PP_E_WEBSSO_REQUEST_BADXML
//
// MessageText:
//
//  UNUSED: This error code is not used anymore.
//
#define PP_E_WEBSSO_REQUEST_BADXML       ((HRESULT)0x80045C04L)

//
// MessageId: PP_E_WEBSSO_ASSERTION_MISMATCH
//
// MessageText:
//
//  UNUSED: This error code is not used anymore.
//
#define PP_E_WEBSSO_ASSERTION_MISMATCH   ((HRESULT)0x80045C05L)

//
// MessageId: PP_E_WEBSSO_EXPIRED_TOKEN
//
// MessageText:
//
//  WebSSO token expired.
//
#define PP_E_WEBSSO_EXPIRED_TOKEN        ((HRESULT)0x80045C06L)

//
// MessageId: PP_E_WEBSSO_FORCEDSIGNIN_NEEDED
//
// MessageText:
//
//  Forced signin required.
//
#define PP_E_WEBSSO_FORCEDSIGNIN_NEEDED  ((HRESULT)0x80045C07L)

//
// MessageId: PP_E_WEBSSO_PASSWORDAUTH_NEEDED
//
// MessageText:
//
//  Password authentication required.
//
#define PP_E_WEBSSO_PASSWORDAUTH_NEEDED  ((HRESULT)0x80045C08L)

//
// MessageId: PP_E_WEBSSO_PINAUTH_NEEDED
//
// MessageText:
//
//  Pin authentication required.
//
#define PP_E_WEBSSO_PINAUTH_NEEDED       ((HRESULT)0x80045C09L)

//
// MessageId: PP_E_WEBSSO_CERTAUTH_NEEDED
//
// MessageText:
//
//  Certificate authentication required.
//
#define PP_E_WEBSSO_CERTAUTH_NEEDED      ((HRESULT)0x80045C0AL)

//
// MessageId: PP_E_WEBSSO_STONGERCREDS_NEEDED
//
// MessageText:
//
//  Strong credential authentication required.
//
#define PP_E_WEBSSO_STONGERCREDS_NEEDED  ((HRESULT)0x80045C0BL)

//
// MessageId: PP_E_STS_SIGALGORITHM_NOTSUPPORTED
//
// MessageText:
//
//  Alogrithm not supported (Only http://www.w3.org/2000/09/xmldsig#rsa-sha1 supported).
//
#define PP_E_STS_SIGALGORITHM_NOTSUPPORTED ((HRESULT)0x80045C0CL)

//
// MessageId: PP_E_WEBSSO_TOKENTYPE_MISMATCH
//
// MessageText:
//
//  WebSSO Token type mismatch (Either Passport 1.4 or GXA V1 allowed).
//
#define PP_E_WEBSSO_TOKENTYPE_MISMATCH   ((HRESULT)0x80045C0DL)

//
// MessageId: PP_E_BASE64ENCODE_FAILED
//
// MessageText:
//
//  Failed to do base64 encoding.
//
#define PP_E_BASE64ENCODE_FAILED         ((HRESULT)0x80045C0EL)

//
// MessageId: PP_E_BASE64DECODE_FAILED
//
// MessageText:
//
//  Failed to do base64 decoding.
//
#define PP_E_BASE64DECODE_FAILED         ((HRESULT)0x80045C0FL)

//
// MessageId: PP_E_WEBSSO_INVALID_TIME
//
// MessageText:
//
//  Time format is invalid.
//
#define PP_E_WEBSSO_INVALID_TIME         ((HRESULT)0x80045C10L)

//
// MessageId: PP_E_WEBSSO_REQUEST_TOOLARGE
//
// MessageText:
//
//  UNUSED: This error code is not used anymore.
//
#define PP_E_WEBSSO_REQUEST_TOOLARGE     ((HRESULT)0x80045C11L)

//
// MessageId: PP_E_WEBSSO_CORRUPTED_ASSERTION
//
// MessageText:
//
//  Invalid WebSSO assertion.
//
#define PP_E_WEBSSO_CORRUPTED_ASSERTION  ((HRESULT)0x80045C12L)

//
// MessageId: PP_E_STS_INVALID_SECONDARY_CREDTYPE
//
// MessageText:
//
//  UNUSED: This error code is not used anymore.
//
#define PP_E_STS_INVALID_SECONDARY_CREDTYPE ((HRESULT)0x80045C13L)

//
// MessageId: PP_E_STS_BAD_SECONDARY_CRED
//
// MessageText:
//
//  UNUSED: This error code is not used anymore.
//
#define PP_E_STS_BAD_SECONDARY_CRED      ((HRESULT)0x80045C14L)

//
// MessageId: PP_E_WEBSSO_CORRUPTED_SESSION_KEY
//
// MessageText:
//
//  WebSSO session key invalid.
//
#define PP_E_WEBSSO_CORRUPTED_SESSION_KEY ((HRESULT)0x80045C15L)

//
// MessageId: PP_E_INVALID_ASSERTION
//
// MessageText:
//
//  WebSSO invalid assertion.
//
#define PP_E_INVALID_ASSERTION           ((HRESULT)0x80045C17L)

//
// MessageId: PP_E_STS_PARTNER_NOT_FOUND
//
// MessageText:
//
//  STS partner not found.
//
#define PP_E_STS_PARTNER_NOT_FOUND       ((HRESULT)0x80045C18L)

//
// MessageId: PP_E_STS_PARTNER_DOES_NOT_HAVE_CERT
//
// MessageText:
//
//  STS partner do not have a certificate provisioned.
//
#define PP_E_STS_PARTNER_DOES_NOT_HAVE_CERT ((HRESULT)0x80045C19L)

//
// MessageId: PP_E_STS_INVALID_POLICY
//
// MessageText:
//
//  STS invalid policy.
//
#define PP_E_STS_INVALID_POLICY          ((HRESULT)0x80045C1AL)

//
// MessageId: PP_E_STS_PROFILE_ACCRUE_REDIR
//
// MessageText:
//
//  Profile accural redirect.
//
#define PP_E_STS_PROFILE_ACCRUE_REDIR    ((HRESULT)0x80045C1BL)

//
// MessageId: PP_E_PROXYSTS_INVALID_REQ_TIMEWINDOW
//
// MessageText:
//
//  The encrypted proxy auth request timewindow has expired or invalide.
//
#define PP_E_PROXYSTS_INVALID_REQ_TIMEWINDOW ((HRESULT)0x80045C1CL)

//
// MessageId: PP_E_PROXYSTS_INVALID_PASSWORD_HASH
//
// MessageText:
//
//  Invalid password (hash) in the encrypted proxy auth request.
//
#define PP_E_PROXYSTS_INVALID_PASSWORD_HASH ((HRESULT)0x80045C1DL)

//
// MessageId: PP_E_PROXYSTS_INVALID_REQUEST
//
// MessageText:
//
//  Invalid encrypted proxy auth request.
//
#define PP_E_PROXYSTS_INVALID_REQUEST    ((HRESULT)0x80045C1EL)

//
// MessageId: PP_E_PROXYSTS_EXCEEDED_REQUEST_LIMIT
//
// MessageText:
//
//  Invalid encrypted proxy auth request.
//
#define PP_E_PROXYSTS_EXCEEDED_REQUEST_LIMIT ((HRESULT)0x80045C1FL)

//
// MessageId: PP_E_PROXYSTS_INVALID_RSA_ENCRYPTION_KEY
//
// MessageText:
//
//  Invalid encrypted proxy auth request.
//
#define PP_E_PROXYSTS_INVALID_RSA_ENCRYPTION_KEY ((HRESULT)0x80045C20L)

//
// MessageId: PP_E_PROXYSTS_UNEXPECTED_FAILURE
//
// MessageText:
//
//  An unexpect failure has occurred.
//
#define PP_E_PROXYSTS_UNEXPECTED_FAILURE ((HRESULT)0x80045C21L)

//
// MessageId: PP_E_PARTNERPUBLICKEY_JSCRIPT_HEADERERROR
//
// MessageText:
//
//  Public key blob failed in signature verification
//
#define PP_E_PARTNERPUBLICKEY_JSCRIPT_HEADERERROR ((HRESULT)0x80045C22L)

// base 0x5e00
//CCM Cache client errors
//#define PP_E_CCMCACHE_BASE  0x5e00
//
// MessageId: PP_E_CCM_INSTANCENOTEXIST
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_INSTANCENOTEXIST        ((HRESULT)0x80045E00L)

//
// MessageId: PP_E_CCM_PROPERTYNOTEXIST
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_PROPERTYNOTEXIST        ((HRESULT)0x80045E01L)

//
// MessageId: PP_E_CCM_OBJECTTYPENOTEXIST
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_OBJECTTYPENOTEXIST      ((HRESULT)0x80045E02L)

//
// MessageId: PP_E_CCM_CACHEITEMNOTEXIST
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_CACHEITEMNOTEXIST       ((HRESULT)0x80045E03L)

//
// MessageId: PP_E_CCM_ENTITYNAMENOTEXIST
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_ENTITYNAMENOTEXIST      ((HRESULT)0x80045E04L)

//
// MessageId: PP_E_CCM_INSTANCENOTINITIALIZED
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_INSTANCENOTINITIALIZED  ((HRESULT)0x80045E05L)

//
// MessageId: PP_E_CCM_PROPERTYNOTINITIALIZED
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_PROPERTYNOTINITIALIZED  ((HRESULT)0x80045E06L)

//
// MessageId: PP_E_CCM_PROPERTYTYPENOTEXIST
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_PROPERTYTYPENOTEXIST    ((HRESULT)0x80045E07L)

//
// MessageId: PP_E_CCM_PROPERTYTYPEINVALID
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_PROPERTYTYPEINVALID     ((HRESULT)0x80045E08L)

//
// MessageId: PP_E_CCM_PROPERTYVALUEINVALID
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_PROPERTYVALUEINVALID    ((HRESULT)0x80045E09L)

//
// MessageId: PP_E_CCM_RELATIONSHIPVALUEINVALID
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_RELATIONSHIPVALUEINVALID ((HRESULT)0x80045E0AL)

//
// MessageId: PP_E_CCM_OBJTYPEID_NOT_FOUND
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_OBJTYPEID_NOT_FOUND     ((HRESULT)0x80045E0BL)

//
// MessageId: PP_E_CCM_INSTANCECACHE_NULL
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_INSTANCECACHE_NULL      ((HRESULT)0x80045E0CL)

//
// MessageId: PP_E_CCM_INSTANCE_NULL
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_INSTANCE_NULL           ((HRESULT)0x80045E0DL)

//
// MessageId: PP_E_CCM_NOTINITIALIZED
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_NOTINITIALIZED          ((HRESULT)0x80045E0EL)

//
// MessageId: PP_E_CCM_PROPERTYBAGINVALID
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_PROPERTYBAGINVALID      ((HRESULT)0x80045E0FL)

//
// MessageId: PP_E_CCM_INVALIDPROGID
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_INVALIDPROGID           ((HRESULT)0x80045E10L)

//
// MessageId: PP_E_CCM_RELEASEENTRY
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_RELEASEENTRY            ((HRESULT)0x80045E11L)

//
// MessageId: PP_E_CCM_ADDREFENTRY
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_ADDREFENTRY             ((HRESULT)0x80045E12L)

//
// MessageId: PP_E_CCM_OBJINSTANCEEXISTS
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_OBJINSTANCEEXISTS       ((HRESULT)0x80045E13L)

//
// MessageId: PP_E_CCM_OBJINSTANCECONFLICT
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_OBJINSTANCECONFLICT     ((HRESULT)0x80045E14L)

//
// MessageId: PP_E_CCM_ENTITYIDNOTEXIST
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_ENTITYIDNOTEXIST        ((HRESULT)0x80045E15L)

//
// MessageId: PP_E_CCM_RENAMEINSTANCENOTEFFECTIVE
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_RENAMEINSTANCENOTEFFECTIVE ((HRESULT)0x80045E16L)

//
// MessageId: PP_E_CCM_INVALIDOBJTYPEXML
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_INVALIDOBJTYPEXML       ((HRESULT)0x80045E17L)

//
// MessageId: PP_E_CCM_INVALIDBLOB
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_INVALIDBLOB             ((HRESULT)0x80045E18L)

//
// MessageId: PP_E_CCM_INVALIDDATE
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_INVALIDDATE             ((HRESULT)0x80045E19L)

//
// MessageId: PP_E_CCMINVALIDRELATIONSHIPVALUE
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCMINVALIDRELATIONSHIPVALUE ((HRESULT)0x80045E1AL)

//
// MessageId: PP_E_CCM_PROPERTYVALUENULL
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_PROPERTYVALUENULL       ((HRESULT)0x80045E1BL)

//
// MessageId: PP_E_CCM_SERVICENAMENOTEXIST
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_SERVICENAMENOTEXIST     ((HRESULT)0x80045E1CL)

//
// MessageId: PP_E_CCM_INVALIDMACHINEID
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_INVALIDMACHINEID        ((HRESULT)0x80045E1DL)

//
// MessageId: PP_E_CCM_FILETRNOTFOUND
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_FILETRNOTFOUND          ((HRESULT)0x80045E1EL)

//
// MessageId: PP_E_CCM_MAXFILTERSEXCEEDED
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_MAXFILTERSEXCEEDED      ((HRESULT)0x80045E1FL)

//
// MessageId: PP_E_CCM_FILTERNOTINITIALIZED
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//  
//
#define PP_E_CCM_FILTERNOTINITIALIZED    ((HRESULT)0x80045E20L)

//
// MessageId: PP_E_CCM_FILTERAREADYEXIST
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//  
//  
//
#define PP_E_CCM_FILTERAREADYEXIST       ((HRESULT)0x80045E21L)

//
// MessageId: PP_E_CCM_INVALIDFILTERPROPID
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_INVALIDFILTERPROPID     ((HRESULT)0x80045E22L)

//
// MessageId: PP_E_CCM_FILTER_NULL
//
// MessageText:
//
//  Service temporarily unavailable due to internal CCM Component error (hr=%1), please try later.
//
#define PP_E_CCM_FILTER_NULL             ((HRESULT)0x80045E23L)

//
// MessageId: PP_E_CCM_RELEASE_SET
//
// MessageText:
//
//  SetRelease() can only be called once
//
#define PP_E_CCM_RELEASE_SET             ((HRESULT)0x80045E24L)

//
// MessageId: PP_E_CCM_MACHINEID_SET
//
// MessageText:
//
//  SetMachineID() can only be called once
//
#define PP_E_CCM_MACHINEID_SET           ((HRESULT)0x80045E25L)

//
// MessageId: PP_E_CCM_INVALIDNOTIFICATION
//
// MessageText:
//
//  the notification data is invalid
//
#define PP_E_CCM_INVALIDNOTIFICATION     ((HRESULT)0x80045E26L)

// base 0x5f00
//
// MessageId: PP_E_SCHED_NAMEBUFFER_TOOSMALL
//
// MessageText:
//
//  Name buffer is too small
//
#define PP_E_SCHED_NAMEBUFFER_TOOSMALL   ((HRESULT)0x80045F00L)

//
// MessageId: PP_E_SCHED_NOCONFIG_PROPS
//
// MessageText:
//
//  No configuration properties for PPScheduler
//
#define PP_E_SCHED_NOCONFIG_PROPS        ((HRESULT)0x80045F01L)

//
// MessageId: PP_E_SCHED_TIMESERVER_INVALIDPROP
//
// MessageText:
//
//  Invalid property for time server
//
#define PP_E_SCHED_TIMESERVER_INVALIDPROP ((HRESULT)0x80045F02L)

//
// MessageId: PP_E_SCHED_WORKITEM_EXISTS
//
// MessageText:
//
//  Duplicate workitem
//
#define PP_E_SCHED_WORKITEM_EXISTS       ((HRESULT)0x80045F03L)

//
// MessageId: PP_E_SCHED_TASKID_INVALID
//
// MessageText:
//
//  The task id is invalid
//
#define PP_E_SCHED_TASKID_INVALID        ((HRESULT)0x80045F04L)

//
// MessageId: PP_E_SCHED_TASKSTARTTIME_INVALID
//
// MessageText:
//
//  The task start time is invalid
//
#define PP_E_SCHED_TASKSTARTTIME_INVALID ((HRESULT)0x80045F05L)

//
// MessageId: PP_E_SCHED_TASKENDTIME_INVALID
//
// MessageText:
//
//  The task end time is invalid
//
#define PP_E_SCHED_TASKENDTIME_INVALID   ((HRESULT)0x80045F06L)

//
// MessageId: PP_E_SCHED_TASKTIMEOFDAY_INVALID
//
// MessageText:
//
//  The task time-of-day is invalid
//
#define PP_E_SCHED_TASKTIMEOFDAY_INVALID ((HRESULT)0x80045F07L)

//
// MessageId: PP_E_SCHED_TASKLASTRUN_INVALID
//
// MessageText:
//
//  The task last run is invalid
//
#define PP_E_SCHED_TASKLASTRUN_INVALID   ((HRESULT)0x80045F08L)

//
// MessageId: PP_E_SCHED_TASKCOMMANDXML_INVALID
//
// MessageText:
//
//  The task command xml is invalid
//
#define PP_E_SCHED_TASKCOMMANDXML_INVALID ((HRESULT)0x80045F09L)

//
// MessageId: PP_E_SCHED_TASKPROGID_INVALID
//
// MessageText:
//
//  The task progid is invalid
//
#define PP_E_SCHED_TASKPROGID_INVALID    ((HRESULT)0x80045F0AL)

//
// MessageId: PP_E_SCHED_TASKMAXOCCUR_EXCEEDED
//
// MessageText:
//
//  The task max oocurences is invalid
//
#define PP_E_SCHED_TASKMAXOCCUR_EXCEEDED ((HRESULT)0x80045F0CL)

//
// MessageId: PP_E_SCHED_TASK_EXPIRED
//
// MessageText:
//
//  The task expired
//
#define PP_E_SCHED_TASK_EXPIRED          ((HRESULT)0x80045F0DL)

//
// MessageId: PP_E_SCHED_TASKRECURRINGTIME_INVALID
//
// MessageText:
//
//  The task recurring time is invalid
//
#define PP_E_SCHED_TASKRECURRINGTIME_INVALID ((HRESULT)0x80045F0EL)

//
// MessageId: PP_E_SCHED_WORKITEM_NOTFOUND
//
// MessageText:
//
//  Workitem doesn't exist
//
#define PP_E_SCHED_WORKITEM_NOTFOUND     ((HRESULT)0x80045F0FL)

//
// MessageId: PP_E_SCHED_SHUTTINGDOWN
//
// MessageText:
//
//  Scheduler is shutting down
//
#define PP_E_SCHED_SHUTTINGDOWN          ((HRESULT)0x80045F10L)

//
// MessageId: PP_E_SCHED_TASK_NOTPENDING
//
// MessageText:
//
//  The specified task is not pending
//
#define PP_E_SCHED_TASK_NOTPENDING       ((HRESULT)0x80045F11L)

//
// MessageId: PP_E_SCHED_SCHEDULER_NOT_INITIALIZED
//
// MessageText:
//
//  Scheduler is not initialized
//
#define PP_E_SCHED_SCHEDULER_NOT_INITIALIZED ((HRESULT)0x80045F12L)

//
// MessageId: PP_E_SCHED_DISPATCHER_NOT_INITIALIZED
//
// MessageText:
//
//  Dispatcher is not initialized
//
#define PP_E_SCHED_DISPATCHER_NOT_INITIALIZED ((HRESULT)0x80045F13L)

//
// MessageId: PP_E_SCHED_COMMANDID_INVALID
//
// MessageText:
//
//  Invalid command id
//
#define PP_E_SCHED_COMMANDID_INVALID     ((HRESULT)0x80045F14L)

//
// MessageId: PP_E_SCHED_COMMANDID_NOTFOUND
//
// MessageText:
//
//  The specified command id doesn't exist
//
#define PP_E_SCHED_COMMANDID_NOTFOUND    ((HRESULT)0x80045F15L)

//
// MessageId: PP_E_SCHED_COMMANDTYPE_INVALID
//
// MessageText:
//
//  The command type is invalid
//
#define PP_E_SCHED_COMMANDTYPE_INVALID   ((HRESULT)0x80045F16L)

//
// MessageId: PP_E_SCHED_COMMANDPROGID_INVALID
//
// MessageText:
//
//  The command progid is invalid
//
#define PP_E_SCHED_COMMANDPROGID_INVALID ((HRESULT)0x80045F17L)

//
// MessageId: PP_E_SCHED_TASKEXECUTE_EXCEPTION
//
// MessageText:
//
//  Exception while executing a task
//
#define PP_E_SCHED_TASKEXECUTE_EXCEPTION ((HRESULT)0x80045F18L)

//
// MessageId: PP_E_SCHED_TASK_REMOVE
//
// MessageText:
//
//  The task will be removed from the pending list
//
#define PP_E_SCHED_TASK_REMOVE           ((HRESULT)0x80045F19L)

//
// MessageId: PP_E_SCHED_COMMANDXML_INVALID
//
// MessageText:
//
//  Invalid xml in the input command
//
#define PP_E_SCHED_COMMANDXML_INVALID    ((HRESULT)0x80045F1AL)

//
// MessageId: PP_E_SCHED_DISPVARTYPE_INVALID
//
// MessageText:
//
//  Invalid VT type for a dispatch command
//
#define PP_E_SCHED_DISPVARTYPE_INVALID   ((HRESULT)0x80045F1BL)

//
// MessageId: PP_E_SCHED_DISPPROGID_INVALID
//
// MessageText:
//
//  Invalid prog id for a dispatch command
//
#define PP_E_SCHED_DISPPROGID_INVALID    ((HRESULT)0x80045F1CL)

//
// MessageId: PP_E_SCHED_DISPMETHOD_INVALID
//
// MessageText:
//
//  Invalid method for a dispatch command
//
#define PP_E_SCHED_DISPMETHOD_INVALID    ((HRESULT)0x80045F1DL)

//
// MessageId: PP_E_SCHED_COMMANDLINE_INVALID
//
// MessageText:
//
//  Invalid command line
//
#define PP_E_SCHED_COMMANDLINE_INVALID   ((HRESULT)0x80045F1EL)

//
// MessageId: PP_E_SCHED_POLICYPATH_INVALID
//
// MessageText:
//
//  Invalid policy path
//
#define PP_E_SCHED_POLICYPATH_INVALID    ((HRESULT)0x80045F1FL)

//
// MessageId: PP_E_SCHED_CCMOBJECT_NOTFOUND
//
// MessageText:
//
//  The specified CCM object doesn't exist
//
#define PP_E_SCHED_CCMOBJECT_NOTFOUND    ((HRESULT)0x80045F21L)

//
// MessageId: PP_E_SCHED_W32TIMESYNC_NOTAVAILABLE
//
// MessageText:
//
//  The time sync service is not available
//
#define PP_E_SCHED_W32TIMESYNC_NOTAVAILABLE ((HRESULT)0x80045F22L)

//
// MessageId: PP_E_SCHED_W32TIMESYNC_EXCEPTION
//
// MessageText:
//
//  Exception while calling the time sync service 
//
#define PP_E_SCHED_W32TIMESYNC_EXCEPTION ((HRESULT)0x80045F23L)

//
// MessageId: PP_E_SCHED_DATACENTER_NOTFOUND
//
// MessageText:
//
//  The specified data center doesn't exist
//
#define PP_E_SCHED_DATACENTER_NOTFOUND   ((HRESULT)0x80045F24L)

//
// MessageId: PP_E_SCHED_POLICYNAME_INVALID
//
// MessageText:
//
//  Invalid policy name
//
#define PP_E_SCHED_POLICYNAME_INVALID    ((HRESULT)0x80045F25L)

//
// MessageId: PP_E_SCHED_POLICYINPUT_INVALID
//
// MessageText:
//
//  Invalid policy input
//
#define PP_E_SCHED_POLICYINPUT_INVALID   ((HRESULT)0x80045F26L)

//
// MessageId: PP_E_SCHED_POLICYHANDLER_INVALID
//
// MessageText:
//
//  Invalid policy handler
//
#define PP_E_SCHED_POLICYHANDLER_INVALID ((HRESULT)0x80045F27L)

// base 0x5F50
//------------------------------------------------------------------------------
// UPS Connector errors
//------------------------------------------------------------------------------
#define PP_E_UPSCON_BASE       0x5F50
//
// MessageId: PP_E_UPSCON_SHUTTINGDOWN
//
// MessageText:
//
//  The service is shutting down
//
#define PP_E_UPSCON_SHUTTINGDOWN         ((HRESULT)0x80045F50L)

//
// MessageId: PP_E_UPSCON_CLOSETIMEOUT
//
// MessageText:
//
//  Timeout while waiting for he http connection to close.
//
#define PP_E_UPSCON_CLOSETIMEOUT         ((HRESULT)0x80045F51L)

//
// MessageId: PP_E_UPSCON_ALREADYSENDING
//
// MessageText:
//
//  The current soap client is currently in use and cannot send another request.
//
#define PP_E_UPSCON_ALREADYSENDING       ((HRESULT)0x80045F52L)

//
// MessageId: PP_E_UPSCON_INVALIDRESPONSEPTR
//
// MessageText:
//
//  Invalid pointer to a CAsyncResponse object
//
#define PP_E_UPSCON_INVALIDRESPONSEPTR   ((HRESULT)0x80045F53L)

//
// MessageId: PP_E_UPSCON_INVALIDMETHOD
//
// MessageText:
//
//  The soap method is not supported.
//
#define PP_E_UPSCON_INVALIDMETHOD        ((HRESULT)0x80045F54L)

//
// MessageId: PP_E_UPSCON_HTTPREQUESTERROR
//
// MessageText:
//
//  Unknown http request error
//
#define PP_E_UPSCON_HTTPREQUESTERROR     ((HRESULT)0x80045F55L)

//
// MessageId: PP_E_UPSCON_SOAPFAULT
//
// MessageText:
//
//  The soap request returned a soap fault
//
#define PP_E_UPSCON_SOAPFAULT            ((HRESULT)0x80045F56L)

//
// MessageId: PP_E_UPSCON_INVALIDASYNCOBJ
//
// MessageText:
//
//  Invalid pointer to an asynchronous object
//
#define PP_E_UPSCON_INVALIDASYNCOBJ      ((HRESULT)0x80045F57L)

//
// MessageId: PP_E_UPSCON_RETRYREQUEST
//
// MessageText:
//
//  The request will be retried
//
#define PP_E_UPSCON_RETRYREQUEST         ((HRESULT)0x80045F58L)

//
// MessageId: PP_E_UPSCON_INVALIDHANDLE
//
// MessageText:
//
//  Invalid win32 handle
//
#define PP_E_UPSCON_INVALIDHANDLE        ((HRESULT)0x80045F59L)

//
// MessageId: PP_E_UPSCON_EMPTYQUEUE
//
// MessageText:
//
//  The batching queue is empty (unexpected)
//
#define PP_E_UPSCON_EMPTYQUEUE           ((HRESULT)0x80045F5AL)

//
// MessageId: PP_E_UPSCON_EMPTYPOOL
//
// MessageText:
//
//  The pool of soap connections is empty
//
#define PP_E_UPSCON_EMPTYPOOL            ((HRESULT)0x80045F5BL)

//
// MessageId: PP_E_UPSCON_INVALIDPUID
//
// MessageText:
//
//  Input parameter: Invalid NET id
//
#define PP_E_UPSCON_INVALIDPUID          ((HRESULT)0x80045F5CL)

//
// MessageId: PP_E_UPSCON_INVALIDDATASET
//
// MessageText:
//
//  Input parameter: Invalid dataset string
//
#define PP_E_UPSCON_INVALIDDATASET       ((HRESULT)0x80045F5DL)

//
// MessageId: PP_E_UPSCON_UNKSOAPFAULTERROR
//
// MessageText:
//
//  Unknwon soap fault error
//
#define PP_E_UPSCON_UNKSOAPFAULTERROR    ((HRESULT)0x80045F5EL)

//
// MessageId: PP_E_UPSCON_CCMCACHE_INVALID
//
// MessageText:
//
//  Invalid CCM cache pointer
//
#define PP_E_UPSCON_CCMCACHE_INVALID     ((HRESULT)0x80045F5FL)

//
// MessageId: PP_E_UPSCON_INVALIDURL
//
// MessageText:
//
//  Invalid url string
//
#define PP_E_UPSCON_INVALIDURL           ((HRESULT)0x80045F60L)

//
// MessageId: PP_E_UPSCON_INVALIDMAPPING
//
// MessageText:
//
//  Invalid string in the PP-UPS property map
//
#define PP_E_UPSCON_INVALIDMAPPING       ((HRESULT)0x80045F61L)

//
// MessageId: PP_E_UPSCON_INVALIDPROPNAME
//
// MessageText:
//
//  Invalid property name
//
#define PP_E_UPSCON_INVALIDPROPNAME      ((HRESULT)0x80045F62L)

//
// MessageId: PP_E_UPSCON_VERSIONMISSING
//
// MessageText:
//
//  The version property is missing
//
#define PP_E_UPSCON_VERSIONMISSING       ((HRESULT)0x80045F63L)

//
// MessageId: PP_E_UPSCON_INVALIDCLOGPUID
//
// MessageText:
//
//  The PUID in clog is invalid
//
#define PP_E_UPSCON_INVALIDCLOGPUID      ((HRESULT)0x80045F64L)

//
// MessageId: PP_E_UPSCON_NOTINITIALIZED
//
// MessageText:
//
//  Service not initialized
//
#define PP_E_UPSCON_NOTINITIALIZED       ((HRESULT)0x80045F65L)

//
// MessageId: PP_E_UPSCON_SLEEPNODATA
//
// MessageText:
//
//  The query returned no data, service can sleep
//
#define PP_E_UPSCON_SLEEPNODATA          ((HRESULT)0x80045F66L)

//
// MessageId: PP_E_UPSCON_ENDOFROWSET
//
// MessageText:
//
//  No more data
//
#define PP_E_UPSCON_ENDOFROWSET          ((HRESULT)0x80045F67L)

//
// MessageId: PP_E_UPSCON_WORKERINVALIDARRAY
//
// MessageText:
//
//  The input array is invalid
//
#define PP_E_UPSCON_WORKERINVALIDARRAY   ((HRESULT)0x80045F68L)

//
// MessageId: PP_E_UPSCON_BATCHMAXSIZE_EXCEEDED
//
// MessageText:
//
//  The input exceeds the maximum batch size
//
#define PP_E_UPSCON_BATCHMAXSIZE_EXCEEDED ((HRESULT)0x80045F69L)

//
// MessageId: PP_E_UPSCON_EMPTYBATCH
//
// MessageText:
//
//  The current batch is empty (unexpected)
//
#define PP_E_UPSCON_EMPTYBATCH           ((HRESULT)0x80045F6AL)

//
// MessageId: PP_E_UPSCON_BADBATCHENTRY
//
// MessageText:
//
//  The current batch contains an invalid entry
//
#define PP_E_UPSCON_BADBATCHENTRY        ((HRESULT)0x80045F6BL)

//
// MessageId: PP_E_UPSCON_CLOGPUIDNOTFOUND
//
// MessageText:
//
//  No PUID found in the clog entry
//
#define PP_E_UPSCON_CLOGPUIDNOTFOUND     ((HRESULT)0x80045F6CL)

//
// MessageId: PP_E_UPSCON_INVALIDCLOGSUBSCRIPTION
//
// MessageText:
//
//  Invalid clog subscription
//
#define PP_E_UPSCON_INVALIDCLOGSUBSCRIPTION ((HRESULT)0x80045F6DL)

//
// MessageId: PP_E_UPSCON_SUBSCRIPTIONNOTFOUND
//
// MessageText:
//
//  Subscription configured in CCM not found
//
#define PP_E_UPSCON_SUBSCRIPTIONNOTFOUND ((HRESULT)0x80045F6EL)

//
// MessageId: PP_E_UPSCON_INVALIDSUBSCRIPTIONTYPE
//
// MessageText:
//
//  Invalid subscription type
//
#define PP_E_UPSCON_INVALIDSUBSCRIPTIONTYPE ((HRESULT)0x80045F6FL)

//
// MessageId: PP_E_UPSCON_POOLMAXSIZE_EXCEEDED
//
// MessageText:
//
//  Maximum size of the connections pool exceeded
//
#define PP_E_UPSCON_POOLMAXSIZE_EXCEEDED ((HRESULT)0x80045F70L)

//
// MessageId: PP_E_UPSCON_EVENTLOGGER_INVALID
//
// MessageText:
//
//  Internal COM object for event logging is invalid
//
#define PP_E_UPSCON_EVENTLOGGER_INVALID  ((HRESULT)0x80045F71L)

//
// MessageId: PP_E_UPSCON_CLOGACTION_NOTSUPPORTED
//
// MessageText:
//
//  CLog action invalid or not supported
//
#define PP_E_UPSCON_CLOGACTION_NOTSUPPORTED ((HRESULT)0x80045F72L)

//
// MessageId: PP_E_UPSCON_UPSCONNECTOROBJECT_INVALID
//
// MessageText:
//
//  Internal COM object for UPS connections is invalid
//
#define PP_E_UPSCON_UPSCONNECTOROBJECT_INVALID ((HRESULT)0x80045F73L)

//
// MessageId: PP_E_UPSCON_INVALIDCLOGACTION
//
// MessageText:
//
//  CLog action property is invalid
//
#define PP_E_UPSCON_INVALIDCLOGACTION    ((HRESULT)0x80045F74L)

//
// MessageId: PP_E_UPSCON_CCMOBJECT_INVALID
//
// MessageText:
//
//  Invalid object returned by the CCM Cache Client
//
#define PP_E_UPSCON_CCMOBJECT_INVALID    ((HRESULT)0x80045F75L)

//
// MessageId: PP_E_UPSCON_INVALID_MEMBERNAME
//
// MessageText:
//
//  Member name property is invalid
//
#define PP_E_UPSCON_INVALID_MEMBERNAME   ((HRESULT)0x80045F76L)

//
// MessageId: PP_E_UPSCON_INVALID_PASSPORTID
//
// MessageText:
//
//  The Passport id for UPS authorization is invalid
//
#define PP_E_UPSCON_INVALID_PASSPORTID   ((HRESULT)0x80045F77L)

//
// MessageId: PP_E_UPSCON_CLOGCREDNAME_INVALID
//
// MessageText:
//
//  CLog credential name is invalid
//
#define PP_E_UPSCON_CLOGCREDNAME_INVALID ((HRESULT)0x80045F78L)

//
// MessageId: PP_E_UPSCON_CLOGENTRY_NOOP
//
// MessageText:
//
//  No processing for the current clog entry, entry is skipped
//
#define PP_E_UPSCON_CLOGENTRY_NOOP       ((HRESULT)0x80045F79L)

//
// MessageId: PP_E_UPSCON_CLOGENTRY_FATALERROR
//
// MessageText:
//
//  Fatal error in processing the clog entry
//
#define PP_E_UPSCON_CLOGENTRY_FATALERROR ((HRESULT)0x80045F7AL)

//
// MessageId: PP_E_UPSCON_CCMID_INVALID
//
// MessageText:
//
//  The CCM id returned by the CCM cache is invalid
//
#define PP_E_UPSCON_CCMID_INVALID        ((HRESULT)0x80045F7BL)

//
// MessageId: PP_E_UPSCON_CCMSAFEARRAY_INVALID
//
// MessageText:
//
//  The safearray returned by the CCM cache is invalid
//
#define PP_E_UPSCON_CCMSAFEARRAY_INVALID ((HRESULT)0x80045F7CL)

//
// MessageId: PP_E_UPSCON_PROPERTYMSNUSER_INVALID
//
// MessageText:
//
//  The type or data of the MSNUser property is invalid
//
#define PP_E_UPSCON_PROPERTYMSNUSER_INVALID ((HRESULT)0x80045F7DL)

//
// MessageId: PP_E_UPSCON_ASYNCCALL_FAILED
//
// MessageText:
//
//  The asynchronous call to UPS failed
//
#define PP_E_UPSCON_ASYNCCALL_FAILED     ((HRESULT)0x80045F7EL)

//
// MessageId: PP_E_UPSCON_CREDFLAGSPROP_INVALID
//
// MessageText:
//
//  The type or data of the Credential flags property is invalid
//
#define PP_E_UPSCON_CREDFLAGSPROP_INVALID ((HRESULT)0x80045F7FL)

//
// MessageId: PP_E_UPSCON_PROPERTYMSNUSER_NOTFOUND
//
// MessageText:
//
//  The MSNUser property doesn't exist, in the current migration status the property is required
//
#define PP_E_UPSCON_PROPERTYMSNUSER_NOTFOUND ((HRESULT)0x80045F80L)

//
// MessageId: PP_E_UPSCON_PROPERTYID_INVALID
//
// MessageText:
//
//  Invalid property id
//
#define PP_E_UPSCON_PROPERTYID_INVALID   ((HRESULT)0x80045F81L)

//
// MessageId: PP_E_UPSCON_PROFILEPUIDNOTFOUND
//
// MessageText:
//
//  Invalid PUID found in the profile rowset
//
#define PP_E_UPSCON_PROFILEPUIDNOTFOUND  ((HRESULT)0x80045F82L)

//
// MessageId: PP_E_UPSCON_CREDENTIALPUIDNOTFOUND
//
// MessageText:
//
//  Invalid PUID found in the credential rowset
//
#define PP_E_UPSCON_CREDENTIALPUIDNOTFOUND ((HRESULT)0x80045F83L)

//
// MessageId: PP_E_UPSCON_INVALIDMIGTYPE
//
// MessageText:
//
//  Invalid migration type specified for ups migration.
//
#define PP_E_UPSCON_INVALIDMIGTYPE       ((HRESULT)0x80045F84L)

//
// MessageId: PP_E_UPSCON_INVALIDMODULEPATH
//
// MessageText:
//
//  The current module has an invalid path.
//
#define PP_E_UPSCON_INVALIDMODULEPATH    ((HRESULT)0x80045F85L)

//
// MessageId: PP_E_UPSCON_INTERFACE_NOTSUPPORTED
//
// MessageText:
//
//  The passport object does not support the requested interface.
//
#define PP_E_UPSCON_INTERFACE_NOTSUPPORTED ((HRESULT)0x80045F86L)

//
// MessageId: PP_E_UPSCON_INVALID_VERSION
//
// MessageText:
//
//  The profile/credential version is invalid, it should be a positive number.
//
#define PP_E_UPSCON_INVALID_VERSION      ((HRESULT)0x80045F87L)

//
// MessageId: PP_E_UPSCON_MAX_ERRORS_EXCEEDED
//
// MessageText:
//
//  The numbers of errors encountered is greater than the maximum allowable value
//
#define PP_E_UPSCON_MAX_ERRORS_EXCEEDED  ((HRESULT)0x80045F88L)

//
// MessageId: PP_E_SEEDING_USER_IS_KID
//
// MessageText:
//
//  The user is a kid and thus will not be pushed to UPS
//
#define PP_E_SEEDING_USER_IS_KID         ((HRESULT)0x80045F89L)

//
// MessageId: PP_E_UPSCON_POOL_NEWCONNECTION
//
// MessageText:
//
//  Internal error, a new connection resource was created
//
#define PP_E_UPSCON_POOL_NEWCONNECTION   ((HRESULT)0x80045F8AL)

//
// MessageId: PP_E_UPSCON_INVALID_CLOGDATAPARTITIONING
//
// MessageText:
//
//  Invalid CCM value for Clog data partitioning
//
#define PP_E_UPSCON_INVALID_CLOGDATAPARTITIONING ((HRESULT)0x80045F8BL)

// base 0x6016
//
// MessageId: PP_E_CCMMGR_SERVICENOTFOUND
//
// MessageText:
//
//  Service specified in the notification command not found in list of registered services.
//
#define PP_E_CCMMGR_SERVICENOTFOUND      ((HRESULT)0x80046016L)

//
// MessageId: PP_E_CCMMGR_INAVLID_ACTION
//
// MessageText:
//
//  Action specified in the cache update command is invalid (Only add, remove and modify allowed).
//
#define PP_E_CCMMGR_INAVLID_ACTION       ((HRESULT)0x80046017L)

//
// MessageId: PP_E_CCMMGR_CMD_THREADCOUNT
//
// MessageText:
//
//  The DCOM worker thread count is invalid (Less than 1 or more than max allowed).
//
#define PP_E_CCMMGR_CMD_THREADCOUNT      ((HRESULT)0x80046025L)

//
// MessageId: PP_E_CCMMGR_CMD_BADCMDTHREAD_DECCOUNT
//
// MessageText:
//
//  The DCOM worker thread count is less than 0.
//
#define PP_E_CCMMGR_CMD_BADCMDTHREAD_DECCOUNT ((HRESULT)0x80046027L)

//
// MessageId: PP_E_CCMMGR_CMD_BADCMDTHREAD_INCCOUNT
//
// MessageText:
//
//  The DCOM worker thread count is less than or equal to 0 after increment.
//
#define PP_E_CCMMGR_CMD_BADCMDTHREAD_INCCOUNT ((HRESULT)0x80046028L)

//
// MessageId: PP_E_CCMMGR_SVC_DOMAIN_LENGTH
//
// MessageText:
//
//  Domain name length for the account of notification service is invalid (Less than 0 or greater than 256)
//
#define PP_E_CCMMGR_SVC_DOMAIN_LENGTH    ((HRESULT)0x80046029L)

//
// MessageId: PP_E_CCMMGR_SVC_SID_LENGTH
//
// MessageText:
//
//  SID length for the account of notification service is invalid (Less than 0 or greater than 512)
//
#define PP_E_CCMMGR_SVC_SID_LENGTH       ((HRESULT)0x80046030L)

//
// MessageId: PP_E_CCMMGR_DBSERVER_GETCOMPUTERNAME
//
// MessageText:
//
//  Computer DNS name length is invalid (Less than 0 or greater than 256)
//
#define PP_E_CCMMGR_DBSERVER_GETCOMPUTERNAME ((HRESULT)0x80046031L)

//
// MessageId: PP_E_CCMMGR_DBSERVER_BADSTATE
//
// MessageText:
//
//  DBServer class is in invalid state.
//
#define PP_E_CCMMGR_DBSERVER_BADSTATE    ((HRESULT)0x80046032L)

//
// MessageId: PP_E_CCMMGR_DBSERVER_BADMACHINENAME
//
// MessageText:
//
//  Failed to get computer DNS name.
//
#define PP_E_CCMMGR_DBSERVER_BADMACHINENAME ((HRESULT)0x80046033L)

//
// MessageId: PP_E_CCMMGR_DBSERVER_MACHINENOTFOUND
//
// MessageText:
//
//  Computer name entry not found in CCM DB.
//
#define PP_E_CCMMGR_DBSERVER_MACHINENOTFOUND ((HRESULT)0x80046034L)

//
// MessageId: PP_E_CCMMGR_DBSERVER_MACHINETOOMANY
//
// MessageText:
//
//  More than one computer name entry not found in CCM DB.
//
#define PP_E_CCMMGR_DBSERVER_MACHINETOOMANY ((HRESULT)0x80046035L)

//
// MessageId: PP_E_CCMMGR_DBSERVER_DATACENTERNOTFOUND
//
// MessageText:
//
//  Datacenter id not found in the CCM DB.
//
#define PP_E_CCMMGR_DBSERVER_DATACENTERNOTFOUND ((HRESULT)0x80046036L)

//
// MessageId: PP_E_CCMMGR_DBSERVER_DATACENTERTOOMANY
//
// MessageText:
//
//  More than one datacenter id found in the CCM DB.
//
#define PP_E_CCMMGR_DBSERVER_DATACENTERTOOMANY ((HRESULT)0x80046037L)

//
// MessageId: PP_E_CCMMGR_DBSERVER_SERVICESNOTFOUND
//
// MessageText:
//
//  No service entery for this computer found on in CCM DB.
//
#define PP_E_CCMMGR_DBSERVER_SERVICESNOTFOUND ((HRESULT)0x80046038L)

//
// MessageId: PP_E_CCMMGR_DBSERVER_HEARTBEAT_BADTYPE
//
// MessageText:
//
//  HeartBeat parameter in CCM DB is of wrong type (should be VT_I4).
//
#define PP_E_CCMMGR_DBSERVER_HEARTBEAT_BADTYPE ((HRESULT)0x80046041L)

//
// MessageId: PP_E_CCMMGR_DBSERVER_ACCESSGROUP_BADTYPE
//
// MessageText:
//
//  AccessDomainGroup parameter in CCM DB is of wrong type (should be VT_BSTR).
//
#define PP_E_CCMMGR_DBSERVER_ACCESSGROUP_BADTYPE ((HRESULT)0x80046042L)

//
// MessageId: PP_E_CCMMGR_DBSERVER_ACCESSGROUP_EMPTY
//
// MessageText:
//
//  AccessDomainGroup parameter in CCM DB is empty or null.
//
#define PP_E_CCMMGR_DBSERVER_ACCESSGROUP_EMPTY ((HRESULT)0x80046043L)

//
// MessageId: PP_E_CCMMGR_DBSERVER_NOTIFICATIONSETTING_TIMEOUT
//
// MessageText:
//
//  Notification thread wait time in CCM DB more than max allowed. (greater than 300000).
//
#define PP_E_CCMMGR_DBSERVER_NOTIFICATIONSETTING_TIMEOUT ((HRESULT)0x80046044L)

//
// MessageId: PP_E_CCMMGR_DBSERVER_NOTIFICATIONSETTING_NOHEARTBEAT
//
// MessageText:
//
//  HeartBeat time not found in CCM DB or is zero.
//
#define PP_E_CCMMGR_DBSERVER_NOTIFICATIONSETTING_NOHEARTBEAT ((HRESULT)0x80046045L)

//
// MessageId: PP_E_CCMMGR_DBSERVER_NOTIFICATIONSETTING_THREADCOUNT
//
// MessageText:
//
//  Notification thread count in CCM DB is more than max allowed. (greater than 32)
//
#define PP_E_CCMMGR_DBSERVER_NOTIFICATIONSETTING_THREADCOUNT ((HRESULT)0x80046046L)

//
// MessageId: PP_E_CCMMGR_DBSERVER_NOTIFICATIONSETTING_HEARTBEAT
//
// MessageText:
//
//  HeartBeat time in the CCM DB is more than max allowed (greater than 60).
//
#define PP_E_CCMMGR_DBSERVER_NOTIFICATIONSETTING_HEARTBEAT ((HRESULT)0x80046047L)

//
// MessageId: PP_E_CCMMGRSVC_DCOM_DATACENTERID
//
// MessageText:
//
//  Datacenter id specified in notification call does not match datacenter id in CCM DB.
//
#define PP_E_CCMMGRSVC_DCOM_DATACENTERID ((HRESULT)0x80046048L)

//
// MessageId: PP_E_CCMMGRSVC_DCOM_SERVERID
//
// MessageText:
//
//  Server id specified in notification call does not match server id in CCM DB.
//
#define PP_E_CCMMGRSVC_DCOM_SERVERID     ((HRESULT)0x80046049L)

//
// MessageId: PP_E_CCMMGRSVC_DCOM_TRIGGERID
//
// MessageText:
//
//  Trigger ID is 0 for the notification.
//
#define PP_E_CCMMGRSVC_DCOM_TRIGGERID    ((HRESULT)0x8004604AL)

//
// MessageId: PP_E_CCMMGR_CMD_TRIGGERID_MISMATCH
//
// MessageText:
//
//  Trigger id in the notification command does not match with trigger id in the notification call.
//
#define PP_E_CCMMGR_CMD_TRIGGERID_MISMATCH ((HRESULT)0x80046050L)

//
// MessageId: PP_E_CCMMGR_CMD_SERVERID_MISMATCH
//
// MessageText:
//
//  Server id in the notification command does not match with server id in the notification call.
//
#define PP_E_CCMMGR_CMD_SERVERID_MISMATCH ((HRESULT)0x80046051L)

//
// MessageId: PP_E_CCMMGR_CMD_INVALID_COMMAND_COUNT
//
// MessageText:
//
//  No of commands in the command list are either less than 1 or more than 128.
//
#define PP_E_CCMMGR_CMD_INVALID_COMMAND_COUNT ((HRESULT)0x80046052L)

//
// MessageId: PP_E_CCMMGR_DBSERVER_NOTIFICATIONSETTING_NOTFOUND
//
// MessageText:
//
//  Notification setting for CCMMgrSvc not found in the CCM DB.
//
#define PP_E_CCMMGR_DBSERVER_NOTIFICATIONSETTING_NOTFOUND ((HRESULT)0x80046053L)

//
// MessageId: PP_E_CCMMGR_DBSERVER_NOTIFICATIONSETTING_NOMAXTHREAD
//
// MessageText:
//
//  Max notification worker thread count in not defined in the CCM DB.
//
#define PP_E_CCMMGR_DBSERVER_NOTIFICATIONSETTING_NOMAXTHREAD ((HRESULT)0x80046054L)

//
// MessageId: PP_E_CCMMGR_DBSERVER_NOTIFICATIONSETTING_NODOMGROUP
//
// MessageText:
//
//  AccessDomainGroup notification setting empty in the CCM DB.
//
#define PP_E_CCMMGR_DBSERVER_NOTIFICATIONSETTING_NODOMGROUP ((HRESULT)0x80046055L)

//
// MessageId: PP_E_CCMMGR_DBSERVER_MAXTIMEOUT_BADTYPE
//
// MessageText:
//
//  Notification thread wait time in CCM DB is of invalid type (should be VT_I4).
//
#define PP_E_CCMMGR_DBSERVER_MAXTIMEOUT_BADTYPE ((HRESULT)0x80046056L)

//
// MessageId: PP_E_CCMMGR_ADDSERVICE_NOT_FOUND
//
// MessageText:
//
//  Service trying to register not found in the services list for this computer.
//
#define PP_E_CCMMGR_ADDSERVICE_NOT_FOUND ((HRESULT)0x80046057L)

//
// MessageId: PP_E_CCMMGR_DELSERVICE_NOT_FOUND
//
// MessageText:
//
//  Service trying to unregister not found in the services list for this computer.
//
#define PP_E_CCMMGR_DELSERVICE_NOT_FOUND ((HRESULT)0x80046058L)

//
// MessageId: PP_E_CCMMGR_DELSERVICE_NOT_REGISTERED
//
// MessageText:
//
//  Service trying to unregister is not registered.
//
#define PP_E_CCMMGR_DELSERVICE_NOT_REGISTERED ((HRESULT)0x80046059L)

//
// MessageId: PP_E_CCMMGR_CMD_NULLSVCPTR
//
// MessageText:
//
//  Service list pointer is NULL.
//
#define PP_E_CCMMGR_CMD_NULLSVCPTR       ((HRESULT)0x80046060L)

//
// MessageId: PP_E_CCMMGR_CMD_NULLNOTIFYPTR
//
// MessageText:
//
//  Notification pointer is NULL.
//
#define PP_E_CCMMGR_CMD_NULLNOTIFYPTR    ((HRESULT)0x80046061L)

//
// MessageId: PP_E_CCMMGRSVC_LONG_MODULE_PATH
//
// MessageText:
//
//  CCMMgrSvc module path is logner thax MAX_PATH.
//
#define PP_E_CCMMGRSVC_LONG_MODULE_PATH  ((HRESULT)0x80046062L)

//
// MessageId: PP_E_CCMMGRSVC_REMOVE_FILESPEC
//
// MessageText:
//
//  Failed to remove the file name path of module name.
//
#define PP_E_CCMMGRSVC_REMOVE_FILESPEC   ((HRESULT)0x80046063L)

//
// MessageId: PP_E_CCMMGR_CMD_SERVERSTART_FAILED
//
// MessageText:
//
//  Failed to start a webservice after stopping.
//
#define PP_E_CCMMGR_CMD_SERVERSTART_FAILED ((HRESULT)0x80046064L)

//
// MessageId: PP_E_CCMMGR_CMD_NOTFOUND
//
// MessageText:
//
//  Service not found in service state list.
//
#define PP_E_CCMMGR_CMD_NOTFOUND         ((HRESULT)0x80046065L)

//
// MessageId: PP_E_CCMMGR_SVC_BADCCMSVC_PTR
//
// MessageText:
//
//  Bad service pointer.
//
#define PP_E_CCMMGR_SVC_BADCCMSVC_PTR    ((HRESULT)0x80046066L)

//
// MessageId: PP_E_CCMMGR_SVC_TIMEOUT
//
// MessageText:
//
//  Notifcation thread timed out waiting for complete the notification processing.
//
#define PP_E_CCMMGR_SVC_TIMEOUT          ((HRESULT)0x80046067L)

//
// MessageId: PP_E_CCMMGR_SVC_ABANDONED
//
// MessageText:
//
//  Notifcation thread abandoned waiting for complete the notification processing.
//
#define PP_E_CCMMGR_SVC_ABANDONED        ((HRESULT)0x80046068L)

//
// MessageId: PP_E_CCMMGR_SVC_NONE_REGISTERED
//
// MessageText:
//
//  No service registered with CCMMgrSvc.
//
#define PP_E_CCMMGR_SVC_NONE_REGISTERED  ((HRESULT)0x80046069L)

//
// MessageId: PP_E_CCMMGR_SVC_BADSTATE_REG
//
// MessageText:
//
//  CCMMgrSvc is not in good state (Some globals are not initialized, etc) to register client.
//
#define PP_E_CCMMGR_SVC_BADSTATE_REG     ((HRESULT)0x8004606AL)

//
// MessageId: PP_E_CCMMGR_SVC_BADSTATE_UNREG
//
// MessageText:
//
//  CCMMgrSvc is not in good state (Some globals are not initialized, etc) to unregister client.
//
#define PP_E_CCMMGR_SVC_BADSTATE_UNREG   ((HRESULT)0x80046070L)

//
// MessageId: PP_E_CCMMGR_SVC_BADSTATE_NOTIFEXECUTE
//
// MessageText:
//
//  CCMMgrSvc is not in good state (Some globals are not initialized, etc) to execute notifications.
//
#define PP_E_CCMMGR_SVC_BADSTATE_NOTIFEXECUTE ((HRESULT)0x80046071L)

//
// MessageId: PP_E_CCMMGR_DBSERVER_MAXTHREAD_BADTYPE
//
// MessageText:
//
//  Notification thread count in CCM DB is of invalid type (should be VT_I4).
//
#define PP_E_CCMMGR_DBSERVER_MAXTHREAD_BADTYPE ((HRESULT)0x80046072L)

//
// MessageId: PP_E_CCMMGR_INAVLID_DATEFORMAT
//
// MessageText:
//
//  Date format in the XML node or attribute is invalid (Should be in YYYY:MM:DD:HH:MM:SS:FFFF).
//
#define PP_E_CCMMGR_INAVLID_DATEFORMAT   ((HRESULT)0x80046073L)

//
// MessageId: PP_E_CCMMGR_INAVLID_NTSVC_NO_ARGS
//
// MessageText:
//
//  Arguments missing for the NT Service command.
//
#define PP_E_CCMMGR_INAVLID_NTSVC_NO_ARGS ((HRESULT)0x80046074L)

//
// MessageId: PP_E_CCMMGR_INAVLID_NTSVC_ACTION
//
// MessageText:
//
//  Action is invalid for NT service command (Only start, stop and restart allowed).
//
#define PP_E_CCMMGR_INAVLID_NTSVC_ACTION ((HRESULT)0x80046075L)

//
// MessageId: PP_E_CCMMGR_CMD_GETSTATUS_INVALIDARG
//
// MessageText:
//
//  Arugments to Get Cache status command are missing or invalid.
//
#define PP_E_CCMMGR_CMD_GETSTATUS_INVALIDARG ((HRESULT)0x80046076L)

//
// MessageId: PP_E_CCMMGR_CMD_CACHEUPDATE_BAD_STATE
//
// MessageText:
//
//  Service is in bad state before commiting changes. Changes to commited.
//
#define PP_E_CCMMGR_CMD_CACHEUPDATE_BAD_STATE ((HRESULT)0x80046077L)

//
// MessageId: PP_E_CCMMGR_CMD_SVCRESET_BAD_ADSI_CLASS
//
// MessageText:
//
//  ADSI class name for WebService is null.
//
#define PP_E_CCMMGR_CMD_SVCRESET_BAD_ADSI_CLASS ((HRESULT)0x80046078L)

//
// MessageId: PP_E_CCMMGR_CMD_SVCRESET_BAD_ADSI_PATH
//
// MessageText:
//
//  ADSI path for WebService is null.
//
#define PP_E_CCMMGR_CMD_SVCRESET_BAD_ADSI_PATH ((HRESULT)0x80046079L)

//
// MessageId: PP_E_CCMMGR_CMD_SVCRESET_BAD_ADSI_SERVERCOMMENT
//
// MessageText:
//
//  ServerComment property is either not of type BSTR or NULL
//
#define PP_E_CCMMGR_CMD_SVCRESET_BAD_ADSI_SERVERCOMMENT ((HRESULT)0x8004607AL)

//
// MessageId: PP_E_CCMMGR_CMD_SVCRESET_SVC_NOTFOUND
//
// MessageText:
//
//  Web Service not installed on the machine.
//
#define PP_E_CCMMGR_CMD_SVCRESET_SVC_NOTFOUND ((HRESULT)0x8004607BL)

//
// MessageId: PP_E_CCMMGR_CMD_CACHEUPDATE_INVALID_RELTYPE
//
// MessageText:
//
//  Relation Type not supported by the client.
//
#define PP_E_CCMMGR_CMD_CACHEUPDATE_INVALID_RELTYPE ((HRESULT)0x8004607CL)

//
// MessageId: PP_E_CCMMGR_INVALID_SVC_TYPE
//
// MessageText:
//
//  Type of the service in the command XML is invalid.
//
#define PP_E_CCMMGR_INVALID_SVC_TYPE     ((HRESULT)0x8004607DL)

//
// MessageId: PP_E_CCMMGR_DBSERVER_POLLTIME_BADTYPE
//
// MessageText:
//
//  PollTime parameter in CCM DB is of wrong type (should be VT_I4).
//
#define PP_E_CCMMGR_DBSERVER_POLLTIME_BADTYPE ((HRESULT)0x8004607EL)

//
// MessageId: PP_E_CCMMGR_DBSERVER_POLLSKEW_BADTYPE
//
// MessageText:
//
//  PollSkew parameter in CCM DB is of wrong type (should be VT_I4).
//
#define PP_E_CCMMGR_DBSERVER_POLLSKEW_BADTYPE ((HRESULT)0x8004607FL)

// base 0x6100
//
// MessageId: PP_E_CCMAZ_NOTAUTHORIZED
//
// MessageText:
//
//  User is not authorizate to execute the command
//
#define PP_E_CCMAZ_NOTAUTHORIZED         ((HRESULT)0x80046100L)

//
// MessageId: PP_E_CCMAZ_INVALIDCLAIM
//
// MessageText:
//
//  Invalid operation/claim name
//
#define PP_E_CCMAZ_INVALIDCLAIM          ((HRESULT)0x80046101L)

//
// MessageId: PP_E_CCMAZ_INVALIDCLAIMCOUNT
//
// MessageText:
//
//  Invalid operations/claims count
//
#define PP_E_CCMAZ_INVALIDCLAIMCOUNT     ((HRESULT)0x80046102L)

//
// MessageId: PP_E_CCMAZ_INVALIDIMPFLAG
//
// MessageText:
//
//  Internal error: Invalid impersonation flag
//
#define PP_E_CCMAZ_INVALIDIMPFLAG        ((HRESULT)0x80046103L)

//
// MessageId: PP_E_CCMAZ_NOCONFIGKEY
//
// MessageText:
//
//  CCMAz registry key is missing or invalid
//
#define PP_E_CCMAZ_NOCONFIGKEY           ((HRESULT)0x80046104L)

//
// MessageId: PP_E_CCMAZ_STORENAME_NOTFOUND
//
// MessageText:
//
//  CCMAz store name not found in the registry
//
#define PP_E_CCMAZ_STORENAME_NOTFOUND    ((HRESULT)0x80046105L)

//
// MessageId: PP_E_CCMAZ_BADVARIANT
//
// MessageText:
//
//  Internal error: bad variant
//
#define PP_E_CCMAZ_BADVARIANT            ((HRESULT)0x80046106L)

//
// MessageId: PP_E_CCMAZ_INVALIDOBJECTCOUNT
//
// MessageText:
//
//  Invalid object types count
//
#define PP_E_CCMAZ_INVALIDOBJECTCOUNT    ((HRESULT)0x80046107L)

//
// MessageId: PP_E_CCMAZ_INVALIDOBJECTTYPE
//
// MessageText:
//
//  Invalid object type
//
#define PP_E_CCMAZ_INVALIDOBJECTTYPE     ((HRESULT)0x80046108L)

//
// MessageId: PP_E_CCMAZ_NOTINITIALIZED
//
// MessageText:
//
//  CCM Az library is not initialized
//
#define PP_E_CCMAZ_NOTINITIALIZED        ((HRESULT)0x80046109L)

//
// MessageId: PP_E_CCMAZ_AZAPPLICATION_INVALID
//
// MessageText:
//
//  The internal AzApplication object is null
//
#define PP_E_CCMAZ_AZAPPLICATION_INVALID ((HRESULT)0x8004610AL)

// base 0x6350
//
// MessageId: PP_E_PERF_ADDINSTANCE
//
// MessageText:
//
//  Failed to add perfmon instance
//
#define PP_E_PERF_ADDINSTANCE            ((HRESULT)0x80046350L)

// base 0x6400
//code manager error code
//#define  PP_E_CODEMAPS_BASE 0x6400
//
// MessageId: PP_E_RWLOCK_NOTINITIALIZED
//
// MessageText:
//
//  Service temporarily unavailable due to internal CodeManager Component error (hr=%1), please try later.
//
#define PP_E_RWLOCK_NOTINITIALIZED       ((HRESULT)0x80046400L)

//
// MessageId: PP_E_RWLOCK_CLAIMFAILED
//
// MessageText:
//
//  Service temporarily unavailable due to internal CodeManager Component error (hr=%1, Unable to acquire the lock), please try later.
//
#define PP_E_RWLOCK_CLAIMFAILED          ((HRESULT)0x80046401L)

//
// MessageId: PP_E_MAPPATH_NOTINITIALIZED
//
// MessageText:
//
//  Service temporarily unavailable due to internal CodeManager Component error (hr=%1, No PATH where to load the files from), please try later.
//
#define PP_E_MAPPATH_NOTINITIALIZED      ((HRESULT)0x80046402L)

//
// MessageId: PP_E_MAPPATH_BADPATH
//
// MessageText:
//
//  Service temporarily unavailable due to internal CodeManager Component error (hr=%1, Unable to get the path for the files), please try later.
//
#define PP_E_MAPPATH_BADPATH             ((HRESULT)0x80046403L)

//
// MessageId: PP_E_CODEFILES_BADINIPAIRS
//
// MessageText:
//
//  Service temporarily unavailable due to internal CodeManager Component error (hr=%1, Unable to load the CODEFILES section), please try later.
//
#define PP_E_CODEFILES_BADINIPAIRS       ((HRESULT)0x80046404L)

// base 0x6450
//
// MessageId: PP_E_CDS_EVHELPER_INIT_FAILED
//
// MessageText:
//
//  Service temporarily unavailable due to internal Email Validation object initialization error, please try later.
//
#define PP_E_CDS_EVHELPER_INIT_FAILED    ((HRESULT)0x80046450L)

// base 0x6500
//
// MessageId: PP_E_SRVCRYPT_INVALID_PUID
//
// MessageText:
//
//  Decrypted data successfully but PUID does not match.
//
#define PP_E_SRVCRYPT_INVALID_PUID       ((HRESULT)0x80046500L)

//
// MessageId: PP_E_SRVCRYPT_EXPIRED_BLOB
//
// MessageText:
//
//  Decrypted data successfully but the data is expired.
//
#define PP_E_SRVCRYPT_EXPIRED_BLOB       ((HRESULT)0x80046501L)

//
// MessageId: PP_E_SRVCRYPT_INVALID_PURPOSE
//
// MessageText:
//
//  The encryption purpose is invalid. Internal error.
//
#define PP_E_SRVCRYPT_INVALID_PURPOSE    ((HRESULT)0x80046502L)

//
// MessageId: PP_E_SRVCRYPT_HMAC_MISMATCH
//
// MessageText:
//
//  Failed to decrypt data. HMAC hash does not match.
//
#define PP_E_SRVCRYPT_HMAC_MISMATCH      ((HRESULT)0x80046503L)

// base 0x6550
//
// MessageId: PP_E_AS_PROCESSTRDPL_CONFIG_NOT_INITIALIZED
//
// MessageText:
//
//  In initializeing processing thread pool we see config is not inited.
//
#define PP_E_AS_PROCESSTRDPL_CONFIG_NOT_INITIALIZED ((HRESULT)0x80046550L)

//
// MessageId: PP_E_AS_PIDEPOSITORY_INVALID_THREADPOOL_POINTER
//
// MessageText:
//
//  Puid info depository is supplied with invalid back pointer to thread pool.
//
#define PP_E_AS_PIDEPOSITORY_INVALID_THREADPOOL_POINTER ((HRESULT)0x80046551L)

//
// MessageId: PP_E_AS_PIDEPOSITORY_INVALID_SIZE
//
// MessageText:
//
//  Invalid size supplied to initialize puid info depository.
//
#define PP_E_AS_PIDEPOSITORY_INVALID_SIZE ((HRESULT)0x80046552L)

//
// MessageId: PP_E_AS_CONFIG_NOT_INITIALIZED
//
// MessageText:
//
//  Configuration object is not initialized.
//
#define PP_E_AS_CONFIG_NOT_INITIALIZED   ((HRESULT)0x80046553L)

//
// MessageId: PP_E_AS_STATISTICS_NOT_INITIALIZED
//
// MessageText:
//
//  Statistics object is not initialized.
//
#define PP_E_AS_STATISTICS_NOT_INITIALIZED ((HRESULT)0x80046554L)

//
// MessageId: PP_E_AS_DEPOSITORY_NOT_INITIALIZED
//
// MessageText:
//
//  Puid depository is used before it is initialized.
//
#define PP_E_AS_DEPOSITORY_NOT_INITIALIZED ((HRESULT)0x80046555L)

//
// MessageId: PP_E_AS_EVENTLOGGER_NOT_INITIALIZED
//
// MessageText:
//
//  Event logger is not initialized.
//
#define PP_E_AS_EVENTLOGGER_NOT_INITIALIZED ((HRESULT)0x80046556L)

//
// MessageId: PP_E_AS_EVENTLOGGER_COULD_NOT_CREATE
//
// MessageText:
//
//  Failed to create event logger.
//
#define PP_E_AS_EVENTLOGGER_COULD_NOT_CREATE ((HRESULT)0x80046559L)

//
// MessageId: PP_E_AS_CONFIG_ALREADY_INITIALIZED
//
// MessageText:
//
//  Second attmpt to initialize config, it is already initialized.
//
#define PP_E_AS_CONFIG_ALREADY_INITIALIZED ((HRESULT)0x8004655AL)

//
// MessageId: PP_E_AS_CONFIG_INVALID_INIFILE_NAME
//
// MessageText:
//
//  Configuration object was supplied invalid INI file name to initialize.
//
#define PP_E_AS_CONFIG_INVALID_INIFILE_NAME ((HRESULT)0x8004655BL)

//
// MessageId: PP_E_AS_CONFIG_SECTIONNAME_EMPTY
//
// MessageText:
//
//  Invalid section name in INI file was supplied to configuration object during initialization.
//
#define PP_E_AS_CONFIG_SECTIONNAME_EMPTY ((HRESULT)0x8004655CL)

//
// MessageId: PP_E_AS_CONFIG_SECTION_BUFFER_TOO_SMALL
//
// MessageText:
//
//  To much data in this section of config file to process.
//
#define PP_E_AS_CONFIG_SECTION_BUFFER_TOO_SMALL ((HRESULT)0x8004655DL)

//
// MessageId: PP_E_AS_CONFIG_EMPTY_ITEM_NAME
//
// MessageText:
//
//  Empty item name in INI file.
//
#define PP_E_AS_CONFIG_EMPTY_ITEM_NAME   ((HRESULT)0x8004655EL)

//
// MessageId: PP_E_AS_CONFIG_NO_SUCH_ITEM
//
// MessageText:
//
//  No item with given name exists in INI file.
//
#define PP_E_AS_CONFIG_NO_SUCH_ITEM      ((HRESULT)0x8004655FL)

//
// MessageId: PP_E_AS_CONFIG_CAN_NOT_CHANGE_ITEM_TYPE
//
// MessageText:
//
//  INI file item type can not be changed to the storage type.
//
#define PP_E_AS_CONFIG_CAN_NOT_CHANGE_ITEM_TYPE ((HRESULT)0x80046560L)

//
// MessageId: PP_E_AS_PUIDINFODEPOT_SIZE_INVALID
//
// MessageText:
//
//  Invalid size of PUID info depository.
//
#define PP_E_AS_PUIDINFODEPOT_SIZE_INVALID ((HRESULT)0x80046561L)

//
// MessageId: PP_E_AS_INVALID_PARTITIONINFO_SUPPLIED
//
// MessageText:
//
//  Invalid info on partition supplied during initialization.
//
#define PP_E_AS_INVALID_PARTITIONINFO_SUPPLIED ((HRESULT)0x80046562L)

//
// MessageId: PP_E_AS_STATISTICS_INVALID_LOAD_LEVEL
//
// MessageText:
//
//  Invalid load level supplied to statistics object on initialization.
//
#define PP_E_AS_STATISTICS_INVALID_LOAD_LEVEL ((HRESULT)0x80046563L)

//
// MessageId: PP_E_AS_STATISTICS_INVALID_MINIMAL_TIME
//
// MessageText:
//
//  Invalid minimal time between DB calls supplied to statistics object during initialization.
//
#define PP_E_AS_STATISTICS_INVALID_MINIMAL_TIME ((HRESULT)0x80046564L)

//
// MessageId: PP_E_AS_STATISTICS_INVALID_MAXIMUM_TIME
//
// MessageText:
//
//  Invalid maximum time between DB calls supplied to statistics object during initialization.
//
#define PP_E_AS_STATISTICS_INVALID_MAXIMUM_TIME ((HRESULT)0x80046565L)

//
// MessageId: PP_E_AS_STATISTICS_INVALID_TRIGGER_VALUE
//
// MessageText:
//
//  Invalid trigger value supplied to statistics object during initialization.
//
#define PP_E_AS_STATISTICS_INVALID_TRIGGER_VALUE ((HRESULT)0x80046566L)

//
// MessageId: PP_E_AS_STATISTICS_INVALID_THROTTLEPERNUMBEROFCALLS_VALUE
//
// MessageText:
//
//  Invalid throttle per number of calls parameter supplied to statistics object during initialization.
//
#define PP_E_AS_STATISTICS_INVALID_THROTTLEPERNUMBEROFCALLS_VALUE ((HRESULT)0x80046567L)

//
// MessageId: PP_E_AS_STATISTICS_LOADLEVELTRIGGERCOMBO_OUTSIDE_LEGAL_RANGE
//
// MessageText:
//
//  Combination of trigger value and load level is outside legal range.
//
#define PP_E_AS_STATISTICS_LOADLEVELTRIGGERCOMBO_OUTSIDE_LEGAL_RANGE ((HRESULT)0x80046568L)

//
// MessageId: PP_E_AS_EVENTLOGGER_IVALID_CONFIGPTR
//
// MessageText:
//
//  Invalid configuration pointer supplied to event logger during initialization.
//
#define PP_E_AS_EVENTLOGGER_IVALID_CONFIGPTR ((HRESULT)0x80046569L)

//
// MessageId: PP_E_AS_IVALID_DOMAIN_INX
//
// MessageText:
//
//  Invalid domain index.
//
#define PP_E_AS_IVALID_DOMAIN_INX        ((HRESULT)0x8004656AL)

//
// MessageId: PP_E_AS_STATISTICS_CRITSEC_SHOTDOWN_FAILED
//
// MessageText:
//
//  Critical section returned an error during shutdown.
//
#define PP_E_AS_STATISTICS_CRITSEC_SHOTDOWN_FAILED ((HRESULT)0x8004656BL)

//
// MessageId: PP_E_AS_STATISTICS_FILEWRITE_FAILED
//
// MessageText:
//
//  Unable to write log file.
//
#define PP_E_AS_STATISTICS_FILEWRITE_FAILED ((HRESULT)0x8004656CL)

//
// MessageId: PP_E_AS_STATISTICS_LOGFILENAME_MISSING
//
// MessageText:
//
//  Log file name is not supplied during initialization.
//
#define PP_E_AS_STATISTICS_LOGFILENAME_MISSING ((HRESULT)0x8004656DL)

//
// MessageId: PP_E_AS_STATISTICS_LOGFILE_OPEN_FAILED
//
// MessageText:
//
//  Error opening log file.
//
#define PP_E_AS_STATISTICS_LOGFILE_OPEN_FAILED ((HRESULT)0x8004656EL)

//
// MessageId: PP_E_AS_GETPUIDS_INVALID_TIME_INTERVAL
//
// MessageText:
//
//  Invalid time interval between DB calls specified for get thread .
//
#define PP_E_AS_GETPUIDS_INVALID_TIME_INTERVAL ((HRESULT)0x80046571L)

//
// MessageId: PP_E_AS_STATISTICS_LOGFILEPATH_MISSING
//
// MessageText:
//
//  Config file does not contain a valid entry location which specifies path where to place error log file.
//
#define PP_E_AS_STATISTICS_LOGFILEPATH_MISSING ((HRESULT)0x80046572L)

//
// MessageId: PP_E_AS_GETPARTITIONCOUNT_FAILED
//
// MessageText:
//
//  Failed to retrieve physical partition count for this domain.
//
#define PP_E_AS_GETPARTITIONCOUNT_FAILED ((HRESULT)0x80046573L)

//
// MessageId: PP_E_AS_PUIDFILEPATH_MISSING
//
// MessageText:
//
//  Path where we will be looking for files to do ageout-from-file is missing
//
#define PP_E_AS_PUIDFILEPATH_MISSING     ((HRESULT)0x80046574L)

//
// MessageId: PP_E_AS_PUIDFILE_MISSING
//
// MessageText:
//
//  Path where we will be looking for files to do ageout-from-file is missing
//
#define PP_E_AS_PUIDFILE_MISSING         ((HRESULT)0x80046575L)

//
// MessageId: PP_E_AS_NO_PERMISSION_TORUN_AGEOUT
//
// MessageText:
//
//  This machine is not in the list of machines allowed to run ageout. 
//
#define PP_E_AS_NO_PERMISSION_TORUN_AGEOUT ((HRESULT)0x80046576L)

//
// MessageId: PP_E_AS_DEFAULTAGEOUTDAYS_INVALID
//
// MessageText:
//
//  DefaultAgeOutDays value is missing or invalid in CCM. 
//
#define PP_E_AS_DEFAULTAGEOUTDAYS_INVALID ((HRESULT)0x80046577L)

//
// MessageId: PP_E_AS_PUIDSPERCALL_INVALID
//
// MessageText:
//
//  AgeOutPuidsPerCall value is missing or invalid in CCM. 
//
#define PP_E_AS_PUIDSPERCALL_INVALID     ((HRESULT)0x80046578L)

//
// MessageId: PP_E_AS_POLICYHANDLER_NAME_MISSING
//
// MessageText:
//
//  PolicyHandler name is missing or invalid in CCM. 
//
#define PP_E_AS_POLICYHANDLER_NAME_MISSING ((HRESULT)0x80046579L)

//
// MessageId: PP_E_AS_PUIDFILE_INVALID_POLICY_NAME
//
// MessageText:
//
//  Policy name is agout file is invalid. Must be a policy existing in CCM PolicyEvaluatorPolicyHolder. 
//
#define PP_E_AS_PUIDFILE_INVALID_POLICY_NAME ((HRESULT)0x8004657AL)

//
// MessageId: PP_E_AS_PUIDFILE_INVALID_CREDTYPE
//
// MessageText:
//
//  Second occupied line in puid file has to be either credentialname or puid to indicate if file will have cred names or puids to work with
//
#define PP_E_AS_PUIDFILE_INVALID_CREDTYPE ((HRESULT)0x8004657BL)

//
// MessageId: PP_E_AS_PUIDFILE_INVALID_PUIDTYPE
//
// MessageText:
//
//  Third occupied line in puid file has to be either DECIMAL or HEX to indicate if puids will be in DECIMAL or HEX form
//
#define PP_E_AS_PUIDFILE_INVALID_PUIDTYPE ((HRESULT)0x8004657CL)

//
// MessageId: PP_E_AS_PUIDFILE_LINE_INVALID
//
// MessageText:
//
//  Line in puidfile is invalid. It has to be in the following format: credentalname,credentialtype where credential type is web or mobile or secure and credentialname is external credentail name
//
#define PP_E_AS_PUIDFILE_LINE_INVALID    ((HRESULT)0x8004657DL)

//
// MessageId: PP_E_AS_PUIDFILE_LINE_CREDENTIALTYPE_INVALID
//
// MessageText:
//
//  One of the credential names in ageout file has invalid credential type. Credentail type can be web or mobile or secure for kPasswordIndex or kMobilePINIndex or kSecurityTokenIndex respectively
//
#define PP_E_AS_PUIDFILE_LINE_CREDENTIALTYPE_INVALID ((HRESULT)0x8004657EL)

//
// MessageId: PP_E_AS_GETPUIDTHRDPL_SUBMIT_FAILED
//
// MessageText:
//
//  Queue request to thread pool for processing failed
//
#define PP_E_AS_GETPUIDTHRDPL_SUBMIT_FAILED ((HRESULT)0x8004657FL)

//
// MessageId: PP_E_AS_GETPUIDTHRDPL_INVALID_DOMAIN_ID
//
// MessageText:
//
//  Queue request to thread pool for processing failed
//
#define PP_E_AS_GETPUIDTHRDPL_INVALID_DOMAIN_ID ((HRESULT)0x80046580L)

// base 0x6600
//
// MessageId: PP_E_RNG_INVALIDNODEINDEX
//
// MessageText:
//
//  Internal error: invalid node index
//
#define PP_E_RNG_INVALIDNODEINDEX        ((HRESULT)0x80046600L)

//
// MessageId: PP_E_RNG_EMPTYTREE
//
// MessageText:
//
//  The rendering tree is empty
//
#define PP_E_RNG_EMPTYTREE               ((HRESULT)0x80046601L)

//
// MessageId: PP_E_RNG_INVALIDATTRIBUTE
//
// MessageText:
//
//  Invalid rendering attribute
//
#define PP_E_RNG_INVALIDATTRIBUTE        ((HRESULT)0x80046602L)

//
// MessageId: PP_E_RNG_INVALIDNODETYPE
//
// MessageText:
//
//  Invalid rendering node type
//
#define PP_E_RNG_INVALIDNODETYPE         ((HRESULT)0x80046603L)

//
// MessageId: PP_E_RNG_INVALIDSTACKNODE
//
// MessageText:
//
//  Internal error: invalid stack node
//
#define PP_E_RNG_INVALIDSTACKNODE        ((HRESULT)0x80046604L)

//
// MessageId: PP_E_RNG_INVALIDPARSINGSTACK
//
// MessageText:
//
//  Internal error: invalid parsing stack
//
#define PP_E_RNG_INVALIDPARSINGSTACK     ((HRESULT)0x80046605L)

//
// MessageId: PP_E_RNG_INVALIDTREENODE
//
// MessageText:
//
//  Internal error: invalid tree node
//
#define PP_E_RNG_INVALIDTREENODE         ((HRESULT)0x80046606L)

//
// MessageId: PP_E_RNG_XMLNODE_NOTALLOWED
//
// MessageText:
//
//  Invalid xml node. The xml does not conform to the curent schema specifications.
//
#define PP_E_RNG_XMLNODE_NOTALLOWED      ((HRESULT)0x80046607L)

//
// MessageId: PP_E_RNG_NOTINITIALIZED
//
// MessageText:
//
//  Internal error: object is not initialized
//
#define PP_E_RNG_NOTINITIALIZED          ((HRESULT)0x80046608L)

//
// MessageId: PP_E_RNG_HANDLE_INVALID
//
// MessageText:
//
//  Internal error: invalid handle for a rendering object 
//
#define PP_E_RNG_HANDLE_INVALID          ((HRESULT)0x80046609L)

//
// MessageId: PP_E_RNG_BAD_RENDENGINE
//
// MessageText:
//
//  Internal error: bad rendering engine object
//
#define PP_E_RNG_BAD_RENDENGINE          ((HRESULT)0x8004660AL)

//
// MessageId: PP_E_RNG_CCMVALUE_INVALID
//
// MessageText:
//
//  Rendering engine: invalid ccm value
//
#define PP_E_RNG_CCMVALUE_INVALID        ((HRESULT)0x8004660BL)

//
// MessageId: PP_E_RNG_PROP_NOTFOUND
//
// MessageText:
//
//  Rendering engine: property was not found
//
#define PP_E_RNG_PROP_NOTFOUND           ((HRESULT)0x8004660CL)

//
// MessageId: PP_E_RNG_PAGETREE_NOTFOUND
//
// MessageText:
//
//  Rendering engine: page tree cannot be found
//
#define PP_E_RNG_PAGETREE_NOTFOUND       ((HRESULT)0x8004660DL)

//
// MessageId: PP_E_RNG_DUPLICATED_PAGENAME
//
// MessageText:
//
//  Rendering engine: duplicate page name
//
#define PP_E_RNG_DUPLICATED_PAGENAME     ((HRESULT)0x8004660EL)

//
// MessageId: PP_E_RNG_PAGE_CCMPROPID_NOTFOUND
//
// MessageText:
//
//  Rendering engine: ccm property id was not found
//
#define PP_E_RNG_PAGE_CCMPROPID_NOTFOUND ((HRESULT)0x8004660FL)

//
// MessageId: PP_E_RNG_CCMSAFEARRAY_INVALID
//
// MessageText:
//
//  Rendering engine: ccm safe array is invalid
//
#define PP_E_RNG_CCMSAFEARRAY_INVALID    ((HRESULT)0x80046610L)

//
// MessageId: PP_E_RNG_CCMNAME_INVALID
//
// MessageText:
//
//  Rendering engine: ccm name is invalid
//
#define PP_E_RNG_CCMNAME_INVALID         ((HRESULT)0x80046611L)

//
// MessageId: PP_E_RNG_CCMACTION_INVALID
//
// MessageText:
//
//  Rendering engine: ccm action is invalid
//
#define PP_E_RNG_CCMACTION_INVALID       ((HRESULT)0x80046612L)

//
// MessageId: PP_E_RNG_PAGEUIMAP_INVALID
//
// MessageText:
//
//  Internal error: the page UI map is invalid
//
#define PP_E_RNG_PAGEUIMAP_INVALID       ((HRESULT)0x80046613L)

//
// MessageId: PP_E_RNG_CCM_NOTINITIALIZED
//
// MessageText:
//
//  Rendering engine: ccm is not initialized
//
#define PP_E_RNG_CCM_NOTINITIALIZED      ((HRESULT)0x80046614L)

//
// MessageId: PP_E_RNG_CCMTYPE_INVALID
//
// MessageText:
//
//  Rendering engine: ccm type is invalid
//
#define PP_E_RNG_CCMTYPE_INVALID         ((HRESULT)0x80046615L)

//
// MessageId: PP_E_RNG_CCMOBJECT_INVALID
//
// MessageText:
//
//  Rendering engine: ccm object is invalid
//
#define PP_E_RNG_CCMOBJECT_INVALID       ((HRESULT)0x80046616L)

//
// MessageId: PP_E_RNG_UIPAGESINTF_INVALID
//
// MessageText:
//
//  The rendering com interface cannot be created
//
#define PP_E_RNG_UIPAGESINTF_INVALID     ((HRESULT)0x80046617L)

//
// MessageId: PP_E_RNG_CCMCACHE_INVALID
//
// MessageText:
//
//  Rendering engine: ccm cache pointer is invalid
//
#define PP_E_RNG_CCMCACHE_INVALID        ((HRESULT)0x80046618L)

//
// MessageId: PP_E_RNG_EXPR_NULLINPUT
//
// MessageText:
//
//  Predicate expression is null
//
#define PP_E_RNG_EXPR_NULLINPUT          ((HRESULT)0x80046619L)

//
// MessageId: PP_E_RNG_EXPR_INVALID_NUMERIC
//
// MessageText:
//
//  Invalid numeric in a predicate expression
//
#define PP_E_RNG_EXPR_INVALID_NUMERIC    ((HRESULT)0x8004661AL)

//
// MessageId: PP_E_RNG_EXPR_INVALID_STRING
//
// MessageText:
//
//  Invalid string in a predicate expression
//
#define PP_E_RNG_EXPR_INVALID_STRING     ((HRESULT)0x8004661BL)

//
// MessageId: PP_E_RNG_EXPR_INVALID_OPERATOR
//
// MessageText:
//
//  Invalid operator in a predicate expression
//
#define PP_E_RNG_EXPR_INVALID_OPERATOR   ((HRESULT)0x8004661CL)

//
// MessageId: PP_E_RNG_EXPR_NOMATCHINGPAR
//
// MessageText:
//
//  Mismatch parentheses in a predicate expression
//
#define PP_E_RNG_EXPR_NOMATCHINGPAR      ((HRESULT)0x8004661DL)

//
// MessageId: PP_E_RNG_EXPR_INVALID_STACK
//
// MessageText:
//
//  Internal error: invalid stack in evaluating a predicate expression
//
#define PP_E_RNG_EXPR_INVALID_STACK      ((HRESULT)0x8004661EL)

//
// MessageId: PP_E_RNG_EXPR_INVALID_ARGCOUNT
//
// MessageText:
//
//  Invalid argument count in a predicate expression
//
#define PP_E_RNG_EXPR_INVALID_ARGCOUNT   ((HRESULT)0x8004661FL)

//
// MessageId: PP_E_RNG_EXPR_INVALID_COMMA
//
// MessageText:
//
//  Invalid use of a comma operator in a predicate expression
//
#define PP_E_RNG_EXPR_INVALID_COMMA      ((HRESULT)0x80046620L)

//
// MessageId: PP_E_RNG_EXPR_INVALID_TOKEN
//
// MessageText:
//
//  Invalid token in a predicate expression
//
#define PP_E_RNG_EXPR_INVALID_TOKEN      ((HRESULT)0x80046621L)

//
// MessageId: PP_E_RNG_EXPR_NOADVANCE
//
// MessageText:
//
//  Internal error: the stack evaluation is cycling
//
#define PP_E_RNG_EXPR_NOADVANCE          ((HRESULT)0x80046622L)

//
// MessageId: PP_E_RNG_EXPR_EMPTY
//
// MessageText:
//
//  The expression to evaluate is empty
//
#define PP_E_RNG_EXPR_EMPTY              ((HRESULT)0x80046623L)

//
// MessageId: PP_E_RNG_EXPR_INVALID_CALLBACK
//
// MessageText:
//
//  Invalid evaluation function
//
#define PP_E_RNG_EXPR_INVALID_CALLBACK   ((HRESULT)0x80046624L)

//
// MessageId: PP_E_RNG_EXPR_INVALID_RPN
//
// MessageText:
//
//  Internal error: invalid RPN object 
//
#define PP_E_RNG_EXPR_INVALID_RPN        ((HRESULT)0x80046625L)

//
// MessageId: PP_E_RNG_EXPR_INVALID_RPNINDEX
//
// MessageText:
//
//  Internal error: invalid RPN index
//
#define PP_E_RNG_EXPR_INVALID_RPNINDEX   ((HRESULT)0x80046626L)

//
// MessageId: PP_E_RNG_EXPR_TYPE_NOTSUPPORTED
//
// MessageText:
//
//  The VT type is not supported in the current version
//
#define PP_E_RNG_EXPR_TYPE_NOTSUPPORTED  ((HRESULT)0x80046627L)

// base 0x6700
//
// MessageId: PP_E_FLOWTOKEN_INVALID_PAGEID
//
// MessageText:
//
//  Invalid Page ID for the flow token.
//
#define PP_E_FLOWTOKEN_INVALID_PAGEID    ((HRESULT)0x80046700L)

//
// MessageId: PP_E_FLOWTOKEN_INVALID_FLOWID
//
// MessageText:
//
//  Invalid flow ID for the flow token.
//
#define PP_E_FLOWTOKEN_INVALID_FLOWID    ((HRESULT)0x80046701L)

//
// MessageId: PP_E_FLOWTOKEN_INVALID_PUID
//
// MessageText:
//
//  Invalid PUID for the flow token.
//
#define PP_E_FLOWTOKEN_INVALID_PUID      ((HRESULT)0x80046702L)

//
// MessageId: PP_E_FLOWTOKEN_INVALID_OTHERDATA
//
// MessageText:
//
//  Data is invalid for the flow token.
//
#define PP_E_FLOWTOKEN_INVALID_OTHERDATA ((HRESULT)0x80046703L)

//
// MessageId: PP_E_FLOWTOKEN_MISSING
//
// MessageText:
//
//  Required flow token is missing.
//
#define PP_E_FLOWTOKEN_MISSING           ((HRESULT)0x80046704L)

//
// MessageId: PP_E_FLOWTOKEN_MISSING_PAGEID
//
// MessageText:
//
//  Page ID is missing in flow token.
//
#define PP_E_FLOWTOKEN_MISSING_PAGEID    ((HRESULT)0x80046705L)

//
// MessageId: PP_E_FLOWTOKEN_UNINITIALIZED
//
// MessageText:
//
//  InitializeFlow has not been called .
//
#define PP_E_FLOWTOKEN_UNINITIALIZED     ((HRESULT)0x80046707L)

//
// MessageId: PP_E_FLOW_DISABLED
//
// MessageText:
//
//  The current flow is being disabled.
//
#define PP_E_FLOW_DISABLED               ((HRESULT)0x80046708L)

// base 0x6800
//
// MessageId: PP_E_AOP_ISFLAGSET_INVALID_FIELD
//
// MessageText:
//
//  IsFlagSet predicate was supplied invalid parameter.
//
#define PP_E_AOP_ISFLAGSET_INVALID_FIELD ((HRESULT)0x80046800L)

//
// MessageId: PP_E_AOP_ISNAMESPACEPRESENTINLIST_BAG_MISSING_NAMESPACE
//
// MessageText:
//
//  IsNamePresentInList predicate,  namespace property is not present in propertybag.
//
#define PP_E_AOP_ISNAMESPACEPRESENTINLIST_BAG_MISSING_NAMESPACE ((HRESULT)0x80046801L)

//
// MessageId: PP_E_AOP_INVALID_CRED_NAME
//
// MessageText:
//
//  Credential name is not valid in CredentialBag for creation of message to HM.
//
#define PP_E_AOP_INVALID_CRED_NAME       ((HRESULT)0x80046802L)

//
// MessageId: PP_E_AOP_FAILED_TO_SEND_HM_POST
//
// MessageText:
//
//  Post to HM failed.
//
#define PP_E_AOP_FAILED_TO_SEND_HM_POST  ((HRESULT)0x80046803L)

//
// MessageId: PP_E_AOP_HMPOST_RESPONSE_TOO_LARGE
//
// MessageText:
//
//  Too much data to be posted to HM.
//
#define PP_E_AOP_HMPOST_RESPONSE_TOO_LARGE ((HRESULT)0x80046804L)

//
// MessageId: PP_E_AOP_HMPOST_RESPONSE_FAIL
//
// MessageText:
//
//  Ageout request to HM failed, can not age out this account.
//
#define PP_E_AOP_HMPOST_RESPONSE_FAIL    ((HRESULT)0x80046805L)

//
// MessageId: PP_E_AOP_EASIDELETEACTION_FAILED
//
// MessageText:
//
//  Easi account deletion failed.
//
#define PP_E_AOP_EASIDELETEACTION_FAILED ((HRESULT)0x80046806L)

//
// MessageId: PP_E_AOP_HMDELETEACTION_FAILED
//
// MessageText:
//
//  HM account deletion failed.
//
#define PP_E_AOP_HMDELETEACTION_FAILED   ((HRESULT)0x80046807L)

//
// MessageId: PP_E_AOP_MSNDELETEACTION_FAILED
//
// MessageText:
//
//  MSN account deletion failed.
//
#define PP_E_AOP_MSNDELETEACTION_FAILED  ((HRESULT)0x80046808L)

//
// MessageId: PP_E_AOP_LOADCREDBAG_FAILED
//
// MessageText:
//
//  MSN account deletion failed.
//
#define PP_E_AOP_LOADCREDBAG_FAILED      ((HRESULT)0x80046809L)

// base 0x6900
//Perfmon
//#definedefine PP_E_PERFMON_BASE 0x6900
//
// MessageId: PP_E_PERFMON_INVALID_INSTANCECLASS
//
// MessageText:
//
//  Invalid perfmon instance class
//
#define PP_E_PERFMON_INVALID_INSTANCECLASS ((HRESULT)0x80046900L)

//
// MessageId: PP_E_PERFMON_INVALID_INSTANCEXML
//
// MessageText:
//
//  Invalid perfmon instance configuration xml
//
#define PP_E_PERFMON_INVALID_INSTANCEXML ((HRESULT)0x80046901L)

//
// MessageId: PP_E_PERFMON_DUPINSTANCEID
//
// MessageText:
//
//  Duplicated perfmon instance id
//
#define PP_E_PERFMON_DUPINSTANCEID       ((HRESULT)0x80046902L)

//
// MessageId: PP_E_PERFMON_DUPINSTANCENAME
//
// MessageText:
//
//  Duplicated perfmon instance name
//
#define PP_E_PERFMON_DUPINSTANCENAME     ((HRESULT)0x80046903L)

//
// MessageId: PP_E_PERFMON_INVALIDINSTANCEID
//
// MessageText:
//
//  invalidate perfmon instance id
//
#define PP_E_PERFMON_INVALIDINSTANCEID   ((HRESULT)0x80046904L)

//
// MessageId: PP_E_PERFMON_INVALIDINSTANCENAME
//
// MessageText:
//
//  invalidate perfmon instance name
//
#define PP_E_PERFMON_INVALIDINSTANCENAME ((HRESULT)0x80046905L)

//
// MessageId: PP_E_PERFMON_NOTOTAL
//
// MessageText:
//
//  Can't find _Total instance
//
#define PP_E_PERFMON_NOTOTAL             ((HRESULT)0x80046906L)

// base 0x7000
//
// MessageId: PP_E_CONFIGSERVER_BAD_FILEVERINFOSIZE
//
// MessageText:
//
//  The client config service has detected an invalid size for the VS_FIXEDFILEINFO structure.
//
#define PP_E_CONFIGSERVER_BAD_FILEVERINFOSIZE ((HRESULT)0x80047000L)

//
// MessageId: PP_E_CONFIGSERVER_BAD_FIXEDFILEVERINFOSIZE
//
// MessageText:
//
//  The client config service has detected an incorrect size for the VS_FIXEDFILEINFO structure.
//
#define PP_E_CONFIGSERVER_BAD_FIXEDFILEVERINFOSIZE ((HRESULT)0x80047001L)

//
// MessageId: PP_E_CONFIGSERVER_BAD_UILOCALPATH
//
// MessageText:
//
//  The client config service has failed to determine the local path for the .SRFs.
//
#define PP_E_CONFIGSERVER_BAD_UILOCALPATH ((HRESULT)0x80047011L)

//
// MessageId: PP_E_CONFIGSERVER_FILESIZE
//
// MessageText:
//
//  The client config service found a file that is bigger than 200K bytes.
//
#define PP_E_CONFIGSERVER_FILESIZE       ((HRESULT)0x80047012L)

//
// MessageId: PP_E_CONFIGSERVER_GETFILESIZE
//
// MessageText:
//
//  The client config service failed to determine the file size.
//
#define PP_E_CONFIGSERVER_GETFILESIZE    ((HRESULT)0x80047013L)

//
// MessageId: PP_E_CONFIGSERVER_CANAME
//
// MessageText:
//
//  The Passport CA service name that was retrieved from CCM is bad.
//
#define PP_E_CONFIGSERVER_CANAME         ((HRESULT)0x80047015L)

//
// MessageId: PP_E_CONFIGSERVER_NO_CACERT
//
// MessageText:
//
//  No certificate was found for the Passport CA service.
//
#define PP_E_CONFIGSERVER_NO_CACERT      ((HRESULT)0x80047016L)

//
// MessageId: PP_E_CONFIGSERVER_CACERT_CONVERSION
//
// MessageText:
//
//  The client config service failed to retrieve the data for the Passport CA service.
//
#define PP_E_CONFIGSERVER_CACERT_CONVERSION ((HRESULT)0x80047017L)

// base 0x7200
//
// MessageId: PP_E_CCMCERT_NO_CERTSITENAME
//
// MessageText:
//
//  The site certificate does not have a name for the Common Name ("CN") component in Subject field.
//
#define PP_E_CCMCERT_NO_CERTSITENAME     ((HRESULT)0x80047200L)

//
// MessageId: PP_E_CCMCERT_MISMATCH_SITENAME
//
// MessageText:
//
//  The site name and the Common Name in the Subject field of the site certificate do not match.
//
#define PP_E_CCMCERT_MISMATCH_SITENAME   ((HRESULT)0x80047201L)

//
// MessageId: PP_E_CCMCERT_NO_PUBLICKEYINFO
//
// MessageText:
//
//  The site certificate does not have the Subject Public Key Info field.
//
#define PP_E_CCMCERT_NO_PUBLICKEYINFO    ((HRESULT)0x80047202L)

//
// MessageId: PP_E_CCMCERT_MISMATCH_KEYALGO
//
// MessageText:
//
//  The algorithm identified in the Public Key Info field in the site certificate is not RSA. Only RSA is supported.
//
#define PP_E_CCMCERT_MISMATCH_KEYALGO    ((HRESULT)0x80047203L)

//
// MessageId: PP_E_CCMCERT_BAD_KEYLEN
//
// MessageText:
//
//  The key length identified in the Public Key Info field in the site certificate is not supported. Only key lengths between 512 to 2048 bits are supported.
//
#define PP_E_CCMCERT_BAD_KEYLEN          ((HRESULT)0x80047204L)

//
// MessageId: PP_E_CCMCERT_BAD_KEYUSAGE
//
// MessageText:
//
//  The key usage in the site certificate is not supported. Only key encipherment and digital signature are supported.
//
#define PP_E_CCMCERT_BAD_KEYUSAGE        ((HRESULT)0x80047205L)

//
// MessageId: PP_E_CCMCERT_BASIC_CONSTRAINT
//
// MessageText:
//
//  The Basic Constraint field in the site certificate is set. The site certificate can not be a Certificate Authority certificate.
//
#define PP_E_CCMCERT_BASIC_CONSTRAINT    ((HRESULT)0x80047207L)

//
// MessageId: PP_E_CCMCERT_UNIQUENAME_BADARG
//
// MessageText:
//
//  A unique name can not be constructed based on the thumbprint of the site certificate and the site name. One of these values is invalid.
//
#define PP_E_CCMCERT_UNIQUENAME_BADARG   ((HRESULT)0x80047208L)

//
// MessageId: PP_E_CCMCERT_SITECERT_CCMBLOBPTR
//
// MessageText:
//
//  This is an internal error while reading the site certificate from CCM. A NULL pointer is returned for the certificate data.
//
#define PP_E_CCMCERT_SITECERT_CCMBLOBPTR ((HRESULT)0x80047209L)

//
// MessageId: PP_E_CCMCERT_SITECERT_BADCERTTYPE
//
// MessageText:
//
//  This is an internal error while reading the site certificate from CCM. An unexpected variant type was returned for the certificate data.
//
#define PP_E_CCMCERT_SITECERT_BADCERTTYPE ((HRESULT)0x80047210L)

//
// MessageId: PP_E_CCMCERT_SITECERT_CCMBLOBCERTSIZE
//
// MessageText:
//
//  This is an internal error while reading the site certificate from CCM. An unexpected length was returned for the certificate data.
//
#define PP_E_CCMCERT_SITECERT_CCMBLOBCERTSIZE ((HRESULT)0x80047211L)

//
// MessageId: PP_E_CCMCERT_SITECERT_CCMBLOBCERTPTR
//
// MessageText:
//
//  This is an internal error while reading the site certificate from CCM. A NULL byte pointer is returned for the certificate data.
//
#define PP_E_CCMCERT_SITECERT_CCMBLOBCERTPTR ((HRESULT)0x80047212L)

//
// MessageId: PP_E_CCMCERTS_TOBASE64
//
// MessageText:
//
//  This is an internal error while base64 encoding a site certificate. There was no data.
//
#define PP_E_CCMCERTS_TOBASE64           ((HRESULT)0x80047213L)

//
// MessageId: PP_E_CCMCERT_TOOMANY_PARENTOBJECTS
//
// MessageText:
//
//  There are more than 32 CA partners for this CA certificate.
//
#define PP_E_CCMCERT_TOOMANY_PARENTOBJECTS ((HRESULT)0x80047214L)

// base 0x7300
//
// MessageId: PP_E_CCMPRXY_MACHINE_NOT_CONNECTED_TO_NETWORK_DEVICE
//
// MessageText:
//
//  This machine is not connected to any network device.
//
#define PP_E_CCMPRXY_MACHINE_NOT_CONNECTED_TO_NETWORK_DEVICE ((HRESULT)0x80047300L)

// base 0x7400
//Cobranding Errors
#define PP_E_COBRANDING_BASE 0x7400
//
// MessageId: PP_E_PROVENT_COBRANDING_NOT_PRESENT
//
// MessageText:
//
//  Cobranding node was not present for site.
//
#define PP_E_PROVENT_COBRANDING_NOT_PRESENT ((HRESULT)0x80047400L)

//
// MessageId: PP_E_PROVENT_SS_COBRANDING_NOT_PRESENT
//
// MessageText:
//
//  SS_Cobranding node was not present for namespace.
//
#define PP_E_PROVENT_SS_COBRANDING_NOT_PRESENT ((HRESULT)0x80047401L)

//
// MessageId: PP_E_PROVENT_TC_COBRANDING_NOT_PRESENT
//
// MessageText:
//
//  Cobranding_TC node was not present for site.
//
#define PP_E_PROVENT_TC_COBRANDING_NOT_PRESENT ((HRESULT)0x80047402L)

//
// MessageId: PP_E_COBRANDING_SERVICESPONSOR_EMPTY
//
// MessageText:
//
//  SetCobrandingServiceSponsor was called with an empty value for pwszServiceSponsor.
//
#define PP_E_COBRANDING_SERVICESPONSOR_EMPTY ((HRESULT)0x80047403L)

//
// MessageId: PP_E_COBRANDING_INVALID_SITEID_PASSED
//
// MessageText:
//
//  Invalid siteID was passed.
//
#define PP_E_COBRANDING_INVALID_SITEID_PASSED ((HRESULT)0x80047404L)

//
// MessageId: PP_E_COBRANDING_VALIDATION_FAILED
//
// MessageText:
//
//  Cobranding validation failed during insert.
//
#define PP_E_COBRANDING_VALIDATION_FAILED ((HRESULT)0x80047405L)

// base 0x7500
//------------------------------------------------------------------------------
// TaskFlow/EXTERNAL properties: remote soap persist/validate errors
//------------------------------------------------------------------------------
#define PP_E_TF_BASE 0x7500
//
// MessageId: PP_E_EXTERNALPROPERTY_PERSIST_FAILED
//
// MessageText:
//
//  Soap call to external data store to persist failed.
//
#define PP_E_EXTERNALPROPERTY_PERSIST_FAILED ((HRESULT)0x80047500L)

//
// MessageId: PP_E_EXTERNALPROPERTY_SOAPVALIDATE_FAILED
//
// MessageText:
//
//  Soap call to external data store to validate failed.
//
#define PP_E_EXTERNALPROPERTY_SOAPVALIDATE_FAILED ((HRESULT)0x80047501L)

//
// MessageId: PP_E_EXTERNALPROPERTY_REQUIREDNOTEXIST
//
// MessageText:
//
//  Error processing external task check that the xml is correct in the taskflow.
//
#define PP_E_EXTERNALPROPERTY_REQUIREDNOTEXIST ((HRESULT)0x80047502L)

//
// MessageId: PP_E_EXTERNALPROPERTY_NONCE_INVALID
//
// MessageText:
//
//  The nonce passed back from the external partner is missing.
//
#define PP_E_EXTERNALPROPERTY_NONCE_INVALID ((HRESULT)0x80047503L)

//
// MessageId: PP_E_EXTERNALPROPERTY_NONCE_MISMATCH
//
// MessageText:
//
//  The nonce passed back from partner does not match what we sent.
//
#define PP_E_EXTERNALPROPERTY_NONCE_MISMATCH ((HRESULT)0x80047504L)

//
// MessageId: PP_E_TMPREDICATE_FUNC_NOT_SUPPORTED
//
// MessageText:
//
//  A predicate is being used in the task flow XML that does not have a callback.
//
#define PP_E_TMPREDICATE_FUNC_NOT_SUPPORTED ((HRESULT)0x80047505L)

//
// MessageId: PP_E_TM_TMDATA_ATTRIBUTE_DOESNOTEXIST
//
// MessageText:
//
//  Attempted to lookup attribute that does not exist in the taskmanager map.
//
#define PP_E_TM_TMDATA_ATTRIBUTE_DOESNOTEXIST ((HRESULT)0x80047506L)

//
// MessageId: PP_E_TM_TMDATA_CUSTOMTAG_DOESNOTEXIST
//
// MessageText:
//
//  Trying to lookup a tag from the map that does not exist.
//
#define PP_E_TM_TMDATA_CUSTOMTAG_DOESNOTEXIST ((HRESULT)0x80047507L)

//
// MessageId: PP_E_TM_TMDATA_ARRAY_OUTOFBOUND
//
// MessageText:
//
//  The index position to lookup passed in by the Callee was out of bounds
//
#define PP_E_TM_TMDATA_ARRAY_OUTOFBOUND  ((HRESULT)0x80047508L)

//
// MessageId: PP_E_TM_TMDATA_CUSTOMTAG_ATTRIUBTE_NOTSUPPORTED
//
// MessageText:
//
//  The custom tag passed in is not supported.
//
#define PP_E_TM_TMDATA_CUSTOMTAG_ATTRIUBTE_NOTSUPPORTED ((HRESULT)0x80047509L)

//
// MessageId: PP_E_TM_PREDICATE_DLL_NOT_LOADED
//
// MessageText:
//
//  Trying to run predicates when the predicate dll has not been loaded.
//
#define PP_E_TM_PREDICATE_DLL_NOT_LOADED ((HRESULT)0x8004750AL)

//
// MessageId: PP_E_TM_NAVIGATION_STACK_UNDERFLOW
//
// MessageText:
//
//  Trying to pop off more items on the navigation stack than currently exist.
//
#define PP_E_TM_NAVIGATION_STACK_UNDERFLOW ((HRESULT)0x8004750BL)

//
// MessageId: PP_E_TM_INVALIDARG
//
// MessageText:
//
//  A parameter passed to a task manager function was invalid. Most likely due to a null pointer.
//
#define PP_E_TM_INVALIDARG               ((HRESULT)0x8004750CL)    

//
// MessageId: E_TM_CANNOTPOPOFFPERSISTEDTASK
//
// MessageText:
//
//  Attempting to navigate before a task that has already been persisted
//
#define E_TM_CANNOTPOPOFFPERSISTEDTASK   ((HRESULT)0x8004750DL)    

//
// MessageId: E_TM_INVALIDTASKTYPE
//
// MessageText:
//
//  Check task type in task flow xml, a task type is present that is not supported.
//
#define E_TM_INVALIDTASKTYPE             ((HRESULT)0x8004750EL)    

//
// MessageId: E_TM_NONNUMERICTASKTYPE
//
// MessageText:
//
//  Task type in flow xml is non numeric.
//
#define E_TM_NONNUMERICTASKTYPE          ((HRESULT)0x8004750FL)    

//
// MessageId: E_TM_CORRUPTEDSTACK
//
// MessageText:
//
//  The navigation stack is corrupted
//
#define E_TM_CORRUPTEDSTACK              ((HRESULT)0x80047510L)

//
// MessageId: E_TM_TASKFLOWISNOTACCMBLOB
//
// MessageText:
//
//  The task flow property in CCM was not returned as a blob
//
#define E_TM_TASKFLOWISNOTACCMBLOB       ((HRESULT)0x80047511L)

//
// MessageId: E_TM_TASKFLOWCCMBLOBINVALID
//
// MessageText:
//
//  The task flow property CCM Blob returned was invalid
//
#define E_TM_TASKFLOWCCMBLOBINVALID      ((HRESULT)0x80047512L)

// base 0x7701
//
// MessageId: PP_E_SPA_BASE64DECODE_FAILURE
//
// MessageText:
//
//  Base64 Decode failed.
//
#define PP_E_SPA_BASE64DECODE_FAILURE    ((HRESULT)0x80047701L)

//
// MessageId: PP_E_SPA_INVALID_AUTH_MESSAGE
//
// MessageText:
//
//  Invalid user authentication message.
//
#define PP_E_SPA_INVALID_AUTH_MESSAGE    ((HRESULT)0x80047702L)

//
// MessageId: PP_E_SPA_UNSUPPORTED_AUTH_MSG_TYPE
//
// MessageText:
//
//  Unsupported Authentication message type.
//
#define PP_E_SPA_UNSUPPORTED_AUTH_MSG_TYPE ((HRESULT)0x80047703L)

//
// MessageId: PP_E_SPA_INVALID_NONCE
//
// MessageText:
//
//  Invalid Nonce.
//
#define PP_E_SPA_INVALID_NONCE           ((HRESULT)0x80047704L)

//
// MessageId: PP_E_SPA_INVALID_CHALLENGE_RESPONSE
//
// MessageText:
//
//  Invalid Challenge-Response.
//
#define PP_E_SPA_INVALID_CHALLENGE_RESPONSE ((HRESULT)0x80047705L)

//
// MessageId: PP_E_SPA_USERBLOB_NOT_INIT
//
// MessageText:
//
//  The user blob has not been initialized.
//
#define PP_E_SPA_USERBLOB_NOT_INIT       ((HRESULT)0x80047706L)

// base 0x7800
//CCM Proxy errors
//#define PP_E_CCMCACHE_BASE  0x7800
//
// MessageId: PP_E_CCMPROXY_NODEVICE
//
// MessageText:
//
//  Service can not start due to error (hr=%1)
//
#define PP_E_CCMPROXY_NODEVICE           ((HRESULT)0x80047800L)

//
// MessageId: PP_E_CSMPROXY_SERVICE_NOIP
//
// MessageText:
//
//  can't find the DIP for the service
//
#define PP_E_CSMPROXY_SERVICE_NOIP       ((HRESULT)0x80047801L)

//
// MessageId: PP_E_INVALID_IP
//
// MessageText:
//
//  the IP address is invalid
//
#define PP_E_INVALID_IP                  ((HRESULT)0x80047802L)

//
// MessageId: PP_E_INVALID_IP_NOT_IN_CSM
//
// MessageText:
//
//  the IP address is invalid
//
#define PP_E_INVALID_IP_NOT_IN_CSM       ((HRESULT)0x80047803L)

//
// MessageId: PP_E_INVALID_PENDING_ACTION
//
// MessageText:
//
//  the pending action is invalid
//
#define PP_E_INVALID_PENDING_ACTION      ((HRESULT)0x80047804L)

//
// MessageId: PP_E_INVALID_DEVICE_DIP
//
// MessageText:
//
//  the dip info structure returned by device is invalid
//
#define PP_E_INVALID_DEVICE_DIP          ((HRESULT)0x80047805L)

//
// MessageId: PP_E_CCM_CSM_MISMATCH
//
// MessageText:
//
//  found a inconsistency between CSM and CCM
//
#define PP_E_CCM_CSM_MISMATCH            ((HRESULT)0x80047806L)

//
// MessageId: PP_E_INVALID_IADMIN_INFO
//
// MessageText:
//
//  The IAdmin suppress info is incorrect
//
#define PP_E_INVALID_IADMIN_INFO         ((HRESULT)0x80047807L)

//
// MessageId: PP_E_NO_MONAME
//
// MessageText:
//
//  The IAdmin suppress info is incorrect
//
#define PP_E_NO_MONAME                   ((HRESULT)0x80047808L)

// base 0x7850
//
// MessageId: PP_E_UPDATE_COUNTRY
//
// MessageText:
//
//  This is an internal error to switch the user from secret question and answer update UI to country update UI.
//
#define PP_E_UPDATE_COUNTRY              ((HRESULT)0x80047850L)

//
// MessageId: PP_E_STRONG_PASSWORD_TOO_SHORT
//
// MessageText:
//
//  The given password does not meet the strong password criteria. It must be at least 7 characters long.
//
#define PP_E_STRONG_PASSWORD_TOO_SHORT   ((HRESULT)0x80047851L)

//
// MessageId: PP_E_BLANK_ALT_EMAIL
//
// MessageText:
//
//  No alternate email is entered.
//
#define PP_E_BLANK_ALT_EMAIL             ((HRESULT)0x80047852L)

//
// MessageId: PP_E_BLANK_ALT_EMAILRETYPE
//
// MessageText:
//
//  Retype alternate email field is empty
//
#define PP_E_BLANK_ALT_EMAILRETYPE       ((HRESULT)0x80047853L)

//
// MessageId: PP_E_ALT_EMAIL_MISMATCH
//
// MessageText:
//
//  Mismatching alternate email address entries.
//
#define PP_E_ALT_EMAIL_MISMATCH          ((HRESULT)0x80047854L)

//
// MessageId: PP_E_ALT_EMAIL_SAME_AS_MEMBERNAME
//
// MessageText:
//
//  Alternate email address can not equal to the member name.
//
#define PP_E_ALT_EMAIL_SAME_AS_MEMBERNAME ((HRESULT)0x80047855L)

//
// MessageId: PP_E_INVALID_UIPARAMS
//
// MessageText:
//
//  The member variable m_pUIParams is null or invalid.
//
#define PP_E_INVALID_UIPARAMS            ((HRESULT)0x80047856L)

//
// MessageId: PP_E_PROFILE_ACCRUAL_REQUIRED
//
// MessageText:
//
//  Profile accrual is required. The interface does not support accrual.
//
#define PP_E_PROFILE_ACCRUAL_REQUIRED    ((HRESULT)0x80047857L)

//
// MessageId: PP_E_EMAIL_VALIDATION_REQUIRED_WARNING
//
// MessageText:
//
//  Email validation warning is required for the account
//
#define PP_E_EMAIL_VALIDATION_REQUIRED_WARNING ((HRESULT)0x80047858L)

//
// MessageId: PP_E_EMAIL_VALIDATION_REQUIRED_BLOCKED
//
// MessageText:
//
//  Email validation is required for the account
//
#define PP_E_EMAIL_VALIDATION_REQUIRED_BLOCKED ((HRESULT)0x80047859L)

//
// MessageId: PP_E_BAD_FEDERATED_NAMESPACE
//
// MessageText:
//
//  Federated namespace missing required properties
//
#define PP_E_BAD_FEDERATED_NAMESPACE     ((HRESULT)0x8004785AL)

//
// MessageId: PP_E_ACCOUNT_VERIFY_CANCEL
//
// MessageText:
//
//  User pressed cancel on account verification page
//
#define PP_E_ACCOUNT_VERIFY_CANCEL       ((HRESULT)0x8004785BL)

//
// MessageId: PP_E_ALT_EMAIL_TOO_LONG
//
// MessageText:
//
//  Alternate email address is too long
//
#define PP_E_ALT_EMAIL_TOO_LONG          ((HRESULT)0x8004785CL)

//
// MessageId: PP_E_ALT_EMAIL_INVALID
//
// MessageText:
//
//  Alternate email address is incorrectly formatted
//
#define PP_E_ALT_EMAIL_INVALID           ((HRESULT)0x8004785DL)

//base 0x7900
// Errors
//
// MessageId: PP_E_FWORDS_INVALID_VARIANTVALUE
//
// MessageText:
//
//  Forbidden words retrieval: Expected value retrieved from CCM is a string 
//
#define PP_E_FWORDS_INVALID_VARIANTVALUE ((HRESULT)0x80047901L)

//
// MessageId: PP_E_FWORDS_EMPTY_STRING
//
// MessageText:
//
//  Forbidden words retrieval: List is empty
//
#define PP_E_FWORDS_EMPTY_STRING         ((HRESULT)0x80047902L)

//
// MessageId: PP_E_FWORDS_EMPTY_WORD
//
// MessageText:
//
//  Forbidden words retrieval: the word entered has zero length
//
#define PP_E_FWORDS_EMPTY_WORD           ((HRESULT)0x80047903L)

//base 0x7A00
// Errors
#define PP_E_CLS3RA_BASE  0x7A00
//
// MessageId: PP_E_CLS3RA_INVALIDARG
//
// MessageText:
//
//  One of the argument passed is invalid.
//
#define PP_E_CLS3RA_INVALIDARG           ((HRESULT)0x80047A00L)

//
// MessageId: PP_E_CLS3RA_INVALIDTICKET
//
// MessageText:
//
//  Failed to validate authenticiation ticket.
//
#define PP_E_CLS3RA_INVALIDTICKET        ((HRESULT)0x80047A01L)

//
// MessageId: PP_E_CLS3RA_CERTAUTHREQUIRED
//
// MessageText:
//
//  Certificate authentication is required to complete this operation.
//
#define PP_E_CLS3RA_CERTAUTHREQUIRED     ((HRESULT)0x80047A02L)

//
// MessageId: PP_E_CLS3RA_CLIENTCERTMISSING
//
// MessageText:
//
//  Client certificate is missing or bad in SSL authentication.
//
#define PP_E_CLS3RA_CLIENTCERTMISSING    ((HRESULT)0x80047A03L)

//
// MessageId: PP_E_CLS3RA_CLIENTCERTMISMATCH
//
// MessageText:
//
//  Client certificate does not match for the authorized sites client certifcate.
//
#define PP_E_CLS3RA_CLIENTCERTMISMATCH   ((HRESULT)0x80047A04L)

//
// MessageId: PP_E_CLS3RA_NOTAUTHORIZED
//
// MessageText:
//
//  User is not authozied to perform requested operation.
//
#define PP_E_CLS3RA_NOTAUTHORIZED        ((HRESULT)0x80047A05L)

//
// MessageId: PP_E_CLS3RA_INVALIDSUBJECT
//
// MessageText:
//
//  Subject PUID is invalid, failed to map subject puid to valid member name.
//
#define PP_E_CLS3RA_INVALIDSUBJECT       ((HRESULT)0x80047A06L)

//
// MessageId: PP_E_CLS3RA_APPROVALFAILED
//
// MessageText:
//
//  Failed to approve the specified user.
//
#define PP_E_CLS3RA_APPROVALFAILED       ((HRESULT)0x80047A07L)

//
// MessageId: PP_E_CLS3RA_INVALIDPKCS10
//
// MessageText:
//
//  PKCS10 in the request is invalid.
//
#define PP_E_CLS3RA_INVALIDPKCS10        ((HRESULT)0x80047A08L)

//
// MessageId: PP_E_CLS3RA_INVALIDSENDER
//
// MessageText:
//
//  Caller PUID is invalid, failed to map caller puid to valid member name.
//
#define PP_E_CLS3RA_INVALIDSENDER        ((HRESULT)0x80047A09L)

//
// MessageId: PP_E_CLS3RA_INVALIDSUBJECTINPKCS10
//
// MessageText:
//
//  Subject name in the PKCS10 is missing or not same as caller.
//
#define PP_E_CLS3RA_INVALIDSUBJECTINPKCS10 ((HRESULT)0x80047A0AL)

//
// MessageId: PP_E_CLS3RA_ICSMISSING
//
// MessageText:
//
//  Identiry confirmation string is missing in the PKCS10 request.
//
#define PP_E_CLS3RA_ICSMISSING           ((HRESULT)0x80047A0BL)

//
// MessageId: PP_E_CLS3RA_ICSINVALID
//
// MessageText:
//
//  Either Identiry confirmation string is wrong or the caller is not approved.
//
#define PP_E_CLS3RA_ICSINVALID           ((HRESULT)0x80047A0CL)

//
// MessageId: PP_E_CLS3RA_ICSSTALE
//
// MessageText:
//
//  Identiry confirmation string is already consumed.
//
#define PP_E_CLS3RA_ICSSTALE             ((HRESULT)0x80047A0DL)

//
// MessageId: PP_E_CLS3RA_PROVISIONFAILED
//
// MessageText:
//
//  Failed to provision certificate.
//
#define PP_E_CLS3RA_PROVISIONFAILED      ((HRESULT)0x80047A0EL)

//
// MessageId: PP_E_CLS3RA_CAFAILED
//
// MessageText:
//
//  Passport CA failed to issue certificate.
//
#define PP_E_CLS3RA_CAFAILED             ((HRESULT)0x80047A0FL)

//
// MessageId: PP_E_CLS3RA_MISSINGTHUMBPRINT
//
// MessageText:
//
//  Certificate thumbprint parameter is missing.
//
#define PP_E_CLS3RA_MISSINGTHUMBPRINT    ((HRESULT)0x80047A10L)

//
// MessageId: PP_E_CLS3RA_ASSOCFAILED
//
// MessageText:
//
//  Failed to assocaite certificate with caller account.
//
#define PP_E_CLS3RA_ASSOCFAILED          ((HRESULT)0x80047A11L)

//
// MessageId: PP_E_CLS3RA_NOPENDINGASSOCS
//
// MessageText:
//
//  Caller do not have any pending associations or the thumbprint is invalid.
//
#define PP_E_CLS3RA_NOPENDINGASSOCS      ((HRESULT)0x80047A12L)

//
// MessageId: PP_S_CLS3RA_MOREDATA
//
// MessageText:
//
//  More data is available for the query request.
//
#define PP_S_CLS3RA_MOREDATA             ((HRESULT)0x00047A13L)

//
// MessageId: PP_E_CLS3RA_NOPARTNERSITEID
//
// MessageText:
//
//  No partner site is configured under the RAPolicySettings object. 
//
#define PP_E_CLS3RA_NOPARTNERSITEID      ((HRESULT)0x80047A14L)

//
// MessageId: PP_E_CLS3RA_INVALIDDATE
//
// MessageText:
//
//  Failed to convert DATE to DBDATETIME. 
//
#define PP_E_CLS3RA_INVALIDDATE          ((HRESULT)0x80047A15L)

//
// MessageId: PP_E_CLS3RA_HPROV_FAILED
//
// MessageText:
//
//  Failed to get the crypto provider for RA Certificate. 
//
#define PP_E_CLS3RA_HPROV_FAILED         ((HRESULT)0x80047A16L)

//base 0x8000
//code manager error code
//#define EVT_E_BASE 0x8000
//
// MessageId: EVT_E_INVALIDCAT
//
// MessageText:
//
//  Invalid category
//
#define EVT_E_INVALIDCAT                 ((HRESULT)0x80048000L)

//
// MessageId: EVT_E_INVALIDXDR
//
// MessageText:
//
//  Invalid xdr schema
//
#define EVT_E_INVALIDXDR                 ((HRESULT)0x80048001L)

//
// MessageId: EVT_E_XMLPATH
//
// MessageText:
//
//  invalid path for event xml file
//
#define EVT_E_XMLPATH                    ((HRESULT)0x80048002L)

//
// MessageId: EVT_E_PARAMNUMBERINVALID
//
// MessageText:
//
//  invalid parameter number
//
#define EVT_E_PARAMNUMBERINVALID         ((HRESULT)0x80048003L)

//
// MessageId: EVT_E_PARAMUNDEFINED
//
// MessageText:
//
//  Parameter is not defined
//
#define EVT_E_PARAMUNDEFINED             ((HRESULT)0x80048004L)

//
// MessageId: EVT_E_PARAMUNUSED
//
// MessageText:
//
//  A defined parameter is not used in the message
//
#define EVT_E_PARAMUNUSED                ((HRESULT)0x80048005L)

//
// MessageId: EVT_E_CATALREADYUSED
//
// MessageText:
//
//  Category is alread used
//
#define EVT_E_CATALREADYUSED             ((HRESULT)0x80048006L)

//
// MessageId: EVT_E_PROPERTYDIFFER
//
// MessageText:
//
//  A different MSN property is used
//
#define EVT_E_PROPERTYDIFFER             ((HRESULT)0x80048007L)

//
// MessageId: EVT_E_BASEIDDIFFER
//
// MessageText:
//
//  A different base id is used for a category
//
#define EVT_E_BASEIDDIFFER               ((HRESULT)0x80048008L)

// base 0x8100
//code manager error code
// base 0x8100
//
// MessageId: PP_E_PPSA_FIRST
//
// MessageText:
//
//  Place holder for the first service api error
//
#define PP_E_PPSA_FIRST                  ((HRESULT)0x80048100L)

//
// MessageId: PP_E_PPSA_INVALIDHEADER
//
// MessageText:
//
//  The header in the soap request is invalid
//
#define PP_E_PPSA_INVALIDHEADER          ((HRESULT)0x80048101L)

//
// MessageId: PP_E_PPSA_GENERIC
//
// MessageText:
//
//  An internal error was encountered, check the soap fault for detailed information
//
#define PP_E_PPSA_GENERIC                ((HRESULT)0x80048102L)

//
// MessageId: PP_E_PPSA_MEMBEREXIST
//
// MessageText:
//
//  The data already exist in database
//
#define PP_E_PPSA_MEMBEREXIST            ((HRESULT)0x80048103L)

//
// MessageId: PP_E_PPSA_MEMBERNOTEXIST
//
// MessageText:
//
//  The data do not exist in database
//
#define PP_E_PPSA_MEMBERNOTEXIST         ((HRESULT)0x80048104L)

//
// MessageId: PP_E_PPSA_NOTAUTHORIZED
//
// MessageText:
//
//  Caller Not Authorized
//
#define PP_E_PPSA_NOTAUTHORIZED          ((HRESULT)0x80048105L)

//
// MessageId: PP_E_PPSA_NOSITENAME
//
// MessageText:
//
//  Site Name Missing
//
#define PP_E_PPSA_NOSITENAME             ((HRESULT)0x80048106L)

//
// MessageId: PP_E_PPSA_NOATTLIST
//
// MessageText:
//
//  Attribute List Missing
//
#define PP_E_PPSA_NOATTLIST              ((HRESULT)0x80048107L)

//
// MessageId: PP_E_PPSA_NOXPATH
//
// MessageText:
//
//  XPath Parameter Missing
//
#define PP_E_PPSA_NOXPATH                ((HRESULT)0x80048108L)

//
// MessageId: PP_E_PPSA_NOXML
//
// MessageText:
//
//  XML parameter is empty
//
#define PP_E_PPSA_NOXML                  ((HRESULT)0x80048109L)

//
// MessageId: PP_E_PPSA_BADNETID
//
// MessageText:
//
//  Invalid NetID
//
#define PP_E_PPSA_BADNETID               ((HRESULT)0x8004810AL)

//
// MessageId: PP_E_PPSA_BADADMINPUID
//
// MessageText:
//
//  Invalid NetID in Admin Ticket
//
#define PP_E_PPSA_BADADMINPUID           ((HRESULT)0x8004810BL)

//
// MessageId: PP_E_PPSA_INVALIDXML
//
// MessageText:
//
//  Invalid XML Parameter
//
#define PP_E_PPSA_INVALIDXML             ((HRESULT)0x8004810CL)

//
// MessageId: PP_E_PPSA_NOSITEID
//
// MessageText:
//
//  Site ID Missing
//
#define PP_E_PPSA_NOSITEID               ((HRESULT)0x8004810DL)

//
// MessageId: PP_E_PPSA_PROFILEXMLARRAYEMPTY
//
// MessageText:
//
//  Profile XML Array is Empty
//
#define PP_E_PPSA_PROFILEXMLARRAYEMPTY   ((HRESULT)0x8004810EL)

//
// MessageId: PP_E_PPSA_PROFILEXMLARRAYTOOBIG
//
// MessageText:
//
//  Profile XML Array Too Large
//
#define PP_E_PPSA_PROFILEXMLARRAYTOOBIG  ((HRESULT)0x8004810FL)

//
// MessageId: PP_E_PPSA_NETIDARRAYEMPTY
//
// MessageText:
//
//  NetID Array is Empty
//
#define PP_E_PPSA_NETIDARRAYEMPTY        ((HRESULT)0x80048110L)

//
// MessageId: PP_E_PPSA_NETIDARRAYTOOBIG
//
// MessageText:
//
//  NetID Array Too Large
//
#define PP_E_PPSA_NETIDARRAYTOOBIG       ((HRESULT)0x80048111L)

//
// MessageId: PP_E_PPSA_MULTIPLEERRORS
//
// MessageText:
//
//  Multiple Errors Occurred
//
#define PP_E_PPSA_MULTIPLEERRORS         ((HRESULT)0x80048112L)

//
// MessageId: PP_E_PPSA_XPATHARRAYEMPTY
//
// MessageText:
//
//  XPath Array is Empty
//
#define PP_E_PPSA_XPATHARRAYEMPTY        ((HRESULT)0x80048113L)

//
// MessageId: PP_E_PPSA_NETIDXPATHMISMATCH
//
// MessageText:
//
//  NetID XPath Mismatch
//
#define PP_E_PPSA_NETIDXPATHMISMATCH     ((HRESULT)0x80048114L)

//
// MessageId: PP_E_PPSA_NONSNAME
//
// MessageText:
//
//  Namespace Name Missing
//
#define PP_E_PPSA_NONSNAME               ((HRESULT)0x80048115L)

//
// MessageId: PP_E_PPSA_NAMESPACENOTACTIVE
//
// MessageText:
//
//  The namespace is not a managed namespace
//
#define PP_E_PPSA_NAMESPACENOTACTIVE     ((HRESULT)0x80048116L)

//
// MessageId: PP_E_PPSA_RPT_NOREQUEST
//
// MessageText:
//
//  Report Request XML Missing
//
#define PP_E_PPSA_RPT_NOREQUEST          ((HRESULT)0x80048117L)

//
// MessageId: PP_E_PPSA_RPT_BADREQUEST
//
// MessageText:
//
//  Report Request XML Invalid
//
#define PP_E_PPSA_RPT_BADREQUEST         ((HRESULT)0x80048118L)

//
// MessageId: PP_E_PPSA_RPT_NOTYPE
//
// MessageText:
//
//  Report Type Missing
//
#define PP_E_PPSA_RPT_NOTYPE             ((HRESULT)0x80048119L)

//
// MessageId: PP_E_PPSA_RPT_BADTYPE
//
// MessageText:
//
//  Report Type Invalid
//
#define PP_E_PPSA_RPT_BADTYPE            ((HRESULT)0x8004811AL)

//
// MessageId: PP_E_PPSA_RPT_SIGNINSUM_BADVAL
//
// MessageText:
//
//  Invalid Signin Summary Value
//
#define PP_E_PPSA_RPT_SIGNINSUM_BADVAL   ((HRESULT)0x8004811BL)

//
// MessageId: PP_E_PPSA_RPT_BADEMAILID
//
// MessageText:
//
//  Invalid Email ID
//
#define PP_E_PPSA_RPT_BADEMAILID         ((HRESULT)0x8004811CL)

//
// MessageId: PP_E_PPSA_RPT_BADSTATUSFORRESEND
//
// MessageText:
//
//  The Email cannot currently be resent
//
#define PP_E_PPSA_RPT_BADSTATUSFORRESEND ((HRESULT)0x8004811DL)

//
// MessageId: PP_E_PPSA_RPT_BADSTATUSFORCANCEL
//
// MessageText:
//
//  The Email cannot currently be cancelled
//
#define PP_E_PPSA_RPT_BADSTATUSFORCANCEL ((HRESULT)0x8004811EL)

//
// MessageId: PP_E_PPSA_RPT_NOLCID
//
// MessageText:
//
//  Locale ID Missing or Invalid
//
#define PP_E_PPSA_RPT_NOLCID             ((HRESULT)0x8004811FL)

//
// MessageId: PP_E_PPSA_RPT_NOTOADDRESS
//
// MessageText:
//
//  Destination Address Missing or Invalid
//
#define PP_E_PPSA_RPT_NOTOADDRESS        ((HRESULT)0x80048120L)

//
// MessageId: PP_E_PPSA_RPT_INVALIDDA
//
// MessageText:
//
//  Invalid Domain Authority
//
#define PP_E_PPSA_RPT_INVALIDDA          ((HRESULT)0x80048121L)

//
// MessageId: PP_E_PPSA_BADPASSID
//
// MessageText:
//
//  Invalid Passport ID
//
#define PP_E_PPSA_BADPASSID              ((HRESULT)0x80048122L)

//
// MessageId: PP_E_PPSA_RPT_NOTANEASI
//
// MessageText:
//
//  The account is not an EASI account
//
#define PP_E_PPSA_RPT_NOTANEASI          ((HRESULT)0x80048123L)

//
// MessageId: PP_E_PPSA_BADATTRIBUTENAME
//
// MessageText:
//
//  Invalid Attribute Name
//
#define PP_E_PPSA_BADATTRIBUTENAME       ((HRESULT)0x80048124L)

//
// MessageId: PP_E_PPSA_INVALIDPROPVALUE
//
// MessageText:
//
//  Invalid Property Value
//
#define PP_E_PPSA_INVALIDPROPVALUE       ((HRESULT)0x80048125L)

//
// MessageId: PP_E_PPSA_NO_INPUT
//
// MessageText:
//
//  Input Missing
//
#define PP_E_PPSA_NO_INPUT               ((HRESULT)0x80048126L)

//
// MessageId: PP_E_PPSA_MULTIPUID
//
// MessageText:
//
//  Error in Multi-PUID request
//
#define PP_E_PPSA_MULTIPUID              ((HRESULT)0x80048127L)

//
// MessageId: PP_E_PPSA_INVALIDCATEGORY
//
// MessageText:
//
//  Invalid Category Specified
//
#define PP_E_PPSA_INVALIDCATEGORY        ((HRESULT)0x80048128L)

//
// MessageId: PP_E_PPSA_MULTIPLEPUIDNOTALLOWED
//
// MessageText:
//
//  Multi-PUID Update/Insert Not Allowed
//
#define PP_E_PPSA_MULTIPLEPUIDNOTALLOWED ((HRESULT)0x80048129L)

//
// MessageId: PP_E_PPSA_MULTIACCOUNT
//
// MessageText:
//
//  Credential insert/update only support one account
//
#define PP_E_PPSA_MULTIACCOUNT           ((HRESULT)0x8004812AL)

//
// MessageId: PP_E_PPSA_EMPTYCREDXML
//
// MessageText:
//
//  Credential xml contains no credentials
//
#define PP_E_PPSA_EMPTYCREDXML           ((HRESULT)0x8004812BL)

//
// MessageId: PP_E_PPSA_INVALIDNAMESPACE
//
// MessageText:
//
//  The namespace does not exist or is not managed
//
#define PP_E_PPSA_INVALIDNAMESPACE       ((HRESULT)0x8004812CL)

//
// MessageId: PP_E_PPSA_CANTBLOCKUNBLOCKSELF
//
// MessageText:
//
//  A user cannot block or unblock themselves
//
#define PP_E_PPSA_CANTBLOCKUNBLOCKSELF   ((HRESULT)0x8004812DL)

//
// MessageId: PP_E_PPSA_NSDAOPERATIONUNSUPPORTED
//
// MessageText:
//
//  The DA or NS does not support this operation
//
#define PP_E_PPSA_NSDAOPERATIONUNSUPPORTED ((HRESULT)0x8004812EL)

//
// MessageId: PP_E_PPSA_PROFILENOTFOUND
//
// MessageText:
//
//  The specified profile does not exist
//
#define PP_E_PPSA_PROFILENOTFOUND        ((HRESULT)0x8004812FL)

//
// MessageId: PP_E_PPSA_NETIDMISMATCH
//
// MessageText:
//
//  The NetID specified in the input parameter does not match the NetID in the XML Profile
//
#define PP_E_PPSA_NETIDMISMATCH          ((HRESULT)0x80048130L)

//
// MessageId: PP_E_PPSA_ALREADYGRANTED
//
// MessageText:
//
//  Duplicate role binding for source and target scopes
//
#define PP_E_PPSA_ALREADYGRANTED         ((HRESULT)0x80048131L)

//
// MessageId: PP_E_PPSA_PROFILEEXISTS
//
// MessageText:
//
//  The specified profile already exists
//
#define PP_E_PPSA_PROFILEEXISTS          ((HRESULT)0x80048132L)

//
// MessageId: PP_E_PPSA_ROLETEMPLATE_EMPTY
//
// MessageText:
//
//  The role template xml is empty
//
#define PP_E_PPSA_ROLETEMPLATE_EMPTY     ((HRESULT)0x80048133L)

//
// MessageId: PP_E_PPSA_ROLETEMPLATE_EMPTYSTRING
//
// MessageText:
//
//  The role template input is an empty string
//
#define PP_E_PPSA_ROLETEMPLATE_EMPTYSTRING ((HRESULT)0x80048134L)

//
// MessageId: PP_E_PPSA_SOURCESCOPE_INVALID
//
// MessageText:
//
//  Source scope is empty or invalid
//
#define PP_E_PPSA_SOURCESCOPE_INVALID    ((HRESULT)0x80048135L)

//
// MessageId: PP_E_PPSA_SOURCESCOPETYPE_INVALID
//
// MessageText:
//
//  Source scope type is empty or invalid
//
#define PP_E_PPSA_SOURCESCOPETYPE_INVALID ((HRESULT)0x80048136L)

//
// MessageId: PP_E_PPSA_TARGETSCOPE_MISMATCH
//
// MessageText:
//
//  If used, both target scope and target scope type should be not empty
//
#define PP_E_PPSA_TARGETSCOPE_MISMATCH   ((HRESULT)0x80048137L)

//
// MessageId: PP_E_PPSA_ROLEID_INVALID
//
// MessageText:
//
//  Invalid role id
//
#define PP_E_PPSA_ROLEID_INVALID         ((HRESULT)0x80048138L)

//
// MessageId: PP_E_PPSA_PASSIDTYPE_INVALID
//
// MessageText:
//
//  Invalid PASSID type
//
#define PP_E_PPSA_PASSIDTYPE_INVALID     ((HRESULT)0x80048139L)

//
// MessageId: PP_E_PPSA_ROLEIDXML_EMPTY
//
// MessageText:
//
//  Empty role id xml
//
#define PP_E_PPSA_ROLEIDXML_EMPTY        ((HRESULT)0x8004813AL)

//
// MessageId: PP_E_PPSA_SOURCESCOPE_NOTSUPPORTED
//
// MessageText:
//
//  Source scope type is not supported
//
#define PP_E_PPSA_SOURCESCOPE_NOTSUPPORTED ((HRESULT)0x8004813BL)

//
// MessageId: PP_E_PPSA_SOURCESCOPE_IDINVALID
//
// MessageText:
//
//  The source scope id is invalid
//
#define PP_E_PPSA_SOURCESCOPE_IDINVALID  ((HRESULT)0x8004813CL)

//
// MessageId: PP_E_PPSA_ROLETEMPLATE_NOCLAIMS
//
// MessageText:
//
//  The role template does not contain any claims
//
#define PP_E_PPSA_ROLETEMPLATE_NOCLAIMS  ((HRESULT)0x8004813DL)

//
// MessageId: PP_E_PPSA_CLAIMMAPS_TOOMANY
//
// MessageText:
//
//  The role template contains too many claim maps
//
#define PP_E_PPSA_CLAIMMAPS_TOOMANY      ((HRESULT)0x8004813EL)

//
// MessageId: PP_E_PPSA_DENYCLAIMS_NOTSUPPORTED
//
// MessageText:
//
//  The deny claims are not supported in the current version
//
#define PP_E_PPSA_DENYCLAIMS_NOTSUPPORTED ((HRESULT)0x8004813FL)

//
// MessageId: PP_E_PPSA_SCOPEEXPR_INVALID
//
// MessageText:
//
//  The scope expression is empty or invalid
//
#define PP_E_PPSA_SCOPEEXPR_INVALID      ((HRESULT)0x80048140L)

//
// MessageId: PP_E_PPSA_ROLENAME_TOOLONG
//
// MessageText:
//
//  The role name is too long
//
#define PP_E_PPSA_ROLENAME_TOOLONG       ((HRESULT)0x80048141L)

//
// MessageId: PP_E_PPSA_ROLENAME_INVALIDCHARS
//
// MessageText:
//
//  Invalid characters in the role name
//
#define PP_E_PPSA_ROLENAME_INVALIDCHARS  ((HRESULT)0x80048142L)

//
// MessageId: PP_E_PPSA_ROLENAME_EMPTY
//
// MessageText:
//
//  The role name is missing in the input data
//
#define PP_E_PPSA_ROLENAME_EMPTY         ((HRESULT)0x80048143L)

//
// MessageId: PP_E_PPSA_ROLE_NOTFOUND
//
// MessageText:
//
//  The role does not exist in the database
//
#define PP_E_PPSA_ROLE_NOTFOUND          ((HRESULT)0x80048144L)

//
// MessageId: PP_E_PPSA_ROLE_ALREADYEXISTS
//
// MessageText:
//
//  The role already exist in the database
//
#define PP_E_PPSA_ROLE_ALREADYEXISTS     ((HRESULT)0x80048145L)

//
// MessageId: PP_E_PPSA_MAXROWS_TOOBIG
//
// MessageText:
//
//  The required numbers of rows exceeed the maximum value supported
//
#define PP_E_PPSA_MAXROWS_TOOBIG         ((HRESULT)0x80048146L)

//
// MessageId: PP_E_PPSA_MAXROWS_INVALID
//
// MessageText:
//
//  The maximum numbers of rows must be a positive number
//
#define PP_E_PPSA_MAXROWS_INVALID        ((HRESULT)0x80048147L)

//
// MessageId: PP_E_PPSA_TARGETSCOPE_INVALID
//
// MessageText:
//
//  Target scope is empty or invalid
//
#define PP_E_PPSA_TARGETSCOPE_INVALID    ((HRESULT)0x80048148L)

//
// MessageId: PP_E_PPSA_TARGETSCOPETYPE_INVALID
//
// MessageText:
//
//  Target scope type is empty or invalid
//
#define PP_E_PPSA_TARGETSCOPETYPE_INVALID ((HRESULT)0x80048149L)

//
// MessageId: PP_E_PPSA_NAMESPACESCOPE_NOTFOUND
//
// MessageText:
//
//  The namespace scope does not exist or is invalid
//
#define PP_E_PPSA_NAMESPACESCOPE_NOTFOUND ((HRESULT)0x8004814AL)

//
// MessageId: PP_E_PPSA_INVALID_DOMAIN_ROOT
//
// MessageText:
//
//  The specified domain root is invalid
//
#define PP_E_PPSA_INVALID_DOMAIN_ROOT    ((HRESULT)0x8004814BL)

//
// MessageId: PP_E_PPSA_EMPTY_SITEKEY
//
// MessageText:
//
//  The site key buffer is empty
//
#define PP_E_PPSA_EMPTY_SITEKEY          ((HRESULT)0x8004814CL)

//
// MessageId: PP_E_PPSA_INTERNALCRYPT_INVALID
//
// MessageText:
//
//  Invalid crypter object
//
#define PP_E_PPSA_INTERNALCRYPT_INVALID  ((HRESULT)0x8004814DL)

//
// MessageId: PP_E_PPSA_SITEENCRYPTION_ERROR
//
// MessageText:
//
//  The data encryption failed for the calling site
//
#define PP_E_PPSA_SITEENCRYPTION_ERROR   ((HRESULT)0x8004814EL)

//
// MessageId: PP_E_PPSA_SITEKEY_NOTFOUND
//
// MessageText:
//
//  The requested site key does not exist
//
#define PP_E_PPSA_SITEKEY_NOTFOUND       ((HRESULT)0x8004814FL)

//
// MessageId: PP_E_PPSA_NOT_IN_NAMESPACE
//
// MessageText:
//
//  The credential name is not in the specified managed namespace
//
#define PP_E_PPSA_NOT_IN_NAMESPACE       ((HRESULT)0x80048150L)

//
// MessageId: PP_E_PPSA_INVALIDCREDNAME
//
// MessageText:
//
//  The credential name is not valid
//
#define PP_E_PPSA_INVALIDCREDNAME        ((HRESULT)0x80048151L)

//
// MessageId: PP_E_PPSA_SAMECREDNAME
//
// MessageText:
//
//  Try to rename a credential to the same name.
//
#define PP_E_PPSA_SAMECREDNAME           ((HRESULT)0x80048152L)

//
// MessageId: PP_E_PPSA_INVALIDCREDXML
//
// MessageText:
//
//  The credential xml is not valid
//
#define PP_E_PPSA_INVALIDCREDXML         ((HRESULT)0x80048153L)

//
// MessageId: PP_E_PPSA_INVALIDCREDTYPE
//
// MessageText:
//
//  The credential type is not valid
//
#define PP_E_PPSA_INVALIDCREDTYPE        ((HRESULT)0x80048154L)

//
// MessageId: PP_E_PPSA_UNABLETOGETCRED
//
// MessageText:
//
//  Unable to get the credential for the specified account.
//
#define PP_E_PPSA_UNABLETOGETCRED        ((HRESULT)0x80048155L)

//
// MessageId: PP_E_PPSA_NAMESPACE_NOTMANAGED
//
// MessageText:
//
//  The input namespace is not managed
//
#define PP_E_PPSA_NAMESPACE_NOTMANAGED   ((HRESULT)0x80048156L)

//
// MessageId: PP_E_PPSA_NAMESPACEID_INVALID
//
// MessageText:
//
//  Invalid namespace id
//
#define PP_E_PPSA_NAMESPACEID_INVALID    ((HRESULT)0x80048157L)

//
// MessageId: PP_E_PPSA_NAMESPACEATTR_NOTFOUND
//
// MessageText:
//
//  The specified attribute is not set for the given namespace
//
#define PP_E_PPSA_NAMESPACEATTR_NOTFOUND ((HRESULT)0x80048158L)

//
// MessageId: PP_E_PPSA_ADMINS_NOTALLOWED
//
// MessageText:
//
//  Cannot add the administrator, the namespace does not allow outside administrators
//
#define PP_E_PPSA_ADMINS_NOTALLOWED      ((HRESULT)0x80048159L)

//
// MessageId: PP_E_PPSA_NAMESPACEATTR_INVALIDTYPE
//
// MessageText:
//
//  The specified namespace attribute does not have the expected type
//
#define PP_E_PPSA_NAMESPACEATTR_INVALIDTYPE ((HRESULT)0x8004815AL)

//
// MessageId: PP_E_PPSA_PASSID_INVALIDACCOUNT
//
// MessageText:
//
//  The specified account is invalid
//
#define PP_E_PPSA_PASSID_INVALIDACCOUNT  ((HRESULT)0x8004815BL)

//
// MessageId: PP_E_PPSA_NAMESPACE_SITEIDINVALID
//
// MessageText:
//
//  The site id for the specified namespace is invalid
//
#define PP_E_PPSA_NAMESPACE_SITEIDINVALID ((HRESULT)0x8004815CL)

//
// MessageId: PP_E_PPSA_ROLE_NOTGRANTED
//
// MessageText:
//
//  The specified role is not granted for the input source and target scopes
//
#define PP_E_PPSA_ROLE_NOTGRANTED        ((HRESULT)0x8004815DL)

//
// MessageId: PP_E_PPSA_NAMESPACE_LASTADMIN
//
// MessageText:
//
//  The last namespace/site administrator cannot be removed
//
#define PP_E_PPSA_NAMESPACE_LASTADMIN    ((HRESULT)0x8004815EL)

//
// MessageId: PP_E_PPSA_NAMESPACE_NOTADMIN
//
// MessageText:
//
//  The input account is not an administrator for the specified namespace
//
#define PP_E_PPSA_NAMESPACE_NOTADMIN     ((HRESULT)0x8004815FL)

//
// MessageId: PP_E_PPSA_TOOMANYROWS
//
// MessageText:
//
//  The db query returns too many rows, expecting at most one
//
#define PP_E_PPSA_TOOMANYROWS            ((HRESULT)0x80048160L)

//
// MessageId: PP_E_PPSA_NAMESPACE_INVALIDSIGNIN
//
// MessageText:
//
//  Empty or invalid signin name
//
#define PP_E_PPSA_NAMESPACE_INVALIDSIGNIN ((HRESULT)0x80048161L)

//
// MessageId: PP_E_PPSA_NAMESPACE_DNSCHECKFAILED
//
// MessageText:
//
//  The DNS entry for the input namespace was not found or is invalid
//
#define PP_E_PPSA_NAMESPACE_DNSCHECKFAILED ((HRESULT)0x80048162L)

//
// MessageId: PP_E_PPSA_NAMESPACE_NOTFOUND
//
// MessageText:
//
//  The input namespace was not found
//
#define PP_E_PPSA_NAMESPACE_NOTFOUND     ((HRESULT)0x80048163L)

//
// MessageId: PP_E_PPSA_NAMESPACE_ALREADYRESERVED
//
// MessageText:
//
//  The input namespace is already reserved
//
#define PP_E_PPSA_NAMESPACE_ALREADYRESERVED ((HRESULT)0x80048164L)

//
// MessageId: PP_E_PPSA_NAMESPACE_INVALIDATTRXML
//
// MessageText:
//
//  The input attributes xml is invalid or contains no attributes
//
#define PP_E_PPSA_NAMESPACE_INVALIDATTRXML ((HRESULT)0x80048165L)

//
// MessageId: PP_E_PPSA_NAMESPACE_FORBIDDENNAME
//
// MessageText:
//
//  The input name is not allowed for a namespace
//
#define PP_E_PPSA_NAMESPACE_FORBIDDENNAME ((HRESULT)0x80048166L)

//
// MessageId: PP_E_PPSA_NAMESPACE_ALREADYADMIN
//
// MessageText:
//
//  The given account is already an administrator for the specified namespace
//
#define PP_E_PPSA_NAMESPACE_ALREADYADMIN ((HRESULT)0x80048167L)

//
// MessageId: PP_E_PPSA_NAMESPACE_DELADMIN_NODOMAIN
//
// MessageText:
//
//  Cannot determine the DelegatedAdmin domain for input site
//
#define PP_E_PPSA_NAMESPACE_DELADMIN_NODOMAIN ((HRESULT)0x80048168L)

//
// MessageId: PP_E_PPSA_NAMESPACE_DELADMIN_INVALIDNAME
//
// MessageText:
//
//  Invalid DelegatedAdmin domain name for the input site
//
#define PP_E_PPSA_NAMESPACE_DELADMIN_INVALIDNAME ((HRESULT)0x80048169L)

//
// MessageId: PP_E_PPSA_NAMESPACE_DNSERROR
//
// MessageText:
//
//  Failure during query function for DNS records
//
#define PP_E_PPSA_NAMESPACE_DNSERROR     ((HRESULT)0x8004816AL)

//
// MessageId: PP_E_PPSA_NOCREDENTIALNAME
//
// MessageText:
//
//  Credential Name Missing
//
#define PP_E_PPSA_NOCREDENTIALNAME       ((HRESULT)0x8004816BL)

//
// MessageId: PP_E_PPSA_NOMOBILEPHONENUM
//
// MessageText:
//
//  Mobile phone Missing
//
#define PP_E_PPSA_NOMOBILEPHONENUM       ((HRESULT)0x8004816CL)

//
// MessageId: PP_E_PPSA_NONETID
//
// MessageText:
//
//  NETID Missing
//
#define PP_E_PPSA_NONETID                ((HRESULT)0x8004816DL)

//
// MessageId: PP_E_PPSA_NONETIDFORSECURE
//
// MessageText:
//
//  NETID is Missing for secure token
//
#define PP_E_PPSA_NONETIDFORSECURE       ((HRESULT)0x8004816EL)

//
// MessageId: PP_E_PPSA_NOPASSWORD
//
// MessageText:
//
//  Password Missing
//
#define PP_E_PPSA_NOPASSWORD             ((HRESULT)0x8004816FL)

//
// MessageId: PP_E_PPSA_NOMOBILEPIN
//
// MessageText:
//
//  Mobile pin Missing
//
#define PP_E_PPSA_NOMOBILEPIN            ((HRESULT)0x80048170L)

//
// MessageId: PP_E_PPSA_NOSECUREPIN
//
// MessageText:
//
//  Secure pin Missing
//
#define PP_E_PPSA_NOSECUREPIN            ((HRESULT)0x80048171L)

//
// MessageId: PP_E_PPSA_NOSQ
//
// MessageText:
//
//  Secret question missing
//
#define PP_E_PPSA_NOSQ                   ((HRESULT)0x80048172L)

//
// MessageId: PP_E_PPSA_NOSA
//
// MessageText:
//
//  Secret anwser missing
//
#define PP_E_PPSA_NOSA                   ((HRESULT)0x80048173L)

//
// MessageId: PP_E_PPSA_CLAIMMAPINDEX_INVALID
//
// MessageText:
//
//  UserInput error: invalid claimmap index
//
#define PP_E_PPSA_CLAIMMAPINDEX_INVALID  ((HRESULT)0x80048174L)

//
// MessageId: PP_E_PPSA_CLAIMMAP_NOCLAIMS
//
// MessageText:
//
//  The role template contains a claim map with no claims
//
#define PP_E_PPSA_CLAIMMAP_NOCLAIMS      ((HRESULT)0x80048175L)

//
// MessageId: PP_E_PPSA_CLAIMMAP_NOSCOPES
//
// MessageText:
//
//  The role template contains a claim map with no scopes
//
#define PP_E_PPSA_CLAIMMAP_NOSCOPES      ((HRESULT)0x80048176L)

//
// MessageId: PP_E_PPSA_DUPLICATECLAIM
//
// MessageText:
//
//  The claim map contains a duplicated claim
//
#define PP_E_PPSA_DUPLICATECLAIM         ((HRESULT)0x80048177L)

//
// MessageId: PP_E_PPSA_DUPLICATESCOPE
//
// MessageText:
//
//  The claim map contains a duplicated scope
//
#define PP_E_PPSA_DUPLICATESCOPE         ((HRESULT)0x80048178L)

//
// MessageId: PP_E_PPSA_SCOPECONFLICT
//
// MessageText:
//
//  The role template contains a scope defined both as included and excluded
//
#define PP_E_PPSA_SCOPECONFLICT          ((HRESULT)0x80048179L)

//
// MessageId: PP_E_PPSA_SCOPETYPE_INVALID
//
// MessageText:
//
//  Invalid scope type
//
#define PP_E_PPSA_SCOPETYPE_INVALID      ((HRESULT)0x8004817AL)

//
// MessageId: PP_E_PPSA_SCOPETYPE_MISMATCH
//
// MessageText:
//
//  If a scope type is provided then the scope expression should be not empty
//
#define PP_E_PPSA_SCOPETYPE_MISMATCH     ((HRESULT)0x8004817BL)

//
// MessageId: PP_E_PPSA_CLAIMID_INVALID
//
// MessageText:
//
//  Invalid claim id
//
#define PP_E_PPSA_CLAIMID_INVALID        ((HRESULT)0x8004817CL)

//
// MessageId: PP_E_PPSA_DBCONVERSION_FAILED
//
// MessageText:
//
//  UserInput error: failed to convert to db format
//
#define PP_E_PPSA_DBCONVERSION_FAILED    ((HRESULT)0x8004817DL)

//
// MessageId: PP_E_PPSA_SCOPEEXPR_TOOLONG
//
// MessageText:
//
//  Input scope expression is too long
//
#define PP_E_PPSA_SCOPEEXPR_TOOLONG      ((HRESULT)0x8004817EL)

//
// MessageId: PP_E_PPSA_ROLETEMPLATE_INVALIDXML
//
// MessageText:
//
//  Invalid xml format for a role template
//
#define PP_E_PPSA_ROLETEMPLATE_INVALIDXML ((HRESULT)0x8004817FL)

//
// MessageId: PP_E_PPSA_CLAIMNAME_NOTDEFINED
//
// MessageText:
//
//  Input claim name is not defined
//
#define PP_E_PPSA_CLAIMNAME_NOTDEFINED   ((HRESULT)0x80048180L)

//
// MessageId: PP_E_PPSA_SCOPEEXPR_BADSYNTAX
//
// MessageText:
//
//  Invalid scope expression: bad syntax or invalid scope type
//
#define PP_E_PPSA_SCOPEEXPR_BADSYNTAX    ((HRESULT)0x80048181L)

//
// MessageId: PP_E_PPSA_TARGETSCOPE_IDINVALID
//
// MessageText:
//
//  The target scope id is invalid
//
#define PP_E_PPSA_TARGETSCOPE_IDINVALID  ((HRESULT)0x80048182L)

//
// MessageId: PP_E_PPSA_ROLEID_INVALIDXML
//
// MessageText:
//
//  Invalid xml format for a role id
//
#define PP_E_PPSA_ROLEID_INVALIDXML      ((HRESULT)0x80048183L)

//
// MessageId: PP_E_PPSA_TARGETPOLICY_NOTSUPPORTED
//
// MessageText:
//
//  The target policy xml is not supported
//
#define PP_E_PPSA_TARGETPOLICY_NOTSUPPORTED ((HRESULT)0x80048184L)

//
// MessageId: PP_E_PPSA_NAMESPACE_INVALIDNAME
//
// MessageText:
//
//  The namespace name contains invalid characters or the format is invalid
//
#define PP_E_PPSA_NAMESPACE_INVALIDNAME  ((HRESULT)0x80048185L)

//
// MessageId: PP_E_PPSA_NAMESPACE_PROPCONVERSIONERROR
//
// MessageText:
//
//  Conversion error for a namespace property
//
#define PP_E_PPSA_NAMESPACE_PROPCONVERSIONERROR ((HRESULT)0x80048186L)

//
// MessageId: PP_E_PPSA_NAMESPACE_ATTRXMLEMPTY
//
// MessageText:
//
//  The namespace attributes xml is empty
//
#define PP_E_PPSA_NAMESPACE_ATTRXMLEMPTY ((HRESULT)0x80048187L)

//
// MessageId: PP_E_PPSA_NAMESPACE_XMLNOATTRIBUTES
//
// MessageText:
//
//  The namespace attributes xml contains no valid attributes
//
#define PP_E_PPSA_NAMESPACE_XMLNOATTRIBUTES ((HRESULT)0x80048188L)

//
// MessageId: PP_E_PPSA_SITE_NOT_EXIST
//
// MessageText:
//
//  The specified site does not exist
//
#define PP_E_PPSA_SITE_NOT_EXIST         ((HRESULT)0x80048189L)

//
// MessageId: PP_E_PPSA_NAMESPACE_INVALIDSITEID
//
// MessageText:
//
//  The specified site id is invalid
//
#define PP_E_PPSA_NAMESPACE_INVALIDSITEID ((HRESULT)0x8004818AL)

//
// MessageId: PP_E_PPSA_NAMESPACE_USERNOTINDOMAIN
//
// MessageText:
//
//  The user account is not in the domain registered for the input site
//
#define PP_E_PPSA_NAMESPACE_USERNOTINDOMAIN ((HRESULT)0x8004818BL)

//
// MessageId: PP_E_PPSA_NAMESPACE_ALREADYSITEADMIN
//
// MessageText:
//
//  The user account is already an administrator for the specified site
//
#define PP_E_PPSA_NAMESPACE_ALREADYSITEADMIN ((HRESULT)0x8004818CL)

//
// MessageId: PP_E_PPSA_NAMESPACE_NOTSITEADMIN
//
// MessageText:
//
//  The user account is not an administrator for the specified site
//
#define PP_E_PPSA_NAMESPACE_NOTSITEADMIN ((HRESULT)0x8004818DL)

//
// MessageId: PP_E_PPSA_DELETEACCOUNTNOTALLOWED
//
// MessageText:
//
//  The account has issues preventing it from being deleted
//
#define PP_E_PPSA_DELETEACCOUNTNOTALLOWED ((HRESULT)0x8004818EL)

//
// MessageId: PP_E_PPSA_NAMESPACE_EMPTYPROPNAME
//
// MessageText:
//
//  Empty property name for a namespace attribute
//
#define PP_E_PPSA_NAMESPACE_EMPTYPROPNAME ((HRESULT)0x8004818FL)

//
// MessageId: PP_E_PPSA_NAMESPACE_PROPTYPEINVALID
//
// MessageText:
//
//  Invalid property type for a namespace attribute
//
#define PP_E_PPSA_NAMESPACE_PROPTYPEINVALID ((HRESULT)0x80048190L)

//
// MessageId: PP_E_PPSA_NAMESPACE_PROPNAMEINVALID
//
// MessageText:
//
//  Invalid property name for a namespace attribute
//
#define PP_E_PPSA_NAMESPACE_PROPNAMEINVALID ((HRESULT)0x80048191L)

//
// MessageId: PP_E_PPSA_NAMESPACE_WORDLISTINVALID
//
// MessageText:
//
//  Forbidden word list not found or is invalid
//
#define PP_E_PPSA_NAMESPACE_WORDLISTINVALID ((HRESULT)0x80048192L)

//
// MessageId: PP_E_PPSA_NAMESPACE_PROPNOTSUPPORTED
//
// MessageText:
//
//  Property not supported in this version
//
#define PP_E_PPSA_NAMESPACE_PROPNOTSUPPORTED ((HRESULT)0x80048193L)

//
// MessageId: PP_E_PPSA_NAMESPACE_PROPIDINVALID
//
// MessageText:
//
//  Invalid id for a namespace property
//
#define PP_E_PPSA_NAMESPACE_PROPIDINVALID ((HRESULT)0x80048194L)

//
// MessageId: PP_E_PPSA_NAMESPACE_PROPNAMETOOLONG
//
// MessageText:
//
//  The property name is too long
//
#define PP_E_PPSA_NAMESPACE_PROPNAMETOOLONG ((HRESULT)0x80048195L)

//
// MessageId: PP_E_PPSA_NAMESPACE_PROPNOTFOUND
//
// MessageText:
//
//  The specified property name/id does not exist
//
#define PP_E_PPSA_NAMESPACE_PROPNOTFOUND ((HRESULT)0x80048196L)

//
// MessageId: PP_E_PPSA_NAMESPACE_PROPBADVARIANT
//
// MessageText:
//
//  Invalid variant value for a namespace property
//
#define PP_E_PPSA_NAMESPACE_PROPBADVARIANT ((HRESULT)0x80048197L)

//
// MessageId: PP_E_PPSA_NAMESPACE_STATUSINVALID
//
// MessageText:
//
//  Invalid namespace status
//
#define PP_E_PPSA_NAMESPACE_STATUSINVALID ((HRESULT)0x80048198L)

//
// MessageId: PP_E_PPSA_NAMESPACE_PROPOBJECT_INVALID
//
// MessageText:
//
//  UserInput error: Invalid property object
//
#define PP_E_PPSA_NAMESPACE_PROPOBJECT_INVALID ((HRESULT)0x80048199L)

//
// MessageId: PP_E_PPSA_NAMESPACE_PROPNOTSET
//
// MessageText:
//
//  The specified namespace property is not set
//
#define PP_E_PPSA_NAMESPACE_PROPNOTSET   ((HRESULT)0x8004819AL)

//
// MessageId: PP_E_PPSA_NAMESPACE_PROPVALUEINVALID
//
// MessageText:
//
//  Invalid value for a namespace property
//
#define PP_E_PPSA_NAMESPACE_PROPVALUEINVALID ((HRESULT)0x8004819BL)

//
// MessageId: PP_E_PPSA_NAMESPACE_PROPDEPRECATED
//
// MessageText:
//
//  The input contains a namespace property that is deprecated
//
#define PP_E_PPSA_NAMESPACE_PROPDEPRECATED ((HRESULT)0x8004819CL)

//
// MessageId: PP_E_PPSA_ACCOUNTXMLARRAYEMPTY
//
// MessageText:
//
//  Account XML Array is Empty
//
#define PP_E_PPSA_ACCOUNTXMLARRAYEMPTY   ((HRESULT)0x8004819DL)

//
// MessageId: PP_E_PPSA_ACCOUNTXMLARRAYTOOBIG
//
// MessageText:
//
//  Account XML Array Too Large
//
#define PP_E_PPSA_ACCOUNTXMLARRAYTOOBIG  ((HRESULT)0x8004819EL)

//
// MessageId: PP_E_PPSA_LAST
//
// MessageText:
//
//  Place holder for the last service api error
//
#define PP_E_PPSA_LAST                   ((HRESULT)0x800490FFL)

//!!!!Next base please start from 0x9100
// base 0x9100
//------------------------------------------------------------------------
// Graduation Service error codes
//------------------------------------------------------------------------
//
// MessageId: PP_E_KGS_INVALID_TIME_INTERVAL
//
// MessageText:
//
//  The CCM parameter KidsGraduation_TimeInterval did not meet the required 
//  guidelines.  This parameter must be an integer value greater than 0.
//
#define PP_E_KGS_INVALID_TIME_INTERVAL   ((HRESULT)0x80049100L)

//
// MessageId: PP_E_KGS_INVALID_LOCATION
//
// MessageText:
//
//  The config parameter Location in the section Minidump of the INI file was
//  empty or undefined.
//
#define PP_E_KGS_INVALID_LOCATION        ((HRESULT)0x80049101L)

//
// MessageId: PP_E_KGS_INVALID_LOG_FILE_NAME
//
// MessageText:
//
//  The CCM parameter KidsGraduation_LogFileName was empty or undefined.
//
#define PP_E_KGS_INVALID_LOG_FILE_NAME   ((HRESULT)0x80049102L)

//
// MessageId: PP_E_KGS_INVALID_REQUIRED_LOAD_LEVEL
//
// MessageText:
//
//  The CCM parameter KidsGraduation_RequiredLoadLevel did not meet the required
//  guidelines.  This parameter must be a positive integer less than or equal to
//  100.
//
#define PP_E_KGS_INVALID_REQUIRED_LOAD_LEVEL ((HRESULT)0x80049103L)

//
// MessageId: PP_E_KGS_INVALID_MIN_TIME_INTERVAL
//
// MessageText:
//
//  The CCM parameter KidsGraduation_TimeIntervalMin did not meet the required
//  guidelines.  This parameter must be a positive integer.
//
#define PP_E_KGS_INVALID_MIN_TIME_INTERVAL ((HRESULT)0x80049104L)

//
// MessageId: PP_E_KGS_INVALID_MAX_TIME_INTERVAL
//
// MessageText:
//
//  The CCM parameter KidsGraduation_TimeIntervalMax did not meet the required
//  guidelines.  This parameter must be a positive integer greater than the CCM
//  parameter KidsGraduation_TimeIntervalMin.
//
#define PP_E_KGS_INVALID_MAX_TIME_INTERVAL ((HRESULT)0x80049105L)

//
// MessageId: PP_E_KGS_INVALID_TRIGGER_VALUE
//
// MessageText:
//
//  The CCM parameter KidsGraduation_TriggerValue did not meet the required
//  guidelines.  This parameter must be a positive integer less than the CCM
//  parameter KidsGraduation_RequiredLoadLevel and which, summed with the CCM
//  parameter KidsGraduation_RequiredLoadLevel, may not exceed 100.
//
#define PP_E_KGS_INVALID_TRIGGER_VALUE   ((HRESULT)0x80049106L)

//
// MessageId: PP_E_KGS_INVALID_THROTTLE_PER_CALLS
//
// MessageText:
//
//  The CCM parameter KidsGraduation_ThrottlePerNumberOfCalls did not meet the
//  required guidelines.  This parameter must be a positive integer.
//
#define PP_E_KGS_INVALID_THROTTLE_PER_CALLS ((HRESULT)0x80049107L)

//
// MessageId: PP_E_KGS_INVALID_DOMAIN
//
// MessageText:
//
//  The CCM parameter KidsGraduation_DomainsList did not meet the required
//  guidelines.  This parameter must contain only valid domain IDs (1, 2,
//  and/or 3).
//
#define PP_E_KGS_INVALID_DOMAIN          ((HRESULT)0x80049108L)

//
// MessageId: PP_E_KGS_INVALID_NUMBER_GET_THREADS
//
// MessageText:
//
//  The CCM parameter KidsGraduation_NumberOfGetThreads did not meet the required
//  guidelines.  This parameter must be a positive integer.
//
#define PP_E_KGS_INVALID_NUMBER_GET_THREADS ((HRESULT)0x80049109L)

//
// MessageId: PP_E_KGS_INVALID_NUMBER_PROCESS_THREADS
//
// MessageText:
//
//  The CCM parameter KidsGraduation_NumberOfProcessThreads did not meet the
//  required guidelines.  This parameter must be a positive integer.
//
#define PP_E_KGS_INVALID_NUMBER_PROCESS_THREADS ((HRESULT)0x8004910AL)

// base 0x9200 - 0x93ff
//
// MessageId: PP_E_RPS_NOT_INITIALIZED
//
// MessageText:
//
//  RPS is not initialized. Other RPS api can be called only after RPS.Initialize succeed. Action: If Initialize failed, check event log for errors.
//
#define PP_E_RPS_NOT_INITIALIZED         ((HRESULT)0x80049200L)

//
// MessageId: PP_E_RPS_FAILED_TO_CREATE_DOM
//
// MessageText:
//
//  Failed to create DOM object. Action: check if msxml4 has been installed correctly.
//
#define PP_E_RPS_FAILED_TO_CREATE_DOM    ((HRESULT)0x80049201L)

//
// MessageId: PP_E_RPS_INTERNAL_ERROR
//
// MessageText:
//
//  Internal program or unexpected error.  It also could be caused by programming or configuration error. Action: Please check the event log history, the code calling RPS, RPS configuration. Try the steps in the Trouble Shooting sections of the RPS SDK.
//
#define PP_E_RPS_INTERNAL_ERROR          ((HRESULT)0x80049202L)

//
// MessageId: PP_E_RPS_INVALID_OBJECT_ID
//
// MessageText:
//
//  The object ID is invalid. This is can be caused by RPS internal error, or error from a custom component.
//
#define PP_E_RPS_INVALID_OBJECT_ID       ((HRESULT)0x80049203L)

//
// MessageId: PP_E_RPS_OBJECT_ID_CANNOT_OVERWRITE
//
// MessageText:
//
//  The object ID cannot be overridden. CUSTOM component only: caused by trying to override object that can not be overridden.
//
#define PP_E_RPS_OBJECT_ID_CANNOT_OVERWRITE ((HRESULT)0x80049204L)

//
// MessageId: PP_E_RPS_FAILED_TO_TLS
//
// MessageText:
//
//  TLS (thread local storage) call failed. The system is in a bad state. TlsAlloc failed.
//
#define PP_E_RPS_FAILED_TO_TLS           ((HRESULT)0x80049205L)

//
// MessageId: PP_E_RPS_XML_FILE_ERROR
//
// MessageText:
//
//  XML file has error. RPS is seeing an invalid XML file, caused by configuration error.
//
#define PP_E_RPS_XML_FILE_ERROR          ((HRESULT)0x80049206L)

//
// MessageId: PP_E_RPS_READ_ONLY
//
// MessageText:
//
//  Property is read only. This is caused by writing to a readonly property bag.
//
#define PP_E_RPS_READ_ONLY               ((HRESULT)0x80049207L)

//
// MessageId: PP_E_RPS_SERVER_CONFIG_ALREADY_INITTED
//
// MessageText:
//
//  The server config has been already initialized. Caused by RPS internal error.
//
#define PP_E_RPS_SERVER_CONFIG_ALREADY_INITTED ((HRESULT)0x80049208L)

//
// MessageId: PP_E_RPS_INVALIDCONFIG
//
// MessageText:
//
//  Invalid configuration. Check event log for actions.
//
#define PP_E_RPS_INVALIDCONFIG           ((HRESULT)0x80049209L)

//
// MessageId: PP_E_RPS_CERT_NOT_FOUND
//
// MessageText:
//
//  Certificate cannot be found. Certificate required for the operation cannot be found.
//
#define PP_E_RPS_CERT_NOT_FOUND          ((HRESULT)0x8004920AL)

//
// MessageId: PP_E_RPS_SKIBUFFER_TOO_SMALL
//
// MessageText:
//
//  Buffer for SKI is too small. The SKI buffer is too small. Caused by RPS internal error or invalid certificate with large SKI.
//
#define PP_E_RPS_SKIBUFFER_TOO_SMALL     ((HRESULT)0x8004920BL)

//
// MessageId: PP_E_RPS_FILE_TOO_LARGE
//
// MessageText:
//
//  File is too large. Caused by large Certificate file. Max size is: 512K.
//
#define PP_E_RPS_FILE_TOO_LARGE          ((HRESULT)0x8004920CL)

//
// MessageId: PP_E_RPS_INVALID_DATATYPE
//
// MessageText:
//
//  Data type is invalid. The data type is different from the expected data type.
//
#define PP_E_RPS_INVALID_DATATYPE        ((HRESULT)0x8004920DL)

//
// MessageId: PP_E_RPS_MORE_DATA
//
// MessageText:
//
//  Insufficient data buffer.
//
#define PP_E_RPS_MORE_DATA               ((HRESULT)0x8004920EL)

//
// MessageId: PP_E_RPS_INVALID_SIGNATURE
//
// MessageText:
//
//  Signatures do not match.
//
#define PP_E_RPS_INVALID_SIGNATURE       ((HRESULT)0x8004920FL)

//
// MessageId: PP_E_RPS_ENCRYPTEDKEY_TOO_LARGE
//
// MessageText:
//
//  The encrypted key data is too large. Max: 1024 bytes
//
#define PP_E_RPS_ENCRYPTEDKEY_TOO_LARGE  ((HRESULT)0x80049211L)

//
// MessageId: PP_E_RPS_DATA_INTEGRITY_CHECK_FAILED
//
// MessageText:
//
//  Failed data integrity check - hash mismatch.
//
#define PP_E_RPS_DATA_INTEGRITY_CHECK_FAILED ((HRESULT)0x80049212L)

//
// MessageId: PP_E_RPS_CERT_WITHOUT_PRIVATE_KEY
//
// MessageText:
//
//  The certificate used for decryption did not have private key.
//
#define PP_E_RPS_CERT_WITHOUT_PRIVATE_KEY ((HRESULT)0x80049214L)

//
// MessageId: PP_E_RPS_NET_CONFIG_CACHE_ALREADY_INITTED
//
// MessageText:
//
//  Network config cache has already been initialized. Caused by RPS internal error.
//
#define PP_E_RPS_NET_CONFIG_CACHE_ALREADY_INITTED ((HRESULT)0x80049215L)

//
// MessageId: PP_E_RPS_DOMAIN_ATTRIBUTE_NOT_FOUND
//
// MessageText:
//
//  Requested domain attribute was not found in rpsnetwork.xml.
//
#define PP_E_RPS_DOMAIN_ATTRIBUTE_NOT_FOUND ((HRESULT)0x80049216L)

//
// MessageId: PP_E_RPS_INVALIDDATA
//
// MessageText:
//
//  The data to pack/unpack is not valid RPS data.
//
#define PP_E_RPS_INVALIDDATA             ((HRESULT)0x80049217L)

//
// MessageId: PP_E_RPS_TICKET_NOT_INITIALIZED
//
// MessageText:
//
//  Ticket was not initialized. Call ProcessToken or Authenticate API to initialize the ticket before making other calls in ticket object.
//
#define PP_E_RPS_TICKET_NOT_INITIALIZED  ((HRESULT)0x80049218L)

//
// MessageId: PP_E_RPS_TICKET_CANNOT_BE_INITIALIZED_MORE_THAN_ONCE
//
// MessageText:
//
//  Ticket has already been initialized. Ticket object cannot be reused. Call RPS.GetObject to get a new ticket object.
//
#define PP_E_RPS_TICKET_CANNOT_BE_INITIALIZED_MORE_THAN_ONCE ((HRESULT)0x80049219L)

//
// MessageId: PP_E_RPS_SAML_ASSERTION_MISSINGDATA
//
// MessageText:
//
//  SAML assertion or WebSSO ticket missing data member. Invalid Assertion.
//
#define PP_E_RPS_SAML_ASSERTION_MISSINGDATA ((HRESULT)0x8004921AL)

//
// MessageId: PP_E_RPS_INVALID_TIMEWINDOW
//
// MessageText:
//
//  Invalid time window. The timewindow parameter in site configuraion or input parameter is either too large or too small. Check rps.h for the min and max values.
//
#define PP_E_RPS_INVALID_TIMEWINDOW      ((HRESULT)0x8004921BL)

//
// MessageId: PP_E_RPS_HTTP_BODY_REQUIRED
//
// MessageText:
//
//  HTTP body is required to authenticate. Application should call the API again with http body.
//
#define PP_E_RPS_HTTP_BODY_REQUIRED      ((HRESULT)0x8004921DL)

//
// MessageId: PP_E_RPS_INVALID_TICKET_TYPE
//
// MessageText:
//
//  Ticket type is invalid. Could be caused by incorrect ticket type or switching of rpsauth and rpssecauth cookies.
//
#define PP_E_RPS_INVALID_TICKET_TYPE     ((HRESULT)0x8004921EL)

//
// MessageId: PP_E_RPS_INVALID_SLIDINGWINDOW
//
// MessageText:
//
//  Sliding timewindow is invalid. Input parameter sliding time window must be smaller than time window. These values can be from site configuration or api arguments.
//
#define PP_E_RPS_INVALID_SLIDINGWINDOW   ((HRESULT)0x8004921FL)

//
// MessageId: PP_E_RPS_REASON_INVALID_AUTHMETHOD
//
// MessageText:
//
//  Failed the Validate call, reason: failed the authmethod check.
//
#define PP_E_RPS_REASON_INVALID_AUTHMETHOD ((HRESULT)0x80049220L)

//
// MessageId: PP_E_RPS_NO_SUCH_PROFILE_ATTRIBUTE
//
// MessageText:
//
//  The attribute index asked for is greater than the attribute count in the profile schema.
//
#define PP_E_RPS_NO_SUCH_PROFILE_ATTRIBUTE ((HRESULT)0x80049222L)

//
// MessageId: PP_E_RPS_INVALID_PROFILESCHEMA_TYPE
//
// MessageText:
//
//  The data type asked for is not defined in the profile schema - unsupported data type in proflie.
//
#define PP_E_RPS_INVALID_PROFILESCHEMA_TYPE ((HRESULT)0x80049223L)

//
// MessageId: PP_E_RPS_FAILED_DOWNLOAD
//
// MessageText:
//
//  RPS service failed to download rpsnetwork.xml.
//
#define PP_E_RPS_FAILED_DOWNLOAD         ((HRESULT)0x80049224L)

//
// MessageId: PP_E_RPS_INVALID_SITEID
//
// MessageText:
//
//  SiteId does not match the Ticket TargetId or Audience.
//
#define PP_E_RPS_INVALID_SITEID          ((HRESULT)0x80049226L)

//
// MessageId: PP_E_RPS_BASE64DECODE_FAILED
//
// MessageText:
//
//  Failed to do base64 decoding.
//
#define PP_E_RPS_BASE64DECODE_FAILED     ((HRESULT)0x80049227L)

//
// MessageId: PP_E_RPS_REASON_TIMEWINDOW_EXPIRED
//
// MessageText:
//
//  Failed the Validate call, reason: Time window expired.
//
#define PP_E_RPS_REASON_TIMEWINDOW_EXPIRED ((HRESULT)0x80049228L)

//
// MessageId: PP_E_RPS_REASON_SLIDINGWINDOW_EXPIRED
//
// MessageText:
//
//  Failed the Validate call, reason: Sliding time window expired.
//
#define PP_E_RPS_REASON_SLIDINGWINDOW_EXPIRED ((HRESULT)0x80049229L)

//
// MessageId: PP_E_RPS_CERT_INVALID_KEY_SPEC
//
// MessageText:
//
//  The certificate private key has an invalid key spec. The key spec should be AT_KEYEXCHANGE.
//
#define PP_E_RPS_CERT_INVALID_KEY_SPEC   ((HRESULT)0x8004922AL)

//
// MessageId: PP_E_RPS_INTERNAL_ERROR_CODE_UNSET_IN_EXCEPTION
//
// MessageText:
//
//  Internal program error.
//
#define PP_E_RPS_INTERNAL_ERROR_CODE_UNSET_IN_EXCEPTION ((HRESULT)0x8004922BL)

//
// MessageId: PP_E_RPS_REASON_INVALID_AUTHINSTANT_DATATYPE
//
// MessageText:
//
//  Invalid AuthInstant data type encountered during time window validation.
//
#define PP_E_RPS_REASON_INVALID_AUTHINSTANT_DATATYPE ((HRESULT)0x8004922CL)

//
// MessageId: PP_E_RPS_REASON_HTTPS_OR_ENCRYPTED_TICKET_NEEDED
//
// MessageText:
//
//  Https or encrypted ticket is needed.
//
#define PP_E_RPS_REASON_HTTPS_OR_ENCRYPTED_TICKET_NEEDED ((HRESULT)0x8004922DL)

//
// MessageId: PP_E_RPS_REASON_INCORRECT_IV_BYTES
//
// MessageText:
//
//  Https or encrypted ticket is needed.
//
#define PP_E_RPS_REASON_INCORRECT_IV_BYTES ((HRESULT)0x8004922EL)

//
// MessageId: PP_E_RPS_REASON_PASSPORT_F_ERROR_ENCOUNTERED
//
// MessageText:
//
//  Passport f error is encountered in the query string.
//
#define PP_E_RPS_REASON_PASSPORT_F_ERROR_ENCOUNTERED ((HRESULT)0x8004922FL)

//
// MessageId: PP_E_RPS_NO_SESSION_KEY
//
// MessageText:
//
//  There is no session key in the ticket.
//
#define PP_E_RPS_NO_SESSION_KEY          ((HRESULT)0x80049230L)

//
// MessageId: PP_E_RPS_NOT_AUTHENTICATED
//
// MessageText:
//
//  User is not authenticated.
//
#define PP_E_RPS_NOT_AUTHENTICATED       ((HRESULT)0x8004923AL)

//
// MessageId: PP_E_RPS_INVALID_COOKIE_NAME
//
// MessageText:
//
//  The reserved cookie name is specified.
//
#define PP_E_RPS_INVALID_COOKIE_NAME     ((HRESULT)0x80049231L)

//
// MessageId: PP_E_RPS_INVALID_AUTHPOLICY
//
// MessageText:
//
//  The AuthPolicy parameter in site configuration or input parameter is invalid or missing. Check rpsnetwork.xml file for valid AuthPolicy names.
//
#define PP_E_RPS_INVALID_AUTHPOLICY      ((HRESULT)0x80049232L)

//
// MessageId: PP_E_RPS_INVALID_ENCRYPT_ALGID
//
// MessageText:
//
//  The encryption method algid is invalid.
//
#define PP_E_RPS_INVALID_ENCRYPT_ALGID   ((HRESULT)0x80049233L)

//
// MessageId: PP_E_RPS_REASON_POST_TICKET_TIMEWINDOW_EXPIRED
//
// MessageText:
//
//  Post ticket time window expired.  Ticket could be reposted.
//
#define PP_E_RPS_REASON_POST_TICKET_TIMEWINDOW_EXPIRED ((HRESULT)0x80049234L)

//
// MessageId: PP_E_RPS_TICKET_HAS_NO_SESSIONKEY
//
// MessageText:
//
//  The ticket does not have sessionkey.
//
#define PP_E_RPS_TICKET_HAS_NO_SESSIONKEY ((HRESULT)0x80049235L)

//
// MessageId: PP_E_RPS_TICKET_HAS_NO_CLIENTIP
//
// MessageText:
//
//  The ticket does not have client IP.
//
#define PP_E_RPS_TICKET_HAS_NO_CLIENTIP  ((HRESULT)0x80049236L)

//
// MessageId: PP_E_RPS_REASON_INVALID_CLIENTIP_DATATYPE
//
// MessageText:
//
//  Invalid ClientIP data type encountered during IP Address validation.
//
#define PP_E_RPS_REASON_INVALID_CLIENTIP_DATATYPE ((HRESULT)0x80049237L)

//
// MessageId: PP_E_RPS_REASON_IP_MISMATCH
//
// MessageText:
//
//  The IP address in ticket is different from the RequestIP value in property bag.
//
#define PP_E_RPS_REASON_IP_MISMATCH      ((HRESULT)0x80049238L)

//
// MessageId: PP_E_RPS_PROXY_AUTH_NOT_ALLOWED
//
// MessageText:
//
//  The ticket AuthFlags contains the Proxy Auth bit and the Proxy Auth is not allowed for this site.
//
#define PP_E_RPS_PROXY_AUTH_NOT_ALLOWED  ((HRESULT)0x80049239L)

//
// MessageId: PP_E_RPS_CERT_INVALID_ISSUER
//
// MessageText:
//
//  The valid issuer cannot be found for the certificate to be verified.
//
#define PP_E_RPS_CERT_INVALID_ISSUER     ((HRESULT)0x80049240L)

//
// MessageId: PP_E_RPS_CERT_CA_ROLLOVER
//
// MessageText:
//
//  The CA certificate has expired.
//
#define PP_E_RPS_CERT_CA_ROLLOVER        ((HRESULT)0x80049241L)

//
// MessageId: PP_E_RPS_CERT_INVALID_POP
//
// MessageText:
//
//  The certificate verification failed because POP was invalid. Sender may not possess the private key for the certificate.
//
#define PP_E_RPS_CERT_INVALID_POP        ((HRESULT)0x80049242L)

//
// MessageId: PP_E_RPS_CERT_NOT_VALID_FOR_MINTTL
//
// MessageText:
//
//  The certificate is not valid for the given minimum time-to-live.
//
#define PP_E_RPS_CERT_NOT_VALID_FOR_MINTTL ((HRESULT)0x80049243L)

//
// MessageId: PP_E_RPS_INVALID_INPUT_STRING
//
// MessageText:
//
//  The input string contains invalid or unexpected chars.
//
#define PP_E_RPS_INVALID_INPUT_STRING    ((HRESULT)0x80049244L)

//
// MessageId: PP_E_RPS_TICKET_HAS_NO_OFFERACTIONS
//
// MessageText:
//
//  The ticket does not have any offeractions.
//
#define PP_E_RPS_TICKET_HAS_NO_OFFERACTIONS ((HRESULT)0x80049245L)

//
// MessageId: PP_E_RPS_REASON_INVALID_OFFERACTIONS_DATATYPE
//
// MessageText:
//
//  Invalid offeractions data type encountered during validation.
//
#define PP_E_RPS_REASON_INVALID_OFFERACTIONS_DATATYPE ((HRESULT)0x80049246L)

//
// MessageId: PP_E_RPS_REASON_OFFERACTIONS_INVALID
//
// MessageText:
//
//  All the offeractions povided in the property bag cannot be validated for the token.
//
#define PP_E_RPS_REASON_OFFERACTIONS_INVALID ((HRESULT)0x80049247L)

//
// MessageId: PP_E_RPS_NO_OFFERACTIONS
//
// MessageText:
//
//  No offeractions were provided for validating consent.
//
#define PP_E_RPS_NO_OFFERACTIONS         ((HRESULT)0x80049248L)

//
// MessageId: PP_E_RPS_SERVER_BUSY
//
// MessageText:
//
//  The request cannot be served at this time. Please try again later.
//
#define PP_E_RPS_SERVER_BUSY             ((HRESULT)0x80049249L)

//
// MessageId: PP_E_RPS_REASON_INVALID_ISSUEINSTANT_DATATYPE
//
// MessageText:
//
//  Invalid expirytime data type encountered during validation.
//
#define PP_E_RPS_REASON_INVALID_ISSUEINSTANT_DATATYPE ((HRESULT)0x80049250L)

//
// MessageId: PP_E_RPS_REASON_INVALID_EXPIRYTIME_DATATYPE
//
// MessageText:
//
//  Invalid expirytime data type encountered during validation.
//
#define PP_E_RPS_REASON_INVALID_EXPIRYTIME_DATATYPE ((HRESULT)0x80049251L)

//
// MessageId: PP_E_RPS_REASON_INVALID_APPID_DATATYPE
//
// MessageText:
//
//  Invalid appid data type encountered during validation.
//
#define PP_E_RPS_REASON_INVALID_APPID_DATATYPE ((HRESULT)0x80049252L)

//
// MessageId: PP_E_RPS_OFFERACTION_MISMATCH
//
// MessageText:
//
//  Incoming offeraction doesn't match offeraction configured for this path.
//
#define PP_E_RPS_OFFERACTION_MISMATCH    ((HRESULT)0x80049253L)

//
// MessageId: PP_E_RPS_INVALID_WLID_TOKEN
//
// MessageText:
//
//  Invalid WLID token.
//
#define PP_E_RPS_INVALID_WLID_TOKEN      ((HRESULT)0x80049256L)

//
// MessageId: PP_E_RPS_NEGO2_NOT_SUPPORTED
//
// MessageText:
//
//  Negotiate2 protocol is not supported on server.
//
#define PP_E_RPS_NEGO2_NOT_SUPPORTED     ((HRESULT)0x80049257L)

//
// MessageId: PP_E_RPS_CUSTOMLIVEID_TICKET_TPE_NOT_SUPPORTED
//
// MessageText:
//
//  Ticket type is not supported for Custom LiveID protocol.
//
#define PP_E_RPS_CUSTOMLIVEID_TICKET_TPE_NOT_SUPPORTED ((HRESULT)0x80049258L)

//
// MessageId: PP_E_RPS_SAML_TICKET_TYPE_NOT_SUPPORTED
//
// MessageText:
//
//  SAML ticket type is not supported.
//
#define PP_E_RPS_SAML_TICKET_TYPE_NOT_SUPPORTED ((HRESULT)0x80049259L)

//
// MessageId: PP_E_RPS_PACKAGE_NOT_SUPPORTED
//
// MessageText:
//
//  LiveAP package is not supported on server.
//
#define PP_E_RPS_PACKAGE_NOT_SUPPORTED   ((HRESULT)0x8004925AL)

// base 0x9400
//
// MessageId: PP_E_RPSDATA_DATA_TOO_LARGE
//
// MessageText:
//
//  The data is larger than the RPSData limit.
//
#define PP_E_RPSDATA_DATA_TOO_LARGE      ((HRESULT)0x80049400L)

//
// MessageId: PP_E_RPSDATA_INVALID_DATATYPE
//
// MessageText:
//
//  The data type in data schema is not supported.
//
#define PP_E_RPSDATA_INVALID_DATATYPE    ((HRESULT)0x80049401L)

//
// MessageId: PP_E_RPSDATA_MORE_DATA
//
// MessageText:
//
//  Data buffer is insufficient.
//
#define PP_E_RPSDATA_MORE_DATA           ((HRESULT)0x80049402L)

//
// MessageId: PP_E_RPSDATA_INVALID_DATAOFFSET
//
// MessageText:
//
//  The data offset is too large or invalid.
//
#define PP_E_RPSDATA_INVALID_DATAOFFSET  ((HRESULT)0x80049403L)

//
// MessageId: PP_E_RPSDATA_INVALIDDATA
//
// MessageText:
//
//  The data is invalid.
//
#define PP_E_RPSDATA_INVALIDDATA         ((HRESULT)0x80049404L)

//
// MessageId: PP_E_RPSDATA_UNSUPPORTED_DATATYPE
//
// MessageText:
//
//  The legacy data type in the ticket is not supported.
//
#define PP_E_RPSDATA_UNSUPPORTED_DATATYPE ((HRESULT)0x80049405L)

// base 0x9600
//------------------------------------------------------------------------------
// PPMT Errors
//------------------------------------------------------------------------------
#define PP_E_PPMT_BASE       0x9600
//
// MessageId: PP_E_PPMT_INVALIDSERVICEDA
//
// MessageText:
//
//  Object PPMTSettings, property PPMTServiceDAMap had invalid value. The expected format for each instance is <Service Name>,<DA>. DA is EASI/HM/MSN.
//
#define PP_E_PPMT_INVALIDSERVICEDA       ((HRESULT)0x80049600L)

// base 0xF000
//code manager error code
//#define CCM_E_CCMCORELIBBASE 0xF000
//
// MessageId: CCM_E_DEF_IN_USE
//
// MessageText:
//
//  The definition is in use, this entity is currently actively referenced (hr = %1)
//
#define CCM_E_DEF_IN_USE                 ((HRESULT)0x8004F000L)

//
// MessageId: CCM_E_VARCONVERTFAILED
//
// MessageText:
//
//  The conversion failed, one of the value couldn't be converted to declared datatype (hr = %1)
//
#define CCM_E_VARCONVERTFAILED           ((HRESULT)0x8004F001L)

//
// MessageId: CCM_E_DATATYPENOTSUPPORTED
//
// MessageText:
//
//  The datatype is not supported (hr = %1)
//
#define CCM_E_DATATYPENOTSUPPORTED       ((HRESULT)0x8004F002L)

//
// MessageId: CCM_E_INVALIDOTAVALUE
//
// MessageText:
//
//  The value for the Object Type Attribute is invalid (hr = %1)
//
#define CCM_E_INVALIDOTAVALUE            ((HRESULT)0x8004F003L)

//
// MessageId: CCM_E_OTANOTHONORED
//
// MessageText:
//
//  The request violates one or more Object Type Attributes (hr = %1)
//
#define CCM_E_OTANOTHONORED              ((HRESULT)0x8004F004L)

//
// MessageId: CCM_E_PROPANOTHONORED
//
// MessageText:
//
//  The request violates one or more Property Attributes (hr = %1)
//
#define CCM_E_PROPANOTHONORED            ((HRESULT)0x8004F005L)

//
// MessageId: CCM_E_RELNOTHONORED
//
// MessageText:
//
//  The request violates one or more Relationship constraints (hr = %1)
//
#define CCM_E_RELNOTHONORED              ((HRESULT)0x8004F006L)

//
// MessageId: CCM_E_DATATYPEREQUIRED
//
// MessageText:
//
//  DataType is a required Property Attribute (hr = %1)
//
#define CCM_E_DATATYPEREQUIRED           ((HRESULT)0x8004F007L)

//
// MessageId: CCM_E_PROPANOUPDATE
//
// MessageText:
//
//  The Property is marked No Update (hr = %1)
//
#define CCM_E_PROPANOUPDATE              ((HRESULT)0x8004F008L)

//
// MessageId: CCM_E_PROPAMULTIINSTANCE
//
// MessageText:
//
//  The Multi Instance Property attribute is not respected (hr = %1)
//
#define CCM_E_PROPAMULTIINSTANCE         ((HRESULT)0x8004F009L)

//
// MessageId: CCM_E_OTANOCREATE
//
// MessageText:
//
//  The Object Type is marked as Non Creatable (hr = %1)
//
#define CCM_E_OTANOCREATE                ((HRESULT)0x8004F00AL)

//
// MessageId: CCM_E_OTANODELETE
//
// MessageText:
//
//  The Object Type is marked as Non Deleteable (hr = %1)
//
#define CCM_E_OTANODELETE                ((HRESULT)0x8004F00BL)

//
// MessageId: CCM_E_OTASINGLEOBJECT
//
// MessageText:
//
//  The Object Type is marked as Single Object (hr = %1)
//
#define CCM_E_OTASINGLEOBJECT            ((HRESULT)0x8004F00CL)

//
// MessageId: CCM_E_OTASINGLEINSTANCEPEROBJECT
//
// MessageText:
//
//  The Object Type is marked as Single Instance per Object (hr = %1)
//
#define CCM_E_OTASINGLEINSTANCEPEROBJECT ((HRESULT)0x8004F00DL)

//
// MessageId: CCM_E_OTASINGLEINSTANCE
//
// MessageText:
//
//  The Object Type is marked as Single Instance (hr = %1)
//
#define CCM_E_OTASINGLEINSTANCE          ((HRESULT)0x8004F00EL)

//
// MessageId: CCM_E_OTANOUPDATE
//
// MessageText:
//
//  The Object Type is marked as No Update (hr = %1)
//
#define CCM_E_OTANOUPDATE                ((HRESULT)0x8004F00FL)

//
// MessageId: CCM_E_INVALIDACTION
//
// MessageText:
//
//  An invalid action has been specified (hr = %1)
//
#define CCM_E_INVALIDACTION              ((HRESULT)0x8004F010L)

//
// MessageId: CCM_E_OTA_CATEGORY_REQUIRED
//
// MessageText:
//
//  Category is a required Object Type Attribute (hr = %1)
//
#define CCM_E_OTA_CATEGORY_REQUIRED      ((HRESULT)0x8004F011L)

//
// MessageId: CCM_E_CANNOT_DEFINE_BUILTIN_TYPE
//
// MessageText:
//
//  Object Types of the Built-in Category cannot be defined (hr = %1)
//
#define CCM_E_CANNOT_DEFINE_BUILTIN_TYPE ((HRESULT)0x8004F012L)

//
// MessageId: CCM_E_CANNOT_DEFINE_BUILTIN_PROPERTY
//
// MessageText:
//
//  Properties with the Built-in property attribute set cannot be defined (hr = %1)
//
#define CCM_E_CANNOT_DEFINE_BUILTIN_PROPERTY ((HRESULT)0x8004F013L)

//
// MessageId: CCM_E_CANNOT_UPDATE_BUILTIN_TYPE
//
// MessageText:
//
//  The definition of Object Types of the Built-in Category cannot be updated (hr = %1)
//
#define CCM_E_CANNOT_UPDATE_BUILTIN_TYPE ((HRESULT)0x8004F014L)

//
// MessageId: CCM_E_CANNOT_UPDATE_BUILTIN_PROPERTY
//
// MessageText:
//
//  The definition of Properties with the Built-in property attribute set cannot be updated (hr = %1)
//
#define CCM_E_CANNOT_UPDATE_BUILTIN_PROPERTY ((HRESULT)0x8004F015L)

//
// MessageId: CCM_E_CANNOT_USE_BUILTIN_PROPERTY
//
// MessageText:
//
//  Properties with the Built-in property attribute set cannot be used by user defined object types (hr = %1)
//
#define CCM_E_CANNOT_USE_BUILTIN_PROPERTY ((HRESULT)0x8004F016L)

//
// MessageId: CCM_E_COULD_NOT_GET_CURRENTUTC_DBTIMESTAMP
//
// MessageText:
//
//  Unable to get the current UTC time in DBTIMESTAMP format (hr = %1)
//
#define CCM_E_COULD_NOT_GET_CURRENTUTC_DBTIMESTAMP ((HRESULT)0x80049601L)

//
// MessageId: CCM_E_INVALIDTYPEFORBLOB
//
// MessageText:
//
//  Invalid data type for Blob from DB (hr = %1)
//
#define CCM_E_INVALIDTYPEFORBLOB         ((HRESULT)0x80049602L)

//
// MessageId: CCM_E_CANTREADBLOBTYPE
//
// MessageText:
//
//  Unable to read Blob type from DB (hr = %1)
//
#define CCM_E_CANTREADBLOBTYPE           ((HRESULT)0x80049603L)

//
// MessageId: CCM_E_CANTREADBLOBLEN
//
// MessageText:
//
//  Unable to read Blob length from DB (hr = %1)
//
#define CCM_E_CANTREADBLOBLEN            ((HRESULT)0x80049604L)

//
// MessageId: CCM_E_CANTREADBLOBBSTR
//
// MessageText:
//
//  Unable to read 'string' data part of the blob (hr = %1)
//
#define CCM_E_CANTREADBLOBBSTR           ((HRESULT)0x80049605L)

//
// MessageId: CCM_E_CANTREADBLOBARRAY
//
// MessageText:
//
//  Unable to read 'array' data part of the blob (hr = %1)
//
#define CCM_E_CANTREADBLOBARRAY          ((HRESULT)0x80049606L)

//
// MessageId: CCM_E_CMDNOTALLOWED
//
// MessageText:
//
//  The requested command either is of unknow type or is not allowed to be run thru the API (hr = %1)
//
#define CCM_E_CMDNOTALLOWED              ((HRESULT)0x8004F017L)

//
// MessageId: CCM_E_NULLBLOBPTR
//
// MessageText:
//
//  Empty Blob returned from DB (hr = %1)
//
#define CCM_E_NULLBLOBPTR                ((HRESULT)0x80049607L)

//
// MessageId: CCM_E_MANIFESTMISMATCHWITHIMPACTS
//
// MessageText:
//
//  The manifest mismatches with the list of generated impacts (hr = %1)
//
#define CCM_E_MANIFESTMISMATCHWITHIMPACTS ((HRESULT)0x80049608L)

//
// MessageId: CCM_E_OTCNOTROLLABLE
//
// MessageText:
//
//  The category does not allow for RollBack/UndoRollBack etc.. kind of operations (hr = %1)
//
#define CCM_E_OTCNOTROLLABLE             ((HRESULT)0x8004F018L)

//
// MessageId: CCM_E_PROPAUSEBLOBINVALIDDATATYPE
//
// MessageText:
//
//  The UseBlob property attribute can only be used in combination with 'strings' or 'array' datatypes (hr = %1)
//
#define CCM_E_PROPAUSEBLOBINVALIDDATATYPE ((HRESULT)0x8004F019L)

//
// MessageId: CCM_E_OTAWRONGNOTIFICATIONTARGET
//
// MessageText:
//
//  The NotificationTarget object type attribute is invalid (hr = %1)
//
#define CCM_E_OTAWRONGNOTIFICATIONTARGET ((HRESULT)0x8004F01AL)

//
// MessageId: CCM_E_CMDNOTFOUNDORMULTIDEF
//
// MessageText:
//
//  The command does not exist or is defined multiple times (hr = %1)
//
#define CCM_E_CMDNOTFOUNDORMULTIDEF      ((HRESULT)0x80049609L)

//
// MessageId: CCM_E_EMPTYTARGETMACHINESSET
//
// MessageText:
//
//  No resulting machine to which to issue the command (hr = %1)
//
#define CCM_E_EMPTYTARGETMACHINESSET     ((HRESULT)0x8004F01BL)

//
// MessageId: CCM_E_NOPROPERTIES
//
// MessageText:
//
//  No properties (hr = %1)
//
#define CCM_E_NOPROPERTIES               ((HRESULT)0x8004960AL)

//
// MessageId: CCM_E_NORELATIONSHIPS
//
// MessageText:
//
//  No relationships (hr = %1)
//
#define CCM_E_NORELATIONSHIPS            ((HRESULT)0x8004960BL)

//
// MessageId: CCM_E_NOENTITIES
//
// MessageText:
//
//  No entities (hr = %1)
//
#define CCM_E_NOENTITIES                 ((HRESULT)0x8004960CL)

//
// MessageId: CCM_E_EMPTYINPUTXML
//
// MessageText:
//
//  The XML in input is totally empty (hr = %1)
//
#define CCM_E_EMPTYINPUTXML              ((HRESULT)0x8004F01CL)

//
// MessageId: CCM_E_REQUIREDINPUTISEMPTY
//
// MessageText:
//
//  One or more required parameters do not contain a value (hr = %1)
//
#define CCM_E_REQUIREDINPUTISEMPTY       ((HRESULT)0x8004F01DL)

//
// MessageId: CCM_E_CONVERSIONFAILEDFORINPUT
//
// MessageText:
//
//  Failed to convert input (hr = %1)
//
#define CCM_E_CONVERSIONFAILEDFORINPUT   ((HRESULT)0x8004960DL)

//
// MessageId: CCM_E_INVALIDSCHEMA
//
// MessageText:
//
//  An invalid schema has been specified (hr = %1)
//
#define CCM_E_INVALIDSCHEMA              ((HRESULT)0x8004960EL)

//
// MessageId: CCM_E_INVALIDFID
//
// MessageText:
//
//  An invalid subtle ID has been specified (hr = %1)
//
#define CCM_E_INVALIDFID                 ((HRESULT)0x8004F01EL)

//
// MessageId: CCM_E_OTNOTFOUND
//
// MessageText:
//
//  Object Type not found in DB or cache (hr = %1)
//
#define CCM_E_OTNOTFOUND                 ((HRESULT)0x8004F01FL)

//
// MessageId: CCM_E_OTANOTFOUND
//
// MessageText:
//
//  Object Type Attribute not found in DB or cache (hr = %1)
//
#define CCM_E_OTANOTFOUND                ((HRESULT)0x8004F020L)

//
// MessageId: CCM_E_PROPNOTFOUND
//
// MessageText:
//
//  Property not found in DB or cache, or Object type no longer referencing the property (hr = %1)
//
#define CCM_E_PROPNOTFOUND               ((HRESULT)0x8004F021L)

//
// MessageId: CCM_E_PROPANOTFOUND
//
// MessageText:
//
//  Property Attribute not found in DB or cache (hr = %1)
//
#define CCM_E_PROPANOTFOUND              ((HRESULT)0x8004F022L)

//
// MessageId: CCM_E_IDALREADYUSED
//
// MessageText:
//
//  One of the IDs is used more than once (hr = %1)
//
#define CCM_E_IDALREADYUSED              ((HRESULT)0x8004F023L)

//
// MessageId: CCM_E_DANGLINGFAKEID
//
// MessageText:
//
//  One of the subtle IDs is used in a relationship but not in an entity creation (hr = %1)
//
#define CCM_E_DANGLINGFAKEID             ((HRESULT)0x8004F024L)

//
// MessageId: CCM_E_MULTICATEGORYNOTSUPPORTED
//
// MessageText:
//
//  The objects pertain to multiple categories (hr = %1)
//
#define CCM_E_MULTICATEGORYNOTSUPPORTED  ((HRESULT)0x8004F025L)

//
// MessageId: CCM_E_ESCAPEXMLFAILED
//
// MessageText:
//
//  Escaping of data for XML failed (hr = %1)
//
#define CCM_E_ESCAPEXMLFAILED            ((HRESULT)0x8004960FL)

//
// MessageId: CCM_E_INVALIDCMD
//
// MessageText:
//
//  An invalid 'cmd' has been detected (hr = %1)
//
#define CCM_E_INVALIDCMD                 ((HRESULT)0x8004F026L)

//
// MessageId: CCM_E_CONFLICTINGIDS
//
// MessageText:
//
//  Multiple conflicting IDs are used (hr = %1)
//
#define CCM_E_CONFLICTINGIDS             ((HRESULT)0x8004F027L)

//
// MessageId: CCM_E_CMDCREATENOOBJECTNAME
//
// MessageText:
//
//  cmd='create' requires object name (hr = %1)
//
#define CCM_E_CMDCREATENOOBJECTNAME      ((HRESULT)0x8004F028L)

//
// MessageId: CCM_E_CMDNOCREATEFAKEID
//
// MessageText:
//
//  Subtle IDs are allowed only for cmd='create' (hr = %1)
//
#define CCM_E_CMDNOCREATEFAKEID          ((HRESULT)0x8004F029L)

//
// MessageId: CCM_E_INVALIDENTITYTYPE
//
// MessageText:
//
//  An invalid entity type has been specified (hr = %1)
//
#define CCM_E_INVALIDENTITYTYPE          ((HRESULT)0x8004F02AL)

//
// MessageId: CCM_E_CONTRADDICTINGCMD
//
// MessageText:
//
//  Contraddicting commands detected (hr = %1)
//
#define CCM_E_CONTRADDICTINGCMD          ((HRESULT)0x8004F02BL)

//
// MessageId: CCM_E_IDREQUIRED
//
// MessageText:
//
//  ID is required (hr = %1)
//
#define CCM_E_IDREQUIRED                 ((HRESULT)0x8004F02CL)

//
// MessageId: CCM_E_INVALIDRELTYPE
//
// MessageText:
//
//  An invalid relationship type has been detected (hr = %1)
//
#define CCM_E_INVALIDRELTYPE             ((HRESULT)0x8004F02DL)

//
// MessageId: CCM_E_INVALIDRELEASE
//
// MessageText:
//
//  An invalid release number has been detected (hr = %1)
//
#define CCM_E_INVALIDRELEASE             ((HRESULT)0x8004F02EL)

//
// MessageId: CCM_E_OTCNOTFOUNDORMULTIDEF
//
// MessageText:
//
//  The Object Type Category does not exist or is defined multiple times (hr = %1)
//
#define CCM_E_OTCNOTFOUNDORMULTIDEF      ((HRESULT)0x8004F02FL)

//
// MessageId: CCM_E_ALLOWEDRELALREADYPRESENTBUTDIFFER
//
// MessageText:
//
//  One of the Allowed Relationship specified already exists but differs from the user input (hr = %1)
//
#define CCM_E_ALLOWEDRELALREADYPRESENTBUTDIFFER ((HRESULT)0x8004F030L)

//
// MessageId: CCM_E_RELTARGETANDSOURCEPRESENT
//
// MessageText:
//
//  A relationship with both target and source info has been detected (hr = %1)
//
#define CCM_E_RELTARGETANDSOURCEPRESENT  ((HRESULT)0x8004F031L)

//
// MessageId: CCM_E_RELSOURCEWITHTARGETINFO
//
// MessageText:
//
//  A relationship for source with target info has been detected (hr = %1)
//
#define CCM_E_RELSOURCEWITHTARGETINFO    ((HRESULT)0x8004F032L)

//
// MessageId: CCM_E_RELTARGETWITHSOURCEINFO
//
// MessageText:
//
//  A relationship for target with source info has been detected (hr = %1)
//
#define CCM_E_RELTARGETWITHSOURCEINFO    ((HRESULT)0x8004F033L)

//
// MessageId: CCM_E_RELSOURCEANDCMD
//
// MessageText:
//
//  A relationship for source with cmd has been detected (hr = %1)
//
#define CCM_E_RELSOURCEANDCMD            ((HRESULT)0x8004F034L)

//
// MessageId: CCM_E_INVALIDSEARCHTYPEANDINPUT
//
// MessageText:
//
//  The specified search type and the specified input do not match (hr = %1)
//
#define CCM_E_INVALIDSEARCHTYPEANDINPUT  ((HRESULT)0x8004F035L)

//
// MessageId: CCM_E_NOTANOBJECT
//
// MessageText:
//
//  The requested entity is not an object (hr = %1)
//
#define CCM_E_NOTANOBJECT                ((HRESULT)0x8004F036L)

//
// MessageId: CCM_E_OTALREADYDEFINED
//
// MessageText:
//
//  The Object Type already exists (hr = %1)
//
#define CCM_E_OTALREADYDEFINED           ((HRESULT)0x8004F037L)

//
// MessageId: CCM_E_OTAALREADYDEFINED
//
// MessageText:
//
//  The Object Type Attribute already exists (hr = %1)
//
#define CCM_E_OTAALREADYDEFINED          ((HRESULT)0x8004F038L)

//
// MessageId: CCM_E_PROPALREADYDEFINED
//
// MessageText:
//
//  The Property already exists (hr = %1)
//
#define CCM_E_PROPALREADYDEFINED         ((HRESULT)0x8004F039L)

//
// MessageId: CCM_E_PROPAALREADYDEFINED
//
// MessageText:
//
//  The Property Attribute already exists (hr = %1)
//
#define CCM_E_PROPAALREADYDEFINED        ((HRESULT)0x8004F03AL)

//
// MessageId: CCM_E_ALLOWEDRELINVALIDVALUE
//
// MessageText:
//
//  The value specified for the allowed relationship is not valid (hr = %1)
//
#define CCM_E_ALLOWEDRELINVALIDVALUE     ((HRESULT)0x8004F03BL)

//
// MessageId: CCM_E_OTABUILTINPREFIXNOTPERMITTED
//
// MessageText:
//
//  User defined Object Type Attribute cannot have the 'OTA_' prefix of built-in Object Type Attribute (hr = %1)
//
#define CCM_E_OTABUILTINPREFIXNOTPERMITTED ((HRESULT)0x8004F03CL)

//
// MessageId: CCM_E_PROPABUILTINPREFIXNOTPERMITTED
//
// MessageText:
//
//  User defined Property Attribute cannot have the 'PropA_' prefix of built-in Property Attribute (hr = %1)
//
#define CCM_E_PROPABUILTINPREFIXNOTPERMITTED ((HRESULT)0x8004F03DL)

//
// MessageId: CCM_E_CANNOTDELETEBUILTINOTA
//
// MessageText:
//
//  Built-in OTAs are not deleteable (hr = %1)
//
#define CCM_E_CANNOTDELETEBUILTINOTA     ((HRESULT)0x8004F03EL)

//
// MessageId: CCM_E_CANNOTDELETEBUILTINPROPA
//
// MessageText:
//
//  Built in PropAs are not deleteable (hr = %1)
//
#define CCM_E_CANNOTDELETEBUILTINPROPA   ((HRESULT)0x8004F03FL)

//
// MessageId: CCM_E_NONZERO_INSTANCE_IN_BOOTSTRAP
//
// MessageText:
//
//  Bootstrap mode does not take non zero object instances (hr = %1)
//
#define CCM_E_NONZERO_INSTANCE_IN_BOOTSTRAP ((HRESULT)0x8004F040L)

//
// MessageId: CCM_E_PROPBUILTINPREFIXNOTPERMITTED
//
// MessageText:
//
//  User defined Property cannot have the '__' prefix of built-in Property (hr = %1)
//
#define CCM_E_PROPBUILTINPREFIXNOTPERMITTED ((HRESULT)0x8004F041L)

//
// MessageId: CCM_E_OTA_DESCRIPTION_REQUIRED
//
// MessageText:
//
//  Description is a required Object Type Attribute (hr = %1)
//
#define CCM_E_OTA_DESCRIPTION_REQUIRED   ((HRESULT)0x8004F042L)

//
// MessageId: CCM_E_OTA_OWNER_REQUIRED
//
// MessageText:
//
//  Owner is a required Object Type Attribute (hr = %1)
//
#define CCM_E_OTA_OWNER_REQUIRED         ((HRESULT)0x8004F043L)

//
// MessageId: CCM_E_PROPA_DESCRIPTION_REQUIRED
//
// MessageText:
//
//  Description is a required Property Attribute (hr = %1)
//
#define CCM_E_PROPA_DESCRIPTION_REQUIRED ((HRESULT)0x8004F044L)

//
// MessageId: CCM_E_LOCKFAILURE
//
// MessageText:
//
//  The internal lock failed to initialize correctly (hr = %1)
//
#define CCM_E_LOCKFAILURE                ((HRESULT)0x80049610L)

//
// MessageId: CCM_E_CANTCLAIMREADLOCK
//
// MessageText:
//
//  Unable to claim the internal lock in shared mode (hr = %1)
//
#define CCM_E_CANTCLAIMREADLOCK          ((HRESULT)0x80049611L)

//
// MessageId: CCM_E_CANTCLAIMWRITELOCK
//
// MessageText:
//
//  Unable to claim the internal lock in exclusive mode (hr = %1)
//
#define CCM_E_CANTCLAIMWRITELOCK         ((HRESULT)0x80049612L)

//
// MessageId: CCM_E_EXPECTEDONEFOUNDMULTIPLE
//
// MessageText:
//
//  Expecting at the most one instance instead found multiple (hr = %1)
//
#define CCM_E_EXPECTEDONEFOUNDMULTIPLE   ((HRESULT)0x80049613L)

//
// MessageId: CCM_E_INVALIDATTRIBUTETTYPE
//
// MessageText:
//
//  Only 'per type' and 'per property' queries are supported (hr = %1)
//
#define CCM_E_INVALIDATTRIBUTETTYPE      ((HRESULT)0x8004F045L)

//
// MessageId: CCM_E_DATAVANISHED
//
// MessageText:
//
//  Mandatory data (like Object Type definition, Property definition ...), present at the moment of creation, has vanished (hr = %1)
//
#define CCM_E_DATAVANISHED               ((HRESULT)0x80049614L)

//
// MessageId: CCM_E_INTERNALSCHEMALOADFAILURE
//
// MessageText:
//
//  Unable to load the internal schema (hr = %1)
//
#define CCM_E_INTERNALSCHEMALOADFAILURE  ((HRESULT)0x80049615L)

//
// MessageId: CCM_E_NOCATEGORY
//
// MessageText:
//
//  No valid category has been found (hr = %1)
//
#define CCM_E_NOCATEGORY                 ((HRESULT)0x80049616L)

//
// MessageId: CCM_E_CMDNOSERVICES
//
// MessageText:
//
//  The command does not tolerate any CCMService (hr = %1)
//
#define CCM_E_CMDNOSERVICES              ((HRESULT)0x8004F046L)

//
// MessageId: CCM_E_CMDNOARGS
//
// MessageText:
//
//  The command does not tolerate any extra arguments (hr = %1)
//
#define CCM_E_CMDNOARGS                  ((HRESULT)0x8004F047L)

//
// MessageId: CCM_E_CMDBLOCKED
//
// MessageText:
//
//  The command is blocked because of the status of some CCMServer (hr = %1)
//
#define CCM_E_CMDBLOCKED                 ((HRESULT)0x8004F048L)

//
// MessageId: CCM_E_CMDREQUIRESERVICES
//
// MessageText:
//
//  The command requires CCMService, either no service was specified or the services specified are of the wrong type, only services of type NT(2) or Web(1) are, if required, acceptable (hr = %1)
//
#define CCM_E_CMDREQUIRESERVICES         ((HRESULT)0x8004F049L)

//
// MessageId: CCM_E_CMDREQUIREARGS
//
// MessageText:
//
//  The command requires extra arguments (hr = %1)
//
#define CCM_E_CMDREQUIREARGS             ((HRESULT)0x8004F04AL)

//
// MessageId: CCM_E_UNABLETOGETTHISMACHINENAME
//
// MessageText:
//
//  Unable to obtain this machine name (hr = %1)
//
#define CCM_E_UNABLETOGETTHISMACHINENAME ((HRESULT)0x80049617L)

//
// MessageId: CCM_E_THISMACHINENOTINCCM
//
// MessageText:
//
//  This machine is not in CCM therefore it cannot update the TransactionHistoryLog (hr = %1)
//
#define CCM_E_THISMACHINENOTINCCM        ((HRESULT)0x80049618L)

//
// MessageId: CCM_E_THISMACHINENODC
//
// MessageText:
//
//  This machine has no DataCenter associated therefore it cannot update the TransactionHistoryLog (hr = %1)
//
#define CCM_E_THISMACHINENODC            ((HRESULT)0x80049619L)

//
// MessageId: CCM_E_THISMACHINEMULTIDC
//
// MessageText:
//
//  This machine has multiple DataCenter associated therefore it cannot update the TransactionHistoryLog (hr = %1)
//
#define CCM_E_THISMACHINEMULTIDC         ((HRESULT)0x8004961AL)

//
// MessageId: CCM_E_EXECUTENOTAUTHORIZED
//
// MessageText:
//
//  Execute permission denied on this API (hr = %1)
//
#define CCM_E_EXECUTENOTAUTHORIZED       ((HRESULT)0x8004F04BL)

//
// MessageId: CCM_E_OBJECTTYPEOPERATIONNOTAUTHORIZED
//
// MessageText:
//
//  For one or more object types in the request the required operation is not authorized (hr = %1)
//
#define CCM_E_OBJECTTYPEOPERATIONNOTAUTHORIZED ((HRESULT)0x8004F04CL)

//
// MessageId: CCM_E_EXECUTENOTAUTHORIZEDONCOMMAND
//
// MessageText:
//
//  Execute permission denied on this CCMCommand (hr = %1)
//
#define CCM_E_EXECUTENOTAUTHORIZEDONCOMMAND ((HRESULT)0x8004F04DL)

//
// MessageId: CCM_E_RELATIONSHIPOPERATIONNOTAUTHORIZED
//
// MessageText:
//
//  For one or more object types in the request the required operation about relationships is not authorized (hr = %1)
//
#define CCM_E_RELATIONSHIPOPERATIONNOTAUTHORIZED ((HRESULT)0x8004F04EL)

//
// MessageId: CCM_E_MACHINEMULTIDEFNODEF
//
// MessageText:
//
//  The machine is defined multiple time in CCM or not at all (hr = %1)
//
#define CCM_E_MACHINEMULTIDEFNODEF       ((HRESULT)0x8004961BL)

//
// MessageId: CCM_E_SERVICEMULTIDEFNODEF
//
// MessageText:
//
//  The service is defined multiple time in CCM or not at all (hr = %1)
//
#define CCM_E_SERVICEMULTIDEFNODEF       ((HRESULT)0x8004961CL)

//
// MessageId: CCM_E_DCMULTIDEFNODEF
//
// MessageText:
//
//  The DataCenter is defined multiple time in CCM or not at all (hr = %1)
//
#define CCM_E_DCMULTIDEFNODEF            ((HRESULT)0x8004961DL)

//
// MessageId: PP_E_MFSTGEN_NON_CREATE_TRANSACT
//
// MessageText:
//
//  Non create trasact object in create code path (hr = %1)
//
#define PP_E_MFSTGEN_NON_CREATE_TRANSACT ((HRESULT)0x8004961EL)

//
// MessageId: PP_E_MFSTGEN_NON_NOTIFY_TRANSACT
//
// MessageText:
//
//  Object which does not require notification is being processed (hr = %1)
//
#define PP_E_MFSTGEN_NON_NOTIFY_TRANSACT ((HRESULT)0x8004961FL)

//
// MessageId: PP_E_MFSTGEN_NON_UPDATE_TRANSACT
//
// MessageText:
//
//  Non update trasact object in update code path (hr = %1)
//
#define PP_E_MFSTGEN_NON_UPDATE_TRANSACT ((HRESULT)0x80049620L)

//
// MessageId: PP_E_MFSTGEN_INVALID_TRANSACT_TARGET
//
// MessageText:
//
//  Transact target is not a machine or a group (hr = %1)
//
#define PP_E_MFSTGEN_INVALID_TRANSACT_TARGET ((HRESULT)0x80049621L)

//
// MessageId: PP_E_MFSTGEN_OBJ_DOESNOT_EXIST
//
// MessageText:
//
//  An object we are trying to load is not present in DB (hr = %1)
//
#define PP_E_MFSTGEN_OBJ_DOESNOT_EXIST   ((HRESULT)0x80049622L)

//
// MessageId: PP_E_MFSTGEN_AFNTYOBJ_DOESNOT_EXIST
//
// MessageText:
//
//  Affinity Class object does not exist (hr = %1)
//
#define PP_E_MFSTGEN_AFNTYOBJ_DOESNOT_EXIST ((HRESULT)0x80049623L)

//
// MessageId: PP_E_MFSTGEN_MULTIPLE_OVERWRITES
//
// MessageText:
//
//  An object has multiple overwrites of the same type (hr = %1)
//
#define PP_E_MFSTGEN_MULTIPLE_OVERWRITES ((HRESULT)0x80049624L)

//
// MessageId: PP_E_MFSTGEN_NON_DELETE_TRANSACT
//
// MessageText:
//
//  Non delete trasact object in delete code path (hr = %1)
//
#define PP_E_MFSTGEN_NON_DELETE_TRANSACT ((HRESULT)0x80049625L)

//
// MessageId: PP_E_MFSTGEN_NON_MASHINE_OR_GROUP_OBJ
//
// MessageText:
//
//  We are trying to get affinity class for an object which is not a group or a machine (hr = %1)
//
#define PP_E_MFSTGEN_NON_MASHINE_OR_GROUP_OBJ ((HRESULT)0x80049626L)

//
// MessageId: PP_E_MFSTGEN_IMPACTS_DO_NOT_MATCH
//
// MessageText:
//
//  Trying to append impacts to wrong object (hr = %1)
//
#define PP_E_MFSTGEN_IMPACTS_DO_NOT_MATCH ((HRESULT)0x80049627L)

//
// MessageId: PP_E_MFSTGEN_INVALID_OBJ_TYPE
//
// MessageText:
//
//  Type of an object is invalid for this operation (hr = %1)
//
#define PP_E_MFSTGEN_INVALID_OBJ_TYPE    ((HRESULT)0x80049628L)

//
// MessageId: PP_E_MFSTGEN_NO_TRANSACTS
//
// MessageText:
//
//  We have been given an empty transact array for processing (hr = %1)
//
#define PP_E_MFSTGEN_NO_TRANSACTS        ((HRESULT)0x80049629L)

//
// MessageId: PP_E_MFSTGEN_MISSING_NOTIFICATION_SETTINGS
//
// MessageText:
//
//  Notification Settings object is missing in DB (hr = %1)
//
#define PP_E_MFSTGEN_MISSING_NOTIFICATION_SETTINGS ((HRESULT)0x8004962AL)

//
// MessageId: PP_E_MFSTGEN_TRANSPORTGUID_IS_MULTIINSTANCE_OR_MISSING
//
// MessageText:
//
//  There are multiple TransportGUIDs properties in Notification Settings object or none at all(hr = %1)
//
#define PP_E_MFSTGEN_TRANSPORTGUID_IS_MULTIINSTANCE_OR_MISSING ((HRESULT)0x8004962BL)

//
// MessageId: PP_E_MFSTGEN_TRANSPORTTYPE_IS_MULTIINSTANCE_OR_MISSING
//
// MessageText:
//
//  There are multiple TransportTypes properties in NotificationSettings object or none at all (hr = %1)
//
#define PP_E_MFSTGEN_TRANSPORTTYPE_IS_MULTIINSTANCE_OR_MISSING ((HRESULT)0x8004962CL)

//
// MessageId: PP_E_MFSTGEN_CMDPROGID_IS_MULTIINSTANCE_OR_MISSING
//
// MessageText:
//
//  There are multiple instances of CommandProg id property of this command object or none at all (hr = %1)
//
#define PP_E_MFSTGEN_CMDPROGID_IS_MULTIINSTANCE_OR_MISSING ((HRESULT)0x8004962DL)

//
// MessageId: PP_E_MFSTGEN_MISSING_DATACENTER
//
// MessageText:
//
//  This object is not a part of a datacenter (hr = %1)
//
#define PP_E_MFSTGEN_MISSING_DATACENTER  ((HRESULT)0x8004962EL)

//
// MessageId: PP_E_MFSTGEN_MISSING_SERVICE
//
// MessageText:
//
//  This service is not present (hr = %1)
//
#define PP_E_MFSTGEN_MISSING_SERVICE     ((HRESULT)0x8004962FL)

//
// MessageId: PP_E_MFSTGEN_MISSING_COMMAND
//
// MessageText:
//
//  This command is not present (hr = %1)
//
#define PP_E_MFSTGEN_MISSING_COMMAND     ((HRESULT)0x80049630L)

//
// MessageId: PP_E_MFSTGEN_WEBSERVICENAME_IS_MULTIINSTANCE_OR_MISSING
//
// MessageText:
//
//  WebServiceName is a multi instance attribute of this service object or it is missing(hr = %1)
//
#define PP_E_MFSTGEN_WEBSERVICENAME_IS_MULTIINSTANCE_OR_MISSING ((HRESULT)0x80049631L)

//
// MessageId: PP_E_MFSTGEN_SERVICETYPE_IS_MULTIINSTANCE_OR_MISSING
//
// MessageText:
//
//  WebServiceType is a multi instance attribute of this service object or it is missing (hr = %1)
//
#define PP_E_MFSTGEN_SERVICETYPE_IS_MULTIINSTANCE_OR_MISSING ((HRESULT)0x80049632L)

//
// MessageId: PP_E_CCMOCT_BAD_DEPLOYMENT_HIERARCHY
//
// MessageText:
//
//  A problem was encountered during finding affinity class for a machine. The machine may not be member of any group. The generated deployment xml may have more details on the error. (hr = %1)
//
#define PP_E_CCMOCT_BAD_DEPLOYMENT_HIERARCHY ((HRESULT)0x80049633L)

//
// MessageId: PP_E_CCMOCT_NO_MACHINE_OVERRIDE
//
// MessageText:
//
//  The __SERVICEPROPERTYMAP property did not specify any property override(s) for a service. CCM cannot generate deployment XML for the machine. The generated deployment xml may have more details on the error. (hr = %1)
//
#define PP_E_CCMOCT_NO_MACHINE_OVERRIDE  ((HRESULT)0x80049634L)

//
// MessageId: PP_E_CCMOCT_NO_INSTANCE_FOR_PROP
//
// MessageText:
//
//  Some needed properties were not defined in __SERVICEPROPERTYMAP property of a machine. CCM cannot generate deployment XML for the machine. The generated deployment xml may have more details on the error. (hr = %1)
//
#define PP_E_CCMOCT_NO_INSTANCE_FOR_PROP ((HRESULT)0x80049635L)

//
// MessageId: PP_E_CCMOCT_NO_MATCHING_INSTANCE_FOR_PROP
//
// MessageText:
//
//  An instance name specified in __SERVICEPROPERTYMAP was not actually defined for the property. CCM cannot generate deployment XML for the machine. The generated deployment xml may have more details on the error. (hr = %1)
//
#define PP_E_CCMOCT_NO_MATCHING_INSTANCE_FOR_PROP ((HRESULT)0x80049636L)

//
// MessageId: PP_E_CCMOCT_NO_PROP
//
// MessageText:
//
//  A property required for deployment XML generation was not defined for the machine. CCM cannot generate deployment XML for the machine. The generated deployment xml may have more details on the error. (hr = %1)
//
#define PP_E_CCMOCT_NO_PROP              ((HRESULT)0x80049637L)

//
// MessageId: PP_E_CCMOCT_NO_OBJECT
//
// MessageText:
//
//  The requested object was not found in CCM database. CCM cannot generate deployment XML for the machine. The generated deployment xml may have more details on the error. (hr = %1)
//
#define PP_E_CCMOCT_NO_OBJECT            ((HRESULT)0x80049638L)

//
// MessageId: PP_E_CCMOCT_MULTIPLE_OBJECTS
//
// MessageText:
//
//  Multiple objects were found in CCM database where a single object was expected. CCM cannot generate deployment XML for the machine. The generated deployment xml may have more details on the error. (hr = %1)
//
#define PP_E_CCMOCT_MULTIPLE_OBJECTS     ((HRESULT)0x80049639L)

//
// MessageId: PP_E_CCMOCT_NODATACENTER
//
// MessageText:
//
//  No datacenter id was found. Make sure all machines for deployment are part of exactly one datacenter. (hr = %1)
//
#define PP_E_CCMOCT_NODATACENTER         ((HRESULT)0x8004963AL)

//
// MessageId: CCM_E_INVALIDTRANSACTIONID
//
// MessageText:
//
//  This transaction id is not associated with any trigger. (hr = %1)
//
#define CCM_E_INVALIDTRANSACTIONID       ((HRESULT)0x8004963BL)

//
// MessageId: CCM_E_NOCMDTRIGGER
//
// MessageText:
//
//  Trigger with no command. (hr = %1)
//
#define CCM_E_NOCMDTRIGGER               ((HRESULT)0x8004963CL)

//
// MessageId: CCM_E_INVCMDTRIGGER
//
// MessageText:
//
//  Trigger with no command. (hr = %1)
//
#define CCM_E_INVCMDTRIGGER              ((HRESULT)0x8004963DL)

//
// MessageId: CCM_E_FAILEDUPDATEMACHINESTATUS
//
// MessageText:
//
//  Unable to update the machine status after a transaction. (hr = %1)
//
#define CCM_E_FAILEDUPDATEMACHINESTATUS  ((HRESULT)0x8004963EL)

//
// MessageId: CCM_E_FAILEDTHL
//
// MessageText:
//
//  Unable to enter Transaction History Log trigger record after a transaction. (hr = %1)
//
#define CCM_E_FAILEDTHL                  ((HRESULT)0x8004963FL)

//
// MessageId: CCM_E_FAILEDTHLANDUPDATEMACHINESTATUS
//
// MessageText:
//
//  Unable to update the machine status and to enter Transaction History Log trigger record after a transaction. (hr = %1)
//
#define CCM_E_FAILEDTHLANDUPDATEMACHINESTATUS ((HRESULT)0x80049640L)

//
// MessageId: CCM_E_FAILEDTRIGGERCREATE
//
// MessageText:
//
//  Unable to create Trigger after a transaction. (hr = %1)
//
#define CCM_E_FAILEDTRIGGERCREATE        ((HRESULT)0x80049641L)

//
// MessageId: CCM_E_FAILEDTRIGGERCREATEDANDUPDATEMACHINESTATUS
//
// MessageText:
//
//  Unable to create Trigger and to update the machine status after a transaction. (hr = %1)
//
#define CCM_E_FAILEDTRIGGERCREATEDANDUPDATEMACHINESTATUS ((HRESULT)0x80049642L)

//
// MessageId: CCM_E_FAILEDTRIGGERCREATEDANDTHL
//
// MessageText:
//
//  Unable to create Trigger and to enter Transaction History Log trigger record after a transaction. (hr = %1)
//
#define CCM_E_FAILEDTRIGGERCREATEDANDTHL ((HRESULT)0x80049643L)

//
// MessageId: CCM_E_FAILEDTRIGGERCREATEDANDTHLANDUPDATEMACHINESTATUS
//
// MessageText:
//
//  Unable to create Trigger and to enter Transaction History Log trigger record and to update the machine status after a transaction. (hr = %1)
//
#define CCM_E_FAILEDTRIGGERCREATEDANDTHLANDUPDATEMACHINESTATUS ((HRESULT)0x80049644L)

//
// MessageId: CCM_E_SAMEINSTANCE
//
// MessageText:
//
//  Same instance already in DB (hr = %1)
//
#define CCM_E_SAMEINSTANCE               ((HRESULT)0x8004F04FL)

//
// MessageId: CCM_E_THLEXPIREDTOOLONG
//
// MessageText:
//
//  The length for the details is too long (hr = %1)
//
#define CCM_E_THLEXPIREDTOOLONG          ((HRESULT)0x8004F050L)

//
// MessageId: PP_E_CCMOCT_RESULTXML_INVALID
//
// MessageText:
//
//  The generated xml is invalid (hr = %1), the input Octopus Attributes is not in a valid xml format
//
#define PP_E_CCMOCT_RESULTXML_INVALID    ((HRESULT)0x8004F051L)

//
// MessageId: CCM_E_INVALIDINSTANCE
//
// MessageText:
//
//  Invalid object instance detected (hr = %1), only values between 0 and 32767 are acceptable.
//
#define CCM_E_INVALIDINSTANCE            ((HRESULT)0x8004F052L)

//
// MessageId: CCM_E_OBJECTDOESNOTEXIST
//
// MessageText:
//
//  An object specified in the request does not exist, so the required operation cannot be performed (hr = %1).
//
#define CCM_E_OBJECTDOESNOTEXIST         ((HRESULT)0x8004F053L)

//
// MessageId: CCM_E_ENTITYNAME_INVALID
//
// MessageText:
//
//  CCM entity name is invalid
//
#define CCM_E_ENTITYNAME_INVALID         ((HRESULT)0x8004F054L)

//
// MessageId: CCM_E_VALUETYPE_INVALID
//
// MessageText:
//
//  CCM entity value type is invalid
//
#define CCM_E_VALUETYPE_INVALID          ((HRESULT)0x8004F055L)

//
// MessageId: CCM_E_ITEMTYPE_INVALID
//
// MessageText:
//
//  Internal error: invalid type for a CCM item
//
#define CCM_E_ITEMTYPE_INVALID           ((HRESULT)0x8004F056L)

//
// MessageId: CCM_E_ITEMINDEX_INVALID
//
// MessageText:
//
//  Internal error: invalid index for a CCM item
//
#define CCM_E_ITEMINDEX_INVALID          ((HRESULT)0x8004F057L)

//
// MessageId: CCM_E_ITEM_NOTFOUND
//
// MessageText:
//
//  CCM item not found
//
#define CCM_E_ITEM_NOTFOUND              ((HRESULT)0x8004F058L)

//
// MessageId: CCM_E_OBJECTTYPE_INVALID
//
// MessageText:
//
//  Object type is invalid
//
#define CCM_E_OBJECTTYPE_INVALID         ((HRESULT)0x8004F059L)

//
// MessageId: CCM_E_INSTANCE_INVALID
//
// MessageText:
//
//  Object instance is invalid
//
#define CCM_E_INSTANCE_INVALID           ((HRESULT)0x8004F05AL)

//
// MessageId: CCM_E_RELARITY_INVALID
//
// MessageText:
//
//  Invalid relationship arity
//
#define CCM_E_RELARITY_INVALID           ((HRESULT)0x8004F05BL)

//
// MessageId: CCM_E_ITEMPOINTER_INVALID
//
// MessageText:
//
//  Internal error: pointer to CCM item is invalid
//
#define CCM_E_ITEMPOINTER_INVALID        ((HRESULT)0x8004F05CL)

//
// MessageId: CCM_E_TYPENAME_INVALID
//
// MessageText:
//
//  CCM type name is invalid
//
#define CCM_E_TYPENAME_INVALID           ((HRESULT)0x8004F05DL)

//
// MessageId: CCM_E_INVALIDFILENAME
//
// MessageText:
//
//  Input file name is invalid
//
#define CCM_E_INVALIDFILENAME            ((HRESULT)0x8004F05EL)

//
// MessageId: CCM_E_NOMOREFILES
//
// MessageText:
//
//  There are no more files in the input path
//
#define CCM_E_NOMOREFILES                ((HRESULT)0x8004F05FL)

//
// MessageId: CCM_E_INVALID_CCMID
//
// MessageText:
//
//  Invalid ccm id
//
#define CCM_E_INVALID_CCMID              ((HRESULT)0x8004F060L)

//
// MessageId: PP_E_CCMOCT_GETIPFORSERVICE
//
// MessageText:
//
//  The generated xml is invalid (hr = %1), the input Octopus Attributes is not in a valid xml format
//
#define PP_E_CCMOCT_GETIPFORSERVICE      ((HRESULT)0x8004F061L)

//
// MessageId: PP_E_CCMOCT_INVALID_CALCULATEDPROPERTY
//
// MessageText:
//
//  The specified property instance name is not supported as a calculated property in CCM.
//
#define PP_E_CCMOCT_INVALID_CALCULATEDPROPERTY ((HRESULT)0x8004F062L)

//
// MessageId: PP_E_CCMOCT_UNK_PROPERTYVALUETYPE
//
// MessageText:
//
//  The specified property instance value could not be mapped to any known value type.
//
#define PP_E_CCMOCT_UNK_PROPERTYVALUETYPE ((HRESULT)0x8004F063L)

//
// MessageId: PP_E_CCMOCT_INVALID_CCMSERVERPROPERTY
//
// MessageText:
//
//  The specified property instance name is not supported as a CCMServer property in CCM.
//
#define PP_E_CCMOCT_INVALID_CCMSERVERPROPERTY ((HRESULT)0x8004F064L)

//
// MessageId: CCM_E_INVAPIMODE
//
// MessageText:
//
//  The specified API mode is not supported.
//
#define CCM_E_INVAPIMODE                 ((HRESULT)0x8004F065L)

//
// MessageId: CCM_E_ROAPIMODE
//
// MessageText:
//
//  The CCM API is set to Read Only mode as such no write operations are allowed.
//
#define CCM_E_ROAPIMODE                  ((HRESULT)0x8004F066L)

//
// MessageId: CCM_E_INVAPIMETADATAMODE
//
// MessageText:
//
//  The specified API metadata mode is not supported.
//
#define CCM_E_INVAPIMETADATAMODE         ((HRESULT)0x8004F067L)

//
// MessageId: CCM_E_INVALIDBUFFER
//
// MessageText:
//
//  Input buffer is invalid
//
#define CCM_E_INVALIDBUFFER              ((HRESULT)0x8004F068L)

//
// MessageId: CCM_E_CONVERSIONERROR
//
// MessageText:
//
//  Conversion error
//
#define CCM_E_CONVERSIONERROR            ((HRESULT)0x8004F069L)

//
// MessageId: CCM_E_TRXINPUT_INVALID
//
// MessageText:
//
//  Invalid transaction input
//
#define CCM_E_TRXINPUT_INVALID           ((HRESULT)0x8004F06AL)

//
// MessageId: CCM_E_PROPA_OWNER_REQUIRED
//
// MessageText:
//
//  Owner is a required Property Attribute (hr = %1)
//
#define CCM_E_PROPA_OWNER_REQUIRED       ((HRESULT)0x8004F06BL)

//
// MessageId: CCM_E_FORBIDDENOT
//
// MessageText:
//
//  One of the Objects involved in the operation is member of a list of object types that are not available for other than read operations (hr = %1)
//
#define CCM_E_FORBIDDENOT                ((HRESULT)0x8004F06CL)

//
// MessageId: PP_E_MFSTGEN_WEBSERVICENAME_IS_MISSING
//
// MessageText:
//
//  One of the Objects involved in the operation is member of a list of object types that are not available for other than read operations (hr = %1)
//
#define PP_E_MFSTGEN_WEBSERVICENAME_IS_MISSING ((HRESULT)0x8004F06DL)

//
// MessageId: CCM_E_INVALIDOTAVALUEFORCACHETYPE
//
// MessageText:
//
//  The value for the Object Type Attribute OTA_CacheType is invalid (hr = %1)
//
#define CCM_E_INVALIDOTAVALUEFORCACHETYPE ((HRESULT)0x8004F06EL)

//
// MessageId: CCM_E_INVALIDOTAVALUEFORCATEGROY
//
// MessageText:
//
//  The value for the Object Type Attribute OTA_Category is invalid (hr = %1)
//
#define CCM_E_INVALIDOTAVALUEFORCATEGROY ((HRESULT)0x8004F06FL)

//
// MessageId: CCM_E_INVALIDOTAVALUEFORINDEX
//
// MessageText:
//
//  The value for the Object Type Attribute OTA_Index1 or OTA_Index2 or OTA_Index3 is invalid (hr = %1)
//
#define CCM_E_INVALIDOTAVALUEFORINDEX    ((HRESULT)0x8004F070L)

//
// MessageId: CCM_E_PROPBLEMSWITHCONSTRAINTS
//
// MessageText:
//
//  Critical error while dealing with Constraints XML (hr = %1)
//
#define CCM_E_PROPBLEMSWITHCONSTRAINTS   ((HRESULT)0x8004F071L)

//
// MessageId: CCM_E_INVALIDOPINCONSTRAINTS
//
// MessageText:
//
//  Invalid operator detected in Constraints XML (hr = %1)
//
#define CCM_E_INVALIDOPINCONSTRAINTS     ((HRESULT)0x8004F072L)

//
// MessageId: CCM_E_ATTRINCONSTRAINTSOP
//
// MessageText:
//
//  Invalid attributes detected in Constraints XML (hr = %1)
//
#define CCM_E_ATTRINCONSTRAINTSOP        ((HRESULT)0x8004F073L)

//
// MessageId: CCM_E_UNKNODETYPEINCONSTRAINTSOP
//
// MessageText:
//
//  Invalid node type detected in Constraints XML (hr = %1)
//
#define CCM_E_UNKNODETYPEINCONSTRAINTSOP ((HRESULT)0x8004F074L)

//
// MessageId: CCM_E_MIXNODECONTENTINCONSTRAINTS
//
// MessageText:
//
//  Mixed content node detected in Constraints XML (hr = %1)
//
#define CCM_E_MIXNODECONTENTINCONSTRAINTS ((HRESULT)0x8004F075L)

//
// MessageId: CCM_E_TERMINALNODEHASCHILDRENINCONSTRAINTS
//
// MessageText:
//
//  Terminal node with children detected in Constraints XML (hr = %1)
//
#define CCM_E_TERMINALNODEHASCHILDRENINCONSTRAINTS ((HRESULT)0x8004F076L)

//
// MessageId: CCM_E_NONTERMINALNODEMINARITYINCONSTRAINTS
//
// MessageText:
//
//  Non terminal node with less than required minimum arity detected in Constraints XML (hr = %1)
//
#define CCM_E_NONTERMINALNODEMINARITYINCONSTRAINTS ((HRESULT)0x8004F077L)

//
// MessageId: CCM_E_NONTERMINALNODEMAXARITYINCONSTRAINTS
//
// MessageText:
//
//  Non terminal node with greater than allowed maximum arity detected in Constraints XML (hr = %1)
//
#define CCM_E_NONTERMINALNODEMAXARITYINCONSTRAINTS ((HRESULT)0x8004F078L)

//
// MessageId: CCM_E_CONTENTNODEINCONSTRAINTS
//
// MessageText:
//
//  Node with content and should not, or node without content and it should, detected in Constraints XML (hr = %1)
//
#define CCM_E_CONTENTNODEINCONSTRAINTS   ((HRESULT)0x8004F079L)

//
// MessageId: CCM_E_OPERANDCONVERSIONFAILEDINCONSTRAINTS
//
// MessageText:
//
//  A costant value specified for an operator cannot be converted to the required data type (hr = %1)
//
#define CCM_E_OPERANDCONVERSIONFAILEDINCONSTRAINTS ((HRESULT)0x8004F07AL)

//
// MessageId: CCM_E_OPERANDBSTRINCONSTRAINTS
//
// MessageText:
//
//  Operator for BSTR only detected with other datatype in Constraints XML (hr = %1)
//
#define CCM_E_OPERANDBSTRINCONSTRAINTS   ((HRESULT)0x8004F07BL)

//
// MessageId: CCM_E_OPERANDMUSTBEBSTRINCONSTRAINTS
//
// MessageText:
//
//  An operator that only take valid BSTRs as values detected with other datatype in Constraints XML (hr = %1)
//
#define CCM_E_OPERANDMUSTBEBSTRINCONSTRAINTS ((HRESULT)0x8004F07CL)

//
// MessageId: CCM_E_OPERANDMUSTBEUI4INCONSTRAINTS
//
// MessageText:
//
//  An operator that only take valid UI4s as values detected with other datatype in Constraints XML (hr = %1)
//
#define CCM_E_OPERANDMUSTBEUI4INCONSTRAINTS ((HRESULT)0x8004F07DL)

//
// MessageId: CCM_E_INVALIDCONSTRAINTSXML
//
// MessageText:
//
//  Invalid Constraints XML (hr = %1)
//
#define CCM_E_INVALIDCONSTRAINTSXML      ((HRESULT)0x8004F07EL)

//
// MessageId: CCM_E_TOPLEVELNODEONLY1CHILDINCONSTRAINTSXML
//
// MessageText:
//
//  Constraints XML must contain one, and only one, operand node right below the top level <constraints> node (hr = %1)
//
#define CCM_E_TOPLEVELNODEONLY1CHILDINCONSTRAINTSXML ((HRESULT)0x8004F07FL)

//
// MessageId: CCM_E_UNSUPPDATATYPECONSTRAINTS
//
// MessageText:
//
//  Unsupported data type to be constrained (hr = %1)
//
#define CCM_E_UNSUPPDATATYPECONSTRAINTS  ((HRESULT)0x8004F080L)

//
// MessageId: CCM_E_VALUECANNOTBECOERCEDTOREQUIREDDATATYPE
//
// MessageText:
//
//  Value cannot be coerced to required data type (hr = %1)
//
#define CCM_E_VALUECANNOTBECOERCEDTOREQUIREDDATATYPE ((HRESULT)0x8004F081L)

//
// MessageId: CCM_E_PROBLEMSWITHCONSTRAINTSINOPERATOR
//
// MessageText:
//
//  Critical error while dealing with Constraints for the 'in' operator (hr = %1)
//
#define CCM_E_PROBLEMSWITHCONSTRAINTSINOPERATOR ((HRESULT)0x8004F082L)

//
// MessageId: CCM_E_CONSTRAINTSINOPERATORSETERROR
//
// MessageText:
//
//  Operator 'in' requires sets to be separated by '..' and have the first elemet be less than or equal to the second (hr = %1)
//
#define CCM_E_CONSTRAINTSINOPERATORSETERROR ((HRESULT)0x8004F083L)

//
// MessageId: CCM_E_CONSTRAINTSINOPERATORNULL
//
// MessageText:
//
//  Operator 'in' requires cannot be used with an empty operand (hr = %1)
//
#define CCM_E_CONSTRAINTSINOPERATORNULL  ((HRESULT)0x8004F084L)

//
// MessageId: CCM_E_CONSTRAINTSINOPERATORTOOLONG
//
// MessageText:
//
//  Operator 'in' with longer than max expression detected (hr = %1)
//
#define CCM_E_CONSTRAINTSINOPERATORTOOLONG ((HRESULT)0x8004F085L)

//
// MessageId: CCM_E_CONSTRAINTSINOPERATORINVEXPR
//
// MessageText:
//
//  Operator 'in' with invalid expression detected (hr = %1)
//
#define CCM_E_CONSTRAINTSINOPERATORINVEXPR ((HRESULT)0x8004F086L)

//
// MessageId: CCM_E_CONSTRAINTSVIOLATION
//
// MessageText:
//
//  Constraints violation (hr = %1)
//
#define CCM_E_CONSTRAINTSVIOLATION       ((HRESULT)0x8004F087L)

//
// MessageId: CCM_E_PROPADEFAULTVARCONVERTFAILED
//
// MessageText:
//
//  PropA_Default couldn't be converted to declared datatype (hr = %1)
//
#define CCM_E_PROPADEFAULTVARCONVERTFAILED ((HRESULT)0x8004F088L)

//
// MessageId: CCM_E_PROPADEFAULTCONSTRAINTSVIOLATION
//
// MessageText:
//
//  PropA_Default constraints violation (hr = %1)
//
#define CCM_E_PROPADEFAULTCONSTRAINTSVIOLATION ((HRESULT)0x8004F089L)

//
// MessageId: CCM_E_CONSTRAINTSREOPERATORINVEXPR
//
// MessageText:
//
//  Operator 're' with invalid expression detected (hr = %1)
//
#define CCM_E_CONSTRAINTSREOPERATORINVEXPR ((HRESULT)0x8004F08AL)

//
// MessageId: CCM_E_PROBLEMSWITHCONSTRAINTSURLOPERATOR
//
// MessageText:
//
//  Critical error while dealing with Constraints for the 'url' operator (hr = %1)
//
#define CCM_E_PROBLEMSWITHCONSTRAINTSURLOPERATOR ((HRESULT)0x8004F08BL)

//
// MessageId: CCM_E_CONSTRAINTSURLOPERATORNULL
//
// MessageText:
//
//  Operator 'url' requires cannot be used with an empty operand (hr = %1)
//
#define CCM_E_CONSTRAINTSURLOPERATORNULL ((HRESULT)0x8004F08CL)

//
// MessageId: CCM_E_CONSTRAINTSURLOPERATORTOOLONG
//
// MessageText:
//
//  Operator 'url' with longer than max expression detected (hr = %1)
//
#define CCM_E_CONSTRAINTSURLOPERATORTOOLONG ((HRESULT)0x8004F08DL)

//
// MessageId: CCM_E_CONSTRAINTSURLOPERATORINVEXPR
//
// MessageText:
//
//  Operator 'url' with invalid expression detected (hr = %1)
//
#define CCM_E_CONSTRAINTSURLOPERATORINVEXPR ((HRESULT)0x8004F08EL)

//
// MessageId: CCM_E_CONSTRAINTSURLOPERATORTOOMANYWILDCARDS
//
// MessageText:
//
//  Operator 'url' with too many wildcard (*) elements expression detected (hr = %1)
//
#define CCM_E_CONSTRAINTSURLOPERATORTOOMANYWILDCARDS ((HRESULT)0x8004F08FL)

//
// MessageId: CCM_E_CONSTRAINTSURLOPERATORINVALIDWILDCARDUSAGE
//
// MessageText:
//
//  Operator 'url' with wildcard (*) cannot have other protocols (hr = %1)
//
#define CCM_E_CONSTRAINTSURLOPERATORINVALIDWILDCARDUSAGE ((HRESULT)0x8004F090L)

//
// MessageId: CCM_E_CONSTRAINTSURLOPERATORINVPROTOCOL
//
// MessageText:
//
//  Operator 'url' with invalid protocol detected (hr = %1)
//
#define CCM_E_CONSTRAINTSURLOPERATORINVPROTOCOL ((HRESULT)0x8004F091L)

// base 0xFF9C
////internal db errors
//#define kErrorStringTooLong                  -100  //0xFFFFFF9C
//
// MessageId: PP_E_kErrorStringTooLong
//
// MessageText:
//
//  Input string is too long, (hr=%1), please examine input.
//
#define PP_E_kErrorStringTooLong         ((HRESULT)0xCFFFFF9CL)

//#define kErrorStringTooShort                 -101  //0xFFFFFF9B
//
// MessageId: PP_E_kErrorStringTooShort
//
// MessageText:
//
//  Input string is too short, (hr=%1), please examine input.
//
#define PP_E_kErrorStringTooShort        ((HRESULT)0xCFFFFF9BL)

//#define kErrorInvalidPassword                -102  //0xFFFFFF9A
//
// MessageId: PP_E_kErrorInvalidPassword
//
// MessageText:
//
//  The password is invalid
//
#define PP_E_kErrorInvalidPassword       ((HRESULT)0xCFFFFF9AL)

//#define kErrorInvalidEMail                   -103  //0xFFFFFF99
//
// MessageId: PP_E_kErrorInvalidEMail
//
// MessageText:
//
//  The email address is invalid
//
#define PP_E_kErrorInvalidEMail          ((HRESULT)0xCFFFFF99L)

//#define kErrorInvalidMemberName              -104  //0xFFFFFF98
//
// MessageId: PP_E_kErrorInvalidMemberName
//
// MessageText:
//
//  The member name is invalid
//
#define PP_E_kErrorInvalidMemberName     ((HRESULT)0xCFFFFF98L)

//#define kErrorMissingParameters              -105  //0xFFFFFF97
//
// MessageId: PP_E_kErrorMissingParameters
//
// MessageText:
//
//  Internal Database error, missing required stored procedure parameters, (hr=%1), please examine input.
//
#define PP_E_kErrorMissingParameters     ((HRESULT)0xCFFFFF97L)

//#define kErrorForbiddenWord                  -106  //0xFFFFFF96
//
// MessageId: PP_E_kErrorForbiddenWord
//
// MessageText:
//
//  String contained words that are forbidden by namespace administrator, examine input.
//
#define PP_E_kErrorForbiddenWord         ((HRESULT)0xCFFFFF96L)

//#define kErrorInvalidDomainName              -107  //0xFFFFFF95
//
// MessageId: PP_E_kErrorInvalidDomainName
//
// MessageText:
//
//  Domain name is invalid, (hr=%1), please try later.
//
#define PP_E_kErrorInvalidDomainName     ((HRESULT)0xCFFFFF95L)

//#define kErrorInvalidDomainAuthority         -108  //0xFFFFFF94
//
// MessageId: PP_E_kErrorInvalidDomainAuthority
//
// MessageText:
//
//  Invalid Domain Authority value for this input, (hr=%1), please examine input or try again later.
//
#define PP_E_kErrorInvalidDomainAuthority ((HRESULT)0xCFFFFF94L)

//#define kErrorInvalidDatetime                -109  //0xFFFFFF93 (1.4)
//
// MessageId: PP_E_kErrorInvalidDatetime
//
// MessageText:
//
//  Internal Database error due to invalid datetime value, (hr=%1), please try later.
//
#define PP_E_kErrorInvalidDatetime       ((HRESULT)0xCFFFFF93L)

//#define kErrorIDGenNotAvailable              -110  //0xFFFFFF92 (1.4)
//
// MessageId: PP_E_kErrorIDGenNotAvailable
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorIDGenNotAvailable     ((HRESULT)0xCFFFFF92L)

//#define kErrorDbAddressReferencedByCard      -111  //0xFFFFFF91
//
// MessageId: PP_E_kErrorDbAddressReferencedByCard
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbAddressReferencedByCard ((HRESULT)0xCFFFFF91L)

//#define kErrorDbSprocDoesNotExist            -1012  //0xFFFFFF90
//
// MessageId: PP_E_kErrorDbSprocDoesNotExist
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbSprocDoesNotExist   ((HRESULT)0xCFFFFF90L)

//#define kErrorDbCriticalError                -1000  //0xFFFFFC18
//
// MessageId: PP_E_kErrorDbCriticalError
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbCriticalError       ((HRESULT)0xCFFFFC18L)

//#define kErrorDbError                        -1001  //0xFFFFFC17
//
// MessageId: PP_E_kErrorDbError
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbError               ((HRESULT)0xCFFFFC17L)

//#define kErrorDbMemberExists                 -1002  //0xFFFFFC16
//
// MessageId: PP_E_kErrorDbMemberExists
//
// MessageText:
//
//  The record already exists in Database
//
#define PP_E_kErrorDbMemberExists        ((HRESULT)0xCFFFFC16L)

//#define kErrorDbMemberDoesNotExist           -1003  //0xFFFFFC15
//
// MessageId: PP_E_kErrorDbMemberDoesNotExist
//
// MessageText:
//
//  Can not find the record in Database
//
#define PP_E_kErrorDbMemberDoesNotExist  ((HRESULT)0xCFFFFC15L)

//#define kErrorDbNoData                       -1004  //0xFFFFFC14
//
// MessageId: PP_E_kErrorDbNoData
//
// MessageText:
//
//  Can not find the record in Database
//
#define PP_E_kErrorDbNoData              ((HRESULT)0xCFFFFC14L)

//#define kErrorDbDuplicateFriendlyName        -1005  //0xFFFFFC13
//
// MessageId: PP_E_kErrorDbDuplicateFriendlyName
//
// MessageText:
//
//  Duplicated friendly names
//
#define PP_E_kErrorDbDuplicateFriendlyName ((HRESULT)0xCFFFFC13L)

//#define kErrorDbAddressDoesNotExist          -1006  //0xFFFFFC12
//
// MessageId: PP_E_kErrorDbAddressDoesNotExist
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbAddressDoesNotExist ((HRESULT)0xCFFFFC12L)

//#define kErrorDbCardDoesNotExist             -1007  //0xFFFFFC11
//
// MessageId: PP_E_kErrorDbCardDoesNotExist
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbCardDoesNotExist    ((HRESULT)0xCFFFFC11L)

//#define kErrorDbURLDoesNotExist              -1009  //0xFFFFFC0F
//
// MessageId: PP_E_kErrorDbURLDoesNotExist
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbURLDoesNotExist     ((HRESULT)0xCFFFFC0FL)

//#define kErrorKidsSiteNotListed              -1011  //0xFFFFFC0D
//
// MessageId: PP_E_kErrorKidsSiteNotListed
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorKidsSiteNotListed     ((HRESULT)0xCFFFFC0DL)

//#define kErrorKidsSiteAlreadyRequested       -1012  //0xFFFFFC0C
//
// MessageId: PP_E_kErrorKidsSiteAlreadyRequested
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorKidsSiteAlreadyRequested ((HRESULT)0xCFFFFC0CL)

//#define kErrorDbTooManyCards                 -1013  //0xFFFFFC0B
//
// MessageId: PP_E_kErrorDbTooManyCards
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbTooManyCards        ((HRESULT)0xCFFFFC0BL)

//#define kErrorDbTooManyAddresses             -1014  //0xFFFFFC0A
//
// MessageId: PP_E_kErrorDbTooManyAddresses
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbTooManyAddresses    ((HRESULT)0xCFFFFC0AL)

//#define kErrorKidsIdentityDoesNotExist       -1015  //0xFFFFFC09
//
// MessageId: PP_E_kErrorKidsIdentityDoesNotExist
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorKidsIdentityDoesNotExist ((HRESULT)0xCFFFFC09L)

//#define kErrorKidsCannotUpdateMoreThanOnce   -1016  //0xFFFFFC08
//
// MessageId: PP_E_kErrorKidsCannotUpdateMoreThanOnce
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorKidsCannotUpdateMoreThanOnce ((HRESULT)0xCFFFFC08L)

//#define kErrorDbNotListedAsParent            -1017  //0xFFFFFC07
//
// MessageId: PP_E_kErrorDbNotListedAsParent
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbNotListedAsParent   ((HRESULT)0xCFFFFC07L)

//#define kErrorBadArgument                    -1018  //0xFFFFFC06
//
// MessageId: PP_E_kErrorBadArgument
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorBadArgument           ((HRESULT)0xCFFFFC06L)

//#define kErrorIDGenTranCountExist            -1019  //0xFFFFFC05 (1.4)
//
// MessageId: PP_E_kErrorIDGenTranCountExist
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorIDGenTranCountExist   ((HRESULT)0xCFFFFC05L)

//#define kErrorIDGenDepleted                  -1020  //0xFFFFFC04 (1.4)
//
// MessageId: PP_E_kErrorIDGenDepleted
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorIDGenDepleted         ((HRESULT)0xCFFFFC04L)

//#define kErrorDbMemberIsNotActive            -1021  //0xFFFFFC03
//
// MessageId: PP_E_kErrorDbMemberIsNotActive
//
// MessageText:
//
//  Member is not active
//
#define PP_E_kErrorDbMemberIsNotActive   ((HRESULT)0xCFFFFC03L)

//#define kErrorManagedCredsMustBeActive       -1022  //0xFFFFFC02
//
// MessageId: PP_E_kErrorManagedCredsMustBeActive
//
// MessageText:
//
//  A credential must have active status to be considered managed, (hr=%1)
//
#define PP_E_kErrorManagedCredsMustBeActive ((HRESULT)0xCFFFFC02L)

//#define kErrorCredentialTypeAlreadyExists    -1023  //0xFFFFFC01
//
// MessageId: PP_E_kErrorCredentialTypeAlreadyExists
//
// MessageText:
//
//  Credential type already exists for this user
//
#define PP_E_kErrorCredentialTypeAlreadyExists ((HRESULT)0xCFFFFC01L)

//#define kErrorDbMultipleCredsSameType        -1024  //0xFFFFFC00
//
// MessageId: PP_E_kErrorDbMultipleCredsSameType
//
// MessageText:
//
//  Database error (hr=%1). A credential of this type already exists.
//
#define PP_E_kErrorDbMultipleCredsSameType ((HRESULT)0xCFFFFC00L)

//#define kErrorTooManyUsersWithThisName       -1025  //0xFFFFFBFF
//
// MessageId: PP_E_kErrorTooManyUsersWithThisName
//
// MessageText:
//
//  Database error (hr=%1), too many users already have this name.
//
#define PP_E_kErrorTooManyUsersWithThisName ((HRESULT)0xCFFFFBFFL)

//#define kErrorPPBKDANotSupported             -1026
//
// MessageId: PP_E_kErrorPPBKDANotSupported
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorPPBKDANotSupported    ((HRESULT)0xCFFFFBFEL)

//#define kErrorDbReplicationTimeout           -1027  //0xFFFFFBFD
//
// MessageId: PP_E_kErrorDbReplicationTimeout
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbReplicationTimeout  ((HRESULT)0xCFFFFBFDL)

//#define kErrorCredentialTypeDoesNotExist     -1028
//
// MessageId: PP_E_kErrorCredentialTypeDoesNotExist
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorCredentialTypeDoesNotExist ((HRESULT)0xCFFFFBFCL)

//#define kErrorRecordDoesNotExist kErrorDbRecordDoesNotExist
//
// MessageId: PP_E_kErrorRecordDoesNotExist
//
// MessageText:
//
//  Can not find record in Database
//
#define PP_E_kErrorRecordDoesNotExist    ((HRESULT)0xCFFFFBFBL)

//#define kErrorDbRowNotUpdated                -1030
//
// MessageId: PP_E_kErrorDbRowNotUpdated
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbRowNotUpdated       ((HRESULT)0xCFFFFBFAL)

//#define kErrorDbAccessDenied                 -1031
//
// MessageId: PP_E_kErrorDbAccessDenied
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbAccessDenied        ((HRESULT)0xCFFFFBF9L)

//#define kErrorDbRecordExists                 -1032  //0xFFFFFBF8
//
// MessageId: PP_E_kErrorDbRecordExists2
//
// MessageText:
//
//  Can not find record in Database
//
#define PP_E_kErrorDbRecordExists2       ((HRESULT)0xCFFFFBF8L)

//#define kErrorDbUpdateCausesDuplicateRow     -1034 //0xFFFFFBF6
//
// MessageId: PP_E_kErrorDbUpdateCausesDuplicateRow
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbUpdateCausesDuplicateRow ((HRESULT)0xCFFFFBF6L)

//#define kErrorDbManagedCredNoNamespace       -1035
//
// MessageId: PP_E_kErrorDbManagedCredNoNamespace
//
// MessageText:
//
//  Could not find managed namespace for this user, (hr=%1), please try later.
//
#define PP_E_kErrorDbManagedCredNoNamespace ((HRESULT)0xCFFFFBF5L)

//#define kErrorDbNamespaceIsManaged           -1036
//
// MessageId: PP_E_kErrorDbNamespaceIsManaged
//
// MessageText:
//
//  Database error (hr=%1), namespace is managed and operation not permitted.
//
#define PP_E_kErrorDbNamespaceIsManaged  ((HRESULT)0xCFFFFBF4L)

//#define kErrorDbManagedNoOverflowRow         -1037
//
// MessageId: PP_E_kErrorDbManagedNoOverflowRow
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbManagedNoOverflowRow ((HRESULT)0xCFFFFBF3L)

//#define kErrorDbManagedUpdateDisallowed      -1038
//
// MessageId: PP_E_kErrorDbManagedUpdateDisallowed
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbManagedUpdateDisallowed ((HRESULT)0xCFFFFBF2L)

//#define kErrorDbOverWriteDisallowed          -1039
//
// MessageId: PP_E_kErrorDbOverWriteDisallowed
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbOverWriteDisallowed ((HRESULT)0xCFFFFBF1L)

//#define kErrorBadApplicationMapData          -1040
//
// MessageId: PP_E_kErrorBadApplicationMapData
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorBadApplicationMapData ((HRESULT)0xCFFFFBF0L)

//#define kErrorTooManyEmailservers            -1041
//
// MessageId: PP_E_kErrorTooManyEmailservers
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorTooManyEmailservers   ((HRESULT)0xCFFFFBEFL)

//#define kErrorDbInvalidEntityType            -1042
//
// MessageId: PP_E_kErrorDbInvalidEntityType
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbInvalidEntityType   ((HRESULT)0xCFFFFBEEL)

//#define kErrorDbCyclicRelationship           -1044
//
// MessageId: PP_E_kErrorDbCyclicRelationship
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbCyclicRelationship  ((HRESULT)0xCFFFFBECL)

//#define kErrorDbInvalidRelationship          -1045
//
// MessageId: PP_E_kErrorDbInvalidRelationship
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbInvalidRelationship ((HRESULT)0xCFFFFBEBL)

//#define kErrorDbOneToManyRelationship        -1046
//
// MessageId: PP_E_kErrorDbOneToManyRelationship
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbOneToManyRelationship ((HRESULT)0xCFFFFBEAL)

//#define kErrorDbManyToOneRelationship        -1047
//
// MessageId: PP_E_kErrorDbManyToOneRelationship
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbManyToOneRelationship ((HRESULT)0xCFFFFBE9L)

//#define kErrorDbInvalidParameters            -1048
//
// MessageId: PP_E_kErrorDbInvalidParameters
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbInvalidParameters   ((HRESULT)0xCFFFFBE8L)

//#define kErrorDbNotSupportedYet              -1049
//
// MessageId: PP_E_kErrorDbNotSupportedYet
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbNotSupportedYet     ((HRESULT)0xCFFFFBE7L)

//#define kErrorDbCertificateDoesNotExist      -1050  //0xFFFFFBE6
//
// MessageId: PP_E_kErrorDbCertificateDoesNotExist
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbCertificateDoesNotExist ((HRESULT)0xCFFFFBE6L)

//#define kErrorDbEntityIdNameMismatch         -1051
//
// MessageId: PP_E_kErrorDbEntityIdNameMismatch
//
// MessageText:
//
//  Database error (hr=%1), the name and id used were mismatched, please examine input.
//
#define PP_E_kErrorDbEntityIdNameMismatch ((HRESULT)0xCFFFFBE5L)

//#define kErrorDbMaxPropIDExceeded            -1052
//
// MessageId: PP_E_kErrorDbMaxPropIDExceeded
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbMaxPropIDExceeded   ((HRESULT)0xCFFFFBE4L)

//#define kErrorDBTooManyCertificates          -1053
//
// MessageId: PP_E_kErrorDBTooManyCertificates
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDBTooManyCertificates ((HRESULT)0xCFFFFBE3L)

//#define kErrorDbEmailBitWrongCredType        -1060
////There is no rowset for GetRowset() call
//
// MessageId: PP_E_kErrorDbEmailBitWrongCredType
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbEmailBitWrongCredType ((HRESULT)0xCFFFFBDCL)

//#define kErrorDBMissingPrimaryRow        -1061
////There is no rowset for GetRowset() call
//
// MessageId: PP_E_kErrorDBMissingPrimaryRow
//
// MessageText:
//
//  Database error (hr=%1), account is missing primary rows for this credential type.
//
#define PP_E_kErrorDBMissingPrimaryRow   ((HRESULT)0xCFFFFBDBL)

//#define kErrorMemberInBlockedState        -1100
////Trying to block a blocked member
//
// MessageId: PP_E_kErrorMemberInBlockedState
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorMemberInBlockedState  ((HRESULT)0xCFFFFBB4L)

//#define kErrorMemberInUnBlockedState        -1101
////Trying to unblock an unblocked member
//
// MessageId: PP_E_kErrorMemberInUnBlockedState
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorMemberInUnBlockedState ((HRESULT)0xCFFFFBB3L)

//#define kErrorDbMemberInDelayedRecycle       -1102
//
// MessageId: PP_E_kErrorDbMemberInDelayedRecycle
//
// MessageText:
//
//  Name cannot be used again since it is protected by namespace EvictRecycleDays setting, hr=%1.
//
#define PP_E_kErrorDbMemberInDelayedRecycle ((HRESULT)0xCFFFFBB2L)

//#define kErrorNullRowset                     -1103
//
// MessageId: PP_E_kErrorNullRowset
//
// MessageText:
//
//  Can not find record in Database
//
#define PP_E_kErrorNullRowset            ((HRESULT)0xCFFFFBB1L)

//#define kErrorDbMemberSoftDeleted            -1500
//
// MessageId: PP_E_kErrorDbMemberSoftDeleted
//
// MessageText:
//
//  Record already deleted from Database
//
#define PP_E_kErrorDbMemberSoftDeleted   ((HRESULT)0xCFFFFA24L)

//#define kErrorMSNIAError                     -2003  //0xFFFFF82D
//
// MessageId: PP_E_kErrorMSNIAError
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorMSNIAError            ((HRESULT)0xCFFFF82DL)

//#define kErrorNoBinding                      -2004  //0xFFFFF82C
//
// MessageId: PP_E_kErrorNoBinding
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorNoBinding             ((HRESULT)0xCFFFF82CL)

//#define kErrorHMserverDownState0             -2028  //(2.1)
//
// MessageId: PP_E_kErrorHMserverDownState0
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorHMserverDownState0    ((HRESULT)0xCFFFF814L)

//#define kErrorHMserverDownState1             -2029 // (2.1)
//
// MessageId: PP_E_kErrorHMserverDownState1
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorHMserverDownState1    ((HRESULT)0xCFFFF813L)

//#define kErrorHMserverDownState2             -2030 // (2.1)
//
// MessageId: PP_E_kErrorHMserverDownState2
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorHMserverDownState2    ((HRESULT)0xCFFFF812L)

//#define KErrorPCLCriticalError               -2031 // (2.5)
//
// MessageId: PP_E_kErrorPCLCriticalError
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorPCLCriticalError      ((HRESULT)0xCFFFF811L)

//#define KErrorSSOCommCriticalError           -2032 // (2.5)
//
// MessageId: PP_E_kErrorSSOCommCriticalError
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorSSOCommCriticalError  ((HRESULT)0xCFFFF810L)

//#define KErrorSSOHMCriticalError             -2033 // (2.5)
//
// MessageId: PP_E_kErrorSSOHMCriticalError
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorSSOHMCriticalError    ((HRESULT)0xCFFFF80FL)

//#define kErrorSSOSettingsNotFound            -3000  //0xFFFFF448
//
// MessageId: PP_E_kErrorSSOSettingsNotFound
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorSSOSettingsNotFound   ((HRESULT)0xCFFFF448L)

//#define kErrorUpdateNotRequired              -4000  //2.0
//
// MessageId: PP_E_kErrorUpdateNotRequired
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorUpdateNotRequired     ((HRESULT)0xCFFFF060L)

//#define kErrorInvalidDAId                   -4001 
//
// MessageId: PP_E_kErrorInvalidDAId
//
// MessageText:
//
//  The format of the specified NetID was invalid.
//
#define PP_E_kErrorInvalidDAId           ((HRESULT)0xCFFFF05FL)

//#define kErrorDualDAMigrationFail           -4002  
//
// MessageId: PP_E_kErrorDualDAMigrationFail
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDualDAMigrationFail   ((HRESULT)0xCFFFF05EL)

//#define kInvalidPhysicalPartition           -4003
//
// MessageId: PP_E_kInvalidPhysicalPartition
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kInvalidPhysicalPartition   ((HRESULT)0xCFFFF05DL)

//#define kInvalidLogicalPartition            -4004
//
// MessageId: PP_E_kInvalidLogicalPartition
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kInvalidLogicalPartition    ((HRESULT)0xCFFFF05CL)

//#define kErrorTooManyBatchElements          -4005
//
// MessageId: PP_E_kErrorTooManyBatchElements
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorTooManyBatchElements  ((HRESULT)0xCFFFF05BL)

//#define kErrorDbMissingNamespaceName     -1601
//
// MessageId: PP_E_kErrorDbMissingNamespaceName
//
// MessageText:
//
//  Database error, namespace name missing (hr=%1), please try later.
//
#define PP_E_kErrorDbMissingNamespaceName ((HRESULT)0xCFFFF9BFL)

//#define kErrorDbInvalidNamespaceID       -5002
//
// MessageId: PP_E_kErrorDbInvalidNamespaceID
//
// MessageText:
//
//  Database error, (hr=%1), the namespace id was not found.
//
#define PP_E_kErrorDbInvalidNamespaceID  ((HRESULT)0xCFFFEC76L)

//#define kErrorDbDuplicateNamespaceName   -5003
//
// MessageId: PP_E_kErrorDbDuplicateNamespaceName
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbDuplicateNamespaceName ((HRESULT)0xCFFFEC75L)

//#define kErrorDbMissingERTName           -1604
//
// MessageId: PP_E_kErrorDbMissingERTName
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbMissingERTName      ((HRESULT)0xCFFFF9BCL)

//#define kErrorDbInvalidERT               -1043
//
// MessageId: PP_E_kErrorDbInvalidERT
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbInvalidERT          ((HRESULT)0xCFFFFBEDL)

//#define kErrorDbDuplicateERTName         -1606
//
// MessageId: PP_E_kErrorDbDuplicateERTName
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbDuplicateERTName    ((HRESULT)0xCFFFF9BAL)

//#define kErrorDbInvalidTargetType        -1008
//
// MessageId: PP_E_kErrorDbInvalidTargetType
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbInvalidTargetType   ((HRESULT)0xCFFFFC10L)

//#define kErrorDbNullKeyValue             -1010
//
// MessageId: PP_E_kErrorDbNullKeyValue
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbNullKeyValue        ((HRESULT)0xCFFFFC0EL)

//#define kErrorDbUpdateNotSupported       -1614
//
// MessageId: PP_E_kErrorDbUpdateNotSupported
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbUpdateNotSupported  ((HRESULT)0xCFFFF9B2L)

//#define kErrorDbDuplicateEntity          -1616
//
// MessageId: PP_E_kErrorDbDuplicateEntity
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbDuplicateEntity     ((HRESULT)0xCFFFF9B0L)

//#define kErrorDbCantUpdateNS             -5017
//MessageId=0xEC67
//Facility=Database
//Severity=DBError
//SymbolicName=PP_E_kErrorDbCantUpdateNS
//Language=English
//Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//.
//#define kErrorDbInvalidEntityID          -1618
//
// MessageId: PP_E_kErrorDbInvalidEntityID
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbInvalidEntityID     ((HRESULT)0xCFFFF9AEL)

//#define kErrorDbRollbackNotAllowed       -5020
//
// MessageId: PP_E_kErrorDbRollbackNotAllowed
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbRollbackNotAllowed  ((HRESULT)0xCFFFEC64L)

//#define kErrorDbMissingTrxIndex          -5021
//
// MessageId: PP_E_kErrorDbMissingTrxIndex
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbMissingTrxIndex     ((HRESULT)0xCFFFEC63L)

//#define kErrorDbOutOfRange               -1622
//
// MessageId: PP_E_kCCMErrorDbOutOfRange
//
// MessageText:
//
//  Internal Database error (hr=%1), input value is outside of expected range.
//
#define PP_E_kCCMErrorDbOutOfRange       ((HRESULT)0xCFFFF9AAL)

//#define kErrorDbCCMTransactionExists        -5024
//
// MessageId: PP_E_kErrorDbCCMTransactionExists
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbCCMTransactionExists ((HRESULT)0xCFFFEC60L)

//#define kErrorDbBadData                     -1626
//
// MessageId: PP_E_kErrorDbBadData
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbBadData             ((HRESULT)0xCFFFF9A6L)

//#define kErrorDbEmptyTrxStack               -5027
//
// MessageId: PP_E_kErrorDbEmptyTrxStack
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbEmptyTrxStack       ((HRESULT)0xCFFFEC5DL)

//#define kErrorDbInvalidTrxID                -5028
//
// MessageId: PP_E_kErrorDbInvalidTrxID
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbInvalidTrxID        ((HRESULT)0xCFFFEC5CL)

//#define kErrorDbLKGSNotFound                -5029
//
// MessageId: PP_E_kErrorDbLKGSNotFound
//
// MessageText:
//
//  Database error (hr=%1), no last known good state was found for this object type.
//
#define PP_E_kErrorDbLKGSNotFound        ((HRESULT)0xCFFFEC5BL)

//#define kErrorDbRollForwardNotAllowed       -5030
//
// MessageId: PP_E_kErrorDbRollForwardNotAllowed
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbRollForwardNotAllowed ((HRESULT)0xCFFFEC5AL)

//#define kErrorDbInvalidName                 -1631
//
// MessageId: PP_E_kErrorDbInvalidName
//
// MessageText:
//
//  Database error, (hr=%1), name did not meet validation requirements.
//
#define PP_E_kErrorDbInvalidName         ((HRESULT)0xCFFFF9A1L)

//#define kErrorDbOnlyOneInstanceAllowed      -1632
// note on this one (constraint violation):
// best bet when getting this error code is to simply try again.
// happens on race condition with multi-master.
//
//
// MessageId: PP_E_kErrorDbOnlyOneInstanceAllowed
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbOnlyOneInstanceAllowed ((HRESULT)0xCFFFF9A0L)

//#define kErrorDbConstraintViolation         -1633
//
// MessageId: PP_E_kErrorDbConstraintViolation
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbConstraintViolation ((HRESULT)0xCFFFF99FL)

//#define kErrorDbInvalidInstance             -1634
//
// MessageId: PP_E_kErrorDbInvalidInstance
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbInvalidInstance     ((HRESULT)0xCFFFF99EL)

//#define kErrorDbInvalidAction               -1635
//
// MessageId: PP_E_kErrorDbInvalidAction
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbInvalidAction       ((HRESULT)0xCFFFF99DL)

//#define kErrorDbInvalidRelease              -5036
//
// MessageId: PP_E_kErrorDbInvalidRelease
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbInvalidRelease      ((HRESULT)0xCFFFEC54L)

//#define kErrorDbNoAllowInsertBuiltInObj     -1638
//
// MessageId: PP_E_kErrorDbNoAllowInsertBuiltInObj
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbNoAllowInsertBuiltInObj ((HRESULT)0xCFFFF99AL)

//#define kErrorDbNoAllowDeleteBuiltInObj     -1639
//
// MessageId: PP_E_kErrorDbNoAllowDeleteBuiltInObj
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbNoAllowDeleteBuiltInObj ((HRESULT)0xCFFFF999L)

//#define kErrorDbInvalidScopeID                -1602
//
// MessageId: PP_E_kErrorDbInvalidScopeID
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbInvalidScopeID      ((HRESULT)0xCFFFF9BEL)

//#define kErrorDbDuplicateScopeName            -1603
//
// MessageId: PP_E_kErrorDbDuplicateScopeName
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbDuplicateScopeName  ((HRESULT)0xCFFFF9BDL)

//#define kErrorDbCantUpdateScope               -1617
//
// MessageId: PP_E_kErrorDbCantUpdateScope
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbCantUpdateScope     ((HRESULT)0xCFFFF9AFL)

//#define kErrorDbEntityExistsAsScope           -1637
//
// MessageId: PP_E_kErrorDbEntityExistsAsScope
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbEntityExistsAsScope ((HRESULT)0xCFFFF99BL)

//#define kErrorDbMemberTypeNotAllowed          -1640
//
// MessageId: PP_E_kErrorDbMemberTypeNotAllowed
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbMemberTypeNotAllowed ((HRESULT)0xCFFFF998L)

//#define kErrorDbPropertyExists                -1641
//
// MessageId: PP_E_kErrorDbPropertyExists
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbPropertyExists      ((HRESULT)0xCFFFF997L)

//#define kErrorDbPropertyFailsInsertConditions -1642
//
// MessageId: PP_E_kErrorDbPropertyFailsInsertConditions
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbPropertyFailsInsertConditions ((HRESULT)0xCFFFF996L)

//#define kErrorDbRelationshipExists            -1643
//
// MessageId: PP_E_kErrorDbRelationshipExists
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbRelationshipExists  ((HRESULT)0xCFFFF995L)

//#define kErrorDbEntityExists                  -1644
//
// MessageId: PP_E_kErrorDbEntityExists
//
// MessageText:
//
//  The specified object already exists in the the Database.
//
#define PP_E_kErrorDbEntityExists        ((HRESULT)0xCFFFF994L)

//#define kErrorDbNamespaceIsNotActive          -1645
//
// MessageId: PP_E_kErrorDbNamespaceIsNotActive
//
// MessageText:
//
//  Database error (hr=%1), namespace is not active.
//
#define PP_E_kErrorDbNamespaceIsNotActive ((HRESULT)0xCFFFF993L)

//#define kErrorDbInvalidTargetID               -1646
//
// MessageId: PP_E_kErrorDbInvalidTargetID
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbInvalidTargetID     ((HRESULT)0xCFFFF992L)

//#define kErrorDbInvalidSourceID               -1647
//
// MessageId: PP_E_kErrorDbInvalidSourceID
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbInvalidSourceID     ((HRESULT)0xCFFFF991L)

//#define kErrorDbPropertyDoesNotExist          -1648
// could use below codes 6004-5 for cred bag db, but I don't want to have
// problem where we don't know what db the error code came from
//
// MessageId: PP_E_kErrorDbPropertyDoesNotExist
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbPropertyDoesNotExist ((HRESULT)0xCFFFF990L)

//#define kErrorDbGroupPropertyDatatypeMismatch    -1649
//
// MessageId: PP_E_kErrorDbGroupPropertyDatatypeMismatch
//
// MessageText:
//
//  Database error (hr=%1), invalid data type used for property value.
//
#define PP_E_kErrorDbGroupPropertyDatatypeMismatch ((HRESULT)0xCFFFF98FL)

//#define kErrorDbEntityDoesNotExist -5050
//
// MessageId: PP_E_kErrorDbEntityDoesNotExist
//
// MessageText:
//
//  Database error (hr=%1), record not found in database.
//
#define PP_E_kErrorDbEntityDoesNotExist  ((HRESULT)0xCFFFEC46L)

// GROUP UPPI ERRORS
//
// MessageId: PP_E_kErrorGroupInvalidActionType
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorGroupInvalidActionType ((HRESULT)0xCFFFF973L)

//
// MessageId: PP_E_kErrorGroupPropertyValueCannotChange
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorGroupPropertyValueCannotChange ((HRESULT)0xCFFFF972L)

//
// MessageId: PP_E_kErrorGroupInvalidInstance
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorGroupInvalidInstance  ((HRESULT)0xCFFFF971L)

//
// MessageId: PP_E_kErrorGroupNamespaceReleaseInternalError
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorGroupNamespaceReleaseInternalError ((HRESULT)0xCFFFF970L)

//
// MessageId: PP_E_kErrorGroupNamespaceReserveInternalError
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorGroupNamespaceReserveInternalError ((HRESULT)0xCFFFF96FL)

//
// MessageId: PP_E_kErrorGroupNamespaceIDAndNameMismatch
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorGroupNamespaceIDAndNameMismatch ((HRESULT)0xCFFFF96EL)

//
// MessageId: PP_E_kErrorGroupNamespaceNotManaged
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorGroupNamespaceNotManaged ((HRESULT)0xCFFFF96DL)

//
// MessageId: PP_E_kErrorGroupPropertyIDAndNameMismatch
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorGroupPropertyIDAndNameMismatch ((HRESULT)0xCFFFF96CL)

//
// MessageId: PP_E_kErrorGroupInvalidPropertyID
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorGroupInvalidPropertyID ((HRESULT)0xCFFFF96BL)

//
// MessageId: PP_E_kErrorGroupInvalidPropertyName
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorGroupInvalidPropertyName ((HRESULT)0xCFFFF96AL)

//
// MessageId: PP_E_kErrorGroupTooManyPropertiesInFilter
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorGroupTooManyPropertiesInFilter ((HRESULT)0xCFFFF969L)

//
// MessageId: PP_E_kErrorGroupSiteDeleteFailedInNSRelease
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorGroupSiteDeleteFailedInNSRelease ((HRESULT)0xCFFFF968L)

//
// MessageId: PP_E_kErrorGroupNSExistsAsInternallyManaged
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorGroupNSExistsAsInternallyManaged ((HRESULT)0xCFFFF967L)

//
// MessageId: PP_E_kErrorGroupInvalidSiteID
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorGroupInvalidSiteID    ((HRESULT)0xCFFFF966L)

//
// MessageId: PP_E_kErrorGroupInvalidScopeID
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorGroupInvalidScopeID   ((HRESULT)0xCFFFF965L)

//
// MessageId: PP_E_kErrorGroupSiteInsertFailedInNSReserve
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorGroupSiteInsertFailedInNSReserve ((HRESULT)0xCFFFF964L)

//
// MessageId: PP_E_kErrorGroupInvalidNamespaceName
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorGroupInvalidNamespaceName ((HRESULT)0xCFFFF963L)

//
// MessageId: PP_E_kErrorGroupInvalidHashError
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorGroupInvalidHashError ((HRESULT)0xCFFFF962L)

//
// MessageId: PP_E_kErrorNoNamespaceInCredName
//
// MessageText:
//
//  Member name has wrong email syntax and is invalid (hr=%1), please fix and try again.
//
#define PP_E_kErrorNoNamespaceInCredName ((HRESULT)0xCFFFF961L)

//
// MessageId: PP_E_kErrorGroupCacheInvalidInput
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorGroupCacheInvalidInput ((HRESULT)0xCFFFF960L)

//
// MessageId: PP_E_kErrorGroupCacheInternalError
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorGroupCacheInternalError ((HRESULT)0xCFFFF95FL)

//
// MessageId: PP_E_kErrorGroupCacheFetchError
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorGroupCacheFetchError  ((HRESULT)0xCFFFF95EL)

//
// MessageId: PP_E_kErrorGroupCacheLoadError
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorGroupCacheLoadError   ((HRESULT)0xCFFFF95DL)

//
// MessageId: PP_E_kErrorInternalNamespaceNotFound
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorInternalNamespaceNotFound ((HRESULT)0xCFFFF95BL)

//
// MessageId: PP_E_kErrorGroupInvalidAttributeID
//
// MessageText:
//
//  Call to Group cache used an unrecognized metadata attribute ID.
//
#define PP_E_kErrorGroupInvalidAttributeID ((HRESULT)0xCFFFF94FL)

// END OF GROUP UPPI ERRORS
//#define kErrorDbInvalidCredentialPropertyID     -6000
//
// MessageId: PP_E_kErrorDbInvalidCredentialPropertyID
//
// MessageText:
//
//  Database error (hr=%1), invalid property id.
//
#define PP_E_kErrorDbInvalidCredentialPropertyID ((HRESULT)0xCFFFE890L)

//#define kErrorDbInvalidCredentialSubPropertyID  -6001
//
// MessageId: PP_E_kErrorDbInvalidCredentialSubPropertyID
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbInvalidCredentialSubPropertyID ((HRESULT)0xCFFFE88FL)

//#define kErrorDbInvalidCredentialTypeAndPropertyIDCombination -6002
//
// MessageId: PP_E_kErrorDbInvalidCredentialTypeAndPropertyIDCombination
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbInvalidCredentialTypeAndPropertyIDCombination ((HRESULT)0xCFFFE88EL)

//#define kErrorDbBadPropertyReturnedFromDB       -6003
//
// MessageId: PP_E_kErrorDbBadPropertyReturnedFromDB
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbBadPropertyReturnedFromDB ((HRESULT)0xCFFFE88DL)

//#define kErrorDbVariantTypePropertyIDMismatch   -6004
//
// MessageId: PP_E_kErrorDbVariantTypePropertyIDMismatch
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbVariantTypePropertyIDMismatch ((HRESULT)0xCFFFE88CL)

//#define kErrorDbValidationFailure               -1700
//
// MessageId: PP_E_kErrorDbValidationFailure
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbValidationFailure   ((HRESULT)0xCFFFF95CL)

//#define kErrorDbNamespaceIsNotFederated         -1702
//
// MessageId: PP_E_kErrorDbNamespaceIsNotFederated
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbNamespaceIsNotFederated ((HRESULT)0xCFFFF95AL)

//#define kErrorDbStringExceedsMaxEncryptionLength
//
// MessageId: PP_E_kErrorDbStringExceedsMaxEncryptionLength
//
// MessageText:
//
//  Service temporarily unavailable due to internal Database error (hr=%1), please try later.
//
#define PP_E_kErrorDbStringExceedsMaxEncryptionLength ((HRESULT)0xCFFFE88BL)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\PassportRPS\6.2\inc\rps.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0486 */
/* Compiler settings for rps.idl:
    Oicf, W1, Zp8, env=Win64 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __rps_h__
#define __rps_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IRPS_FWD_DEFINED__
#define __IRPS_FWD_DEFINED__
typedef interface IRPS IRPS;
#endif 	/* __IRPS_FWD_DEFINED__ */


#ifndef __IRPSNotify_FWD_DEFINED__
#define __IRPSNotify_FWD_DEFINED__
typedef interface IRPSNotify IRPSNotify;
#endif 	/* __IRPSNotify_FWD_DEFINED__ */


#ifndef __IRPSComponent_FWD_DEFINED__
#define __IRPSComponent_FWD_DEFINED__
typedef interface IRPSComponent IRPSComponent;
#endif 	/* __IRPSComponent_FWD_DEFINED__ */


#ifndef ___IRPSPropBagEnum_FWD_DEFINED__
#define ___IRPSPropBagEnum_FWD_DEFINED__
typedef interface _IRPSPropBagEnum _IRPSPropBagEnum;
#endif 	/* ___IRPSPropBagEnum_FWD_DEFINED__ */


#ifndef __IRPSPropBag_FWD_DEFINED__
#define __IRPSPropBag_FWD_DEFINED__
typedef interface IRPSPropBag IRPSPropBag;
#endif 	/* __IRPSPropBag_FWD_DEFINED__ */


#ifndef __IRPSDomainMap_FWD_DEFINED__
#define __IRPSDomainMap_FWD_DEFINED__
typedef interface IRPSDomainMap IRPSDomainMap;
#endif 	/* __IRPSDomainMap_FWD_DEFINED__ */


#ifndef __IRPSPKCrypt_FWD_DEFINED__
#define __IRPSPKCrypt_FWD_DEFINED__
typedef interface IRPSPKCrypt IRPSPKCrypt;
#endif 	/* __IRPSPKCrypt_FWD_DEFINED__ */


#ifndef __IRPSCookieCrypt_FWD_DEFINED__
#define __IRPSCookieCrypt_FWD_DEFINED__
typedef interface IRPSCookieCrypt IRPSCookieCrypt;
#endif 	/* __IRPSCookieCrypt_FWD_DEFINED__ */


#ifndef __IRPSSiteCrypt_FWD_DEFINED__
#define __IRPSSiteCrypt_FWD_DEFINED__
typedef interface IRPSSiteCrypt IRPSSiteCrypt;
#endif 	/* __IRPSSiteCrypt_FWD_DEFINED__ */


#ifndef __IRPSDataCrypt_P_FWD_DEFINED__
#define __IRPSDataCrypt_P_FWD_DEFINED__
typedef interface IRPSDataCrypt_P IRPSDataCrypt_P;
#endif 	/* __IRPSDataCrypt_P_FWD_DEFINED__ */


#ifndef __IRPSPackData_FWD_DEFINED__
#define __IRPSPackData_FWD_DEFINED__
typedef interface IRPSPackData IRPSPackData;
#endif 	/* __IRPSPackData_FWD_DEFINED__ */


#ifndef __IRPSTicket_FWD_DEFINED__
#define __IRPSTicket_FWD_DEFINED__
typedef interface IRPSTicket IRPSTicket;
#endif 	/* __IRPSTicket_FWD_DEFINED__ */


#ifndef __IRPSTicket2_FWD_DEFINED__
#define __IRPSTicket2_FWD_DEFINED__
typedef interface IRPSTicket2 IRPSTicket2;
#endif 	/* __IRPSTicket2_FWD_DEFINED__ */


#ifndef __IRPSSessionTokenGen_FWD_DEFINED__
#define __IRPSSessionTokenGen_FWD_DEFINED__
typedef interface IRPSSessionTokenGen IRPSSessionTokenGen;
#endif 	/* __IRPSSessionTokenGen_FWD_DEFINED__ */


#ifndef __IRPSAuth_FWD_DEFINED__
#define __IRPSAuth_FWD_DEFINED__
typedef interface IRPSAuth IRPSAuth;
#endif 	/* __IRPSAuth_FWD_DEFINED__ */


#ifndef __IRPSEventLog_FWD_DEFINED__
#define __IRPSEventLog_FWD_DEFINED__
typedef interface IRPSEventLog IRPSEventLog;
#endif 	/* __IRPSEventLog_FWD_DEFINED__ */


#ifndef __IRPSHttpAuth_FWD_DEFINED__
#define __IRPSHttpAuth_FWD_DEFINED__
typedef interface IRPSHttpAuth IRPSHttpAuth;
#endif 	/* __IRPSHttpAuth_FWD_DEFINED__ */


#ifndef __IRPSApplicationAuth_FWD_DEFINED__
#define __IRPSApplicationAuth_FWD_DEFINED__
typedef interface IRPSApplicationAuth IRPSApplicationAuth;
#endif 	/* __IRPSApplicationAuth_FWD_DEFINED__ */


#ifndef __IRPSApplicationAuth2_FWD_DEFINED__
#define __IRPSApplicationAuth2_FWD_DEFINED__
typedef interface IRPSApplicationAuth2 IRPSApplicationAuth2;
#endif 	/* __IRPSApplicationAuth2_FWD_DEFINED__ */


#ifndef __IRPSConfigInfo_FWD_DEFINED__
#define __IRPSConfigInfo_FWD_DEFINED__
typedef interface IRPSConfigInfo IRPSConfigInfo;
#endif 	/* __IRPSConfigInfo_FWD_DEFINED__ */


#ifndef __IRPSSSPIAuth_FWD_DEFINED__
#define __IRPSSSPIAuth_FWD_DEFINED__
typedef interface IRPSSSPIAuth IRPSSSPIAuth;
#endif 	/* __IRPSSSPIAuth_FWD_DEFINED__ */


#ifndef __IRPS_FWD_DEFINED__
#define __IRPS_FWD_DEFINED__
typedef interface IRPS IRPS;
#endif 	/* __IRPS_FWD_DEFINED__ */


#ifndef __IRPSTicket_FWD_DEFINED__
#define __IRPSTicket_FWD_DEFINED__
typedef interface IRPSTicket IRPSTicket;
#endif 	/* __IRPSTicket_FWD_DEFINED__ */


#ifndef __IRPSTicket2_FWD_DEFINED__
#define __IRPSTicket2_FWD_DEFINED__
typedef interface IRPSTicket2 IRPSTicket2;
#endif 	/* __IRPSTicket2_FWD_DEFINED__ */


#ifndef __IRPSSiteCrypt_FWD_DEFINED__
#define __IRPSSiteCrypt_FWD_DEFINED__
typedef interface IRPSSiteCrypt IRPSSiteCrypt;
#endif 	/* __IRPSSiteCrypt_FWD_DEFINED__ */


#ifndef __IRPSAuth_FWD_DEFINED__
#define __IRPSAuth_FWD_DEFINED__
typedef interface IRPSAuth IRPSAuth;
#endif 	/* __IRPSAuth_FWD_DEFINED__ */


#ifndef __IRPSHttpAuth_FWD_DEFINED__
#define __IRPSHttpAuth_FWD_DEFINED__
typedef interface IRPSHttpAuth IRPSHttpAuth;
#endif 	/* __IRPSHttpAuth_FWD_DEFINED__ */


#ifndef __IRPSPropBag_FWD_DEFINED__
#define __IRPSPropBag_FWD_DEFINED__
typedef interface IRPSPropBag IRPSPropBag;
#endif 	/* __IRPSPropBag_FWD_DEFINED__ */


#ifndef __IRPSDomainMap_FWD_DEFINED__
#define __IRPSDomainMap_FWD_DEFINED__
typedef interface IRPSDomainMap IRPSDomainMap;
#endif 	/* __IRPSDomainMap_FWD_DEFINED__ */


#ifndef __IRPSPackData_FWD_DEFINED__
#define __IRPSPackData_FWD_DEFINED__
typedef interface IRPSPackData IRPSPackData;
#endif 	/* __IRPSPackData_FWD_DEFINED__ */


#ifndef __IRPSSessionTokenGen_FWD_DEFINED__
#define __IRPSSessionTokenGen_FWD_DEFINED__
typedef interface IRPSSessionTokenGen IRPSSessionTokenGen;
#endif 	/* __IRPSSessionTokenGen_FWD_DEFINED__ */


#ifndef __IRPSEventLog_FWD_DEFINED__
#define __IRPSEventLog_FWD_DEFINED__
typedef interface IRPSEventLog IRPSEventLog;
#endif 	/* __IRPSEventLog_FWD_DEFINED__ */


#ifndef __IRPSApplicationAuth_FWD_DEFINED__
#define __IRPSApplicationAuth_FWD_DEFINED__
typedef interface IRPSApplicationAuth IRPSApplicationAuth;
#endif 	/* __IRPSApplicationAuth_FWD_DEFINED__ */


#ifndef __IRPSApplicationAuth2_FWD_DEFINED__
#define __IRPSApplicationAuth2_FWD_DEFINED__
typedef interface IRPSApplicationAuth2 IRPSApplicationAuth2;
#endif 	/* __IRPSApplicationAuth2_FWD_DEFINED__ */


#ifndef __IRPSSSPIAuth_FWD_DEFINED__
#define __IRPSSSPIAuth_FWD_DEFINED__
typedef interface IRPSSSPIAuth IRPSSSPIAuth;
#endif 	/* __IRPSSSPIAuth_FWD_DEFINED__ */


#ifndef __RPS_FWD_DEFINED__
#define __RPS_FWD_DEFINED__

#ifdef __cplusplus
typedef class RPS RPS;
#else
typedef struct RPS RPS;
#endif /* __cplusplus */

#endif 	/* __RPS_FWD_DEFINED__ */


#ifndef __RPSConfigInfo_FWD_DEFINED__
#define __RPSConfigInfo_FWD_DEFINED__

#ifdef __cplusplus
typedef class RPSConfigInfo RPSConfigInfo;
#else
typedef struct RPSConfigInfo RPSConfigInfo;
#endif /* __cplusplus */

#endif 	/* __RPSConfigInfo_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "ocidl.h"
#include "HELPER.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_rps_0000_0000 */
/* [local] */ 

//  object - Names
//  internal
const CComBSTR ObjectName_RPS_EventLog              = L"rps.eventlog";
//  
//  public
const CComBSTR ObjectName_RPS_Server_Config         = L"rps.server.config";
//  public
const CComBSTR ObjectName_RPS_Property_Bag          = L"rps.property.bag";
//  public
const CComBSTR ObjectName_RPS_Net_DomainMap         = L"rps.net.domainmap";
//  internal
const CComBSTR ObjectName_RPS_Net_DataSchema        = L"rps.net.dataschema";
//  internal
const CComBSTR ObjectName_RPS_Net_ProfileSchema     = L"rps.net.profileschema";
//  internal
const CComBSTR ObjectName_RPS_Cookie_Crypt          = L"rps.cookie.crypt";
//  public
const CComBSTR ObjectName_RPS_Site_Crypt            = L"rps.site.crypt";
//  internal
const CComBSTR ObjectName_RPS_PK_Crypt_Partner      = L"rps.pk.crypt.partner";
//  internal
const CComBSTR ObjectName_RPS_PK_Crypt_Login        = L"rps.pk.crypt.Login";
//  internal
const CComBSTR ObjectName_RPS_PK_Crypt_Other        = L"rps.pk.crypt.Other";
//  public
const CComBSTR ObjectName_RPS_Data_Object           = L"rps.data.object";
//  public
const CComBSTR ObjectName_RPS_Auth                  = L"rps.auth";
const CComBSTR ObjectName_RPS_Http_Auth             = L"rps.http.auth";
const CComBSTR ObjectName_RPS_WebSSO_Ticket         = L"rps.websso.ticket";
const CComBSTR ObjectName_RPS_Compact_Ticket        = L"rps.compact.ticket";
const CComBSTR ObjectName_RPS_Auth_Cookie           = L"rps.auth.cookie";
const CComBSTR ObjectName_RPS_SecAuth_Cookie        = L"rps.secauth.cookie";
//  internal
const CComBSTR ObjectName_RPS_Auth_Cookie_Maker     = L"rps.auth.cookie.creator";
//  RPS ticket common Fields
const CComBSTR Ticket_Property_MemberIdLow          = L"MemberIdLow";
const CComBSTR Ticket_Property_MemberIdHigh         = L"MemberIdHigh";
const CComBSTR Ticket_Property_IssueInstant         = L"IssueInstant";
const CComBSTR Ticket_Property_AuthInstant          = L"AuthInstant";
const CComBSTR Ticket_Property_AuthMethod           = L"AuthMethod";
const CComBSTR Ticket_Property_AuthFlags            = L"AuthFlags";
const CComBSTR Ticket_Property_CIdLow               = L"CIdLow";
const CComBSTR Ticket_Property_CIdHigh              = L"CIdHigh";
const CComBSTR Ticket_Property_HexCId               = L"HexCId";
const CComBSTR Ticket_Property_Membername           = L"Membername";
const CComBSTR Ticket_Property_Profile              = L"Profile";
const CComBSTR Ticket_Property_SessionKey           = L"SessionKey";
const CComBSTR Ticket_Property_EncryptedSessionKey  = L"Base64EncodedEncryptedSessionKey";
const CComBSTR Ticket_Property_HexPUID              = L"HexPUID";
const CComBSTR Ticket_Property_Audience             = L"Audience";
const CComBSTR Ticket_Property_NotBefore            = L"NotBefore";
const CComBSTR Ticket_Property_NotAfter             = L"NotAfter";
const CComBSTR Ticket_Property_LinkIdLow            = L"LinkIdLow";
const CComBSTR Ticket_Property_LinkIdHigh           = L"LinkIdHigh";
const CComBSTR Ticket_Property_LinkIdTimeStamp      = L"LinkIdTimeStamp";
//  RPS WEBSSO ticket special Fields
const CComBSTR Ticket_Property_Issuer               = L"Issuer";
const CComBSTR Ticket_Property_AssertionID          = L"AssertionID";
const CComBSTR Ticket_Property_AuthMethodStr        = L"AuthMethodStr";
const CComBSTR Ticket_Property_NameIdentifier       = L"NameIdentifier";
//  RPS Compact Ticket special Fields
const CComBSTR Ticket_Property_TargetId             = L"TargetId";
const CComBSTR Ticket_Property_ClientIP             = L"ClientIP";
//  RPS Cookie special Fields
const CComBSTR Ticket_Property_CookieInstant        = L"CookieInstant";
const CComBSTR Ticket_Property_CookieFlags          = L"CookieFlags";
const CComBSTR Ticket_Property_TicketType           = L"TicketType";
//  PPM ticket fields, added for RPS migration. See Windows Live bug 328439
const CComBSTR Ticket_Property_SavePassword            = L"SavePassword";
const CComBSTR Ticket_Property_AuthenticationInstant   = L"AuthenticationInstant";
const CComBSTR Ticket_Property_SecureLevel             = L"SecureLevel";
const CComBSTR Ticket_Property_DATicketTime            = L"DATicketTime";
const CComBSTR Ticket_Property_SignInTime              = L"SignInTime";
const CComBSTR Ticket_Property_PartnerTicketTime       = L"PartnerTicketTime";
const CComBSTR Ticket_Property_NetworkFlags            = L"NetworkFlags";
const CComBSTR Ticket_Property_DA_Skew                 = L"DA_Skew";
const CComBSTR Ticket_Property_CredInfo                = L"CredInfo";
const CComBSTR Ticket_Property_PassportFlags           = L"PassportFlags";
const CComBSTR Ticket_Property_PinTime                 = L"PinTime";
const CComBSTR Profile_Property_Membername             = L"DisplayMembername";
const CComBSTR ObjectName_RPS_Application_Auth             = L"rps.application.auth";
const CComBSTR Ticket_Property_Permission             = L"Permissions";
const CComBSTR Ticket_Property_AppIdHigh              = L"AppIdHigh";
const CComBSTR Ticket_Property_AppIdLow               = L"AppIdLow";
const CComBSTR Ticket_Property_ExpiryTime             = L"ExpiryTime";
const CComBSTR Ticket_Property_HexAppId      	     = L"HexAppId";
const CComBSTR ObjectName_RPS_SSPI_Auth             = L"rps.sspi.auth";
const CComBSTR Ticket_Property_DeviceIdLow      	     = L"DeviceIdLow";
const CComBSTR Ticket_Property_DeviceIdHigh      	 = L"DeviceIdHigh";
const CComBSTR Ticket_Property_HexDeviceId      	     = L"HexDeviceId";
typedef /* [public][v1_enum] */ 
enum __MIDL___MIDL_itf_rps_0000_0000_0001
    {	RPS_CHANGE_SERVER_CONFIG	= 0x1,
	RPS_CHANGE_NET_CONFIG	= 0x2,
	RPS_CHANGE_SERVER_CERTS	= 0x3
    } 	RPS_CHANGE_NOTIFICATION_TYPE;

const CComBSTR RPS_CHANGE_NOTIFY_COMP_NAME    = L"RPS change notification";
#define	RPS_CHANGE_NOTIFY_FLAG_FAILED	( 0x1 )

//  RPS object ID, used when writing custom component
typedef /* [public][v1_enum] */ 
enum __MIDL___MIDL_itf_rps_0000_0000_0002
    {	RPS_OBJ_ID_EVENT	= 0x1,
	RPS_OBJ_ID_SERVERCONFIG	= 0x2,
	RPS_OBJ_ID_DOMAINMAP	= 0x3,
	RPS_OBJ_ID_DATASCHEMA	= 0x4,
	RPS_OBJ_ID_PPCERTSTORE	= 0x5,
	RPS_OBJ_ID_PARTNERCERTSTORE	= 0x6,
	RPS_OBJ_ID_SERVERCONFIGCACHE	= 0x8,
	RPS_OBJ_ID_NETCONFIGCACHE	= 0x9,
	RPS_OBJ_ID_PROFILESCHEMA	= 0xa,
	RPS_OBJ_ID_COOKIECRYPT	= 0x20,
	RPS_OBJ_ID_PKCRYPT_PARTNER	= 0x21,
	RPS_OBJ_ID_PKCRYPT_LOGIN	= 0x22,
	RPS_OBJ_ID_PKCRYPT_OTHER	= 0x23,
	RPS_OBJ_ID_PROPERTYBAG	= 0x24,
	RPS_OBJ_ID_DATACRYPT	= 0x25,
	RPS_OBJ_ID_DATACRYPT_INTERNAL	= 0x26,
	RPS_OBJ_ID_LOGIN_CERTCACHE	= 0x27,
	RPS_OBJ_ID_OTHER_CERTCACHE	= 0x28,
	RPS_OBJ_ID_PARTNER_CERTCACHE	= 0x29,
	RPS_OBJ_ID_PKCRYPT_SERVER	= 0x2a,
	RPS_OBJ_ID_SITECRYPT	= 0x2b,
	RPS_OBJ_ID_AUTH	= 0x40,
	RPS_OBJ_ID_HTTPAUTH	= 0x42,
	RPS_OBJ_ID_RPSAUTHCOOKIE	= 0x60,
	RPS_OBJ_ID_RPSCOOKIE_GEN	= 0x61,
	RPS_OBJ_ID_COMPACTTICKET	= 0x62,
	RPS_OBJ_ID_WEBSSOTICKET	= 0x63,
	RPS_OBJ_ID_RPSSECAUTHCOOKIE	= 0x64,
	RPS_OBJ_ID_PPM	= 0x65,
	RPS_OBJ_ID_APPLICATION_AUTH	= 0x66,
	RPS_OBJ_ID_SSPI_AUTH	= 0x67
    } 	RPS_OBJECT_ID;

//  min & max for time window
#define	RPS_TIMEWINDOW_MIN	( 20 )

#define	RPS_TIMEWINDOW_MAX	( ( ( ( 367 * 24 )  * 60 )  * 60 )  )

//  min session key cache size
#define	MIN_RPS_SESSION_KEY_CACHE_SIZE	( 1000 )

//  min post ticket timewindow
#define	MIN_POST_TICKET_TIMEWINDOW	( 60 )

//  session key cache method enum
typedef /* [public][v1_enum] */ 
enum __MIDL___MIDL_itf_rps_0000_0000_0003
    {	RPS_CACHE_METHOD_EVICT_OLD_CACHE	= 0,
	RPS_CACHE_METHOD_CLEAR_ALL	= 1,
	RPS_CACHE_METHOD_NONE	= 2,
	RPS_CACHE_METHOD_MAX	= RPS_CACHE_METHOD_NONE
    } 	RPS_SessionKeyCache_Method;

//  ticket type enum
typedef /* [public][v1_enum] */ 
enum __MIDL___MIDL_itf_rps_0000_0000_0004
    {	Ticket_Type_None	= 0,
	Ticket_Type_WebSSO	= 1,
	Ticket_Type_Compact	= 2,
	Ticket_Type_RPSAuth	= 3,
	Ticket_Type_RPSSecAuth	= 4,
	Ticket_Type_PPM	= 5,
	Ticket_Type_Compact_Mobile	= 6,
	Ticket_Type_Compact_Delegation	= 7
    } 	RPS_Ticket_Type;



extern RPC_IF_HANDLE __MIDL_itf_rps_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_rps_0000_0000_v0_0_s_ifspec;

#ifndef __IRPS_INTERFACE_DEFINED__
#define __IRPS_INTERFACE_DEFINED__

/* interface IRPS */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IRPS;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("01732744-d1a2-11d7-99eb-505054503030")
    IRPS : public IDispatch
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Initialize( 
            /* [in] */ BSTR bstrReserved) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetObject( 
            /* [in] */ BSTR objectName,
            /* [retval][out] */ IDispatch **ppComp) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Shutdown( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRPSVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRPS * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRPS * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRPS * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IRPS * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IRPS * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IRPS * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IRPS * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Initialize )( 
            IRPS * This,
            /* [in] */ BSTR bstrReserved);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetObject )( 
            IRPS * This,
            /* [in] */ BSTR objectName,
            /* [retval][out] */ IDispatch **ppComp);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Shutdown )( 
            IRPS * This);
        
        END_INTERFACE
    } IRPSVtbl;

    interface IRPS
    {
        CONST_VTBL struct IRPSVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRPS_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IRPS_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IRPS_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IRPS_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IRPS_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IRPS_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IRPS_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IRPS_Initialize(This,bstrReserved)	\
    ( (This)->lpVtbl -> Initialize(This,bstrReserved) ) 

#define IRPS_GetObject(This,objectName,ppComp)	\
    ( (This)->lpVtbl -> GetObject(This,objectName,ppComp) ) 

#define IRPS_Shutdown(This)	\
    ( (This)->lpVtbl -> Shutdown(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IRPS_INTERFACE_DEFINED__ */


#ifndef __IRPSNotify_INTERFACE_DEFINED__
#define __IRPSNotify_INTERFACE_DEFINED__

/* interface IRPSNotify */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IRPSNotify;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("01732745-d1a2-11d7-99eb-505054503030")
    IRPSNotify : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE OnChanged( 
            /* [in] */ LPCWSTR compName,
            /* [in] */ DWORD dwConfigId) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRPSNotifyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRPSNotify * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRPSNotify * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRPSNotify * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *OnChanged )( 
            IRPSNotify * This,
            /* [in] */ LPCWSTR compName,
            /* [in] */ DWORD dwConfigId);
        
        END_INTERFACE
    } IRPSNotifyVtbl;

    interface IRPSNotify
    {
        CONST_VTBL struct IRPSNotifyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRPSNotify_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IRPSNotify_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IRPSNotify_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IRPSNotify_OnChanged(This,compName,dwConfigId)	\
    ( (This)->lpVtbl -> OnChanged(This,compName,dwConfigId) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IRPSNotify_INTERFACE_DEFINED__ */


#ifndef __IRPSComponent_INTERFACE_DEFINED__
#define __IRPSComponent_INTERFACE_DEFINED__

/* interface IRPSComponent */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IRPSComponent;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("01732746-d1a2-11d7-99eb-505054503030")
    IRPSComponent : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Initialize( 
            /* [in] */ IRPS *pRPS,
            /* [in] */ LPCWSTR pwszConfigDir,
            /* [in] */ IRPSNotify *pChangeNotify) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE OnChanged( 
            /* [in] */ IRPS *pRPS,
            /* [in] */ DWORD dwConfigId,
            /* [in] */ DWORD dwFlags) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetObjectByID( 
            /* [in] */ DWORD dwObjectId,
            /* [retval][out] */ IUnknown **ppObj) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Shutdown( 
            /* [in] */ IRPS *pRPS) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRPSComponentVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRPSComponent * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRPSComponent * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRPSComponent * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Initialize )( 
            IRPSComponent * This,
            /* [in] */ IRPS *pRPS,
            /* [in] */ LPCWSTR pwszConfigDir,
            /* [in] */ IRPSNotify *pChangeNotify);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *OnChanged )( 
            IRPSComponent * This,
            /* [in] */ IRPS *pRPS,
            /* [in] */ DWORD dwConfigId,
            /* [in] */ DWORD dwFlags);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetObjectByID )( 
            IRPSComponent * This,
            /* [in] */ DWORD dwObjectId,
            /* [retval][out] */ IUnknown **ppObj);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Shutdown )( 
            IRPSComponent * This,
            /* [in] */ IRPS *pRPS);
        
        END_INTERFACE
    } IRPSComponentVtbl;

    interface IRPSComponent
    {
        CONST_VTBL struct IRPSComponentVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRPSComponent_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IRPSComponent_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IRPSComponent_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IRPSComponent_Initialize(This,pRPS,pwszConfigDir,pChangeNotify)	\
    ( (This)->lpVtbl -> Initialize(This,pRPS,pwszConfigDir,pChangeNotify) ) 

#define IRPSComponent_OnChanged(This,pRPS,dwConfigId,dwFlags)	\
    ( (This)->lpVtbl -> OnChanged(This,pRPS,dwConfigId,dwFlags) ) 

#define IRPSComponent_GetObjectByID(This,dwObjectId,ppObj)	\
    ( (This)->lpVtbl -> GetObjectByID(This,dwObjectId,ppObj) ) 

#define IRPSComponent_Shutdown(This,pRPS)	\
    ( (This)->lpVtbl -> Shutdown(This,pRPS) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IRPSComponent_INTERFACE_DEFINED__ */


#ifndef ___IRPSPropBagEnum_INTERFACE_DEFINED__
#define ___IRPSPropBagEnum_INTERFACE_DEFINED__

/* interface _IRPSPropBagEnum */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID__IRPSPropBagEnum;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("01732751-d1a2-11d7-99eb-505054503030")
    _IRPSPropBagEnum : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetStartPos( 
            /* [retval][out] */ BYTE **pos) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetNameValuePair( 
            /* [out][in] */ BYTE **pos,
            /* [out] */ LPWSTR *ppName,
            /* [out] */ VARIANT **ppvValue) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct _IRPSPropBagEnumVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _IRPSPropBagEnum * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _IRPSPropBagEnum * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _IRPSPropBagEnum * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetStartPos )( 
            _IRPSPropBagEnum * This,
            /* [retval][out] */ BYTE **pos);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetNameValuePair )( 
            _IRPSPropBagEnum * This,
            /* [out][in] */ BYTE **pos,
            /* [out] */ LPWSTR *ppName,
            /* [out] */ VARIANT **ppvValue);
        
        END_INTERFACE
    } _IRPSPropBagEnumVtbl;

    interface _IRPSPropBagEnum
    {
        CONST_VTBL struct _IRPSPropBagEnumVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _IRPSPropBagEnum_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _IRPSPropBagEnum_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _IRPSPropBagEnum_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _IRPSPropBagEnum_GetStartPos(This,pos)	\
    ( (This)->lpVtbl -> GetStartPos(This,pos) ) 

#define _IRPSPropBagEnum_GetNameValuePair(This,pos,ppName,ppvValue)	\
    ( (This)->lpVtbl -> GetNameValuePair(This,pos,ppName,ppvValue) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* ___IRPSPropBagEnum_INTERFACE_DEFINED__ */


#ifndef __IRPSPropBag_INTERFACE_DEFINED__
#define __IRPSPropBag_INTERFACE_DEFINED__

/* interface IRPSPropBag */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IRPSPropBag;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("01732747-d1a2-11d7-99eb-505054503030")
    IRPSPropBag : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Names( 
            /* [retval][out] */ VARIANT *pArrayVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetValue( 
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvValue) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SetValue( 
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vValue) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RemoveAll( void) = 0;
        
        virtual /* [helpstring][hidden][id] */ HRESULT STDMETHODCALLTYPE _GetEnum( 
            _IRPSPropBagEnum **ppEnum) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRPSPropBagVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRPSPropBag * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRPSPropBag * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRPSPropBag * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IRPSPropBag * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IRPSPropBag * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IRPSPropBag * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IRPSPropBag * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Names )( 
            IRPSPropBag * This,
            /* [retval][out] */ VARIANT *pArrayVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetValue )( 
            IRPSPropBag * This,
            /* [in] */ BSTR bstrName,
            /* [retval][out] */ VARIANT *pvValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SetValue )( 
            IRPSPropBag * This,
            /* [in] */ BSTR bstrName,
            /* [in] */ VARIANT vValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveAll )( 
            IRPSPropBag * This);
        
        /* [helpstring][hidden][id] */ HRESULT ( STDMETHODCALLTYPE *_GetEnum )( 
            IRPSPropBag * This,
            _IRPSPropBagEnum **ppEnum);
        
        END_INTERFACE
    } IRPSPropBagVtbl;

    interface IRPSPropBag
    {
        CONST_VTBL struct IRPSPropBagVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRPSPropBag_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IRPSPropBag_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IRPSPropBag_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IRPSPropBag_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IRPSPropBag_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IRPSPropBag_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IRPSPropBag_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IRPSPropBag_get_Names(This,pArrayVal)	\
    ( (This)->lpVtbl -> get_Names(This,pArrayVal) ) 

#define IRPSPropBag_GetValue(This,bstrName,pvValue)	\
    ( (This)->lpVtbl -> GetValue(This,bstrName,pvValue) ) 

#define IRPSPropBag_SetValue(This,bstrName,vValue)	\
    ( (This)->lpVtbl -> SetValue(This,bstrName,vValue) ) 

#define IRPSPropBag_RemoveAll(This)	\
    ( (This)->lpVtbl -> RemoveAll(This) ) 

#define IRPSPropBag__GetEnum(This,ppEnum)	\
    ( (This)->lpVtbl -> _GetEnum(This,ppEnum) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IRPSPropBag_INTERFACE_DEFINED__ */


#ifndef __IRPSDomainMap_INTERFACE_DEFINED__
#define __IRPSDomainMap_INTERFACE_DEFINED__

/* interface IRPSDomainMap */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IRPSDomainMap;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("01732748-d1a2-11d7-99eb-505054503030")
    IRPSDomainMap : public IDispatch
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetDomainAttribute( 
            /* [in] */ BSTR attributeName,
            /* [in] */ DWORD lcid,
            /* [in] */ BSTR domain,
            /* [retval][out] */ BSTR *pAttrVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Domains( 
            /* [retval][out] */ VARIANT *pArrayVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE DomainExists( 
            /* [in] */ BSTR domainName,
            /* [retval][out] */ VARIANT_BOOL *pbExists) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ConstructURL( 
            /* [in] */ BSTR bstrAttrName,
            /* [in] */ BSTR bstrSiteName,
            /* [in] */ BSTR bstrDomain,
            /* [in] */ IRPSPropBag *pParametersInBag,
            /* [retval][out] */ BSTR *pbstrURL) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRPSDomainMapVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRPSDomainMap * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRPSDomainMap * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRPSDomainMap * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IRPSDomainMap * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IRPSDomainMap * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IRPSDomainMap * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IRPSDomainMap * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetDomainAttribute )( 
            IRPSDomainMap * This,
            /* [in] */ BSTR attributeName,
            /* [in] */ DWORD lcid,
            /* [in] */ BSTR domain,
            /* [retval][out] */ BSTR *pAttrVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Domains )( 
            IRPSDomainMap * This,
            /* [retval][out] */ VARIANT *pArrayVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *DomainExists )( 
            IRPSDomainMap * This,
            /* [in] */ BSTR domainName,
            /* [retval][out] */ VARIANT_BOOL *pbExists);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ConstructURL )( 
            IRPSDomainMap * This,
            /* [in] */ BSTR bstrAttrName,
            /* [in] */ BSTR bstrSiteName,
            /* [in] */ BSTR bstrDomain,
            /* [in] */ IRPSPropBag *pParametersInBag,
            /* [retval][out] */ BSTR *pbstrURL);
        
        END_INTERFACE
    } IRPSDomainMapVtbl;

    interface IRPSDomainMap
    {
        CONST_VTBL struct IRPSDomainMapVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRPSDomainMap_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IRPSDomainMap_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IRPSDomainMap_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IRPSDomainMap_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IRPSDomainMap_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IRPSDomainMap_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IRPSDomainMap_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IRPSDomainMap_GetDomainAttribute(This,attributeName,lcid,domain,pAttrVal)	\
    ( (This)->lpVtbl -> GetDomainAttribute(This,attributeName,lcid,domain,pAttrVal) ) 

#define IRPSDomainMap_get_Domains(This,pArrayVal)	\
    ( (This)->lpVtbl -> get_Domains(This,pArrayVal) ) 

#define IRPSDomainMap_DomainExists(This,domainName,pbExists)	\
    ( (This)->lpVtbl -> DomainExists(This,domainName,pbExists) ) 

#define IRPSDomainMap_ConstructURL(This,bstrAttrName,bstrSiteName,bstrDomain,pParametersInBag,pbstrURL)	\
    ( (This)->lpVtbl -> ConstructURL(This,bstrAttrName,bstrSiteName,bstrDomain,pParametersInBag,pbstrURL) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IRPSDomainMap_INTERFACE_DEFINED__ */


#ifndef __IRPSPKCrypt_INTERFACE_DEFINED__
#define __IRPSPKCrypt_INTERFACE_DEFINED__

/* interface IRPSPKCrypt */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IRPSPKCrypt;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("01732749-d1a2-11d7-99eb-505054503030")
    IRPSPKCrypt : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Encrypt( 
            /* [in] */ LPCWSTR certName,
            /* [out] */ BYTE *pbCertSKI,
            /* [out][in] */ DWORD *pcbCertSKI,
            /* [out][in] */ BYTE *pbData,
            /* [out][in] */ DWORD *pdwDataLen,
            /* [in] */ DWORD dwBufLen) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE VerifySignature( 
            /* [in] */ BYTE *pbCertSKI,
            /* [in] */ DWORD cbCertSKI,
            /* [in] */ BYTE *hHash,
            /* [in] */ BYTE *pbSigData,
            /* [in] */ DWORD dwSigDataLen,
            /* [out] */ BOOL *pbMatch,
            /* [out] */ BSTR *pbstrCertName) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE VerifySignature2( 
            /* [in] */ LPCWSTR certName,
            /* [in] */ BYTE *hHash,
            /* [in] */ BYTE *pbSigData,
            /* [in] */ DWORD dwSigDataLen,
            /* [out] */ BOOL *pbMatch) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE SignHash( 
            /* [in] */ LPCWSTR certName,
            /* [out] */ BYTE *pbCertSKI,
            /* [out][in] */ DWORD *pcbCertSKI,
            /* [in] */ BYTE *hHash,
            /* [out] */ BYTE *pbSignature,
            /* [out][in] */ DWORD *pdwSignatureLen) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Decrypt( 
            /* [in] */ BYTE *pbCertSKI,
            /* [in] */ DWORD cbCertSKI,
            /* [out][in] */ BYTE *pbData,
            /* [out][in] */ DWORD *pdwDataLen,
            /* [out] */ BSTR *pbstrCertName) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Decrypt2( 
            /* [in] */ DWORD dwFlags,
            /* [in] */ BYTE *pbCertSKI,
            /* [in] */ DWORD cbCertSKI,
            /* [out][in] */ BYTE *pbData,
            /* [out][in] */ DWORD *pdwDataLen,
            /* [out] */ BSTR *pbstrCertName) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE DeriveRawMobileKeyFromPrivateKey( 
            /* [in] */ BYTE *pbCertSKI,
            /* [in] */ DWORD cbCertSKI,
            /* [out][in] */ BYTE *pbRawKeyData,
            /* [out][in] */ DWORD *pdwRawKeyDataLen,
            /* [out] */ BSTR *pbstrCertName) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE VerifyAssertion( 
            /* [in] */ BSTR cert,
            /* [out][in] */ DWORD *pdwTTL,
            /* [size_is][in] */ BYTE *pbPOP,
            /* [in] */ DWORD cbPOP,
            /* [out] */ BSTR *pCACert) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRPSPKCryptVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRPSPKCrypt * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRPSPKCrypt * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRPSPKCrypt * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Encrypt )( 
            IRPSPKCrypt * This,
            /* [in] */ LPCWSTR certName,
            /* [out] */ BYTE *pbCertSKI,
            /* [out][in] */ DWORD *pcbCertSKI,
            /* [out][in] */ BYTE *pbData,
            /* [out][in] */ DWORD *pdwDataLen,
            /* [in] */ DWORD dwBufLen);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *VerifySignature )( 
            IRPSPKCrypt * This,
            /* [in] */ BYTE *pbCertSKI,
            /* [in] */ DWORD cbCertSKI,
            /* [in] */ BYTE *hHash,
            /* [in] */ BYTE *pbSigData,
            /* [in] */ DWORD dwSigDataLen,
            /* [out] */ BOOL *pbMatch,
            /* [out] */ BSTR *pbstrCertName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *VerifySignature2 )( 
            IRPSPKCrypt * This,
            /* [in] */ LPCWSTR certName,
            /* [in] */ BYTE *hHash,
            /* [in] */ BYTE *pbSigData,
            /* [in] */ DWORD dwSigDataLen,
            /* [out] */ BOOL *pbMatch);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SignHash )( 
            IRPSPKCrypt * This,
            /* [in] */ LPCWSTR certName,
            /* [out] */ BYTE *pbCertSKI,
            /* [out][in] */ DWORD *pcbCertSKI,
            /* [in] */ BYTE *hHash,
            /* [out] */ BYTE *pbSignature,
            /* [out][in] */ DWORD *pdwSignatureLen);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Decrypt )( 
            IRPSPKCrypt * This,
            /* [in] */ BYTE *pbCertSKI,
            /* [in] */ DWORD cbCertSKI,
            /* [out][in] */ BYTE *pbData,
            /* [out][in] */ DWORD *pdwDataLen,
            /* [out] */ BSTR *pbstrCertName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Decrypt2 )( 
            IRPSPKCrypt * This,
            /* [in] */ DWORD dwFlags,
            /* [in] */ BYTE *pbCertSKI,
            /* [in] */ DWORD cbCertSKI,
            /* [out][in] */ BYTE *pbData,
            /* [out][in] */ DWORD *pdwDataLen,
            /* [out] */ BSTR *pbstrCertName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *DeriveRawMobileKeyFromPrivateKey )( 
            IRPSPKCrypt * This,
            /* [in] */ BYTE *pbCertSKI,
            /* [in] */ DWORD cbCertSKI,
            /* [out][in] */ BYTE *pbRawKeyData,
            /* [out][in] */ DWORD *pdwRawKeyDataLen,
            /* [out] */ BSTR *pbstrCertName);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *VerifyAssertion )( 
            IRPSPKCrypt * This,
            /* [in] */ BSTR cert,
            /* [out][in] */ DWORD *pdwTTL,
            /* [size_is][in] */ BYTE *pbPOP,
            /* [in] */ DWORD cbPOP,
            /* [out] */ BSTR *pCACert);
        
        END_INTERFACE
    } IRPSPKCryptVtbl;

    interface IRPSPKCrypt
    {
        CONST_VTBL struct IRPSPKCryptVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRPSPKCrypt_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IRPSPKCrypt_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IRPSPKCrypt_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IRPSPKCrypt_Encrypt(This,certName,pbCertSKI,pcbCertSKI,pbData,pdwDataLen,dwBufLen)	\
    ( (This)->lpVtbl -> Encrypt(This,certName,pbCertSKI,pcbCertSKI,pbData,pdwDataLen,dwBufLen) ) 

#define IRPSPKCrypt_VerifySignature(This,pbCertSKI,cbCertSKI,hHash,pbSigData,dwSigDataLen,pbMatch,pbstrCertName)	\
    ( (This)->lpVtbl -> VerifySignature(This,pbCertSKI,cbCertSKI,hHash,pbSigData,dwSigDataLen,pbMatch,pbstrCertName) ) 

#define IRPSPKCrypt_VerifySignature2(This,certName,hHash,pbSigData,dwSigDataLen,pbMatch)	\
    ( (This)->lpVtbl -> VerifySignature2(This,certName,hHash,pbSigData,dwSigDataLen,pbMatch) ) 

#define IRPSPKCrypt_SignHash(This,certName,pbCertSKI,pcbCertSKI,hHash,pbSignature,pdwSignatureLen)	\
    ( (This)->lpVtbl -> SignHash(This,certName,pbCertSKI,pcbCertSKI,hHash,pbSignature,pdwSignatureLen) ) 

#define IRPSPKCrypt_Decrypt(This,pbCertSKI,cbCertSKI,pbData,pdwDataLen,pbstrCertName)	\
    ( (This)->lpVtbl -> Decrypt(This,pbCertSKI,cbCertSKI,pbData,pdwDataLen,pbstrCertName) ) 

#define IRPSPKCrypt_Decrypt2(This,dwFlags,pbCertSKI,cbCertSKI,pbData,pdwDataLen,pbstrCertName)	\
    ( (This)->lpVtbl -> Decrypt2(This,dwFlags,pbCertSKI,cbCertSKI,pbData,pdwDataLen,pbstrCertName) ) 

#define IRPSPKCrypt_DeriveRawMobileKeyFromPrivateKey(This,pbCertSKI,cbCertSKI,pbRawKeyData,pdwRawKeyDataLen,pbstrCertName)	\
    ( (This)->lpVtbl -> DeriveRawMobileKeyFromPrivateKey(This,pbCertSKI,cbCertSKI,pbRawKeyData,pdwRawKeyDataLen,pbstrCertName) ) 

#define IRPSPKCrypt_VerifyAssertion(This,cert,pdwTTL,pbPOP,cbPOP,pCACert)	\
    ( (This)->lpVtbl -> VerifyAssertion(This,cert,pdwTTL,pbPOP,cbPOP,pCACert) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IRPSPKCrypt_INTERFACE_DEFINED__ */


#ifndef __IRPSCookieCrypt_INTERFACE_DEFINED__
#define __IRPSCookieCrypt_INTERFACE_DEFINED__

/* interface IRPSCookieCrypt */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IRPSCookieCrypt;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0173274a-d1a2-11d7-99eb-505054503030")
    IRPSCookieCrypt : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Encrypt( 
            /* [in] */ LPCWSTR siteName,
            /* [out][in] */ DWORD *pdwKeyId,
            /* [out][in] */ BYTE *pbData,
            /* [out][in] */ DWORD *pdwDataLen,
            /* [in] */ DWORD dwBufLen) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Decrypt( 
            /* [in] */ LPCWSTR siteName,
            /* [in] */ DWORD keyId,
            /* [out][in] */ BYTE *pbData,
            /* [out][in] */ DWORD *pdwDataLen) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRPSCookieCryptVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRPSCookieCrypt * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRPSCookieCrypt * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRPSCookieCrypt * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Encrypt )( 
            IRPSCookieCrypt * This,
            /* [in] */ LPCWSTR siteName,
            /* [out][in] */ DWORD *pdwKeyId,
            /* [out][in] */ BYTE *pbData,
            /* [out][in] */ DWORD *pdwDataLen,
            /* [in] */ DWORD dwBufLen);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Decrypt )( 
            IRPSCookieCrypt * This,
            /* [in] */ LPCWSTR siteName,
            /* [in] */ DWORD keyId,
            /* [out][in] */ BYTE *pbData,
            /* [out][in] */ DWORD *pdwDataLen);
        
        END_INTERFACE
    } IRPSCookieCryptVtbl;

    interface IRPSCookieCrypt
    {
        CONST_VTBL struct IRPSCookieCryptVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRPSCookieCrypt_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IRPSCookieCrypt_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IRPSCookieCrypt_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IRPSCookieCrypt_Encrypt(This,siteName,pdwKeyId,pbData,pdwDataLen,dwBufLen)	\
    ( (This)->lpVtbl -> Encrypt(This,siteName,pdwKeyId,pbData,pdwDataLen,dwBufLen) ) 

#define IRPSCookieCrypt_Decrypt(This,siteName,keyId,pbData,pdwDataLen)	\
    ( (This)->lpVtbl -> Decrypt(This,siteName,keyId,pbData,pdwDataLen) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IRPSCookieCrypt_INTERFACE_DEFINED__ */


#ifndef __IRPSSiteCrypt_INTERFACE_DEFINED__
#define __IRPSSiteCrypt_INTERFACE_DEFINED__

/* interface IRPSSiteCrypt */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IRPSSiteCrypt;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7aeafa0c-ce51-4c3d-8de5-3a09ff37d4a5")
    IRPSSiteCrypt : public IDispatch
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Encrypt( 
            /* [in] */ BSTR siteName,
            /* [in] */ DWORD dwKeyId,
            /* [in] */ BSTR bstrData,
            /* [retval][out] */ BSTR *pbstrEncryptedData) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Decrypt( 
            /* [in] */ BSTR siteName,
            /* [in] */ DWORD keyId,
            /* [in] */ BSTR bstrEncryptedData,
            /* [retval][out] */ BSTR *pbstrData) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRPSSiteCryptVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRPSSiteCrypt * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRPSSiteCrypt * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRPSSiteCrypt * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IRPSSiteCrypt * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IRPSSiteCrypt * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IRPSSiteCrypt * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IRPSSiteCrypt * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Encrypt )( 
            IRPSSiteCrypt * This,
            /* [in] */ BSTR siteName,
            /* [in] */ DWORD dwKeyId,
            /* [in] */ BSTR bstrData,
            /* [retval][out] */ BSTR *pbstrEncryptedData);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Decrypt )( 
            IRPSSiteCrypt * This,
            /* [in] */ BSTR siteName,
            /* [in] */ DWORD keyId,
            /* [in] */ BSTR bstrEncryptedData,
            /* [retval][out] */ BSTR *pbstrData);
        
        END_INTERFACE
    } IRPSSiteCryptVtbl;

    interface IRPSSiteCrypt
    {
        CONST_VTBL struct IRPSSiteCryptVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRPSSiteCrypt_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IRPSSiteCrypt_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IRPSSiteCrypt_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IRPSSiteCrypt_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IRPSSiteCrypt_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IRPSSiteCrypt_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IRPSSiteCrypt_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IRPSSiteCrypt_Encrypt(This,siteName,dwKeyId,bstrData,pbstrEncryptedData)	\
    ( (This)->lpVtbl -> Encrypt(This,siteName,dwKeyId,bstrData,pbstrEncryptedData) ) 

#define IRPSSiteCrypt_Decrypt(This,siteName,keyId,bstrEncryptedData,pbstrData)	\
    ( (This)->lpVtbl -> Decrypt(This,siteName,keyId,bstrEncryptedData,pbstrData) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IRPSSiteCrypt_INTERFACE_DEFINED__ */


#ifndef __IRPSDataCrypt_P_INTERFACE_DEFINED__
#define __IRPSDataCrypt_P_INTERFACE_DEFINED__

/* interface IRPSDataCrypt_P */
/* [unique][helpstring][hidden][uuid][object] */ 


EXTERN_C const IID IID_IRPSDataCrypt_P;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0173274c-d1a2-11d7-99eb-505054503030")
    IRPSDataCrypt_P : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Pack( 
            /* [in] */ DWORD dataType,
            /* [in] */ IRPSPropBag *pData,
            /* [out] */ BSTR *pPackedData) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Unpack( 
            /* [in] */ DWORD expectedDataType,
            /* [in] */ BYTE *pbData,
            /* [in] */ DWORD cbData,
            /* [out] */ IRPSPropBag **ppDataBag) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE SignData( 
            /* [in] */ DWORD signerId,
            /* [in][string] */ LPCWSTR signerCert,
            /* [in] */ BYTE *pbData,
            /* [in] */ DWORD dwDataLen,
            /* [out] */ BSTR *pstrSignedData) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE EncryptData( 
            /* [in] */ DWORD recipientId,
            /* [in][string] */ LPCWSTR recipientCert,
            /* [in] */ BYTE *pbData,
            /* [in] */ DWORD dwDataLen,
            /* [out] */ BSTR *pstrSignedData) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE VerifySignedData( 
            /* [in] */ DWORD signerId,
            /* [in] */ BYTE *pbData,
            /* [in] */ DWORD dwDataLen,
            /* [out][in] */ BYTE *pbSignedData,
            /* [out][in] */ DWORD *pdwSignedDataLen,
            /* [out] */ BSTR *pstrSignerCert) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE DecryptData( 
            /* [in] */ DWORD recipientId,
            /* [in] */ BYTE *pbData,
            /* [in] */ DWORD dwDataLen,
            /* [out] */ BSTR *pstrRecipientCert,
            /* [out] */ BSTR *pstrClearData) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRPSDataCrypt_PVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRPSDataCrypt_P * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRPSDataCrypt_P * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRPSDataCrypt_P * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Pack )( 
            IRPSDataCrypt_P * This,
            /* [in] */ DWORD dataType,
            /* [in] */ IRPSPropBag *pData,
            /* [out] */ BSTR *pPackedData);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Unpack )( 
            IRPSDataCrypt_P * This,
            /* [in] */ DWORD expectedDataType,
            /* [in] */ BYTE *pbData,
            /* [in] */ DWORD cbData,
            /* [out] */ IRPSPropBag **ppDataBag);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *SignData )( 
            IRPSDataCrypt_P * This,
            /* [in] */ DWORD signerId,
            /* [in][string] */ LPCWSTR signerCert,
            /* [in] */ BYTE *pbData,
            /* [in] */ DWORD dwDataLen,
            /* [out] */ BSTR *pstrSignedData);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *EncryptData )( 
            IRPSDataCrypt_P * This,
            /* [in] */ DWORD recipientId,
            /* [in][string] */ LPCWSTR recipientCert,
            /* [in] */ BYTE *pbData,
            /* [in] */ DWORD dwDataLen,
            /* [out] */ BSTR *pstrSignedData);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *VerifySignedData )( 
            IRPSDataCrypt_P * This,
            /* [in] */ DWORD signerId,
            /* [in] */ BYTE *pbData,
            /* [in] */ DWORD dwDataLen,
            /* [out][in] */ BYTE *pbSignedData,
            /* [out][in] */ DWORD *pdwSignedDataLen,
            /* [out] */ BSTR *pstrSignerCert);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *DecryptData )( 
            IRPSDataCrypt_P * This,
            /* [in] */ DWORD recipientId,
            /* [in] */ BYTE *pbData,
            /* [in] */ DWORD dwDataLen,
            /* [out] */ BSTR *pstrRecipientCert,
            /* [out] */ BSTR *pstrClearData);
        
        END_INTERFACE
    } IRPSDataCrypt_PVtbl;

    interface IRPSDataCrypt_P
    {
        CONST_VTBL struct IRPSDataCrypt_PVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRPSDataCrypt_P_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IRPSDataCrypt_P_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IRPSDataCrypt_P_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IRPSDataCrypt_P_Pack(This,dataType,pData,pPackedData)	\
    ( (This)->lpVtbl -> Pack(This,dataType,pData,pPackedData) ) 

#define IRPSDataCrypt_P_Unpack(This,expectedDataType,pbData,cbData,ppDataBag)	\
    ( (This)->lpVtbl -> Unpack(This,expectedDataType,pbData,cbData,ppDataBag) ) 

#define IRPSDataCrypt_P_SignData(This,signerId,signerCert,pbData,dwDataLen,pstrSignedData)	\
    ( (This)->lpVtbl -> SignData(This,signerId,signerCert,pbData,dwDataLen,pstrSignedData) ) 

#define IRPSDataCrypt_P_EncryptData(This,recipientId,recipientCert,pbData,dwDataLen,pstrSignedData)	\
    ( (This)->lpVtbl -> EncryptData(This,recipientId,recipientCert,pbData,dwDataLen,pstrSignedData) ) 

#define IRPSDataCrypt_P_VerifySignedData(This,signerId,pbData,dwDataLen,pbSignedData,pdwSignedDataLen,pstrSignerCert)	\
    ( (This)->lpVtbl -> VerifySignedData(This,signerId,pbData,dwDataLen,pbSignedData,pdwSignedDataLen,pstrSignerCert) ) 

#define IRPSDataCrypt_P_DecryptData(This,recipientId,pbData,dwDataLen,pstrRecipientCert,pstrClearData)	\
    ( (This)->lpVtbl -> DecryptData(This,recipientId,pbData,dwDataLen,pstrRecipientCert,pstrClearData) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IRPSDataCrypt_P_INTERFACE_DEFINED__ */


#ifndef __IRPSPackData_INTERFACE_DEFINED__
#define __IRPSPackData_INTERFACE_DEFINED__

/* interface IRPSPackData */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IRPSPackData;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("01732752-d1a2-11d7-99eb-505054503030")
    IRPSPackData : public IDispatch
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE PackData( 
            /* [in] */ DWORD signerId,
            /* [in] */ BSTR signerCert,
            /* [in] */ DWORD recipientId,
            /* [in] */ BSTR recipientCert,
            /* [in] */ DWORD dataType,
            /* [in] */ IDispatch *pDataBag,
            /* [retval][out] */ BSTR *pstrPackedData) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE UnpackData( 
            /* [in] */ DWORD expectedSigner,
            /* [in] */ DWORD expectedDataType,
            /* [in] */ VARIANT_BOOL bEncrypted,
            /* [in] */ BSTR data,
            /* [in] */ IDispatch *pEnvelopBag,
            /* [retval][out] */ IDispatch **ppDataBag) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE CheckIDSSignature( 
            /* [in] */ VARIANT chPurpose,
            /* [in] */ VARIANT vSignedData,
            /* [in] */ BSTR bsSKI,
            /* [in] */ BSTR bsSignature,
            /* [retval][out] */ VARIANT_BOOL *pbMatched) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE VerifyLinkedPUIDsSignature( 
            /* [in] */ DWORD dwLinkedIDHigh,
            /* [in] */ DWORD dwLinkedIDLow,
            /* [in] */ DWORD dwLinkedIDTime,
            /* [in] */ VARIANT vPUIDs,
            /* [in] */ BSTR bsSKI,
            /* [in] */ BSTR bsSignature,
            /* [retval][out] */ VARIANT_BOOL *pbMatched) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRPSPackDataVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRPSPackData * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRPSPackData * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRPSPackData * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IRPSPackData * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IRPSPackData * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IRPSPackData * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IRPSPackData * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *PackData )( 
            IRPSPackData * This,
            /* [in] */ DWORD signerId,
            /* [in] */ BSTR signerCert,
            /* [in] */ DWORD recipientId,
            /* [in] */ BSTR recipientCert,
            /* [in] */ DWORD dataType,
            /* [in] */ IDispatch *pDataBag,
            /* [retval][out] */ BSTR *pstrPackedData);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *UnpackData )( 
            IRPSPackData * This,
            /* [in] */ DWORD expectedSigner,
            /* [in] */ DWORD expectedDataType,
            /* [in] */ VARIANT_BOOL bEncrypted,
            /* [in] */ BSTR data,
            /* [in] */ IDispatch *pEnvelopBag,
            /* [retval][out] */ IDispatch **ppDataBag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CheckIDSSignature )( 
            IRPSPackData * This,
            /* [in] */ VARIANT chPurpose,
            /* [in] */ VARIANT vSignedData,
            /* [in] */ BSTR bsSKI,
            /* [in] */ BSTR bsSignature,
            /* [retval][out] */ VARIANT_BOOL *pbMatched);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *VerifyLinkedPUIDsSignature )( 
            IRPSPackData * This,
            /* [in] */ DWORD dwLinkedIDHigh,
            /* [in] */ DWORD dwLinkedIDLow,
            /* [in] */ DWORD dwLinkedIDTime,
            /* [in] */ VARIANT vPUIDs,
            /* [in] */ BSTR bsSKI,
            /* [in] */ BSTR bsSignature,
            /* [retval][out] */ VARIANT_BOOL *pbMatched);
        
        END_INTERFACE
    } IRPSPackDataVtbl;

    interface IRPSPackData
    {
        CONST_VTBL struct IRPSPackDataVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRPSPackData_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IRPSPackData_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IRPSPackData_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IRPSPackData_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IRPSPackData_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IRPSPackData_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IRPSPackData_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IRPSPackData_PackData(This,signerId,signerCert,recipientId,recipientCert,dataType,pDataBag,pstrPackedData)	\
    ( (This)->lpVtbl -> PackData(This,signerId,signerCert,recipientId,recipientCert,dataType,pDataBag,pstrPackedData) ) 

#define IRPSPackData_UnpackData(This,expectedSigner,expectedDataType,bEncrypted,data,pEnvelopBag,ppDataBag)	\
    ( (This)->lpVtbl -> UnpackData(This,expectedSigner,expectedDataType,bEncrypted,data,pEnvelopBag,ppDataBag) ) 

#define IRPSPackData_CheckIDSSignature(This,chPurpose,vSignedData,bsSKI,bsSignature,pbMatched)	\
    ( (This)->lpVtbl -> CheckIDSSignature(This,chPurpose,vSignedData,bsSKI,bsSignature,pbMatched) ) 

#define IRPSPackData_VerifyLinkedPUIDsSignature(This,dwLinkedIDHigh,dwLinkedIDLow,dwLinkedIDTime,vPUIDs,bsSKI,bsSignature,pbMatched)	\
    ( (This)->lpVtbl -> VerifyLinkedPUIDsSignature(This,dwLinkedIDHigh,dwLinkedIDLow,dwLinkedIDTime,vPUIDs,bsSKI,bsSignature,pbMatched) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IRPSPackData_INTERFACE_DEFINED__ */


#ifndef __IRPSTicket_INTERFACE_DEFINED__
#define __IRPSTicket_INTERFACE_DEFINED__

/* interface IRPSTicket */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IRPSTicket;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0173274d-d1a2-11d7-99eb-505054503030")
    IRPSTicket : public IDispatch
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ProcessToken( 
            /* [in] */ BSTR siteName,
            /* [in] */ BSTR ticketToken) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Property( 
            /* [in] */ BSTR name,
            /* [retval][out] */ VARIANT *pVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_TicketType( 
            /* [retval][out] */ DWORD *pType) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_IsEncrypted( 
            /* [retval][out] */ VARIANT_BOOL *pType) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Token( 
            /* [retval][out] */ BSTR *pType) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Validate( 
            /* [in] */ IDispatch *pParamBag,
            /* [retval][out] */ VARIANT_BOOL *pbValid) = 0;
        
        virtual /* [helpstring][id][hidden][propget] */ HRESULT STDMETHODCALLTYPE get_PropertyBag( 
            /* [retval][out] */ IDispatch **pVal) = 0;
        
        virtual /* [helpstring][id][hidden][propget] */ HRESULT STDMETHODCALLTYPE get_ProfileProperty( 
            /* [in] */ BSTR name,
            /* [retval][out] */ VARIANT *pVal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRPSTicketVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRPSTicket * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRPSTicket * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRPSTicket * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IRPSTicket * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IRPSTicket * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IRPSTicket * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IRPSTicket * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ProcessToken )( 
            IRPSTicket * This,
            /* [in] */ BSTR siteName,
            /* [in] */ BSTR ticketToken);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Property )( 
            IRPSTicket * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TicketType )( 
            IRPSTicket * This,
            /* [retval][out] */ DWORD *pType);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsEncrypted )( 
            IRPSTicket * This,
            /* [retval][out] */ VARIANT_BOOL *pType);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Token )( 
            IRPSTicket * This,
            /* [retval][out] */ BSTR *pType);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Validate )( 
            IRPSTicket * This,
            /* [in] */ IDispatch *pParamBag,
            /* [retval][out] */ VARIANT_BOOL *pbValid);
        
        /* [helpstring][id][hidden][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PropertyBag )( 
            IRPSTicket * This,
            /* [retval][out] */ IDispatch **pVal);
        
        /* [helpstring][id][hidden][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProfileProperty )( 
            IRPSTicket * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ VARIANT *pVal);
        
        END_INTERFACE
    } IRPSTicketVtbl;

    interface IRPSTicket
    {
        CONST_VTBL struct IRPSTicketVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRPSTicket_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IRPSTicket_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IRPSTicket_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IRPSTicket_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IRPSTicket_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IRPSTicket_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IRPSTicket_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IRPSTicket_ProcessToken(This,siteName,ticketToken)	\
    ( (This)->lpVtbl -> ProcessToken(This,siteName,ticketToken) ) 

#define IRPSTicket_get_Property(This,name,pVal)	\
    ( (This)->lpVtbl -> get_Property(This,name,pVal) ) 

#define IRPSTicket_get_TicketType(This,pType)	\
    ( (This)->lpVtbl -> get_TicketType(This,pType) ) 

#define IRPSTicket_get_IsEncrypted(This,pType)	\
    ( (This)->lpVtbl -> get_IsEncrypted(This,pType) ) 

#define IRPSTicket_get_Token(This,pType)	\
    ( (This)->lpVtbl -> get_Token(This,pType) ) 

#define IRPSTicket_Validate(This,pParamBag,pbValid)	\
    ( (This)->lpVtbl -> Validate(This,pParamBag,pbValid) ) 

#define IRPSTicket_get_PropertyBag(This,pVal)	\
    ( (This)->lpVtbl -> get_PropertyBag(This,pVal) ) 

#define IRPSTicket_get_ProfileProperty(This,name,pVal)	\
    ( (This)->lpVtbl -> get_ProfileProperty(This,name,pVal) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IRPSTicket_INTERFACE_DEFINED__ */


#ifndef __IRPSTicket2_INTERFACE_DEFINED__
#define __IRPSTicket2_INTERFACE_DEFINED__

/* interface IRPSTicket2 */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IRPSTicket2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("86844cae-6483-480e-811a-fe67b9846f4d")
    IRPSTicket2 : public IRPSTicket
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE EncryptWithSessionKey( 
            /* [in] */ UINT nAlgIdEncrypt,
            /* [in] */ UINT nAlgIdHash,
            /* [in] */ VARIANT bstrInput,
            /* [retval][out] */ VARIANT *pbstrOutput) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE DecryptWithSessionKey( 
            /* [in] */ UINT nAlgIdEncrypt,
            /* [in] */ UINT nAlgIdHash,
            /* [in] */ VARIANT bstrInput,
            /* [retval][out] */ VARIANT *pbstrOutput) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRPSTicket2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRPSTicket2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRPSTicket2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRPSTicket2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IRPSTicket2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IRPSTicket2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IRPSTicket2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IRPSTicket2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ProcessToken )( 
            IRPSTicket2 * This,
            /* [in] */ BSTR siteName,
            /* [in] */ BSTR ticketToken);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Property )( 
            IRPSTicket2 * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TicketType )( 
            IRPSTicket2 * This,
            /* [retval][out] */ DWORD *pType);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsEncrypted )( 
            IRPSTicket2 * This,
            /* [retval][out] */ VARIANT_BOOL *pType);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Token )( 
            IRPSTicket2 * This,
            /* [retval][out] */ BSTR *pType);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Validate )( 
            IRPSTicket2 * This,
            /* [in] */ IDispatch *pParamBag,
            /* [retval][out] */ VARIANT_BOOL *pbValid);
        
        /* [helpstring][id][hidden][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PropertyBag )( 
            IRPSTicket2 * This,
            /* [retval][out] */ IDispatch **pVal);
        
        /* [helpstring][id][hidden][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ProfileProperty )( 
            IRPSTicket2 * This,
            /* [in] */ BSTR name,
            /* [retval][out] */ VARIANT *pVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *EncryptWithSessionKey )( 
            IRPSTicket2 * This,
            /* [in] */ UINT nAlgIdEncrypt,
            /* [in] */ UINT nAlgIdHash,
            /* [in] */ VARIANT bstrInput,
            /* [retval][out] */ VARIANT *pbstrOutput);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *DecryptWithSessionKey )( 
            IRPSTicket2 * This,
            /* [in] */ UINT nAlgIdEncrypt,
            /* [in] */ UINT nAlgIdHash,
            /* [in] */ VARIANT bstrInput,
            /* [retval][out] */ VARIANT *pbstrOutput);
        
        END_INTERFACE
    } IRPSTicket2Vtbl;

    interface IRPSTicket2
    {
        CONST_VTBL struct IRPSTicket2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRPSTicket2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IRPSTicket2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IRPSTicket2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IRPSTicket2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IRPSTicket2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IRPSTicket2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IRPSTicket2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IRPSTicket2_ProcessToken(This,siteName,ticketToken)	\
    ( (This)->lpVtbl -> ProcessToken(This,siteName,ticketToken) ) 

#define IRPSTicket2_get_Property(This,name,pVal)	\
    ( (This)->lpVtbl -> get_Property(This,name,pVal) ) 

#define IRPSTicket2_get_TicketType(This,pType)	\
    ( (This)->lpVtbl -> get_TicketType(This,pType) ) 

#define IRPSTicket2_get_IsEncrypted(This,pType)	\
    ( (This)->lpVtbl -> get_IsEncrypted(This,pType) ) 

#define IRPSTicket2_get_Token(This,pType)	\
    ( (This)->lpVtbl -> get_Token(This,pType) ) 

#define IRPSTicket2_Validate(This,pParamBag,pbValid)	\
    ( (This)->lpVtbl -> Validate(This,pParamBag,pbValid) ) 

#define IRPSTicket2_get_PropertyBag(This,pVal)	\
    ( (This)->lpVtbl -> get_PropertyBag(This,pVal) ) 

#define IRPSTicket2_get_ProfileProperty(This,name,pVal)	\
    ( (This)->lpVtbl -> get_ProfileProperty(This,name,pVal) ) 


#define IRPSTicket2_EncryptWithSessionKey(This,nAlgIdEncrypt,nAlgIdHash,bstrInput,pbstrOutput)	\
    ( (This)->lpVtbl -> EncryptWithSessionKey(This,nAlgIdEncrypt,nAlgIdHash,bstrInput,pbstrOutput) ) 

#define IRPSTicket2_DecryptWithSessionKey(This,nAlgIdEncrypt,nAlgIdHash,bstrInput,pbstrOutput)	\
    ( (This)->lpVtbl -> DecryptWithSessionKey(This,nAlgIdEncrypt,nAlgIdHash,bstrInput,pbstrOutput) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IRPSTicket2_INTERFACE_DEFINED__ */


#ifndef __IRPSSessionTokenGen_INTERFACE_DEFINED__
#define __IRPSSessionTokenGen_INTERFACE_DEFINED__

/* interface IRPSSessionTokenGen */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IRPSSessionTokenGen;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0173274e-d1a2-11d7-99eb-505054503030")
    IRPSSessionTokenGen : public IDispatch
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GenerateToken( 
            /* [in] */ BSTR siteName,
            /* [in] */ DWORD tokenType,
            /* [in] */ IRPSTicket *pTicket,
            /* [retval][out] */ BSTR *pSessionToken) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Generate2Tokens( 
            /* [in] */ BSTR siteName,
            /* [in] */ IRPSTicket *pTicket,
            /* [out] */ BSTR *pNonSecureToken,
            /* [out] */ BSTR *pSecureToken) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Generate2TokensBySchema( 
            /* [in] */ BSTR siteName,
            /* [in] */ DWORD dwCookieSchema,
            /* [in] */ IRPSTicket *pTicket,
            /* [out] */ BSTR *pNonSecureToken,
            /* [out] */ BSTR *pSecureToken) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRPSSessionTokenGenVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRPSSessionTokenGen * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRPSSessionTokenGen * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRPSSessionTokenGen * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IRPSSessionTokenGen * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IRPSSessionTokenGen * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IRPSSessionTokenGen * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IRPSSessionTokenGen * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GenerateToken )( 
            IRPSSessionTokenGen * This,
            /* [in] */ BSTR siteName,
            /* [in] */ DWORD tokenType,
            /* [in] */ IRPSTicket *pTicket,
            /* [retval][out] */ BSTR *pSessionToken);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Generate2Tokens )( 
            IRPSSessionTokenGen * This,
            /* [in] */ BSTR siteName,
            /* [in] */ IRPSTicket *pTicket,
            /* [out] */ BSTR *pNonSecureToken,
            /* [out] */ BSTR *pSecureToken);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Generate2TokensBySchema )( 
            IRPSSessionTokenGen * This,
            /* [in] */ BSTR siteName,
            /* [in] */ DWORD dwCookieSchema,
            /* [in] */ IRPSTicket *pTicket,
            /* [out] */ BSTR *pNonSecureToken,
            /* [out] */ BSTR *pSecureToken);
        
        END_INTERFACE
    } IRPSSessionTokenGenVtbl;

    interface IRPSSessionTokenGen
    {
        CONST_VTBL struct IRPSSessionTokenGenVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRPSSessionTokenGen_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IRPSSessionTokenGen_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IRPSSessionTokenGen_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IRPSSessionTokenGen_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IRPSSessionTokenGen_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IRPSSessionTokenGen_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IRPSSessionTokenGen_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IRPSSessionTokenGen_GenerateToken(This,siteName,tokenType,pTicket,pSessionToken)	\
    ( (This)->lpVtbl -> GenerateToken(This,siteName,tokenType,pTicket,pSessionToken) ) 

#define IRPSSessionTokenGen_Generate2Tokens(This,siteName,pTicket,pNonSecureToken,pSecureToken)	\
    ( (This)->lpVtbl -> Generate2Tokens(This,siteName,pTicket,pNonSecureToken,pSecureToken) ) 

#define IRPSSessionTokenGen_Generate2TokensBySchema(This,siteName,dwCookieSchema,pTicket,pNonSecureToken,pSecureToken)	\
    ( (This)->lpVtbl -> Generate2TokensBySchema(This,siteName,dwCookieSchema,pTicket,pNonSecureToken,pSecureToken) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IRPSSessionTokenGen_INTERFACE_DEFINED__ */


#ifndef __IRPSAuth_INTERFACE_DEFINED__
#define __IRPSAuth_INTERFACE_DEFINED__

/* interface IRPSAuth */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IRPSAuth;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0173274f-d1a2-11d7-99eb-505054503030")
    IRPSAuth : public IDispatch
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Authenticate( 
            /* [in] */ BSTR siteName,
            /* [in] */ BSTR ticketToken,
            /* [in] */ DWORD ticketType,
            /* [in] */ IDispatch *propBagForSessionTokens,
            /* [retval][out] */ IDispatch **ppTicket) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE VerifyAssertion( 
            /* [in] */ BSTR cert,
            /* [out][in] */ DWORD *pdwTTL,
            /* [in] */ BSTR bstrPOPBytes,
            /* [out] */ BSTR *pCACert) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRPSAuthVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRPSAuth * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRPSAuth * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRPSAuth * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IRPSAuth * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IRPSAuth * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IRPSAuth * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IRPSAuth * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Authenticate )( 
            IRPSAuth * This,
            /* [in] */ BSTR siteName,
            /* [in] */ BSTR ticketToken,
            /* [in] */ DWORD ticketType,
            /* [in] */ IDispatch *propBagForSessionTokens,
            /* [retval][out] */ IDispatch **ppTicket);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *VerifyAssertion )( 
            IRPSAuth * This,
            /* [in] */ BSTR cert,
            /* [out][in] */ DWORD *pdwTTL,
            /* [in] */ BSTR bstrPOPBytes,
            /* [out] */ BSTR *pCACert);
        
        END_INTERFACE
    } IRPSAuthVtbl;

    interface IRPSAuth
    {
        CONST_VTBL struct IRPSAuthVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRPSAuth_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IRPSAuth_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IRPSAuth_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IRPSAuth_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IRPSAuth_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IRPSAuth_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IRPSAuth_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IRPSAuth_Authenticate(This,siteName,ticketToken,ticketType,propBagForSessionTokens,ppTicket)	\
    ( (This)->lpVtbl -> Authenticate(This,siteName,ticketToken,ticketType,propBagForSessionTokens,ppTicket) ) 

#define IRPSAuth_VerifyAssertion(This,cert,pdwTTL,bstrPOPBytes,pCACert)	\
    ( (This)->lpVtbl -> VerifyAssertion(This,cert,pdwTTL,bstrPOPBytes,pCACert) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IRPSAuth_INTERFACE_DEFINED__ */


#ifndef __IRPSEventLog_INTERFACE_DEFINED__
#define __IRPSEventLog_INTERFACE_DEFINED__

/* interface IRPSEventLog */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IRPSEventLog;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ed7db9c6-ec60-4f7d-9ce3-63bb1db53d42")
    IRPSEventLog : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Log( 
            /* [in] */ LPCWSTR pwszSourceName,
            /* [in] */ WORD wEventType,
            /* [in] */ WORD wCategory,
            /* [in] */ DWORD dwEventID,
            /* [in] */ LPCWSTR *ppwszEventStringsArray,
            /* [in] */ WORD wEventArrayStringCount) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRPSEventLogVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRPSEventLog * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRPSEventLog * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRPSEventLog * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Log )( 
            IRPSEventLog * This,
            /* [in] */ LPCWSTR pwszSourceName,
            /* [in] */ WORD wEventType,
            /* [in] */ WORD wCategory,
            /* [in] */ DWORD dwEventID,
            /* [in] */ LPCWSTR *ppwszEventStringsArray,
            /* [in] */ WORD wEventArrayStringCount);
        
        END_INTERFACE
    } IRPSEventLogVtbl;

    interface IRPSEventLog
    {
        CONST_VTBL struct IRPSEventLogVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRPSEventLog_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IRPSEventLog_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IRPSEventLog_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IRPSEventLog_Log(This,pwszSourceName,wEventType,wCategory,dwEventID,ppwszEventStringsArray,wEventArrayStringCount)	\
    ( (This)->lpVtbl -> Log(This,pwszSourceName,wEventType,wCategory,dwEventID,ppwszEventStringsArray,wEventArrayStringCount) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IRPSEventLog_INTERFACE_DEFINED__ */


#ifndef __IRPSHttpAuth_INTERFACE_DEFINED__
#define __IRPSHttpAuth_INTERFACE_DEFINED__

/* interface IRPSHttpAuth */
/* [unique][helpstring][dual][uuid][object] */ 

typedef /* [v1_enum] */ 
enum tagAUTH_STATE
    {	RPS_HASTICKET_NO	= 0,
	RPS_HASTICKET_YES	= 1,
	RPS_HASTICKET_MAYBE	= 2
    } 	AUTH_STATE;


EXTERN_C const IID IID_IRPSHttpAuth;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("01732750-d1a2-11d7-99eb-505054503030")
    IRPSHttpAuth : public IDispatch
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AuthenticateASP( 
            /* [in] */ BSTR siteName,
            /* [in] */ IDispatch *pRequest,
            /* [in] */ IDispatch *pAuthResultsBag,
            /* [retval][out] */ IDispatch **ppTicket) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AuthenticateECB( 
            /* [in] */ BSTR siteName,
            /* [in] */ BYTE *pECB,
            /* [in] */ IDispatch *pAuthResultsBag,
            /* [out] */ IRPSTicket **ppTicket) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AuthenticateRawHttp( 
            /* [in] */ BSTR siteName,
            /* [in] */ BSTR httpVerb,
            /* [in] */ BSTR path,
            /* [in] */ BSTR QS,
            /* [in] */ BSTR httpVersion,
            /* [in] */ VARIANT_BOOL bHTTPs,
            /* [in] */ BSTR httpHeaders,
            /* [in] */ BSTR httpBody,
            /* [in] */ IDispatch *pAuthResultsBag,
            /* [retval][out] */ IDispatch **ppTicket) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetLogoutHeaders( 
            /* [in] */ BSTR siteName,
            /* [retval][out] */ BSTR *pLogoutHeaders) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetTweenerChallengeHeader( 
            /* [in] */ BSTR siteName,
            /* [in] */ IDispatch *pParamBag,
            /* [retval][out] */ BSTR *pTweenerHeader) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE LogoTag( 
            /* [in] */ VARIANT_BOOL bLogin,
            /* [in] */ VARIANT_BOOL bSecure,
            /* [in] */ BSTR urlName,
            /* [in] */ BSTR domainName,
            /* [in] */ BSTR siteName,
            /* [in] */ IDispatch *pParamBag,
            /* [retval][out] */ BSTR *pLogoTagStr) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE WriteHeadersASP( 
            /* [in] */ IDispatch *pResponse,
            /* [in] */ BSTR headers) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE TextTag( 
            /* [in] */ VARIANT_BOOL bLogin,
            /* [in] */ VARIANT_BOOL bSecure,
            /* [in] */ BSTR urlName,
            /* [in] */ BSTR domainName,
            /* [in] */ BSTR siteName,
            /* [in] */ IDispatch *pParamBag,
            /* [retval][out] */ BSTR *pTextTagStr) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetLiveIDChallengeHeader( 
            /* [in] */ BSTR siteName,
            /* [in] */ IDispatch *pParamBag,
            /* [retval][out] */ BSTR *pLiveIDHeader) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRPSHttpAuthVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRPSHttpAuth * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRPSHttpAuth * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRPSHttpAuth * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IRPSHttpAuth * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IRPSHttpAuth * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IRPSHttpAuth * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IRPSHttpAuth * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AuthenticateASP )( 
            IRPSHttpAuth * This,
            /* [in] */ BSTR siteName,
            /* [in] */ IDispatch *pRequest,
            /* [in] */ IDispatch *pAuthResultsBag,
            /* [retval][out] */ IDispatch **ppTicket);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AuthenticateECB )( 
            IRPSHttpAuth * This,
            /* [in] */ BSTR siteName,
            /* [in] */ BYTE *pECB,
            /* [in] */ IDispatch *pAuthResultsBag,
            /* [out] */ IRPSTicket **ppTicket);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AuthenticateRawHttp )( 
            IRPSHttpAuth * This,
            /* [in] */ BSTR siteName,
            /* [in] */ BSTR httpVerb,
            /* [in] */ BSTR path,
            /* [in] */ BSTR QS,
            /* [in] */ BSTR httpVersion,
            /* [in] */ VARIANT_BOOL bHTTPs,
            /* [in] */ BSTR httpHeaders,
            /* [in] */ BSTR httpBody,
            /* [in] */ IDispatch *pAuthResultsBag,
            /* [retval][out] */ IDispatch **ppTicket);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetLogoutHeaders )( 
            IRPSHttpAuth * This,
            /* [in] */ BSTR siteName,
            /* [retval][out] */ BSTR *pLogoutHeaders);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetTweenerChallengeHeader )( 
            IRPSHttpAuth * This,
            /* [in] */ BSTR siteName,
            /* [in] */ IDispatch *pParamBag,
            /* [retval][out] */ BSTR *pTweenerHeader);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *LogoTag )( 
            IRPSHttpAuth * This,
            /* [in] */ VARIANT_BOOL bLogin,
            /* [in] */ VARIANT_BOOL bSecure,
            /* [in] */ BSTR urlName,
            /* [in] */ BSTR domainName,
            /* [in] */ BSTR siteName,
            /* [in] */ IDispatch *pParamBag,
            /* [retval][out] */ BSTR *pLogoTagStr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *WriteHeadersASP )( 
            IRPSHttpAuth * This,
            /* [in] */ IDispatch *pResponse,
            /* [in] */ BSTR headers);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *TextTag )( 
            IRPSHttpAuth * This,
            /* [in] */ VARIANT_BOOL bLogin,
            /* [in] */ VARIANT_BOOL bSecure,
            /* [in] */ BSTR urlName,
            /* [in] */ BSTR domainName,
            /* [in] */ BSTR siteName,
            /* [in] */ IDispatch *pParamBag,
            /* [retval][out] */ BSTR *pTextTagStr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetLiveIDChallengeHeader )( 
            IRPSHttpAuth * This,
            /* [in] */ BSTR siteName,
            /* [in] */ IDispatch *pParamBag,
            /* [retval][out] */ BSTR *pLiveIDHeader);
        
        END_INTERFACE
    } IRPSHttpAuthVtbl;

    interface IRPSHttpAuth
    {
        CONST_VTBL struct IRPSHttpAuthVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRPSHttpAuth_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IRPSHttpAuth_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IRPSHttpAuth_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IRPSHttpAuth_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IRPSHttpAuth_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IRPSHttpAuth_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IRPSHttpAuth_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IRPSHttpAuth_AuthenticateASP(This,siteName,pRequest,pAuthResultsBag,ppTicket)	\
    ( (This)->lpVtbl -> AuthenticateASP(This,siteName,pRequest,pAuthResultsBag,ppTicket) ) 

#define IRPSHttpAuth_AuthenticateECB(This,siteName,pECB,pAuthResultsBag,ppTicket)	\
    ( (This)->lpVtbl -> AuthenticateECB(This,siteName,pECB,pAuthResultsBag,ppTicket) ) 

#define IRPSHttpAuth_AuthenticateRawHttp(This,siteName,httpVerb,path,QS,httpVersion,bHTTPs,httpHeaders,httpBody,pAuthResultsBag,ppTicket)	\
    ( (This)->lpVtbl -> AuthenticateRawHttp(This,siteName,httpVerb,path,QS,httpVersion,bHTTPs,httpHeaders,httpBody,pAuthResultsBag,ppTicket) ) 

#define IRPSHttpAuth_GetLogoutHeaders(This,siteName,pLogoutHeaders)	\
    ( (This)->lpVtbl -> GetLogoutHeaders(This,siteName,pLogoutHeaders) ) 

#define IRPSHttpAuth_GetTweenerChallengeHeader(This,siteName,pParamBag,pTweenerHeader)	\
    ( (This)->lpVtbl -> GetTweenerChallengeHeader(This,siteName,pParamBag,pTweenerHeader) ) 

#define IRPSHttpAuth_LogoTag(This,bLogin,bSecure,urlName,domainName,siteName,pParamBag,pLogoTagStr)	\
    ( (This)->lpVtbl -> LogoTag(This,bLogin,bSecure,urlName,domainName,siteName,pParamBag,pLogoTagStr) ) 

#define IRPSHttpAuth_WriteHeadersASP(This,pResponse,headers)	\
    ( (This)->lpVtbl -> WriteHeadersASP(This,pResponse,headers) ) 

#define IRPSHttpAuth_TextTag(This,bLogin,bSecure,urlName,domainName,siteName,pParamBag,pTextTagStr)	\
    ( (This)->lpVtbl -> TextTag(This,bLogin,bSecure,urlName,domainName,siteName,pParamBag,pTextTagStr) ) 

#define IRPSHttpAuth_GetLiveIDChallengeHeader(This,siteName,pParamBag,pLiveIDHeader)	\
    ( (This)->lpVtbl -> GetLiveIDChallengeHeader(This,siteName,pParamBag,pLiveIDHeader) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IRPSHttpAuth_INTERFACE_DEFINED__ */


#ifndef __IRPSApplicationAuth_INTERFACE_DEFINED__
#define __IRPSApplicationAuth_INTERFACE_DEFINED__

/* interface IRPSApplicationAuth */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IRPSApplicationAuth;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("d6e102b7-8db5-448c-8f02-3f8404324497")
    IRPSApplicationAuth : public IDispatch
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Authenticate( 
            /* [in] */ BSTR siteName,
            /* [in] */ BSTR ticketToken,
            /* [in] */ DWORD TicketType,
            /* [in] */ IDispatch *pAuthResultsBag,
            /* [retval][out] */ IDispatch **ppTicket) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRPSApplicationAuthVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRPSApplicationAuth * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRPSApplicationAuth * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRPSApplicationAuth * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IRPSApplicationAuth * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IRPSApplicationAuth * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IRPSApplicationAuth * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IRPSApplicationAuth * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Authenticate )( 
            IRPSApplicationAuth * This,
            /* [in] */ BSTR siteName,
            /* [in] */ BSTR ticketToken,
            /* [in] */ DWORD TicketType,
            /* [in] */ IDispatch *pAuthResultsBag,
            /* [retval][out] */ IDispatch **ppTicket);
        
        END_INTERFACE
    } IRPSApplicationAuthVtbl;

    interface IRPSApplicationAuth
    {
        CONST_VTBL struct IRPSApplicationAuthVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRPSApplicationAuth_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IRPSApplicationAuth_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IRPSApplicationAuth_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IRPSApplicationAuth_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IRPSApplicationAuth_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IRPSApplicationAuth_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IRPSApplicationAuth_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IRPSApplicationAuth_Authenticate(This,siteName,ticketToken,TicketType,pAuthResultsBag,ppTicket)	\
    ( (This)->lpVtbl -> Authenticate(This,siteName,ticketToken,TicketType,pAuthResultsBag,ppTicket) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IRPSApplicationAuth_INTERFACE_DEFINED__ */


#ifndef __IRPSApplicationAuth2_INTERFACE_DEFINED__
#define __IRPSApplicationAuth2_INTERFACE_DEFINED__

/* interface IRPSApplicationAuth2 */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IRPSApplicationAuth2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1B3ADE62-1CB1-4162-A365-406A37A5AA3A")
    IRPSApplicationAuth2 : public IRPSApplicationAuth
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ValidateConsent( 
            /* [in] */ BSTR siteName,
            /* [in] */ BSTR ticketToken,
            /* [in] */ DWORD ticketType,
            /* [in] */ VARIANT offerActions,
            /* [out] */ VARIANT *pisgranular,
            /* [out] */ VARIANT *pcontexts,
            /* [out] */ VARIANT *pconsents,
            /* [retval][out] */ IDispatch **ppTicket) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetThrottlingInfo( 
            /* [retval][out] */ BSTR *pthrottlingInfo) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRPSApplicationAuth2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRPSApplicationAuth2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRPSApplicationAuth2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRPSApplicationAuth2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IRPSApplicationAuth2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IRPSApplicationAuth2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IRPSApplicationAuth2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IRPSApplicationAuth2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Authenticate )( 
            IRPSApplicationAuth2 * This,
            /* [in] */ BSTR siteName,
            /* [in] */ BSTR ticketToken,
            /* [in] */ DWORD TicketType,
            /* [in] */ IDispatch *pAuthResultsBag,
            /* [retval][out] */ IDispatch **ppTicket);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ValidateConsent )( 
            IRPSApplicationAuth2 * This,
            /* [in] */ BSTR siteName,
            /* [in] */ BSTR ticketToken,
            /* [in] */ DWORD ticketType,
            /* [in] */ VARIANT offerActions,
            /* [out] */ VARIANT *pisgranular,
            /* [out] */ VARIANT *pcontexts,
            /* [out] */ VARIANT *pconsents,
            /* [retval][out] */ IDispatch **ppTicket);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetThrottlingInfo )( 
            IRPSApplicationAuth2 * This,
            /* [retval][out] */ BSTR *pthrottlingInfo);
        
        END_INTERFACE
    } IRPSApplicationAuth2Vtbl;

    interface IRPSApplicationAuth2
    {
        CONST_VTBL struct IRPSApplicationAuth2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRPSApplicationAuth2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IRPSApplicationAuth2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IRPSApplicationAuth2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IRPSApplicationAuth2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IRPSApplicationAuth2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IRPSApplicationAuth2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IRPSApplicationAuth2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IRPSApplicationAuth2_Authenticate(This,siteName,ticketToken,TicketType,pAuthResultsBag,ppTicket)	\
    ( (This)->lpVtbl -> Authenticate(This,siteName,ticketToken,TicketType,pAuthResultsBag,ppTicket) ) 


#define IRPSApplicationAuth2_ValidateConsent(This,siteName,ticketToken,ticketType,offerActions,pisgranular,pcontexts,pconsents,ppTicket)	\
    ( (This)->lpVtbl -> ValidateConsent(This,siteName,ticketToken,ticketType,offerActions,pisgranular,pcontexts,pconsents,ppTicket) ) 

#define IRPSApplicationAuth2_GetThrottlingInfo(This,pthrottlingInfo)	\
    ( (This)->lpVtbl -> GetThrottlingInfo(This,pthrottlingInfo) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IRPSApplicationAuth2_INTERFACE_DEFINED__ */


#ifndef __IRPSConfigInfo_INTERFACE_DEFINED__
#define __IRPSConfigInfo_INTERFACE_DEFINED__

/* interface IRPSConfigInfo */
/* [unique][helpstring][nonextensible][oleautomation][uuid][object] */ 


EXTERN_C const IID IID_IRPSConfigInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("35B6CEB7-402F-4564-A3DF-D244758870AD")
    IRPSConfigInfo : public IUnknown
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GetConfigDirectory( 
            /* [out] */ BSTR *bstrConfigDirectory) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRPSConfigInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRPSConfigInfo * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRPSConfigInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRPSConfigInfo * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GetConfigDirectory )( 
            IRPSConfigInfo * This,
            /* [out] */ BSTR *bstrConfigDirectory);
        
        END_INTERFACE
    } IRPSConfigInfoVtbl;

    interface IRPSConfigInfo
    {
        CONST_VTBL struct IRPSConfigInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRPSConfigInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IRPSConfigInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IRPSConfigInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IRPSConfigInfo_GetConfigDirectory(This,bstrConfigDirectory)	\
    ( (This)->lpVtbl -> GetConfigDirectory(This,bstrConfigDirectory) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IRPSConfigInfo_INTERFACE_DEFINED__ */


#ifndef __IRPSSSPIAuth_INTERFACE_DEFINED__
#define __IRPSSSPIAuth_INTERFACE_DEFINED__

/* interface IRPSSSPIAuth */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IRPSSSPIAuth;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a7ad1e88-6b4a-4163-9db2-370b5f3f983b")
    IRPSSSPIAuth : public IDispatch
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE NegoAuthenticate( 
            /* [in] */ BSTR bstrSiteName,
            /* [in] */ BSTR bstrAuthPolicy,
            /* [in] */ DWORD dwFlags,
            /* [in] */ BSTR bstrADDomainName,
            /* [in] */ BSTR bstrNegotokenInit,
            /* [in] */ DWORD dwSspToUse,
            /* [out][in] */ BSTR *pbstrNegotokenTarget,
            /* [out] */ __int64 *pErrorCode,
            /* [out] */ BSTR *pXmlProfileBag,
            /* [out] */ unsigned __int64 *pllOutputFlags,
            /* [out] */ HANDLE *phImpersonationHandle) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Authenticate( 
            /* [in] */ BSTR bstrSiteName,
            /* [in] */ BSTR bstrAuthPolicy,
            /* [in] */ DWORD dwFlags,
            /* [in] */ BSTR bstrADDomainName,
            /* [in] */ DWORD dwTokenType,
            /* [in] */ BSTR wszToken,
            /* [out] */ __int64 *pErrorCode,
            /* [out] */ BSTR *pXmlProfileBag,
            /* [out] */ unsigned __int64 *pllOutputFlags,
            /* [out] */ HANDLE *phImpersonationHandle) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRPSSSPIAuthVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRPSSSPIAuth * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRPSSSPIAuth * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRPSSSPIAuth * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IRPSSSPIAuth * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IRPSSSPIAuth * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IRPSSSPIAuth * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IRPSSSPIAuth * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *NegoAuthenticate )( 
            IRPSSSPIAuth * This,
            /* [in] */ BSTR bstrSiteName,
            /* [in] */ BSTR bstrAuthPolicy,
            /* [in] */ DWORD dwFlags,
            /* [in] */ BSTR bstrADDomainName,
            /* [in] */ BSTR bstrNegotokenInit,
            /* [in] */ DWORD dwSspToUse,
            /* [out][in] */ BSTR *pbstrNegotokenTarget,
            /* [out] */ __int64 *pErrorCode,
            /* [out] */ BSTR *pXmlProfileBag,
            /* [out] */ unsigned __int64 *pllOutputFlags,
            /* [out] */ HANDLE *phImpersonationHandle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Authenticate )( 
            IRPSSSPIAuth * This,
            /* [in] */ BSTR bstrSiteName,
            /* [in] */ BSTR bstrAuthPolicy,
            /* [in] */ DWORD dwFlags,
            /* [in] */ BSTR bstrADDomainName,
            /* [in] */ DWORD dwTokenType,
            /* [in] */ BSTR wszToken,
            /* [out] */ __int64 *pErrorCode,
            /* [out] */ BSTR *pXmlProfileBag,
            /* [out] */ unsigned __int64 *pllOutputFlags,
            /* [out] */ HANDLE *phImpersonationHandle);
        
        END_INTERFACE
    } IRPSSSPIAuthVtbl;

    interface IRPSSSPIAuth
    {
        CONST_VTBL struct IRPSSSPIAuthVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRPSSSPIAuth_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IRPSSSPIAuth_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IRPSSSPIAuth_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IRPSSSPIAuth_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IRPSSSPIAuth_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IRPSSSPIAuth_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IRPSSSPIAuth_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IRPSSSPIAuth_NegoAuthenticate(This,bstrSiteName,bstrAuthPolicy,dwFlags,bstrADDomainName,bstrNegotokenInit,dwSspToUse,pbstrNegotokenTarget,pErrorCode,pXmlProfileBag,pllOutputFlags,phImpersonationHandle)	\
    ( (This)->lpVtbl -> NegoAuthenticate(This,bstrSiteName,bstrAuthPolicy,dwFlags,bstrADDomainName,bstrNegotokenInit,dwSspToUse,pbstrNegotokenTarget,pErrorCode,pXmlProfileBag,pllOutputFlags,phImpersonationHandle) ) 

#define IRPSSSPIAuth_Authenticate(This,bstrSiteName,bstrAuthPolicy,dwFlags,bstrADDomainName,dwTokenType,wszToken,pErrorCode,pXmlProfileBag,pllOutputFlags,phImpersonationHandle)	\
    ( (This)->lpVtbl -> Authenticate(This,bstrSiteName,bstrAuthPolicy,dwFlags,bstrADDomainName,dwTokenType,wszToken,pErrorCode,pXmlProfileBag,pllOutputFlags,phImpersonationHandle) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IRPSSSPIAuth_INTERFACE_DEFINED__ */



#ifndef __RPS_LIBRARY_DEFINED__
#define __RPS_LIBRARY_DEFINED__

/* library RPS */
/* [helpstring][version][uuid] */ 
















EXTERN_C const IID LIBID_RPS;

EXTERN_C const CLSID CLSID_RPS;

#ifdef __cplusplus

class DECLSPEC_UUID("01732742-d1a2-11d7-99eb-505054503030")
RPS;
#endif

EXTERN_C const CLSID CLSID_RPSConfigInfo;

#ifdef __cplusplus

class DECLSPEC_UUID("DC6EF879-37CE-44E3-8837-5C79D8842832")
RPSConfigInfo;
#endif
#endif /* __RPS_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR * ); 
void                      __RPC_USER  BSTR_UserFree(     unsigned long *, BSTR * ); 

unsigned long             __RPC_USER  VARIANT_UserSize(     unsigned long *, unsigned long            , VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserMarshal(  unsigned long *, unsigned char *, VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserUnmarshal(unsigned long *, unsigned char *, VARIANT * ); 
void                      __RPC_USER  VARIANT_UserFree(     unsigned long *, VARIANT * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\PassportRPS\6.2\inc\rps_i.c ===
/* this ALWAYS GENERATED file contains the IIDs and CLSIDs */

/* link this file in with the server and any clients */


 /* File created by MIDL compiler version 7.00.0486 */
/* Compiler settings for rps.idl:
    Oicf, W1, Zp8, env=Win64 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#pragma warning( disable: 4049 )  /* more than 64k source lines */


#ifdef __cplusplus
extern "C"{
#endif 


#include <rpc.h>
#include <rpcndr.h>

#ifdef _MIDL_USE_GUIDDEF_

#ifndef INITGUID
#define INITGUID
#include <guiddef.h>
#undef INITGUID
#else
#include <guiddef.h>
#endif

#define MIDL_DEFINE_GUID(type,name,l,w1,w2,b1,b2,b3,b4,b5,b6,b7,b8) \
        DEFINE_GUID(name,l,w1,w2,b1,b2,b3,b4,b5,b6,b7,b8)

#else // !_MIDL_USE_GUIDDEF_

#ifndef __IID_DEFINED__
#define __IID_DEFINED__

typedef struct _IID
{
    unsigned long x;
    unsigned short s1;
    unsigned short s2;
    unsigned char  c[8];
} IID;

#endif // __IID_DEFINED__

#ifndef CLSID_DEFINED
#define CLSID_DEFINED
typedef IID CLSID;
#endif // CLSID_DEFINED

#define MIDL_DEFINE_GUID(type,name,l,w1,w2,b1,b2,b3,b4,b5,b6,b7,b8) \
        const type name = {l,w1,w2,{b1,b2,b3,b4,b5,b6,b7,b8}}

#endif !_MIDL_USE_GUIDDEF_

MIDL_DEFINE_GUID(IID, IID_IRPS,0x01732744,0xd1a2,0x11d7,0x99,0xeb,0x50,0x50,0x54,0x50,0x30,0x30);


MIDL_DEFINE_GUID(IID, IID_IRPSNotify,0x01732745,0xd1a2,0x11d7,0x99,0xeb,0x50,0x50,0x54,0x50,0x30,0x30);


MIDL_DEFINE_GUID(IID, IID_IRPSComponent,0x01732746,0xd1a2,0x11d7,0x99,0xeb,0x50,0x50,0x54,0x50,0x30,0x30);


MIDL_DEFINE_GUID(IID, IID__IRPSPropBagEnum,0x01732751,0xd1a2,0x11d7,0x99,0xeb,0x50,0x50,0x54,0x50,0x30,0x30);


MIDL_DEFINE_GUID(IID, IID_IRPSPropBag,0x01732747,0xd1a2,0x11d7,0x99,0xeb,0x50,0x50,0x54,0x50,0x30,0x30);


MIDL_DEFINE_GUID(IID, IID_IRPSDomainMap,0x01732748,0xd1a2,0x11d7,0x99,0xeb,0x50,0x50,0x54,0x50,0x30,0x30);


MIDL_DEFINE_GUID(IID, IID_IRPSPKCrypt,0x01732749,0xd1a2,0x11d7,0x99,0xeb,0x50,0x50,0x54,0x50,0x30,0x30);


MIDL_DEFINE_GUID(IID, IID_IRPSCookieCrypt,0x0173274a,0xd1a2,0x11d7,0x99,0xeb,0x50,0x50,0x54,0x50,0x30,0x30);


MIDL_DEFINE_GUID(IID, IID_IRPSSiteCrypt,0x7aeafa0c,0xce51,0x4c3d,0x8d,0xe5,0x3a,0x09,0xff,0x37,0xd4,0xa5);


MIDL_DEFINE_GUID(IID, IID_IRPSDataCrypt_P,0x0173274c,0xd1a2,0x11d7,0x99,0xeb,0x50,0x50,0x54,0x50,0x30,0x30);


MIDL_DEFINE_GUID(IID, IID_IRPSPackData,0x01732752,0xd1a2,0x11d7,0x99,0xeb,0x50,0x50,0x54,0x50,0x30,0x30);


MIDL_DEFINE_GUID(IID, IID_IRPSTicket,0x0173274d,0xd1a2,0x11d7,0x99,0xeb,0x50,0x50,0x54,0x50,0x30,0x30);


MIDL_DEFINE_GUID(IID, IID_IRPSTicket2,0x86844cae,0x6483,0x480e,0x81,0x1a,0xfe,0x67,0xb9,0x84,0x6f,0x4d);


MIDL_DEFINE_GUID(IID, IID_IRPSSessionTokenGen,0x0173274e,0xd1a2,0x11d7,0x99,0xeb,0x50,0x50,0x54,0x50,0x30,0x30);


MIDL_DEFINE_GUID(IID, IID_IRPSAuth,0x0173274f,0xd1a2,0x11d7,0x99,0xeb,0x50,0x50,0x54,0x50,0x30,0x30);


MIDL_DEFINE_GUID(IID, IID_IRPSEventLog,0xed7db9c6,0xec60,0x4f7d,0x9c,0xe3,0x63,0xbb,0x1d,0xb5,0x3d,0x42);


MIDL_DEFINE_GUID(IID, IID_IRPSHttpAuth,0x01732750,0xd1a2,0x11d7,0x99,0xeb,0x50,0x50,0x54,0x50,0x30,0x30);


MIDL_DEFINE_GUID(IID, IID_IRPSApplicationAuth,0xd6e102b7,0x8db5,0x448c,0x8f,0x02,0x3f,0x84,0x04,0x32,0x44,0x97);


MIDL_DEFINE_GUID(IID, IID_IRPSApplicationAuth2,0x1B3ADE62,0x1CB1,0x4162,0xA3,0x65,0x40,0x6A,0x37,0xA5,0xAA,0x3A);


MIDL_DEFINE_GUID(IID, IID_IRPSConfigInfo,0x35B6CEB7,0x402F,0x4564,0xA3,0xDF,0xD2,0x44,0x75,0x88,0x70,0xAD);


MIDL_DEFINE_GUID(IID, IID_IRPSSSPIAuth,0xa7ad1e88,0x6b4a,0x4163,0x9d,0xb2,0x37,0x0b,0x5f,0x3f,0x98,0x3b);


MIDL_DEFINE_GUID(IID, LIBID_RPS,0x01732743,0xd1a2,0x11d7,0x99,0xeb,0x50,0x50,0x54,0x50,0x30,0x30);


MIDL_DEFINE_GUID(CLSID, CLSID_RPS,0x01732742,0xd1a2,0x11d7,0x99,0xeb,0x50,0x50,0x54,0x50,0x30,0x30);


MIDL_DEFINE_GUID(CLSID, CLSID_RPSConfigInfo,0xDC6EF879,0x37CE,0x44E3,0x88,0x37,0x5C,0x79,0xD8,0x84,0x28,0x32);

#undef MIDL_DEFINE_GUID

#ifdef __cplusplus
}
#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\SCS\4.0\inc\bdkerror.h ===
#ifndef __bdkerror_h__
#define __bdkerror_h__

//
//  Values are 32 bit values layed out as follows:
//
//   3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1
//   1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
//  +---+-+-+-----------------------+-------------------------------+
//  |Sev|C|R|     Facility          |               Code            |
//  +---+-+-+-----------------------+-------------------------------+
//
//  where
//
//      Sev - is the severity code
//
//          00 - Success
//          01 - Informational
//          10 - Warning
//          11 - Error
//
//      C - is the Customer code flag
//
//      R - is a reserved bit
//
//      Facility - is the facility code
//
//      Code - is the facility's status code
//
//
// Define the facility codes
//


//
// Define the severity codes
//


//
// MessageId: BDK_E_BAN_NULL_INPUT_PARAMETER
//
// MessageText:
//
//  Null input parameter passed to a "ban" API.
//
#define BDK_E_BAN_NULL_INPUT_PARAMETER   ((HRESULT)0x80047594L)


//
// MessageId: BDK_E_ALREADY_BANNED
//
// MessageText:
//
//  Already banned.
//
#define BDK_E_ALREADY_BANNED             ((HRESULT)0x80047599L)


//
// MessageId: BDK_E_NOT_BANNED
//
// MessageText:
//
//  Not banned.
//
#define BDK_E_NOT_BANNED                 ((HRESULT)0x8004759EL)


//
// MessageId: BDK_E_BANNEDPERSON
//
// MessageText:
//
//  This account is banned.
//
#define BDK_E_BANNEDPERSON               ((HRESULT)0x800475BCL)


//
// MessageId: BDK_E_COUNTRY_CURRENCY_PI_MISMATCH
//
// MessageText:
//
//  Country/currency/payment instrument type mismatch.
//
#define BDK_E_COUNTRY_CURRENCY_PI_MISMATCH ((HRESULT)0x800475C1L)


//
// MessageId: BDK_E_INVALID_PAYMENT_INSTRUMENT_TYPE
//
// MessageText:
//
//  Invalid payment instrument type.
//
#define BDK_E_INVALID_PAYMENT_INSTRUMENT_TYPE ((HRESULT)0x800475C8L)


//
// MessageId: BDK_E_INVALID_CREDIT_CARD_TYPE
//
// MessageText:
//
//  Invalid credit card type.
//
#define BDK_E_INVALID_CREDIT_CARD_TYPE   ((HRESULT)0x800475CBL)


//
// MessageId: BDK_E_DECRYPTION_FAILURE
//
// MessageText:
//
//  Decryption failed. Verify that data is encrypted correctly.
//
#define BDK_E_DECRYPTION_FAILURE         ((HRESULT)0x800475D0L)


//
// MessageId: BDK_E_BANNED_PAYMENT_INSTRUMENT
//
// MessageText:
//
//  Payment instrument is banned.
//
#define BDK_E_BANNED_PAYMENT_INSTRUMENT  ((HRESULT)0x800475C6L)


//
// MessageId: BDK_E_INVALID_DD_ACCOUNT
//
// MessageText:
//
//  Direct debit account validation failed.
//
#define BDK_E_INVALID_DD_ACCOUNT         ((HRESULT)0x800475E4L)


//
// MessageId: BDK_E_DD_CONCATENATED_STRING_LENGTH_EXCEEDS_24
//
// MessageText:
//
//  Concatenated direct debit account number exceeds 24 characters.
//
#define BDK_E_DD_CONCATENATED_STRING_LENGTH_EXCEEDS_24 ((HRESULT)0x800475E9L)


//
// MessageId: BDK_E_INVALID_CREDIT_CARD_NUMBER
//
// MessageText:
//
//  Invalid credit card number.
//
#define BDK_E_INVALID_CREDIT_CARD_NUMBER ((HRESULT)0x80047530L)


//
// MessageId: BDK_E_CREDIT_CARD_EXPIRED
//
// MessageText:
//
//  Credit card has already expired.
//
#define BDK_E_CREDIT_CARD_EXPIRED        ((HRESULT)0x80047531L)


//
// MessageId: BDK_E_AVS_FAILED
//
// MessageText:
//
//  Address verification failed.
//
#define BDK_E_AVS_FAILED                 ((HRESULT)0x8004760CL)


//
// MessageId: BDK_E_NO_AVS_RESULT
//
// MessageText:
//
//  Address verification through AVS did not provide a result.
//
#define BDK_E_NO_AVS_RESULT              ((HRESULT)0x8004760DL)


//
// MessageId: BDK_E_AUTHORIZATION_FAILED
//
// MessageText:
//
//  Credit card authorization failed.
//
#define BDK_E_AUTHORIZATION_FAILED       ((HRESULT)0x80047611L)


//
// MessageId: BDK_E_PAYMENT_PROVIDER_CONNECTION_FAILED
//
// MessageText:
//
//  Unable to connect to payment provider.
//
#define BDK_E_PAYMENT_PROVIDER_CONNECTION_FAILED ((HRESULT)0x8004761BL)


//
// MessageId: BDK_E_DD_INVALID_COUNTRY
//
// MessageText:
//
//  Invalid country code.
//
#define BDK_E_DD_INVALID_COUNTRY         ((HRESULT)0x8004762FL)


//
// MessageId: BDK_E_DD_INVALID_ACCOUNT_FORMAT
//
// MessageText:
//
//  Invalid account format.
//
#define BDK_E_DD_INVALID_ACCOUNT_FORMAT  ((HRESULT)0x80047634L)


//
// MessageId: BDK_E_DD_INVALID_BANKCODE_FORMAT
//
// MessageText:
//
//  Invalid bank code format.
//
#define BDK_E_DD_INVALID_BANKCODE_FORMAT ((HRESULT)0x80047639L)


//
// MessageId: BDK_E_DD_INVALID_BRANCHCODE_FORMAT
//
// MessageText:
//
//  Invalid branch code format.
//
#define BDK_E_DD_INVALID_BRANCHCODE_FORMAT ((HRESULT)0x8004763EL)


//
// MessageId: BDK_E_DD_INVALID_CHECKDIGIT_FORMAT
//
// MessageText:
//
//  Invalid check digit format.
//
#define BDK_E_DD_INVALID_CHECKDIGIT_FORMAT ((HRESULT)0x80047643L)


//
// MessageId: BDK_E_DD_ACCOUNT_MISSING
//
// MessageText:
//
//  Account missing.
//
#define BDK_E_DD_ACCOUNT_MISSING         ((HRESULT)0x80047648L)


//
// MessageId: BDK_E_DD_BANKCODE_MISSING
//
// MessageText:
//
//  Bank code missing.
//
#define BDK_E_DD_BANKCODE_MISSING        ((HRESULT)0x8004764DL)


//
// MessageId: BDK_E_DD_BRANCHCODE_MISSING
//
// MessageText:
//
//  Branch code missing.
//
#define BDK_E_DD_BRANCHCODE_MISSING      ((HRESULT)0x80047652L)


//
// MessageId: BDK_E_DD_CHECKDIGIT_MISSING
//
// MessageText:
//
//  Check digit missing.
//
#define BDK_E_DD_CHECKDIGIT_MISSING      ((HRESULT)0x80047657L)


//
// MessageId: BDK_E_DD_ERROR_IN_FIELDS
//
// MessageText:
//
//  Some fields have errors.
//
#define BDK_E_DD_ERROR_IN_FIELDS         ((HRESULT)0x8004765CL)


//
// MessageId: BDK_E_DD_INVALID_ACCOUNT_VALUE
//
// MessageText:
//
//  Invalid account code.
//
#define BDK_E_DD_INVALID_ACCOUNT_VALUE   ((HRESULT)0x80047661L)


//
// MessageId: BDK_E_DD_INVALID_BANKCODE_VALUE
//
// MessageText:
//
//  Invalid bank code.
//
#define BDK_E_DD_INVALID_BANKCODE_VALUE  ((HRESULT)0x80047666L)


//
// MessageId: BDK_E_DD_INVALID_BRANCHCODE_VALUE
//
// MessageText:
//
//  Invalid branch code.
//
#define BDK_E_DD_INVALID_BRANCHCODE_VALUE ((HRESULT)0x8004766BL)


//
// MessageId: BDK_E_DD_INVALID_CHECKDIGIT_VALUE
//
// MessageText:
//
//  Invalid check digit.
//
#define BDK_E_DD_INVALID_CHECKDIGIT_VALUE ((HRESULT)0x80047670L)


//
// MessageId: BDK_E_DD_INVALID_ACCOUNT_HOLDER_NAME
//
// MessageText:
//
//  Account holder name not specified or it exceeds 35 characters.
//
#define BDK_E_DD_INVALID_ACCOUNT_HOLDER_NAME ((HRESULT)0x8004767AL)


//
// MessageId: BDK_E_PAYMENT_PROVIDER_CONNECTION_TIMEOUT
//
// MessageText:
//
//  Payment provider connection timed out.
//
#define BDK_E_PAYMENT_PROVIDER_CONNECTION_TIMEOUT ((HRESULT)0x8004767FL)


//
// MessageId: BDK_E_INVALID_WHOLESALE_PARTNER
//
// MessageText:
//
//  The wholesale partner specified is invalid.
//
#define BDK_E_INVALID_WHOLESALE_PARTNER  ((HRESULT)0x80047684L)


//
// MessageId: BDK_E_PI_NOT_SUPPORTED
//
// MessageText:
//
//  PI Not Supported in this version
//
#define BDK_E_PI_NOT_SUPPORTED           ((HRESULT)0x80047693L)


//
// MessageId: BDK_E_UPS_NOT_UPDATED
//
// MessageText:
//
//  A fatal error occured updating the UPS entries for all PUIDs relating to i_billable_acct_id %1. This account should be investigated and the UPS entries for PUIDs attached to it should be updated manually.
//
#define BDK_E_UPS_NOT_UPDATED            ((HRESULT)0x8004769DL)


//
// MessageId: BDK_E_DD_UNSUPPORTED
//
// MessageText:
//
//  This branch will not support Direct Debit transactions.
//
#define BDK_E_DD_UNSUPPORTED             ((HRESULT)0x800476A2L)


//
// MessageId: BDK_E_DD_MPF_NON_XML_RESPONSE
//
// MessageText:
//
//  Internal error, Return from MPF is not in XML format.
//
#define BDK_E_DD_MPF_NON_XML_RESPONSE    ((HRESULT)0x800476A7L)


//
// MessageId: BDK_E_DD_MPF_INCORRECT_XML_FORMAT
//
// MessageText:
//
//  Internal error, Return XML from MPF is not in correct format.
//
#define BDK_E_DD_MPF_INCORRECT_XML_FORMAT ((HRESULT)0x800476ACL)


//
// MessageId: BDK_E_DD_GC_NON_XML_RESPONSE
//
// MessageText:
//
//  Global Collect error, Return from Global Collect is not in XML format.
//
#define BDK_E_DD_GC_NON_XML_RESPONSE     ((HRESULT)0x800476B1L)


//
// MessageId: BDK_E_DD_GC_INCORRECT_XML_FORMAT
//
// MessageText:
//
//  Global Collect error, Return XML from Global Collect is not in correct format.
//
#define BDK_E_DD_GC_INCORRECT_XML_FORMAT ((HRESULT)0x800476B6L)


//
// MessageId: BDK_E_DD_GC_RETURNED_NOK_RESULT
//
// MessageText:
//
//  Global collect failed to process this request, returned NOT OK result.
//
#define BDK_E_DD_GC_RETURNED_NOK_RESULT  ((HRESULT)0x800476BBL)


//
// MessageId: BDK_E_DD_GC_CHECK_INCOMPLETE
//
// MessageText:
//
//  Direct Debit account Check performed by Global Collect is not complete for this account.
//
#define BDK_E_DD_GC_CHECK_INCOMPLETE     ((HRESULT)0x800476C0L)


//
// MessageId: BDK_E_DD_OPENING_GC_XML_CHECKSPERFORMED
//
// MessageText:
//
//  Global Collect error, Return XML from Global Collect is not in correct format. Error in CHECKSPERFORMED node of the return XML.
//
#define BDK_E_DD_OPENING_GC_XML_CHECKSPERFORMED ((HRESULT)0x800476C5L)


//
// MessageId: BDK_E_DD_GC_XML_INVALID_CHECK_RESULT
//
// MessageText:
//
//  Global Collect error, Return XML from Global Collect is not in correct format. Data within CHECKSPERFORMED nodes are invalid.
//
#define BDK_E_DD_GC_XML_INVALID_CHECK_RESULT ((HRESULT)0x800476CAL)


//
// MessageId: BDK_E_DD_GC_INVALID_RFBANKCODE
//
// MessageText:
//
//  Global collect returned non null Reformatted Bank Code though the input Bank code was blank.
//
#define BDK_E_DD_GC_INVALID_RFBANKCODE   ((HRESULT)0x800476CFL)


//
// MessageId: BDK_E_ALREADY_IN_SPECIFIED_STATE
//
// MessageText:
//
//  Object is already in the specified state.
//
#define BDK_E_ALREADY_IN_SPECIFIED_STATE ((HRESULT)0x80049C41L)


//
// MessageId: BDK_E_MISSING_SEARCH_CRITERIA
//
// MessageText:
//
//  Required search criteria field missing. Either a phone number or both first name and last name is required.
//
#define BDK_E_MISSING_SEARCH_CRITERIA    ((HRESULT)0x80049C44L)


//
// MessageId: BDK_E_REQUIRED_FIELD_MISSING
//
// MessageText:
//
//  Required field missing.
//
#define BDK_E_REQUIRED_FIELD_MISSING     ((HRESULT)0x80049C45L)


//
// MessageId: BDK_E_ACTIVE_SUBSCRIPTIONS
//
// MessageText:
//
//  The account has subscriptions.
//
#define BDK_E_ACTIVE_SUBSCRIPTIONS       ((HRESULT)0x80049C46L)


//
// MessageId: BDK_E_INVALID_ACCOUNT_SOUCE
//
// MessageText:
//
//  Invalid account source.
//
#define BDK_E_INVALID_ACCOUNT_SOUCE      ((HRESULT)0x80049C4DL)


//
// MessageId: BDK_E_INVALID_CREATION_DATE
//
// MessageText:
//
//  Creation date/time cannot be later than current date/time.
//
#define BDK_E_INVALID_CREATION_DATE      ((HRESULT)0x80049C4EL)


//
// MessageId: BDK_E_EXCEEDING_TAX_EXEMPT_LIMITS
//
// MessageText:
//
//  No more tax exemptions are allowed for this account.
//
#define BDK_E_EXCEEDING_TAX_EXEMPT_LIMITS ((HRESULT)0x80049C55L)


//
// MessageId: BDK_E_GENERATE_NEXT_ID
//
// MessageText:
//
//  Generating next ID.
//
#define BDK_E_GENERATE_NEXT_ID           ((HRESULT)0x80049C59L)


//
// MessageId: BDK_E_INVALID_STATE_FOR_COUNTRY
//
// MessageText:
//
//  State invalid for the country.
//
#define BDK_E_INVALID_STATE_FOR_COUNTRY  ((HRESULT)0x80049C5FL)


//
// MessageId: BDK_E_ADDRESS_COUNTRY_ACCOUNT_MISMATCH
//
// MessageText:
//
//  Country for address provided does not match existing country for account.
//
#define BDK_E_ADDRESS_COUNTRY_ACCOUNT_MISMATCH ((HRESULT)0x80049C61L)


//
// MessageId: BDK_E_OFFERING_COUNTRY_ACCOUNT_MISMATCH
//
// MessageText:
//
//  The offering requested is not available in the country of this account.
//
#define BDK_E_OFFERING_COUNTRY_ACCOUNT_MISMATCH ((HRESULT)0x80049C62L)


//
// MessageId: BDK_E_INVALID_BILLABLE_ACCOUNT_ID
//
// MessageText:
//
//  Invalid account.
//
#define BDK_E_INVALID_BILLABLE_ACCOUNT_ID ((HRESULT)0x80049CC2L)


//
// MessageId: BDK_E_INVALID_BILLABLE_ACCOUNT_STATUS_ID
//
// MessageText:
//
//  Invalid account status.
//
#define BDK_E_INVALID_BILLABLE_ACCOUNT_STATUS_ID ((HRESULT)0x80049CC7L)


//
// MessageId: BDK_E_INVALID_PHONE_TYPE
//
// MessageText:
//
//  Invalid phone type.
//
#define BDK_E_INVALID_PHONE_TYPE         ((HRESULT)0x80049CD6L)


//
// MessageId: BDK_E_INVALID_OFFERING_ID
//
// MessageText:
//
//  Invalid offering.
//
#define BDK_E_INVALID_OFFERING_ID        ((HRESULT)0x80049CE5L)


//
// MessageId: BDK_E_INVALID_COUNTRY_CODE
//
// MessageText:
//
//  Invalid country code.
//
#define BDK_E_INVALID_COUNTRY_CODE       ((HRESULT)0x80049CEAL)


//
// MessageId: BDK_E_INVALID_ADDRESS_ID
//
// MessageText:
//
//  Invalid address ID.
//
#define BDK_E_INVALID_ADDRESS_ID         ((HRESULT)0x80049CEFL)


//
// MessageId: BDK_E_INVALID_PAYMENT_METHOD_ID
//
// MessageText:
//
//  Invalid payment instrument ID.
//
#define BDK_E_INVALID_PAYMENT_METHOD_ID  ((HRESULT)0x80049CF9L)


//
// MessageId: BDK_E_SUBSCRIPTION_ALREADY_CANCELED
//
// MessageText:
//
//  Subscription is already cancelled.
//
#define BDK_E_SUBSCRIPTION_ALREADY_CANCELED ((HRESULT)0x80049D08L)


//
// MessageId: BDK_E_INVALID_CANCEL_DATE
//
// MessageText:
//
//  The value specified for the cancel date must be either the empty string or "NOW".
//
#define BDK_E_INVALID_CANCEL_DATE        ((HRESULT)0x80049D09L)


//
// MessageId: BDK_E_INVALID_SUBSCRIPTION_ID
//
// MessageText:
//
//  Invalid subscription ID.
//
#define BDK_E_INVALID_SUBSCRIPTION_ID    ((HRESULT)0x80049D0DL)


//
// MessageId: BDK_E_INVALID_PERIOD_TO_PROCESS
//
// MessageText:
//
//  Invalid period.
//
#define BDK_E_INVALID_PERIOD_TO_PROCESS  ((HRESULT)0x80049D2BL)


//
// MessageId: BDK_E_INVALID_SUBSCRIPTION_STATUS
//
// MessageText:
//
//  Invalid subscription status or invalid operation for the status.
//
#define BDK_E_INVALID_SUBSCRIPTION_STATUS ((HRESULT)0x80049D3AL)


//
// MessageId: BDK_E_NON_ACTIVE_ACCOUNT
//
// MessageText:
//
//  Account is inactive.
//
#define BDK_E_NON_ACTIVE_ACCOUNT         ((HRESULT)0x80049D94L)


//
// MessageId: BDK_E_VATID_DOESNOTHAVEEXPDATE
//
// MessageText:
//
//  VATIDs do not have an expiration date.
//
#define BDK_E_VATID_DOESNOTHAVEEXPDATE   ((HRESULT)0x80049D95L)


//
// MessageId: BDK_E_TAXID_EXPDATE
//
// MessageText:
//
//  Expiration date was not specified.
//
#define BDK_E_TAXID_EXPDATE              ((HRESULT)0x80049D96L)


//
// MessageId: BDK_E_INVALID_TAX_EXEMPT_TYPE
//
// MessageText:
//
//  Invalid tax exemption type.
//
#define BDK_E_INVALID_TAX_EXEMPT_TYPE    ((HRESULT)0x80049D97L)


//
// MessageId: BDK_E_NO_ACTIVE_SUBSCRIPTION
//
// MessageText:
//
//  No active subscription for adding a service instance.
//
#define BDK_E_NO_ACTIVE_SUBSCRIPTION     ((HRESULT)0x80049D99L)


//
// MessageId: BDK_E_INVALID_SERVICE_INSTANCE
//
// MessageText:
//
//  Invalid service instance for adding a new user.
//
#define BDK_E_INVALID_SERVICE_INSTANCE   ((HRESULT)0x80049D9EL)


//
// MessageId: BDK_E_ADD_USER_TO_SERVICE_INSTANCE
//
// MessageText:
//
//  Failed to add a new user to a service instance.
//
#define BDK_E_ADD_USER_TO_SERVICE_INSTANCE ((HRESULT)0x80049DA3L)


//
// MessageId: BDK_E_INVALID_BILLABLEACCTSTATUS
//
// MessageText:
//
//  Status change not allowed.
//
#define BDK_E_INVALID_BILLABLEACCTSTATUS ((HRESULT)0x80049DA8L)


//
// MessageId: BDK_E_SERVICE_INSTANCES_NONE
//
// MessageText:
//
//  No service instances available for the billable account.
//
#define BDK_E_SERVICE_INSTANCES_NONE     ((HRESULT)0x80049DBCL)


//
// MessageId: BDK_E_ACCOUNT_CLOSED
//
// MessageText:
//
//  Account is already closed.
//
#define BDK_E_ACCOUNT_CLOSED             ((HRESULT)0x80049DD1L)


//
// MessageId: BDK_E_BILLINGPERIOD_PAST
//
// MessageText:
//
//  Period is already past.
//
#define BDK_E_BILLINGPERIOD_PAST         ((HRESULT)0x80049DD6L)


//
// MessageId: BDK_E_INVALID_ADJUSTMENTGUID
//
// MessageText:
//
//  Invalid adjustment GUID.
//
#define BDK_E_INVALID_ADJUSTMENTGUID     ((HRESULT)0x80049DD7L)


//
// MessageId: BDK_E_INVALID_ADJUSMENT_FOR_PERIOD
//
// MessageText:
//
//  Adjustment not applicable to the specified period.
//
#define BDK_E_INVALID_ADJUSMENT_FOR_PERIOD ((HRESULT)0x80049DD8L)


//
// MessageId: BDK_E_ADJUSTMENT_TOOBIG
//
// MessageText:
//
//  Adjustment amount is too large.
//
#define BDK_E_ADJUSTMENT_TOOBIG          ((HRESULT)0x80049DD9L)


//
// MessageId: BDK_E_ADJUSTMENT_TOOSMALL
//
// MessageText:
//
//  Adjustment amount is too small.
//
#define BDK_E_ADJUSTMENT_TOOSMALL        ((HRESULT)0x80049DDBL)


//
// MessageId: BDK_E_INVALID_LOCALE
//
// MessageText:
//
//  Invalid locale.
//
#define BDK_E_INVALID_LOCALE             ((HRESULT)0x80049DE5L)


//
// MessageId: BDK_E_INVALID_CUSTOMER_TYPE
//
// MessageText:
//
//  Invalid customer type.
//
#define BDK_E_INVALID_CUSTOMER_TYPE      ((HRESULT)0x80049DE6L)


//
// MessageId: BDK_E_INVALID_CURRENCY
//
// MessageText:
//
//  Invalid currency.
//
#define BDK_E_INVALID_CURRENCY           ((HRESULT)0x80049DE7L)


//
// MessageId: BDK_E_DATE_EXPIRED
//
// MessageText:
//
//  Date is already expired.
//
#define BDK_E_DATE_EXPIRED               ((HRESULT)0x80049DE8L)


//
// MessageId: BDK_E_GUID_EXISTS
//
// MessageText:
//
//  GUID already exists.
//
#define BDK_E_GUID_EXISTS                ((HRESULT)0x80049DE9L)


//
// MessageId: BDK_E_INVALID_VIOLATION_ID
//
// MessageText:
//
//  Invalid violation ID.
//
#define BDK_E_INVALID_VIOLATION_ID       ((HRESULT)0x80049DECL)


//
// MessageId: BDK_E_MISSING_VIOLATION_ID
//
// MessageText:
//
//  Violation ID is required.
//
#define BDK_E_MISSING_VIOLATION_ID       ((HRESULT)0x80049DEDL)


//
// MessageId: BDK_E_NEEDTODEPROVISION
//
// MessageText:
//
//  De-provision service instances before proceeding.
//
#define BDK_E_NEEDTODEPROVISION          ((HRESULT)0x80049DEFL)


//
// MessageId: BDK_E_PARTIALCONV_INITIATED
//
// MessageText:
//
//  Partial conversion is already initiated.
//
#define BDK_E_PARTIALCONV_INITIATED      ((HRESULT)0x80049DF0L)


//
// MessageId: BDK_E_CANNOT_UPDATE_CURRENCY
//
// MessageText:
//
//  The currency of the account cannot be updated.
//
#define BDK_E_CANNOT_UPDATE_CURRENCY     ((HRESULT)0x80049DF1L)


//
// MessageId: BDK_E_PARTIALCONV_EXPECTED
//
// MessageText:
//
//  Subscription is expected to be in the partial state.
//
#define BDK_E_PARTIALCONV_EXPECTED       ((HRESULT)0x80049DF2L)


//
// MessageId: BDK_E_INVALID_CATEGORY_NAME
//
// MessageText:
//
//  Invalid category.
//
#define BDK_E_INVALID_CATEGORY_NAME      ((HRESULT)0x80049DF3L)


//
// MessageId: BDK_E_OFFERING_NOT_PURCHASEABLE
//
// MessageText:
//
//  Offering cannot be purchased.
//
#define BDK_E_OFFERING_NOT_PURCHASEABLE  ((HRESULT)0x80049DF5L)


//
// MessageId: BDK_E_OFFERING_ACCOUNT_CURRENCY_MISMATCH
//
// MessageText:
//
//  Offering currency does not match account currency.
//
#define BDK_E_OFFERING_ACCOUNT_CURRENCY_MISMATCH ((HRESULT)0x80049DF6L)


//
// MessageId: BDK_E_OFFERING_PAYMENT_INSTRUMENT_MISMATCH
//
// MessageText:
//
//  Offering does not support payment instrument type.
//
#define BDK_E_OFFERING_PAYMENT_INSTRUMENT_MISMATCH ((HRESULT)0x80049DF7L)


//
// MessageId: BDK_E_INVALID_DATE
//
// MessageText:
//
//  Invalid date.
//
#define BDK_E_INVALID_DATE               ((HRESULT)0x80049DF8L)


//
// MessageId: BDK_E_CANNOT_EXCEED_MAX_OWNERSHIP
//
// MessageText:
//
//  Cannot exceed max ownership for the offering.
//
#define BDK_E_CANNOT_EXCEED_MAX_OWNERSHIP ((HRESULT)0x80049DF9L)


//
// MessageId: BDK_E_INVALID_RESOURCE_ID
//
// MessageText:
//
//  Invalid resource ID.
//
#define BDK_E_INVALID_RESOURCE_ID        ((HRESULT)0x80049E02L)


//
// MessageId: BDK_E_UNIT_OF_MEASURE_MISMATCH
//
// MessageText:
//
//  Unit of measure reported in the usage event does not match the one in SPS.
//
#define BDK_E_UNIT_OF_MEASURE_MISMATCH   ((HRESULT)0x80049E03L)


//
// MessageId: BDK_E_EVT_DATE_BEFORE_PURCHASE_DATE
//
// MessageText:
//
//  Event date is before the subscription purchase date.
//
#define BDK_E_EVT_DATE_BEFORE_PURCHASE_DATE ((HRESULT)0x80049E04L)


//
// MessageId: BDK_E_INVALID_OFFERING_FOR_LOCALE
//
// MessageText:
//
//  Offering invalid for the locale.
//
#define BDK_E_INVALID_OFFERING_FOR_LOCALE ((HRESULT)0x80049E05L)


//
// MessageId: BDK_E_NOT_A_BASE_OFFERING
//
// MessageText:
//
//  Offering is not a base offering.
//
#define BDK_E_NOT_A_BASE_OFFERING        ((HRESULT)0x80049E06L)


//
// MessageId: BDK_E_FUTURE_OFFERING_PAYMENT_INSTRUMENT_MISMATCH
//
// MessageText:
//
//  There is a scheduled renewal or pending conversion to an offer that does not support that payment instrument.
//
#define BDK_E_FUTURE_OFFERING_PAYMENT_INSTRUMENT_MISMATCH ((HRESULT)0x80049E08L)


//
// MessageId: BDK_E_MEG_CONFLICT
//
// MessageText:
//
//  The offering requested conflicts with an existing subscription on this account.
//
#define BDK_E_MEG_CONFLICT               ((HRESULT)0x80049E0AL)


//
// MessageId: BDK_E_INVALID_ACCOUNT_STATUS
//
// MessageText:
//
//  Account state does not allow this operation.
//
#define BDK_E_INVALID_ACCOUNT_STATUS     ((HRESULT)0x80049E16L)


//
// MessageId: BDK_E_ACTIVE_SUBSCRIPTIONS_EXIST
//
// MessageText:
//
//  Payment instrument has active subscriptions.
//
#define BDK_E_ACTIVE_SUBSCRIPTIONS_EXIST ((HRESULT)0x80049E1BL)


//
// MessageId: BDK_E_INVALID_SUBSCRIPTION_STATUS_FOR_OPERATION
//
// MessageText:
//
//  Subscription is in an invalid state for this operation.
//
#define BDK_E_INVALID_SUBSCRIPTION_STATUS_FOR_OPERATION ((HRESULT)0x80049E20L)


//
// MessageId: BDK_E_PRIMARY_PHONE_REQUIRED
//
// MessageText:
//
//  Primary phone required for payment instruments.
//
#define BDK_E_PRIMARY_PHONE_REQUIRED     ((HRESULT)0x80049E25L)


//
// MessageId: BDK_E_EMAIL_REQUIRED
//
// MessageText:
//
//  Account requires an e-mail address for this operation.
//
#define BDK_E_EMAIL_REQUIRED             ((HRESULT)0x80049E2AL)


//
// MessageId: BDK_E_ACCOUNT_NOT_CLOSED
//
// MessageText:
//
//  To perform this operation, the account should be closed.
//
#define BDK_E_ACCOUNT_NOT_CLOSED         ((HRESULT)0x80049E2BL)


//
// MessageId: BDK_E_INVALID_VIOLATION
//
// MessageText:
//
//  Invalid violation ID.
//
#define BDK_E_INVALID_VIOLATION          ((HRESULT)0x80049E13L)


//
// MessageId: BDK_E_SUBSCRIPTION_IS_CANCELLED
//
// MessageText:
//
//  Subscription is cancelled and cannot change status.
//
#define BDK_E_SUBSCRIPTION_IS_CANCELLED  ((HRESULT)0x80049E14L)


//
// MessageId: BDK_E_NO_VIOLATION
//
// MessageText:
//
//  Subscription has no violations.
//
#define BDK_E_NO_VIOLATION               ((HRESULT)0x80049E15L)


//
// MessageId: BDK_E_EXISTS_VIOLATION
//
// MessageText:
//
//  Subscription has violations.
//
#define BDK_E_EXISTS_VIOLATION           ((HRESULT)0x80049E17L)


//
// MessageId: BDK_E_INVALID_SERVICE_COMPONENT_ID
//
// MessageText:
//
//  Invalid Service Component Id was passed.
//
#define BDK_E_INVALID_SERVICE_COMPONENT_ID ((HRESULT)0x80049E32L)


//
// MessageId: BDK_E_END_DATE_IN_THE_PAST
//
// MessageText:
//
//  End date is already past.
//
#define BDK_E_END_DATE_IN_THE_PAST       ((HRESULT)0x80049E33L)


//
// MessageId: BDK_E_END_DATE_BEYOND_MAX
//
// MessageText:
//
//  End date passed in is later than the latest allowable end date for this subscription.
//
#define BDK_E_END_DATE_BEYOND_MAX        ((HRESULT)0x80049E34L)


//
// MessageId: BDK_E_VIOLATION_ALREADY_SET
//
// MessageText:
//
//  Violation is already set.
//
#define BDK_E_VIOLATION_ALREADY_SET      ((HRESULT)0x80049E3EL)


//
// MessageId: BDK_E_NO_VIOLATION_SET
//
// MessageText:
//
//  Violation ID not set.
//
#define BDK_E_NO_VIOLATION_SET           ((HRESULT)0x80049E43L)


//
// MessageId: BDK_E_INVALID_CONVERSION
//
// MessageText:
//
//  Either there is no path between the current offering and the target offering or the path does not match the calling mode (Convert or Renew). 
//
#define BDK_E_INVALID_CONVERSION         ((HRESULT)0x80049E4DL)


//
// MessageId: BDK_E_SUBS_NOT_INTERMEDIATE
//
// MessageText:
//
//  Subscription is not in the partial state.
//
#define BDK_E_SUBS_NOT_INTERMEDIATE      ((HRESULT)0x80049E4EL)


//
// MessageId: BDK_E_OFFERING_NOT_PUBLISHED
//
// MessageText:
//
//  Offering is not published.
//
#define BDK_E_OFFERING_NOT_PUBLISHED     ((HRESULT)0x80049E52L)


//
// MessageId: BDK_E_CONVERSION_NEEDTODEPROVISION
//
// MessageText:
//
//  Service instances must be de-provisioned to proceed.
//
#define BDK_E_CONVERSION_NEEDTODEPROVISION ((HRESULT)0x80049E53L)


//
// MessageId: BDK_E_INVALID_MANDATE_STATUS
//
// MessageText:
//
//  Invalid mandate status.
//
#define BDK_E_INVALID_MANDATE_STATUS     ((HRESULT)0x80049E57L)


//
// MessageId: BDK_E_PI_ALREADY_GOOD
//
// MessageText:
//
//  Payment instrument status is already GOOD.
//
#define BDK_E_PI_ALREADY_GOOD            ((HRESULT)0x80049E61L)


//
// MessageId: BDK_E_PI_ALREADY_DECLINED
//
// MessageText:
//
//  Payment instrument status is already DECLINED.
//
#define BDK_E_PI_ALREADY_DECLINED        ((HRESULT)0x80049E66L)


//
// MessageId: BDK_E_PI_IS_DISABLED
//
// MessageText:
//
//  Payment instrument status is DISABLED and cannot be changed.
//
#define BDK_E_PI_IS_DISABLED             ((HRESULT)0x80049E6BL)


//
// MessageId: BDK_E_INVALID_PAYMENT_INSTRUMENT_STATUS
//
// MessageText:
//
//  Payment instrument exists or the payment instrument status is invalid or does not allow the operation.
//
#define BDK_E_INVALID_PAYMENT_INSTRUMENT_STATUS ((HRESULT)0x80049E7FL)


//
// MessageId: BDK_E_INVALID_OFFERING_GUID
//
// MessageText:
//
//  Invalid offering GUID.
//
#define BDK_E_INVALID_OFFERING_GUID      ((HRESULT)0x80049E84L)


//
// MessageId: BDK_E_OFFERING_REQUIRES_PI
//
// MessageText:
//
//  Offering requires a payment instrument.
//
#define BDK_E_OFFERING_REQUIRES_PI       ((HRESULT)0x80049E89L)


//
// MessageId: BDK_E_DELAYED_PROVISIONING_COMPONENTS_EXIST
//
// MessageText:
//
//  Offering cannot be purchased because it has delayed provisioning components.
//
#define BDK_E_DELAYED_PROVISIONING_COMPONENTS_EXIST ((HRESULT)0x80049E93L)


//
// MessageId: BDK_E_INVALID_AMOUNT_FOR_CURRENCY
//
// MessageText:
//
//  Invalid currency format.
//
#define BDK_E_INVALID_AMOUNT_FOR_CURRENCY ((HRESULT)0x80049E99L)


//
// MessageId: BDK_E_INVALID_EMAIL_ADDRESS
//
// MessageText:
//
//  Invalid e-mail address.
//
#define BDK_E_INVALID_EMAIL_ADDRESS      ((HRESULT)0x80049EA2L)


//
// MessageId: BDK_E_INVALID_TAX_EXEMPT_STATUS
//
// MessageText:
//
//  Invalid tax exemption status.
//
#define BDK_E_INVALID_TAX_EXEMPT_STATUS  ((HRESULT)0x80049EACL)


//
// MessageId: BDK_E_INVALID_OLD_PAYMENT_INSTRUMENT_STATUS
//
// MessageText:
//
//  The status of the old payment instrument does not allow this operation.
//
#define BDK_E_INVALID_OLD_PAYMENT_INSTRUMENT_STATUS ((HRESULT)0x80049EB6L)


//
// MessageId: BDK_E_INVALID_END_PERIOD
//
// MessageText:
//
//  Invalid end period. Make sure the end period is not before the start period.
//
#define BDK_E_INVALID_END_PERIOD         ((HRESULT)0x80049EC5L)


//
// MessageId: BDK_E_COMPUTE_ONLY
//
// MessageText:
//
//  SPS is in compute-only mode.
//
#define BDK_E_COMPUTE_ONLY               ((HRESULT)0x80049ECAL)


//
// MessageId: BDK_E_MISSED_PROCESSING_PERIOD
//
// MessageText:
//
//  Detected that month(s) were missed in periodic processing.
//
#define BDK_E_MISSED_PROCESSING_PERIOD   ((HRESULT)0x80049F33L)


//
// MessageId: BDK_E_SUBSCRIPTION_NOT_EXPIRED
//
// MessageText:
//
//  Subscription is not expired.
//
#define BDK_E_SUBSCRIPTION_NOT_EXPIRED   ((HRESULT)0x80049F43L)


//
// MessageId: BDK_E_TOOLATE_REINSTATE
//
// MessageText:
//
//  Subscription can no longer be reinstated.
//
#define BDK_E_TOOLATE_REINSTATE          ((HRESULT)0x80049F44L)


//
// MessageId: BDK_E_EXTRA_REFERRAL_DATA
//
// MessageText:
//
//  Only a single Referral node may be passed in to this API.
//
#define BDK_E_EXTRA_REFERRAL_DATA        ((HRESULT)0x80049F47L)


//
// MessageId: BDK_E_NO_REFERRAL_UPDATES_ALLOWED
//
// MessageText:
//
//  bstrReferralIDSetXML parameter must be left empty for this API.
//
#define BDK_E_NO_REFERRAL_UPDATES_ALLOWED ((HRESULT)0x80049F4CL)


//
// MessageId: BDK_E_INVALID_OPERATION_FOR_WHOLESALE_SUBSCRIPTION
//
// MessageText:
//
//  This operation is not valid for wholesale subscriptions.
//
#define BDK_E_INVALID_OPERATION_FOR_WHOLESALE_SUBSCRIPTION ((HRESULT)0x80049F65L)


//
// MessageId: BDK_E_HCI_NOT_VALID
//
// MessageText:
//
//  HCI not valid for Account Id.
//
#define BDK_E_HCI_NOT_VALID              ((HRESULT)0x80049F83L)


//
// MessageId: BDK_E_CANT_STOP_TAIWAN_TAXINV
//
// MessageText:
//
//  Taiwan users cannot opt out of hard copy tax invoices.
//
#define BDK_E_CANT_STOP_TAIWAN_TAXINV    ((HRESULT)0x80049F85L)


//
// MessageId: BDK_E_CANT_RESEND_TW_HCR
//
// MessageText:
//
//  Cannot re-issue hard copy tax invoice to TW customers. Have them contact FMP 886-02-23888650.
//
#define BDK_E_CANT_RESEND_TW_HCR         ((HRESULT)0x80049F87L)


//
// MessageId: BDK_E_INVALID_TOKEN_TYPE
//
// MessageText:
//
//  The type of the token specified was invalid.
//
#define BDK_E_INVALID_TOKEN_TYPE         ((HRESULT)0x8004A00AL)


//
// MessageId: BDK_E_TOKEN_NOT_VALID_FOR_OFFERING
//
// MessageText:
//
//  The token Id specified is not valid for the given offering.
//
#define BDK_E_TOKEN_NOT_VALID_FOR_OFFERING ((HRESULT)0x8004A04BL)


//
// MessageId: BDK_E_TOKEN_AND_PI_BOTH_SPECIFIED
//
// MessageText:
//
//  A token Id and a payment instrument Id cannot both be specified.
//
#define BDK_E_TOKEN_AND_PI_BOTH_SPECIFIED ((HRESULT)0x8004A06EL)


//
// MessageId: BDK_E_TOKEN_CLASS_INVALID
//
// MessageText:
//
//  The token class is invalid or does not exist.
//
#define BDK_E_TOKEN_CLASS_INVALID        ((HRESULT)0x8004A073L)


//
// MessageId: BDK_E_PI_CANNOT_BE_SPECIFIED
//
// MessageText:
//
//  A payment instrument cannot be specified.
//
#define BDK_E_PI_CANNOT_BE_SPECIFIED     ((HRESULT)0x8004A078L)


//
// MessageId: BDK_E_SUBSCRIPTION_NOT_PREPAID
//
// MessageText:
//
//  The subscription specified is not a PrePaid subscription.
//
#define BDK_E_SUBSCRIPTION_NOT_PREPAID   ((HRESULT)0x8004A07DL)


//
// MessageId: BDK_E_TOTAL_EXTENSION_LESS_THAN_ZERO
//
// MessageText:
//
//  The total number of extended days cannot be less than zero.
//
#define BDK_E_TOTAL_EXTENSION_LESS_THAN_ZERO ((HRESULT)0x8004A082L)


//
// MessageId: BDK_E_INVALID_NUMBER_OF_DAYS
//
// MessageText:
//
//  The number of days specified is invalid, possibly because the subscription doesn't have that many days remaining.
//
#define BDK_E_INVALID_NUMBER_OF_DAYS     ((HRESULT)0x8004A087L)


//
// MessageId: BDK_E_INVALID_NUMBER_OF_MONTHS
//
// MessageText:
//
//  The number of months specified is invalid, possibly because it is negative.
//
#define BDK_E_INVALID_NUMBER_OF_MONTHS   ((HRESULT)0x8004A088L)


//
// MessageId: BDK_E_TOTAL_EXTENSION_GREATER_THAN_MAX
//
// MessageText:
//
//  The total number of extended days is greater than the maximum allowed for the current subscription.
//
#define BDK_E_TOTAL_EXTENSION_GREATER_THAN_MAX ((HRESULT)0x8004A08CL)


//
// MessageId: BDK_E_SUBSCRIPTION_IS_PREPAID
//
// MessageText:
//
//  The operation cannot be completed because the subscription specified is a Prepaid subscritpion.
//
#define BDK_E_SUBSCRIPTION_IS_PREPAID    ((HRESULT)0x8004A091L)


//
// MessageId: BDK_E_PREPAID_TOKEN_IS_REQUIRED
//
// MessageText:
//
//  The deal specified requires a valid Prepaid Token Id to be specified.
//
#define BDK_E_PREPAID_TOKEN_IS_REQUIRED  ((HRESULT)0x8004A096L)


//
// MessageId: BDK_E_TERM_COMMIT_EXISTS
//
// MessageText:
//
//  There are remaining cycles on the current term commit.
//
#define BDK_E_TERM_COMMIT_EXISTS         ((HRESULT)0x8004A09BL)


//
// MessageId: BDK_E_TOKEN_NOT_APPLICABLE
//
// MessageText:
//
//  The specified token cannot be used for the current operation.
//
#define BDK_E_TOKEN_NOT_APPLICABLE       ((HRESULT)0x8004A0A0L)


//
// MessageId: BDK_E_TOKEN_RENEWAL_PRESENT
//
// MessageText:
//
//  Renewal cannot be scheduled if there is already a token based renewal present.
//
#define BDK_E_TOKEN_RENEWAL_PRESENT      ((HRESULT)0x8004A0A5L)


//
// MessageId: BDK_E_BLACKLIST_ACTION_NOT_PERFORMED
//
// MessageText:
//
//  BlacklistToken found actions to take, but BSTRSubscriptionAction was set to DONOTHING.
//
#define BDK_E_BLACKLIST_ACTION_NOT_PERFORMED ((HRESULT)0x8004A0AAL)


//
// MessageId: BDK_E_INVALID_SUBSCRIPTION_ACTION
//
// MessageText:
//
//  BlacklistToken was called with invalid bstrSubscriptionAction parameter.
//
#define BDK_E_INVALID_SUBSCRIPTION_ACTION ((HRESULT)0x8004A0AFL)


//
// MessageId: BDK_E_TOKEN_DISTRIBUTION_CHANNEL_NOT_FOUND
//
// MessageText:
//
//  Invalid distribution channel specified for token class part number.
//
#define BDK_E_TOKEN_DISTRIBUTION_CHANNEL_NOT_FOUND ((HRESULT)0x8004A0B9L)


//
// MessageId: BDK_E_INVALID_LEN_PART_NUMBER
//
// MessageText:
//
//  Invalid length for token class part number.
//
#define BDK_E_INVALID_LEN_PART_NUMBER    ((HRESULT)0x8004A0BEL)


//
// MessageId: BDK_E_INVALID_LEN_SAP_CUST_NAME
//
// MessageText:
//
//  nvalid length for SAP customer name.
//
#define BDK_E_INVALID_LEN_SAP_CUST_NAME  ((HRESULT)0x8004A0C3L)


//
// MessageId: BDK_E_INVALID_LEN_SUPPORT_VENDOR_NAME
//
// MessageText:
//
//  Invalid length for Support Vendor name.
//
#define BDK_E_INVALID_LEN_SUPPORT_VENDOR_NAME ((HRESULT)0x8004A0C8L)


//
// MessageId: BDK_E_INSERING_TOKEN_CLASS_PARTNER
//
// MessageText:
//
//  Failed while inserting in partner_token_class table.
//
#define BDK_E_INSERING_TOKEN_CLASS_PARTNER ((HRESULT)0x8004A0CDL)


//
// MessageId: BDK_E_TOKEN_PART_NUMBER_ASSOC_WITH_OTHER_TOKEN_CLASS
//
// MessageText:
//
//  Token Part Number is currently associated with other token class please remove the association from the other token class and try again.
//
#define BDK_E_TOKEN_PART_NUMBER_ASSOC_WITH_OTHER_TOKEN_CLASS ((HRESULT)0x8004A0D2L)


//
// MessageId: BDK_E_TOKEN_ALREADY_DELIVERED
//
// MessageText:
//
//  A token is being delivered to the same service instance at this moment. Please retry.
//
#define BDK_E_TOKEN_ALREADY_DELIVERED    ((HRESULT)0x8004148DL)


//
// MessageId: BDK_E_INSERTING_RECONCILE_HISTORY
//
// MessageText:
//
//  Failed while inserting in reconcile_history table.
//
#define BDK_E_INSERTING_RECONCILE_HISTORY ((HRESULT)0x800414BEL)


//
// MessageId: BDK_E_TOKEN_ALREADY_ISSUED
//
// MessageText:
//
//  Specified Token is already issued.
//
#define BDK_E_TOKEN_ALREADY_ISSUED       ((HRESULT)0x800414C3L)


//
// MessageId: BDK_E_TOKEN_ALREADY_UNISSUED
//
// MessageText:
//
//  Specified Token is already unissued, can not unissue the same token again.
//
#define BDK_E_TOKEN_ALREADY_UNISSUED     ((HRESULT)0x800414C8L)


//
// MessageId: BDK_E_TOKEN_ISSUE_UPDATE
//
// MessageText:
//
//  Failed to update the token issue status in token_instance table.
//
#define BDK_E_TOKEN_ISSUE_UPDATE         ((HRESULT)0x800414CDL)


//
// MessageId: BDK_E_INVALID_COMBINATION
//
// MessageText:
//
//  The input parameter combination does not match the system.
//
#define BDK_E_INVALID_COMBINATION        ((HRESULT)0x800414D2L)


//
// MessageId: BDK_E_INVALID_REPLACEMENT_REASON_CODE
//
// MessageText:
//
//  Invalid Replacement Reason code specified.
//
#define BDK_E_INVALID_REPLACEMENT_REASON_CODE ((HRESULT)0x800414D7L)


//
// MessageId: BDK_E_MAX_REPLACEMENT_REACHED
//
// MessageText:
//
//  The request failed because the maximum number of replacements for this sequence number have exceeded the threshold value.
//
#define BDK_E_MAX_REPLACEMENT_REACHED    ((HRESULT)0x800414DCL)


//
// MessageId: BDK_E_TOKEN_REPLACEMENT_FAILED
//
// MessageText:
//
//  Token Replacement failed due to unknown error.
//
#define BDK_E_TOKEN_REPLACEMENT_FAILED   ((HRESULT)0x800414E1L)


//
// MessageId: BDK_E_TOKEN_DISTRIBUTION_STATUS_UPDATE
//
// MessageText:
//
//  Failed to update Token Distribution status.
//
#define BDK_E_TOKEN_DISTRIBUTION_STATUS_UPDATE ((HRESULT)0x800414E6L)


//
// MessageId: BDK_E_SIGNATURE_TOKEN_MISMATCH
//
// MessageText:
//
//  Signature does not belong to specified Token.
//
#define BDK_E_SIGNATURE_TOKEN_MISMATCH   ((HRESULT)0x800414EBL)


//
// MessageId: BDK_E_INVALID_STATUS_NAME
//
// MessageText:
//
//  Invalid Token Staus Name specified.
//
#define BDK_E_INVALID_STATUS_NAME        ((HRESULT)0x800414F0L)


//
// MessageId: BDK_E_INVALID_TOKEN_DISTRIBUTION_STATUS
//
// MessageText:
//
//  Invalid distribution status to issue token.
//
#define BDK_E_INVALID_TOKEN_DISTRIBUTION_STATUS ((HRESULT)0x800414F5L)


//
// MessageId: BDK_E_ALREADY_REPLACED_TOKEN
//
// MessageText:
//
//  Specified token is replaced token, can not provide replacement for Replaced Token.
//
#define BDK_E_ALREADY_REPLACED_TOKEN     ((HRESULT)0x800414FAL)


//
// MessageId: BDK_E_TOKEN_ACTION_ACCESS_DENIED
//
// MessageText:
//
//  Invalid Partner specified or the partner does not have permission to take action on specified token.
//
#define BDK_E_TOKEN_ACTION_ACCESS_DENIED ((HRESULT)0x800414FFL)


//
// MessageId: BDK_E_BAD_RETURN_STATEMENT_SET_INDICATOR
//
// MessageText:
//
//  Value for returnStatementSet parameter must be 0, 1, or 2.
//
#define BDK_E_BAD_RETURN_STATEMENT_SET_INDICATOR ((HRESULT)0x8004A604L)


//
// MessageId: BDK_E_BAD_BEGIN_BILLING_PERIOD
//
// MessageText:
//
//  The begin billing period is not valid for this account.
//
#define BDK_E_BAD_BEGIN_BILLING_PERIOD   ((HRESULT)0x8004A609L)


//
// MessageId: BDK_E_INVALID_END_BILLING_PERIOD
//
// MessageText:
//
//  The end billing period is not valid for this account.
//
#define BDK_E_INVALID_END_BILLING_PERIOD ((HRESULT)0x8004A60EL)


//
// MessageId: BDK_E_BILLING_PERIOD_NEGATIVE
//
// MessageText:
//
//  The billing period value cannot be negative.
//
#define BDK_E_BILLING_PERIOD_NEGATIVE    ((HRESULT)0x8004A613L)


//
// MessageId: BDK_E_BAD_START_END_BILLING_PERIOD
//
// MessageText:
//
//  The end period must be greater than start period.
//
#define BDK_E_BAD_START_END_BILLING_PERIOD ((HRESULT)0x8004A618L)


//
// MessageId: BDK_E_CURRENT_DATE_LESS_THAN_ACCOUNT_HISTORY_DATE
//
// MessageText:
//
//  The account history date cannot be greater than the current date.
//
#define BDK_E_CURRENT_DATE_LESS_THAN_ACCOUNT_HISTORY_DATE ((HRESULT)0x8004A61DL)


//
// MessageId: BDK_E_NO_NON_NULL_PARAMS
//
// MessageText:
//
//  Cannot pass null for all parameters.
//
#define BDK_E_NO_NON_NULL_PARAMS         ((HRESULT)0x8004A622L)


//
// MessageId: BDK_E_INVALID_SUBSCRIPTION_BILLING_PERIOD
//
// MessageText:
//
//  The billing period value must be of the format YYYYMM (Y representing the year and M representing month).
//
#define BDK_E_INVALID_SUBSCRIPTION_BILLING_PERIOD ((HRESULT)0x8004A627L)


//
// MessageId: BDK_E_BILLING_PERIOD_GREATER_THAN_SUBSCRIPTION_DURATION
//
// MessageText:
//
//  The billing period value cannot be greater than the subscription duration (i.e. past subscription expiration).
//
#define BDK_E_BILLING_PERIOD_GREATER_THAN_SUBSCRIPTION_DURATION ((HRESULT)0x8004A62CL)


//
// MessageId: BDK_E_MISMATCH_SUB_ID_OFFER_GUID
//
// MessageText:
//
//  The offering guid passed in does not match offering guid on subscription.
//
#define BDK_E_MISMATCH_SUB_ID_OFFER_GUID ((HRESULT)0x8004A6FEL)


//
// MessageId: BDK_E_EVENT_TIMESTAMP_IN_THE_FUTURE
//
// MessageText:
//
//  The event time stamp is too far in future.
//
#define BDK_E_EVENT_TIMESTAMP_IN_THE_FUTURE ((HRESULT)0x8004A70DL)


//
// MessageId: BDK_E_INVALID_POLICY_ID
//
// MessageText:
//
//  The policy GuidID/Version combination supplied does not exist.
//
#define BDK_E_INVALID_POLICY_ID          ((HRESULT)0x80049F88L)


//
// MessageId: BDK_E_OFFERING_PI_COUNTRY_MISMATCH
//
// MessageText:
//
//  The offering specified does not support the country of payment instrument being used.
//
#define BDK_E_OFFERING_PI_COUNTRY_MISMATCH ((HRESULT)0x80049F89L)


//
// MessageId: BDK_E_INSERT_AGREEMENT_SIGNATURE
//
// MessageText:
//
//  Error inserting into table agreement_signature.
//
#define BDK_E_INSERT_AGREEMENT_SIGNATURE ((HRESULT)0x80049F8DL)


//
// MessageId: BDK_E_AGREEMENT_ALREADY_SIGNED
//
// MessageText:
//
//  Agreement for this subscription has already been signed by this user at a different time.
//
#define BDK_E_AGREEMENT_ALREADY_SIGNED   ((HRESULT)0x80049F92L)


//
// MessageId: BDK_E_LOCALE_NOT_SUPPORTED_FOR_POLICY
//
// MessageText:
//
//  The specified policy has not been localized in the specified locale.
//
#define BDK_E_LOCALE_NOT_SUPPORTED_FOR_POLICY ((HRESULT)0x80049F9CL)


//
// MessageId: BDK_E_POLICY_DEAL_VERSION_MISMATCH
//
// MessageText:
//
//  The policy specified is valid but the version is incorrect.
//
#define BDK_E_POLICY_DEAL_VERSION_MISMATCH ((HRESULT)0x80049F9EL)


//
// MessageId: BDK_E_POLICY_DEAL_COUNTRY_MISMATCH
//
// MessageText:
//
//  The policy specified exists but is not valid on the deal/country combination of the supplied subscription.
//
#define BDK_E_POLICY_DEAL_COUNTRY_MISMATCH ((HRESULT)0x80049FA1L)


//
// MessageId: BDK_E_CANNOT_CONVERT_BACK_TO_WHOLESALE
//
// MessageText:
//
//  The subscription was previously a wholesale subscription which was converted to a direct subscription and is now trying to be converted to wholesale again.  This is not allowed.
//
#define BDK_E_CANNOT_CONVERT_BACK_TO_WHOLESALE ((HRESULT)0x8004A6D1L)


//
// MessageId: BDK_E_CANNOT_SPECIFY_PI_DURING_RENEW
//
// MessageText:
//
//  A payment instrument cannot specified when the conversion mode is RENEW.
//
#define BDK_E_CANNOT_SPECIFY_PI_DURING_RENEW ((HRESULT)0x8004A6D6L)


//
// MessageId: BDK_E_NO_RENEWAL_FROM_PERPETUAL_OFFERING
//
// MessageText:
//
//  Renewing from a perpetual offering is not allowed.
//
#define BDK_E_NO_RENEWAL_FROM_PERPETUAL_OFFERING ((HRESULT)0x8004A6E5L)


//
// MessageId: BDK_E_INVALID_TECERTIFICATENUMBER
//
// MessageText:
//
//  Tax Exempt Certificate Number is invalid.
//
#define BDK_E_INVALID_TECERTIFICATENUMBER ((HRESULT)0x8004A6EAL)


//
// MessageId: BDK_E_NO_WHOLESALE_TO_WHOLESALE
//
// MessageText:
//
//  Conversions between wholesale offers are not allowed.
//
#define BDK_E_NO_WHOLESALE_TO_WHOLESALE  ((HRESULT)0x8004A708L)


//
// MessageId: BDK_E_INVALID_NEW_PAYMENT_INSTRUMENT_STATUS
//
// MessageText:
//
//  The status of the new payment instrument specified does not allow this operation.
//
#define BDK_E_INVALID_NEW_PAYMENT_INSTRUMENT_STATUS ((HRESULT)0x8004A712L)


//
// MessageId: BDK_E_INVALID_RENEWAL
//
// MessageText:
//
//  Renewal does not exist.
//
#define BDK_E_INVALID_RENEWAL            ((HRESULT)0x8004A71CL)


//
// MessageId: BDK_E_ERROR_PHONE_STRING_TOOLONG
//
// MessageText:
//
//  The length of phone number is greater than expected.
//
#define BDK_E_ERROR_PHONE_STRING_TOOLONG ((HRESULT)0x8004A721L)


//
// MessageId: BDK_E_ERROR_TOKEN_CLASS_ACCESS_DENIED
//
// MessageText:
//
//  The calling partner does not have access to the token class.
//
#define BDK_E_ERROR_TOKEN_CLASS_ACCESS_DENIED ((HRESULT)0x8004A72BL)


//
// MessageId: BDK_E_LAST_ADMIN_ROLE
//
// MessageText:
//
//  Last administrator role on the account cannot be removed.
//
#define BDK_E_LAST_ADMIN_ROLE            ((HRESULT)0x8004C3C3L)


//
// MessageId: BDK_E_UPDATING_MEMBERNAME
//
// MessageText:
//
//  Error updating member name.
//
#define BDK_E_UPDATING_MEMBERNAME        ((HRESULT)0x8004C3C8L)


//
// MessageId: BDK_E_OBJECT_ROLE_LIMIT_EXCEEDED
//
// MessageText:
//
//  Object can have a maximum of 100 roles.
//
#define BDK_E_OBJECT_ROLE_LIMIT_EXCEEDED ((HRESULT)0x8004C3CDL)


//
// MessageId: PROVISION_E_MALFORMED_REQUEST
//
// MessageText:
//
//  Provisioning: Provision request malformed.
//
#define PROVISION_E_MALFORMED_REQUEST    ((HRESULT)0x8004AB7DL)


//
// MessageId: PROVISION_E_WRONG_INPUT_PARAMETERS
//
// MessageText:
//
//  Provisioning: Wrong input parameters.
//
#define PROVISION_E_WRONG_INPUT_PARAMETERS ((HRESULT)0x8004AB7EL)


//
// MessageId: PROVISION_E_MPF_CALL_FAILED
//
// MessageText:
//
//  Provisioning: Microsoft Provisioning Framework call failed. %1
//
#define PROVISION_E_MPF_CALL_FAILED      ((HRESULT)0x8004AB7FL)


//
// MessageId: PROVISION_E_XML_OPERATION_ERROR
//
// MessageText:
//
//  Provisioning: Error during XML manipulation. %1
//
#define PROVISION_E_XML_OPERATION_ERROR  ((HRESULT)0x8004AB80L)


//
// MessageId: PROVISION_E_MPF_CREATE
//
// MessageText:
//
//  Provisioning: MPF client instantiation failed. %1
//
#define PROVISION_E_MPF_CREATE           ((HRESULT)0x8004AB81L)


//
// MessageId: PROVISION_E_CREATION
//
// MessageText:
//
//  Provisioning: General error in startup code. %1
//
#define PROVISION_E_CREATION             ((HRESULT)0x8004AB82L)


//
// MessageId: BDK_E_DBBADZIP
//
// MessageText:
//
//  Invalid ZIP code.
//
#define BDK_E_DBBADZIP                   ((HRESULT)0x8004ABA3L)


//
// MessageId: BDK_E_REQUIRED_FIELD_MISSING_DUE_TO_SUBSCRIPTIONS
//
// MessageText:
//
//  The account has subscription(s) in non-cancelled state that require information that you are attempting to remove.
//
#define BDK_E_REQUIRED_FIELD_MISSING_DUE_TO_SUBSCRIPTIONS ((HRESULT)0x8004ABA4L)


//
// MessageId: BDK_E_ADDITIONAL_ACCOUNT_DATA_REQUIRED
//
// MessageText:
//
//  The account requires additional attributes before performing the operation.
//
#define BDK_E_ADDITIONAL_ACCOUNT_DATA_REQUIRED ((HRESULT)0x8004ABA5L)


//
// MessageId: BDK_E_ACCT_ALREADY_REFERRED
//
// MessageText:
//
//  The referrer has already reffered the customer to this offer.
//
#define BDK_E_ACCT_ALREADY_REFERRED      ((HRESULT)0x8004ABCEL)


//
// MessageId: BDK_E_REWARD_OFFER_NOT_PURCHASABLE
//
// MessageText:
//
//  There are no reward offers currently available in the system.
//
#define BDK_E_REWARD_OFFER_NOT_PURCHASABLE ((HRESULT)0x8004ABDAL)


//
// MessageId: BDK_E_INCREMENT_TOTAL
//
// MessageText:
//
//  Cannot update total.
//
#define BDK_E_INCREMENT_TOTAL            ((HRESULT)0x80044E39L)


//
// MessageId: BDK_E_RES_NOT_BELONG_TO_OBJECT
//
// MessageText:
//
//  Resource does not belong to this object id.
//
#define BDK_E_RES_NOT_BELONG_TO_OBJECT   ((HRESULT)0x80044E57L)


//
// MessageId: BDK_E_DECLINING_BALANCE
//
// MessageText:
//
//  Payment instrument on the current subscription has a declining balance.
//
#define BDK_E_DECLINING_BALANCE          ((HRESULT)0x80044E5CL)


//
// MessageId: BDK_E_DUPLICATE_TRACKING_GUID
//
// MessageText:
//
//  Duplicate tracking GUID.
//
#define BDK_E_DUPLICATE_TRACKING_GUID    ((HRESULT)0x80044E75L)


//
// MessageId: BDK_E_INVALID_EXPIRATION_DATE
//
// MessageText:
//
//  Invalid credit card expiration date.
//
#define BDK_E_INVALID_EXPIRATION_DATE    ((HRESULT)0x80044EA7L)


//
// MessageId: BDK_E_UNKNOWN_MANDATE_STATUS
//
// MessageText:
//
//  Invalid mandate status.
//
#define BDK_E_UNKNOWN_MANDATE_STATUS     ((HRESULT)0x80044EACL)


//
// MessageId: BDK_E_INVALID_PAYMENT_METHOD_TYPE
//
// MessageText:
//
//  Payment method of this type can't support the action
//
#define BDK_E_INVALID_PAYMENT_METHOD_TYPE ((HRESULT)0x80044EB2L)


//
// MessageId: BDK_E_INVALID_CURRENCY2
//
// MessageText:
//
//  Invalid input currency.
//
#define BDK_E_INVALID_CURRENCY2          ((HRESULT)0x80044EC0L)


//
// MessageId: BDK_E_INVALID_AMOUNT
//
// MessageText:
//
//  Invalid amount passed in as argument.
//
#define BDK_E_INVALID_AMOUNT             ((HRESULT)0x80044EFCL)


//
// MessageId: BDK_E_INVALID_BILLING_PERIOD
//
// MessageText:
//
//  Invalid billing period.
//
#define BDK_E_INVALID_BILLING_PERIOD     ((HRESULT)0x80044F42L)


//
// MessageId: BDK_E_INVALID_ANNIV
//
// MessageText:
//
//  Invalid billing anniversary date.
//
#define BDK_E_INVALID_ANNIV              ((HRESULT)0x80044F9CL)


//
// MessageId: BDK_E_INVALID_LINEITEM_ID
//
// MessageText:
//
//  Invalid line item ID.
//
#define BDK_E_INVALID_LINEITEM_ID        ((HRESULT)0x80044FF6L)


//
// MessageId: BDK_E_INVALID_EVENT_TYPE
//
// MessageText:
//
//  The event type of the line item is invalid for this operation.
//
#define BDK_E_INVALID_EVENT_TYPE         ((HRESULT)0x8004501EL)


//
// MessageId: BDK_E_LINE_ITEM_ID_NOT_OPEN
//
// MessageText:
//
//  Line item ID not associated with an open record.
//
#define BDK_E_LINE_ITEM_ID_NOT_OPEN      ((HRESULT)0x80045046L)


//
// MessageId: BDK_E_LINEITEM_ALREADY_OFFSET
//
// MessageText:
//
//  Line item has already been offset.
//
#define BDK_E_LINEITEM_ALREADY_OFFSET    ((HRESULT)0x8004504BL)


//
// MessageId: BDK_E_INVALID_OFFSET_AMOUNT
//
// MessageText:
//
//  Offset amount must be greater than zero but less than or equal to original amount. %1
//
#define BDK_E_INVALID_OFFSET_AMOUNT      ((HRESULT)0x80045050L)


//
// MessageId: BDK_E_CANNOT_OFFSET_HARD_SOFT_DECLINED
//
// MessageText:
//
//  Cannot offset line item that is soft- or hard-declined.
//
#define BDK_E_CANNOT_OFFSET_HARD_SOFT_DECLINED ((HRESULT)0x80045055L)


//
// MessageId: BDK_E_AMOUNT_NOT_COLLECTED_YET
//
// MessageText:
//
//  Amount has not been collected, so it cannot be offset and immediately settled.
//
#define BDK_E_AMOUNT_NOT_COLLECTED_YET   ((HRESULT)0x8004505AL)


//
// MessageId: BDK_E_CANNOT_OFFSET_ZERO_AMOUNT
//
// MessageText:
//
//  Cannot offset line item amount of zero.
//
#define BDK_E_CANNOT_OFFSET_ZERO_AMOUNT  ((HRESULT)0x8004505FL)


//
// MessageId: BDK_E_AMOUNT_IN_PROCESS
//
// MessageText:
//
//  The operation cannot be completed because an amount involved is in the process of being sent to the bank for collection.
//
#define BDK_E_AMOUNT_IN_PROCESS          ((HRESULT)0x80045064L)


//
// MessageId: BDK_E_INVALID_CREDIT_AMOUNT
//
// MessageText:
//
//  Credit amount should not be zero.
//
#define BDK_E_INVALID_CREDIT_AMOUNT      ((HRESULT)0x80045082L)


//
// MessageId: BDK_E_CREDIT_AMOUNT_OVER_LIMIT
//
// MessageText:
//
//  Credit amount should not exceed the limit.
//
#define BDK_E_CREDIT_AMOUNT_OVER_LIMIT   ((HRESULT)0x80045083L)


//
// MessageId: BDK_E_INVALID_AMOUNT_FOR_CURRENCY_2
//
// MessageText:
//
//  Invalid amount for currency (JPY or KRW).
//
#define BDK_E_INVALID_AMOUNT_FOR_CURRENCY_2 ((HRESULT)0x80045084L)


//
// MessageId: BDK_E_DUPLICATE_EVENT_ID
//
// MessageText:
//
//  Same event id already been used, please create a new event id and retry.
//
#define BDK_E_DUPLICATE_EVENT_ID         ((HRESULT)0x80045091L)


//
// MessageId: BDK_E_OFFSET_IMM_SETTLE_IN_PROG
//
// MessageText:
//
//  Line items in the immediate_settle_in_progress state cannot be offset.
//
#define BDK_E_OFFSET_IMM_SETTLE_IN_PROG  ((HRESULT)0x8004509BL)


//
// MessageId: BDK_E_SA_IN_STATE_UNOFFSETABLE
//
// MessageText:
//
//  Line item with this settlement amount status cannot be offset.
//
#define BDK_E_SA_IN_STATE_UNOFFSETABLE   ((HRESULT)0x800450A5L)


//
// MessageId: BDK_E_OFFSET_AMOUNT_GREATER_THAN_ORIGINAL
//
// MessageText:
//
//  Offset amount should never exceed the original item amount.
//
#define BDK_E_OFFSET_AMOUNT_GREATER_THAN_ORIGINAL ((HRESULT)0x800450AAL)


//
// MessageId: BDK_E_RES_BALANCE_CHANGE_ON_NONACTIVE_SUBS
//
// MessageText:
//
//  The subscription is not active. The resource usage event is still being reported for the subscription.
//
#define BDK_E_RES_BALANCE_CHANGE_ON_NONACTIVE_SUBS ((HRESULT)0x800450AFL)


//
// MessageId: BDK_E_PI_IN_DECLINE
//
// MessageText:
//
//  the payment instrument already has declines on it, transferbalance not allowed
//
#define BDK_E_PI_IN_DECLINE              ((HRESULT)0x800450C8L)


//
// MessageId: BDK_E_SA_IN_INTERMEDIATE_STATUS
//
// MessageText:
//
//  The operation is not allowed when there are Settlement Amounts in intermediate status.
//
#define BDK_E_SA_IN_INTERMEDIATE_STATUS  ((HRESULT)0x800451D1L)


//
// MessageId: BDK_E_INVALID_SETTLEMENT_AMOUNT_ID
//
// MessageText:
//
//  The specified settlement amount id is invalid.
//
#define BDK_E_INVALID_SETTLEMENT_AMOUNT_ID ((HRESULT)0x800451D6L)


//
// MessageId: BDK_E_MISMATCH_RATED_USAGE_TOTAL
//
// MessageText:
//
//  This thread has an out-dated usage total it is trying to rate and write a billing transaction for threshold billing.
//
#define BDK_E_MISMATCH_RATED_USAGE_TOTAL ((HRESULT)0x800451E5L)


//
// MessageId: BDK_E_BAD_RETURN_STATEMENT_SET_INDICATOR2
//
// MessageText:
//
//  Value for returnStatementSet parameter must be 0, 1, or 2.
//
#define BDK_E_BAD_RETURN_STATEMENT_SET_INDICATOR2 ((HRESULT)0x800451BDL)


//
// MessageId: BDK_E_ARITHMETIC_OVERFLOW_FOR_ADD_OR_UPDATE_USAGE
//
// MessageText:
//
//  %1
//
#define BDK_E_ARITHMETIC_OVERFLOW_FOR_ADD_OR_UPDATE_USAGE ((HRESULT)0x800451EAL)


//
// MessageId: BDK_E_REFUND_LINEITEM_NOT_SETTLED
//
// MessageText:
//
//  Refund failed - line item was offset but original line item was never settled.
//
#define BDK_E_REFUND_LINEITEM_NOT_SETTLED ((HRESULT)0x80045217L)


//
// MessageId: BDK_E_INVALID_NUMBER_OF_UNITS
//
// MessageText:
//
//  Usage category does not exist for this resource.
//
#define BDK_E_INVALID_NUMBER_OF_UNITS    ((HRESULT)0x80045235L)


//
// MessageId: BDK_E_INVALID_USAGE_CATEGORY
//
// MessageText:
//
//  Usage category does not exist for this resource.
//
#define BDK_E_INVALID_USAGE_CATEGORY     ((HRESULT)0x8004523AL)


//
// MessageId: BDK_E_INSUFFICIENT_PREPAID_BALANCE
//
// MessageText:
//
//  The prepaid resource balance is not sufficient for this usage event.
//
#define BDK_E_INSUFFICIENT_PREPAID_BALANCE ((HRESULT)0x8004523FL)


//
// MessageId: BDK_E_INVALID_FINANCIAL_REASON_CODE
//
// MessageText:
//
//  Financial reason code does not exist.
//
#define BDK_E_INVALID_FINANCIAL_REASON_CODE ((HRESULT)0x80045262L)


//
// MessageId: BDK_E_OFFSET_OF_OFFSET_NOT_PERMITTED
//
// MessageText:
//
//  Offset of offset is not permitted through this API.
//
#define BDK_E_OFFSET_OF_OFFSET_NOT_PERMITTED ((HRESULT)0x80045267L)


//
// MessageId: BDK_E_DONOTSHOWOFFSET_MISMATCHED_AMOUNT
//
// MessageText:
//
//  If offset is not to be shown by getstatement, the offset amount must match the original amount.
//
#define BDK_E_DONOTSHOWOFFSET_MISMATCHED_AMOUNT ((HRESULT)0x80045276L)


//
// MessageId: BDK_E_INVALID_FIN_REASON_CODE_FOR_OFFSET
//
// MessageText:
//
//  Invalid financial reason code passed for the offset usage API.
//
#define BDK_E_INVALID_FIN_REASON_CODE_FOR_OFFSET ((HRESULT)0x8004527BL)


//
// MessageId: BDK_E_EVENT_ACTION_NOT_OFFSETTABLE
//
// MessageText:
//
//  The line item is associated with a non-offsettable event action.
//
#define BDK_E_EVENT_ACTION_NOT_OFFSETTABLE ((HRESULT)0x80045280L)


//
// MessageId: BDK_E_IMMEDIATE_SETTLE_OF_USAGE_NOT_PERMITTED
//
// MessageText:
//
//  Action is not permitted for immediate settle of usage offers.
//
#define BDK_E_IMMEDIATE_SETTLE_OF_USAGE_NOT_PERMITTED ((HRESULT)0x80045285L)


//
// MessageId: BDK_E_RESOURCE_OFFSET_ONLY_ALLOWED_FOR_USAGE
//
// MessageText:
//
//  Resource offset is only allowed for usage.
//
#define BDK_E_RESOURCE_OFFSET_ONLY_ALLOWED_FOR_USAGE ((HRESULT)0x8004528AL)


//
// MessageId: BDK_E_PMN_INSERT_FAILURE
//
// MessageText:
//
//  Passport member name could not be added.
//
#define BDK_E_PMN_INSERT_FAILURE         ((HRESULT)0x800461BCL)


//
// MessageId: BDK_E_BADSAMECARDUSEDMULTIPLETIMES
//
// MessageText:
//
//  Payment card number has been used multiple times.
//
#define BDK_E_BADSAMECARDUSEDMULTIPLETIMES ((HRESULT)0x800461D0L)


//
// MessageId: BDK_E_PI_ALREADY_ON_ACCOUNT
//
// MessageText:
//
//  Payment instrument already assigned to account.
//
#define BDK_E_PI_ALREADY_ON_ACCOUNT      ((HRESULT)0x800461DFL)


//
// MessageId: BDK_E_PUID_ROLE_LIMIT_EXCEEDED
//
// MessageText:
//
//  Passport ID can have a maximum of 100 roles.
//
#define BDK_E_PUID_ROLE_LIMIT_EXCEEDED   ((HRESULT)0x800461E4L)


//
// MessageId: BDK_E_TOOMANY_FDE_PURCHASES
//
// MessageText:
//
//  Too many fraud enticing purchases on the payment instrument
//
#define BDK_E_TOOMANY_FDE_PURCHASES      ((HRESULT)0x800461E5L)


//
// MessageId: BDK_E_NOPERMISSION
//
// MessageText:
//
//  Access denied.
//
#define BDK_E_NOPERMISSION               ((HRESULT)0x80042711L)


//
// MessageId: BDK_E_CANNOT_REMOVE_SELF
//
// MessageText:
//
//  Cannot remove self from object.
//
#define BDK_E_CANNOT_REMOVE_SELF         ((HRESULT)0x80042712L)


//
// MessageId: BDK_E_BADXML
//
// MessageText:
//
//  XML is either malformed or incorrect for this API.
//
#define BDK_E_BADXML                     ((HRESULT)0x80042713L)


//
// MessageId: BDK_E_INVALIDCOMMENTSIZE
//
// MessageText:
//
//  Comment text length must be between 1 and 512 characters.
//
#define BDK_E_INVALIDCOMMENTSIZE         ((HRESULT)0x80042714L)


//
// MessageId: BDK_E_BADCANCELMODE
//
// MessageText:
//
//  Invalid cancellation mode.
//
#define BDK_E_BADCANCELMODE              ((HRESULT)0x80042715L)


//
// MessageId: BDK_E_INVALID_BUF_SIZE
//
// MessageText:
//
//  Input parameter is the wrong size.
//
#define BDK_E_INVALID_BUF_SIZE           ((HRESULT)0x80042716L)


//
// MessageId: BDK_E_INVALID_ROLE
//
// MessageText:
//
//  Invalid role.
//
#define BDK_E_INVALID_ROLE               ((HRESULT)0x80042717L)


//
// MessageId: BDK_E_INVALID_PPORT_ID
//
// MessageText:
//
//  Invalid Passport ID.
//
#define BDK_E_INVALID_PPORT_ID           ((HRESULT)0x80042718L)


//
// MessageId: BDK_E_INVALID_ARG
//
// MessageText:
//
//  Invalid argument.
//
#define BDK_E_INVALID_ARG                ((HRESULT)0x8004271AL)


//
// MessageId: BDK_E_UNKNOWN_SERVER_FAILURE
//
// MessageText:
//
//  Unknown server failure. API name: %2, Error code: 0x%3, Error description: %1.
//
#define BDK_E_UNKNOWN_SERVER_FAILURE     ((HRESULT)0x8004271FL)


//
// MessageId: BDK_E_INVALID_STATUS_VALUE
//
// MessageText:
//
//  Status must be ENABLED or SUSPENDED.
//
#define BDK_E_INVALID_STATUS_VALUE       ((HRESULT)0x80042720L)


//
// MessageId: BDK_E_INVALID_FILTER
//
// MessageText:
//
//  Filter must be BASE, UPGRADE, DOWNGRADE, RENEWAL, or empty.
//
#define BDK_E_INVALID_FILTER             ((HRESULT)0x80042721L)


//
// MessageId: BDK_E_MISSING_CATEGORY
//
// MessageText:
//
//  Missing category.
//
#define BDK_E_MISSING_CATEGORY           ((HRESULT)0x80042722L)


//
// MessageId: BDK_E_FIELD_TOO_SHORT
//
// MessageText:
//
//  Input field is too short.
//
#define BDK_E_FIELD_TOO_SHORT            ((HRESULT)0x80042723L)


//
// MessageId: BDK_E_FIELD_TOO_LONG
//
// MessageText:
//
//  Input field is too long.
//
#define BDK_E_FIELD_TOO_LONG             ((HRESULT)0x80042724L)


//
// MessageId: BDK_E_BADZIP
//
// MessageText:
//
//  Invalid ZIP code.
//
#define BDK_E_BADZIP                     ((HRESULT)0x80042725L)


//
// MessageId: BDK_E_ONLYONENODE
//
// MessageText:
//
//  Only one of these nodes should be passed.
//
#define BDK_E_ONLYONENODE                ((HRESULT)0x80042726L)


//
// MessageId: BDK_E_CSR_AUTHZ_FAILED
//
// MessageText:
//
//  Only customer service representatives can invoke this API.
//
#define BDK_E_CSR_AUTHZ_FAILED           ((HRESULT)0x80042728L)


//
// MessageId: BDK_E_NOT_ACCOUNT_ADMIN
//
// MessageText:
//
//  Caller is not an account administrator.
//
#define BDK_E_NOT_ACCOUNT_ADMIN          ((HRESULT)0x80042729L)


//
// MessageId: BDK_E_DELEGATE_ID_UNSPECIFIED
//
// MessageText:
//
//  Delegate ID entered was invalid or not specified.
//
#define BDK_E_DELEGATE_ID_UNSPECIFIED    ((HRESULT)0x8004272AL)


//
// MessageId: BDK_E_REQUESTER_ID_UNSPECIFIED
//
// MessageText:
//
//  Requester Passport ID must be specified.
//
#define BDK_E_REQUESTER_ID_UNSPECIFIED   ((HRESULT)0x8004272BL)


//
// MessageId: BDK_E_INVALID_FLAG_VALUE
//
// MessageText:
//
//  Boolean value must be 0 or 1
//
#define BDK_E_INVALID_FLAG_VALUE         ((HRESULT)0x8004272CL)


//
// MessageId: BDK_E_PROVISIONING_INACTIVE_SUBSCRIPTION
//
// MessageText:
//
//  Subscription service instance is inactive.
//
#define BDK_E_PROVISIONING_INACTIVE_SUBSCRIPTION ((HRESULT)0x8004272DL)


//
// MessageId: BDK_E_INVALID_OBJECT_ID
//
// MessageText:
//
//  Invalid object.
//
#define BDK_E_INVALID_OBJECT_ID          ((HRESULT)0x8004272EL)


//
// MessageId: BDK_E_PARTNERNOTINBILLING
//
// MessageText:
//
//  Calling partner is not registered in SPS database.
//
#define BDK_E_PARTNERNOTINBILLING        ((HRESULT)0x80042738L)


//
// MessageId: BDK_E_RATING_FAILURE
//
// MessageText:
//
//  Rating error has occurred. Check the event log and the tracer.
//
#define BDK_E_RATING_FAILURE             ((HRESULT)0x8004273DL)


//
// MessageId: BDK_SVR2_STARTED
//
// MessageText:
//
//  BDKSVR2 started.
//
#define BDK_SVR2_STARTED                 ((HRESULT)0x80042742L)


//
// MessageId: BDK_CSR_API_CALL_MADE
//
// MessageText:
//
//  CSR call made.
//
#define BDK_CSR_API_CALL_MADE            ((HRESULT)0x80042743L)


//
// MessageId: BDK_E_CSR_CALL_FROM_NONCSR
//
// MessageText:
//
//  CSR call attempt by non-CSR caller.
//
#define BDK_E_CSR_CALL_FROM_NONCSR       ((HRESULT)0x80042744L)


//
// MessageId: BDK_E_TRANS_BALANCE_MISMATCHING_ACCTS
//
// MessageText:
//
//  "From" and "to" payment instrument are not on the same account in TransferBalance.
//
#define BDK_E_TRANS_BALANCE_MISMATCHING_ACCTS ((HRESULT)0x8004274CL)


//
// MessageId: BDK_E_TRANS_BALANCE_TO_PI_INVALID
//
// MessageText:
//
//  Invalid "to" payment instrument in TransferBalance.
//
#define BDK_E_TRANS_BALANCE_TO_PI_INVALID ((HRESULT)0x80042751L)


//
// MessageId: BDK_E_TRANS_BALANCE_TO_SAME_PI
//
// MessageText:
//
//  Cannot transfer to same payment instrument in TransferBalance.
//
#define BDK_E_TRANS_BALANCE_TO_SAME_PI   ((HRESULT)0x80042756L)


//
// MessageId: BDK_E_TRANS_BALANCE_NOT_ALLOW
//
// MessageText:
//
//  Cannot transfer balances between payment instrument types.
//
#define BDK_E_TRANS_BALANCE_NOT_ALLOW    ((HRESULT)0x8004275BL)


//
// MessageId: BDK_E_INTERNAL_ERROR
//
// MessageText:
//
//  Internal database inconsistencies detected.
//
#define BDK_E_INTERNAL_ERROR             ((HRESULT)0x80042760L)


//
// MessageId: BDK_E_OUTSTANDING_BALANCE
//
// MessageText:
//
//  Payment instrument has outstanding balance.
//
#define BDK_E_OUTSTANDING_BALANCE        ((HRESULT)0x80042765L)


//
// MessageId: BDK_E_INVALID_REFERRALDATA_XML
//
// MessageText:
//
//  Invalid  data passed in ReferralData node. Verify that the node exists and that it contains valid XML (1-1024 characters).
//
#define BDK_E_INVALID_REFERRALDATA_XML   ((HRESULT)0x8004276AL)


//
// MessageId: BDK_E_INVALID_GUID
//
// MessageText:
//
//  Invalid GUID.
//
#define BDK_E_INVALID_GUID               ((HRESULT)0x8004276FL)


//
// MessageId: E_UNSUPPORTED_PAYMENT_INSTRUMENT
//
// MessageText:
//
//  Payment instrument type not supported for SettleBalance.
//
#define E_UNSUPPORTED_PAYMENT_INSTRUMENT ((HRESULT)0x80042774L)


//
// MessageId: BDK_E_SUBSCRIPTION_INACTIVE
//
// MessageText:
//
//  Subscription is inactive.
//
#define BDK_E_SUBSCRIPTION_INACTIVE      ((HRESULT)0x80042779L)


//
// MessageId: BDK_E_INVALID_PM_FOR_STOP_PAYMENTS
//
// MessageText:
//
//  Payments can only be stopped for direct debit transactions.
//
#define BDK_E_INVALID_PM_FOR_STOP_PAYMENTS ((HRESULT)0x8004277EL)


//
// MessageId: BDK_E_EXCEEDS_MAX_NUMBER_OF_USAGE_EVENTS
//
// MessageText:
//
//  Excessive number of usage events reported in one ReportUsageEvent() call.
//
#define BDK_E_EXCEEDS_MAX_NUMBER_OF_USAGE_EVENTS ((HRESULT)0x80042783L)


//
// MessageId: BDK_E_FIELD_NOT_UPDATEABLE
//
// MessageText:
//
//  Field cannot be updated.
//
#define BDK_E_FIELD_NOT_UPDATEABLE       ((HRESULT)0x80042788L)


//
// MessageId: BDK_E_DEFERRED_COMPUTE_ONLY_NOT_SUPPORTED
//
// MessageText:
//
//  Calling CancelSubscription with an end date and in compute-only mode is not supported.
//
#define BDK_E_DEFERRED_COMPUTE_ONLY_NOT_SUPPORTED ((HRESULT)0x8004278DL)


//
// MessageId: BDK_E_SETTLE_SHOULD_BE_THE_LAST_EVENT
//
// MessageText:
//
//  The SETTLE event should be the last event in the event list for ImportSettleBillingItems.
//
#define BDK_E_SETTLE_SHOULD_BE_THE_LAST_EVENT ((HRESULT)0x8004278EL)


//
// MessageId: BDK_E_PAYMENT_METHOD_NO_LONGER_VALID
//
// MessageText:
//
//  Line item payment method is no longer valid.
//
#define BDK_E_PAYMENT_METHOD_NO_LONGER_VALID ((HRESULT)0x8004278FL)


//
// MessageId: BDK_E_PROCESS_USAGE_EVENTS
//
// MessageText:
//
//  Failed to process all usage events.
//
#define BDK_E_PROCESS_USAGE_EVENTS       ((HRESULT)0x80042790L)


//
// MessageId: BDK_E_WRONG_OBJECT_ID_TYPE
//
// MessageText:
//
//  Object ID does not contain account and subscription information.
//
#define BDK_E_WRONG_OBJECT_ID_TYPE       ((HRESULT)0x80042791L)


//
// MessageId: BDK_E_INVALID_PHONE_VALUE
//
// MessageText:
//
//  Field contains invalid characters for a phone number.
//
#define BDK_E_INVALID_PHONE_VALUE        ((HRESULT)0x80042792L)


//
// MessageId: BDK_E_INVALID_AMOUNT_VALUE
//
// MessageText:
//
//  Invalid amount.
//
#define BDK_E_INVALID_AMOUNT_VALUE       ((HRESULT)0x80042797L)


//
// MessageId: BDK_E_MISMATCH_ACCTID_IN_CLOSEBALANCE
//
// MessageText:
//
//  Payment instrument ID and line item ID do not match.
//
#define BDK_E_MISMATCH_ACCTID_IN_CLOSEBALANCE ((HRESULT)0x80042793L)


//
// MessageId: BDK_E_INTERNAL_ADD_COMMENT_FAILED
//
// MessageText:
//
//  InternalAddComment failed. Escalate error to SPG development.
//
#define BDK_E_INTERNAL_ADD_COMMENT_FAILED ((HRESULT)0x80042794L)


//
// MessageId: BDK_E_INVALID_IMMEDIATE_SETTLE_VALUE
//
// MessageText:
//
//  Immediate settle flag must be false.
//
#define BDK_E_INVALID_IMMEDIATE_SETTLE_VALUE ((HRESULT)0x80042795L)


//
// MessageId: BDK_E_NO_RECORDS_FOR_STOP_PAYMENTS
//
// MessageText:
//
//  No eligible records were found for this call.
//
#define BDK_E_NO_RECORDS_FOR_STOP_PAYMENTS ((HRESULT)0x8004279CL)


//
// MessageId: BDK_E_FAILED_SETTLEMENT_AMOUNT_UPDATE
//
// MessageText:
//
//  Failed to update the settlement amount table with credit card authorization results. This needs to be escalated to SPG development.
//
#define BDK_E_FAILED_SETTLEMENT_AMOUNT_UPDATE ((HRESULT)0x800427A6L)


//
// MessageId: BDK_E_INVALID_TELENUMERIC_STRING
//
// MessageText:
//
//  The supplied telenumeric string does not consist of digits exclusively or exceeds the maximum limit.
//
#define BDK_E_INVALID_TELENUMERIC_STRING ((HRESULT)0x800427B0L)


//
// MessageId: BDK_E_NO_MATCH
//
// MessageText:
//
//  There are no matches for the requested information.
//
#define BDK_E_NO_MATCH                   ((HRESULT)0x800427BAL)


//
// MessageId: BDK_E_MULTIPLE_MATCHES
//
// MessageText:
//
//  There are multiple matches for the requested information.
//
#define BDK_E_MULTIPLE_MATCHES           ((HRESULT)0x800427C4L)


//
// MessageId: BDK_E_BAD_PUID
//
// MessageText:
//
//  PUID entered was invalid.
//
#define BDK_E_BAD_PUID                   ((HRESULT)0x800427CEL)


//
// MessageId: BDK_E_CALLER_NOT_AUTHORIZED
//
// MessageText:
//
//  Caller is not authenticated.
//
#define BDK_E_CALLER_NOT_AUTHORIZED      ((HRESULT)0x800427D3L)


//
// MessageId: BDK_E_BAD_OBJECT_ID_LENGTH
//
// MessageText:
//
//  ObjectId length must be 16.
//
#define BDK_E_BAD_OBJECT_ID_LENGTH       ((HRESULT)0x800427D9L)


//
// MessageId: BDK_E_END_PERIOD_LESS_THAN_START_PERIOD
//
// MessageText:
//
//  Start period can never be greater than End period.
//
#define BDK_E_END_PERIOD_LESS_THAN_START_PERIOD ((HRESULT)0x800427DAL)


//
// MessageId: BDK_E_BAD_BILLING_PERIOD_LENGTH
//
// MessageText:
//
//  Billing period length must be 6.
//
#define BDK_E_BAD_BILLING_PERIOD_LENGTH  ((HRESULT)0x800427DBL)


//
// MessageId: BDK_E_BAD_RETURN_STATEMENT_SET
//
// MessageText:
//
//  Value for returnStatementSet parameter for GetStatement API must be 0, 1, or 2.
//
#define BDK_E_BAD_RETURN_STATEMENT_SET   ((HRESULT)0x800427DCL)


//
// MessageId: BDK_E_INVALID_USAGE_EVENT_DATE
//
// MessageText:
//
//  The usage event date specified was invalid.  One possible reason is that it is too far in the future.
//
#define BDK_E_INVALID_USAGE_EVENT_DATE   ((HRESULT)0x800427DFL)


//
// MessageId: BDK_E_NULL_DEFAULT_BILLING_PERIOD
//
// MessageText:
//
//  The default billing period returned was null, cannot proceed. This could be due to the current date time being less than the account creation date.
//
#define BDK_E_NULL_DEFAULT_BILLING_PERIOD ((HRESULT)0x800427E0L)


//
// MessageId: BDK_E_BAD_START_BILLING_PERIOD
//
// MessageText:
//
//  The start billing period is less than the currently available billing period.
//
#define BDK_E_BAD_START_BILLING_PERIOD   ((HRESULT)0x800427E1L)


//
// MessageId: BDK_E_BAD_END_BILLING_PERIOD
//
// MessageText:
//
//  The end billing period is less than the currently available billing period.
//
#define BDK_E_BAD_END_BILLING_PERIOD     ((HRESULT)0x800427E2L)


//
// MessageId: BDK_E_NEW_DUE_DATE_IS_PAST
//
// MessageText:
//
//  The new due date is in the past
//
#define BDK_E_NEW_DUE_DATE_IS_PAST       ((HRESULT)0x800427E7L)


//
// MessageId: BDK_E_NEW_DUE_DATE_THRESHOLD_PASSED
//
// MessageText:
//
//  The new due date is more than MAXIMUM DELAY days in the future than the original due date
//
#define BDK_E_NEW_DUE_DATE_THRESHOLD_PASSED ((HRESULT)0x800427ECL)


//
// MessageId: BDK_E_NO_NEW_DUE_DATE_SPECIFIED
//
// MessageText:
//
//  If the applydeclineEffect is off, we need a new due date specified
//
#define BDK_E_NO_NEW_DUE_DATE_SPECIFIED  ((HRESULT)0x800427F1L)


//
// MessageId: BDK_E_INVALID_TRANSACTION_TYPE
//
// MessageText:
//
//  Invalid transaction type
//
#define BDK_E_INVALID_TRANSACTION_TYPE   ((HRESULT)0x800427F6L)


//
// MessageId: BDK_E_INVALID_REASON_CODE
//
// MessageText:
//
//  Invalid reason code
//
#define BDK_E_INVALID_REASON_CODE        ((HRESULT)0x800427FBL)


//
// MessageId: BDK_E_GROUP_SID_INITIALIZATION_FAILED
//
// MessageText:
//
//  Initialization of group SIDs from AD failed. It may indicate user group configuration is not correct or DNS failure.
//
#define BDK_E_GROUP_SID_INITIALIZATION_FAILED ((HRESULT)0x8004280BL)


//
// MessageId: BDK_E_INVALID_OPERATION_FOR_WHOLESALE_PI
//
// MessageText:
//
//  This operation is not valid for wholesale payment instruments.
//
#define BDK_E_INVALID_OPERATION_FOR_WHOLESALE_PI ((HRESULT)0x8004280CL)


//
// MessageId: BDK_E_INVALID_OPERATION_FOR_DIRECT_DEBIT
//
// MessageText:
//
//  This operation is not valid for direct debit payment instrument.
//
#define BDK_E_INVALID_OPERATION_FOR_DIRECT_DEBIT ((HRESULT)0x8004280DL)


//
// MessageId: BDK_E_EXCEEDS_RESOURCE_CREDIT_LIMIT
//
// MessageText:
//
//  Adjustment amount exceeds the resource credit limit.
//
#define BDK_E_EXCEEDS_RESOURCE_CREDIT_LIMIT ((HRESULT)0x8004280EL)


//
// MessageId: BDK_E_ADJUST_RESOURCE_BALANCE_FOR_NONACTIVE_SUBS
//
// MessageText:
//
//  Adjusting a resource balance is not allowed for subscriptions that are not active.
//
#define BDK_E_ADJUST_RESOURCE_BALANCE_FOR_NONACTIVE_SUBS ((HRESULT)0x8004280FL)


//
// MessageId: BDK_E_FAILED_TO_CREATE_MAIL_RECORD
//
// MessageText:
//
//  Failed to create mail record for account: %1.
//
#define BDK_E_FAILED_TO_CREATE_MAIL_RECORD ((HRESULT)0x80042810L)


//
// MessageId: BDK_E_MSNIA_LATE_USAGE
//
// MessageText:
//
//  This MSNIA usage event is for a billing period that is not active, in other words late usage is being reported but not billed.
//
#define BDK_E_MSNIA_LATE_USAGE           ((HRESULT)0x80042811L)


//
// MessageId: BDK_E_FAILED_TO_WRITE_TO_AUDIT_DB
//
// MessageText:
//
//  Failed to write asynchronous immediate settlement failure into the audit db for account: %1.
//
#define BDK_E_FAILED_TO_WRITE_TO_AUDIT_DB ((HRESULT)0x80042812L)


//
// MessageId: BDK_E_REWARD_REFERRAL_XML_REQUIRED
//
// MessageText:
//
//  Reward referral XML is required as this is a referral based offer.
//
#define BDK_E_REWARD_REFERRAL_XML_REQUIRED ((HRESULT)0x80042813L)


//
// MessageId: BDK_E_REFERRER_NOT_IN_SYSTEM
//
// MessageText:
//
//  Referral PUID not found.
//
#define BDK_E_REFERRER_NOT_IN_SYSTEM     ((HRESULT)0x80042814L)


//
// MessageId: BDK_E_REFERRER_EXCEEDED_MAX_REFERRALS_ON_OFFER
//
// MessageText:
//
//  Referrer has exceeded the max number of referrals configured on the offer.
//
#define BDK_E_REFERRER_EXCEEDED_MAX_REFERRALS_ON_OFFER ((HRESULT)0x80042815L)


//
// MessageId: BDK_E_REFERRER_NOT_ACTIVE
//
// MessageText:
//
//  The referrer does not have an Active or Locked account in the system.
//
#define BDK_E_REFERRER_NOT_ACTIVE        ((HRESULT)0x80042816L)


//
// MessageId: BDK_E_CANNOT_REFER_SELF
//
// MessageText:
//
//  The referrer cannot refer self for the offer.
//
#define BDK_E_CANNOT_REFER_SELF          ((HRESULT)0x80042817L)


//
// MessageId: BDK_E_OFFER_NOT_CONFIGURED_FOR_REFERRAL
//
// MessageText:
//
//  The referral xml has reward referral info but the offer is not configured for reward referrals.
//
#define BDK_E_OFFER_NOT_CONFIGURED_FOR_REFERRAL ((HRESULT)0x80042818L)


//
// MessageId: BDK_E_INVALID_REWARD_REFFERAL_SCHEMA
//
// MessageText:
//
//  The reward referral schema in the referral xml is invalid.
//
#define BDK_E_INVALID_REWARD_REFFERAL_SCHEMA ((HRESULT)0x80042819L)


//
// MessageId: BDK_E_REFERRER_NOT_ELIGIBLE_FOR_REWARD_OFFER
//
// MessageText:
//
//  The referrer does not have any eligible offers configured for the reward.
//
#define BDK_E_REFERRER_NOT_ELIGIBLE_FOR_REWARD_OFFER ((HRESULT)0x8004281AL)


//
// MessageId: BDK_E_SETTLE_BALANCE_INVALID_MANDATE_STATUS
//
// MessageText:
//
//  Invalid mandate status for SettleBalance.
//
#define BDK_E_SETTLE_BALANCE_INVALID_MANDATE_STATUS ((HRESULT)0x8004281BL)


//
// MessageId: BDK_E_MULTIPLE_USAGE_EVENTS_REPORTED
//
// MessageText:
//
//  More than one usage event reported to ReportSingleUsageEvent API
//
#define BDK_E_MULTIPLE_USAGE_EVENTS_REPORTED ((HRESULT)0x8004281CL)


//
// MessageId: BDK_E_BELOW_IMMEDIATE_SETTLE_MINIMUM
//
// MessageText:
//
//  The reported usage is below the threshold in immediate settle usage.
//
#define BDK_E_BELOW_IMMEDIATE_SETTLE_MINIMUM ((HRESULT)0x8004281DL)


//
// MessageId: BDK_E_REPORT_USAGE_WITH_IMMEDIATE_SETTLE
//
// MessageText:
//
//  ReportUsage cannot be used for immediate settle of usage deals; use ReportSingleUsage.
//
#define BDK_E_REPORT_USAGE_WITH_IMMEDIATE_SETTLE ((HRESULT)0x8004281EL)


//
// MessageId: BDK_E_REPORT_USAGE_WITH_PREPAID
//
// MessageText:
//
//  ReportUsage cannot be used for prepaid resource; use ReportSingleUsage.
//
#define BDK_E_REPORT_USAGE_WITH_PREPAID  ((HRESULT)0x8004281FL)


//
// MessageId: BDK_E_NO_USAGE_EVENT_REPORTED
//
// MessageText:
//
//  ReportSingleUsage cannot be used with empty event set.
//
#define BDK_E_NO_USAGE_EVENT_REPORTED    ((HRESULT)0x80042820L)


//
// MessageId: BDK_E_IMMEDIATE_SETTLE_NOT_AVAILABLE_FOR_PAYMENT_INSTRUMENT
//
// MessageText:
//
//  The payment instrument type does not support immediate settlements
//
#define BDK_E_IMMEDIATE_SETTLE_NOT_AVAILABLE_FOR_PAYMENT_INSTRUMENT ((HRESULT)0x80042821L)


//
// MessageId: BDK_E_RESOURCE_UNIT_OF_MEASURE_DO_NOT_MATCH
//
// MessageText:
//
//  The reported resource and unit of measure do not match.
//
#define BDK_E_RESOURCE_UNIT_OF_MEASURE_DO_NOT_MATCH ((HRESULT)0x80042822L)


//
// MessageId: BDK_E_TAXWARE_FAILURE
//
// MessageText:
//
//  Taxware error. Check the event log and the tracer.
//
#define BDK_E_TAXWARE_FAILURE            ((HRESULT)0x8004EA60L)


//
// MessageId: BDK_E_ADDRESS_VALIDATION_FAILURE
//
// MessageText:
//
//  Address validation error. Check the event log and the tracer.
//
#define BDK_E_ADDRESS_VALIDATION_FAILURE ((HRESULT)0x8004EA61L)


//
// MessageId: BDK_E_ZIP_INVALID
//
// MessageText:
//
//  VERAZIP: Invalid ZIP code.
//
#define BDK_E_ZIP_INVALID                ((HRESULT)0x8004EA6BL)


//
// MessageId: BDK_E_STATE_INVALID
//
// MessageText:
//
//  VERAZIP: Invalid state code.
//
#define BDK_E_STATE_INVALID              ((HRESULT)0x8004EA6CL)


//
// MessageId: BDK_E_ZIP_CITY_MISSING
//
// MessageText:
//
//  VERAZIP: Missing ZIP code or city name.
//
#define BDK_E_ZIP_CITY_MISSING           ((HRESULT)0x8004EA6DL)


//
// MessageId: BDK_E_STATE_ZIP_INVALID
//
// MessageText:
//
//  VERAZIP: Invalid state code/ZIP code combination.
//
#define BDK_E_STATE_ZIP_INVALID          ((HRESULT)0x8004EA6EL)


//
// MessageId: BDK_E_STATE_CITY_INVALID
//
// MessageText:
//
//  VERAZIP: Invalid state code/city name combination.
//
#define BDK_E_STATE_CITY_INVALID         ((HRESULT)0x8004EA6FL)


//
// MessageId: BDK_E_STATE_ZIP_CITY_INVALID
//
// MessageText:
//
//  VERAZIP: Invalid state code/ZIP code/city name combinations. Both state code/ZIP code and state code/city name were incorrect.
//
#define BDK_E_STATE_ZIP_CITY_INVALID     ((HRESULT)0x8004EA70L)


//
// MessageId: BDK_E_STATE_ZIP_CITY_INVALID2
//
// MessageText:
//
//  VERAZIP: Invalid state code/ZIP code/city name combination.
//
#define BDK_E_STATE_ZIP_CITY_INVALID2    ((HRESULT)0x8004EA71L)


//
// MessageId: BDK_E_STATE_ZIP_CITY_INVALID3
//
// MessageText:
//
//  VERAZIP: Invalid state code/ZIP code/city name combination.
//
#define BDK_E_STATE_ZIP_CITY_INVALID3    ((HRESULT)0x8004EA72L)


//
// MessageId: BDK_E_STATE_ZIP_CITY_INVALID4
//
// MessageText:
//
//  VERAZIP: Invalid state code/ZIP code/city name combination. Verify that state code was passed.
//
#define BDK_E_STATE_ZIP_CITY_INVALID4    ((HRESULT)0x8004EA73L)


//
// MessageId: BDK_E_MULTIPLE_COUNTIES_FOUND
//
// MessageText:
//
//  VERAZIP: Multiple counties exist for state code/ZIP code/city name combination.
//
#define BDK_E_MULTIPLE_COUNTIES_FOUND    ((HRESULT)0x8004EA7DL)


//
// MessageId: BDK_E_ZIP_INVALID_FOR_ENTERED_STATE
//
// MessageText:
//
//  VERAZIP: Invalid state code for ZIP code. Changed to correct state code.
//
#define BDK_E_ZIP_INVALID_FOR_ENTERED_STATE ((HRESULT)0x8004EA7EL)


//
// MessageId: BDK_E_STATE_ZIP_COVERS_MULTIPLE_CITIES
//
// MessageText:
//
//  VERAZIP: ZIP code has multiple city names.
//
#define BDK_E_STATE_ZIP_COVERS_MULTIPLE_CITIES ((HRESULT)0x8004EA89L)


//
// MessageId: BDK_E_MULTIPLE_CITIES_FOUND
//
// MessageText:
//
//  VERAZIP: City has multiple ZIP codes.
//
#define BDK_E_MULTIPLE_CITIES_FOUND      ((HRESULT)0x8004EA8AL)


//
// MessageId: BDK_E_BAD_CITYNAME_LENGTH
//
// MessageText:
//
//  Incorrect city name length.
//
#define BDK_E_BAD_CITYNAME_LENGTH        ((HRESULT)0x8004EA8BL)


//
// MessageId: BDK_E_BAD_COUNTRYCODE_LENGTH
//
// MessageText:
//
//  Incorrect country code length.
//
#define BDK_E_BAD_COUNTRYCODE_LENGTH     ((HRESULT)0x8004EA8CL)


//
// MessageId: BDK_E_BAD_STATECODE_LENGTH
//
// MessageText:
//
//  Incorrect code length for state or province.
//
#define BDK_E_BAD_STATECODE_LENGTH       ((HRESULT)0x8004EA8DL)


//
// MessageId: BDK_E_BAD_ZIPCODE_LENGTH
//
// MessageText:
//
//  Incorrect zip code length.
//
#define BDK_E_BAD_ZIPCODE_LENGTH         ((HRESULT)0x8004EA8EL)


//
// MessageId: BDK_E_BAD_PRODUCTCODE_LENGTH
//
// MessageText:
//
//  Incorrect product code length.
//
#define BDK_E_BAD_PRODUCTCODE_LENGTH     ((HRESULT)0x8004EA8FL)


//
// MessageId: BDK_E_BAD_BUSINESSLOCATIONCODE_LENGTH
//
// MessageText:
//
//  Incorrect business location code length.
//
#define BDK_E_BAD_BUSINESSLOCATIONCODE_LENGTH ((HRESULT)0x8004EA90L)


//
// MessageId: BDK_E_BAD_TRANSACTIONDATE_LENGTH
//
// MessageText:
//
//  Incorrect transaction date length.
//
#define BDK_E_BAD_TRANSACTIONDATE_LENGTH ((HRESULT)0x8004EA91L)


//
// MessageId: BDK_E_BAD_VATREGISTRATION_LENGTH
//
// MessageText:
//
//  Incorrect VAT registration length.
//
#define BDK_E_BAD_VATREGISTRATION_LENGTH ((HRESULT)0x8004EA92L)


//
// MessageId: BDK_E_BAD_CURRENCYCODE_LENGTH
//
// MessageText:
//
//  Incorrect currency code length.
//
#define BDK_E_BAD_CURRENCYCODE_LENGTH    ((HRESULT)0x8004EA93L)


//
// MessageId: BDK_E_BAD_WTCODE_LENGTH
//
// MessageText:
//
//  Incorrect WorldTax code length.
//
#define BDK_E_BAD_WTCODE_LENGTH          ((HRESULT)0x8004EA94L)


//
// MessageId: BDK_E_INVALID_INPUT_TO_TAXWARE_OR_VERAZIP
//
// MessageText:
//
//  Invalid input parameter passed to TaxWare or VeraZip.
//
#define BDK_E_INVALID_INPUT_TO_TAXWARE_OR_VERAZIP ((HRESULT)0x8004EA95L)


//
// MessageId: BDK_E_UNSUPPORTED_CHAR_EXIST
//
// MessageText:
//
//  Input string contains unsupported characters.
//
#define BDK_E_UNSUPPORTED_CHAR_EXIST     ((HRESULT)0x8004EA9CL)


//
// MessageId: BDK_E_ERROR_COUNTRYCODE_MISMATCH
//
// MessageText:
//
//  Country code in Address does not match with the country code in Account Info.
//
#define BDK_E_ERROR_COUNTRYCODE_MISMATCH ((HRESULT)0x8004EAA1L)


//
// MessageId: BDK_E_ERROR_COUNTRYCODE_REQUIRED
//
// MessageText:
//
//  A Country code is required in Account Info.
//
#define BDK_E_ERROR_COUNTRYCODE_REQUIRED ((HRESULT)0x8004EAA6L)


//
// MessageId: BDK_E_INVALID_TOKEN_SPECIFIED
//
// MessageText:
//
//  Token passed is Invalid.
//
#define BDK_E_INVALID_TOKEN_SPECIFIED    ((HRESULT)0x8004138DL)


//
// MessageId: BDK_E_TOKEN_ALREADY_BLACKLISTED
//
// MessageText:
//
//  The token is already blacklisted.
//
#define BDK_E_TOKEN_ALREADY_BLACKLISTED  ((HRESULT)0x80041392L)


//
// MessageId: BDK_E_TOKEN_ALREADY_UNBLACKLISTED
//
// MessageText:
//
//  The token is already un-blacklisted.
//
#define BDK_E_TOKEN_ALREADY_UNBLACKLISTED ((HRESULT)0x80041393L)


//
// MessageId: BDK_E_TOKEN_BLACKLISTED
//
// MessageText:
//
//  The specified token has been blacklisted.
//
#define BDK_E_TOKEN_BLACKLISTED          ((HRESULT)0x800413BFL)


//
// MessageId: BDK_E_TOKEN_RANGE_BLACKLISTED
//
// MessageText:
//
//  The specified token belongs to a blacklisted token range.
//
#define BDK_E_TOKEN_RANGE_BLACKLISTED    ((HRESULT)0x800413C4L)


//
// MessageId: BDK_E_USAGE_COUNT_FOR_TOKEN_EXCEEDED
//
// MessageText:
//
//  The usage for the specified token has been exceeded.
//
#define BDK_E_USAGE_COUNT_FOR_TOKEN_EXCEEDED ((HRESULT)0x800413C9L)


//
// MessageId: BDK_E_TOKEN_EXPIRY_DATE_SET_AS_NULL
//
// MessageText:
//
//  Token Expiry date not set as may be duration based token was not activated correctly.
//
#define BDK_E_TOKEN_EXPIRY_DATE_SET_AS_NULL ((HRESULT)0x800413CEL)


//
// MessageId: BDK_E_FAILED_INSERTING_TOKEN_INS_DEAL_SUBS
//
// MessageText:
//
//  Failed while consumption to create an entry in token_instance_deal_subscription table.
//
#define BDK_E_FAILED_INSERTING_TOKEN_INS_DEAL_SUBS ((HRESULT)0x800413CFL)


//
// MessageId: BDK_E_ACTIVATE_TOKEN_RANGE_NOT_PRESENT
//
// MessageText:
//
//  Not found non-active token range to be activated.
//
#define BDK_E_ACTIVATE_TOKEN_RANGE_NOT_PRESENT ((HRESULT)0x800413D3L)


//
// MessageId: BDK_E_TOKEN_EXPIRED
//
// MessageText:
//
//  The specified token has expired.
//
#define BDK_E_TOKEN_EXPIRED              ((HRESULT)0x800413F1L)


//
// MessageId: BDK_E_TOKEN_NOT_STARTED
//
// MessageText:
//
//  The specified token cannot be used yet.
//
#define BDK_E_TOKEN_NOT_STARTED          ((HRESULT)0x800413F6L)


//
// MessageId: BDK_E_TOKEN_RANGE_NOT_ACTIVE
//
// MessageText:
//
//  The specified token has not been activated yet.
//
#define BDK_E_TOKEN_RANGE_NOT_ACTIVE     ((HRESULT)0x800413FBL)


//
// MessageId: BDK_E_INVALID_BLACKLIST_HISTORY_REASON_CODE
//
// MessageText:
//
//  The reason code specified is not valid.
//
#define BDK_E_INVALID_BLACKLIST_HISTORY_REASON_CODE ((HRESULT)0x8004141EL)


//
// MessageId: BDK_E_TRACKING_GUID_NODATA
//
// MessageText:
//
//  The specified action is in progress.
//
#define BDK_E_TRACKING_GUID_NODATA       ((HRESULT)0x8004145AL)


//
// MessageId: BDK_E_DUPLICATE_TOKEN_TRACKING_GUID
//
// MessageText:
//
//  The specified tracking has already been used
//
#define BDK_E_DUPLICATE_TOKEN_TRACKING_GUID ((HRESULT)0x8004145FL)


//
// MessageId: BDK_E_ALREADY_ACTIVATED
//
// MessageText:
//
//  The specified token has already been activated
//
#define BDK_E_ALREADY_ACTIVATED          ((HRESULT)0x8004146EL)


//
// MessageId: BDK_E_INVALID_COMMITTED_STATUS
//
// MessageText:
//
//  Committed status is not 0, 1, or 2 or illegal for this API.
//
#define BDK_E_INVALID_COMMITTED_STATUS   ((HRESULT)0x80041470L)


//
// MessageId: BDK_E_INVALID_BLACKLIST_HISTORY_DESCRIPTION
//
// MessageText:
//
//  The description specified is not valid.
//
#define BDK_E_INVALID_BLACKLIST_HISTORY_DESCRIPTION ((HRESULT)0x80041473L)


//
// MessageId: BDK_E_BLACKLIST_EFFECTIVE_DATE_LESS_THAN_ORDER_CREATION_DATE
//
// MessageText:
//
//  Blacklist Effective date passed was prior to the order creation date.
//
#define BDK_E_BLACKLIST_EFFECTIVE_DATE_LESS_THAN_ORDER_CREATION_DATE ((HRESULT)0x80041478L)


//
// MessageId: BDK_E_TOKEN_CONSUMED
//
// MessageText:
//
//  The Token has been consumed.
//
#define BDK_E_TOKEN_CONSUMED             ((HRESULT)0x8004147DL)


//
// MessageId: BDK_E_INVALID_PART_NUMBER_FOR_TOKEN_CLASS
//
// MessageText:
//
//  Part Number specified for the token import is not a valid part number for the associated token class.
//
#define BDK_E_INVALID_PART_NUMBER_FOR_TOKEN_CLASS ((HRESULT)0x80041482L)


//
// MessageId: BDK_E_INVALID_EXTERNAL_REFERENCE_ID
//
// MessageText:
//
//  External reference id is too long or invalid.
//
#define BDK_E_INVALID_EXTERNAL_REFERENCE_ID ((HRESULT)0x80041483L)


//
// MessageId: BDK_E_TOKEN_ALREADY_DEACTIVATED
//
// MessageText:
//
//  The token is already deactivated.
//
#define BDK_E_TOKEN_ALREADY_DEACTIVATED  ((HRESULT)0x80041487L)


//
// MessageId: BDK_E_REPLACEMENT_TOKEN_PUID_MISMATCH
//
// MessageText:
//
//  Token Passed in for consumption is a replacement token for which PUID specified at the time of replacement does not match the account admin PUID.
//
#define BDK_E_REPLACEMENT_TOKEN_PUID_MISMATCH ((HRESULT)0x80041491L)


//
// MessageId: ERROR_NULL_INPUT_PARAMETER_TOKEN_CLASS_GUID
//
// MessageText:
//
//  Null parameter was passed for Token Class GUID during token class access verification.
//
#define ERROR_NULL_INPUT_PARAMETER_TOKEN_CLASS_GUID ((HRESULT)0x80041496L)


//
// MessageId: BDK_E_INVALID_BOOKMARK
//
// MessageText:
//
//  The argument specified is not a valid bookmark.
//
#define BDK_E_INVALID_BOOKMARK           ((HRESULT)0x80041484L)


//
// MessageId: BDK_E_INVALID_MAX
//
// MessageText:
//
//  The max argument must be between 1 and 50.
//
#define BDK_E_INVALID_MAX                ((HRESULT)0x80041485L)


//
// MessageId: BDK_E_PROCESSIMPORT_OFFSET_LINE_MISSING_FIELD
//
// MessageText:
//
//  Unable to retrieve event ID and billing impact for event.
//
#define BDK_E_PROCESSIMPORT_OFFSET_LINE_MISSING_FIELD ((HRESULT)0x8004CD14L)


//
// MessageId: BDK_E_PROCESSIMPORT_OFFSET_LINE_MISSING_MATCH_EVENT
//
// MessageText:
//
//  Unable to find line item matching event.
//
#define BDK_E_PROCESSIMPORT_OFFSET_LINE_MISSING_MATCH_EVENT ((HRESULT)0x8004CD46L)


//
// MessageId: BDK_E_CANCELREFUND_OFFSET_OF_OFFSET
//
// MessageText:
//
//  Cannot process if there is an offset of an offset.
//
#define BDK_E_CANCELREFUND_OFFSET_OF_OFFSET ((HRESULT)0x8004CD78L)


//
// MessageId: BDK_E_CANCELREFUND_BOTH_LINE_AND_RELATED_LINE
//
// MessageText:
//
//  This can't happen, both line item and related line item in the active list.
//
#define BDK_E_CANCELREFUND_BOTH_LINE_AND_RELATED_LINE ((HRESULT)0x8004CDAAL)


//
// MessageId: BDK_E_INVALID_SESSION_KEY
//
// MessageText:
//
//  The session key passed in does not pass validation checks.
//
#define BDK_E_INVALID_SESSION_KEY        ((HRESULT)0x8004768EL)


//
// MessageId: BDK_E_NO_PRODUCT_KEY_FOR_OBJECT_ID
//
// MessageText:
//
//  This object ID is not entitled to get a deliverable token.
//
#define BDK_E_NO_PRODUCT_KEY_FOR_OBJECT_ID ((HRESULT)0x8004A0B4L)


//
// MessageId: BDK_E_PRODUCT_KEY_NOT_AVAILABLE
//
// MessageText:
//
//  The token cannot be issued, either because the database is unavailable or there are no more unused tokens.
//
#define BDK_E_PRODUCT_KEY_NOT_AVAILABLE  ((HRESULT)0x80041488L)


//
// MessageId: BDK_E_PIN_OR_SEQ_REQUIRED
//
// MessageText:
//
//  Either PIN or Sequence number is required as input parameter to validate Token.
//
#define BDK_E_PIN_OR_SEQ_REQUIRED        ((HRESULT)0x80041489L)


//
// MessageId: BDK_E_INPUT_PARAM_MALFORMED
//
// MessageText:
//
//  Either Token Class Guid or Signature or Part Number should be specified for validating Token.
//
#define BDK_E_INPUT_PARAM_MALFORMED      ((HRESULT)0x8004148AL)


//
// MessageId: BDK_E_INVALID_ADJUSTMENT_OFFSET
//
// MessageText:
//
//  The offset must be between -1 and 365 inclusive.
//
#define BDK_E_INVALID_ADJUSTMENT_OFFSET  ((HRESULT)0x8004CDB7L)

//Please avoid using message id starting with 60000, reserved for TaxWare
#endif //__bdkerror_h__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\SCS\4.0\inc\psoencrypter.h ===
#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 6.00.0347 */
/* Compiler settings for psoencrypter.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __psoencrypter_h__
#define __psoencrypter_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IPsoEncrypter_FWD_DEFINED__
#define __IPsoEncrypter_FWD_DEFINED__
typedef interface IPsoEncrypter IPsoEncrypter;
#endif 	/* __IPsoEncrypter_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "ocidl.h"

#ifdef __cplusplus
extern "C"{
#endif 

void * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void * ); 

#ifndef __IPsoEncrypter_INTERFACE_DEFINED__
#define __IPsoEncrypter_INTERFACE_DEFINED__

/* interface IPsoEncrypter */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IPsoEncrypter;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("77298B76-8915-40c8-93E6-FBE5DDEDC5C1")
    IPsoEncrypter : public IDispatch
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Initialize( void) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Provider( 
            /* [retval][out] */ BSTR *pbstrVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_ErrorCode( 
            /* [in] */ LONG lErrorCode) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ErrorCode( 
            /* [retval][out] */ LONG *lErrorCode) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_ErrorDescription( 
            /* [in] */ BSTR bstrVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ErrorDescription( 
            /* [retval][out] */ BSTR *pbstrVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Encrypt( 
            /* [in] */ BSTR bstrBlob,
            /* [in] */ BSTR bstrKey,
            /* [retval][out] */ BSTR *pbstrResult) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ConvertObjectIDToAcctID( 
            /* [in] */ BSTR bstrVal,
            /* [retval][out] */ BSTR *pbstrValOut) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GenerateGUID( 
            /* [retval][out] */ BSTR *pbstrVal) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ConvertServiceRefIDToSubID( 
            /* [in] */ BSTR bstrVal,
            /* [retval][out] */ BSTR *pbstrValOut) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GenerateSessionKey( 
            /* [retval][out] */ BSTR *pbstrSessionKey) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Decrypt( 
            /* [in] */ BSTR bstrEncryptedText,
            /* [in] */ BSTR bstrSessionKey,
            /* [retval][out] */ BSTR *pbstrResult) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE GenerateSessionKeyEx( 
            /* [retval][out] */ BSTR *pbstrSessionKey) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE EncryptEx( 
            /* [in] */ BSTR bstrBlob,
            /* [in] */ BSTR bstrKey,
            /* [retval][out] */ BSTR *pbstrResult) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPsoEncrypterVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPsoEncrypter * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPsoEncrypter * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPsoEncrypter * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IPsoEncrypter * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IPsoEncrypter * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IPsoEncrypter * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IPsoEncrypter * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Initialize )( 
            IPsoEncrypter * This);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Provider )( 
            IPsoEncrypter * This,
            /* [retval][out] */ BSTR *pbstrVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ErrorCode )( 
            IPsoEncrypter * This,
            /* [in] */ LONG lErrorCode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ErrorCode )( 
            IPsoEncrypter * This,
            /* [retval][out] */ LONG *lErrorCode);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ErrorDescription )( 
            IPsoEncrypter * This,
            /* [in] */ BSTR bstrVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ErrorDescription )( 
            IPsoEncrypter * This,
            /* [retval][out] */ BSTR *pbstrVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Encrypt )( 
            IPsoEncrypter * This,
            /* [in] */ BSTR bstrBlob,
            /* [in] */ BSTR bstrKey,
            /* [retval][out] */ BSTR *pbstrResult);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ConvertObjectIDToAcctID )( 
            IPsoEncrypter * This,
            /* [in] */ BSTR bstrVal,
            /* [retval][out] */ BSTR *pbstrValOut);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GenerateGUID )( 
            IPsoEncrypter * This,
            /* [retval][out] */ BSTR *pbstrVal);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ConvertServiceRefIDToSubID )( 
            IPsoEncrypter * This,
            /* [in] */ BSTR bstrVal,
            /* [retval][out] */ BSTR *pbstrValOut);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GenerateSessionKey )( 
            IPsoEncrypter * This,
            /* [retval][out] */ BSTR *pbstrSessionKey);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Decrypt )( 
            IPsoEncrypter * This,
            /* [in] */ BSTR bstrEncryptedText,
            /* [in] */ BSTR bstrSessionKey,
            /* [retval][out] */ BSTR *pbstrResult);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *GenerateSessionKeyEx )( 
            IPsoEncrypter * This,
            /* [retval][out] */ BSTR *pbstrSessionKey);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *EncryptEx )( 
            IPsoEncrypter * This,
            /* [in] */ BSTR bstrBlob,
            /* [in] */ BSTR bstrKey,
            /* [retval][out] */ BSTR *pbstrResult);
        
        END_INTERFACE
    } IPsoEncrypterVtbl;

    interface IPsoEncrypter
    {
        CONST_VTBL struct IPsoEncrypterVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPsoEncrypter_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IPsoEncrypter_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IPsoEncrypter_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IPsoEncrypter_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IPsoEncrypter_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IPsoEncrypter_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IPsoEncrypter_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IPsoEncrypter_Initialize(This)	\
    (This)->lpVtbl -> Initialize(This)

#define IPsoEncrypter_get_Provider(This,pbstrVal)	\
    (This)->lpVtbl -> get_Provider(This,pbstrVal)

#define IPsoEncrypter_put_ErrorCode(This,lErrorCode)	\
    (This)->lpVtbl -> put_ErrorCode(This,lErrorCode)

#define IPsoEncrypter_get_ErrorCode(This,lErrorCode)	\
    (This)->lpVtbl -> get_ErrorCode(This,lErrorCode)

#define IPsoEncrypter_put_ErrorDescription(This,bstrVal)	\
    (This)->lpVtbl -> put_ErrorDescription(This,bstrVal)

#define IPsoEncrypter_get_ErrorDescription(This,pbstrVal)	\
    (This)->lpVtbl -> get_ErrorDescription(This,pbstrVal)

#define IPsoEncrypter_Encrypt(This,bstrBlob,bstrKey,pbstrResult)	\
    (This)->lpVtbl -> Encrypt(This,bstrBlob,bstrKey,pbstrResult)

#define IPsoEncrypter_ConvertObjectIDToAcctID(This,bstrVal,pbstrValOut)	\
    (This)->lpVtbl -> ConvertObjectIDToAcctID(This,bstrVal,pbstrValOut)

#define IPsoEncrypter_GenerateGUID(This,pbstrVal)	\
    (This)->lpVtbl -> GenerateGUID(This,pbstrVal)

#define IPsoEncrypter_ConvertServiceRefIDToSubID(This,bstrVal,pbstrValOut)	\
    (This)->lpVtbl -> ConvertServiceRefIDToSubID(This,bstrVal,pbstrValOut)

#define IPsoEncrypter_GenerateSessionKey(This,pbstrSessionKey)	\
    (This)->lpVtbl -> GenerateSessionKey(This,pbstrSessionKey)

#define IPsoEncrypter_Decrypt(This,bstrEncryptedText,bstrSessionKey,pbstrResult)	\
    (This)->lpVtbl -> Decrypt(This,bstrEncryptedText,bstrSessionKey,pbstrResult)

#define IPsoEncrypter_GenerateSessionKeyEx(This,pbstrSessionKey)	\
    (This)->lpVtbl -> GenerateSessionKeyEx(This,pbstrSessionKey)

#define IPsoEncrypter_EncryptEx(This,bstrBlob,bstrKey,pbstrResult)	\
    (This)->lpVtbl -> EncryptEx(This,bstrBlob,bstrKey,pbstrResult)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IPsoEncrypter_Initialize_Proxy( 
    IPsoEncrypter * This);


void __RPC_STUB IPsoEncrypter_Initialize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE IPsoEncrypter_get_Provider_Proxy( 
    IPsoEncrypter * This,
    /* [retval][out] */ BSTR *pbstrVal);


void __RPC_STUB IPsoEncrypter_get_Provider_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE IPsoEncrypter_put_ErrorCode_Proxy( 
    IPsoEncrypter * This,
    /* [in] */ LONG lErrorCode);


void __RPC_STUB IPsoEncrypter_put_ErrorCode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE IPsoEncrypter_get_ErrorCode_Proxy( 
    IPsoEncrypter * This,
    /* [retval][out] */ LONG *lErrorCode);


void __RPC_STUB IPsoEncrypter_get_ErrorCode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE IPsoEncrypter_put_ErrorDescription_Proxy( 
    IPsoEncrypter * This,
    /* [in] */ BSTR bstrVal);


void __RPC_STUB IPsoEncrypter_put_ErrorDescription_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE IPsoEncrypter_get_ErrorDescription_Proxy( 
    IPsoEncrypter * This,
    /* [retval][out] */ BSTR *pbstrVal);


void __RPC_STUB IPsoEncrypter_get_ErrorDescription_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IPsoEncrypter_Encrypt_Proxy( 
    IPsoEncrypter * This,
    /* [in] */ BSTR bstrBlob,
    /* [in] */ BSTR bstrKey,
    /* [retval][out] */ BSTR *pbstrResult);


void __RPC_STUB IPsoEncrypter_Encrypt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IPsoEncrypter_ConvertObjectIDToAcctID_Proxy( 
    IPsoEncrypter * This,
    /* [in] */ BSTR bstrVal,
    /* [retval][out] */ BSTR *pbstrValOut);


void __RPC_STUB IPsoEncrypter_ConvertObjectIDToAcctID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IPsoEncrypter_GenerateGUID_Proxy( 
    IPsoEncrypter * This,
    /* [retval][out] */ BSTR *pbstrVal);


void __RPC_STUB IPsoEncrypter_GenerateGUID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IPsoEncrypter_ConvertServiceRefIDToSubID_Proxy( 
    IPsoEncrypter * This,
    /* [in] */ BSTR bstrVal,
    /* [retval][out] */ BSTR *pbstrValOut);


void __RPC_STUB IPsoEncrypter_ConvertServiceRefIDToSubID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IPsoEncrypter_GenerateSessionKey_Proxy( 
    IPsoEncrypter * This,
    /* [retval][out] */ BSTR *pbstrSessionKey);


void __RPC_STUB IPsoEncrypter_GenerateSessionKey_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IPsoEncrypter_Decrypt_Proxy( 
    IPsoEncrypter * This,
    /* [in] */ BSTR bstrEncryptedText,
    /* [in] */ BSTR bstrSessionKey,
    /* [retval][out] */ BSTR *pbstrResult);


void __RPC_STUB IPsoEncrypter_Decrypt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IPsoEncrypter_GenerateSessionKeyEx_Proxy( 
    IPsoEncrypter * This,
    /* [retval][out] */ BSTR *pbstrSessionKey);


void __RPC_STUB IPsoEncrypter_GenerateSessionKeyEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IPsoEncrypter_EncryptEx_Proxy( 
    IPsoEncrypter * This,
    /* [in] */ BSTR bstrBlob,
    /* [in] */ BSTR bstrKey,
    /* [retval][out] */ BSTR *pbstrResult);


void __RPC_STUB IPsoEncrypter_EncryptEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IPsoEncrypter_INTERFACE_DEFINED__ */


/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR * ); 
void                      __RPC_USER  BSTR_UserFree(     unsigned long *, BSTR * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\SCS\4.0\inc\psoconnector.h ===
#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 6.00.0347 */
/* Compiler settings for psoconnector.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __psoconnector_h__
#define __psoconnector_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IPsoConnector_FWD_DEFINED__
#define __IPsoConnector_FWD_DEFINED__
typedef interface IPsoConnector IPsoConnector;
#endif 	/* __IPsoConnector_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "ocidl.h"
#include "mssoap.h"

#ifdef __cplusplus
extern "C"{
#endif 

void * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void * ); 

#ifndef __IPsoConnector_INTERFACE_DEFINED__
#define __IPsoConnector_INTERFACE_DEFINED__

/* interface IPsoConnector */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IPsoConnector;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ECFEB027-7719-4537-8E5D-40AA0ECE4896")
    IPsoConnector : public IDispatch
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Connect( 
            /* [retval][out] */ ISOAPClient **psoapClient) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Initialize( void) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Version( 
            /* [retval][out] */ BSTR *pbstrVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_PoolConnections( 
            /* [in] */ LONG lConnectionCount) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PoolConnections( 
            /* [retval][out] */ LONG *lConnectionCount) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_WsdlLocation( 
            /* [in] */ BSTR bstrVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_WsdlLocation( 
            /* [retval][out] */ BSTR *pbstrVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_PartnerEnvironment( 
            /* [in] */ BSTR bstrVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PartnerEnvironment( 
            /* [retval][out] */ BSTR *pbstrVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_PartnerUsername( 
            /* [in] */ BSTR bstrVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PartnerUsername( 
            /* [retval][out] */ BSTR *pbstrVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_PartnerPassword( 
            /* [in] */ BSTR bstrVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PartnerPassword( 
            /* [retval][out] */ BSTR *pbstrVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_ErrorCode( 
            /* [in] */ LONG lErrorCode) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ErrorCode( 
            /* [retval][out] */ LONG *lErrorCode) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_ErrorDescription( 
            /* [in] */ BSTR bstrVal) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ErrorDescription( 
            /* [retval][out] */ BSTR *pbstrVal) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_CoImpersonateClient( 
            /* [in] */ VARIANT_BOOL vImpersonate) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CoImpersonateClient( 
            /* [retval][out] */ VARIANT_BOOL *vImpersonate) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RefreshConnection( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IPsoConnectorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IPsoConnector * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IPsoConnector * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IPsoConnector * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IPsoConnector * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IPsoConnector * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IPsoConnector * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IPsoConnector * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Connect )( 
            IPsoConnector * This,
            /* [retval][out] */ ISOAPClient **psoapClient);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Initialize )( 
            IPsoConnector * This);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Version )( 
            IPsoConnector * This,
            /* [retval][out] */ BSTR *pbstrVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PoolConnections )( 
            IPsoConnector * This,
            /* [in] */ LONG lConnectionCount);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PoolConnections )( 
            IPsoConnector * This,
            /* [retval][out] */ LONG *lConnectionCount);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_WsdlLocation )( 
            IPsoConnector * This,
            /* [in] */ BSTR bstrVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_WsdlLocation )( 
            IPsoConnector * This,
            /* [retval][out] */ BSTR *pbstrVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PartnerEnvironment )( 
            IPsoConnector * This,
            /* [in] */ BSTR bstrVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PartnerEnvironment )( 
            IPsoConnector * This,
            /* [retval][out] */ BSTR *pbstrVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PartnerUsername )( 
            IPsoConnector * This,
            /* [in] */ BSTR bstrVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PartnerUsername )( 
            IPsoConnector * This,
            /* [retval][out] */ BSTR *pbstrVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_PartnerPassword )( 
            IPsoConnector * This,
            /* [in] */ BSTR bstrVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PartnerPassword )( 
            IPsoConnector * This,
            /* [retval][out] */ BSTR *pbstrVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ErrorCode )( 
            IPsoConnector * This,
            /* [in] */ LONG lErrorCode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ErrorCode )( 
            IPsoConnector * This,
            /* [retval][out] */ LONG *lErrorCode);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_ErrorDescription )( 
            IPsoConnector * This,
            /* [in] */ BSTR bstrVal);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ErrorDescription )( 
            IPsoConnector * This,
            /* [retval][out] */ BSTR *pbstrVal);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_CoImpersonateClient )( 
            IPsoConnector * This,
            /* [in] */ VARIANT_BOOL vImpersonate);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CoImpersonateClient )( 
            IPsoConnector * This,
            /* [retval][out] */ VARIANT_BOOL *vImpersonate);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RefreshConnection )( 
            IPsoConnector * This);
        
        END_INTERFACE
    } IPsoConnectorVtbl;

    interface IPsoConnector
    {
        CONST_VTBL struct IPsoConnectorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IPsoConnector_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IPsoConnector_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IPsoConnector_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IPsoConnector_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IPsoConnector_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IPsoConnector_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IPsoConnector_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IPsoConnector_Connect(This,psoapClient)	\
    (This)->lpVtbl -> Connect(This,psoapClient)

#define IPsoConnector_Initialize(This)	\
    (This)->lpVtbl -> Initialize(This)

#define IPsoConnector_get_Version(This,pbstrVal)	\
    (This)->lpVtbl -> get_Version(This,pbstrVal)

#define IPsoConnector_put_PoolConnections(This,lConnectionCount)	\
    (This)->lpVtbl -> put_PoolConnections(This,lConnectionCount)

#define IPsoConnector_get_PoolConnections(This,lConnectionCount)	\
    (This)->lpVtbl -> get_PoolConnections(This,lConnectionCount)

#define IPsoConnector_put_WsdlLocation(This,bstrVal)	\
    (This)->lpVtbl -> put_WsdlLocation(This,bstrVal)

#define IPsoConnector_get_WsdlLocation(This,pbstrVal)	\
    (This)->lpVtbl -> get_WsdlLocation(This,pbstrVal)

#define IPsoConnector_put_PartnerEnvironment(This,bstrVal)	\
    (This)->lpVtbl -> put_PartnerEnvironment(This,bstrVal)

#define IPsoConnector_get_PartnerEnvironment(This,pbstrVal)	\
    (This)->lpVtbl -> get_PartnerEnvironment(This,pbstrVal)

#define IPsoConnector_put_PartnerUsername(This,bstrVal)	\
    (This)->lpVtbl -> put_PartnerUsername(This,bstrVal)

#define IPsoConnector_get_PartnerUsername(This,pbstrVal)	\
    (This)->lpVtbl -> get_PartnerUsername(This,pbstrVal)

#define IPsoConnector_put_PartnerPassword(This,bstrVal)	\
    (This)->lpVtbl -> put_PartnerPassword(This,bstrVal)

#define IPsoConnector_get_PartnerPassword(This,pbstrVal)	\
    (This)->lpVtbl -> get_PartnerPassword(This,pbstrVal)

#define IPsoConnector_put_ErrorCode(This,lErrorCode)	\
    (This)->lpVtbl -> put_ErrorCode(This,lErrorCode)

#define IPsoConnector_get_ErrorCode(This,lErrorCode)	\
    (This)->lpVtbl -> get_ErrorCode(This,lErrorCode)

#define IPsoConnector_put_ErrorDescription(This,bstrVal)	\
    (This)->lpVtbl -> put_ErrorDescription(This,bstrVal)

#define IPsoConnector_get_ErrorDescription(This,pbstrVal)	\
    (This)->lpVtbl -> get_ErrorDescription(This,pbstrVal)

#define IPsoConnector_put_CoImpersonateClient(This,vImpersonate)	\
    (This)->lpVtbl -> put_CoImpersonateClient(This,vImpersonate)

#define IPsoConnector_get_CoImpersonateClient(This,vImpersonate)	\
    (This)->lpVtbl -> get_CoImpersonateClient(This,vImpersonate)

#define IPsoConnector_RefreshConnection(This)	\
    (This)->lpVtbl -> RefreshConnection(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IPsoConnector_Connect_Proxy( 
    IPsoConnector * This,
    /* [retval][out] */ ISOAPClient **psoapClient);


void __RPC_STUB IPsoConnector_Connect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IPsoConnector_Initialize_Proxy( 
    IPsoConnector * This);


void __RPC_STUB IPsoConnector_Initialize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE IPsoConnector_get_Version_Proxy( 
    IPsoConnector * This,
    /* [retval][out] */ BSTR *pbstrVal);


void __RPC_STUB IPsoConnector_get_Version_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE IPsoConnector_put_PoolConnections_Proxy( 
    IPsoConnector * This,
    /* [in] */ LONG lConnectionCount);


void __RPC_STUB IPsoConnector_put_PoolConnections_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE IPsoConnector_get_PoolConnections_Proxy( 
    IPsoConnector * This,
    /* [retval][out] */ LONG *lConnectionCount);


void __RPC_STUB IPsoConnector_get_PoolConnections_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE IPsoConnector_put_WsdlLocation_Proxy( 
    IPsoConnector * This,
    /* [in] */ BSTR bstrVal);


void __RPC_STUB IPsoConnector_put_WsdlLocation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE IPsoConnector_get_WsdlLocation_Proxy( 
    IPsoConnector * This,
    /* [retval][out] */ BSTR *pbstrVal);


void __RPC_STUB IPsoConnector_get_WsdlLocation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE IPsoConnector_put_PartnerEnvironment_Proxy( 
    IPsoConnector * This,
    /* [in] */ BSTR bstrVal);


void __RPC_STUB IPsoConnector_put_PartnerEnvironment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE IPsoConnector_get_PartnerEnvironment_Proxy( 
    IPsoConnector * This,
    /* [retval][out] */ BSTR *pbstrVal);


void __RPC_STUB IPsoConnector_get_PartnerEnvironment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE IPsoConnector_put_PartnerUsername_Proxy( 
    IPsoConnector * This,
    /* [in] */ BSTR bstrVal);


void __RPC_STUB IPsoConnector_put_PartnerUsername_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE IPsoConnector_get_PartnerUsername_Proxy( 
    IPsoConnector * This,
    /* [retval][out] */ BSTR *pbstrVal);


void __RPC_STUB IPsoConnector_get_PartnerUsername_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE IPsoConnector_put_PartnerPassword_Proxy( 
    IPsoConnector * This,
    /* [in] */ BSTR bstrVal);


void __RPC_STUB IPsoConnector_put_PartnerPassword_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE IPsoConnector_get_PartnerPassword_Proxy( 
    IPsoConnector * This,
    /* [retval][out] */ BSTR *pbstrVal);


void __RPC_STUB IPsoConnector_get_PartnerPassword_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE IPsoConnector_put_ErrorCode_Proxy( 
    IPsoConnector * This,
    /* [in] */ LONG lErrorCode);


void __RPC_STUB IPsoConnector_put_ErrorCode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE IPsoConnector_get_ErrorCode_Proxy( 
    IPsoConnector * This,
    /* [retval][out] */ LONG *lErrorCode);


void __RPC_STUB IPsoConnector_get_ErrorCode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE IPsoConnector_put_ErrorDescription_Proxy( 
    IPsoConnector * This,
    /* [in] */ BSTR bstrVal);


void __RPC_STUB IPsoConnector_put_ErrorDescription_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE IPsoConnector_get_ErrorDescription_Proxy( 
    IPsoConnector * This,
    /* [retval][out] */ BSTR *pbstrVal);


void __RPC_STUB IPsoConnector_get_ErrorDescription_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE IPsoConnector_put_CoImpersonateClient_Proxy( 
    IPsoConnector * This,
    /* [in] */ VARIANT_BOOL vImpersonate);


void __RPC_STUB IPsoConnector_put_CoImpersonateClient_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE IPsoConnector_get_CoImpersonateClient_Proxy( 
    IPsoConnector * This,
    /* [retval][out] */ VARIANT_BOOL *vImpersonate);


void __RPC_STUB IPsoConnector_get_CoImpersonateClient_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE IPsoConnector_RefreshConnection_Proxy( 
    IPsoConnector * This);


void __RPC_STUB IPsoConnector_RefreshConnection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IPsoConnector_INTERFACE_DEFINED__ */


/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR * ); 
void                      __RPC_USER  BSTR_UserFree(     unsigned long *, BSTR * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\SCS\4.0\inc\psomessages.h ===
#define  MAKEERROR(fac,err)   		MAKE_HRESULT(SEVERITY_ERROR,fac,err)
#define  MAKEWIN32ERROR(err)  		MAKEERROR(FACILITY_WIN32,err)
#define  GETWIN32ERROR()      		MAKEWIN32ERROR(GetLastError())
#define  MAKESCODE(fac,err)   		MAKE_HRESULT(SEVERITY_SUCCESS,fac,err)
#define  MAKEWIN32SCODE(err)  		MAKESCODE(FACILITY_WIN32,err)
#define  GETWIN32SCODE()      		MAKEWIN32SCODE(GetLastError())
//
//  Values are 32 bit values layed out as follows:
//
//   3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1
//   1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
//  +---+-+-+-----------------------+-------------------------------+
//  |Sev|C|R|     Facility          |               Code            |
//  +---+-+-+-----------------------+-------------------------------+
//
//  where
//
//      Sev - is the severity code
//
//          00 - Success
//          01 - Informational
//          10 - Warning
//          11 - Error
//
//      C - is the Customer code flag
//
//      R - is a reserved bit
//
//      Facility - is the facility code
//
//      Code - is the facility's status code
//
//
// Define the facility codes
//
#define FACILITY_PSOConnector            0x402
#define FACILITY_PSO                     0x401
#define FACILITY_DEFAULT                 0x100


//
// Define the severity codes
//


//
// MessageId: E_PSO_UNEXPECTED_ERROR
//
// MessageText:
//
//  Unexpected error in Partner Side Object (PSO). Contact SPG for assistance.
//
#define E_PSO_UNEXPECTED_ERROR           0x84010064L

//
// MessageId: E_PSO_HTTP_ERROR
//
// MessageText:
//
//  Error retrieving WSDL and/or WSML document(s). Verify that the partner key provided by SPG is installed in HKLM\SOFTWARE\Microsoft\Subscription Platform\Partner and that it contains an environment hive with valid WsdlLocation and WsmlLocation settings.
//
#define E_PSO_HTTP_ERROR                 0x84010065L

//
// MessageId: E_PSO_NOT_INITIALIZED
//
// MessageText:
//
//  The Partner Side Object (PSO) has not been initialized. You must first call the Initialize or the Connect method. You cannot call this function in the current state.
//
#define E_PSO_NOT_INITIALIZED            0x84010066L

//
// MessageId: E_PSO_NO_ENVIRONMENT
//
// MessageText:
//
//  Error retrieving the default partner environment name or an environment property such as WsdlLocation, WsmlLocation, or PartnerUsername. Verify that the partner key provided by SPG is installed in HKLM\SOFTWARE\Microsoft\Subscription Platform\Partner and that it contains an environment hive with valid WsdlLocation and WsmlLocation settings and proper security attributes.
//
#define E_PSO_NO_ENVIRONMENT             0x84010067L

//
// MessageId: E_PSO_NO_SOAPCLIENT
//
// MessageText:
//
//  Error creating an instance of __uuidof(SoapClient). Verify that the SOAP Toolkit (version 2.0 SP2 or greater) is installed. The SOAP Toolkit is available at http://msdn.microsoft.com/xml/.
//
#define E_PSO_NO_SOAPCLIENT              0x84010068L

//
// MessageId: E_PSO_POOLCONNECTIONS
//
// MessageText:
//
//  Invalid number of PoolConnections specified. The acceptable range is between 0 and 64 connections.
//
#define E_PSO_POOLCONNECTIONS            0x84010069L

//
// MessageId: E_PSO_HTTP_ERROR_401
//
// MessageText:
//
//  Error retrieving WSDL and/or WSML document(s). 401 - Access is denied. Check that the correct partner key MSI is installed, that the registry configuration points to the correct server, that the partner MSI package contains the correct key for the environment you are attempting to connect to, and that the server did not inadvertantly reset the partner password.
//
#define E_PSO_HTTP_ERROR_401             0x8401006AL

//
// MessageId: E_PSO_HTTP_ERROR_500
//
// MessageText:
//
//  Error retrieving WSDL and/or WSML document(s). 500 - An internal server error has occurred. This can be due to a server configuration problem.
//
#define E_PSO_HTTP_ERROR_500             0x8401006BL

//
// MessageId: E_PSO_SOAP_PROPERTY
//
// MessageText:
//
//  Error setting a property on the SoapClient connection object. Verify that the SOAP Toolkit (version 2.0 SP2 or greater) is installed, and that %ProgramFiles%\Common Files\MSSoap\Binaries\mssoap1.dll is version 1.2.814.0 or greater. The SOAP Toolkit is available at http://msdn.microsoft.com/xml/.
//
#define E_PSO_SOAP_PROPERTY              0x8401006CL

//
// MessageId: E_PSO_TEMP_PATH
//
// MessageText:
//
//  Unable to get the temporary file path.
//
#define E_PSO_TEMP_PATH                  0x8401006DL

//
// MessageId: E_PSO_TEMP_FILE
//
// MessageText:
//
//  Unable to get the temporary file name or to create a temporary file. This is generally a write permissions problem.
//  If a user has a profile, the temporary path is defined by the TEMP environment setting and is typically [HOMEPATH]\[Username]\Local Settings\Temp.
//  If a user does not have a profile, such as IWAM_Computername or IUSR_Computername, this path is either [SystemDrive]\Temp or [SystemRoot]\Temp.
//
#define E_PSO_TEMP_FILE                  0x8401006EL

//
// MessageId: E_PSO_REG_PARTNER_HIVE
//
// MessageText:
//
//  Error opening partner registry hive or hive does not exist. (Re)install the partner key.
//  Check whether HKLM\SOFTWARE\Microsoft\Subscription Platform\Partner exists and has the proper security settings.
//  Check whether this key contains a correct Environment and PartnerHive value.
//
#define E_PSO_REG_PARTNER_HIVE           0x8401006FL

//
// MessageId: E_PSO_REG_PARTNER_VALUE
//
// MessageText:
//
//  Error reading partner registry data. (Re)install the partner key.
//  Check whether Environment and PartnerHive values exist under HKLM\SOFTWARE\Microsoft\Subscription Platform\Partner and that the key has proper security settings.
//
#define E_PSO_REG_PARTNER_VALUE          0x84010070L

//
// MessageId: E_PSO_REG_KEY_VALUE
//
// MessageText:
//
//  Error reading partner registry password data. (Re)install the partner key.
//  Check whether HKLM\SOFTWARE\Microsoft\Subscription Platform\Partner\[Environment]\[PartnerHive]\Passwords exists and that it has proper security settings.
//
#define E_PSO_REG_KEY_VALUE              0x84010071L

//
// MessageId: S_PSOCONNECTOR_FINALCONSTRUCT
//
// MessageText:
//
//  A PSO Connector Object has been created.
//
#define S_PSOCONNECTOR_FINALCONSTRUCT    0x440200C8L

//
// MessageId: S_PSOCONNECTOR_INITIALIZED
//
// MessageText:
//
//  A PSO Connector Object has been successfully initialized.
//
#define S_PSOCONNECTOR_INITIALIZED       0x440200C9L
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\SCS\4.0\samples\ISvcProvider2\C++\SampleProvider.cpp ===
// SampleProvider.cpp : Implementation of CSampleProvider
#include "stdafx.h"
#include "SPK_ISvcProvider_Sample.h"
#include "SampleProvider.h"
#include "SvcProvider_i.c"

/////////////////////////////////////////////////////////////////////////////
// CSampleProvider
HRESULT CSampleProvider::ProvisionService(
            LONG lPUIDHigh,
            LONG lPUIDLow,
            BSTR bstrServiceComponentId,
            BSTR bstrServiceInstanceId,
            BSTR bstrServiceInstanceFriendlyName,
            BSTR bstrBaseServiceInstanceId,
            BSTR bstrDetails,
            BSTR *pbstrResponseXML)
{
//Write Code to Provision Service here

    return S_OK;
}

HRESULT CSampleProvider::DeprovisionService(
            LONG lPUIDHigh,
            LONG lPUIDLow,
            BSTR bstrServiceComponentId,
            BSTR bstrServiceInstanceId,
            VARIANT_BOOL RemoveServiceFlag,
            BSTR *pbstrResponseXML)
{
//Write Code to Deprovision Service here

    if (VARIANT_TRUE == RemoveServiceFlag)
    {
        //Deprovision Service
    }
    else
    {
        //Remove Role of the user
    }

    return S_OK;
}

HRESULT CSampleProvider::EnableService(
            LONG lPUIDHigh,
            LONG lPUIDLow,
            BSTR bstrServiceComponentId,
            BSTR bstrServiceInstanceId,
            BSTR *pbstrResponseXML)
{
//Write Code to Enable Service here

    return S_OK;
}

HRESULT CSampleProvider::DisableService(
            LONG lPUIDHigh,
            LONG lPUIDLow,
            BSTR bstrServiceComponentId,
            BSTR bstrServiceInstanceId,
            BSTR bstrDetails,
            BSTR *pbstrResponseXML)
{
//Write Code to Disable Service here

    return S_OK;
}

HRESULT CSampleProvider::ValidateProvisioningData(
            LONG lPUIDHigh,
            LONG lPUIDLow,
            BSTR bstrServiceComponentId,
            BSTR bstrDetails,
            BSTR *pbstrDetailsResponse,
            BSTR *pbstrResponseXML)
{
//Write Code to Validate data here

    return S_OK;
}

HRESULT CSampleProvider::CheckProvisioningStatus(
            LONG lPUIDHigh,
            LONG lPUIDLow,
            BSTR bstrServiceComponentId,
            BSTR * pbstrResponseXML)
{
//Write Code to Check Status here

    return S_OK;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\SCS\4.0\samples\ISvcProvider2\C++\Resource.h ===
//{{NO_DEPENDENCIES}}
// Microsoft Developer Studio generated include file.
// Used by SPK_ISvcProvider_Sample.rc
//
#define IDS_PROJNAME                    100
#define IDR_SAMPLEPROVIDER              101

// Next default values for new objects
// 
#ifdef APSTUDIO_INVOKED
#ifndef APSTUDIO_READONLY_SYMBOLS
#define _APS_NEXT_RESOURCE_VALUE        201
#define _APS_NEXT_COMMAND_VALUE         32768
#define _APS_NEXT_CONTROL_VALUE         201
#define _APS_NEXT_SYMED_VALUE           102
#endif
#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\SCS\4.0\samples\ISvcProvider2\C++\SPK_ISvcProvider_Sample.h ===
/* MIDL: this ALWAYS GENERATED file contains the definitions for the interfaces */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\SCS\4.0\samples\ISvcProvider2\C++\SPK_ISvcProvider_Sample.cpp ===
// SPK_ISvcProvider_Sample.cpp : Implementation of DLL Exports.


// Note: Proxy/Stub Information
//      To build a separate proxy/stub DLL, 
//      run nmake -f SPK_ISvcProvider_Sampleps.mk in the project directory.

#include "stdafx.h"
#include "resource.h"
#include <initguid.h>
#include "SPK_ISvcProvider_Sample.h"

#include "SPK_ISvcProvider_Sample_i.c"
#include "SampleProvider.h"

CComModule _Module;

BEGIN_OBJECT_MAP(ObjectMap)
OBJECT_ENTRY(CLSID_SampleProvider, CSampleProvider)
END_OBJECT_MAP()

/////////////////////////////////////////////////////////////////////////////
// DLL Entry Point

extern "C"
BOOL WINAPI DllMain(HINSTANCE hInstance, DWORD dwReason, LPVOID /*lpReserved*/)
{
    if (dwReason == DLL_PROCESS_ATTACH)
    {
        _Module.Init(ObjectMap, hInstance, &LIBID_SPK_ISVCPROVIDER_SAMPLELib);
        DisableThreadLibraryCalls(hInstance);
    }
    else if (dwReason == DLL_PROCESS_DETACH)
        _Module.Term();
    return TRUE;    // ok
}

/////////////////////////////////////////////////////////////////////////////
// Used to determine whether the DLL can be unloaded by OLE

STDAPI DllCanUnloadNow(void)
{
    return (_Module.GetLockCount()==0) ? S_OK : S_FALSE;
}

/////////////////////////////////////////////////////////////////////////////
// Returns a class factory to create an object of the requested type

STDAPI DllGetClassObject(REFCLSID rclsid, REFIID riid, LPVOID* ppv)
{
    return _Module.GetClassObject(rclsid, riid, ppv);
}

/////////////////////////////////////////////////////////////////////////////
// DllRegisterServer - Adds entries to the system registry

STDAPI DllRegisterServer(void)
{
    // registers object, typelib and all interfaces in typelib
    return _Module.RegisterServer(TRUE);
}

/////////////////////////////////////////////////////////////////////////////
// DllUnregisterServer - Removes entries from the system registry

STDAPI DllUnregisterServer(void)
{
    return _Module.UnregisterServer(TRUE);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\SCS\4.0\samples\ISvcProvider2\C++\StdAfx.cpp ===
// stdafx.cpp : source file that includes just the standard includes
//  stdafx.pch will be the pre-compiled header
//  stdafx.obj will contain the pre-compiled type information

#include "stdafx.h"

#ifdef _ATL_STATIC_REGISTRY
#include <statreg.h>
#include <statreg.cpp>
#endif

#include <atlimpl.cpp>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\SCS\4.0\samples\ISvcProvider2\C++\SampleProvider.h ===
// SampleProvider.h : Declaration of the CSampleProvider

#ifndef __SAMPLEPROVIDER_H_
#define __SAMPLEPROVIDER_H_

#include "resource.h"       // main symbols
#include "SPK_ISvcProvider_Sample.h"

/////////////////////////////////////////////////////////////////////////////
// CSampleProvider
class ATL_NO_VTABLE CSampleProvider : 
	public CComObjectRootEx<CComSingleThreadModel>,
	public CComCoClass<CSampleProvider, &CLSID_SampleProvider>,
	public IDispatchImpl<ISvcProvider, &IID_ISvcProvider, &LIBID_EMULATORLib>
{
public:
	CSampleProvider()
	{
	}

DECLARE_REGISTRY_RESOURCEID(IDR_SAMPLEPROVIDER)

DECLARE_PROTECT_FINAL_CONSTRUCT()

BEGIN_COM_MAP(CSampleProvider)
	COM_INTERFACE_ENTRY(ISvcProvider)
	COM_INTERFACE_ENTRY(IDispatch)
END_COM_MAP()

public:
// ISvcProvider
    STDMETHOD(ProvisionService)(
            LONG lPUIDHigh,
            LONG lPUIDLow,
            BSTR bstrServiceComponentId,
            BSTR bstrServiceInstanceId,
            BSTR bstrServiceInstanceFriendlyName,
            BSTR bstrBaseServiceInstanceId,
            BSTR bstrDetails,
            BSTR * pbstrResponseXML);

    STDMETHOD(DeprovisionService)(
            LONG lPUIDHigh,
            LONG lPUIDLow,
            BSTR bstrServiceComponentId,
            BSTR bstrServiceInstanceId,
            VARIANT_BOOL RemoveServiceFlag,
            BSTR * pbstrResponseXML);
    STDMETHOD(EnableService)(
            LONG lPUIDHigh,
            LONG lPUIDLow,
            BSTR bstrServiceComponentId,
            BSTR bstrServiceInstanceId,
            BSTR * pbstrResponseXML);

    STDMETHOD(DisableService)(
            LONG lPUIDHigh,
            LONG lPUIDLow,
            BSTR bstrServiceComponentId,
            BSTR bstrServiceInstanceId,
            BSTR bstrDetails,
            BSTR * pbstrResponseXML);

    STDMETHOD(ValidateProvisioningData)(
            LONG lPUIDHigh,
            LONG lPUIDLow,
            BSTR bstrServiceComponentId,
            BSTR bstrDetails,
            BSTR *pbstrDetailsResponse,
            BSTR * pbstrResponseXML);

    STDMETHOD(CheckProvisioningStatus)(
            LONG lPUIDHigh,
            LONG lPUIDLow,
            BSTR bstrServiceComponentId,
            BSTR * pbstrResponseXML);
};

#endif //__SAMPLEPROVIDER_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\SCS\4.0\samples\ISvcProvider2\C++\StdAfx.h ===
// stdafx.h : include file for standard system include files,
//      or project specific include files that are used frequently,
//      but are changed infrequently

#if !defined(AFX_STDAFX_H__7DA79598_5322_4023_BE8C_7C38757E8D80__INCLUDED_)
#define AFX_STDAFX_H__7DA79598_5322_4023_BE8C_7C38757E8D80__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

#define STRICT
#ifndef _WIN32_WINNT
#define _WIN32_WINNT 0x0400
#endif
#define _ATL_APARTMENT_THREADED

#include <atlbase.h>
//You may derive a class from CComModule and use it if you want to override
//something, but do not change the name of _Module
extern CComModule _Module;
#include <atlcom.h>

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_STDAFX_H__7DA79598_5322_4023_BE8C_7C38757E8D80__INCLUDED)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\SCS\4.0\samples\ISvcProvider2\C++\inc\svcprovider.h ===
#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 6.00.0347 */
/* Compiler settings for svcprovider.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __svcprovider_h__
#define __svcprovider_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __ISvcProvider_FWD_DEFINED__
#define __ISvcProvider_FWD_DEFINED__
typedef interface ISvcProvider ISvcProvider;
#endif 	/* __ISvcProvider_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "ocidl.h"

#ifdef __cplusplus
extern "C"{
#endif 

void * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void * ); 

#ifndef __ISvcProvider_INTERFACE_DEFINED__
#define __ISvcProvider_INTERFACE_DEFINED__

/* interface ISvcProvider */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_ISvcProvider;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7917F8A0-6DCA-4D4E-9159-BA3732AED576")
    ISvcProvider : public IDispatch
    {
    public:
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ProvisionService( 
            /* [in] */ LONG PUIDHigh,
            /* [in] */ LONG PUIDLow,
            /* [in] */ BSTR ServiceComponentId,
            /* [in] */ BSTR ServiceInstanceId,
            /* [in] */ BSTR ServiceInstanceFriendlyName,
            /* [in] */ BSTR BaseServiceInstanceId,
            /* [in] */ BSTR Details,
            /* [retval][out] */ BSTR *ResponseXML) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE DeprovisionService( 
            /* [in] */ LONG PUIDHigh,
            /* [in] */ LONG PUIDLow,
            /* [in] */ BSTR ServiceComponentId,
            /* [in] */ BSTR ServiceInstanceId,
            /* [in] */ VARIANT_BOOL RemoveServiceFlag,
            /* [retval][out] */ BSTR *ResponseXML) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE EnableService( 
            /* [in] */ LONG PUIDHigh,
            /* [in] */ LONG PUIDLow,
            /* [in] */ BSTR ServiceComponentId,
            /* [in] */ BSTR ServiceInstanceId,
            /* [retval][out] */ BSTR *ResponseXML) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE DisableService( 
            /* [in] */ LONG PUIDHigh,
            /* [in] */ LONG PUIDLow,
            /* [in] */ BSTR ServiceComponentId,
            /* [in] */ BSTR ServiceInstanceId,
            /* [in] */ BSTR Details,
            /* [retval][out] */ BSTR *ResponseXML) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ValidateProvisioningData( 
            /* [in] */ LONG PUIDHigh,
            /* [in] */ LONG PUIDLow,
            /* [in] */ BSTR ServiceComponentId,
            /* [in] */ BSTR Details,
            /* [out] */ BSTR *DetailsResponse,
            /* [retval][out] */ BSTR *ResponseXML) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE CheckProvisioningStatus( 
            /* [in] */ LONG PUIDHigh,
            /* [in] */ LONG PUIDLow,
            /* [in] */ BSTR ServiceComponentId,
            /* [retval][out] */ BSTR *ResponseXML) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISvcProviderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ISvcProvider * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ISvcProvider * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ISvcProvider * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            ISvcProvider * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            ISvcProvider * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            ISvcProvider * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISvcProvider * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ProvisionService )( 
            ISvcProvider * This,
            /* [in] */ LONG PUIDHigh,
            /* [in] */ LONG PUIDLow,
            /* [in] */ BSTR ServiceComponentId,
            /* [in] */ BSTR ServiceInstanceId,
            /* [in] */ BSTR ServiceInstanceFriendlyName,
            /* [in] */ BSTR BaseServiceInstanceId,
            /* [in] */ BSTR Details,
            /* [retval][out] */ BSTR *ResponseXML);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *DeprovisionService )( 
            ISvcProvider * This,
            /* [in] */ LONG PUIDHigh,
            /* [in] */ LONG PUIDLow,
            /* [in] */ BSTR ServiceComponentId,
            /* [in] */ BSTR ServiceInstanceId,
            /* [in] */ VARIANT_BOOL RemoveServiceFlag,
            /* [retval][out] */ BSTR *ResponseXML);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *EnableService )( 
            ISvcProvider * This,
            /* [in] */ LONG PUIDHigh,
            /* [in] */ LONG PUIDLow,
            /* [in] */ BSTR ServiceComponentId,
            /* [in] */ BSTR ServiceInstanceId,
            /* [retval][out] */ BSTR *ResponseXML);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *DisableService )( 
            ISvcProvider * This,
            /* [in] */ LONG PUIDHigh,
            /* [in] */ LONG PUIDLow,
            /* [in] */ BSTR ServiceComponentId,
            /* [in] */ BSTR ServiceInstanceId,
            /* [in] */ BSTR Details,
            /* [retval][out] */ BSTR *ResponseXML);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ValidateProvisioningData )( 
            ISvcProvider * This,
            /* [in] */ LONG PUIDHigh,
            /* [in] */ LONG PUIDLow,
            /* [in] */ BSTR ServiceComponentId,
            /* [in] */ BSTR Details,
            /* [out] */ BSTR *DetailsResponse,
            /* [retval][out] */ BSTR *ResponseXML);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CheckProvisioningStatus )( 
            ISvcProvider * This,
            /* [in] */ LONG PUIDHigh,
            /* [in] */ LONG PUIDLow,
            /* [in] */ BSTR ServiceComponentId,
            /* [retval][out] */ BSTR *ResponseXML);
        
        END_INTERFACE
    } ISvcProviderVtbl;

    interface ISvcProvider
    {
        CONST_VTBL struct ISvcProviderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISvcProvider_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ISvcProvider_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ISvcProvider_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ISvcProvider_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define ISvcProvider_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define ISvcProvider_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define ISvcProvider_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define ISvcProvider_ProvisionService(This,PUIDHigh,PUIDLow,ServiceComponentId,ServiceInstanceId,ServiceInstanceFriendlyName,BaseServiceInstanceId,Details,ResponseXML)	\
    (This)->lpVtbl -> ProvisionService(This,PUIDHigh,PUIDLow,ServiceComponentId,ServiceInstanceId,ServiceInstanceFriendlyName,BaseServiceInstanceId,Details,ResponseXML)

#define ISvcProvider_DeprovisionService(This,PUIDHigh,PUIDLow,ServiceComponentId,ServiceInstanceId,RemoveServiceFlag,ResponseXML)	\
    (This)->lpVtbl -> DeprovisionService(This,PUIDHigh,PUIDLow,ServiceComponentId,ServiceInstanceId,RemoveServiceFlag,ResponseXML)

#define ISvcProvider_EnableService(This,PUIDHigh,PUIDLow,ServiceComponentId,ServiceInstanceId,ResponseXML)	\
    (This)->lpVtbl -> EnableService(This,PUIDHigh,PUIDLow,ServiceComponentId,ServiceInstanceId,ResponseXML)

#define ISvcProvider_DisableService(This,PUIDHigh,PUIDLow,ServiceComponentId,ServiceInstanceId,Details,ResponseXML)	\
    (This)->lpVtbl -> DisableService(This,PUIDHigh,PUIDLow,ServiceComponentId,ServiceInstanceId,Details,ResponseXML)

#define ISvcProvider_ValidateProvisioningData(This,PUIDHigh,PUIDLow,ServiceComponentId,Details,DetailsResponse,ResponseXML)	\
    (This)->lpVtbl -> ValidateProvisioningData(This,PUIDHigh,PUIDLow,ServiceComponentId,Details,DetailsResponse,ResponseXML)

#define ISvcProvider_CheckProvisioningStatus(This,PUIDHigh,PUIDLow,ServiceComponentId,ResponseXML)	\
    (This)->lpVtbl -> CheckProvisioningStatus(This,PUIDHigh,PUIDLow,ServiceComponentId,ResponseXML)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISvcProvider_ProvisionService_Proxy( 
    ISvcProvider * This,
    /* [in] */ LONG PUIDHigh,
    /* [in] */ LONG PUIDLow,
    /* [in] */ BSTR ServiceComponentId,
    /* [in] */ BSTR ServiceInstanceId,
    /* [in] */ BSTR ServiceInstanceFriendlyName,
    /* [in] */ BSTR BaseServiceInstanceId,
    /* [in] */ BSTR Details,
    /* [retval][out] */ BSTR *ResponseXML);


void __RPC_STUB ISvcProvider_ProvisionService_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISvcProvider_DeprovisionService_Proxy( 
    ISvcProvider * This,
    /* [in] */ LONG PUIDHigh,
    /* [in] */ LONG PUIDLow,
    /* [in] */ BSTR ServiceComponentId,
    /* [in] */ BSTR ServiceInstanceId,
    /* [in] */ VARIANT_BOOL RemoveServiceFlag,
    /* [retval][out] */ BSTR *ResponseXML);


void __RPC_STUB ISvcProvider_DeprovisionService_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISvcProvider_EnableService_Proxy( 
    ISvcProvider * This,
    /* [in] */ LONG PUIDHigh,
    /* [in] */ LONG PUIDLow,
    /* [in] */ BSTR ServiceComponentId,
    /* [in] */ BSTR ServiceInstanceId,
    /* [retval][out] */ BSTR *ResponseXML);


void __RPC_STUB ISvcProvider_EnableService_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISvcProvider_DisableService_Proxy( 
    ISvcProvider * This,
    /* [in] */ LONG PUIDHigh,
    /* [in] */ LONG PUIDLow,
    /* [in] */ BSTR ServiceComponentId,
    /* [in] */ BSTR ServiceInstanceId,
    /* [in] */ BSTR Details,
    /* [retval][out] */ BSTR *ResponseXML);


void __RPC_STUB ISvcProvider_DisableService_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISvcProvider_ValidateProvisioningData_Proxy( 
    ISvcProvider * This,
    /* [in] */ LONG PUIDHigh,
    /* [in] */ LONG PUIDLow,
    /* [in] */ BSTR ServiceComponentId,
    /* [in] */ BSTR Details,
    /* [out] */ BSTR *DetailsResponse,
    /* [retval][out] */ BSTR *ResponseXML);


void __RPC_STUB ISvcProvider_ValidateProvisioningData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ISvcProvider_CheckProvisioningStatus_Proxy( 
    ISvcProvider * This,
    /* [in] */ LONG PUIDHigh,
    /* [in] */ LONG PUIDLow,
    /* [in] */ BSTR ServiceComponentId,
    /* [retval][out] */ BSTR *ResponseXML);


void __RPC_STUB ISvcProvider_CheckProvisioningStatus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ISvcProvider_INTERFACE_DEFINED__ */


/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR * ); 
void                      __RPC_USER  BSTR_UserFree(     unsigned long *, BSTR * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\SCS\4.0\samples\ISvcProvider2\CSharp\demoMain.asmx.cs ===
using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Web;
using System.Web.Services;

namespace demoservice
{
	/// <summary>
	/// Summary description for Service1.
	/// </summary>
	public class Service1 : System.Web.Services.WebService
	{
		public Service1()
		{
			//CODEGEN: This call is required by the ASP.NET Web Services Designer
			InitializeComponent();
		}

		#region Component Designer generated code
		
		//Required by the Web Services Designer 
		private IContainer components = null;
				
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{
		}

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		protected override void Dispose( bool disposing )
		{
			if(disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);		
		}
		
		#endregion


		// All methods support the ResponseInfo return structure which can cause three actions
		//		success, retry, or failed
		string strSuccess = "<ResponseInfo><ErrorCode/><ResponseClass>0</ResponseClass><ResponseMessage/></ResponseInfo>";
		string strRetry = "<ResponseInfo><ErrorCode/><ResponseClass>1</ResponseClass><ResponseMessage/></ResponseInfo>";
		string strFailedDontRetry = "<ResponseInfo><ErrorCode/><ResponseClass>2</ResponseClass><ResponseMessage/></ResponseInfo>";

		[WebMethod]
		public string ProvisionService( 
			int iPUIDHigh, int iPUIDLow, 
			string sServiceComponentId, 
			string sServiceInstanceId,
			string sServiceInstanceFriendlyName, 
			string sBaseServiceInstanceId,
			string sDetails )
		{
			string strReturn;
			// on failed provisioning ProvisionServices should fill in the <ErrorCode> node of ResponseInfo 
			//  can track any content errors in the sDetails XML that was passed through, this code is stored in the UPS
			//  permit for tenants to view
			strReturn = strRetry;
			strReturn = strFailedDontRetry;
			strReturn = strSuccess;

			return strReturn;
		}

		[WebMethod]
		public string DeprovisionService(
			int iPUIDHigh, int iPUIDLow, 
			string sServiceComponentId, 
			string sServiceInstanceId,
			bool bRemoveServiceFlag)
		{
			if (bRemoveServiceFlag) 
			{
				// the service is being removed
			}
			else
			{
				// merely one role of a user is being removed
			}
			return strSuccess;
		}

		[WebMethod]
		public string EnableService(
			int iPUIDHigh, int iPUIDLow, 
			string sServiceComponentId, 
			string sServiceInstanceId)
		{
			return strSuccess;
		}

		[WebMethod]
		public string DisableService(
			int iPUIDHigh, int iPUIDLow, 
			string sServiceComponentId, 
			string sServiceInstanceId,
			string sDetails)
		{
			// sDetails contains any information about why the user was Disabled
			return strSuccess;
		}

		[WebMethod]
		public string ValidateProvisioningData(
			int iPUIDHigh, int iPUIDLow, 
			string sServiceComponentId, 
			string sDetails,
			out string sDetailsResponse)
		{
			// sDetails matches the ProvisionServices sDetails and gives service a chance to tell caller
			// the data is invalid, as with ProvisionServices the ErrorCode should be filled in so the tenant
			// can translate and report the error to the caller additionally the service can fill in ResponseMessage and
			// DetailsResponse with even more data to return to the tenant.
			sDetailsResponse = "foo";
			return strSuccess;
		}
		
		[WebMethod]
		public string CheckProvisioningStatus(
			int iPUIDHigh, int iPUIDLow, 
			string sServiceComponentId)
		{
			// As with ValidateProvisiongData the ResponseMessage will be returned to the caller for more data
			return strSuccess;
		}




	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\SCS\4.0\samples\ISvcProvider2\C++\inc\svcprovider_i.c ===
#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* this ALWAYS GENERATED file contains the IIDs and CLSIDs */

/* link this file in with the server and any clients */


 /* File created by MIDL compiler version 6.00.0347 */
/* Compiler settings for svcprovider.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#if !defined(_M_IA64) && !defined(_M_AMD64)

#ifdef __cplusplus
extern "C"{
#endif 


#include <rpc.h>
#include <rpcndr.h>

#ifdef _MIDL_USE_GUIDDEF_

#ifndef INITGUID
#define INITGUID
#include <guiddef.h>
#undef INITGUID
#else
#include <guiddef.h>
#endif

#define MIDL_DEFINE_GUID(type,name,l,w1,w2,b1,b2,b3,b4,b5,b6,b7,b8) \
        DEFINE_GUID(name,l,w1,w2,b1,b2,b3,b4,b5,b6,b7,b8)

#else // !_MIDL_USE_GUIDDEF_

#ifndef __IID_DEFINED__
#define __IID_DEFINED__

typedef struct _IID
{
    unsigned long x;
    unsigned short s1;
    unsigned short s2;
    unsigned char  c[8];
} IID;

#endif // __IID_DEFINED__

#ifndef CLSID_DEFINED
#define CLSID_DEFINED
typedef IID CLSID;
#endif // CLSID_DEFINED

#define MIDL_DEFINE_GUID(type,name,l,w1,w2,b1,b2,b3,b4,b5,b6,b7,b8) \
        const type name = {l,w1,w2,{b1,b2,b3,b4,b5,b6,b7,b8}}

#endif !_MIDL_USE_GUIDDEF_

MIDL_DEFINE_GUID(IID, IID_ISvcProvider,0x7917F8A0,0x6DCA,0x4D4E,0x91,0x59,0xBA,0x37,0x32,0xAE,0xD5,0x76);

#undef MIDL_DEFINE_GUID

#ifdef __cplusplus
}
#endif



#endif /* !defined(_M_IA64) && !defined(_M_AMD64)*/


#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* this ALWAYS GENERATED file contains the IIDs and CLSIDs */

/* link this file in with the server and any clients */


 /* File created by MIDL compiler version 6.00.0347 */
/* Compiler settings for svcprovider.idl:
    Oicf, W1, Zp8, env=Win64 (32b run,appending)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#if defined(_M_IA64) || defined(_M_AMD64)

#ifdef __cplusplus
extern "C"{
#endif 


#include <rpc.h>
#include <rpcndr.h>

#ifdef _MIDL_USE_GUIDDEF_

#ifndef INITGUID
#define INITGUID
#include <guiddef.h>
#undef INITGUID
#else
#include <guiddef.h>
#endif

#define MIDL_DEFINE_GUID(type,name,l,w1,w2,b1,b2,b3,b4,b5,b6,b7,b8) \
        DEFINE_GUID(name,l,w1,w2,b1,b2,b3,b4,b5,b6,b7,b8)

#else // !_MIDL_USE_GUIDDEF_

#ifndef __IID_DEFINED__
#define __IID_DEFINED__

typedef struct _IID
{
    unsigned long x;
    unsigned short s1;
    unsigned short s2;
    unsigned char  c[8];
} IID;

#endif // __IID_DEFINED__

#ifndef CLSID_DEFINED
#define CLSID_DEFINED
typedef IID CLSID;
#endif // CLSID_DEFINED

#define MIDL_DEFINE_GUID(type,name,l,w1,w2,b1,b2,b3,b4,b5,b6,b7,b8) \
        const type name = {l,w1,w2,{b1,b2,b3,b4,b5,b6,b7,b8}}

#endif !_MIDL_USE_GUIDDEF_

MIDL_DEFINE_GUID(IID, IID_ISvcProvider,0x7917F8A0,0x6DCA,0x4D4E,0x91,0x59,0xBA,0x37,0x32,0xAE,0xD5,0x76);

#undef MIDL_DEFINE_GUID

#ifdef __cplusplus
}
#endif



#endif /* defined(_M_IA64) || defined(_M_AMD64)*/
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\SCS\4.0\samples\SCS API\ASP.Net\SPKTenantDemo\CancelSubscription.aspx.cs ===
using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Xml;
using System.Xml.Xsl;

namespace SPKTenantDemo
{
	/// <summary>
	/// Summary description for CancelSubscription.
	/// </summary>
	public class CancelSubscription : System.Web.UI.Page
	{
		private void Page_Load(object sender, System.EventArgs e)
		{
        PSO.BDKProvider  PsoServer;
        XmlDocument      AmtCharged;
        XslTransform     OutXslt;
        int              iPUIDHigh, iPUIDLow, Count;
        string           ResultXML, strSubsId, strAmtCharged, strStatus, strSet;
        const string     CommentXML = "<CommentInfo xmlns='urn:schemas-microsoft-com:billing-data'>" +
                             "<CommentCode>123</CommentCode>" +
                             "<CommentText>Tired</CommentText></CommentInfo>";


            iPUIDHigh = System.Convert.ToInt32(Session["PUIDHigh"]);
            iPUIDLow = System.Convert.ToInt32(Session["PUIDLow"]);

            strSubsId = (string)Request.QueryString["SubscriptionId"];

            //Set the Pso object from session object
            PsoServer = (PSO.BDKProvider)Session["PSOConnector"];

            //Call the main function.
            PsoServer.CancelSubscription(1,
                1,
                iPUIDHigh,
                iPUIDLow,
                string.Empty,
                false,
                strSubsId,
                string.Empty,
                CommentXML,
                out ResultXML,
                out strAmtCharged,
                out strStatus,
                out Count,
                out strSet);

            if (0 == Count)
            {
                Session["ShowInfo"] = "<p>Nothing canceled for this subscription</p>";
                Response.Redirect("ShowInfo.aspx", true);
            }

            OutXslt = new XslTransform();
            OutXslt.Load(MapPath("SuccessCancelSubscription.xsl"));

            AmtCharged = new XmlDocument();
            AmtCharged.LoadXml(strAmtCharged);

            OutXslt.Transform(AmtCharged, null, Response.Output);
        }

		#region Web Form Designer generated code
		override protected void OnInit(EventArgs e)
		{
			//
			// CODEGEN: This call is required by the ASP.NET Web Form Designer.
			//
			InitializeComponent();
			base.OnInit(e);
		}
		
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{    
			this.Load += new System.EventHandler(this.Page_Load);
		}
		#endregion
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\SCS\4.0\samples\SCS API\ASP.Net\SPKTenantDemo\BDKProvider.cs ===
using System;
using System.IO;
using System.Web;
using System.Net;
using System.Runtime.InteropServices;
using Billing.PSO;

namespace PSO
{
	/// <summary>
	/// Summary description for BDKProvider.
	/// </summary>
	public class BDKProvider : bdk
	{
        private static Billing.PSO.PsoConnectorClass mPso;
		
        static BDKProvider()
		{
            mPso = new Billing.PSO.PsoConnectorClass();
        }

        public static void Initialize()
        {
            mPso.PoolConnections = 0;
            mPso.Initialize();
        }

        public static string ErrorDescription()
        {
            return mPso.ErrorDescription;
        }

        public static int ErrorCode()
        {
            return mPso.ErrorCode;
        }

        public BDKProvider() : base()
        {
            this.Url = mPso.WsdlLocation;
            this.Credentials = new NetworkCredential(mPso.PartnerUsername,
                                                     mPso.PartnerPassword);
        }
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\SCS\4.0\samples\SCS API\ASP.Net\SPKTenantDemo\BillingInfo.aspx.cs ===
using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Xml;
using Billing.PSO;

namespace SPKTenantDemo
{
	/// <summary>
	/// Summary description for BillingInfo.
	/// </summary>
	public class BillingInfo : System.Web.UI.Page
	{
        //UI Controls
        protected System.Web.UI.WebControls.Label LabMain;
        protected System.Web.UI.WebControls.Label LabMain2;
        protected System.Web.UI.WebControls.Label LabAccName;
        protected System.Web.UI.WebControls.Label LabAddLine1;
        protected System.Web.UI.WebControls.Label LabAddLine2;
        protected System.Web.UI.WebControls.Label LabCity;
        protected System.Web.UI.WebControls.Label LabStateCode;
        protected System.Web.UI.WebControls.Label LabZipCode;
        protected System.Web.UI.WebControls.Label LabCountryCode;
        protected System.Web.UI.WebControls.Label LabTelephone;
        protected System.Web.UI.WebControls.Label LabExtension;
        protected System.Web.UI.WebControls.Label LabCreditCardNumber;
        protected System.Web.UI.WebControls.Label LabCreditCardType;
        protected System.Web.UI.WebControls.Label LabExpDate;
        protected System.Web.UI.WebControls.TextBox BoxExtension;
        protected System.Web.UI.WebControls.TextBox BoxTelephone;
        protected System.Web.UI.WebControls.TextBox BoxCountryCode;
        protected System.Web.UI.WebControls.TextBox BoxZipCode;
        protected System.Web.UI.WebControls.TextBox BoxStateCode;
        protected System.Web.UI.WebControls.TextBox BoxCity;
        protected System.Web.UI.WebControls.TextBox BoxAddLine2;
        protected System.Web.UI.WebControls.TextBox BoxAddLine1;
        protected System.Web.UI.WebControls.TextBox BoxAccName;
        protected System.Web.UI.WebControls.DropDownList DropCCard;
        protected System.Web.UI.WebControls.TextBox BoxCCNumber;
        protected System.Web.UI.WebControls.DropDownList DropMonth;
        protected System.Web.UI.WebControls.DropDownList DropYear;
        protected System.Web.UI.WebControls.Button ButtonSubmit;

        //Class variables
        private int                 iDelIdHigh, iDelIdLow, iPUIDHigh, iPUIDLow;
        private string              strPMN, strAcctInfo, strPayInfo;

        private void Page_Load(object sender, System.EventArgs e)
		{
        }

        private void ConstructXML()
        {
        XmlNamespaceManager nsmgr;
        XmlDocument         xmlUserInfo;
        XmlElement          xmlRoot;
        XmlNode             nodeParent, nodeChild;

            //Get User info from session object
            xmlUserInfo = (XmlDocument)Session["UserInfoXML"];

            //Initialize NameSpaceManager
            nsmgr = new XmlNamespaceManager(xmlUserInfo.NameTable);
            nsmgr.AddNamespace("a", "urn:schemas-microsoft-com:billing-data");

            xmlRoot = xmlUserInfo.DocumentElement;

            nodeParent = xmlRoot.SelectSingleNode("a:PaymentInstrumentInfo", nsmgr);

            nodeChild = nodeParent.SelectSingleNode("a:CreditCardInfo", nsmgr);
            nodeChild.SelectSingleNode("a:AccountHolderName", nsmgr).InnerText = BoxAccName.Text;
            nodeChild.SelectSingleNode("a:EncryptedAccountNumber", nsmgr).InnerText = BoxCCNumber.Text;
            nodeChild.SelectSingleNode("a:CardType", nsmgr).InnerText = DropCCard.SelectedItem.Text;
            nodeChild.SelectSingleNode("a:ExpirationDate", nsmgr).InnerText = (DropMonth.SelectedItem.Text + DropYear.SelectedItem.Text);

            nodeChild = nodeParent.SelectSingleNode("a:Phone", nsmgr);
            nodeChild.SelectSingleNode("a:PhoneNumber", nsmgr).InnerText = BoxTelephone.Text;
            nodeChild.SelectSingleNode("a:PhoneExtension", nsmgr).InnerText = BoxExtension.Text;

            nodeChild = nodeParent.SelectSingleNode("a:AddressInfo", nsmgr);
            nodeChild.SelectSingleNode("a:Street1", nsmgr).InnerText = BoxAddLine1.Text;
            nodeChild.SelectSingleNode("a:Street2", nsmgr).InnerText = BoxAddLine2.Text;
            nodeChild.SelectSingleNode("a:City", nsmgr).InnerText = BoxCity.Text;
            nodeChild.SelectSingleNode("a:State", nsmgr).InnerText = BoxStateCode.Text;
            nodeChild.SelectSingleNode("a:CountryCode", nsmgr).InnerText = BoxCountryCode.Text;
            nodeChild.SelectSingleNode("a:PostalCode", nsmgr).InnerText = BoxZipCode.Text;

            //Now Get the required information for CreateAccount
            iDelIdHigh = System.Convert.ToInt32(xmlRoot.SelectSingleNode("a:IDelegateIDHigh", nsmgr).InnerText);
            iDelIdLow = System.Convert.ToInt32(xmlRoot.SelectSingleNode("a:IDelegateIDLow", nsmgr).InnerText);
            iPUIDHigh = System.Convert.ToInt32(xmlRoot.SelectSingleNode("a:IRequesterIDHigh", nsmgr).InnerText);
            iPUIDLow = System.Convert.ToInt32(xmlRoot.SelectSingleNode("a:IRequesterIDLow", nsmgr).InnerText);
            strPMN = xmlRoot.SelectSingleNode("a:PMN", nsmgr).InnerText;
            strAcctInfo = xmlRoot.SelectSingleNode("a:AccountInfo", nsmgr).OuterXml;
            strPayInfo = xmlRoot.SelectSingleNode("a:PaymentInstrumentInfo", nsmgr).OuterXml;
        }

        private void EncryptCCNumber()
        {
        const string                strKeyGUID = "89BA9D19-9A04-4A15-A2A3-AF881B10FF53";

        PSO.BDKProvider             PsoServer;
        Billing.PSO.PsoEncrypterClass    PsoEncrypter;
        string                      strKeyXML, strError, strKey, strClearText, strEncText;
        XmlDocument                 KeyXML;
        XmlNamespaceManager             nsmgr;

            //Set the Pso object from session object
            PsoServer = (PSO.BDKProvider)Session["PSOConnector"];

            //Get Key for Encryption
            PsoServer.GetKey(1, 1, strKeyGUID, out strError, out strKeyXML);

            //TODO check for error

            //Get Key from XML
            KeyXML = new XmlDocument();
            KeyXML.LoadXml(strKeyXML);

            nsmgr = new XmlNamespaceManager(KeyXML.NameTable);
            nsmgr.AddNamespace("a", "urn:schemas-microsoft-com:billing-data");

            strKey = KeyXML.SelectSingleNode("//a:Data", nsmgr).InnerText;

            //Encrypt the key
            strClearText = BoxCCNumber.Text;
            PsoEncrypter = new Billing.PSO.PsoEncrypterClass();
            PsoEncrypter.Initialize();
            strEncText = PsoEncrypter.Encrypt(strClearText, strKey);

            BoxCCNumber.Text = strEncText;
        }
		#region Web Form Designer generated code
		override protected void OnInit(EventArgs e)
		{
			//
			// CODEGEN: This call is required by the ASP.NET Web Form Designer.
			//
			InitializeComponent();
			base.OnInit(e);
		}
		
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{    
            this.ButtonSubmit.Click += new System.EventHandler(this.ButtonSubmit_Click);
            this.Load += new System.EventHandler(this.Page_Load);

        }
		#endregion

        public void ButtonSubmit_Click(object sender, System.EventArgs e)
        {
        PSO.BDKProvider PsoServer;
        string strError, strAcctId, strPayId, strDate, strPWork;

            EncryptCCNumber();
            ConstructXML();

            PsoServer = (PSO.BDKProvider)Session["PSOConnector"];

            PsoServer.CreateAccount(iDelIdHigh, iDelIdLow, iPUIDHigh, iPUIDLow,
                                    strPMN, String.Empty, strAcctInfo,
                                    strPayInfo, out strError, out strAcctId,
                                    out strPayId, out strDate, out strPWork);

            Session["AccountId"] = strAcctId;

            Response.Redirect("SuccessAccountCreated.asp", true);
        }
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\SCS\4.0\samples\SCS API\ASP.Net\SPKTenantDemo\ContactInfo.aspx.cs ===
using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Xml;

namespace SPKTenantDemo
{
	/// <summary>
	/// Summary description for ContactInfo.
	/// </summary>
	public class ContactInfo : System.Web.UI.Page
	{
        //UI Controls
        protected System.Web.UI.WebControls.Label LabFriendlyName;
        protected System.Web.UI.WebControls.Label LabExtension;
        protected System.Web.UI.WebControls.Label LabTelephone;
        protected System.Web.UI.WebControls.Label LabCountryCode;
        protected System.Web.UI.WebControls.Label LabZipCode;
        protected System.Web.UI.WebControls.Label LabStateCode;
        protected System.Web.UI.WebControls.Label LabCity;
        protected System.Web.UI.WebControls.Label LabAddLine2;
        protected System.Web.UI.WebControls.Label LabEmail;
        protected System.Web.UI.WebControls.Label LabLastName;
        protected System.Web.UI.WebControls.Label LabFirstName;
        protected System.Web.UI.WebControls.Button ButtonNext;
        protected System.Web.UI.WebControls.Label LabAddLine1;
        protected System.Web.UI.WebControls.Label LabCompany;
        protected System.Web.UI.WebControls.TextBox BoxFriendlyName;
        protected System.Web.UI.WebControls.Label LabMain;
        protected System.Web.UI.WebControls.TextBox BoxFirstName;
        protected System.Web.UI.WebControls.TextBox BoxLastName;
        protected System.Web.UI.WebControls.TextBox BoxEmail;
        protected System.Web.UI.WebControls.TextBox BoxCompany;
        protected System.Web.UI.WebControls.TextBox BoxAddLine1;
        protected System.Web.UI.WebControls.TextBox BoxAddLine2;
        protected System.Web.UI.WebControls.TextBox BoxCity;
        protected System.Web.UI.WebControls.TextBox BoxStateCode;
        protected System.Web.UI.WebControls.TextBox BoxZipCode;
        protected System.Web.UI.WebControls.TextBox BoxCountryCode;
        protected System.Web.UI.WebControls.TextBox BoxTelephone;
        protected System.Web.UI.WebControls.TextBox BoxExtension;

        //Class variables
        private XmlDocument xmlUserInfo;

		private void Page_Load(object sender, System.EventArgs e)
		{
        string UserInfoXML = "<?xml version='1.0'?><UserInfo xmlns='urn:schemas-microsoft-com:billing-data'>" +
            "<IDelegateIDHigh>1</IDelegateIDHigh><IDelegateIDLow>1</IDelegateIDLow><IRequesterIDHigh>" +
            Session["PUIDHigh"] + "</IRequesterIDHigh><IRequesterIDLow>" + Session["PUIDLow"] +
            "</IRequesterIDLow><PMN>" + Session["PMN"] + "</PMN><TrackingGUID/>" +
            "<AccountInfo><CustomerType>PERSONAL</CustomerType><FriendlyName/><FirstName/>" +
            "<LastName/><Email/><CompanyName/><Locale>en-US</Locale><Currency>USD</Currency>" +
            "<PhoneSet><Phone><PhoneType>PRIMARY</PhoneType><PhonePrefix>425</PhonePrefix>" +
            "<PhoneNumber/><PhoneExtension/><CountryCode>US</CountryCode></Phone></PhoneSet>" +
            "<AddressInfoSet><AddressInfo><FriendlyName>PRIMARY</FriendlyName><Street1/><Street2/>" +
            "<City/><State/><CountryCode/><PostalCode/></AddressInfo></AddressInfoSet></AccountInfo>" +
            "<PaymentInstrumentInfo><PaymentInstrumentType>CREDITCARD</PaymentInstrumentType>" +
            "<FriendlyName>Payment Info</FriendlyName><CreditCardInfo><AccountHolderName/>" +
            "<EncryptedAccountNumber/><CardType/><ExpirationDate>112005</ExpirationDate></CreditCardInfo>" +
            "<Phone><PhoneType>PRIMARY</PhoneType><PhonePrefix>425</PhonePrefix><PhoneNumber/>" +
            "<PhoneExtension/><CountryCode>US</CountryCode></Phone><AddressInfo><FriendlyName>" +
            "Credit card Address</FriendlyName><Street1/><Street2/><City/><State/><CountryCode/>" +
            "<PostalCode/></AddressInfo></PaymentInstrumentInfo></UserInfo>";

            LabMain.Text = "ContactInformation: ";
            LabFirstName.Text = "First Name: ";
            LabLastName.Text = "Last Name: ";
            LabEmail.Text = "Email Address: ";
            LabCompany.Text = "Company: ";
            LabAddLine1.Text = "Address Line 1: ";
            LabAddLine2.Text = "Address Line 2: ";
            LabCity.Text = "City: ";
            LabStateCode.Text = "State Code: ";
            LabZipCode.Text =  "Zip Code: ";
            LabCountryCode.Text = "Country Code: ";
            LabTelephone.Text = "Telephone: ";
            LabExtension.Text = "Extension: ";
            LabFriendlyName.Text = "Friendly Name for Account: ";

            BoxFriendlyName.Text = "Friendly Account Name 1";
            BoxExtension.Text = "38528";
            BoxTelephone.Text = "703-8528";
            BoxCountryCode.Text = "US";
            BoxZipCode.Text = "98052";
            BoxStateCode.Text = "WA";
            BoxCity.Text = "Redmond";
            BoxAddLine2.Text = "Bldg 116, R. No. 1624";
            BoxAddLine1.Text = "One Microsoft Way";
            BoxCompany.Text = "Microsoft Corp.";
            BoxEmail.Text = "SomeOne@SomeWhere.com";
            BoxLastName.Text = "One";
            BoxFirstName.Text = "Some";

            xmlUserInfo = new XmlDocument();
            xmlUserInfo.LoadXml(UserInfoXML);
		}

        private void ConstructXML()
        {
        XmlElement  xmlRoot;
        XmlNamespaceManager nsmgr;
        XmlNode     nodeParent, nodeChild;

            xmlRoot = xmlUserInfo.DocumentElement;

            nsmgr = new XmlNamespaceManager(xmlUserInfo.NameTable);
            nsmgr.AddNamespace("a", "urn:schemas-microsoft-com:billing-data");

            nodeParent = xmlRoot.SelectSingleNode("a:AccountInfo", nsmgr);
            nodeParent.SelectSingleNode("a:FirstName", nsmgr).InnerText = BoxFirstName.Text;
            nodeParent.SelectSingleNode("a:LastName", nsmgr).InnerText = BoxLastName.Text;
            nodeParent.SelectSingleNode("a:Email", nsmgr).InnerText = BoxEmail.Text;
            nodeParent.SelectSingleNode("a:CompanyName", nsmgr).InnerText = BoxCompany.Text;
            nodeParent.SelectSingleNode("a:FriendlyName", nsmgr).InnerText = BoxFriendlyName.Text;

            nodeChild = nodeParent.SelectSingleNode("a:PhoneSet/a:Phone", nsmgr);
            nodeChild.SelectSingleNode("a:PhoneNumber", nsmgr).InnerText = BoxTelephone.Text;
            nodeChild.SelectSingleNode("a:PhoneExtension", nsmgr).InnerText = BoxExtension.Text;

            nodeChild = nodeParent.SelectSingleNode("a:AddressInfoSet/a:AddressInfo", nsmgr);
            nodeChild.SelectSingleNode("a:Street1", nsmgr).InnerText = BoxAddLine1.Text;
            nodeChild.SelectSingleNode("a:Street2", nsmgr).InnerText = BoxAddLine2.Text;
            nodeChild.SelectSingleNode("a:City", nsmgr).InnerText = BoxCity.Text;
            nodeChild.SelectSingleNode("a:State", nsmgr).InnerText = BoxStateCode.Text;
            nodeChild.SelectSingleNode("a:CountryCode", nsmgr).InnerText = BoxCountryCode.Text;
            nodeChild.SelectSingleNode("a:PostalCode", nsmgr).InnerText = BoxZipCode.Text;

            Session["UserInfoXML"] = xmlUserInfo;
        }
		#region Web Form Designer generated code
		override protected void OnInit(EventArgs e)
		{
			//
			// CODEGEN: This call is required by the ASP.NET Web Form Designer.
			//
			InitializeComponent();
			base.OnInit(e);
		}
		
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{    
            this.ButtonNext.Click += new System.EventHandler(this.ButtonNext_Click);
            this.Load += new System.EventHandler(this.Page_Load);

        }
		#endregion

        private void ButtonNext_Click(object sender, System.EventArgs e)
        {
            ConstructXML();

            Response.Redirect("BillingInfo.aspx", true);
        }
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\SCS\4.0\samples\SCS API\ASP.Net\SPKTenantDemo\bdk.cs ===
﻿//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=1.0.3705.0.
// 
using System.Diagnostics;
using System.Xml.Serialization;
using System;
using System.Web.Services.Protocols;
using System.ComponentModel;
using System.Web.Services;

namespace PSO
{

/// <remarks/>
// CODEGEN: The optional WSDL extension element 'binding' from namespace 'http://schemas.microsoft.com/soap-toolkit/wsdl-extension' was not handled.
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="BDKServerObj2SoapBinding", Namespace="http://tempuri.org/wsdl/")]
public class bdk : System.Web.Services.Protocols.SoapHttpClientProtocol 
{
    
    /// <remarks/>
    public bdk() {
        this.Url = "https://BDKMACHINENAME/bdk2/bdk.WSDL";
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.AddRoleAssignment", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void AddRoleAssignment(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, string bstrRoleAssignmentXML, out string pbstrErrorXML) {
        object[] results = this.Invoke("AddRoleAssignment", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrObjectId,
                    bstrRoleAssignmentXML});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginAddRoleAssignment(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, string bstrRoleAssignmentXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AddRoleAssignment", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrObjectId,
                    bstrRoleAssignmentXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndAddRoleAssignment(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.RemoveRoleAssignment", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void RemoveRoleAssignment(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, string bstrRoleAssignmentXML, out string pbstrErrorXML) {
        object[] results = this.Invoke("RemoveRoleAssignment", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrObjectId,
                    bstrRoleAssignmentXML});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRemoveRoleAssignment(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, string bstrRoleAssignmentXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RemoveRoleAssignment", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrObjectId,
                    bstrRoleAssignmentXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndRemoveRoleAssignment(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetPermitsForPUID", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetPermitsForPUID(int lCustomerPUIDHigh, int lCustomerPUIDLow, string bstrServiceComponentGUID, out string pbstrErrorXML, out int plPermitCount, out string pbstrPermitSetXML) {
        object[] results = this.Invoke("GetPermitsForPUID", new object[] {
                    lCustomerPUIDHigh,
                    lCustomerPUIDLow,
                    bstrServiceComponentGUID});
        pbstrErrorXML = ((string)(results[0]));
        plPermitCount = ((int)(results[1]));
        pbstrPermitSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetPermitsForPUID(int lCustomerPUIDHigh, int lCustomerPUIDLow, string bstrServiceComponentGUID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetPermitsForPUID", new object[] {
                    lCustomerPUIDHigh,
                    lCustomerPUIDLow,
                    bstrServiceComponentGUID}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetPermitsForPUID(System.IAsyncResult asyncResult, out string pbstrErrorXML, out int plPermitCount, out string pbstrPermitSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        plPermitCount = ((int)(results[1]));
        pbstrPermitSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetPermitsForObjectId", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetPermitsForObjectId(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, bool fDeep, out string pbstrErrorXML, out int plPermitCount, out string pbstrPermitSetXML) {
        object[] results = this.Invoke("GetPermitsForObjectId", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrObjectId,
                    fDeep});
        pbstrErrorXML = ((string)(results[0]));
        plPermitCount = ((int)(results[1]));
        pbstrPermitSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetPermitsForObjectId(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, bool fDeep, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetPermitsForObjectId", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrObjectId,
                    fDeep}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetPermitsForObjectId(System.IAsyncResult asyncResult, out string pbstrErrorXML, out int plPermitCount, out string pbstrPermitSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        plPermitCount = ((int)(results[1]));
        pbstrPermitSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.CreateAccount", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void CreateAccount(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrPPMemberName, string bstrTrackingGUID, string bstrAccountInfoXML, string bstrPaymentInstrumentXML, out string pbstrErrorXML, out string pbstrAccountId, out string pbstrPaymentInstrumentId, out string pbstrDate, out string bstrRequiredPaperWorkURL) {
        object[] results = this.Invoke("CreateAccount", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrPPMemberName,
                    bstrTrackingGUID,
                    bstrAccountInfoXML,
                    bstrPaymentInstrumentXML});
        pbstrErrorXML = ((string)(results[0]));
        pbstrAccountId = ((string)(results[1]));
        pbstrPaymentInstrumentId = ((string)(results[2]));
        pbstrDate = ((string)(results[3]));
        bstrRequiredPaperWorkURL = ((string)(results[4]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCreateAccount(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrPPMemberName, string bstrTrackingGUID, string bstrAccountInfoXML, string bstrPaymentInstrumentXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CreateAccount", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrPPMemberName,
                    bstrTrackingGUID,
                    bstrAccountInfoXML,
                    bstrPaymentInstrumentXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndCreateAccount(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrAccountId, out string pbstrPaymentInstrumentId, out string pbstrDate, out string bstrRequiredPaperWorkURL) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrAccountId = ((string)(results[1]));
        pbstrPaymentInstrumentId = ((string)(results[2]));
        pbstrDate = ((string)(results[3]));
        bstrRequiredPaperWorkURL = ((string)(results[4]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetAccountInfo", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetAccountInfo(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrAccountId, out string pbstrErrorXML, out string pbstrAccountInfoXML) {
        object[] results = this.Invoke("GetAccountInfo", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrAccountId});
        pbstrErrorXML = ((string)(results[0]));
        pbstrAccountInfoXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetAccountInfo(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrAccountId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetAccountInfo", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrAccountId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetAccountInfo(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrAccountInfoXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrAccountInfoXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.UpdateAccountInfo", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void UpdateAccountInfo(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrAccountId, string bstrAccountInfoXML, out string pbstrErrorXML, out string pbstrRequiredPaperWorkURL) {
        object[] results = this.Invoke("UpdateAccountInfo", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrAccountId,
                    bstrAccountInfoXML});
        pbstrErrorXML = ((string)(results[0]));
        pbstrRequiredPaperWorkURL = ((string)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUpdateAccountInfo(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrAccountId, string bstrAccountInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdateAccountInfo", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrAccountId,
                    bstrAccountInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndUpdateAccountInfo(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrRequiredPaperWorkURL) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrRequiredPaperWorkURL = ((string)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.CloseAccount", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void CloseAccount(int lDelegateIdHigh, int lDelegateIdLow, string bstrAccountId, string bstrCommentInfoXML, out string pbstrErrorXML) {
        object[] results = this.Invoke("CloseAccount", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrAccountId,
                    bstrCommentInfoXML});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCloseAccount(int lDelegateIdHigh, int lDelegateIdLow, string bstrAccountId, string bstrCommentInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CloseAccount", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrAccountId,
                    bstrCommentInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndCloseAccount(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.ActivateAccount", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void ActivateAccount(int lDelegateIdHigh, int lDelegateIdLow, string bstrAccountId, string bstrCommentInfoXML, out string pbstrErrorXML, out string pbstrAccountStatusInfoXML) {
        object[] results = this.Invoke("ActivateAccount", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrAccountId,
                    bstrCommentInfoXML});
        pbstrErrorXML = ((string)(results[0]));
        pbstrAccountStatusInfoXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginActivateAccount(int lDelegateIdHigh, int lDelegateIdLow, string bstrAccountId, string bstrCommentInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ActivateAccount", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrAccountId,
                    bstrCommentInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndActivateAccount(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrAccountStatusInfoXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrAccountStatusInfoXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.AddViolation", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void AddViolation(int lDelegateIdHigh, int lDelegateIdLow, string bstrObjectId, int lViolationId, string bstrCommentInfoXML, out string pbstrErrorXML, out string pbstrStatusInfoXML, out string pbstrAmountChargedXML) {
        object[] results = this.Invoke("AddViolation", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrObjectId,
                    lViolationId,
                    bstrCommentInfoXML});
        pbstrErrorXML = ((string)(results[0]));
        pbstrStatusInfoXML = ((string)(results[1]));
        pbstrAmountChargedXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginAddViolation(int lDelegateIdHigh, int lDelegateIdLow, string bstrObjectId, int lViolationId, string bstrCommentInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AddViolation", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrObjectId,
                    lViolationId,
                    bstrCommentInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndAddViolation(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrStatusInfoXML, out string pbstrAmountChargedXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrStatusInfoXML = ((string)(results[1]));
        pbstrAmountChargedXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.RemoveViolation", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void RemoveViolation(int lDelegateIdHigh, int lDelegateIdLow, string bstrObjectId, int lViolationId, string bstrCommentInfoXML, out string pbstrErrorXML, out string pbstrStatusInfoXML, out string pbstrAmountChargedXML) {
        object[] results = this.Invoke("RemoveViolation", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrObjectId,
                    lViolationId,
                    bstrCommentInfoXML});
        pbstrErrorXML = ((string)(results[0]));
        pbstrStatusInfoXML = ((string)(results[1]));
        pbstrAmountChargedXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRemoveViolation(int lDelegateIdHigh, int lDelegateIdLow, string bstrObjectId, int lViolationId, string bstrCommentInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RemoveViolation", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrObjectId,
                    lViolationId,
                    bstrCommentInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndRemoveViolation(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrStatusInfoXML, out string pbstrAmountChargedXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrStatusInfoXML = ((string)(results[1]));
        pbstrAmountChargedXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.UpdateSubscriptionStatusFromPaymentInstru" +
"ment", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void UpdateSubscriptionStatusFromPaymentInstrument(int lDelegateIdHigh, int lDelegateIdLow, string bstrStatusChange, string bstrPaymentInstrumentInfoXML, string bstrCommentInfoXML, out string pbstrErrorXML) {
        object[] results = this.Invoke("UpdateSubscriptionStatusFromPaymentInstrument", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrStatusChange,
                    bstrPaymentInstrumentInfoXML,
                    bstrCommentInfoXML});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUpdateSubscriptionStatusFromPaymentInstrument(int lDelegateIdHigh, int lDelegateIdLow, string bstrStatusChange, string bstrPaymentInstrumentInfoXML, string bstrCommentInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdateSubscriptionStatusFromPaymentInstrument", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrStatusChange,
                    bstrPaymentInstrumentInfoXML,
                    bstrCommentInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndUpdateSubscriptionStatusFromPaymentInstrument(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.ProcessQwestEvent", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void ProcessQwestEvent(int lRequesterIdHigh, int lRequesterIdLow, string bstrEventXML) {
        this.Invoke("ProcessQwestEvent", new object[] {
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrEventXML});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginProcessQwestEvent(int lRequesterIdHigh, int lRequesterIdLow, string bstrEventXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ProcessQwestEvent", new object[] {
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrEventXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndProcessQwestEvent(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetAccountIdFromAdminPUID", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetAccountIdFromAdminPUID(int lDelegateIdHigh, int lDelegateIdLow, int lSearchPUIDHigh, int lSearchPUIDLow, bool fFullData, int lMax, out string pbstrErrorXML, out int pfMoreRows, out int plAccountInfoCount, out string pbstrAccountInfoSetXML) {
        object[] results = this.Invoke("GetAccountIdFromAdminPUID", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lSearchPUIDHigh,
                    lSearchPUIDLow,
                    fFullData,
                    lMax});
        pbstrErrorXML = ((string)(results[0]));
        pfMoreRows = ((int)(results[1]));
        plAccountInfoCount = ((int)(results[2]));
        pbstrAccountInfoSetXML = ((string)(results[3]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetAccountIdFromAdminPUID(int lDelegateIdHigh, int lDelegateIdLow, int lSearchPUIDHigh, int lSearchPUIDLow, bool fFullData, int lMax, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetAccountIdFromAdminPUID", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lSearchPUIDHigh,
                    lSearchPUIDLow,
                    fFullData,
                    lMax}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetAccountIdFromAdminPUID(System.IAsyncResult asyncResult, out string pbstrErrorXML, out int pfMoreRows, out int plAccountInfoCount, out string pbstrAccountInfoSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pfMoreRows = ((int)(results[1]));
        plAccountInfoCount = ((int)(results[2]));
        pbstrAccountInfoSetXML = ((string)(results[3]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetAccountIdFromPaymentInstrumentInfo", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetAccountIdFromPaymentInstrumentInfo(int lDelegateIdHigh, int lDelegateIdLow, bool fFullData, int lMax, string bstrPaymentInstrumentInfoXML, out string pbstrErrorXML, out int pfMoreRows, out int plAccountInfoCount, out string pbstrAccountInfoSetXML) {
        object[] results = this.Invoke("GetAccountIdFromPaymentInstrumentInfo", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    fFullData,
                    lMax,
                    bstrPaymentInstrumentInfoXML});
        pbstrErrorXML = ((string)(results[0]));
        pfMoreRows = ((int)(results[1]));
        plAccountInfoCount = ((int)(results[2]));
        pbstrAccountInfoSetXML = ((string)(results[3]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetAccountIdFromPaymentInstrumentInfo(int lDelegateIdHigh, int lDelegateIdLow, bool fFullData, int lMax, string bstrPaymentInstrumentInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetAccountIdFromPaymentInstrumentInfo", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    fFullData,
                    lMax,
                    bstrPaymentInstrumentInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetAccountIdFromPaymentInstrumentInfo(System.IAsyncResult asyncResult, out string pbstrErrorXML, out int pfMoreRows, out int plAccountInfoCount, out string pbstrAccountInfoSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pfMoreRows = ((int)(results[1]));
        plAccountInfoCount = ((int)(results[2]));
        pbstrAccountInfoSetXML = ((string)(results[3]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.AddPaymentInstrument", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void AddPaymentInstrument(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrAccountId, string bstrPaymentInstrumentInfoXML, out string pbstrErrorXML, out string pbstrPaymentInstrumentId, out string pbstrRequiredPaperWorkURL) {
        object[] results = this.Invoke("AddPaymentInstrument", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    bstrAccountId,
                    bstrPaymentInstrumentInfoXML});
        pbstrErrorXML = ((string)(results[0]));
        pbstrPaymentInstrumentId = ((string)(results[1]));
        pbstrRequiredPaperWorkURL = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginAddPaymentInstrument(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrAccountId, string bstrPaymentInstrumentInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AddPaymentInstrument", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    bstrAccountId,
                    bstrPaymentInstrumentInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndAddPaymentInstrument(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrPaymentInstrumentId, out string pbstrRequiredPaperWorkURL) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrPaymentInstrumentId = ((string)(results[1]));
        pbstrRequiredPaperWorkURL = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetPaymentInstruments", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetPaymentInstruments(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, out string pbstrErrorXML, out int plPaymentInstrumentInfoCount, out string pbstrPaymentInstrumentInfoSetXML) {
        object[] results = this.Invoke("GetPaymentInstruments", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrObjectId});
        pbstrErrorXML = ((string)(results[0]));
        plPaymentInstrumentInfoCount = ((int)(results[1]));
        pbstrPaymentInstrumentInfoSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetPaymentInstruments(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetPaymentInstruments", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrObjectId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetPaymentInstruments(System.IAsyncResult asyncResult, out string pbstrErrorXML, out int plPaymentInstrumentInfoCount, out string pbstrPaymentInstrumentInfoSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        plPaymentInstrumentInfoCount = ((int)(results[1]));
        pbstrPaymentInstrumentInfoSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.UpdatePaymentInstrumentInfo", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void UpdatePaymentInstrumentInfo(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrPaymentInstrumentId, string bstrPaymentInstrumentInfoXML, out string pbstrErrorXML) {
        object[] results = this.Invoke("UpdatePaymentInstrumentInfo", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrPaymentInstrumentId,
                    bstrPaymentInstrumentInfoXML});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUpdatePaymentInstrumentInfo(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrPaymentInstrumentId, string bstrPaymentInstrumentInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdatePaymentInstrumentInfo", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrPaymentInstrumentId,
                    bstrPaymentInstrumentInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndUpdatePaymentInstrumentInfo(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.RemovePaymentInstrument", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void RemovePaymentInstrument(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrPaymentInstrumentId, out string pbstrErrorXML) {
        object[] results = this.Invoke("RemovePaymentInstrument", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrPaymentInstrumentId});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRemovePaymentInstrument(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrPaymentInstrumentId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RemovePaymentInstrument", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrPaymentInstrumentId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndRemovePaymentInstrument(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.ReplacePaymentInstrument", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void ReplacePaymentInstrument(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrFromPaymentInstrumentId, string bstrToPaymentInstrumentInfoXML, out string pbstrErrorXML, out string pbstrAmountChargedXML, out string pbstrPaymentInstrumentId, out string pbstrRequiredPaperWorkURL) {
        object[] results = this.Invoke("ReplacePaymentInstrument", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    bstrFromPaymentInstrumentId,
                    bstrToPaymentInstrumentInfoXML});
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedXML = ((string)(results[1]));
        pbstrPaymentInstrumentId = ((string)(results[2]));
        pbstrRequiredPaperWorkURL = ((string)(results[3]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginReplacePaymentInstrument(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrFromPaymentInstrumentId, string bstrToPaymentInstrumentInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ReplacePaymentInstrument", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    bstrFromPaymentInstrumentId,
                    bstrToPaymentInstrumentInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndReplacePaymentInstrument(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrAmountChargedXML, out string pbstrPaymentInstrumentId, out string pbstrRequiredPaperWorkURL) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedXML = ((string)(results[1]));
        pbstrPaymentInstrumentId = ((string)(results[2]));
        pbstrRequiredPaperWorkURL = ((string)(results[3]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.SettleBalance", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void SettleBalance(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrPaymentInstrumentId, out string pbstrErrorXML, out string pbstrAmountChargedXML) {
        object[] results = this.Invoke("SettleBalance", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrPaymentInstrumentId});
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSettleBalance(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrPaymentInstrumentId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SettleBalance", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrPaymentInstrumentId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSettleBalance(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrAmountChargedXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.TransferBalance", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void TransferBalance(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrFromPaymentInstrumentId, string bstrToPaymentInstrumentId, out string pbstrErrorXML, out string pbstrAmountChargedXML) {
        object[] results = this.Invoke("TransferBalance", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrFromPaymentInstrumentId,
                    bstrToPaymentInstrumentId});
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginTransferBalance(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrFromPaymentInstrumentId, string bstrToPaymentInstrumentId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("TransferBalance", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrFromPaymentInstrumentId,
                    bstrToPaymentInstrumentId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndTransferBalance(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrAmountChargedXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.CloseBalance", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void CloseBalance(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrObjectId, string bstrLineItemId, out string pbstrErrorXML, out string pbstrAmountChargedXML) {
        object[] results = this.Invoke("CloseBalance", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrObjectId,
                    bstrLineItemId});
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCloseBalance(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrObjectId, string bstrLineItemId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CloseBalance", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrObjectId,
                    bstrLineItemId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndCloseBalance(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrAmountChargedXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.SwitchPaymentInstruments", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void SwitchPaymentInstruments(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrFromPaymentInstrumentId, string bstrToPaymentInstrumentId, out string pbstrErrorXML, out string pbstrAmountChargedXML) {
        object[] results = this.Invoke("SwitchPaymentInstruments", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    bstrFromPaymentInstrumentId,
                    bstrToPaymentInstrumentId});
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSwitchPaymentInstruments(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrFromPaymentInstrumentId, string bstrToPaymentInstrumentId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SwitchPaymentInstruments", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    bstrFromPaymentInstrumentId,
                    bstrToPaymentInstrumentId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSwitchPaymentInstruments(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrAmountChargedXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.AddComment", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void AddComment(int lDelegateIdHigh, int lDelegateIdLow, string bstrAccountId, string bstrCommentInfoXML, out string pbstrErrorXML) {
        object[] results = this.Invoke("AddComment", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrAccountId,
                    bstrCommentInfoXML});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginAddComment(int lDelegateIdHigh, int lDelegateIdLow, string bstrAccountId, string bstrCommentInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AddComment", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrAccountId,
                    bstrCommentInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndAddComment(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetComments", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetComments(int lDelegateIdHigh, int lDelegateIdLow, string bstrAccountId, out string pbstrErrorXML, out int plCommentInfoSetCount, out string pbstrCommentInfoSetXML) {
        object[] results = this.Invoke("GetComments", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrAccountId});
        pbstrErrorXML = ((string)(results[0]));
        plCommentInfoSetCount = ((int)(results[1]));
        pbstrCommentInfoSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetComments(int lDelegateIdHigh, int lDelegateIdLow, string bstrAccountId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetComments", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrAccountId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetComments(System.IAsyncResult asyncResult, out string pbstrErrorXML, out int plCommentInfoSetCount, out string pbstrCommentInfoSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        plCommentInfoSetCount = ((int)(results[1]));
        pbstrCommentInfoSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.PurchaseOffering", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void PurchaseOffering(
                int lDelegateIdHigh, 
                int lDelegateIdLow, 
                int lRequesterIdHigh, 
                int lRequesterIdLow, 
                string bstrTrackingGUID, 
                bool fComputeOnly, 
                string bstrSubscriptionName, 
                string bstrAccountId, 
                string bstrBaseSubscriptionId, 
                string bstrOfferingGUID, 
                int lOverrideAmount, 
                string bstrPaymentInstrumentId, 
                string bstrShippingAddressId, 
                string bstrActivationDate, 
                string bstrSubscriptionEndDate, 
                string bstrReferralSetXML, 
                out string pbstrErrorXML, 
                out string pbstrSubscriptionId, 
                out string pbstrAmountChargedXML, 
                out int plAddedServiceInstanceCount, 
                out string pbstrAddedServiceInstanceSetXML) {
        object[] results = this.Invoke("PurchaseOffering", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    fComputeOnly,
                    bstrSubscriptionName,
                    bstrAccountId,
                    bstrBaseSubscriptionId,
                    bstrOfferingGUID,
                    lOverrideAmount,
                    bstrPaymentInstrumentId,
                    bstrShippingAddressId,
                    bstrActivationDate,
                    bstrSubscriptionEndDate,
                    bstrReferralSetXML});
        pbstrErrorXML = ((string)(results[0]));
        pbstrSubscriptionId = ((string)(results[1]));
        pbstrAmountChargedXML = ((string)(results[2]));
        plAddedServiceInstanceCount = ((int)(results[3]));
        pbstrAddedServiceInstanceSetXML = ((string)(results[4]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginPurchaseOffering(
                int lDelegateIdHigh, 
                int lDelegateIdLow, 
                int lRequesterIdHigh, 
                int lRequesterIdLow, 
                string bstrTrackingGUID, 
                bool fComputeOnly, 
                string bstrSubscriptionName, 
                string bstrAccountId, 
                string bstrBaseSubscriptionId, 
                string bstrOfferingGUID, 
                int lOverrideAmount, 
                string bstrPaymentInstrumentId, 
                string bstrShippingAddressId, 
                string bstrActivationDate, 
                string bstrSubscriptionEndDate, 
                string bstrReferralSetXML, 
                System.AsyncCallback callback, 
                object asyncState) {
        return this.BeginInvoke("PurchaseOffering", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    fComputeOnly,
                    bstrSubscriptionName,
                    bstrAccountId,
                    bstrBaseSubscriptionId,
                    bstrOfferingGUID,
                    lOverrideAmount,
                    bstrPaymentInstrumentId,
                    bstrShippingAddressId,
                    bstrActivationDate,
                    bstrSubscriptionEndDate,
                    bstrReferralSetXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndPurchaseOffering(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrSubscriptionId, out string pbstrAmountChargedXML, out int plAddedServiceInstanceCount, out string pbstrAddedServiceInstanceSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrSubscriptionId = ((string)(results[1]));
        pbstrAmountChargedXML = ((string)(results[2]));
        plAddedServiceInstanceCount = ((int)(results[3]));
        pbstrAddedServiceInstanceSetXML = ((string)(results[4]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.CancelSubscription", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void CancelSubscription(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, bool fComputeOnly, string bstrSubscriptionId, string bstrCancelDate, string bstrCommentInfoXML, out string pbstrErrorXML, out string pbstrAmountChargedXML, out string pbstrSubscriptionStatusInfoXML, out int plRemovedServiceInstanceCount, out string pbstrRemovedServiceInstanceSetXML) {
        object[] results = this.Invoke("CancelSubscription", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    fComputeOnly,
                    bstrSubscriptionId,
                    bstrCancelDate,
                    bstrCommentInfoXML});
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedXML = ((string)(results[1]));
        pbstrSubscriptionStatusInfoXML = ((string)(results[2]));
        plRemovedServiceInstanceCount = ((int)(results[3]));
        pbstrRemovedServiceInstanceSetXML = ((string)(results[4]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCancelSubscription(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, bool fComputeOnly, string bstrSubscriptionId, string bstrCancelDate, string bstrCommentInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CancelSubscription", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    fComputeOnly,
                    bstrSubscriptionId,
                    bstrCancelDate,
                    bstrCommentInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndCancelSubscription(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrAmountChargedXML, out string pbstrSubscriptionStatusInfoXML, out int plRemovedServiceInstanceCount, out string pbstrRemovedServiceInstanceSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedXML = ((string)(results[1]));
        pbstrSubscriptionStatusInfoXML = ((string)(results[2]));
        plRemovedServiceInstanceCount = ((int)(results[3]));
        pbstrRemovedServiceInstanceSetXML = ((string)(results[4]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.SearchAccounts", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void SearchAccounts(int lDelegateIdHigh, int lDelegateIdLow, bool fFullData, int lMax, string bstrSearchXML, out string pbstrErrorXML, out int pfMoreRows, out int plAccountInfoCount, out string pbstrAccountInfoSetXML) {
        object[] results = this.Invoke("SearchAccounts", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    fFullData,
                    lMax,
                    bstrSearchXML});
        pbstrErrorXML = ((string)(results[0]));
        pfMoreRows = ((int)(results[1]));
        plAccountInfoCount = ((int)(results[2]));
        pbstrAccountInfoSetXML = ((string)(results[3]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSearchAccounts(int lDelegateIdHigh, int lDelegateIdLow, bool fFullData, int lMax, string bstrSearchXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SearchAccounts", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    fFullData,
                    lMax,
                    bstrSearchXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSearchAccounts(System.IAsyncResult asyncResult, out string pbstrErrorXML, out int pfMoreRows, out int plAccountInfoCount, out string pbstrAccountInfoSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pfMoreRows = ((int)(results[1]));
        plAccountInfoCount = ((int)(results[2]));
        pbstrAccountInfoSetXML = ((string)(results[3]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetSubscriptions", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetSubscriptions(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, out string pbstrErrorXML, out int plSubscriptionInfoCount, out string pbstrSubscriptionInfoSetXML) {
        object[] results = this.Invoke("GetSubscriptions", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrObjectId});
        pbstrErrorXML = ((string)(results[0]));
        plSubscriptionInfoCount = ((int)(results[1]));
        pbstrSubscriptionInfoSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetSubscriptions(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetSubscriptions", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrObjectId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetSubscriptions(System.IAsyncResult asyncResult, out string pbstrErrorXML, out int plSubscriptionInfoCount, out string pbstrSubscriptionInfoSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        plSubscriptionInfoCount = ((int)(results[1]));
        pbstrSubscriptionInfoSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetSubscriptionStatus", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetSubscriptionStatus(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrSubscriptionId, out string pbstrErrorXML, out string pbstrSubscriptionStatusInfoXML) {
        object[] results = this.Invoke("GetSubscriptionStatus", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrSubscriptionId});
        pbstrErrorXML = ((string)(results[0]));
        pbstrSubscriptionStatusInfoXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetSubscriptionStatus(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrSubscriptionId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetSubscriptionStatus", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrSubscriptionId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetSubscriptionStatus(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrSubscriptionStatusInfoXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrSubscriptionStatusInfoXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetReferralData", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetReferralData(int lDelegateIdHigh, int lDelegateIdLow, string bstrSubscriptionId, out string pbstrErrorXML, out int plReferralCount, out string pbstrReferralSetXML) {
        object[] results = this.Invoke("GetReferralData", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrSubscriptionId});
        pbstrErrorXML = ((string)(results[0]));
        plReferralCount = ((int)(results[1]));
        pbstrReferralSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetReferralData(int lDelegateIdHigh, int lDelegateIdLow, string bstrSubscriptionId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetReferralData", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrSubscriptionId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetReferralData(System.IAsyncResult asyncResult, out string pbstrErrorXML, out int plReferralCount, out string pbstrReferralSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        plReferralCount = ((int)(results[1]));
        pbstrReferralSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.ConvertSubscription", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void ConvertSubscription(
                int lDelegateIdHigh, 
                int lDelegateIdLow, 
                int lRequesterIdHigh, 
                int lRequesterIdLow, 
                string bstrTrackingGUID, 
                bool fComputeOnly, 
                int lConvertMode, 
                int lOverrideFlags, 
                string bstrSubscriptionName, 
                string bstrSubscriptionId, 
                string bstrOfferingGUID, 
                int lOverrideAmount, 
                string bstrSubscriptionEndDate, 
                string bstrReferralSetXML, 
                out string pbstrErrorXML, 
                out string pbstrAmountChargedXML, 
                out int plAddedServiceInstanceSetCount, 
                out string pbstrAddedServiceInstanceSet, 
                out int plRemovedServiceInstanceSetCount, 
                out string pbstrRemoveServiceInstanceSet) {
        object[] results = this.Invoke("ConvertSubscription", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    fComputeOnly,
                    lConvertMode,
                    lOverrideFlags,
                    bstrSubscriptionName,
                    bstrSubscriptionId,
                    bstrOfferingGUID,
                    lOverrideAmount,
                    bstrSubscriptionEndDate,
                    bstrReferralSetXML});
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedXML = ((string)(results[1]));
        plAddedServiceInstanceSetCount = ((int)(results[2]));
        pbstrAddedServiceInstanceSet = ((string)(results[3]));
        plRemovedServiceInstanceSetCount = ((int)(results[4]));
        pbstrRemoveServiceInstanceSet = ((string)(results[5]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginConvertSubscription(
                int lDelegateIdHigh, 
                int lDelegateIdLow, 
                int lRequesterIdHigh, 
                int lRequesterIdLow, 
                string bstrTrackingGUID, 
                bool fComputeOnly, 
                int lConvertMode, 
                int lOverrideFlags, 
                string bstrSubscriptionName, 
                string bstrSubscriptionId, 
                string bstrOfferingGUID, 
                int lOverrideAmount, 
                string bstrSubscriptionEndDate, 
                string bstrReferralSetXML, 
                System.AsyncCallback callback, 
                object asyncState) {
        return this.BeginInvoke("ConvertSubscription", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    fComputeOnly,
                    lConvertMode,
                    lOverrideFlags,
                    bstrSubscriptionName,
                    bstrSubscriptionId,
                    bstrOfferingGUID,
                    lOverrideAmount,
                    bstrSubscriptionEndDate,
                    bstrReferralSetXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndConvertSubscription(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrAmountChargedXML, out int plAddedServiceInstanceSetCount, out string pbstrAddedServiceInstanceSet, out int plRemovedServiceInstanceSetCount, out string pbstrRemoveServiceInstanceSet) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedXML = ((string)(results[1]));
        plAddedServiceInstanceSetCount = ((int)(results[2]));
        pbstrAddedServiceInstanceSet = ((string)(results[3]));
        plRemovedServiceInstanceSetCount = ((int)(results[4]));
        pbstrRemoveServiceInstanceSet = ((string)(results[5]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.UpdateSubscriptionInfo", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void UpdateSubscriptionInfo(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrSubscriptionId, string bstrSubscriptionInfoXML, string bstrReferralSetXML, out string pbstrErrorXML) {
        object[] results = this.Invoke("UpdateSubscriptionInfo", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    bstrSubscriptionId,
                    bstrSubscriptionInfoXML,
                    bstrReferralSetXML});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUpdateSubscriptionInfo(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrSubscriptionId, string bstrSubscriptionInfoXML, string bstrReferralSetXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdateSubscriptionInfo", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    bstrSubscriptionId,
                    bstrSubscriptionInfoXML,
                    bstrReferralSetXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndUpdateSubscriptionInfo(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetAccountStatus", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetAccountStatus(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrAccountId, out string pbstrErrorXML, out string pbstrAccountStatusInfoXML) {
        object[] results = this.Invoke("GetAccountStatus", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrAccountId});
        pbstrErrorXML = ((string)(results[0]));
        pbstrAccountStatusInfoXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetAccountStatus(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrAccountId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetAccountStatus", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrAccountId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetAccountStatus(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrAccountStatusInfoXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrAccountStatusInfoXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetBaseOfferings", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetBaseOfferings(string bstrOfferingGUID, string bstrCategory, string bstrCountry, string bstrLocale, string bstrCurrency, out string pbstrErrorText, out int plOfferingInfoCount, out string pbstrOfferingInfoSetXML) {
        object[] results = this.Invoke("GetBaseOfferings", new object[] {
                    bstrOfferingGUID,
                    bstrCategory,
                    bstrCountry,
                    bstrLocale,
                    bstrCurrency});
        pbstrErrorText = ((string)(results[0]));
        plOfferingInfoCount = ((int)(results[1]));
        pbstrOfferingInfoSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetBaseOfferings(string bstrOfferingGUID, string bstrCategory, string bstrCountry, string bstrLocale, string bstrCurrency, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetBaseOfferings", new object[] {
                    bstrOfferingGUID,
                    bstrCategory,
                    bstrCountry,
                    bstrLocale,
                    bstrCurrency}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetBaseOfferings(System.IAsyncResult asyncResult, out string pbstrErrorText, out int plOfferingInfoCount, out string pbstrOfferingInfoSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorText = ((string)(results[0]));
        plOfferingInfoCount = ((int)(results[1]));
        pbstrOfferingInfoSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetEligibleOfferings", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetEligibleOfferings(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrAccountId, string bstrOfferingGUID, string bstrCategory, string bstrFilter, out string pbstrErrorText, out int plOfferingInfoCount, out string pbstrOfferingInfoSetXML) {
        object[] results = this.Invoke("GetEligibleOfferings", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrAccountId,
                    bstrOfferingGUID,
                    bstrCategory,
                    bstrFilter});
        pbstrErrorText = ((string)(results[0]));
        plOfferingInfoCount = ((int)(results[1]));
        pbstrOfferingInfoSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetEligibleOfferings(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrAccountId, string bstrOfferingGUID, string bstrCategory, string bstrFilter, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetEligibleOfferings", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrAccountId,
                    bstrOfferingGUID,
                    bstrCategory,
                    bstrFilter}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetEligibleOfferings(System.IAsyncResult asyncResult, out string pbstrErrorText, out int plOfferingInfoCount, out string pbstrOfferingInfoSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorText = ((string)(results[0]));
        plOfferingInfoCount = ((int)(results[1]));
        pbstrOfferingInfoSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetServiceComponents", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetServiceComponents(string bstrOfferingGUID, out string pbstrErrorText, out int plServiceComponentCount, out string pbstrServiceComponentSetXML) {
        object[] results = this.Invoke("GetServiceComponents", new object[] {
                    bstrOfferingGUID});
        pbstrErrorText = ((string)(results[0]));
        plServiceComponentCount = ((int)(results[1]));
        pbstrServiceComponentSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetServiceComponents(string bstrOfferingGUID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetServiceComponents", new object[] {
                    bstrOfferingGUID}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetServiceComponents(System.IAsyncResult asyncResult, out string pbstrErrorText, out int plServiceComponentCount, out string pbstrServiceComponentSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorText = ((string)(results[0]));
        plServiceComponentCount = ((int)(results[1]));
        pbstrServiceComponentSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.ValidateProvisioningData", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void ValidateProvisioningData(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrServiceComponentId, string bstrDetailsXML, out string pbstrErrorXML, out string pbstrResponseXML) {
        object[] results = this.Invoke("ValidateProvisioningData", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrServiceComponentId,
                    bstrDetailsXML});
        pbstrErrorXML = ((string)(results[0]));
        pbstrResponseXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginValidateProvisioningData(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrServiceComponentId, string bstrDetailsXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ValidateProvisioningData", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrServiceComponentId,
                    bstrDetailsXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndValidateProvisioningData(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrResponseXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrResponseXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.CheckProvisioningStatus", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void CheckProvisioningStatus(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrServiceComponentId, out string pbstrErrorXML, out string pbstrResponseXML) {
        object[] results = this.Invoke("CheckProvisioningStatus", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrServiceComponentId});
        pbstrErrorXML = ((string)(results[0]));
        pbstrResponseXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCheckProvisioningStatus(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrServiceComponentId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CheckProvisioningStatus", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrServiceComponentId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndCheckProvisioningStatus(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrResponseXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrResponseXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.ProvisionServices", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void ProvisionServices(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrServiceInstanceSetXML, out string pbstrErrorXML) {
        object[] results = this.Invoke("ProvisionServices", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrServiceInstanceSetXML});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginProvisionServices(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrServiceInstanceSetXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ProvisionServices", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrServiceInstanceSetXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndProvisionServices(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.DeprovisionServices", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void DeprovisionServices(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrServiceInstanceSetXML, out string pbstrErrorXML) {
        object[] results = this.Invoke("DeprovisionServices", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrServiceInstanceSetXML});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginDeprovisionServices(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrServiceInstanceSetXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DeprovisionServices", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrServiceInstanceSetXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndDeprovisionServices(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.ReportUsageEvent", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void ReportUsageEvent(string bstrTrackingGUID, string bstrUsageSetXML, out string pbstrErrorXML) {
        object[] results = this.Invoke("ReportUsageEvent", new object[] {
                    bstrTrackingGUID,
                    bstrUsageSetXML});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginReportUsageEvent(string bstrTrackingGUID, string bstrUsageSetXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ReportUsageEvent", new object[] {
                    bstrTrackingGUID,
                    bstrUsageSetXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndReportUsageEvent(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetResourceBalances", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetResourceBalances(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, string bstrResourceGUID, out string pbstrErrorText, out int pcResourceInfoCount, out string pbstrResourceInfoSet) {
        object[] results = this.Invoke("GetResourceBalances", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrObjectId,
                    bstrResourceGUID});
        pbstrErrorText = ((string)(results[0]));
        pcResourceInfoCount = ((int)(results[1]));
        pbstrResourceInfoSet = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetResourceBalances(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, string bstrResourceGUID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetResourceBalances", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrObjectId,
                    bstrResourceGUID}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetResourceBalances(System.IAsyncResult asyncResult, out string pbstrErrorText, out int pcResourceInfoCount, out string pbstrResourceInfoSet) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorText = ((string)(results[0]));
        pcResourceInfoCount = ((int)(results[1]));
        pbstrResourceInfoSet = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.AdjustResourceBalance", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void AdjustResourceBalance(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrObjectId, string bstrResourceGUID, int lNumberOfUnits, string bstrUnitsOfMeasure, string bstrCommentInfoXML, out string pbstrError) {
        object[] results = this.Invoke("AdjustResourceBalance", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrObjectId,
                    bstrResourceGUID,
                    lNumberOfUnits,
                    bstrUnitsOfMeasure,
                    bstrCommentInfoXML});
        pbstrError = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginAdjustResourceBalance(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrObjectId, string bstrResourceGUID, int lNumberOfUnits, string bstrUnitsOfMeasure, string bstrCommentInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AdjustResourceBalance", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrObjectId,
                    bstrResourceGUID,
                    lNumberOfUnits,
                    bstrUnitsOfMeasure,
                    bstrCommentInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndAdjustResourceBalance(System.IAsyncResult asyncResult, out string pbstrError) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrError = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.CreditPaymentInstrument", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void CreditPaymentInstrument(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrPaymentInstrumentId, int lReasonCode, int lAmount, bool fImmediatelySettle, string bstrCommentInfoXML, out string pbstrError) {
        object[] results = this.Invoke("CreditPaymentInstrument", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrPaymentInstrumentId,
                    lReasonCode,
                    lAmount,
                    fImmediatelySettle,
                    bstrCommentInfoXML});
        pbstrError = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCreditPaymentInstrument(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrPaymentInstrumentId, int lReasonCode, int lAmount, bool fImmediatelySettle, string bstrCommentInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CreditPaymentInstrument", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrPaymentInstrumentId,
                    lReasonCode,
                    lAmount,
                    fImmediatelySettle,
                    bstrCommentInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndCreditPaymentInstrument(System.IAsyncResult asyncResult, out string pbstrError) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrError = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.OffsetLineItem", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void OffsetLineItem(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrLineItemId, int lReasonCode, bool fImmediatelySettle, int lPercentage, string bstrCommentInfoXML, out string pbstrError) {
        object[] results = this.Invoke("OffsetLineItem", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrLineItemId,
                    lReasonCode,
                    fImmediatelySettle,
                    lPercentage,
                    bstrCommentInfoXML});
        pbstrError = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginOffsetLineItem(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrLineItemId, int lReasonCode, bool fImmediatelySettle, int lPercentage, string bstrCommentInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("OffsetLineItem", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrLineItemId,
                    lReasonCode,
                    fImmediatelySettle,
                    lPercentage,
                    bstrCommentInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndOffsetLineItem(System.IAsyncResult asyncResult, out string pbstrError) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrError = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.TestConnection", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void TestConnection(string bstrInputString, out string pbstrOutputString) {
        object[] results = this.Invoke("TestConnection", new object[] {
                    bstrInputString});
        pbstrOutputString = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginTestConnection(string bstrInputString, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("TestConnection", new object[] {
                    bstrInputString}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndTestConnection(System.IAsyncResult asyncResult, out string pbstrOutputString) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrOutputString = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.BanUser", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void BanUser(int lDelegateIdHigh, int lDelegateIdLow, int lReasonCode, string bstrAccountInfoXML, out string pbstrErrorXML) {
        object[] results = this.Invoke("BanUser", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lReasonCode,
                    bstrAccountInfoXML});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginBanUser(int lDelegateIdHigh, int lDelegateIdLow, int lReasonCode, string bstrAccountInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("BanUser", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lReasonCode,
                    bstrAccountInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndBanUser(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.UnbanUser", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void UnbanUser(int lDelegateIdHigh, int lDelegateIdLow, string bstrAccountInfoXML, out string pbstrErrorXML) {
        object[] results = this.Invoke("UnbanUser", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrAccountInfoXML});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUnbanUser(int lDelegateIdHigh, int lDelegateIdLow, string bstrAccountInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UnbanUser", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrAccountInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndUnbanUser(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.BanPaymentInstrument", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void BanPaymentInstrument(int lDelegateIdHigh, int lDelegateIdLow, int lReasonCode, string bstrPaymentInstrumentInfoXML, out string pbstrErrorXML) {
        object[] results = this.Invoke("BanPaymentInstrument", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lReasonCode,
                    bstrPaymentInstrumentInfoXML});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginBanPaymentInstrument(int lDelegateIdHigh, int lDelegateIdLow, int lReasonCode, string bstrPaymentInstrumentInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("BanPaymentInstrument", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lReasonCode,
                    bstrPaymentInstrumentInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndBanPaymentInstrument(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.UnbanPaymentInstrument", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void UnbanPaymentInstrument(int lDelegateIdHigh, int lDelegateIdLow, string bstrPaymentInstrumentInfoXML, out string pbstrErrorXML) {
        object[] results = this.Invoke("UnbanPaymentInstrument", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrPaymentInstrumentInfoXML});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUnbanPaymentInstrument(int lDelegateIdHigh, int lDelegateIdLow, string bstrPaymentInstrumentInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UnbanPaymentInstrument", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrPaymentInstrumentInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndUnbanPaymentInstrument(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.IsPaymentInstrumentBanned", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void IsPaymentInstrumentBanned(int lDelegateIdHigh, int lDelegateIdLow, string bstrPaymentInstrumentInfoXML, out string pbstrErrorXML, out int plIsBanned) {
        object[] results = this.Invoke("IsPaymentInstrumentBanned", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrPaymentInstrumentInfoXML});
        pbstrErrorXML = ((string)(results[0]));
        plIsBanned = ((int)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginIsPaymentInstrumentBanned(int lDelegateIdHigh, int lDelegateIdLow, string bstrPaymentInstrumentInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("IsPaymentInstrumentBanned", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrPaymentInstrumentInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndIsPaymentInstrumentBanned(System.IAsyncResult asyncResult, out string pbstrErrorXML, out int plIsBanned) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        plIsBanned = ((int)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.StopPayments", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void StopPayments(int lDelegateIdHigh, int lDelegateIdLow, string bstrPaymentInstrumentId, out string pbstrErrorXML) {
        object[] results = this.Invoke("StopPayments", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrPaymentInstrumentId});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginStopPayments(int lDelegateIdHigh, int lDelegateIdLow, string bstrPaymentInstrumentId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("StopPayments", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrPaymentInstrumentId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndStopPayments(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetAccountActivity", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetAccountActivity(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, int lBillingPeriodId, string bstrLocale, bool fDeep, out string pbstrErrorXML, out string pbstrAccountActivityXML) {
        object[] results = this.Invoke("GetAccountActivity", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrObjectId,
                    lBillingPeriodId,
                    bstrLocale,
                    fDeep});
        pbstrErrorXML = ((string)(results[0]));
        pbstrAccountActivityXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetAccountActivity(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, int lBillingPeriodId, string bstrLocale, bool fDeep, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetAccountActivity", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrObjectId,
                    lBillingPeriodId,
                    bstrLocale,
                    fDeep}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetAccountActivity(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrAccountActivityXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrAccountActivityXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetBillingPeriods", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetBillingPeriods(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, string bstrLocale, out string pbstrErrorXML, out int plBillingPeriodCount, out string pbstrBillingPeriodSetXML) {
        object[] results = this.Invoke("GetBillingPeriods", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrObjectId,
                    bstrLocale});
        pbstrErrorXML = ((string)(results[0]));
        plBillingPeriodCount = ((int)(results[1]));
        pbstrBillingPeriodSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetBillingPeriods(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, string bstrLocale, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetBillingPeriods", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrObjectId,
                    bstrLocale}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetBillingPeriods(System.IAsyncResult asyncResult, out string pbstrErrorXML, out int plBillingPeriodCount, out string pbstrBillingPeriodSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        plBillingPeriodCount = ((int)(results[1]));
        pbstrBillingPeriodSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.SyncUPSCacheForPUID", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void SyncUPSCacheForPUID(int lCustomerPUIDHigh, int lCustomerPUIDLow, out string pbstrErrorXML) {
        object[] results = this.Invoke("SyncUPSCacheForPUID", new object[] {
                    lCustomerPUIDHigh,
                    lCustomerPUIDLow});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSyncUPSCacheForPUID(int lCustomerPUIDHigh, int lCustomerPUIDLow, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SyncUPSCacheForPUID", new object[] {
                    lCustomerPUIDHigh,
                    lCustomerPUIDLow}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSyncUPSCacheForPUID(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetKey", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetKey(int lRequesterIdHigh, int lRequesterIdLow, string bstrKeyGuid, out string pbstrErrorXML, out string pbstrKeyXml) {
        object[] results = this.Invoke("GetKey", new object[] {
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrKeyGuid});
        pbstrErrorXML = ((string)(results[0]));
        pbstrKeyXml = ((string)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetKey(int lRequesterIdHigh, int lRequesterIdLow, string bstrKeyGuid, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetKey", new object[] {
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrKeyGuid}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetKey(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrKeyXml) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrKeyXml = ((string)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.CompleteConversion", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void CompleteConversion(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrSubscriptionId, out string pbstrErrorXML, out string pbstrAmountChargedXML, out int plAddedServiceInstanceSetCount, out string pbstrAddedServiceInstanceSet, out int plRemovedServiceInstanceSetCount, out string pbstrRemoveServiceInstanceSet) {
        object[] results = this.Invoke("CompleteConversion", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    bstrSubscriptionId});
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedXML = ((string)(results[1]));
        plAddedServiceInstanceSetCount = ((int)(results[2]));
        pbstrAddedServiceInstanceSet = ((string)(results[3]));
        plRemovedServiceInstanceSetCount = ((int)(results[4]));
        pbstrRemoveServiceInstanceSet = ((string)(results[5]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCompleteConversion(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrSubscriptionId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CompleteConversion", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    bstrSubscriptionId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndCompleteConversion(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrAmountChargedXML, out int plAddedServiceInstanceSetCount, out string pbstrAddedServiceInstanceSet, out int plRemovedServiceInstanceSetCount, out string pbstrRemoveServiceInstanceSet) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedXML = ((string)(results[1]));
        plAddedServiceInstanceSetCount = ((int)(results[2]));
        pbstrAddedServiceInstanceSet = ((string)(results[3]));
        plRemovedServiceInstanceSetCount = ((int)(results[4]));
        pbstrRemoveServiceInstanceSet = ((string)(results[5]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.CancelConversion", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void CancelConversion(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrSubscriptionId, out string pbstrErrorXML, out int plAddedServiceInstanceSetCount, out string pbstrAddedServiceInstanceSet, out int plRemovedServiceInstanceSetCount, out string pbstrRemoveServiceInstanceSet) {
        object[] results = this.Invoke("CancelConversion", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    bstrSubscriptionId});
        pbstrErrorXML = ((string)(results[0]));
        plAddedServiceInstanceSetCount = ((int)(results[1]));
        pbstrAddedServiceInstanceSet = ((string)(results[2]));
        plRemovedServiceInstanceSetCount = ((int)(results[3]));
        pbstrRemoveServiceInstanceSet = ((string)(results[4]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCancelConversion(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrSubscriptionId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CancelConversion", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    bstrSubscriptionId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndCancelConversion(System.IAsyncResult asyncResult, out string pbstrErrorXML, out int plAddedServiceInstanceSetCount, out string pbstrAddedServiceInstanceSet, out int plRemovedServiceInstanceSetCount, out string pbstrRemoveServiceInstanceSet) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        plAddedServiceInstanceSetCount = ((int)(results[1]));
        pbstrAddedServiceInstanceSet = ((string)(results[2]));
        plRemovedServiceInstanceSetCount = ((int)(results[3]));
        pbstrRemoveServiceInstanceSet = ((string)(results[4]));
    }
}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\SCS\4.0\samples\SCS API\ASP.Net\SPKTenantDemo\login.aspx.cs ===
using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.Security;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;

namespace SPKTenantDemo
{
	/// <summary>
	/// Summary description for login.
	/// </summary>
	public class login : System.Web.UI.Page
	{
        protected System.Web.UI.WebControls.Label LabMain;
        protected System.Web.UI.WebControls.Label LabName;
        protected System.Web.UI.WebControls.Label LabPassword;
        protected System.Web.UI.WebControls.TextBox BoxName;
        protected System.Web.UI.WebControls.TextBox BoxPassword;
        protected System.Web.UI.WebControls.RequiredFieldValidator ValBoxName;
        protected System.Web.UI.WebControls.RequiredFieldValidator valBoxPassword;
        protected System.Web.UI.WebControls.ValidationSummary ValSummary;
        protected System.Web.UI.WebControls.Button ButtonLogin;
    
		private void Page_Load(object sender, System.EventArgs e)
		{
			// Put user code to initialize the page here
            LabMain.Text = "Please enter your passport Information:";
            LabName.Text = "User Name: ";
            LabPassword.Text = "User Password: ";
        }

		#region Web Form Designer generated code
		override protected void OnInit(EventArgs e)
		{
			//
			// CODEGEN: This call is required by the ASP.NET Web Form Designer.
			//
			InitializeComponent();
			base.OnInit(e);
		}
		
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{    
            this.ButtonLogin.Click += new System.EventHandler(this.ButtonLogin_Click);
            this.Load += new System.EventHandler(this.Page_Load);

        }
		#endregion

        public void ButtonLogin_Click(object sender, System.EventArgs e)
        {
        Random r;
        int    iTmp;

            if (Page.IsValid)
            {
                //Write Authenctication code here

                if (BoxName.Text.ToLower() == "rupesh-test@microsoft.com")
                {
                    Session["PUIDHigh"] = 123456789;
                    Session["PUIDLow"] = 987654321;
                }
                else
                {
                    r = new Random();

                    iTmp = r.Next();
                    Session["PUIDHigh"] = iTmp;

                    iTmp = r.Next();
                    iTmp *= ((r.Next() % 2) == 1 ? -1 : 1); //Randomly multiply by -1
                    Session["PUIDLow"] = iTmp;
                }

                Session["PMN"] = BoxName.Text;
                FormsAuthentication.RedirectFromLoginPage(BoxName.Text, false);
            }
        }
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\SCS\4.0\samples\SCS API\ASP.Net\SPKTenantDemo\Global.asax.cs ===
using System;
using System.Collections;
using System.ComponentModel;
using System.Web;
using System.Web.SessionState;
using PSO;

namespace SPKTenantDemo 
{
	/// <summary>
	/// Summary description for Global.
	/// </summary>
	public class Global : System.Web.HttpApplication
	{
		public Global()
		{
			InitializeComponent();
		}	
		
		protected void Application_Start(Object sender, EventArgs e)
        {
            PSO.BDKProvider.Initialize();
        }
 
		protected void Session_Start(Object sender, EventArgs e)
		{
            Session["PSOConnector"] =  new PSO.BDKProvider();
		}

		protected void Application_BeginRequest(Object sender, EventArgs e)
		{

		}

		protected void Application_EndRequest(Object sender, EventArgs e)
		{

		}

		protected void Application_AuthenticateRequest(Object sender, EventArgs e)
		{

		}

		protected void Application_Error(Object sender, EventArgs e)
		{

		}

		protected void Session_End(Object sender, EventArgs e)
		{

		}

		protected void Application_End(Object sender, EventArgs e)
		{

		}
			
		#region Web Form Designer generated code
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{    
		}
		#endregion
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\SCS\4.0\samples\SCS API\ASP.Net\SPKTenantDemo\GetBaseOfferings.aspx.cs ===
using System;
using System.IO;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Xml;
using System.Xml.Xsl;

namespace SPKTenantDemo
{
	/// <summary>
	/// Summary description for GetBaseOfferings.
	/// </summary>
	public class GetBaseOfferings : System.Web.UI.Page
	{
        //protected override HtmlTextWriter CreateHtmlTextWriter(TextWriter writer)
        //{
        //    return new MyHtmlTextWriter(writer);
        //}
        
        private void Page_Load(object sender, System.EventArgs e)
		{
        PSO.BDKProvider  PsoServer;
        XmlDocument      OfferingInfo;
        XslTransform     OutXslt;

        const string strGUID = "0";
        const string strCategory = "Free Trial";
        const string strCountry = "US";
        const string strLocale = "en-US";
        const string strCurrency = "USD";

        string ResultXML, OfferingInfoSet;
        int    Count;

            //Set the Pso object from session object
            PsoServer = (PSO.BDKProvider)Session["PSOConnector"];

            //Call the main function.
            PsoServer.GetBaseOfferings(strGUID,
                strCategory,
                strCountry,
                strLocale,
                strCurrency,
                out ResultXML,
                out Count,
                out OfferingInfoSet);

            if (0 == Count)
            {
                Session["ShowInfo"] = "<p>This is Error: No Offerings available currently</p>";
                Response.Redirect("ShowInfo.aspx", true);
            }

            OutXslt = new XslTransform();
            OutXslt.Load(MapPath("GetBaseOfferings.xsl"));

            OfferingInfo = new XmlDocument();
            OfferingInfo.LoadXml(OfferingInfoSet);

            //Response.Write(OfferingInfoSet);
            OutXslt.Transform(OfferingInfo, null, Response.Output);
		}

#region Web Form Designer generated code
		override protected void OnInit(EventArgs e)
		{
			//
			// CODEGEN: This call is required by the ASP.NET Web Form Designer.
			//
			InitializeComponent();
			base.OnInit(e);
		}
		
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{    
			this.Load += new System.EventHandler(this.Page_Load);
		}
		#endregion
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\SCS\4.0\samples\SCS API\ASP.Net\SPKTenantDemo\GetEligibleOfferings.aspx.cs ===
using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Xml;
using System.Xml.Xsl;

namespace SPKTenantDemo
{
	/// <summary>
	/// Summary description for GetEligibleOfferings.
	/// </summary>
	public class GetEligibleOfferings : System.Web.UI.Page
	{
		private void Page_Load(object sender, System.EventArgs e)
		{
        string           strAcctId, strError, strOfferingInfo;
        int              iPUIDHigh, iPUIDLow, iCount;
        PSO.BDKProvider  PsoServer;
        XmlDocument      OfferingInfo;
        XslTransform     OutXslt;

            //Set the Pso object from session object
            PsoServer = (PSO.BDKProvider)Session["PSOConnector"];

            iPUIDHigh = System.Convert.ToInt32(Session["PUIDHigh"]);
            iPUIDLow = System.Convert.ToInt32(Session["PUIDLow"]);

            strAcctId = Request.QueryString["AccountID"];
            Session["PurchaseAccountID"] = strAcctId;

            PsoServer.GetEligibleOfferings( 1, 1, iPUIDHigh, iPUIDLow, strAcctId,
                string.Empty, "Free Trial", "BASE", out strError, out iCount,
                out strOfferingInfo);

            if (0 == iCount)
            {
                Session["ShowInfo"] = "<p>No Eligible Offerings available</p>";
                Response.Redirect("ShowInfo.aspx", true);
            }
            OutXslt = new XslTransform();
            OutXslt.Load(MapPath("GetEligibleOfferings.xsl"));

            OfferingInfo = new XmlDocument();
            OfferingInfo.LoadXml(strOfferingInfo);

            OutXslt.Transform(OfferingInfo, null, Response.Output);
        }

		#region Web Form Designer generated code
		override protected void OnInit(EventArgs e)
		{
			//
			// CODEGEN: This call is required by the ASP.NET Web Form Designer.
			//
			InitializeComponent();
			base.OnInit(e);
		}
		
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{    
			this.Load += new System.EventHandler(this.Page_Load);
		}
		#endregion
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\SCS\4.0\samples\SCS API\ASP.Net\SPKTenantDemo\PurchaseOfferings.aspx.cs ===
using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Xml;
using System.Xml.Xsl;

namespace SPKTenantDemo
{
	/// <summary>
	/// Summary description for PurchaseOfferings.
	/// </summary>
	public class PurchaseOfferings : System.Web.UI.Page
	{
		private void Page_Load(object sender, System.EventArgs e)
		{
        PSO.BDKProvider  PsoServer;
        XmlDocument      TmpXml;
        XmlNamespaceManager nsmgr;
        XslTransform     OutXslt;
        int              iPUIDHigh, iPUIDLow, iCount;
        string           strAcctId, strError, strPayInstruSet, strPayInstruId,
                         strOfferingGuid, strSubsId, strAmountCharged,
                         strSrvInstanceSet, strSrvInstanceSetOut,
        strReferralSet = "<ReferralSet xmlns='urn:schemas-microsoft-com:billing-data'>" +
                "<Referral><ReferralType>Enter Type here</ReferralType>" +
                "<ReferralData><hello xmlns='urn:schemas-microsoft-com:dummy-data'>" +
                "embedded xml</hello></ReferralData></Referral></ReferralSet>";

            TmpXml = new XmlDocument();

            //Set the Pso object from session object
            PsoServer = (PSO.BDKProvider)Session["PSOConnector"];

            iPUIDHigh = System.Convert.ToInt32(Session["PUIDHigh"]);
            iPUIDLow = System.Convert.ToInt32(Session["PUIDLow"]);

            strAcctId = (string)Session["PurchaseAccountID"];
            strOfferingGuid = (string)Request.QueryString["OfferingGUID"];

            PsoServer.GetPaymentInstruments(1, 1, iPUIDHigh, iPUIDLow, strAcctId,
                                            out strError, out iCount, out strPayInstruSet);

            TmpXml.LoadXml(strPayInstruSet);
            nsmgr = new XmlNamespaceManager(TmpXml.NameTable);
            nsmgr.AddNamespace("a", "urn:schemas-microsoft-com:billing-data");
            strPayInstruId = TmpXml.SelectSingleNode("//a:PaymentInstrumentId", nsmgr).InnerText;

            PsoServer.PurchaseOffering(1, 1, iPUIDHigh, iPUIDLow, string.Empty, false, "Friendly IA Subs",
                                       strAcctId, string.Empty, strOfferingGuid, 0, strPayInstruId,
                "0", string.Empty, string.Empty, strReferralSet, out strError, out strSubsId,
                out strAmountCharged, out iCount, out strSrvInstanceSet);

            TmpXml.LoadXml(strSrvInstanceSet);

            strSrvInstanceSetOut = "<ServiceInstanceSet xmlns='urn:schemas-microsoft-com:billing-data'>" +
                "<ServiceInstance><Role>User</Role><PUIDHigh>" + iPUIDHigh.ToString() +
                "</PUIDHigh><PUIDLow>" + iPUIDLow.ToString() + "</PUIDLow><PMN>" +
                (string)Session["PMN"] + "</PMN><ServiceComponentId>" +
                TmpXml.SelectSingleNode("//a:ServiceComponentId", nsmgr).InnerText +
                "</ServiceComponentId><ServiceInstanceId>" + 
                TmpXml.SelectSingleNode("//a:ServiceInstanceId", nsmgr).InnerText +
                "</ServiceInstanceId><ServiceInstanceFriendlyName>Prov Friendly Name" +
                "</ServiceInstanceFriendlyName><BaseServiceInstanceId /><Details>" + 
                "Detail go here</Details></ServiceInstance></ServiceInstanceSet>";

            PsoServer.ProvisionServices(1, 1, iPUIDHigh, iPUIDLow, strSrvInstanceSetOut,
                                        out strError);

            TmpXml.LoadXml(strAmountCharged);

            OutXslt = new XslTransform();
            OutXslt.Load(MapPath("SuccessPurchaseOfferings.xsl"));
            OutXslt.Transform(TmpXml, null, Response.Output);
        }

		#region Web Form Designer generated code
		override protected void OnInit(EventArgs e)
		{
			//
			// CODEGEN: This call is required by the ASP.NET Web Form Designer.
			//
			InitializeComponent();
			base.OnInit(e);
		}
		
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{    
			this.Load += new System.EventHandler(this.Page_Load);
		}
		#endregion
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\SCS\4.0\samples\SCS API\ASP.Net\SPKTenantDemo\UpdateBillingInfo.aspx.cs ===
using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;

namespace SPKTenantDemo
{
	/// <summary>
	/// Summary description for UpdateBillingInfo.
	/// </summary>
	public class UpdateBillingInfo : System.Web.UI.Page
	{
        protected System.Web.UI.WebControls.Label LabFirstName;
        protected System.Web.UI.WebControls.Label LabAddLine1;
        protected System.Web.UI.WebControls.Label LabAddLine2;
        protected System.Web.UI.WebControls.Label LabCity;
        protected System.Web.UI.WebControls.Label LabStateCode;
        protected System.Web.UI.WebControls.Label LabZipCode;
        protected System.Web.UI.WebControls.Label LabCountryCode;
        protected System.Web.UI.WebControls.Label LabTelephone;
        protected System.Web.UI.WebControls.Label LabExtension;
        protected System.Web.UI.WebControls.Label LabExpDate;
        protected System.Web.UI.WebControls.Label Label1;
        protected System.Web.UI.WebControls.TextBox BoxAccName;
        protected System.Web.UI.WebControls.TextBox BoxAddLine1;
        protected System.Web.UI.WebControls.TextBox BoxAddLine2;
        protected System.Web.UI.WebControls.TextBox BoxCity;
        protected System.Web.UI.WebControls.TextBox BoxStateCode;
        protected System.Web.UI.WebControls.TextBox BoxZipCode;
        protected System.Web.UI.WebControls.TextBox BoxCountryCode;
        protected System.Web.UI.WebControls.TextBox BoxTelephone;
        protected System.Web.UI.WebControls.TextBox BoxExtension;
        protected System.Web.UI.WebControls.DropDownList DropMonth;
        protected System.Web.UI.WebControls.DropDownList DropYear;
        protected System.Web.UI.WebControls.Button ButtonSubmit;
        protected System.Web.UI.WebControls.Label LabMain;
    
		private void Page_Load(object sender, System.EventArgs e)
		{
			// Put user code to initialize the page here
		}

		#region Web Form Designer generated code
		override protected void OnInit(EventArgs e)
		{
			//
			// CODEGEN: This call is required by the ASP.NET Web Form Designer.
			//
			InitializeComponent();
			base.OnInit(e);
		}
		
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{    
            this.ButtonSubmit.Click += new System.EventHandler(this.ButtonSubmit_Click);
            this.Load += new System.EventHandler(this.Page_Load);

        }
		#endregion

        public void ButtonSubmit_Click(object sender, System.EventArgs e)
        {
            int             iPUIDHigh, iPUIDLow;
            PSO.BDKProvider PsoServer;
            string          strError;

            string strPayInstruInfo = "<?xml version='1.0'?>" + 
                "<PaymentInstrumentInfo xmlns='urn:schemas-microsoft-com:billing-data'>" +
                "<PaymentInstrumentType>CREDITCARD</PaymentInstrumentType>" +
                "<FriendlyName>Payment Info</FriendlyName><CreditCardInfo><AccountHolderName>" +
                BoxAccName.Text + "</AccountHolderName><ExpirationDate>" + DropMonth.SelectedItem.Text + 
                DropYear.SelectedItem.Text + "</ExpirationDate></CreditCardInfo>" +
                "<Phone><PhoneType>PRIMARY</PhoneType><PhonePrefix>425</PhonePrefix><PhoneNumber>" +
                BoxTelephone.Text + "</PhoneNumber><PhoneExtension>" + BoxExtension.Text +
                "</PhoneExtension><CountryCode>US</CountryCode></Phone><AddressInfo><FriendlyName>" +
                "Credit card Address</FriendlyName><Street1>" + BoxAddLine1.Text + "</Street1><Street2>" +
                BoxAddLine2.Text + "</Street2><City>" + BoxCity.Text + "</City><State>" + 
                BoxStateCode.Text + "</State><CountryCode>" + BoxCountryCode.Text + "</CountryCode><PostalCode>" +
                BoxZipCode.Text + "</PostalCode></AddressInfo></PaymentInstrumentInfo>";

            iPUIDHigh = System.Convert.ToInt32(Session["PUIDHigh"]);
            iPUIDLow = System.Convert.ToInt32(Session["PUIDLow"]);
            PsoServer = (PSO.BDKProvider)Session["PsoConnector"];

            PsoServer.UpdatePaymentInstrumentInfo(1, 1, iPUIDHigh, iPUIDLow,
                (string)Request.QueryString["PayInstruId"], strPayInstruInfo,
                out strError);

            Response.Redirect("SuccessAccountUpdated.asp");
        }
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\SCS\4.0\samples\SCS API\ASP.Net\SPKTenantDemo\UpsAuthZ.aspx.cs ===
using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Xml;
using System.Xml.Xsl;
using UPS;

namespace SPKTenantDemo
{
	/// <summary>
	/// Summary description for UpsAuthZ.
	/// </summary>
	public class UpsAuthZ : System.Web.UI.Page
	{
		private void Page_Load(object sender, System.EventArgs e)
		{
        StoreConfigW    oStore;
        Array           oArray;
        UPSClientW      oClient;
        int             iPUIDHigh, iPUIDLow;
        string          strGUID, strTmp, strTmp1;
        string[]        ArrayDetail;
        XmlDocument     oDoc;
        XmlElement      oRoot;
        XmlNode         oCompNode, oInfoNode, oRecord, oNode;
        XslTransform     OutXslt;

            oStore = new StoreConfigW();
            oClient = oStore.GetClientObject();

            iPUIDHigh = System.Convert.ToInt32(Session["PUIDHigh"]);
            iPUIDLow = System.Convert.ToInt32(Session["PUIDLow"]);

            strGUID = oStore.PassportToUserId(iPUIDLow, iPUIDHigh);

            oClient.Open(strGUID);

            oClient.SetNamespace("SPGDetail_CS");
            oClient.SetNamespace("SPGSummary_CS");
            oClient.LoadNamespaces();

            oDoc = new XmlDocument();
            oNode = oDoc.CreateNode(XmlNodeType.Element, "UPSInfo", "");
            oDoc.AppendChild(oNode);
            oRoot = oDoc.DocumentElement;

            oCompNode = oDoc.CreateNode(XmlNodeType.Element, "ComponentList", "");
            oRoot.AppendChild(oCompNode);

            oInfoNode = oDoc.CreateNode(XmlNodeType.Element, "Info_A", "");
            oRoot.AppendChild(oInfoNode);

            strTmp = oClient["SPGSummary_CS.ComponentList"].ToString();

            ArrayDetail = strTmp.Split(new char[] {';'});
            foreach(string strDetail in ArrayDetail)
            {
                oNode = oDoc.CreateNode(XmlNodeType.Element, "ComponentId", "");
                oCompNode.AppendChild(oNode);

                oNode.InnerText = strDetail;
            }

            oArray = (Array)oClient["SPGDetail_CS.Info_A"];
            foreach(string strArrayInfo_A in oArray)
            {
                oRecord = oDoc.CreateNode(XmlNodeType.Element, "Record", "");
                oInfoNode.AppendChild(oRecord);

                ArrayDetail = strArrayInfo_A.Split(new char[] {';'});
                foreach(string strDetail in ArrayDetail)
                {
                    strTmp1 = String.Empty;
                    switch(strDetail.Substring(0, 3).ToUpper())
                    {
                        case "SC=": strTmp = "ServiceComponentId";
                                    strTmp1 = strDetail.Substring(3);
                                    break;
                        case "SI=": strTmp = "ServiceInstanceId";
                                    strTmp1 = strDetail.Substring(3);
                                    break;
                        case "SS=": strTmp = "SubscriptionStatus";
                                    strTmp1 = strDetail.Substring(3);
                                    break;
                        case "PS=": strTmp = "ProvisioningStatus";
                                    strTmp1 = strDetail.Substring(3);
                                    break;
                        case "EC=": strTmp = "ProvisionErrorCode";
                                    strTmp1 = strDetail.Substring(3);
                                    break;
                        case "SN=": strTmp = "ServiceFriendlyName";
                                    strTmp1 = strDetail.Substring(3);
                                    break;
                    }
                    oNode = oDoc.CreateNode(XmlNodeType.Element, strTmp, "");
                    oRecord.AppendChild(oNode);

                    oNode.InnerText = strTmp1;
                }
            }

            OutXslt = new XslTransform();
            OutXslt.Load(MapPath("UpsAuthz.xsl"));

            OutXslt.Transform(oDoc, null, Response.Output);
        }

		#region Web Form Designer generated code
		override protected void OnInit(EventArgs e)
		{
			//
			// CODEGEN: This call is required by the ASP.NET Web Form Designer.
			//
			InitializeComponent();
			base.OnInit(e);
		}
		
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{    
			this.Load += new System.EventHandler(this.Page_Load);
		}
		#endregion
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\SCS\4.0\samples\SCS API\ASP.Net\SPKTenantDemo\UpdateAccountInfo.aspx.cs ===
using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Xml;
using System.Xml.Xsl;

namespace SPKTenantDemo
{
	/// <summary>
	/// Summary description for UpdateAccountInfo.
	/// </summary>
	public class UpdateAccountInfo : System.Web.UI.Page
	{
        protected System.Web.UI.WebControls.Label LabFirstName;
        protected System.Web.UI.WebControls.Label LabLastName;
        protected System.Web.UI.WebControls.Label LabEmail;
        protected System.Web.UI.WebControls.Label LabCompany;
        protected System.Web.UI.WebControls.Label LabAddLine1;
        protected System.Web.UI.WebControls.Label LabAddLine2;
        protected System.Web.UI.WebControls.Label LabCity;
        protected System.Web.UI.WebControls.Label LabStateCode;
        protected System.Web.UI.WebControls.Label LabZipCode;
        protected System.Web.UI.WebControls.Label LabCountryCode;
        protected System.Web.UI.WebControls.Label LabTelephone;
        protected System.Web.UI.WebControls.Label LabExtension;
        protected System.Web.UI.WebControls.Label LabFriendlyName;
        protected System.Web.UI.WebControls.Button ButtonSubmit;
        protected System.Web.UI.WebControls.TextBox BoxFriendlyName;
        protected System.Web.UI.WebControls.TextBox BoxExtension;
        protected System.Web.UI.WebControls.TextBox BoxTelephone;
        protected System.Web.UI.WebControls.TextBox BoxCountryCode;
        protected System.Web.UI.WebControls.TextBox BoxZipCode;
        protected System.Web.UI.WebControls.TextBox BoxStateCode;
        protected System.Web.UI.WebControls.TextBox BoxCity;
        protected System.Web.UI.WebControls.TextBox BoxAddLine2;
        protected System.Web.UI.WebControls.TextBox BoxAddLine1;
        protected System.Web.UI.WebControls.TextBox BoxCompany;
        protected System.Web.UI.WebControls.TextBox BoxEmail;
        protected System.Web.UI.WebControls.TextBox BoxLastName;
        protected System.Web.UI.WebControls.TextBox BoxFirstName;
        protected System.Web.UI.WebControls.Label LabMain;
    
		private void Page_Load(object sender, System.EventArgs e)
		{
			// Put user code to initialize the page here
		}

		#region Web Form Designer generated code
		override protected void OnInit(EventArgs e)
		{
			//
			// CODEGEN: This call is required by the ASP.NET Web Form Designer.
			//
			InitializeComponent();
			base.OnInit(e);
		}
		
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{    
            this.ButtonSubmit.Click += new System.EventHandler(this.ButtonSubmit_Click);
            this.Load += new System.EventHandler(this.Page_Load);

        }
		#endregion

        private void ButtonSubmit_Click(object sender, System.EventArgs e)
        {
        int             iPUIDHigh, iPUIDLow;
        PSO.BDKProvider PsoServer;
        string          strError, strPWork;

        string strAcctInfo = "<?xml version='1.0'?><AccountInfo xmlns='urn:schemas-microsoft-com:billing-data'>" +
            "<CustomerType>PERSONAL</CustomerType><FriendlyName>" + BoxFriendlyName.Text + 
            "</FriendlyName><FirstName>" + BoxFirstName.Text + "</FirstName><LastName>" + BoxLastName.Text + 
            "</LastName><Email>" + BoxEmail.Text + "</Email><CompanyName>" + BoxCompany.Text + 
            "</CompanyName><Locale>en-US</Locale><Currency>USD</Currency>" +
            "<PhoneSet><Phone><PhoneType>WORK</PhoneType><PhonePrefix>425</PhonePrefix>" +
            "<PhoneNumber>" + BoxTelephone.Text + "</PhoneNumber><PhoneExtension>" + BoxExtension.Text +
            "</PhoneExtension><CountryCode>US</CountryCode></Phone></PhoneSet>" +
            "<AddressInfoSet><AddressInfo><FriendlyName>PRIMARY</FriendlyName><Street1>" + 
            BoxAddLine1.Text + "</Street1><Street2>" + BoxAddLine2.Text + "</Street2><City>" +
            BoxCity.Text + "</City><State>" + BoxStateCode.Text + "</State><CountryCode>" +
            BoxCountryCode.Text + "</CountryCode><PostalCode>" + BoxZipCode.Text +
            "</PostalCode></AddressInfo></AddressInfoSet></AccountInfo>";

            iPUIDHigh = System.Convert.ToInt32(Session["PUIDHigh"]);
            iPUIDLow = System.Convert.ToInt32(Session["PUIDLow"]);
            PsoServer = (PSO.BDKProvider)Session["PsoConnector"];

            PsoServer.UpdateAccountInfo(1, 1, iPUIDHigh, iPUIDLow,
                (string)Request.QueryString["AccountID"], strAcctInfo,
                out strError, out strPWork);

            Response.Redirect("SuccessAccountUpdated.asp");
        }
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\SCS\4.0\samples\SCS API\ASP.Net\SPKTenantDemo\ShowInfo.aspx.cs ===
using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;

namespace SPKTenantDemo
{
	/// <summary>
	/// Summary description for ShowInfo.
	/// </summary>
	public class ShowInfo : System.Web.UI.Page
	{
		private void Page_Load(object sender, System.EventArgs e)
		{
			Response.Write((string)Session["ShowInfo"]);
		}

		#region Web Form Designer generated code
		override protected void OnInit(EventArgs e)
		{
			//
			// CODEGEN: This call is required by the ASP.NET Web Form Designer.
			//
			InitializeComponent();
			base.OnInit(e);
		}
		
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{    
			this.Load += new System.EventHandler(this.Page_Load);
		}
		#endregion
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\SCS\4.0\samples\SCS API\ASP.Net\SPKTenantDemo\ViewAccountInfo.aspx.cs ===
using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Xml;
using System.Xml.Xsl;

namespace SPKTenantDemo
{
	/// <summary>
	/// Summary description for ViewAccountInfo.
	/// </summary>
	public class ViewAccountInfo : System.Web.UI.Page
	{
		private void Page_Load(object sender, System.EventArgs e)
		{
        string           strAcctId, strError, strAcctInfo;
        int              iPUIDHigh, iPUIDLow;
        PSO.BDKProvider  PsoServer;
        XmlDocument      AcctInfo;
        XslTransform     OutXslt;

            //Set the Pso object from session object
            PsoServer = (PSO.BDKProvider)Session["PSOConnector"];

            iPUIDHigh = System.Convert.ToInt32(Session["PUIDHigh"]);
            iPUIDLow = System.Convert.ToInt32(Session["PUIDLow"]);

            strAcctId = Request.QueryString["AccountID"];

            PsoServer.GetAccountInfo(1, 1, iPUIDHigh, iPUIDLow, strAcctId,
                                     out strError, out strAcctInfo);

            OutXslt = new XslTransform();
            OutXslt.Load(MapPath("AccountInfo.xsl"));

            AcctInfo = new XmlDocument();
            AcctInfo.LoadXml(strAcctInfo);

            OutXslt.Transform(AcctInfo, null, Response.Output);
        }
		#region Web Form Designer generated code
		override protected void OnInit(EventArgs e)
		{
			//
			// CODEGEN: This call is required by the ASP.NET Web Form Designer.
			//
			InitializeComponent();
			base.OnInit(e);
		}
		
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{    
			this.Load += new System.EventHandler(this.Page_Load);
		}
		#endregion
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\SCS\4.0\samples\SCS API\ASP.Net\SPKTenantDemo\ViewSubscriptions.aspx.cs ===
using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Xml;
using System.Xml.Xsl;

namespace SPKTenantDemo
{
	/// <summary>
	/// Summary description for ViewSubscriptions.
	/// </summary>
	public class ViewSubscriptions : System.Web.UI.Page
	{
		private void Page_Load(object sender, System.EventArgs e)
		{
        PSO.BDKProvider  PsoServer;
        XmlDocument      SubscriptionInfo;
        XslTransform     OutXslt;
        int              iPUIDHigh, iPUIDLow, Count;
        string           ResultXML, SubscriptionInfoSet, strRedirect, strAcctId;
        const string strCancel = "ShowSubscriptionCancel.xsl";
        const string strUse = "ShowSubscriptionUse.xsl";

            iPUIDHigh = System.Convert.ToInt32(Session["PUIDHigh"]);
            iPUIDLow = System.Convert.ToInt32(Session["PUIDLow"]);

            strAcctId = (string)Request.QueryString["AccountID"];
            if ((Request.QueryString["Purpose"]) == "Cancel")
            {
                strRedirect = strCancel;
            }
            else
            {
                strRedirect = strUse;
            }

            //Set the Pso object from session object
            PsoServer = (PSO.BDKProvider)Session["PSOConnector"];

            //Call the main function.
            PsoServer.GetSubscriptions(1,
                1,
                iPUIDHigh,
                iPUIDLow,
                strAcctId,
                out ResultXML,
                out Count,
                out SubscriptionInfoSet);

            if (0 == Count)
            {
                Session["ShowInfo"] = "<p>No subscription purchase on this account</p>";
                Response.Redirect("ShowInfo.aspx", true);
            }

            OutXslt = new XslTransform();
            OutXslt.Load(MapPath(strRedirect));

            SubscriptionInfo = new XmlDocument();
            SubscriptionInfo.LoadXml(SubscriptionInfoSet);

            OutXslt.Transform(SubscriptionInfo, null, Response.Output);
        }

		#region Web Form Designer generated code
		override protected void OnInit(EventArgs e)
		{
			//
			// CODEGEN: This call is required by the ASP.NET Web Form Designer.
			//
			InitializeComponent();
			base.OnInit(e);
		}
		
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{    
			this.Load += new System.EventHandler(this.Page_Load);
		}
		#endregion
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\SCS\4.0\samples\SCS API\ASP.Net\SPKTenantDemo\ViewPayInstruInfo.aspx.cs ===
using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Xml;
using System.Xml.Xsl;

namespace SPKTenantDemo
{
	/// <summary>
	/// Summary description for ViewPayInstruInfo.
	/// </summary>
	public class ViewPayInstruInfo : System.Web.UI.Page
	{
		private void Page_Load(object sender, System.EventArgs e)
		{
            string           strAcctId, strError, strPayInfo;
            int              iPUIDHigh, iPUIDLow, iCount;
            PSO.BDKProvider  PsoServer;
            XmlDocument      PayInfo;
            XmlNode          AcctIdNode;
            XslTransform     OutXslt;

            //Set the Pso object from session object
            PsoServer = (PSO.BDKProvider)Session["PSOConnector"];

            iPUIDHigh = System.Convert.ToInt32(Session["PUIDHigh"]);
            iPUIDLow = System.Convert.ToInt32(Session["PUIDLow"]);

            strAcctId = Request.QueryString["AccountID"];

            PsoServer.GetPaymentInstruments(1, 1, iPUIDHigh, iPUIDLow, strAcctId,
                out strError, out iCount, out strPayInfo);

            OutXslt = new XslTransform();
            OutXslt.Load(MapPath("BillingInfo.xsl"));

            PayInfo = new XmlDocument();
            PayInfo.LoadXml(strPayInfo);

            AcctIdNode = PayInfo.CreateNode(XmlNodeType.Element, "AccountID", "urn:schemas-microsoft-com:billing-data");

            AcctIdNode.InnerText = strAcctId;

            PayInfo.DocumentElement.AppendChild(AcctIdNode);

            OutXslt.Transform(PayInfo, null, Response.Output);
		}

		#region Web Form Designer generated code
		override protected void OnInit(EventArgs e)
		{
			//
			// CODEGEN: This call is required by the ASP.NET Web Form Designer.
			//
			InitializeComponent();
			base.OnInit(e);
		}
		
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{    
			this.Load += new System.EventHandler(this.Page_Load);
		}
		#endregion
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\SCS\4.0\samples\SCS API\ASP.Net\SPKTenantDemo\ViewAccountId.aspx.cs ===
using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Xml;
using System.Xml.Xsl;

namespace SPKTenantDemo
{
	/// <summary>
	/// Summary description for ViewAccountId.
	/// </summary>
	public class ViewAccountId : System.Web.UI.Page
	{
		private void Page_Load(object sender, System.EventArgs e)
		{
            PSO.BDKProvider  PsoServer;
            XmlDocument      AccountInfo;
            XslTransform     OutXslt;
            int              iPUIDHigh, iPUIDLow;

            iPUIDHigh = System.Convert.ToInt32(Session["PUIDHigh"]);
            iPUIDLow = System.Convert.ToInt32(Session["PUIDLow"]);

            const string strBuy = "GetAccountIDFromAdminPUID_Buy.xsl";
            const string strCreate = "GetAccountIDFromAdminPUID_Create.xsl";
            const string strUse = "GetAccountIDFromAdminPUID_Use.xsl";
            const string strCancel = "GetAccountIDFromAdminPUID_Cancel.xsl";
            const string strView = "GetAccountIDFromAdminPUID_view.xsl";

            string ResultXML, AccountInfoSet, strRedirect;
            int    Count, MoreRows;

            if ((Request.QueryString["Purpose"]) == "Buy")
            {
                strRedirect = strBuy;
            }
            else if ((Request.QueryString["Purpose"]) == "Create")
            {
                strRedirect = strCreate;
            }
            else if ((Request.QueryString["Purpose"]) == "Use")
            {
                strRedirect = strUse;
            }
            else if ((Request.QueryString["Purpose"]) == "Cancel")
            {
                strRedirect = strCancel;
            }
            else
            {
                strRedirect = strView;
            }

            //Set the Pso object from session object
            PsoServer = (PSO.BDKProvider)Session["PSOConnector"];

            //Call the main function.
            PsoServer.GetAccountIdFromAdminPUID(1,
                                                1,
                                                iPUIDHigh,
                                                iPUIDLow,
                                                false,
                                                50,
                                                out ResultXML,
                                                out MoreRows,
                                                out Count,
                                                out AccountInfoSet);

            if (0 == Count)
            {
                Response.Redirect("ContactInfo.aspx", true);
            }

            OutXslt = new XslTransform();
            OutXslt.Load(MapPath(strRedirect));

            AccountInfo = new XmlDocument();
            AccountInfo.LoadXml(AccountInfoSet);

            OutXslt.Transform(AccountInfo, null, Response.Output);
        }

		#region Web Form Designer generated code
		override protected void OnInit(EventArgs e)
		{
			//
			// CODEGEN: This call is required by the ASP.NET Web Form Designer.
			//
			InitializeComponent();
			base.OnInit(e);
		}
		
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{    
			this.Load += new System.EventHandler(this.Page_Load);
		}
		#endregion
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\SCS\4.0\samples\SCS API\ASP.Net\SPKTenantDemo\UseServices.aspx.cs ===
using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Xml;
using System.Xml.Xsl;

namespace SPKTenantDemo
{
	/// <summary>
	/// Summary description for UseServices.
	/// </summary>
	public class UseServices : System.Web.UI.Page
	{
		private void Page_Load(object sender, System.EventArgs e)
		{
        PSO.BDKProvider  PsoServer;
        XmlDocument      PermitSet;
        XslTransform     OutXslt;
        int              iPUIDHigh, iPUIDLow, Count;
        string           ResultXML, strPermitSet, strInstanceId;

            iPUIDHigh = System.Convert.ToInt32(Session["PUIDHigh"]);
            iPUIDLow = System.Convert.ToInt32(Session["PUIDLow"]);

            strInstanceId = (string)Request.QueryString["ServiceInstanceId"];

            //Set the Pso object from session object
            PsoServer = (PSO.BDKProvider)Session["PSOConnector"];

            //Call the main function.
            PsoServer.GetPermitsForObjectId(1,
                1,
                iPUIDHigh,
                iPUIDLow,
                strInstanceId,
                true,
                out ResultXML,
                out Count,
                out strPermitSet);

            if (0 == Count)
            {
                Session["ShowInfo"] = "<p>No permits created for this subscription</p>";
                Response.Redirect("ShowInfo.aspx", true);
            }

            OutXslt = new XslTransform();
            OutXslt.Load(MapPath("SuccessGetPermits.xsl"));

            PermitSet = new XmlDocument();
            PermitSet.LoadXml(strPermitSet);

            OutXslt.Transform(PermitSet, null, Response.Output);
        }

		#region Web Form Designer generated code
		override protected void OnInit(EventArgs e)
		{
			//
			// CODEGEN: This call is required by the ASP.NET Web Form Designer.
			//
			InitializeComponent();
			base.OnInit(e);
		}
		
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{    
			this.Load += new System.EventHandler(this.Page_Load);
		}
		#endregion
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\SCS\4.0\samples\SCS API\C++\TestConnection\TestConnection.cpp ===
/*++

   Copyright (c) 2000 Microsoft Corporation

   Abstract:

       SPG PSO Partner Side Object
       TestConnection

   Author:

       Daniel Doubrovkine (ddoub)

   Project:

       SPS - Subscription Platform Service

--*/

#include <stdio.h>
#include <conio.h>
#include <atlbase.h>
#include <pso.h>
#include <psoconnector.h>

#define ChkHR(x) hr = x; if (FAILED(hr)) goto LocalCleanup;

int __cdecl main(int argc, char ** argv)
{
    HRESULT hr = S_OK;
    BOOL fCoInitialized = FALSE;

    hr = CoInitializeEx(NULL, COINIT_MULTITHREADED);

    fCoInitialized = SUCCEEDED(hr) ? TRUE : FALSE;

    {
        CComBSTR bstrVersion;

        CComBSTR bstrWsdlLocation;
        CComBSTR bstrPartnerUsername;
        CComBSTR bstrPartnerPassword;
        CComBSTR bstrPartnerEnvironment;
        LONG ulConnectionCount;
        CComVariant varArgs[2];

        CComPtr<IPsoConnector> pPsoConnector = NULL;
        CComPtr<ISOAPClient> pSoapClient = NULL;
        DISPID dwDispID = 0;
        CComBSTR bstrMethod(L"TestConnection");
        DISPPARAMS DispParams = { & varArgs[0], NULL, 2, 0 };

        printf("TestConnection: running TestConnection (ddoub)\n");

        printf("TestConnection: creating IPsoConnector\n");

        ChkHR(pPsoConnector.CoCreateInstance(__uuidof(PsoConnector)));
        ChkHR(pPsoConnector->get_Version(& bstrVersion));

        printf("TestConnection: pso version: %S\n", (LPWSTR) bstrVersion);
        printf("TestConnection: setting pool connection count to %d\n", 1);

        ChkHR(pPsoConnector->put_PoolConnections(1));

        printf("TestConnection: initializing\n");

        ChkHR(pPsoConnector->Initialize());

        printf("TestConnection: quering properties\n");

        ChkHR(pPsoConnector->get_PartnerUsername(& bstrPartnerUsername));
        ChkHR(pPsoConnector->get_PartnerPassword(& bstrPartnerPassword));
        ChkHR(pPsoConnector->get_PartnerEnvironment(& bstrPartnerEnvironment));
        ChkHR(pPsoConnector->get_WsdlLocation(& bstrWsdlLocation));
        ChkHR(pPsoConnector->get_PoolConnections(& ulConnectionCount));

        printf("TestConnection: PartnerUsername=%S\n", (LPWSTR) bstrPartnerUsername);
        // printf("TestConnection: PartnerPassword=%S\n", (LPWSTR) bstrPartnerPassword);
        printf("TestConnection: PartnerPassword=<hidden>\n");
        printf("TestConnection: PartnerEnvironment=%S\n", (LPWSTR) bstrPartnerEnvironment);
        printf("TestConnection: WsdlLocation=%S\n", (LPWSTR) bstrWsdlLocation);
        printf("TestConnection: ConnectionCount=%d\n", ulConnectionCount);

        varArgs[1] = CComBSTR(L"String");
        varArgs[0].vt = VT_EMPTY;
        varArgs[0].bstrVal = NULL;

        ChkHR(pPsoConnector->Connect(& pSoapClient));
        ChkHR(pSoapClient->GetIDsOfNames( IID_NULL, & bstrMethod, 1, LOCALE_SYSTEM_DEFAULT, & dwDispID));

        printf("TestConnection: disp id=%ld\n", dwDispID);

        ChkHR(pSoapClient->Invoke(
                  dwDispID,
                  IID_NULL,
                  LOCALE_SYSTEM_DEFAULT,
                  DISPATCH_METHOD,
                  & DispParams,
                  NULL,
                  NULL,
                  NULL));

        printf("TestConnection: retval=%ld (%S)\n", varArgs[0].vt, varArgs[0].bstrVal);

    LocalCleanup:

        if (FAILED(hr) && pSoapClient)
        {
            CComBSTR bstrFaultCode;
            CComBSTR bstrFaultString;

            if (SUCCEEDED(pSoapClient->get_faultcode(& bstrFaultCode)))
            {
                printf("TestConnection: soap fault code=%S.\n", (LPCWSTR) bstrFaultCode);
            }

            if (SUCCEEDED(pSoapClient->get_faultstring(& bstrFaultString)))
            {
                printf("TestConnection: soap fault string=%S.\n", (LPCWSTR) bstrFaultString);
            }
        }

        if (FAILED(hr) && pPsoConnector)
        {
            LONG lErrorCode = 0;
            CComBSTR bstrErrorDescription;

            if (SUCCEEDED(pPsoConnector->get_ErrorCode(& lErrorCode)))
            {
                printf("TestConnection: pso error code=%#x.\n", lErrorCode);
            }

            if (SUCCEEDED(pPsoConnector->get_ErrorDescription(& bstrErrorDescription)))
            {
                printf("TestConnection: pso error description=%S.\n", (LPCWSTR) bstrErrorDescription);
            }
        }
    }

    if (fCoInitialized)
    {
        CoUninitialize();
    }

    if (FAILED(hr))
    {
        LPSTR pszMessageBuffer = NULL;
        DWORD dwBufferLength;

        if (dwBufferLength = FormatMessageA(
                FORMAT_MESSAGE_ALLOCATE_BUFFER |
                FORMAT_MESSAGE_IGNORE_INSERTS |
                FORMAT_MESSAGE_FROM_SYSTEM,
                NULL,
                hr,
                MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), // default language
                (LPSTR) & pszMessageBuffer,
                0,
                NULL
                ))
        {
            printf("TestConnection: %s", pszMessageBuffer);
            LocalFree(pszMessageBuffer);
        }

        printf("TestConnection: error, hr=%#x\n", hr);
    }
    else
    {
        printf("TestConnection: success.\n");
    }

    {
        STARTUPINFO ProcessStartupInfo;
        GetStartupInfo(& ProcessStartupInfo);
        if (ProcessStartupInfo.dwFlags & STARTF_USESHOWWINDOW)
        {
            printf("\nPress any key to continue.");
            _getch();
        }
    }

    return 0;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\SCS\4.0\samples\SCS API\CSharp\TestConnectionClientCert\BillingProvider.cs ===
using System;
using System.IO;
using System.Web;
using System.Net;
using System.Runtime.InteropServices;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using Billing.PSO;

/// <summary>
/// Sample code for using Client Certificate to call Subscription & Commerce web service.
/// </summary>
public class BillingProvider : bdk
{
    /// <summary>
    /// Initializes the SOAP client proxy to use specified certificate and wsdl
    /// </summary>
    /// <param name="certificateFile">The path to the client certificate file</param>
    /// <param name="wsdlLocation">The Wsdl URL that points to SCS web service.
    /// Generally this value is stored persistently in some registry or configuration file
    /// </param>
    public BillingProvider(string certificateFile, string wsdlLocation) : base()
    {
        this.Url = wsdlLocation;

        X509Certificate clientCert = GetCertFromFile(certificateFile);
        this.ClientCertificates.Add(clientCert);
    }

    /// <summary>
    /// Get X509 Certificate from file on local file system.
    /// It assumes that you have installed the certificate in local computer store.
    /// This assumes that the file is BASE-64 encoded.
    /// If the file is DER encoded, <see cref="X509Certificate.CreateFromCertFile"/> or
    /// <see cref="X509Certificate.CreateFromCertFile"/> can be used directly.
    /// </summary>
    /// <param name="fileName">The certificate file path</param>
    /// <returns>The <see cref="X509Certificate"/> representing the certificate</returns>
    protected X509Certificate GetCertFromFile(string fileName)
    {
        // Open the certificate, and read it into a byte array.
        using(FileStream certFile = new FileStream(fileName,
                  FileMode.Open,
                  FileAccess.Read))
        {
            int size = (int)certFile.Length;
            byte[] certBytes = new byte[size];
            size = certFile.Read(certBytes, 0, size);
            // Remove the unnecessary characters.
            String certString = Encoding.ASCII.GetString(certBytes);
            StringBuilder sb = new StringBuilder(certString);
            sb.Replace("-----BEGIN CERTIFICATE-----", "");
            sb.Replace("-----END CERTIFICATE-----", "");
    
            // Decode the bytes from base64 to raw bytes.
            certBytes = Convert.FromBase64String(sb.ToString());
            X509Certificate cert = new X509Certificate(certBytes);
            return cert;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\SCS\4.0\samples\SCS API\CSharp\TestConnection\BillingProvider.cs ===
using System;
using System.IO;
using System.Web;
using System.Net;
using System.Runtime.InteropServices;
using Billing.PSO;

public class BillingProvider : bdk
{
  // data that persists across all connections
  private static PsoConnectorClass mPso;

  // this static constructor does the key retrieval from the PSO just once,
  // before anyone uses this object
  static BillingProvider()
  {
    mPso = new PsoConnectorClass();
  }

  public static void Initialize()
  {
    // no pool connections, using C# soap interface
    mPso.PoolConnections = 0;
    // retrieve partner credentials
    mPso.Initialize();
  }

  public static String ErrorDescription()
  {
    return mPso.ErrorDescription;
  }

  public static int ErrorCode()
  {
    return mPso.ErrorCode;
  }

  public BillingProvider() : base()
  {
    // set up the bdk that we have inherited from
    this.Url = mPso.WsdlLocation;
    this.Credentials = new NetworkCredential(
     mPso.PartnerUsername,
     mPso.PartnerPassword
    );
  }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\SCS\4.0\samples\SCS API\CSharp\TestConnection\TestConnection.cs ===
using System;
using System.IO;
using System.Web;
using System.Net;
using System.Runtime.InteropServices;

public class TestConnection
{
    static void Main()
    {

        try
        {
            // initialize the provider, call this once
            System.Console.WriteLine( "success: initialize billing provider" );
            BillingProvider.Initialize();
        }
        catch (Exception eInitialize)
        {
            System.Console.WriteLine( "failure: " + eInitialize.Message );
            return;
        }

        try
        {

            string outStr;

            System.Console.WriteLine( "success: creating billing provider" );
            BillingProvider sps = new BillingProvider();

            System.Console.WriteLine( "success: running testconnection" );
            // execute the method
            sps.TestConnection( "Testing 1, 2, 3..!", out outStr );
            // show the output
            System.Console.WriteLine( "success: " + outStr );
        }
        catch (Exception eTest)
        {
            System.Console.WriteLine( "failure: " + eTest.Message );
            System.Console.WriteLine( BillingProvider.ErrorCode() );
            return;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\SCS\4.0\samples\SCS API\CSharp\TestConnectionClientCert\TestConnectionClentCert.cs ===
using System;
using System.IO;
using System.Web;
using System.Net;
using System.Runtime.InteropServices;
using System.Web.Services.Protocols;

public class TestConnection
{
    static void Main(string[] args)
    {
        if (args.Length != 1)
        {
            Console.WriteLine("\nUsage: TestConnectionClientCertCSharp.exe <certificate>");
            Console.WriteLine("       <certificate> - Location to certificate file");
            return;
        }

        try
        {
            string outStr;

            System.Console.WriteLine( "success: creating billing provider" );
            // initializes billing provider
            BillingProvider sps = new BillingProvider(args[0], "https://" + Environment.MachineName + "/scs/scsapiwebservice.asmx");

            System.Console.WriteLine( "success: running testconnection" );
            // execute the method
            sps.TestConnection( "Testing 1, 2, 3..!", out outStr );
            // show the output
            System.Console.WriteLine( "success: " + outStr );
        }
        catch (SoapException eTest)
        {
            System.Console.WriteLine( "failure: " + eTest.Message );
            return;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\SCS\4.0\samples\SCS API\CSharp\TestConnection\Bdk.cs ===
﻿//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.12
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=1.1.4322.12.
// 
using System.Diagnostics;
using System.Xml.Serialization;
using System;
using System.Web.Services.Protocols;
using System.ComponentModel;
using System.Web.Services;


/// <remarks/>
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="bdkSoap", Namespace="http://tempuri.org/")]
public class bdk : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    /// <remarks/>
    public bdk() {
        this.Url = "https://hostname/scsnocc/scsapiwebservice.asmx";
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.AddRoleAssignment", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void AddRoleAssignment(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, string bstrRoleAssignmentXML, out string pbstrErrorXML) {
        object[] results = this.Invoke("AddRoleAssignment", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrObjectId,
                    bstrRoleAssignmentXML});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginAddRoleAssignment(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, string bstrRoleAssignmentXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AddRoleAssignment", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrObjectId,
                    bstrRoleAssignmentXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndAddRoleAssignment(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.RemoveRoleAssignment", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void RemoveRoleAssignment(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, string bstrRoleAssignmentXML, out string pbstrErrorXML) {
        object[] results = this.Invoke("RemoveRoleAssignment", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrObjectId,
                    bstrRoleAssignmentXML});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRemoveRoleAssignment(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, string bstrRoleAssignmentXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RemoveRoleAssignment", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrObjectId,
                    bstrRoleAssignmentXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndRemoveRoleAssignment(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetPermitsForPUID", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetPermitsForPUID(int lCustomerPUIDHigh, int lCustomerPUIDLow, string bstrServiceComponentGUID, out string pbstrErrorXML, out int plPermitCount, out string pbstrPermitSetXML) {
        object[] results = this.Invoke("GetPermitsForPUID", new object[] {
                    lCustomerPUIDHigh,
                    lCustomerPUIDLow,
                    bstrServiceComponentGUID});
        pbstrErrorXML = ((string)(results[0]));
        plPermitCount = ((int)(results[1]));
        pbstrPermitSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetPermitsForPUID(int lCustomerPUIDHigh, int lCustomerPUIDLow, string bstrServiceComponentGUID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetPermitsForPUID", new object[] {
                    lCustomerPUIDHigh,
                    lCustomerPUIDLow,
                    bstrServiceComponentGUID}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetPermitsForPUID(System.IAsyncResult asyncResult, out string pbstrErrorXML, out int plPermitCount, out string pbstrPermitSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        plPermitCount = ((int)(results[1]));
        pbstrPermitSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetPermitsForObjectId", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetPermitsForObjectId(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, bool fDeep, out string pbstrErrorXML, out int plPermitCount, out string pbstrPermitSetXML) {
        object[] results = this.Invoke("GetPermitsForObjectId", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrObjectId,
                    fDeep});
        pbstrErrorXML = ((string)(results[0]));
        plPermitCount = ((int)(results[1]));
        pbstrPermitSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetPermitsForObjectId(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, bool fDeep, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetPermitsForObjectId", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrObjectId,
                    fDeep}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetPermitsForObjectId(System.IAsyncResult asyncResult, out string pbstrErrorXML, out int plPermitCount, out string pbstrPermitSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        plPermitCount = ((int)(results[1]));
        pbstrPermitSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.CreateAccount", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void CreateAccount(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrPPMemberName, string bstrTrackingGUID, string bstrAccountInfoXML, string bstrPaymentInstrumentXML, out string pbstrErrorXML, out string pbstrAccountId, out string pbstrPaymentInstrumentId, out string pbstrDate, out string bstrRequiredPaperWorkURL) {
        object[] results = this.Invoke("CreateAccount", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrPPMemberName,
                    bstrTrackingGUID,
                    bstrAccountInfoXML,
                    bstrPaymentInstrumentXML});
        pbstrErrorXML = ((string)(results[0]));
        pbstrAccountId = ((string)(results[1]));
        pbstrPaymentInstrumentId = ((string)(results[2]));
        pbstrDate = ((string)(results[3]));
        bstrRequiredPaperWorkURL = ((string)(results[4]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCreateAccount(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrPPMemberName, string bstrTrackingGUID, string bstrAccountInfoXML, string bstrPaymentInstrumentXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CreateAccount", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrPPMemberName,
                    bstrTrackingGUID,
                    bstrAccountInfoXML,
                    bstrPaymentInstrumentXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndCreateAccount(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrAccountId, out string pbstrPaymentInstrumentId, out string pbstrDate, out string bstrRequiredPaperWorkURL) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrAccountId = ((string)(results[1]));
        pbstrPaymentInstrumentId = ((string)(results[2]));
        pbstrDate = ((string)(results[3]));
        bstrRequiredPaperWorkURL = ((string)(results[4]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetReferralEvents", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetReferralEvents(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string AccountId, string SessionKey, out string ReferralEventsInfoXML) {
        object[] results = this.Invoke("GetReferralEvents", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    AccountId,
                    SessionKey});
        ReferralEventsInfoXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetReferralEvents(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string AccountId, string SessionKey, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetReferralEvents", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    AccountId,
                    SessionKey}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetReferralEvents(System.IAsyncResult asyncResult, out string ReferralEventsInfoXML) {
        object[] results = this.EndInvoke(asyncResult);
        ReferralEventsInfoXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetAccountInfo", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetAccountInfo(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrAccountId, out string pbstrErrorXML, out string pbstrAccountInfoXML) {
        object[] results = this.Invoke("GetAccountInfo", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrAccountId});
        pbstrErrorXML = ((string)(results[0]));
        pbstrAccountInfoXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetAccountInfo(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrAccountId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetAccountInfo", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrAccountId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetAccountInfo(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrAccountInfoXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrAccountInfoXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.UpdateAccountInfo", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void UpdateAccountInfo(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrAccountId, string bstrAccountInfoXML, out string pbstrErrorXML, out string pbstrRequiredPaperWorkURL) {
        object[] results = this.Invoke("UpdateAccountInfo", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrAccountId,
                    bstrAccountInfoXML});
        pbstrErrorXML = ((string)(results[0]));
        pbstrRequiredPaperWorkURL = ((string)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUpdateAccountInfo(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrAccountId, string bstrAccountInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdateAccountInfo", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrAccountId,
                    bstrAccountInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndUpdateAccountInfo(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrRequiredPaperWorkURL) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrRequiredPaperWorkURL = ((string)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.CloseAccount", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void CloseAccount(int lDelegateIdHigh, int lDelegateIdLow, string bstrAccountId, string bstrCommentInfoXML, out string pbstrErrorXML) {
        object[] results = this.Invoke("CloseAccount", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrAccountId,
                    bstrCommentInfoXML});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCloseAccount(int lDelegateIdHigh, int lDelegateIdLow, string bstrAccountId, string bstrCommentInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CloseAccount", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrAccountId,
                    bstrCommentInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndCloseAccount(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.SignAgreement", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void SignAgreement(int lRequesterIdHigh, int lRequesterIdLow, string bstrSubscriptionId, string bstrPolicyGUID, int lPolicyVersion, string bstrSignatureDateTime, out string pbstrErrorXML) {
        object[] results = this.Invoke("SignAgreement", new object[] {
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrSubscriptionId,
                    bstrPolicyGUID,
                    lPolicyVersion,
                    bstrSignatureDateTime});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSignAgreement(int lRequesterIdHigh, int lRequesterIdLow, string bstrSubscriptionId, string bstrPolicyGUID, int lPolicyVersion, string bstrSignatureDateTime, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SignAgreement", new object[] {
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrSubscriptionId,
                    bstrPolicyGUID,
                    lPolicyVersion,
                    bstrSignatureDateTime}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSignAgreement(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.AddViolation", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void AddViolation(int lDelegateIdHigh, int lDelegateIdLow, string bstrObjectId, int lViolationId, string bstrCommentInfoXML, out string pbstrErrorXML, out string pbstrStatusInfoXML, out string pbstrAmountChargedXML) {
        object[] results = this.Invoke("AddViolation", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrObjectId,
                    lViolationId,
                    bstrCommentInfoXML});
        pbstrErrorXML = ((string)(results[0]));
        pbstrStatusInfoXML = ((string)(results[1]));
        pbstrAmountChargedXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginAddViolation(int lDelegateIdHigh, int lDelegateIdLow, string bstrObjectId, int lViolationId, string bstrCommentInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AddViolation", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrObjectId,
                    lViolationId,
                    bstrCommentInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndAddViolation(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrStatusInfoXML, out string pbstrAmountChargedXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrStatusInfoXML = ((string)(results[1]));
        pbstrAmountChargedXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.RemoveViolation", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void RemoveViolation(int lDelegateIdHigh, int lDelegateIdLow, string bstrObjectId, int lViolationId, string bstrCommentInfoXML, out string pbstrErrorXML, out string pbstrStatusInfoXML, out string pbstrAmountChargedXML) {
        object[] results = this.Invoke("RemoveViolation", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrObjectId,
                    lViolationId,
                    bstrCommentInfoXML});
        pbstrErrorXML = ((string)(results[0]));
        pbstrStatusInfoXML = ((string)(results[1]));
        pbstrAmountChargedXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRemoveViolation(int lDelegateIdHigh, int lDelegateIdLow, string bstrObjectId, int lViolationId, string bstrCommentInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RemoveViolation", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrObjectId,
                    lViolationId,
                    bstrCommentInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndRemoveViolation(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrStatusInfoXML, out string pbstrAmountChargedXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrStatusInfoXML = ((string)(results[1]));
        pbstrAmountChargedXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetAccountIdFromAdminPUID", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetAccountIdFromAdminPUID(int lDelegateIdHigh, int lDelegateIdLow, int lSearchPUIDHigh, int lSearchPUIDLow, bool fFullData, int lMax, out string pbstrErrorXML, out int pfMoreRows, out int plAccountInfoCount, out string pbstrAccountInfoSetXML) {
        object[] results = this.Invoke("GetAccountIdFromAdminPUID", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lSearchPUIDHigh,
                    lSearchPUIDLow,
                    fFullData,
                    lMax});
        pbstrErrorXML = ((string)(results[0]));
        pfMoreRows = ((int)(results[1]));
        plAccountInfoCount = ((int)(results[2]));
        pbstrAccountInfoSetXML = ((string)(results[3]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetAccountIdFromAdminPUID(int lDelegateIdHigh, int lDelegateIdLow, int lSearchPUIDHigh, int lSearchPUIDLow, bool fFullData, int lMax, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetAccountIdFromAdminPUID", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lSearchPUIDHigh,
                    lSearchPUIDLow,
                    fFullData,
                    lMax}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetAccountIdFromAdminPUID(System.IAsyncResult asyncResult, out string pbstrErrorXML, out int pfMoreRows, out int plAccountInfoCount, out string pbstrAccountInfoSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pfMoreRows = ((int)(results[1]));
        plAccountInfoCount = ((int)(results[2]));
        pbstrAccountInfoSetXML = ((string)(results[3]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetAccountIdFromPaymentInstrumentInfo", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetAccountIdFromPaymentInstrumentInfo(int lDelegateIdHigh, int lDelegateIdLow, bool fFullData, int lMax, string bstrPaymentInstrumentInfoXML, out string pbstrErrorXML, out int pfMoreRows, out int plAccountInfoCount, out string pbstrAccountInfoSetXML) {
        object[] results = this.Invoke("GetAccountIdFromPaymentInstrumentInfo", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    fFullData,
                    lMax,
                    bstrPaymentInstrumentInfoXML});
        pbstrErrorXML = ((string)(results[0]));
        pfMoreRows = ((int)(results[1]));
        plAccountInfoCount = ((int)(results[2]));
        pbstrAccountInfoSetXML = ((string)(results[3]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetAccountIdFromPaymentInstrumentInfo(int lDelegateIdHigh, int lDelegateIdLow, bool fFullData, int lMax, string bstrPaymentInstrumentInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetAccountIdFromPaymentInstrumentInfo", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    fFullData,
                    lMax,
                    bstrPaymentInstrumentInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetAccountIdFromPaymentInstrumentInfo(System.IAsyncResult asyncResult, out string pbstrErrorXML, out int pfMoreRows, out int plAccountInfoCount, out string pbstrAccountInfoSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pfMoreRows = ((int)(results[1]));
        plAccountInfoCount = ((int)(results[2]));
        pbstrAccountInfoSetXML = ((string)(results[3]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.AddPaymentInstrument", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void AddPaymentInstrument(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrAccountId, string bstrPaymentInstrumentInfoXML, out string pbstrErrorXML, out string pbstrPaymentInstrumentId, out string pbstrRequiredPaperWorkURL) {
        object[] results = this.Invoke("AddPaymentInstrument", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    bstrAccountId,
                    bstrPaymentInstrumentInfoXML});
        pbstrErrorXML = ((string)(results[0]));
        pbstrPaymentInstrumentId = ((string)(results[1]));
        pbstrRequiredPaperWorkURL = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginAddPaymentInstrument(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrAccountId, string bstrPaymentInstrumentInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AddPaymentInstrument", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    bstrAccountId,
                    bstrPaymentInstrumentInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndAddPaymentInstrument(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrPaymentInstrumentId, out string pbstrRequiredPaperWorkURL) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrPaymentInstrumentId = ((string)(results[1]));
        pbstrRequiredPaperWorkURL = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetPaymentInstruments", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetPaymentInstruments(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, out string pbstrErrorXML, out int plPaymentInstrumentInfoCount, out string pbstrPaymentInstrumentInfoSetXML) {
        object[] results = this.Invoke("GetPaymentInstruments", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrObjectId});
        pbstrErrorXML = ((string)(results[0]));
        plPaymentInstrumentInfoCount = ((int)(results[1]));
        pbstrPaymentInstrumentInfoSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetPaymentInstruments(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetPaymentInstruments", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrObjectId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetPaymentInstruments(System.IAsyncResult asyncResult, out string pbstrErrorXML, out int plPaymentInstrumentInfoCount, out string pbstrPaymentInstrumentInfoSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        plPaymentInstrumentInfoCount = ((int)(results[1]));
        pbstrPaymentInstrumentInfoSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetPaymentInstrumentsEx", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetPaymentInstrumentsEx(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, bool fReturnRemoved, out string pbstrErrorXML, out int plPaymentInstrumentInfoCount, out string pbstrPaymentInstrumentInfoSetXML) {
        object[] results = this.Invoke("GetPaymentInstrumentsEx", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrObjectId,
                    fReturnRemoved});
        pbstrErrorXML = ((string)(results[0]));
        plPaymentInstrumentInfoCount = ((int)(results[1]));
        pbstrPaymentInstrumentInfoSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetPaymentInstrumentsEx(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, bool fReturnRemoved, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetPaymentInstrumentsEx", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrObjectId,
                    fReturnRemoved}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetPaymentInstrumentsEx(System.IAsyncResult asyncResult, out string pbstrErrorXML, out int plPaymentInstrumentInfoCount, out string pbstrPaymentInstrumentInfoSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        plPaymentInstrumentInfoCount = ((int)(results[1]));
        pbstrPaymentInstrumentInfoSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.UpdatePaymentInstrumentInfo", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void UpdatePaymentInstrumentInfo(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrPaymentInstrumentId, string bstrPaymentInstrumentInfoXML, out string pbstrErrorXML) {
        object[] results = this.Invoke("UpdatePaymentInstrumentInfo", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrPaymentInstrumentId,
                    bstrPaymentInstrumentInfoXML});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUpdatePaymentInstrumentInfo(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrPaymentInstrumentId, string bstrPaymentInstrumentInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdatePaymentInstrumentInfo", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrPaymentInstrumentId,
                    bstrPaymentInstrumentInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndUpdatePaymentInstrumentInfo(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.RemovePaymentInstrument", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void RemovePaymentInstrument(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrPaymentInstrumentId, out string pbstrErrorXML) {
        object[] results = this.Invoke("RemovePaymentInstrument", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrPaymentInstrumentId});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRemovePaymentInstrument(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrPaymentInstrumentId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RemovePaymentInstrument", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrPaymentInstrumentId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndRemovePaymentInstrument(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.SettleBalance", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void SettleBalance(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrPaymentInstrumentId, out string pbstrErrorXML, out string pbstrAmountChargedXML) {
        object[] results = this.Invoke("SettleBalance", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrPaymentInstrumentId});
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSettleBalance(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrPaymentInstrumentId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SettleBalance", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrPaymentInstrumentId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSettleBalance(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrAmountChargedXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.TransferBalance", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void TransferBalance(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrFromPaymentInstrumentId, string bstrToPaymentInstrumentId, out string pbstrErrorXML, out string pbstrAmountChargedXML) {
        object[] results = this.Invoke("TransferBalance", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrFromPaymentInstrumentId,
                    bstrToPaymentInstrumentId});
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginTransferBalance(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrFromPaymentInstrumentId, string bstrToPaymentInstrumentId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("TransferBalance", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrFromPaymentInstrumentId,
                    bstrToPaymentInstrumentId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndTransferBalance(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrAmountChargedXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.CloseBalance", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void CloseBalance(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrObjectId, string bstrLineItemId, out string pbstrErrorXML, out string pbstrAmountChargedXML) {
        object[] results = this.Invoke("CloseBalance", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrObjectId,
                    bstrLineItemId});
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCloseBalance(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrObjectId, string bstrLineItemId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CloseBalance", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrObjectId,
                    bstrLineItemId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndCloseBalance(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrAmountChargedXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.SwitchPaymentInstruments", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void SwitchPaymentInstruments(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrFromPaymentInstrumentId, string bstrToPaymentInstrumentId, out string pbstrErrorXML, out string pbstrAmountChargedXML) {
        object[] results = this.Invoke("SwitchPaymentInstruments", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    bstrFromPaymentInstrumentId,
                    bstrToPaymentInstrumentId});
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSwitchPaymentInstruments(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrFromPaymentInstrumentId, string bstrToPaymentInstrumentId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SwitchPaymentInstruments", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    bstrFromPaymentInstrumentId,
                    bstrToPaymentInstrumentId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSwitchPaymentInstruments(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrAmountChargedXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.AddComment", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void AddComment(int lDelegateIdHigh, int lDelegateIdLow, string bstrAccountId, string bstrCommentInfoXML, out string pbstrErrorXML) {
        object[] results = this.Invoke("AddComment", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrAccountId,
                    bstrCommentInfoXML});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginAddComment(int lDelegateIdHigh, int lDelegateIdLow, string bstrAccountId, string bstrCommentInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AddComment", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrAccountId,
                    bstrCommentInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndAddComment(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetComments", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetComments(int lDelegateIdHigh, int lDelegateIdLow, string bstrAccountId, out string pbstrErrorXML, out int plCommentInfoSetCount, out string pbstrCommentInfoSetXML) {
        object[] results = this.Invoke("GetComments", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrAccountId});
        pbstrErrorXML = ((string)(results[0]));
        plCommentInfoSetCount = ((int)(results[1]));
        pbstrCommentInfoSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetComments(int lDelegateIdHigh, int lDelegateIdLow, string bstrAccountId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetComments", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrAccountId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetComments(System.IAsyncResult asyncResult, out string pbstrErrorXML, out int plCommentInfoSetCount, out string pbstrCommentInfoSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        plCommentInfoSetCount = ((int)(results[1]));
        pbstrCommentInfoSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.PurchaseOffering", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void PurchaseOffering(
                int lDelegateIdHigh, 
                int lDelegateIdLow, 
                int lRequesterIdHigh, 
                int lRequesterIdLow, 
                string bstrTrackingGUID, 
                bool fComputeOnly, 
                string bstrSubscriptionName, 
                string bstrAccountId, 
                string bstrBaseSubscriptionId, 
                string bstrOfferingGUID, 
                int lOverrideAmount, 
                string bstrPaymentInstrumentId, 
                string bstrShippingAddressId, 
                string bstrActivationDate, 
                string bstrSubscriptionEndDate, 
                string bstrReferralSetXML, 
                out string pbstrErrorXML, 
                out string pbstrSubscriptionId, 
                out string pbstrAmountChargedXML, 
                out int plAddedServiceInstanceCount, 
                out string pbstrAddedServiceInstanceSetXML) {
        object[] results = this.Invoke("PurchaseOffering", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    fComputeOnly,
                    bstrSubscriptionName,
                    bstrAccountId,
                    bstrBaseSubscriptionId,
                    bstrOfferingGUID,
                    lOverrideAmount,
                    bstrPaymentInstrumentId,
                    bstrShippingAddressId,
                    bstrActivationDate,
                    bstrSubscriptionEndDate,
                    bstrReferralSetXML});
        pbstrErrorXML = ((string)(results[0]));
        pbstrSubscriptionId = ((string)(results[1]));
        pbstrAmountChargedXML = ((string)(results[2]));
        plAddedServiceInstanceCount = ((int)(results[3]));
        pbstrAddedServiceInstanceSetXML = ((string)(results[4]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginPurchaseOffering(
                int lDelegateIdHigh, 
                int lDelegateIdLow, 
                int lRequesterIdHigh, 
                int lRequesterIdLow, 
                string bstrTrackingGUID, 
                bool fComputeOnly, 
                string bstrSubscriptionName, 
                string bstrAccountId, 
                string bstrBaseSubscriptionId, 
                string bstrOfferingGUID, 
                int lOverrideAmount, 
                string bstrPaymentInstrumentId, 
                string bstrShippingAddressId, 
                string bstrActivationDate, 
                string bstrSubscriptionEndDate, 
                string bstrReferralSetXML, 
                System.AsyncCallback callback, 
                object asyncState) {
        return this.BeginInvoke("PurchaseOffering", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    fComputeOnly,
                    bstrSubscriptionName,
                    bstrAccountId,
                    bstrBaseSubscriptionId,
                    bstrOfferingGUID,
                    lOverrideAmount,
                    bstrPaymentInstrumentId,
                    bstrShippingAddressId,
                    bstrActivationDate,
                    bstrSubscriptionEndDate,
                    bstrReferralSetXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndPurchaseOffering(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrSubscriptionId, out string pbstrAmountChargedXML, out int plAddedServiceInstanceCount, out string pbstrAddedServiceInstanceSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrSubscriptionId = ((string)(results[1]));
        pbstrAmountChargedXML = ((string)(results[2]));
        plAddedServiceInstanceCount = ((int)(results[3]));
        pbstrAddedServiceInstanceSetXML = ((string)(results[4]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.PurchaseOfferingEx", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void PurchaseOfferingEx(
                int lDelegateIdHigh, 
                int lDelegateIdLow, 
                int lRequesterIdHigh, 
                int lRequesterIdLow, 
                string bstrTrackingGUID, 
                bool fComputeOnly, 
                string bstrSubscriptionName, 
                string bstrAccountId, 
                string bstrBaseSubscriptionId, 
                string bstrOfferingGUID, 
                int lOverrideAmount, 
                string bstrPaymentInstrumentId, 
                string bstrShippingAddressId, 
                string bstrActivationDate, 
                string bstrSubscriptionEndDate, 
                string bstrReferralSetXML, 
                string bstrTokenId, 
                string bstrPolicyGUID, 
                int lPolicyVersion, 
                string bstrSignatureDateTime, 
                out string pbstrErrorXML, 
                out string pbstrSubscriptionId, 
                out string pbstrAmountChargedXML, 
                out int plAddedServiceInstanceCount, 
                out string pbstrAddedServiceInstanceSetXML) {
        object[] results = this.Invoke("PurchaseOfferingEx", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    fComputeOnly,
                    bstrSubscriptionName,
                    bstrAccountId,
                    bstrBaseSubscriptionId,
                    bstrOfferingGUID,
                    lOverrideAmount,
                    bstrPaymentInstrumentId,
                    bstrShippingAddressId,
                    bstrActivationDate,
                    bstrSubscriptionEndDate,
                    bstrReferralSetXML,
                    bstrTokenId,
                    bstrPolicyGUID,
                    lPolicyVersion,
                    bstrSignatureDateTime});
        pbstrErrorXML = ((string)(results[0]));
        pbstrSubscriptionId = ((string)(results[1]));
        pbstrAmountChargedXML = ((string)(results[2]));
        plAddedServiceInstanceCount = ((int)(results[3]));
        pbstrAddedServiceInstanceSetXML = ((string)(results[4]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginPurchaseOfferingEx(
                int lDelegateIdHigh, 
                int lDelegateIdLow, 
                int lRequesterIdHigh, 
                int lRequesterIdLow, 
                string bstrTrackingGUID, 
                bool fComputeOnly, 
                string bstrSubscriptionName, 
                string bstrAccountId, 
                string bstrBaseSubscriptionId, 
                string bstrOfferingGUID, 
                int lOverrideAmount, 
                string bstrPaymentInstrumentId, 
                string bstrShippingAddressId, 
                string bstrActivationDate, 
                string bstrSubscriptionEndDate, 
                string bstrReferralSetXML, 
                string bstrTokenId, 
                string bstrPolicyGUID, 
                int lPolicyVersion, 
                string bstrSignatureDateTime, 
                System.AsyncCallback callback, 
                object asyncState) {
        return this.BeginInvoke("PurchaseOfferingEx", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    fComputeOnly,
                    bstrSubscriptionName,
                    bstrAccountId,
                    bstrBaseSubscriptionId,
                    bstrOfferingGUID,
                    lOverrideAmount,
                    bstrPaymentInstrumentId,
                    bstrShippingAddressId,
                    bstrActivationDate,
                    bstrSubscriptionEndDate,
                    bstrReferralSetXML,
                    bstrTokenId,
                    bstrPolicyGUID,
                    lPolicyVersion,
                    bstrSignatureDateTime}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndPurchaseOfferingEx(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrSubscriptionId, out string pbstrAmountChargedXML, out int plAddedServiceInstanceCount, out string pbstrAddedServiceInstanceSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrSubscriptionId = ((string)(results[1]));
        pbstrAmountChargedXML = ((string)(results[2]));
        plAddedServiceInstanceCount = ((int)(results[3]));
        pbstrAddedServiceInstanceSetXML = ((string)(results[4]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.CancelSubscription", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void CancelSubscription(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, bool fComputeOnly, string bstrSubscriptionId, string bstrCancelDate, string bstrCommentInfoXML, out string pbstrErrorXML, out string pbstrAmountChargedXML, out string pbstrSubscriptionStatusInfoXML, out int plRemovedServiceInstanceCount, out string pbstrRemovedServiceInstanceSetXML) {
        object[] results = this.Invoke("CancelSubscription", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    fComputeOnly,
                    bstrSubscriptionId,
                    bstrCancelDate,
                    bstrCommentInfoXML});
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedXML = ((string)(results[1]));
        pbstrSubscriptionStatusInfoXML = ((string)(results[2]));
        plRemovedServiceInstanceCount = ((int)(results[3]));
        pbstrRemovedServiceInstanceSetXML = ((string)(results[4]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCancelSubscription(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, bool fComputeOnly, string bstrSubscriptionId, string bstrCancelDate, string bstrCommentInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CancelSubscription", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    fComputeOnly,
                    bstrSubscriptionId,
                    bstrCancelDate,
                    bstrCommentInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndCancelSubscription(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrAmountChargedXML, out string pbstrSubscriptionStatusInfoXML, out int plRemovedServiceInstanceCount, out string pbstrRemovedServiceInstanceSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedXML = ((string)(results[1]));
        pbstrSubscriptionStatusInfoXML = ((string)(results[2]));
        plRemovedServiceInstanceCount = ((int)(results[3]));
        pbstrRemovedServiceInstanceSetXML = ((string)(results[4]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.SearchAccounts", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void SearchAccounts(int lDelegateIdHigh, int lDelegateIdLow, bool fFullData, int lMax, string bstrSearchXML, out string pbstrErrorXML, out int pfMoreRows, out int plAccountInfoCount, out string pbstrAccountInfoSetXML) {
        object[] results = this.Invoke("SearchAccounts", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    fFullData,
                    lMax,
                    bstrSearchXML});
        pbstrErrorXML = ((string)(results[0]));
        pfMoreRows = ((int)(results[1]));
        plAccountInfoCount = ((int)(results[2]));
        pbstrAccountInfoSetXML = ((string)(results[3]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSearchAccounts(int lDelegateIdHigh, int lDelegateIdLow, bool fFullData, int lMax, string bstrSearchXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SearchAccounts", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    fFullData,
                    lMax,
                    bstrSearchXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSearchAccounts(System.IAsyncResult asyncResult, out string pbstrErrorXML, out int pfMoreRows, out int plAccountInfoCount, out string pbstrAccountInfoSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pfMoreRows = ((int)(results[1]));
        plAccountInfoCount = ((int)(results[2]));
        pbstrAccountInfoSetXML = ((string)(results[3]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.SearchAccountsEx", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void SearchAccountsEx(int delegatePuidHigh, int delegatePuidLow, string accountSearchCriteriaXml, string bookmark, int returnedAccountCountMax, out string bookmarkNew, out int returnedAccountCount, out string accountInfoSetXml) {
        object[] results = this.Invoke("SearchAccountsEx", new object[] {
                    delegatePuidHigh,
                    delegatePuidLow,
                    accountSearchCriteriaXml,
                    bookmark,
                    returnedAccountCountMax});
        bookmarkNew = ((string)(results[0]));
        returnedAccountCount = ((int)(results[1]));
        accountInfoSetXml = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSearchAccountsEx(int delegatePuidHigh, int delegatePuidLow, string accountSearchCriteriaXml, string bookmark, int returnedAccountCountMax, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SearchAccountsEx", new object[] {
                    delegatePuidHigh,
                    delegatePuidLow,
                    accountSearchCriteriaXml,
                    bookmark,
                    returnedAccountCountMax}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSearchAccountsEx(System.IAsyncResult asyncResult, out string bookmarkNew, out int returnedAccountCount, out string accountInfoSetXml) {
        object[] results = this.EndInvoke(asyncResult);
        bookmarkNew = ((string)(results[0]));
        returnedAccountCount = ((int)(results[1]));
        accountInfoSetXml = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetSubscriptions", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetSubscriptions(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, out string pbstrErrorXML, out int plSubscriptionInfoCount, out string pbstrSubscriptionInfoSetXML) {
        object[] results = this.Invoke("GetSubscriptions", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrObjectId});
        pbstrErrorXML = ((string)(results[0]));
        plSubscriptionInfoCount = ((int)(results[1]));
        pbstrSubscriptionInfoSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetSubscriptions(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetSubscriptions", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrObjectId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetSubscriptions(System.IAsyncResult asyncResult, out string pbstrErrorXML, out int plSubscriptionInfoCount, out string pbstrSubscriptionInfoSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        plSubscriptionInfoCount = ((int)(results[1]));
        pbstrSubscriptionInfoSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetSubscriptionStatus", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetSubscriptionStatus(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrSubscriptionId, out string pbstrErrorXML, out string pbstrSubscriptionStatusInfoXML) {
        object[] results = this.Invoke("GetSubscriptionStatus", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrSubscriptionId});
        pbstrErrorXML = ((string)(results[0]));
        pbstrSubscriptionStatusInfoXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetSubscriptionStatus(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrSubscriptionId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetSubscriptionStatus", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrSubscriptionId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetSubscriptionStatus(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrSubscriptionStatusInfoXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrSubscriptionStatusInfoXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetSubscriptionHistory", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetSubscriptionHistory(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrSubscriptionId, out string pbstrErrorXML, out int plHistoryEventCount, out string pbstrSubscriptionHistoryEventSetXML) {
        object[] results = this.Invoke("GetSubscriptionHistory", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrSubscriptionId});
        pbstrErrorXML = ((string)(results[0]));
        plHistoryEventCount = ((int)(results[1]));
        pbstrSubscriptionHistoryEventSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetSubscriptionHistory(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrSubscriptionId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetSubscriptionHistory", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrSubscriptionId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetSubscriptionHistory(System.IAsyncResult asyncResult, out string pbstrErrorXML, out int plHistoryEventCount, out string pbstrSubscriptionHistoryEventSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        plHistoryEventCount = ((int)(results[1]));
        pbstrSubscriptionHistoryEventSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetReferralData", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetReferralData(int lDelegateIdHigh, int lDelegateIdLow, string bstrSubscriptionId, out string pbstrErrorXML, out int plReferralCount, out string pbstrReferralSetXML) {
        object[] results = this.Invoke("GetReferralData", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrSubscriptionId});
        pbstrErrorXML = ((string)(results[0]));
        plReferralCount = ((int)(results[1]));
        pbstrReferralSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetReferralData(int lDelegateIdHigh, int lDelegateIdLow, string bstrSubscriptionId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetReferralData", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrSubscriptionId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetReferralData(System.IAsyncResult asyncResult, out string pbstrErrorXML, out int plReferralCount, out string pbstrReferralSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        plReferralCount = ((int)(results[1]));
        pbstrReferralSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.ConvertSubscription", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void ConvertSubscription(
                int lDelegateIdHigh, 
                int lDelegateIdLow, 
                int lRequesterIdHigh, 
                int lRequesterIdLow, 
                string bstrTrackingGUID, 
                bool fComputeOnly, 
                int lConvertMode, 
                int lOverrideFlags, 
                string bstrSubscriptionName, 
                string bstrSubscriptionId, 
                string bstrOfferingGUID, 
                int lOverrideAmount, 
                string bstrSubscriptionEndDate, 
                string bstrReferralSetXML, 
                out string pbstrErrorXML, 
                out string pbstrAmountChargedXML, 
                out int plAddedServiceInstanceSetCount, 
                out string pbstrAddedServiceInstanceSet, 
                out int plRemovedServiceInstanceSetCount, 
                out string pbstrRemoveServiceInstanceSet) {
        object[] results = this.Invoke("ConvertSubscription", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    fComputeOnly,
                    lConvertMode,
                    lOverrideFlags,
                    bstrSubscriptionName,
                    bstrSubscriptionId,
                    bstrOfferingGUID,
                    lOverrideAmount,
                    bstrSubscriptionEndDate,
                    bstrReferralSetXML});
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedXML = ((string)(results[1]));
        plAddedServiceInstanceSetCount = ((int)(results[2]));
        pbstrAddedServiceInstanceSet = ((string)(results[3]));
        plRemovedServiceInstanceSetCount = ((int)(results[4]));
        pbstrRemoveServiceInstanceSet = ((string)(results[5]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginConvertSubscription(
                int lDelegateIdHigh, 
                int lDelegateIdLow, 
                int lRequesterIdHigh, 
                int lRequesterIdLow, 
                string bstrTrackingGUID, 
                bool fComputeOnly, 
                int lConvertMode, 
                int lOverrideFlags, 
                string bstrSubscriptionName, 
                string bstrSubscriptionId, 
                string bstrOfferingGUID, 
                int lOverrideAmount, 
                string bstrSubscriptionEndDate, 
                string bstrReferralSetXML, 
                System.AsyncCallback callback, 
                object asyncState) {
        return this.BeginInvoke("ConvertSubscription", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    fComputeOnly,
                    lConvertMode,
                    lOverrideFlags,
                    bstrSubscriptionName,
                    bstrSubscriptionId,
                    bstrOfferingGUID,
                    lOverrideAmount,
                    bstrSubscriptionEndDate,
                    bstrReferralSetXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndConvertSubscription(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrAmountChargedXML, out int plAddedServiceInstanceSetCount, out string pbstrAddedServiceInstanceSet, out int plRemovedServiceInstanceSetCount, out string pbstrRemoveServiceInstanceSet) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedXML = ((string)(results[1]));
        plAddedServiceInstanceSetCount = ((int)(results[2]));
        pbstrAddedServiceInstanceSet = ((string)(results[3]));
        plRemovedServiceInstanceSetCount = ((int)(results[4]));
        pbstrRemoveServiceInstanceSet = ((string)(results[5]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.ConvertSubscriptionEx", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void ConvertSubscriptionEx(
                int lDelegateIdHigh, 
                int lDelegateIdLow, 
                int lRequesterIdHigh, 
                int lRequesterIdLow, 
                string bstrTrackingGUID, 
                bool fComputeOnly, 
                int lConvertMode, 
                int lOverrideFlags, 
                string bstrSubscriptionName, 
                string bstrSubscriptionId, 
                string bstrOfferingGUID, 
                int lOverrideAmount, 
                string bstrSubscriptionEndDate, 
                string bstrReferralSetXML, 
                string bstrPaymentInstrumentId, 
                string bstrTokenId, 
                string bstrPolicyGUID, 
                int lPolicyVersion, 
                string bstrSignatureDateTime, 
                out string pbstrErrorXML, 
                out string pbstrAmountChargedXML, 
                out int plAddedServiceInstanceSetCount, 
                out string pbstrAddedServiceInstanceSet, 
                out int plRemovedServiceInstanceSetCount, 
                out string pbstrRemoveServiceInstanceSet) {
        object[] results = this.Invoke("ConvertSubscriptionEx", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    fComputeOnly,
                    lConvertMode,
                    lOverrideFlags,
                    bstrSubscriptionName,
                    bstrSubscriptionId,
                    bstrOfferingGUID,
                    lOverrideAmount,
                    bstrSubscriptionEndDate,
                    bstrReferralSetXML,
                    bstrPaymentInstrumentId,
                    bstrTokenId,
                    bstrPolicyGUID,
                    lPolicyVersion,
                    bstrSignatureDateTime});
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedXML = ((string)(results[1]));
        plAddedServiceInstanceSetCount = ((int)(results[2]));
        pbstrAddedServiceInstanceSet = ((string)(results[3]));
        plRemovedServiceInstanceSetCount = ((int)(results[4]));
        pbstrRemoveServiceInstanceSet = ((string)(results[5]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginConvertSubscriptionEx(
                int lDelegateIdHigh, 
                int lDelegateIdLow, 
                int lRequesterIdHigh, 
                int lRequesterIdLow, 
                string bstrTrackingGUID, 
                bool fComputeOnly, 
                int lConvertMode, 
                int lOverrideFlags, 
                string bstrSubscriptionName, 
                string bstrSubscriptionId, 
                string bstrOfferingGUID, 
                int lOverrideAmount, 
                string bstrSubscriptionEndDate, 
                string bstrReferralSetXML, 
                string bstrPaymentInstrumentId, 
                string bstrTokenId, 
                string bstrPolicyGUID, 
                int lPolicyVersion, 
                string bstrSignatureDateTime, 
                System.AsyncCallback callback, 
                object asyncState) {
        return this.BeginInvoke("ConvertSubscriptionEx", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    fComputeOnly,
                    lConvertMode,
                    lOverrideFlags,
                    bstrSubscriptionName,
                    bstrSubscriptionId,
                    bstrOfferingGUID,
                    lOverrideAmount,
                    bstrSubscriptionEndDate,
                    bstrReferralSetXML,
                    bstrPaymentInstrumentId,
                    bstrTokenId,
                    bstrPolicyGUID,
                    lPolicyVersion,
                    bstrSignatureDateTime}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndConvertSubscriptionEx(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrAmountChargedXML, out int plAddedServiceInstanceSetCount, out string pbstrAddedServiceInstanceSet, out int plRemovedServiceInstanceSetCount, out string pbstrRemoveServiceInstanceSet) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedXML = ((string)(results[1]));
        plAddedServiceInstanceSetCount = ((int)(results[2]));
        pbstrAddedServiceInstanceSet = ((string)(results[3]));
        plRemovedServiceInstanceSetCount = ((int)(results[4]));
        pbstrRemoveServiceInstanceSet = ((string)(results[5]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.UpdateSubscriptionInfo", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void UpdateSubscriptionInfo(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrSubscriptionId, string bstrSubscriptionInfoXML, string bstrReferralSetXML, out string pbstrErrorXML) {
        object[] results = this.Invoke("UpdateSubscriptionInfo", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    bstrSubscriptionId,
                    bstrSubscriptionInfoXML,
                    bstrReferralSetXML});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUpdateSubscriptionInfo(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrSubscriptionId, string bstrSubscriptionInfoXML, string bstrReferralSetXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdateSubscriptionInfo", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    bstrSubscriptionId,
                    bstrSubscriptionInfoXML,
                    bstrReferralSetXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndUpdateSubscriptionInfo(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetAccountStatus", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetAccountStatus(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrAccountId, out string pbstrErrorXML, out string pbstrAccountStatusInfoXML) {
        object[] results = this.Invoke("GetAccountStatus", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrAccountId});
        pbstrErrorXML = ((string)(results[0]));
        pbstrAccountStatusInfoXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetAccountStatus(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrAccountId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetAccountStatus", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrAccountId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetAccountStatus(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrAccountStatusInfoXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrAccountStatusInfoXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetBaseOfferings", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetBaseOfferings(string bstrOfferingGUID, string bstrCategory, string bstrCountry, string bstrLocale, string bstrCurrency, out string pbstrErrorText, out int plOfferingInfoCount, out string pbstrOfferingInfoSetXML) {
        object[] results = this.Invoke("GetBaseOfferings", new object[] {
                    bstrOfferingGUID,
                    bstrCategory,
                    bstrCountry,
                    bstrLocale,
                    bstrCurrency});
        pbstrErrorText = ((string)(results[0]));
        plOfferingInfoCount = ((int)(results[1]));
        pbstrOfferingInfoSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetBaseOfferings(string bstrOfferingGUID, string bstrCategory, string bstrCountry, string bstrLocale, string bstrCurrency, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetBaseOfferings", new object[] {
                    bstrOfferingGUID,
                    bstrCategory,
                    bstrCountry,
                    bstrLocale,
                    bstrCurrency}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetBaseOfferings(System.IAsyncResult asyncResult, out string pbstrErrorText, out int plOfferingInfoCount, out string pbstrOfferingInfoSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorText = ((string)(results[0]));
        plOfferingInfoCount = ((int)(results[1]));
        pbstrOfferingInfoSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetBaseOfferingsEx", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetBaseOfferingsEx(string bstrOfferingGUID, string bstrCategory, string bstrCountry, string bstrLocale, string bstrCurrency, string bstrTokenId, out string pbstrErrorText, out int plOfferingInfoCount, out string pbstrOfferingInfoSetXML) {
        object[] results = this.Invoke("GetBaseOfferingsEx", new object[] {
                    bstrOfferingGUID,
                    bstrCategory,
                    bstrCountry,
                    bstrLocale,
                    bstrCurrency,
                    bstrTokenId});
        pbstrErrorText = ((string)(results[0]));
        plOfferingInfoCount = ((int)(results[1]));
        pbstrOfferingInfoSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetBaseOfferingsEx(string bstrOfferingGUID, string bstrCategory, string bstrCountry, string bstrLocale, string bstrCurrency, string bstrTokenId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetBaseOfferingsEx", new object[] {
                    bstrOfferingGUID,
                    bstrCategory,
                    bstrCountry,
                    bstrLocale,
                    bstrCurrency,
                    bstrTokenId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetBaseOfferingsEx(System.IAsyncResult asyncResult, out string pbstrErrorText, out int plOfferingInfoCount, out string pbstrOfferingInfoSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorText = ((string)(results[0]));
        plOfferingInfoCount = ((int)(results[1]));
        pbstrOfferingInfoSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetEligibleOfferings", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetEligibleOfferings(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrAccountId, string bstrOfferingGUID, string bstrCategory, string bstrFilter, out string pbstrErrorText, out int plOfferingInfoCount, out string pbstrOfferingInfoSetXML) {
        object[] results = this.Invoke("GetEligibleOfferings", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrAccountId,
                    bstrOfferingGUID,
                    bstrCategory,
                    bstrFilter});
        pbstrErrorText = ((string)(results[0]));
        plOfferingInfoCount = ((int)(results[1]));
        pbstrOfferingInfoSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetEligibleOfferings(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrAccountId, string bstrOfferingGUID, string bstrCategory, string bstrFilter, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetEligibleOfferings", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrAccountId,
                    bstrOfferingGUID,
                    bstrCategory,
                    bstrFilter}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetEligibleOfferings(System.IAsyncResult asyncResult, out string pbstrErrorText, out int plOfferingInfoCount, out string pbstrOfferingInfoSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorText = ((string)(results[0]));
        plOfferingInfoCount = ((int)(results[1]));
        pbstrOfferingInfoSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetEligibleOfferingsEx", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetEligibleOfferingsEx(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrAccountId, string bstrOfferingGUID, string bstrCategory, string bstrFilter, string bstrTokenId, out string pbstrErrorText, out int plOfferingInfoCount, out string pbstrOfferingInfoSetXML) {
        object[] results = this.Invoke("GetEligibleOfferingsEx", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrAccountId,
                    bstrOfferingGUID,
                    bstrCategory,
                    bstrFilter,
                    bstrTokenId});
        pbstrErrorText = ((string)(results[0]));
        plOfferingInfoCount = ((int)(results[1]));
        pbstrOfferingInfoSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetEligibleOfferingsEx(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrAccountId, string bstrOfferingGUID, string bstrCategory, string bstrFilter, string bstrTokenId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetEligibleOfferingsEx", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrAccountId,
                    bstrOfferingGUID,
                    bstrCategory,
                    bstrFilter,
                    bstrTokenId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetEligibleOfferingsEx(System.IAsyncResult asyncResult, out string pbstrErrorText, out int plOfferingInfoCount, out string pbstrOfferingInfoSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorText = ((string)(results[0]));
        plOfferingInfoCount = ((int)(results[1]));
        pbstrOfferingInfoSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetServiceComponents", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetServiceComponents(string bstrOfferingGUID, out string pbstrErrorText, out int plServiceComponentCount, out string pbstrServiceComponentSetXML) {
        object[] results = this.Invoke("GetServiceComponents", new object[] {
                    bstrOfferingGUID});
        pbstrErrorText = ((string)(results[0]));
        plServiceComponentCount = ((int)(results[1]));
        pbstrServiceComponentSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetServiceComponents(string bstrOfferingGUID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetServiceComponents", new object[] {
                    bstrOfferingGUID}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetServiceComponents(System.IAsyncResult asyncResult, out string pbstrErrorText, out int plServiceComponentCount, out string pbstrServiceComponentSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorText = ((string)(results[0]));
        plServiceComponentCount = ((int)(results[1]));
        pbstrServiceComponentSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetResourcePrices", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetResourcePrices(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrSubscriptionId, string bstrOfferingGUID, out string pbstrErrorXML, out int plCount, out string pbstrResourcePriceSetXML) {
        object[] results = this.Invoke("GetResourcePrices", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrSubscriptionId,
                    bstrOfferingGUID});
        pbstrErrorXML = ((string)(results[0]));
        plCount = ((int)(results[1]));
        pbstrResourcePriceSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetResourcePrices(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrSubscriptionId, string bstrOfferingGUID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetResourcePrices", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrSubscriptionId,
                    bstrOfferingGUID}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetResourcePrices(System.IAsyncResult asyncResult, out string pbstrErrorXML, out int plCount, out string pbstrResourcePriceSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        plCount = ((int)(results[1]));
        pbstrResourcePriceSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.ValidateProvisioningData", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void ValidateProvisioningData(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrServiceComponentId, string bstrDetailsXML, out string pbstrErrorXML, out string pbstrResponseXML) {
        object[] results = this.Invoke("ValidateProvisioningData", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrServiceComponentId,
                    bstrDetailsXML});
        pbstrErrorXML = ((string)(results[0]));
        pbstrResponseXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginValidateProvisioningData(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrServiceComponentId, string bstrDetailsXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ValidateProvisioningData", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrServiceComponentId,
                    bstrDetailsXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndValidateProvisioningData(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrResponseXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrResponseXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.CheckProvisioningStatus", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void CheckProvisioningStatus(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrServiceComponentId, out string pbstrErrorXML, out string pbstrResponseXML) {
        object[] results = this.Invoke("CheckProvisioningStatus", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrServiceComponentId});
        pbstrErrorXML = ((string)(results[0]));
        pbstrResponseXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCheckProvisioningStatus(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrServiceComponentId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CheckProvisioningStatus", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrServiceComponentId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndCheckProvisioningStatus(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrResponseXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrResponseXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.ProvisionServices", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void ProvisionServices(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrServiceInstanceSetXML, out string pbstrErrorXML) {
        object[] results = this.Invoke("ProvisionServices", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrServiceInstanceSetXML});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginProvisionServices(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrServiceInstanceSetXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ProvisionServices", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrServiceInstanceSetXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndProvisionServices(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.DeprovisionServices", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void DeprovisionServices(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrServiceInstanceSetXML, out string pbstrErrorXML) {
        object[] results = this.Invoke("DeprovisionServices", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrServiceInstanceSetXML});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginDeprovisionServices(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrServiceInstanceSetXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DeprovisionServices", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrServiceInstanceSetXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndDeprovisionServices(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.ReportUsageEvent", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void ReportUsageEvent(string bstrTrackingGUID, string bstrUsageSetXML, out string pbstrErrorXML) {
        object[] results = this.Invoke("ReportUsageEvent", new object[] {
                    bstrTrackingGUID,
                    bstrUsageSetXML});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginReportUsageEvent(string bstrTrackingGUID, string bstrUsageSetXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ReportUsageEvent", new object[] {
                    bstrTrackingGUID,
                    bstrUsageSetXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndReportUsageEvent(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.ReportSingleUsageEvent", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void ReportSingleUsageEvent(string trackingGuid, bool computeOnly, string usageEventXml, out string lineItemId, out string usageInfoXml, out string amountChargedXml) {
        object[] results = this.Invoke("ReportSingleUsageEvent", new object[] {
                    trackingGuid,
                    computeOnly,
                    usageEventXml});
        lineItemId = ((string)(results[0]));
        usageInfoXml = ((string)(results[1]));
        amountChargedXml = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginReportSingleUsageEvent(string trackingGuid, bool computeOnly, string usageEventXml, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ReportSingleUsageEvent", new object[] {
                    trackingGuid,
                    computeOnly,
                    usageEventXml}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndReportSingleUsageEvent(System.IAsyncResult asyncResult, out string lineItemId, out string usageInfoXml, out string amountChargedXml) {
        object[] results = this.EndInvoke(asyncResult);
        lineItemId = ((string)(results[0]));
        usageInfoXml = ((string)(results[1]));
        amountChargedXml = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetResourceBalances", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetResourceBalances(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, string bstrResourceGUID, out string pbstrErrorText, out int pcResourceInfoCount, out string pbstrResourceInfoSet) {
        object[] results = this.Invoke("GetResourceBalances", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrObjectId,
                    bstrResourceGUID});
        pbstrErrorText = ((string)(results[0]));
        pcResourceInfoCount = ((int)(results[1]));
        pbstrResourceInfoSet = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetResourceBalances(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, string bstrResourceGUID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetResourceBalances", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrObjectId,
                    bstrResourceGUID}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetResourceBalances(System.IAsyncResult asyncResult, out string pbstrErrorText, out int pcResourceInfoCount, out string pbstrResourceInfoSet) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorText = ((string)(results[0]));
        pcResourceInfoCount = ((int)(results[1]));
        pbstrResourceInfoSet = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.AdjustResourceBalance", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void AdjustResourceBalance(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrObjectId, string bstrResourceGUID, int lNumberOfUnits, string bstrUnitsOfMeasure, string bstrCommentInfoXML, out string pbstrError) {
        object[] results = this.Invoke("AdjustResourceBalance", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrObjectId,
                    bstrResourceGUID,
                    lNumberOfUnits,
                    bstrUnitsOfMeasure,
                    bstrCommentInfoXML});
        pbstrError = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginAdjustResourceBalance(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrObjectId, string bstrResourceGUID, int lNumberOfUnits, string bstrUnitsOfMeasure, string bstrCommentInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AdjustResourceBalance", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrObjectId,
                    bstrResourceGUID,
                    lNumberOfUnits,
                    bstrUnitsOfMeasure,
                    bstrCommentInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndAdjustResourceBalance(System.IAsyncResult asyncResult, out string pbstrError) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrError = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.CreditPaymentInstrument", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void CreditPaymentInstrument(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrPaymentInstrumentId, int lFinancialReportingCode, string bstrAmount, bool fImmediatelySettle, string bstrCommentInfoXML, out string pbstrError) {
        object[] results = this.Invoke("CreditPaymentInstrument", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrPaymentInstrumentId,
                    lFinancialReportingCode,
                    bstrAmount,
                    fImmediatelySettle,
                    bstrCommentInfoXML});
        pbstrError = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCreditPaymentInstrument(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrPaymentInstrumentId, int lFinancialReportingCode, string bstrAmount, bool fImmediatelySettle, string bstrCommentInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CreditPaymentInstrument", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrPaymentInstrumentId,
                    lFinancialReportingCode,
                    bstrAmount,
                    fImmediatelySettle,
                    bstrCommentInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndCreditPaymentInstrument(System.IAsyncResult asyncResult, out string pbstrError) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrError = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.CreditPaymentInstrumentEx", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void CreditPaymentInstrumentEx(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrPaymentInstrumentId, string bstrSubscriptionId, int lFinancialReportingCode, string bstrAmount, bool fImmediatelySettle, string bstrCommentInfoXML, out string pbstrError) {
        object[] results = this.Invoke("CreditPaymentInstrumentEx", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrPaymentInstrumentId,
                    bstrSubscriptionId,
                    lFinancialReportingCode,
                    bstrAmount,
                    fImmediatelySettle,
                    bstrCommentInfoXML});
        pbstrError = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCreditPaymentInstrumentEx(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrPaymentInstrumentId, string bstrSubscriptionId, int lFinancialReportingCode, string bstrAmount, bool fImmediatelySettle, string bstrCommentInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CreditPaymentInstrumentEx", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrPaymentInstrumentId,
                    bstrSubscriptionId,
                    lFinancialReportingCode,
                    bstrAmount,
                    fImmediatelySettle,
                    bstrCommentInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndCreditPaymentInstrumentEx(System.IAsyncResult asyncResult, out string pbstrError) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrError = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.OffsetLineItem", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void OffsetLineItem(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrLineItemId, int lFinancialReportingCode, bool fImmediatelySettle, string bstrAmount, string bstrCommentInfoXML, out string pbstrError) {
        object[] results = this.Invoke("OffsetLineItem", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrLineItemId,
                    lFinancialReportingCode,
                    fImmediatelySettle,
                    bstrAmount,
                    bstrCommentInfoXML});
        pbstrError = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginOffsetLineItem(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrLineItemId, int lFinancialReportingCode, bool fImmediatelySettle, string bstrAmount, string bstrCommentInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("OffsetLineItem", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrLineItemId,
                    lFinancialReportingCode,
                    fImmediatelySettle,
                    bstrAmount,
                    bstrCommentInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndOffsetLineItem(System.IAsyncResult asyncResult, out string pbstrError) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrError = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.OffsetSingleUsageEvent", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void OffsetSingleUsageEvent(int delegateIdHigh, int delegateIdLow, string trackingGuid, string lineItemId, int units, string CommentInfoXML, string reservedXML, int returnAsUsageActivity, out string newLineItemXML) {
        object[] results = this.Invoke("OffsetSingleUsageEvent", new object[] {
                    delegateIdHigh,
                    delegateIdLow,
                    trackingGuid,
                    lineItemId,
                    units,
                    CommentInfoXML,
                    reservedXML,
                    returnAsUsageActivity});
        newLineItemXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginOffsetSingleUsageEvent(int delegateIdHigh, int delegateIdLow, string trackingGuid, string lineItemId, int units, string CommentInfoXML, string reservedXML, int returnAsUsageActivity, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("OffsetSingleUsageEvent", new object[] {
                    delegateIdHigh,
                    delegateIdLow,
                    trackingGuid,
                    lineItemId,
                    units,
                    CommentInfoXML,
                    reservedXML,
                    returnAsUsageActivity}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndOffsetSingleUsageEvent(System.IAsyncResult asyncResult, out string newLineItemXML) {
        object[] results = this.EndInvoke(asyncResult);
        newLineItemXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.TestConnection", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void TestConnection(string bstrInputString, out string pbstrOutputString) {
        object[] results = this.Invoke("TestConnection", new object[] {
                    bstrInputString});
        pbstrOutputString = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginTestConnection(string bstrInputString, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("TestConnection", new object[] {
                    bstrInputString}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndTestConnection(System.IAsyncResult asyncResult, out string pbstrOutputString) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrOutputString = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.BanUser", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void BanUser(int lDelegateIdHigh, int lDelegateIdLow, int lReasonCode, string bstrAccountInfoXML, out string pbstrErrorXML) {
        object[] results = this.Invoke("BanUser", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lReasonCode,
                    bstrAccountInfoXML});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginBanUser(int lDelegateIdHigh, int lDelegateIdLow, int lReasonCode, string bstrAccountInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("BanUser", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lReasonCode,
                    bstrAccountInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndBanUser(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.UnbanUser", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void UnbanUser(int lDelegateIdHigh, int lDelegateIdLow, string bstrAccountInfoXML, out string pbstrErrorXML) {
        object[] results = this.Invoke("UnbanUser", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrAccountInfoXML});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUnbanUser(int lDelegateIdHigh, int lDelegateIdLow, string bstrAccountInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UnbanUser", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrAccountInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndUnbanUser(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.BanPaymentInstrument", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void BanPaymentInstrument(int lDelegateIdHigh, int lDelegateIdLow, int lReasonCode, string bstrPaymentInstrumentInfoXML, out string pbstrErrorXML) {
        object[] results = this.Invoke("BanPaymentInstrument", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lReasonCode,
                    bstrPaymentInstrumentInfoXML});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginBanPaymentInstrument(int lDelegateIdHigh, int lDelegateIdLow, int lReasonCode, string bstrPaymentInstrumentInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("BanPaymentInstrument", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lReasonCode,
                    bstrPaymentInstrumentInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndBanPaymentInstrument(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.UnbanPaymentInstrument", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void UnbanPaymentInstrument(int lDelegateIdHigh, int lDelegateIdLow, string bstrPaymentInstrumentInfoXML, out string pbstrErrorXML) {
        object[] results = this.Invoke("UnbanPaymentInstrument", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrPaymentInstrumentInfoXML});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUnbanPaymentInstrument(int lDelegateIdHigh, int lDelegateIdLow, string bstrPaymentInstrumentInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UnbanPaymentInstrument", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrPaymentInstrumentInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndUnbanPaymentInstrument(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.IsPaymentInstrumentBanned", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void IsPaymentInstrumentBanned(int lDelegateIdHigh, int lDelegateIdLow, string bstrPaymentInstrumentInfoXML, out string pbstrErrorXML, out int plIsBanned) {
        object[] results = this.Invoke("IsPaymentInstrumentBanned", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrPaymentInstrumentInfoXML});
        pbstrErrorXML = ((string)(results[0]));
        plIsBanned = ((int)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginIsPaymentInstrumentBanned(int lDelegateIdHigh, int lDelegateIdLow, string bstrPaymentInstrumentInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("IsPaymentInstrumentBanned", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrPaymentInstrumentInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndIsPaymentInstrumentBanned(System.IAsyncResult asyncResult, out string pbstrErrorXML, out int plIsBanned) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        plIsBanned = ((int)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.StopPayments", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void StopPayments(int lDelegateIdHigh, int lDelegateIdLow, string bstrPaymentInstrumentId, out string pbstrErrorXML) {
        object[] results = this.Invoke("StopPayments", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrPaymentInstrumentId});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginStopPayments(int lDelegateIdHigh, int lDelegateIdLow, string bstrPaymentInstrumentId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("StopPayments", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrPaymentInstrumentId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndStopPayments(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.ReschedulePayment", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void ReschedulePayment(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrPaymentInstrumentId, bool fApplyDeclineEffects, string bstrNewDueDate, bool fStickyDueDate, int lTransactionType, string bstrSettlementDetailsXML, out string pbstrErrorXML, out string pbstrAmountChargedSetXML) {
        object[] results = this.Invoke("ReschedulePayment", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrPaymentInstrumentId,
                    fApplyDeclineEffects,
                    bstrNewDueDate,
                    fStickyDueDate,
                    lTransactionType,
                    bstrSettlementDetailsXML});
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedSetXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginReschedulePayment(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrPaymentInstrumentId, bool fApplyDeclineEffects, string bstrNewDueDate, bool fStickyDueDate, int lTransactionType, string bstrSettlementDetailsXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ReschedulePayment", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrPaymentInstrumentId,
                    fApplyDeclineEffects,
                    bstrNewDueDate,
                    fStickyDueDate,
                    lTransactionType,
                    bstrSettlementDetailsXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndReschedulePayment(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrAmountChargedSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedSetXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetBillingPeriods", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetBillingPeriods(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, string bstrLocale, out string pbstrErrorXML, out int plBillingPeriodCount, out string pbstrBillingPeriodSetXML) {
        object[] results = this.Invoke("GetBillingPeriods", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrObjectId,
                    bstrLocale});
        pbstrErrorXML = ((string)(results[0]));
        plBillingPeriodCount = ((int)(results[1]));
        pbstrBillingPeriodSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetBillingPeriods(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, string bstrLocale, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetBillingPeriods", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrObjectId,
                    bstrLocale}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetBillingPeriods(System.IAsyncResult asyncResult, out string pbstrErrorXML, out int plBillingPeriodCount, out string pbstrBillingPeriodSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        plBillingPeriodCount = ((int)(results[1]));
        pbstrBillingPeriodSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetStatement", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetStatement(int delegateIdHigh, int delegateIdLow, int requesterIdHigh, int requesterIdLow, string objectId, System.UInt32 beginBillingPeriodId, System.UInt32 endBillingPeriodId, System.Byte returnStatementSet, bool returnNotificationSet, out string errorXml, out string accountStatementInfoSetXml, out string userNotificationSetXml) {
        object[] results = this.Invoke("GetStatement", new object[] {
                    delegateIdHigh,
                    delegateIdLow,
                    requesterIdHigh,
                    requesterIdLow,
                    objectId,
                    beginBillingPeriodId,
                    endBillingPeriodId,
                    returnStatementSet,
                    returnNotificationSet});
        errorXml = ((string)(results[0]));
        accountStatementInfoSetXml = ((string)(results[1]));
        userNotificationSetXml = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetStatement(int delegateIdHigh, int delegateIdLow, int requesterIdHigh, int requesterIdLow, string objectId, System.UInt32 beginBillingPeriodId, System.UInt32 endBillingPeriodId, System.Byte returnStatementSet, bool returnNotificationSet, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetStatement", new object[] {
                    delegateIdHigh,
                    delegateIdLow,
                    requesterIdHigh,
                    requesterIdLow,
                    objectId,
                    beginBillingPeriodId,
                    endBillingPeriodId,
                    returnStatementSet,
                    returnNotificationSet}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetStatement(System.IAsyncResult asyncResult, out string errorXml, out string accountStatementInfoSetXml, out string userNotificationSetXml) {
        object[] results = this.EndInvoke(asyncResult);
        errorXml = ((string)(results[0]));
        accountStatementInfoSetXml = ((string)(results[1]));
        userNotificationSetXml = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.SyncUPSCacheForPUID", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void SyncUPSCacheForPUID(int lCustomerPUIDHigh, int lCustomerPUIDLow, out string pbstrErrorXML) {
        object[] results = this.Invoke("SyncUPSCacheForPUID", new object[] {
                    lCustomerPUIDHigh,
                    lCustomerPUIDLow});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSyncUPSCacheForPUID(int lCustomerPUIDHigh, int lCustomerPUIDLow, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SyncUPSCacheForPUID", new object[] {
                    lCustomerPUIDHigh,
                    lCustomerPUIDLow}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSyncUPSCacheForPUID(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetKey", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetKey(int lRequesterIdHigh, int lRequesterIdLow, string bstrKeyGuid, out string pbstrErrorXML, out string pbstrKeyXml) {
        object[] results = this.Invoke("GetKey", new object[] {
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrKeyGuid});
        pbstrErrorXML = ((string)(results[0]));
        pbstrKeyXml = ((string)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetKey(int lRequesterIdHigh, int lRequesterIdLow, string bstrKeyGuid, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetKey", new object[] {
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrKeyGuid}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetKey(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrKeyXml) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrKeyXml = ((string)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetAdjustments", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetAdjustments(int lDelegateIdHigh, int lDelegateIdLow, string bstrSubscriptionId, int lBillingPeriodId, out string pbstrErrorXML, out int pcAppliedAdjustmentCount, out string pbstrAppliedAdjustmentSetXML, out int pcAvailableAdjustmentCount, out string pbstrAvailableAdjustmentSetXML) {
        object[] results = this.Invoke("GetAdjustments", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrSubscriptionId,
                    lBillingPeriodId});
        pbstrErrorXML = ((string)(results[0]));
        pcAppliedAdjustmentCount = ((int)(results[1]));
        pbstrAppliedAdjustmentSetXML = ((string)(results[2]));
        pcAvailableAdjustmentCount = ((int)(results[3]));
        pbstrAvailableAdjustmentSetXML = ((string)(results[4]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetAdjustments(int lDelegateIdHigh, int lDelegateIdLow, string bstrSubscriptionId, int lBillingPeriodId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetAdjustments", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrSubscriptionId,
                    lBillingPeriodId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetAdjustments(System.IAsyncResult asyncResult, out string pbstrErrorXML, out int pcAppliedAdjustmentCount, out string pbstrAppliedAdjustmentSetXML, out int pcAvailableAdjustmentCount, out string pbstrAvailableAdjustmentSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pcAppliedAdjustmentCount = ((int)(results[1]));
        pbstrAppliedAdjustmentSetXML = ((string)(results[2]));
        pcAvailableAdjustmentCount = ((int)(results[3]));
        pbstrAvailableAdjustmentSetXML = ((string)(results[4]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.AdjustSubscription", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void AdjustSubscription(int lDelegateIdHigh, int lDelegateIdLow, string bstrSubscriptionId, int lBillingPeriodId, string bstrAdjustmentGUID, string bstrAmount, string bstrCommentTextXML, out string pbstrErrorXML) {
        object[] results = this.Invoke("AdjustSubscription", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrSubscriptionId,
                    lBillingPeriodId,
                    bstrAdjustmentGUID,
                    bstrAmount,
                    bstrCommentTextXML});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginAdjustSubscription(int lDelegateIdHigh, int lDelegateIdLow, string bstrSubscriptionId, int lBillingPeriodId, string bstrAdjustmentGUID, string bstrAmount, string bstrCommentTextXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AdjustSubscription", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrSubscriptionId,
                    lBillingPeriodId,
                    bstrAdjustmentGUID,
                    bstrAmount,
                    bstrCommentTextXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndAdjustSubscription(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.CompleteConversion", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void CompleteConversion(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrSubscriptionId, out string pbstrErrorXML, out string pbstrAmountChargedXML, out int plAddedServiceInstanceSetCount, out string pbstrAddedServiceInstanceSet, out int plRemovedServiceInstanceSetCount, out string pbstrRemoveServiceInstanceSet) {
        object[] results = this.Invoke("CompleteConversion", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    bstrSubscriptionId});
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedXML = ((string)(results[1]));
        plAddedServiceInstanceSetCount = ((int)(results[2]));
        pbstrAddedServiceInstanceSet = ((string)(results[3]));
        plRemovedServiceInstanceSetCount = ((int)(results[4]));
        pbstrRemoveServiceInstanceSet = ((string)(results[5]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCompleteConversion(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrSubscriptionId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CompleteConversion", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    bstrSubscriptionId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndCompleteConversion(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrAmountChargedXML, out int plAddedServiceInstanceSetCount, out string pbstrAddedServiceInstanceSet, out int plRemovedServiceInstanceSetCount, out string pbstrRemoveServiceInstanceSet) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedXML = ((string)(results[1]));
        plAddedServiceInstanceSetCount = ((int)(results[2]));
        pbstrAddedServiceInstanceSet = ((string)(results[3]));
        plRemovedServiceInstanceSetCount = ((int)(results[4]));
        pbstrRemoveServiceInstanceSet = ((string)(results[5]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.CancelConversion", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void CancelConversion(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrSubscriptionId, out string pbstrErrorXML, out int plAddedServiceInstanceSetCount, out string pbstrAddedServiceInstanceSet, out int plRemovedServiceInstanceSetCount, out string pbstrRemoveServiceInstanceSet) {
        object[] results = this.Invoke("CancelConversion", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    bstrSubscriptionId});
        pbstrErrorXML = ((string)(results[0]));
        plAddedServiceInstanceSetCount = ((int)(results[1]));
        pbstrAddedServiceInstanceSet = ((string)(results[2]));
        plRemovedServiceInstanceSetCount = ((int)(results[3]));
        pbstrRemoveServiceInstanceSet = ((string)(results[4]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCancelConversion(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrSubscriptionId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CancelConversion", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    bstrSubscriptionId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndCancelConversion(System.IAsyncResult asyncResult, out string pbstrErrorXML, out int plAddedServiceInstanceSetCount, out string pbstrAddedServiceInstanceSet, out int plRemovedServiceInstanceSetCount, out string pbstrRemoveServiceInstanceSet) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        plAddedServiceInstanceSetCount = ((int)(results[1]));
        pbstrAddedServiceInstanceSet = ((string)(results[2]));
        plRemovedServiceInstanceSetCount = ((int)(results[3]));
        pbstrRemoveServiceInstanceSet = ((string)(results[4]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.ImportSettledBillingItem", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void ImportSettledBillingItem(int lDelegateIdHigh, int lDelegateIdLow, string bstrSubscriptionId, string bstrPaymentInstrumentId, string bstrTaxAddressId, string bstrTrackingGUID, string bstrSettledBillingItemXML, out string pbstrResultXML, out string pbstrNewLineItemsXML) {
        object[] results = this.Invoke("ImportSettledBillingItem", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrSubscriptionId,
                    bstrPaymentInstrumentId,
                    bstrTaxAddressId,
                    bstrTrackingGUID,
                    bstrSettledBillingItemXML});
        pbstrResultXML = ((string)(results[0]));
        pbstrNewLineItemsXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginImportSettledBillingItem(int lDelegateIdHigh, int lDelegateIdLow, string bstrSubscriptionId, string bstrPaymentInstrumentId, string bstrTaxAddressId, string bstrTrackingGUID, string bstrSettledBillingItemXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ImportSettledBillingItem", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrSubscriptionId,
                    bstrPaymentInstrumentId,
                    bstrTaxAddressId,
                    bstrTrackingGUID,
                    bstrSettledBillingItemXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndImportSettledBillingItem(System.IAsyncResult asyncResult, out string pbstrResultXML, out string pbstrNewLineItemsXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrResultXML = ((string)(results[0]));
        pbstrNewLineItemsXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.MatchPaymentInstrumentInfo", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void MatchPaymentInstrumentInfo(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTelenumericLastName, string bstrZipCode, string bstrPaymentInstrumentInfoXML, out string pbstrErrorXML, out int plAdminPUIDHigh, out int plAdminPUIDLow) {
        object[] results = this.Invoke("MatchPaymentInstrumentInfo", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTelenumericLastName,
                    bstrZipCode,
                    bstrPaymentInstrumentInfoXML});
        pbstrErrorXML = ((string)(results[0]));
        plAdminPUIDHigh = ((int)(results[1]));
        plAdminPUIDLow = ((int)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginMatchPaymentInstrumentInfo(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTelenumericLastName, string bstrZipCode, string bstrPaymentInstrumentInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("MatchPaymentInstrumentInfo", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTelenumericLastName,
                    bstrZipCode,
                    bstrPaymentInstrumentInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndMatchPaymentInstrumentInfo(System.IAsyncResult asyncResult, out string pbstrErrorXML, out int plAdminPUIDHigh, out int plAdminPUIDLow) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        plAdminPUIDHigh = ((int)(results[1]));
        plAdminPUIDLow = ((int)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.ReinstateSubscription", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void ReinstateSubscription(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrSubscriptionId, int lReserved, string bstrCommentInfoXML, out string pbstrErrorXML, out string pbstrAmountChargedXML, out string pbstrSubscriptionStatusInfoXML) {
        object[] results = this.Invoke("ReinstateSubscription", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrSubscriptionId,
                    lReserved,
                    bstrCommentInfoXML});
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedXML = ((string)(results[1]));
        pbstrSubscriptionStatusInfoXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginReinstateSubscription(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrSubscriptionId, int lReserved, string bstrCommentInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ReinstateSubscription", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrSubscriptionId,
                    lReserved,
                    bstrCommentInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndReinstateSubscription(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrAmountChargedXML, out string pbstrSubscriptionStatusInfoXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedXML = ((string)(results[1]));
        pbstrSubscriptionStatusInfoXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetEligibleSwitchPITypes", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetEligibleSwitchPITypes(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrPaymentInstrumentId, out string pbstrErrorXML, out int plPITypeCount, out string pbstrPITypeSetXML) {
        object[] results = this.Invoke("GetEligibleSwitchPITypes", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrPaymentInstrumentId});
        pbstrErrorXML = ((string)(results[0]));
        plPITypeCount = ((int)(results[1]));
        pbstrPITypeSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetEligibleSwitchPITypes(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrPaymentInstrumentId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetEligibleSwitchPITypes", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrPaymentInstrumentId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetEligibleSwitchPITypes(System.IAsyncResult asyncResult, out string pbstrErrorXML, out int plPITypeCount, out string pbstrPITypeSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        plPITypeCount = ((int)(results[1]));
        pbstrPITypeSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.SendHCI", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void SendHCI(int lDelegateIdHigh, int lDelegateIdLow, string bstrAccountId, int lBillingPeriodId, string bstrLocale) {
        this.Invoke("SendHCI", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrAccountId,
                    lBillingPeriodId,
                    bstrLocale});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSendHCI(int lDelegateIdHigh, int lDelegateIdLow, string bstrAccountId, int lBillingPeriodId, string bstrLocale, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SendHCI", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrAccountId,
                    lBillingPeriodId,
                    bstrLocale}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSendHCI(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.OffsetLineItem2", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void OffsetLineItem2(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrLineItemId, int lFinancialReportingCode, bool fImmediatelySettle, string bstrAmount, string bstrCommentInfoXML, string bstrReservedXML, out string pbstrError, out string pbstrNewLineItemXML) {
        object[] results = this.Invoke("OffsetLineItem2", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrLineItemId,
                    lFinancialReportingCode,
                    fImmediatelySettle,
                    bstrAmount,
                    bstrCommentInfoXML,
                    bstrReservedXML});
        pbstrError = ((string)(results[0]));
        pbstrNewLineItemXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginOffsetLineItem2(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrLineItemId, int lFinancialReportingCode, bool fImmediatelySettle, string bstrAmount, string bstrCommentInfoXML, string bstrReservedXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("OffsetLineItem2", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrLineItemId,
                    lFinancialReportingCode,
                    fImmediatelySettle,
                    bstrAmount,
                    bstrCommentInfoXML,
                    bstrReservedXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndOffsetLineItem2(System.IAsyncResult asyncResult, out string pbstrError, out string pbstrNewLineItemXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrError = ((string)(results[0]));
        pbstrNewLineItemXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetPolicy", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetPolicy(string bstrPolicyGUID, int lPolicyVersion, string bstrLocale, out string pbstrPolicyInfoXML, out string pbstrErrorXML) {
        object[] results = this.Invoke("GetPolicy", new object[] {
                    bstrPolicyGUID,
                    lPolicyVersion,
                    bstrLocale});
        pbstrPolicyInfoXML = ((string)(results[0]));
        pbstrErrorXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetPolicy(string bstrPolicyGUID, int lPolicyVersion, string bstrLocale, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetPolicy", new object[] {
                    bstrPolicyGUID,
                    lPolicyVersion,
                    bstrLocale}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetPolicy(System.IAsyncResult asyncResult, out string pbstrPolicyInfoXML, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrPolicyInfoXML = ((string)(results[0]));
        pbstrErrorXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.ExtendSubscription", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void ExtendSubscription(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrSubscriptionId, int lNumberOfDays, string bstrCommentInfoXML, out string pbstrErrorXML, out string pbstrNewExpirationDate) {
        object[] results = this.Invoke("ExtendSubscription", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrSubscriptionId,
                    lNumberOfDays,
                    bstrCommentInfoXML});
        pbstrErrorXML = ((string)(results[0]));
        pbstrNewExpirationDate = ((string)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginExtendSubscription(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrSubscriptionId, int lNumberOfDays, string bstrCommentInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ExtendSubscription", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrSubscriptionId,
                    lNumberOfDays,
                    bstrCommentInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndExtendSubscription(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrNewExpirationDate) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrNewExpirationDate = ((string)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetAccountIdFromTokenId", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetAccountIdFromTokenId(int lDelegateIdHigh, int lDelegateIdLow, bool fFullData, string bstrTokenId, out string pbstrErrorXML, out int plAccountInfoCount, out string pbstrAccountInfoSetXML) {
        object[] results = this.Invoke("GetAccountIdFromTokenId", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    fFullData,
                    bstrTokenId});
        pbstrErrorXML = ((string)(results[0]));
        plAccountInfoCount = ((int)(results[1]));
        pbstrAccountInfoSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetAccountIdFromTokenId(int lDelegateIdHigh, int lDelegateIdLow, bool fFullData, string bstrTokenId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetAccountIdFromTokenId", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    fFullData,
                    bstrTokenId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetAccountIdFromTokenId(System.IAsyncResult asyncResult, out string pbstrErrorXML, out int plAccountInfoCount, out string pbstrAccountInfoSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        plAccountInfoCount = ((int)(results[1]));
        pbstrAccountInfoSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetTokenInfo", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetTokenInfo(int lDelegateIdHigh, int lDelegateIdLow, string bstrTokenId, out string pbstrErrorXML, out string pbstrTokenOrderXML) {
        object[] results = this.Invoke("GetTokenInfo", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTokenId});
        pbstrErrorXML = ((string)(results[0]));
        pbstrTokenOrderXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetTokenInfo(int lDelegateIdHigh, int lDelegateIdLow, string bstrTokenId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetTokenInfo", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTokenId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetTokenInfo(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrTokenOrderXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrTokenOrderXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetLineItemHistory", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetLineItemHistory(int delegateIdHigh, int delegateIdLow, string lineItemId, bool returnHistory, out string errorXml, out string lineItemHistorySetXml, out string mcv) {
        object[] results = this.Invoke("GetLineItemHistory", new object[] {
                    delegateIdHigh,
                    delegateIdLow,
                    lineItemId,
                    returnHistory});
        errorXml = ((string)(results[0]));
        lineItemHistorySetXml = ((string)(results[1]));
        mcv = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetLineItemHistory(int delegateIdHigh, int delegateIdLow, string lineItemId, bool returnHistory, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetLineItemHistory", new object[] {
                    delegateIdHigh,
                    delegateIdLow,
                    lineItemId,
                    returnHistory}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetLineItemHistory(System.IAsyncResult asyncResult, out string errorXml, out string lineItemHistorySetXml, out string mcv) {
        object[] results = this.EndInvoke(asyncResult);
        errorXml = ((string)(results[0]));
        lineItemHistorySetXml = ((string)(results[1]));
        mcv = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetExistingAccountsByCriteria", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetExistingAccountsByCriteria(int lDelegateIdHigh, int lDelegateIdLow, string bstrCriteriaXML, out string pbstrErrorXML, out int plAccountDetailCount, out string pbstrAccountDetailSetXML) {
        object[] results = this.Invoke("GetExistingAccountsByCriteria", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrCriteriaXML});
        pbstrErrorXML = ((string)(results[0]));
        plAccountDetailCount = ((int)(results[1]));
        pbstrAccountDetailSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetExistingAccountsByCriteria(int lDelegateIdHigh, int lDelegateIdLow, string bstrCriteriaXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetExistingAccountsByCriteria", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrCriteriaXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetExistingAccountsByCriteria(System.IAsyncResult asyncResult, out string pbstrErrorXML, out int plAccountDetailCount, out string pbstrAccountDetailSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        plAccountDetailCount = ((int)(results[1]));
        pbstrAccountDetailSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.AdjustGotoBAMDate", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void AdjustGotoBAMDate(int lRequesterIdHigh, int lRequesterIdLow, int lOffset, string bstrObjectId, out string pbstrErrorXML) {
        object[] results = this.Invoke("AdjustGotoBAMDate", new object[] {
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    lOffset,
                    bstrObjectId});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginAdjustGotoBAMDate(int lRequesterIdHigh, int lRequesterIdLow, int lOffset, string bstrObjectId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AdjustGotoBAMDate", new object[] {
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    lOffset,
                    bstrObjectId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndAdjustGotoBAMDate(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.BlacklistToken", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void BlacklistToken(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrToken, int lTokenType, string bstrEffectiveTime, string bstrSubscriptionAction, string bstrReason, string bstrDescription, out string pbstrErrorXML, out string pbstrBlacklistActionSetXML, out int plBlacklistActionSetCount) {
        object[] results = this.Invoke("BlacklistToken", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrToken,
                    lTokenType,
                    bstrEffectiveTime,
                    bstrSubscriptionAction,
                    bstrReason,
                    bstrDescription});
        pbstrErrorXML = ((string)(results[0]));
        pbstrBlacklistActionSetXML = ((string)(results[1]));
        plBlacklistActionSetCount = ((int)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginBlacklistToken(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrToken, int lTokenType, string bstrEffectiveTime, string bstrSubscriptionAction, string bstrReason, string bstrDescription, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("BlacklistToken", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrToken,
                    lTokenType,
                    bstrEffectiveTime,
                    bstrSubscriptionAction,
                    bstrReason,
                    bstrDescription}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndBlacklistToken(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrBlacklistActionSetXML, out int plBlacklistActionSetCount) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrBlacklistActionSetXML = ((string)(results[1]));
        plBlacklistActionSetCount = ((int)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.ActivateToken", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void ActivateToken(int delegateIdHigh, int delegateIdLow, string trackingGuid, string token, int tokenType, string externalReferenceId, string timeStamp, int committedStatus) {
        this.Invoke("ActivateToken", new object[] {
                    delegateIdHigh,
                    delegateIdLow,
                    trackingGuid,
                    token,
                    tokenType,
                    externalReferenceId,
                    timeStamp,
                    committedStatus});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginActivateToken(int delegateIdHigh, int delegateIdLow, string trackingGuid, string token, int tokenType, string externalReferenceId, string timeStamp, int committedStatus, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ActivateToken", new object[] {
                    delegateIdHigh,
                    delegateIdLow,
                    trackingGuid,
                    token,
                    tokenType,
                    externalReferenceId,
                    timeStamp,
                    committedStatus}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndActivateToken(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.DeactivateToken", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void DeactivateToken(int delegateIdHigh, int delegateIdLow, string trackingGuid, string token, int tokenType, string externalReferenceId, string timeStamp, int committedStatus) {
        this.Invoke("DeactivateToken", new object[] {
                    delegateIdHigh,
                    delegateIdLow,
                    trackingGuid,
                    token,
                    tokenType,
                    externalReferenceId,
                    timeStamp,
                    committedStatus});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginDeactivateToken(int delegateIdHigh, int delegateIdLow, string trackingGuid, string token, int tokenType, string externalReferenceId, string timeStamp, int committedStatus, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DeactivateToken", new object[] {
                    delegateIdHigh,
                    delegateIdLow,
                    trackingGuid,
                    token,
                    tokenType,
                    externalReferenceId,
                    timeStamp,
                    committedStatus}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndDeactivateToken(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetTokenInfoEx", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetTokenInfoEx(int lDelegateIdHigh, int lDelegateIdLow, string bstrToken, int lTokenType, out string pbstrErrorXML, out string pbstrTokenOrderXML) {
        object[] results = this.Invoke("GetTokenInfoEx", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrToken,
                    lTokenType});
        pbstrErrorXML = ((string)(results[0]));
        pbstrTokenOrderXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetTokenInfoEx(int lDelegateIdHigh, int lDelegateIdLow, string bstrToken, int lTokenType, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetTokenInfoEx", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrToken,
                    lTokenType}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetTokenInfoEx(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrTokenOrderXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrTokenOrderXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.DeliverToken", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void DeliverToken(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrFilterInfoXML, string bstrSessionKey, out string pbstrErrorXML, out string pbstrEncryptedTokenSetXML) {
        object[] results = this.Invoke("DeliverToken", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrFilterInfoXML,
                    bstrSessionKey});
        pbstrErrorXML = ((string)(results[0]));
        pbstrEncryptedTokenSetXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginDeliverToken(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrFilterInfoXML, string bstrSessionKey, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DeliverToken", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrFilterInfoXML,
                    bstrSessionKey}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndDeliverToken(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrEncryptedTokenSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrEncryptedTokenSetXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetProductClasses", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetProductClasses(out string productClassSetXml) {
        object[] results = this.Invoke("GetProductClasses", new object[0]);
        productClassSetXml = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetProductClasses(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetProductClasses", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetProductClasses(System.IAsyncResult asyncResult, out string productClassSetXml) {
        object[] results = this.EndInvoke(asyncResult);
        productClassSetXml = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.IssueTokenTrusted", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void IssueTokenTrusted(string partnerName, int delegateIdHigh, int delegateIdLow, string trackingGuid, string token, int tokenType, string externalReferenceId) {
        this.Invoke("IssueTokenTrusted", new object[] {
                    partnerName,
                    delegateIdHigh,
                    delegateIdLow,
                    trackingGuid,
                    token,
                    tokenType,
                    externalReferenceId});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginIssueTokenTrusted(string partnerName, int delegateIdHigh, int delegateIdLow, string trackingGuid, string token, int tokenType, string externalReferenceId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("IssueTokenTrusted", new object[] {
                    partnerName,
                    delegateIdHigh,
                    delegateIdLow,
                    trackingGuid,
                    token,
                    tokenType,
                    externalReferenceId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndIssueTokenTrusted(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.UnIssueTokenTrusted", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void UnIssueTokenTrusted(string partnerName, int delegateIdHigh, int delegateIdLow, string trackingGuid, string token, int tokenType, string externalReferenceId) {
        this.Invoke("UnIssueTokenTrusted", new object[] {
                    partnerName,
                    delegateIdHigh,
                    delegateIdLow,
                    trackingGuid,
                    token,
                    tokenType,
                    externalReferenceId});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUnIssueTokenTrusted(string partnerName, int delegateIdHigh, int delegateIdLow, string trackingGuid, string token, int tokenType, string externalReferenceId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UnIssueTokenTrusted", new object[] {
                    partnerName,
                    delegateIdHigh,
                    delegateIdLow,
                    trackingGuid,
                    token,
                    tokenType,
                    externalReferenceId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndUnIssueTokenTrusted(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.ReconcileTokenTrusted", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void ReconcileTokenTrusted(string partnerName, int delegateIdHigh, int delegateIdLow, string token, int tokenType, string externalReferenceId, string timeStamp, int action, out int reconStatus) {
        object[] results = this.Invoke("ReconcileTokenTrusted", new object[] {
                    partnerName,
                    delegateIdHigh,
                    delegateIdLow,
                    token,
                    tokenType,
                    externalReferenceId,
                    timeStamp,
                    action});
        reconStatus = ((int)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginReconcileTokenTrusted(string partnerName, int delegateIdHigh, int delegateIdLow, string token, int tokenType, string externalReferenceId, string timeStamp, int action, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ReconcileTokenTrusted", new object[] {
                    partnerName,
                    delegateIdHigh,
                    delegateIdLow,
                    token,
                    tokenType,
                    externalReferenceId,
                    timeStamp,
                    action}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndReconcileTokenTrusted(System.IAsyncResult asyncResult, out int reconStatus) {
        object[] results = this.EndInvoke(asyncResult);
        reconStatus = ((int)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetReplacementToken", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetReplacementToken(int delegateIdHigh, int delegateIdLow, int replacementPuidHigh, int replacementPuidLow, int replacementReasonCode, string token, int tokenType, int tokenSignature, string emailAddress, string sessionKey, string trackingGuid, out string replacementPin, out int signature, out string sequenceNumber) {
        object[] results = this.Invoke("GetReplacementToken", new object[] {
                    delegateIdHigh,
                    delegateIdLow,
                    replacementPuidHigh,
                    replacementPuidLow,
                    replacementReasonCode,
                    token,
                    tokenType,
                    tokenSignature,
                    emailAddress,
                    sessionKey,
                    trackingGuid});
        replacementPin = ((string)(results[0]));
        signature = ((int)(results[1]));
        sequenceNumber = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetReplacementToken(int delegateIdHigh, int delegateIdLow, int replacementPuidHigh, int replacementPuidLow, int replacementReasonCode, string token, int tokenType, int tokenSignature, string emailAddress, string sessionKey, string trackingGuid, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetReplacementToken", new object[] {
                    delegateIdHigh,
                    delegateIdLow,
                    replacementPuidHigh,
                    replacementPuidLow,
                    replacementReasonCode,
                    token,
                    tokenType,
                    tokenSignature,
                    emailAddress,
                    sessionKey,
                    trackingGuid}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetReplacementToken(System.IAsyncResult asyncResult, out string replacementPin, out int signature, out string sequenceNumber) {
        object[] results = this.EndInvoke(asyncResult);
        replacementPin = ((string)(results[0]));
        signature = ((int)(results[1]));
        sequenceNumber = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetUnconditionalReplacementToken", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetUnconditionalReplacementToken(int delegateIdHigh, int delegateIdLow, int replacementPuidHigh, int replacementPuidLow, bool tiePinRedemptionToPuid, int replacementReasonCode, string tokenClassGuid, string emailAddress, string sessionKey, string trackingGuid, out string replacementPin, out int signature, out string sequenceNumber) {
        object[] results = this.Invoke("GetUnconditionalReplacementToken", new object[] {
                    delegateIdHigh,
                    delegateIdLow,
                    replacementPuidHigh,
                    replacementPuidLow,
                    tiePinRedemptionToPuid,
                    replacementReasonCode,
                    tokenClassGuid,
                    emailAddress,
                    sessionKey,
                    trackingGuid});
        replacementPin = ((string)(results[0]));
        signature = ((int)(results[1]));
        sequenceNumber = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetUnconditionalReplacementToken(int delegateIdHigh, int delegateIdLow, int replacementPuidHigh, int replacementPuidLow, bool tiePinRedemptionToPuid, int replacementReasonCode, string tokenClassGuid, string emailAddress, string sessionKey, string trackingGuid, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUnconditionalReplacementToken", new object[] {
                    delegateIdHigh,
                    delegateIdLow,
                    replacementPuidHigh,
                    replacementPuidLow,
                    tiePinRedemptionToPuid,
                    replacementReasonCode,
                    tokenClassGuid,
                    emailAddress,
                    sessionKey,
                    trackingGuid}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetUnconditionalReplacementToken(System.IAsyncResult asyncResult, out string replacementPin, out int signature, out string sequenceNumber) {
        object[] results = this.EndInvoke(asyncResult);
        replacementPin = ((string)(results[0]));
        signature = ((int)(results[1]));
        sequenceNumber = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.ValidateToken", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void ValidateToken(int delegateIdHigh, int delegateIdLow, string tokenClassGuid, string pin, string sequenceNumber, int signature, string partNumber) {
        this.Invoke("ValidateToken", new object[] {
                    delegateIdHigh,
                    delegateIdLow,
                    tokenClassGuid,
                    pin,
                    sequenceNumber,
                    signature,
                    partNumber});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginValidateToken(int delegateIdHigh, int delegateIdLow, string tokenClassGuid, string pin, string sequenceNumber, int signature, string partNumber, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ValidateToken", new object[] {
                    delegateIdHigh,
                    delegateIdLow,
                    tokenClassGuid,
                    pin,
                    sequenceNumber,
                    signature,
                    partNumber}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndValidateToken(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetReplacementTokenFromPuid", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetReplacementTokenFromPuid(int delegateIdHigh, int delegateIdLow, int searchPuidHigh, int searchPuidLow, out int tokenInfoReturnedCount, out string replacementTokenSetXml) {
        object[] results = this.Invoke("GetReplacementTokenFromPuid", new object[] {
                    delegateIdHigh,
                    delegateIdLow,
                    searchPuidHigh,
                    searchPuidLow});
        tokenInfoReturnedCount = ((int)(results[0]));
        replacementTokenSetXml = ((string)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetReplacementTokenFromPuid(int delegateIdHigh, int delegateIdLow, int searchPuidHigh, int searchPuidLow, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetReplacementTokenFromPuid", new object[] {
                    delegateIdHigh,
                    delegateIdLow,
                    searchPuidHigh,
                    searchPuidLow}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetReplacementTokenFromPuid(System.IAsyncResult asyncResult, out int tokenInfoReturnedCount, out string replacementTokenSetXml) {
        object[] results = this.EndInvoke(asyncResult);
        tokenInfoReturnedCount = ((int)(results[0]));
        replacementTokenSetXml = ((string)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetTokenClasses", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetTokenClasses(string bstrProductClassGuidFilter, int lReturnCountMax, out int plAdditionalTokenClassCount, out int plTokenClassReturnedCount, out string pbstrTokenClassSetXML) {
        object[] results = this.Invoke("GetTokenClasses", new object[] {
                    bstrProductClassGuidFilter,
                    lReturnCountMax});
        plAdditionalTokenClassCount = ((int)(results[0]));
        plTokenClassReturnedCount = ((int)(results[1]));
        pbstrTokenClassSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetTokenClasses(string bstrProductClassGuidFilter, int lReturnCountMax, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetTokenClasses", new object[] {
                    bstrProductClassGuidFilter,
                    lReturnCountMax}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetTokenClasses(System.IAsyncResult asyncResult, out int plAdditionalTokenClassCount, out int plTokenClassReturnedCount, out string pbstrTokenClassSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        plAdditionalTokenClassCount = ((int)(results[0]));
        plTokenClassReturnedCount = ((int)(results[1]));
        pbstrTokenClassSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.MarkTokenDistributionStatus", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void MarkTokenDistributionStatus(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrTokenId, int lTokenType, string bstrStatusName, string bstrStatusValue, string bstrPartNumber) {
        this.Invoke("MarkTokenDistributionStatus", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrTokenId,
                    lTokenType,
                    bstrStatusName,
                    bstrStatusValue,
                    bstrPartNumber});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginMarkTokenDistributionStatus(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrTokenId, int lTokenType, string bstrStatusName, string bstrStatusValue, string bstrPartNumber, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("MarkTokenDistributionStatus", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrTokenId,
                    lTokenType,
                    bstrStatusName,
                    bstrStatusValue,
                    bstrPartNumber}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndMarkTokenDistributionStatus(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.RemovePMNBasedServices", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void RemovePMNBasedServices(int lRequesterIdHigh, int lRequesterIdLow) {
        this.Invoke("RemovePMNBasedServices", new object[] {
                    lRequesterIdHigh,
                    lRequesterIdLow});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRemovePMNBasedServices(int lRequesterIdHigh, int lRequesterIdLow, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RemovePMNBasedServices", new object[] {
                    lRequesterIdHigh,
                    lRequesterIdLow}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndRemovePMNBasedServices(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetAccountIdFromToken", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetAccountIdFromToken(int lDelegateIdHigh, int lDelegateIdLow, bool fFullData, string bstrTokenId, int lTokenType, out string pbstrErrorXML, out int plAccountInfoCount, out string pbstrAccountInfoSetXML) {
        object[] results = this.Invoke("GetAccountIdFromToken", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    fFullData,
                    bstrTokenId,
                    lTokenType});
        pbstrErrorXML = ((string)(results[0]));
        plAccountInfoCount = ((int)(results[1]));
        pbstrAccountInfoSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetAccountIdFromToken(int lDelegateIdHigh, int lDelegateIdLow, bool fFullData, string bstrTokenId, int lTokenType, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetAccountIdFromToken", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    fFullData,
                    bstrTokenId,
                    lTokenType}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetAccountIdFromToken(System.IAsyncResult asyncResult, out string pbstrErrorXML, out int plAccountInfoCount, out string pbstrAccountInfoSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        plAccountInfoCount = ((int)(results[1]));
        pbstrAccountInfoSetXML = ((string)(results[2]));
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\SCS\4.0\samples\SCS API\CSharp\TestConnectionClientCert\Bdk.cs ===
﻿//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.12
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=1.1.4322.12.
// 
using System.Diagnostics;
using System.Xml.Serialization;
using System;
using System.Web.Services.Protocols;
using System.ComponentModel;
using System.Web.Services;


/// <remarks/>
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="bdkSoap", Namespace="http://tempuri.org/")]
public class bdk : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    /// <remarks/>
    public bdk() {
        this.Url = "https://hostname/scsnocc/scsapiwebservice.asmx";
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.AddRoleAssignment", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void AddRoleAssignment(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, string bstrRoleAssignmentXML, out string pbstrErrorXML) {
        object[] results = this.Invoke("AddRoleAssignment", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrObjectId,
                    bstrRoleAssignmentXML});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginAddRoleAssignment(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, string bstrRoleAssignmentXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AddRoleAssignment", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrObjectId,
                    bstrRoleAssignmentXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndAddRoleAssignment(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.RemoveRoleAssignment", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void RemoveRoleAssignment(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, string bstrRoleAssignmentXML, out string pbstrErrorXML) {
        object[] results = this.Invoke("RemoveRoleAssignment", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrObjectId,
                    bstrRoleAssignmentXML});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRemoveRoleAssignment(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, string bstrRoleAssignmentXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RemoveRoleAssignment", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrObjectId,
                    bstrRoleAssignmentXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndRemoveRoleAssignment(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetPermitsForPUID", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetPermitsForPUID(int lCustomerPUIDHigh, int lCustomerPUIDLow, string bstrServiceComponentGUID, out string pbstrErrorXML, out int plPermitCount, out string pbstrPermitSetXML) {
        object[] results = this.Invoke("GetPermitsForPUID", new object[] {
                    lCustomerPUIDHigh,
                    lCustomerPUIDLow,
                    bstrServiceComponentGUID});
        pbstrErrorXML = ((string)(results[0]));
        plPermitCount = ((int)(results[1]));
        pbstrPermitSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetPermitsForPUID(int lCustomerPUIDHigh, int lCustomerPUIDLow, string bstrServiceComponentGUID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetPermitsForPUID", new object[] {
                    lCustomerPUIDHigh,
                    lCustomerPUIDLow,
                    bstrServiceComponentGUID}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetPermitsForPUID(System.IAsyncResult asyncResult, out string pbstrErrorXML, out int plPermitCount, out string pbstrPermitSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        plPermitCount = ((int)(results[1]));
        pbstrPermitSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetPermitsForObjectId", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetPermitsForObjectId(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, bool fDeep, out string pbstrErrorXML, out int plPermitCount, out string pbstrPermitSetXML) {
        object[] results = this.Invoke("GetPermitsForObjectId", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrObjectId,
                    fDeep});
        pbstrErrorXML = ((string)(results[0]));
        plPermitCount = ((int)(results[1]));
        pbstrPermitSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetPermitsForObjectId(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, bool fDeep, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetPermitsForObjectId", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrObjectId,
                    fDeep}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetPermitsForObjectId(System.IAsyncResult asyncResult, out string pbstrErrorXML, out int plPermitCount, out string pbstrPermitSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        plPermitCount = ((int)(results[1]));
        pbstrPermitSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.CreateAccount", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void CreateAccount(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrPPMemberName, string bstrTrackingGUID, string bstrAccountInfoXML, string bstrPaymentInstrumentXML, out string pbstrErrorXML, out string pbstrAccountId, out string pbstrPaymentInstrumentId, out string pbstrDate, out string bstrRequiredPaperWorkURL) {
        object[] results = this.Invoke("CreateAccount", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrPPMemberName,
                    bstrTrackingGUID,
                    bstrAccountInfoXML,
                    bstrPaymentInstrumentXML});
        pbstrErrorXML = ((string)(results[0]));
        pbstrAccountId = ((string)(results[1]));
        pbstrPaymentInstrumentId = ((string)(results[2]));
        pbstrDate = ((string)(results[3]));
        bstrRequiredPaperWorkURL = ((string)(results[4]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCreateAccount(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrPPMemberName, string bstrTrackingGUID, string bstrAccountInfoXML, string bstrPaymentInstrumentXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CreateAccount", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrPPMemberName,
                    bstrTrackingGUID,
                    bstrAccountInfoXML,
                    bstrPaymentInstrumentXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndCreateAccount(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrAccountId, out string pbstrPaymentInstrumentId, out string pbstrDate, out string bstrRequiredPaperWorkURL) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrAccountId = ((string)(results[1]));
        pbstrPaymentInstrumentId = ((string)(results[2]));
        pbstrDate = ((string)(results[3]));
        bstrRequiredPaperWorkURL = ((string)(results[4]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetReferralEvents", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetReferralEvents(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string AccountId, string SessionKey, out string ReferralEventsInfoXML) {
        object[] results = this.Invoke("GetReferralEvents", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    AccountId,
                    SessionKey});
        ReferralEventsInfoXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetReferralEvents(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string AccountId, string SessionKey, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetReferralEvents", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    AccountId,
                    SessionKey}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetReferralEvents(System.IAsyncResult asyncResult, out string ReferralEventsInfoXML) {
        object[] results = this.EndInvoke(asyncResult);
        ReferralEventsInfoXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetAccountInfo", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetAccountInfo(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrAccountId, out string pbstrErrorXML, out string pbstrAccountInfoXML) {
        object[] results = this.Invoke("GetAccountInfo", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrAccountId});
        pbstrErrorXML = ((string)(results[0]));
        pbstrAccountInfoXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetAccountInfo(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrAccountId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetAccountInfo", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrAccountId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetAccountInfo(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrAccountInfoXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrAccountInfoXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.UpdateAccountInfo", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void UpdateAccountInfo(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrAccountId, string bstrAccountInfoXML, out string pbstrErrorXML, out string pbstrRequiredPaperWorkURL) {
        object[] results = this.Invoke("UpdateAccountInfo", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrAccountId,
                    bstrAccountInfoXML});
        pbstrErrorXML = ((string)(results[0]));
        pbstrRequiredPaperWorkURL = ((string)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUpdateAccountInfo(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrAccountId, string bstrAccountInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdateAccountInfo", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrAccountId,
                    bstrAccountInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndUpdateAccountInfo(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrRequiredPaperWorkURL) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrRequiredPaperWorkURL = ((string)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.CloseAccount", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void CloseAccount(int lDelegateIdHigh, int lDelegateIdLow, string bstrAccountId, string bstrCommentInfoXML, out string pbstrErrorXML) {
        object[] results = this.Invoke("CloseAccount", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrAccountId,
                    bstrCommentInfoXML});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCloseAccount(int lDelegateIdHigh, int lDelegateIdLow, string bstrAccountId, string bstrCommentInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CloseAccount", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrAccountId,
                    bstrCommentInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndCloseAccount(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.SignAgreement", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void SignAgreement(int lRequesterIdHigh, int lRequesterIdLow, string bstrSubscriptionId, string bstrPolicyGUID, int lPolicyVersion, string bstrSignatureDateTime, out string pbstrErrorXML) {
        object[] results = this.Invoke("SignAgreement", new object[] {
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrSubscriptionId,
                    bstrPolicyGUID,
                    lPolicyVersion,
                    bstrSignatureDateTime});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSignAgreement(int lRequesterIdHigh, int lRequesterIdLow, string bstrSubscriptionId, string bstrPolicyGUID, int lPolicyVersion, string bstrSignatureDateTime, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SignAgreement", new object[] {
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrSubscriptionId,
                    bstrPolicyGUID,
                    lPolicyVersion,
                    bstrSignatureDateTime}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSignAgreement(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.AddViolation", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void AddViolation(int lDelegateIdHigh, int lDelegateIdLow, string bstrObjectId, int lViolationId, string bstrCommentInfoXML, out string pbstrErrorXML, out string pbstrStatusInfoXML, out string pbstrAmountChargedXML) {
        object[] results = this.Invoke("AddViolation", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrObjectId,
                    lViolationId,
                    bstrCommentInfoXML});
        pbstrErrorXML = ((string)(results[0]));
        pbstrStatusInfoXML = ((string)(results[1]));
        pbstrAmountChargedXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginAddViolation(int lDelegateIdHigh, int lDelegateIdLow, string bstrObjectId, int lViolationId, string bstrCommentInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AddViolation", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrObjectId,
                    lViolationId,
                    bstrCommentInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndAddViolation(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrStatusInfoXML, out string pbstrAmountChargedXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrStatusInfoXML = ((string)(results[1]));
        pbstrAmountChargedXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.RemoveViolation", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void RemoveViolation(int lDelegateIdHigh, int lDelegateIdLow, string bstrObjectId, int lViolationId, string bstrCommentInfoXML, out string pbstrErrorXML, out string pbstrStatusInfoXML, out string pbstrAmountChargedXML) {
        object[] results = this.Invoke("RemoveViolation", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrObjectId,
                    lViolationId,
                    bstrCommentInfoXML});
        pbstrErrorXML = ((string)(results[0]));
        pbstrStatusInfoXML = ((string)(results[1]));
        pbstrAmountChargedXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRemoveViolation(int lDelegateIdHigh, int lDelegateIdLow, string bstrObjectId, int lViolationId, string bstrCommentInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RemoveViolation", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrObjectId,
                    lViolationId,
                    bstrCommentInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndRemoveViolation(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrStatusInfoXML, out string pbstrAmountChargedXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrStatusInfoXML = ((string)(results[1]));
        pbstrAmountChargedXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetAccountIdFromAdminPUID", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetAccountIdFromAdminPUID(int lDelegateIdHigh, int lDelegateIdLow, int lSearchPUIDHigh, int lSearchPUIDLow, bool fFullData, int lMax, out string pbstrErrorXML, out int pfMoreRows, out int plAccountInfoCount, out string pbstrAccountInfoSetXML) {
        object[] results = this.Invoke("GetAccountIdFromAdminPUID", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lSearchPUIDHigh,
                    lSearchPUIDLow,
                    fFullData,
                    lMax});
        pbstrErrorXML = ((string)(results[0]));
        pfMoreRows = ((int)(results[1]));
        plAccountInfoCount = ((int)(results[2]));
        pbstrAccountInfoSetXML = ((string)(results[3]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetAccountIdFromAdminPUID(int lDelegateIdHigh, int lDelegateIdLow, int lSearchPUIDHigh, int lSearchPUIDLow, bool fFullData, int lMax, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetAccountIdFromAdminPUID", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lSearchPUIDHigh,
                    lSearchPUIDLow,
                    fFullData,
                    lMax}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetAccountIdFromAdminPUID(System.IAsyncResult asyncResult, out string pbstrErrorXML, out int pfMoreRows, out int plAccountInfoCount, out string pbstrAccountInfoSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pfMoreRows = ((int)(results[1]));
        plAccountInfoCount = ((int)(results[2]));
        pbstrAccountInfoSetXML = ((string)(results[3]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetAccountIdFromPaymentInstrumentInfo", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetAccountIdFromPaymentInstrumentInfo(int lDelegateIdHigh, int lDelegateIdLow, bool fFullData, int lMax, string bstrPaymentInstrumentInfoXML, out string pbstrErrorXML, out int pfMoreRows, out int plAccountInfoCount, out string pbstrAccountInfoSetXML) {
        object[] results = this.Invoke("GetAccountIdFromPaymentInstrumentInfo", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    fFullData,
                    lMax,
                    bstrPaymentInstrumentInfoXML});
        pbstrErrorXML = ((string)(results[0]));
        pfMoreRows = ((int)(results[1]));
        plAccountInfoCount = ((int)(results[2]));
        pbstrAccountInfoSetXML = ((string)(results[3]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetAccountIdFromPaymentInstrumentInfo(int lDelegateIdHigh, int lDelegateIdLow, bool fFullData, int lMax, string bstrPaymentInstrumentInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetAccountIdFromPaymentInstrumentInfo", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    fFullData,
                    lMax,
                    bstrPaymentInstrumentInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetAccountIdFromPaymentInstrumentInfo(System.IAsyncResult asyncResult, out string pbstrErrorXML, out int pfMoreRows, out int plAccountInfoCount, out string pbstrAccountInfoSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pfMoreRows = ((int)(results[1]));
        plAccountInfoCount = ((int)(results[2]));
        pbstrAccountInfoSetXML = ((string)(results[3]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.AddPaymentInstrument", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void AddPaymentInstrument(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrAccountId, string bstrPaymentInstrumentInfoXML, out string pbstrErrorXML, out string pbstrPaymentInstrumentId, out string pbstrRequiredPaperWorkURL) {
        object[] results = this.Invoke("AddPaymentInstrument", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    bstrAccountId,
                    bstrPaymentInstrumentInfoXML});
        pbstrErrorXML = ((string)(results[0]));
        pbstrPaymentInstrumentId = ((string)(results[1]));
        pbstrRequiredPaperWorkURL = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginAddPaymentInstrument(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrAccountId, string bstrPaymentInstrumentInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AddPaymentInstrument", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    bstrAccountId,
                    bstrPaymentInstrumentInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndAddPaymentInstrument(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrPaymentInstrumentId, out string pbstrRequiredPaperWorkURL) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrPaymentInstrumentId = ((string)(results[1]));
        pbstrRequiredPaperWorkURL = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetPaymentInstruments", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetPaymentInstruments(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, out string pbstrErrorXML, out int plPaymentInstrumentInfoCount, out string pbstrPaymentInstrumentInfoSetXML) {
        object[] results = this.Invoke("GetPaymentInstruments", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrObjectId});
        pbstrErrorXML = ((string)(results[0]));
        plPaymentInstrumentInfoCount = ((int)(results[1]));
        pbstrPaymentInstrumentInfoSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetPaymentInstruments(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetPaymentInstruments", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrObjectId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetPaymentInstruments(System.IAsyncResult asyncResult, out string pbstrErrorXML, out int plPaymentInstrumentInfoCount, out string pbstrPaymentInstrumentInfoSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        plPaymentInstrumentInfoCount = ((int)(results[1]));
        pbstrPaymentInstrumentInfoSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetPaymentInstrumentsEx", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetPaymentInstrumentsEx(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, bool fReturnRemoved, out string pbstrErrorXML, out int plPaymentInstrumentInfoCount, out string pbstrPaymentInstrumentInfoSetXML) {
        object[] results = this.Invoke("GetPaymentInstrumentsEx", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrObjectId,
                    fReturnRemoved});
        pbstrErrorXML = ((string)(results[0]));
        plPaymentInstrumentInfoCount = ((int)(results[1]));
        pbstrPaymentInstrumentInfoSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetPaymentInstrumentsEx(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, bool fReturnRemoved, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetPaymentInstrumentsEx", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrObjectId,
                    fReturnRemoved}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetPaymentInstrumentsEx(System.IAsyncResult asyncResult, out string pbstrErrorXML, out int plPaymentInstrumentInfoCount, out string pbstrPaymentInstrumentInfoSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        plPaymentInstrumentInfoCount = ((int)(results[1]));
        pbstrPaymentInstrumentInfoSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.UpdatePaymentInstrumentInfo", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void UpdatePaymentInstrumentInfo(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrPaymentInstrumentId, string bstrPaymentInstrumentInfoXML, out string pbstrErrorXML) {
        object[] results = this.Invoke("UpdatePaymentInstrumentInfo", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrPaymentInstrumentId,
                    bstrPaymentInstrumentInfoXML});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUpdatePaymentInstrumentInfo(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrPaymentInstrumentId, string bstrPaymentInstrumentInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdatePaymentInstrumentInfo", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrPaymentInstrumentId,
                    bstrPaymentInstrumentInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndUpdatePaymentInstrumentInfo(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.RemovePaymentInstrument", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void RemovePaymentInstrument(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrPaymentInstrumentId, out string pbstrErrorXML) {
        object[] results = this.Invoke("RemovePaymentInstrument", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrPaymentInstrumentId});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRemovePaymentInstrument(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrPaymentInstrumentId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RemovePaymentInstrument", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrPaymentInstrumentId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndRemovePaymentInstrument(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.SettleBalance", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void SettleBalance(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrPaymentInstrumentId, out string pbstrErrorXML, out string pbstrAmountChargedXML) {
        object[] results = this.Invoke("SettleBalance", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrPaymentInstrumentId});
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSettleBalance(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrPaymentInstrumentId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SettleBalance", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrPaymentInstrumentId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSettleBalance(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrAmountChargedXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.TransferBalance", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void TransferBalance(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrFromPaymentInstrumentId, string bstrToPaymentInstrumentId, out string pbstrErrorXML, out string pbstrAmountChargedXML) {
        object[] results = this.Invoke("TransferBalance", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrFromPaymentInstrumentId,
                    bstrToPaymentInstrumentId});
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginTransferBalance(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrFromPaymentInstrumentId, string bstrToPaymentInstrumentId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("TransferBalance", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrFromPaymentInstrumentId,
                    bstrToPaymentInstrumentId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndTransferBalance(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrAmountChargedXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.CloseBalance", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void CloseBalance(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrObjectId, string bstrLineItemId, out string pbstrErrorXML, out string pbstrAmountChargedXML) {
        object[] results = this.Invoke("CloseBalance", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrObjectId,
                    bstrLineItemId});
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCloseBalance(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrObjectId, string bstrLineItemId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CloseBalance", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrObjectId,
                    bstrLineItemId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndCloseBalance(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrAmountChargedXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.SwitchPaymentInstruments", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void SwitchPaymentInstruments(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrFromPaymentInstrumentId, string bstrToPaymentInstrumentId, out string pbstrErrorXML, out string pbstrAmountChargedXML) {
        object[] results = this.Invoke("SwitchPaymentInstruments", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    bstrFromPaymentInstrumentId,
                    bstrToPaymentInstrumentId});
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSwitchPaymentInstruments(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrFromPaymentInstrumentId, string bstrToPaymentInstrumentId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SwitchPaymentInstruments", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    bstrFromPaymentInstrumentId,
                    bstrToPaymentInstrumentId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSwitchPaymentInstruments(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrAmountChargedXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.AddComment", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void AddComment(int lDelegateIdHigh, int lDelegateIdLow, string bstrAccountId, string bstrCommentInfoXML, out string pbstrErrorXML) {
        object[] results = this.Invoke("AddComment", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrAccountId,
                    bstrCommentInfoXML});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginAddComment(int lDelegateIdHigh, int lDelegateIdLow, string bstrAccountId, string bstrCommentInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AddComment", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrAccountId,
                    bstrCommentInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndAddComment(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetComments", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetComments(int lDelegateIdHigh, int lDelegateIdLow, string bstrAccountId, out string pbstrErrorXML, out int plCommentInfoSetCount, out string pbstrCommentInfoSetXML) {
        object[] results = this.Invoke("GetComments", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrAccountId});
        pbstrErrorXML = ((string)(results[0]));
        plCommentInfoSetCount = ((int)(results[1]));
        pbstrCommentInfoSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetComments(int lDelegateIdHigh, int lDelegateIdLow, string bstrAccountId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetComments", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrAccountId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetComments(System.IAsyncResult asyncResult, out string pbstrErrorXML, out int plCommentInfoSetCount, out string pbstrCommentInfoSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        plCommentInfoSetCount = ((int)(results[1]));
        pbstrCommentInfoSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.PurchaseOffering", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void PurchaseOffering(
                int lDelegateIdHigh, 
                int lDelegateIdLow, 
                int lRequesterIdHigh, 
                int lRequesterIdLow, 
                string bstrTrackingGUID, 
                bool fComputeOnly, 
                string bstrSubscriptionName, 
                string bstrAccountId, 
                string bstrBaseSubscriptionId, 
                string bstrOfferingGUID, 
                int lOverrideAmount, 
                string bstrPaymentInstrumentId, 
                string bstrShippingAddressId, 
                string bstrActivationDate, 
                string bstrSubscriptionEndDate, 
                string bstrReferralSetXML, 
                out string pbstrErrorXML, 
                out string pbstrSubscriptionId, 
                out string pbstrAmountChargedXML, 
                out int plAddedServiceInstanceCount, 
                out string pbstrAddedServiceInstanceSetXML) {
        object[] results = this.Invoke("PurchaseOffering", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    fComputeOnly,
                    bstrSubscriptionName,
                    bstrAccountId,
                    bstrBaseSubscriptionId,
                    bstrOfferingGUID,
                    lOverrideAmount,
                    bstrPaymentInstrumentId,
                    bstrShippingAddressId,
                    bstrActivationDate,
                    bstrSubscriptionEndDate,
                    bstrReferralSetXML});
        pbstrErrorXML = ((string)(results[0]));
        pbstrSubscriptionId = ((string)(results[1]));
        pbstrAmountChargedXML = ((string)(results[2]));
        plAddedServiceInstanceCount = ((int)(results[3]));
        pbstrAddedServiceInstanceSetXML = ((string)(results[4]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginPurchaseOffering(
                int lDelegateIdHigh, 
                int lDelegateIdLow, 
                int lRequesterIdHigh, 
                int lRequesterIdLow, 
                string bstrTrackingGUID, 
                bool fComputeOnly, 
                string bstrSubscriptionName, 
                string bstrAccountId, 
                string bstrBaseSubscriptionId, 
                string bstrOfferingGUID, 
                int lOverrideAmount, 
                string bstrPaymentInstrumentId, 
                string bstrShippingAddressId, 
                string bstrActivationDate, 
                string bstrSubscriptionEndDate, 
                string bstrReferralSetXML, 
                System.AsyncCallback callback, 
                object asyncState) {
        return this.BeginInvoke("PurchaseOffering", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    fComputeOnly,
                    bstrSubscriptionName,
                    bstrAccountId,
                    bstrBaseSubscriptionId,
                    bstrOfferingGUID,
                    lOverrideAmount,
                    bstrPaymentInstrumentId,
                    bstrShippingAddressId,
                    bstrActivationDate,
                    bstrSubscriptionEndDate,
                    bstrReferralSetXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndPurchaseOffering(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrSubscriptionId, out string pbstrAmountChargedXML, out int plAddedServiceInstanceCount, out string pbstrAddedServiceInstanceSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrSubscriptionId = ((string)(results[1]));
        pbstrAmountChargedXML = ((string)(results[2]));
        plAddedServiceInstanceCount = ((int)(results[3]));
        pbstrAddedServiceInstanceSetXML = ((string)(results[4]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.PurchaseOfferingEx", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void PurchaseOfferingEx(
                int lDelegateIdHigh, 
                int lDelegateIdLow, 
                int lRequesterIdHigh, 
                int lRequesterIdLow, 
                string bstrTrackingGUID, 
                bool fComputeOnly, 
                string bstrSubscriptionName, 
                string bstrAccountId, 
                string bstrBaseSubscriptionId, 
                string bstrOfferingGUID, 
                int lOverrideAmount, 
                string bstrPaymentInstrumentId, 
                string bstrShippingAddressId, 
                string bstrActivationDate, 
                string bstrSubscriptionEndDate, 
                string bstrReferralSetXML, 
                string bstrTokenId, 
                string bstrPolicyGUID, 
                int lPolicyVersion, 
                string bstrSignatureDateTime, 
                out string pbstrErrorXML, 
                out string pbstrSubscriptionId, 
                out string pbstrAmountChargedXML, 
                out int plAddedServiceInstanceCount, 
                out string pbstrAddedServiceInstanceSetXML) {
        object[] results = this.Invoke("PurchaseOfferingEx", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    fComputeOnly,
                    bstrSubscriptionName,
                    bstrAccountId,
                    bstrBaseSubscriptionId,
                    bstrOfferingGUID,
                    lOverrideAmount,
                    bstrPaymentInstrumentId,
                    bstrShippingAddressId,
                    bstrActivationDate,
                    bstrSubscriptionEndDate,
                    bstrReferralSetXML,
                    bstrTokenId,
                    bstrPolicyGUID,
                    lPolicyVersion,
                    bstrSignatureDateTime});
        pbstrErrorXML = ((string)(results[0]));
        pbstrSubscriptionId = ((string)(results[1]));
        pbstrAmountChargedXML = ((string)(results[2]));
        plAddedServiceInstanceCount = ((int)(results[3]));
        pbstrAddedServiceInstanceSetXML = ((string)(results[4]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginPurchaseOfferingEx(
                int lDelegateIdHigh, 
                int lDelegateIdLow, 
                int lRequesterIdHigh, 
                int lRequesterIdLow, 
                string bstrTrackingGUID, 
                bool fComputeOnly, 
                string bstrSubscriptionName, 
                string bstrAccountId, 
                string bstrBaseSubscriptionId, 
                string bstrOfferingGUID, 
                int lOverrideAmount, 
                string bstrPaymentInstrumentId, 
                string bstrShippingAddressId, 
                string bstrActivationDate, 
                string bstrSubscriptionEndDate, 
                string bstrReferralSetXML, 
                string bstrTokenId, 
                string bstrPolicyGUID, 
                int lPolicyVersion, 
                string bstrSignatureDateTime, 
                System.AsyncCallback callback, 
                object asyncState) {
        return this.BeginInvoke("PurchaseOfferingEx", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    fComputeOnly,
                    bstrSubscriptionName,
                    bstrAccountId,
                    bstrBaseSubscriptionId,
                    bstrOfferingGUID,
                    lOverrideAmount,
                    bstrPaymentInstrumentId,
                    bstrShippingAddressId,
                    bstrActivationDate,
                    bstrSubscriptionEndDate,
                    bstrReferralSetXML,
                    bstrTokenId,
                    bstrPolicyGUID,
                    lPolicyVersion,
                    bstrSignatureDateTime}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndPurchaseOfferingEx(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrSubscriptionId, out string pbstrAmountChargedXML, out int plAddedServiceInstanceCount, out string pbstrAddedServiceInstanceSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrSubscriptionId = ((string)(results[1]));
        pbstrAmountChargedXML = ((string)(results[2]));
        plAddedServiceInstanceCount = ((int)(results[3]));
        pbstrAddedServiceInstanceSetXML = ((string)(results[4]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.CancelSubscription", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void CancelSubscription(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, bool fComputeOnly, string bstrSubscriptionId, string bstrCancelDate, string bstrCommentInfoXML, out string pbstrErrorXML, out string pbstrAmountChargedXML, out string pbstrSubscriptionStatusInfoXML, out int plRemovedServiceInstanceCount, out string pbstrRemovedServiceInstanceSetXML) {
        object[] results = this.Invoke("CancelSubscription", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    fComputeOnly,
                    bstrSubscriptionId,
                    bstrCancelDate,
                    bstrCommentInfoXML});
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedXML = ((string)(results[1]));
        pbstrSubscriptionStatusInfoXML = ((string)(results[2]));
        plRemovedServiceInstanceCount = ((int)(results[3]));
        pbstrRemovedServiceInstanceSetXML = ((string)(results[4]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCancelSubscription(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, bool fComputeOnly, string bstrSubscriptionId, string bstrCancelDate, string bstrCommentInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CancelSubscription", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    fComputeOnly,
                    bstrSubscriptionId,
                    bstrCancelDate,
                    bstrCommentInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndCancelSubscription(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrAmountChargedXML, out string pbstrSubscriptionStatusInfoXML, out int plRemovedServiceInstanceCount, out string pbstrRemovedServiceInstanceSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedXML = ((string)(results[1]));
        pbstrSubscriptionStatusInfoXML = ((string)(results[2]));
        plRemovedServiceInstanceCount = ((int)(results[3]));
        pbstrRemovedServiceInstanceSetXML = ((string)(results[4]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.SearchAccounts", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void SearchAccounts(int lDelegateIdHigh, int lDelegateIdLow, bool fFullData, int lMax, string bstrSearchXML, out string pbstrErrorXML, out int pfMoreRows, out int plAccountInfoCount, out string pbstrAccountInfoSetXML) {
        object[] results = this.Invoke("SearchAccounts", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    fFullData,
                    lMax,
                    bstrSearchXML});
        pbstrErrorXML = ((string)(results[0]));
        pfMoreRows = ((int)(results[1]));
        plAccountInfoCount = ((int)(results[2]));
        pbstrAccountInfoSetXML = ((string)(results[3]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSearchAccounts(int lDelegateIdHigh, int lDelegateIdLow, bool fFullData, int lMax, string bstrSearchXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SearchAccounts", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    fFullData,
                    lMax,
                    bstrSearchXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSearchAccounts(System.IAsyncResult asyncResult, out string pbstrErrorXML, out int pfMoreRows, out int plAccountInfoCount, out string pbstrAccountInfoSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pfMoreRows = ((int)(results[1]));
        plAccountInfoCount = ((int)(results[2]));
        pbstrAccountInfoSetXML = ((string)(results[3]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.SearchAccountsEx", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void SearchAccountsEx(int delegatePuidHigh, int delegatePuidLow, string accountSearchCriteriaXml, string bookmark, int returnedAccountCountMax, out string bookmarkNew, out int returnedAccountCount, out string accountInfoSetXml) {
        object[] results = this.Invoke("SearchAccountsEx", new object[] {
                    delegatePuidHigh,
                    delegatePuidLow,
                    accountSearchCriteriaXml,
                    bookmark,
                    returnedAccountCountMax});
        bookmarkNew = ((string)(results[0]));
        returnedAccountCount = ((int)(results[1]));
        accountInfoSetXml = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSearchAccountsEx(int delegatePuidHigh, int delegatePuidLow, string accountSearchCriteriaXml, string bookmark, int returnedAccountCountMax, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SearchAccountsEx", new object[] {
                    delegatePuidHigh,
                    delegatePuidLow,
                    accountSearchCriteriaXml,
                    bookmark,
                    returnedAccountCountMax}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSearchAccountsEx(System.IAsyncResult asyncResult, out string bookmarkNew, out int returnedAccountCount, out string accountInfoSetXml) {
        object[] results = this.EndInvoke(asyncResult);
        bookmarkNew = ((string)(results[0]));
        returnedAccountCount = ((int)(results[1]));
        accountInfoSetXml = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetSubscriptions", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetSubscriptions(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, out string pbstrErrorXML, out int plSubscriptionInfoCount, out string pbstrSubscriptionInfoSetXML) {
        object[] results = this.Invoke("GetSubscriptions", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrObjectId});
        pbstrErrorXML = ((string)(results[0]));
        plSubscriptionInfoCount = ((int)(results[1]));
        pbstrSubscriptionInfoSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetSubscriptions(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetSubscriptions", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrObjectId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetSubscriptions(System.IAsyncResult asyncResult, out string pbstrErrorXML, out int plSubscriptionInfoCount, out string pbstrSubscriptionInfoSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        plSubscriptionInfoCount = ((int)(results[1]));
        pbstrSubscriptionInfoSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetSubscriptionStatus", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetSubscriptionStatus(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrSubscriptionId, out string pbstrErrorXML, out string pbstrSubscriptionStatusInfoXML) {
        object[] results = this.Invoke("GetSubscriptionStatus", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrSubscriptionId});
        pbstrErrorXML = ((string)(results[0]));
        pbstrSubscriptionStatusInfoXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetSubscriptionStatus(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrSubscriptionId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetSubscriptionStatus", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrSubscriptionId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetSubscriptionStatus(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrSubscriptionStatusInfoXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrSubscriptionStatusInfoXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetSubscriptionHistory", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetSubscriptionHistory(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrSubscriptionId, out string pbstrErrorXML, out int plHistoryEventCount, out string pbstrSubscriptionHistoryEventSetXML) {
        object[] results = this.Invoke("GetSubscriptionHistory", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrSubscriptionId});
        pbstrErrorXML = ((string)(results[0]));
        plHistoryEventCount = ((int)(results[1]));
        pbstrSubscriptionHistoryEventSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetSubscriptionHistory(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrSubscriptionId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetSubscriptionHistory", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrSubscriptionId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetSubscriptionHistory(System.IAsyncResult asyncResult, out string pbstrErrorXML, out int plHistoryEventCount, out string pbstrSubscriptionHistoryEventSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        plHistoryEventCount = ((int)(results[1]));
        pbstrSubscriptionHistoryEventSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetReferralData", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetReferralData(int lDelegateIdHigh, int lDelegateIdLow, string bstrSubscriptionId, out string pbstrErrorXML, out int plReferralCount, out string pbstrReferralSetXML) {
        object[] results = this.Invoke("GetReferralData", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrSubscriptionId});
        pbstrErrorXML = ((string)(results[0]));
        plReferralCount = ((int)(results[1]));
        pbstrReferralSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetReferralData(int lDelegateIdHigh, int lDelegateIdLow, string bstrSubscriptionId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetReferralData", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrSubscriptionId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetReferralData(System.IAsyncResult asyncResult, out string pbstrErrorXML, out int plReferralCount, out string pbstrReferralSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        plReferralCount = ((int)(results[1]));
        pbstrReferralSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.ConvertSubscription", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void ConvertSubscription(
                int lDelegateIdHigh, 
                int lDelegateIdLow, 
                int lRequesterIdHigh, 
                int lRequesterIdLow, 
                string bstrTrackingGUID, 
                bool fComputeOnly, 
                int lConvertMode, 
                int lOverrideFlags, 
                string bstrSubscriptionName, 
                string bstrSubscriptionId, 
                string bstrOfferingGUID, 
                int lOverrideAmount, 
                string bstrSubscriptionEndDate, 
                string bstrReferralSetXML, 
                out string pbstrErrorXML, 
                out string pbstrAmountChargedXML, 
                out int plAddedServiceInstanceSetCount, 
                out string pbstrAddedServiceInstanceSet, 
                out int plRemovedServiceInstanceSetCount, 
                out string pbstrRemoveServiceInstanceSet) {
        object[] results = this.Invoke("ConvertSubscription", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    fComputeOnly,
                    lConvertMode,
                    lOverrideFlags,
                    bstrSubscriptionName,
                    bstrSubscriptionId,
                    bstrOfferingGUID,
                    lOverrideAmount,
                    bstrSubscriptionEndDate,
                    bstrReferralSetXML});
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedXML = ((string)(results[1]));
        plAddedServiceInstanceSetCount = ((int)(results[2]));
        pbstrAddedServiceInstanceSet = ((string)(results[3]));
        plRemovedServiceInstanceSetCount = ((int)(results[4]));
        pbstrRemoveServiceInstanceSet = ((string)(results[5]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginConvertSubscription(
                int lDelegateIdHigh, 
                int lDelegateIdLow, 
                int lRequesterIdHigh, 
                int lRequesterIdLow, 
                string bstrTrackingGUID, 
                bool fComputeOnly, 
                int lConvertMode, 
                int lOverrideFlags, 
                string bstrSubscriptionName, 
                string bstrSubscriptionId, 
                string bstrOfferingGUID, 
                int lOverrideAmount, 
                string bstrSubscriptionEndDate, 
                string bstrReferralSetXML, 
                System.AsyncCallback callback, 
                object asyncState) {
        return this.BeginInvoke("ConvertSubscription", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    fComputeOnly,
                    lConvertMode,
                    lOverrideFlags,
                    bstrSubscriptionName,
                    bstrSubscriptionId,
                    bstrOfferingGUID,
                    lOverrideAmount,
                    bstrSubscriptionEndDate,
                    bstrReferralSetXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndConvertSubscription(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrAmountChargedXML, out int plAddedServiceInstanceSetCount, out string pbstrAddedServiceInstanceSet, out int plRemovedServiceInstanceSetCount, out string pbstrRemoveServiceInstanceSet) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedXML = ((string)(results[1]));
        plAddedServiceInstanceSetCount = ((int)(results[2]));
        pbstrAddedServiceInstanceSet = ((string)(results[3]));
        plRemovedServiceInstanceSetCount = ((int)(results[4]));
        pbstrRemoveServiceInstanceSet = ((string)(results[5]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.ConvertSubscriptionEx", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void ConvertSubscriptionEx(
                int lDelegateIdHigh, 
                int lDelegateIdLow, 
                int lRequesterIdHigh, 
                int lRequesterIdLow, 
                string bstrTrackingGUID, 
                bool fComputeOnly, 
                int lConvertMode, 
                int lOverrideFlags, 
                string bstrSubscriptionName, 
                string bstrSubscriptionId, 
                string bstrOfferingGUID, 
                int lOverrideAmount, 
                string bstrSubscriptionEndDate, 
                string bstrReferralSetXML, 
                string bstrPaymentInstrumentId, 
                string bstrTokenId, 
                string bstrPolicyGUID, 
                int lPolicyVersion, 
                string bstrSignatureDateTime, 
                out string pbstrErrorXML, 
                out string pbstrAmountChargedXML, 
                out int plAddedServiceInstanceSetCount, 
                out string pbstrAddedServiceInstanceSet, 
                out int plRemovedServiceInstanceSetCount, 
                out string pbstrRemoveServiceInstanceSet) {
        object[] results = this.Invoke("ConvertSubscriptionEx", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    fComputeOnly,
                    lConvertMode,
                    lOverrideFlags,
                    bstrSubscriptionName,
                    bstrSubscriptionId,
                    bstrOfferingGUID,
                    lOverrideAmount,
                    bstrSubscriptionEndDate,
                    bstrReferralSetXML,
                    bstrPaymentInstrumentId,
                    bstrTokenId,
                    bstrPolicyGUID,
                    lPolicyVersion,
                    bstrSignatureDateTime});
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedXML = ((string)(results[1]));
        plAddedServiceInstanceSetCount = ((int)(results[2]));
        pbstrAddedServiceInstanceSet = ((string)(results[3]));
        plRemovedServiceInstanceSetCount = ((int)(results[4]));
        pbstrRemoveServiceInstanceSet = ((string)(results[5]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginConvertSubscriptionEx(
                int lDelegateIdHigh, 
                int lDelegateIdLow, 
                int lRequesterIdHigh, 
                int lRequesterIdLow, 
                string bstrTrackingGUID, 
                bool fComputeOnly, 
                int lConvertMode, 
                int lOverrideFlags, 
                string bstrSubscriptionName, 
                string bstrSubscriptionId, 
                string bstrOfferingGUID, 
                int lOverrideAmount, 
                string bstrSubscriptionEndDate, 
                string bstrReferralSetXML, 
                string bstrPaymentInstrumentId, 
                string bstrTokenId, 
                string bstrPolicyGUID, 
                int lPolicyVersion, 
                string bstrSignatureDateTime, 
                System.AsyncCallback callback, 
                object asyncState) {
        return this.BeginInvoke("ConvertSubscriptionEx", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    fComputeOnly,
                    lConvertMode,
                    lOverrideFlags,
                    bstrSubscriptionName,
                    bstrSubscriptionId,
                    bstrOfferingGUID,
                    lOverrideAmount,
                    bstrSubscriptionEndDate,
                    bstrReferralSetXML,
                    bstrPaymentInstrumentId,
                    bstrTokenId,
                    bstrPolicyGUID,
                    lPolicyVersion,
                    bstrSignatureDateTime}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndConvertSubscriptionEx(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrAmountChargedXML, out int plAddedServiceInstanceSetCount, out string pbstrAddedServiceInstanceSet, out int plRemovedServiceInstanceSetCount, out string pbstrRemoveServiceInstanceSet) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedXML = ((string)(results[1]));
        plAddedServiceInstanceSetCount = ((int)(results[2]));
        pbstrAddedServiceInstanceSet = ((string)(results[3]));
        plRemovedServiceInstanceSetCount = ((int)(results[4]));
        pbstrRemoveServiceInstanceSet = ((string)(results[5]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.UpdateSubscriptionInfo", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void UpdateSubscriptionInfo(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrSubscriptionId, string bstrSubscriptionInfoXML, string bstrReferralSetXML, out string pbstrErrorXML) {
        object[] results = this.Invoke("UpdateSubscriptionInfo", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    bstrSubscriptionId,
                    bstrSubscriptionInfoXML,
                    bstrReferralSetXML});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUpdateSubscriptionInfo(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrSubscriptionId, string bstrSubscriptionInfoXML, string bstrReferralSetXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdateSubscriptionInfo", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    bstrSubscriptionId,
                    bstrSubscriptionInfoXML,
                    bstrReferralSetXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndUpdateSubscriptionInfo(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetAccountStatus", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetAccountStatus(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrAccountId, out string pbstrErrorXML, out string pbstrAccountStatusInfoXML) {
        object[] results = this.Invoke("GetAccountStatus", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrAccountId});
        pbstrErrorXML = ((string)(results[0]));
        pbstrAccountStatusInfoXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetAccountStatus(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrAccountId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetAccountStatus", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrAccountId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetAccountStatus(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrAccountStatusInfoXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrAccountStatusInfoXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetBaseOfferings", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetBaseOfferings(string bstrOfferingGUID, string bstrCategory, string bstrCountry, string bstrLocale, string bstrCurrency, out string pbstrErrorText, out int plOfferingInfoCount, out string pbstrOfferingInfoSetXML) {
        object[] results = this.Invoke("GetBaseOfferings", new object[] {
                    bstrOfferingGUID,
                    bstrCategory,
                    bstrCountry,
                    bstrLocale,
                    bstrCurrency});
        pbstrErrorText = ((string)(results[0]));
        plOfferingInfoCount = ((int)(results[1]));
        pbstrOfferingInfoSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetBaseOfferings(string bstrOfferingGUID, string bstrCategory, string bstrCountry, string bstrLocale, string bstrCurrency, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetBaseOfferings", new object[] {
                    bstrOfferingGUID,
                    bstrCategory,
                    bstrCountry,
                    bstrLocale,
                    bstrCurrency}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetBaseOfferings(System.IAsyncResult asyncResult, out string pbstrErrorText, out int plOfferingInfoCount, out string pbstrOfferingInfoSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorText = ((string)(results[0]));
        plOfferingInfoCount = ((int)(results[1]));
        pbstrOfferingInfoSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetBaseOfferingsEx", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetBaseOfferingsEx(string bstrOfferingGUID, string bstrCategory, string bstrCountry, string bstrLocale, string bstrCurrency, string bstrTokenId, out string pbstrErrorText, out int plOfferingInfoCount, out string pbstrOfferingInfoSetXML) {
        object[] results = this.Invoke("GetBaseOfferingsEx", new object[] {
                    bstrOfferingGUID,
                    bstrCategory,
                    bstrCountry,
                    bstrLocale,
                    bstrCurrency,
                    bstrTokenId});
        pbstrErrorText = ((string)(results[0]));
        plOfferingInfoCount = ((int)(results[1]));
        pbstrOfferingInfoSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetBaseOfferingsEx(string bstrOfferingGUID, string bstrCategory, string bstrCountry, string bstrLocale, string bstrCurrency, string bstrTokenId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetBaseOfferingsEx", new object[] {
                    bstrOfferingGUID,
                    bstrCategory,
                    bstrCountry,
                    bstrLocale,
                    bstrCurrency,
                    bstrTokenId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetBaseOfferingsEx(System.IAsyncResult asyncResult, out string pbstrErrorText, out int plOfferingInfoCount, out string pbstrOfferingInfoSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorText = ((string)(results[0]));
        plOfferingInfoCount = ((int)(results[1]));
        pbstrOfferingInfoSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetEligibleOfferings", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetEligibleOfferings(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrAccountId, string bstrOfferingGUID, string bstrCategory, string bstrFilter, out string pbstrErrorText, out int plOfferingInfoCount, out string pbstrOfferingInfoSetXML) {
        object[] results = this.Invoke("GetEligibleOfferings", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrAccountId,
                    bstrOfferingGUID,
                    bstrCategory,
                    bstrFilter});
        pbstrErrorText = ((string)(results[0]));
        plOfferingInfoCount = ((int)(results[1]));
        pbstrOfferingInfoSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetEligibleOfferings(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrAccountId, string bstrOfferingGUID, string bstrCategory, string bstrFilter, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetEligibleOfferings", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrAccountId,
                    bstrOfferingGUID,
                    bstrCategory,
                    bstrFilter}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetEligibleOfferings(System.IAsyncResult asyncResult, out string pbstrErrorText, out int plOfferingInfoCount, out string pbstrOfferingInfoSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorText = ((string)(results[0]));
        plOfferingInfoCount = ((int)(results[1]));
        pbstrOfferingInfoSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetEligibleOfferingsEx", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetEligibleOfferingsEx(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrAccountId, string bstrOfferingGUID, string bstrCategory, string bstrFilter, string bstrTokenId, out string pbstrErrorText, out int plOfferingInfoCount, out string pbstrOfferingInfoSetXML) {
        object[] results = this.Invoke("GetEligibleOfferingsEx", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrAccountId,
                    bstrOfferingGUID,
                    bstrCategory,
                    bstrFilter,
                    bstrTokenId});
        pbstrErrorText = ((string)(results[0]));
        plOfferingInfoCount = ((int)(results[1]));
        pbstrOfferingInfoSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetEligibleOfferingsEx(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrAccountId, string bstrOfferingGUID, string bstrCategory, string bstrFilter, string bstrTokenId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetEligibleOfferingsEx", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrAccountId,
                    bstrOfferingGUID,
                    bstrCategory,
                    bstrFilter,
                    bstrTokenId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetEligibleOfferingsEx(System.IAsyncResult asyncResult, out string pbstrErrorText, out int plOfferingInfoCount, out string pbstrOfferingInfoSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorText = ((string)(results[0]));
        plOfferingInfoCount = ((int)(results[1]));
        pbstrOfferingInfoSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetServiceComponents", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetServiceComponents(string bstrOfferingGUID, out string pbstrErrorText, out int plServiceComponentCount, out string pbstrServiceComponentSetXML) {
        object[] results = this.Invoke("GetServiceComponents", new object[] {
                    bstrOfferingGUID});
        pbstrErrorText = ((string)(results[0]));
        plServiceComponentCount = ((int)(results[1]));
        pbstrServiceComponentSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetServiceComponents(string bstrOfferingGUID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetServiceComponents", new object[] {
                    bstrOfferingGUID}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetServiceComponents(System.IAsyncResult asyncResult, out string pbstrErrorText, out int plServiceComponentCount, out string pbstrServiceComponentSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorText = ((string)(results[0]));
        plServiceComponentCount = ((int)(results[1]));
        pbstrServiceComponentSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetResourcePrices", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetResourcePrices(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrSubscriptionId, string bstrOfferingGUID, out string pbstrErrorXML, out int plCount, out string pbstrResourcePriceSetXML) {
        object[] results = this.Invoke("GetResourcePrices", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrSubscriptionId,
                    bstrOfferingGUID});
        pbstrErrorXML = ((string)(results[0]));
        plCount = ((int)(results[1]));
        pbstrResourcePriceSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetResourcePrices(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrSubscriptionId, string bstrOfferingGUID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetResourcePrices", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrSubscriptionId,
                    bstrOfferingGUID}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetResourcePrices(System.IAsyncResult asyncResult, out string pbstrErrorXML, out int plCount, out string pbstrResourcePriceSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        plCount = ((int)(results[1]));
        pbstrResourcePriceSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.ValidateProvisioningData", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void ValidateProvisioningData(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrServiceComponentId, string bstrDetailsXML, out string pbstrErrorXML, out string pbstrResponseXML) {
        object[] results = this.Invoke("ValidateProvisioningData", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrServiceComponentId,
                    bstrDetailsXML});
        pbstrErrorXML = ((string)(results[0]));
        pbstrResponseXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginValidateProvisioningData(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrServiceComponentId, string bstrDetailsXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ValidateProvisioningData", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrServiceComponentId,
                    bstrDetailsXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndValidateProvisioningData(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrResponseXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrResponseXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.CheckProvisioningStatus", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void CheckProvisioningStatus(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrServiceComponentId, out string pbstrErrorXML, out string pbstrResponseXML) {
        object[] results = this.Invoke("CheckProvisioningStatus", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrServiceComponentId});
        pbstrErrorXML = ((string)(results[0]));
        pbstrResponseXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCheckProvisioningStatus(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrServiceComponentId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CheckProvisioningStatus", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrServiceComponentId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndCheckProvisioningStatus(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrResponseXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrResponseXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.ProvisionServices", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void ProvisionServices(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrServiceInstanceSetXML, out string pbstrErrorXML) {
        object[] results = this.Invoke("ProvisionServices", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrServiceInstanceSetXML});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginProvisionServices(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrServiceInstanceSetXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ProvisionServices", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrServiceInstanceSetXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndProvisionServices(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.DeprovisionServices", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void DeprovisionServices(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrServiceInstanceSetXML, out string pbstrErrorXML) {
        object[] results = this.Invoke("DeprovisionServices", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrServiceInstanceSetXML});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginDeprovisionServices(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrServiceInstanceSetXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DeprovisionServices", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrServiceInstanceSetXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndDeprovisionServices(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.ReportUsageEvent", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void ReportUsageEvent(string bstrTrackingGUID, string bstrUsageSetXML, out string pbstrErrorXML) {
        object[] results = this.Invoke("ReportUsageEvent", new object[] {
                    bstrTrackingGUID,
                    bstrUsageSetXML});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginReportUsageEvent(string bstrTrackingGUID, string bstrUsageSetXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ReportUsageEvent", new object[] {
                    bstrTrackingGUID,
                    bstrUsageSetXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndReportUsageEvent(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.ReportSingleUsageEvent", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void ReportSingleUsageEvent(string trackingGuid, bool computeOnly, string usageEventXml, out string lineItemId, out string usageInfoXml, out string amountChargedXml) {
        object[] results = this.Invoke("ReportSingleUsageEvent", new object[] {
                    trackingGuid,
                    computeOnly,
                    usageEventXml});
        lineItemId = ((string)(results[0]));
        usageInfoXml = ((string)(results[1]));
        amountChargedXml = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginReportSingleUsageEvent(string trackingGuid, bool computeOnly, string usageEventXml, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ReportSingleUsageEvent", new object[] {
                    trackingGuid,
                    computeOnly,
                    usageEventXml}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndReportSingleUsageEvent(System.IAsyncResult asyncResult, out string lineItemId, out string usageInfoXml, out string amountChargedXml) {
        object[] results = this.EndInvoke(asyncResult);
        lineItemId = ((string)(results[0]));
        usageInfoXml = ((string)(results[1]));
        amountChargedXml = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetResourceBalances", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetResourceBalances(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, string bstrResourceGUID, out string pbstrErrorText, out int pcResourceInfoCount, out string pbstrResourceInfoSet) {
        object[] results = this.Invoke("GetResourceBalances", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrObjectId,
                    bstrResourceGUID});
        pbstrErrorText = ((string)(results[0]));
        pcResourceInfoCount = ((int)(results[1]));
        pbstrResourceInfoSet = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetResourceBalances(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, string bstrResourceGUID, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetResourceBalances", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrObjectId,
                    bstrResourceGUID}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetResourceBalances(System.IAsyncResult asyncResult, out string pbstrErrorText, out int pcResourceInfoCount, out string pbstrResourceInfoSet) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorText = ((string)(results[0]));
        pcResourceInfoCount = ((int)(results[1]));
        pbstrResourceInfoSet = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.AdjustResourceBalance", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void AdjustResourceBalance(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrObjectId, string bstrResourceGUID, int lNumberOfUnits, string bstrUnitsOfMeasure, string bstrCommentInfoXML, out string pbstrError) {
        object[] results = this.Invoke("AdjustResourceBalance", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrObjectId,
                    bstrResourceGUID,
                    lNumberOfUnits,
                    bstrUnitsOfMeasure,
                    bstrCommentInfoXML});
        pbstrError = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginAdjustResourceBalance(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrObjectId, string bstrResourceGUID, int lNumberOfUnits, string bstrUnitsOfMeasure, string bstrCommentInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AdjustResourceBalance", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrObjectId,
                    bstrResourceGUID,
                    lNumberOfUnits,
                    bstrUnitsOfMeasure,
                    bstrCommentInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndAdjustResourceBalance(System.IAsyncResult asyncResult, out string pbstrError) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrError = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.CreditPaymentInstrument", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void CreditPaymentInstrument(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrPaymentInstrumentId, int lFinancialReportingCode, string bstrAmount, bool fImmediatelySettle, string bstrCommentInfoXML, out string pbstrError) {
        object[] results = this.Invoke("CreditPaymentInstrument", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrPaymentInstrumentId,
                    lFinancialReportingCode,
                    bstrAmount,
                    fImmediatelySettle,
                    bstrCommentInfoXML});
        pbstrError = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCreditPaymentInstrument(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrPaymentInstrumentId, int lFinancialReportingCode, string bstrAmount, bool fImmediatelySettle, string bstrCommentInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CreditPaymentInstrument", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrPaymentInstrumentId,
                    lFinancialReportingCode,
                    bstrAmount,
                    fImmediatelySettle,
                    bstrCommentInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndCreditPaymentInstrument(System.IAsyncResult asyncResult, out string pbstrError) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrError = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.CreditPaymentInstrumentEx", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void CreditPaymentInstrumentEx(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrPaymentInstrumentId, string bstrSubscriptionId, int lFinancialReportingCode, string bstrAmount, bool fImmediatelySettle, string bstrCommentInfoXML, out string pbstrError) {
        object[] results = this.Invoke("CreditPaymentInstrumentEx", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrPaymentInstrumentId,
                    bstrSubscriptionId,
                    lFinancialReportingCode,
                    bstrAmount,
                    fImmediatelySettle,
                    bstrCommentInfoXML});
        pbstrError = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCreditPaymentInstrumentEx(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrPaymentInstrumentId, string bstrSubscriptionId, int lFinancialReportingCode, string bstrAmount, bool fImmediatelySettle, string bstrCommentInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CreditPaymentInstrumentEx", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrPaymentInstrumentId,
                    bstrSubscriptionId,
                    lFinancialReportingCode,
                    bstrAmount,
                    fImmediatelySettle,
                    bstrCommentInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndCreditPaymentInstrumentEx(System.IAsyncResult asyncResult, out string pbstrError) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrError = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.OffsetLineItem", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void OffsetLineItem(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrLineItemId, int lFinancialReportingCode, bool fImmediatelySettle, string bstrAmount, string bstrCommentInfoXML, out string pbstrError) {
        object[] results = this.Invoke("OffsetLineItem", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrLineItemId,
                    lFinancialReportingCode,
                    fImmediatelySettle,
                    bstrAmount,
                    bstrCommentInfoXML});
        pbstrError = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginOffsetLineItem(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrLineItemId, int lFinancialReportingCode, bool fImmediatelySettle, string bstrAmount, string bstrCommentInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("OffsetLineItem", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrLineItemId,
                    lFinancialReportingCode,
                    fImmediatelySettle,
                    bstrAmount,
                    bstrCommentInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndOffsetLineItem(System.IAsyncResult asyncResult, out string pbstrError) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrError = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.OffsetSingleUsageEvent", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void OffsetSingleUsageEvent(int delegateIdHigh, int delegateIdLow, string trackingGuid, string lineItemId, int units, string CommentInfoXML, string reservedXML, int returnAsUsageActivity, out string newLineItemXML) {
        object[] results = this.Invoke("OffsetSingleUsageEvent", new object[] {
                    delegateIdHigh,
                    delegateIdLow,
                    trackingGuid,
                    lineItemId,
                    units,
                    CommentInfoXML,
                    reservedXML,
                    returnAsUsageActivity});
        newLineItemXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginOffsetSingleUsageEvent(int delegateIdHigh, int delegateIdLow, string trackingGuid, string lineItemId, int units, string CommentInfoXML, string reservedXML, int returnAsUsageActivity, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("OffsetSingleUsageEvent", new object[] {
                    delegateIdHigh,
                    delegateIdLow,
                    trackingGuid,
                    lineItemId,
                    units,
                    CommentInfoXML,
                    reservedXML,
                    returnAsUsageActivity}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndOffsetSingleUsageEvent(System.IAsyncResult asyncResult, out string newLineItemXML) {
        object[] results = this.EndInvoke(asyncResult);
        newLineItemXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.TestConnection", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void TestConnection(string bstrInputString, out string pbstrOutputString) {
        object[] results = this.Invoke("TestConnection", new object[] {
                    bstrInputString});
        pbstrOutputString = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginTestConnection(string bstrInputString, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("TestConnection", new object[] {
                    bstrInputString}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndTestConnection(System.IAsyncResult asyncResult, out string pbstrOutputString) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrOutputString = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.BanUser", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void BanUser(int lDelegateIdHigh, int lDelegateIdLow, int lReasonCode, string bstrAccountInfoXML, out string pbstrErrorXML) {
        object[] results = this.Invoke("BanUser", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lReasonCode,
                    bstrAccountInfoXML});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginBanUser(int lDelegateIdHigh, int lDelegateIdLow, int lReasonCode, string bstrAccountInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("BanUser", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lReasonCode,
                    bstrAccountInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndBanUser(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.UnbanUser", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void UnbanUser(int lDelegateIdHigh, int lDelegateIdLow, string bstrAccountInfoXML, out string pbstrErrorXML) {
        object[] results = this.Invoke("UnbanUser", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrAccountInfoXML});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUnbanUser(int lDelegateIdHigh, int lDelegateIdLow, string bstrAccountInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UnbanUser", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrAccountInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndUnbanUser(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.BanPaymentInstrument", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void BanPaymentInstrument(int lDelegateIdHigh, int lDelegateIdLow, int lReasonCode, string bstrPaymentInstrumentInfoXML, out string pbstrErrorXML) {
        object[] results = this.Invoke("BanPaymentInstrument", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lReasonCode,
                    bstrPaymentInstrumentInfoXML});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginBanPaymentInstrument(int lDelegateIdHigh, int lDelegateIdLow, int lReasonCode, string bstrPaymentInstrumentInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("BanPaymentInstrument", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lReasonCode,
                    bstrPaymentInstrumentInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndBanPaymentInstrument(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.UnbanPaymentInstrument", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void UnbanPaymentInstrument(int lDelegateIdHigh, int lDelegateIdLow, string bstrPaymentInstrumentInfoXML, out string pbstrErrorXML) {
        object[] results = this.Invoke("UnbanPaymentInstrument", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrPaymentInstrumentInfoXML});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUnbanPaymentInstrument(int lDelegateIdHigh, int lDelegateIdLow, string bstrPaymentInstrumentInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UnbanPaymentInstrument", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrPaymentInstrumentInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndUnbanPaymentInstrument(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.IsPaymentInstrumentBanned", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void IsPaymentInstrumentBanned(int lDelegateIdHigh, int lDelegateIdLow, string bstrPaymentInstrumentInfoXML, out string pbstrErrorXML, out int plIsBanned) {
        object[] results = this.Invoke("IsPaymentInstrumentBanned", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrPaymentInstrumentInfoXML});
        pbstrErrorXML = ((string)(results[0]));
        plIsBanned = ((int)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginIsPaymentInstrumentBanned(int lDelegateIdHigh, int lDelegateIdLow, string bstrPaymentInstrumentInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("IsPaymentInstrumentBanned", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrPaymentInstrumentInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndIsPaymentInstrumentBanned(System.IAsyncResult asyncResult, out string pbstrErrorXML, out int plIsBanned) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        plIsBanned = ((int)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.StopPayments", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void StopPayments(int lDelegateIdHigh, int lDelegateIdLow, string bstrPaymentInstrumentId, out string pbstrErrorXML) {
        object[] results = this.Invoke("StopPayments", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrPaymentInstrumentId});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginStopPayments(int lDelegateIdHigh, int lDelegateIdLow, string bstrPaymentInstrumentId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("StopPayments", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrPaymentInstrumentId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndStopPayments(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.ReschedulePayment", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void ReschedulePayment(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrPaymentInstrumentId, bool fApplyDeclineEffects, string bstrNewDueDate, bool fStickyDueDate, int lTransactionType, string bstrSettlementDetailsXML, out string pbstrErrorXML, out string pbstrAmountChargedSetXML) {
        object[] results = this.Invoke("ReschedulePayment", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrPaymentInstrumentId,
                    fApplyDeclineEffects,
                    bstrNewDueDate,
                    fStickyDueDate,
                    lTransactionType,
                    bstrSettlementDetailsXML});
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedSetXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginReschedulePayment(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrPaymentInstrumentId, bool fApplyDeclineEffects, string bstrNewDueDate, bool fStickyDueDate, int lTransactionType, string bstrSettlementDetailsXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ReschedulePayment", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrPaymentInstrumentId,
                    fApplyDeclineEffects,
                    bstrNewDueDate,
                    fStickyDueDate,
                    lTransactionType,
                    bstrSettlementDetailsXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndReschedulePayment(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrAmountChargedSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedSetXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetBillingPeriods", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetBillingPeriods(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, string bstrLocale, out string pbstrErrorXML, out int plBillingPeriodCount, out string pbstrBillingPeriodSetXML) {
        object[] results = this.Invoke("GetBillingPeriods", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrObjectId,
                    bstrLocale});
        pbstrErrorXML = ((string)(results[0]));
        plBillingPeriodCount = ((int)(results[1]));
        pbstrBillingPeriodSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetBillingPeriods(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, string bstrLocale, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetBillingPeriods", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrObjectId,
                    bstrLocale}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetBillingPeriods(System.IAsyncResult asyncResult, out string pbstrErrorXML, out int plBillingPeriodCount, out string pbstrBillingPeriodSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        plBillingPeriodCount = ((int)(results[1]));
        pbstrBillingPeriodSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetStatement", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetStatement(int delegateIdHigh, int delegateIdLow, int requesterIdHigh, int requesterIdLow, string objectId, System.UInt32 beginBillingPeriodId, System.UInt32 endBillingPeriodId, System.Byte returnStatementSet, bool returnNotificationSet, out string errorXml, out string accountStatementInfoSetXml, out string userNotificationSetXml) {
        object[] results = this.Invoke("GetStatement", new object[] {
                    delegateIdHigh,
                    delegateIdLow,
                    requesterIdHigh,
                    requesterIdLow,
                    objectId,
                    beginBillingPeriodId,
                    endBillingPeriodId,
                    returnStatementSet,
                    returnNotificationSet});
        errorXml = ((string)(results[0]));
        accountStatementInfoSetXml = ((string)(results[1]));
        userNotificationSetXml = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetStatement(int delegateIdHigh, int delegateIdLow, int requesterIdHigh, int requesterIdLow, string objectId, System.UInt32 beginBillingPeriodId, System.UInt32 endBillingPeriodId, System.Byte returnStatementSet, bool returnNotificationSet, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetStatement", new object[] {
                    delegateIdHigh,
                    delegateIdLow,
                    requesterIdHigh,
                    requesterIdLow,
                    objectId,
                    beginBillingPeriodId,
                    endBillingPeriodId,
                    returnStatementSet,
                    returnNotificationSet}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetStatement(System.IAsyncResult asyncResult, out string errorXml, out string accountStatementInfoSetXml, out string userNotificationSetXml) {
        object[] results = this.EndInvoke(asyncResult);
        errorXml = ((string)(results[0]));
        accountStatementInfoSetXml = ((string)(results[1]));
        userNotificationSetXml = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.SyncUPSCacheForPUID", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void SyncUPSCacheForPUID(int lCustomerPUIDHigh, int lCustomerPUIDLow, out string pbstrErrorXML) {
        object[] results = this.Invoke("SyncUPSCacheForPUID", new object[] {
                    lCustomerPUIDHigh,
                    lCustomerPUIDLow});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSyncUPSCacheForPUID(int lCustomerPUIDHigh, int lCustomerPUIDLow, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SyncUPSCacheForPUID", new object[] {
                    lCustomerPUIDHigh,
                    lCustomerPUIDLow}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSyncUPSCacheForPUID(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetKey", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetKey(int lRequesterIdHigh, int lRequesterIdLow, string bstrKeyGuid, out string pbstrErrorXML, out string pbstrKeyXml) {
        object[] results = this.Invoke("GetKey", new object[] {
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrKeyGuid});
        pbstrErrorXML = ((string)(results[0]));
        pbstrKeyXml = ((string)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetKey(int lRequesterIdHigh, int lRequesterIdLow, string bstrKeyGuid, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetKey", new object[] {
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrKeyGuid}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetKey(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrKeyXml) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrKeyXml = ((string)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetAdjustments", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetAdjustments(int lDelegateIdHigh, int lDelegateIdLow, string bstrSubscriptionId, int lBillingPeriodId, out string pbstrErrorXML, out int pcAppliedAdjustmentCount, out string pbstrAppliedAdjustmentSetXML, out int pcAvailableAdjustmentCount, out string pbstrAvailableAdjustmentSetXML) {
        object[] results = this.Invoke("GetAdjustments", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrSubscriptionId,
                    lBillingPeriodId});
        pbstrErrorXML = ((string)(results[0]));
        pcAppliedAdjustmentCount = ((int)(results[1]));
        pbstrAppliedAdjustmentSetXML = ((string)(results[2]));
        pcAvailableAdjustmentCount = ((int)(results[3]));
        pbstrAvailableAdjustmentSetXML = ((string)(results[4]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetAdjustments(int lDelegateIdHigh, int lDelegateIdLow, string bstrSubscriptionId, int lBillingPeriodId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetAdjustments", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrSubscriptionId,
                    lBillingPeriodId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetAdjustments(System.IAsyncResult asyncResult, out string pbstrErrorXML, out int pcAppliedAdjustmentCount, out string pbstrAppliedAdjustmentSetXML, out int pcAvailableAdjustmentCount, out string pbstrAvailableAdjustmentSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pcAppliedAdjustmentCount = ((int)(results[1]));
        pbstrAppliedAdjustmentSetXML = ((string)(results[2]));
        pcAvailableAdjustmentCount = ((int)(results[3]));
        pbstrAvailableAdjustmentSetXML = ((string)(results[4]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.AdjustSubscription", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void AdjustSubscription(int lDelegateIdHigh, int lDelegateIdLow, string bstrSubscriptionId, int lBillingPeriodId, string bstrAdjustmentGUID, string bstrAmount, string bstrCommentTextXML, out string pbstrErrorXML) {
        object[] results = this.Invoke("AdjustSubscription", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrSubscriptionId,
                    lBillingPeriodId,
                    bstrAdjustmentGUID,
                    bstrAmount,
                    bstrCommentTextXML});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginAdjustSubscription(int lDelegateIdHigh, int lDelegateIdLow, string bstrSubscriptionId, int lBillingPeriodId, string bstrAdjustmentGUID, string bstrAmount, string bstrCommentTextXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AdjustSubscription", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrSubscriptionId,
                    lBillingPeriodId,
                    bstrAdjustmentGUID,
                    bstrAmount,
                    bstrCommentTextXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndAdjustSubscription(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.CompleteConversion", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void CompleteConversion(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrSubscriptionId, out string pbstrErrorXML, out string pbstrAmountChargedXML, out int plAddedServiceInstanceSetCount, out string pbstrAddedServiceInstanceSet, out int plRemovedServiceInstanceSetCount, out string pbstrRemoveServiceInstanceSet) {
        object[] results = this.Invoke("CompleteConversion", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    bstrSubscriptionId});
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedXML = ((string)(results[1]));
        plAddedServiceInstanceSetCount = ((int)(results[2]));
        pbstrAddedServiceInstanceSet = ((string)(results[3]));
        plRemovedServiceInstanceSetCount = ((int)(results[4]));
        pbstrRemoveServiceInstanceSet = ((string)(results[5]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCompleteConversion(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrSubscriptionId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CompleteConversion", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    bstrSubscriptionId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndCompleteConversion(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrAmountChargedXML, out int plAddedServiceInstanceSetCount, out string pbstrAddedServiceInstanceSet, out int plRemovedServiceInstanceSetCount, out string pbstrRemoveServiceInstanceSet) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedXML = ((string)(results[1]));
        plAddedServiceInstanceSetCount = ((int)(results[2]));
        pbstrAddedServiceInstanceSet = ((string)(results[3]));
        plRemovedServiceInstanceSetCount = ((int)(results[4]));
        pbstrRemoveServiceInstanceSet = ((string)(results[5]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.CancelConversion", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void CancelConversion(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrSubscriptionId, out string pbstrErrorXML, out int plAddedServiceInstanceSetCount, out string pbstrAddedServiceInstanceSet, out int plRemovedServiceInstanceSetCount, out string pbstrRemoveServiceInstanceSet) {
        object[] results = this.Invoke("CancelConversion", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    bstrSubscriptionId});
        pbstrErrorXML = ((string)(results[0]));
        plAddedServiceInstanceSetCount = ((int)(results[1]));
        pbstrAddedServiceInstanceSet = ((string)(results[2]));
        plRemovedServiceInstanceSetCount = ((int)(results[3]));
        pbstrRemoveServiceInstanceSet = ((string)(results[4]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginCancelConversion(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrSubscriptionId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("CancelConversion", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTrackingGUID,
                    bstrSubscriptionId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndCancelConversion(System.IAsyncResult asyncResult, out string pbstrErrorXML, out int plAddedServiceInstanceSetCount, out string pbstrAddedServiceInstanceSet, out int plRemovedServiceInstanceSetCount, out string pbstrRemoveServiceInstanceSet) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        plAddedServiceInstanceSetCount = ((int)(results[1]));
        pbstrAddedServiceInstanceSet = ((string)(results[2]));
        plRemovedServiceInstanceSetCount = ((int)(results[3]));
        pbstrRemoveServiceInstanceSet = ((string)(results[4]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.ImportSettledBillingItem", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void ImportSettledBillingItem(int lDelegateIdHigh, int lDelegateIdLow, string bstrSubscriptionId, string bstrPaymentInstrumentId, string bstrTaxAddressId, string bstrTrackingGUID, string bstrSettledBillingItemXML, out string pbstrResultXML, out string pbstrNewLineItemsXML) {
        object[] results = this.Invoke("ImportSettledBillingItem", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrSubscriptionId,
                    bstrPaymentInstrumentId,
                    bstrTaxAddressId,
                    bstrTrackingGUID,
                    bstrSettledBillingItemXML});
        pbstrResultXML = ((string)(results[0]));
        pbstrNewLineItemsXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginImportSettledBillingItem(int lDelegateIdHigh, int lDelegateIdLow, string bstrSubscriptionId, string bstrPaymentInstrumentId, string bstrTaxAddressId, string bstrTrackingGUID, string bstrSettledBillingItemXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ImportSettledBillingItem", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrSubscriptionId,
                    bstrPaymentInstrumentId,
                    bstrTaxAddressId,
                    bstrTrackingGUID,
                    bstrSettledBillingItemXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndImportSettledBillingItem(System.IAsyncResult asyncResult, out string pbstrResultXML, out string pbstrNewLineItemsXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrResultXML = ((string)(results[0]));
        pbstrNewLineItemsXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.MatchPaymentInstrumentInfo", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void MatchPaymentInstrumentInfo(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTelenumericLastName, string bstrZipCode, string bstrPaymentInstrumentInfoXML, out string pbstrErrorXML, out int plAdminPUIDHigh, out int plAdminPUIDLow) {
        object[] results = this.Invoke("MatchPaymentInstrumentInfo", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTelenumericLastName,
                    bstrZipCode,
                    bstrPaymentInstrumentInfoXML});
        pbstrErrorXML = ((string)(results[0]));
        plAdminPUIDHigh = ((int)(results[1]));
        plAdminPUIDLow = ((int)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginMatchPaymentInstrumentInfo(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTelenumericLastName, string bstrZipCode, string bstrPaymentInstrumentInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("MatchPaymentInstrumentInfo", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrTelenumericLastName,
                    bstrZipCode,
                    bstrPaymentInstrumentInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndMatchPaymentInstrumentInfo(System.IAsyncResult asyncResult, out string pbstrErrorXML, out int plAdminPUIDHigh, out int plAdminPUIDLow) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        plAdminPUIDHigh = ((int)(results[1]));
        plAdminPUIDLow = ((int)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.ReinstateSubscription", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void ReinstateSubscription(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrSubscriptionId, int lReserved, string bstrCommentInfoXML, out string pbstrErrorXML, out string pbstrAmountChargedXML, out string pbstrSubscriptionStatusInfoXML) {
        object[] results = this.Invoke("ReinstateSubscription", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrSubscriptionId,
                    lReserved,
                    bstrCommentInfoXML});
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedXML = ((string)(results[1]));
        pbstrSubscriptionStatusInfoXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginReinstateSubscription(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrSubscriptionId, int lReserved, string bstrCommentInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ReinstateSubscription", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrSubscriptionId,
                    lReserved,
                    bstrCommentInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndReinstateSubscription(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrAmountChargedXML, out string pbstrSubscriptionStatusInfoXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrAmountChargedXML = ((string)(results[1]));
        pbstrSubscriptionStatusInfoXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetEligibleSwitchPITypes", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetEligibleSwitchPITypes(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrPaymentInstrumentId, out string pbstrErrorXML, out int plPITypeCount, out string pbstrPITypeSetXML) {
        object[] results = this.Invoke("GetEligibleSwitchPITypes", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrPaymentInstrumentId});
        pbstrErrorXML = ((string)(results[0]));
        plPITypeCount = ((int)(results[1]));
        pbstrPITypeSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetEligibleSwitchPITypes(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrPaymentInstrumentId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetEligibleSwitchPITypes", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrPaymentInstrumentId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetEligibleSwitchPITypes(System.IAsyncResult asyncResult, out string pbstrErrorXML, out int plPITypeCount, out string pbstrPITypeSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        plPITypeCount = ((int)(results[1]));
        pbstrPITypeSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.SendHCI", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void SendHCI(int lDelegateIdHigh, int lDelegateIdLow, string bstrAccountId, int lBillingPeriodId, string bstrLocale) {
        this.Invoke("SendHCI", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrAccountId,
                    lBillingPeriodId,
                    bstrLocale});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSendHCI(int lDelegateIdHigh, int lDelegateIdLow, string bstrAccountId, int lBillingPeriodId, string bstrLocale, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SendHCI", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrAccountId,
                    lBillingPeriodId,
                    bstrLocale}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSendHCI(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.OffsetLineItem2", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void OffsetLineItem2(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrLineItemId, int lFinancialReportingCode, bool fImmediatelySettle, string bstrAmount, string bstrCommentInfoXML, string bstrReservedXML, out string pbstrError, out string pbstrNewLineItemXML) {
        object[] results = this.Invoke("OffsetLineItem2", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrLineItemId,
                    lFinancialReportingCode,
                    fImmediatelySettle,
                    bstrAmount,
                    bstrCommentInfoXML,
                    bstrReservedXML});
        pbstrError = ((string)(results[0]));
        pbstrNewLineItemXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginOffsetLineItem2(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrLineItemId, int lFinancialReportingCode, bool fImmediatelySettle, string bstrAmount, string bstrCommentInfoXML, string bstrReservedXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("OffsetLineItem2", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrLineItemId,
                    lFinancialReportingCode,
                    fImmediatelySettle,
                    bstrAmount,
                    bstrCommentInfoXML,
                    bstrReservedXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndOffsetLineItem2(System.IAsyncResult asyncResult, out string pbstrError, out string pbstrNewLineItemXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrError = ((string)(results[0]));
        pbstrNewLineItemXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetPolicy", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetPolicy(string bstrPolicyGUID, int lPolicyVersion, string bstrLocale, out string pbstrPolicyInfoXML, out string pbstrErrorXML) {
        object[] results = this.Invoke("GetPolicy", new object[] {
                    bstrPolicyGUID,
                    lPolicyVersion,
                    bstrLocale});
        pbstrPolicyInfoXML = ((string)(results[0]));
        pbstrErrorXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetPolicy(string bstrPolicyGUID, int lPolicyVersion, string bstrLocale, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetPolicy", new object[] {
                    bstrPolicyGUID,
                    lPolicyVersion,
                    bstrLocale}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetPolicy(System.IAsyncResult asyncResult, out string pbstrPolicyInfoXML, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrPolicyInfoXML = ((string)(results[0]));
        pbstrErrorXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.ExtendSubscription", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void ExtendSubscription(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrSubscriptionId, int lNumberOfDays, string bstrCommentInfoXML, out string pbstrErrorXML, out string pbstrNewExpirationDate) {
        object[] results = this.Invoke("ExtendSubscription", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrSubscriptionId,
                    lNumberOfDays,
                    bstrCommentInfoXML});
        pbstrErrorXML = ((string)(results[0]));
        pbstrNewExpirationDate = ((string)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginExtendSubscription(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrSubscriptionId, int lNumberOfDays, string bstrCommentInfoXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ExtendSubscription", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrSubscriptionId,
                    lNumberOfDays,
                    bstrCommentInfoXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndExtendSubscription(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrNewExpirationDate) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrNewExpirationDate = ((string)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetAccountIdFromTokenId", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetAccountIdFromTokenId(int lDelegateIdHigh, int lDelegateIdLow, bool fFullData, string bstrTokenId, out string pbstrErrorXML, out int plAccountInfoCount, out string pbstrAccountInfoSetXML) {
        object[] results = this.Invoke("GetAccountIdFromTokenId", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    fFullData,
                    bstrTokenId});
        pbstrErrorXML = ((string)(results[0]));
        plAccountInfoCount = ((int)(results[1]));
        pbstrAccountInfoSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetAccountIdFromTokenId(int lDelegateIdHigh, int lDelegateIdLow, bool fFullData, string bstrTokenId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetAccountIdFromTokenId", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    fFullData,
                    bstrTokenId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetAccountIdFromTokenId(System.IAsyncResult asyncResult, out string pbstrErrorXML, out int plAccountInfoCount, out string pbstrAccountInfoSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        plAccountInfoCount = ((int)(results[1]));
        pbstrAccountInfoSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetTokenInfo", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetTokenInfo(int lDelegateIdHigh, int lDelegateIdLow, string bstrTokenId, out string pbstrErrorXML, out string pbstrTokenOrderXML) {
        object[] results = this.Invoke("GetTokenInfo", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTokenId});
        pbstrErrorXML = ((string)(results[0]));
        pbstrTokenOrderXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetTokenInfo(int lDelegateIdHigh, int lDelegateIdLow, string bstrTokenId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetTokenInfo", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTokenId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetTokenInfo(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrTokenOrderXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrTokenOrderXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetLineItemHistory", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetLineItemHistory(int delegateIdHigh, int delegateIdLow, string lineItemId, bool returnHistory, out string errorXml, out string lineItemHistorySetXml, out string mcv) {
        object[] results = this.Invoke("GetLineItemHistory", new object[] {
                    delegateIdHigh,
                    delegateIdLow,
                    lineItemId,
                    returnHistory});
        errorXml = ((string)(results[0]));
        lineItemHistorySetXml = ((string)(results[1]));
        mcv = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetLineItemHistory(int delegateIdHigh, int delegateIdLow, string lineItemId, bool returnHistory, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetLineItemHistory", new object[] {
                    delegateIdHigh,
                    delegateIdLow,
                    lineItemId,
                    returnHistory}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetLineItemHistory(System.IAsyncResult asyncResult, out string errorXml, out string lineItemHistorySetXml, out string mcv) {
        object[] results = this.EndInvoke(asyncResult);
        errorXml = ((string)(results[0]));
        lineItemHistorySetXml = ((string)(results[1]));
        mcv = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetExistingAccountsByCriteria", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetExistingAccountsByCriteria(int lDelegateIdHigh, int lDelegateIdLow, string bstrCriteriaXML, out string pbstrErrorXML, out int plAccountDetailCount, out string pbstrAccountDetailSetXML) {
        object[] results = this.Invoke("GetExistingAccountsByCriteria", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrCriteriaXML});
        pbstrErrorXML = ((string)(results[0]));
        plAccountDetailCount = ((int)(results[1]));
        pbstrAccountDetailSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetExistingAccountsByCriteria(int lDelegateIdHigh, int lDelegateIdLow, string bstrCriteriaXML, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetExistingAccountsByCriteria", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrCriteriaXML}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetExistingAccountsByCriteria(System.IAsyncResult asyncResult, out string pbstrErrorXML, out int plAccountDetailCount, out string pbstrAccountDetailSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        plAccountDetailCount = ((int)(results[1]));
        pbstrAccountDetailSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.AdjustGotoBAMDate", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void AdjustGotoBAMDate(int lRequesterIdHigh, int lRequesterIdLow, int lOffset, string bstrObjectId, out string pbstrErrorXML) {
        object[] results = this.Invoke("AdjustGotoBAMDate", new object[] {
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    lOffset,
                    bstrObjectId});
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginAdjustGotoBAMDate(int lRequesterIdHigh, int lRequesterIdLow, int lOffset, string bstrObjectId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AdjustGotoBAMDate", new object[] {
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    lOffset,
                    bstrObjectId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndAdjustGotoBAMDate(System.IAsyncResult asyncResult, out string pbstrErrorXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.BlacklistToken", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void BlacklistToken(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrToken, int lTokenType, string bstrEffectiveTime, string bstrSubscriptionAction, string bstrReason, string bstrDescription, out string pbstrErrorXML, out string pbstrBlacklistActionSetXML, out int plBlacklistActionSetCount) {
        object[] results = this.Invoke("BlacklistToken", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrToken,
                    lTokenType,
                    bstrEffectiveTime,
                    bstrSubscriptionAction,
                    bstrReason,
                    bstrDescription});
        pbstrErrorXML = ((string)(results[0]));
        pbstrBlacklistActionSetXML = ((string)(results[1]));
        plBlacklistActionSetCount = ((int)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginBlacklistToken(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrToken, int lTokenType, string bstrEffectiveTime, string bstrSubscriptionAction, string bstrReason, string bstrDescription, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("BlacklistToken", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrToken,
                    lTokenType,
                    bstrEffectiveTime,
                    bstrSubscriptionAction,
                    bstrReason,
                    bstrDescription}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndBlacklistToken(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrBlacklistActionSetXML, out int plBlacklistActionSetCount) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrBlacklistActionSetXML = ((string)(results[1]));
        plBlacklistActionSetCount = ((int)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.ActivateToken", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void ActivateToken(int delegateIdHigh, int delegateIdLow, string trackingGuid, string token, int tokenType, string externalReferenceId, string timeStamp, int committedStatus) {
        this.Invoke("ActivateToken", new object[] {
                    delegateIdHigh,
                    delegateIdLow,
                    trackingGuid,
                    token,
                    tokenType,
                    externalReferenceId,
                    timeStamp,
                    committedStatus});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginActivateToken(int delegateIdHigh, int delegateIdLow, string trackingGuid, string token, int tokenType, string externalReferenceId, string timeStamp, int committedStatus, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ActivateToken", new object[] {
                    delegateIdHigh,
                    delegateIdLow,
                    trackingGuid,
                    token,
                    tokenType,
                    externalReferenceId,
                    timeStamp,
                    committedStatus}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndActivateToken(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.DeactivateToken", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void DeactivateToken(int delegateIdHigh, int delegateIdLow, string trackingGuid, string token, int tokenType, string externalReferenceId, string timeStamp, int committedStatus) {
        this.Invoke("DeactivateToken", new object[] {
                    delegateIdHigh,
                    delegateIdLow,
                    trackingGuid,
                    token,
                    tokenType,
                    externalReferenceId,
                    timeStamp,
                    committedStatus});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginDeactivateToken(int delegateIdHigh, int delegateIdLow, string trackingGuid, string token, int tokenType, string externalReferenceId, string timeStamp, int committedStatus, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DeactivateToken", new object[] {
                    delegateIdHigh,
                    delegateIdLow,
                    trackingGuid,
                    token,
                    tokenType,
                    externalReferenceId,
                    timeStamp,
                    committedStatus}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndDeactivateToken(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetTokenInfoEx", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetTokenInfoEx(int lDelegateIdHigh, int lDelegateIdLow, string bstrToken, int lTokenType, out string pbstrErrorXML, out string pbstrTokenOrderXML) {
        object[] results = this.Invoke("GetTokenInfoEx", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrToken,
                    lTokenType});
        pbstrErrorXML = ((string)(results[0]));
        pbstrTokenOrderXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetTokenInfoEx(int lDelegateIdHigh, int lDelegateIdLow, string bstrToken, int lTokenType, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetTokenInfoEx", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrToken,
                    lTokenType}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetTokenInfoEx(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrTokenOrderXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrTokenOrderXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.DeliverToken", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void DeliverToken(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrFilterInfoXML, string bstrSessionKey, out string pbstrErrorXML, out string pbstrEncryptedTokenSetXML) {
        object[] results = this.Invoke("DeliverToken", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrFilterInfoXML,
                    bstrSessionKey});
        pbstrErrorXML = ((string)(results[0]));
        pbstrEncryptedTokenSetXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginDeliverToken(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrFilterInfoXML, string bstrSessionKey, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DeliverToken", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    lRequesterIdHigh,
                    lRequesterIdLow,
                    bstrFilterInfoXML,
                    bstrSessionKey}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndDeliverToken(System.IAsyncResult asyncResult, out string pbstrErrorXML, out string pbstrEncryptedTokenSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        pbstrEncryptedTokenSetXML = ((string)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetProductClasses", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetProductClasses(out string productClassSetXml) {
        object[] results = this.Invoke("GetProductClasses", new object[0]);
        productClassSetXml = ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetProductClasses(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetProductClasses", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetProductClasses(System.IAsyncResult asyncResult, out string productClassSetXml) {
        object[] results = this.EndInvoke(asyncResult);
        productClassSetXml = ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.IssueTokenTrusted", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void IssueTokenTrusted(string partnerName, int delegateIdHigh, int delegateIdLow, string trackingGuid, string token, int tokenType, string externalReferenceId) {
        this.Invoke("IssueTokenTrusted", new object[] {
                    partnerName,
                    delegateIdHigh,
                    delegateIdLow,
                    trackingGuid,
                    token,
                    tokenType,
                    externalReferenceId});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginIssueTokenTrusted(string partnerName, int delegateIdHigh, int delegateIdLow, string trackingGuid, string token, int tokenType, string externalReferenceId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("IssueTokenTrusted", new object[] {
                    partnerName,
                    delegateIdHigh,
                    delegateIdLow,
                    trackingGuid,
                    token,
                    tokenType,
                    externalReferenceId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndIssueTokenTrusted(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.UnIssueTokenTrusted", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void UnIssueTokenTrusted(string partnerName, int delegateIdHigh, int delegateIdLow, string trackingGuid, string token, int tokenType, string externalReferenceId) {
        this.Invoke("UnIssueTokenTrusted", new object[] {
                    partnerName,
                    delegateIdHigh,
                    delegateIdLow,
                    trackingGuid,
                    token,
                    tokenType,
                    externalReferenceId});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUnIssueTokenTrusted(string partnerName, int delegateIdHigh, int delegateIdLow, string trackingGuid, string token, int tokenType, string externalReferenceId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UnIssueTokenTrusted", new object[] {
                    partnerName,
                    delegateIdHigh,
                    delegateIdLow,
                    trackingGuid,
                    token,
                    tokenType,
                    externalReferenceId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndUnIssueTokenTrusted(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.ReconcileTokenTrusted", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void ReconcileTokenTrusted(string partnerName, int delegateIdHigh, int delegateIdLow, string token, int tokenType, string externalReferenceId, string timeStamp, int action, out int reconStatus) {
        object[] results = this.Invoke("ReconcileTokenTrusted", new object[] {
                    partnerName,
                    delegateIdHigh,
                    delegateIdLow,
                    token,
                    tokenType,
                    externalReferenceId,
                    timeStamp,
                    action});
        reconStatus = ((int)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginReconcileTokenTrusted(string partnerName, int delegateIdHigh, int delegateIdLow, string token, int tokenType, string externalReferenceId, string timeStamp, int action, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ReconcileTokenTrusted", new object[] {
                    partnerName,
                    delegateIdHigh,
                    delegateIdLow,
                    token,
                    tokenType,
                    externalReferenceId,
                    timeStamp,
                    action}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndReconcileTokenTrusted(System.IAsyncResult asyncResult, out int reconStatus) {
        object[] results = this.EndInvoke(asyncResult);
        reconStatus = ((int)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetReplacementToken", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetReplacementToken(int delegateIdHigh, int delegateIdLow, int replacementPuidHigh, int replacementPuidLow, int replacementReasonCode, string token, int tokenType, int tokenSignature, string emailAddress, string sessionKey, string trackingGuid, out string replacementPin, out int signature, out string sequenceNumber) {
        object[] results = this.Invoke("GetReplacementToken", new object[] {
                    delegateIdHigh,
                    delegateIdLow,
                    replacementPuidHigh,
                    replacementPuidLow,
                    replacementReasonCode,
                    token,
                    tokenType,
                    tokenSignature,
                    emailAddress,
                    sessionKey,
                    trackingGuid});
        replacementPin = ((string)(results[0]));
        signature = ((int)(results[1]));
        sequenceNumber = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetReplacementToken(int delegateIdHigh, int delegateIdLow, int replacementPuidHigh, int replacementPuidLow, int replacementReasonCode, string token, int tokenType, int tokenSignature, string emailAddress, string sessionKey, string trackingGuid, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetReplacementToken", new object[] {
                    delegateIdHigh,
                    delegateIdLow,
                    replacementPuidHigh,
                    replacementPuidLow,
                    replacementReasonCode,
                    token,
                    tokenType,
                    tokenSignature,
                    emailAddress,
                    sessionKey,
                    trackingGuid}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetReplacementToken(System.IAsyncResult asyncResult, out string replacementPin, out int signature, out string sequenceNumber) {
        object[] results = this.EndInvoke(asyncResult);
        replacementPin = ((string)(results[0]));
        signature = ((int)(results[1]));
        sequenceNumber = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetUnconditionalReplacementToken", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetUnconditionalReplacementToken(int delegateIdHigh, int delegateIdLow, int replacementPuidHigh, int replacementPuidLow, bool tiePinRedemptionToPuid, int replacementReasonCode, string tokenClassGuid, string emailAddress, string sessionKey, string trackingGuid, out string replacementPin, out int signature, out string sequenceNumber) {
        object[] results = this.Invoke("GetUnconditionalReplacementToken", new object[] {
                    delegateIdHigh,
                    delegateIdLow,
                    replacementPuidHigh,
                    replacementPuidLow,
                    tiePinRedemptionToPuid,
                    replacementReasonCode,
                    tokenClassGuid,
                    emailAddress,
                    sessionKey,
                    trackingGuid});
        replacementPin = ((string)(results[0]));
        signature = ((int)(results[1]));
        sequenceNumber = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetUnconditionalReplacementToken(int delegateIdHigh, int delegateIdLow, int replacementPuidHigh, int replacementPuidLow, bool tiePinRedemptionToPuid, int replacementReasonCode, string tokenClassGuid, string emailAddress, string sessionKey, string trackingGuid, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUnconditionalReplacementToken", new object[] {
                    delegateIdHigh,
                    delegateIdLow,
                    replacementPuidHigh,
                    replacementPuidLow,
                    tiePinRedemptionToPuid,
                    replacementReasonCode,
                    tokenClassGuid,
                    emailAddress,
                    sessionKey,
                    trackingGuid}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetUnconditionalReplacementToken(System.IAsyncResult asyncResult, out string replacementPin, out int signature, out string sequenceNumber) {
        object[] results = this.EndInvoke(asyncResult);
        replacementPin = ((string)(results[0]));
        signature = ((int)(results[1]));
        sequenceNumber = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.ValidateToken", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void ValidateToken(int delegateIdHigh, int delegateIdLow, string tokenClassGuid, string pin, string sequenceNumber, int signature, string partNumber) {
        this.Invoke("ValidateToken", new object[] {
                    delegateIdHigh,
                    delegateIdLow,
                    tokenClassGuid,
                    pin,
                    sequenceNumber,
                    signature,
                    partNumber});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginValidateToken(int delegateIdHigh, int delegateIdLow, string tokenClassGuid, string pin, string sequenceNumber, int signature, string partNumber, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ValidateToken", new object[] {
                    delegateIdHigh,
                    delegateIdLow,
                    tokenClassGuid,
                    pin,
                    sequenceNumber,
                    signature,
                    partNumber}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndValidateToken(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetReplacementTokenFromPuid", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetReplacementTokenFromPuid(int delegateIdHigh, int delegateIdLow, int searchPuidHigh, int searchPuidLow, out int tokenInfoReturnedCount, out string replacementTokenSetXml) {
        object[] results = this.Invoke("GetReplacementTokenFromPuid", new object[] {
                    delegateIdHigh,
                    delegateIdLow,
                    searchPuidHigh,
                    searchPuidLow});
        tokenInfoReturnedCount = ((int)(results[0]));
        replacementTokenSetXml = ((string)(results[1]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetReplacementTokenFromPuid(int delegateIdHigh, int delegateIdLow, int searchPuidHigh, int searchPuidLow, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetReplacementTokenFromPuid", new object[] {
                    delegateIdHigh,
                    delegateIdLow,
                    searchPuidHigh,
                    searchPuidLow}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetReplacementTokenFromPuid(System.IAsyncResult asyncResult, out int tokenInfoReturnedCount, out string replacementTokenSetXml) {
        object[] results = this.EndInvoke(asyncResult);
        tokenInfoReturnedCount = ((int)(results[0]));
        replacementTokenSetXml = ((string)(results[1]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetTokenClasses", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetTokenClasses(string bstrProductClassGuidFilter, int lReturnCountMax, out int plAdditionalTokenClassCount, out int plTokenClassReturnedCount, out string pbstrTokenClassSetXML) {
        object[] results = this.Invoke("GetTokenClasses", new object[] {
                    bstrProductClassGuidFilter,
                    lReturnCountMax});
        plAdditionalTokenClassCount = ((int)(results[0]));
        plTokenClassReturnedCount = ((int)(results[1]));
        pbstrTokenClassSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetTokenClasses(string bstrProductClassGuidFilter, int lReturnCountMax, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetTokenClasses", new object[] {
                    bstrProductClassGuidFilter,
                    lReturnCountMax}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetTokenClasses(System.IAsyncResult asyncResult, out int plAdditionalTokenClassCount, out int plTokenClassReturnedCount, out string pbstrTokenClassSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        plAdditionalTokenClassCount = ((int)(results[0]));
        plTokenClassReturnedCount = ((int)(results[1]));
        pbstrTokenClassSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.MarkTokenDistributionStatus", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void MarkTokenDistributionStatus(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrTokenId, int lTokenType, string bstrStatusName, string bstrStatusValue, string bstrPartNumber) {
        this.Invoke("MarkTokenDistributionStatus", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrTokenId,
                    lTokenType,
                    bstrStatusName,
                    bstrStatusValue,
                    bstrPartNumber});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginMarkTokenDistributionStatus(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrTokenId, int lTokenType, string bstrStatusName, string bstrStatusValue, string bstrPartNumber, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("MarkTokenDistributionStatus", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    bstrTrackingGUID,
                    bstrTokenId,
                    lTokenType,
                    bstrStatusName,
                    bstrStatusValue,
                    bstrPartNumber}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndMarkTokenDistributionStatus(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.RemovePMNBasedServices", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void RemovePMNBasedServices(int lRequesterIdHigh, int lRequesterIdLow) {
        this.Invoke("RemovePMNBasedServices", new object[] {
                    lRequesterIdHigh,
                    lRequesterIdLow});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRemovePMNBasedServices(int lRequesterIdHigh, int lRequesterIdLow, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RemovePMNBasedServices", new object[] {
                    lRequesterIdHigh,
                    lRequesterIdLow}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndRemovePMNBasedServices(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetAccountIdFromToken", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
    public void GetAccountIdFromToken(int lDelegateIdHigh, int lDelegateIdLow, bool fFullData, string bstrTokenId, int lTokenType, out string pbstrErrorXML, out int plAccountInfoCount, out string pbstrAccountInfoSetXML) {
        object[] results = this.Invoke("GetAccountIdFromToken", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    fFullData,
                    bstrTokenId,
                    lTokenType});
        pbstrErrorXML = ((string)(results[0]));
        plAccountInfoCount = ((int)(results[1]));
        pbstrAccountInfoSetXML = ((string)(results[2]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetAccountIdFromToken(int lDelegateIdHigh, int lDelegateIdLow, bool fFullData, string bstrTokenId, int lTokenType, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetAccountIdFromToken", new object[] {
                    lDelegateIdHigh,
                    lDelegateIdLow,
                    fFullData,
                    bstrTokenId,
                    lTokenType}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndGetAccountIdFromToken(System.IAsyncResult asyncResult, out string pbstrErrorXML, out int plAccountInfoCount, out string pbstrAccountInfoSetXML) {
        object[] results = this.EndInvoke(asyncResult);
        pbstrErrorXML = ((string)(results[0]));
        plAccountInfoCount = ((int)(results[1]));
        pbstrAccountInfoSetXML = ((string)(results[2]));
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\SCS\5.0\inc\bdkerror.h ===
#ifndef __bdkerror_h__
#define __bdkerror_h__

//
//  Values are 32 bit values layed out as follows:
//
//   3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1
//   1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
//  +---+-+-+-----------------------+-------------------------------+
//  |Sev|C|R|     Facility          |               Code            |
//  +---+-+-+-----------------------+-------------------------------+
//
//  where
//
//      Sev - is the severity code
//
//          00 - Success
//          01 - Informational
//          10 - Warning
//          11 - Error
//
//      C - is the Customer code flag
//
//      R - is a reserved bit
//
//      Facility - is the facility code
//
//      Code - is the facility's status code
//
//
// Define the facility codes
//


//
// Define the severity codes
//


//
// MessageId: BDK_E_BAN_NULL_INPUT_PARAMETER
//
// MessageText:
//
//  Null input parameter passed to a "ban" API.
//
#define BDK_E_BAN_NULL_INPUT_PARAMETER   ((HRESULT)0x80047594L)


//
// MessageId: BDK_E_ALREADY_BANNED
//
// MessageText:
//
//  Already banned.
//
#define BDK_E_ALREADY_BANNED             ((HRESULT)0x80047599L)


//
// MessageId: BDK_E_NOT_BANNED
//
// MessageText:
//
//  Not banned.
//
#define BDK_E_NOT_BANNED                 ((HRESULT)0x8004759EL)


//
// MessageId: BDK_E_BANNEDPERSON
//
// MessageText:
//
//  This account is banned.
//
#define BDK_E_BANNEDPERSON               ((HRESULT)0x800475BCL)


//
// MessageId: BDK_E_COUNTRY_CURRENCY_PI_MISMATCH
//
// MessageText:
//
//  Country/currency/payment instrument type mismatch.
//
#define BDK_E_COUNTRY_CURRENCY_PI_MISMATCH ((HRESULT)0x800475C1L)


//
// MessageId: BDK_E_INVALID_PAYMENT_INSTRUMENT_TYPE
//
// MessageText:
//
//  Invalid payment instrument type.
//
#define BDK_E_INVALID_PAYMENT_INSTRUMENT_TYPE ((HRESULT)0x800475C8L)


//
// MessageId: BDK_E_INVALID_CREDIT_CARD_TYPE
//
// MessageText:
//
//  Invalid credit card type.
//
#define BDK_E_INVALID_CREDIT_CARD_TYPE   ((HRESULT)0x800475CBL)


//
// MessageId: BDK_E_DECRYPTION_FAILURE
//
// MessageText:
//
//  Decryption failed. Verify that data is encrypted correctly.
//
#define BDK_E_DECRYPTION_FAILURE         ((HRESULT)0x800475D0L)


//
// MessageId: BDK_E_BANNED_PAYMENT_INSTRUMENT
//
// MessageText:
//
//  Payment instrument is banned.
//
#define BDK_E_BANNED_PAYMENT_INSTRUMENT  ((HRESULT)0x800475C6L)


//
// MessageId: BDK_E_INVALID_DD_ACCOUNT
//
// MessageText:
//
//  Direct debit account validation failed.
//
#define BDK_E_INVALID_DD_ACCOUNT         ((HRESULT)0x800475E4L)


//
// MessageId: BDK_E_DD_CONCATENATED_STRING_LENGTH_EXCEEDS_24
//
// MessageText:
//
//  Concatenated direct debit account number exceeds 24 characters.
//
#define BDK_E_DD_CONCATENATED_STRING_LENGTH_EXCEEDS_24 ((HRESULT)0x800475E9L)


//
// MessageId: BDK_E_INVALID_CREDIT_CARD_NUMBER
//
// MessageText:
//
//  Invalid credit card number.
//
#define BDK_E_INVALID_CREDIT_CARD_NUMBER ((HRESULT)0x80047530L)


//
// MessageId: BDK_E_CREDIT_CARD_EXPIRED
//
// MessageText:
//
//  Credit card has already expired.
//
#define BDK_E_CREDIT_CARD_EXPIRED        ((HRESULT)0x80047531L)


//
// MessageId: BDK_E_AVS_FAILED
//
// MessageText:
//
//  Address verification failed.
//
#define BDK_E_AVS_FAILED                 ((HRESULT)0x8004760CL)


//
// MessageId: BDK_E_NO_AVS_RESULT
//
// MessageText:
//
//  Address verification through AVS did not provide a result.
//
#define BDK_E_NO_AVS_RESULT              ((HRESULT)0x8004760DL)


//
// MessageId: BDK_E_AUTHORIZATION_FAILED
//
// MessageText:
//
//  Credit card authorization failed.
//
#define BDK_E_AUTHORIZATION_FAILED       ((HRESULT)0x80047611L)


//
// MessageId: BDK_E_PAYMENT_PROVIDER_CONNECTION_FAILED
//
// MessageText:
//
//  Unable to connect to payment provider.
//
#define BDK_E_PAYMENT_PROVIDER_CONNECTION_FAILED ((HRESULT)0x8004761BL)


//
// MessageId: BDK_E_DD_INVALID_COUNTRY
//
// MessageText:
//
//  Invalid country code.
//
#define BDK_E_DD_INVALID_COUNTRY         ((HRESULT)0x8004762FL)


//
// MessageId: BDK_E_DD_INVALID_ACCOUNT_FORMAT
//
// MessageText:
//
//  Invalid account format.
//
#define BDK_E_DD_INVALID_ACCOUNT_FORMAT  ((HRESULT)0x80047634L)


//
// MessageId: BDK_E_DD_INVALID_BANKCODE_FORMAT
//
// MessageText:
//
//  Invalid bank code format.
//
#define BDK_E_DD_INVALID_BANKCODE_FORMAT ((HRESULT)0x80047639L)


//
// MessageId: BDK_E_DD_INVALID_BRANCHCODE_FORMAT
//
// MessageText:
//
//  Invalid branch code format.
//
#define BDK_E_DD_INVALID_BRANCHCODE_FORMAT ((HRESULT)0x8004763EL)


//
// MessageId: BDK_E_DD_INVALID_CHECKDIGIT_FORMAT
//
// MessageText:
//
//  Invalid check digit format.
//
#define BDK_E_DD_INVALID_CHECKDIGIT_FORMAT ((HRESULT)0x80047643L)


//
// MessageId: BDK_E_DD_ACCOUNT_MISSING
//
// MessageText:
//
//  Account missing.
//
#define BDK_E_DD_ACCOUNT_MISSING         ((HRESULT)0x80047648L)


//
// MessageId: BDK_E_DD_BANKCODE_MISSING
//
// MessageText:
//
//  Bank code missing.
//
#define BDK_E_DD_BANKCODE_MISSING        ((HRESULT)0x8004764DL)


//
// MessageId: BDK_E_DD_BRANCHCODE_MISSING
//
// MessageText:
//
//  Branch code missing.
//
#define BDK_E_DD_BRANCHCODE_MISSING      ((HRESULT)0x80047652L)


//
// MessageId: BDK_E_DD_CHECKDIGIT_MISSING
//
// MessageText:
//
//  Check digit missing.
//
#define BDK_E_DD_CHECKDIGIT_MISSING      ((HRESULT)0x80047657L)


//
// MessageId: BDK_E_DD_ERROR_IN_FIELDS
//
// MessageText:
//
//  Some fields have errors.
//
#define BDK_E_DD_ERROR_IN_FIELDS         ((HRESULT)0x8004765CL)


//
// MessageId: BDK_E_DD_INVALID_ACCOUNT_VALUE
//
// MessageText:
//
//  Invalid account code.
//
#define BDK_E_DD_INVALID_ACCOUNT_VALUE   ((HRESULT)0x80047661L)


//
// MessageId: BDK_E_DD_INVALID_BANKCODE_VALUE
//
// MessageText:
//
//  Invalid bank code.
//
#define BDK_E_DD_INVALID_BANKCODE_VALUE  ((HRESULT)0x80047666L)


//
// MessageId: BDK_E_DD_INVALID_BRANCHCODE_VALUE
//
// MessageText:
//
//  Invalid branch code.
//
#define BDK_E_DD_INVALID_BRANCHCODE_VALUE ((HRESULT)0x8004766BL)


//
// MessageId: BDK_E_DD_INVALID_CHECKDIGIT_VALUE
//
// MessageText:
//
//  Invalid check digit.
//
#define BDK_E_DD_INVALID_CHECKDIGIT_VALUE ((HRESULT)0x80047670L)


//
// MessageId: BDK_E_DD_INVALID_ACCOUNT_HOLDER_NAME
//
// MessageText:
//
//  Account holder name not specified or it exceeds 35 characters.
//
#define BDK_E_DD_INVALID_ACCOUNT_HOLDER_NAME ((HRESULT)0x8004767AL)


//
// MessageId: BDK_E_PAYMENT_PROVIDER_CONNECTION_TIMEOUT
//
// MessageText:
//
//  Payment provider connection timed out.
//
#define BDK_E_PAYMENT_PROVIDER_CONNECTION_TIMEOUT ((HRESULT)0x8004767FL)


//
// MessageId: BDK_E_INVALID_WHOLESALE_PARTNER
//
// MessageText:
//
//  The wholesale partner specified is invalid.
//
#define BDK_E_INVALID_WHOLESALE_PARTNER  ((HRESULT)0x80047684L)


//
// MessageId: BDK_E_PI_NOT_SUPPORTED
//
// MessageText:
//
//  PI Not Supported in this version
//
#define BDK_E_PI_NOT_SUPPORTED           ((HRESULT)0x80047693L)


//
// MessageId: BDK_E_UPS_NOT_UPDATED
//
// MessageText:
//
//  A fatal error occured updating the UPS entries for all PUIDs relating to i_billable_acct_id %1. This account should be investigated and the UPS entries for PUIDs attached to it should be updated manually.
//
#define BDK_E_UPS_NOT_UPDATED            ((HRESULT)0x8004769DL)


//
// MessageId: BDK_E_DD_UNSUPPORTED
//
// MessageText:
//
//  This branch will not support Direct Debit transactions.
//
#define BDK_E_DD_UNSUPPORTED             ((HRESULT)0x800476A2L)


//
// MessageId: BDK_E_DD_MPF_NON_XML_RESPONSE
//
// MessageText:
//
//  Internal error, Return from MPF is not in XML format.
//
#define BDK_E_DD_MPF_NON_XML_RESPONSE    ((HRESULT)0x800476A7L)


//
// MessageId: BDK_E_DD_MPF_INCORRECT_XML_FORMAT
//
// MessageText:
//
//  Internal error, Return XML from MPF is not in correct format.
//
#define BDK_E_DD_MPF_INCORRECT_XML_FORMAT ((HRESULT)0x800476ACL)


//
// MessageId: BDK_E_DD_GC_NON_XML_RESPONSE
//
// MessageText:
//
//  Global Collect error, Return from Global Collect is not in XML format.
//
#define BDK_E_DD_GC_NON_XML_RESPONSE     ((HRESULT)0x800476B1L)


//
// MessageId: BDK_E_DD_GC_INCORRECT_XML_FORMAT
//
// MessageText:
//
//  Global Collect error, Return XML from Global Collect is not in correct format.
//
#define BDK_E_DD_GC_INCORRECT_XML_FORMAT ((HRESULT)0x800476B6L)


//
// MessageId: BDK_E_DD_GC_RETURNED_NOK_RESULT
//
// MessageText:
//
//  Global collect failed to process this request, returned NOT OK result.
//
#define BDK_E_DD_GC_RETURNED_NOK_RESULT  ((HRESULT)0x800476BBL)


//
// MessageId: BDK_E_DD_GC_CHECK_INCOMPLETE
//
// MessageText:
//
//  Direct Debit account Check performed by Global Collect is not complete for this account.
//
#define BDK_E_DD_GC_CHECK_INCOMPLETE     ((HRESULT)0x800476C0L)


//
// MessageId: BDK_E_DD_OPENING_GC_XML_CHECKSPERFORMED
//
// MessageText:
//
//  Global Collect error, Return XML from Global Collect is not in correct format. Error in CHECKSPERFORMED node of the return XML.
//
#define BDK_E_DD_OPENING_GC_XML_CHECKSPERFORMED ((HRESULT)0x800476C5L)


//
// MessageId: BDK_E_DD_GC_XML_INVALID_CHECK_RESULT
//
// MessageText:
//
//  Global Collect error, Return XML from Global Collect is not in correct format. Data within CHECKSPERFORMED nodes are invalid.
//
#define BDK_E_DD_GC_XML_INVALID_CHECK_RESULT ((HRESULT)0x800476CAL)


//
// MessageId: BDK_E_DD_GC_INVALID_RFBANKCODE
//
// MessageText:
//
//  Global collect returned non null Reformatted Bank Code though the input Bank code was blank.
//
#define BDK_E_DD_GC_INVALID_RFBANKCODE   ((HRESULT)0x800476CFL)


//
// MessageId: BDK_E_INVALID_PAYMENT_INSTRUMENT_DETAILS
//
// MessageText:
//
//  Invalid payment instrument details.
//
#define BDK_E_INVALID_PAYMENT_INSTRUMENT_DETAILS ((HRESULT)0x800476D9L)


//
// MessageId: BDK_E_INVALID_BAN_REASON_CODE
//
// MessageText:
//
//  Invalid ban reason code.
//
#define BDK_E_INVALID_BAN_REASON_CODE    ((HRESULT)0x800476DEL)


//
// MessageId: BDK_E_INVALID_CVM_CODE
//
// MessageText:
//
//  Invalid encrypted CVM code.
//
#define BDK_E_INVALID_CVM_CODE           ((HRESULT)0x800476E3L)


//
// MessageId: BDK_E_UNEXPECTED_CVM_RESPONSE_CODE
//
// MessageText:
//
//  Unexpected CVM response code.
//
#define BDK_E_UNEXPECTED_CVM_RESPONSE_CODE ((HRESULT)0x800476E8L)


//
// MessageId: BDK_E_CVM_FAILED
//
// MessageText:
//
//  CVM check failed.
//
#define BDK_E_CVM_FAILED                 ((HRESULT)0x800476EDL)


//
// MessageId: BDK_E_FREQUENCY_CHECK_FAILED
//
// MessageText:
//
//  Frequency check failed.
//
#define BDK_E_FREQUENCY_CHECK_FAILED     ((HRESULT)0x800476F2L)


//
// MessageId: BDK_E_DD_INVALID_MERCHANT_INDEX
//
// MessageText:
//
//  Invalid merchant index.
//
#define BDK_E_DD_INVALID_MERCHANT_INDEX  ((HRESULT)0x800476F7L)


//
// MessageId: BDK_E_DD_DUPLICATE_MRN
//
// MessageText:
//
//  Duplicate merchant reference.
//
#define BDK_E_DD_DUPLICATE_MRN           ((HRESULT)0x800476FCL)


//
// MessageId: BDK_E_DD_UNKNOWN_VALIDATION_FAILURE
//
// MessageText:
//
//  Account validation failed.
//
#define BDK_E_DD_UNKNOWN_VALIDATION_FAILURE ((HRESULT)0x80047701L)


//
// MessageId: BDK_ERROR_DD_BANK_ACCOUNT_TYPE_MUST_BE_NULL
//
// MessageText:
//
//  Bank account type may not be specified for this country.
//
#define BDK_ERROR_DD_BANK_ACCOUNT_TYPE_MUST_BE_NULL ((HRESULT)0x80047706L)


//
// MessageId: BDK_ERROR_DD_BANK_ACCOUNT_TYPE_MAY_NOT_BE_NULL
//
// MessageText:
//
//  Bank account type is required for this country.
//
#define BDK_ERROR_DD_BANK_ACCOUNT_TYPE_MAY_NOT_BE_NULL ((HRESULT)0x8004770BL)


//
// MessageId: BDK_E_DD_RISK_DECLINE
//
// MessageText:
//
//  Risk check failed.
//
#define BDK_E_DD_RISK_DECLINE            ((HRESULT)0x80047715L)


//
// MessageId: BDK_E_UNABLE_TO_VALIDATE_TAX_ID
//
// MessageText:
//
//  Unable to validate the tax ID.
//
#define BDK_E_UNABLE_TO_VALIDATE_TAX_ID  ((HRESULT)0x80047724L)


//
// MessageId: BDK_E_TAX_ID_UPDATE_ATTEMPTS_EXCEEDED
//
// MessageText:
//
//  Number of updates allowed in a period has exceeded the maximum limit.
//
#define BDK_E_TAX_ID_UPDATE_ATTEMPTS_EXCEEDED ((HRESULT)0x80047729L)


//
// MessageId: BDK_E_EXTERNAL_VENDOR_ERROR
//
// MessageText:
//
//  External vendor error.
//
#define BDK_E_EXTERNAL_VENDOR_ERROR      ((HRESULT)0x8004772EL)


//
// MessageId: BDK_E_ALREADY_IN_SPECIFIED_STATE
//
// MessageText:
//
//  Object is already in the specified state.
//
#define BDK_E_ALREADY_IN_SPECIFIED_STATE ((HRESULT)0x80049C41L)


//
// MessageId: BDK_E_MISSING_SEARCH_CRITERIA
//
// MessageText:
//
//  Required search criteria field missing. Either a phone number or both first name and last name is required.
//
#define BDK_E_MISSING_SEARCH_CRITERIA    ((HRESULT)0x80049C44L)


//
// MessageId: BDK_E_REQUIRED_FIELD_MISSING
//
// MessageText:
//
//  Required field missing.
//
#define BDK_E_REQUIRED_FIELD_MISSING     ((HRESULT)0x80049C45L)


//
// MessageId: BDK_E_ACTIVE_SUBSCRIPTIONS
//
// MessageText:
//
//  The account has subscriptions.
//
#define BDK_E_ACTIVE_SUBSCRIPTIONS       ((HRESULT)0x80049C46L)


//
// MessageId: BDK_E_UNEXPECTED_FIELD
//
// MessageText:
//
//  Unexpected field
//
#define BDK_E_UNEXPECTED_FIELD           ((HRESULT)0x80049C47L)


//
// MessageId: BDK_E_INVALID_ACCOUNT_SOUCE
//
// MessageText:
//
//  Invalid account source.
//
#define BDK_E_INVALID_ACCOUNT_SOUCE      ((HRESULT)0x80049C4DL)


//
// MessageId: BDK_E_INVALID_CREATION_DATE
//
// MessageText:
//
//  Creation date/time cannot be later than current date/time.
//
#define BDK_E_INVALID_CREATION_DATE      ((HRESULT)0x80049C4EL)


//
// MessageId: BDK_E_EXCEEDING_TAX_EXEMPT_LIMITS
//
// MessageText:
//
//  No more tax exemptions are allowed for this account.
//
#define BDK_E_EXCEEDING_TAX_EXEMPT_LIMITS ((HRESULT)0x80049C55L)


//
// MessageId: BDK_E_GENERATE_NEXT_ID
//
// MessageText:
//
//  Generating next ID.
//
#define BDK_E_GENERATE_NEXT_ID           ((HRESULT)0x80049C59L)


//
// MessageId: BDK_E_INVALID_STATE_FOR_COUNTRY
//
// MessageText:
//
//  State invalid for the country.
//
#define BDK_E_INVALID_STATE_FOR_COUNTRY  ((HRESULT)0x80049C5FL)


//
// MessageId: BDK_E_ADDRESS_COUNTRY_ACCOUNT_MISMATCH
//
// MessageText:
//
//  Country for address provided does not match existing country for account.
//
#define BDK_E_ADDRESS_COUNTRY_ACCOUNT_MISMATCH ((HRESULT)0x80049C61L)


//
// MessageId: BDK_E_OFFERING_COUNTRY_ACCOUNT_MISMATCH
//
// MessageText:
//
//  The offering requested is not available in the country of this account.
//
#define BDK_E_OFFERING_COUNTRY_ACCOUNT_MISMATCH ((HRESULT)0x80049C62L)


//
// MessageId: BDK_E_INVALID_BILLABLE_ACCOUNT_ID
//
// MessageText:
//
//  Invalid account.
//
#define BDK_E_INVALID_BILLABLE_ACCOUNT_ID ((HRESULT)0x80049CC2L)


//
// MessageId: BDK_E_INVALID_BILLABLE_ACCOUNT_STATUS_ID
//
// MessageText:
//
//  Invalid account status.
//
#define BDK_E_INVALID_BILLABLE_ACCOUNT_STATUS_ID ((HRESULT)0x80049CC7L)


//
// MessageId: BDK_E_INVALID_PHONE_TYPE
//
// MessageText:
//
//  Invalid phone type.
//
#define BDK_E_INVALID_PHONE_TYPE         ((HRESULT)0x80049CD6L)


//
// MessageId: BDK_E_INVALID_OFFERING_ID
//
// MessageText:
//
//  Invalid offering.
//
#define BDK_E_INVALID_OFFERING_ID        ((HRESULT)0x80049CE5L)


//
// MessageId: BDK_E_INVALID_COUNTRY_CODE
//
// MessageText:
//
//  Invalid country code.
//
#define BDK_E_INVALID_COUNTRY_CODE       ((HRESULT)0x80049CEAL)


//
// MessageId: BDK_E_INVALID_ADDRESS_ID
//
// MessageText:
//
//  Invalid address ID.
//
#define BDK_E_INVALID_ADDRESS_ID         ((HRESULT)0x80049CEFL)


//
// MessageId: BDK_E_INVALID_PAYMENT_METHOD_ID
//
// MessageText:
//
//  Invalid payment instrument ID.
//
#define BDK_E_INVALID_PAYMENT_METHOD_ID  ((HRESULT)0x80049CF9L)


//
// MessageId: BDK_E_SUBSCRIPTION_ALREADY_CANCELED
//
// MessageText:
//
//  Subscription is already cancelled.
//
#define BDK_E_SUBSCRIPTION_ALREADY_CANCELED ((HRESULT)0x80049D08L)


//
// MessageId: BDK_E_DELAYED_EXPIRE_ALREADY_PENDING
//
// MessageText:
//
//  A delayed expire request is already pending and should not be requested again.
//
#define BDK_E_DELAYED_EXPIRE_ALREADY_PENDING ((HRESULT)0x80049D0AL)


//
// MessageId: BDK_E_DELAYED_EXPIRE_NOT_PENDING
//
// MessageText:
//
//  A delayed expire is not pending and cannot be undone.
//
#define BDK_E_DELAYED_EXPIRE_NOT_PENDING ((HRESULT)0x80049D0BL)


//
// MessageId: BDK_E_DELAYED_EXPIRE_NOT_SUPPORTED
//
// MessageText:
//
//  A delayed expire is not support unless the subscription is active with no term commits.
//
#define BDK_E_DELAYED_EXPIRE_NOT_SUPPORTED ((HRESULT)0x80049D0CL)


//
// MessageId: BDK_E_INVALID_CANCEL_DATE
//
// MessageText:
//
//  The value specified for the cancel option/date should be DELAYED_EXPIRE, UNDO_DELAYED_EXPIRE, IMMEDIATE_EXPIRE or IMMEDIATE_CANCEL.
//
#define BDK_E_INVALID_CANCEL_DATE        ((HRESULT)0x80049D09L)


//
// MessageId: BDK_E_INVALID_SUBSCRIPTION_ID
//
// MessageText:
//
//  Invalid subscription ID.
//
#define BDK_E_INVALID_SUBSCRIPTION_ID    ((HRESULT)0x80049D0DL)


//
// MessageId: BDK_E_INVALID_PERIOD_TO_PROCESS
//
// MessageText:
//
//  Invalid period.
//
#define BDK_E_INVALID_PERIOD_TO_PROCESS  ((HRESULT)0x80049D2BL)


//
// MessageId: BDK_E_INVALID_SUBSCRIPTION_STATUS
//
// MessageText:
//
//  Invalid subscription status or invalid operation for the status.
//
#define BDK_E_INVALID_SUBSCRIPTION_STATUS ((HRESULT)0x80049D3AL)


//
// MessageId: BDK_E_NON_ACTIVE_ACCOUNT
//
// MessageText:
//
//  Account is inactive.
//
#define BDK_E_NON_ACTIVE_ACCOUNT         ((HRESULT)0x80049D94L)


//
// MessageId: BDK_E_VATID_DOESNOTHAVEEXPDATE
//
// MessageText:
//
//  VATIDs do not have an expiration date.
//
#define BDK_E_VATID_DOESNOTHAVEEXPDATE   ((HRESULT)0x80049D95L)


//
// MessageId: BDK_E_TAXID_EXPDATE
//
// MessageText:
//
//  Expiration date was not specified.
//
#define BDK_E_TAXID_EXPDATE              ((HRESULT)0x80049D96L)


//
// MessageId: BDK_E_INVALID_TAX_EXEMPT_TYPE
//
// MessageText:
//
//  Invalid tax exemption type.
//
#define BDK_E_INVALID_TAX_EXEMPT_TYPE    ((HRESULT)0x80049D97L)


//
// MessageId: BDK_E_INVALID_TAX_EXEMPT_BILLABLE_ACCOUNT_ID
//
// MessageText:
//
//  Invalid Tax Exempt Billable Account Id specified.
//
#define BDK_E_INVALID_TAX_EXEMPT_BILLABLE_ACCOUNT_ID ((HRESULT)0x80049D98L)


//
// MessageId: BDK_E_NO_ACTIVE_SUBSCRIPTION
//
// MessageText:
//
//  No active subscription for adding a service instance.
//
#define BDK_E_NO_ACTIVE_SUBSCRIPTION     ((HRESULT)0x80049D99L)


//
// MessageId: BDK_E_INVALID_SERVICE_INSTANCE
//
// MessageText:
//
//  Invalid service instance for adding a new user.
//
#define BDK_E_INVALID_SERVICE_INSTANCE   ((HRESULT)0x80049D9EL)


//
// MessageId: BDK_E_ADD_USER_TO_SERVICE_INSTANCE
//
// MessageText:
//
//  Failed to add a new user to a service instance.
//
#define BDK_E_ADD_USER_TO_SERVICE_INSTANCE ((HRESULT)0x80049DA3L)


//
// MessageId: BDK_E_INVALID_BILLABLEACCTSTATUS
//
// MessageText:
//
//  Status change not allowed.
//
#define BDK_E_INVALID_BILLABLEACCTSTATUS ((HRESULT)0x80049DA8L)


//
// MessageId: BDK_E_SERVICE_INSTANCES_NONE
//
// MessageText:
//
//  No service instances available for the billable account.
//
#define BDK_E_SERVICE_INSTANCES_NONE     ((HRESULT)0x80049DBCL)


//
// MessageId: BDK_E_ACCOUNT_CLOSED
//
// MessageText:
//
//  Account is already closed.
//
#define BDK_E_ACCOUNT_CLOSED             ((HRESULT)0x80049DD1L)


//
// MessageId: BDK_E_BILLINGPERIOD_PAST
//
// MessageText:
//
//  Period is already past.
//
#define BDK_E_BILLINGPERIOD_PAST         ((HRESULT)0x80049DD6L)


//
// MessageId: BDK_E_INVALID_ADJUSTMENTGUID
//
// MessageText:
//
//  Invalid adjustment GUID.
//
#define BDK_E_INVALID_ADJUSTMENTGUID     ((HRESULT)0x80049DD7L)


//
// MessageId: BDK_E_INVALID_ADJUSMENT_FOR_PERIOD
//
// MessageText:
//
//  Adjustment not applicable to the specified period.
//
#define BDK_E_INVALID_ADJUSMENT_FOR_PERIOD ((HRESULT)0x80049DD8L)


//
// MessageId: BDK_E_ADJUSTMENT_TOOBIG
//
// MessageText:
//
//  Adjustment amount is too large.
//
#define BDK_E_ADJUSTMENT_TOOBIG          ((HRESULT)0x80049DD9L)


//
// MessageId: BDK_E_ADJUSTMENT_TOOSMALL
//
// MessageText:
//
//  Adjustment amount is too small.
//
#define BDK_E_ADJUSTMENT_TOOSMALL        ((HRESULT)0x80049DDBL)


//
// MessageId: BDK_E_INVALID_LOCALE
//
// MessageText:
//
//  Invalid locale.
//
#define BDK_E_INVALID_LOCALE             ((HRESULT)0x80049DE5L)


//
// MessageId: BDK_E_INVALID_CUSTOMER_TYPE
//
// MessageText:
//
//  Invalid customer type.
//
#define BDK_E_INVALID_CUSTOMER_TYPE      ((HRESULT)0x80049DE6L)


//
// MessageId: BDK_E_INVALID_CURRENCY
//
// MessageText:
//
//  Invalid currency.
//
#define BDK_E_INVALID_CURRENCY           ((HRESULT)0x80049DE7L)


//
// MessageId: BDK_E_DATE_EXPIRED
//
// MessageText:
//
//  Date is already expired.
//
#define BDK_E_DATE_EXPIRED               ((HRESULT)0x80049DE8L)


//
// MessageId: BDK_E_GUID_EXISTS
//
// MessageText:
//
//  GUID already exists.
//
#define BDK_E_GUID_EXISTS                ((HRESULT)0x80049DE9L)


//
// MessageId: BDK_E_INVALID_VIOLATION_ID
//
// MessageText:
//
//  Invalid violation ID.
//
#define BDK_E_INVALID_VIOLATION_ID       ((HRESULT)0x80049DECL)


//
// MessageId: BDK_E_MISSING_VIOLATION_ID
//
// MessageText:
//
//  Violation ID is required.
//
#define BDK_E_MISSING_VIOLATION_ID       ((HRESULT)0x80049DEDL)


//
// MessageId: BDK_E_NEEDTODEPROVISION
//
// MessageText:
//
//  De-provision service instances before proceeding.
//
#define BDK_E_NEEDTODEPROVISION          ((HRESULT)0x80049DEFL)


//
// MessageId: BDK_E_PARTIALCONV_INITIATED
//
// MessageText:
//
//  Partial conversion is already initiated.
//
#define BDK_E_PARTIALCONV_INITIATED      ((HRESULT)0x80049DF0L)


//
// MessageId: BDK_E_CANNOT_UPDATE_CURRENCY
//
// MessageText:
//
//  The currency of the account cannot be updated.
//
#define BDK_E_CANNOT_UPDATE_CURRENCY     ((HRESULT)0x80049DF1L)


//
// MessageId: BDK_E_PARTIALCONV_EXPECTED
//
// MessageText:
//
//  Subscription is expected to be in the partial state.
//
#define BDK_E_PARTIALCONV_EXPECTED       ((HRESULT)0x80049DF2L)


//
// MessageId: BDK_E_INVALID_CATEGORY_NAME
//
// MessageText:
//
//  Invalid category. Valid category name has a size limit of 50 characters.
//
#define BDK_E_INVALID_CATEGORY_NAME      ((HRESULT)0x80049DF3L)


//
// MessageId: BDK_E_OFFERING_NOT_PURCHASEABLE
//
// MessageText:
//
//  Offering cannot be purchased.
//
#define BDK_E_OFFERING_NOT_PURCHASEABLE  ((HRESULT)0x80049DF5L)


//
// MessageId: BDK_E_OFFERING_ACCOUNT_CURRENCY_MISMATCH
//
// MessageText:
//
//  Offering currency does not match account currency.
//
#define BDK_E_OFFERING_ACCOUNT_CURRENCY_MISMATCH ((HRESULT)0x80049DF6L)


//
// MessageId: BDK_E_OFFERING_PAYMENT_INSTRUMENT_MISMATCH
//
// MessageText:
//
//  Offering does not support payment instrument type.
//
#define BDK_E_OFFERING_PAYMENT_INSTRUMENT_MISMATCH ((HRESULT)0x80049DF7L)


//
// MessageId: BDK_E_INVALID_DATE
//
// MessageText:
//
//  Invalid date.
//
#define BDK_E_INVALID_DATE               ((HRESULT)0x80049DF8L)


//
// MessageId: BDK_E_CANNOT_EXCEED_MAX_OWNERSHIP
//
// MessageText:
//
//  Cannot exceed max ownership for the offering.
//
#define BDK_E_CANNOT_EXCEED_MAX_OWNERSHIP ((HRESULT)0x80049DF9L)


//
// MessageId: BDK_E_INVALID_RESOURCE_ID
//
// MessageText:
//
//  Invalid resource ID.
//
#define BDK_E_INVALID_RESOURCE_ID        ((HRESULT)0x80049E02L)


//
// MessageId: BDK_E_UNIT_OF_MEASURE_MISMATCH
//
// MessageText:
//
//  Unit of measure reported in the usage event does not match the one in SPS.
//
#define BDK_E_UNIT_OF_MEASURE_MISMATCH   ((HRESULT)0x80049E03L)


//
// MessageId: BDK_E_EVT_DATE_BEFORE_PURCHASE_DATE
//
// MessageText:
//
//  Event date is before the subscription purchase date.
//
#define BDK_E_EVT_DATE_BEFORE_PURCHASE_DATE ((HRESULT)0x80049E04L)


//
// MessageId: BDK_E_INVALID_OFFERING_FOR_LOCALE
//
// MessageText:
//
//  Offering invalid for the locale.
//
#define BDK_E_INVALID_OFFERING_FOR_LOCALE ((HRESULT)0x80049E05L)


//
// MessageId: BDK_E_NOT_A_BASE_OFFERING
//
// MessageText:
//
//  Offering is not a base offering.
//
#define BDK_E_NOT_A_BASE_OFFERING        ((HRESULT)0x80049E06L)


//
// MessageId: BDK_E_FUTURE_OFFERING_PAYMENT_INSTRUMENT_MISMATCH
//
// MessageText:
//
//  There is a scheduled renewal or pending conversion to an offer that does not support that payment instrument.
//
#define BDK_E_FUTURE_OFFERING_PAYMENT_INSTRUMENT_MISMATCH ((HRESULT)0x80049E08L)


//
// MessageId: BDK_E_MEG_CONFLICT
//
// MessageText:
//
//  The offering requested conflicts with an existing subscription on this account.
//
#define BDK_E_MEG_CONFLICT               ((HRESULT)0x80049E0AL)


//
// MessageId: BDK_E_INVALID_ACCOUNT_STATUS
//
// MessageText:
//
//  Account state does not allow this operation.
//
#define BDK_E_INVALID_ACCOUNT_STATUS     ((HRESULT)0x80049E16L)


//
// MessageId: BDK_E_ACTIVE_SUBSCRIPTIONS_EXIST
//
// MessageText:
//
//  Payment instrument has active subscriptions.
//
#define BDK_E_ACTIVE_SUBSCRIPTIONS_EXIST ((HRESULT)0x80049E1BL)


//
// MessageId: BDK_E_EXISTING_BILLING_ACTIVITY
//
// MessageText:
//
//  The account has billing charges.
//
#define BDK_E_EXISTING_BILLING_ACTIVITY  ((HRESULT)0x80049E1CL)


//
// MessageId: BDK_E_INVALID_SUBSCRIPTION_STATUS_FOR_OPERATION
//
// MessageText:
//
//  Subscription is in an invalid state for this operation.
//
#define BDK_E_INVALID_SUBSCRIPTION_STATUS_FOR_OPERATION ((HRESULT)0x80049E20L)


//
// MessageId: BDK_E_PRIMARY_PHONE_REQUIRED
//
// MessageText:
//
//  Primary phone required for payment instruments.
//
#define BDK_E_PRIMARY_PHONE_REQUIRED     ((HRESULT)0x80049E25L)


//
// MessageId: BDK_E_EMAIL_REQUIRED
//
// MessageText:
//
//  Account requires an e-mail address for this operation.
//
#define BDK_E_EMAIL_REQUIRED             ((HRESULT)0x80049E2AL)


//
// MessageId: BDK_E_ACCOUNT_NOT_CLOSED
//
// MessageText:
//
//  To perform this operation, the account should be closed.
//
#define BDK_E_ACCOUNT_NOT_CLOSED         ((HRESULT)0x80049E2BL)


//
// MessageId: BDK_E_INVALID_VIOLATION
//
// MessageText:
//
//  Invalid violation ID.
//
#define BDK_E_INVALID_VIOLATION          ((HRESULT)0x80049E13L)


//
// MessageId: BDK_E_SUBSCRIPTION_IS_CANCELLED
//
// MessageText:
//
//  Subscription is cancelled and cannot change status.
//
#define BDK_E_SUBSCRIPTION_IS_CANCELLED  ((HRESULT)0x80049E14L)


//
// MessageId: BDK_E_NO_VIOLATION
//
// MessageText:
//
//  Subscription has no violations.
//
#define BDK_E_NO_VIOLATION               ((HRESULT)0x80049E15L)


//
// MessageId: BDK_E_EXISTS_VIOLATION
//
// MessageText:
//
//  Subscription has violations.
//
#define BDK_E_EXISTS_VIOLATION           ((HRESULT)0x80049E17L)


//
// MessageId: BDK_E_INVALID_SERVICE_COMPONENT_ID
//
// MessageText:
//
//  Invalid Service Component Id was passed.
//
#define BDK_E_INVALID_SERVICE_COMPONENT_ID ((HRESULT)0x80049E32L)


//
// MessageId: BDK_E_END_DATE_IN_THE_PAST
//
// MessageText:
//
//  End date is already past.
//
#define BDK_E_END_DATE_IN_THE_PAST       ((HRESULT)0x80049E33L)


//
// MessageId: BDK_E_END_DATE_BEYOND_MAX
//
// MessageText:
//
//  End date passed in is later than the latest allowable end date for this subscription.
//
#define BDK_E_END_DATE_BEYOND_MAX        ((HRESULT)0x80049E34L)


//
// MessageId: BDK_E_VIOLATION_ALREADY_SET
//
// MessageText:
//
//  Violation is already set.
//
#define BDK_E_VIOLATION_ALREADY_SET      ((HRESULT)0x80049E3EL)


//
// MessageId: BDK_E_NO_VIOLATION_SET
//
// MessageText:
//
//  Violation ID not set.
//
#define BDK_E_NO_VIOLATION_SET           ((HRESULT)0x80049E43L)


//
// MessageId: BDK_E_INVALID_CONVERSION
//
// MessageText:
//
//  Either there is no path between the current offering and the target offering or the path does not match the calling mode (Convert or Renew). 
//
#define BDK_E_INVALID_CONVERSION         ((HRESULT)0x80049E4DL)


//
// MessageId: BDK_E_SUBS_NOT_INTERMEDIATE
//
// MessageText:
//
//  Subscription is not in the partial state.
//
#define BDK_E_SUBS_NOT_INTERMEDIATE      ((HRESULT)0x80049E4EL)


//
// MessageId: BDK_E_OFFERING_NOT_PUBLISHED
//
// MessageText:
//
//  Offering is not published.
//
#define BDK_E_OFFERING_NOT_PUBLISHED     ((HRESULT)0x80049E52L)


//
// MessageId: BDK_E_CONVERSION_NEEDTODEPROVISION
//
// MessageText:
//
//  Service instances must be de-provisioned to proceed.
//
#define BDK_E_CONVERSION_NEEDTODEPROVISION ((HRESULT)0x80049E53L)


//
// MessageId: BDK_E_INVALID_MANDATE_STATUS
//
// MessageText:
//
//  Invalid mandate status.
//
#define BDK_E_INVALID_MANDATE_STATUS     ((HRESULT)0x80049E57L)


//
// MessageId: BDK_E_PI_ALREADY_GOOD
//
// MessageText:
//
//  Payment instrument status is already GOOD.
//
#define BDK_E_PI_ALREADY_GOOD            ((HRESULT)0x80049E61L)


//
// MessageId: BDK_E_PI_ALREADY_DECLINED
//
// MessageText:
//
//  Payment instrument status is already DECLINED.
//
#define BDK_E_PI_ALREADY_DECLINED        ((HRESULT)0x80049E66L)


//
// MessageId: BDK_E_PI_IS_DISABLED
//
// MessageText:
//
//  Payment instrument status is DISABLED and cannot be changed.
//
#define BDK_E_PI_IS_DISABLED             ((HRESULT)0x80049E6BL)


//
// MessageId: BDK_E_INVALID_PAYMENT_INSTRUMENT_STATUS
//
// MessageText:
//
//  Payment instrument exists or the payment instrument status is invalid or does not allow the operation.
//
#define BDK_E_INVALID_PAYMENT_INSTRUMENT_STATUS ((HRESULT)0x80049E7FL)


//
// MessageId: BDK_E_INVALID_OFFERING_GUID
//
// MessageText:
//
//  Invalid offering GUID.
//
#define BDK_E_INVALID_OFFERING_GUID      ((HRESULT)0x80049E84L)


//
// MessageId: BDK_E_OFFERING_REQUIRES_PI
//
// MessageText:
//
//  Offering requires a payment instrument.
//
#define BDK_E_OFFERING_REQUIRES_PI       ((HRESULT)0x80049E89L)


//
// MessageId: BDK_E_DELAYED_PROVISIONING_COMPONENTS_EXIST
//
// MessageText:
//
//  Offering cannot be purchased because it has delayed provisioning components.
//
#define BDK_E_DELAYED_PROVISIONING_COMPONENTS_EXIST ((HRESULT)0x80049E93L)


//
// MessageId: BDK_E_INVALID_AMOUNT_FOR_CURRENCY
//
// MessageText:
//
//  Invalid currency format.
//
#define BDK_E_INVALID_AMOUNT_FOR_CURRENCY ((HRESULT)0x80049E99L)


//
// MessageId: BDK_E_INVALID_EMAIL_ADDRESS
//
// MessageText:
//
//  Invalid e-mail address.
//
#define BDK_E_INVALID_EMAIL_ADDRESS      ((HRESULT)0x80049EA2L)


//
// MessageId: BDK_E_INVALID_TAX_EXEMPT_STATUS
//
// MessageText:
//
//  Invalid tax exemption status.
//
#define BDK_E_INVALID_TAX_EXEMPT_STATUS  ((HRESULT)0x80049EACL)


//
// MessageId: BDK_E_NO_VALID_TAX_EXEMPTION
//
// MessageText:
//
//  No valid tax exemption certificates exist for the account.
//
#define BDK_E_NO_VALID_TAX_EXEMPTION     ((HRESULT)0x80049EADL)


//
// MessageId: BDK_E_INVALID_TAX_EXEMPT_STATUS_CHANGE
//
// MessageText:
//
//  Invalid tax exemption status change.
//
#define BDK_E_INVALID_TAX_EXEMPT_STATUS_CHANGE ((HRESULT)0x80049EB1L)


//
// MessageId: BDK_E_INVALID_OLD_PAYMENT_INSTRUMENT_STATUS
//
// MessageText:
//
//  The status of the old payment instrument does not allow this operation.
//
#define BDK_E_INVALID_OLD_PAYMENT_INSTRUMENT_STATUS ((HRESULT)0x80049EB6L)


//
// MessageId: BDK_E_INVALID_START_PERIOD
//
// MessageText:
//
//  The specified start period is invalid.
//
#define BDK_E_INVALID_START_PERIOD       ((HRESULT)0x80049EC4L)


//
// MessageId: BDK_E_INVALID_END_PERIOD
//
// MessageText:
//
//  The specified end period is invalid.
//
#define BDK_E_INVALID_END_PERIOD         ((HRESULT)0x80049EC5L)


//
// MessageId: BDK_E_INVALID_DETAILEDLEVEL
//
// MessageText:
//
//  The specified Detailed level is invalid.
//
#define BDK_E_INVALID_DETAILEDLEVEL      ((HRESULT)0x80049EC6L)


//
// MessageId: BDK_E_EXCEED_DATERANGE_LIMIT
//
// MessageText:
//
//  Difference between BeginDate and EndDate is more than 6 months
//
#define BDK_E_EXCEED_DATERANGE_LIMIT     ((HRESULT)0x80049EC7L)


//
// MessageId: BDK_E_WRONG_DATERANGE
//
// MessageText:
//
//  Begin Date can never be greater than EndDate
//
#define BDK_E_WRONG_DATERANGE            ((HRESULT)0x80049EC8L)


//
// MessageId: BDK_E_INVALID_BEGIN_DATE
//
// MessageText:
//
//  Begin date is not valid
//
#define BDK_E_INVALID_BEGIN_DATE         ((HRESULT)0x80049EC9L)


//
// MessageId: BDK_E_INVALID_END_DATE
//
// MessageText:
//
//  End date is not valid
//
#define BDK_E_INVALID_END_DATE           ((HRESULT)0x80049ECBL)


//
// MessageId: BDK_E_END_DATE_GREATER_THAN_CURRENT_DATE
//
// MessageText:
//
//  End date is greater than the current date
//
#define BDK_E_END_DATE_GREATER_THAN_CURRENT_DATE ((HRESULT)0x80049ECCL)


//
// MessageId: BDK_E_COMPUTE_ONLY
//
// MessageText:
//
//  SPS is in compute-only mode.
//
#define BDK_E_COMPUTE_ONLY               ((HRESULT)0x80049ECAL)


//
// MessageId: BDK_E_MISSED_PROCESSING_PERIOD
//
// MessageText:
//
//  Detected that month(s) were missed in periodic processing.
//
#define BDK_E_MISSED_PROCESSING_PERIOD   ((HRESULT)0x80049F33L)


//
// MessageId: BDK_E_SUBSCRIPTION_NOT_EXPIRED
//
// MessageText:
//
//  Subscription is not expired.
//
#define BDK_E_SUBSCRIPTION_NOT_EXPIRED   ((HRESULT)0x80049F43L)


//
// MessageId: BDK_E_TOOLATE_REINSTATE
//
// MessageText:
//
//  Subscription can no longer be reinstated.
//
#define BDK_E_TOOLATE_REINSTATE          ((HRESULT)0x80049F44L)


//
// MessageId: BDK_E_EXTRA_REFERRAL_DATA
//
// MessageText:
//
//  Only a single Referral node may be passed in to this API.
//
#define BDK_E_EXTRA_REFERRAL_DATA        ((HRESULT)0x80049F47L)


//
// MessageId: BDK_E_NO_REFERRAL_UPDATES_ALLOWED
//
// MessageText:
//
//  bstrReferralIDSetXML parameter must be left empty for this API.
//
#define BDK_E_NO_REFERRAL_UPDATES_ALLOWED ((HRESULT)0x80049F4CL)


//
// MessageId: BDK_E_FREE_SCHEDULED_RENEWAL_EXISTS
//
// MessageText:
//
//  Cannot schedule a new renewal because there exists already a free renewal on the subscription.
//
#define BDK_E_FREE_SCHEDULED_RENEWAL_EXISTS ((HRESULT)0x80049F4DL)


//
// MessageId: BDK_E_DEAL_HAS_MULTIPLE_DELAYED_COMPONENTS
//
// MessageText:
//
//  Cannot convert a deal with multiple components with delayed provisioning.
//
#define BDK_E_DEAL_HAS_MULTIPLE_DELAYED_COMPONENTS ((HRESULT)0x80049F4EL)


//
// MessageId: BDK_E_INVALID_COBRAND
//
// MessageText:
//
//  The specified cobrand is invalid.
//
#define BDK_E_INVALID_COBRAND            ((HRESULT)0x80049F56L)


//
// MessageId: BDK_E_INVALID_OPERATION_FOR_WHOLESALE_SUBSCRIPTION
//
// MessageText:
//
//  This operation is not valid for wholesale subscriptions.
//
#define BDK_E_INVALID_OPERATION_FOR_WHOLESALE_SUBSCRIPTION ((HRESULT)0x80049F65L)


//
// MessageId: BDK_E_HCI_NOT_VALID
//
// MessageText:
//
//  HCI not valid for Account Id.
//
#define BDK_E_HCI_NOT_VALID              ((HRESULT)0x80049F83L)


//
// MessageId: BDK_E_CANT_STOP_TAIWAN_TAXINV
//
// MessageText:
//
//  Taiwan users cannot opt out of hard copy tax invoices.
//
#define BDK_E_CANT_STOP_TAIWAN_TAXINV    ((HRESULT)0x80049F85L)


//
// MessageId: BDK_E_INVALID_TOKEN_TYPE
//
// MessageText:
//
//  The type of the token specified was invalid.
//
#define BDK_E_INVALID_TOKEN_TYPE         ((HRESULT)0x8004A00AL)


//
// MessageId: BDK_E_TOKEN_NOT_VALID_FOR_OFFERING
//
// MessageText:
//
//  The token Id specified is not valid for the given offering.
//
#define BDK_E_TOKEN_NOT_VALID_FOR_OFFERING ((HRESULT)0x8004A04BL)


//
// MessageId: BDK_E_DEAL_TOKEN_MAPPING_NOT_PRESENT
//
// MessageText:
//
//  Deal Token mapping currently not present in the system to be marked as invalid.
//
#define BDK_E_DEAL_TOKEN_MAPPING_NOT_PRESENT ((HRESULT)0x8004A04CL)


//
// MessageId: BDK_E_MAXIMUM_CONSUMPTION_COUNT_PER_USER_REACHED
//
// MessageText:
//
//  Maximum consumption count per user reached.
//
#define BDK_E_MAXIMUM_CONSUMPTION_COUNT_PER_USER_REACHED ((HRESULT)0x8004A00BL)


//
// MessageId: BDK_E_INSERTING_USER_TOKEN_HASH
//
// MessageText:
//
//  Error in inserting a new row in table user_token_hash.
//
#define BDK_E_INSERTING_USER_TOKEN_HASH  ((HRESULT)0x8004A00CL)


//
// MessageId: BDK_E_TOKEN_AND_PI_BOTH_SPECIFIED
//
// MessageText:
//
//  A token Id and a payment instrument Id cannot both be specified.
//
#define BDK_E_TOKEN_AND_PI_BOTH_SPECIFIED ((HRESULT)0x8004A06EL)


//
// MessageId: BDK_E_TOKEN_CLASS_INVALID
//
// MessageText:
//
//  The token class is invalid or does not exist.
//
#define BDK_E_TOKEN_CLASS_INVALID        ((HRESULT)0x8004A073L)


//
// MessageId: BDK_E_INPUT_FILTER_XML_MISSING
//
// MessageText:
//
//  The Input TokenClass Restriction Info Filter is Missing.
//
#define BDK_E_INPUT_FILTER_XML_MISSING   ((HRESULT)0x8004A074L)


//
// MessageId: BDK_E_TOKEN_CLASS_NOT_FOUND
//
// MessageText:
//
//  Unable to find the token mapping to the specified token class.
//
#define BDK_E_TOKEN_CLASS_NOT_FOUND      ((HRESULT)0x800413ABL)


//
// MessageId: BDK_E_INVALID_INPUT_FILTER_XML
//
// MessageText:
//
//  Invalid TokenClass Restriction Info Filter.
//
#define BDK_E_INVALID_INPUT_FILTER_XML   ((HRESULT)0x8004A075L)


//
// MessageId: BDK_E_PI_CANNOT_BE_SPECIFIED
//
// MessageText:
//
//  A payment instrument cannot be specified.
//
#define BDK_E_PI_CANNOT_BE_SPECIFIED     ((HRESULT)0x8004A078L)


//
// MessageId: BDK_E_SUBSCRIPTION_NOT_PREPAID
//
// MessageText:
//
//  The subscription specified is not a PrePaid subscription.
//
#define BDK_E_SUBSCRIPTION_NOT_PREPAID   ((HRESULT)0x8004A07DL)


//
// MessageId: BDK_E_TOTAL_EXTENSION_LESS_THAN_ZERO
//
// MessageText:
//
//  The total number of extended days cannot be less than zero.
//
#define BDK_E_TOTAL_EXTENSION_LESS_THAN_ZERO ((HRESULT)0x8004A082L)


//
// MessageId: BDK_E_INVALID_NUMBER_OF_DAYS
//
// MessageText:
//
//  The number of days specified is invalid, possibly because the subscription doesn't have that many days remaining.
//
#define BDK_E_INVALID_NUMBER_OF_DAYS     ((HRESULT)0x8004A087L)


//
// MessageId: BDK_E_INVALID_NUMBER_OF_MONTHS
//
// MessageText:
//
//  The number of months specified is invalid, possibly because it is negative.
//
#define BDK_E_INVALID_NUMBER_OF_MONTHS   ((HRESULT)0x8004A088L)


//
// MessageId: BDK_E_TOTAL_EXTENSION_GREATER_THAN_MAX
//
// MessageText:
//
//  The total number of extended days is greater than the maximum allowed for the current subscription.
//
#define BDK_E_TOTAL_EXTENSION_GREATER_THAN_MAX ((HRESULT)0x8004A08CL)


//
// MessageId: BDK_E_PREPAID_TOKEN_IS_REQUIRED
//
// MessageText:
//
//  The deal specified requires a valid Prepaid Token Id to be specified.
//
#define BDK_E_PREPAID_TOKEN_IS_REQUIRED  ((HRESULT)0x8004A096L)


//
// MessageId: BDK_E_TERM_COMMIT_EXISTS
//
// MessageText:
//
//  There are remaining cycles on the current term commit.
//
#define BDK_E_TERM_COMMIT_EXISTS         ((HRESULT)0x8004A09BL)


//
// MessageId: BDK_E_TOKEN_NOT_APPLICABLE
//
// MessageText:
//
//  The specified token cannot be used for the current operation.
//
#define BDK_E_TOKEN_NOT_APPLICABLE       ((HRESULT)0x8004A0A0L)


//
// MessageId: BDK_E_TOKEN_RENEWAL_PRESENT
//
// MessageText:
//
//  Renewal cannot be scheduled if there is already a token based renewal present.
//
#define BDK_E_TOKEN_RENEWAL_PRESENT      ((HRESULT)0x8004A0A5L)


//
// MessageId: BDK_E_EXCEEDS_MAXIMUM_DURATION
//
// MessageText:
//
//  Error subscription duration exceeds max duration.
//
#define BDK_E_EXCEEDS_MAXIMUM_DURATION   ((HRESULT)0x8004A0FAL)


//
// MessageId: BDK_E_CONVERSION_CREDITS_NOT_ENABLED
//
// MessageText:
//
//  Error conversion credits were applied but the offer does not support conversion credits.
//
#define BDK_E_CONVERSION_CREDITS_NOT_ENABLED ((HRESULT)0x8004A104L)


//
// MessageId: BDK_E_BLACKLIST_ACTION_NOT_PERFORMED
//
// MessageText:
//
//  BlacklistToken found actions to take, but BSTRSubscriptionAction was set to DONOTHING.
//
#define BDK_E_BLACKLIST_ACTION_NOT_PERFORMED ((HRESULT)0x8004A0AAL)


//
// MessageId: BDK_E_INVALID_SUBSCRIPTION_ACTION
//
// MessageText:
//
//  BlacklistToken was called with invalid bstrSubscriptionAction parameter.
//
#define BDK_E_INVALID_SUBSCRIPTION_ACTION ((HRESULT)0x8004A0AFL)


//
// MessageId: BDK_E_TOKEN_DISTRIBUTION_CHANNEL_NOT_FOUND
//
// MessageText:
//
//  Invalid distribution channel specified for token class part number.
//
#define BDK_E_TOKEN_DISTRIBUTION_CHANNEL_NOT_FOUND ((HRESULT)0x8004A0B9L)


//
// MessageId: BDK_E_INVALID_LEN_PART_NUMBER
//
// MessageText:
//
//  Invalid length for token class part number.
//
#define BDK_E_INVALID_LEN_PART_NUMBER    ((HRESULT)0x8004A0BEL)


//
// MessageId: BDK_E_INVALID_LEN_SAP_CUST_NAME
//
// MessageText:
//
//  nvalid length for SAP customer name.
//
#define BDK_E_INVALID_LEN_SAP_CUST_NAME  ((HRESULT)0x8004A0C3L)


//
// MessageId: BDK_E_INVALID_LEN_SUPPORT_VENDOR_NAME
//
// MessageText:
//
//  Invalid length for Support Vendor name.
//
#define BDK_E_INVALID_LEN_SUPPORT_VENDOR_NAME ((HRESULT)0x8004A0C8L)


//
// MessageId: BDK_E_INSERING_TOKEN_CLASS_PARTNER
//
// MessageText:
//
//  Failed while inserting in partner_token_class table.
//
#define BDK_E_INSERING_TOKEN_CLASS_PARTNER ((HRESULT)0x8004A0CDL)


//
// MessageId: BDK_E_TOKEN_PART_NUMBER_ASSOC_WITH_OTHER_TOKEN_CLASS
//
// MessageText:
//
//  Token Part Number is currently associated with other token class please remove the association from the other token class and try again.
//
#define BDK_E_TOKEN_PART_NUMBER_ASSOC_WITH_OTHER_TOKEN_CLASS ((HRESULT)0x8004A0D2L)


//
// MessageId: BDK_E_TOKEN_ALREADY_DELIVERED
//
// MessageText:
//
//  A token is being delivered to the same service instance at this moment. Please retry.
//
#define BDK_E_TOKEN_ALREADY_DELIVERED    ((HRESULT)0x8004148DL)


//
// MessageId: BDK_E_INSERTING_RECONCILE_HISTORY
//
// MessageText:
//
//  Failed while inserting in reconcile_history table.
//
#define BDK_E_INSERTING_RECONCILE_HISTORY ((HRESULT)0x800414BEL)


//
// MessageId: BDK_E_TOKEN_ALREADY_ISSUED
//
// MessageText:
//
//  Specified Token is already issued.
//
#define BDK_E_TOKEN_ALREADY_ISSUED       ((HRESULT)0x800414C3L)


//
// MessageId: BDK_E_TOKEN_ALREADY_UNISSUED
//
// MessageText:
//
//  Specified Token is already unissued, can not unissue the same token again.
//
#define BDK_E_TOKEN_ALREADY_UNISSUED     ((HRESULT)0x800414C8L)


//
// MessageId: BDK_E_TOKEN_ISSUE_UPDATE
//
// MessageText:
//
//  Failed to update the token issue status in token_instance table.
//
#define BDK_E_TOKEN_ISSUE_UPDATE         ((HRESULT)0x800414CDL)


//
// MessageId: BDK_E_INVALID_COMBINATION
//
// MessageText:
//
//  The input parameter combination does not match the system.
//
#define BDK_E_INVALID_COMBINATION        ((HRESULT)0x800414D2L)


//
// MessageId: BDK_E_INVALID_REPLACEMENT_REASON_CODE
//
// MessageText:
//
//  Invalid Replacement Reason code specified.
//
#define BDK_E_INVALID_REPLACEMENT_REASON_CODE ((HRESULT)0x800414D7L)


//
// MessageId: BDK_E_MAX_REPLACEMENT_REACHED
//
// MessageText:
//
//  The request failed because the maximum number of replacements for this sequence number have exceeded the threshold value.
//
#define BDK_E_MAX_REPLACEMENT_REACHED    ((HRESULT)0x800414DCL)


//
// MessageId: BDK_E_TOKEN_REPLACEMENT_FAILED
//
// MessageText:
//
//  Token Replacement failed due to unknown error.
//
#define BDK_E_TOKEN_REPLACEMENT_FAILED   ((HRESULT)0x800414E1L)


//
// MessageId: BDK_E_TOKEN_DISTRIBUTION_STATUS_UPDATE
//
// MessageText:
//
//  Failed to update Token Distribution status.
//
#define BDK_E_TOKEN_DISTRIBUTION_STATUS_UPDATE ((HRESULT)0x800414E6L)


//
// MessageId: BDK_E_SIGNATURE_TOKEN_MISMATCH
//
// MessageText:
//
//  Signature does not belong to specified Token.
//
#define BDK_E_SIGNATURE_TOKEN_MISMATCH   ((HRESULT)0x800414EBL)


//
// MessageId: BDK_E_INVALID_STATUS_NAME
//
// MessageText:
//
//  Invalid Token Staus Name specified.
//
#define BDK_E_INVALID_STATUS_NAME        ((HRESULT)0x800414F0L)


//
// MessageId: BDK_E_INVALID_TOKEN_DISTRIBUTION_STATUS
//
// MessageText:
//
//  Invalid distribution status to issue token.
//
#define BDK_E_INVALID_TOKEN_DISTRIBUTION_STATUS ((HRESULT)0x800414F5L)


//
// MessageId: BDK_E_ALREADY_REPLACED_TOKEN
//
// MessageText:
//
//  Specified token is replaced token, can not provide replacement for Replaced Token.
//
#define BDK_E_ALREADY_REPLACED_TOKEN     ((HRESULT)0x800414FAL)


//
// MessageId: BDK_E_TOKEN_ACTION_ACCESS_DENIED
//
// MessageText:
//
//  Invalid Partner specified or the partner does not have permission to take action on specified token.
//
#define BDK_E_TOKEN_ACTION_ACCESS_DENIED ((HRESULT)0x800414FFL)


//
// MessageId: BDK_E_BAD_RETURN_STATEMENT_SET_INDICATOR
//
// MessageText:
//
//  Value for returnStatementSet parameter must be 0, 1, or 2.
//
#define BDK_E_BAD_RETURN_STATEMENT_SET_INDICATOR ((HRESULT)0x8004A604L)


//
// MessageId: BDK_E_BAD_BEGIN_BILLING_PERIOD
//
// MessageText:
//
//  The begin billing period is not valid for this account.
//
#define BDK_E_BAD_BEGIN_BILLING_PERIOD   ((HRESULT)0x8004A609L)


//
// MessageId: BDK_E_INVALID_END_BILLING_PERIOD
//
// MessageText:
//
//  The end billing period is not valid for this account.
//
#define BDK_E_INVALID_END_BILLING_PERIOD ((HRESULT)0x8004A60EL)


//
// MessageId: BDK_E_BILLING_PERIOD_NEGATIVE
//
// MessageText:
//
//  The billing period value cannot be negative.
//
#define BDK_E_BILLING_PERIOD_NEGATIVE    ((HRESULT)0x8004A613L)


//
// MessageId: BDK_E_BAD_START_END_BILLING_PERIOD
//
// MessageText:
//
//  The end period must be greater than start period.
//
#define BDK_E_BAD_START_END_BILLING_PERIOD ((HRESULT)0x8004A618L)


//
// MessageId: BDK_E_CURRENT_DATE_LESS_THAN_ACCOUNT_HISTORY_DATE
//
// MessageText:
//
//  The account history date cannot be greater than the current date.
//
#define BDK_E_CURRENT_DATE_LESS_THAN_ACCOUNT_HISTORY_DATE ((HRESULT)0x8004A61DL)


//
// MessageId: BDK_E_NO_NON_NULL_PARAMS
//
// MessageText:
//
//  Cannot pass null for all parameters.
//
#define BDK_E_NO_NON_NULL_PARAMS         ((HRESULT)0x8004A622L)


//
// MessageId: BDK_E_INVALID_SUBSCRIPTION_BILLING_PERIOD
//
// MessageText:
//
//  The billing period value must be of the format YYYYMM (Y representing the year and M representing month).
//
#define BDK_E_INVALID_SUBSCRIPTION_BILLING_PERIOD ((HRESULT)0x8004A627L)


//
// MessageId: BDK_E_BILLING_PERIOD_GREATER_THAN_SUBSCRIPTION_DURATION
//
// MessageText:
//
//  The billing period value cannot be greater than the subscription duration (i.e. past subscription expiration).
//
#define BDK_E_BILLING_PERIOD_GREATER_THAN_SUBSCRIPTION_DURATION ((HRESULT)0x8004A62CL)


//
// MessageId: BDK_E_MISMATCH_SUB_ID_OFFER_GUID
//
// MessageText:
//
//  The offering guid passed in does not match offering guid on subscription.
//
#define BDK_E_MISMATCH_SUB_ID_OFFER_GUID ((HRESULT)0x8004A6FEL)


//
// MessageId: BDK_E_EVENT_TIMESTAMP_IN_THE_FUTURE
//
// MessageText:
//
//  The event time stamp is too far in future.
//
#define BDK_E_EVENT_TIMESTAMP_IN_THE_FUTURE ((HRESULT)0x8004A70DL)


//
// MessageId: BDK_E_INVALID_POLICY_ID
//
// MessageText:
//
//  The policy GuidID/Version combination supplied does not exist.
//
#define BDK_E_INVALID_POLICY_ID          ((HRESULT)0x80049F88L)


//
// MessageId: BDK_E_OFFERING_PI_COUNTRY_MISMATCH
//
// MessageText:
//
//  The offering specified does not support the country of payment instrument being used.
//
#define BDK_E_OFFERING_PI_COUNTRY_MISMATCH ((HRESULT)0x80049F89L)


//
// MessageId: BDK_E_INSERT_AGREEMENT_SIGNATURE
//
// MessageText:
//
//  Error inserting into table agreement_signature.
//
#define BDK_E_INSERT_AGREEMENT_SIGNATURE ((HRESULT)0x80049F8DL)


//
// MessageId: BDK_E_AGREEMENT_ALREADY_SIGNED
//
// MessageText:
//
//  Agreement for this subscription has already been signed by this user at a different time.
//
#define BDK_E_AGREEMENT_ALREADY_SIGNED   ((HRESULT)0x80049F92L)


//
// MessageId: BDK_E_LOCALE_NOT_SUPPORTED_FOR_POLICY
//
// MessageText:
//
//  The specified policy has not been localized in the specified locale.
//
#define BDK_E_LOCALE_NOT_SUPPORTED_FOR_POLICY ((HRESULT)0x80049F9CL)


//
// MessageId: BDK_E_POLICY_DEAL_VERSION_MISMATCH
//
// MessageText:
//
//  The policy specified is valid but the version is incorrect.
//
#define BDK_E_POLICY_DEAL_VERSION_MISMATCH ((HRESULT)0x80049F9EL)


//
// MessageId: BDK_E_POLICY_DEAL_COUNTRY_MISMATCH
//
// MessageText:
//
//  The policy specified exists but is not valid on the deal/country combination of the supplied subscription.
//
#define BDK_E_POLICY_DEAL_COUNTRY_MISMATCH ((HRESULT)0x80049FA1L)


//
// MessageId: BDK_E_CANNOT_CONVERT_BACK_TO_WHOLESALE
//
// MessageText:
//
//  The subscription was previously a wholesale subscription which was converted to a direct subscription and is now trying to be converted to wholesale again.  This is not allowed.
//
#define BDK_E_CANNOT_CONVERT_BACK_TO_WHOLESALE ((HRESULT)0x8004A6D1L)


//
// MessageId: BDK_E_CANNOT_SPECIFY_PI_DURING_RENEW
//
// MessageText:
//
//  A payment instrument cannot specified when the conversion mode is RENEW.
//
#define BDK_E_CANNOT_SPECIFY_PI_DURING_RENEW ((HRESULT)0x8004A6D6L)


//
// MessageId: BDK_E_NO_RENEWAL_FROM_PERPETUAL_OFFERING
//
// MessageText:
//
//  Renewing from a perpetual offering is not allowed.
//
#define BDK_E_NO_RENEWAL_FROM_PERPETUAL_OFFERING ((HRESULT)0x8004A6E5L)


//
// MessageId: BDK_E_INVALID_TECERTIFICATENUMBER
//
// MessageText:
//
//  Tax Exempt Certificate Number is invalid.
//
#define BDK_E_INVALID_TECERTIFICATENUMBER ((HRESULT)0x8004A6EAL)


//
// MessageId: BDK_E_NO_WHOLESALE_TO_WHOLESALE
//
// MessageText:
//
//  Conversions between wholesale offers are not allowed.
//
#define BDK_E_NO_WHOLESALE_TO_WHOLESALE  ((HRESULT)0x8004A708L)


//
// MessageId: BDK_E_INVALID_NEW_PAYMENT_INSTRUMENT_STATUS
//
// MessageText:
//
//  The status of the new payment instrument specified does not allow this operation.
//
#define BDK_E_INVALID_NEW_PAYMENT_INSTRUMENT_STATUS ((HRESULT)0x8004A712L)


//
// MessageId: BDK_E_INVALID_RENEWAL
//
// MessageText:
//
//  Renewal does not exist.
//
#define BDK_E_INVALID_RENEWAL            ((HRESULT)0x8004A71CL)


//
// MessageId: BDK_E_ERROR_PHONE_STRING_TOOLONG
//
// MessageText:
//
//  The length of phone number is greater than expected.
//
#define BDK_E_ERROR_PHONE_STRING_TOOLONG ((HRESULT)0x8004A721L)


//
// MessageId: BDK_E_ERROR_TOKEN_CLASS_ACCESS_DENIED
//
// MessageText:
//
//  The calling partner does not have access to the token class.
//
#define BDK_E_ERROR_TOKEN_CLASS_ACCESS_DENIED ((HRESULT)0x8004A72BL)


//
// MessageId: BDK_E_LAST_ADMIN_ROLE
//
// MessageText:
//
//  Last administrator role on the account cannot be removed.
//
#define BDK_E_LAST_ADMIN_ROLE            ((HRESULT)0x8004C3C3L)


//
// MessageId: BDK_E_PUID_USED_AS_BILLABLEACCOUNTADMIN
//
// MessageText:
//
//  The PUID is already being used as BillableAccountAdmin.
//
#define BDK_E_PUID_USED_AS_BILLABLEACCOUNTADMIN ((HRESULT)0x8004C3C4L)


//
// MessageId: BDK_E_UPDATING_MEMBERNAME
//
// MessageText:
//
//  Error updating member name.
//
#define BDK_E_UPDATING_MEMBERNAME        ((HRESULT)0x8004C3C8L)


//
// MessageId: BDK_E_OBJECT_ROLE_LIMIT_EXCEEDED
//
// MessageText:
//
//  Object can have a maximum of 100 roles.
//
#define BDK_E_OBJECT_ROLE_LIMIT_EXCEEDED ((HRESULT)0x8004C3CDL)


//
// MessageId: BDK_E_ACCOUNT_DELADMIN_ROLE_EXCEEDED
//
// MessageText:
//
//  The allowable number of the delegate admins for an account has reached its limit.
//
#define BDK_E_ACCOUNT_DELADMIN_ROLE_EXCEEDED ((HRESULT)0x8004C3CEL)


//
// MessageId: PROVISION_E_MALFORMED_REQUEST
//
// MessageText:
//
//  Provisioning: Provision request malformed.
//
#define PROVISION_E_MALFORMED_REQUEST    ((HRESULT)0x8004AB7DL)


//
// MessageId: PROVISION_E_WRONG_INPUT_PARAMETERS
//
// MessageText:
//
//  Provisioning: Wrong input parameters.
//
#define PROVISION_E_WRONG_INPUT_PARAMETERS ((HRESULT)0x8004AB7EL)


//
// MessageId: PROVISION_E_MPF_CALL_FAILED
//
// MessageText:
//
//  Provisioning: Microsoft Provisioning Framework call failed. %1
//
#define PROVISION_E_MPF_CALL_FAILED      ((HRESULT)0x8004AB7FL)


//
// MessageId: PROVISION_E_XML_OPERATION_ERROR
//
// MessageText:
//
//  Provisioning: Error during XML manipulation. %1
//
#define PROVISION_E_XML_OPERATION_ERROR  ((HRESULT)0x8004AB80L)


//
// MessageId: PROVISION_E_MPF_CREATE
//
// MessageText:
//
//  Provisioning: MPF client instantiation failed. %1
//
#define PROVISION_E_MPF_CREATE           ((HRESULT)0x8004AB81L)


//
// MessageId: PROVISION_E_CREATION
//
// MessageText:
//
//  Provisioning: General error in startup code. %1
//
#define PROVISION_E_CREATION             ((HRESULT)0x8004AB82L)


//
// MessageId: BDK_E_DBBADZIP
//
// MessageText:
//
//  Invalid ZIP code.
//
#define BDK_E_DBBADZIP                   ((HRESULT)0x8004ABA3L)


//
// MessageId: BDK_E_REQUIRED_FIELD_MISSING_DUE_TO_SUBSCRIPTIONS
//
// MessageText:
//
//  The account has subscription(s) in non-cancelled state that require information that you are attempting to remove.
//
#define BDK_E_REQUIRED_FIELD_MISSING_DUE_TO_SUBSCRIPTIONS ((HRESULT)0x8004ABA4L)


//
// MessageId: BDK_E_ADDITIONAL_ACCOUNT_DATA_REQUIRED
//
// MessageText:
//
//  The account requires additional attributes before performing the operation.
//
#define BDK_E_ADDITIONAL_ACCOUNT_DATA_REQUIRED ((HRESULT)0x8004ABA5L)


//
// MessageId: BDK_E_ACCT_ALREADY_REFERRED
//
// MessageText:
//
//  The referrer has already reffered the customer to this offer.
//
#define BDK_E_ACCT_ALREADY_REFERRED      ((HRESULT)0x8004ABCEL)


//
// MessageId: BDK_E_REWARD_OFFER_NOT_PURCHASABLE
//
// MessageText:
//
//  There are no reward offers currently available in the system.
//
#define BDK_E_REWARD_OFFER_NOT_PURCHASABLE ((HRESULT)0x8004ABDAL)


//
// MessageId: BDK_E_AGREEMENT_NOT_SIGNED
//
// MessageText:
//
//  Need to sign the agreement before continuing with the call.
//
#define BDK_E_AGREEMENT_NOT_SIGNED       ((HRESULT)0x8004AC79L)


//
// MessageId: BDK_E_ITEM_VIOLATION_EXISTS
//
// MessageText:
//
//  The user has a violation on their payment instrument.
//
#define BDK_E_ITEM_VIOLATION_EXISTS      ((HRESULT)0x8004AC7AL)


//
// MessageId: BDK_E_DYNAMIC_TITLE_AND_CATEGORY_CONFIGURATION
//
// MessageText:
//
//  Title and/or category is not allowed for this offer.
//
#define BDK_E_DYNAMIC_TITLE_AND_CATEGORY_CONFIGURATION ((HRESULT)0x8004AC7BL)


//
// MessageId: BDK_E_PENDING_TRANSACTION
//
// MessageText:
//
//  Account has a pending transaction.
//
#define BDK_E_PENDING_TRANSACTION        ((HRESULT)0x8004AC7CL)


//
// MessageId: BDK_E_INCREMENT_TOTAL
//
// MessageText:
//
//  Cannot update total.
//
#define BDK_E_INCREMENT_TOTAL            ((HRESULT)0x80044E39L)


//
// MessageId: BDK_E_RES_NOT_BELONG_TO_OBJECT
//
// MessageText:
//
//  Resource does not belong to this object id.
//
#define BDK_E_RES_NOT_BELONG_TO_OBJECT   ((HRESULT)0x80044E57L)


//
// MessageId: BDK_E_DECLINING_BALANCE
//
// MessageText:
//
//  Payment instrument on the current subscription has a declining balance.
//
#define BDK_E_DECLINING_BALANCE          ((HRESULT)0x80044E5CL)


//
// MessageId: BDK_E_DUPLICATE_TRACKING_GUID
//
// MessageText:
//
//  Duplicate tracking GUID.
//
#define BDK_E_DUPLICATE_TRACKING_GUID    ((HRESULT)0x80044E75L)


//
// MessageId: BDK_E_INVALID_EXPIRATION_DATE
//
// MessageText:
//
//  Invalid credit card expiration date.
//
#define BDK_E_INVALID_EXPIRATION_DATE    ((HRESULT)0x80044EA7L)


//
// MessageId: BDK_E_UNKNOWN_MANDATE_STATUS
//
// MessageText:
//
//  Invalid mandate status.
//
#define BDK_E_UNKNOWN_MANDATE_STATUS     ((HRESULT)0x80044EACL)


//
// MessageId: BDK_E_INVALID_PAYMENT_METHOD_TYPE
//
// MessageText:
//
//  Payment method of this type can't support the action
//
#define BDK_E_INVALID_PAYMENT_METHOD_TYPE ((HRESULT)0x80044EB2L)


//
// MessageId: BDK_E_INVALID_CURRENCY2
//
// MessageText:
//
//  Invalid input currency.
//
#define BDK_E_INVALID_CURRENCY2          ((HRESULT)0x80044EC0L)


//
// MessageId: BDK_E_INVALID_AMOUNT
//
// MessageText:
//
//  Invalid amount passed in as argument.
//
#define BDK_E_INVALID_AMOUNT             ((HRESULT)0x80044EFCL)


//
// MessageId: BDK_E_INVALID_BILLING_PERIOD
//
// MessageText:
//
//  Invalid billing period.
//
#define BDK_E_INVALID_BILLING_PERIOD     ((HRESULT)0x80044F42L)


//
// MessageId: BDK_E_INVALID_ANNIV
//
// MessageText:
//
//  Invalid billing anniversary date.
//
#define BDK_E_INVALID_ANNIV              ((HRESULT)0x80044F9CL)


//
// MessageId: BDK_E_INVALID_LINEITEM_ID
//
// MessageText:
//
//  Invalid line item ID.
//
#define BDK_E_INVALID_LINEITEM_ID        ((HRESULT)0x80044FF6L)


//
// MessageId: BDK_E_INVALID_EVENT_TYPE
//
// MessageText:
//
//  The event type of the line item is invalid for this operation.
//
#define BDK_E_INVALID_EVENT_TYPE         ((HRESULT)0x8004501EL)


//
// MessageId: BDK_E_LINE_ITEM_ID_NOT_OPEN
//
// MessageText:
//
//  Line item ID not associated with an open record.
//
#define BDK_E_LINE_ITEM_ID_NOT_OPEN      ((HRESULT)0x80045046L)


//
// MessageId: BDK_E_LINEITEM_ALREADY_OFFSET
//
// MessageText:
//
//  Line item has already been offset.
//
#define BDK_E_LINEITEM_ALREADY_OFFSET    ((HRESULT)0x8004504BL)


//
// MessageId: BDK_E_LINEITEM_ALREADY_CHARGED_BACK
//
// MessageText:
//
//  Line item has already been Charged back.
//
#define BDK_E_LINEITEM_ALREADY_CHARGED_BACK ((HRESULT)0x8004504DL)


//
// MessageId: BDK_E_INVALID_OFFSET_AMOUNT
//
// MessageText:
//
//  Offset amount must be greater than zero but less than or equal to original amount. %1
//
#define BDK_E_INVALID_OFFSET_AMOUNT      ((HRESULT)0x80045050L)


//
// MessageId: BDK_E_CANNOT_OFFSET_HARD_SOFT_DECLINED
//
// MessageText:
//
//  Cannot offset line item that is soft- or hard-declined.
//
#define BDK_E_CANNOT_OFFSET_HARD_SOFT_DECLINED ((HRESULT)0x80045055L)


//
// MessageId: BDK_E_AMOUNT_NOT_COLLECTED_YET
//
// MessageText:
//
//  Amount has not been collected, so it cannot be offset and immediately settled.
//
#define BDK_E_AMOUNT_NOT_COLLECTED_YET   ((HRESULT)0x8004505AL)


//
// MessageId: BDK_E_CANNOT_OFFSET_ZERO_AMOUNT
//
// MessageText:
//
//  Cannot offset line item amount of zero.
//
#define BDK_E_CANNOT_OFFSET_ZERO_AMOUNT  ((HRESULT)0x8004505FL)


//
// MessageId: BDK_E_AMOUNT_IN_PROCESS
//
// MessageText:
//
//  The operation cannot be completed because an amount involved is in the process of being sent to the bank for collection.
//
#define BDK_E_AMOUNT_IN_PROCESS          ((HRESULT)0x80045064L)


//
// MessageId: BDK_E_INVALID_CREDIT_AMOUNT
//
// MessageText:
//
//  Credit amount should not be zero.
//
#define BDK_E_INVALID_CREDIT_AMOUNT      ((HRESULT)0x80045082L)


//
// MessageId: BDK_E_CREDIT_AMOUNT_OVER_LIMIT
//
// MessageText:
//
//  Credit amount should not exceed the limit.
//
#define BDK_E_CREDIT_AMOUNT_OVER_LIMIT   ((HRESULT)0x80045083L)


//
// MessageId: BDK_E_INVALID_AMOUNT_FOR_CURRENCY_2
//
// MessageText:
//
//  Invalid amount for currency (JPY or KRW).
//
#define BDK_E_INVALID_AMOUNT_FOR_CURRENCY_2 ((HRESULT)0x80045084L)


//
// MessageId: BDK_E_DUPLICATE_EVENT_ID
//
// MessageText:
//
//  Same event id already been used, please create a new event id and retry.
//
#define BDK_E_DUPLICATE_EVENT_ID         ((HRESULT)0x80045091L)


//
// MessageId: BDK_E_OFFSET_IMM_SETTLE_IN_PROG
//
// MessageText:
//
//  Line items in the immediate_settle_in_progress state cannot be offset.
//
#define BDK_E_OFFSET_IMM_SETTLE_IN_PROG  ((HRESULT)0x8004509BL)


//
// MessageId: BDK_E_SA_IN_STATE_UNOFFSETABLE
//
// MessageText:
//
//  Line item with this settlement amount status cannot be offset.
//
#define BDK_E_SA_IN_STATE_UNOFFSETABLE   ((HRESULT)0x800450A5L)


//
// MessageId: BDK_E_OFFSET_AMOUNT_GREATER_THAN_ORIGINAL
//
// MessageText:
//
//  Offset amount should never exceed the original item amount.
//
#define BDK_E_OFFSET_AMOUNT_GREATER_THAN_ORIGINAL ((HRESULT)0x800450AAL)


//
// MessageId: BDK_E_RES_BALANCE_CHANGE_ON_NONACTIVE_SUBS
//
// MessageText:
//
//  The subscription is not active. The resource usage event is still being reported for the subscription.
//
#define BDK_E_RES_BALANCE_CHANGE_ON_NONACTIVE_SUBS ((HRESULT)0x800450AFL)


//
// MessageId: BDK_E_PI_IN_DECLINE
//
// MessageText:
//
//  the payment instrument already has declines on it
//
#define BDK_E_PI_IN_DECLINE              ((HRESULT)0x800450C8L)


//
// MessageId: BDK_E_SA_IN_INTERMEDIATE_STATUS
//
// MessageText:
//
//  The operation is not allowed when there are Settlement Amounts in intermediate status.
//
#define BDK_E_SA_IN_INTERMEDIATE_STATUS  ((HRESULT)0x800451D1L)


//
// MessageId: BDK_E_INVALID_SETTLEMENT_AMOUNT_ID
//
// MessageText:
//
//  The specified settlement amount id is invalid.
//
#define BDK_E_INVALID_SETTLEMENT_AMOUNT_ID ((HRESULT)0x800451D6L)


//
// MessageId: BDK_E_MISMATCH_RATED_USAGE_TOTAL
//
// MessageText:
//
//  This thread has an out-dated usage total it is trying to rate and write a billing transaction for threshold billing.
//
#define BDK_E_MISMATCH_RATED_USAGE_TOTAL ((HRESULT)0x800451E5L)


//
// MessageId: BDK_E_BAD_RETURN_STATEMENT_SET_INDICATOR2
//
// MessageText:
//
//  Value for returnStatementSet parameter must be 0, 1, or 2.
//
#define BDK_E_BAD_RETURN_STATEMENT_SET_INDICATOR2 ((HRESULT)0x800451BDL)


//
// MessageId: BDK_E_ARITHMETIC_OVERFLOW_FOR_ADD_OR_UPDATE_USAGE
//
// MessageText:
//
//  %1
//
#define BDK_E_ARITHMETIC_OVERFLOW_FOR_ADD_OR_UPDATE_USAGE ((HRESULT)0x800451EAL)


//
// MessageId: BDK_E_REFUND_LINEITEM_NOT_SETTLED
//
// MessageText:
//
//  Refund failed - line item was offset but original line item was never settled.
//
#define BDK_E_REFUND_LINEITEM_NOT_SETTLED ((HRESULT)0x80045217L)


//
// MessageId: BDK_E_RESOURCE_BALANCE_INACTIVE
//
// MessageText:
//
//  Specified resource balance has already been billed.
//
#define BDK_E_RESOURCE_BALANCE_INACTIVE  ((HRESULT)0x80045226L)


//
// MessageId: BDK_E_INVALID_NUMBER_OF_UNITS
//
// MessageText:
//
//  Usage category does not exist for this resource.
//
#define BDK_E_INVALID_NUMBER_OF_UNITS    ((HRESULT)0x80045235L)


//
// MessageId: BDK_E_INVALID_USAGE_CATEGORY
//
// MessageText:
//
//  Usage category does not exist for this resource.
//
#define BDK_E_INVALID_USAGE_CATEGORY     ((HRESULT)0x8004523AL)


//
// MessageId: BDK_E_INSUFFICIENT_PREPAID_BALANCE
//
// MessageText:
//
//  The prepaid resource balance is not sufficient for this usage event.
//
#define BDK_E_INSUFFICIENT_PREPAID_BALANCE ((HRESULT)0x8004523FL)


//
// MessageId: BDK_E_INVALID_FINANCIAL_REASON_CODE
//
// MessageText:
//
//  Financial reason code does not exist.
//
#define BDK_E_INVALID_FINANCIAL_REASON_CODE ((HRESULT)0x80045262L)


//
// MessageId: BDK_E_OFFSET_OF_OFFSET_NOT_PERMITTED
//
// MessageText:
//
//  Offset of offset is not permitted through this API.
//
#define BDK_E_OFFSET_OF_OFFSET_NOT_PERMITTED ((HRESULT)0x80045267L)


//
// MessageId: BDK_E_DONOTSHOWOFFSET_MISMATCHED_AMOUNT
//
// MessageText:
//
//  If offset is not to be shown by getstatement, the offset amount must match the original amount.
//
#define BDK_E_DONOTSHOWOFFSET_MISMATCHED_AMOUNT ((HRESULT)0x80045276L)


//
// MessageId: BDK_E_INVALID_FIN_REASON_CODE_FOR_OFFSET
//
// MessageText:
//
//  Invalid financial reason code passed for the offset usage API.
//
#define BDK_E_INVALID_FIN_REASON_CODE_FOR_OFFSET ((HRESULT)0x8004527BL)


//
// MessageId: BDK_E_EVENT_ACTION_NOT_OFFSETTABLE
//
// MessageText:
//
//  The line item is associated with a non-offsettable event action.
//
#define BDK_E_EVENT_ACTION_NOT_OFFSETTABLE ((HRESULT)0x80045280L)


//
// MessageId: BDK_E_IMMEDIATE_SETTLE_OF_USAGE_NOT_PERMITTED
//
// MessageText:
//
//  Action is not permitted for immediate settle of usage offers.
//
#define BDK_E_IMMEDIATE_SETTLE_OF_USAGE_NOT_PERMITTED ((HRESULT)0x80045285L)


//
// MessageId: BDK_E_RESOURCE_OFFSET_ONLY_ALLOWED_FOR_USAGE
//
// MessageText:
//
//  Resource offset is only allowed for usage.
//
#define BDK_E_RESOURCE_OFFSET_ONLY_ALLOWED_FOR_USAGE ((HRESULT)0x8004528AL)


//
// MessageId: BDK_E_ERROR_PP_INVALID_TAX_REFUND_CODE
//
// MessageText:
//
//  Invalid Tax Refund Code.
//
#define BDK_E_ERROR_PP_INVALID_TAX_REFUND_CODE ((HRESULT)0x800452ADL)


//
// MessageId: BDK_E_DUPLICATE_TRANSACTION_CONFIRMATION_NUMBER
//
// MessageText:
//
//  The transaction confirmation number is already used on the account.
//
#define BDK_E_DUPLICATE_TRANSACTION_CONFIRMATION_NUMBER ((HRESULT)0x800455FAL)


//
// MessageId: BDK_E_TRANSACTION_NOT_EXIST
//
// MessageText:
//
//  The transaction does not exist.
//
#define BDK_E_TRANSACTION_NOT_EXIST      ((HRESULT)0x80045609L)


//
// MessageId: BDK_E_INVALID_CUMULATIVE_AMOUNT
//
// MessageText:
//
//  Invalid combination of cumulative authorized amount and cumulative reversed amount.
//
#define BDK_E_INVALID_CUMULATIVE_AMOUNT  ((HRESULT)0x80045613L)


//
// MessageId: BDK_E_TRANSACTION_EVENT_UNKNOWN
//
// MessageText:
//
//  The transaction event code is unknown.
//
#define BDK_E_TRANSACTION_EVENT_UNKNOWN  ((HRESULT)0x80045618L)


//
// MessageId: BDK_E_TRANSACTION_EVENT_INCONSISTENT
//
// MessageText:
//
//  The transaction event code is not consistent.
//
#define BDK_E_TRANSACTION_EVENT_INCONSISTENT ((HRESULT)0x8004561DL)


//
// MessageId: BDK_E_INVALID_SEQUENCE_NUMBER
//
// MessageText:
//
//  Invalid sequence number reported in transaction event.
//
#define BDK_E_INVALID_SEQUENCE_NUMBER    ((HRESULT)0x80045622L)


//
// MessageId: BDK_E_INVALID_VENDOR_TRANSACTION_ID
//
// MessageText:
//
//  Invalid vendor internal transaction id.
//
#define BDK_E_INVALID_VENDOR_TRANSACTION_ID ((HRESULT)0x80045627L)


//
// MessageId: BDK_E_INVALID_REJECTION_REASON_CODE
//
// MessageText:
//
//  Invalid rejection reason code.
//
#define BDK_E_INVALID_REJECTION_REASON_CODE ((HRESULT)0x8004562CL)


//
// MessageId: BDK_E_INVALID_TRANSACTION_STATUS
//
// MessageText:
//
//  Invalid transaction status.
//
#define BDK_E_INVALID_TRANSACTION_STATUS ((HRESULT)0x80045659L)


//
// MessageId: BDK_E_INVALID_CUMULATIVE_TAX_AMOUNT
//
// MessageText:
//
//  Invalid combination of cumulative authorized tax amount and cumulative reversed tax amount.
//
#define BDK_E_INVALID_CUMULATIVE_TAX_AMOUNT ((HRESULT)0x8004566DL)


//
// MessageId: BDK_E_UNKNOWN_MERCHANT_ID
//
// MessageText:
//
//  Invalid merchant id.
//
#define BDK_E_UNKNOWN_MERCHANT_ID        ((HRESULT)0x80045677L)


//
// MessageId: BDK_E_TRANSACTION_ALREADY_CANCELLED
//
// MessageText:
//
//  Transaction has already been cancelled.
//
#define BDK_E_TRANSACTION_ALREADY_CANCELLED ((HRESULT)0x8004567CL)


//
// MessageId: BDK_E_PMN_INSERT_FAILURE
//
// MessageText:
//
//  Passport member name could not be added.
//
#define BDK_E_PMN_INSERT_FAILURE         ((HRESULT)0x800461BCL)


//
// MessageId: BDK_E_BADSAMECARDUSEDMULTIPLETIMES
//
// MessageText:
//
//  Payment card number has been used multiple times.
//
#define BDK_E_BADSAMECARDUSEDMULTIPLETIMES ((HRESULT)0x800461D0L)


//
// MessageId: BDK_E_PI_ALREADY_ON_ACCOUNT
//
// MessageText:
//
//  Payment instrument already assigned to account.
//
#define BDK_E_PI_ALREADY_ON_ACCOUNT      ((HRESULT)0x800461DFL)


//
// MessageId: BDK_E_PUID_ROLE_LIMIT_EXCEEDED
//
// MessageText:
//
//  Passport ID can have a maximum of 100 roles.
//
#define BDK_E_PUID_ROLE_LIMIT_EXCEEDED   ((HRESULT)0x800461E4L)


//
// MessageId: BDK_E_TOOMANY_FDE_PURCHASES
//
// MessageText:
//
//  Too many fraud enticing purchases on the payment instrument
//
#define BDK_E_TOOMANY_FDE_PURCHASES      ((HRESULT)0x800461E5L)


//
// MessageId: BDK_E_TAX_ID_ASSOCIATION_LIMIT_EXCEEDED
//
// MessageText:
//
//  Passport PUIDs associated with this tax Id has already reaches the maximum limit.
//
#define BDK_E_TAX_ID_ASSOCIATION_LIMIT_EXCEEDED ((HRESULT)0x8004620CL)


//
// MessageId: BDK_E_NOPERMISSION
//
// MessageText:
//
//  Access denied.
//
#define BDK_E_NOPERMISSION               ((HRESULT)0x80042711L)


//
// MessageId: BDK_E_CANNOT_REMOVE_SELF
//
// MessageText:
//
//  Cannot remove self from object.
//
#define BDK_E_CANNOT_REMOVE_SELF         ((HRESULT)0x80042712L)


//
// MessageId: BDK_E_BADXML
//
// MessageText:
//
//  XML is either malformed or incorrect for this API.
//
#define BDK_E_BADXML                     ((HRESULT)0x80042713L)


//
// MessageId: BDK_E_INVALIDCOMMENTSIZE
//
// MessageText:
//
//  Comment text length must be between 1 and 512 characters.
//
#define BDK_E_INVALIDCOMMENTSIZE         ((HRESULT)0x80042714L)


//
// MessageId: BDK_E_BADCANCELMODE
//
// MessageText:
//
//  Invalid cancellation mode.
//
#define BDK_E_BADCANCELMODE              ((HRESULT)0x80042715L)


//
// MessageId: BDK_E_INVALID_BUF_SIZE
//
// MessageText:
//
//  Input parameter is the wrong size.
//
#define BDK_E_INVALID_BUF_SIZE           ((HRESULT)0x80042716L)


//
// MessageId: BDK_E_INVALID_ROLE
//
// MessageText:
//
//  Invalid role.
//
#define BDK_E_INVALID_ROLE               ((HRESULT)0x80042717L)


//
// MessageId: BDK_E_INVALID_PPORT_ID
//
// MessageText:
//
//  Invalid Passport ID.
//
#define BDK_E_INVALID_PPORT_ID           ((HRESULT)0x80042718L)


//
// MessageId: BDK_E_INVALID_ARG
//
// MessageText:
//
//  Invalid argument.
//
#define BDK_E_INVALID_ARG                ((HRESULT)0x8004271AL)


//
// MessageId: BDK_E_UNKNOWN_SERVER_FAILURE
//
// MessageText:
//
//  Unknown server failure. API name: %2, Error code: 0x%3, Error description: %1.
//
#define BDK_E_UNKNOWN_SERVER_FAILURE     ((HRESULT)0x8004271FL)


//
// MessageId: BDK_E_INVALID_STATUS_VALUE
//
// MessageText:
//
//  Status must be ENABLED or SUSPENDED.
//
#define BDK_E_INVALID_STATUS_VALUE       ((HRESULT)0x80042720L)


//
// MessageId: BDK_E_INVALID_FILTER
//
// MessageText:
//
//  Filter must be BASE, UPGRADE, DOWNGRADE, RENEWAL, or empty.
//
#define BDK_E_INVALID_FILTER             ((HRESULT)0x80042721L)


//
// MessageId: BDK_E_MISSING_CATEGORY
//
// MessageText:
//
//  Missing category.
//
#define BDK_E_MISSING_CATEGORY           ((HRESULT)0x80042722L)


//
// MessageId: BDK_E_FIELD_TOO_SHORT
//
// MessageText:
//
//  Input field is too short.
//
#define BDK_E_FIELD_TOO_SHORT            ((HRESULT)0x80042723L)


//
// MessageId: BDK_E_FIELD_TOO_LONG
//
// MessageText:
//
//  Input field is too long.
//
#define BDK_E_FIELD_TOO_LONG             ((HRESULT)0x80042724L)


//
// MessageId: BDK_E_BADZIP
//
// MessageText:
//
//  Invalid ZIP code.
//
#define BDK_E_BADZIP                     ((HRESULT)0x80042725L)


//
// MessageId: BDK_E_ONLYONENODE
//
// MessageText:
//
//  Only one of these nodes should be passed.
//
#define BDK_E_ONLYONENODE                ((HRESULT)0x80042726L)


//
// MessageId: BDK_E_CSR_AUTHZ_FAILED
//
// MessageText:
//
//  Only customer service representatives can invoke this API.
//
#define BDK_E_CSR_AUTHZ_FAILED           ((HRESULT)0x80042728L)


//
// MessageId: BDK_E_NOT_ACCOUNT_ADMIN
//
// MessageText:
//
//  Caller is not an account administrator.
//
#define BDK_E_NOT_ACCOUNT_ADMIN          ((HRESULT)0x80042729L)


//
// MessageId: BDK_E_DELEGATE_ID_UNSPECIFIED
//
// MessageText:
//
//  Delegate ID entered was invalid or not specified.
//
#define BDK_E_DELEGATE_ID_UNSPECIFIED    ((HRESULT)0x8004272AL)


//
// MessageId: BDK_E_REQUESTER_ID_UNSPECIFIED
//
// MessageText:
//
//  Requester Passport ID must be specified.
//
#define BDK_E_REQUESTER_ID_UNSPECIFIED   ((HRESULT)0x8004272BL)


//
// MessageId: BDK_E_INVALID_FLAG_VALUE
//
// MessageText:
//
//  Boolean value must be 0 or 1
//
#define BDK_E_INVALID_FLAG_VALUE         ((HRESULT)0x8004272CL)


//
// MessageId: BDK_E_PROVISIONING_INACTIVE_SUBSCRIPTION
//
// MessageText:
//
//  Subscription service instance is inactive.
//
#define BDK_E_PROVISIONING_INACTIVE_SUBSCRIPTION ((HRESULT)0x8004272DL)


//
// MessageId: BDK_E_INVALID_OBJECT_ID
//
// MessageText:
//
//  Invalid object.
//
#define BDK_E_INVALID_OBJECT_ID          ((HRESULT)0x8004272EL)


//
// MessageId: BDK_E_PARTNERNOTINBILLING
//
// MessageText:
//
//  Calling partner is not registered in SPS database.
//
#define BDK_E_PARTNERNOTINBILLING        ((HRESULT)0x80042738L)


//
// MessageId: BDK_E_RATING_FAILURE
//
// MessageText:
//
//  Rating error has occurred. Check the event log and the tracer.
//
#define BDK_E_RATING_FAILURE             ((HRESULT)0x8004273DL)


//
// MessageId: BDK_SVR2_STARTED
//
// MessageText:
//
//  BDKSVR2 started.
//
#define BDK_SVR2_STARTED                 ((HRESULT)0x80042742L)


//
// MessageId: BDK_CSR_API_CALL_MADE
//
// MessageText:
//
//  CSR call made.
//
#define BDK_CSR_API_CALL_MADE            ((HRESULT)0x80042743L)


//
// MessageId: BDK_E_CSR_CALL_FROM_NONCSR
//
// MessageText:
//
//  CSR call attempt by non-CSR caller.
//
#define BDK_E_CSR_CALL_FROM_NONCSR       ((HRESULT)0x80042744L)


//
// MessageId: BDK_E_TRANS_BALANCE_MISMATCHING_ACCTS
//
// MessageText:
//
//  "From" and "to" payment instrument are not on the same account in TransferBalance.
//
#define BDK_E_TRANS_BALANCE_MISMATCHING_ACCTS ((HRESULT)0x8004274CL)


//
// MessageId: BDK_E_TRANS_BALANCE_TO_PI_INVALID
//
// MessageText:
//
//  Invalid "to" payment instrument in TransferBalance.
//
#define BDK_E_TRANS_BALANCE_TO_PI_INVALID ((HRESULT)0x80042751L)


//
// MessageId: BDK_E_TRANS_BALANCE_TO_SAME_PI
//
// MessageText:
//
//  Cannot transfer to same payment instrument in TransferBalance.
//
#define BDK_E_TRANS_BALANCE_TO_SAME_PI   ((HRESULT)0x80042756L)


//
// MessageId: BDK_E_TRANS_BALANCE_NOT_ALLOW
//
// MessageText:
//
//  Cannot transfer balances between payment instrument types.
//
#define BDK_E_TRANS_BALANCE_NOT_ALLOW    ((HRESULT)0x8004275BL)


//
// MessageId: BDK_E_INTERNAL_ERROR
//
// MessageText:
//
//  Internal database inconsistencies detected.
//
#define BDK_E_INTERNAL_ERROR             ((HRESULT)0x80042760L)


//
// MessageId: BDK_E_OUTSTANDING_BALANCE
//
// MessageText:
//
//  Payment instrument has outstanding balance.
//
#define BDK_E_OUTSTANDING_BALANCE        ((HRESULT)0x80042765L)


//
// MessageId: BDK_E_INVALID_REFERRALDATA_XML
//
// MessageText:
//
//  Invalid  data passed in ReferralData node. Verify that the node exists and that it contains valid XML (1-1024 characters).
//
#define BDK_E_INVALID_REFERRALDATA_XML   ((HRESULT)0x8004276AL)


//
// MessageId: BDK_E_INVALID_GUID
//
// MessageText:
//
//  Invalid GUID.
//
#define BDK_E_INVALID_GUID               ((HRESULT)0x8004276FL)


//
// MessageId: E_UNSUPPORTED_PAYMENT_INSTRUMENT
//
// MessageText:
//
//  Payment instrument type not supported for SettleBalance.
//
#define E_UNSUPPORTED_PAYMENT_INSTRUMENT ((HRESULT)0x80042774L)


//
// MessageId: BDK_E_SUBSCRIPTION_INACTIVE
//
// MessageText:
//
//  Subscription is inactive.
//
#define BDK_E_SUBSCRIPTION_INACTIVE      ((HRESULT)0x80042779L)


//
// MessageId: BDK_E_INVALID_PM_FOR_STOP_PAYMENTS
//
// MessageText:
//
//  Payments can only be stopped for credit card and direct debit transactions.
//
#define BDK_E_INVALID_PM_FOR_STOP_PAYMENTS ((HRESULT)0x8004277EL)


//
// MessageId: BDK_E_EXCEEDS_MAX_NUMBER_OF_USAGE_EVENTS
//
// MessageText:
//
//  Excessive number of usage events reported in one ReportUsageEvent() call.
//
#define BDK_E_EXCEEDS_MAX_NUMBER_OF_USAGE_EVENTS ((HRESULT)0x80042783L)


//
// MessageId: BDK_E_FIELD_NOT_UPDATEABLE
//
// MessageText:
//
//  Field cannot be updated.
//
#define BDK_E_FIELD_NOT_UPDATEABLE       ((HRESULT)0x80042788L)


//
// MessageId: BDK_E_DEFERRED_COMPUTE_ONLY_NOT_SUPPORTED
//
// MessageText:
//
//  Calling CancelSubscription with an end date and in compute-only mode is not supported.
//
#define BDK_E_DEFERRED_COMPUTE_ONLY_NOT_SUPPORTED ((HRESULT)0x8004278DL)


//
// MessageId: BDK_E_SETTLE_SHOULD_BE_THE_LAST_EVENT
//
// MessageText:
//
//  The SETTLE event should be the last event in the event list for ImportSettleBillingItems.
//
#define BDK_E_SETTLE_SHOULD_BE_THE_LAST_EVENT ((HRESULT)0x8004278EL)


//
// MessageId: BDK_E_PAYMENT_METHOD_NO_LONGER_VALID
//
// MessageText:
//
//  Line item payment method is no longer valid.
//
#define BDK_E_PAYMENT_METHOD_NO_LONGER_VALID ((HRESULT)0x8004278FL)


//
// MessageId: BDK_E_PROCESS_USAGE_EVENTS
//
// MessageText:
//
//  Failed to process all usage events.
//
#define BDK_E_PROCESS_USAGE_EVENTS       ((HRESULT)0x80042790L)


//
// MessageId: BDK_E_WRONG_OBJECT_ID_TYPE
//
// MessageText:
//
//  Object ID does not contain account and subscription information.
//
#define BDK_E_WRONG_OBJECT_ID_TYPE       ((HRESULT)0x80042791L)


//
// MessageId: BDK_E_INVALID_PHONE_VALUE
//
// MessageText:
//
//  Field contains invalid characters for a phone number.
//
#define BDK_E_INVALID_PHONE_VALUE        ((HRESULT)0x80042792L)


//
// MessageId: BDK_E_INVALID_AMOUNT_VALUE
//
// MessageText:
//
//  Invalid amount.
//
#define BDK_E_INVALID_AMOUNT_VALUE       ((HRESULT)0x80042797L)


//
// MessageId: BDK_E_MISMATCH_ACCTID_IN_CLOSEBALANCE
//
// MessageText:
//
//  Payment instrument ID and line item ID do not match.
//
#define BDK_E_MISMATCH_ACCTID_IN_CLOSEBALANCE ((HRESULT)0x80042793L)


//
// MessageId: BDK_E_INTERNAL_ADD_COMMENT_FAILED
//
// MessageText:
//
//  InternalAddComment failed. Escalate error to SPG development.
//
#define BDK_E_INTERNAL_ADD_COMMENT_FAILED ((HRESULT)0x80042794L)


//
// MessageId: BDK_E_INVALID_IMMEDIATE_SETTLE_VALUE
//
// MessageText:
//
//  Immediate settle flag value not supported.
//
#define BDK_E_INVALID_IMMEDIATE_SETTLE_VALUE ((HRESULT)0x80042795L)


//
// MessageId: BDK_E_NO_RECORDS_FOR_STOP_PAYMENTS
//
// MessageText:
//
//  No eligible records were found for this call.
//
#define BDK_E_NO_RECORDS_FOR_STOP_PAYMENTS ((HRESULT)0x8004279CL)


//
// MessageId: BDK_E_FAILED_SETTLEMENT_AMOUNT_UPDATE
//
// MessageText:
//
//  Failed to update the settlement amount table with credit card authorization results. This needs to be escalated to SPG development.
//
#define BDK_E_FAILED_SETTLEMENT_AMOUNT_UPDATE ((HRESULT)0x800427A6L)


//
// MessageId: BDK_E_INVALID_TELENUMERIC_STRING
//
// MessageText:
//
//  The supplied telenumeric string does not consist of digits exclusively or exceeds the maximum limit.
//
#define BDK_E_INVALID_TELENUMERIC_STRING ((HRESULT)0x800427B0L)


//
// MessageId: BDK_E_NO_MATCH
//
// MessageText:
//
//  There are no matches for the requested information.
//
#define BDK_E_NO_MATCH                   ((HRESULT)0x800427BAL)


//
// MessageId: BDK_E_MULTIPLE_MATCHES
//
// MessageText:
//
//  There are multiple matches for th