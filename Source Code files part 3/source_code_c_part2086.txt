ssage.
//
#define MQ_ERROR_CANNOT_SIGN_DATA_EX     ((HRESULT)0xC00E0080L)

//
// MessageId: MQ_ERROR_CANNOT_CREATE_HASH_EX
//
// MessageText:
//
// A hash object cannot be created for an authenticated message.
//
#define MQ_ERROR_CANNOT_CREATE_HASH_EX   ((HRESULT)0xC00E0081L)

//
// MessageId: MQ_ERROR_FAIL_VERIFY_SIGNATURE_EX
//
// MessageText:
//
// The signature of the message received is not valid.
//
#define MQ_ERROR_FAIL_VERIFY_SIGNATURE_EX ((HRESULT)0xC00E0082L)

//
// MessageId: MQ_ERROR_CANNOT_DELETE_PSC_OBJECTS
//
// MessageText:
//
// The object that will be deleted is owned by a primary site controller. The operation cannot be performed.
//
#define MQ_ERROR_CANNOT_DELETE_PSC_OBJECTS ((HRESULT)0xC00E0083L)

//
// MessageId: MQ_ERROR_NO_MQUSER_OU
//
// MessageText:
//
// There is no MSMQ Users organizational unit object in Active Directory Domain Services for the domain. Please create one manually.
//
#define MQ_ERROR_NO_MQUSER_OU            ((HRESULT)0xC00E0084L)

//
// MessageId: MQ_ERROR_CANNOT_LOAD_MQAD
//
// MessageText:
//
// The dynamic-link library Mqad.dll cannot be loaded.
//
#define MQ_ERROR_CANNOT_LOAD_MQAD        ((HRESULT)0xC00E0085L)

//
// MessageId: MQ_ERROR_CANNOT_LOAD_MQDSSRV
//
// MessageText:
//
// Obsolete, kept for backward compatibility
//
#define MQ_ERROR_CANNOT_LOAD_MQDSSRV     ((HRESULT)0xC00E0086L)

//
// MessageId: MQ_ERROR_PROPERTIES_CONFLICT
//
// MessageText:
//
// Two or more of the properties passed cannot co-exist.
// For example, you cannot set both PROPID_M_RESP_QUEUE and PROPID_M_RESP_FORMAT_NAME when sending a message.
//
#define MQ_ERROR_PROPERTIES_CONFLICT     ((HRESULT)0xC00E0087L)

//
// MessageId: MQ_ERROR_MESSAGE_NOT_FOUND
//
// MessageText:
//
// The message does not exist or was removed from the queue.
//
#define MQ_ERROR_MESSAGE_NOT_FOUND       ((HRESULT)0xC00E0088L)

//
// MessageId: MQ_ERROR_CANT_RESOLVE_SITES
//
// MessageText:
//
// The sites where the computer resides cannot be resolved. Check that the subnets in your network are configured correctly in Active Directory Domain Services and that each site is configured with the appropriate subnet.
//
#define MQ_ERROR_CANT_RESOLVE_SITES      ((HRESULT)0xC00E0089L)

//
// MessageId: MQ_ERROR_NOT_SUPPORTED_BY_DEPENDENT_CLIENTS
//
// MessageText:
//
// This operation is not supported by dependent clients.
//
#define MQ_ERROR_NOT_SUPPORTED_BY_DEPENDENT_CLIENTS ((HRESULT)0xC00E008AL)

//
// MessageId: MQ_ERROR_OPERATION_NOT_SUPPORTED_BY_REMOTE_COMPUTER
//
// MessageText:
//
// This operation is not supported by the remote Message Queuing service. For example, MQReceiveMessageByLookupId is not supported by MSMQ 1.0/2.0.
//
#define MQ_ERROR_OPERATION_NOT_SUPPORTED_BY_REMOTE_COMPUTER ((HRESULT)0xC00E008BL)

//
// MessageId: MQ_ERROR_NOT_A_CORRECT_OBJECT_CLASS
//
// MessageText:
//
// The object whose properties are being retrieved from Active Directory Domain Services does not belong to the class requested.
//
#define MQ_ERROR_NOT_A_CORRECT_OBJECT_CLASS ((HRESULT)0xC00E008CL)

//
// MessageId: MQ_ERROR_MULTI_SORT_KEYS
//
// MessageText:
//
// The value of cCol in MQSORTSET cannot be greater than 1. Active Directory Domain Services supports only a single sort key.
//
#define MQ_ERROR_MULTI_SORT_KEYS         ((HRESULT)0xC00E008DL)

//
// MessageId: MQ_ERROR_GC_NEEDED
//
// MessageText:
//
// An MSMQ Configuration (msmq) object with the GUID supplied cannot be created. By default, an Active Directory Domain Services forest does not support adding an object with a supplied GUID.
//
#define MQ_ERROR_GC_NEEDED               ((HRESULT)0xC00E008EL)

//
// MessageId: MQ_ERROR_DS_BIND_ROOT_FOREST
//
// MessageText:
//
// Binding to the forest root failed. This error usually indicates a problem in the DNS configuration.
//
#define MQ_ERROR_DS_BIND_ROOT_FOREST     ((HRESULT)0xC00E008FL)

//
// MessageId: MQ_ERROR_DS_LOCAL_USER
//
// MessageText:
//
// A local user is authenticated as an anonymous user and cannot access Active Directory Domain Services. You need to log on as a domain user to access Active Directory Domain Services.
//
#define MQ_ERROR_DS_LOCAL_USER           ((HRESULT)0xC00E0090L)

//
// MessageId: MQ_ERROR_Q_ADS_PROPERTY_NOT_SUPPORTED
//
// MessageText:
//
// The column PROPID_Q_ADS_PATH is not supported for the MQLocateBegin API.
//
#define MQ_ERROR_Q_ADS_PROPERTY_NOT_SUPPORTED ((HRESULT)0xC00E0091L)

//
// MessageId: MQ_ERROR_BAD_XML_FORMAT
//
// MessageText:
//
// The given property is not a valid XML document.
//
#define MQ_ERROR_BAD_XML_FORMAT          ((HRESULT)0xC00E0092L)

//
// MessageId: MQ_ERROR_UNSUPPORTED_CLASS
//
// MessageText:
//
// The Active Directory Domain Services object specified is not an instance of a supported class.
//
#define MQ_ERROR_UNSUPPORTED_CLASS       ((HRESULT)0xC00E0093L)

//
// MessageId: MQ_ERROR_UNINITIALIZED_OBJECT
//
// MessageText:
//
// The MSMQManagement object must be initialized before it is used.
//
#define MQ_ERROR_UNINITIALIZED_OBJECT    ((HRESULT)0xC00E0094L)

//
// MessageId: MQ_ERROR_CANNOT_CREATE_PSC_OBJECTS
//
// MessageText:
//
// The object that will be created should be owned by a primary site controller. The operation cannot be performed.
//
#define MQ_ERROR_CANNOT_CREATE_PSC_OBJECTS ((HRESULT)0xC00E0095L)

//
// MessageId: MQ_ERROR_CANNOT_UPDATE_PSC_OBJECTS
//
// MessageText:
//
// The object that will be updated is owned by a primary site controller. The operation cannot be performed.
//
#define MQ_ERROR_CANNOT_UPDATE_PSC_OBJECTS ((HRESULT)0xC00E0096L)

//
// MessageId: MQ_ERROR_RESOLVE_ADDRESS
//
// MessageText:
//
// Message Queuing is not able to resolve the address specfied by the user. The address may be wrong or DNS look-up for address failed.
//
#define MQ_ERROR_RESOLVE_ADDRESS         ((HRESULT)0xC00E0099L)

//
// MessageId: MQ_ERROR_TOO_MANY_PROPERTIES
//
// MessageText:
//
// Too many properties passed to the function. Message Queuing can process up to 128 properties in one call.
//
#define MQ_ERROR_TOO_MANY_PROPERTIES     ((HRESULT)0xC00E009AL)

//
// MessageId: MQ_ERROR_MESSAGE_NOT_AUTHENTICATED
//
// MessageText:
//
// The queue only accepts authenticated messages.
//
#define MQ_ERROR_MESSAGE_NOT_AUTHENTICATED ((HRESULT)0xC00E009BL)

//
// MessageId: MQ_ERROR_MESSAGE_LOCKED_UNDER_TRANSACTION
//
// MessageText:
//
// The message is currently being processed under a transaction. Till the transaction outcome is determined, the message cannot be processed in any other transaction.
//
#define MQ_ERROR_MESSAGE_LOCKED_UNDER_TRANSACTION ((HRESULT)0xC00E009CL)


#ifdef __cplusplus
extern "C"
{
#endif

//********************************************************************
//  RECEIVE CALLBACK
//********************************************************************

typedef
VOID
(APIENTRY *PMQRECEIVECALLBACK)(
    HRESULT hrStatus,
    QUEUEHANDLE hSource,
    DWORD dwTimeout,
    DWORD dwAction,
    MQMSGPROPS* pMessageProps,
    LPOVERLAPPED lpOverlapped,
    HANDLE hCursor
    );


//********************************************************************
// MSMQ API
//********************************************************************

HRESULT
APIENTRY
MQCreateQueue(
    __in_opt PSECURITY_DESCRIPTOR pSecurityDescriptor,
    __inout MQQUEUEPROPS* pQueueProps,
    __out_ecount_opt(*lpdwFormatNameLength)LPWSTR lpwcsFormatName,
    __inout LPDWORD lpdwFormatNameLength
    );

HRESULT
APIENTRY
MQDeleteQueue(
    __in LPCWSTR lpwcsFormatName
    );

HRESULT
APIENTRY
MQLocateBegin(
    __in_opt LPCWSTR lpwcsContext,
    __in_opt MQRESTRICTION* pRestriction,
    __in MQCOLUMNSET* pColumns,
    __in MQSORTSET* pSort,
    __out PHANDLE phEnum
    );

HRESULT
APIENTRY
MQLocateNext(
    __in HANDLE hEnum,
    __inout DWORD* pcProps,
    __out MQPROPVARIANT aPropVar[]
    );

HRESULT
APIENTRY
MQLocateEnd(
    __in HANDLE hEnum
    );

HRESULT
APIENTRY
MQOpenQueue(
    __in LPCWSTR lpwcsFormatName,
    __in DWORD dwAccess,
    __in DWORD dwShareMode,
    __out QUEUEHANDLE* phQueue
    );

HRESULT
APIENTRY
MQSendMessage(
    __in QUEUEHANDLE hDestinationQueue,
    __in MQMSGPROPS* pMessageProps,
    __in_opt ITransaction *pTransaction
    );

HRESULT
APIENTRY
MQReceiveMessage(
    __in QUEUEHANDLE hSource,
    __in DWORD dwTimeout,
    __in DWORD dwAction,
    __inout_opt MQMSGPROPS* pMessageProps,
    __inout_opt LPOVERLAPPED lpOverlapped,
    __in_opt PMQRECEIVECALLBACK fnReceiveCallback,
    __in_opt HANDLE hCursor,
    __in_opt ITransaction* pTransaction
    );

#if(_WIN32_WINNT >= 0x0501)

HRESULT
APIENTRY
MQReceiveMessageByLookupId(
    __in QUEUEHANDLE hSource,
    __in ULONGLONG ullLookupId,
    __in DWORD dwLookupAction,
    __inout_opt MQMSGPROPS* pMessageProps,
    __inout_opt LPOVERLAPPED lpOverlapped,
    __in_opt PMQRECEIVECALLBACK fnReceiveCallback,
    __in_opt ITransaction *pTransaction
    );

#endif

HRESULT
APIENTRY
MQCreateCursor(
    __in QUEUEHANDLE hQueue,
    __out PHANDLE phCursor
    );

HRESULT
APIENTRY
MQCloseCursor(
    __in HANDLE hCursor
    );

HRESULT
APIENTRY
MQCloseQueue(
    __in QUEUEHANDLE hQueue
    );

HRESULT
APIENTRY
MQSetQueueProperties(
    __in LPCWSTR lpwcsFormatName,
    __inout MQQUEUEPROPS* pQueueProps
    );

HRESULT
APIENTRY
MQGetQueueProperties(
    __in LPCWSTR lpwcsFormatName,
    __inout MQQUEUEPROPS* pQueueProps
    );

HRESULT
APIENTRY
MQGetQueueSecurity(
    __in LPCWSTR lpwcsFormatName,
    __in SECURITY_INFORMATION RequestedInformation,
    __out_bcount(nLength)  PSECURITY_DESCRIPTOR pSecurityDescriptor,
    __in DWORD nLength,
    __out LPDWORD lpnLengthNeeded
    );

HRESULT
APIENTRY
MQSetQueueSecurity(
    __in LPCWSTR lpwcsFormatName,
    __in SECURITY_INFORMATION SecurityInformation,
    __in_opt PSECURITY_DESCRIPTOR pSecurityDescriptor
    );

HRESULT
APIENTRY
MQPathNameToFormatName(
    __in LPCWSTR lpwcsPathName,
    __out_ecount(*lpdwFormatNameLength)  LPWSTR lpwcsFormatName,
    __inout LPDWORD lpdwFormatNameLength
    );

HRESULT
APIENTRY
MQHandleToFormatName(
    __in QUEUEHANDLE hQueue,
    __out_ecount(*lpdwFormatNameLength) LPWSTR lpwcsFormatName,
    __inout LPDWORD lpdwFormatNameLength
    );

HRESULT
APIENTRY
MQInstanceToFormatName(
    __in GUID* pGuid,
    __out_ecount(*lpdwFormatNameLength)  LPWSTR lpwcsFormatName,
    __inout LPDWORD lpdwFormatNameLength
    );

#if(_WIN32_WINNT >= 0x0501)

HRESULT
APIENTRY
MQADsPathToFormatName(
    __in LPCWSTR lpwcsADsPath,
    __out_ecount(*lpdwFormatNameLength) LPWSTR lpwcsFormatName,
    __inout LPDWORD lpdwFormatNameLength
    );

#endif

VOID
APIENTRY
MQFreeMemory(
    __in PVOID pvMemory
    );

HRESULT
APIENTRY
MQGetMachineProperties(
    __in_opt LPCWSTR lpwcsMachineName,
    __in_opt const GUID* pguidMachineId,
    __inout MQQMPROPS* pQMProps
    );

HRESULT
APIENTRY
MQGetSecurityContext(
    __in_bcount_opt(dwCertBufferLength) PVOID lpCertBuffer,
    __in DWORD dwCertBufferLength,
    __out HANDLE* phSecurityContext
    );

HRESULT
APIENTRY
MQGetSecurityContextEx(
    __in_bcount_opt(dwCertBufferLength) PVOID lpCertBuffer,
    __in DWORD dwCertBufferLength,
    __out HANDLE* phSecurityContext
    );

VOID
APIENTRY
MQFreeSecurityContext(
    __in HANDLE hSecurityContext
    );

HRESULT
APIENTRY
MQRegisterCertificate(
    __in DWORD dwFlags,
    __in PVOID lpCertBuffer,
    __in DWORD dwCertBufferLength
    );

HRESULT
APIENTRY
MQBeginTransaction(
    __out ITransaction **ppTransaction
    );

HRESULT
APIENTRY
MQGetOverlappedResult(
    __in LPOVERLAPPED lpOverlapped
    );

HRESULT
APIENTRY
MQGetPrivateComputerInformation(
    __in_opt LPCWSTR lpwcsComputerName,
    __inout MQPRIVATEPROPS* pPrivateProps
    );

HRESULT
APIENTRY
MQPurgeQueue(
    __in QUEUEHANDLE hQueue
    );

HRESULT
APIENTRY
MQMgmtGetInfo(
    __in_opt LPCWSTR pComputerName,
    __in LPCWSTR pObjectName,
    __inout MQMGMTPROPS* pMgmtProps
    );

HRESULT
APIENTRY
MQMgmtAction(
    __in_opt LPCWSTR pComputerName,
    __in LPCWSTR pObjectName,
    __in LPCWSTR pAction
    );

HRESULT
APIENTRY
MQMarkMessageRejected(
    __in HANDLE hQueue,
    __in ULONGLONG ullLookupId
    );

HRESULT
APIENTRY
MQMoveMessage(
    __in QUEUEHANDLE hSourceQueue,
    __in QUEUEHANDLE hDestinationQueue,
    __in ULONGLONG ullLookupId,
    __in_opt ITransaction *pTransaction
    );

#ifdef __cplusplus
}
#endif

#endif // __MQ_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\MqMail.h ===
/*++

Copyright (c) 1996-1999 Microsoft Corporation

Module Name:

    mqmail.h

Abstract:

    Master include file for Message Queue Exchange Connector 
                            or MAPI applications

--*/
#ifndef _MQMAIL_H
#define _MQMAIL_H

#if _MSC_VER > 1000
#pragma once
#endif

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

//----------------------------------------------------------------
//mail type-id for queues
//----------------------------------------------------------------
#include <windows.h>
#include <windowsx.h>
#include <ole2.h>

/* 5eadc0d0-7182-11cf-a8ff-0020afb8fb50 */
DEFINE_GUID(CLSID_MQMailQueueType,
			0x5eadc0d0,
			0x7182, 0x11cf,
			0xa8, 0xff, 0x00, 0x20, 0xaf, 0xb8, 0xfb, 0x50);

//----------------------------------------------------------------
//recipient type (to, cc, bcc)
//----------------------------------------------------------------
typedef enum MQMailRecipType_enum
{
	MQMailRecip_TO,
	MQMailRecip_CC,
	MQMailRecip_BCC,
} MQMailRecipType;

//----------------------------------------------------------------
//recipient data
//----------------------------------------------------------------
typedef struct MQMailRecip_tag
{
	LPSTR			szName;				//display name of recipient
	LPSTR			szQueueLabel;		//queue label of recipient
	LPSTR			szAddress;			//address, queue-label or user@queue-label
	MQMailRecipType iType;				//recipient type (to, cc, bcc)
	LPFILETIME		pftDeliveryTime;	//delivery time (incase in a delivery report recipient list)
	LPSTR			szNonDeliveryReason;//non-delivery reason (incase in a non-delivery report recipient list)
} MQMailRecip, FAR * LPMQMailRecip;

//----------------------------------------------------------------
//recipient list
//----------------------------------------------------------------
typedef struct MQMailRecipList_tag
{
	ULONG cRecips;					//number of recips
	LPMQMailRecip FAR * apRecip;	//pointer to a block of recip pointers
} MQMailRecipList, FAR * LPMQMailRecipList;

//----------------------------------------------------------------
//types of value a form field can have
//----------------------------------------------------------------
typedef enum MQMailFormFieldType_enum
{
	MQMailFormField_BOOL,		//boolean data
	MQMailFormField_STRING,		//string data
	MQMailFormField_LONG,		//long data
	MQMailFormField_CURRENCY,	//currency data
	MQMailFormField_DOUBLE,		//double data
} MQMailFormFieldType;

//----------------------------------------------------------------
//union of available types of values
//----------------------------------------------------------------
typedef union MQMailFormFieldData_tag
{
	BOOL	b;			//use when type is MQMailFormField_BOOL
	LPSTR	lpsz;		//use when type is MQMailFormField_STRING
	LONG	l;			//use when type is MQMailFormField_LONG
	CY		cy;			//use when type is MQMailFormField_CURRENCY
	double	dbl;		//use when type is MQMailFormField_DOUBLE
} MQMailFormFieldData, FAR * LPMQMailFormFieldData;

//----------------------------------------------------------------
//form field
//----------------------------------------------------------------
typedef struct MQMailFormField_tag
{
	LPSTR						szName;	//name of field
	MQMailFormFieldType			iType;	//type of value (boolean, string)
	MQMailFormFieldData			Value;	//value (union of available types)
} MQMailFormField, FAR * LPMQMailFormField;

//----------------------------------------------------------------
//list of form fields
//----------------------------------------------------------------
typedef struct MQMailFormFieldList_tag
{
	ULONG cFields;						//number of fields
	LPMQMailFormField FAR * apField;	//pointer to a block of field pointers
} MQMailFormFieldList, FAR * LPMQMailFormFieldList;

//----------------------------------------------------------------
//types of EMail
//----------------------------------------------------------------
typedef enum MQMailEMailType_enum
{
	MQMailEMail_MESSAGE,			//text message
	MQMailEMail_FORM,				//form with fields
	MQMailEMail_TNEF,				//tnef data
	MQMailEMail_DELIVERY_REPORT,	//delivery report
	MQMailEMail_NON_DELIVERY_REPORT,//non-delivery report
} MQMailEMailType;

//----------------------------------------------------------------
//message specific data
//----------------------------------------------------------------
typedef struct MQMailMessageData_tag
{
	LPSTR			szText;						//message text
} MQMailMessageData, FAR * LPMQMailMessageData;

//----------------------------------------------------------------
//form specific data
//----------------------------------------------------------------
typedef struct MQMailFormData_tag
{
	LPSTR					szName;				//name of form
	LPMQMailFormFieldList	pFields;			//list of fields
} MQMailFormData, FAR * LPMQMailFormData;

//----------------------------------------------------------------
//tnef specific data
//----------------------------------------------------------------
typedef struct MQMailTnefData_tag
{
	ULONG	cbData;						//size of tnef data
	LPBYTE	lpbData;					//tnef data buffer
} MQMailTnefData, FAR * LPMQMailTnefData;

//----------------------------------------------------------------
//delivery report specific data
//----------------------------------------------------------------
typedef struct MQMailDeliveryReportData_tag
{
	LPMQMailRecipList	pDeliveredRecips;	//delivered recipients
	LPSTR				szOriginalSubject;	//original mail subject
	LPFILETIME			pftOriginalDate;	//original mail sending time
} MQMailDeliveryReportData, FAR * LPMQMailDeliveryReportData;

//----------------------------------------------------------------
//non-delivery report specific data
//----------------------------------------------------------------
typedef struct MQMailEMail_tag MQMailEMail, FAR * LPMQMailEMail;
typedef struct MQMailNonDeliveryReportData_tag
{
	LPMQMailRecipList	pNonDeliveredRecips;//non-delivered recipients
	LPMQMailEMail		pOriginalEMail;		//original mail
} MQMailNonDeliveryReportData, FAR * LPMQMailNonDeliveryReportData;

//----------------------------------------------------------------
//EMail basic data and specific form/message data
//----------------------------------------------------------------
typedef struct MQMailEMail_tag
{
	LPMQMailRecip		pFrom;						//sender
	LPSTR				szSubject;					//subject
	BOOL				fRequestDeliveryReport;		//request delivery report
	BOOL				fRequestNonDeliveryReport;	//request non-delivery report
	LPFILETIME			pftDate;					//sending time
	LPMQMailRecipList	pRecips;					//recipients
	MQMailEMailType		iType;						//type of EMail (message, form, etc...)
	union											//union of available EMail types
	{
		MQMailFormData		form;		            //use when type is MQMailEMail_FORM
		MQMailMessageData	message;	            //use when type is MQMailEMail_MESSAGE
		MQMailTnefData		tnef;		            //use when type is MQMailEMail_TNEF
		MQMailDeliveryReportData	DeliveryReport;		//use when type is MQMailEMail_DELIVERY_REPORT
		MQMailNonDeliveryReportData NonDeliveryReport;	//use when type is MQMailEMail_NON_DELIVERY_REPORT
	};
	LPVOID				pReserved;	//should be set to NULL
} MQMailEMail, FAR * LPMQMailEMail;

//----------------------------------------------------------------
//creates a falcon message body out of an EMail structure
//----------------------------------------------------------------
STDAPI MQMailComposeBody(LPMQMailEMail		pEMail,
						 ULONG FAR *		pcbBuffer,
						 LPBYTE FAR *		ppbBuffer);

//----------------------------------------------------------------
//creates an EMail structure out of a falcon message body
//----------------------------------------------------------------
STDAPI MQMailParseBody(ULONG				cbBuffer,
					   LPBYTE				pbBuffer,
					   LPMQMailEMail FAR *	ppEMail);

//----------------------------------------------------------------
//frees memory that was allocated by MQMail like *ppEmail in MQMailParseBody
// or *ppBuffer in MQMailComposeBody.
//----------------------------------------------------------------
STDAPI_(void) MQMailFreeMemory(LPVOID lpBuffer);


#ifdef __cplusplus
}
#endif
#endif //_MQMAIL_H
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\MqOaI.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0555 */
/* Compiler settings for mqoai.idl:
    Oicf, W1, Zp8, env=Win32 (32b run), target_arch=X86 7.00.0555 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__


#ifndef __mqoai_h__
#define __mqoai_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IMSMQQuery_FWD_DEFINED__
#define __IMSMQQuery_FWD_DEFINED__
typedef interface IMSMQQuery IMSMQQuery;
#endif 	/* __IMSMQQuery_FWD_DEFINED__ */


#ifndef __IMSMQQueueInfo_FWD_DEFINED__
#define __IMSMQQueueInfo_FWD_DEFINED__
typedef interface IMSMQQueueInfo IMSMQQueueInfo;
#endif 	/* __IMSMQQueueInfo_FWD_DEFINED__ */


#ifndef __IMSMQQueueInfo2_FWD_DEFINED__
#define __IMSMQQueueInfo2_FWD_DEFINED__
typedef interface IMSMQQueueInfo2 IMSMQQueueInfo2;
#endif 	/* __IMSMQQueueInfo2_FWD_DEFINED__ */


#ifndef __IMSMQQueueInfo3_FWD_DEFINED__
#define __IMSMQQueueInfo3_FWD_DEFINED__
typedef interface IMSMQQueueInfo3 IMSMQQueueInfo3;
#endif 	/* __IMSMQQueueInfo3_FWD_DEFINED__ */


#ifndef __IMSMQQueueInfo4_FWD_DEFINED__
#define __IMSMQQueueInfo4_FWD_DEFINED__
typedef interface IMSMQQueueInfo4 IMSMQQueueInfo4;
#endif 	/* __IMSMQQueueInfo4_FWD_DEFINED__ */


#ifndef __IMSMQQueue_FWD_DEFINED__
#define __IMSMQQueue_FWD_DEFINED__
typedef interface IMSMQQueue IMSMQQueue;
#endif 	/* __IMSMQQueue_FWD_DEFINED__ */


#ifndef __IMSMQQueue2_FWD_DEFINED__
#define __IMSMQQueue2_FWD_DEFINED__
typedef interface IMSMQQueue2 IMSMQQueue2;
#endif 	/* __IMSMQQueue2_FWD_DEFINED__ */


#ifndef __IMSMQQueue3_FWD_DEFINED__
#define __IMSMQQueue3_FWD_DEFINED__
typedef interface IMSMQQueue3 IMSMQQueue3;
#endif 	/* __IMSMQQueue3_FWD_DEFINED__ */


#ifndef __IMSMQQueue4_FWD_DEFINED__
#define __IMSMQQueue4_FWD_DEFINED__
typedef interface IMSMQQueue4 IMSMQQueue4;
#endif 	/* __IMSMQQueue4_FWD_DEFINED__ */


#ifndef __IMSMQMessage_FWD_DEFINED__
#define __IMSMQMessage_FWD_DEFINED__
typedef interface IMSMQMessage IMSMQMessage;
#endif 	/* __IMSMQMessage_FWD_DEFINED__ */


#ifndef __IMSMQQueueInfos_FWD_DEFINED__
#define __IMSMQQueueInfos_FWD_DEFINED__
typedef interface IMSMQQueueInfos IMSMQQueueInfos;
#endif 	/* __IMSMQQueueInfos_FWD_DEFINED__ */


#ifndef __IMSMQQueueInfos2_FWD_DEFINED__
#define __IMSMQQueueInfos2_FWD_DEFINED__
typedef interface IMSMQQueueInfos2 IMSMQQueueInfos2;
#endif 	/* __IMSMQQueueInfos2_FWD_DEFINED__ */


#ifndef __IMSMQQueueInfos3_FWD_DEFINED__
#define __IMSMQQueueInfos3_FWD_DEFINED__
typedef interface IMSMQQueueInfos3 IMSMQQueueInfos3;
#endif 	/* __IMSMQQueueInfos3_FWD_DEFINED__ */


#ifndef __IMSMQQueueInfos4_FWD_DEFINED__
#define __IMSMQQueueInfos4_FWD_DEFINED__
typedef interface IMSMQQueueInfos4 IMSMQQueueInfos4;
#endif 	/* __IMSMQQueueInfos4_FWD_DEFINED__ */


#ifndef __IMSMQEvent_FWD_DEFINED__
#define __IMSMQEvent_FWD_DEFINED__
typedef interface IMSMQEvent IMSMQEvent;
#endif 	/* __IMSMQEvent_FWD_DEFINED__ */


#ifndef __IMSMQEvent2_FWD_DEFINED__
#define __IMSMQEvent2_FWD_DEFINED__
typedef interface IMSMQEvent2 IMSMQEvent2;
#endif 	/* __IMSMQEvent2_FWD_DEFINED__ */


#ifndef __IMSMQEvent3_FWD_DEFINED__
#define __IMSMQEvent3_FWD_DEFINED__
typedef interface IMSMQEvent3 IMSMQEvent3;
#endif 	/* __IMSMQEvent3_FWD_DEFINED__ */


#ifndef __IMSMQTransaction_FWD_DEFINED__
#define __IMSMQTransaction_FWD_DEFINED__
typedef interface IMSMQTransaction IMSMQTransaction;
#endif 	/* __IMSMQTransaction_FWD_DEFINED__ */


#ifndef __IMSMQCoordinatedTransactionDispenser_FWD_DEFINED__
#define __IMSMQCoordinatedTransactionDispenser_FWD_DEFINED__
typedef interface IMSMQCoordinatedTransactionDispenser IMSMQCoordinatedTransactionDispenser;
#endif 	/* __IMSMQCoordinatedTransactionDispenser_FWD_DEFINED__ */


#ifndef __IMSMQTransactionDispenser_FWD_DEFINED__
#define __IMSMQTransactionDispenser_FWD_DEFINED__
typedef interface IMSMQTransactionDispenser IMSMQTransactionDispenser;
#endif 	/* __IMSMQTransactionDispenser_FWD_DEFINED__ */


#ifndef __IMSMQQuery2_FWD_DEFINED__
#define __IMSMQQuery2_FWD_DEFINED__
typedef interface IMSMQQuery2 IMSMQQuery2;
#endif 	/* __IMSMQQuery2_FWD_DEFINED__ */


#ifndef __IMSMQQuery3_FWD_DEFINED__
#define __IMSMQQuery3_FWD_DEFINED__
typedef interface IMSMQQuery3 IMSMQQuery3;
#endif 	/* __IMSMQQuery3_FWD_DEFINED__ */


#ifndef __IMSMQQuery4_FWD_DEFINED__
#define __IMSMQQuery4_FWD_DEFINED__
typedef interface IMSMQQuery4 IMSMQQuery4;
#endif 	/* __IMSMQQuery4_FWD_DEFINED__ */


#ifndef __MSMQQuery_FWD_DEFINED__
#define __MSMQQuery_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSMQQuery MSMQQuery;
#else
typedef struct MSMQQuery MSMQQuery;
#endif /* __cplusplus */

#endif 	/* __MSMQQuery_FWD_DEFINED__ */


#ifndef __IMSMQMessage2_FWD_DEFINED__
#define __IMSMQMessage2_FWD_DEFINED__
typedef interface IMSMQMessage2 IMSMQMessage2;
#endif 	/* __IMSMQMessage2_FWD_DEFINED__ */


#ifndef __IMSMQMessage3_FWD_DEFINED__
#define __IMSMQMessage3_FWD_DEFINED__
typedef interface IMSMQMessage3 IMSMQMessage3;
#endif 	/* __IMSMQMessage3_FWD_DEFINED__ */


#ifndef __IMSMQMessage4_FWD_DEFINED__
#define __IMSMQMessage4_FWD_DEFINED__
typedef interface IMSMQMessage4 IMSMQMessage4;
#endif 	/* __IMSMQMessage4_FWD_DEFINED__ */


#ifndef __MSMQMessage_FWD_DEFINED__
#define __MSMQMessage_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSMQMessage MSMQMessage;
#else
typedef struct MSMQMessage MSMQMessage;
#endif /* __cplusplus */

#endif 	/* __MSMQMessage_FWD_DEFINED__ */


#ifndef __MSMQQueue_FWD_DEFINED__
#define __MSMQQueue_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSMQQueue MSMQQueue;
#else
typedef struct MSMQQueue MSMQQueue;
#endif /* __cplusplus */

#endif 	/* __MSMQQueue_FWD_DEFINED__ */


#ifndef __IMSMQPrivateEvent_FWD_DEFINED__
#define __IMSMQPrivateEvent_FWD_DEFINED__
typedef interface IMSMQPrivateEvent IMSMQPrivateEvent;
#endif 	/* __IMSMQPrivateEvent_FWD_DEFINED__ */


#ifndef ___DMSMQEventEvents_FWD_DEFINED__
#define ___DMSMQEventEvents_FWD_DEFINED__
typedef interface _DMSMQEventEvents _DMSMQEventEvents;
#endif 	/* ___DMSMQEventEvents_FWD_DEFINED__ */


#ifndef __MSMQEvent_FWD_DEFINED__
#define __MSMQEvent_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSMQEvent MSMQEvent;
#else
typedef struct MSMQEvent MSMQEvent;
#endif /* __cplusplus */

#endif 	/* __MSMQEvent_FWD_DEFINED__ */


#ifndef __MSMQQueueInfo_FWD_DEFINED__
#define __MSMQQueueInfo_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSMQQueueInfo MSMQQueueInfo;
#else
typedef struct MSMQQueueInfo MSMQQueueInfo;
#endif /* __cplusplus */

#endif 	/* __MSMQQueueInfo_FWD_DEFINED__ */


#ifndef __MSMQQueueInfos_FWD_DEFINED__
#define __MSMQQueueInfos_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSMQQueueInfos MSMQQueueInfos;
#else
typedef struct MSMQQueueInfos MSMQQueueInfos;
#endif /* __cplusplus */

#endif 	/* __MSMQQueueInfos_FWD_DEFINED__ */


#ifndef __IMSMQTransaction2_FWD_DEFINED__
#define __IMSMQTransaction2_FWD_DEFINED__
typedef interface IMSMQTransaction2 IMSMQTransaction2;
#endif 	/* __IMSMQTransaction2_FWD_DEFINED__ */


#ifndef __IMSMQTransaction3_FWD_DEFINED__
#define __IMSMQTransaction3_FWD_DEFINED__
typedef interface IMSMQTransaction3 IMSMQTransaction3;
#endif 	/* __IMSMQTransaction3_FWD_DEFINED__ */


#ifndef __MSMQTransaction_FWD_DEFINED__
#define __MSMQTransaction_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSMQTransaction MSMQTransaction;
#else
typedef struct MSMQTransaction MSMQTransaction;
#endif /* __cplusplus */

#endif 	/* __MSMQTransaction_FWD_DEFINED__ */


#ifndef __IMSMQCoordinatedTransactionDispenser2_FWD_DEFINED__
#define __IMSMQCoordinatedTransactionDispenser2_FWD_DEFINED__
typedef interface IMSMQCoordinatedTransactionDispenser2 IMSMQCoordinatedTransactionDispenser2;
#endif 	/* __IMSMQCoordinatedTransactionDispenser2_FWD_DEFINED__ */


#ifndef __IMSMQCoordinatedTransactionDispenser3_FWD_DEFINED__
#define __IMSMQCoordinatedTransactionDispenser3_FWD_DEFINED__
typedef interface IMSMQCoordinatedTransactionDispenser3 IMSMQCoordinatedTransactionDispenser3;
#endif 	/* __IMSMQCoordinatedTransactionDispenser3_FWD_DEFINED__ */


#ifndef __MSMQCoordinatedTransactionDispenser_FWD_DEFINED__
#define __MSMQCoordinatedTransactionDispenser_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSMQCoordinatedTransactionDispenser MSMQCoordinatedTransactionDispenser;
#else
typedef struct MSMQCoordinatedTransactionDispenser MSMQCoordinatedTransactionDispenser;
#endif /* __cplusplus */

#endif 	/* __MSMQCoordinatedTransactionDispenser_FWD_DEFINED__ */


#ifndef __IMSMQTransactionDispenser2_FWD_DEFINED__
#define __IMSMQTransactionDispenser2_FWD_DEFINED__
typedef interface IMSMQTransactionDispenser2 IMSMQTransactionDispenser2;
#endif 	/* __IMSMQTransactionDispenser2_FWD_DEFINED__ */


#ifndef __IMSMQTransactionDispenser3_FWD_DEFINED__
#define __IMSMQTransactionDispenser3_FWD_DEFINED__
typedef interface IMSMQTransactionDispenser3 IMSMQTransactionDispenser3;
#endif 	/* __IMSMQTransactionDispenser3_FWD_DEFINED__ */


#ifndef __MSMQTransactionDispenser_FWD_DEFINED__
#define __MSMQTransactionDispenser_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSMQTransactionDispenser MSMQTransactionDispenser;
#else
typedef struct MSMQTransactionDispenser MSMQTransactionDispenser;
#endif /* __cplusplus */

#endif 	/* __MSMQTransactionDispenser_FWD_DEFINED__ */


#ifndef __IMSMQApplication_FWD_DEFINED__
#define __IMSMQApplication_FWD_DEFINED__
typedef interface IMSMQApplication IMSMQApplication;
#endif 	/* __IMSMQApplication_FWD_DEFINED__ */


#ifndef __IMSMQApplication2_FWD_DEFINED__
#define __IMSMQApplication2_FWD_DEFINED__
typedef interface IMSMQApplication2 IMSMQApplication2;
#endif 	/* __IMSMQApplication2_FWD_DEFINED__ */


#ifndef __IMSMQApplication3_FWD_DEFINED__
#define __IMSMQApplication3_FWD_DEFINED__
typedef interface IMSMQApplication3 IMSMQApplication3;
#endif 	/* __IMSMQApplication3_FWD_DEFINED__ */


#ifndef __MSMQApplication_FWD_DEFINED__
#define __MSMQApplication_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSMQApplication MSMQApplication;
#else
typedef struct MSMQApplication MSMQApplication;
#endif /* __cplusplus */

#endif 	/* __MSMQApplication_FWD_DEFINED__ */


#ifndef __IMSMQDestination_FWD_DEFINED__
#define __IMSMQDestination_FWD_DEFINED__
typedef interface IMSMQDestination IMSMQDestination;
#endif 	/* __IMSMQDestination_FWD_DEFINED__ */


#ifndef __IMSMQPrivateDestination_FWD_DEFINED__
#define __IMSMQPrivateDestination_FWD_DEFINED__
typedef interface IMSMQPrivateDestination IMSMQPrivateDestination;
#endif 	/* __IMSMQPrivateDestination_FWD_DEFINED__ */


#ifndef __MSMQDestination_FWD_DEFINED__
#define __MSMQDestination_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSMQDestination MSMQDestination;
#else
typedef struct MSMQDestination MSMQDestination;
#endif /* __cplusplus */

#endif 	/* __MSMQDestination_FWD_DEFINED__ */


#ifndef __IMSMQCollection_FWD_DEFINED__
#define __IMSMQCollection_FWD_DEFINED__
typedef interface IMSMQCollection IMSMQCollection;
#endif 	/* __IMSMQCollection_FWD_DEFINED__ */


#ifndef __MSMQCollection_FWD_DEFINED__
#define __MSMQCollection_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSMQCollection MSMQCollection;
#else
typedef struct MSMQCollection MSMQCollection;
#endif /* __cplusplus */

#endif 	/* __MSMQCollection_FWD_DEFINED__ */


#ifndef __IMSMQManagement_FWD_DEFINED__
#define __IMSMQManagement_FWD_DEFINED__
typedef interface IMSMQManagement IMSMQManagement;
#endif 	/* __IMSMQManagement_FWD_DEFINED__ */


#ifndef __MSMQManagement_FWD_DEFINED__
#define __MSMQManagement_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSMQManagement MSMQManagement;
#else
typedef struct MSMQManagement MSMQManagement;
#endif /* __cplusplus */

#endif 	/* __MSMQManagement_FWD_DEFINED__ */


#ifndef __IMSMQOutgoingQueueManagement_FWD_DEFINED__
#define __IMSMQOutgoingQueueManagement_FWD_DEFINED__
typedef interface IMSMQOutgoingQueueManagement IMSMQOutgoingQueueManagement;
#endif 	/* __IMSMQOutgoingQueueManagement_FWD_DEFINED__ */


#ifndef __MSMQOutgoingQueueManagement_FWD_DEFINED__
#define __MSMQOutgoingQueueManagement_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSMQOutgoingQueueManagement MSMQOutgoingQueueManagement;
#else
typedef struct MSMQOutgoingQueueManagement MSMQOutgoingQueueManagement;
#endif /* __cplusplus */

#endif 	/* __MSMQOutgoingQueueManagement_FWD_DEFINED__ */


#ifndef __IMSMQQueueManagement_FWD_DEFINED__
#define __IMSMQQueueManagement_FWD_DEFINED__
typedef interface IMSMQQueueManagement IMSMQQueueManagement;
#endif 	/* __IMSMQQueueManagement_FWD_DEFINED__ */


#ifndef __MSMQQueueManagement_FWD_DEFINED__
#define __MSMQQueueManagement_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSMQQueueManagement MSMQQueueManagement;
#else
typedef struct MSMQQueueManagement MSMQQueueManagement;
#endif /* __cplusplus */

#endif 	/* __MSMQQueueManagement_FWD_DEFINED__ */


#ifdef __cplusplus
extern "C"{
#endif 



#ifndef __MSMQ_LIBRARY_DEFINED__
#define __MSMQ_LIBRARY_DEFINED__

/* library MSMQ */
/* [version][lcid][helpstringdll][helpstring][uuid] */ 

#ifndef MIDL_INTERFACE
#if _MSC_VER >= 1100
#define MIDL_INTERFACE(x)   struct __declspec(uuid(x)) __declspec(novtable)
#else
#define MIDL_INTERFACE(x)   struct
#endif //_MSC_VER
#endif //MIDL_INTERFACE

typedef short Boolean;

typedef unsigned char BYTE;

typedef unsigned long ULONG;

typedef unsigned long DWORD;

typedef int BOOL;





















/* [helpstringcontext] */ 
enum MQCALG
    {	MQMSG_CALG_MD2	= ( ( 0x8000 + 0 )  + 1 ) ,
	MQMSG_CALG_MD4	= ( ( 0x8000 + 0 )  + 2 ) ,
	MQMSG_CALG_MD5	= ( ( 0x8000 + 0 )  + 3 ) ,
	MQMSG_CALG_SHA	= ( ( 0x8000 + 0 )  + 4 ) ,
	MQMSG_CALG_SHA1	= ( ( 0x8000 + 0 )  + 4 ) ,
	MQMSG_CALG_MAC	= ( ( 0x8000 + 0 )  + 5 ) ,
	MQMSG_CALG_RSA_SIGN	= ( ( 0x2000 + 0x400 )  + 0 ) ,
	MQMSG_CALG_DSS_SIGN	= ( ( 0x2000 + 0x200 )  + 0 ) ,
	MQMSG_CALG_RSA_KEYX	= ( ( 0xa000 + 0x400 )  + 0 ) ,
	MQMSG_CALG_DES	= ( ( 0x6000 + 0x600 )  + 1 ) ,
	MQMSG_CALG_RC2	= ( ( 0x6000 + 0x600 )  + 2 ) ,
	MQMSG_CALG_RC4	= ( ( 0x6000 + 0x800 )  + 1 ) ,
	MQMSG_CALG_SEAL	= ( ( 0x6000 + 0x800 )  + 2 ) 
    } ;
/* [helpstringcontext] */ 
enum MQTRANSACTION
    {	MQ_NO_TRANSACTION	= 0,
	MQ_MTS_TRANSACTION	= 1,
	MQ_XA_TRANSACTION	= 2,
	MQ_SINGLE_MESSAGE	= 3
    } ;
/* [helpstringcontext] */ 
enum RELOPS
    {	REL_NOP	= 0,
	REL_EQ	= ( REL_NOP + 1 ) ,
	REL_NEQ	= ( REL_EQ + 1 ) ,
	REL_LT	= ( REL_NEQ + 1 ) ,
	REL_GT	= ( REL_LT + 1 ) ,
	REL_LE	= ( REL_GT + 1 ) ,
	REL_GE	= ( REL_LE + 1 ) 
    } ;
/* [helpstringcontext] */ 
enum MQCERT_REGISTER
    {	MQCERT_REGISTER_ALWAYS	= 1,
	MQCERT_REGISTER_IF_NOT_EXIST	= 2
    } ;
/* [helpstringcontext] */ 
enum MQMSGCURSOR
    {	MQMSG_FIRST	= 0,
	MQMSG_CURRENT	= 1,
	MQMSG_NEXT	= 2
    } ;
/* [helpstringcontext] */ 
enum MQMSGCLASS
    {	MQMSG_CLASS_NORMAL	= ( ( 0 + 0 )  + 0 ) ,
	MQMSG_CLASS_REPORT	= ( ( 0 + 0 )  + 0x1 ) ,
	MQMSG_CLASS_ACK_REACH_QUEUE	= ( ( 0 + 0 )  + 0x2 ) ,
	MQMSG_CLASS_ACK_RECEIVE	= ( ( 0 + 0x4000 )  + 0 ) ,
	MQMSG_CLASS_NACK_BAD_DST_Q	= ( ( 0x8000 + 0 )  + 0 ) ,
	MQMSG_CLASS_NACK_PURGED	= ( ( 0x8000 + 0 )  + 0x1 ) ,
	MQMSG_CLASS_NACK_REACH_QUEUE_TIMEOUT	= ( ( 0x8000 + 0 )  + 0x2 ) ,
	MQMSG_CLASS_NACK_Q_EXCEED_QUOTA	= ( ( 0x8000 + 0 )  + 0x3 ) ,
	MQMSG_CLASS_NACK_ACCESS_DENIED	= ( ( 0x8000 + 0 )  + 0x4 ) ,
	MQMSG_CLASS_NACK_HOP_COUNT_EXCEEDED	= ( ( 0x8000 + 0 )  + 0x5 ) ,
	MQMSG_CLASS_NACK_BAD_SIGNATURE	= ( ( 0x8000 + 0 )  + 0x6 ) ,
	MQMSG_CLASS_NACK_BAD_ENCRYPTION	= ( ( 0x8000 + 0 )  + 0x7 ) ,
	MQMSG_CLASS_NACK_COULD_NOT_ENCRYPT	= ( ( 0x8000 + 0 )  + 0x8 ) ,
	MQMSG_CLASS_NACK_NOT_TRANSACTIONAL_Q	= ( ( 0x8000 + 0 )  + 0x9 ) ,
	MQMSG_CLASS_NACK_NOT_TRANSACTIONAL_MSG	= ( ( 0x8000 + 0 )  + 0xa ) ,
	MQMSG_CLASS_NACK_UNSUPPORTED_CRYPTO_PROVIDER	= ( ( 0x8000 + 0 )  + 0xb ) ,
	MQMSG_CLASS_NACK_SOURCE_COMPUTER_GUID_CHANGED	= ( ( 0x8000 + 0 )  + 0xc ) ,
	MQMSG_CLASS_NACK_Q_DELETED	= ( ( 0x8000 + 0x4000 )  + 0 ) ,
	MQMSG_CLASS_NACK_Q_PURGED	= ( ( 0x8000 + 0x4000 )  + 0x1 ) ,
	MQMSG_CLASS_NACK_RECEIVE_TIMEOUT	= ( ( 0x8000 + 0x4000 )  + 0x2 ) ,
	MQMSG_CLASS_NACK_RECEIVE_TIMEOUT_AT_SENDER	= ( ( 0x8000 + 0x4000 )  + 0x3 ) 
    } ;
/* [helpstringcontext] */ 
enum MQMSGDELIVERY
    {	MQMSG_DELIVERY_EXPRESS	= 0,
	MQMSG_DELIVERY_RECOVERABLE	= 1
    } ;
/* [helpstringcontext] */ 
enum MQMSGACKNOWLEDGEMENT
    {	MQMSG_ACKNOWLEDGMENT_NONE	= 0,
	MQMSG_ACKNOWLEDGMENT_POS_ARRIVAL	= 0x1,
	MQMSG_ACKNOWLEDGMENT_POS_RECEIVE	= 0x2,
	MQMSG_ACKNOWLEDGMENT_NEG_ARRIVAL	= 0x4,
	MQMSG_ACKNOWLEDGMENT_NEG_RECEIVE	= 0x8,
	MQMSG_ACKNOWLEDGMENT_NACK_REACH_QUEUE	= 0x4,
	MQMSG_ACKNOWLEDGMENT_FULL_REACH_QUEUE	= ( 0x4 + 0x1 ) ,
	MQMSG_ACKNOWLEDGMENT_NACK_RECEIVE	= ( 0x4 + 0x8 ) ,
	MQMSG_ACKNOWLEDGMENT_FULL_RECEIVE	= ( ( 0x4 + 0x8 )  + 0x2 ) 
    } ;
/* [helpstringcontext] */ 
enum MQMSGJOURNAL
    {	MQMSG_JOURNAL_NONE	= 0,
	MQMSG_DEADLETTER	= 1,
	MQMSG_JOURNAL	= 2
    } ;
/* [helpstringcontext] */ 
enum MQMSGTRACE
    {	MQMSG_TRACE_NONE	= 0,
	MQMSG_SEND_ROUTE_TO_REPORT_QUEUE	= 1
    } ;
/* [helpstringcontext] */ 
enum MQMSGSENDERIDTYPE
    {	MQMSG_SENDERID_TYPE_NONE	= 0,
	MQMSG_SENDERID_TYPE_SID	= 1
    } ;
/* [helpstringcontext] */ 
enum MQMSGPRIVLEVEL
    {	MQMSG_PRIV_LEVEL_NONE	= 0,
	MQMSG_PRIV_LEVEL_BODY_BASE	= 1,
	MQMSG_PRIV_LEVEL_BODY_ENHANCED	= 3
    } ;
/* [helpstringcontext] */ 
enum MQMSGAUTHLEVEL
    {	MQMSG_AUTH_LEVEL_NONE	= 0,
	MQMSG_AUTH_LEVEL_ALWAYS	= 1,
	MQMSG_AUTH_LEVEL_MSMQ10	= 2,
	MQMSG_AUTH_LEVEL_SIG10	= 2,
	MQMSG_AUTH_LEVEL_MSMQ20	= 4,
	MQMSG_AUTH_LEVEL_SIG20	= 4,
	MQMSG_AUTH_LEVEL_SIG30	= 8
    } ;
/* [helpstringcontext] */ 
enum MQMSGIDSIZE
    {	MQMSG_MSGID_SIZE	= 20,
	MQMSG_CORRELATIONID_SIZE	= 20,
	MQMSG_XACTID_SIZE	= 20
    } ;
/* [helpstringcontext] */ 
enum MQMSGMAX
    {	MQ_MAX_MSG_LABEL_LEN	= 249
    } ;
/* [helpstringcontext] */ 
enum MQMSGAUTHENTICATION
    {	MQMSG_AUTHENTICATION_NOT_REQUESTED	= 0,
	MQMSG_AUTHENTICATION_REQUESTED	= 1,
	MQMSG_AUTHENTICATED_SIG10	= 1,
	MQMSG_AUTHENTICATION_REQUESTED_EX	= 3,
	MQMSG_AUTHENTICATED_SIG20	= 3,
	MQMSG_AUTHENTICATED_SIG30	= 5,
	MQMSG_AUTHENTICATED_SIGXML	= 9
    } ;
/* [helpstringcontext] */ 
enum MQSHARE
    {	MQ_DENY_NONE	= 0,
	MQ_DENY_RECEIVE_SHARE	= 1
    } ;
/* [helpstringcontext] */ 
enum MQACCESS
    {	MQ_RECEIVE_ACCESS	= 1,
	MQ_SEND_ACCESS	= 2,
	MQ_PEEK_ACCESS	= 0x20,
	MQ_ADMIN_ACCESS	= 0x80
    } ;
/* [helpstringcontext] */ 
enum MQJOURNAL
    {	MQ_JOURNAL_NONE	= 0,
	MQ_JOURNAL	= 1
    } ;
/* [helpstringcontext] */ 
enum MQTRANSACTIONAL
    {	MQ_TRANSACTIONAL_NONE	= 0,
	MQ_TRANSACTIONAL	= 1
    } ;
/* [helpstringcontext] */ 
enum MQAUTHENTICATE
    {	MQ_AUTHENTICATE_NONE	= 0,
	MQ_AUTHENTICATE	= 1
    } ;
/* [helpstringcontext] */ 
enum MQPRIVLEVEL
    {	MQ_PRIV_LEVEL_NONE	= 0,
	MQ_PRIV_LEVEL_OPTIONAL	= 1,
	MQ_PRIV_LEVEL_BODY	= 2
    } ;
/* [helpstringcontext] */ 
enum MQPRIORITY
    {	MQ_MIN_PRIORITY	= 0,
	MQ_MAX_PRIORITY	= 7
    } ;
/* [helpstringcontext] */ 
enum MQMAX
    {	MQ_MAX_Q_NAME_LEN	= 124,
	MQ_MAX_Q_LABEL_LEN	= 124
    } ;
/* [helpstringcontext] */ 
enum QUEUE_TYPE
    {	MQ_TYPE_PUBLIC	= 0,
	MQ_TYPE_PRIVATE	= ( MQ_TYPE_PUBLIC + 1 ) ,
	MQ_TYPE_MACHINE	= ( MQ_TYPE_PRIVATE + 1 ) ,
	MQ_TYPE_CONNECTOR	= ( MQ_TYPE_MACHINE + 1 ) ,
	MQ_TYPE_MULTICAST	= ( MQ_TYPE_CONNECTOR + 1 ) 
    } ;
/* [helpstringcontext] */ 
enum FOREIGN_STATUS
    {	MQ_STATUS_FOREIGN	= 0,
	MQ_STATUS_NOT_FOREIGN	= ( MQ_STATUS_FOREIGN + 1 ) ,
	MQ_STATUS_UNKNOWN	= ( MQ_STATUS_NOT_FOREIGN + 1 ) 
    } ;

enum XACT_STATUS
    {	MQ_XACT_STATUS_XACT	= 0,
	MQ_XACT_STATUS_NOT_XACT	= ( MQ_XACT_STATUS_XACT + 1 ) ,
	MQ_XACT_STATUS_UNKNOWN	= ( MQ_XACT_STATUS_NOT_XACT + 1 ) 
    } ;
/* [helpstringcontext] */ 
enum QUEUE_STATE
    {	MQ_QUEUE_STATE_LOCAL_CONNECTION	= 0,
	MQ_QUEUE_STATE_DISCONNECTED	= ( MQ_QUEUE_STATE_LOCAL_CONNECTION + 1 ) ,
	MQ_QUEUE_STATE_WAITING	= ( MQ_QUEUE_STATE_DISCONNECTED + 1 ) ,
	MQ_QUEUE_STATE_NEEDVALIDATE	= ( MQ_QUEUE_STATE_WAITING + 1 ) ,
	MQ_QUEUE_STATE_ONHOLD	= ( MQ_QUEUE_STATE_NEEDVALIDATE + 1 ) ,
	MQ_QUEUE_STATE_NONACTIVE	= ( MQ_QUEUE_STATE_ONHOLD + 1 ) ,
	MQ_QUEUE_STATE_CONNECTED	= ( MQ_QUEUE_STATE_NONACTIVE + 1 ) ,
	MQ_QUEUE_STATE_DISCONNECTING	= ( MQ_QUEUE_STATE_CONNECTED + 1 ) ,
	MQ_QUEUE_STATE_LOCKED	= ( MQ_QUEUE_STATE_DISCONNECTING + 1 ) 
    } ;
/* [helpstringcontext] */ 
enum MQDEFAULT
    {	DEFAULT_M_PRIORITY	= 3,
	DEFAULT_M_DELIVERY	= 0,
	DEFAULT_M_ACKNOWLEDGE	= 0,
	DEFAULT_M_JOURNAL	= 0,
	DEFAULT_M_APPSPECIFIC	= 0,
	DEFAULT_M_PRIV_LEVEL	= 0,
	DEFAULT_M_AUTH_LEVEL	= 0,
	DEFAULT_M_SENDERID_TYPE	= 1,
	DEFAULT_Q_JOURNAL	= 0,
	DEFAULT_Q_BASEPRIORITY	= 0,
	DEFAULT_Q_QUOTA	= 0xffffffff,
	DEFAULT_Q_JOURNAL_QUOTA	= 0xffffffff,
	DEFAULT_Q_TRANSACTION	= 0,
	DEFAULT_Q_AUTHENTICATE	= 0,
	DEFAULT_Q_PRIV_LEVEL	= 1,
	DEFAULT_M_LOOKUPID	= 0
    } ;
/* [helpstringcontext] */ 
enum MQERROR
    {	MQ_ERROR	= 0xc00e0001,
	MQ_ERROR_PROPERTY	= 0xc00e0002,
	MQ_ERROR_QUEUE_NOT_FOUND	= 0xc00e0003,
	MQ_ERROR_QUEUE_NOT_ACTIVE	= 0xc00e0004,
	MQ_ERROR_QUEUE_EXISTS	= 0xc00e0005,
	MQ_ERROR_INVALID_PARAMETER	= 0xc00e0006,
	MQ_ERROR_INVALID_HANDLE	= 0xc00e0007,
	MQ_ERROR_OPERATION_CANCELLED	= 0xc00e0008,
	MQ_ERROR_SHARING_VIOLATION	= 0xc00e0009,
	MQ_ERROR_SERVICE_NOT_AVAILABLE	= 0xc00e000b,
	MQ_ERROR_MACHINE_NOT_FOUND	= 0xc00e000d,
	MQ_ERROR_ILLEGAL_SORT	= 0xc00e0010,
	MQ_ERROR_ILLEGAL_USER	= 0xc00e0011,
	MQ_ERROR_NO_DS	= 0xc00e0013,
	MQ_ERROR_ILLEGAL_QUEUE_PATHNAME	= 0xc00e0014,
	MQ_ERROR_ILLEGAL_PROPERTY_VALUE	= 0xc00e0018,
	MQ_ERROR_ILLEGAL_PROPERTY_VT	= 0xc00e0019,
	MQ_ERROR_BUFFER_OVERFLOW	= 0xc00e001a,
	MQ_ERROR_IO_TIMEOUT	= 0xc00e001b,
	MQ_ERROR_ILLEGAL_CURSOR_ACTION	= 0xc00e001c,
	MQ_ERROR_MESSAGE_ALREADY_RECEIVED	= 0xc00e001d,
	MQ_ERROR_ILLEGAL_FORMATNAME	= 0xc00e001e,
	MQ_ERROR_FORMATNAME_BUFFER_TOO_SMALL	= 0xc00e001f,
	MQ_ERROR_UNSUPPORTED_FORMATNAME_OPERATION	= 0xc00e0020,
	MQ_ERROR_ILLEGAL_SECURITY_DESCRIPTOR	= 0xc00e0021,
	MQ_ERROR_SENDERID_BUFFER_TOO_SMALL	= 0xc00e0022,
	MQ_ERROR_SECURITY_DESCRIPTOR_TOO_SMALL	= 0xc00e0023,
	MQ_ERROR_CANNOT_IMPERSONATE_CLIENT	= 0xc00e0024,
	MQ_ERROR_ACCESS_DENIED	= 0xc00e0025,
	MQ_ERROR_PRIVILEGE_NOT_HELD	= 0xc00e0026,
	MQ_ERROR_INSUFFICIENT_RESOURCES	= 0xc00e0027,
	MQ_ERROR_USER_BUFFER_TOO_SMALL	= 0xc00e0028,
	MQ_ERROR_MESSAGE_STORAGE_FAILED	= 0xc00e002a,
	MQ_ERROR_SENDER_CERT_BUFFER_TOO_SMALL	= 0xc00e002b,
	MQ_ERROR_INVALID_CERTIFICATE	= 0xc00e002c,
	MQ_ERROR_CORRUPTED_INTERNAL_CERTIFICATE	= 0xc00e002d,
	MQ_ERROR_INTERNAL_USER_CERT_EXIST	= 0xc00e002e,
	MQ_ERROR_NO_INTERNAL_USER_CERT	= 0xc00e002f,
	MQ_ERROR_CORRUPTED_SECURITY_DATA	= 0xc00e0030,
	MQ_ERROR_CORRUPTED_PERSONAL_CERT_STORE	= 0xc00e0031,
	MQ_ERROR_COMPUTER_DOES_NOT_SUPPORT_ENCRYPTION	= 0xc00e0033,
	MQ_ERROR_BAD_SECURITY_CONTEXT	= 0xc00e0035,
	MQ_ERROR_COULD_NOT_GET_USER_SID	= 0xc00e0036,
	MQ_ERROR_COULD_NOT_GET_ACCOUNT_INFO	= 0xc00e0037,
	MQ_ERROR_ILLEGAL_MQCOLUMNS	= 0xc00e0038,
	MQ_ERROR_ILLEGAL_PROPID	= 0xc00e0039,
	MQ_ERROR_ILLEGAL_RELATION	= 0xc00e003a,
	MQ_ERROR_ILLEGAL_PROPERTY_SIZE	= 0xc00e003b,
	MQ_ERROR_ILLEGAL_RESTRICTION_PROPID	= 0xc00e003c,
	MQ_ERROR_ILLEGAL_MQQUEUEPROPS	= 0xc00e003d,
	MQ_ERROR_PROPERTY_NOTALLOWED	= 0xc00e003e,
	MQ_ERROR_INSUFFICIENT_PROPERTIES	= 0xc00e003f,
	MQ_ERROR_MACHINE_EXISTS	= 0xc00e0040,
	MQ_ERROR_ILLEGAL_MQQMPROPS	= 0xc00e0041,
	MQ_ERROR_DS_IS_FULL	= 0xc00e0042L,
	MQ_ERROR_DS_ERROR	= 0xc00e0043,
	MQ_ERROR_INVALID_OWNER	= 0xc00e0044,
	MQ_ERROR_UNSUPPORTED_ACCESS_MODE	= 0xc00e0045,
	MQ_ERROR_RESULT_BUFFER_TOO_SMALL	= 0xc00e0046,
	MQ_ERROR_DELETE_CN_IN_USE	= 0xc00e0048L,
	MQ_ERROR_NO_RESPONSE_FROM_OBJECT_SERVER	= 0xc00e0049,
	MQ_ERROR_OBJECT_SERVER_NOT_AVAILABLE	= 0xc00e004a,
	MQ_ERROR_QUEUE_NOT_AVAILABLE	= 0xc00e004b,
	MQ_ERROR_DTC_CONNECT	= 0xc00e004c,
	MQ_ERROR_TRANSACTION_IMPORT	= 0xc00e004e,
	MQ_ERROR_TRANSACTION_USAGE	= 0xc00e0050,
	MQ_ERROR_TRANSACTION_SEQUENCE	= 0xc00e0051,
	MQ_ERROR_MISSING_CONNECTOR_TYPE	= 0xc00e0055,
	MQ_ERROR_STALE_HANDLE	= 0xc00e0056,
	MQ_ERROR_TRANSACTION_ENLIST	= 0xc00e0058,
	MQ_ERROR_QUEUE_DELETED	= 0xc00e005a,
	MQ_ERROR_ILLEGAL_CONTEXT	= 0xc00e005b,
	MQ_ERROR_ILLEGAL_SORT_PROPID	= 0xc00e005c,
	MQ_ERROR_LABEL_TOO_LONG	= 0xc00e005d,
	MQ_ERROR_LABEL_BUFFER_TOO_SMALL	= 0xc00e005e,
	MQ_ERROR_MQIS_SERVER_EMPTY	= 0xc00e005fL,
	MQ_ERROR_MQIS_READONLY_MODE	= 0xc00e0060L,
	MQ_ERROR_SYMM_KEY_BUFFER_TOO_SMALL	= 0xc00e0061,
	MQ_ERROR_SIGNATURE_BUFFER_TOO_SMALL	= 0xc00e0062,
	MQ_ERROR_PROV_NAME_BUFFER_TOO_SMALL	= 0xc00e0063,
	MQ_ERROR_ILLEGAL_OPERATION	= 0xc00e0064,
	MQ_ERROR_WRITE_NOT_ALLOWED	= 0xc00e0065L,
	MQ_ERROR_WKS_CANT_SERVE_CLIENT	= 0xc00e0066L,
	MQ_ERROR_DEPEND_WKS_LICENSE_OVERFLOW	= 0xc00e0067L,
	MQ_CORRUPTED_QUEUE_WAS_DELETED	= 0xc00e0068L,
	MQ_ERROR_REMOTE_MACHINE_NOT_AVAILABLE	= 0xc00e0069L,
	MQ_ERROR_UNSUPPORTED_OPERATION	= 0xc00e006aL,
	MQ_ERROR_ENCRYPTION_PROVIDER_NOT_SUPPORTED	= 0xc00e006bL,
	MQ_ERROR_CANNOT_SET_CRYPTO_SEC_DESCR	= 0xc00e006cL,
	MQ_ERROR_CERTIFICATE_NOT_PROVIDED	= 0xc00e006dL,
	MQ_ERROR_Q_DNS_PROPERTY_NOT_SUPPORTED	= 0xc00e006eL,
	MQ_ERROR_CANT_CREATE_CERT_STORE	= 0xc00e006fL,
	MQ_ERROR_CANNOT_CREATE_CERT_STORE	= 0xc00e006fL,
	MQ_ERROR_CANT_OPEN_CERT_STORE	= 0xc00e0070L,
	MQ_ERROR_CANNOT_OPEN_CERT_STORE	= 0xc00e0070L,
	MQ_ERROR_ILLEGAL_ENTERPRISE_OPERATION	= 0xc00e0071L,
	MQ_ERROR_CANNOT_GRANT_ADD_GUID	= 0xc00e0072L,
	MQ_ERROR_CANNOT_LOAD_MSMQOCM	= 0xc00e0073L,
	MQ_ERROR_NO_ENTRY_POINT_MSMQOCM	= 0xc00e0074L,
	MQ_ERROR_NO_MSMQ_SERVERS_ON_DC	= 0xc00e0075L,
	MQ_ERROR_CANNOT_JOIN_DOMAIN	= 0xc00e0076L,
	MQ_ERROR_CANNOT_CREATE_ON_GC	= 0xc00e0077L,
	MQ_ERROR_GUID_NOT_MATCHING	= 0xc00e0078L,
	MQ_ERROR_PUBLIC_KEY_NOT_FOUND	= 0xc00e0079L,
	MQ_ERROR_PUBLIC_KEY_DOES_NOT_EXIST	= 0xc00e007aL,
	MQ_ERROR_ILLEGAL_MQPRIVATEPROPS	= 0xc00e007bL,
	MQ_ERROR_NO_GC_IN_DOMAIN	= 0xc00e007cL,
	MQ_ERROR_NO_MSMQ_SERVERS_ON_GC	= 0xc00e007dL,
	MQ_ERROR_CANNOT_GET_DN	= 0xc00e007eL,
	MQ_ERROR_CANNOT_HASH_DATA_EX	= 0xc00e007fL,
	MQ_ERROR_CANNOT_SIGN_DATA_EX	= 0xc00e0080L,
	MQ_ERROR_CANNOT_CREATE_HASH_EX	= 0xc00e0081L,
	MQ_ERROR_FAIL_VERIFY_SIGNATURE_EX	= 0xc00e0082L,
	MQ_ERROR_CANNOT_DELETE_PSC_OBJECTS	= 0xc00e0083L,
	MQ_ERROR_NO_MQUSER_OU	= 0xc00e0084L,
	MQ_ERROR_CANNOT_LOAD_MQAD	= 0xc00e0085L,
	MQ_ERROR_CANNOT_LOAD_MQDSSRV	= 0xc00e0086L,
	MQ_ERROR_PROPERTIES_CONFLICT	= 0xc00e0087L,
	MQ_ERROR_MESSAGE_NOT_FOUND	= 0xc00e0088L,
	MQ_ERROR_CANT_RESOLVE_SITES	= 0xc00e0089L,
	MQ_ERROR_NOT_SUPPORTED_BY_DEPENDENT_CLIENTS	= 0xc00e008aL,
	MQ_ERROR_OPERATION_NOT_SUPPORTED_BY_REMOTE_COMPUTER	= 0xc00e008bL,
	MQ_ERROR_NOT_A_CORRECT_OBJECT_CLASS	= 0xc00e008cL,
	MQ_ERROR_MULTI_SORT_KEYS	= 0xc00e008dL,
	MQ_ERROR_GC_NEEDED	= 0xc00e008eL,
	MQ_ERROR_DS_BIND_ROOT_FOREST	= 0xc00e008fL,
	MQ_ERROR_DS_LOCAL_USER	= 0xc00e0090L,
	MQ_ERROR_Q_ADS_PROPERTY_NOT_SUPPORTED	= 0xc00e0091L,
	MQ_ERROR_BAD_XML_FORMAT	= 0xc00e0092L,
	MQ_ERROR_UNSUPPORTED_CLASS	= 0xc00e0093,
	MQ_ERROR_UNINITIALIZED_OBJECT	= 0xc00e0094,
	MQ_ERROR_CANNOT_CREATE_PSC_OBJECTS	= 0xc00e0095,
	MQ_ERROR_CANNOT_UPDATE_PSC_OBJECTS	= 0xc00e0096
    } ;
/* [helpstringcontext] */ 
enum MQWARNING
    {	MQ_INFORMATION_PROPERTY	= 0x400e0001,
	MQ_INFORMATION_ILLEGAL_PROPERTY	= 0x400e0002,
	MQ_INFORMATION_PROPERTY_IGNORED	= 0x400e0003,
	MQ_INFORMATION_UNSUPPORTED_PROPERTY	= 0x400e0004,
	MQ_INFORMATION_DUPLICATE_PROPERTY	= 0x400e0005,
	MQ_INFORMATION_OPERATION_PENDING	= 0x400e0006,
	MQ_INFORMATION_FORMATNAME_BUFFER_TOO_SMALL	= 0x400e0009,
	MQ_INFORMATION_INTERNAL_USER_CERT_EXIST	= 0x400e000aL,
	MQ_INFORMATION_OWNER_IGNORED	= 0x400e000bL
    } ;

EXTERN_C const IID LIBID_MSMQ;

#ifndef __IMSMQQuery_INTERFACE_DEFINED__
#define __IMSMQQuery_INTERFACE_DEFINED__

/* interface IMSMQQuery */
/* [object][nonextensible][dual][hidden][helpstringcontext][uuid] */ 


EXTERN_C const IID IID_IMSMQQuery;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D7D6E072-DCCD-11d0-AA4B-0060970DEBAE")
    IMSMQQuery : public IDispatch
    {
    public:
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE LookupQueue( 
            /* [optional][in] */ __RPC__in VARIANT *QueueGuid,
            /* [optional][in] */ __RPC__in VARIANT *ServiceTypeGuid,
            /* [optional][in] */ __RPC__in VARIANT *Label,
            /* [optional][in] */ __RPC__in VARIANT *CreateTime,
            /* [optional][in] */ __RPC__in VARIANT *ModifyTime,
            /* [optional][in] */ __RPC__in VARIANT *RelServiceType,
            /* [optional][in] */ __RPC__in VARIANT *RelLabel,
            /* [optional][in] */ __RPC__in VARIANT *RelCreateTime,
            /* [optional][in] */ __RPC__in VARIANT *RelModifyTime,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfos **ppqinfos) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSMQQueryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMSMQQuery * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMSMQQuery * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMSMQQuery * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IMSMQQuery * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IMSMQQuery * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IMSMQQuery * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSMQQuery * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *LookupQueue )( 
            __RPC__in IMSMQQuery * This,
            /* [optional][in] */ __RPC__in VARIANT *QueueGuid,
            /* [optional][in] */ __RPC__in VARIANT *ServiceTypeGuid,
            /* [optional][in] */ __RPC__in VARIANT *Label,
            /* [optional][in] */ __RPC__in VARIANT *CreateTime,
            /* [optional][in] */ __RPC__in VARIANT *ModifyTime,
            /* [optional][in] */ __RPC__in VARIANT *RelServiceType,
            /* [optional][in] */ __RPC__in VARIANT *RelLabel,
            /* [optional][in] */ __RPC__in VARIANT *RelCreateTime,
            /* [optional][in] */ __RPC__in VARIANT *RelModifyTime,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfos **ppqinfos);
        
        END_INTERFACE
    } IMSMQQueryVtbl;

    interface IMSMQQuery
    {
        CONST_VTBL struct IMSMQQueryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSMQQuery_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSMQQuery_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSMQQuery_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSMQQuery_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSMQQuery_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSMQQuery_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSMQQuery_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSMQQuery_LookupQueue(This,QueueGuid,ServiceTypeGuid,Label,CreateTime,ModifyTime,RelServiceType,RelLabel,RelCreateTime,RelModifyTime,ppqinfos)	\
    ( (This)->lpVtbl -> LookupQueue(This,QueueGuid,ServiceTypeGuid,Label,CreateTime,ModifyTime,RelServiceType,RelLabel,RelCreateTime,RelModifyTime,ppqinfos) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSMQQuery_INTERFACE_DEFINED__ */


#ifndef __IMSMQQueueInfo_INTERFACE_DEFINED__
#define __IMSMQQueueInfo_INTERFACE_DEFINED__

/* interface IMSMQQueueInfo */
/* [object][dual][hidden][helpstringcontext][uuid] */ 


EXTERN_C const IID IID_IMSMQQueueInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D7D6E07B-DCCD-11d0-AA4B-0060970DEBAE")
    IMSMQQueueInfo : public IDispatch
    {
    public:
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_QueueGuid( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrGuidQueue) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_ServiceTypeGuid( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrGuidServiceType) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_ServiceTypeGuid( 
            /* [in] */ __RPC__in BSTR bstrGuidServiceType) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Label( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrLabel) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_Label( 
            /* [in] */ __RPC__in BSTR bstrLabel) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_PathName( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrPathName) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_PathName( 
            /* [in] */ __RPC__in BSTR bstrPathName) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_FormatName( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrFormatName) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_FormatName( 
            /* [in] */ __RPC__in BSTR bstrFormatName) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_IsTransactional( 
            /* [retval][out] */ __RPC__out Boolean *pisTransactional) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_PrivLevel( 
            /* [retval][out] */ __RPC__out long *plPrivLevel) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_PrivLevel( 
            /* [in] */ long lPrivLevel) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Journal( 
            /* [retval][out] */ __RPC__out long *plJournal) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_Journal( 
            /* [in] */ long lJournal) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Quota( 
            /* [retval][out] */ __RPC__out long *plQuota) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_Quota( 
            /* [in] */ long lQuota) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_BasePriority( 
            /* [retval][out] */ __RPC__out long *plBasePriority) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_BasePriority( 
            /* [in] */ long lBasePriority) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_CreateTime( 
            /* [retval][out] */ __RPC__out VARIANT *pvarCreateTime) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_ModifyTime( 
            /* [retval][out] */ __RPC__out VARIANT *pvarModifyTime) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Authenticate( 
            /* [retval][out] */ __RPC__out long *plAuthenticate) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_Authenticate( 
            /* [in] */ long lAuthenticate) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_JournalQuota( 
            /* [retval][out] */ __RPC__out long *plJournalQuota) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_JournalQuota( 
            /* [in] */ long lJournalQuota) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_IsWorldReadable( 
            /* [retval][out] */ __RPC__out Boolean *pisWorldReadable) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Create( 
            /* [optional][in] */ __RPC__in VARIANT *IsTransactional,
            /* [optional][in] */ __RPC__in VARIANT *IsWorldReadable) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Open( 
            /* [in] */ long Access,
            /* [in] */ long ShareMode,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueue **ppq) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Refresh( void) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Update( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSMQQueueInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMSMQQueueInfo * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMSMQQueueInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMSMQQueueInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IMSMQQueueInfo * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IMSMQQueueInfo * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IMSMQQueueInfo * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSMQQueueInfo * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_QueueGuid )( 
            __RPC__in IMSMQQueueInfo * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrGuidQueue);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_ServiceTypeGuid )( 
            __RPC__in IMSMQQueueInfo * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrGuidServiceType);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_ServiceTypeGuid )( 
            __RPC__in IMSMQQueueInfo * This,
            /* [in] */ __RPC__in BSTR bstrGuidServiceType);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Label )( 
            __RPC__in IMSMQQueueInfo * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrLabel);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_Label )( 
            __RPC__in IMSMQQueueInfo * This,
            /* [in] */ __RPC__in BSTR bstrLabel);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_PathName )( 
            __RPC__in IMSMQQueueInfo * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrPathName);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_PathName )( 
            __RPC__in IMSMQQueueInfo * This,
            /* [in] */ __RPC__in BSTR bstrPathName);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_FormatName )( 
            __RPC__in IMSMQQueueInfo * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrFormatName);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_FormatName )( 
            __RPC__in IMSMQQueueInfo * This,
            /* [in] */ __RPC__in BSTR bstrFormatName);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_IsTransactional )( 
            __RPC__in IMSMQQueueInfo * This,
            /* [retval][out] */ __RPC__out Boolean *pisTransactional);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_PrivLevel )( 
            __RPC__in IMSMQQueueInfo * This,
            /* [retval][out] */ __RPC__out long *plPrivLevel);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_PrivLevel )( 
            __RPC__in IMSMQQueueInfo * This,
            /* [in] */ long lPrivLevel);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Journal )( 
            __RPC__in IMSMQQueueInfo * This,
            /* [retval][out] */ __RPC__out long *plJournal);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_Journal )( 
            __RPC__in IMSMQQueueInfo * This,
            /* [in] */ long lJournal);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Quota )( 
            __RPC__in IMSMQQueueInfo * This,
            /* [retval][out] */ __RPC__out long *plQuota);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_Quota )( 
            __RPC__in IMSMQQueueInfo * This,
            /* [in] */ long lQuota);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_BasePriority )( 
            __RPC__in IMSMQQueueInfo * This,
            /* [retval][out] */ __RPC__out long *plBasePriority);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_BasePriority )( 
            __RPC__in IMSMQQueueInfo * This,
            /* [in] */ long lBasePriority);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_CreateTime )( 
            __RPC__in IMSMQQueueInfo * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarCreateTime);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_ModifyTime )( 
            __RPC__in IMSMQQueueInfo * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarModifyTime);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Authenticate )( 
            __RPC__in IMSMQQueueInfo * This,
            /* [retval][out] */ __RPC__out long *plAuthenticate);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_Authenticate )( 
            __RPC__in IMSMQQueueInfo * This,
            /* [in] */ long lAuthenticate);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_JournalQuota )( 
            __RPC__in IMSMQQueueInfo * This,
            /* [retval][out] */ __RPC__out long *plJournalQuota);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_JournalQuota )( 
            __RPC__in IMSMQQueueInfo * This,
            /* [in] */ long lJournalQuota);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_IsWorldReadable )( 
            __RPC__in IMSMQQueueInfo * This,
            /* [retval][out] */ __RPC__out Boolean *pisWorldReadable);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Create )( 
            __RPC__in IMSMQQueueInfo * This,
            /* [optional][in] */ __RPC__in VARIANT *IsTransactional,
            /* [optional][in] */ __RPC__in VARIANT *IsWorldReadable);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            __RPC__in IMSMQQueueInfo * This);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Open )( 
            __RPC__in IMSMQQueueInfo * This,
            /* [in] */ long Access,
            /* [in] */ long ShareMode,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueue **ppq);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Refresh )( 
            __RPC__in IMSMQQueueInfo * This);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            __RPC__in IMSMQQueueInfo * This);
        
        END_INTERFACE
    } IMSMQQueueInfoVtbl;

    interface IMSMQQueueInfo
    {
        CONST_VTBL struct IMSMQQueueInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSMQQueueInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSMQQueueInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSMQQueueInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSMQQueueInfo_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSMQQueueInfo_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSMQQueueInfo_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSMQQueueInfo_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSMQQueueInfo_get_QueueGuid(This,pbstrGuidQueue)	\
    ( (This)->lpVtbl -> get_QueueGuid(This,pbstrGuidQueue) ) 

#define IMSMQQueueInfo_get_ServiceTypeGuid(This,pbstrGuidServiceType)	\
    ( (This)->lpVtbl -> get_ServiceTypeGuid(This,pbstrGuidServiceType) ) 

#define IMSMQQueueInfo_put_ServiceTypeGuid(This,bstrGuidServiceType)	\
    ( (This)->lpVtbl -> put_ServiceTypeGuid(This,bstrGuidServiceType) ) 

#define IMSMQQueueInfo_get_Label(This,pbstrLabel)	\
    ( (This)->lpVtbl -> get_Label(This,pbstrLabel) ) 

#define IMSMQQueueInfo_put_Label(This,bstrLabel)	\
    ( (This)->lpVtbl -> put_Label(This,bstrLabel) ) 

#define IMSMQQueueInfo_get_PathName(This,pbstrPathName)	\
    ( (This)->lpVtbl -> get_PathName(This,pbstrPathName) ) 

#define IMSMQQueueInfo_put_PathName(This,bstrPathName)	\
    ( (This)->lpVtbl -> put_PathName(This,bstrPathName) ) 

#define IMSMQQueueInfo_get_FormatName(This,pbstrFormatName)	\
    ( (This)->lpVtbl -> get_FormatName(This,pbstrFormatName) ) 

#define IMSMQQueueInfo_put_FormatName(This,bstrFormatName)	\
    ( (This)->lpVtbl -> put_FormatName(This,bstrFormatName) ) 

#define IMSMQQueueInfo_get_IsTransactional(This,pisTransactional)	\
    ( (This)->lpVtbl -> get_IsTransactional(This,pisTransactional) ) 

#define IMSMQQueueInfo_get_PrivLevel(This,plPrivLevel)	\
    ( (This)->lpVtbl -> get_PrivLevel(This,plPrivLevel) ) 

#define IMSMQQueueInfo_put_PrivLevel(This,lPrivLevel)	\
    ( (This)->lpVtbl -> put_PrivLevel(This,lPrivLevel) ) 

#define IMSMQQueueInfo_get_Journal(This,plJournal)	\
    ( (This)->lpVtbl -> get_Journal(This,plJournal) ) 

#define IMSMQQueueInfo_put_Journal(This,lJournal)	\
    ( (This)->lpVtbl -> put_Journal(This,lJournal) ) 

#define IMSMQQueueInfo_get_Quota(This,plQuota)	\
    ( (This)->lpVtbl -> get_Quota(This,plQuota) ) 

#define IMSMQQueueInfo_put_Quota(This,lQuota)	\
    ( (This)->lpVtbl -> put_Quota(This,lQuota) ) 

#define IMSMQQueueInfo_get_BasePriority(This,plBasePriority)	\
    ( (This)->lpVtbl -> get_BasePriority(This,plBasePriority) ) 

#define IMSMQQueueInfo_put_BasePriority(This,lBasePriority)	\
    ( (This)->lpVtbl -> put_BasePriority(This,lBasePriority) ) 

#define IMSMQQueueInfo_get_CreateTime(This,pvarCreateTime)	\
    ( (This)->lpVtbl -> get_CreateTime(This,pvarCreateTime) ) 

#define IMSMQQueueInfo_get_ModifyTime(This,pvarModifyTime)	\
    ( (This)->lpVtbl -> get_ModifyTime(This,pvarModifyTime) ) 

#define IMSMQQueueInfo_get_Authenticate(This,plAuthenticate)	\
    ( (This)->lpVtbl -> get_Authenticate(This,plAuthenticate) ) 

#define IMSMQQueueInfo_put_Authenticate(This,lAuthenticate)	\
    ( (This)->lpVtbl -> put_Authenticate(This,lAuthenticate) ) 

#define IMSMQQueueInfo_get_JournalQuota(This,plJournalQuota)	\
    ( (This)->lpVtbl -> get_JournalQuota(This,plJournalQuota) ) 

#define IMSMQQueueInfo_put_JournalQuota(This,lJournalQuota)	\
    ( (This)->lpVtbl -> put_JournalQuota(This,lJournalQuota) ) 

#define IMSMQQueueInfo_get_IsWorldReadable(This,pisWorldReadable)	\
    ( (This)->lpVtbl -> get_IsWorldReadable(This,pisWorldReadable) ) 

#define IMSMQQueueInfo_Create(This,IsTransactional,IsWorldReadable)	\
    ( (This)->lpVtbl -> Create(This,IsTransactional,IsWorldReadable) ) 

#define IMSMQQueueInfo_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IMSMQQueueInfo_Open(This,Access,ShareMode,ppq)	\
    ( (This)->lpVtbl -> Open(This,Access,ShareMode,ppq) ) 

#define IMSMQQueueInfo_Refresh(This)	\
    ( (This)->lpVtbl -> Refresh(This) ) 

#define IMSMQQueueInfo_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSMQQueueInfo_INTERFACE_DEFINED__ */


#ifndef __IMSMQQueueInfo2_INTERFACE_DEFINED__
#define __IMSMQQueueInfo2_INTERFACE_DEFINED__

/* interface IMSMQQueueInfo2 */
/* [object][dual][hidden][helpstringcontext][uuid] */ 


EXTERN_C const IID IID_IMSMQQueueInfo2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("FD174A80-89CF-11D2-B0F2-00E02C074F6B")
    IMSMQQueueInfo2 : public IDispatch
    {
    public:
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_QueueGuid( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrGuidQueue) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_ServiceTypeGuid( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrGuidServiceType) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_ServiceTypeGuid( 
            /* [in] */ __RPC__in BSTR bstrGuidServiceType) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Label( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrLabel) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_Label( 
            /* [in] */ __RPC__in BSTR bstrLabel) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_PathName( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrPathName) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_PathName( 
            /* [in] */ __RPC__in BSTR bstrPathName) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_FormatName( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrFormatName) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_FormatName( 
            /* [in] */ __RPC__in BSTR bstrFormatName) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_IsTransactional( 
            /* [retval][out] */ __RPC__out Boolean *pisTransactional) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_PrivLevel( 
            /* [retval][out] */ __RPC__out long *plPrivLevel) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_PrivLevel( 
            /* [in] */ long lPrivLevel) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Journal( 
            /* [retval][out] */ __RPC__out long *plJournal) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_Journal( 
            /* [in] */ long lJournal) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Quota( 
            /* [retval][out] */ __RPC__out long *plQuota) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_Quota( 
            /* [in] */ long lQuota) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_BasePriority( 
            /* [retval][out] */ __RPC__out long *plBasePriority) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_BasePriority( 
            /* [in] */ long lBasePriority) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_CreateTime( 
            /* [retval][out] */ __RPC__out VARIANT *pvarCreateTime) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_ModifyTime( 
            /* [retval][out] */ __RPC__out VARIANT *pvarModifyTime) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Authenticate( 
            /* [retval][out] */ __RPC__out long *plAuthenticate) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_Authenticate( 
            /* [in] */ long lAuthenticate) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_JournalQuota( 
            /* [retval][out] */ __RPC__out long *plJournalQuota) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_JournalQuota( 
            /* [in] */ long lJournalQuota) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_IsWorldReadable( 
            /* [retval][out] */ __RPC__out Boolean *pisWorldReadable) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Create( 
            /* [optional][in] */ __RPC__in VARIANT *IsTransactional,
            /* [optional][in] */ __RPC__in VARIANT *IsWorldReadable) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Open( 
            /* [in] */ long Access,
            /* [in] */ long ShareMode,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueue2 **ppq) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Refresh( void) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Update( void) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_PathNameDNS( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrPathNameDNS) = 0;
        
        virtual /* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE get_Properties( 
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppcolProperties) = 0;
        
        virtual /* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE get_Security( 
            /* [retval][out] */ __RPC__out VARIANT *pvarSecurity) = 0;
        
        virtual /* [id][propput][hidden] */ HRESULT STDMETHODCALLTYPE put_Security( 
            /* [in] */ VARIANT varSecurity) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSMQQueueInfo2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMSMQQueueInfo2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMSMQQueueInfo2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMSMQQueueInfo2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IMSMQQueueInfo2 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IMSMQQueueInfo2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IMSMQQueueInfo2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSMQQueueInfo2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_QueueGuid )( 
            __RPC__in IMSMQQueueInfo2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrGuidQueue);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_ServiceTypeGuid )( 
            __RPC__in IMSMQQueueInfo2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrGuidServiceType);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_ServiceTypeGuid )( 
            __RPC__in IMSMQQueueInfo2 * This,
            /* [in] */ __RPC__in BSTR bstrGuidServiceType);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Label )( 
            __RPC__in IMSMQQueueInfo2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrLabel);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_Label )( 
            __RPC__in IMSMQQueueInfo2 * This,
            /* [in] */ __RPC__in BSTR bstrLabel);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_PathName )( 
            __RPC__in IMSMQQueueInfo2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrPathName);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_PathName )( 
            __RPC__in IMSMQQueueInfo2 * This,
            /* [in] */ __RPC__in BSTR bstrPathName);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_FormatName )( 
            __RPC__in IMSMQQueueInfo2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrFormatName);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_FormatName )( 
            __RPC__in IMSMQQueueInfo2 * This,
            /* [in] */ __RPC__in BSTR bstrFormatName);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_IsTransactional )( 
            __RPC__in IMSMQQueueInfo2 * This,
            /* [retval][out] */ __RPC__out Boolean *pisTransactional);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_PrivLevel )( 
            __RPC__in IMSMQQueueInfo2 * This,
            /* [retval][out] */ __RPC__out long *plPrivLevel);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_PrivLevel )( 
            __RPC__in IMSMQQueueInfo2 * This,
            /* [in] */ long lPrivLevel);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Journal )( 
            __RPC__in IMSMQQueueInfo2 * This,
            /* [retval][out] */ __RPC__out long *plJournal);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_Journal )( 
            __RPC__in IMSMQQueueInfo2 * This,
            /* [in] */ long lJournal);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Quota )( 
            __RPC__in IMSMQQueueInfo2 * This,
            /* [retval][out] */ __RPC__out long *plQuota);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_Quota )( 
            __RPC__in IMSMQQueueInfo2 * This,
            /* [in] */ long lQuota);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_BasePriority )( 
            __RPC__in IMSMQQueueInfo2 * This,
            /* [retval][out] */ __RPC__out long *plBasePriority);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_BasePriority )( 
            __RPC__in IMSMQQueueInfo2 * This,
            /* [in] */ long lBasePriority);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_CreateTime )( 
            __RPC__in IMSMQQueueInfo2 * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarCreateTime);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_ModifyTime )( 
            __RPC__in IMSMQQueueInfo2 * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarModifyTime);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Authenticate )( 
            __RPC__in IMSMQQueueInfo2 * This,
            /* [retval][out] */ __RPC__out long *plAuthenticate);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_Authenticate )( 
            __RPC__in IMSMQQueueInfo2 * This,
            /* [in] */ long lAuthenticate);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_JournalQuota )( 
            __RPC__in IMSMQQueueInfo2 * This,
            /* [retval][out] */ __RPC__out long *plJournalQuota);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_JournalQuota )( 
            __RPC__in IMSMQQueueInfo2 * This,
            /* [in] */ long lJournalQuota);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_IsWorldReadable )( 
            __RPC__in IMSMQQueueInfo2 * This,
            /* [retval][out] */ __RPC__out Boolean *pisWorldReadable);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Create )( 
            __RPC__in IMSMQQueueInfo2 * This,
            /* [optional][in] */ __RPC__in VARIANT *IsTransactional,
            /* [optional][in] */ __RPC__in VARIANT *IsWorldReadable);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            __RPC__in IMSMQQueueInfo2 * This);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Open )( 
            __RPC__in IMSMQQueueInfo2 * This,
            /* [in] */ long Access,
            /* [in] */ long ShareMode,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueue2 **ppq);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Refresh )( 
            __RPC__in IMSMQQueueInfo2 * This);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            __RPC__in IMSMQQueueInfo2 * This);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_PathNameDNS )( 
            __RPC__in IMSMQQueueInfo2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrPathNameDNS);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            __RPC__in IMSMQQueueInfo2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppcolProperties);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_Security )( 
            __RPC__in IMSMQQueueInfo2 * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarSecurity);
        
        /* [id][propput][hidden] */ HRESULT ( STDMETHODCALLTYPE *put_Security )( 
            __RPC__in IMSMQQueueInfo2 * This,
            /* [in] */ VARIANT varSecurity);
        
        END_INTERFACE
    } IMSMQQueueInfo2Vtbl;

    interface IMSMQQueueInfo2
    {
        CONST_VTBL struct IMSMQQueueInfo2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSMQQueueInfo2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSMQQueueInfo2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSMQQueueInfo2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSMQQueueInfo2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSMQQueueInfo2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSMQQueueInfo2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSMQQueueInfo2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSMQQueueInfo2_get_QueueGuid(This,pbstrGuidQueue)	\
    ( (This)->lpVtbl -> get_QueueGuid(This,pbstrGuidQueue) ) 

#define IMSMQQueueInfo2_get_ServiceTypeGuid(This,pbstrGuidServiceType)	\
    ( (This)->lpVtbl -> get_ServiceTypeGuid(This,pbstrGuidServiceType) ) 

#define IMSMQQueueInfo2_put_ServiceTypeGuid(This,bstrGuidServiceType)	\
    ( (This)->lpVtbl -> put_ServiceTypeGuid(This,bstrGuidServiceType) ) 

#define IMSMQQueueInfo2_get_Label(This,pbstrLabel)	\
    ( (This)->lpVtbl -> get_Label(This,pbstrLabel) ) 

#define IMSMQQueueInfo2_put_Label(This,bstrLabel)	\
    ( (This)->lpVtbl -> put_Label(This,bstrLabel) ) 

#define IMSMQQueueInfo2_get_PathName(This,pbstrPathName)	\
    ( (This)->lpVtbl -> get_PathName(This,pbstrPathName) ) 

#define IMSMQQueueInfo2_put_PathName(This,bstrPathName)	\
    ( (This)->lpVtbl -> put_PathName(This,bstrPathName) ) 

#define IMSMQQueueInfo2_get_FormatName(This,pbstrFormatName)	\
    ( (This)->lpVtbl -> get_FormatName(This,pbstrFormatName) ) 

#define IMSMQQueueInfo2_put_FormatName(This,bstrFormatName)	\
    ( (This)->lpVtbl -> put_FormatName(This,bstrFormatName) ) 

#define IMSMQQueueInfo2_get_IsTransactional(This,pisTransactional)	\
    ( (This)->lpVtbl -> get_IsTransactional(This,pisTransactional) ) 

#define IMSMQQueueInfo2_get_PrivLevel(This,plPrivLevel)	\
    ( (This)->lpVtbl -> get_PrivLevel(This,plPrivLevel) ) 

#define IMSMQQueueInfo2_put_PrivLevel(This,lPrivLevel)	\
    ( (This)->lpVtbl -> put_PrivLevel(This,lPrivLevel) ) 

#define IMSMQQueueInfo2_get_Journal(This,plJournal)	\
    ( (This)->lpVtbl -> get_Journal(This,plJournal) ) 

#define IMSMQQueueInfo2_put_Journal(This,lJournal)	\
    ( (This)->lpVtbl -> put_Journal(This,lJournal) ) 

#define IMSMQQueueInfo2_get_Quota(This,plQuota)	\
    ( (This)->lpVtbl -> get_Quota(This,plQuota) ) 

#define IMSMQQueueInfo2_put_Quota(This,lQuota)	\
    ( (This)->lpVtbl -> put_Quota(This,lQuota) ) 

#define IMSMQQueueInfo2_get_BasePriority(This,plBasePriority)	\
    ( (This)->lpVtbl -> get_BasePriority(This,plBasePriority) ) 

#define IMSMQQueueInfo2_put_BasePriority(This,lBasePriority)	\
    ( (This)->lpVtbl -> put_BasePriority(This,lBasePriority) ) 

#define IMSMQQueueInfo2_get_CreateTime(This,pvarCreateTime)	\
    ( (This)->lpVtbl -> get_CreateTime(This,pvarCreateTime) ) 

#define IMSMQQueueInfo2_get_ModifyTime(This,pvarModifyTime)	\
    ( (This)->lpVtbl -> get_ModifyTime(This,pvarModifyTime) ) 

#define IMSMQQueueInfo2_get_Authenticate(This,plAuthenticate)	\
    ( (This)->lpVtbl -> get_Authenticate(This,plAuthenticate) ) 

#define IMSMQQueueInfo2_put_Authenticate(This,lAuthenticate)	\
    ( (This)->lpVtbl -> put_Authenticate(This,lAuthenticate) ) 

#define IMSMQQueueInfo2_get_JournalQuota(This,plJournalQuota)	\
    ( (This)->lpVtbl -> get_JournalQuota(This,plJournalQuota) ) 

#define IMSMQQueueInfo2_put_JournalQuota(This,lJournalQuota)	\
    ( (This)->lpVtbl -> put_JournalQuota(This,lJournalQuota) ) 

#define IMSMQQueueInfo2_get_IsWorldReadable(This,pisWorldReadable)	\
    ( (This)->lpVtbl -> get_IsWorldReadable(This,pisWorldReadable) ) 

#define IMSMQQueueInfo2_Create(This,IsTransactional,IsWorldReadable)	\
    ( (This)->lpVtbl -> Create(This,IsTransactional,IsWorldReadable) ) 

#define IMSMQQueueInfo2_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IMSMQQueueInfo2_Open(This,Access,ShareMode,ppq)	\
    ( (This)->lpVtbl -> Open(This,Access,ShareMode,ppq) ) 

#define IMSMQQueueInfo2_Refresh(This)	\
    ( (This)->lpVtbl -> Refresh(This) ) 

#define IMSMQQueueInfo2_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IMSMQQueueInfo2_get_PathNameDNS(This,pbstrPathNameDNS)	\
    ( (This)->lpVtbl -> get_PathNameDNS(This,pbstrPathNameDNS) ) 

#define IMSMQQueueInfo2_get_Properties(This,ppcolProperties)	\
    ( (This)->lpVtbl -> get_Properties(This,ppcolProperties) ) 

#define IMSMQQueueInfo2_get_Security(This,pvarSecurity)	\
    ( (This)->lpVtbl -> get_Security(This,pvarSecurity) ) 

#define IMSMQQueueInfo2_put_Security(This,varSecurity)	\
    ( (This)->lpVtbl -> put_Security(This,varSecurity) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSMQQueueInfo2_INTERFACE_DEFINED__ */


#ifndef __IMSMQQueueInfo3_INTERFACE_DEFINED__
#define __IMSMQQueueInfo3_INTERFACE_DEFINED__

/* interface IMSMQQueueInfo3 */
/* [object][dual][hidden][helpstringcontext][uuid] */ 


EXTERN_C const IID IID_IMSMQQueueInfo3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("eba96b1d-2168-11d3-898c-00e02c074f6b")
    IMSMQQueueInfo3 : public IDispatch
    {
    public:
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_QueueGuid( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrGuidQueue) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_ServiceTypeGuid( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrGuidServiceType) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_ServiceTypeGuid( 
            /* [in] */ __RPC__in BSTR bstrGuidServiceType) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Label( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrLabel) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_Label( 
            /* [in] */ __RPC__in BSTR bstrLabel) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_PathName( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrPathName) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_PathName( 
            /* [in] */ __RPC__in BSTR bstrPathName) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_FormatName( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrFormatName) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_FormatName( 
            /* [in] */ __RPC__in BSTR bstrFormatName) = 0;
        
        virtual /* [id][propget][helpstringcontext][hidden] */ HRESULT STDMETHODCALLTYPE get_IsTransactional( 
            /* [retval][out] */ __RPC__out Boolean *pisTransactional) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_PrivLevel( 
            /* [retval][out] */ __RPC__out long *plPrivLevel) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_PrivLevel( 
            /* [in] */ long lPrivLevel) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Journal( 
            /* [retval][out] */ __RPC__out long *plJournal) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_Journal( 
            /* [in] */ long lJournal) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Quota( 
            /* [retval][out] */ __RPC__out long *plQuota) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_Quota( 
            /* [in] */ long lQuota) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_BasePriority( 
            /* [retval][out] */ __RPC__out long *plBasePriority) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_BasePriority( 
            /* [in] */ long lBasePriority) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_CreateTime( 
            /* [retval][out] */ __RPC__out VARIANT *pvarCreateTime) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_ModifyTime( 
            /* [retval][out] */ __RPC__out VARIANT *pvarModifyTime) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Authenticate( 
            /* [retval][out] */ __RPC__out long *plAuthenticate) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_Authenticate( 
            /* [in] */ long lAuthenticate) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_JournalQuota( 
            /* [retval][out] */ __RPC__out long *plJournalQuota) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_JournalQuota( 
            /* [in] */ long lJournalQuota) = 0;
        
        virtual /* [id][propget][helpstringcontext][hidden] */ HRESULT STDMETHODCALLTYPE get_IsWorldReadable( 
            /* [retval][out] */ __RPC__out Boolean *pisWorldReadable) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Create( 
            /* [optional][in] */ __RPC__in VARIANT *IsTransactional,
            /* [optional][in] */ __RPC__in VARIANT *IsWorldReadable) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Open( 
            /* [in] */ long Access,
            /* [in] */ long ShareMode,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueue3 **ppq) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Refresh( void) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Update( void) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_PathNameDNS( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrPathNameDNS) = 0;
        
        virtual /* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE get_Properties( 
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppcolProperties) = 0;
        
        virtual /* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE get_Security( 
            /* [retval][out] */ __RPC__out VARIANT *pvarSecurity) = 0;
        
        virtual /* [id][propput][hidden] */ HRESULT STDMETHODCALLTYPE put_Security( 
            /* [in] */ VARIANT varSecurity) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_IsTransactional2( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pisTransactional) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_IsWorldReadable2( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pisWorldReadable) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_MulticastAddress( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrMulticastAddress) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_MulticastAddress( 
            /* [in] */ __RPC__in BSTR bstrMulticastAddress) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_ADsPath( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrADsPath) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSMQQueueInfo3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMSMQQueueInfo3 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMSMQQueueInfo3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMSMQQueueInfo3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IMSMQQueueInfo3 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IMSMQQueueInfo3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IMSMQQueueInfo3 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSMQQueueInfo3 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_QueueGuid )( 
            __RPC__in IMSMQQueueInfo3 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrGuidQueue);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_ServiceTypeGuid )( 
            __RPC__in IMSMQQueueInfo3 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrGuidServiceType);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_ServiceTypeGuid )( 
            __RPC__in IMSMQQueueInfo3 * This,
            /* [in] */ __RPC__in BSTR bstrGuidServiceType);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Label )( 
            __RPC__in IMSMQQueueInfo3 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrLabel);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_Label )( 
            __RPC__in IMSMQQueueInfo3 * This,
            /* [in] */ __RPC__in BSTR bstrLabel);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_PathName )( 
            __RPC__in IMSMQQueueInfo3 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrPathName);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_PathName )( 
            __RPC__in IMSMQQueueInfo3 * This,
            /* [in] */ __RPC__in BSTR bstrPathName);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_FormatName )( 
            __RPC__in IMSMQQueueInfo3 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrFormatName);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_FormatName )( 
            __RPC__in IMSMQQueueInfo3 * This,
            /* [in] */ __RPC__in BSTR bstrFormatName);
        
        /* [id][propget][helpstringcontext][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_IsTransactional )( 
            __RPC__in IMSMQQueueInfo3 * This,
            /* [retval][out] */ __RPC__out Boolean *pisTransactional);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_PrivLevel )( 
            __RPC__in IMSMQQueueInfo3 * This,
            /* [retval][out] */ __RPC__out long *plPrivLevel);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_PrivLevel )( 
            __RPC__in IMSMQQueueInfo3 * This,
            /* [in] */ long lPrivLevel);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Journal )( 
            __RPC__in IMSMQQueueInfo3 * This,
            /* [retval][out] */ __RPC__out long *plJournal);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_Journal )( 
            __RPC__in IMSMQQueueInfo3 * This,
            /* [in] */ long lJournal);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Quota )( 
            __RPC__in IMSMQQueueInfo3 * This,
            /* [retval][out] */ __RPC__out long *plQuota);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_Quota )( 
            __RPC__in IMSMQQueueInfo3 * This,
            /* [in] */ long lQuota);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_BasePriority )( 
            __RPC__in IMSMQQueueInfo3 * This,
            /* [retval][out] */ __RPC__out long *plBasePriority);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_BasePriority )( 
            __RPC__in IMSMQQueueInfo3 * This,
            /* [in] */ long lBasePriority);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_CreateTime )( 
            __RPC__in IMSMQQueueInfo3 * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarCreateTime);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_ModifyTime )( 
            __RPC__in IMSMQQueueInfo3 * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarModifyTime);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Authenticate )( 
            __RPC__in IMSMQQueueInfo3 * This,
            /* [retval][out] */ __RPC__out long *plAuthenticate);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_Authenticate )( 
            __RPC__in IMSMQQueueInfo3 * This,
            /* [in] */ long lAuthenticate);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_JournalQuota )( 
            __RPC__in IMSMQQueueInfo3 * This,
            /* [retval][out] */ __RPC__out long *plJournalQuota);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_JournalQuota )( 
            __RPC__in IMSMQQueueInfo3 * This,
            /* [in] */ long lJournalQuota);
        
        /* [id][propget][helpstringcontext][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_IsWorldReadable )( 
            __RPC__in IMSMQQueueInfo3 * This,
            /* [retval][out] */ __RPC__out Boolean *pisWorldReadable);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Create )( 
            __RPC__in IMSMQQueueInfo3 * This,
            /* [optional][in] */ __RPC__in VARIANT *IsTransactional,
            /* [optional][in] */ __RPC__in VARIANT *IsWorldReadable);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            __RPC__in IMSMQQueueInfo3 * This);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Open )( 
            __RPC__in IMSMQQueueInfo3 * This,
            /* [in] */ long Access,
            /* [in] */ long ShareMode,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueue3 **ppq);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Refresh )( 
            __RPC__in IMSMQQueueInfo3 * This);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            __RPC__in IMSMQQueueInfo3 * This);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_PathNameDNS )( 
            __RPC__in IMSMQQueueInfo3 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrPathNameDNS);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            __RPC__in IMSMQQueueInfo3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppcolProperties);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_Security )( 
            __RPC__in IMSMQQueueInfo3 * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarSecurity);
        
        /* [id][propput][hidden] */ HRESULT ( STDMETHODCALLTYPE *put_Security )( 
            __RPC__in IMSMQQueueInfo3 * This,
            /* [in] */ VARIANT varSecurity);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_IsTransactional2 )( 
            __RPC__in IMSMQQueueInfo3 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pisTransactional);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_IsWorldReadable2 )( 
            __RPC__in IMSMQQueueInfo3 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pisWorldReadable);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_MulticastAddress )( 
            __RPC__in IMSMQQueueInfo3 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrMulticastAddress);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_MulticastAddress )( 
            __RPC__in IMSMQQueueInfo3 * This,
            /* [in] */ __RPC__in BSTR bstrMulticastAddress);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_ADsPath )( 
            __RPC__in IMSMQQueueInfo3 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrADsPath);
        
        END_INTERFACE
    } IMSMQQueueInfo3Vtbl;

    interface IMSMQQueueInfo3
    {
        CONST_VTBL struct IMSMQQueueInfo3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSMQQueueInfo3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSMQQueueInfo3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSMQQueueInfo3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSMQQueueInfo3_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSMQQueueInfo3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSMQQueueInfo3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSMQQueueInfo3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSMQQueueInfo3_get_QueueGuid(This,pbstrGuidQueue)	\
    ( (This)->lpVtbl -> get_QueueGuid(This,pbstrGuidQueue) ) 

#define IMSMQQueueInfo3_get_ServiceTypeGuid(This,pbstrGuidServiceType)	\
    ( (This)->lpVtbl -> get_ServiceTypeGuid(This,pbstrGuidServiceType) ) 

#define IMSMQQueueInfo3_put_ServiceTypeGuid(This,bstrGuidServiceType)	\
    ( (This)->lpVtbl -> put_ServiceTypeGuid(This,bstrGuidServiceType) ) 

#define IMSMQQueueInfo3_get_Label(This,pbstrLabel)	\
    ( (This)->lpVtbl -> get_Label(This,pbstrLabel) ) 

#define IMSMQQueueInfo3_put_Label(This,bstrLabel)	\
    ( (This)->lpVtbl -> put_Label(This,bstrLabel) ) 

#define IMSMQQueueInfo3_get_PathName(This,pbstrPathName)	\
    ( (This)->lpVtbl -> get_PathName(This,pbstrPathName) ) 

#define IMSMQQueueInfo3_put_PathName(This,bstrPathName)	\
    ( (This)->lpVtbl -> put_PathName(This,bstrPathName) ) 

#define IMSMQQueueInfo3_get_FormatName(This,pbstrFormatName)	\
    ( (This)->lpVtbl -> get_FormatName(This,pbstrFormatName) ) 

#define IMSMQQueueInfo3_put_FormatName(This,bstrFormatName)	\
    ( (This)->lpVtbl -> put_FormatName(This,bstrFormatName) ) 

#define IMSMQQueueInfo3_get_IsTransactional(This,pisTransactional)	\
    ( (This)->lpVtbl -> get_IsTransactional(This,pisTransactional) ) 

#define IMSMQQueueInfo3_get_PrivLevel(This,plPrivLevel)	\
    ( (This)->lpVtbl -> get_PrivLevel(This,plPrivLevel) ) 

#define IMSMQQueueInfo3_put_PrivLevel(This,lPrivLevel)	\
    ( (This)->lpVtbl -> put_PrivLevel(This,lPrivLevel) ) 

#define IMSMQQueueInfo3_get_Journal(This,plJournal)	\
    ( (This)->lpVtbl -> get_Journal(This,plJournal) ) 

#define IMSMQQueueInfo3_put_Journal(This,lJournal)	\
    ( (This)->lpVtbl -> put_Journal(This,lJournal) ) 

#define IMSMQQueueInfo3_get_Quota(This,plQuota)	\
    ( (This)->lpVtbl -> get_Quota(This,plQuota) ) 

#define IMSMQQueueInfo3_put_Quota(This,lQuota)	\
    ( (This)->lpVtbl -> put_Quota(This,lQuota) ) 

#define IMSMQQueueInfo3_get_BasePriority(This,plBasePriority)	\
    ( (This)->lpVtbl -> get_BasePriority(This,plBasePriority) ) 

#define IMSMQQueueInfo3_put_BasePriority(This,lBasePriority)	\
    ( (This)->lpVtbl -> put_BasePriority(This,lBasePriority) ) 

#define IMSMQQueueInfo3_get_CreateTime(This,pvarCreateTime)	\
    ( (This)->lpVtbl -> get_CreateTime(This,pvarCreateTime) ) 

#define IMSMQQueueInfo3_get_ModifyTime(This,pvarModifyTime)	\
    ( (This)->lpVtbl -> get_ModifyTime(This,pvarModifyTime) ) 

#define IMSMQQueueInfo3_get_Authenticate(This,plAuthenticate)	\
    ( (This)->lpVtbl -> get_Authenticate(This,plAuthenticate) ) 

#define IMSMQQueueInfo3_put_Authenticate(This,lAuthenticate)	\
    ( (This)->lpVtbl -> put_Authenticate(This,lAuthenticate) ) 

#define IMSMQQueueInfo3_get_JournalQuota(This,plJournalQuota)	\
    ( (This)->lpVtbl -> get_JournalQuota(This,plJournalQuota) ) 

#define IMSMQQueueInfo3_put_JournalQuota(This,lJournalQuota)	\
    ( (This)->lpVtbl -> put_JournalQuota(This,lJournalQuota) ) 

#define IMSMQQueueInfo3_get_IsWorldReadable(This,pisWorldReadable)	\
    ( (This)->lpVtbl -> get_IsWorldReadable(This,pisWorldReadable) ) 

#define IMSMQQueueInfo3_Create(This,IsTransactional,IsWorldReadable)	\
    ( (This)->lpVtbl -> Create(This,IsTransactional,IsWorldReadable) ) 

#define IMSMQQueueInfo3_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IMSMQQueueInfo3_Open(This,Access,ShareMode,ppq)	\
    ( (This)->lpVtbl -> Open(This,Access,ShareMode,ppq) ) 

#define IMSMQQueueInfo3_Refresh(This)	\
    ( (This)->lpVtbl -> Refresh(This) ) 

#define IMSMQQueueInfo3_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IMSMQQueueInfo3_get_PathNameDNS(This,pbstrPathNameDNS)	\
    ( (This)->lpVtbl -> get_PathNameDNS(This,pbstrPathNameDNS) ) 

#define IMSMQQueueInfo3_get_Properties(This,ppcolProperties)	\
    ( (This)->lpVtbl -> get_Properties(This,ppcolProperties) ) 

#define IMSMQQueueInfo3_get_Security(This,pvarSecurity)	\
    ( (This)->lpVtbl -> get_Security(This,pvarSecurity) ) 

#define IMSMQQueueInfo3_put_Security(This,varSecurity)	\
    ( (This)->lpVtbl -> put_Security(This,varSecurity) ) 

#define IMSMQQueueInfo3_get_IsTransactional2(This,pisTransactional)	\
    ( (This)->lpVtbl -> get_IsTransactional2(This,pisTransactional) ) 

#define IMSMQQueueInfo3_get_IsWorldReadable2(This,pisWorldReadable)	\
    ( (This)->lpVtbl -> get_IsWorldReadable2(This,pisWorldReadable) ) 

#define IMSMQQueueInfo3_get_MulticastAddress(This,pbstrMulticastAddress)	\
    ( (This)->lpVtbl -> get_MulticastAddress(This,pbstrMulticastAddress) ) 

#define IMSMQQueueInfo3_put_MulticastAddress(This,bstrMulticastAddress)	\
    ( (This)->lpVtbl -> put_MulticastAddress(This,bstrMulticastAddress) ) 

#define IMSMQQueueInfo3_get_ADsPath(This,pbstrADsPath)	\
    ( (This)->lpVtbl -> get_ADsPath(This,pbstrADsPath) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSMQQueueInfo3_INTERFACE_DEFINED__ */


#ifndef __IMSMQQueueInfo4_INTERFACE_DEFINED__
#define __IMSMQQueueInfo4_INTERFACE_DEFINED__

/* interface IMSMQQueueInfo4 */
/* [object][dual][hidden][helpstringcontext][uuid] */ 


EXTERN_C const IID IID_IMSMQQueueInfo4;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("eba96b21-2168-11d3-898c-00e02c074f6b")
    IMSMQQueueInfo4 : public IDispatch
    {
    public:
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_QueueGuid( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrGuidQueue) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_ServiceTypeGuid( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrGuidServiceType) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_ServiceTypeGuid( 
            /* [in] */ __RPC__in BSTR bstrGuidServiceType) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Label( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrLabel) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_Label( 
            /* [in] */ __RPC__in BSTR bstrLabel) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_PathName( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrPathName) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_PathName( 
            /* [in] */ __RPC__in BSTR bstrPathName) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_FormatName( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrFormatName) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_FormatName( 
            /* [in] */ __RPC__in BSTR bstrFormatName) = 0;
        
        virtual /* [id][propget][helpstringcontext][hidden] */ HRESULT STDMETHODCALLTYPE get_IsTransactional( 
            /* [retval][out] */ __RPC__out Boolean *pisTransactional) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_PrivLevel( 
            /* [retval][out] */ __RPC__out long *plPrivLevel) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_PrivLevel( 
            /* [in] */ long lPrivLevel) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Journal( 
            /* [retval][out] */ __RPC__out long *plJournal) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_Journal( 
            /* [in] */ long lJournal) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Quota( 
            /* [retval][out] */ __RPC__out long *plQuota) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_Quota( 
            /* [in] */ long lQuota) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_BasePriority( 
            /* [retval][out] */ __RPC__out long *plBasePriority) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_BasePriority( 
            /* [in] */ long lBasePriority) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_CreateTime( 
            /* [retval][out] */ __RPC__out VARIANT *pvarCreateTime) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_ModifyTime( 
            /* [retval][out] */ __RPC__out VARIANT *pvarModifyTime) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Authenticate( 
            /* [retval][out] */ __RPC__out long *plAuthenticate) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_Authenticate( 
            /* [in] */ long lAuthenticate) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_JournalQuota( 
            /* [retval][out] */ __RPC__out long *plJournalQuota) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_JournalQuota( 
            /* [in] */ long lJournalQuota) = 0;
        
        virtual /* [id][propget][helpstringcontext][hidden] */ HRESULT STDMETHODCALLTYPE get_IsWorldReadable( 
            /* [retval][out] */ __RPC__out Boolean *pisWorldReadable) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Create( 
            /* [optional][in] */ __RPC__in VARIANT *IsTransactional,
            /* [optional][in] */ __RPC__in VARIANT *IsWorldReadable) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Open( 
            /* [in] */ long Access,
            /* [in] */ long ShareMode,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueue4 **ppq) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Refresh( void) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Update( void) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_PathNameDNS( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrPathNameDNS) = 0;
        
        virtual /* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE get_Properties( 
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppcolProperties) = 0;
        
        virtual /* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE get_Security( 
            /* [retval][out] */ __RPC__out VARIANT *pvarSecurity) = 0;
        
        virtual /* [id][propput][hidden] */ HRESULT STDMETHODCALLTYPE put_Security( 
            /* [in] */ VARIANT varSecurity) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_IsTransactional2( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pisTransactional) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_IsWorldReadable2( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pisWorldReadable) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_MulticastAddress( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrMulticastAddress) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_MulticastAddress( 
            /* [in] */ __RPC__in BSTR bstrMulticastAddress) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_ADsPath( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrADsPath) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSMQQueueInfo4Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMSMQQueueInfo4 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMSMQQueueInfo4 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMSMQQueueInfo4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IMSMQQueueInfo4 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IMSMQQueueInfo4 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IMSMQQueueInfo4 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSMQQueueInfo4 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_QueueGuid )( 
            __RPC__in IMSMQQueueInfo4 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrGuidQueue);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_ServiceTypeGuid )( 
            __RPC__in IMSMQQueueInfo4 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrGuidServiceType);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_ServiceTypeGuid )( 
            __RPC__in IMSMQQueueInfo4 * This,
            /* [in] */ __RPC__in BSTR bstrGuidServiceType);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Label )( 
            __RPC__in IMSMQQueueInfo4 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrLabel);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_Label )( 
            __RPC__in IMSMQQueueInfo4 * This,
            /* [in] */ __RPC__in BSTR bstrLabel);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_PathName )( 
            __RPC__in IMSMQQueueInfo4 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrPathName);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_PathName )( 
            __RPC__in IMSMQQueueInfo4 * This,
            /* [in] */ __RPC__in BSTR bstrPathName);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_FormatName )( 
            __RPC__in IMSMQQueueInfo4 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrFormatName);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_FormatName )( 
            __RPC__in IMSMQQueueInfo4 * This,
            /* [in] */ __RPC__in BSTR bstrFormatName);
        
        /* [id][propget][helpstringcontext][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_IsTransactional )( 
            __RPC__in IMSMQQueueInfo4 * This,
            /* [retval][out] */ __RPC__out Boolean *pisTransactional);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_PrivLevel )( 
            __RPC__in IMSMQQueueInfo4 * This,
            /* [retval][out] */ __RPC__out long *plPrivLevel);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_PrivLevel )( 
            __RPC__in IMSMQQueueInfo4 * This,
            /* [in] */ long lPrivLevel);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Journal )( 
            __RPC__in IMSMQQueueInfo4 * This,
            /* [retval][out] */ __RPC__out long *plJournal);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_Journal )( 
            __RPC__in IMSMQQueueInfo4 * This,
            /* [in] */ long lJournal);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Quota )( 
            __RPC__in IMSMQQueueInfo4 * This,
            /* [retval][out] */ __RPC__out long *plQuota);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_Quota )( 
            __RPC__in IMSMQQueueInfo4 * This,
            /* [in] */ long lQuota);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_BasePriority )( 
            __RPC__in IMSMQQueueInfo4 * This,
            /* [retval][out] */ __RPC__out long *plBasePriority);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_BasePriority )( 
            __RPC__in IMSMQQueueInfo4 * This,
            /* [in] */ long lBasePriority);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_CreateTime )( 
            __RPC__in IMSMQQueueInfo4 * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarCreateTime);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_ModifyTime )( 
            __RPC__in IMSMQQueueInfo4 * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarModifyTime);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Authenticate )( 
            __RPC__in IMSMQQueueInfo4 * This,
            /* [retval][out] */ __RPC__out long *plAuthenticate);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_Authenticate )( 
            __RPC__in IMSMQQueueInfo4 * This,
            /* [in] */ long lAuthenticate);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_JournalQuota )( 
            __RPC__in IMSMQQueueInfo4 * This,
            /* [retval][out] */ __RPC__out long *plJournalQuota);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_JournalQuota )( 
            __RPC__in IMSMQQueueInfo4 * This,
            /* [in] */ long lJournalQuota);
        
        /* [id][propget][helpstringcontext][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_IsWorldReadable )( 
            __RPC__in IMSMQQueueInfo4 * This,
            /* [retval][out] */ __RPC__out Boolean *pisWorldReadable);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Create )( 
            __RPC__in IMSMQQueueInfo4 * This,
            /* [optional][in] */ __RPC__in VARIANT *IsTransactional,
            /* [optional][in] */ __RPC__in VARIANT *IsWorldReadable);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            __RPC__in IMSMQQueueInfo4 * This);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Open )( 
            __RPC__in IMSMQQueueInfo4 * This,
            /* [in] */ long Access,
            /* [in] */ long ShareMode,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueue4 **ppq);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Refresh )( 
            __RPC__in IMSMQQueueInfo4 * This);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Update )( 
            __RPC__in IMSMQQueueInfo4 * This);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_PathNameDNS )( 
            __RPC__in IMSMQQueueInfo4 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrPathNameDNS);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            __RPC__in IMSMQQueueInfo4 * This,
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppcolProperties);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_Security )( 
            __RPC__in IMSMQQueueInfo4 * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarSecurity);
        
        /* [id][propput][hidden] */ HRESULT ( STDMETHODCALLTYPE *put_Security )( 
            __RPC__in IMSMQQueueInfo4 * This,
            /* [in] */ VARIANT varSecurity);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_IsTransactional2 )( 
            __RPC__in IMSMQQueueInfo4 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pisTransactional);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_IsWorldReadable2 )( 
            __RPC__in IMSMQQueueInfo4 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pisWorldReadable);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_MulticastAddress )( 
            __RPC__in IMSMQQueueInfo4 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrMulticastAddress);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_MulticastAddress )( 
            __RPC__in IMSMQQueueInfo4 * This,
            /* [in] */ __RPC__in BSTR bstrMulticastAddress);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_ADsPath )( 
            __RPC__in IMSMQQueueInfo4 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrADsPath);
        
        END_INTERFACE
    } IMSMQQueueInfo4Vtbl;

    interface IMSMQQueueInfo4
    {
        CONST_VTBL struct IMSMQQueueInfo4Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSMQQueueInfo4_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSMQQueueInfo4_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSMQQueueInfo4_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSMQQueueInfo4_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSMQQueueInfo4_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSMQQueueInfo4_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSMQQueueInfo4_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSMQQueueInfo4_get_QueueGuid(This,pbstrGuidQueue)	\
    ( (This)->lpVtbl -> get_QueueGuid(This,pbstrGuidQueue) ) 

#define IMSMQQueueInfo4_get_ServiceTypeGuid(This,pbstrGuidServiceType)	\
    ( (This)->lpVtbl -> get_ServiceTypeGuid(This,pbstrGuidServiceType) ) 

#define IMSMQQueueInfo4_put_ServiceTypeGuid(This,bstrGuidServiceType)	\
    ( (This)->lpVtbl -> put_ServiceTypeGuid(This,bstrGuidServiceType) ) 

#define IMSMQQueueInfo4_get_Label(This,pbstrLabel)	\
    ( (This)->lpVtbl -> get_Label(This,pbstrLabel) ) 

#define IMSMQQueueInfo4_put_Label(This,bstrLabel)	\
    ( (This)->lpVtbl -> put_Label(This,bstrLabel) ) 

#define IMSMQQueueInfo4_get_PathName(This,pbstrPathName)	\
    ( (This)->lpVtbl -> get_PathName(This,pbstrPathName) ) 

#define IMSMQQueueInfo4_put_PathName(This,bstrPathName)	\
    ( (This)->lpVtbl -> put_PathName(This,bstrPathName) ) 

#define IMSMQQueueInfo4_get_FormatName(This,pbstrFormatName)	\
    ( (This)->lpVtbl -> get_FormatName(This,pbstrFormatName) ) 

#define IMSMQQueueInfo4_put_FormatName(This,bstrFormatName)	\
    ( (This)->lpVtbl -> put_FormatName(This,bstrFormatName) ) 

#define IMSMQQueueInfo4_get_IsTransactional(This,pisTransactional)	\
    ( (This)->lpVtbl -> get_IsTransactional(This,pisTransactional) ) 

#define IMSMQQueueInfo4_get_PrivLevel(This,plPrivLevel)	\
    ( (This)->lpVtbl -> get_PrivLevel(This,plPrivLevel) ) 

#define IMSMQQueueInfo4_put_PrivLevel(This,lPrivLevel)	\
    ( (This)->lpVtbl -> put_PrivLevel(This,lPrivLevel) ) 

#define IMSMQQueueInfo4_get_Journal(This,plJournal)	\
    ( (This)->lpVtbl -> get_Journal(This,plJournal) ) 

#define IMSMQQueueInfo4_put_Journal(This,lJournal)	\
    ( (This)->lpVtbl -> put_Journal(This,lJournal) ) 

#define IMSMQQueueInfo4_get_Quota(This,plQuota)	\
    ( (This)->lpVtbl -> get_Quota(This,plQuota) ) 

#define IMSMQQueueInfo4_put_Quota(This,lQuota)	\
    ( (This)->lpVtbl -> put_Quota(This,lQuota) ) 

#define IMSMQQueueInfo4_get_BasePriority(This,plBasePriority)	\
    ( (This)->lpVtbl -> get_BasePriority(This,plBasePriority) ) 

#define IMSMQQueueInfo4_put_BasePriority(This,lBasePriority)	\
    ( (This)->lpVtbl -> put_BasePriority(This,lBasePriority) ) 

#define IMSMQQueueInfo4_get_CreateTime(This,pvarCreateTime)	\
    ( (This)->lpVtbl -> get_CreateTime(This,pvarCreateTime) ) 

#define IMSMQQueueInfo4_get_ModifyTime(This,pvarModifyTime)	\
    ( (This)->lpVtbl -> get_ModifyTime(This,pvarModifyTime) ) 

#define IMSMQQueueInfo4_get_Authenticate(This,plAuthenticate)	\
    ( (This)->lpVtbl -> get_Authenticate(This,plAuthenticate) ) 

#define IMSMQQueueInfo4_put_Authenticate(This,lAuthenticate)	\
    ( (This)->lpVtbl -> put_Authenticate(This,lAuthenticate) ) 

#define IMSMQQueueInfo4_get_JournalQuota(This,plJournalQuota)	\
    ( (This)->lpVtbl -> get_JournalQuota(This,plJournalQuota) ) 

#define IMSMQQueueInfo4_put_JournalQuota(This,lJournalQuota)	\
    ( (This)->lpVtbl -> put_JournalQuota(This,lJournalQuota) ) 

#define IMSMQQueueInfo4_get_IsWorldReadable(This,pisWorldReadable)	\
    ( (This)->lpVtbl -> get_IsWorldReadable(This,pisWorldReadable) ) 

#define IMSMQQueueInfo4_Create(This,IsTransactional,IsWorldReadable)	\
    ( (This)->lpVtbl -> Create(This,IsTransactional,IsWorldReadable) ) 

#define IMSMQQueueInfo4_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define IMSMQQueueInfo4_Open(This,Access,ShareMode,ppq)	\
    ( (This)->lpVtbl -> Open(This,Access,ShareMode,ppq) ) 

#define IMSMQQueueInfo4_Refresh(This)	\
    ( (This)->lpVtbl -> Refresh(This) ) 

#define IMSMQQueueInfo4_Update(This)	\
    ( (This)->lpVtbl -> Update(This) ) 

#define IMSMQQueueInfo4_get_PathNameDNS(This,pbstrPathNameDNS)	\
    ( (This)->lpVtbl -> get_PathNameDNS(This,pbstrPathNameDNS) ) 

#define IMSMQQueueInfo4_get_Properties(This,ppcolProperties)	\
    ( (This)->lpVtbl -> get_Properties(This,ppcolProperties) ) 

#define IMSMQQueueInfo4_get_Security(This,pvarSecurity)	\
    ( (This)->lpVtbl -> get_Security(This,pvarSecurity) ) 

#define IMSMQQueueInfo4_put_Security(This,varSecurity)	\
    ( (This)->lpVtbl -> put_Security(This,varSecurity) ) 

#define IMSMQQueueInfo4_get_IsTransactional2(This,pisTransactional)	\
    ( (This)->lpVtbl -> get_IsTransactional2(This,pisTransactional) ) 

#define IMSMQQueueInfo4_get_IsWorldReadable2(This,pisWorldReadable)	\
    ( (This)->lpVtbl -> get_IsWorldReadable2(This,pisWorldReadable) ) 

#define IMSMQQueueInfo4_get_MulticastAddress(This,pbstrMulticastAddress)	\
    ( (This)->lpVtbl -> get_MulticastAddress(This,pbstrMulticastAddress) ) 

#define IMSMQQueueInfo4_put_MulticastAddress(This,bstrMulticastAddress)	\
    ( (This)->lpVtbl -> put_MulticastAddress(This,bstrMulticastAddress) ) 

#define IMSMQQueueInfo4_get_ADsPath(This,pbstrADsPath)	\
    ( (This)->lpVtbl -> get_ADsPath(This,pbstrADsPath) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSMQQueueInfo4_INTERFACE_DEFINED__ */


#ifndef __IMSMQQueue_INTERFACE_DEFINED__
#define __IMSMQQueue_INTERFACE_DEFINED__

/* interface IMSMQQueue */
/* [object][dual][hidden][helpstringcontext][uuid] */ 


EXTERN_C const IID IID_IMSMQQueue;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D7D6E076-DCCD-11d0-AA4B-0060970DEBAE")
    IMSMQQueue : public IDispatch
    {
    public:
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Access( 
            /* [retval][out] */ __RPC__out long *plAccess) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_ShareMode( 
            /* [retval][out] */ __RPC__out long *plShareMode) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_QueueInfo( 
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo **ppqinfo) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Handle( 
            /* [retval][out] */ __RPC__out long *plHandle) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_IsOpen( 
            /* [retval][out] */ __RPC__out Boolean *pisOpen) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Close( void) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Receive( 
            /* [optional][in] */ __RPC__in VARIANT *Transaction,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage **ppmsg) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Peek( 
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage **ppmsg) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE EnableNotification( 
            /* [in] */ __RPC__in_opt IMSMQEvent *Event,
            /* [optional][in] */ __RPC__in VARIANT *Cursor,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE ReceiveCurrent( 
            /* [optional][in] */ __RPC__in VARIANT *Transaction,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage **ppmsg) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE PeekNext( 
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage **ppmsg) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE PeekCurrent( 
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage **ppmsg) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSMQQueueVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMSMQQueue * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMSMQQueue * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMSMQQueue * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IMSMQQueue * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IMSMQQueue * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IMSMQQueue * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSMQQueue * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Access )( 
            __RPC__in IMSMQQueue * This,
            /* [retval][out] */ __RPC__out long *plAccess);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_ShareMode )( 
            __RPC__in IMSMQQueue * This,
            /* [retval][out] */ __RPC__out long *plShareMode);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_QueueInfo )( 
            __RPC__in IMSMQQueue * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo **ppqinfo);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            __RPC__in IMSMQQueue * This,
            /* [retval][out] */ __RPC__out long *plHandle);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_IsOpen )( 
            __RPC__in IMSMQQueue * This,
            /* [retval][out] */ __RPC__out Boolean *pisOpen);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Close )( 
            __RPC__in IMSMQQueue * This);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Receive )( 
            __RPC__in IMSMQQueue * This,
            /* [optional][in] */ __RPC__in VARIANT *Transaction,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage **ppmsg);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Peek )( 
            __RPC__in IMSMQQueue * This,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage **ppmsg);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *EnableNotification )( 
            __RPC__in IMSMQQueue * This,
            /* [in] */ __RPC__in_opt IMSMQEvent *Event,
            /* [optional][in] */ __RPC__in VARIANT *Cursor,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            __RPC__in IMSMQQueue * This);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *ReceiveCurrent )( 
            __RPC__in IMSMQQueue * This,
            /* [optional][in] */ __RPC__in VARIANT *Transaction,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage **ppmsg);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *PeekNext )( 
            __RPC__in IMSMQQueue * This,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage **ppmsg);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *PeekCurrent )( 
            __RPC__in IMSMQQueue * This,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage **ppmsg);
        
        END_INTERFACE
    } IMSMQQueueVtbl;

    interface IMSMQQueue
    {
        CONST_VTBL struct IMSMQQueueVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSMQQueue_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSMQQueue_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSMQQueue_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSMQQueue_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSMQQueue_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSMQQueue_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSMQQueue_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSMQQueue_get_Access(This,plAccess)	\
    ( (This)->lpVtbl -> get_Access(This,plAccess) ) 

#define IMSMQQueue_get_ShareMode(This,plShareMode)	\
    ( (This)->lpVtbl -> get_ShareMode(This,plShareMode) ) 

#define IMSMQQueue_get_QueueInfo(This,ppqinfo)	\
    ( (This)->lpVtbl -> get_QueueInfo(This,ppqinfo) ) 

#define IMSMQQueue_get_Handle(This,plHandle)	\
    ( (This)->lpVtbl -> get_Handle(This,plHandle) ) 

#define IMSMQQueue_get_IsOpen(This,pisOpen)	\
    ( (This)->lpVtbl -> get_IsOpen(This,pisOpen) ) 

#define IMSMQQueue_Close(This)	\
    ( (This)->lpVtbl -> Close(This) ) 

#define IMSMQQueue_Receive(This,Transaction,WantDestinationQueue,WantBody,ReceiveTimeout,ppmsg)	\
    ( (This)->lpVtbl -> Receive(This,Transaction,WantDestinationQueue,WantBody,ReceiveTimeout,ppmsg) ) 

#define IMSMQQueue_Peek(This,WantDestinationQueue,WantBody,ReceiveTimeout,ppmsg)	\
    ( (This)->lpVtbl -> Peek(This,WantDestinationQueue,WantBody,ReceiveTimeout,ppmsg) ) 

#define IMSMQQueue_EnableNotification(This,Event,Cursor,ReceiveTimeout)	\
    ( (This)->lpVtbl -> EnableNotification(This,Event,Cursor,ReceiveTimeout) ) 

#define IMSMQQueue_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define IMSMQQueue_ReceiveCurrent(This,Transaction,WantDestinationQueue,WantBody,ReceiveTimeout,ppmsg)	\
    ( (This)->lpVtbl -> ReceiveCurrent(This,Transaction,WantDestinationQueue,WantBody,ReceiveTimeout,ppmsg) ) 

#define IMSMQQueue_PeekNext(This,WantDestinationQueue,WantBody,ReceiveTimeout,ppmsg)	\
    ( (This)->lpVtbl -> PeekNext(This,WantDestinationQueue,WantBody,ReceiveTimeout,ppmsg) ) 

#define IMSMQQueue_PeekCurrent(This,WantDestinationQueue,WantBody,ReceiveTimeout,ppmsg)	\
    ( (This)->lpVtbl -> PeekCurrent(This,WantDestinationQueue,WantBody,ReceiveTimeout,ppmsg) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSMQQueue_INTERFACE_DEFINED__ */


#ifndef __IMSMQQueue2_INTERFACE_DEFINED__
#define __IMSMQQueue2_INTERFACE_DEFINED__

/* interface IMSMQQueue2 */
/* [object][dual][hidden][helpstringcontext][uuid] */ 


EXTERN_C const IID IID_IMSMQQueue2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("EF0574E0-06D8-11D3-B100-00E02C074F6B")
    IMSMQQueue2 : public IDispatch
    {
    public:
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Access( 
            /* [retval][out] */ __RPC__out long *plAccess) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_ShareMode( 
            /* [retval][out] */ __RPC__out long *plShareMode) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_QueueInfo( 
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo2 **ppqinfo) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Handle( 
            /* [retval][out] */ __RPC__out long *plHandle) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_IsOpen( 
            /* [retval][out] */ __RPC__out Boolean *pisOpen) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Close( void) = 0;
        
        virtual /* [hidden][helpstringcontext] */ HRESULT STDMETHODCALLTYPE Receive_v1( 
            /* [optional][in] */ __RPC__in VARIANT *Transaction,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage **ppmsg) = 0;
        
        virtual /* [hidden][helpstringcontext] */ HRESULT STDMETHODCALLTYPE Peek_v1( 
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage **ppmsg) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE EnableNotification( 
            /* [in] */ __RPC__in_opt IMSMQEvent2 *Event,
            /* [optional][in] */ __RPC__in VARIANT *Cursor,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual /* [hidden][helpstringcontext] */ HRESULT STDMETHODCALLTYPE ReceiveCurrent_v1( 
            /* [optional][in] */ __RPC__in VARIANT *Transaction,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage **ppmsg) = 0;
        
        virtual /* [hidden][helpstringcontext] */ HRESULT STDMETHODCALLTYPE PeekNext_v1( 
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage **ppmsg) = 0;
        
        virtual /* [hidden][helpstringcontext] */ HRESULT STDMETHODCALLTYPE PeekCurrent_v1( 
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage **ppmsg) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Receive( 
            /* [optional][in] */ __RPC__in VARIANT *Transaction,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage2 **ppmsg) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Peek( 
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage2 **ppmsg) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE ReceiveCurrent( 
            /* [optional][in] */ __RPC__in VARIANT *Transaction,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage2 **ppmsg) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE PeekNext( 
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage2 **ppmsg) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE PeekCurrent( 
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage2 **ppmsg) = 0;
        
        virtual /* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE get_Properties( 
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppcolProperties) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSMQQueue2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMSMQQueue2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMSMQQueue2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMSMQQueue2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IMSMQQueue2 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IMSMQQueue2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IMSMQQueue2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSMQQueue2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Access )( 
            __RPC__in IMSMQQueue2 * This,
            /* [retval][out] */ __RPC__out long *plAccess);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_ShareMode )( 
            __RPC__in IMSMQQueue2 * This,
            /* [retval][out] */ __RPC__out long *plShareMode);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_QueueInfo )( 
            __RPC__in IMSMQQueue2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo2 **ppqinfo);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            __RPC__in IMSMQQueue2 * This,
            /* [retval][out] */ __RPC__out long *plHandle);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_IsOpen )( 
            __RPC__in IMSMQQueue2 * This,
            /* [retval][out] */ __RPC__out Boolean *pisOpen);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Close )( 
            __RPC__in IMSMQQueue2 * This);
        
        /* [hidden][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Receive_v1 )( 
            __RPC__in IMSMQQueue2 * This,
            /* [optional][in] */ __RPC__in VARIANT *Transaction,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage **ppmsg);
        
        /* [hidden][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Peek_v1 )( 
            __RPC__in IMSMQQueue2 * This,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage **ppmsg);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *EnableNotification )( 
            __RPC__in IMSMQQueue2 * This,
            /* [in] */ __RPC__in_opt IMSMQEvent2 *Event,
            /* [optional][in] */ __RPC__in VARIANT *Cursor,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            __RPC__in IMSMQQueue2 * This);
        
        /* [hidden][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *ReceiveCurrent_v1 )( 
            __RPC__in IMSMQQueue2 * This,
            /* [optional][in] */ __RPC__in VARIANT *Transaction,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage **ppmsg);
        
        /* [hidden][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *PeekNext_v1 )( 
            __RPC__in IMSMQQueue2 * This,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage **ppmsg);
        
        /* [hidden][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *PeekCurrent_v1 )( 
            __RPC__in IMSMQQueue2 * This,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage **ppmsg);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Receive )( 
            __RPC__in IMSMQQueue2 * This,
            /* [optional][in] */ __RPC__in VARIANT *Transaction,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage2 **ppmsg);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Peek )( 
            __RPC__in IMSMQQueue2 * This,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage2 **ppmsg);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *ReceiveCurrent )( 
            __RPC__in IMSMQQueue2 * This,
            /* [optional][in] */ __RPC__in VARIANT *Transaction,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage2 **ppmsg);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *PeekNext )( 
            __RPC__in IMSMQQueue2 * This,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage2 **ppmsg);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *PeekCurrent )( 
            __RPC__in IMSMQQueue2 * This,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage2 **ppmsg);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            __RPC__in IMSMQQueue2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppcolProperties);
        
        END_INTERFACE
    } IMSMQQueue2Vtbl;

    interface IMSMQQueue2
    {
        CONST_VTBL struct IMSMQQueue2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSMQQueue2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSMQQueue2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSMQQueue2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSMQQueue2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSMQQueue2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSMQQueue2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSMQQueue2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSMQQueue2_get_Access(This,plAccess)	\
    ( (This)->lpVtbl -> get_Access(This,plAccess) ) 

#define IMSMQQueue2_get_ShareMode(This,plShareMode)	\
    ( (This)->lpVtbl -> get_ShareMode(This,plShareMode) ) 

#define IMSMQQueue2_get_QueueInfo(This,ppqinfo)	\
    ( (This)->lpVtbl -> get_QueueInfo(This,ppqinfo) ) 

#define IMSMQQueue2_get_Handle(This,plHandle)	\
    ( (This)->lpVtbl -> get_Handle(This,plHandle) ) 

#define IMSMQQueue2_get_IsOpen(This,pisOpen)	\
    ( (This)->lpVtbl -> get_IsOpen(This,pisOpen) ) 

#define IMSMQQueue2_Close(This)	\
    ( (This)->lpVtbl -> Close(This) ) 

#define IMSMQQueue2_Receive_v1(This,Transaction,WantDestinationQueue,WantBody,ReceiveTimeout,ppmsg)	\
    ( (This)->lpVtbl -> Receive_v1(This,Transaction,WantDestinationQueue,WantBody,ReceiveTimeout,ppmsg) ) 

#define IMSMQQueue2_Peek_v1(This,WantDestinationQueue,WantBody,ReceiveTimeout,ppmsg)	\
    ( (This)->lpVtbl -> Peek_v1(This,WantDestinationQueue,WantBody,ReceiveTimeout,ppmsg) ) 

#define IMSMQQueue2_EnableNotification(This,Event,Cursor,ReceiveTimeout)	\
    ( (This)->lpVtbl -> EnableNotification(This,Event,Cursor,ReceiveTimeout) ) 

#define IMSMQQueue2_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define IMSMQQueue2_ReceiveCurrent_v1(This,Transaction,WantDestinationQueue,WantBody,ReceiveTimeout,ppmsg)	\
    ( (This)->lpVtbl -> ReceiveCurrent_v1(This,Transaction,WantDestinationQueue,WantBody,ReceiveTimeout,ppmsg) ) 

#define IMSMQQueue2_PeekNext_v1(This,WantDestinationQueue,WantBody,ReceiveTimeout,ppmsg)	\
    ( (This)->lpVtbl -> PeekNext_v1(This,WantDestinationQueue,WantBody,ReceiveTimeout,ppmsg) ) 

#define IMSMQQueue2_PeekCurrent_v1(This,WantDestinationQueue,WantBody,ReceiveTimeout,ppmsg)	\
    ( (This)->lpVtbl -> PeekCurrent_v1(This,WantDestinationQueue,WantBody,ReceiveTimeout,ppmsg) ) 

#define IMSMQQueue2_Receive(This,Transaction,WantDestinationQueue,WantBody,ReceiveTimeout,WantConnectorType,ppmsg)	\
    ( (This)->lpVtbl -> Receive(This,Transaction,WantDestinationQueue,WantBody,ReceiveTimeout,WantConnectorType,ppmsg) ) 

#define IMSMQQueue2_Peek(This,WantDestinationQueue,WantBody,ReceiveTimeout,WantConnectorType,ppmsg)	\
    ( (This)->lpVtbl -> Peek(This,WantDestinationQueue,WantBody,ReceiveTimeout,WantConnectorType,ppmsg) ) 

#define IMSMQQueue2_ReceiveCurrent(This,Transaction,WantDestinationQueue,WantBody,ReceiveTimeout,WantConnectorType,ppmsg)	\
    ( (This)->lpVtbl -> ReceiveCurrent(This,Transaction,WantDestinationQueue,WantBody,ReceiveTimeout,WantConnectorType,ppmsg) ) 

#define IMSMQQueue2_PeekNext(This,WantDestinationQueue,WantBody,ReceiveTimeout,WantConnectorType,ppmsg)	\
    ( (This)->lpVtbl -> PeekNext(This,WantDestinationQueue,WantBody,ReceiveTimeout,WantConnectorType,ppmsg) ) 

#define IMSMQQueue2_PeekCurrent(This,WantDestinationQueue,WantBody,ReceiveTimeout,WantConnectorType,ppmsg)	\
    ( (This)->lpVtbl -> PeekCurrent(This,WantDestinationQueue,WantBody,ReceiveTimeout,WantConnectorType,ppmsg) ) 

#define IMSMQQueue2_get_Properties(This,ppcolProperties)	\
    ( (This)->lpVtbl -> get_Properties(This,ppcolProperties) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSMQQueue2_INTERFACE_DEFINED__ */


#ifndef __IMSMQQueue3_INTERFACE_DEFINED__
#define __IMSMQQueue3_INTERFACE_DEFINED__

/* interface IMSMQQueue3 */
/* [object][dual][hidden][helpstringcontext][uuid] */ 


EXTERN_C const IID IID_IMSMQQueue3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("eba96b1b-2168-11d3-898c-00e02c074f6b")
    IMSMQQueue3 : public IDispatch
    {
    public:
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Access( 
            /* [retval][out] */ __RPC__out long *plAccess) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_ShareMode( 
            /* [retval][out] */ __RPC__out long *plShareMode) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_QueueInfo( 
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo3 **ppqinfo) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Handle( 
            /* [retval][out] */ __RPC__out long *plHandle) = 0;
        
        virtual /* [id][propget][helpstringcontext][hidden] */ HRESULT STDMETHODCALLTYPE get_IsOpen( 
            /* [retval][out] */ __RPC__out Boolean *pisOpen) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Close( void) = 0;
        
        virtual /* [hidden][helpstringcontext] */ HRESULT STDMETHODCALLTYPE Receive_v1( 
            /* [optional][in] */ __RPC__in VARIANT *Transaction,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage **ppmsg) = 0;
        
        virtual /* [hidden][helpstringcontext] */ HRESULT STDMETHODCALLTYPE Peek_v1( 
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage **ppmsg) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE EnableNotification( 
            /* [in] */ __RPC__in_opt IMSMQEvent3 *Event,
            /* [optional][in] */ __RPC__in VARIANT *Cursor,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual /* [hidden][helpstringcontext] */ HRESULT STDMETHODCALLTYPE ReceiveCurrent_v1( 
            /* [optional][in] */ __RPC__in VARIANT *Transaction,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage **ppmsg) = 0;
        
        virtual /* [hidden][helpstringcontext] */ HRESULT STDMETHODCALLTYPE PeekNext_v1( 
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage **ppmsg) = 0;
        
        virtual /* [hidden][helpstringcontext] */ HRESULT STDMETHODCALLTYPE PeekCurrent_v1( 
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage **ppmsg) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Receive( 
            /* [optional][in] */ __RPC__in VARIANT *Transaction,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage3 **ppmsg) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Peek( 
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage3 **ppmsg) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE ReceiveCurrent( 
            /* [optional][in] */ __RPC__in VARIANT *Transaction,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage3 **ppmsg) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE PeekNext( 
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage3 **ppmsg) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE PeekCurrent( 
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage3 **ppmsg) = 0;
        
        virtual /* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE get_Properties( 
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppcolProperties) = 0;
        
        virtual /* [id][propget][helpstringcontext][hidden] */ HRESULT STDMETHODCALLTYPE get_Handle2( 
            /* [retval][out] */ __RPC__out VARIANT *pvarHandle) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE ReceiveByLookupId( 
            /* [in] */ VARIANT LookupId,
            /* [optional][in] */ __RPC__in VARIANT *Transaction,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage3 **ppmsg) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE ReceiveNextByLookupId( 
            /* [in] */ VARIANT LookupId,
            /* [optional][in] */ __RPC__in VARIANT *Transaction,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage3 **ppmsg) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE ReceivePreviousByLookupId( 
            /* [in] */ VARIANT LookupId,
            /* [optional][in] */ __RPC__in VARIANT *Transaction,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage3 **ppmsg) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE ReceiveFirstByLookupId( 
            /* [optional][in] */ __RPC__in VARIANT *Transaction,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage3 **ppmsg) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE ReceiveLastByLookupId( 
            /* [optional][in] */ __RPC__in VARIANT *Transaction,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage3 **ppmsg) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE PeekByLookupId( 
            /* [in] */ VARIANT LookupId,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage3 **ppmsg) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE PeekNextByLookupId( 
            /* [in] */ VARIANT LookupId,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage3 **ppmsg) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE PeekPreviousByLookupId( 
            /* [in] */ VARIANT LookupId,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage3 **ppmsg) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE PeekFirstByLookupId( 
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage3 **ppmsg) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE PeekLastByLookupId( 
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage3 **ppmsg) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Purge( void) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_IsOpen2( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pisOpen) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSMQQueue3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMSMQQueue3 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMSMQQueue3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMSMQQueue3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IMSMQQueue3 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IMSMQQueue3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IMSMQQueue3 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSMQQueue3 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Access )( 
            __RPC__in IMSMQQueue3 * This,
            /* [retval][out] */ __RPC__out long *plAccess);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_ShareMode )( 
            __RPC__in IMSMQQueue3 * This,
            /* [retval][out] */ __RPC__out long *plShareMode);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_QueueInfo )( 
            __RPC__in IMSMQQueue3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo3 **ppqinfo);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            __RPC__in IMSMQQueue3 * This,
            /* [retval][out] */ __RPC__out long *plHandle);
        
        /* [id][propget][helpstringcontext][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_IsOpen )( 
            __RPC__in IMSMQQueue3 * This,
            /* [retval][out] */ __RPC__out Boolean *pisOpen);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Close )( 
            __RPC__in IMSMQQueue3 * This);
        
        /* [hidden][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Receive_v1 )( 
            __RPC__in IMSMQQueue3 * This,
            /* [optional][in] */ __RPC__in VARIANT *Transaction,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage **ppmsg);
        
        /* [hidden][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Peek_v1 )( 
            __RPC__in IMSMQQueue3 * This,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage **ppmsg);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *EnableNotification )( 
            __RPC__in IMSMQQueue3 * This,
            /* [in] */ __RPC__in_opt IMSMQEvent3 *Event,
            /* [optional][in] */ __RPC__in VARIANT *Cursor,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            __RPC__in IMSMQQueue3 * This);
        
        /* [hidden][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *ReceiveCurrent_v1 )( 
            __RPC__in IMSMQQueue3 * This,
            /* [optional][in] */ __RPC__in VARIANT *Transaction,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage **ppmsg);
        
        /* [hidden][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *PeekNext_v1 )( 
            __RPC__in IMSMQQueue3 * This,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage **ppmsg);
        
        /* [hidden][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *PeekCurrent_v1 )( 
            __RPC__in IMSMQQueue3 * This,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage **ppmsg);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Receive )( 
            __RPC__in IMSMQQueue3 * This,
            /* [optional][in] */ __RPC__in VARIANT *Transaction,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage3 **ppmsg);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Peek )( 
            __RPC__in IMSMQQueue3 * This,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage3 **ppmsg);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *ReceiveCurrent )( 
            __RPC__in IMSMQQueue3 * This,
            /* [optional][in] */ __RPC__in VARIANT *Transaction,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage3 **ppmsg);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *PeekNext )( 
            __RPC__in IMSMQQueue3 * This,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage3 **ppmsg);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *PeekCurrent )( 
            __RPC__in IMSMQQueue3 * This,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage3 **ppmsg);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            __RPC__in IMSMQQueue3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppcolProperties);
        
        /* [id][propget][helpstringcontext][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_Handle2 )( 
            __RPC__in IMSMQQueue3 * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarHandle);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *ReceiveByLookupId )( 
            __RPC__in IMSMQQueue3 * This,
            /* [in] */ VARIANT LookupId,
            /* [optional][in] */ __RPC__in VARIANT *Transaction,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage3 **ppmsg);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *ReceiveNextByLookupId )( 
            __RPC__in IMSMQQueue3 * This,
            /* [in] */ VARIANT LookupId,
            /* [optional][in] */ __RPC__in VARIANT *Transaction,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage3 **ppmsg);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *ReceivePreviousByLookupId )( 
            __RPC__in IMSMQQueue3 * This,
            /* [in] */ VARIANT LookupId,
            /* [optional][in] */ __RPC__in VARIANT *Transaction,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage3 **ppmsg);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *ReceiveFirstByLookupId )( 
            __RPC__in IMSMQQueue3 * This,
            /* [optional][in] */ __RPC__in VARIANT *Transaction,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage3 **ppmsg);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *ReceiveLastByLookupId )( 
            __RPC__in IMSMQQueue3 * This,
            /* [optional][in] */ __RPC__in VARIANT *Transaction,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage3 **ppmsg);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *PeekByLookupId )( 
            __RPC__in IMSMQQueue3 * This,
            /* [in] */ VARIANT LookupId,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage3 **ppmsg);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *PeekNextByLookupId )( 
            __RPC__in IMSMQQueue3 * This,
            /* [in] */ VARIANT LookupId,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage3 **ppmsg);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *PeekPreviousByLookupId )( 
            __RPC__in IMSMQQueue3 * This,
            /* [in] */ VARIANT LookupId,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage3 **ppmsg);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *PeekFirstByLookupId )( 
            __RPC__in IMSMQQueue3 * This,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage3 **ppmsg);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *PeekLastByLookupId )( 
            __RPC__in IMSMQQueue3 * This,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage3 **ppmsg);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Purge )( 
            __RPC__in IMSMQQueue3 * This);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_IsOpen2 )( 
            __RPC__in IMSMQQueue3 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pisOpen);
        
        END_INTERFACE
    } IMSMQQueue3Vtbl;

    interface IMSMQQueue3
    {
        CONST_VTBL struct IMSMQQueue3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSMQQueue3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSMQQueue3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSMQQueue3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSMQQueue3_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSMQQueue3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSMQQueue3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSMQQueue3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSMQQueue3_get_Access(This,plAccess)	\
    ( (This)->lpVtbl -> get_Access(This,plAccess) ) 

#define IMSMQQueue3_get_ShareMode(This,plShareMode)	\
    ( (This)->lpVtbl -> get_ShareMode(This,plShareMode) ) 

#define IMSMQQueue3_get_QueueInfo(This,ppqinfo)	\
    ( (This)->lpVtbl -> get_QueueInfo(This,ppqinfo) ) 

#define IMSMQQueue3_get_Handle(This,plHandle)	\
    ( (This)->lpVtbl -> get_Handle(This,plHandle) ) 

#define IMSMQQueue3_get_IsOpen(This,pisOpen)	\
    ( (This)->lpVtbl -> get_IsOpen(This,pisOpen) ) 

#define IMSMQQueue3_Close(This)	\
    ( (This)->lpVtbl -> Close(This) ) 

#define IMSMQQueue3_Receive_v1(This,Transaction,WantDestinationQueue,WantBody,ReceiveTimeout,ppmsg)	\
    ( (This)->lpVtbl -> Receive_v1(This,Transaction,WantDestinationQueue,WantBody,ReceiveTimeout,ppmsg) ) 

#define IMSMQQueue3_Peek_v1(This,WantDestinationQueue,WantBody,ReceiveTimeout,ppmsg)	\
    ( (This)->lpVtbl -> Peek_v1(This,WantDestinationQueue,WantBody,ReceiveTimeout,ppmsg) ) 

#define IMSMQQueue3_EnableNotification(This,Event,Cursor,ReceiveTimeout)	\
    ( (This)->lpVtbl -> EnableNotification(This,Event,Cursor,ReceiveTimeout) ) 

#define IMSMQQueue3_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define IMSMQQueue3_ReceiveCurrent_v1(This,Transaction,WantDestinationQueue,WantBody,ReceiveTimeout,ppmsg)	\
    ( (This)->lpVtbl -> ReceiveCurrent_v1(This,Transaction,WantDestinationQueue,WantBody,ReceiveTimeout,ppmsg) ) 

#define IMSMQQueue3_PeekNext_v1(This,WantDestinationQueue,WantBody,ReceiveTimeout,ppmsg)	\
    ( (This)->lpVtbl -> PeekNext_v1(This,WantDestinationQueue,WantBody,ReceiveTimeout,ppmsg) ) 

#define IMSMQQueue3_PeekCurrent_v1(This,WantDestinationQueue,WantBody,ReceiveTimeout,ppmsg)	\
    ( (This)->lpVtbl -> PeekCurrent_v1(This,WantDestinationQueue,WantBody,ReceiveTimeout,ppmsg) ) 

#define IMSMQQueue3_Receive(This,Transaction,WantDestinationQueue,WantBody,ReceiveTimeout,WantConnectorType,ppmsg)	\
    ( (This)->lpVtbl -> Receive(This,Transaction,WantDestinationQueue,WantBody,ReceiveTimeout,WantConnectorType,ppmsg) ) 

#define IMSMQQueue3_Peek(This,WantDestinationQueue,WantBody,ReceiveTimeout,WantConnectorType,ppmsg)	\
    ( (This)->lpVtbl -> Peek(This,WantDestinationQueue,WantBody,ReceiveTimeout,WantConnectorType,ppmsg) ) 

#define IMSMQQueue3_ReceiveCurrent(This,Transaction,WantDestinationQueue,WantBody,ReceiveTimeout,WantConnectorType,ppmsg)	\
    ( (This)->lpVtbl -> ReceiveCurrent(This,Transaction,WantDestinationQueue,WantBody,ReceiveTimeout,WantConnectorType,ppmsg) ) 

#define IMSMQQueue3_PeekNext(This,WantDestinationQueue,WantBody,ReceiveTimeout,WantConnectorType,ppmsg)	\
    ( (This)->lpVtbl -> PeekNext(This,WantDestinationQueue,WantBody,ReceiveTimeout,WantConnectorType,ppmsg) ) 

#define IMSMQQueue3_PeekCurrent(This,WantDestinationQueue,WantBody,ReceiveTimeout,WantConnectorType,ppmsg)	\
    ( (This)->lpVtbl -> PeekCurrent(This,WantDestinationQueue,WantBody,ReceiveTimeout,WantConnectorType,ppmsg) ) 

#define IMSMQQueue3_get_Properties(This,ppcolProperties)	\
    ( (This)->lpVtbl -> get_Properties(This,ppcolProperties) ) 

#define IMSMQQueue3_get_Handle2(This,pvarHandle)	\
    ( (This)->lpVtbl -> get_Handle2(This,pvarHandle) ) 

#define IMSMQQueue3_ReceiveByLookupId(This,LookupId,Transaction,WantDestinationQueue,WantBody,WantConnectorType,ppmsg)	\
    ( (This)->lpVtbl -> ReceiveByLookupId(This,LookupId,Transaction,WantDestinationQueue,WantBody,WantConnectorType,ppmsg) ) 

#define IMSMQQueue3_ReceiveNextByLookupId(This,LookupId,Transaction,WantDestinationQueue,WantBody,WantConnectorType,ppmsg)	\
    ( (This)->lpVtbl -> ReceiveNextByLookupId(This,LookupId,Transaction,WantDestinationQueue,WantBody,WantConnectorType,ppmsg) ) 

#define IMSMQQueue3_ReceivePreviousByLookupId(This,LookupId,Transaction,WantDestinationQueue,WantBody,WantConnectorType,ppmsg)	\
    ( (This)->lpVtbl -> ReceivePreviousByLookupId(This,LookupId,Transaction,WantDestinationQueue,WantBody,WantConnectorType,ppmsg) ) 

#define IMSMQQueue3_ReceiveFirstByLookupId(This,Transaction,WantDestinationQueue,WantBody,WantConnectorType,ppmsg)	\
    ( (This)->lpVtbl -> ReceiveFirstByLookupId(This,Transaction,WantDestinationQueue,WantBody,WantConnectorType,ppmsg) ) 

#define IMSMQQueue3_ReceiveLastByLookupId(This,Transaction,WantDestinationQueue,WantBody,WantConnectorType,ppmsg)	\
    ( (This)->lpVtbl -> ReceiveLastByLookupId(This,Transaction,WantDestinationQueue,WantBody,WantConnectorType,ppmsg) ) 

#define IMSMQQueue3_PeekByLookupId(This,LookupId,WantDestinationQueue,WantBody,WantConnectorType,ppmsg)	\
    ( (This)->lpVtbl -> PeekByLookupId(This,LookupId,WantDestinationQueue,WantBody,WantConnectorType,ppmsg) ) 

#define IMSMQQueue3_PeekNextByLookupId(This,LookupId,WantDestinationQueue,WantBody,WantConnectorType,ppmsg)	\
    ( (This)->lpVtbl -> PeekNextByLookupId(This,LookupId,WantDestinationQueue,WantBody,WantConnectorType,ppmsg) ) 

#define IMSMQQueue3_PeekPreviousByLookupId(This,LookupId,WantDestinationQueue,WantBody,WantConnectorType,ppmsg)	\
    ( (This)->lpVtbl -> PeekPreviousByLookupId(This,LookupId,WantDestinationQueue,WantBody,WantConnectorType,ppmsg) ) 

#define IMSMQQueue3_PeekFirstByLookupId(This,WantDestinationQueue,WantBody,WantConnectorType,ppmsg)	\
    ( (This)->lpVtbl -> PeekFirstByLookupId(This,WantDestinationQueue,WantBody,WantConnectorType,ppmsg) ) 

#define IMSMQQueue3_PeekLastByLookupId(This,WantDestinationQueue,WantBody,WantConnectorType,ppmsg)	\
    ( (This)->lpVtbl -> PeekLastByLookupId(This,WantDestinationQueue,WantBody,WantConnectorType,ppmsg) ) 

#define IMSMQQueue3_Purge(This)	\
    ( (This)->lpVtbl -> Purge(This) ) 

#define IMSMQQueue3_get_IsOpen2(This,pisOpen)	\
    ( (This)->lpVtbl -> get_IsOpen2(This,pisOpen) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSMQQueue3_INTERFACE_DEFINED__ */


#ifndef __IMSMQQueue4_INTERFACE_DEFINED__
#define __IMSMQQueue4_INTERFACE_DEFINED__

/* interface IMSMQQueue4 */
/* [object][dual][hidden][helpstringcontext][uuid] */ 


EXTERN_C const IID IID_IMSMQQueue4;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("eba96b20-2168-11d3-898c-00e02c074f6b")
    IMSMQQueue4 : public IDispatch
    {
    public:
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Access( 
            /* [retval][out] */ __RPC__out long *plAccess) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_ShareMode( 
            /* [retval][out] */ __RPC__out long *plShareMode) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_QueueInfo( 
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo4 **ppqinfo) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Handle( 
            /* [retval][out] */ __RPC__out long *plHandle) = 0;
        
        virtual /* [id][propget][helpstringcontext][hidden] */ HRESULT STDMETHODCALLTYPE get_IsOpen( 
            /* [retval][out] */ __RPC__out Boolean *pisOpen) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Close( void) = 0;
        
        virtual /* [hidden][helpstringcontext] */ HRESULT STDMETHODCALLTYPE Receive_v1( 
            /* [optional][in] */ __RPC__in VARIANT *Transaction,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage **ppmsg) = 0;
        
        virtual /* [hidden][helpstringcontext] */ HRESULT STDMETHODCALLTYPE Peek_v1( 
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage **ppmsg) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE EnableNotification( 
            /* [in] */ __RPC__in_opt IMSMQEvent3 *Event,
            /* [optional][in] */ __RPC__in VARIANT *Cursor,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual /* [hidden][helpstringcontext] */ HRESULT STDMETHODCALLTYPE ReceiveCurrent_v1( 
            /* [optional][in] */ __RPC__in VARIANT *Transaction,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage **ppmsg) = 0;
        
        virtual /* [hidden][helpstringcontext] */ HRESULT STDMETHODCALLTYPE PeekNext_v1( 
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage **ppmsg) = 0;
        
        virtual /* [hidden][helpstringcontext] */ HRESULT STDMETHODCALLTYPE PeekCurrent_v1( 
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage **ppmsg) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Receive( 
            /* [optional][in] */ __RPC__in VARIANT *Transaction,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage4 **ppmsg) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Peek( 
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage4 **ppmsg) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE ReceiveCurrent( 
            /* [optional][in] */ __RPC__in VARIANT *Transaction,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage4 **ppmsg) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE PeekNext( 
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage4 **ppmsg) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE PeekCurrent( 
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage4 **ppmsg) = 0;
        
        virtual /* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE get_Properties( 
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppcolProperties) = 0;
        
        virtual /* [id][propget][helpstringcontext][hidden] */ HRESULT STDMETHODCALLTYPE get_Handle2( 
            /* [retval][out] */ __RPC__out VARIANT *pvarHandle) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE ReceiveByLookupId( 
            /* [in] */ VARIANT LookupId,
            /* [optional][in] */ __RPC__in VARIANT *Transaction,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage4 **ppmsg) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE ReceiveNextByLookupId( 
            /* [in] */ VARIANT LookupId,
            /* [optional][in] */ __RPC__in VARIANT *Transaction,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage4 **ppmsg) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE ReceivePreviousByLookupId( 
            /* [in] */ VARIANT LookupId,
            /* [optional][in] */ __RPC__in VARIANT *Transaction,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage4 **ppmsg) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE ReceiveFirstByLookupId( 
            /* [optional][in] */ __RPC__in VARIANT *Transaction,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage4 **ppmsg) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE ReceiveLastByLookupId( 
            /* [optional][in] */ __RPC__in VARIANT *Transaction,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage4 **ppmsg) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE PeekByLookupId( 
            /* [in] */ VARIANT LookupId,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage4 **ppmsg) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE PeekNextByLookupId( 
            /* [in] */ VARIANT LookupId,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage4 **ppmsg) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE PeekPreviousByLookupId( 
            /* [in] */ VARIANT LookupId,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage4 **ppmsg) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE PeekFirstByLookupId( 
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage4 **ppmsg) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE PeekLastByLookupId( 
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage4 **ppmsg) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Purge( void) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_IsOpen2( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pisOpen) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE ReceiveByLookupIdAllowPeek( 
            /* [in] */ VARIANT LookupId,
            /* [optional][in] */ __RPC__in VARIANT *Transaction,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage4 **ppmsg) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSMQQueue4Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMSMQQueue4 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMSMQQueue4 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMSMQQueue4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IMSMQQueue4 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IMSMQQueue4 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IMSMQQueue4 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSMQQueue4 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Access )( 
            __RPC__in IMSMQQueue4 * This,
            /* [retval][out] */ __RPC__out long *plAccess);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_ShareMode )( 
            __RPC__in IMSMQQueue4 * This,
            /* [retval][out] */ __RPC__out long *plShareMode);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_QueueInfo )( 
            __RPC__in IMSMQQueue4 * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo4 **ppqinfo);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            __RPC__in IMSMQQueue4 * This,
            /* [retval][out] */ __RPC__out long *plHandle);
        
        /* [id][propget][helpstringcontext][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_IsOpen )( 
            __RPC__in IMSMQQueue4 * This,
            /* [retval][out] */ __RPC__out Boolean *pisOpen);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Close )( 
            __RPC__in IMSMQQueue4 * This);
        
        /* [hidden][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Receive_v1 )( 
            __RPC__in IMSMQQueue4 * This,
            /* [optional][in] */ __RPC__in VARIANT *Transaction,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage **ppmsg);
        
        /* [hidden][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Peek_v1 )( 
            __RPC__in IMSMQQueue4 * This,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage **ppmsg);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *EnableNotification )( 
            __RPC__in IMSMQQueue4 * This,
            /* [in] */ __RPC__in_opt IMSMQEvent3 *Event,
            /* [optional][in] */ __RPC__in VARIANT *Cursor,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            __RPC__in IMSMQQueue4 * This);
        
        /* [hidden][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *ReceiveCurrent_v1 )( 
            __RPC__in IMSMQQueue4 * This,
            /* [optional][in] */ __RPC__in VARIANT *Transaction,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage **ppmsg);
        
        /* [hidden][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *PeekNext_v1 )( 
            __RPC__in IMSMQQueue4 * This,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage **ppmsg);
        
        /* [hidden][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *PeekCurrent_v1 )( 
            __RPC__in IMSMQQueue4 * This,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage **ppmsg);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Receive )( 
            __RPC__in IMSMQQueue4 * This,
            /* [optional][in] */ __RPC__in VARIANT *Transaction,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage4 **ppmsg);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Peek )( 
            __RPC__in IMSMQQueue4 * This,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage4 **ppmsg);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *ReceiveCurrent )( 
            __RPC__in IMSMQQueue4 * This,
            /* [optional][in] */ __RPC__in VARIANT *Transaction,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage4 **ppmsg);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *PeekNext )( 
            __RPC__in IMSMQQueue4 * This,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage4 **ppmsg);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *PeekCurrent )( 
            __RPC__in IMSMQQueue4 * This,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *ReceiveTimeout,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage4 **ppmsg);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            __RPC__in IMSMQQueue4 * This,
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppcolProperties);
        
        /* [id][propget][helpstringcontext][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_Handle2 )( 
            __RPC__in IMSMQQueue4 * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarHandle);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *ReceiveByLookupId )( 
            __RPC__in IMSMQQueue4 * This,
            /* [in] */ VARIANT LookupId,
            /* [optional][in] */ __RPC__in VARIANT *Transaction,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage4 **ppmsg);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *ReceiveNextByLookupId )( 
            __RPC__in IMSMQQueue4 * This,
            /* [in] */ VARIANT LookupId,
            /* [optional][in] */ __RPC__in VARIANT *Transaction,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage4 **ppmsg);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *ReceivePreviousByLookupId )( 
            __RPC__in IMSMQQueue4 * This,
            /* [in] */ VARIANT LookupId,
            /* [optional][in] */ __RPC__in VARIANT *Transaction,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage4 **ppmsg);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *ReceiveFirstByLookupId )( 
            __RPC__in IMSMQQueue4 * This,
            /* [optional][in] */ __RPC__in VARIANT *Transaction,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage4 **ppmsg);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *ReceiveLastByLookupId )( 
            __RPC__in IMSMQQueue4 * This,
            /* [optional][in] */ __RPC__in VARIANT *Transaction,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage4 **ppmsg);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *PeekByLookupId )( 
            __RPC__in IMSMQQueue4 * This,
            /* [in] */ VARIANT LookupId,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage4 **ppmsg);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *PeekNextByLookupId )( 
            __RPC__in IMSMQQueue4 * This,
            /* [in] */ VARIANT LookupId,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage4 **ppmsg);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *PeekPreviousByLookupId )( 
            __RPC__in IMSMQQueue4 * This,
            /* [in] */ VARIANT LookupId,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage4 **ppmsg);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *PeekFirstByLookupId )( 
            __RPC__in IMSMQQueue4 * This,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage4 **ppmsg);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *PeekLastByLookupId )( 
            __RPC__in IMSMQQueue4 * This,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage4 **ppmsg);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Purge )( 
            __RPC__in IMSMQQueue4 * This);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_IsOpen2 )( 
            __RPC__in IMSMQQueue4 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pisOpen);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *ReceiveByLookupIdAllowPeek )( 
            __RPC__in IMSMQQueue4 * This,
            /* [in] */ VARIANT LookupId,
            /* [optional][in] */ __RPC__in VARIANT *Transaction,
            /* [optional][in] */ __RPC__in VARIANT *WantDestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *WantBody,
            /* [optional][in] */ __RPC__in VARIANT *WantConnectorType,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQMessage4 **ppmsg);
        
        END_INTERFACE
    } IMSMQQueue4Vtbl;

    interface IMSMQQueue4
    {
        CONST_VTBL struct IMSMQQueue4Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSMQQueue4_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSMQQueue4_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSMQQueue4_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSMQQueue4_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSMQQueue4_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSMQQueue4_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSMQQueue4_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSMQQueue4_get_Access(This,plAccess)	\
    ( (This)->lpVtbl -> get_Access(This,plAccess) ) 

#define IMSMQQueue4_get_ShareMode(This,plShareMode)	\
    ( (This)->lpVtbl -> get_ShareMode(This,plShareMode) ) 

#define IMSMQQueue4_get_QueueInfo(This,ppqinfo)	\
    ( (This)->lpVtbl -> get_QueueInfo(This,ppqinfo) ) 

#define IMSMQQueue4_get_Handle(This,plHandle)	\
    ( (This)->lpVtbl -> get_Handle(This,plHandle) ) 

#define IMSMQQueue4_get_IsOpen(This,pisOpen)	\
    ( (This)->lpVtbl -> get_IsOpen(This,pisOpen) ) 

#define IMSMQQueue4_Close(This)	\
    ( (This)->lpVtbl -> Close(This) ) 

#define IMSMQQueue4_Receive_v1(This,Transaction,WantDestinationQueue,WantBody,ReceiveTimeout,ppmsg)	\
    ( (This)->lpVtbl -> Receive_v1(This,Transaction,WantDestinationQueue,WantBody,ReceiveTimeout,ppmsg) ) 

#define IMSMQQueue4_Peek_v1(This,WantDestinationQueue,WantBody,ReceiveTimeout,ppmsg)	\
    ( (This)->lpVtbl -> Peek_v1(This,WantDestinationQueue,WantBody,ReceiveTimeout,ppmsg) ) 

#define IMSMQQueue4_EnableNotification(This,Event,Cursor,ReceiveTimeout)	\
    ( (This)->lpVtbl -> EnableNotification(This,Event,Cursor,ReceiveTimeout) ) 

#define IMSMQQueue4_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define IMSMQQueue4_ReceiveCurrent_v1(This,Transaction,WantDestinationQueue,WantBody,ReceiveTimeout,ppmsg)	\
    ( (This)->lpVtbl -> ReceiveCurrent_v1(This,Transaction,WantDestinationQueue,WantBody,ReceiveTimeout,ppmsg) ) 

#define IMSMQQueue4_PeekNext_v1(This,WantDestinationQueue,WantBody,ReceiveTimeout,ppmsg)	\
    ( (This)->lpVtbl -> PeekNext_v1(This,WantDestinationQueue,WantBody,ReceiveTimeout,ppmsg) ) 

#define IMSMQQueue4_PeekCurrent_v1(This,WantDestinationQueue,WantBody,ReceiveTimeout,ppmsg)	\
    ( (This)->lpVtbl -> PeekCurrent_v1(This,WantDestinationQueue,WantBody,ReceiveTimeout,ppmsg) ) 

#define IMSMQQueue4_Receive(This,Transaction,WantDestinationQueue,WantBody,ReceiveTimeout,WantConnectorType,ppmsg)	\
    ( (This)->lpVtbl -> Receive(This,Transaction,WantDestinationQueue,WantBody,ReceiveTimeout,WantConnectorType,ppmsg) ) 

#define IMSMQQueue4_Peek(This,WantDestinationQueue,WantBody,ReceiveTimeout,WantConnectorType,ppmsg)	\
    ( (This)->lpVtbl -> Peek(This,WantDestinationQueue,WantBody,ReceiveTimeout,WantConnectorType,ppmsg) ) 

#define IMSMQQueue4_ReceiveCurrent(This,Transaction,WantDestinationQueue,WantBody,ReceiveTimeout,WantConnectorType,ppmsg)	\
    ( (This)->lpVtbl -> ReceiveCurrent(This,Transaction,WantDestinationQueue,WantBody,ReceiveTimeout,WantConnectorType,ppmsg) ) 

#define IMSMQQueue4_PeekNext(This,WantDestinationQueue,WantBody,ReceiveTimeout,WantConnectorType,ppmsg)	\
    ( (This)->lpVtbl -> PeekNext(This,WantDestinationQueue,WantBody,ReceiveTimeout,WantConnectorType,ppmsg) ) 

#define IMSMQQueue4_PeekCurrent(This,WantDestinationQueue,WantBody,ReceiveTimeout,WantConnectorType,ppmsg)	\
    ( (This)->lpVtbl -> PeekCurrent(This,WantDestinationQueue,WantBody,ReceiveTimeout,WantConnectorType,ppmsg) ) 

#define IMSMQQueue4_get_Properties(This,ppcolProperties)	\
    ( (This)->lpVtbl -> get_Properties(This,ppcolProperties) ) 

#define IMSMQQueue4_get_Handle2(This,pvarHandle)	\
    ( (This)->lpVtbl -> get_Handle2(This,pvarHandle) ) 

#define IMSMQQueue4_ReceiveByLookupId(This,LookupId,Transaction,WantDestinationQueue,WantBody,WantConnectorType,ppmsg)	\
    ( (This)->lpVtbl -> ReceiveByLookupId(This,LookupId,Transaction,WantDestinationQueue,WantBody,WantConnectorType,ppmsg) ) 

#define IMSMQQueue4_ReceiveNextByLookupId(This,LookupId,Transaction,WantDestinationQueue,WantBody,WantConnectorType,ppmsg)	\
    ( (This)->lpVtbl -> ReceiveNextByLookupId(This,LookupId,Transaction,WantDestinationQueue,WantBody,WantConnectorType,ppmsg) ) 

#define IMSMQQueue4_ReceivePreviousByLookupId(This,LookupId,Transaction,WantDestinationQueue,WantBody,WantConnectorType,ppmsg)	\
    ( (This)->lpVtbl -> ReceivePreviousByLookupId(This,LookupId,Transaction,WantDestinationQueue,WantBody,WantConnectorType,ppmsg) ) 

#define IMSMQQueue4_ReceiveFirstByLookupId(This,Transaction,WantDestinationQueue,WantBody,WantConnectorType,ppmsg)	\
    ( (This)->lpVtbl -> ReceiveFirstByLookupId(This,Transaction,WantDestinationQueue,WantBody,WantConnectorType,ppmsg) ) 

#define IMSMQQueue4_ReceiveLastByLookupId(This,Transaction,WantDestinationQueue,WantBody,WantConnectorType,ppmsg)	\
    ( (This)->lpVtbl -> ReceiveLastByLookupId(This,Transaction,WantDestinationQueue,WantBody,WantConnectorType,ppmsg) ) 

#define IMSMQQueue4_PeekByLookupId(This,LookupId,WantDestinationQueue,WantBody,WantConnectorType,ppmsg)	\
    ( (This)->lpVtbl -> PeekByLookupId(This,LookupId,WantDestinationQueue,WantBody,WantConnectorType,ppmsg) ) 

#define IMSMQQueue4_PeekNextByLookupId(This,LookupId,WantDestinationQueue,WantBody,WantConnectorType,ppmsg)	\
    ( (This)->lpVtbl -> PeekNextByLookupId(This,LookupId,WantDestinationQueue,WantBody,WantConnectorType,ppmsg) ) 

#define IMSMQQueue4_PeekPreviousByLookupId(This,LookupId,WantDestinationQueue,WantBody,WantConnectorType,ppmsg)	\
    ( (This)->lpVtbl -> PeekPreviousByLookupId(This,LookupId,WantDestinationQueue,WantBody,WantConnectorType,ppmsg) ) 

#define IMSMQQueue4_PeekFirstByLookupId(This,WantDestinationQueue,WantBody,WantConnectorType,ppmsg)	\
    ( (This)->lpVtbl -> PeekFirstByLookupId(This,WantDestinationQueue,WantBody,WantConnectorType,ppmsg) ) 

#define IMSMQQueue4_PeekLastByLookupId(This,WantDestinationQueue,WantBody,WantConnectorType,ppmsg)	\
    ( (This)->lpVtbl -> PeekLastByLookupId(This,WantDestinationQueue,WantBody,WantConnectorType,ppmsg) ) 

#define IMSMQQueue4_Purge(This)	\
    ( (This)->lpVtbl -> Purge(This) ) 

#define IMSMQQueue4_get_IsOpen2(This,pisOpen)	\
    ( (This)->lpVtbl -> get_IsOpen2(This,pisOpen) ) 

#define IMSMQQueue4_ReceiveByLookupIdAllowPeek(This,LookupId,Transaction,WantDestinationQueue,WantBody,WantConnectorType,ppmsg)	\
    ( (This)->lpVtbl -> ReceiveByLookupIdAllowPeek(This,LookupId,Transaction,WantDestinationQueue,WantBody,WantConnectorType,ppmsg) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSMQQueue4_INTERFACE_DEFINED__ */


#ifndef __IMSMQMessage_INTERFACE_DEFINED__
#define __IMSMQMessage_INTERFACE_DEFINED__

/* interface IMSMQMessage */
/* [object][dual][hidden][helpstringcontext][uuid] */ 


EXTERN_C const IID IID_IMSMQMessage;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D7D6E074-DCCD-11d0-AA4B-0060970DEBAE")
    IMSMQMessage : public IDispatch
    {
    public:
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Class( 
            /* [retval][out] */ __RPC__out long *plClass) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_PrivLevel( 
            /* [retval][out] */ __RPC__out long *plPrivLevel) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_PrivLevel( 
            /* [in] */ long lPrivLevel) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_AuthLevel( 
            /* [retval][out] */ __RPC__out long *plAuthLevel) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_AuthLevel( 
            /* [in] */ long lAuthLevel) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_IsAuthenticated( 
            /* [retval][out] */ __RPC__out Boolean *pisAuthenticated) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Delivery( 
            /* [retval][out] */ __RPC__out long *plDelivery) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_Delivery( 
            /* [in] */ long lDelivery) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Trace( 
            /* [retval][out] */ __RPC__out long *plTrace) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_Trace( 
            /* [in] */ long lTrace) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Priority( 
            /* [retval][out] */ __RPC__out long *plPriority) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_Priority( 
            /* [in] */ long lPriority) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Journal( 
            /* [retval][out] */ __RPC__out long *plJournal) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_Journal( 
            /* [in] */ long lJournal) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_ResponseQueueInfo( 
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo **ppqinfoResponse) = 0;
        
        virtual /* [id][propputref][helpstringcontext] */ HRESULT STDMETHODCALLTYPE putref_ResponseQueueInfo( 
            /* [in] */ __RPC__in_opt IMSMQQueueInfo *pqinfoResponse) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_AppSpecific( 
            /* [retval][out] */ __RPC__out long *plAppSpecific) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_AppSpecific( 
            /* [in] */ long lAppSpecific) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_SourceMachineGuid( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrGuidSrcMachine) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_BodyLength( 
            /* [retval][out] */ __RPC__out long *pcbBody) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Body( 
            /* [retval][out] */ __RPC__out VARIANT *pvarBody) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_Body( 
            /* [in] */ VARIANT varBody) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_AdminQueueInfo( 
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo **ppqinfoAdmin) = 0;
        
        virtual /* [id][propputref][helpstringcontext] */ HRESULT STDMETHODCALLTYPE putref_AdminQueueInfo( 
            /* [in] */ __RPC__in_opt IMSMQQueueInfo *pqinfoAdmin) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Id( 
            /* [retval][out] */ __RPC__out VARIANT *pvarMsgId) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_CorrelationId( 
            /* [retval][out] */ __RPC__out VARIANT *pvarMsgId) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_CorrelationId( 
            /* [in] */ VARIANT varMsgId) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Ack( 
            /* [retval][out] */ __RPC__out long *plAck) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_Ack( 
            /* [in] */ long lAck) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Label( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrLabel) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_Label( 
            /* [in] */ __RPC__in BSTR bstrLabel) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_MaxTimeToReachQueue( 
            /* [retval][out] */ __RPC__out long *plMaxTimeToReachQueue) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_MaxTimeToReachQueue( 
            /* [in] */ long lMaxTimeToReachQueue) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_MaxTimeToReceive( 
            /* [retval][out] */ __RPC__out long *plMaxTimeToReceive) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_MaxTimeToReceive( 
            /* [in] */ long lMaxTimeToReceive) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_HashAlgorithm( 
            /* [retval][out] */ __RPC__out long *plHashAlg) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_HashAlgorithm( 
            /* [in] */ long lHashAlg) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_EncryptAlgorithm( 
            /* [retval][out] */ __RPC__out long *plEncryptAlg) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_EncryptAlgorithm( 
            /* [in] */ long lEncryptAlg) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_SentTime( 
            /* [retval][out] */ __RPC__out VARIANT *pvarSentTime) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_ArrivedTime( 
            /* [retval][out] */ __RPC__out VARIANT *plArrivedTime) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_DestinationQueueInfo( 
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo **ppqinfoDest) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_SenderCertificate( 
            /* [retval][out] */ __RPC__out VARIANT *pvarSenderCert) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_SenderCertificate( 
            /* [in] */ VARIANT varSenderCert) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_SenderId( 
            /* [retval][out] */ __RPC__out VARIANT *pvarSenderId) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_SenderIdType( 
            /* [retval][out] */ __RPC__out long *plSenderIdType) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_SenderIdType( 
            /* [in] */ long lSenderIdType) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Send( 
            /* [in] */ __RPC__in_opt IMSMQQueue *DestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *Transaction) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE AttachCurrentSecurityContext( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSMQMessageVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMSMQMessage * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMSMQMessage * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMSMQMessage * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IMSMQMessage * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IMSMQMessage * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IMSMQMessage * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSMQMessage * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Class )( 
            __RPC__in IMSMQMessage * This,
            /* [retval][out] */ __RPC__out long *plClass);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_PrivLevel )( 
            __RPC__in IMSMQMessage * This,
            /* [retval][out] */ __RPC__out long *plPrivLevel);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_PrivLevel )( 
            __RPC__in IMSMQMessage * This,
            /* [in] */ long lPrivLevel);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_AuthLevel )( 
            __RPC__in IMSMQMessage * This,
            /* [retval][out] */ __RPC__out long *plAuthLevel);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_AuthLevel )( 
            __RPC__in IMSMQMessage * This,
            /* [in] */ long lAuthLevel);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_IsAuthenticated )( 
            __RPC__in IMSMQMessage * This,
            /* [retval][out] */ __RPC__out Boolean *pisAuthenticated);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Delivery )( 
            __RPC__in IMSMQMessage * This,
            /* [retval][out] */ __RPC__out long *plDelivery);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_Delivery )( 
            __RPC__in IMSMQMessage * This,
            /* [in] */ long lDelivery);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Trace )( 
            __RPC__in IMSMQMessage * This,
            /* [retval][out] */ __RPC__out long *plTrace);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_Trace )( 
            __RPC__in IMSMQMessage * This,
            /* [in] */ long lTrace);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Priority )( 
            __RPC__in IMSMQMessage * This,
            /* [retval][out] */ __RPC__out long *plPriority);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_Priority )( 
            __RPC__in IMSMQMessage * This,
            /* [in] */ long lPriority);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Journal )( 
            __RPC__in IMSMQMessage * This,
            /* [retval][out] */ __RPC__out long *plJournal);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_Journal )( 
            __RPC__in IMSMQMessage * This,
            /* [in] */ long lJournal);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_ResponseQueueInfo )( 
            __RPC__in IMSMQMessage * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo **ppqinfoResponse);
        
        /* [id][propputref][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *putref_ResponseQueueInfo )( 
            __RPC__in IMSMQMessage * This,
            /* [in] */ __RPC__in_opt IMSMQQueueInfo *pqinfoResponse);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_AppSpecific )( 
            __RPC__in IMSMQMessage * This,
            /* [retval][out] */ __RPC__out long *plAppSpecific);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_AppSpecific )( 
            __RPC__in IMSMQMessage * This,
            /* [in] */ long lAppSpecific);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_SourceMachineGuid )( 
            __RPC__in IMSMQMessage * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrGuidSrcMachine);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_BodyLength )( 
            __RPC__in IMSMQMessage * This,
            /* [retval][out] */ __RPC__out long *pcbBody);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Body )( 
            __RPC__in IMSMQMessage * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarBody);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_Body )( 
            __RPC__in IMSMQMessage * This,
            /* [in] */ VARIANT varBody);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_AdminQueueInfo )( 
            __RPC__in IMSMQMessage * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo **ppqinfoAdmin);
        
        /* [id][propputref][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *putref_AdminQueueInfo )( 
            __RPC__in IMSMQMessage * This,
            /* [in] */ __RPC__in_opt IMSMQQueueInfo *pqinfoAdmin);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Id )( 
            __RPC__in IMSMQMessage * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarMsgId);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_CorrelationId )( 
            __RPC__in IMSMQMessage * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarMsgId);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_CorrelationId )( 
            __RPC__in IMSMQMessage * This,
            /* [in] */ VARIANT varMsgId);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Ack )( 
            __RPC__in IMSMQMessage * This,
            /* [retval][out] */ __RPC__out long *plAck);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_Ack )( 
            __RPC__in IMSMQMessage * This,
            /* [in] */ long lAck);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Label )( 
            __RPC__in IMSMQMessage * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrLabel);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_Label )( 
            __RPC__in IMSMQMessage * This,
            /* [in] */ __RPC__in BSTR bstrLabel);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_MaxTimeToReachQueue )( 
            __RPC__in IMSMQMessage * This,
            /* [retval][out] */ __RPC__out long *plMaxTimeToReachQueue);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_MaxTimeToReachQueue )( 
            __RPC__in IMSMQMessage * This,
            /* [in] */ long lMaxTimeToReachQueue);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_MaxTimeToReceive )( 
            __RPC__in IMSMQMessage * This,
            /* [retval][out] */ __RPC__out long *plMaxTimeToReceive);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_MaxTimeToReceive )( 
            __RPC__in IMSMQMessage * This,
            /* [in] */ long lMaxTimeToReceive);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_HashAlgorithm )( 
            __RPC__in IMSMQMessage * This,
            /* [retval][out] */ __RPC__out long *plHashAlg);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_HashAlgorithm )( 
            __RPC__in IMSMQMessage * This,
            /* [in] */ long lHashAlg);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_EncryptAlgorithm )( 
            __RPC__in IMSMQMessage * This,
            /* [retval][out] */ __RPC__out long *plEncryptAlg);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_EncryptAlgorithm )( 
            __RPC__in IMSMQMessage * This,
            /* [in] */ long lEncryptAlg);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_SentTime )( 
            __RPC__in IMSMQMessage * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarSentTime);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_ArrivedTime )( 
            __RPC__in IMSMQMessage * This,
            /* [retval][out] */ __RPC__out VARIANT *plArrivedTime);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_DestinationQueueInfo )( 
            __RPC__in IMSMQMessage * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo **ppqinfoDest);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_SenderCertificate )( 
            __RPC__in IMSMQMessage * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarSenderCert);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_SenderCertificate )( 
            __RPC__in IMSMQMessage * This,
            /* [in] */ VARIANT varSenderCert);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_SenderId )( 
            __RPC__in IMSMQMessage * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarSenderId);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_SenderIdType )( 
            __RPC__in IMSMQMessage * This,
            /* [retval][out] */ __RPC__out long *plSenderIdType);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_SenderIdType )( 
            __RPC__in IMSMQMessage * This,
            /* [in] */ long lSenderIdType);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Send )( 
            __RPC__in IMSMQMessage * This,
            /* [in] */ __RPC__in_opt IMSMQQueue *DestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *Transaction);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *AttachCurrentSecurityContext )( 
            __RPC__in IMSMQMessage * This);
        
        END_INTERFACE
    } IMSMQMessageVtbl;

    interface IMSMQMessage
    {
        CONST_VTBL struct IMSMQMessageVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSMQMessage_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSMQMessage_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSMQMessage_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSMQMessage_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSMQMessage_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSMQMessage_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSMQMessage_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSMQMessage_get_Class(This,plClass)	\
    ( (This)->lpVtbl -> get_Class(This,plClass) ) 

#define IMSMQMessage_get_PrivLevel(This,plPrivLevel)	\
    ( (This)->lpVtbl -> get_PrivLevel(This,plPrivLevel) ) 

#define IMSMQMessage_put_PrivLevel(This,lPrivLevel)	\
    ( (This)->lpVtbl -> put_PrivLevel(This,lPrivLevel) ) 

#define IMSMQMessage_get_AuthLevel(This,plAuthLevel)	\
    ( (This)->lpVtbl -> get_AuthLevel(This,plAuthLevel) ) 

#define IMSMQMessage_put_AuthLevel(This,lAuthLevel)	\
    ( (This)->lpVtbl -> put_AuthLevel(This,lAuthLevel) ) 

#define IMSMQMessage_get_IsAuthenticated(This,pisAuthenticated)	\
    ( (This)->lpVtbl -> get_IsAuthenticated(This,pisAuthenticated) ) 

#define IMSMQMessage_get_Delivery(This,plDelivery)	\
    ( (This)->lpVtbl -> get_Delivery(This,plDelivery) ) 

#define IMSMQMessage_put_Delivery(This,lDelivery)	\
    ( (This)->lpVtbl -> put_Delivery(This,lDelivery) ) 

#define IMSMQMessage_get_Trace(This,plTrace)	\
    ( (This)->lpVtbl -> get_Trace(This,plTrace) ) 

#define IMSMQMessage_put_Trace(This,lTrace)	\
    ( (This)->lpVtbl -> put_Trace(This,lTrace) ) 

#define IMSMQMessage_get_Priority(This,plPriority)	\
    ( (This)->lpVtbl -> get_Priority(This,plPriority) ) 

#define IMSMQMessage_put_Priority(This,lPriority)	\
    ( (This)->lpVtbl -> put_Priority(This,lPriority) ) 

#define IMSMQMessage_get_Journal(This,plJournal)	\
    ( (This)->lpVtbl -> get_Journal(This,plJournal) ) 

#define IMSMQMessage_put_Journal(This,lJournal)	\
    ( (This)->lpVtbl -> put_Journal(This,lJournal) ) 

#define IMSMQMessage_get_ResponseQueueInfo(This,ppqinfoResponse)	\
    ( (This)->lpVtbl -> get_ResponseQueueInfo(This,ppqinfoResponse) ) 

#define IMSMQMessage_putref_ResponseQueueInfo(This,pqinfoResponse)	\
    ( (This)->lpVtbl -> putref_ResponseQueueInfo(This,pqinfoResponse) ) 

#define IMSMQMessage_get_AppSpecific(This,plAppSpecific)	\
    ( (This)->lpVtbl -> get_AppSpecific(This,plAppSpecific) ) 

#define IMSMQMessage_put_AppSpecific(This,lAppSpecific)	\
    ( (This)->lpVtbl -> put_AppSpecific(This,lAppSpecific) ) 

#define IMSMQMessage_get_SourceMachineGuid(This,pbstrGuidSrcMachine)	\
    ( (This)->lpVtbl -> get_SourceMachineGuid(This,pbstrGuidSrcMachine) ) 

#define IMSMQMessage_get_BodyLength(This,pcbBody)	\
    ( (This)->lpVtbl -> get_BodyLength(This,pcbBody) ) 

#define IMSMQMessage_get_Body(This,pvarBody)	\
    ( (This)->lpVtbl -> get_Body(This,pvarBody) ) 

#define IMSMQMessage_put_Body(This,varBody)	\
    ( (This)->lpVtbl -> put_Body(This,varBody) ) 

#define IMSMQMessage_get_AdminQueueInfo(This,ppqinfoAdmin)	\
    ( (This)->lpVtbl -> get_AdminQueueInfo(This,ppqinfoAdmin) ) 

#define IMSMQMessage_putref_AdminQueueInfo(This,pqinfoAdmin)	\
    ( (This)->lpVtbl -> putref_AdminQueueInfo(This,pqinfoAdmin) ) 

#define IMSMQMessage_get_Id(This,pvarMsgId)	\
    ( (This)->lpVtbl -> get_Id(This,pvarMsgId) ) 

#define IMSMQMessage_get_CorrelationId(This,pvarMsgId)	\
    ( (This)->lpVtbl -> get_CorrelationId(This,pvarMsgId) ) 

#define IMSMQMessage_put_CorrelationId(This,varMsgId)	\
    ( (This)->lpVtbl -> put_CorrelationId(This,varMsgId) ) 

#define IMSMQMessage_get_Ack(This,plAck)	\
    ( (This)->lpVtbl -> get_Ack(This,plAck) ) 

#define IMSMQMessage_put_Ack(This,lAck)	\
    ( (This)->lpVtbl -> put_Ack(This,lAck) ) 

#define IMSMQMessage_get_Label(This,pbstrLabel)	\
    ( (This)->lpVtbl -> get_Label(This,pbstrLabel) ) 

#define IMSMQMessage_put_Label(This,bstrLabel)	\
    ( (This)->lpVtbl -> put_Label(This,bstrLabel) ) 

#define IMSMQMessage_get_MaxTimeToReachQueue(This,plMaxTimeToReachQueue)	\
    ( (This)->lpVtbl -> get_MaxTimeToReachQueue(This,plMaxTimeToReachQueue) ) 

#define IMSMQMessage_put_MaxTimeToReachQueue(This,lMaxTimeToReachQueue)	\
    ( (This)->lpVtbl -> put_MaxTimeToReachQueue(This,lMaxTimeToReachQueue) ) 

#define IMSMQMessage_get_MaxTimeToReceive(This,plMaxTimeToReceive)	\
    ( (This)->lpVtbl -> get_MaxTimeToReceive(This,plMaxTimeToReceive) ) 

#define IMSMQMessage_put_MaxTimeToReceive(This,lMaxTimeToReceive)	\
    ( (This)->lpVtbl -> put_MaxTimeToReceive(This,lMaxTimeToReceive) ) 

#define IMSMQMessage_get_HashAlgorithm(This,plHashAlg)	\
    ( (This)->lpVtbl -> get_HashAlgorithm(This,plHashAlg) ) 

#define IMSMQMessage_put_HashAlgorithm(This,lHashAlg)	\
    ( (This)->lpVtbl -> put_HashAlgorithm(This,lHashAlg) ) 

#define IMSMQMessage_get_EncryptAlgorithm(This,plEncryptAlg)	\
    ( (This)->lpVtbl -> get_EncryptAlgorithm(This,plEncryptAlg) ) 

#define IMSMQMessage_put_EncryptAlgorithm(This,lEncryptAlg)	\
    ( (This)->lpVtbl -> put_EncryptAlgorithm(This,lEncryptAlg) ) 

#define IMSMQMessage_get_SentTime(This,pvarSentTime)	\
    ( (This)->lpVtbl -> get_SentTime(This,pvarSentTime) ) 

#define IMSMQMessage_get_ArrivedTime(This,plArrivedTime)	\
    ( (This)->lpVtbl -> get_ArrivedTime(This,plArrivedTime) ) 

#define IMSMQMessage_get_DestinationQueueInfo(This,ppqinfoDest)	\
    ( (This)->lpVtbl -> get_DestinationQueueInfo(This,ppqinfoDest) ) 

#define IMSMQMessage_get_SenderCertificate(This,pvarSenderCert)	\
    ( (This)->lpVtbl -> get_SenderCertificate(This,pvarSenderCert) ) 

#define IMSMQMessage_put_SenderCertificate(This,varSenderCert)	\
    ( (This)->lpVtbl -> put_SenderCertificate(This,varSenderCert) ) 

#define IMSMQMessage_get_SenderId(This,pvarSenderId)	\
    ( (This)->lpVtbl -> get_SenderId(This,pvarSenderId) ) 

#define IMSMQMessage_get_SenderIdType(This,plSenderIdType)	\
    ( (This)->lpVtbl -> get_SenderIdType(This,plSenderIdType) ) 

#define IMSMQMessage_put_SenderIdType(This,lSenderIdType)	\
    ( (This)->lpVtbl -> put_SenderIdType(This,lSenderIdType) ) 

#define IMSMQMessage_Send(This,DestinationQueue,Transaction)	\
    ( (This)->lpVtbl -> Send(This,DestinationQueue,Transaction) ) 

#define IMSMQMessage_AttachCurrentSecurityContext(This)	\
    ( (This)->lpVtbl -> AttachCurrentSecurityContext(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSMQMessage_INTERFACE_DEFINED__ */


#ifndef __IMSMQQueueInfos_INTERFACE_DEFINED__
#define __IMSMQQueueInfos_INTERFACE_DEFINED__

/* interface IMSMQQueueInfos */
/* [object][dual][hidden][helpstringcontext][uuid] */ 


EXTERN_C const IID IID_IMSMQQueueInfos;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D7D6E07D-DCCD-11d0-AA4B-0060970DEBAE")
    IMSMQQueueInfos : public IDispatch
    {
    public:
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Next( 
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo **ppqinfoNext) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSMQQueueInfosVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMSMQQueueInfos * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMSMQQueueInfos * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMSMQQueueInfos * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IMSMQQueueInfos * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IMSMQQueueInfos * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IMSMQQueueInfos * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSMQQueueInfos * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            __RPC__in IMSMQQueueInfos * This);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Next )( 
            __RPC__in IMSMQQueueInfos * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo **ppqinfoNext);
        
        END_INTERFACE
    } IMSMQQueueInfosVtbl;

    interface IMSMQQueueInfos
    {
        CONST_VTBL struct IMSMQQueueInfosVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSMQQueueInfos_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSMQQueueInfos_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSMQQueueInfos_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSMQQueueInfos_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSMQQueueInfos_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSMQQueueInfos_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSMQQueueInfos_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSMQQueueInfos_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define IMSMQQueueInfos_Next(This,ppqinfoNext)	\
    ( (This)->lpVtbl -> Next(This,ppqinfoNext) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSMQQueueInfos_INTERFACE_DEFINED__ */


#ifndef __IMSMQQueueInfos2_INTERFACE_DEFINED__
#define __IMSMQQueueInfos2_INTERFACE_DEFINED__

/* interface IMSMQQueueInfos2 */
/* [object][dual][hidden][helpstringcontext][uuid] */ 


EXTERN_C const IID IID_IMSMQQueueInfos2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("eba96b0f-2168-11d3-898c-00e02c074f6b")
    IMSMQQueueInfos2 : public IDispatch
    {
    public:
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Next( 
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo2 **ppqinfoNext) = 0;
        
        virtual /* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE get_Properties( 
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppcolProperties) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSMQQueueInfos2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMSMQQueueInfos2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMSMQQueueInfos2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMSMQQueueInfos2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IMSMQQueueInfos2 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IMSMQQueueInfos2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IMSMQQueueInfos2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSMQQueueInfos2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            __RPC__in IMSMQQueueInfos2 * This);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Next )( 
            __RPC__in IMSMQQueueInfos2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo2 **ppqinfoNext);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            __RPC__in IMSMQQueueInfos2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppcolProperties);
        
        END_INTERFACE
    } IMSMQQueueInfos2Vtbl;

    interface IMSMQQueueInfos2
    {
        CONST_VTBL struct IMSMQQueueInfos2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSMQQueueInfos2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSMQQueueInfos2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSMQQueueInfos2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSMQQueueInfos2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSMQQueueInfos2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSMQQueueInfos2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSMQQueueInfos2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSMQQueueInfos2_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define IMSMQQueueInfos2_Next(This,ppqinfoNext)	\
    ( (This)->lpVtbl -> Next(This,ppqinfoNext) ) 

#define IMSMQQueueInfos2_get_Properties(This,ppcolProperties)	\
    ( (This)->lpVtbl -> get_Properties(This,ppcolProperties) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSMQQueueInfos2_INTERFACE_DEFINED__ */


#ifndef __IMSMQQueueInfos3_INTERFACE_DEFINED__
#define __IMSMQQueueInfos3_INTERFACE_DEFINED__

/* interface IMSMQQueueInfos3 */
/* [object][dual][hidden][helpstringcontext][uuid] */ 


EXTERN_C const IID IID_IMSMQQueueInfos3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("eba96b1e-2168-11d3-898c-00e02c074f6b")
    IMSMQQueueInfos3 : public IDispatch
    {
    public:
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Next( 
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo3 **ppqinfoNext) = 0;
        
        virtual /* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE get_Properties( 
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppcolProperties) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSMQQueueInfos3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMSMQQueueInfos3 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMSMQQueueInfos3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMSMQQueueInfos3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IMSMQQueueInfos3 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IMSMQQueueInfos3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IMSMQQueueInfos3 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSMQQueueInfos3 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            __RPC__in IMSMQQueueInfos3 * This);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Next )( 
            __RPC__in IMSMQQueueInfos3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo3 **ppqinfoNext);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            __RPC__in IMSMQQueueInfos3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppcolProperties);
        
        END_INTERFACE
    } IMSMQQueueInfos3Vtbl;

    interface IMSMQQueueInfos3
    {
        CONST_VTBL struct IMSMQQueueInfos3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSMQQueueInfos3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSMQQueueInfos3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSMQQueueInfos3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSMQQueueInfos3_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSMQQueueInfos3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSMQQueueInfos3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSMQQueueInfos3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSMQQueueInfos3_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define IMSMQQueueInfos3_Next(This,ppqinfoNext)	\
    ( (This)->lpVtbl -> Next(This,ppqinfoNext) ) 

#define IMSMQQueueInfos3_get_Properties(This,ppcolProperties)	\
    ( (This)->lpVtbl -> get_Properties(This,ppcolProperties) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSMQQueueInfos3_INTERFACE_DEFINED__ */


#ifndef __IMSMQQueueInfos4_INTERFACE_DEFINED__
#define __IMSMQQueueInfos4_INTERFACE_DEFINED__

/* interface IMSMQQueueInfos4 */
/* [object][dual][hidden][helpstringcontext][uuid] */ 


EXTERN_C const IID IID_IMSMQQueueInfos4;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("eba96b22-2168-11d3-898c-00e02c074f6b")
    IMSMQQueueInfos4 : public IDispatch
    {
    public:
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Next( 
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo4 **ppqinfoNext) = 0;
        
        virtual /* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE get_Properties( 
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppcolProperties) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSMQQueueInfos4Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMSMQQueueInfos4 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMSMQQueueInfos4 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMSMQQueueInfos4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IMSMQQueueInfos4 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IMSMQQueueInfos4 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IMSMQQueueInfos4 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSMQQueueInfos4 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Reset )( 
            __RPC__in IMSMQQueueInfos4 * This);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Next )( 
            __RPC__in IMSMQQueueInfos4 * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo4 **ppqinfoNext);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            __RPC__in IMSMQQueueInfos4 * This,
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppcolProperties);
        
        END_INTERFACE
    } IMSMQQueueInfos4Vtbl;

    interface IMSMQQueueInfos4
    {
        CONST_VTBL struct IMSMQQueueInfos4Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSMQQueueInfos4_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSMQQueueInfos4_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSMQQueueInfos4_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSMQQueueInfos4_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSMQQueueInfos4_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSMQQueueInfos4_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSMQQueueInfos4_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSMQQueueInfos4_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define IMSMQQueueInfos4_Next(This,ppqinfoNext)	\
    ( (This)->lpVtbl -> Next(This,ppqinfoNext) ) 

#define IMSMQQueueInfos4_get_Properties(This,ppcolProperties)	\
    ( (This)->lpVtbl -> get_Properties(This,ppcolProperties) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSMQQueueInfos4_INTERFACE_DEFINED__ */


#ifndef __IMSMQEvent_INTERFACE_DEFINED__
#define __IMSMQEvent_INTERFACE_DEFINED__

/* interface IMSMQEvent */
/* [object][dual][hidden][helpstringcontext][uuid] */ 


EXTERN_C const IID IID_IMSMQEvent;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D7D6E077-DCCD-11d0-AA4B-0060970DEBAE")
    IMSMQEvent : public IDispatch
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IMSMQEventVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMSMQEvent * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMSMQEvent * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMSMQEvent * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IMSMQEvent * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IMSMQEvent * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IMSMQEvent * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSMQEvent * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } IMSMQEventVtbl;

    interface IMSMQEvent
    {
        CONST_VTBL struct IMSMQEventVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSMQEvent_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSMQEvent_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSMQEvent_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSMQEvent_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSMQEvent_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSMQEvent_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSMQEvent_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSMQEvent_INTERFACE_DEFINED__ */


#ifndef __IMSMQEvent2_INTERFACE_DEFINED__
#define __IMSMQEvent2_INTERFACE_DEFINED__

/* interface IMSMQEvent2 */
/* [object][dual][hidden][helpstringcontext][uuid] */ 


EXTERN_C const IID IID_IMSMQEvent2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("eba96b12-2168-11d3-898c-00e02c074f6b")
    IMSMQEvent2 : public IMSMQEvent
    {
    public:
        virtual /* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE get_Properties( 
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppcolProperties) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSMQEvent2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMSMQEvent2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMSMQEvent2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMSMQEvent2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IMSMQEvent2 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IMSMQEvent2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IMSMQEvent2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSMQEvent2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            __RPC__in IMSMQEvent2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppcolProperties);
        
        END_INTERFACE
    } IMSMQEvent2Vtbl;

    interface IMSMQEvent2
    {
        CONST_VTBL struct IMSMQEvent2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSMQEvent2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSMQEvent2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSMQEvent2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSMQEvent2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSMQEvent2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSMQEvent2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSMQEvent2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 



#define IMSMQEvent2_get_Properties(This,ppcolProperties)	\
    ( (This)->lpVtbl -> get_Properties(This,ppcolProperties) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSMQEvent2_INTERFACE_DEFINED__ */


#ifndef __IMSMQEvent3_INTERFACE_DEFINED__
#define __IMSMQEvent3_INTERFACE_DEFINED__

/* interface IMSMQEvent3 */
/* [object][dual][hidden][helpstringcontext][uuid] */ 


EXTERN_C const IID IID_IMSMQEvent3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("eba96b1c-2168-11d3-898c-00e02c074f6b")
    IMSMQEvent3 : public IMSMQEvent2
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IMSMQEvent3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMSMQEvent3 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMSMQEvent3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMSMQEvent3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IMSMQEvent3 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IMSMQEvent3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IMSMQEvent3 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSMQEvent3 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            __RPC__in IMSMQEvent3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppcolProperties);
        
        END_INTERFACE
    } IMSMQEvent3Vtbl;

    interface IMSMQEvent3
    {
        CONST_VTBL struct IMSMQEvent3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSMQEvent3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSMQEvent3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSMQEvent3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSMQEvent3_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSMQEvent3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSMQEvent3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSMQEvent3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 



#define IMSMQEvent3_get_Properties(This,ppcolProperties)	\
    ( (This)->lpVtbl -> get_Properties(This,ppcolProperties) ) 


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSMQEvent3_INTERFACE_DEFINED__ */


#ifndef __IMSMQTransaction_INTERFACE_DEFINED__
#define __IMSMQTransaction_INTERFACE_DEFINED__

/* interface IMSMQTransaction */
/* [object][dual][hidden][helpstringcontext][uuid] */ 


EXTERN_C const IID IID_IMSMQTransaction;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D7D6E07F-DCCD-11d0-AA4B-0060970DEBAE")
    IMSMQTransaction : public IDispatch
    {
    public:
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Transaction( 
            /* [retval][out] */ __RPC__out long *plTransaction) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Commit( 
            /* [optional][in] */ __RPC__in VARIANT *fRetaining,
            /* [optional][in] */ __RPC__in VARIANT *grfTC,
            /* [optional][in] */ __RPC__in VARIANT *grfRM) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Abort( 
            /* [optional][in] */ __RPC__in VARIANT *fRetaining,
            /* [optional][in] */ __RPC__in VARIANT *fAsync) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSMQTransactionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMSMQTransaction * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMSMQTransaction * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMSMQTransaction * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IMSMQTransaction * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IMSMQTransaction * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IMSMQTransaction * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSMQTransaction * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Transaction )( 
            __RPC__in IMSMQTransaction * This,
            /* [retval][out] */ __RPC__out long *plTransaction);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Commit )( 
            __RPC__in IMSMQTransaction * This,
            /* [optional][in] */ __RPC__in VARIANT *fRetaining,
            /* [optional][in] */ __RPC__in VARIANT *grfTC,
            /* [optional][in] */ __RPC__in VARIANT *grfRM);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Abort )( 
            __RPC__in IMSMQTransaction * This,
            /* [optional][in] */ __RPC__in VARIANT *fRetaining,
            /* [optional][in] */ __RPC__in VARIANT *fAsync);
        
        END_INTERFACE
    } IMSMQTransactionVtbl;

    interface IMSMQTransaction
    {
        CONST_VTBL struct IMSMQTransactionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSMQTransaction_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSMQTransaction_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSMQTransaction_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSMQTransaction_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSMQTransaction_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSMQTransaction_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSMQTransaction_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSMQTransaction_get_Transaction(This,plTransaction)	\
    ( (This)->lpVtbl -> get_Transaction(This,plTransaction) ) 

#define IMSMQTransaction_Commit(This,fRetaining,grfTC,grfRM)	\
    ( (This)->lpVtbl -> Commit(This,fRetaining,grfTC,grfRM) ) 

#define IMSMQTransaction_Abort(This,fRetaining,fAsync)	\
    ( (This)->lpVtbl -> Abort(This,fRetaining,fAsync) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSMQTransaction_INTERFACE_DEFINED__ */


#ifndef __IMSMQCoordinatedTransactionDispenser_INTERFACE_DEFINED__
#define __IMSMQCoordinatedTransactionDispenser_INTERFACE_DEFINED__

/* interface IMSMQCoordinatedTransactionDispenser */
/* [object][dual][hidden][helpstringcontext][uuid] */ 


EXTERN_C const IID IID_IMSMQCoordinatedTransactionDispenser;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D7D6E081-DCCD-11d0-AA4B-0060970DEBAE")
    IMSMQCoordinatedTransactionDispenser : public IDispatch
    {
    public:
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE BeginTransaction( 
            /* [retval][out] */ __RPC__deref_out_opt IMSMQTransaction **ptransaction) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSMQCoordinatedTransactionDispenserVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMSMQCoordinatedTransactionDispenser * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMSMQCoordinatedTransactionDispenser * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMSMQCoordinatedTransactionDispenser * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IMSMQCoordinatedTransactionDispenser * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IMSMQCoordinatedTransactionDispenser * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IMSMQCoordinatedTransactionDispenser * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSMQCoordinatedTransactionDispenser * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *BeginTransaction )( 
            __RPC__in IMSMQCoordinatedTransactionDispenser * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQTransaction **ptransaction);
        
        END_INTERFACE
    } IMSMQCoordinatedTransactionDispenserVtbl;

    interface IMSMQCoordinatedTransactionDispenser
    {
        CONST_VTBL struct IMSMQCoordinatedTransactionDispenserVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSMQCoordinatedTransactionDispenser_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSMQCoordinatedTransactionDispenser_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSMQCoordinatedTransactionDispenser_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSMQCoordinatedTransactionDispenser_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSMQCoordinatedTransactionDispenser_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSMQCoordinatedTransactionDispenser_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSMQCoordinatedTransactionDispenser_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSMQCoordinatedTransactionDispenser_BeginTransaction(This,ptransaction)	\
    ( (This)->lpVtbl -> BeginTransaction(This,ptransaction) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSMQCoordinatedTransactionDispenser_INTERFACE_DEFINED__ */


#ifndef __IMSMQTransactionDispenser_INTERFACE_DEFINED__
#define __IMSMQTransactionDispenser_INTERFACE_DEFINED__

/* interface IMSMQTransactionDispenser */
/* [object][dual][hidden][helpstringcontext][uuid] */ 


EXTERN_C const IID IID_IMSMQTransactionDispenser;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D7D6E083-DCCD-11d0-AA4B-0060970DEBAE")
    IMSMQTransactionDispenser : public IDispatch
    {
    public:
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE BeginTransaction( 
            /* [retval][out] */ __RPC__deref_out_opt IMSMQTransaction **ptransaction) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSMQTransactionDispenserVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMSMQTransactionDispenser * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMSMQTransactionDispenser * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMSMQTransactionDispenser * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IMSMQTransactionDispenser * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IMSMQTransactionDispenser * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IMSMQTransactionDispenser * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSMQTransactionDispenser * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *BeginTransaction )( 
            __RPC__in IMSMQTransactionDispenser * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQTransaction **ptransaction);
        
        END_INTERFACE
    } IMSMQTransactionDispenserVtbl;

    interface IMSMQTransactionDispenser
    {
        CONST_VTBL struct IMSMQTransactionDispenserVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSMQTransactionDispenser_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSMQTransactionDispenser_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSMQTransactionDispenser_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSMQTransactionDispenser_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSMQTransactionDispenser_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSMQTransactionDispenser_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSMQTransactionDispenser_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSMQTransactionDispenser_BeginTransaction(This,ptransaction)	\
    ( (This)->lpVtbl -> BeginTransaction(This,ptransaction) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSMQTransactionDispenser_INTERFACE_DEFINED__ */


#ifndef __IMSMQQuery2_INTERFACE_DEFINED__
#define __IMSMQQuery2_INTERFACE_DEFINED__

/* interface IMSMQQuery2 */
/* [object][nonextensible][dual][hidden][helpstringcontext][uuid] */ 


EXTERN_C const IID IID_IMSMQQuery2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("eba96b0e-2168-11d3-898c-00e02c074f6b")
    IMSMQQuery2 : public IDispatch
    {
    public:
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE LookupQueue( 
            /* [optional][in] */ __RPC__in VARIANT *QueueGuid,
            /* [optional][in] */ __RPC__in VARIANT *ServiceTypeGuid,
            /* [optional][in] */ __RPC__in VARIANT *Label,
            /* [optional][in] */ __RPC__in VARIANT *CreateTime,
            /* [optional][in] */ __RPC__in VARIANT *ModifyTime,
            /* [optional][in] */ __RPC__in VARIANT *RelServiceType,
            /* [optional][in] */ __RPC__in VARIANT *RelLabel,
            /* [optional][in] */ __RPC__in VARIANT *RelCreateTime,
            /* [optional][in] */ __RPC__in VARIANT *RelModifyTime,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfos2 **ppqinfos) = 0;
        
        virtual /* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE get_Properties( 
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppcolProperties) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSMQQuery2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMSMQQuery2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMSMQQuery2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMSMQQuery2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IMSMQQuery2 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IMSMQQuery2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IMSMQQuery2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSMQQuery2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *LookupQueue )( 
            __RPC__in IMSMQQuery2 * This,
            /* [optional][in] */ __RPC__in VARIANT *QueueGuid,
            /* [optional][in] */ __RPC__in VARIANT *ServiceTypeGuid,
            /* [optional][in] */ __RPC__in VARIANT *Label,
            /* [optional][in] */ __RPC__in VARIANT *CreateTime,
            /* [optional][in] */ __RPC__in VARIANT *ModifyTime,
            /* [optional][in] */ __RPC__in VARIANT *RelServiceType,
            /* [optional][in] */ __RPC__in VARIANT *RelLabel,
            /* [optional][in] */ __RPC__in VARIANT *RelCreateTime,
            /* [optional][in] */ __RPC__in VARIANT *RelModifyTime,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfos2 **ppqinfos);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            __RPC__in IMSMQQuery2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppcolProperties);
        
        END_INTERFACE
    } IMSMQQuery2Vtbl;

    interface IMSMQQuery2
    {
        CONST_VTBL struct IMSMQQuery2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSMQQuery2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSMQQuery2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSMQQuery2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSMQQuery2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSMQQuery2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSMQQuery2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSMQQuery2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSMQQuery2_LookupQueue(This,QueueGuid,ServiceTypeGuid,Label,CreateTime,ModifyTime,RelServiceType,RelLabel,RelCreateTime,RelModifyTime,ppqinfos)	\
    ( (This)->lpVtbl -> LookupQueue(This,QueueGuid,ServiceTypeGuid,Label,CreateTime,ModifyTime,RelServiceType,RelLabel,RelCreateTime,RelModifyTime,ppqinfos) ) 

#define IMSMQQuery2_get_Properties(This,ppcolProperties)	\
    ( (This)->lpVtbl -> get_Properties(This,ppcolProperties) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSMQQuery2_INTERFACE_DEFINED__ */


#ifndef __IMSMQQuery3_INTERFACE_DEFINED__
#define __IMSMQQuery3_INTERFACE_DEFINED__

/* interface IMSMQQuery3 */
/* [object][nonextensible][dual][hidden][helpstringcontext][uuid] */ 


EXTERN_C const IID IID_IMSMQQuery3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("eba96b19-2168-11d3-898c-00e02c074f6b")
    IMSMQQuery3 : public IDispatch
    {
    public:
        virtual /* [hidden][helpstringcontext] */ HRESULT STDMETHODCALLTYPE LookupQueue_v2( 
            /* [optional][in] */ __RPC__in VARIANT *QueueGuid,
            /* [optional][in] */ __RPC__in VARIANT *ServiceTypeGuid,
            /* [optional][in] */ __RPC__in VARIANT *Label,
            /* [optional][in] */ __RPC__in VARIANT *CreateTime,
            /* [optional][in] */ __RPC__in VARIANT *ModifyTime,
            /* [optional][in] */ __RPC__in VARIANT *RelServiceType,
            /* [optional][in] */ __RPC__in VARIANT *RelLabel,
            /* [optional][in] */ __RPC__in VARIANT *RelCreateTime,
            /* [optional][in] */ __RPC__in VARIANT *RelModifyTime,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfos3 **ppqinfos) = 0;
        
        virtual /* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE get_Properties( 
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppcolProperties) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE LookupQueue( 
            /* [optional][in] */ __RPC__in VARIANT *QueueGuid,
            /* [optional][in] */ __RPC__in VARIANT *ServiceTypeGuid,
            /* [optional][in] */ __RPC__in VARIANT *Label,
            /* [optional][in] */ __RPC__in VARIANT *CreateTime,
            /* [optional][in] */ __RPC__in VARIANT *ModifyTime,
            /* [optional][in] */ __RPC__in VARIANT *RelServiceType,
            /* [optional][in] */ __RPC__in VARIANT *RelLabel,
            /* [optional][in] */ __RPC__in VARIANT *RelCreateTime,
            /* [optional][in] */ __RPC__in VARIANT *RelModifyTime,
            /* [optional][in] */ __RPC__in VARIANT *MulticastAddress,
            /* [optional][in] */ __RPC__in VARIANT *RelMulticastAddress,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfos3 **ppqinfos) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSMQQuery3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMSMQQuery3 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMSMQQuery3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMSMQQuery3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IMSMQQuery3 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IMSMQQuery3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IMSMQQuery3 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSMQQuery3 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [hidden][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *LookupQueue_v2 )( 
            __RPC__in IMSMQQuery3 * This,
            /* [optional][in] */ __RPC__in VARIANT *QueueGuid,
            /* [optional][in] */ __RPC__in VARIANT *ServiceTypeGuid,
            /* [optional][in] */ __RPC__in VARIANT *Label,
            /* [optional][in] */ __RPC__in VARIANT *CreateTime,
            /* [optional][in] */ __RPC__in VARIANT *ModifyTime,
            /* [optional][in] */ __RPC__in VARIANT *RelServiceType,
            /* [optional][in] */ __RPC__in VARIANT *RelLabel,
            /* [optional][in] */ __RPC__in VARIANT *RelCreateTime,
            /* [optional][in] */ __RPC__in VARIANT *RelModifyTime,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfos3 **ppqinfos);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            __RPC__in IMSMQQuery3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppcolProperties);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *LookupQueue )( 
            __RPC__in IMSMQQuery3 * This,
            /* [optional][in] */ __RPC__in VARIANT *QueueGuid,
            /* [optional][in] */ __RPC__in VARIANT *ServiceTypeGuid,
            /* [optional][in] */ __RPC__in VARIANT *Label,
            /* [optional][in] */ __RPC__in VARIANT *CreateTime,
            /* [optional][in] */ __RPC__in VARIANT *ModifyTime,
            /* [optional][in] */ __RPC__in VARIANT *RelServiceType,
            /* [optional][in] */ __RPC__in VARIANT *RelLabel,
            /* [optional][in] */ __RPC__in VARIANT *RelCreateTime,
            /* [optional][in] */ __RPC__in VARIANT *RelModifyTime,
            /* [optional][in] */ __RPC__in VARIANT *MulticastAddress,
            /* [optional][in] */ __RPC__in VARIANT *RelMulticastAddress,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfos3 **ppqinfos);
        
        END_INTERFACE
    } IMSMQQuery3Vtbl;

    interface IMSMQQuery3
    {
        CONST_VTBL struct IMSMQQuery3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSMQQuery3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSMQQuery3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSMQQuery3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSMQQuery3_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSMQQuery3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSMQQuery3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSMQQuery3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSMQQuery3_LookupQueue_v2(This,QueueGuid,ServiceTypeGuid,Label,CreateTime,ModifyTime,RelServiceType,RelLabel,RelCreateTime,RelModifyTime,ppqinfos)	\
    ( (This)->lpVtbl -> LookupQueue_v2(This,QueueGuid,ServiceTypeGuid,Label,CreateTime,ModifyTime,RelServiceType,RelLabel,RelCreateTime,RelModifyTime,ppqinfos) ) 

#define IMSMQQuery3_get_Properties(This,ppcolProperties)	\
    ( (This)->lpVtbl -> get_Properties(This,ppcolProperties) ) 

#define IMSMQQuery3_LookupQueue(This,QueueGuid,ServiceTypeGuid,Label,CreateTime,ModifyTime,RelServiceType,RelLabel,RelCreateTime,RelModifyTime,MulticastAddress,RelMulticastAddress,ppqinfos)	\
    ( (This)->lpVtbl -> LookupQueue(This,QueueGuid,ServiceTypeGuid,Label,CreateTime,ModifyTime,RelServiceType,RelLabel,RelCreateTime,RelModifyTime,MulticastAddress,RelMulticastAddress,ppqinfos) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSMQQuery3_INTERFACE_DEFINED__ */


#ifndef __IMSMQQuery4_INTERFACE_DEFINED__
#define __IMSMQQuery4_INTERFACE_DEFINED__

/* interface IMSMQQuery4 */
/* [object][nonextensible][dual][hidden][helpstringcontext][uuid] */ 


EXTERN_C const IID IID_IMSMQQuery4;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("eba96b24-2168-11d3-898c-00e02c074f6b")
    IMSMQQuery4 : public IDispatch
    {
    public:
        virtual /* [hidden][helpstringcontext] */ HRESULT STDMETHODCALLTYPE LookupQueue_v2( 
            /* [optional][in] */ __RPC__in VARIANT *QueueGuid,
            /* [optional][in] */ __RPC__in VARIANT *ServiceTypeGuid,
            /* [optional][in] */ __RPC__in VARIANT *Label,
            /* [optional][in] */ __RPC__in VARIANT *CreateTime,
            /* [optional][in] */ __RPC__in VARIANT *ModifyTime,
            /* [optional][in] */ __RPC__in VARIANT *RelServiceType,
            /* [optional][in] */ __RPC__in VARIANT *RelLabel,
            /* [optional][in] */ __RPC__in VARIANT *RelCreateTime,
            /* [optional][in] */ __RPC__in VARIANT *RelModifyTime,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfos4 **ppqinfos) = 0;
        
        virtual /* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE get_Properties( 
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppcolProperties) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE LookupQueue( 
            /* [optional][in] */ __RPC__in VARIANT *QueueGuid,
            /* [optional][in] */ __RPC__in VARIANT *ServiceTypeGuid,
            /* [optional][in] */ __RPC__in VARIANT *Label,
            /* [optional][in] */ __RPC__in VARIANT *CreateTime,
            /* [optional][in] */ __RPC__in VARIANT *ModifyTime,
            /* [optional][in] */ __RPC__in VARIANT *RelServiceType,
            /* [optional][in] */ __RPC__in VARIANT *RelLabel,
            /* [optional][in] */ __RPC__in VARIANT *RelCreateTime,
            /* [optional][in] */ __RPC__in VARIANT *RelModifyTime,
            /* [optional][in] */ __RPC__in VARIANT *MulticastAddress,
            /* [optional][in] */ __RPC__in VARIANT *RelMulticastAddress,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfos4 **ppqinfos) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSMQQuery4Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMSMQQuery4 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMSMQQuery4 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMSMQQuery4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IMSMQQuery4 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IMSMQQuery4 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IMSMQQuery4 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSMQQuery4 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [hidden][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *LookupQueue_v2 )( 
            __RPC__in IMSMQQuery4 * This,
            /* [optional][in] */ __RPC__in VARIANT *QueueGuid,
            /* [optional][in] */ __RPC__in VARIANT *ServiceTypeGuid,
            /* [optional][in] */ __RPC__in VARIANT *Label,
            /* [optional][in] */ __RPC__in VARIANT *CreateTime,
            /* [optional][in] */ __RPC__in VARIANT *ModifyTime,
            /* [optional][in] */ __RPC__in VARIANT *RelServiceType,
            /* [optional][in] */ __RPC__in VARIANT *RelLabel,
            /* [optional][in] */ __RPC__in VARIANT *RelCreateTime,
            /* [optional][in] */ __RPC__in VARIANT *RelModifyTime,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfos4 **ppqinfos);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            __RPC__in IMSMQQuery4 * This,
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppcolProperties);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *LookupQueue )( 
            __RPC__in IMSMQQuery4 * This,
            /* [optional][in] */ __RPC__in VARIANT *QueueGuid,
            /* [optional][in] */ __RPC__in VARIANT *ServiceTypeGuid,
            /* [optional][in] */ __RPC__in VARIANT *Label,
            /* [optional][in] */ __RPC__in VARIANT *CreateTime,
            /* [optional][in] */ __RPC__in VARIANT *ModifyTime,
            /* [optional][in] */ __RPC__in VARIANT *RelServiceType,
            /* [optional][in] */ __RPC__in VARIANT *RelLabel,
            /* [optional][in] */ __RPC__in VARIANT *RelCreateTime,
            /* [optional][in] */ __RPC__in VARIANT *RelModifyTime,
            /* [optional][in] */ __RPC__in VARIANT *MulticastAddress,
            /* [optional][in] */ __RPC__in VARIANT *RelMulticastAddress,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfos4 **ppqinfos);
        
        END_INTERFACE
    } IMSMQQuery4Vtbl;

    interface IMSMQQuery4
    {
        CONST_VTBL struct IMSMQQuery4Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSMQQuery4_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSMQQuery4_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSMQQuery4_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSMQQuery4_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSMQQuery4_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSMQQuery4_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSMQQuery4_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSMQQuery4_LookupQueue_v2(This,QueueGuid,ServiceTypeGuid,Label,CreateTime,ModifyTime,RelServiceType,RelLabel,RelCreateTime,RelModifyTime,ppqinfos)	\
    ( (This)->lpVtbl -> LookupQueue_v2(This,QueueGuid,ServiceTypeGuid,Label,CreateTime,ModifyTime,RelServiceType,RelLabel,RelCreateTime,RelModifyTime,ppqinfos) ) 

#define IMSMQQuery4_get_Properties(This,ppcolProperties)	\
    ( (This)->lpVtbl -> get_Properties(This,ppcolProperties) ) 

#define IMSMQQuery4_LookupQueue(This,QueueGuid,ServiceTypeGuid,Label,CreateTime,ModifyTime,RelServiceType,RelLabel,RelCreateTime,RelModifyTime,MulticastAddress,RelMulticastAddress,ppqinfos)	\
    ( (This)->lpVtbl -> LookupQueue(This,QueueGuid,ServiceTypeGuid,Label,CreateTime,ModifyTime,RelServiceType,RelLabel,RelCreateTime,RelModifyTime,MulticastAddress,RelMulticastAddress,ppqinfos) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSMQQuery4_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_MSMQQuery;

#ifdef __cplusplus

class DECLSPEC_UUID("D7D6E073-DCCD-11d0-AA4B-0060970DEBAE")
MSMQQuery;
#endif

#ifndef __IMSMQMessage2_INTERFACE_DEFINED__
#define __IMSMQMessage2_INTERFACE_DEFINED__

/* interface IMSMQMessage2 */
/* [object][dual][hidden][helpstringcontext][uuid] */ 


EXTERN_C const IID IID_IMSMQMessage2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D9933BE0-A567-11D2-B0F3-00E02C074F6B")
    IMSMQMessage2 : public IDispatch
    {
    public:
        virtual /* [id][propget][hidden][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Class( 
            /* [retval][out] */ __RPC__out long *plClass) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_PrivLevel( 
            /* [retval][out] */ __RPC__out long *plPrivLevel) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_PrivLevel( 
            /* [in] */ long lPrivLevel) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_AuthLevel( 
            /* [retval][out] */ __RPC__out long *plAuthLevel) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_AuthLevel( 
            /* [in] */ long lAuthLevel) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_IsAuthenticated( 
            /* [retval][out] */ __RPC__out Boolean *pisAuthenticated) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Delivery( 
            /* [retval][out] */ __RPC__out long *plDelivery) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_Delivery( 
            /* [in] */ long lDelivery) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Trace( 
            /* [retval][out] */ __RPC__out long *plTrace) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_Trace( 
            /* [in] */ long lTrace) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Priority( 
            /* [retval][out] */ __RPC__out long *plPriority) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_Priority( 
            /* [in] */ long lPriority) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Journal( 
            /* [retval][out] */ __RPC__out long *plJournal) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_Journal( 
            /* [in] */ long lJournal) = 0;
        
        virtual /* [hidden][id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_ResponseQueueInfo_v1( 
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo **ppqinfoResponse) = 0;
        
        virtual /* [hidden][id][propputref][helpstringcontext] */ HRESULT STDMETHODCALLTYPE putref_ResponseQueueInfo_v1( 
            /* [in] */ __RPC__in_opt IMSMQQueueInfo *pqinfoResponse) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_AppSpecific( 
            /* [retval][out] */ __RPC__out long *plAppSpecific) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_AppSpecific( 
            /* [in] */ long lAppSpecific) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_SourceMachineGuid( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrGuidSrcMachine) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_BodyLength( 
            /* [retval][out] */ __RPC__out long *pcbBody) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Body( 
            /* [retval][out] */ __RPC__out VARIANT *pvarBody) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_Body( 
            /* [in] */ VARIANT varBody) = 0;
        
        virtual /* [hidden][id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_AdminQueueInfo_v1( 
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo **ppqinfoAdmin) = 0;
        
        virtual /* [hidden][id][propputref][helpstringcontext] */ HRESULT STDMETHODCALLTYPE putref_AdminQueueInfo_v1( 
            /* [in] */ __RPC__in_opt IMSMQQueueInfo *pqinfoAdmin) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Id( 
            /* [retval][out] */ __RPC__out VARIANT *pvarMsgId) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_CorrelationId( 
            /* [retval][out] */ __RPC__out VARIANT *pvarMsgId) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_CorrelationId( 
            /* [in] */ VARIANT varMsgId) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Ack( 
            /* [retval][out] */ __RPC__out long *plAck) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_Ack( 
            /* [in] */ long lAck) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Label( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrLabel) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_Label( 
            /* [in] */ __RPC__in BSTR bstrLabel) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_MaxTimeToReachQueue( 
            /* [retval][out] */ __RPC__out long *plMaxTimeToReachQueue) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_MaxTimeToReachQueue( 
            /* [in] */ long lMaxTimeToReachQueue) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_MaxTimeToReceive( 
            /* [retval][out] */ __RPC__out long *plMaxTimeToReceive) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_MaxTimeToReceive( 
            /* [in] */ long lMaxTimeToReceive) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_HashAlgorithm( 
            /* [retval][out] */ __RPC__out long *plHashAlg) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_HashAlgorithm( 
            /* [in] */ long lHashAlg) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_EncryptAlgorithm( 
            /* [retval][out] */ __RPC__out long *plEncryptAlg) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_EncryptAlgorithm( 
            /* [in] */ long lEncryptAlg) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_SentTime( 
            /* [retval][out] */ __RPC__out VARIANT *pvarSentTime) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_ArrivedTime( 
            /* [retval][out] */ __RPC__out VARIANT *plArrivedTime) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_DestinationQueueInfo( 
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo2 **ppqinfoDest) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_SenderCertificate( 
            /* [retval][out] */ __RPC__out VARIANT *pvarSenderCert) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_SenderCertificate( 
            /* [in] */ VARIANT varSenderCert) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_SenderId( 
            /* [retval][out] */ __RPC__out VARIANT *pvarSenderId) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_SenderIdType( 
            /* [retval][out] */ __RPC__out long *plSenderIdType) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_SenderIdType( 
            /* [in] */ long lSenderIdType) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Send( 
            /* [in] */ __RPC__in_opt IMSMQQueue2 *DestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *Transaction) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE AttachCurrentSecurityContext( void) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_SenderVersion( 
            /* [retval][out] */ __RPC__out long *plSenderVersion) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Extension( 
            /* [retval][out] */ __RPC__out VARIANT *pvarExtension) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_Extension( 
            /* [in] */ VARIANT varExtension) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_ConnectorTypeGuid( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrGuidConnectorType) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_ConnectorTypeGuid( 
            /* [in] */ __RPC__in BSTR bstrGuidConnectorType) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_TransactionStatusQueueInfo( 
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo2 **ppqinfoXactStatus) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_DestinationSymmetricKey( 
            /* [retval][out] */ __RPC__out VARIANT *pvarDestSymmKey) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_DestinationSymmetricKey( 
            /* [in] */ VARIANT varDestSymmKey) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Signature( 
            /* [retval][out] */ __RPC__out VARIANT *pvarSignature) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_Signature( 
            /* [in] */ VARIANT varSignature) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_AuthenticationProviderType( 
            /* [retval][out] */ __RPC__out long *plAuthProvType) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_AuthenticationProviderType( 
            /* [in] */ long lAuthProvType) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_AuthenticationProviderName( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrAuthProvName) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_AuthenticationProviderName( 
            /* [in] */ __RPC__in BSTR bstrAuthProvName) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_SenderId( 
            /* [in] */ VARIANT varSenderId) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_MsgClass( 
            /* [retval][out] */ __RPC__out long *plMsgClass) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_MsgClass( 
            /* [in] */ long lMsgClass) = 0;
        
        virtual /* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE get_Properties( 
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppcolProperties) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_TransactionId( 
            /* [retval][out] */ __RPC__out VARIANT *pvarXactId) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_IsFirstInTransaction( 
            /* [retval][out] */ __RPC__out Boolean *pisFirstInXact) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_IsLastInTransaction( 
            /* [retval][out] */ __RPC__out Boolean *pisLastInXact) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_ResponseQueueInfo( 
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo2 **ppqinfoResponse) = 0;
        
        virtual /* [id][propputref][helpstringcontext] */ HRESULT STDMETHODCALLTYPE putref_ResponseQueueInfo( 
            /* [in] */ __RPC__in_opt IMSMQQueueInfo2 *pqinfoResponse) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_AdminQueueInfo( 
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo2 **ppqinfoAdmin) = 0;
        
        virtual /* [id][propputref][helpstringcontext] */ HRESULT STDMETHODCALLTYPE putref_AdminQueueInfo( 
            /* [in] */ __RPC__in_opt IMSMQQueueInfo2 *pqinfoAdmin) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_ReceivedAuthenticationLevel( 
            /* [retval][out] */ __RPC__out short *psReceivedAuthenticationLevel) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSMQMessage2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMSMQMessage2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMSMQMessage2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMSMQMessage2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IMSMQMessage2 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IMSMQMessage2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IMSMQMessage2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSMQMessage2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget][hidden][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Class )( 
            __RPC__in IMSMQMessage2 * This,
            /* [retval][out] */ __RPC__out long *plClass);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_PrivLevel )( 
            __RPC__in IMSMQMessage2 * This,
            /* [retval][out] */ __RPC__out long *plPrivLevel);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_PrivLevel )( 
            __RPC__in IMSMQMessage2 * This,
            /* [in] */ long lPrivLevel);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_AuthLevel )( 
            __RPC__in IMSMQMessage2 * This,
            /* [retval][out] */ __RPC__out long *plAuthLevel);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_AuthLevel )( 
            __RPC__in IMSMQMessage2 * This,
            /* [in] */ long lAuthLevel);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_IsAuthenticated )( 
            __RPC__in IMSMQMessage2 * This,
            /* [retval][out] */ __RPC__out Boolean *pisAuthenticated);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Delivery )( 
            __RPC__in IMSMQMessage2 * This,
            /* [retval][out] */ __RPC__out long *plDelivery);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_Delivery )( 
            __RPC__in IMSMQMessage2 * This,
            /* [in] */ long lDelivery);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Trace )( 
            __RPC__in IMSMQMessage2 * This,
            /* [retval][out] */ __RPC__out long *plTrace);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_Trace )( 
            __RPC__in IMSMQMessage2 * This,
            /* [in] */ long lTrace);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Priority )( 
            __RPC__in IMSMQMessage2 * This,
            /* [retval][out] */ __RPC__out long *plPriority);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_Priority )( 
            __RPC__in IMSMQMessage2 * This,
            /* [in] */ long lPriority);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Journal )( 
            __RPC__in IMSMQMessage2 * This,
            /* [retval][out] */ __RPC__out long *plJournal);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_Journal )( 
            __RPC__in IMSMQMessage2 * This,
            /* [in] */ long lJournal);
        
        /* [hidden][id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_ResponseQueueInfo_v1 )( 
            __RPC__in IMSMQMessage2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo **ppqinfoResponse);
        
        /* [hidden][id][propputref][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *putref_ResponseQueueInfo_v1 )( 
            __RPC__in IMSMQMessage2 * This,
            /* [in] */ __RPC__in_opt IMSMQQueueInfo *pqinfoResponse);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_AppSpecific )( 
            __RPC__in IMSMQMessage2 * This,
            /* [retval][out] */ __RPC__out long *plAppSpecific);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_AppSpecific )( 
            __RPC__in IMSMQMessage2 * This,
            /* [in] */ long lAppSpecific);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_SourceMachineGuid )( 
            __RPC__in IMSMQMessage2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrGuidSrcMachine);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_BodyLength )( 
            __RPC__in IMSMQMessage2 * This,
            /* [retval][out] */ __RPC__out long *pcbBody);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Body )( 
            __RPC__in IMSMQMessage2 * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarBody);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_Body )( 
            __RPC__in IMSMQMessage2 * This,
            /* [in] */ VARIANT varBody);
        
        /* [hidden][id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_AdminQueueInfo_v1 )( 
            __RPC__in IMSMQMessage2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo **ppqinfoAdmin);
        
        /* [hidden][id][propputref][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *putref_AdminQueueInfo_v1 )( 
            __RPC__in IMSMQMessage2 * This,
            /* [in] */ __RPC__in_opt IMSMQQueueInfo *pqinfoAdmin);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Id )( 
            __RPC__in IMSMQMessage2 * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarMsgId);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_CorrelationId )( 
            __RPC__in IMSMQMessage2 * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarMsgId);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_CorrelationId )( 
            __RPC__in IMSMQMessage2 * This,
            /* [in] */ VARIANT varMsgId);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Ack )( 
            __RPC__in IMSMQMessage2 * This,
            /* [retval][out] */ __RPC__out long *plAck);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_Ack )( 
            __RPC__in IMSMQMessage2 * This,
            /* [in] */ long lAck);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Label )( 
            __RPC__in IMSMQMessage2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrLabel);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_Label )( 
            __RPC__in IMSMQMessage2 * This,
            /* [in] */ __RPC__in BSTR bstrLabel);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_MaxTimeToReachQueue )( 
            __RPC__in IMSMQMessage2 * This,
            /* [retval][out] */ __RPC__out long *plMaxTimeToReachQueue);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_MaxTimeToReachQueue )( 
            __RPC__in IMSMQMessage2 * This,
            /* [in] */ long lMaxTimeToReachQueue);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_MaxTimeToReceive )( 
            __RPC__in IMSMQMessage2 * This,
            /* [retval][out] */ __RPC__out long *plMaxTimeToReceive);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_MaxTimeToReceive )( 
            __RPC__in IMSMQMessage2 * This,
            /* [in] */ long lMaxTimeToReceive);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_HashAlgorithm )( 
            __RPC__in IMSMQMessage2 * This,
            /* [retval][out] */ __RPC__out long *plHashAlg);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_HashAlgorithm )( 
            __RPC__in IMSMQMessage2 * This,
            /* [in] */ long lHashAlg);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_EncryptAlgorithm )( 
            __RPC__in IMSMQMessage2 * This,
            /* [retval][out] */ __RPC__out long *plEncryptAlg);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_EncryptAlgorithm )( 
            __RPC__in IMSMQMessage2 * This,
            /* [in] */ long lEncryptAlg);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_SentTime )( 
            __RPC__in IMSMQMessage2 * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarSentTime);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_ArrivedTime )( 
            __RPC__in IMSMQMessage2 * This,
            /* [retval][out] */ __RPC__out VARIANT *plArrivedTime);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_DestinationQueueInfo )( 
            __RPC__in IMSMQMessage2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo2 **ppqinfoDest);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_SenderCertificate )( 
            __RPC__in IMSMQMessage2 * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarSenderCert);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_SenderCertificate )( 
            __RPC__in IMSMQMessage2 * This,
            /* [in] */ VARIANT varSenderCert);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_SenderId )( 
            __RPC__in IMSMQMessage2 * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarSenderId);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_SenderIdType )( 
            __RPC__in IMSMQMessage2 * This,
            /* [retval][out] */ __RPC__out long *plSenderIdType);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_SenderIdType )( 
            __RPC__in IMSMQMessage2 * This,
            /* [in] */ long lSenderIdType);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Send )( 
            __RPC__in IMSMQMessage2 * This,
            /* [in] */ __RPC__in_opt IMSMQQueue2 *DestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *Transaction);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *AttachCurrentSecurityContext )( 
            __RPC__in IMSMQMessage2 * This);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_SenderVersion )( 
            __RPC__in IMSMQMessage2 * This,
            /* [retval][out] */ __RPC__out long *plSenderVersion);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Extension )( 
            __RPC__in IMSMQMessage2 * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarExtension);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_Extension )( 
            __RPC__in IMSMQMessage2 * This,
            /* [in] */ VARIANT varExtension);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_ConnectorTypeGuid )( 
            __RPC__in IMSMQMessage2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrGuidConnectorType);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_ConnectorTypeGuid )( 
            __RPC__in IMSMQMessage2 * This,
            /* [in] */ __RPC__in BSTR bstrGuidConnectorType);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_TransactionStatusQueueInfo )( 
            __RPC__in IMSMQMessage2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo2 **ppqinfoXactStatus);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_DestinationSymmetricKey )( 
            __RPC__in IMSMQMessage2 * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarDestSymmKey);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_DestinationSymmetricKey )( 
            __RPC__in IMSMQMessage2 * This,
            /* [in] */ VARIANT varDestSymmKey);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Signature )( 
            __RPC__in IMSMQMessage2 * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarSignature);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_Signature )( 
            __RPC__in IMSMQMessage2 * This,
            /* [in] */ VARIANT varSignature);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_AuthenticationProviderType )( 
            __RPC__in IMSMQMessage2 * This,
            /* [retval][out] */ __RPC__out long *plAuthProvType);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_AuthenticationProviderType )( 
            __RPC__in IMSMQMessage2 * This,
            /* [in] */ long lAuthProvType);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_AuthenticationProviderName )( 
            __RPC__in IMSMQMessage2 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrAuthProvName);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_AuthenticationProviderName )( 
            __RPC__in IMSMQMessage2 * This,
            /* [in] */ __RPC__in BSTR bstrAuthProvName);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_SenderId )( 
            __RPC__in IMSMQMessage2 * This,
            /* [in] */ VARIANT varSenderId);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_MsgClass )( 
            __RPC__in IMSMQMessage2 * This,
            /* [retval][out] */ __RPC__out long *plMsgClass);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_MsgClass )( 
            __RPC__in IMSMQMessage2 * This,
            /* [in] */ long lMsgClass);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            __RPC__in IMSMQMessage2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppcolProperties);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_TransactionId )( 
            __RPC__in IMSMQMessage2 * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarXactId);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_IsFirstInTransaction )( 
            __RPC__in IMSMQMessage2 * This,
            /* [retval][out] */ __RPC__out Boolean *pisFirstInXact);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_IsLastInTransaction )( 
            __RPC__in IMSMQMessage2 * This,
            /* [retval][out] */ __RPC__out Boolean *pisLastInXact);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_ResponseQueueInfo )( 
            __RPC__in IMSMQMessage2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo2 **ppqinfoResponse);
        
        /* [id][propputref][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *putref_ResponseQueueInfo )( 
            __RPC__in IMSMQMessage2 * This,
            /* [in] */ __RPC__in_opt IMSMQQueueInfo2 *pqinfoResponse);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_AdminQueueInfo )( 
            __RPC__in IMSMQMessage2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo2 **ppqinfoAdmin);
        
        /* [id][propputref][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *putref_AdminQueueInfo )( 
            __RPC__in IMSMQMessage2 * This,
            /* [in] */ __RPC__in_opt IMSMQQueueInfo2 *pqinfoAdmin);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_ReceivedAuthenticationLevel )( 
            __RPC__in IMSMQMessage2 * This,
            /* [retval][out] */ __RPC__out short *psReceivedAuthenticationLevel);
        
        END_INTERFACE
    } IMSMQMessage2Vtbl;

    interface IMSMQMessage2
    {
        CONST_VTBL struct IMSMQMessage2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSMQMessage2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSMQMessage2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSMQMessage2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSMQMessage2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSMQMessage2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSMQMessage2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSMQMessage2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSMQMessage2_get_Class(This,plClass)	\
    ( (This)->lpVtbl -> get_Class(This,plClass) ) 

#define IMSMQMessage2_get_PrivLevel(This,plPrivLevel)	\
    ( (This)->lpVtbl -> get_PrivLevel(This,plPrivLevel) ) 

#define IMSMQMessage2_put_PrivLevel(This,lPrivLevel)	\
    ( (This)->lpVtbl -> put_PrivLevel(This,lPrivLevel) ) 

#define IMSMQMessage2_get_AuthLevel(This,plAuthLevel)	\
    ( (This)->lpVtbl -> get_AuthLevel(This,plAuthLevel) ) 

#define IMSMQMessage2_put_AuthLevel(This,lAuthLevel)	\
    ( (This)->lpVtbl -> put_AuthLevel(This,lAuthLevel) ) 

#define IMSMQMessage2_get_IsAuthenticated(This,pisAuthenticated)	\
    ( (This)->lpVtbl -> get_IsAuthenticated(This,pisAuthenticated) ) 

#define IMSMQMessage2_get_Delivery(This,plDelivery)	\
    ( (This)->lpVtbl -> get_Delivery(This,plDelivery) ) 

#define IMSMQMessage2_put_Delivery(This,lDelivery)	\
    ( (This)->lpVtbl -> put_Delivery(This,lDelivery) ) 

#define IMSMQMessage2_get_Trace(This,plTrace)	\
    ( (This)->lpVtbl -> get_Trace(This,plTrace) ) 

#define IMSMQMessage2_put_Trace(This,lTrace)	\
    ( (This)->lpVtbl -> put_Trace(This,lTrace) ) 

#define IMSMQMessage2_get_Priority(This,plPriority)	\
    ( (This)->lpVtbl -> get_Priority(This,plPriority) ) 

#define IMSMQMessage2_put_Priority(This,lPriority)	\
    ( (This)->lpVtbl -> put_Priority(This,lPriority) ) 

#define IMSMQMessage2_get_Journal(This,plJournal)	\
    ( (This)->lpVtbl -> get_Journal(This,plJournal) ) 

#define IMSMQMessage2_put_Journal(This,lJournal)	\
    ( (This)->lpVtbl -> put_Journal(This,lJournal) ) 

#define IMSMQMessage2_get_ResponseQueueInfo_v1(This,ppqinfoResponse)	\
    ( (This)->lpVtbl -> get_ResponseQueueInfo_v1(This,ppqinfoResponse) ) 

#define IMSMQMessage2_putref_ResponseQueueInfo_v1(This,pqinfoResponse)	\
    ( (This)->lpVtbl -> putref_ResponseQueueInfo_v1(This,pqinfoResponse) ) 

#define IMSMQMessage2_get_AppSpecific(This,plAppSpecific)	\
    ( (This)->lpVtbl -> get_AppSpecific(This,plAppSpecific) ) 

#define IMSMQMessage2_put_AppSpecific(This,lAppSpecific)	\
    ( (This)->lpVtbl -> put_AppSpecific(This,lAppSpecific) ) 

#define IMSMQMessage2_get_SourceMachineGuid(This,pbstrGuidSrcMachine)	\
    ( (This)->lpVtbl -> get_SourceMachineGuid(This,pbstrGuidSrcMachine) ) 

#define IMSMQMessage2_get_BodyLength(This,pcbBody)	\
    ( (This)->lpVtbl -> get_BodyLength(This,pcbBody) ) 

#define IMSMQMessage2_get_Body(This,pvarBody)	\
    ( (This)->lpVtbl -> get_Body(This,pvarBody) ) 

#define IMSMQMessage2_put_Body(This,varBody)	\
    ( (This)->lpVtbl -> put_Body(This,varBody) ) 

#define IMSMQMessage2_get_AdminQueueInfo_v1(This,ppqinfoAdmin)	\
    ( (This)->lpVtbl -> get_AdminQueueInfo_v1(This,ppqinfoAdmin) ) 

#define IMSMQMessage2_putref_AdminQueueInfo_v1(This,pqinfoAdmin)	\
    ( (This)->lpVtbl -> putref_AdminQueueInfo_v1(This,pqinfoAdmin) ) 

#define IMSMQMessage2_get_Id(This,pvarMsgId)	\
    ( (This)->lpVtbl -> get_Id(This,pvarMsgId) ) 

#define IMSMQMessage2_get_CorrelationId(This,pvarMsgId)	\
    ( (This)->lpVtbl -> get_CorrelationId(This,pvarMsgId) ) 

#define IMSMQMessage2_put_CorrelationId(This,varMsgId)	\
    ( (This)->lpVtbl -> put_CorrelationId(This,varMsgId) ) 

#define IMSMQMessage2_get_Ack(This,plAck)	\
    ( (This)->lpVtbl -> get_Ack(This,plAck) ) 

#define IMSMQMessage2_put_Ack(This,lAck)	\
    ( (This)->lpVtbl -> put_Ack(This,lAck) ) 

#define IMSMQMessage2_get_Label(This,pbstrLabel)	\
    ( (This)->lpVtbl -> get_Label(This,pbstrLabel) ) 

#define IMSMQMessage2_put_Label(This,bstrLabel)	\
    ( (This)->lpVtbl -> put_Label(This,bstrLabel) ) 

#define IMSMQMessage2_get_MaxTimeToReachQueue(This,plMaxTimeToReachQueue)	\
    ( (This)->lpVtbl -> get_MaxTimeToReachQueue(This,plMaxTimeToReachQueue) ) 

#define IMSMQMessage2_put_MaxTimeToReachQueue(This,lMaxTimeToReachQueue)	\
    ( (This)->lpVtbl -> put_MaxTimeToReachQueue(This,lMaxTimeToReachQueue) ) 

#define IMSMQMessage2_get_MaxTimeToReceive(This,plMaxTimeToReceive)	\
    ( (This)->lpVtbl -> get_MaxTimeToReceive(This,plMaxTimeToReceive) ) 

#define IMSMQMessage2_put_MaxTimeToReceive(This,lMaxTimeToReceive)	\
    ( (This)->lpVtbl -> put_MaxTimeToReceive(This,lMaxTimeToReceive) ) 

#define IMSMQMessage2_get_HashAlgorithm(This,plHashAlg)	\
    ( (This)->lpVtbl -> get_HashAlgorithm(This,plHashAlg) ) 

#define IMSMQMessage2_put_HashAlgorithm(This,lHashAlg)	\
    ( (This)->lpVtbl -> put_HashAlgorithm(This,lHashAlg) ) 

#define IMSMQMessage2_get_EncryptAlgorithm(This,plEncryptAlg)	\
    ( (This)->lpVtbl -> get_EncryptAlgorithm(This,plEncryptAlg) ) 

#define IMSMQMessage2_put_EncryptAlgorithm(This,lEncryptAlg)	\
    ( (This)->lpVtbl -> put_EncryptAlgorithm(This,lEncryptAlg) ) 

#define IMSMQMessage2_get_SentTime(This,pvarSentTime)	\
    ( (This)->lpVtbl -> get_SentTime(This,pvarSentTime) ) 

#define IMSMQMessage2_get_ArrivedTime(This,plArrivedTime)	\
    ( (This)->lpVtbl -> get_ArrivedTime(This,plArrivedTime) ) 

#define IMSMQMessage2_get_DestinationQueueInfo(This,ppqinfoDest)	\
    ( (This)->lpVtbl -> get_DestinationQueueInfo(This,ppqinfoDest) ) 

#define IMSMQMessage2_get_SenderCertificate(This,pvarSenderCert)	\
    ( (This)->lpVtbl -> get_SenderCertificate(This,pvarSenderCert) ) 

#define IMSMQMessage2_put_SenderCertificate(This,varSenderCert)	\
    ( (This)->lpVtbl -> put_SenderCertificate(This,varSenderCert) ) 

#define IMSMQMessage2_get_SenderId(This,pvarSenderId)	\
    ( (This)->lpVtbl -> get_SenderId(This,pvarSenderId) ) 

#define IMSMQMessage2_get_SenderIdType(This,plSenderIdType)	\
    ( (This)->lpVtbl -> get_SenderIdType(This,plSenderIdType) ) 

#define IMSMQMessage2_put_SenderIdType(This,lSenderIdType)	\
    ( (This)->lpVtbl -> put_SenderIdType(This,lSenderIdType) ) 

#define IMSMQMessage2_Send(This,DestinationQueue,Transaction)	\
    ( (This)->lpVtbl -> Send(This,DestinationQueue,Transaction) ) 

#define IMSMQMessage2_AttachCurrentSecurityContext(This)	\
    ( (This)->lpVtbl -> AttachCurrentSecurityContext(This) ) 

#define IMSMQMessage2_get_SenderVersion(This,plSenderVersion)	\
    ( (This)->lpVtbl -> get_SenderVersion(This,plSenderVersion) ) 

#define IMSMQMessage2_get_Extension(This,pvarExtension)	\
    ( (This)->lpVtbl -> get_Extension(This,pvarExtension) ) 

#define IMSMQMessage2_put_Extension(This,varExtension)	\
    ( (This)->lpVtbl -> put_Extension(This,varExtension) ) 

#define IMSMQMessage2_get_ConnectorTypeGuid(This,pbstrGuidConnectorType)	\
    ( (This)->lpVtbl -> get_ConnectorTypeGuid(This,pbstrGuidConnectorType) ) 

#define IMSMQMessage2_put_ConnectorTypeGuid(This,bstrGuidConnectorType)	\
    ( (This)->lpVtbl -> put_ConnectorTypeGuid(This,bstrGuidConnectorType) ) 

#define IMSMQMessage2_get_TransactionStatusQueueInfo(This,ppqinfoXactStatus)	\
    ( (This)->lpVtbl -> get_TransactionStatusQueueInfo(This,ppqinfoXactStatus) ) 

#define IMSMQMessage2_get_DestinationSymmetricKey(This,pvarDestSymmKey)	\
    ( (This)->lpVtbl -> get_DestinationSymmetricKey(This,pvarDestSymmKey) ) 

#define IMSMQMessage2_put_DestinationSymmetricKey(This,varDestSymmKey)	\
    ( (This)->lpVtbl -> put_DestinationSymmetricKey(This,varDestSymmKey) ) 

#define IMSMQMessage2_get_Signature(This,pvarSignature)	\
    ( (This)->lpVtbl -> get_Signature(This,pvarSignature) ) 

#define IMSMQMessage2_put_Signature(This,varSignature)	\
    ( (This)->lpVtbl -> put_Signature(This,varSignature) ) 

#define IMSMQMessage2_get_AuthenticationProviderType(This,plAuthProvType)	\
    ( (This)->lpVtbl -> get_AuthenticationProviderType(This,plAuthProvType) ) 

#define IMSMQMessage2_put_AuthenticationProviderType(This,lAuthProvType)	\
    ( (This)->lpVtbl -> put_AuthenticationProviderType(This,lAuthProvType) ) 

#define IMSMQMessage2_get_AuthenticationProviderName(This,pbstrAuthProvName)	\
    ( (This)->lpVtbl -> get_AuthenticationProviderName(This,pbstrAuthProvName) ) 

#define IMSMQMessage2_put_AuthenticationProviderName(This,bstrAuthProvName)	\
    ( (This)->lpVtbl -> put_AuthenticationProviderName(This,bstrAuthProvName) ) 

#define IMSMQMessage2_put_SenderId(This,varSenderId)	\
    ( (This)->lpVtbl -> put_SenderId(This,varSenderId) ) 

#define IMSMQMessage2_get_MsgClass(This,plMsgClass)	\
    ( (This)->lpVtbl -> get_MsgClass(This,plMsgClass) ) 

#define IMSMQMessage2_put_MsgClass(This,lMsgClass)	\
    ( (This)->lpVtbl -> put_MsgClass(This,lMsgClass) ) 

#define IMSMQMessage2_get_Properties(This,ppcolProperties)	\
    ( (This)->lpVtbl -> get_Properties(This,ppcolProperties) ) 

#define IMSMQMessage2_get_TransactionId(This,pvarXactId)	\
    ( (This)->lpVtbl -> get_TransactionId(This,pvarXactId) ) 

#define IMSMQMessage2_get_IsFirstInTransaction(This,pisFirstInXact)	\
    ( (This)->lpVtbl -> get_IsFirstInTransaction(This,pisFirstInXact) ) 

#define IMSMQMessage2_get_IsLastInTransaction(This,pisLastInXact)	\
    ( (This)->lpVtbl -> get_IsLastInTransaction(This,pisLastInXact) ) 

#define IMSMQMessage2_get_ResponseQueueInfo(This,ppqinfoResponse)	\
    ( (This)->lpVtbl -> get_ResponseQueueInfo(This,ppqinfoResponse) ) 

#define IMSMQMessage2_putref_ResponseQueueInfo(This,pqinfoResponse)	\
    ( (This)->lpVtbl -> putref_ResponseQueueInfo(This,pqinfoResponse) ) 

#define IMSMQMessage2_get_AdminQueueInfo(This,ppqinfoAdmin)	\
    ( (This)->lpVtbl -> get_AdminQueueInfo(This,ppqinfoAdmin) ) 

#define IMSMQMessage2_putref_AdminQueueInfo(This,pqinfoAdmin)	\
    ( (This)->lpVtbl -> putref_AdminQueueInfo(This,pqinfoAdmin) ) 

#define IMSMQMessage2_get_ReceivedAuthenticationLevel(This,psReceivedAuthenticationLevel)	\
    ( (This)->lpVtbl -> get_ReceivedAuthenticationLevel(This,psReceivedAuthenticationLevel) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSMQMessage2_INTERFACE_DEFINED__ */


#ifndef __IMSMQMessage3_INTERFACE_DEFINED__
#define __IMSMQMessage3_INTERFACE_DEFINED__

/* interface IMSMQMessage3 */
/* [object][dual][hidden][helpstringcontext][uuid] */ 


EXTERN_C const IID IID_IMSMQMessage3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("eba96b1a-2168-11d3-898c-00e02c074f6b")
    IMSMQMessage3 : public IDispatch
    {
    public:
        virtual /* [id][propget][hidden][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Class( 
            /* [retval][out] */ __RPC__out long *plClass) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_PrivLevel( 
            /* [retval][out] */ __RPC__out long *plPrivLevel) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_PrivLevel( 
            /* [in] */ long lPrivLevel) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_AuthLevel( 
            /* [retval][out] */ __RPC__out long *plAuthLevel) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_AuthLevel( 
            /* [in] */ long lAuthLevel) = 0;
        
        virtual /* [id][propget][helpstringcontext][hidden] */ HRESULT STDMETHODCALLTYPE get_IsAuthenticated( 
            /* [retval][out] */ __RPC__out Boolean *pisAuthenticated) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Delivery( 
            /* [retval][out] */ __RPC__out long *plDelivery) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_Delivery( 
            /* [in] */ long lDelivery) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Trace( 
            /* [retval][out] */ __RPC__out long *plTrace) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_Trace( 
            /* [in] */ long lTrace) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Priority( 
            /* [retval][out] */ __RPC__out long *plPriority) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_Priority( 
            /* [in] */ long lPriority) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Journal( 
            /* [retval][out] */ __RPC__out long *plJournal) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_Journal( 
            /* [in] */ long lJournal) = 0;
        
        virtual /* [hidden][id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_ResponseQueueInfo_v1( 
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo **ppqinfoResponse) = 0;
        
        virtual /* [hidden][id][propputref][helpstringcontext] */ HRESULT STDMETHODCALLTYPE putref_ResponseQueueInfo_v1( 
            /* [in] */ __RPC__in_opt IMSMQQueueInfo *pqinfoResponse) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_AppSpecific( 
            /* [retval][out] */ __RPC__out long *plAppSpecific) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_AppSpecific( 
            /* [in] */ long lAppSpecific) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_SourceMachineGuid( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrGuidSrcMachine) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_BodyLength( 
            /* [retval][out] */ __RPC__out long *pcbBody) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Body( 
            /* [retval][out] */ __RPC__out VARIANT *pvarBody) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_Body( 
            /* [in] */ VARIANT varBody) = 0;
        
        virtual /* [hidden][id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_AdminQueueInfo_v1( 
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo **ppqinfoAdmin) = 0;
        
        virtual /* [hidden][id][propputref][helpstringcontext] */ HRESULT STDMETHODCALLTYPE putref_AdminQueueInfo_v1( 
            /* [in] */ __RPC__in_opt IMSMQQueueInfo *pqinfoAdmin) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Id( 
            /* [retval][out] */ __RPC__out VARIANT *pvarMsgId) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_CorrelationId( 
            /* [retval][out] */ __RPC__out VARIANT *pvarMsgId) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_CorrelationId( 
            /* [in] */ VARIANT varMsgId) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Ack( 
            /* [retval][out] */ __RPC__out long *plAck) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_Ack( 
            /* [in] */ long lAck) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Label( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrLabel) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_Label( 
            /* [in] */ __RPC__in BSTR bstrLabel) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_MaxTimeToReachQueue( 
            /* [retval][out] */ __RPC__out long *plMaxTimeToReachQueue) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_MaxTimeToReachQueue( 
            /* [in] */ long lMaxTimeToReachQueue) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_MaxTimeToReceive( 
            /* [retval][out] */ __RPC__out long *plMaxTimeToReceive) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_MaxTimeToReceive( 
            /* [in] */ long lMaxTimeToReceive) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_HashAlgorithm( 
            /* [retval][out] */ __RPC__out long *plHashAlg) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_HashAlgorithm( 
            /* [in] */ long lHashAlg) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_EncryptAlgorithm( 
            /* [retval][out] */ __RPC__out long *plEncryptAlg) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_EncryptAlgorithm( 
            /* [in] */ long lEncryptAlg) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_SentTime( 
            /* [retval][out] */ __RPC__out VARIANT *pvarSentTime) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_ArrivedTime( 
            /* [retval][out] */ __RPC__out VARIANT *plArrivedTime) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_DestinationQueueInfo( 
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo3 **ppqinfoDest) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_SenderCertificate( 
            /* [retval][out] */ __RPC__out VARIANT *pvarSenderCert) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_SenderCertificate( 
            /* [in] */ VARIANT varSenderCert) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_SenderId( 
            /* [retval][out] */ __RPC__out VARIANT *pvarSenderId) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_SenderIdType( 
            /* [retval][out] */ __RPC__out long *plSenderIdType) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_SenderIdType( 
            /* [in] */ long lSenderIdType) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Send( 
            /* [in] */ __RPC__in_opt IDispatch *DestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *Transaction) = 0;
        
        virtual /* [helpstringcontext][hidden] */ HRESULT STDMETHODCALLTYPE AttachCurrentSecurityContext( void) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_SenderVersion( 
            /* [retval][out] */ __RPC__out long *plSenderVersion) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Extension( 
            /* [retval][out] */ __RPC__out VARIANT *pvarExtension) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_Extension( 
            /* [in] */ VARIANT varExtension) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_ConnectorTypeGuid( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrGuidConnectorType) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_ConnectorTypeGuid( 
            /* [in] */ __RPC__in BSTR bstrGuidConnectorType) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_TransactionStatusQueueInfo( 
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo3 **ppqinfoXactStatus) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_DestinationSymmetricKey( 
            /* [retval][out] */ __RPC__out VARIANT *pvarDestSymmKey) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_DestinationSymmetricKey( 
            /* [in] */ VARIANT varDestSymmKey) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Signature( 
            /* [retval][out] */ __RPC__out VARIANT *pvarSignature) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_Signature( 
            /* [in] */ VARIANT varSignature) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_AuthenticationProviderType( 
            /* [retval][out] */ __RPC__out long *plAuthProvType) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_AuthenticationProviderType( 
            /* [in] */ long lAuthProvType) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_AuthenticationProviderName( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrAuthProvName) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_AuthenticationProviderName( 
            /* [in] */ __RPC__in BSTR bstrAuthProvName) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_SenderId( 
            /* [in] */ VARIANT varSenderId) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_MsgClass( 
            /* [retval][out] */ __RPC__out long *plMsgClass) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_MsgClass( 
            /* [in] */ long lMsgClass) = 0;
        
        virtual /* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE get_Properties( 
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppcolProperties) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_TransactionId( 
            /* [retval][out] */ __RPC__out VARIANT *pvarXactId) = 0;
        
        virtual /* [id][propget][helpstringcontext][hidden] */ HRESULT STDMETHODCALLTYPE get_IsFirstInTransaction( 
            /* [retval][out] */ __RPC__out Boolean *pisFirstInXact) = 0;
        
        virtual /* [id][propget][helpstringcontext][hidden] */ HRESULT STDMETHODCALLTYPE get_IsLastInTransaction( 
            /* [retval][out] */ __RPC__out Boolean *pisLastInXact) = 0;
        
        virtual /* [hidden][id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_ResponseQueueInfo_v2( 
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo2 **ppqinfoResponse) = 0;
        
        virtual /* [hidden][id][propputref][helpstringcontext] */ HRESULT STDMETHODCALLTYPE putref_ResponseQueueInfo_v2( 
            /* [in] */ __RPC__in_opt IMSMQQueueInfo2 *pqinfoResponse) = 0;
        
        virtual /* [hidden][id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_AdminQueueInfo_v2( 
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo2 **ppqinfoAdmin) = 0;
        
        virtual /* [hidden][id][propputref][helpstringcontext] */ HRESULT STDMETHODCALLTYPE putref_AdminQueueInfo_v2( 
            /* [in] */ __RPC__in_opt IMSMQQueueInfo2 *pqinfoAdmin) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_ReceivedAuthenticationLevel( 
            /* [retval][out] */ __RPC__out short *psReceivedAuthenticationLevel) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_ResponseQueueInfo( 
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo3 **ppqinfoResponse) = 0;
        
        virtual /* [id][propputref][helpstringcontext] */ HRESULT STDMETHODCALLTYPE putref_ResponseQueueInfo( 
            /* [in] */ __RPC__in_opt IMSMQQueueInfo3 *pqinfoResponse) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_AdminQueueInfo( 
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo3 **ppqinfoAdmin) = 0;
        
        virtual /* [id][propputref][helpstringcontext] */ HRESULT STDMETHODCALLTYPE putref_AdminQueueInfo( 
            /* [in] */ __RPC__in_opt IMSMQQueueInfo3 *pqinfoAdmin) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_ResponseDestination( 
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppdestResponse) = 0;
        
        virtual /* [id][propputref][helpstringcontext] */ HRESULT STDMETHODCALLTYPE putref_ResponseDestination( 
            /* [in] */ __RPC__in_opt IDispatch *pdestResponse) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Destination( 
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppdestDestination) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_LookupId( 
            /* [retval][out] */ __RPC__out VARIANT *pvarLookupId) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_IsAuthenticated2( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pisAuthenticated) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_IsFirstInTransaction2( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pisFirstInXact) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_IsLastInTransaction2( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pisLastInXact) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE AttachCurrentSecurityContext2( void) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_SoapEnvelope( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrSoapEnvelope) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_CompoundMessage( 
            /* [retval][out] */ __RPC__out VARIANT *pvarCompoundMessage) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_SoapHeader( 
            /* [in] */ __RPC__in BSTR bstrSoapHeader) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_SoapBody( 
            /* [in] */ __RPC__in BSTR bstrSoapBody) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSMQMessage3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMSMQMessage3 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMSMQMessage3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMSMQMessage3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IMSMQMessage3 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IMSMQMessage3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IMSMQMessage3 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSMQMessage3 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget][hidden][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Class )( 
            __RPC__in IMSMQMessage3 * This,
            /* [retval][out] */ __RPC__out long *plClass);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_PrivLevel )( 
            __RPC__in IMSMQMessage3 * This,
            /* [retval][out] */ __RPC__out long *plPrivLevel);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_PrivLevel )( 
            __RPC__in IMSMQMessage3 * This,
            /* [in] */ long lPrivLevel);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_AuthLevel )( 
            __RPC__in IMSMQMessage3 * This,
            /* [retval][out] */ __RPC__out long *plAuthLevel);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_AuthLevel )( 
            __RPC__in IMSMQMessage3 * This,
            /* [in] */ long lAuthLevel);
        
        /* [id][propget][helpstringcontext][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_IsAuthenticated )( 
            __RPC__in IMSMQMessage3 * This,
            /* [retval][out] */ __RPC__out Boolean *pisAuthenticated);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Delivery )( 
            __RPC__in IMSMQMessage3 * This,
            /* [retval][out] */ __RPC__out long *plDelivery);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_Delivery )( 
            __RPC__in IMSMQMessage3 * This,
            /* [in] */ long lDelivery);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Trace )( 
            __RPC__in IMSMQMessage3 * This,
            /* [retval][out] */ __RPC__out long *plTrace);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_Trace )( 
            __RPC__in IMSMQMessage3 * This,
            /* [in] */ long lTrace);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Priority )( 
            __RPC__in IMSMQMessage3 * This,
            /* [retval][out] */ __RPC__out long *plPriority);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_Priority )( 
            __RPC__in IMSMQMessage3 * This,
            /* [in] */ long lPriority);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Journal )( 
            __RPC__in IMSMQMessage3 * This,
            /* [retval][out] */ __RPC__out long *plJournal);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_Journal )( 
            __RPC__in IMSMQMessage3 * This,
            /* [in] */ long lJournal);
        
        /* [hidden][id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_ResponseQueueInfo_v1 )( 
            __RPC__in IMSMQMessage3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo **ppqinfoResponse);
        
        /* [hidden][id][propputref][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *putref_ResponseQueueInfo_v1 )( 
            __RPC__in IMSMQMessage3 * This,
            /* [in] */ __RPC__in_opt IMSMQQueueInfo *pqinfoResponse);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_AppSpecific )( 
            __RPC__in IMSMQMessage3 * This,
            /* [retval][out] */ __RPC__out long *plAppSpecific);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_AppSpecific )( 
            __RPC__in IMSMQMessage3 * This,
            /* [in] */ long lAppSpecific);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_SourceMachineGuid )( 
            __RPC__in IMSMQMessage3 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrGuidSrcMachine);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_BodyLength )( 
            __RPC__in IMSMQMessage3 * This,
            /* [retval][out] */ __RPC__out long *pcbBody);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Body )( 
            __RPC__in IMSMQMessage3 * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarBody);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_Body )( 
            __RPC__in IMSMQMessage3 * This,
            /* [in] */ VARIANT varBody);
        
        /* [hidden][id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_AdminQueueInfo_v1 )( 
            __RPC__in IMSMQMessage3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo **ppqinfoAdmin);
        
        /* [hidden][id][propputref][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *putref_AdminQueueInfo_v1 )( 
            __RPC__in IMSMQMessage3 * This,
            /* [in] */ __RPC__in_opt IMSMQQueueInfo *pqinfoAdmin);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Id )( 
            __RPC__in IMSMQMessage3 * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarMsgId);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_CorrelationId )( 
            __RPC__in IMSMQMessage3 * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarMsgId);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_CorrelationId )( 
            __RPC__in IMSMQMessage3 * This,
            /* [in] */ VARIANT varMsgId);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Ack )( 
            __RPC__in IMSMQMessage3 * This,
            /* [retval][out] */ __RPC__out long *plAck);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_Ack )( 
            __RPC__in IMSMQMessage3 * This,
            /* [in] */ long lAck);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Label )( 
            __RPC__in IMSMQMessage3 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrLabel);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_Label )( 
            __RPC__in IMSMQMessage3 * This,
            /* [in] */ __RPC__in BSTR bstrLabel);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_MaxTimeToReachQueue )( 
            __RPC__in IMSMQMessage3 * This,
            /* [retval][out] */ __RPC__out long *plMaxTimeToReachQueue);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_MaxTimeToReachQueue )( 
            __RPC__in IMSMQMessage3 * This,
            /* [in] */ long lMaxTimeToReachQueue);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_MaxTimeToReceive )( 
            __RPC__in IMSMQMessage3 * This,
            /* [retval][out] */ __RPC__out long *plMaxTimeToReceive);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_MaxTimeToReceive )( 
            __RPC__in IMSMQMessage3 * This,
            /* [in] */ long lMaxTimeToReceive);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_HashAlgorithm )( 
            __RPC__in IMSMQMessage3 * This,
            /* [retval][out] */ __RPC__out long *plHashAlg);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_HashAlgorithm )( 
            __RPC__in IMSMQMessage3 * This,
            /* [in] */ long lHashAlg);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_EncryptAlgorithm )( 
            __RPC__in IMSMQMessage3 * This,
            /* [retval][out] */ __RPC__out long *plEncryptAlg);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_EncryptAlgorithm )( 
            __RPC__in IMSMQMessage3 * This,
            /* [in] */ long lEncryptAlg);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_SentTime )( 
            __RPC__in IMSMQMessage3 * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarSentTime);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_ArrivedTime )( 
            __RPC__in IMSMQMessage3 * This,
            /* [retval][out] */ __RPC__out VARIANT *plArrivedTime);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_DestinationQueueInfo )( 
            __RPC__in IMSMQMessage3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo3 **ppqinfoDest);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_SenderCertificate )( 
            __RPC__in IMSMQMessage3 * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarSenderCert);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_SenderCertificate )( 
            __RPC__in IMSMQMessage3 * This,
            /* [in] */ VARIANT varSenderCert);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_SenderId )( 
            __RPC__in IMSMQMessage3 * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarSenderId);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_SenderIdType )( 
            __RPC__in IMSMQMessage3 * This,
            /* [retval][out] */ __RPC__out long *plSenderIdType);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_SenderIdType )( 
            __RPC__in IMSMQMessage3 * This,
            /* [in] */ long lSenderIdType);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Send )( 
            __RPC__in IMSMQMessage3 * This,
            /* [in] */ __RPC__in_opt IDispatch *DestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *Transaction);
        
        /* [helpstringcontext][hidden] */ HRESULT ( STDMETHODCALLTYPE *AttachCurrentSecurityContext )( 
            __RPC__in IMSMQMessage3 * This);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_SenderVersion )( 
            __RPC__in IMSMQMessage3 * This,
            /* [retval][out] */ __RPC__out long *plSenderVersion);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Extension )( 
            __RPC__in IMSMQMessage3 * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarExtension);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_Extension )( 
            __RPC__in IMSMQMessage3 * This,
            /* [in] */ VARIANT varExtension);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_ConnectorTypeGuid )( 
            __RPC__in IMSMQMessage3 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrGuidConnectorType);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_ConnectorTypeGuid )( 
            __RPC__in IMSMQMessage3 * This,
            /* [in] */ __RPC__in BSTR bstrGuidConnectorType);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_TransactionStatusQueueInfo )( 
            __RPC__in IMSMQMessage3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo3 **ppqinfoXactStatus);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_DestinationSymmetricKey )( 
            __RPC__in IMSMQMessage3 * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarDestSymmKey);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_DestinationSymmetricKey )( 
            __RPC__in IMSMQMessage3 * This,
            /* [in] */ VARIANT varDestSymmKey);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Signature )( 
            __RPC__in IMSMQMessage3 * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarSignature);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_Signature )( 
            __RPC__in IMSMQMessage3 * This,
            /* [in] */ VARIANT varSignature);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_AuthenticationProviderType )( 
            __RPC__in IMSMQMessage3 * This,
            /* [retval][out] */ __RPC__out long *plAuthProvType);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_AuthenticationProviderType )( 
            __RPC__in IMSMQMessage3 * This,
            /* [in] */ long lAuthProvType);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_AuthenticationProviderName )( 
            __RPC__in IMSMQMessage3 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrAuthProvName);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_AuthenticationProviderName )( 
            __RPC__in IMSMQMessage3 * This,
            /* [in] */ __RPC__in BSTR bstrAuthProvName);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_SenderId )( 
            __RPC__in IMSMQMessage3 * This,
            /* [in] */ VARIANT varSenderId);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_MsgClass )( 
            __RPC__in IMSMQMessage3 * This,
            /* [retval][out] */ __RPC__out long *plMsgClass);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_MsgClass )( 
            __RPC__in IMSMQMessage3 * This,
            /* [in] */ long lMsgClass);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            __RPC__in IMSMQMessage3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppcolProperties);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_TransactionId )( 
            __RPC__in IMSMQMessage3 * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarXactId);
        
        /* [id][propget][helpstringcontext][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_IsFirstInTransaction )( 
            __RPC__in IMSMQMessage3 * This,
            /* [retval][out] */ __RPC__out Boolean *pisFirstInXact);
        
        /* [id][propget][helpstringcontext][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_IsLastInTransaction )( 
            __RPC__in IMSMQMessage3 * This,
            /* [retval][out] */ __RPC__out Boolean *pisLastInXact);
        
        /* [hidden][id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_ResponseQueueInfo_v2 )( 
            __RPC__in IMSMQMessage3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo2 **ppqinfoResponse);
        
        /* [hidden][id][propputref][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *putref_ResponseQueueInfo_v2 )( 
            __RPC__in IMSMQMessage3 * This,
            /* [in] */ __RPC__in_opt IMSMQQueueInfo2 *pqinfoResponse);
        
        /* [hidden][id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_AdminQueueInfo_v2 )( 
            __RPC__in IMSMQMessage3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo2 **ppqinfoAdmin);
        
        /* [hidden][id][propputref][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *putref_AdminQueueInfo_v2 )( 
            __RPC__in IMSMQMessage3 * This,
            /* [in] */ __RPC__in_opt IMSMQQueueInfo2 *pqinfoAdmin);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_ReceivedAuthenticationLevel )( 
            __RPC__in IMSMQMessage3 * This,
            /* [retval][out] */ __RPC__out short *psReceivedAuthenticationLevel);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_ResponseQueueInfo )( 
            __RPC__in IMSMQMessage3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo3 **ppqinfoResponse);
        
        /* [id][propputref][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *putref_ResponseQueueInfo )( 
            __RPC__in IMSMQMessage3 * This,
            /* [in] */ __RPC__in_opt IMSMQQueueInfo3 *pqinfoResponse);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_AdminQueueInfo )( 
            __RPC__in IMSMQMessage3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo3 **ppqinfoAdmin);
        
        /* [id][propputref][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *putref_AdminQueueInfo )( 
            __RPC__in IMSMQMessage3 * This,
            /* [in] */ __RPC__in_opt IMSMQQueueInfo3 *pqinfoAdmin);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_ResponseDestination )( 
            __RPC__in IMSMQMessage3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppdestResponse);
        
        /* [id][propputref][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *putref_ResponseDestination )( 
            __RPC__in IMSMQMessage3 * This,
            /* [in] */ __RPC__in_opt IDispatch *pdestResponse);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Destination )( 
            __RPC__in IMSMQMessage3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppdestDestination);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_LookupId )( 
            __RPC__in IMSMQMessage3 * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarLookupId);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_IsAuthenticated2 )( 
            __RPC__in IMSMQMessage3 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pisAuthenticated);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_IsFirstInTransaction2 )( 
            __RPC__in IMSMQMessage3 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pisFirstInXact);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_IsLastInTransaction2 )( 
            __RPC__in IMSMQMessage3 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pisLastInXact);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *AttachCurrentSecurityContext2 )( 
            __RPC__in IMSMQMessage3 * This);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_SoapEnvelope )( 
            __RPC__in IMSMQMessage3 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrSoapEnvelope);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_CompoundMessage )( 
            __RPC__in IMSMQMessage3 * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarCompoundMessage);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_SoapHeader )( 
            __RPC__in IMSMQMessage3 * This,
            /* [in] */ __RPC__in BSTR bstrSoapHeader);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_SoapBody )( 
            __RPC__in IMSMQMessage3 * This,
            /* [in] */ __RPC__in BSTR bstrSoapBody);
        
        END_INTERFACE
    } IMSMQMessage3Vtbl;

    interface IMSMQMessage3
    {
        CONST_VTBL struct IMSMQMessage3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSMQMessage3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSMQMessage3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSMQMessage3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSMQMessage3_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSMQMessage3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSMQMessage3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSMQMessage3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSMQMessage3_get_Class(This,plClass)	\
    ( (This)->lpVtbl -> get_Class(This,plClass) ) 

#define IMSMQMessage3_get_PrivLevel(This,plPrivLevel)	\
    ( (This)->lpVtbl -> get_PrivLevel(This,plPrivLevel) ) 

#define IMSMQMessage3_put_PrivLevel(This,lPrivLevel)	\
    ( (This)->lpVtbl -> put_PrivLevel(This,lPrivLevel) ) 

#define IMSMQMessage3_get_AuthLevel(This,plAuthLevel)	\
    ( (This)->lpVtbl -> get_AuthLevel(This,plAuthLevel) ) 

#define IMSMQMessage3_put_AuthLevel(This,lAuthLevel)	\
    ( (This)->lpVtbl -> put_AuthLevel(This,lAuthLevel) ) 

#define IMSMQMessage3_get_IsAuthenticated(This,pisAuthenticated)	\
    ( (This)->lpVtbl -> get_IsAuthenticated(This,pisAuthenticated) ) 

#define IMSMQMessage3_get_Delivery(This,plDelivery)	\
    ( (This)->lpVtbl -> get_Delivery(This,plDelivery) ) 

#define IMSMQMessage3_put_Delivery(This,lDelivery)	\
    ( (This)->lpVtbl -> put_Delivery(This,lDelivery) ) 

#define IMSMQMessage3_get_Trace(This,plTrace)	\
    ( (This)->lpVtbl -> get_Trace(This,plTrace) ) 

#define IMSMQMessage3_put_Trace(This,lTrace)	\
    ( (This)->lpVtbl -> put_Trace(This,lTrace) ) 

#define IMSMQMessage3_get_Priority(This,plPriority)	\
    ( (This)->lpVtbl -> get_Priority(This,plPriority) ) 

#define IMSMQMessage3_put_Priority(This,lPriority)	\
    ( (This)->lpVtbl -> put_Priority(This,lPriority) ) 

#define IMSMQMessage3_get_Journal(This,plJournal)	\
    ( (This)->lpVtbl -> get_Journal(This,plJournal) ) 

#define IMSMQMessage3_put_Journal(This,lJournal)	\
    ( (This)->lpVtbl -> put_Journal(This,lJournal) ) 

#define IMSMQMessage3_get_ResponseQueueInfo_v1(This,ppqinfoResponse)	\
    ( (This)->lpVtbl -> get_ResponseQueueInfo_v1(This,ppqinfoResponse) ) 

#define IMSMQMessage3_putref_ResponseQueueInfo_v1(This,pqinfoResponse)	\
    ( (This)->lpVtbl -> putref_ResponseQueueInfo_v1(This,pqinfoResponse) ) 

#define IMSMQMessage3_get_AppSpecific(This,plAppSpecific)	\
    ( (This)->lpVtbl -> get_AppSpecific(This,plAppSpecific) ) 

#define IMSMQMessage3_put_AppSpecific(This,lAppSpecific)	\
    ( (This)->lpVtbl -> put_AppSpecific(This,lAppSpecific) ) 

#define IMSMQMessage3_get_SourceMachineGuid(This,pbstrGuidSrcMachine)	\
    ( (This)->lpVtbl -> get_SourceMachineGuid(This,pbstrGuidSrcMachine) ) 

#define IMSMQMessage3_get_BodyLength(This,pcbBody)	\
    ( (This)->lpVtbl -> get_BodyLength(This,pcbBody) ) 

#define IMSMQMessage3_get_Body(This,pvarBody)	\
    ( (This)->lpVtbl -> get_Body(This,pvarBody) ) 

#define IMSMQMessage3_put_Body(This,varBody)	\
    ( (This)->lpVtbl -> put_Body(This,varBody) ) 

#define IMSMQMessage3_get_AdminQueueInfo_v1(This,ppqinfoAdmin)	\
    ( (This)->lpVtbl -> get_AdminQueueInfo_v1(This,ppqinfoAdmin) ) 

#define IMSMQMessage3_putref_AdminQueueInfo_v1(This,pqinfoAdmin)	\
    ( (This)->lpVtbl -> putref_AdminQueueInfo_v1(This,pqinfoAdmin) ) 

#define IMSMQMessage3_get_Id(This,pvarMsgId)	\
    ( (This)->lpVtbl -> get_Id(This,pvarMsgId) ) 

#define IMSMQMessage3_get_CorrelationId(This,pvarMsgId)	\
    ( (This)->lpVtbl -> get_CorrelationId(This,pvarMsgId) ) 

#define IMSMQMessage3_put_CorrelationId(This,varMsgId)	\
    ( (This)->lpVtbl -> put_CorrelationId(This,varMsgId) ) 

#define IMSMQMessage3_get_Ack(This,plAck)	\
    ( (This)->lpVtbl -> get_Ack(This,plAck) ) 

#define IMSMQMessage3_put_Ack(This,lAck)	\
    ( (This)->lpVtbl -> put_Ack(This,lAck) ) 

#define IMSMQMessage3_get_Label(This,pbstrLabel)	\
    ( (This)->lpVtbl -> get_Label(This,pbstrLabel) ) 

#define IMSMQMessage3_put_Label(This,bstrLabel)	\
    ( (This)->lpVtbl -> put_Label(This,bstrLabel) ) 

#define IMSMQMessage3_get_MaxTimeToReachQueue(This,plMaxTimeToReachQueue)	\
    ( (This)->lpVtbl -> get_MaxTimeToReachQueue(This,plMaxTimeToReachQueue) ) 

#define IMSMQMessage3_put_MaxTimeToReachQueue(This,lMaxTimeToReachQueue)	\
    ( (This)->lpVtbl -> put_MaxTimeToReachQueue(This,lMaxTimeToReachQueue) ) 

#define IMSMQMessage3_get_MaxTimeToReceive(This,plMaxTimeToReceive)	\
    ( (This)->lpVtbl -> get_MaxTimeToReceive(This,plMaxTimeToReceive) ) 

#define IMSMQMessage3_put_MaxTimeToReceive(This,lMaxTimeToReceive)	\
    ( (This)->lpVtbl -> put_MaxTimeToReceive(This,lMaxTimeToReceive) ) 

#define IMSMQMessage3_get_HashAlgorithm(This,plHashAlg)	\
    ( (This)->lpVtbl -> get_HashAlgorithm(This,plHashAlg) ) 

#define IMSMQMessage3_put_HashAlgorithm(This,lHashAlg)	\
    ( (This)->lpVtbl -> put_HashAlgorithm(This,lHashAlg) ) 

#define IMSMQMessage3_get_EncryptAlgorithm(This,plEncryptAlg)	\
    ( (This)->lpVtbl -> get_EncryptAlgorithm(This,plEncryptAlg) ) 

#define IMSMQMessage3_put_EncryptAlgorithm(This,lEncryptAlg)	\
    ( (This)->lpVtbl -> put_EncryptAlgorithm(This,lEncryptAlg) ) 

#define IMSMQMessage3_get_SentTime(This,pvarSentTime)	\
    ( (This)->lpVtbl -> get_SentTime(This,pvarSentTime) ) 

#define IMSMQMessage3_get_ArrivedTime(This,plArrivedTime)	\
    ( (This)->lpVtbl -> get_ArrivedTime(This,plArrivedTime) ) 

#define IMSMQMessage3_get_DestinationQueueInfo(This,ppqinfoDest)	\
    ( (This)->lpVtbl -> get_DestinationQueueInfo(This,ppqinfoDest) ) 

#define IMSMQMessage3_get_SenderCertificate(This,pvarSenderCert)	\
    ( (This)->lpVtbl -> get_SenderCertificate(This,pvarSenderCert) ) 

#define IMSMQMessage3_put_SenderCertificate(This,varSenderCert)	\
    ( (This)->lpVtbl -> put_SenderCertificate(This,varSenderCert) ) 

#define IMSMQMessage3_get_SenderId(This,pvarSenderId)	\
    ( (This)->lpVtbl -> get_SenderId(This,pvarSenderId) ) 

#define IMSMQMessage3_get_SenderIdType(This,plSenderIdType)	\
    ( (This)->lpVtbl -> get_SenderIdType(This,plSenderIdType) ) 

#define IMSMQMessage3_put_SenderIdType(This,lSenderIdType)	\
    ( (This)->lpVtbl -> put_SenderIdType(This,lSenderIdType) ) 

#define IMSMQMessage3_Send(This,DestinationQueue,Transaction)	\
    ( (This)->lpVtbl -> Send(This,DestinationQueue,Transaction) ) 

#define IMSMQMessage3_AttachCurrentSecurityContext(This)	\
    ( (This)->lpVtbl -> AttachCurrentSecurityContext(This) ) 

#define IMSMQMessage3_get_SenderVersion(This,plSenderVersion)	\
    ( (This)->lpVtbl -> get_SenderVersion(This,plSenderVersion) ) 

#define IMSMQMessage3_get_Extension(This,pvarExtension)	\
    ( (This)->lpVtbl -> get_Extension(This,pvarExtension) ) 

#define IMSMQMessage3_put_Extension(This,varExtension)	\
    ( (This)->lpVtbl -> put_Extension(This,varExtension) ) 

#define IMSMQMessage3_get_ConnectorTypeGuid(This,pbstrGuidConnectorType)	\
    ( (This)->lpVtbl -> get_ConnectorTypeGuid(This,pbstrGuidConnectorType) ) 

#define IMSMQMessage3_put_ConnectorTypeGuid(This,bstrGuidConnectorType)	\
    ( (This)->lpVtbl -> put_ConnectorTypeGuid(This,bstrGuidConnectorType) ) 

#define IMSMQMessage3_get_TransactionStatusQueueInfo(This,ppqinfoXactStatus)	\
    ( (This)->lpVtbl -> get_TransactionStatusQueueInfo(This,ppqinfoXactStatus) ) 

#define IMSMQMessage3_get_DestinationSymmetricKey(This,pvarDestSymmKey)	\
    ( (This)->lpVtbl -> get_DestinationSymmetricKey(This,pvarDestSymmKey) ) 

#define IMSMQMessage3_put_DestinationSymmetricKey(This,varDestSymmKey)	\
    ( (This)->lpVtbl -> put_DestinationSymmetricKey(This,varDestSymmKey) ) 

#define IMSMQMessage3_get_Signature(This,pvarSignature)	\
    ( (This)->lpVtbl -> get_Signature(This,pvarSignature) ) 

#define IMSMQMessage3_put_Signature(This,varSignature)	\
    ( (This)->lpVtbl -> put_Signature(This,varSignature) ) 

#define IMSMQMessage3_get_AuthenticationProviderType(This,plAuthProvType)	\
    ( (This)->lpVtbl -> get_AuthenticationProviderType(This,plAuthProvType) ) 

#define IMSMQMessage3_put_AuthenticationProviderType(This,lAuthProvType)	\
    ( (This)->lpVtbl -> put_AuthenticationProviderType(This,lAuthProvType) ) 

#define IMSMQMessage3_get_AuthenticationProviderName(This,pbstrAuthProvName)	\
    ( (This)->lpVtbl -> get_AuthenticationProviderName(This,pbstrAuthProvName) ) 

#define IMSMQMessage3_put_AuthenticationProviderName(This,bstrAuthProvName)	\
    ( (This)->lpVtbl -> put_AuthenticationProviderName(This,bstrAuthProvName) ) 

#define IMSMQMessage3_put_SenderId(This,varSenderId)	\
    ( (This)->lpVtbl -> put_SenderId(This,varSenderId) ) 

#define IMSMQMessage3_get_MsgClass(This,plMsgClass)	\
    ( (This)->lpVtbl -> get_MsgClass(This,plMsgClass) ) 

#define IMSMQMessage3_put_MsgClass(This,lMsgClass)	\
    ( (This)->lpVtbl -> put_MsgClass(This,lMsgClass) ) 

#define IMSMQMessage3_get_Properties(This,ppcolProperties)	\
    ( (This)->lpVtbl -> get_Properties(This,ppcolProperties) ) 

#define IMSMQMessage3_get_TransactionId(This,pvarXactId)	\
    ( (This)->lpVtbl -> get_TransactionId(This,pvarXactId) ) 

#define IMSMQMessage3_get_IsFirstInTransaction(This,pisFirstInXact)	\
    ( (This)->lpVtbl -> get_IsFirstInTransaction(This,pisFirstInXact) ) 

#define IMSMQMessage3_get_IsLastInTransaction(This,pisLastInXact)	\
    ( (This)->lpVtbl -> get_IsLastInTransaction(This,pisLastInXact) ) 

#define IMSMQMessage3_get_ResponseQueueInfo_v2(This,ppqinfoResponse)	\
    ( (This)->lpVtbl -> get_ResponseQueueInfo_v2(This,ppqinfoResponse) ) 

#define IMSMQMessage3_putref_ResponseQueueInfo_v2(This,pqinfoResponse)	\
    ( (This)->lpVtbl -> putref_ResponseQueueInfo_v2(This,pqinfoResponse) ) 

#define IMSMQMessage3_get_AdminQueueInfo_v2(This,ppqinfoAdmin)	\
    ( (This)->lpVtbl -> get_AdminQueueInfo_v2(This,ppqinfoAdmin) ) 

#define IMSMQMessage3_putref_AdminQueueInfo_v2(This,pqinfoAdmin)	\
    ( (This)->lpVtbl -> putref_AdminQueueInfo_v2(This,pqinfoAdmin) ) 

#define IMSMQMessage3_get_ReceivedAuthenticationLevel(This,psReceivedAuthenticationLevel)	\
    ( (This)->lpVtbl -> get_ReceivedAuthenticationLevel(This,psReceivedAuthenticationLevel) ) 

#define IMSMQMessage3_get_ResponseQueueInfo(This,ppqinfoResponse)	\
    ( (This)->lpVtbl -> get_ResponseQueueInfo(This,ppqinfoResponse) ) 

#define IMSMQMessage3_putref_ResponseQueueInfo(This,pqinfoResponse)	\
    ( (This)->lpVtbl -> putref_ResponseQueueInfo(This,pqinfoResponse) ) 

#define IMSMQMessage3_get_AdminQueueInfo(This,ppqinfoAdmin)	\
    ( (This)->lpVtbl -> get_AdminQueueInfo(This,ppqinfoAdmin) ) 

#define IMSMQMessage3_putref_AdminQueueInfo(This,pqinfoAdmin)	\
    ( (This)->lpVtbl -> putref_AdminQueueInfo(This,pqinfoAdmin) ) 

#define IMSMQMessage3_get_ResponseDestination(This,ppdestResponse)	\
    ( (This)->lpVtbl -> get_ResponseDestination(This,ppdestResponse) ) 

#define IMSMQMessage3_putref_ResponseDestination(This,pdestResponse)	\
    ( (This)->lpVtbl -> putref_ResponseDestination(This,pdestResponse) ) 

#define IMSMQMessage3_get_Destination(This,ppdestDestination)	\
    ( (This)->lpVtbl -> get_Destination(This,ppdestDestination) ) 

#define IMSMQMessage3_get_LookupId(This,pvarLookupId)	\
    ( (This)->lpVtbl -> get_LookupId(This,pvarLookupId) ) 

#define IMSMQMessage3_get_IsAuthenticated2(This,pisAuthenticated)	\
    ( (This)->lpVtbl -> get_IsAuthenticated2(This,pisAuthenticated) ) 

#define IMSMQMessage3_get_IsFirstInTransaction2(This,pisFirstInXact)	\
    ( (This)->lpVtbl -> get_IsFirstInTransaction2(This,pisFirstInXact) ) 

#define IMSMQMessage3_get_IsLastInTransaction2(This,pisLastInXact)	\
    ( (This)->lpVtbl -> get_IsLastInTransaction2(This,pisLastInXact) ) 

#define IMSMQMessage3_AttachCurrentSecurityContext2(This)	\
    ( (This)->lpVtbl -> AttachCurrentSecurityContext2(This) ) 

#define IMSMQMessage3_get_SoapEnvelope(This,pbstrSoapEnvelope)	\
    ( (This)->lpVtbl -> get_SoapEnvelope(This,pbstrSoapEnvelope) ) 

#define IMSMQMessage3_get_CompoundMessage(This,pvarCompoundMessage)	\
    ( (This)->lpVtbl -> get_CompoundMessage(This,pvarCompoundMessage) ) 

#define IMSMQMessage3_put_SoapHeader(This,bstrSoapHeader)	\
    ( (This)->lpVtbl -> put_SoapHeader(This,bstrSoapHeader) ) 

#define IMSMQMessage3_put_SoapBody(This,bstrSoapBody)	\
    ( (This)->lpVtbl -> put_SoapBody(This,bstrSoapBody) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSMQMessage3_INTERFACE_DEFINED__ */


#ifndef __IMSMQMessage4_INTERFACE_DEFINED__
#define __IMSMQMessage4_INTERFACE_DEFINED__

/* interface IMSMQMessage4 */
/* [object][dual][hidden][helpstringcontext][uuid] */ 


EXTERN_C const IID IID_IMSMQMessage4;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("eba96b23-2168-11d3-898c-00e02c074f6b")
    IMSMQMessage4 : public IDispatch
    {
    public:
        virtual /* [id][propget][hidden][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Class( 
            /* [retval][out] */ __RPC__out long *plClass) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_PrivLevel( 
            /* [retval][out] */ __RPC__out long *plPrivLevel) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_PrivLevel( 
            /* [in] */ long lPrivLevel) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_AuthLevel( 
            /* [retval][out] */ __RPC__out long *plAuthLevel) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_AuthLevel( 
            /* [in] */ long lAuthLevel) = 0;
        
        virtual /* [id][propget][helpstringcontext][hidden] */ HRESULT STDMETHODCALLTYPE get_IsAuthenticated( 
            /* [retval][out] */ __RPC__out Boolean *pisAuthenticated) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Delivery( 
            /* [retval][out] */ __RPC__out long *plDelivery) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_Delivery( 
            /* [in] */ long lDelivery) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Trace( 
            /* [retval][out] */ __RPC__out long *plTrace) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_Trace( 
            /* [in] */ long lTrace) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Priority( 
            /* [retval][out] */ __RPC__out long *plPriority) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_Priority( 
            /* [in] */ long lPriority) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Journal( 
            /* [retval][out] */ __RPC__out long *plJournal) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_Journal( 
            /* [in] */ long lJournal) = 0;
        
        virtual /* [hidden][id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_ResponseQueueInfo_v1( 
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo **ppqinfoResponse) = 0;
        
        virtual /* [hidden][id][propputref][helpstringcontext] */ HRESULT STDMETHODCALLTYPE putref_ResponseQueueInfo_v1( 
            /* [in] */ __RPC__in_opt IMSMQQueueInfo *pqinfoResponse) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_AppSpecific( 
            /* [retval][out] */ __RPC__out long *plAppSpecific) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_AppSpecific( 
            /* [in] */ long lAppSpecific) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_SourceMachineGuid( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrGuidSrcMachine) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_BodyLength( 
            /* [retval][out] */ __RPC__out long *pcbBody) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Body( 
            /* [retval][out] */ __RPC__out VARIANT *pvarBody) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_Body( 
            /* [in] */ VARIANT varBody) = 0;
        
        virtual /* [hidden][id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_AdminQueueInfo_v1( 
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo **ppqinfoAdmin) = 0;
        
        virtual /* [hidden][id][propputref][helpstringcontext] */ HRESULT STDMETHODCALLTYPE putref_AdminQueueInfo_v1( 
            /* [in] */ __RPC__in_opt IMSMQQueueInfo *pqinfoAdmin) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Id( 
            /* [retval][out] */ __RPC__out VARIANT *pvarMsgId) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_CorrelationId( 
            /* [retval][out] */ __RPC__out VARIANT *pvarMsgId) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_CorrelationId( 
            /* [in] */ VARIANT varMsgId) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Ack( 
            /* [retval][out] */ __RPC__out long *plAck) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_Ack( 
            /* [in] */ long lAck) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Label( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrLabel) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_Label( 
            /* [in] */ __RPC__in BSTR bstrLabel) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_MaxTimeToReachQueue( 
            /* [retval][out] */ __RPC__out long *plMaxTimeToReachQueue) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_MaxTimeToReachQueue( 
            /* [in] */ long lMaxTimeToReachQueue) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_MaxTimeToReceive( 
            /* [retval][out] */ __RPC__out long *plMaxTimeToReceive) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_MaxTimeToReceive( 
            /* [in] */ long lMaxTimeToReceive) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_HashAlgorithm( 
            /* [retval][out] */ __RPC__out long *plHashAlg) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_HashAlgorithm( 
            /* [in] */ long lHashAlg) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_EncryptAlgorithm( 
            /* [retval][out] */ __RPC__out long *plEncryptAlg) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_EncryptAlgorithm( 
            /* [in] */ long lEncryptAlg) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_SentTime( 
            /* [retval][out] */ __RPC__out VARIANT *pvarSentTime) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_ArrivedTime( 
            /* [retval][out] */ __RPC__out VARIANT *plArrivedTime) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_DestinationQueueInfo( 
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo4 **ppqinfoDest) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_SenderCertificate( 
            /* [retval][out] */ __RPC__out VARIANT *pvarSenderCert) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_SenderCertificate( 
            /* [in] */ VARIANT varSenderCert) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_SenderId( 
            /* [retval][out] */ __RPC__out VARIANT *pvarSenderId) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_SenderIdType( 
            /* [retval][out] */ __RPC__out long *plSenderIdType) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_SenderIdType( 
            /* [in] */ long lSenderIdType) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Send( 
            /* [in] */ __RPC__in_opt IDispatch *DestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *Transaction) = 0;
        
        virtual /* [helpstringcontext][hidden] */ HRESULT STDMETHODCALLTYPE AttachCurrentSecurityContext( void) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_SenderVersion( 
            /* [retval][out] */ __RPC__out long *plSenderVersion) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Extension( 
            /* [retval][out] */ __RPC__out VARIANT *pvarExtension) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_Extension( 
            /* [in] */ VARIANT varExtension) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_ConnectorTypeGuid( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrGuidConnectorType) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_ConnectorTypeGuid( 
            /* [in] */ __RPC__in BSTR bstrGuidConnectorType) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_TransactionStatusQueueInfo( 
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo4 **ppqinfoXactStatus) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_DestinationSymmetricKey( 
            /* [retval][out] */ __RPC__out VARIANT *pvarDestSymmKey) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_DestinationSymmetricKey( 
            /* [in] */ VARIANT varDestSymmKey) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Signature( 
            /* [retval][out] */ __RPC__out VARIANT *pvarSignature) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_Signature( 
            /* [in] */ VARIANT varSignature) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_AuthenticationProviderType( 
            /* [retval][out] */ __RPC__out long *plAuthProvType) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_AuthenticationProviderType( 
            /* [in] */ long lAuthProvType) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_AuthenticationProviderName( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrAuthProvName) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_AuthenticationProviderName( 
            /* [in] */ __RPC__in BSTR bstrAuthProvName) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_SenderId( 
            /* [in] */ VARIANT varSenderId) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_MsgClass( 
            /* [retval][out] */ __RPC__out long *plMsgClass) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_MsgClass( 
            /* [in] */ long lMsgClass) = 0;
        
        virtual /* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE get_Properties( 
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppcolProperties) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_TransactionId( 
            /* [retval][out] */ __RPC__out VARIANT *pvarXactId) = 0;
        
        virtual /* [id][propget][helpstringcontext][hidden] */ HRESULT STDMETHODCALLTYPE get_IsFirstInTransaction( 
            /* [retval][out] */ __RPC__out Boolean *pisFirstInXact) = 0;
        
        virtual /* [id][propget][helpstringcontext][hidden] */ HRESULT STDMETHODCALLTYPE get_IsLastInTransaction( 
            /* [retval][out] */ __RPC__out Boolean *pisLastInXact) = 0;
        
        virtual /* [hidden][id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_ResponseQueueInfo_v2( 
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo2 **ppqinfoResponse) = 0;
        
        virtual /* [hidden][id][propputref][helpstringcontext] */ HRESULT STDMETHODCALLTYPE putref_ResponseQueueInfo_v2( 
            /* [in] */ __RPC__in_opt IMSMQQueueInfo2 *pqinfoResponse) = 0;
        
        virtual /* [hidden][id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_AdminQueueInfo_v2( 
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo2 **ppqinfoAdmin) = 0;
        
        virtual /* [hidden][id][propputref][helpstringcontext] */ HRESULT STDMETHODCALLTYPE putref_AdminQueueInfo_v2( 
            /* [in] */ __RPC__in_opt IMSMQQueueInfo2 *pqinfoAdmin) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_ReceivedAuthenticationLevel( 
            /* [retval][out] */ __RPC__out short *psReceivedAuthenticationLevel) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_ResponseQueueInfo( 
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo4 **ppqinfoResponse) = 0;
        
        virtual /* [id][propputref][helpstringcontext] */ HRESULT STDMETHODCALLTYPE putref_ResponseQueueInfo( 
            /* [in] */ __RPC__in_opt IMSMQQueueInfo4 *pqinfoResponse) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_AdminQueueInfo( 
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo4 **ppqinfoAdmin) = 0;
        
        virtual /* [id][propputref][helpstringcontext] */ HRESULT STDMETHODCALLTYPE putref_AdminQueueInfo( 
            /* [in] */ __RPC__in_opt IMSMQQueueInfo4 *pqinfoAdmin) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_ResponseDestination( 
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppdestResponse) = 0;
        
        virtual /* [id][propputref][helpstringcontext] */ HRESULT STDMETHODCALLTYPE putref_ResponseDestination( 
            /* [in] */ __RPC__in_opt IDispatch *pdestResponse) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Destination( 
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppdestDestination) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_LookupId( 
            /* [retval][out] */ __RPC__out VARIANT *pvarLookupId) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_IsAuthenticated2( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pisAuthenticated) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_IsFirstInTransaction2( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pisFirstInXact) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_IsLastInTransaction2( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pisLastInXact) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE AttachCurrentSecurityContext2( void) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_SoapEnvelope( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrSoapEnvelope) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_CompoundMessage( 
            /* [retval][out] */ __RPC__out VARIANT *pvarCompoundMessage) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_SoapHeader( 
            /* [in] */ __RPC__in BSTR bstrSoapHeader) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_SoapBody( 
            /* [in] */ __RPC__in BSTR bstrSoapBody) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSMQMessage4Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMSMQMessage4 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMSMQMessage4 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMSMQMessage4 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IMSMQMessage4 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IMSMQMessage4 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IMSMQMessage4 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSMQMessage4 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget][hidden][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Class )( 
            __RPC__in IMSMQMessage4 * This,
            /* [retval][out] */ __RPC__out long *plClass);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_PrivLevel )( 
            __RPC__in IMSMQMessage4 * This,
            /* [retval][out] */ __RPC__out long *plPrivLevel);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_PrivLevel )( 
            __RPC__in IMSMQMessage4 * This,
            /* [in] */ long lPrivLevel);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_AuthLevel )( 
            __RPC__in IMSMQMessage4 * This,
            /* [retval][out] */ __RPC__out long *plAuthLevel);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_AuthLevel )( 
            __RPC__in IMSMQMessage4 * This,
            /* [in] */ long lAuthLevel);
        
        /* [id][propget][helpstringcontext][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_IsAuthenticated )( 
            __RPC__in IMSMQMessage4 * This,
            /* [retval][out] */ __RPC__out Boolean *pisAuthenticated);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Delivery )( 
            __RPC__in IMSMQMessage4 * This,
            /* [retval][out] */ __RPC__out long *plDelivery);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_Delivery )( 
            __RPC__in IMSMQMessage4 * This,
            /* [in] */ long lDelivery);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Trace )( 
            __RPC__in IMSMQMessage4 * This,
            /* [retval][out] */ __RPC__out long *plTrace);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_Trace )( 
            __RPC__in IMSMQMessage4 * This,
            /* [in] */ long lTrace);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Priority )( 
            __RPC__in IMSMQMessage4 * This,
            /* [retval][out] */ __RPC__out long *plPriority);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_Priority )( 
            __RPC__in IMSMQMessage4 * This,
            /* [in] */ long lPriority);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Journal )( 
            __RPC__in IMSMQMessage4 * This,
            /* [retval][out] */ __RPC__out long *plJournal);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_Journal )( 
            __RPC__in IMSMQMessage4 * This,
            /* [in] */ long lJournal);
        
        /* [hidden][id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_ResponseQueueInfo_v1 )( 
            __RPC__in IMSMQMessage4 * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo **ppqinfoResponse);
        
        /* [hidden][id][propputref][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *putref_ResponseQueueInfo_v1 )( 
            __RPC__in IMSMQMessage4 * This,
            /* [in] */ __RPC__in_opt IMSMQQueueInfo *pqinfoResponse);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_AppSpecific )( 
            __RPC__in IMSMQMessage4 * This,
            /* [retval][out] */ __RPC__out long *plAppSpecific);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_AppSpecific )( 
            __RPC__in IMSMQMessage4 * This,
            /* [in] */ long lAppSpecific);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_SourceMachineGuid )( 
            __RPC__in IMSMQMessage4 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrGuidSrcMachine);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_BodyLength )( 
            __RPC__in IMSMQMessage4 * This,
            /* [retval][out] */ __RPC__out long *pcbBody);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Body )( 
            __RPC__in IMSMQMessage4 * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarBody);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_Body )( 
            __RPC__in IMSMQMessage4 * This,
            /* [in] */ VARIANT varBody);
        
        /* [hidden][id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_AdminQueueInfo_v1 )( 
            __RPC__in IMSMQMessage4 * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo **ppqinfoAdmin);
        
        /* [hidden][id][propputref][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *putref_AdminQueueInfo_v1 )( 
            __RPC__in IMSMQMessage4 * This,
            /* [in] */ __RPC__in_opt IMSMQQueueInfo *pqinfoAdmin);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Id )( 
            __RPC__in IMSMQMessage4 * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarMsgId);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_CorrelationId )( 
            __RPC__in IMSMQMessage4 * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarMsgId);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_CorrelationId )( 
            __RPC__in IMSMQMessage4 * This,
            /* [in] */ VARIANT varMsgId);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Ack )( 
            __RPC__in IMSMQMessage4 * This,
            /* [retval][out] */ __RPC__out long *plAck);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_Ack )( 
            __RPC__in IMSMQMessage4 * This,
            /* [in] */ long lAck);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Label )( 
            __RPC__in IMSMQMessage4 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrLabel);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_Label )( 
            __RPC__in IMSMQMessage4 * This,
            /* [in] */ __RPC__in BSTR bstrLabel);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_MaxTimeToReachQueue )( 
            __RPC__in IMSMQMessage4 * This,
            /* [retval][out] */ __RPC__out long *plMaxTimeToReachQueue);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_MaxTimeToReachQueue )( 
            __RPC__in IMSMQMessage4 * This,
            /* [in] */ long lMaxTimeToReachQueue);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_MaxTimeToReceive )( 
            __RPC__in IMSMQMessage4 * This,
            /* [retval][out] */ __RPC__out long *plMaxTimeToReceive);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_MaxTimeToReceive )( 
            __RPC__in IMSMQMessage4 * This,
            /* [in] */ long lMaxTimeToReceive);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_HashAlgorithm )( 
            __RPC__in IMSMQMessage4 * This,
            /* [retval][out] */ __RPC__out long *plHashAlg);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_HashAlgorithm )( 
            __RPC__in IMSMQMessage4 * This,
            /* [in] */ long lHashAlg);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_EncryptAlgorithm )( 
            __RPC__in IMSMQMessage4 * This,
            /* [retval][out] */ __RPC__out long *plEncryptAlg);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_EncryptAlgorithm )( 
            __RPC__in IMSMQMessage4 * This,
            /* [in] */ long lEncryptAlg);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_SentTime )( 
            __RPC__in IMSMQMessage4 * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarSentTime);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_ArrivedTime )( 
            __RPC__in IMSMQMessage4 * This,
            /* [retval][out] */ __RPC__out VARIANT *plArrivedTime);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_DestinationQueueInfo )( 
            __RPC__in IMSMQMessage4 * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo4 **ppqinfoDest);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_SenderCertificate )( 
            __RPC__in IMSMQMessage4 * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarSenderCert);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_SenderCertificate )( 
            __RPC__in IMSMQMessage4 * This,
            /* [in] */ VARIANT varSenderCert);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_SenderId )( 
            __RPC__in IMSMQMessage4 * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarSenderId);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_SenderIdType )( 
            __RPC__in IMSMQMessage4 * This,
            /* [retval][out] */ __RPC__out long *plSenderIdType);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_SenderIdType )( 
            __RPC__in IMSMQMessage4 * This,
            /* [in] */ long lSenderIdType);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Send )( 
            __RPC__in IMSMQMessage4 * This,
            /* [in] */ __RPC__in_opt IDispatch *DestinationQueue,
            /* [optional][in] */ __RPC__in VARIANT *Transaction);
        
        /* [helpstringcontext][hidden] */ HRESULT ( STDMETHODCALLTYPE *AttachCurrentSecurityContext )( 
            __RPC__in IMSMQMessage4 * This);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_SenderVersion )( 
            __RPC__in IMSMQMessage4 * This,
            /* [retval][out] */ __RPC__out long *plSenderVersion);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Extension )( 
            __RPC__in IMSMQMessage4 * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarExtension);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_Extension )( 
            __RPC__in IMSMQMessage4 * This,
            /* [in] */ VARIANT varExtension);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_ConnectorTypeGuid )( 
            __RPC__in IMSMQMessage4 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrGuidConnectorType);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_ConnectorTypeGuid )( 
            __RPC__in IMSMQMessage4 * This,
            /* [in] */ __RPC__in BSTR bstrGuidConnectorType);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_TransactionStatusQueueInfo )( 
            __RPC__in IMSMQMessage4 * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo4 **ppqinfoXactStatus);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_DestinationSymmetricKey )( 
            __RPC__in IMSMQMessage4 * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarDestSymmKey);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_DestinationSymmetricKey )( 
            __RPC__in IMSMQMessage4 * This,
            /* [in] */ VARIANT varDestSymmKey);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Signature )( 
            __RPC__in IMSMQMessage4 * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarSignature);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_Signature )( 
            __RPC__in IMSMQMessage4 * This,
            /* [in] */ VARIANT varSignature);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_AuthenticationProviderType )( 
            __RPC__in IMSMQMessage4 * This,
            /* [retval][out] */ __RPC__out long *plAuthProvType);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_AuthenticationProviderType )( 
            __RPC__in IMSMQMessage4 * This,
            /* [in] */ long lAuthProvType);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_AuthenticationProviderName )( 
            __RPC__in IMSMQMessage4 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrAuthProvName);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_AuthenticationProviderName )( 
            __RPC__in IMSMQMessage4 * This,
            /* [in] */ __RPC__in BSTR bstrAuthProvName);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_SenderId )( 
            __RPC__in IMSMQMessage4 * This,
            /* [in] */ VARIANT varSenderId);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_MsgClass )( 
            __RPC__in IMSMQMessage4 * This,
            /* [retval][out] */ __RPC__out long *plMsgClass);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_MsgClass )( 
            __RPC__in IMSMQMessage4 * This,
            /* [in] */ long lMsgClass);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            __RPC__in IMSMQMessage4 * This,
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppcolProperties);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_TransactionId )( 
            __RPC__in IMSMQMessage4 * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarXactId);
        
        /* [id][propget][helpstringcontext][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_IsFirstInTransaction )( 
            __RPC__in IMSMQMessage4 * This,
            /* [retval][out] */ __RPC__out Boolean *pisFirstInXact);
        
        /* [id][propget][helpstringcontext][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_IsLastInTransaction )( 
            __RPC__in IMSMQMessage4 * This,
            /* [retval][out] */ __RPC__out Boolean *pisLastInXact);
        
        /* [hidden][id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_ResponseQueueInfo_v2 )( 
            __RPC__in IMSMQMessage4 * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo2 **ppqinfoResponse);
        
        /* [hidden][id][propputref][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *putref_ResponseQueueInfo_v2 )( 
            __RPC__in IMSMQMessage4 * This,
            /* [in] */ __RPC__in_opt IMSMQQueueInfo2 *pqinfoResponse);
        
        /* [hidden][id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_AdminQueueInfo_v2 )( 
            __RPC__in IMSMQMessage4 * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo2 **ppqinfoAdmin);
        
        /* [hidden][id][propputref][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *putref_AdminQueueInfo_v2 )( 
            __RPC__in IMSMQMessage4 * This,
            /* [in] */ __RPC__in_opt IMSMQQueueInfo2 *pqinfoAdmin);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_ReceivedAuthenticationLevel )( 
            __RPC__in IMSMQMessage4 * This,
            /* [retval][out] */ __RPC__out short *psReceivedAuthenticationLevel);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_ResponseQueueInfo )( 
            __RPC__in IMSMQMessage4 * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo4 **ppqinfoResponse);
        
        /* [id][propputref][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *putref_ResponseQueueInfo )( 
            __RPC__in IMSMQMessage4 * This,
            /* [in] */ __RPC__in_opt IMSMQQueueInfo4 *pqinfoResponse);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_AdminQueueInfo )( 
            __RPC__in IMSMQMessage4 * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQQueueInfo4 **ppqinfoAdmin);
        
        /* [id][propputref][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *putref_AdminQueueInfo )( 
            __RPC__in IMSMQMessage4 * This,
            /* [in] */ __RPC__in_opt IMSMQQueueInfo4 *pqinfoAdmin);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_ResponseDestination )( 
            __RPC__in IMSMQMessage4 * This,
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppdestResponse);
        
        /* [id][propputref][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *putref_ResponseDestination )( 
            __RPC__in IMSMQMessage4 * This,
            /* [in] */ __RPC__in_opt IDispatch *pdestResponse);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Destination )( 
            __RPC__in IMSMQMessage4 * This,
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppdestDestination);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_LookupId )( 
            __RPC__in IMSMQMessage4 * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarLookupId);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_IsAuthenticated2 )( 
            __RPC__in IMSMQMessage4 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pisAuthenticated);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_IsFirstInTransaction2 )( 
            __RPC__in IMSMQMessage4 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pisFirstInXact);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_IsLastInTransaction2 )( 
            __RPC__in IMSMQMessage4 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pisLastInXact);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *AttachCurrentSecurityContext2 )( 
            __RPC__in IMSMQMessage4 * This);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_SoapEnvelope )( 
            __RPC__in IMSMQMessage4 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrSoapEnvelope);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_CompoundMessage )( 
            __RPC__in IMSMQMessage4 * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarCompoundMessage);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_SoapHeader )( 
            __RPC__in IMSMQMessage4 * This,
            /* [in] */ __RPC__in BSTR bstrSoapHeader);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_SoapBody )( 
            __RPC__in IMSMQMessage4 * This,
            /* [in] */ __RPC__in BSTR bstrSoapBody);
        
        END_INTERFACE
    } IMSMQMessage4Vtbl;

    interface IMSMQMessage4
    {
        CONST_VTBL struct IMSMQMessage4Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSMQMessage4_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSMQMessage4_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSMQMessage4_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSMQMessage4_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSMQMessage4_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSMQMessage4_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSMQMessage4_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSMQMessage4_get_Class(This,plClass)	\
    ( (This)->lpVtbl -> get_Class(This,plClass) ) 

#define IMSMQMessage4_get_PrivLevel(This,plPrivLevel)	\
    ( (This)->lpVtbl -> get_PrivLevel(This,plPrivLevel) ) 

#define IMSMQMessage4_put_PrivLevel(This,lPrivLevel)	\
    ( (This)->lpVtbl -> put_PrivLevel(This,lPrivLevel) ) 

#define IMSMQMessage4_get_AuthLevel(This,plAuthLevel)	\
    ( (This)->lpVtbl -> get_AuthLevel(This,plAuthLevel) ) 

#define IMSMQMessage4_put_AuthLevel(This,lAuthLevel)	\
    ( (This)->lpVtbl -> put_AuthLevel(This,lAuthLevel) ) 

#define IMSMQMessage4_get_IsAuthenticated(This,pisAuthenticated)	\
    ( (This)->lpVtbl -> get_IsAuthenticated(This,pisAuthenticated) ) 

#define IMSMQMessage4_get_Delivery(This,plDelivery)	\
    ( (This)->lpVtbl -> get_Delivery(This,plDelivery) ) 

#define IMSMQMessage4_put_Delivery(This,lDelivery)	\
    ( (This)->lpVtbl -> put_Delivery(This,lDelivery) ) 

#define IMSMQMessage4_get_Trace(This,plTrace)	\
    ( (This)->lpVtbl -> get_Trace(This,plTrace) ) 

#define IMSMQMessage4_put_Trace(This,lTrace)	\
    ( (This)->lpVtbl -> put_Trace(This,lTrace) ) 

#define IMSMQMessage4_get_Priority(This,plPriority)	\
    ( (This)->lpVtbl -> get_Priority(This,plPriority) ) 

#define IMSMQMessage4_put_Priority(This,lPriority)	\
    ( (This)->lpVtbl -> put_Priority(This,lPriority) ) 

#define IMSMQMessage4_get_Journal(This,plJournal)	\
    ( (This)->lpVtbl -> get_Journal(This,plJournal) ) 

#define IMSMQMessage4_put_Journal(This,lJournal)	\
    ( (This)->lpVtbl -> put_Journal(This,lJournal) ) 

#define IMSMQMessage4_get_ResponseQueueInfo_v1(This,ppqinfoResponse)	\
    ( (This)->lpVtbl -> get_ResponseQueueInfo_v1(This,ppqinfoResponse) ) 

#define IMSMQMessage4_putref_ResponseQueueInfo_v1(This,pqinfoResponse)	\
    ( (This)->lpVtbl -> putref_ResponseQueueInfo_v1(This,pqinfoResponse) ) 

#define IMSMQMessage4_get_AppSpecific(This,plAppSpecific)	\
    ( (This)->lpVtbl -> get_AppSpecific(This,plAppSpecific) ) 

#define IMSMQMessage4_put_AppSpecific(This,lAppSpecific)	\
    ( (This)->lpVtbl -> put_AppSpecific(This,lAppSpecific) ) 

#define IMSMQMessage4_get_SourceMachineGuid(This,pbstrGuidSrcMachine)	\
    ( (This)->lpVtbl -> get_SourceMachineGuid(This,pbstrGuidSrcMachine) ) 

#define IMSMQMessage4_get_BodyLength(This,pcbBody)	\
    ( (This)->lpVtbl -> get_BodyLength(This,pcbBody) ) 

#define IMSMQMessage4_get_Body(This,pvarBody)	\
    ( (This)->lpVtbl -> get_Body(This,pvarBody) ) 

#define IMSMQMessage4_put_Body(This,varBody)	\
    ( (This)->lpVtbl -> put_Body(This,varBody) ) 

#define IMSMQMessage4_get_AdminQueueInfo_v1(This,ppqinfoAdmin)	\
    ( (This)->lpVtbl -> get_AdminQueueInfo_v1(This,ppqinfoAdmin) ) 

#define IMSMQMessage4_putref_AdminQueueInfo_v1(This,pqinfoAdmin)	\
    ( (This)->lpVtbl -> putref_AdminQueueInfo_v1(This,pqinfoAdmin) ) 

#define IMSMQMessage4_get_Id(This,pvarMsgId)	\
    ( (This)->lpVtbl -> get_Id(This,pvarMsgId) ) 

#define IMSMQMessage4_get_CorrelationId(This,pvarMsgId)	\
    ( (This)->lpVtbl -> get_CorrelationId(This,pvarMsgId) ) 

#define IMSMQMessage4_put_CorrelationId(This,varMsgId)	\
    ( (This)->lpVtbl -> put_CorrelationId(This,varMsgId) ) 

#define IMSMQMessage4_get_Ack(This,plAck)	\
    ( (This)->lpVtbl -> get_Ack(This,plAck) ) 

#define IMSMQMessage4_put_Ack(This,lAck)	\
    ( (This)->lpVtbl -> put_Ack(This,lAck) ) 

#define IMSMQMessage4_get_Label(This,pbstrLabel)	\
    ( (This)->lpVtbl -> get_Label(This,pbstrLabel) ) 

#define IMSMQMessage4_put_Label(This,bstrLabel)	\
    ( (This)->lpVtbl -> put_Label(This,bstrLabel) ) 

#define IMSMQMessage4_get_MaxTimeToReachQueue(This,plMaxTimeToReachQueue)	\
    ( (This)->lpVtbl -> get_MaxTimeToReachQueue(This,plMaxTimeToReachQueue) ) 

#define IMSMQMessage4_put_MaxTimeToReachQueue(This,lMaxTimeToReachQueue)	\
    ( (This)->lpVtbl -> put_MaxTimeToReachQueue(This,lMaxTimeToReachQueue) ) 

#define IMSMQMessage4_get_MaxTimeToReceive(This,plMaxTimeToReceive)	\
    ( (This)->lpVtbl -> get_MaxTimeToReceive(This,plMaxTimeToReceive) ) 

#define IMSMQMessage4_put_MaxTimeToReceive(This,lMaxTimeToReceive)	\
    ( (This)->lpVtbl -> put_MaxTimeToReceive(This,lMaxTimeToReceive) ) 

#define IMSMQMessage4_get_HashAlgorithm(This,plHashAlg)	\
    ( (This)->lpVtbl -> get_HashAlgorithm(This,plHashAlg) ) 

#define IMSMQMessage4_put_HashAlgorithm(This,lHashAlg)	\
    ( (This)->lpVtbl -> put_HashAlgorithm(This,lHashAlg) ) 

#define IMSMQMessage4_get_EncryptAlgorithm(This,plEncryptAlg)	\
    ( (This)->lpVtbl -> get_EncryptAlgorithm(This,plEncryptAlg) ) 

#define IMSMQMessage4_put_EncryptAlgorithm(This,lEncryptAlg)	\
    ( (This)->lpVtbl -> put_EncryptAlgorithm(This,lEncryptAlg) ) 

#define IMSMQMessage4_get_SentTime(This,pvarSentTime)	\
    ( (This)->lpVtbl -> get_SentTime(This,pvarSentTime) ) 

#define IMSMQMessage4_get_ArrivedTime(This,plArrivedTime)	\
    ( (This)->lpVtbl -> get_ArrivedTime(This,plArrivedTime) ) 

#define IMSMQMessage4_get_DestinationQueueInfo(This,ppqinfoDest)	\
    ( (This)->lpVtbl -> get_DestinationQueueInfo(This,ppqinfoDest) ) 

#define IMSMQMessage4_get_SenderCertificate(This,pvarSenderCert)	\
    ( (This)->lpVtbl -> get_SenderCertificate(This,pvarSenderCert) ) 

#define IMSMQMessage4_put_SenderCertificate(This,varSenderCert)	\
    ( (This)->lpVtbl -> put_SenderCertificate(This,varSenderCert) ) 

#define IMSMQMessage4_get_SenderId(This,pvarSenderId)	\
    ( (This)->lpVtbl -> get_SenderId(This,pvarSenderId) ) 

#define IMSMQMessage4_get_SenderIdType(This,plSenderIdType)	\
    ( (This)->lpVtbl -> get_SenderIdType(This,plSenderIdType) ) 

#define IMSMQMessage4_put_SenderIdType(This,lSenderIdType)	\
    ( (This)->lpVtbl -> put_SenderIdType(This,lSenderIdType) ) 

#define IMSMQMessage4_Send(This,DestinationQueue,Transaction)	\
    ( (This)->lpVtbl -> Send(This,DestinationQueue,Transaction) ) 

#define IMSMQMessage4_AttachCurrentSecurityContext(This)	\
    ( (This)->lpVtbl -> AttachCurrentSecurityContext(This) ) 

#define IMSMQMessage4_get_SenderVersion(This,plSenderVersion)	\
    ( (This)->lpVtbl -> get_SenderVersion(This,plSenderVersion) ) 

#define IMSMQMessage4_get_Extension(This,pvarExtension)	\
    ( (This)->lpVtbl -> get_Extension(This,pvarExtension) ) 

#define IMSMQMessage4_put_Extension(This,varExtension)	\
    ( (This)->lpVtbl -> put_Extension(This,varExtension) ) 

#define IMSMQMessage4_get_ConnectorTypeGuid(This,pbstrGuidConnectorType)	\
    ( (This)->lpVtbl -> get_ConnectorTypeGuid(This,pbstrGuidConnectorType) ) 

#define IMSMQMessage4_put_ConnectorTypeGuid(This,bstrGuidConnectorType)	\
    ( (This)->lpVtbl -> put_ConnectorTypeGuid(This,bstrGuidConnectorType) ) 

#define IMSMQMessage4_get_TransactionStatusQueueInfo(This,ppqinfoXactStatus)	\
    ( (This)->lpVtbl -> get_TransactionStatusQueueInfo(This,ppqinfoXactStatus) ) 

#define IMSMQMessage4_get_DestinationSymmetricKey(This,pvarDestSymmKey)	\
    ( (This)->lpVtbl -> get_DestinationSymmetricKey(This,pvarDestSymmKey) ) 

#define IMSMQMessage4_put_DestinationSymmetricKey(This,varDestSymmKey)	\
    ( (This)->lpVtbl -> put_DestinationSymmetricKey(This,varDestSymmKey) ) 

#define IMSMQMessage4_get_Signature(This,pvarSignature)	\
    ( (This)->lpVtbl -> get_Signature(This,pvarSignature) ) 

#define IMSMQMessage4_put_Signature(This,varSignature)	\
    ( (This)->lpVtbl -> put_Signature(This,varSignature) ) 

#define IMSMQMessage4_get_AuthenticationProviderType(This,plAuthProvType)	\
    ( (This)->lpVtbl -> get_AuthenticationProviderType(This,plAuthProvType) ) 

#define IMSMQMessage4_put_AuthenticationProviderType(This,lAuthProvType)	\
    ( (This)->lpVtbl -> put_AuthenticationProviderType(This,lAuthProvType) ) 

#define IMSMQMessage4_get_AuthenticationProviderName(This,pbstrAuthProvName)	\
    ( (This)->lpVtbl -> get_AuthenticationProviderName(This,pbstrAuthProvName) ) 

#define IMSMQMessage4_put_AuthenticationProviderName(This,bstrAuthProvName)	\
    ( (This)->lpVtbl -> put_AuthenticationProviderName(This,bstrAuthProvName) ) 

#define IMSMQMessage4_put_SenderId(This,varSenderId)	\
    ( (This)->lpVtbl -> put_SenderId(This,varSenderId) ) 

#define IMSMQMessage4_get_MsgClass(This,plMsgClass)	\
    ( (This)->lpVtbl -> get_MsgClass(This,plMsgClass) ) 

#define IMSMQMessage4_put_MsgClass(This,lMsgClass)	\
    ( (This)->lpVtbl -> put_MsgClass(This,lMsgClass) ) 

#define IMSMQMessage4_get_Properties(This,ppcolProperties)	\
    ( (This)->lpVtbl -> get_Properties(This,ppcolProperties) ) 

#define IMSMQMessage4_get_TransactionId(This,pvarXactId)	\
    ( (This)->lpVtbl -> get_TransactionId(This,pvarXactId) ) 

#define IMSMQMessage4_get_IsFirstInTransaction(This,pisFirstInXact)	\
    ( (This)->lpVtbl -> get_IsFirstInTransaction(This,pisFirstInXact) ) 

#define IMSMQMessage4_get_IsLastInTransaction(This,pisLastInXact)	\
    ( (This)->lpVtbl -> get_IsLastInTransaction(This,pisLastInXact) ) 

#define IMSMQMessage4_get_ResponseQueueInfo_v2(This,ppqinfoResponse)	\
    ( (This)->lpVtbl -> get_ResponseQueueInfo_v2(This,ppqinfoResponse) ) 

#define IMSMQMessage4_putref_ResponseQueueInfo_v2(This,pqinfoResponse)	\
    ( (This)->lpVtbl -> putref_ResponseQueueInfo_v2(This,pqinfoResponse) ) 

#define IMSMQMessage4_get_AdminQueueInfo_v2(This,ppqinfoAdmin)	\
    ( (This)->lpVtbl -> get_AdminQueueInfo_v2(This,ppqinfoAdmin) ) 

#define IMSMQMessage4_putref_AdminQueueInfo_v2(This,pqinfoAdmin)	\
    ( (This)->lpVtbl -> putref_AdminQueueInfo_v2(This,pqinfoAdmin) ) 

#define IMSMQMessage4_get_ReceivedAuthenticationLevel(This,psReceivedAuthenticationLevel)	\
    ( (This)->lpVtbl -> get_ReceivedAuthenticationLevel(This,psReceivedAuthenticationLevel) ) 

#define IMSMQMessage4_get_ResponseQueueInfo(This,ppqinfoResponse)	\
    ( (This)->lpVtbl -> get_ResponseQueueInfo(This,ppqinfoResponse) ) 

#define IMSMQMessage4_putref_ResponseQueueInfo(This,pqinfoResponse)	\
    ( (This)->lpVtbl -> putref_ResponseQueueInfo(This,pqinfoResponse) ) 

#define IMSMQMessage4_get_AdminQueueInfo(This,ppqinfoAdmin)	\
    ( (This)->lpVtbl -> get_AdminQueueInfo(This,ppqinfoAdmin) ) 

#define IMSMQMessage4_putref_AdminQueueInfo(This,pqinfoAdmin)	\
    ( (This)->lpVtbl -> putref_AdminQueueInfo(This,pqinfoAdmin) ) 

#define IMSMQMessage4_get_ResponseDestination(This,ppdestResponse)	\
    ( (This)->lpVtbl -> get_ResponseDestination(This,ppdestResponse) ) 

#define IMSMQMessage4_putref_ResponseDestination(This,pdestResponse)	\
    ( (This)->lpVtbl -> putref_ResponseDestination(This,pdestResponse) ) 

#define IMSMQMessage4_get_Destination(This,ppdestDestination)	\
    ( (This)->lpVtbl -> get_Destination(This,ppdestDestination) ) 

#define IMSMQMessage4_get_LookupId(This,pvarLookupId)	\
    ( (This)->lpVtbl -> get_LookupId(This,pvarLookupId) ) 

#define IMSMQMessage4_get_IsAuthenticated2(This,pisAuthenticated)	\
    ( (This)->lpVtbl -> get_IsAuthenticated2(This,pisAuthenticated) ) 

#define IMSMQMessage4_get_IsFirstInTransaction2(This,pisFirstInXact)	\
    ( (This)->lpVtbl -> get_IsFirstInTransaction2(This,pisFirstInXact) ) 

#define IMSMQMessage4_get_IsLastInTransaction2(This,pisLastInXact)	\
    ( (This)->lpVtbl -> get_IsLastInTransaction2(This,pisLastInXact) ) 

#define IMSMQMessage4_AttachCurrentSecurityContext2(This)	\
    ( (This)->lpVtbl -> AttachCurrentSecurityContext2(This) ) 

#define IMSMQMessage4_get_SoapEnvelope(This,pbstrSoapEnvelope)	\
    ( (This)->lpVtbl -> get_SoapEnvelope(This,pbstrSoapEnvelope) ) 

#define IMSMQMessage4_get_CompoundMessage(This,pvarCompoundMessage)	\
    ( (This)->lpVtbl -> get_CompoundMessage(This,pvarCompoundMessage) ) 

#define IMSMQMessage4_put_SoapHeader(This,bstrSoapHeader)	\
    ( (This)->lpVtbl -> put_SoapHeader(This,bstrSoapHeader) ) 

#define IMSMQMessage4_put_SoapBody(This,bstrSoapBody)	\
    ( (This)->lpVtbl -> put_SoapBody(This,bstrSoapBody) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSMQMessage4_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_MSMQMessage;

#ifdef __cplusplus

class DECLSPEC_UUID("D7D6E075-DCCD-11d0-AA4B-0060970DEBAE")
MSMQMessage;
#endif

EXTERN_C const CLSID CLSID_MSMQQueue;

#ifdef __cplusplus

class DECLSPEC_UUID("D7D6E079-DCCD-11d0-AA4B-0060970DEBAE")
MSMQQueue;
#endif

#ifndef __IMSMQPrivateEvent_INTERFACE_DEFINED__
#define __IMSMQPrivateEvent_INTERFACE_DEFINED__

/* interface IMSMQPrivateEvent */
/* [object][dual][hidden][uuid] */ 


EXTERN_C const IID IID_IMSMQPrivateEvent;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D7AB3341-C9D3-11d1-BB47-0080C7C5A2C0")
    IMSMQPrivateEvent : public IDispatch
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Hwnd( 
            /* [retval][out] */ __RPC__out long *phwnd) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FireArrivedEvent( 
            /* [in] */ __RPC__in_opt IMSMQQueue *pq,
            /* [in] */ long msgcursor) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FireArrivedErrorEvent( 
            /* [in] */ __RPC__in_opt IMSMQQueue *pq,
            /* [in] */ HRESULT hrStatus,
            /* [in] */ long msgcursor) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSMQPrivateEventVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMSMQPrivateEvent * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMSMQPrivateEvent * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMSMQPrivateEvent * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IMSMQPrivateEvent * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IMSMQPrivateEvent * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IMSMQPrivateEvent * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSMQPrivateEvent * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Hwnd )( 
            __RPC__in IMSMQPrivateEvent * This,
            /* [retval][out] */ __RPC__out long *phwnd);
        
        HRESULT ( STDMETHODCALLTYPE *FireArrivedEvent )( 
            __RPC__in IMSMQPrivateEvent * This,
            /* [in] */ __RPC__in_opt IMSMQQueue *pq,
            /* [in] */ long msgcursor);
        
        HRESULT ( STDMETHODCALLTYPE *FireArrivedErrorEvent )( 
            __RPC__in IMSMQPrivateEvent * This,
            /* [in] */ __RPC__in_opt IMSMQQueue *pq,
            /* [in] */ HRESULT hrStatus,
            /* [in] */ long msgcursor);
        
        END_INTERFACE
    } IMSMQPrivateEventVtbl;

    interface IMSMQPrivateEvent
    {
        CONST_VTBL struct IMSMQPrivateEventVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSMQPrivateEvent_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSMQPrivateEvent_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSMQPrivateEvent_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSMQPrivateEvent_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSMQPrivateEvent_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSMQPrivateEvent_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSMQPrivateEvent_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSMQPrivateEvent_get_Hwnd(This,phwnd)	\
    ( (This)->lpVtbl -> get_Hwnd(This,phwnd) ) 

#define IMSMQPrivateEvent_FireArrivedEvent(This,pq,msgcursor)	\
    ( (This)->lpVtbl -> FireArrivedEvent(This,pq,msgcursor) ) 

#define IMSMQPrivateEvent_FireArrivedErrorEvent(This,pq,hrStatus,msgcursor)	\
    ( (This)->lpVtbl -> FireArrivedErrorEvent(This,pq,hrStatus,msgcursor) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSMQPrivateEvent_INTERFACE_DEFINED__ */


#ifndef ___DMSMQEventEvents_DISPINTERFACE_DEFINED__
#define ___DMSMQEventEvents_DISPINTERFACE_DEFINED__

/* dispinterface _DMSMQEventEvents */
/* [hidden][helpstringcontext][uuid] */ 


EXTERN_C const IID DIID__DMSMQEventEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("D7D6E078-DCCD-11d0-AA4B-0060970DEBAE")
    _DMSMQEventEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _DMSMQEventEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in _DMSMQEventEvents * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in _DMSMQEventEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in _DMSMQEventEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in _DMSMQEventEvents * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in _DMSMQEventEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in _DMSMQEventEvents * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _DMSMQEventEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _DMSMQEventEventsVtbl;

    interface _DMSMQEventEvents
    {
        CONST_VTBL struct _DMSMQEventEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _DMSMQEventEvents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define _DMSMQEventEvents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define _DMSMQEventEvents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define _DMSMQEventEvents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define _DMSMQEventEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define _DMSMQEventEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define _DMSMQEventEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___DMSMQEventEvents_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_MSMQEvent;

#ifdef __cplusplus

class DECLSPEC_UUID("D7D6E07A-DCCD-11d0-AA4B-0060970DEBAE")
MSMQEvent;
#endif

EXTERN_C const CLSID CLSID_MSMQQueueInfo;

#ifdef __cplusplus

class DECLSPEC_UUID("D7D6E07C-DCCD-11d0-AA4B-0060970DEBAE")
MSMQQueueInfo;
#endif

EXTERN_C const CLSID CLSID_MSMQQueueInfos;

#ifdef __cplusplus

class DECLSPEC_UUID("D7D6E07E-DCCD-11d0-AA4B-0060970DEBAE")
MSMQQueueInfos;
#endif

#ifndef __IMSMQTransaction2_INTERFACE_DEFINED__
#define __IMSMQTransaction2_INTERFACE_DEFINED__

/* interface IMSMQTransaction2 */
/* [object][dual][hidden][helpstringcontext][uuid] */ 


EXTERN_C const IID IID_IMSMQTransaction2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2CE0C5B0-6E67-11D2-B0E6-00E02C074F6B")
    IMSMQTransaction2 : public IMSMQTransaction
    {
    public:
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE InitNew( 
            /* [in] */ VARIANT varTransaction) = 0;
        
        virtual /* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE get_Properties( 
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppcolProperties) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSMQTransaction2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMSMQTransaction2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMSMQTransaction2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMSMQTransaction2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IMSMQTransaction2 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IMSMQTransaction2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IMSMQTransaction2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSMQTransaction2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Transaction )( 
            __RPC__in IMSMQTransaction2 * This,
            /* [retval][out] */ __RPC__out long *plTransaction);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Commit )( 
            __RPC__in IMSMQTransaction2 * This,
            /* [optional][in] */ __RPC__in VARIANT *fRetaining,
            /* [optional][in] */ __RPC__in VARIANT *grfTC,
            /* [optional][in] */ __RPC__in VARIANT *grfRM);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Abort )( 
            __RPC__in IMSMQTransaction2 * This,
            /* [optional][in] */ __RPC__in VARIANT *fRetaining,
            /* [optional][in] */ __RPC__in VARIANT *fAsync);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *InitNew )( 
            __RPC__in IMSMQTransaction2 * This,
            /* [in] */ VARIANT varTransaction);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            __RPC__in IMSMQTransaction2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppcolProperties);
        
        END_INTERFACE
    } IMSMQTransaction2Vtbl;

    interface IMSMQTransaction2
    {
        CONST_VTBL struct IMSMQTransaction2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSMQTransaction2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSMQTransaction2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSMQTransaction2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSMQTransaction2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSMQTransaction2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSMQTransaction2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSMQTransaction2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSMQTransaction2_get_Transaction(This,plTransaction)	\
    ( (This)->lpVtbl -> get_Transaction(This,plTransaction) ) 

#define IMSMQTransaction2_Commit(This,fRetaining,grfTC,grfRM)	\
    ( (This)->lpVtbl -> Commit(This,fRetaining,grfTC,grfRM) ) 

#define IMSMQTransaction2_Abort(This,fRetaining,fAsync)	\
    ( (This)->lpVtbl -> Abort(This,fRetaining,fAsync) ) 


#define IMSMQTransaction2_InitNew(This,varTransaction)	\
    ( (This)->lpVtbl -> InitNew(This,varTransaction) ) 

#define IMSMQTransaction2_get_Properties(This,ppcolProperties)	\
    ( (This)->lpVtbl -> get_Properties(This,ppcolProperties) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSMQTransaction2_INTERFACE_DEFINED__ */


#ifndef __IMSMQTransaction3_INTERFACE_DEFINED__
#define __IMSMQTransaction3_INTERFACE_DEFINED__

/* interface IMSMQTransaction3 */
/* [object][dual][hidden][helpstringcontext][uuid] */ 


EXTERN_C const IID IID_IMSMQTransaction3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("eba96b13-2168-11d3-898c-00e02c074f6b")
    IMSMQTransaction3 : public IMSMQTransaction2
    {
    public:
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_ITransaction( 
            /* [retval][out] */ __RPC__out VARIANT *pvarITransaction) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSMQTransaction3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMSMQTransaction3 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMSMQTransaction3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMSMQTransaction3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IMSMQTransaction3 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IMSMQTransaction3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IMSMQTransaction3 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSMQTransaction3 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Transaction )( 
            __RPC__in IMSMQTransaction3 * This,
            /* [retval][out] */ __RPC__out long *plTransaction);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Commit )( 
            __RPC__in IMSMQTransaction3 * This,
            /* [optional][in] */ __RPC__in VARIANT *fRetaining,
            /* [optional][in] */ __RPC__in VARIANT *grfTC,
            /* [optional][in] */ __RPC__in VARIANT *grfRM);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Abort )( 
            __RPC__in IMSMQTransaction3 * This,
            /* [optional][in] */ __RPC__in VARIANT *fRetaining,
            /* [optional][in] */ __RPC__in VARIANT *fAsync);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *InitNew )( 
            __RPC__in IMSMQTransaction3 * This,
            /* [in] */ VARIANT varTransaction);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            __RPC__in IMSMQTransaction3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppcolProperties);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_ITransaction )( 
            __RPC__in IMSMQTransaction3 * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarITransaction);
        
        END_INTERFACE
    } IMSMQTransaction3Vtbl;

    interface IMSMQTransaction3
    {
        CONST_VTBL struct IMSMQTransaction3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSMQTransaction3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSMQTransaction3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSMQTransaction3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSMQTransaction3_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSMQTransaction3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSMQTransaction3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSMQTransaction3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSMQTransaction3_get_Transaction(This,plTransaction)	\
    ( (This)->lpVtbl -> get_Transaction(This,plTransaction) ) 

#define IMSMQTransaction3_Commit(This,fRetaining,grfTC,grfRM)	\
    ( (This)->lpVtbl -> Commit(This,fRetaining,grfTC,grfRM) ) 

#define IMSMQTransaction3_Abort(This,fRetaining,fAsync)	\
    ( (This)->lpVtbl -> Abort(This,fRetaining,fAsync) ) 


#define IMSMQTransaction3_InitNew(This,varTransaction)	\
    ( (This)->lpVtbl -> InitNew(This,varTransaction) ) 

#define IMSMQTransaction3_get_Properties(This,ppcolProperties)	\
    ( (This)->lpVtbl -> get_Properties(This,ppcolProperties) ) 


#define IMSMQTransaction3_get_ITransaction(This,pvarITransaction)	\
    ( (This)->lpVtbl -> get_ITransaction(This,pvarITransaction) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSMQTransaction3_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_MSMQTransaction;

#ifdef __cplusplus

class DECLSPEC_UUID("D7D6E080-DCCD-11d0-AA4B-0060970DEBAE")
MSMQTransaction;
#endif

#ifndef __IMSMQCoordinatedTransactionDispenser2_INTERFACE_DEFINED__
#define __IMSMQCoordinatedTransactionDispenser2_INTERFACE_DEFINED__

/* interface IMSMQCoordinatedTransactionDispenser2 */
/* [object][dual][hidden][helpstringcontext][uuid] */ 


EXTERN_C const IID IID_IMSMQCoordinatedTransactionDispenser2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("eba96b10-2168-11d3-898c-00e02c074f6b")
    IMSMQCoordinatedTransactionDispenser2 : public IDispatch
    {
    public:
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE BeginTransaction( 
            /* [retval][out] */ __RPC__deref_out_opt IMSMQTransaction2 **ptransaction) = 0;
        
        virtual /* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE get_Properties( 
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppcolProperties) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSMQCoordinatedTransactionDispenser2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMSMQCoordinatedTransactionDispenser2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMSMQCoordinatedTransactionDispenser2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMSMQCoordinatedTransactionDispenser2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IMSMQCoordinatedTransactionDispenser2 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IMSMQCoordinatedTransactionDispenser2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IMSMQCoordinatedTransactionDispenser2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSMQCoordinatedTransactionDispenser2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *BeginTransaction )( 
            __RPC__in IMSMQCoordinatedTransactionDispenser2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQTransaction2 **ptransaction);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            __RPC__in IMSMQCoordinatedTransactionDispenser2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppcolProperties);
        
        END_INTERFACE
    } IMSMQCoordinatedTransactionDispenser2Vtbl;

    interface IMSMQCoordinatedTransactionDispenser2
    {
        CONST_VTBL struct IMSMQCoordinatedTransactionDispenser2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSMQCoordinatedTransactionDispenser2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSMQCoordinatedTransactionDispenser2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSMQCoordinatedTransactionDispenser2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSMQCoordinatedTransactionDispenser2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSMQCoordinatedTransactionDispenser2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSMQCoordinatedTransactionDispenser2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSMQCoordinatedTransactionDispenser2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSMQCoordinatedTransactionDispenser2_BeginTransaction(This,ptransaction)	\
    ( (This)->lpVtbl -> BeginTransaction(This,ptransaction) ) 

#define IMSMQCoordinatedTransactionDispenser2_get_Properties(This,ppcolProperties)	\
    ( (This)->lpVtbl -> get_Properties(This,ppcolProperties) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSMQCoordinatedTransactionDispenser2_INTERFACE_DEFINED__ */


#ifndef __IMSMQCoordinatedTransactionDispenser3_INTERFACE_DEFINED__
#define __IMSMQCoordinatedTransactionDispenser3_INTERFACE_DEFINED__

/* interface IMSMQCoordinatedTransactionDispenser3 */
/* [object][dual][hidden][helpstringcontext][uuid] */ 


EXTERN_C const IID IID_IMSMQCoordinatedTransactionDispenser3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("eba96b14-2168-11d3-898c-00e02c074f6b")
    IMSMQCoordinatedTransactionDispenser3 : public IDispatch
    {
    public:
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE BeginTransaction( 
            /* [retval][out] */ __RPC__deref_out_opt IMSMQTransaction3 **ptransaction) = 0;
        
        virtual /* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE get_Properties( 
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppcolProperties) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSMQCoordinatedTransactionDispenser3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMSMQCoordinatedTransactionDispenser3 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMSMQCoordinatedTransactionDispenser3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMSMQCoordinatedTransactionDispenser3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IMSMQCoordinatedTransactionDispenser3 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IMSMQCoordinatedTransactionDispenser3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IMSMQCoordinatedTransactionDispenser3 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSMQCoordinatedTransactionDispenser3 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *BeginTransaction )( 
            __RPC__in IMSMQCoordinatedTransactionDispenser3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQTransaction3 **ptransaction);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            __RPC__in IMSMQCoordinatedTransactionDispenser3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppcolProperties);
        
        END_INTERFACE
    } IMSMQCoordinatedTransactionDispenser3Vtbl;

    interface IMSMQCoordinatedTransactionDispenser3
    {
        CONST_VTBL struct IMSMQCoordinatedTransactionDispenser3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSMQCoordinatedTransactionDispenser3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSMQCoordinatedTransactionDispenser3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSMQCoordinatedTransactionDispenser3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSMQCoordinatedTransactionDispenser3_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSMQCoordinatedTransactionDispenser3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSMQCoordinatedTransactionDispenser3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSMQCoordinatedTransactionDispenser3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSMQCoordinatedTransactionDispenser3_BeginTransaction(This,ptransaction)	\
    ( (This)->lpVtbl -> BeginTransaction(This,ptransaction) ) 

#define IMSMQCoordinatedTransactionDispenser3_get_Properties(This,ppcolProperties)	\
    ( (This)->lpVtbl -> get_Properties(This,ppcolProperties) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSMQCoordinatedTransactionDispenser3_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_MSMQCoordinatedTransactionDispenser;

#ifdef __cplusplus

class DECLSPEC_UUID("D7D6E082-DCCD-11d0-AA4B-0060970DEBAE")
MSMQCoordinatedTransactionDispenser;
#endif

#ifndef __IMSMQTransactionDispenser2_INTERFACE_DEFINED__
#define __IMSMQTransactionDispenser2_INTERFACE_DEFINED__

/* interface IMSMQTransactionDispenser2 */
/* [object][dual][hidden][helpstringcontext][uuid] */ 


EXTERN_C const IID IID_IMSMQTransactionDispenser2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("eba96b11-2168-11d3-898c-00e02c074f6b")
    IMSMQTransactionDispenser2 : public IDispatch
    {
    public:
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE BeginTransaction( 
            /* [retval][out] */ __RPC__deref_out_opt IMSMQTransaction2 **ptransaction) = 0;
        
        virtual /* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE get_Properties( 
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppcolProperties) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSMQTransactionDispenser2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMSMQTransactionDispenser2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMSMQTransactionDispenser2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMSMQTransactionDispenser2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IMSMQTransactionDispenser2 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IMSMQTransactionDispenser2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IMSMQTransactionDispenser2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSMQTransactionDispenser2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *BeginTransaction )( 
            __RPC__in IMSMQTransactionDispenser2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQTransaction2 **ptransaction);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            __RPC__in IMSMQTransactionDispenser2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppcolProperties);
        
        END_INTERFACE
    } IMSMQTransactionDispenser2Vtbl;

    interface IMSMQTransactionDispenser2
    {
        CONST_VTBL struct IMSMQTransactionDispenser2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSMQTransactionDispenser2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSMQTransactionDispenser2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSMQTransactionDispenser2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSMQTransactionDispenser2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSMQTransactionDispenser2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSMQTransactionDispenser2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSMQTransactionDispenser2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSMQTransactionDispenser2_BeginTransaction(This,ptransaction)	\
    ( (This)->lpVtbl -> BeginTransaction(This,ptransaction) ) 

#define IMSMQTransactionDispenser2_get_Properties(This,ppcolProperties)	\
    ( (This)->lpVtbl -> get_Properties(This,ppcolProperties) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSMQTransactionDispenser2_INTERFACE_DEFINED__ */


#ifndef __IMSMQTransactionDispenser3_INTERFACE_DEFINED__
#define __IMSMQTransactionDispenser3_INTERFACE_DEFINED__

/* interface IMSMQTransactionDispenser3 */
/* [object][dual][hidden][helpstringcontext][uuid] */ 


EXTERN_C const IID IID_IMSMQTransactionDispenser3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("eba96b15-2168-11d3-898c-00e02c074f6b")
    IMSMQTransactionDispenser3 : public IDispatch
    {
    public:
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE BeginTransaction( 
            /* [retval][out] */ __RPC__deref_out_opt IMSMQTransaction3 **ptransaction) = 0;
        
        virtual /* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE get_Properties( 
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppcolProperties) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSMQTransactionDispenser3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMSMQTransactionDispenser3 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMSMQTransactionDispenser3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMSMQTransactionDispenser3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IMSMQTransactionDispenser3 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IMSMQTransactionDispenser3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IMSMQTransactionDispenser3 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSMQTransactionDispenser3 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *BeginTransaction )( 
            __RPC__in IMSMQTransactionDispenser3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQTransaction3 **ptransaction);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            __RPC__in IMSMQTransactionDispenser3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppcolProperties);
        
        END_INTERFACE
    } IMSMQTransactionDispenser3Vtbl;

    interface IMSMQTransactionDispenser3
    {
        CONST_VTBL struct IMSMQTransactionDispenser3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSMQTransactionDispenser3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSMQTransactionDispenser3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSMQTransactionDispenser3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSMQTransactionDispenser3_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSMQTransactionDispenser3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSMQTransactionDispenser3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSMQTransactionDispenser3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSMQTransactionDispenser3_BeginTransaction(This,ptransaction)	\
    ( (This)->lpVtbl -> BeginTransaction(This,ptransaction) ) 

#define IMSMQTransactionDispenser3_get_Properties(This,ppcolProperties)	\
    ( (This)->lpVtbl -> get_Properties(This,ppcolProperties) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSMQTransactionDispenser3_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_MSMQTransactionDispenser;

#ifdef __cplusplus

class DECLSPEC_UUID("D7D6E084-DCCD-11d0-AA4B-0060970DEBAE")
MSMQTransactionDispenser;
#endif

#ifndef __IMSMQApplication_INTERFACE_DEFINED__
#define __IMSMQApplication_INTERFACE_DEFINED__

/* interface IMSMQApplication */
/* [object][dual][hidden][helpstringcontext][uuid] */ 


EXTERN_C const IID IID_IMSMQApplication;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D7D6E085-DCCD-11d0-AA4B-0060970DEBAE")
    IMSMQApplication : public IDispatch
    {
    public:
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE MachineIdOfMachineName( 
            /* [in] */ __RPC__in BSTR MachineName,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrGuid) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSMQApplicationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMSMQApplication * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMSMQApplication * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMSMQApplication * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IMSMQApplication * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IMSMQApplication * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IMSMQApplication * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSMQApplication * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *MachineIdOfMachineName )( 
            __RPC__in IMSMQApplication * This,
            /* [in] */ __RPC__in BSTR MachineName,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrGuid);
        
        END_INTERFACE
    } IMSMQApplicationVtbl;

    interface IMSMQApplication
    {
        CONST_VTBL struct IMSMQApplicationVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSMQApplication_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSMQApplication_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSMQApplication_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSMQApplication_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSMQApplication_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSMQApplication_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSMQApplication_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSMQApplication_MachineIdOfMachineName(This,MachineName,pbstrGuid)	\
    ( (This)->lpVtbl -> MachineIdOfMachineName(This,MachineName,pbstrGuid) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSMQApplication_INTERFACE_DEFINED__ */


#ifndef __IMSMQApplication2_INTERFACE_DEFINED__
#define __IMSMQApplication2_INTERFACE_DEFINED__

/* interface IMSMQApplication2 */
/* [object][dual][hidden][helpstringcontext][uuid] */ 


EXTERN_C const IID IID_IMSMQApplication2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("12A30900-7300-11D2-B0E6-00E02C074F6B")
    IMSMQApplication2 : public IMSMQApplication
    {
    public:
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE RegisterCertificate( 
            /* [optional][in] */ __RPC__in VARIANT *Flags,
            /* [optional][in] */ __RPC__in VARIANT *ExternalCertificate) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE MachineNameOfMachineId( 
            /* [in] */ __RPC__in BSTR bstrGuid,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrMachineName) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_MSMQVersionMajor( 
            /* [retval][out] */ __RPC__out short *psMSMQVersionMajor) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_MSMQVersionMinor( 
            /* [retval][out] */ __RPC__out short *psMSMQVersionMinor) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_MSMQVersionBuild( 
            /* [retval][out] */ __RPC__out short *psMSMQVersionBuild) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_IsDsEnabled( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pfIsDsEnabled) = 0;
        
        virtual /* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE get_Properties( 
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppcolProperties) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSMQApplication2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMSMQApplication2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMSMQApplication2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMSMQApplication2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IMSMQApplication2 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IMSMQApplication2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IMSMQApplication2 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSMQApplication2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *MachineIdOfMachineName )( 
            __RPC__in IMSMQApplication2 * This,
            /* [in] */ __RPC__in BSTR MachineName,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrGuid);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *RegisterCertificate )( 
            __RPC__in IMSMQApplication2 * This,
            /* [optional][in] */ __RPC__in VARIANT *Flags,
            /* [optional][in] */ __RPC__in VARIANT *ExternalCertificate);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *MachineNameOfMachineId )( 
            __RPC__in IMSMQApplication2 * This,
            /* [in] */ __RPC__in BSTR bstrGuid,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrMachineName);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_MSMQVersionMajor )( 
            __RPC__in IMSMQApplication2 * This,
            /* [retval][out] */ __RPC__out short *psMSMQVersionMajor);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_MSMQVersionMinor )( 
            __RPC__in IMSMQApplication2 * This,
            /* [retval][out] */ __RPC__out short *psMSMQVersionMinor);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_MSMQVersionBuild )( 
            __RPC__in IMSMQApplication2 * This,
            /* [retval][out] */ __RPC__out short *psMSMQVersionBuild);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_IsDsEnabled )( 
            __RPC__in IMSMQApplication2 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pfIsDsEnabled);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            __RPC__in IMSMQApplication2 * This,
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppcolProperties);
        
        END_INTERFACE
    } IMSMQApplication2Vtbl;

    interface IMSMQApplication2
    {
        CONST_VTBL struct IMSMQApplication2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSMQApplication2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSMQApplication2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSMQApplication2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSMQApplication2_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSMQApplication2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSMQApplication2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSMQApplication2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSMQApplication2_MachineIdOfMachineName(This,MachineName,pbstrGuid)	\
    ( (This)->lpVtbl -> MachineIdOfMachineName(This,MachineName,pbstrGuid) ) 


#define IMSMQApplication2_RegisterCertificate(This,Flags,ExternalCertificate)	\
    ( (This)->lpVtbl -> RegisterCertificate(This,Flags,ExternalCertificate) ) 

#define IMSMQApplication2_MachineNameOfMachineId(This,bstrGuid,pbstrMachineName)	\
    ( (This)->lpVtbl -> MachineNameOfMachineId(This,bstrGuid,pbstrMachineName) ) 

#define IMSMQApplication2_get_MSMQVersionMajor(This,psMSMQVersionMajor)	\
    ( (This)->lpVtbl -> get_MSMQVersionMajor(This,psMSMQVersionMajor) ) 

#define IMSMQApplication2_get_MSMQVersionMinor(This,psMSMQVersionMinor)	\
    ( (This)->lpVtbl -> get_MSMQVersionMinor(This,psMSMQVersionMinor) ) 

#define IMSMQApplication2_get_MSMQVersionBuild(This,psMSMQVersionBuild)	\
    ( (This)->lpVtbl -> get_MSMQVersionBuild(This,psMSMQVersionBuild) ) 

#define IMSMQApplication2_get_IsDsEnabled(This,pfIsDsEnabled)	\
    ( (This)->lpVtbl -> get_IsDsEnabled(This,pfIsDsEnabled) ) 

#define IMSMQApplication2_get_Properties(This,ppcolProperties)	\
    ( (This)->lpVtbl -> get_Properties(This,ppcolProperties) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSMQApplication2_INTERFACE_DEFINED__ */


#ifndef __IMSMQApplication3_INTERFACE_DEFINED__
#define __IMSMQApplication3_INTERFACE_DEFINED__

/* interface IMSMQApplication3 */
/* [object][dual][hidden][helpstringcontext][uuid] */ 


EXTERN_C const IID IID_IMSMQApplication3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("eba96b1f-2168-11d3-898c-00e02c074f6b")
    IMSMQApplication3 : public IMSMQApplication2
    {
    public:
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_ActiveQueues( 
            /* [retval][out] */ __RPC__out VARIANT *pvActiveQueues) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_PrivateQueues( 
            /* [retval][out] */ __RPC__out VARIANT *pvPrivateQueues) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_DirectoryServiceServer( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrDirectoryServiceServer) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_IsConnected( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pfIsConnected) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_BytesInAllQueues( 
            /* [retval][out] */ __RPC__out VARIANT *pvBytesInAllQueues) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_Machine( 
            /* [in] */ __RPC__in BSTR bstrMachine) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Machine( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrMachine) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Connect( void) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Disconnect( void) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Tidy( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSMQApplication3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMSMQApplication3 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMSMQApplication3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMSMQApplication3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IMSMQApplication3 * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IMSMQApplication3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IMSMQApplication3 * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSMQApplication3 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *MachineIdOfMachineName )( 
            __RPC__in IMSMQApplication3 * This,
            /* [in] */ __RPC__in BSTR MachineName,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrGuid);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *RegisterCertificate )( 
            __RPC__in IMSMQApplication3 * This,
            /* [optional][in] */ __RPC__in VARIANT *Flags,
            /* [optional][in] */ __RPC__in VARIANT *ExternalCertificate);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *MachineNameOfMachineId )( 
            __RPC__in IMSMQApplication3 * This,
            /* [in] */ __RPC__in BSTR bstrGuid,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrMachineName);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_MSMQVersionMajor )( 
            __RPC__in IMSMQApplication3 * This,
            /* [retval][out] */ __RPC__out short *psMSMQVersionMajor);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_MSMQVersionMinor )( 
            __RPC__in IMSMQApplication3 * This,
            /* [retval][out] */ __RPC__out short *psMSMQVersionMinor);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_MSMQVersionBuild )( 
            __RPC__in IMSMQApplication3 * This,
            /* [retval][out] */ __RPC__out short *psMSMQVersionBuild);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_IsDsEnabled )( 
            __RPC__in IMSMQApplication3 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pfIsDsEnabled);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            __RPC__in IMSMQApplication3 * This,
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppcolProperties);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_ActiveQueues )( 
            __RPC__in IMSMQApplication3 * This,
            /* [retval][out] */ __RPC__out VARIANT *pvActiveQueues);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_PrivateQueues )( 
            __RPC__in IMSMQApplication3 * This,
            /* [retval][out] */ __RPC__out VARIANT *pvPrivateQueues);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_DirectoryServiceServer )( 
            __RPC__in IMSMQApplication3 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrDirectoryServiceServer);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_IsConnected )( 
            __RPC__in IMSMQApplication3 * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pfIsConnected);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_BytesInAllQueues )( 
            __RPC__in IMSMQApplication3 * This,
            /* [retval][out] */ __RPC__out VARIANT *pvBytesInAllQueues);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_Machine )( 
            __RPC__in IMSMQApplication3 * This,
            /* [in] */ __RPC__in BSTR bstrMachine);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Machine )( 
            __RPC__in IMSMQApplication3 * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrMachine);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Connect )( 
            __RPC__in IMSMQApplication3 * This);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Disconnect )( 
            __RPC__in IMSMQApplication3 * This);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Tidy )( 
            __RPC__in IMSMQApplication3 * This);
        
        END_INTERFACE
    } IMSMQApplication3Vtbl;

    interface IMSMQApplication3
    {
        CONST_VTBL struct IMSMQApplication3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSMQApplication3_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSMQApplication3_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSMQApplication3_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSMQApplication3_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSMQApplication3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSMQApplication3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSMQApplication3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSMQApplication3_MachineIdOfMachineName(This,MachineName,pbstrGuid)	\
    ( (This)->lpVtbl -> MachineIdOfMachineName(This,MachineName,pbstrGuid) ) 


#define IMSMQApplication3_RegisterCertificate(This,Flags,ExternalCertificate)	\
    ( (This)->lpVtbl -> RegisterCertificate(This,Flags,ExternalCertificate) ) 

#define IMSMQApplication3_MachineNameOfMachineId(This,bstrGuid,pbstrMachineName)	\
    ( (This)->lpVtbl -> MachineNameOfMachineId(This,bstrGuid,pbstrMachineName) ) 

#define IMSMQApplication3_get_MSMQVersionMajor(This,psMSMQVersionMajor)	\
    ( (This)->lpVtbl -> get_MSMQVersionMajor(This,psMSMQVersionMajor) ) 

#define IMSMQApplication3_get_MSMQVersionMinor(This,psMSMQVersionMinor)	\
    ( (This)->lpVtbl -> get_MSMQVersionMinor(This,psMSMQVersionMinor) ) 

#define IMSMQApplication3_get_MSMQVersionBuild(This,psMSMQVersionBuild)	\
    ( (This)->lpVtbl -> get_MSMQVersionBuild(This,psMSMQVersionBuild) ) 

#define IMSMQApplication3_get_IsDsEnabled(This,pfIsDsEnabled)	\
    ( (This)->lpVtbl -> get_IsDsEnabled(This,pfIsDsEnabled) ) 

#define IMSMQApplication3_get_Properties(This,ppcolProperties)	\
    ( (This)->lpVtbl -> get_Properties(This,ppcolProperties) ) 


#define IMSMQApplication3_get_ActiveQueues(This,pvActiveQueues)	\
    ( (This)->lpVtbl -> get_ActiveQueues(This,pvActiveQueues) ) 

#define IMSMQApplication3_get_PrivateQueues(This,pvPrivateQueues)	\
    ( (This)->lpVtbl -> get_PrivateQueues(This,pvPrivateQueues) ) 

#define IMSMQApplication3_get_DirectoryServiceServer(This,pbstrDirectoryServiceServer)	\
    ( (This)->lpVtbl -> get_DirectoryServiceServer(This,pbstrDirectoryServiceServer) ) 

#define IMSMQApplication3_get_IsConnected(This,pfIsConnected)	\
    ( (This)->lpVtbl -> get_IsConnected(This,pfIsConnected) ) 

#define IMSMQApplication3_get_BytesInAllQueues(This,pvBytesInAllQueues)	\
    ( (This)->lpVtbl -> get_BytesInAllQueues(This,pvBytesInAllQueues) ) 

#define IMSMQApplication3_put_Machine(This,bstrMachine)	\
    ( (This)->lpVtbl -> put_Machine(This,bstrMachine) ) 

#define IMSMQApplication3_get_Machine(This,pbstrMachine)	\
    ( (This)->lpVtbl -> get_Machine(This,pbstrMachine) ) 

#define IMSMQApplication3_Connect(This)	\
    ( (This)->lpVtbl -> Connect(This) ) 

#define IMSMQApplication3_Disconnect(This)	\
    ( (This)->lpVtbl -> Disconnect(This) ) 

#define IMSMQApplication3_Tidy(This)	\
    ( (This)->lpVtbl -> Tidy(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSMQApplication3_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_MSMQApplication;

#ifdef __cplusplus

class DECLSPEC_UUID("D7D6E086-DCCD-11d0-AA4B-0060970DEBAE")
MSMQApplication;
#endif

#ifndef __IMSMQDestination_INTERFACE_DEFINED__
#define __IMSMQDestination_INTERFACE_DEFINED__

/* interface IMSMQDestination */
/* [object][dual][hidden][helpstringcontext][uuid] */ 


EXTERN_C const IID IID_IMSMQDestination;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("eba96b16-2168-11d3-898c-00e02c074f6b")
    IMSMQDestination : public IDispatch
    {
    public:
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Open( void) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Close( void) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_IsOpen( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pfIsOpen) = 0;
        
        virtual /* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE get_IADs( 
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppIADs) = 0;
        
        virtual /* [id][propputref][hidden] */ HRESULT STDMETHODCALLTYPE putref_IADs( 
            /* [in] */ __RPC__in_opt IDispatch *pIADs) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_ADsPath( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrADsPath) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_ADsPath( 
            /* [in] */ __RPC__in BSTR bstrADsPath) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_PathName( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrPathName) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_PathName( 
            /* [in] */ __RPC__in BSTR bstrPathName) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_FormatName( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrFormatName) = 0;
        
        virtual /* [id][propput][helpstringcontext] */ HRESULT STDMETHODCALLTYPE put_FormatName( 
            /* [in] */ __RPC__in BSTR bstrFormatName) = 0;
        
        virtual /* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE get_Destinations( 
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppDestinations) = 0;
        
        virtual /* [id][propputref][hidden] */ HRESULT STDMETHODCALLTYPE putref_Destinations( 
            /* [in] */ __RPC__in_opt IDispatch *pDestinations) = 0;
        
        virtual /* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE get_Properties( 
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppcolProperties) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSMQDestinationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMSMQDestination * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMSMQDestination * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMSMQDestination * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IMSMQDestination * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IMSMQDestination * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IMSMQDestination * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSMQDestination * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Open )( 
            __RPC__in IMSMQDestination * This);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Close )( 
            __RPC__in IMSMQDestination * This);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_IsOpen )( 
            __RPC__in IMSMQDestination * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pfIsOpen);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_IADs )( 
            __RPC__in IMSMQDestination * This,
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppIADs);
        
        /* [id][propputref][hidden] */ HRESULT ( STDMETHODCALLTYPE *putref_IADs )( 
            __RPC__in IMSMQDestination * This,
            /* [in] */ __RPC__in_opt IDispatch *pIADs);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_ADsPath )( 
            __RPC__in IMSMQDestination * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrADsPath);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_ADsPath )( 
            __RPC__in IMSMQDestination * This,
            /* [in] */ __RPC__in BSTR bstrADsPath);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_PathName )( 
            __RPC__in IMSMQDestination * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrPathName);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_PathName )( 
            __RPC__in IMSMQDestination * This,
            /* [in] */ __RPC__in BSTR bstrPathName);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_FormatName )( 
            __RPC__in IMSMQDestination * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrFormatName);
        
        /* [id][propput][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *put_FormatName )( 
            __RPC__in IMSMQDestination * This,
            /* [in] */ __RPC__in BSTR bstrFormatName);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_Destinations )( 
            __RPC__in IMSMQDestination * This,
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppDestinations);
        
        /* [id][propputref][hidden] */ HRESULT ( STDMETHODCALLTYPE *putref_Destinations )( 
            __RPC__in IMSMQDestination * This,
            /* [in] */ __RPC__in_opt IDispatch *pDestinations);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_Properties )( 
            __RPC__in IMSMQDestination * This,
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppcolProperties);
        
        END_INTERFACE
    } IMSMQDestinationVtbl;

    interface IMSMQDestination
    {
        CONST_VTBL struct IMSMQDestinationVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSMQDestination_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSMQDestination_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSMQDestination_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSMQDestination_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSMQDestination_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSMQDestination_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSMQDestination_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSMQDestination_Open(This)	\
    ( (This)->lpVtbl -> Open(This) ) 

#define IMSMQDestination_Close(This)	\
    ( (This)->lpVtbl -> Close(This) ) 

#define IMSMQDestination_get_IsOpen(This,pfIsOpen)	\
    ( (This)->lpVtbl -> get_IsOpen(This,pfIsOpen) ) 

#define IMSMQDestination_get_IADs(This,ppIADs)	\
    ( (This)->lpVtbl -> get_IADs(This,ppIADs) ) 

#define IMSMQDestination_putref_IADs(This,pIADs)	\
    ( (This)->lpVtbl -> putref_IADs(This,pIADs) ) 

#define IMSMQDestination_get_ADsPath(This,pbstrADsPath)	\
    ( (This)->lpVtbl -> get_ADsPath(This,pbstrADsPath) ) 

#define IMSMQDestination_put_ADsPath(This,bstrADsPath)	\
    ( (This)->lpVtbl -> put_ADsPath(This,bstrADsPath) ) 

#define IMSMQDestination_get_PathName(This,pbstrPathName)	\
    ( (This)->lpVtbl -> get_PathName(This,pbstrPathName) ) 

#define IMSMQDestination_put_PathName(This,bstrPathName)	\
    ( (This)->lpVtbl -> put_PathName(This,bstrPathName) ) 

#define IMSMQDestination_get_FormatName(This,pbstrFormatName)	\
    ( (This)->lpVtbl -> get_FormatName(This,pbstrFormatName) ) 

#define IMSMQDestination_put_FormatName(This,bstrFormatName)	\
    ( (This)->lpVtbl -> put_FormatName(This,bstrFormatName) ) 

#define IMSMQDestination_get_Destinations(This,ppDestinations)	\
    ( (This)->lpVtbl -> get_Destinations(This,ppDestinations) ) 

#define IMSMQDestination_putref_Destinations(This,pDestinations)	\
    ( (This)->lpVtbl -> putref_Destinations(This,pDestinations) ) 

#define IMSMQDestination_get_Properties(This,ppcolProperties)	\
    ( (This)->lpVtbl -> get_Properties(This,ppcolProperties) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSMQDestination_INTERFACE_DEFINED__ */


#ifndef __IMSMQPrivateDestination_INTERFACE_DEFINED__
#define __IMSMQPrivateDestination_INTERFACE_DEFINED__

/* interface IMSMQPrivateDestination */
/* [object][dual][hidden][uuid] */ 


EXTERN_C const IID IID_IMSMQPrivateDestination;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("eba96b17-2168-11d3-898c-00e02c074f6b")
    IMSMQPrivateDestination : public IDispatch
    {
    public:
        virtual /* [id][propget][hidden] */ HRESULT STDMETHODCALLTYPE get_Handle( 
            /* [retval][out] */ __RPC__out VARIANT *pvarHandle) = 0;
        
        virtual /* [id][propput][hidden] */ HRESULT STDMETHODCALLTYPE put_Handle( 
            /* [in] */ VARIANT varHandle) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSMQPrivateDestinationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMSMQPrivateDestination * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMSMQPrivateDestination * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMSMQPrivateDestination * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IMSMQPrivateDestination * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IMSMQPrivateDestination * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IMSMQPrivateDestination * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSMQPrivateDestination * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            __RPC__in IMSMQPrivateDestination * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarHandle);
        
        /* [id][propput][hidden] */ HRESULT ( STDMETHODCALLTYPE *put_Handle )( 
            __RPC__in IMSMQPrivateDestination * This,
            /* [in] */ VARIANT varHandle);
        
        END_INTERFACE
    } IMSMQPrivateDestinationVtbl;

    interface IMSMQPrivateDestination
    {
        CONST_VTBL struct IMSMQPrivateDestinationVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSMQPrivateDestination_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSMQPrivateDestination_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSMQPrivateDestination_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSMQPrivateDestination_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSMQPrivateDestination_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSMQPrivateDestination_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSMQPrivateDestination_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSMQPrivateDestination_get_Handle(This,pvarHandle)	\
    ( (This)->lpVtbl -> get_Handle(This,pvarHandle) ) 

#define IMSMQPrivateDestination_put_Handle(This,varHandle)	\
    ( (This)->lpVtbl -> put_Handle(This,varHandle) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSMQPrivateDestination_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_MSMQDestination;

#ifdef __cplusplus

class DECLSPEC_UUID("eba96b18-2168-11d3-898c-00e02c074f6b")
MSMQDestination;
#endif

#ifndef __IMSMQCollection_INTERFACE_DEFINED__
#define __IMSMQCollection_INTERFACE_DEFINED__

/* interface IMSMQCollection */
/* [object][oleautomation][dual][helpstringcontext][uuid] */ 


EXTERN_C const IID IID_IMSMQCollection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0188AC2F-ECB3-4173-9779-635CA2039C72")
    IMSMQCollection : public IDispatch
    {
    public:
        virtual /* [id][helpstringcontext] */ HRESULT STDMETHODCALLTYPE Item( 
            /* [in] */ __RPC__in VARIANT *Index,
            /* [retval][out] */ __RPC__out VARIANT *pvarRet) = 0;
        
        virtual /* [propget][id][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ __RPC__out long *pCount) = 0;
        
        virtual /* [restricted][id] */ HRESULT STDMETHODCALLTYPE _NewEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **ppunk) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSMQCollectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMSMQCollection * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMSMQCollection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMSMQCollection * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IMSMQCollection * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IMSMQCollection * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IMSMQCollection * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSMQCollection * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Item )( 
            __RPC__in IMSMQCollection * This,
            /* [in] */ __RPC__in VARIANT *Index,
            /* [retval][out] */ __RPC__out VARIANT *pvarRet);
        
        /* [propget][id][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            __RPC__in IMSMQCollection * This,
            /* [retval][out] */ __RPC__out long *pCount);
        
        /* [restricted][id] */ HRESULT ( STDMETHODCALLTYPE *_NewEnum )( 
            __RPC__in IMSMQCollection * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **ppunk);
        
        END_INTERFACE
    } IMSMQCollectionVtbl;

    interface IMSMQCollection
    {
        CONST_VTBL struct IMSMQCollectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSMQCollection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSMQCollection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSMQCollection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSMQCollection_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSMQCollection_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSMQCollection_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSMQCollection_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSMQCollection_Item(This,Index,pvarRet)	\
    ( (This)->lpVtbl -> Item(This,Index,pvarRet) ) 

#define IMSMQCollection_get_Count(This,pCount)	\
    ( (This)->lpVtbl -> get_Count(This,pCount) ) 

#define IMSMQCollection__NewEnum(This,ppunk)	\
    ( (This)->lpVtbl -> _NewEnum(This,ppunk) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSMQCollection_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_MSMQCollection;

#ifdef __cplusplus

class DECLSPEC_UUID("f72b9031-2f0c-43e8-924e-e6052cdc493f")
MSMQCollection;
#endif

#ifndef __IMSMQManagement_INTERFACE_DEFINED__
#define __IMSMQManagement_INTERFACE_DEFINED__

/* interface IMSMQManagement */
/* [object][dual][hidden][helpstringcontext][uuid] */ 


EXTERN_C const IID IID_IMSMQManagement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("BE5F0241-E489-4957-8CC4-A452FCF3E23E")
    IMSMQManagement : public IDispatch
    {
    public:
        virtual /* [id][helpstringcontext] */ HRESULT STDMETHODCALLTYPE Init( 
            /* [optional][in] */ __RPC__in VARIANT *Machine,
            /* [optional][in] */ __RPC__in VARIANT *Pathname,
            /* [optional][in] */ __RPC__in VARIANT *FormatName) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_FormatName( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrFormatName) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_Machine( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrMachine) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_MessageCount( 
            /* [retval][out] */ __RPC__out long *plMessageCount) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_ForeignStatus( 
            /* [retval][out] */ __RPC__out long *plForeignStatus) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_QueueType( 
            /* [retval][out] */ __RPC__out long *plQueueType) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_IsLocal( 
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pfIsLocal) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_TransactionalStatus( 
            /* [retval][out] */ __RPC__out long *plTransactionalStatus) = 0;
        
        virtual /* [id][propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_BytesInQueue( 
            /* [retval][out] */ __RPC__out VARIANT *pvBytesInQueue) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSMQManagementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMSMQManagement * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMSMQManagement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMSMQManagement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IMSMQManagement * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IMSMQManagement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IMSMQManagement * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSMQManagement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Init )( 
            __RPC__in IMSMQManagement * This,
            /* [optional][in] */ __RPC__in VARIANT *Machine,
            /* [optional][in] */ __RPC__in VARIANT *Pathname,
            /* [optional][in] */ __RPC__in VARIANT *FormatName);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_FormatName )( 
            __RPC__in IMSMQManagement * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrFormatName);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Machine )( 
            __RPC__in IMSMQManagement * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrMachine);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_MessageCount )( 
            __RPC__in IMSMQManagement * This,
            /* [retval][out] */ __RPC__out long *plMessageCount);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_ForeignStatus )( 
            __RPC__in IMSMQManagement * This,
            /* [retval][out] */ __RPC__out long *plForeignStatus);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_QueueType )( 
            __RPC__in IMSMQManagement * This,
            /* [retval][out] */ __RPC__out long *plQueueType);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_IsLocal )( 
            __RPC__in IMSMQManagement * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pfIsLocal);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_TransactionalStatus )( 
            __RPC__in IMSMQManagement * This,
            /* [retval][out] */ __RPC__out long *plTransactionalStatus);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_BytesInQueue )( 
            __RPC__in IMSMQManagement * This,
            /* [retval][out] */ __RPC__out VARIANT *pvBytesInQueue);
        
        END_INTERFACE
    } IMSMQManagementVtbl;

    interface IMSMQManagement
    {
        CONST_VTBL struct IMSMQManagementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSMQManagement_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSMQManagement_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSMQManagement_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSMQManagement_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSMQManagement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSMQManagement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSMQManagement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSMQManagement_Init(This,Machine,Pathname,FormatName)	\
    ( (This)->lpVtbl -> Init(This,Machine,Pathname,FormatName) ) 

#define IMSMQManagement_get_FormatName(This,pbstrFormatName)	\
    ( (This)->lpVtbl -> get_FormatName(This,pbstrFormatName) ) 

#define IMSMQManagement_get_Machine(This,pbstrMachine)	\
    ( (This)->lpVtbl -> get_Machine(This,pbstrMachine) ) 

#define IMSMQManagement_get_MessageCount(This,plMessageCount)	\
    ( (This)->lpVtbl -> get_MessageCount(This,plMessageCount) ) 

#define IMSMQManagement_get_ForeignStatus(This,plForeignStatus)	\
    ( (This)->lpVtbl -> get_ForeignStatus(This,plForeignStatus) ) 

#define IMSMQManagement_get_QueueType(This,plQueueType)	\
    ( (This)->lpVtbl -> get_QueueType(This,plQueueType) ) 

#define IMSMQManagement_get_IsLocal(This,pfIsLocal)	\
    ( (This)->lpVtbl -> get_IsLocal(This,pfIsLocal) ) 

#define IMSMQManagement_get_TransactionalStatus(This,plTransactionalStatus)	\
    ( (This)->lpVtbl -> get_TransactionalStatus(This,plTransactionalStatus) ) 

#define IMSMQManagement_get_BytesInQueue(This,pvBytesInQueue)	\
    ( (This)->lpVtbl -> get_BytesInQueue(This,pvBytesInQueue) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSMQManagement_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_MSMQManagement;

#ifdef __cplusplus

class DECLSPEC_UUID("39CE96FE-F4C5-4484-A143-4C2D5D324229")
MSMQManagement;
#endif

#ifndef __IMSMQOutgoingQueueManagement_INTERFACE_DEFINED__
#define __IMSMQOutgoingQueueManagement_INTERFACE_DEFINED__

/* interface IMSMQOutgoingQueueManagement */
/* [object][dual][helpstringcontext][uuid] */ 


EXTERN_C const IID IID_IMSMQOutgoingQueueManagement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("64C478FB-F9B0-4695-8A7F-439AC94326D3")
    IMSMQOutgoingQueueManagement : public IMSMQManagement
    {
    public:
        virtual /* [propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_State( 
            /* [retval][out] */ __RPC__out long *plState) = 0;
        
        virtual /* [propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_NextHops( 
            /* [retval][out] */ __RPC__out VARIANT *pvNextHops) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE EodGetSendInfo( 
            /* [retval][out] */ __RPC__deref_out_opt IMSMQCollection **ppCollection) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Resume( void) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE Pause( void) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE EodResend( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSMQOutgoingQueueManagementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMSMQOutgoingQueueManagement * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMSMQOutgoingQueueManagement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMSMQOutgoingQueueManagement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IMSMQOutgoingQueueManagement * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IMSMQOutgoingQueueManagement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IMSMQOutgoingQueueManagement * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSMQOutgoingQueueManagement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Init )( 
            __RPC__in IMSMQOutgoingQueueManagement * This,
            /* [optional][in] */ __RPC__in VARIANT *Machine,
            /* [optional][in] */ __RPC__in VARIANT *Pathname,
            /* [optional][in] */ __RPC__in VARIANT *FormatName);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_FormatName )( 
            __RPC__in IMSMQOutgoingQueueManagement * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrFormatName);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Machine )( 
            __RPC__in IMSMQOutgoingQueueManagement * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrMachine);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_MessageCount )( 
            __RPC__in IMSMQOutgoingQueueManagement * This,
            /* [retval][out] */ __RPC__out long *plMessageCount);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_ForeignStatus )( 
            __RPC__in IMSMQOutgoingQueueManagement * This,
            /* [retval][out] */ __RPC__out long *plForeignStatus);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_QueueType )( 
            __RPC__in IMSMQOutgoingQueueManagement * This,
            /* [retval][out] */ __RPC__out long *plQueueType);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_IsLocal )( 
            __RPC__in IMSMQOutgoingQueueManagement * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pfIsLocal);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_TransactionalStatus )( 
            __RPC__in IMSMQOutgoingQueueManagement * This,
            /* [retval][out] */ __RPC__out long *plTransactionalStatus);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_BytesInQueue )( 
            __RPC__in IMSMQOutgoingQueueManagement * This,
            /* [retval][out] */ __RPC__out VARIANT *pvBytesInQueue);
        
        /* [propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_State )( 
            __RPC__in IMSMQOutgoingQueueManagement * This,
            /* [retval][out] */ __RPC__out long *plState);
        
        /* [propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_NextHops )( 
            __RPC__in IMSMQOutgoingQueueManagement * This,
            /* [retval][out] */ __RPC__out VARIANT *pvNextHops);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *EodGetSendInfo )( 
            __RPC__in IMSMQOutgoingQueueManagement * This,
            /* [retval][out] */ __RPC__deref_out_opt IMSMQCollection **ppCollection);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Resume )( 
            __RPC__in IMSMQOutgoingQueueManagement * This);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Pause )( 
            __RPC__in IMSMQOutgoingQueueManagement * This);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *EodResend )( 
            __RPC__in IMSMQOutgoingQueueManagement * This);
        
        END_INTERFACE
    } IMSMQOutgoingQueueManagementVtbl;

    interface IMSMQOutgoingQueueManagement
    {
        CONST_VTBL struct IMSMQOutgoingQueueManagementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSMQOutgoingQueueManagement_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSMQOutgoingQueueManagement_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSMQOutgoingQueueManagement_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSMQOutgoingQueueManagement_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSMQOutgoingQueueManagement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSMQOutgoingQueueManagement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSMQOutgoingQueueManagement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSMQOutgoingQueueManagement_Init(This,Machine,Pathname,FormatName)	\
    ( (This)->lpVtbl -> Init(This,Machine,Pathname,FormatName) ) 

#define IMSMQOutgoingQueueManagement_get_FormatName(This,pbstrFormatName)	\
    ( (This)->lpVtbl -> get_FormatName(This,pbstrFormatName) ) 

#define IMSMQOutgoingQueueManagement_get_Machine(This,pbstrMachine)	\
    ( (This)->lpVtbl -> get_Machine(This,pbstrMachine) ) 

#define IMSMQOutgoingQueueManagement_get_MessageCount(This,plMessageCount)	\
    ( (This)->lpVtbl -> get_MessageCount(This,plMessageCount) ) 

#define IMSMQOutgoingQueueManagement_get_ForeignStatus(This,plForeignStatus)	\
    ( (This)->lpVtbl -> get_ForeignStatus(This,plForeignStatus) ) 

#define IMSMQOutgoingQueueManagement_get_QueueType(This,plQueueType)	\
    ( (This)->lpVtbl -> get_QueueType(This,plQueueType) ) 

#define IMSMQOutgoingQueueManagement_get_IsLocal(This,pfIsLocal)	\
    ( (This)->lpVtbl -> get_IsLocal(This,pfIsLocal) ) 

#define IMSMQOutgoingQueueManagement_get_TransactionalStatus(This,plTransactionalStatus)	\
    ( (This)->lpVtbl -> get_TransactionalStatus(This,plTransactionalStatus) ) 

#define IMSMQOutgoingQueueManagement_get_BytesInQueue(This,pvBytesInQueue)	\
    ( (This)->lpVtbl -> get_BytesInQueue(This,pvBytesInQueue) ) 


#define IMSMQOutgoingQueueManagement_get_State(This,plState)	\
    ( (This)->lpVtbl -> get_State(This,plState) ) 

#define IMSMQOutgoingQueueManagement_get_NextHops(This,pvNextHops)	\
    ( (This)->lpVtbl -> get_NextHops(This,pvNextHops) ) 

#define IMSMQOutgoingQueueManagement_EodGetSendInfo(This,ppCollection)	\
    ( (This)->lpVtbl -> EodGetSendInfo(This,ppCollection) ) 

#define IMSMQOutgoingQueueManagement_Resume(This)	\
    ( (This)->lpVtbl -> Resume(This) ) 

#define IMSMQOutgoingQueueManagement_Pause(This)	\
    ( (This)->lpVtbl -> Pause(This) ) 

#define IMSMQOutgoingQueueManagement_EodResend(This)	\
    ( (This)->lpVtbl -> EodResend(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSMQOutgoingQueueManagement_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_MSMQOutgoingQueueManagement;

#ifdef __cplusplus

class DECLSPEC_UUID("0188401c-247a-4fed-99c6-bf14119d7055")
MSMQOutgoingQueueManagement;
#endif

#ifndef __IMSMQQueueManagement_INTERFACE_DEFINED__
#define __IMSMQQueueManagement_INTERFACE_DEFINED__

/* interface IMSMQQueueManagement */
/* [object][dual][helpstringcontext][uuid] */ 


EXTERN_C const IID IID_IMSMQQueueManagement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7FBE7759-5760-444d-B8A5-5E7AB9A84CCE")
    IMSMQQueueManagement : public IMSMQManagement
    {
    public:
        virtual /* [propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_JournalMessageCount( 
            /* [retval][out] */ __RPC__out long *plJournalMessageCount) = 0;
        
        virtual /* [propget][helpstringcontext] */ HRESULT STDMETHODCALLTYPE get_BytesInJournal( 
            /* [retval][out] */ __RPC__out VARIANT *pvBytesInJournal) = 0;
        
        virtual /* [helpstringcontext] */ HRESULT STDMETHODCALLTYPE EodGetReceiveInfo( 
            /* [retval][out] */ __RPC__out VARIANT *pvCollection) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IMSMQQueueManagementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IMSMQQueueManagement * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IMSMQQueueManagement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IMSMQQueueManagement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IMSMQQueueManagement * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IMSMQQueueManagement * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IMSMQQueueManagement * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IMSMQQueueManagement * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [id][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *Init )( 
            __RPC__in IMSMQQueueManagement * This,
            /* [optional][in] */ __RPC__in VARIANT *Machine,
            /* [optional][in] */ __RPC__in VARIANT *Pathname,
            /* [optional][in] */ __RPC__in VARIANT *FormatName);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_FormatName )( 
            __RPC__in IMSMQQueueManagement * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrFormatName);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_Machine )( 
            __RPC__in IMSMQQueueManagement * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrMachine);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_MessageCount )( 
            __RPC__in IMSMQQueueManagement * This,
            /* [retval][out] */ __RPC__out long *plMessageCount);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_ForeignStatus )( 
            __RPC__in IMSMQQueueManagement * This,
            /* [retval][out] */ __RPC__out long *plForeignStatus);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_QueueType )( 
            __RPC__in IMSMQQueueManagement * This,
            /* [retval][out] */ __RPC__out long *plQueueType);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_IsLocal )( 
            __RPC__in IMSMQQueueManagement * This,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pfIsLocal);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_TransactionalStatus )( 
            __RPC__in IMSMQQueueManagement * This,
            /* [retval][out] */ __RPC__out long *plTransactionalStatus);
        
        /* [id][propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_BytesInQueue )( 
            __RPC__in IMSMQQueueManagement * This,
            /* [retval][out] */ __RPC__out VARIANT *pvBytesInQueue);
        
        /* [propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_JournalMessageCount )( 
            __RPC__in IMSMQQueueManagement * This,
            /* [retval][out] */ __RPC__out long *plJournalMessageCount);
        
        /* [propget][helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *get_BytesInJournal )( 
            __RPC__in IMSMQQueueManagement * This,
            /* [retval][out] */ __RPC__out VARIANT *pvBytesInJournal);
        
        /* [helpstringcontext] */ HRESULT ( STDMETHODCALLTYPE *EodGetReceiveInfo )( 
            __RPC__in IMSMQQueueManagement * This,
            /* [retval][out] */ __RPC__out VARIANT *pvCollection);
        
        END_INTERFACE
    } IMSMQQueueManagementVtbl;

    interface IMSMQQueueManagement
    {
        CONST_VTBL struct IMSMQQueueManagementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IMSMQQueueManagement_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IMSMQQueueManagement_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IMSMQQueueManagement_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IMSMQQueueManagement_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IMSMQQueueManagement_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IMSMQQueueManagement_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IMSMQQueueManagement_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IMSMQQueueManagement_Init(This,Machine,Pathname,FormatName)	\
    ( (This)->lpVtbl -> Init(This,Machine,Pathname,FormatName) ) 

#define IMSMQQueueManagement_get_FormatName(This,pbstrFormatName)	\
    ( (This)->lpVtbl -> get_FormatName(This,pbstrFormatName) ) 

#define IMSMQQueueManagement_get_Machine(This,pbstrMachine)	\
    ( (This)->lpVtbl -> get_Machine(This,pbstrMachine) ) 

#define IMSMQQueueManagement_get_MessageCount(This,plMessageCount)	\
    ( (This)->lpVtbl -> get_MessageCount(This,plMessageCount) ) 

#define IMSMQQueueManagement_get_ForeignStatus(This,plForeignStatus)	\
    ( (This)->lpVtbl -> get_ForeignStatus(This,plForeignStatus) ) 

#define IMSMQQueueManagement_get_QueueType(This,plQueueType)	\
    ( (This)->lpVtbl -> get_QueueType(This,plQueueType) ) 

#define IMSMQQueueManagement_get_IsLocal(This,pfIsLocal)	\
    ( (This)->lpVtbl -> get_IsLocal(This,pfIsLocal) ) 

#define IMSMQQueueManagement_get_TransactionalStatus(This,plTransactionalStatus)	\
    ( (This)->lpVtbl -> get_TransactionalStatus(This,plTransactionalStatus) ) 

#define IMSMQQueueManagement_get_BytesInQueue(This,pvBytesInQueue)	\
    ( (This)->lpVtbl -> get_BytesInQueue(This,pvBytesInQueue) ) 


#define IMSMQQueueManagement_get_JournalMessageCount(This,plJournalMessageCount)	\
    ( (This)->lpVtbl -> get_JournalMessageCount(This,plJournalMessageCount) ) 

#define IMSMQQueueManagement_get_BytesInJournal(This,pvBytesInJournal)	\
    ( (This)->lpVtbl -> get_BytesInJournal(This,pvBytesInJournal) ) 

#define IMSMQQueueManagement_EodGetReceiveInfo(This,pvCollection)	\
    ( (This)->lpVtbl -> EodGetReceiveInfo(This,pvCollection) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IMSMQQueueManagement_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_MSMQQueueManagement;

#ifdef __cplusplus

class DECLSPEC_UUID("33b6d07e-f27d-42fa-b2d7-bf82e11e9374")
MSMQQueueManagement;
#endif
#endif /* __MSMQ_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\msado15.h ===
//-----------------------------------------------------------------------------
// File:		msado15.h
//
// Copyright:   Copyright (c) Microsoft Corporation         
//
// Contents:	Proxy for adoint.h
//
// Comments:
//
//-----------------------------------------------------------------------------

#include "adoint.h"
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\MSAcmDlg.h ===
/***************************************************************************
 *
 *  msacmdlg.h
 *
 *  Copyright (c) 1991-1999 Microsoft Corporation.  All Rights Reserved.
 *
 *  Description:
 *      Audio Compression Manager Common Dialogs Identifiers
 *
 ***************************************************************************/

#if _MSC_VER > 1000
#pragma once
#endif

#define DLG_ACMFORMATCHOOSE_ID              70
#define IDD_ACMFORMATCHOOSE_BTN_HELP        9
#define IDD_ACMFORMATCHOOSE_CMB_CUSTOM      100
#define IDD_ACMFORMATCHOOSE_CMB_FORMATTAG   101
#define IDD_ACMFORMATCHOOSE_CMB_FORMAT      102
#define IDD_ACMFORMATCHOOSE_BTN_SETNAME     103
#define IDD_ACMFORMATCHOOSE_BTN_DELNAME     104


#define DLG_ACMFILTERCHOOSE_ID              71
#define IDD_ACMFILTERCHOOSE_BTN_HELP        9
#define IDD_ACMFILTERCHOOSE_CMB_CUSTOM      100
#define IDD_ACMFILTERCHOOSE_CMB_FILTERTAG   101
#define IDD_ACMFILTERCHOOSE_CMB_FILTER      102
#define IDD_ACMFILTERCHOOSE_BTN_SETNAME     103
#define IDD_ACMFILTERCHOOSE_BTN_DELNAME     104
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\msber.h ===
//$TAG BIZDEV
//  $IPCategory:     
//  $DealPointID:    8269
//  $AgreementName:  software license agreement
//  $AgreementType:  inbound license
//  $ExternalOrigin: boris nikolaus
//$ENDTAG

//$TAG ENGR 
//  $Owner:    denisi
//  $Module:   ds_published
//
//$ENDTAG

/* Copyright (C) Boris Nikolaus, Germany, 1996-1997. All rights reserved. */
/* Copyright (C) Microsoft Corporation 1997-1998, All rights reserved. */

#ifndef __MS_BER_H__
#define __MS_BER_H__

#include <msasn1.h>

#include <pshpack8.h> /* Assume 8 byte packing throughout */

#ifdef __cplusplus
extern "C" {
#endif


/*****************************************************************************
  ASN1BEREncCharString

  encode a string value
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BEREncCharString(
    __in        ASN1encoding_t enc, 
                ASN1uint32_t tag, 
                ASN1uint32_t len, 
    __in_ecount( len )
                ASN1char_t *val 
    );

extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1DEREncCharString(
    __in        ASN1encoding_t enc, 
                ASN1uint32_t tag, 
                ASN1uint32_t len, 
    __in_ecount( len )
                ASN1char_t *val 
    );

/*****************************************************************************
  ASN1BEREncChar16String

  encode a 16 bit string value
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BEREncChar16String(
    __in        ASN1encoding_t enc, 
                ASN1uint32_t tag, 
                ASN1uint32_t len, 
    __in_ecount( len )
                ASN1char16_t *val
    );

extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1DEREncChar16String(
    __in        ASN1encoding_t enc, 
                ASN1uint32_t tag, 
                ASN1uint32_t len, 
    __in_ecount( len )
                ASN1char16_t *val
    );

/*****************************************************************************
  ASN1BEREncChar32String

  encode a 32 bit string value
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BEREncChar32String(
    __in        ASN1encoding_t enc, 
                ASN1uint32_t tag, 
                ASN1uint32_t len, 
    __in_ecount( len )
                ASN1char32_t *val
    );

extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1DEREncChar32String(
    __in        ASN1encoding_t enc, 
                ASN1uint32_t tag, 
                ASN1uint32_t len, 
    __in_ecount( len )
                ASN1char32_t *val
    );

/*****************************************************************************
  ASN1BEREncOctetString

  encode an octet string value
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BEREncOctetString(
    __in        ASN1encoding_t enc,
                ASN1uint32_t tag, 
                ASN1uint32_t len, 
    __in_bcount_opt( len )
                ASN1octet_t *val
    );

extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1DEREncOctetString(
    __in        ASN1encoding_t enc,
                ASN1uint32_t tag, 
                ASN1uint32_t len, 
    __in_bcount( len )
                ASN1octet_t *val
    );

/*****************************************************************************
  ASN1BEREncBitString

  encode a bit string value
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BEREncBitString(
    __in        ASN1encoding_t enc, 
                ASN1uint32_t tag, 
                ASN1uint32_t bitlen, 
    __in_bcount( (bitlen + 7) / 8 )
                ASN1octet_t *val
    );

extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1DEREncBitString(
    __in        ASN1encoding_t enc, 
                ASN1uint32_t tag, 
                ASN1uint32_t bitlen, 
    __in_bcount( (bitlen + 7) / 8 )
                ASN1octet_t *val
    );

/*****************************************************************************
  ASN1BEREncGeneralizedTime

  encode a generalized time value
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BEREncGeneralizedTime(
    __in        ASN1encoding_t enc, 
                ASN1uint32_t tag, 
    __in        ASN1generalizedtime_t *
    );

extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1DEREncGeneralizedTime(
    __in        ASN1encoding_t enc, 
                ASN1uint32_t tag, 
    __in        ASN1generalizedtime_t *
    );

/*****************************************************************************
  ASN1BEREncS32

   encode a signed integer value
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BEREncS32(
    __in        ASN1encoding_t enc, 
                ASN1uint32_t tag, 
                ASN1int32_t
    );

/*****************************************************************************
  ASN1BEREncSX

   encode a signed multibyte integer value
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BEREncSX(
    __in        ASN1encoding_t enc, 
                ASN1uint32_t tag, 
    __in        ASN1intx_t *
    );

/*****************************************************************************
  ASN1BEREncZeroMultibyteString

   encode a multibyte string value
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BEREncZeroMultibyteString(
    __in        ASN1encoding_t enc, 
                ASN1uint32_t tag, 
    __in_z      ASN1ztcharstring_t
    );

extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1DEREncZeroMultibyteString(
    __in        ASN1encoding_t enc, 
                ASN1uint32_t tag, 
    __in_z      ASN1ztcharstring_t
    );

/*****************************************************************************
  ASN1BEREncMultibyteString

   encode a multibyte string value
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BEREncMultibyteString(
    __in        ASN1encoding_t enc, 
                ASN1uint32_t tag, 
    __in        ASN1charstring_t *
    );

extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1DEREncMultibyteString(
    __in        ASN1encoding_t enc, 
                ASN1uint32_t tag, 
    __in        ASN1charstring_t *
    );

/*****************************************************************************
  ASN1BEREncNull

   encode a null value
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BEREncNull(
    __in        ASN1encoding_t enc, 
                ASN1uint32_t tag
    );

/*****************************************************************************
  ASN1BEREncObjectIdentifier

   encode an object identifier value
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BEREncObjectIdentifier(
    __in        ASN1encoding_t enc, 
                ASN1uint32_t tag, 
    __in        ASN1objectidentifier_t *
    );

/*****************************************************************************
  ASN1BEREncObjectIdentifier2

   encode an object identifier value
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BEREncObjectIdentifier2(
    __in        ASN1encoding_t enc, 
                ASN1uint32_t tag, 
    __in        ASN1objectidentifier2_t *val
    );

/*****************************************************************************
  ASN1BEREncRemoveZeroBits

   remove trailing zero bits
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BEREncRemoveZeroBits(
    __inout     ASN1uint32_t *nbits, 
    __in_bcount( (*nbits+7) / 8 )
                ASN1octet_t *val
    );

/*****************************************************************************
  ASN1BEREncRemoveZeroBits2

   remove trailing zero bits preserving min len
*****************************************************************************/
extern 
__success( return > 0 )
int 
ASN1API 
ASN1BEREncRemoveZeroBits2(
    __inout     ASN1uint32_t *nbits, 
    __in_bcount( (*nbits+7) / 8 )
                ASN1octet_t *val, 
                ASN1uint32_t minlen
    );


/*****************************************************************************
  ASN1BEREncUTCTime

   encode an utc time value
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BEREncUTCTime(
    __in        ASN1encoding_t enc, 
                ASN1uint32_t tag, 
    __in        ASN1utctime_t *
    );

extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1DEREncUTCTime(
    __in        ASN1encoding_t enc, 
                ASN1uint32_t tag, 
    __in        ASN1utctime_t *
    );

/*****************************************************************************
  ASN1BEREncFlush

  end of encoding
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BEREncFlush(
    __in        ASN1encoding_t enc
    );

/*****************************************************************************
  ASN1BEREncOpenType

  encode an open type value
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BEREncOpenType(
    __in        ASN1encoding_t enc, 
    __in        ASN1open_t *
    );

/*****************************************************************************
  ASN1BERDecExplicitTag

  decode an explicit tag
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BERDecExplicitTag(
    __in        ASN1decoding_t dec, 
                ASN1uint32_t tag, 
    __deref_out ASN1decoding_t *dd, 
    __deref_out ASN1octet_t **ppBufEnd
    );

/*****************************************************************************
  ASN1BERDecEndOfContents

  
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BERDecEndOfContents(
    __in        ASN1decoding_t dec, 
    __in        ASN1decoding_t dd, 
    __in        ASN1octet_t *pBufEnd 
    );

/*****************************************************************************
  ASN1BERDecOctetString

  decode octet string value, making copy
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BERDecOctetString(
    __in        ASN1decoding_t dec, 
                ASN1uint32_t tag, 
    __out       ASN1octetstring_t *val
    );

/*****************************************************************************
  ASN1BERDecOctetString2

  decode octet string value, no copy
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BERDecOctetString2(
    __in        ASN1decoding_t dec, 
                ASN1uint32_t tag, 
    __out       ASN1octetstring_t *val
    );

/*****************************************************************************
  ASN1BERDecBitString

  decode bit string value, making copy
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BERDecBitString(
    __in        ASN1decoding_t dec, 
                ASN1uint32_t tag, 
    __out       ASN1bitstring_t *val
    );

/*****************************************************************************
  ASN1BERDecBitString2

  decode bit string value, no copy
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BERDecBitString2(
    __in        ASN1decoding_t dec, 
                ASN1uint32_t tag, 
    __out       ASN1bitstring_t *val
    );

/*****************************************************************************
  ASN1BERDecChar16String

  decode 16 bit string value
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BERDecChar16String(
    __in        ASN1decoding_t dec, 
                ASN1uint32_t tag, 
    __out       ASN1char16string_t *val
    );

/*****************************************************************************
  ASN1BERDecChar32String

  decode 32 bit string value
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BERDecChar32String(
    __in        ASN1decoding_t dec, 
                ASN1uint32_t tag, 
    __out       ASN1char32string_t *val
    );

/*****************************************************************************
  ASN1BERDecCharString

  decode string value
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BERDecCharString(
    __in        ASN1decoding_t dec, 
                ASN1uint32_t tag, 
    __out       ASN1charstring_t *val
    );


/*****************************************************************************
  ASN1BERDecGeneralizedTime

  decode generalized time value
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BERDecGeneralizedTime(
    __in        ASN1decoding_t dec, 
                ASN1uint32_t tag, 
    __out       ASN1generalizedtime_t *
    );

/*****************************************************************************
  ASN1BERDecZeroMultibyteString

  decode zero terminated string value
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BERDecZeroMultibyteString(
    __in        ASN1decoding_t dec, 
                ASN1uint32_t tag, 
    __deref_out_z
                ASN1ztcharstring_t *
    );

/*****************************************************************************
  ASN1BERDecMultibyteString

  decode multibyte string value
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BERDecMultibyteString(
    __in        ASN1decoding_t dec, 
                ASN1uint32_t tag, 
    __out       ASN1charstring_t *
    );

/*****************************************************************************
  ASN1BERDecNull

  decode NULL value
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BERDecNull(
    __in        ASN1decoding_t dec, 
                ASN1uint32_t tag
    );

/*****************************************************************************
  ASN1BERDecObjectIdentifier

  decode object identifier value
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BERDecObjectIdentifier(
    __in        ASN1decoding_t dec, 
                ASN1uint32_t tag, 
    __deref_out ASN1objectidentifier_t *
    );

/*****************************************************************************
  ASN1BERDecObjectIdentifier2

  decode object identifier value
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BERDecObjectIdentifier2(
    __in        ASN1decoding_t dec, 
                ASN1uint32_t tag, 
    __out       ASN1objectidentifier2_t *val
    );

/*****************************************************************************
  ASN1BERDecS8Val

  decode integer into signed 8 bit value
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BERDecS8Val(
    __in        ASN1decoding_t dec, 
                ASN1uint32_t tag, 
    __out       ASN1int8_t *val
    );

/*****************************************************************************
  ASN1BERDecS16Val

  decode integer into signed 16 bit value
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BERDecS16Val(
    __in        ASN1decoding_t dec, 
                ASN1uint32_t tag, 
    __out       ASN1int16_t *val
    );

/*****************************************************************************
  ASN1BERDecS32Val

  decode integer into signed 32 bit value
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BERDecS32Val(
    __in        ASN1decoding_t dec, 
                ASN1uint32_t tag, 
    __out       ASN1int32_t *val
    );

/*****************************************************************************
  ASN1BERDecSXVal

  decode integer into intx value
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BERDecSXVal(
    __in        ASN1decoding_t dec, 
                ASN1uint32_t tag, 
    __out       ASN1intx_t *val
    );

/*****************************************************************************
  ASN1BERDecU8Val

  decode integer into unsigned 8 bit value
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BERDecU8Val(
    __in        ASN1decoding_t dec, 
                ASN1uint32_t tag, 
    __out       ASN1uint8_t *val
    );

/*****************************************************************************
  ASN1BERDecU16Val

  decode integer into unsigned 16 bit value
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BERDecU16Val(
    __in        ASN1decoding_t dec, 
                ASN1uint32_t tag, 
    __out       ASN1uint16_t *val
    );

/*****************************************************************************
  ASN1BERDecU32Val

  decode integer into unsigned 32 bit value
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BERDecU32Val(
    __in        ASN1decoding_t dec, 
                ASN1uint32_t tag, 
    __out       ASN1uint32_t *val
    );

/*****************************************************************************
  ASN1BERDecUTCTime

  decode utc time value
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BERDecUTCTime(
    __in        ASN1decoding_t dec, 
                ASN1uint32_t tag, 
    __out       ASN1utctime_t *val
    );


/*****************************************************************************
  ASN1BERDecZeroCharString

  decode zero terminated string value
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BERDecZeroCharString(
    __in        ASN1decoding_t dec, 
                ASN1uint32_t tag, 
    __deref_out_z
                ASN1ztcharstring_t *val
    );

/*****************************************************************************
  ASN1BERDecZeroCharString16

  decode zero terminated 16 bit string value
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BERDecZeroChar16String(
    __in        ASN1decoding_t dec, 
                ASN1uint32_t tag, 
    __deref_out_z
                ASN1ztchar16string_t *val
    );

/*****************************************************************************
  ASN1BERDecZeroCharString32

  decode zero terminated 32 bit string value
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BERDecZeroChar32String(
    __in        ASN1decoding_t dec, 
                ASN1uint32_t tag, 
    __deref_out_z
                ASN1ztchar32string_t *val
    );

/*****************************************************************************
  ASN1BERDecSkip

  skip a value
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BERDecSkip(
    __in  ASN1decoding_t dec
    );

/*****************************************************************************
  ASN1BERDecFlush

  finish decoding
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BERDecFlush(
    __in  ASN1decoding_t dec
    );

/*****************************************************************************
  ASN1BERDecOpenType

  decode an open type value, make copy
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BERDecOpenType(
    __in        ASN1decoding_t dec, 
    __out       ASN1open_t *val
    );

/*****************************************************************************
  ASN1BERDecOpenType2

  decode an open type value, no copy
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BERDecOpenType2(
    __in        ASN1decoding_t dec, 
    __out       ASN1open_t *val
    );

/*****************************************************************************
 ASN1BEREncCheck
    
    check for space in encoding buffer
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BEREncCheck(
    __in    ASN1encoding_t enc, 
            ASN1uint32_t noctets
    );

/*****************************************************************************
 ASN1BEREncTag
    
    encode a tag
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BEREncTag(
    __in        ASN1encoding_t enc, 
                ASN1uint32_t tag
    );

/*****************************************************************************
 ASN1BEREncExplicitTag
    
    encode explicit tag
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BEREncExplicitTag(
    __in        ASN1encoding_t enc, 
                ASN1uint32_t tag, 
    __out       ASN1uint32_t *pnLenOff
    );

/*****************************************************************************
 ASN1BEREncEndOfContents
    
    encode definite length
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BEREncEndOfContents(
    __in        ASN1encoding_t enc, 
                ASN1uint32_t nLenOff
    );

/*****************************************************************************
 ASN1BEREncLength
    
    encode length
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BEREncLength(
    __in        ASN1encoding_t enc, 
                ASN1uint32_t len
    );

/*****************************************************************************
 ASN1BERDecCheck
    
    check if len octets are left in decoding stream
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BERDecCheck(
    __in        ASN1decoding_t dec, 
                ASN1uint32_t len
    );

/*****************************************************************************
 ASN1BERDecTag
    
    decode a tag value; return constructed bit if desired 
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BERDecTag(
    __in        ASN1decoding_t dec, 
                ASN1uint32_t tag, 
    __out_opt   ASN1uint32_t *constructed
    );

/*****************************************************************************
 ASN1BERDecLength
    
    decode length
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BERDecLength(
    __in        ASN1decoding_t dec, 
    __out       ASN1uint32_t *len, 
    __out_opt   ASN1uint32_t *infinite
    );

/*****************************************************************************
 ASN1BERDecNotEndOfContents
    
    check if end of contents (of a constructed value) has been reached
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BERDecNotEndOfContents(
    __in        ASN1decoding_t dec, 
    __in        ASN1octet_t *pBufEnd
    );

/*****************************************************************************
 ASN1BERDecPeekTag
    
    peek the following tag without advancing the read position
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BERDecPeekTag(
    __in        ASN1decoding_t dec, 
    __out       ASN1uint32_t *tag
    );

/*****************************************************************************
 ASN1BEREncU32
    
    encode a unsigned integer value
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BEREncU32(
    __in        ASN1encoding_t enc, 
                ASN1uint32_t tag, 
                ASN1uint32_t
    );

/*****************************************************************************
 ASN1BEREncBool
    
    encode a boolean value
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BEREncBool(
    __in        ASN1encoding_t enc, 
                ASN1uint32_t tag, 
                ASN1bool_t val
    );

/*****************************************************************************
 ASN1BERDecBool
    
    decode boolean into ASN1boot_t
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BERDecBool(
    __in        ASN1decoding_t dec, 
                ASN1uint32_t tag, 
    __out       ASN1bool_t *val
    );

/*****************************************************************************
 ASN1BEREncEoid
    
    encode an object identifier value
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BEREncEoid(
    __in        ASN1encoding_t enc, 
                ASN1uint32_t tag, 
    __in        ASN1encodedOID_t *
    );

/*****************************************************************************
 ASN1BERDecEoid
    
    decode object identifier value
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BERDecEoid(
    __in        ASN1decoding_t dec, 
                ASN1uint32_t tag, 
    __out       ASN1encodedOID_t *val
    );

/*****************************************************************************
 ASN1BERDotVal2Eoid
    
    convert ObjID string value to encoded
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BERDotVal2Eoid(
    __in        ASN1encoding_t enc, 
    __in_z      char *pszDotVal, 
    __out       ASN1encodedOID_t *pOut
    );

/*****************************************************************************
 ASN1BERDotVal2Eoid
    
    convert object identifier value to string
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BEREoid2DotVal(
    __in        ASN1decoding_t dec, 
    __in        ASN1encodedOID_t *pIn, 
    __deref_out char **ppszDotVal
    );

/*****************************************************************************
 ASN1BEREoid_free
    
*****************************************************************************/
extern ASN1_PUBLIC 
void 
ASN1API 
ASN1BEREoid_free(
    __in        ASN1encodedOID_t *val
    );

/*****************************************************************************
 ASN1BEREncUTF8String
    
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BEREncUTF8String(
    __in        ASN1encoding_t enc, 
                ASN1uint32_t tag, 
                ASN1uint32_t length, 
    __in_ecount( length )
                WCHAR *value
    );

extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1DEREncUTF8String(
    __in        ASN1encoding_t enc, 
                ASN1uint32_t tag, 
                ASN1uint32_t length, 
    __in_ecount( length )
                WCHAR *value
    );

/*****************************************************************************
 ASN1BEREncUTF8String
    
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1BERDecUTF8String(
    __in        ASN1decoding_t dec, 
                ASN1uint32_t tag, 
    __out       ASN1wstring_t *val
    );


/*****************************************************************************
 ASN1DEREncBeginBlk
    
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1DEREncBeginBlk(
    __in        ASN1encoding_t enc, 
                ASN1blocktype_e eBlkType, 
    __deref_out void **ppBlk
    );

/*****************************************************************************
 ASN1DEREncNewBlkElement
    
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1DEREncNewBlkElement(
    __in        void *pBlk, 
    __deref_out ASN1encoding_t *enc2
    );

/*****************************************************************************
 ASN1DEREncFlushBlkElement
    
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1DEREncFlushBlkElement(
    __in        void *pBlk
    );

/*****************************************************************************
 ASN1DEREncEndBlk
    
*****************************************************************************/
extern ASN1_PUBLIC
__success( return > 0 )
int
ASN1API
ASN1DEREncEndBlk(
    __in        void *pBlk
    );


/*****************************************************************************
 DEPRECATED APIs - DO NOT USE
    
*****************************************************************************/

extern ASN1_PUBLIC int ASN1API ASN1BERDecDouble(ASN1decoding_t dec, ASN1uint32_t tag, double *);
extern ASN1_PUBLIC int ASN1API ASN1BEREncDouble(ASN1encoding_t enc, ASN1uint32_t tag, double);
extern ASN1_PUBLIC int ASN1API ASN1CEREncBitString(ASN1encoding_t enc, ASN1uint32_t, ASN1uint32_t, ASN1octet_t *);
extern ASN1_PUBLIC int ASN1API ASN1CEREncChar16String(ASN1encoding_t enc, ASN1uint32_t, ASN1uint32_t, ASN1char16_t *);
extern ASN1_PUBLIC int ASN1API ASN1CEREncChar32String(ASN1encoding_t enc, ASN1uint32_t, ASN1uint32_t, ASN1char32_t *);
extern ASN1_PUBLIC int ASN1API ASN1CEREncCharString(ASN1encoding_t enc, ASN1uint32_t, ASN1uint32_t, ASN1char_t *);
extern ASN1_PUBLIC int ASN1API ASN1CEREncMultibyteString(ASN1encoding_t enc, ASN1uint32_t, ASN1charstring_t *);
extern ASN1_PUBLIC int ASN1API ASN1CEREncOctetString(ASN1encoding_t enc, ASN1uint32_t, ASN1uint32_t, ASN1octet_t *);
extern ASN1_PUBLIC int ASN1API ASN1CEREncZeroMultibyteString(ASN1encoding_t enc, ASN1uint32_t, ASN1ztcharstring_t);


#ifdef __cplusplus
}
#endif

#include <poppack.h> /* End 8-byte packing */

#endif // __MS_BER_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\MSAAText.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0555 */
/* Compiler settings for msaatext.idl:
    Oicf, W1, Zp8, env=Win32 (32b run), target_arch=X86 7.00.0555 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __msaatext_h__
#define __msaatext_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __ITfMSAAControl_FWD_DEFINED__
#define __ITfMSAAControl_FWD_DEFINED__
typedef interface ITfMSAAControl ITfMSAAControl;
#endif 	/* __ITfMSAAControl_FWD_DEFINED__ */


#ifndef __IInternalDocWrap_FWD_DEFINED__
#define __IInternalDocWrap_FWD_DEFINED__
typedef interface IInternalDocWrap IInternalDocWrap;
#endif 	/* __IInternalDocWrap_FWD_DEFINED__ */


#ifndef __ITextStoreACPEx_FWD_DEFINED__
#define __ITextStoreACPEx_FWD_DEFINED__
typedef interface ITextStoreACPEx ITextStoreACPEx;
#endif 	/* __ITextStoreACPEx_FWD_DEFINED__ */


#ifndef __ITextStoreAnchorEx_FWD_DEFINED__
#define __ITextStoreAnchorEx_FWD_DEFINED__
typedef interface ITextStoreAnchorEx ITextStoreAnchorEx;
#endif 	/* __ITextStoreAnchorEx_FWD_DEFINED__ */


#ifndef __ITextStoreACPSinkEx_FWD_DEFINED__
#define __ITextStoreACPSinkEx_FWD_DEFINED__
typedef interface ITextStoreACPSinkEx ITextStoreACPSinkEx;
#endif 	/* __ITextStoreACPSinkEx_FWD_DEFINED__ */


#ifndef __ITextStoreSinkAnchorEx_FWD_DEFINED__
#define __ITextStoreSinkAnchorEx_FWD_DEFINED__
typedef interface ITextStoreSinkAnchorEx ITextStoreSinkAnchorEx;
#endif 	/* __ITextStoreSinkAnchorEx_FWD_DEFINED__ */


#ifndef __IAccDictionary_FWD_DEFINED__
#define __IAccDictionary_FWD_DEFINED__
typedef interface IAccDictionary IAccDictionary;
#endif 	/* __IAccDictionary_FWD_DEFINED__ */


#ifndef __IVersionInfo_FWD_DEFINED__
#define __IVersionInfo_FWD_DEFINED__
typedef interface IVersionInfo IVersionInfo;
#endif 	/* __IVersionInfo_FWD_DEFINED__ */


#ifndef __ICoCreateLocally_FWD_DEFINED__
#define __ICoCreateLocally_FWD_DEFINED__
typedef interface ICoCreateLocally ICoCreateLocally;
#endif 	/* __ICoCreateLocally_FWD_DEFINED__ */


#ifndef __ICoCreatedLocally_FWD_DEFINED__
#define __ICoCreatedLocally_FWD_DEFINED__
typedef interface ICoCreatedLocally ICoCreatedLocally;
#endif 	/* __ICoCreatedLocally_FWD_DEFINED__ */


#ifndef __IAccStore_FWD_DEFINED__
#define __IAccStore_FWD_DEFINED__
typedef interface IAccStore IAccStore;
#endif 	/* __IAccStore_FWD_DEFINED__ */


#ifndef __IAccServerDocMgr_FWD_DEFINED__
#define __IAccServerDocMgr_FWD_DEFINED__
typedef interface IAccServerDocMgr IAccServerDocMgr;
#endif 	/* __IAccServerDocMgr_FWD_DEFINED__ */


#ifndef __IAccClientDocMgr_FWD_DEFINED__
#define __IAccClientDocMgr_FWD_DEFINED__
typedef interface IAccClientDocMgr IAccClientDocMgr;
#endif 	/* __IAccClientDocMgr_FWD_DEFINED__ */


#ifndef __IDocWrap_FWD_DEFINED__
#define __IDocWrap_FWD_DEFINED__
typedef interface IDocWrap IDocWrap;
#endif 	/* __IDocWrap_FWD_DEFINED__ */


#ifndef __IClonableWrapper_FWD_DEFINED__
#define __IClonableWrapper_FWD_DEFINED__
typedef interface IClonableWrapper IClonableWrapper;
#endif 	/* __IClonableWrapper_FWD_DEFINED__ */


#ifndef __MSAAControl_FWD_DEFINED__
#define __MSAAControl_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSAAControl MSAAControl;
#else
typedef struct MSAAControl MSAAControl;
#endif /* __cplusplus */

#endif 	/* __MSAAControl_FWD_DEFINED__ */


#ifndef __AccStore_FWD_DEFINED__
#define __AccStore_FWD_DEFINED__

#ifdef __cplusplus
typedef class AccStore AccStore;
#else
typedef struct AccStore AccStore;
#endif /* __cplusplus */

#endif 	/* __AccStore_FWD_DEFINED__ */


#ifndef __AccDictionary_FWD_DEFINED__
#define __AccDictionary_FWD_DEFINED__

#ifdef __cplusplus
typedef class AccDictionary AccDictionary;
#else
typedef struct AccDictionary AccDictionary;
#endif /* __cplusplus */

#endif 	/* __AccDictionary_FWD_DEFINED__ */


#ifndef __AccServerDocMgr_FWD_DEFINED__
#define __AccServerDocMgr_FWD_DEFINED__

#ifdef __cplusplus
typedef class AccServerDocMgr AccServerDocMgr;
#else
typedef struct AccServerDocMgr AccServerDocMgr;
#endif /* __cplusplus */

#endif 	/* __AccServerDocMgr_FWD_DEFINED__ */


#ifndef __AccClientDocMgr_FWD_DEFINED__
#define __AccClientDocMgr_FWD_DEFINED__

#ifdef __cplusplus
typedef class AccClientDocMgr AccClientDocMgr;
#else
typedef struct AccClientDocMgr AccClientDocMgr;
#endif /* __cplusplus */

#endif 	/* __AccClientDocMgr_FWD_DEFINED__ */


#ifndef __DocWrap_FWD_DEFINED__
#define __DocWrap_FWD_DEFINED__

#ifdef __cplusplus
typedef class DocWrap DocWrap;
#else
typedef struct DocWrap DocWrap;
#endif /* __cplusplus */

#endif 	/* __DocWrap_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "ocidl.h"
#include "textstor.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_msaatext_0000_0000 */
/* [local] */ 

DEFINE_GUID( IID_ITfMSAAControl, 0xb5f8fb3b,0x393f,0x4f7c,0x84,0xcb,0x50,0x49,0x24,0xc2,0x70,0x5a);
DEFINE_GUID( IID_IInternalDocWrap, 0xE1AA6466,0x9DB4,0x40ba,0xBE,0x03,0x77,0xC3,0x8E,0x8E,0x60,0xB2);
DEFINE_GUID( IID_ITextStoreACPEx, 0xA2DE3BC2,0x3D8E,0x11d3,0x81,0xA9,0xF7,0x53,0xFB,0xE6,0x1A,0x00);
DEFINE_GUID( IID_ITextStoreAnchorEx, 0xA2DE3BC1,0x3D8E,0x11d3,0x81,0xA9,0xF7,0x53,0xFB,0xE6,0x1A,0x00);
DEFINE_GUID( IID_ITextStoreACPSinkEx, 0x2bdf9464,0x41e2,0x43e3,0x95,0x0c,0xa6,0x86,0x5b,0xa2,0x5c,0xd4);
DEFINE_GUID( IID_ITextStoreSinkAnchorEx, 0x25642426,0x028d,0x4474,0x97,0x7b,0x11,0x1b,0xb1,0x14,0xfe,0x3e);
DEFINE_GUID( IID_IAccDictionary, 0x1DC4CB5F,0xD737,0x474d,0xAD,0xE9,0x5C,0xCF,0xC9,0xBC,0x1C,0xC9);
DEFINE_GUID( IID_IVersionInfo, 0x401518EC,0xDB00,0x4611,0x9B,0x29,0x2A,0x0E,0x4B,0x9A,0xFA,0x85);
DEFINE_GUID( IID_ICoCreateLocally, 0x03DE00AA,0xF272,0x41e3,0x99,0xCB,0x03,0xC5,0xE8,0x11,0x4E,0xA0);
DEFINE_GUID( IID_ICoCreatedLocally, 0x0A53EB6C,0x1908,0x4742,0x8C,0xFF,0x2C,0xEE,0x2E,0x93,0xF9,0x4C);
DEFINE_GUID( IID_IAccStore, 0xE2CD4A63,0x2B72,0x4D48,0xB7,0x39,0x95,0xE4,0x76,0x51,0x95,0xBA);
DEFINE_GUID( IID_IAccServerDocMgr, 0xAD7C73CF,0x6DD5,0x4855,0xAB,0xC2,0xB0,0x4B,0xAD,0x5B,0x91,0x53);
DEFINE_GUID( IID_IAccClientDocMgr, 0x4C896039,0x7B6D,0x49e6,0xA8,0xC1,0x45,0x11,0x6A,0x98,0x29,0x2B);
DEFINE_GUID( IID_IDocWrap, 0xDCD285FE,0x0BE0,0x43BD,0x99,0xC9,0xAA,0xAE,0xC5,0x13,0xC5,0x55);
DEFINE_GUID( IID_IClonableWrapper, 0xB33E75FF,0xE84C,0x4dca,0xA2,0x5C,0x33,0xB8,0xDC,0x00,0x33,0x74);
DEFINE_GUID( LIBID_MSAATEXTLib, 0x150E2D7A,0xDAC1,0x4582,0x94,0x7D,0x2A,0x8F,0xD7,0x8B,0x82,0xCD);
DEFINE_GUID( CLSID_MSAAControl, 0x08cd963f,0x7a3e,0x4f5c,0x9b,0xd8,0xd6,0x92,0xbb,0x04,0x3c,0x5b );
DEFINE_GUID( CLSID_AccStore, 0x5440837F,0x4BFF,0x4AE5,0xA1,0xB1,0x77,0x22,0xEC,0xC6,0x33,0x2A );
DEFINE_GUID( CLSID_AccDictionary, 0x6572EE16,0x5FE5,0x4331,0xBB,0x6D,0x76,0xA4,0x9C,0x56,0xE4,0x23 );
DEFINE_GUID( CLSID_AccServerDocMgr, 0x6089A37E,0xEB8A,0x482D,0xBD,0x6F,0xF9,0xF4,0x69,0x04,0xD1,0x6D );
DEFINE_GUID( CLSID_AccClientDocMgr, 0xFC48CC30,0x4F3E,0x4fa1,0x80,0x3B,0xAD,0x0E,0x19,0x6A,0x83,0xB1 );
DEFINE_GUID( CLSID_DocWrap, 0xBF426F7E,0x7A5E,0x44D6,0x83,0x0C,0xA3,0x90,0xEA,0x94,0x62,0xA3 );


extern RPC_IF_HANDLE __MIDL_itf_msaatext_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_msaatext_0000_0000_v0_0_s_ifspec;

#ifndef __ITfMSAAControl_INTERFACE_DEFINED__
#define __ITfMSAAControl_INTERFACE_DEFINED__

/* interface ITfMSAAControl */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITfMSAAControl;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b5f8fb3b-393f-4f7c-84cb-504924c2705a")
    ITfMSAAControl : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SystemEnableMSAA( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SystemDisableMSAA( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfMSAAControlVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfMSAAControl * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfMSAAControl * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfMSAAControl * This);
        
        HRESULT ( STDMETHODCALLTYPE *SystemEnableMSAA )( 
            __RPC__in ITfMSAAControl * This);
        
        HRESULT ( STDMETHODCALLTYPE *SystemDisableMSAA )( 
            __RPC__in ITfMSAAControl * This);
        
        END_INTERFACE
    } ITfMSAAControlVtbl;

    interface ITfMSAAControl
    {
        CONST_VTBL struct ITfMSAAControlVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfMSAAControl_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfMSAAControl_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfMSAAControl_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfMSAAControl_SystemEnableMSAA(This)	\
    ( (This)->lpVtbl -> SystemEnableMSAA(This) ) 

#define ITfMSAAControl_SystemDisableMSAA(This)	\
    ( (This)->lpVtbl -> SystemDisableMSAA(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfMSAAControl_INTERFACE_DEFINED__ */


#ifndef __IInternalDocWrap_INTERFACE_DEFINED__
#define __IInternalDocWrap_INTERFACE_DEFINED__

/* interface IInternalDocWrap */
/* [unique][uuid][local][object] */ 


EXTERN_C const IID IID_IInternalDocWrap;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("E1AA6466-9DB4-40ba-BE03-77C38E8E60B2")
    IInternalDocWrap : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE NotifyRevoke( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IInternalDocWrapVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IInternalDocWrap * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IInternalDocWrap * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IInternalDocWrap * This);
        
        HRESULT ( STDMETHODCALLTYPE *NotifyRevoke )( 
            IInternalDocWrap * This);
        
        END_INTERFACE
    } IInternalDocWrapVtbl;

    interface IInternalDocWrap
    {
        CONST_VTBL struct IInternalDocWrapVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IInternalDocWrap_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IInternalDocWrap_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IInternalDocWrap_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IInternalDocWrap_NotifyRevoke(This)	\
    ( (This)->lpVtbl -> NotifyRevoke(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IInternalDocWrap_INTERFACE_DEFINED__ */


#ifndef __ITextStoreACPEx_INTERFACE_DEFINED__
#define __ITextStoreACPEx_INTERFACE_DEFINED__

/* interface ITextStoreACPEx */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITextStoreACPEx;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("A2DE3BC2-3D8E-11d3-81A9-F753FBE61A00")
    ITextStoreACPEx : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ScrollToRect( 
            /* [in] */ LONG acpStart,
            /* [in] */ LONG acpEnd,
            /* [in] */ RECT rc,
            /* [in] */ DWORD dwPosition) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITextStoreACPExVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITextStoreACPEx * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITextStoreACPEx * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITextStoreACPEx * This);
        
        HRESULT ( STDMETHODCALLTYPE *ScrollToRect )( 
            __RPC__in ITextStoreACPEx * This,
            /* [in] */ LONG acpStart,
            /* [in] */ LONG acpEnd,
            /* [in] */ RECT rc,
            /* [in] */ DWORD dwPosition);
        
        END_INTERFACE
    } ITextStoreACPExVtbl;

    interface ITextStoreACPEx
    {
        CONST_VTBL struct ITextStoreACPExVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITextStoreACPEx_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITextStoreACPEx_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITextStoreACPEx_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITextStoreACPEx_ScrollToRect(This,acpStart,acpEnd,rc,dwPosition)	\
    ( (This)->lpVtbl -> ScrollToRect(This,acpStart,acpEnd,rc,dwPosition) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITextStoreACPEx_INTERFACE_DEFINED__ */


#ifndef __ITextStoreAnchorEx_INTERFACE_DEFINED__
#define __ITextStoreAnchorEx_INTERFACE_DEFINED__

/* interface ITextStoreAnchorEx */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITextStoreAnchorEx;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("A2DE3BC1-3D8E-11d3-81A9-F753FBE61A00")
    ITextStoreAnchorEx : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ScrollToRect( 
            /* [in] */ __RPC__in_opt IAnchor *pStart,
            /* [in] */ __RPC__in_opt IAnchor *pEnd,
            /* [in] */ RECT rc,
            /* [in] */ DWORD dwPosition) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITextStoreAnchorExVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITextStoreAnchorEx * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITextStoreAnchorEx * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITextStoreAnchorEx * This);
        
        HRESULT ( STDMETHODCALLTYPE *ScrollToRect )( 
            __RPC__in ITextStoreAnchorEx * This,
            /* [in] */ __RPC__in_opt IAnchor *pStart,
            /* [in] */ __RPC__in_opt IAnchor *pEnd,
            /* [in] */ RECT rc,
            /* [in] */ DWORD dwPosition);
        
        END_INTERFACE
    } ITextStoreAnchorExVtbl;

    interface ITextStoreAnchorEx
    {
        CONST_VTBL struct ITextStoreAnchorExVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITextStoreAnchorEx_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITextStoreAnchorEx_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITextStoreAnchorEx_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITextStoreAnchorEx_ScrollToRect(This,pStart,pEnd,rc,dwPosition)	\
    ( (This)->lpVtbl -> ScrollToRect(This,pStart,pEnd,rc,dwPosition) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITextStoreAnchorEx_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_msaatext_0000_0004 */
/* [local] */ 

#define	TS_STRF_START	( 0 )

#define	TS_STRF_MID	( 1 )

#define	TS_STRF_END	( 2 )



extern RPC_IF_HANDLE __MIDL_itf_msaatext_0000_0004_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_msaatext_0000_0004_v0_0_s_ifspec;

#ifndef __ITextStoreACPSinkEx_INTERFACE_DEFINED__
#define __ITextStoreACPSinkEx_INTERFACE_DEFINED__

/* interface ITextStoreACPSinkEx */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITextStoreACPSinkEx;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2bdf9464-41e2-43e3-950c-a6865ba25cd4")
    ITextStoreACPSinkEx : public ITextStoreACPSink
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnDisconnect( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITextStoreACPSinkExVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITextStoreACPSinkEx * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITextStoreACPSinkEx * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITextStoreACPSinkEx * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnTextChange )( 
            __RPC__in ITextStoreACPSinkEx * This,
            /* [in] */ DWORD dwFlags,
            /* [in] */ __RPC__in const TS_TEXTCHANGE *pChange);
        
        HRESULT ( STDMETHODCALLTYPE *OnSelectionChange )( 
            __RPC__in ITextStoreACPSinkEx * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnLayoutChange )( 
            __RPC__in ITextStoreACPSinkEx * This,
            /* [in] */ TsLayoutCode lcode,
            /* [in] */ TsViewCookie vcView);
        
        HRESULT ( STDMETHODCALLTYPE *OnStatusChange )( 
            __RPC__in ITextStoreACPSinkEx * This,
            /* [in] */ DWORD dwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *OnAttrsChange )( 
            __RPC__in ITextStoreACPSinkEx * This,
            /* [in] */ LONG acpStart,
            /* [in] */ LONG acpEnd,
            /* [in] */ ULONG cAttrs,
            /* [size_is][in] */ __RPC__in_ecount_full(cAttrs) const TS_ATTRID *paAttrs);
        
        HRESULT ( STDMETHODCALLTYPE *OnLockGranted )( 
            __RPC__in ITextStoreACPSinkEx * This,
            /* [in] */ DWORD dwLockFlags);
        
        HRESULT ( STDMETHODCALLTYPE *OnStartEditTransaction )( 
            __RPC__in ITextStoreACPSinkEx * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnEndEditTransaction )( 
            __RPC__in ITextStoreACPSinkEx * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnDisconnect )( 
            __RPC__in ITextStoreACPSinkEx * This);
        
        END_INTERFACE
    } ITextStoreACPSinkExVtbl;

    interface ITextStoreACPSinkEx
    {
        CONST_VTBL struct ITextStoreACPSinkExVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITextStoreACPSinkEx_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITextStoreACPSinkEx_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITextStoreACPSinkEx_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITextStoreACPSinkEx_OnTextChange(This,dwFlags,pChange)	\
    ( (This)->lpVtbl -> OnTextChange(This,dwFlags,pChange) ) 

#define ITextStoreACPSinkEx_OnSelectionChange(This)	\
    ( (This)->lpVtbl -> OnSelectionChange(This) ) 

#define ITextStoreACPSinkEx_OnLayoutChange(This,lcode,vcView)	\
    ( (This)->lpVtbl -> OnLayoutChange(This,lcode,vcView) ) 

#define ITextStoreACPSinkEx_OnStatusChange(This,dwFlags)	\
    ( (This)->lpVtbl -> OnStatusChange(This,dwFlags) ) 

#define ITextStoreACPSinkEx_OnAttrsChange(This,acpStart,acpEnd,cAttrs,paAttrs)	\
    ( (This)->lpVtbl -> OnAttrsChange(This,acpStart,acpEnd,cAttrs,paAttrs) ) 

#define ITextStoreACPSinkEx_OnLockGranted(This,dwLockFlags)	\
    ( (This)->lpVtbl -> OnLockGranted(This,dwLockFlags) ) 

#define ITextStoreACPSinkEx_OnStartEditTransaction(This)	\
    ( (This)->lpVtbl -> OnStartEditTransaction(This) ) 

#define ITextStoreACPSinkEx_OnEndEditTransaction(This)	\
    ( (This)->lpVtbl -> OnEndEditTransaction(This) ) 


#define ITextStoreACPSinkEx_OnDisconnect(This)	\
    ( (This)->lpVtbl -> OnDisconnect(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITextStoreACPSinkEx_INTERFACE_DEFINED__ */


#ifndef __ITextStoreSinkAnchorEx_INTERFACE_DEFINED__
#define __ITextStoreSinkAnchorEx_INTERFACE_DEFINED__

/* interface ITextStoreSinkAnchorEx */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITextStoreSinkAnchorEx;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("25642426-028d-4474-977b-111bb114fe3e")
    ITextStoreSinkAnchorEx : public ITextStoreAnchorSink
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnDisconnect( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITextStoreSinkAnchorExVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITextStoreSinkAnchorEx * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITextStoreSinkAnchorEx * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITextStoreSinkAnchorEx * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnTextChange )( 
            __RPC__in ITextStoreSinkAnchorEx * This,
            /* [in] */ DWORD dwFlags,
            /* [in] */ __RPC__in_opt IAnchor *paStart,
            /* [in] */ __RPC__in_opt IAnchor *paEnd);
        
        HRESULT ( STDMETHODCALLTYPE *OnSelectionChange )( 
            __RPC__in ITextStoreSinkAnchorEx * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnLayoutChange )( 
            __RPC__in ITextStoreSinkAnchorEx * This,
            /* [in] */ TsLayoutCode lcode,
            /* [in] */ TsViewCookie vcView);
        
        HRESULT ( STDMETHODCALLTYPE *OnStatusChange )( 
            __RPC__in ITextStoreSinkAnchorEx * This,
            /* [in] */ DWORD dwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *OnAttrsChange )( 
            __RPC__in ITextStoreSinkAnchorEx * This,
            /* [in] */ __RPC__in_opt IAnchor *paStart,
            /* [in] */ __RPC__in_opt IAnchor *paEnd,
            /* [in] */ ULONG cAttrs,
            /* [size_is][in] */ __RPC__in_ecount_full(cAttrs) const TS_ATTRID *paAttrs);
        
        HRESULT ( STDMETHODCALLTYPE *OnLockGranted )( 
            __RPC__in ITextStoreSinkAnchorEx * This,
            /* [in] */ DWORD dwLockFlags);
        
        HRESULT ( STDMETHODCALLTYPE *OnStartEditTransaction )( 
            __RPC__in ITextStoreSinkAnchorEx * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnEndEditTransaction )( 
            __RPC__in ITextStoreSinkAnchorEx * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnDisconnect )( 
            __RPC__in ITextStoreSinkAnchorEx * This);
        
        END_INTERFACE
    } ITextStoreSinkAnchorExVtbl;

    interface ITextStoreSinkAnchorEx
    {
        CONST_VTBL struct ITextStoreSinkAnchorExVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITextStoreSinkAnchorEx_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITextStoreSinkAnchorEx_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITextStoreSinkAnchorEx_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITextStoreSinkAnchorEx_OnTextChange(This,dwFlags,paStart,paEnd)	\
    ( (This)->lpVtbl -> OnTextChange(This,dwFlags,paStart,paEnd) ) 

#define ITextStoreSinkAnchorEx_OnSelectionChange(This)	\
    ( (This)->lpVtbl -> OnSelectionChange(This) ) 

#define ITextStoreSinkAnchorEx_OnLayoutChange(This,lcode,vcView)	\
    ( (This)->lpVtbl -> OnLayoutChange(This,lcode,vcView) ) 

#define ITextStoreSinkAnchorEx_OnStatusChange(This,dwFlags)	\
    ( (This)->lpVtbl -> OnStatusChange(This,dwFlags) ) 

#define ITextStoreSinkAnchorEx_OnAttrsChange(This,paStart,paEnd,cAttrs,paAttrs)	\
    ( (This)->lpVtbl -> OnAttrsChange(This,paStart,paEnd,cAttrs,paAttrs) ) 

#define ITextStoreSinkAnchorEx_OnLockGranted(This,dwLockFlags)	\
    ( (This)->lpVtbl -> OnLockGranted(This,dwLockFlags) ) 

#define ITextStoreSinkAnchorEx_OnStartEditTransaction(This)	\
    ( (This)->lpVtbl -> OnStartEditTransaction(This) ) 

#define ITextStoreSinkAnchorEx_OnEndEditTransaction(This)	\
    ( (This)->lpVtbl -> OnEndEditTransaction(This) ) 


#define ITextStoreSinkAnchorEx_OnDisconnect(This)	\
    ( (This)->lpVtbl -> OnDisconnect(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITextStoreSinkAnchorEx_INTERFACE_DEFINED__ */


#ifndef __IAccDictionary_INTERFACE_DEFINED__
#define __IAccDictionary_INTERFACE_DEFINED__

/* interface IAccDictionary */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IAccDictionary;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1DC4CB5F-D737-474d-ADE9-5CCFC9BC1CC9")
    IAccDictionary : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetLocalizedString( 
            /* [in] */ __RPC__in REFGUID Term,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt BSTR *pResult,
            /* [out] */ __RPC__out LCID *plcid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetParentTerm( 
            /* [in] */ __RPC__in REFGUID Term,
            /* [out] */ __RPC__out GUID *pParentTerm) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMnemonicString( 
            /* [in] */ __RPC__in REFGUID Term,
            /* [out] */ __RPC__deref_out_opt BSTR *pResult) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LookupMnemonicTerm( 
            /* [in] */ __RPC__in BSTR bstrMnemonic,
            /* [out] */ __RPC__out GUID *pTerm) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ConvertValueToString( 
            /* [in] */ __RPC__in REFGUID Term,
            /* [in] */ LCID lcid,
            /* [in] */ VARIANT varValue,
            /* [out] */ __RPC__deref_out_opt BSTR *pbstrResult,
            /* [out] */ __RPC__out LCID *plcid) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IAccDictionaryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IAccDictionary * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IAccDictionary * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IAccDictionary * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetLocalizedString )( 
            __RPC__in IAccDictionary * This,
            /* [in] */ __RPC__in REFGUID Term,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt BSTR *pResult,
            /* [out] */ __RPC__out LCID *plcid);
        
        HRESULT ( STDMETHODCALLTYPE *GetParentTerm )( 
            __RPC__in IAccDictionary * This,
            /* [in] */ __RPC__in REFGUID Term,
            /* [out] */ __RPC__out GUID *pParentTerm);
        
        HRESULT ( STDMETHODCALLTYPE *GetMnemonicString )( 
            __RPC__in IAccDictionary * This,
            /* [in] */ __RPC__in REFGUID Term,
            /* [out] */ __RPC__deref_out_opt BSTR *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *LookupMnemonicTerm )( 
            __RPC__in IAccDictionary * This,
            /* [in] */ __RPC__in BSTR bstrMnemonic,
            /* [out] */ __RPC__out GUID *pTerm);
        
        HRESULT ( STDMETHODCALLTYPE *ConvertValueToString )( 
            __RPC__in IAccDictionary * This,
            /* [in] */ __RPC__in REFGUID Term,
            /* [in] */ LCID lcid,
            /* [in] */ VARIANT varValue,
            /* [out] */ __RPC__deref_out_opt BSTR *pbstrResult,
            /* [out] */ __RPC__out LCID *plcid);
        
        END_INTERFACE
    } IAccDictionaryVtbl;

    interface IAccDictionary
    {
        CONST_VTBL struct IAccDictionaryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IAccDictionary_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IAccDictionary_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IAccDictionary_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IAccDictionary_GetLocalizedString(This,Term,lcid,pResult,plcid)	\
    ( (This)->lpVtbl -> GetLocalizedString(This,Term,lcid,pResult,plcid) ) 

#define IAccDictionary_GetParentTerm(This,Term,pParentTerm)	\
    ( (This)->lpVtbl -> GetParentTerm(This,Term,pParentTerm) ) 

#define IAccDictionary_GetMnemonicString(This,Term,pResult)	\
    ( (This)->lpVtbl -> GetMnemonicString(This,Term,pResult) ) 

#define IAccDictionary_LookupMnemonicTerm(This,bstrMnemonic,pTerm)	\
    ( (This)->lpVtbl -> LookupMnemonicTerm(This,bstrMnemonic,pTerm) ) 

#define IAccDictionary_ConvertValueToString(This,Term,lcid,varValue,pbstrResult,plcid)	\
    ( (This)->lpVtbl -> ConvertValueToString(This,Term,lcid,varValue,pbstrResult,plcid) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IAccDictionary_INTERFACE_DEFINED__ */


#ifndef __IVersionInfo_INTERFACE_DEFINED__
#define __IVersionInfo_INTERFACE_DEFINED__

/* interface IVersionInfo */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IVersionInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("401518EC-DB00-4611-9B29-2A0E4B9AFA85")
    IVersionInfo : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetSubcomponentCount( 
            /* [in] */ ULONG ulSub,
            /* [out] */ __RPC__out ULONG *ulCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetImplementationID( 
            /* [in] */ ULONG ulSub,
            /* [out] */ __RPC__out GUID *implid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetBuildVersion( 
            /* [in] */ ULONG ulSub,
            /* [out] */ __RPC__out DWORD *pdwMajor,
            /* [out] */ __RPC__out DWORD *pdwMinor) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetComponentDescription( 
            /* [in] */ ULONG ulSub,
            /* [out] */ __RPC__deref_out_opt BSTR *pImplStr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetInstanceDescription( 
            /* [in] */ ULONG ulSub,
            /* [out] */ __RPC__deref_out_opt BSTR *pImplStr) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IVersionInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IVersionInfo * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IVersionInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IVersionInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetSubcomponentCount )( 
            __RPC__in IVersionInfo * This,
            /* [in] */ ULONG ulSub,
            /* [out] */ __RPC__out ULONG *ulCount);
        
        HRESULT ( STDMETHODCALLTYPE *GetImplementationID )( 
            __RPC__in IVersionInfo * This,
            /* [in] */ ULONG ulSub,
            /* [out] */ __RPC__out GUID *implid);
        
        HRESULT ( STDMETHODCALLTYPE *GetBuildVersion )( 
            __RPC__in IVersionInfo * This,
            /* [in] */ ULONG ulSub,
            /* [out] */ __RPC__out DWORD *pdwMajor,
            /* [out] */ __RPC__out DWORD *pdwMinor);
        
        HRESULT ( STDMETHODCALLTYPE *GetComponentDescription )( 
            __RPC__in IVersionInfo * This,
            /* [in] */ ULONG ulSub,
            /* [out] */ __RPC__deref_out_opt BSTR *pImplStr);
        
        HRESULT ( STDMETHODCALLTYPE *GetInstanceDescription )( 
            __RPC__in IVersionInfo * This,
            /* [in] */ ULONG ulSub,
            /* [out] */ __RPC__deref_out_opt BSTR *pImplStr);
        
        END_INTERFACE
    } IVersionInfoVtbl;

    interface IVersionInfo
    {
        CONST_VTBL struct IVersionInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IVersionInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IVersionInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IVersionInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IVersionInfo_GetSubcomponentCount(This,ulSub,ulCount)	\
    ( (This)->lpVtbl -> GetSubcomponentCount(This,ulSub,ulCount) ) 

#define IVersionInfo_GetImplementationID(This,ulSub,implid)	\
    ( (This)->lpVtbl -> GetImplementationID(This,ulSub,implid) ) 

#define IVersionInfo_GetBuildVersion(This,ulSub,pdwMajor,pdwMinor)	\
    ( (This)->lpVtbl -> GetBuildVersion(This,ulSub,pdwMajor,pdwMinor) ) 

#define IVersionInfo_GetComponentDescription(This,ulSub,pImplStr)	\
    ( (This)->lpVtbl -> GetComponentDescription(This,ulSub,pImplStr) ) 

#define IVersionInfo_GetInstanceDescription(This,ulSub,pImplStr)	\
    ( (This)->lpVtbl -> GetInstanceDescription(This,ulSub,pImplStr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IVersionInfo_INTERFACE_DEFINED__ */


#ifndef __ICoCreateLocally_INTERFACE_DEFINED__
#define __ICoCreateLocally_INTERFACE_DEFINED__

/* interface ICoCreateLocally */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ICoCreateLocally;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("03DE00AA-F272-41e3-99CB-03C5E8114EA0")
    ICoCreateLocally : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE CoCreateLocally( 
            /* [in] */ __RPC__in REFCLSID rclsid,
            /* [in] */ DWORD dwClsContext,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ __RPC__deref_out_opt IUnknown **punk,
            /* [in] */ __RPC__in REFIID riidParam,
            /* [iid_is][in] */ __RPC__in_opt IUnknown *punkParam,
            /* [in] */ VARIANT varParam) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ICoCreateLocallyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ICoCreateLocally * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ICoCreateLocally * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ICoCreateLocally * This);
        
        HRESULT ( STDMETHODCALLTYPE *CoCreateLocally )( 
            __RPC__in ICoCreateLocally * This,
            /* [in] */ __RPC__in REFCLSID rclsid,
            /* [in] */ DWORD dwClsContext,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ __RPC__deref_out_opt IUnknown **punk,
            /* [in] */ __RPC__in REFIID riidParam,
            /* [iid_is][in] */ __RPC__in_opt IUnknown *punkParam,
            /* [in] */ VARIANT varParam);
        
        END_INTERFACE
    } ICoCreateLocallyVtbl;

    interface ICoCreateLocally
    {
        CONST_VTBL struct ICoCreateLocallyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICoCreateLocally_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICoCreateLocally_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICoCreateLocally_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICoCreateLocally_CoCreateLocally(This,rclsid,dwClsContext,riid,punk,riidParam,punkParam,varParam)	\
    ( (This)->lpVtbl -> CoCreateLocally(This,rclsid,dwClsContext,riid,punk,riidParam,punkParam,varParam) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICoCreateLocally_INTERFACE_DEFINED__ */


#ifndef __ICoCreatedLocally_INTERFACE_DEFINED__
#define __ICoCreatedLocally_INTERFACE_DEFINED__

/* interface ICoCreatedLocally */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ICoCreatedLocally;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0A53EB6C-1908-4742-8CFF-2CEE2E93F94C")
    ICoCreatedLocally : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE LocalInit( 
            /* [in] */ __RPC__in_opt IUnknown *punkLocalObject,
            /* [in] */ __RPC__in REFIID riidParam,
            /* [iid_is][in] */ __RPC__in_opt IUnknown *punkParam,
            /* [in] */ VARIANT varParam) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ICoCreatedLocallyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ICoCreatedLocally * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ICoCreatedLocally * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ICoCreatedLocally * This);
        
        HRESULT ( STDMETHODCALLTYPE *LocalInit )( 
            __RPC__in ICoCreatedLocally * This,
            /* [in] */ __RPC__in_opt IUnknown *punkLocalObject,
            /* [in] */ __RPC__in REFIID riidParam,
            /* [iid_is][in] */ __RPC__in_opt IUnknown *punkParam,
            /* [in] */ VARIANT varParam);
        
        END_INTERFACE
    } ICoCreatedLocallyVtbl;

    interface ICoCreatedLocally
    {
        CONST_VTBL struct ICoCreatedLocallyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICoCreatedLocally_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICoCreatedLocally_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICoCreatedLocally_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICoCreatedLocally_LocalInit(This,punkLocalObject,riidParam,punkParam,varParam)	\
    ( (This)->lpVtbl -> LocalInit(This,punkLocalObject,riidParam,punkParam,varParam) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICoCreatedLocally_INTERFACE_DEFINED__ */


#ifndef __IAccStore_INTERFACE_DEFINED__
#define __IAccStore_INTERFACE_DEFINED__

/* interface IAccStore */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IAccStore;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("E2CD4A63-2B72-4D48-B739-95E4765195BA")
    IAccStore : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Register( 
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][in] */ __RPC__in_opt IUnknown *punk) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Unregister( 
            /* [in] */ __RPC__in_opt IUnknown *punk) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDocuments( 
            /* [out] */ __RPC__deref_out_opt IEnumUnknown **enumUnknown) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LookupByHWND( 
            /* [in] */ __RPC__in HWND hWnd,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ __RPC__deref_out_opt IUnknown **ppunk) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LookupByPoint( 
            /* [in] */ POINT pt,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ __RPC__deref_out_opt IUnknown **ppunk) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnDocumentFocus( 
            /* [in] */ __RPC__in_opt IUnknown *punk) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetFocused( 
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ __RPC__deref_out_opt IUnknown **ppunk) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IAccStoreVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IAccStore * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IAccStore * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IAccStore * This);
        
        HRESULT ( STDMETHODCALLTYPE *Register )( 
            __RPC__in IAccStore * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][in] */ __RPC__in_opt IUnknown *punk);
        
        HRESULT ( STDMETHODCALLTYPE *Unregister )( 
            __RPC__in IAccStore * This,
            /* [in] */ __RPC__in_opt IUnknown *punk);
        
        HRESULT ( STDMETHODCALLTYPE *GetDocuments )( 
            __RPC__in IAccStore * This,
            /* [out] */ __RPC__deref_out_opt IEnumUnknown **enumUnknown);
        
        HRESULT ( STDMETHODCALLTYPE *LookupByHWND )( 
            __RPC__in IAccStore * This,
            /* [in] */ __RPC__in HWND hWnd,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ __RPC__deref_out_opt IUnknown **ppunk);
        
        HRESULT ( STDMETHODCALLTYPE *LookupByPoint )( 
            __RPC__in IAccStore * This,
            /* [in] */ POINT pt,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ __RPC__deref_out_opt IUnknown **ppunk);
        
        HRESULT ( STDMETHODCALLTYPE *OnDocumentFocus )( 
            __RPC__in IAccStore * This,
            /* [in] */ __RPC__in_opt IUnknown *punk);
        
        HRESULT ( STDMETHODCALLTYPE *GetFocused )( 
            __RPC__in IAccStore * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ __RPC__deref_out_opt IUnknown **ppunk);
        
        END_INTERFACE
    } IAccStoreVtbl;

    interface IAccStore
    {
        CONST_VTBL struct IAccStoreVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IAccStore_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IAccStore_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IAccStore_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IAccStore_Register(This,riid,punk)	\
    ( (This)->lpVtbl -> Register(This,riid,punk) ) 

#define IAccStore_Unregister(This,punk)	\
    ( (This)->lpVtbl -> Unregister(This,punk) ) 

#define IAccStore_GetDocuments(This,enumUnknown)	\
    ( (This)->lpVtbl -> GetDocuments(This,enumUnknown) ) 

#define IAccStore_LookupByHWND(This,hWnd,riid,ppunk)	\
    ( (This)->lpVtbl -> LookupByHWND(This,hWnd,riid,ppunk) ) 

#define IAccStore_LookupByPoint(This,pt,riid,ppunk)	\
    ( (This)->lpVtbl -> LookupByPoint(This,pt,riid,ppunk) ) 

#define IAccStore_OnDocumentFocus(This,punk)	\
    ( (This)->lpVtbl -> OnDocumentFocus(This,punk) ) 

#define IAccStore_GetFocused(This,riid,ppunk)	\
    ( (This)->lpVtbl -> GetFocused(This,riid,ppunk) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IAccStore_INTERFACE_DEFINED__ */


#ifndef __IAccServerDocMgr_INTERFACE_DEFINED__
#define __IAccServerDocMgr_INTERFACE_DEFINED__

/* interface IAccServerDocMgr */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IAccServerDocMgr;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("AD7C73CF-6DD5-4855-ABC2-B04BAD5B9153")
    IAccServerDocMgr : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE NewDocument( 
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][in] */ __RPC__in_opt IUnknown *punk) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RevokeDocument( 
            /* [in] */ __RPC__in_opt IUnknown *punk) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnDocumentFocus( 
            /* [in] */ __RPC__in_opt IUnknown *punk) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IAccServerDocMgrVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IAccServerDocMgr * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IAccServerDocMgr * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IAccServerDocMgr * This);
        
        HRESULT ( STDMETHODCALLTYPE *NewDocument )( 
            __RPC__in IAccServerDocMgr * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][in] */ __RPC__in_opt IUnknown *punk);
        
        HRESULT ( STDMETHODCALLTYPE *RevokeDocument )( 
            __RPC__in IAccServerDocMgr * This,
            /* [in] */ __RPC__in_opt IUnknown *punk);
        
        HRESULT ( STDMETHODCALLTYPE *OnDocumentFocus )( 
            __RPC__in IAccServerDocMgr * This,
            /* [in] */ __RPC__in_opt IUnknown *punk);
        
        END_INTERFACE
    } IAccServerDocMgrVtbl;

    interface IAccServerDocMgr
    {
        CONST_VTBL struct IAccServerDocMgrVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IAccServerDocMgr_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IAccServerDocMgr_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IAccServerDocMgr_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IAccServerDocMgr_NewDocument(This,riid,punk)	\
    ( (This)->lpVtbl -> NewDocument(This,riid,punk) ) 

#define IAccServerDocMgr_RevokeDocument(This,punk)	\
    ( (This)->lpVtbl -> RevokeDocument(This,punk) ) 

#define IAccServerDocMgr_OnDocumentFocus(This,punk)	\
    ( (This)->lpVtbl -> OnDocumentFocus(This,punk) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IAccServerDocMgr_INTERFACE_DEFINED__ */


#ifndef __IAccClientDocMgr_INTERFACE_DEFINED__
#define __IAccClientDocMgr_INTERFACE_DEFINED__

/* interface IAccClientDocMgr */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IAccClientDocMgr;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4C896039-7B6D-49e6-A8C1-45116A98292B")
    IAccClientDocMgr : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetDocuments( 
            /* [out] */ __RPC__deref_out_opt IEnumUnknown **enumUnknown) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LookupByHWND( 
            /* [in] */ __RPC__in HWND hWnd,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ __RPC__deref_out_opt IUnknown **ppunk) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LookupByPoint( 
            /* [in] */ POINT pt,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ __RPC__deref_out_opt IUnknown **ppunk) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetFocused( 
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ __RPC__deref_out_opt IUnknown **ppunk) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IAccClientDocMgrVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IAccClientDocMgr * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IAccClientDocMgr * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IAccClientDocMgr * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetDocuments )( 
            __RPC__in IAccClientDocMgr * This,
            /* [out] */ __RPC__deref_out_opt IEnumUnknown **enumUnknown);
        
        HRESULT ( STDMETHODCALLTYPE *LookupByHWND )( 
            __RPC__in IAccClientDocMgr * This,
            /* [in] */ __RPC__in HWND hWnd,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ __RPC__deref_out_opt IUnknown **ppunk);
        
        HRESULT ( STDMETHODCALLTYPE *LookupByPoint )( 
            __RPC__in IAccClientDocMgr * This,
            /* [in] */ POINT pt,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ __RPC__deref_out_opt IUnknown **ppunk);
        
        HRESULT ( STDMETHODCALLTYPE *GetFocused )( 
            __RPC__in IAccClientDocMgr * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ __RPC__deref_out_opt IUnknown **ppunk);
        
        END_INTERFACE
    } IAccClientDocMgrVtbl;

    interface IAccClientDocMgr
    {
        CONST_VTBL struct IAccClientDocMgrVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IAccClientDocMgr_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IAccClientDocMgr_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IAccClientDocMgr_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IAccClientDocMgr_GetDocuments(This,enumUnknown)	\
    ( (This)->lpVtbl -> GetDocuments(This,enumUnknown) ) 

#define IAccClientDocMgr_LookupByHWND(This,hWnd,riid,ppunk)	\
    ( (This)->lpVtbl -> LookupByHWND(This,hWnd,riid,ppunk) ) 

#define IAccClientDocMgr_LookupByPoint(This,pt,riid,ppunk)	\
    ( (This)->lpVtbl -> LookupByPoint(This,pt,riid,ppunk) ) 

#define IAccClientDocMgr_GetFocused(This,riid,ppunk)	\
    ( (This)->lpVtbl -> GetFocused(This,riid,ppunk) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IAccClientDocMgr_INTERFACE_DEFINED__ */


#ifndef __IDocWrap_INTERFACE_DEFINED__
#define __IDocWrap_INTERFACE_DEFINED__

/* interface IDocWrap */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IDocWrap;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("DCD285FE-0BE0-43BD-99C9-AAAEC513C555")
    IDocWrap : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetDoc( 
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][in] */ __RPC__in_opt IUnknown *punk) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetWrappedDoc( 
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ __RPC__deref_out_opt IUnknown **ppunk) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDocWrapVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IDocWrap * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IDocWrap * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IDocWrap * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetDoc )( 
            __RPC__in IDocWrap * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][in] */ __RPC__in_opt IUnknown *punk);
        
        HRESULT ( STDMETHODCALLTYPE *GetWrappedDoc )( 
            __RPC__in IDocWrap * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ __RPC__deref_out_opt IUnknown **ppunk);
        
        END_INTERFACE
    } IDocWrapVtbl;

    interface IDocWrap
    {
        CONST_VTBL struct IDocWrapVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDocWrap_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDocWrap_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDocWrap_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDocWrap_SetDoc(This,riid,punk)	\
    ( (This)->lpVtbl -> SetDoc(This,riid,punk) ) 

#define IDocWrap_GetWrappedDoc(This,riid,ppunk)	\
    ( (This)->lpVtbl -> GetWrappedDoc(This,riid,ppunk) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDocWrap_INTERFACE_DEFINED__ */


#ifndef __IClonableWrapper_INTERFACE_DEFINED__
#define __IClonableWrapper_INTERFACE_DEFINED__

/* interface IClonableWrapper */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IClonableWrapper;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B33E75FF-E84C-4dca-A25C-33B8DC003374")
    IClonableWrapper : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE CloneNewWrapper( 
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ __RPC__deref_out_opt void **ppv) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IClonableWrapperVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IClonableWrapper * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IClonableWrapper * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IClonableWrapper * This);
        
        HRESULT ( STDMETHODCALLTYPE *CloneNewWrapper )( 
            __RPC__in IClonableWrapper * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ __RPC__deref_out_opt void **ppv);
        
        END_INTERFACE
    } IClonableWrapperVtbl;

    interface IClonableWrapper
    {
        CONST_VTBL struct IClonableWrapperVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IClonableWrapper_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IClonableWrapper_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IClonableWrapper_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IClonableWrapper_CloneNewWrapper(This,riid,ppv)	\
    ( (This)->lpVtbl -> CloneNewWrapper(This,riid,ppv) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IClonableWrapper_INTERFACE_DEFINED__ */



#ifndef __MSAATEXTLib_LIBRARY_DEFINED__
#define __MSAATEXTLib_LIBRARY_DEFINED__

/* library MSAATEXTLib */
/* [helpstring][version][uuid] */ 


EXTERN_C const IID LIBID_MSAATEXTLib;

EXTERN_C const CLSID CLSID_MSAAControl;

#ifdef __cplusplus

class DECLSPEC_UUID("08cd963f-7a3e-4f5c-9bd8-d692bb043c5b")
MSAAControl;
#endif

EXTERN_C const CLSID CLSID_AccStore;

#ifdef __cplusplus

class DECLSPEC_UUID("5440837F-4BFF-4AE5-A1B1-7722ECC6332A")
AccStore;
#endif

EXTERN_C const CLSID CLSID_AccDictionary;

#ifdef __cplusplus

class DECLSPEC_UUID("6572EE16-5FE5-4331-BB6D-76A49C56E423")
AccDictionary;
#endif

EXTERN_C const CLSID CLSID_AccServerDocMgr;

#ifdef __cplusplus

class DECLSPEC_UUID("6089A37E-EB8A-482D-BD6F-F9F46904D16D")
AccServerDocMgr;
#endif

EXTERN_C const CLSID CLSID_AccClientDocMgr;

#ifdef __cplusplus

class DECLSPEC_UUID("FC48CC30-4F3E-4fa1-803B-AD0E196A83B1")
AccClientDocMgr;
#endif

EXTERN_C const CLSID CLSID_DocWrap;

#ifdef __cplusplus

class DECLSPEC_UUID("BF426F7E-7A5E-44D6-830C-A390EA9462A3")
DocWrap;
#endif
#endif /* __MSAATEXTLib_LIBRARY_DEFINED__ */

/* interface __MIDL_itf_msaatext_0000_0015 */
/* [local] */ 

DEFINE_GUID(IID_ITextStoreACP,               0x28888fe3,0xc2a0,0x483a,0xa3,0xea,0x8c,0xb1,0xce,0x51,0xff,0x3d);
DEFINE_GUID(IID_ITextStoreAnchor,            0x9b2077b0,0x5f18,0x4dec,0xbe,0xe9,0x3c,0xc7,0x22,0xf5,0xdf,0xe0);
DEFINE_GUID(IID_IAnchor,                     0x0feb7e34,0x5a60,0x4356,0x8e,0xf7,0xab,0xde,0xc2,0xff,0x7c,0xf8);
DEFINE_GUID(IID_ITextStoreAnchorSink,        0xaa80e905,0x2021,0x11d2,0x93,0xe0,0x00,0x60,0xb0,0x67,0xb8,0x6e);
DEFINE_GUID(IID_ITextStoreACPSink,           0x22d44c94,0xa419,0x4542,0xa2,0x72,0xae,0x26,0x09,0x3e,0xce,0xcf);


extern RPC_IF_HANDLE __MIDL_itf_msaatext_0000_0015_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_msaatext_0000_0015_v0_0_s_ifspec;

/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     __RPC__in unsigned long *, unsigned long            , __RPC__in BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out BSTR * ); 
void                      __RPC_USER  BSTR_UserFree(     __RPC__in unsigned long *, __RPC__in BSTR * ); 

unsigned long             __RPC_USER  HWND_UserSize(     __RPC__in unsigned long *, unsigned long            , __RPC__in HWND * ); 
unsigned char * __RPC_USER  HWND_UserMarshal(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in HWND * ); 
unsigned char * __RPC_USER  HWND_UserUnmarshal(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out HWND * ); 
void                      __RPC_USER  HWND_UserFree(     __RPC__in unsigned long *, __RPC__in HWND * ); 

unsigned long             __RPC_USER  VARIANT_UserSize(     __RPC__in unsigned long *, unsigned long            , __RPC__in VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserMarshal(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserUnmarshal(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out VARIANT * ); 
void                      __RPC_USER  VARIANT_UserFree(     __RPC__in unsigned long *, __RPC__in VARIANT * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\MSAcm.h ===
//==========================================================================;
//
//  msacm.h
//
//  Copyright (c) 1992-2002 Microsoft Corporation.  All Rights Reserved.
//
//  Description:
//      Audio Compression Manager Public Header File
//
//  History:
//
//==========================================================================;

#ifndef _INC_ACM
#define _INC_ACM        /* #defined if msacm.h has been included */

#if _MSC_VER > 1000
#pragma once
#endif

#if !defined(_INC_MMREG) || (_INC_MMREG < 142)
#ifndef RC_INVOKED
#error MMREG.H version 142 or greater to be included first
#endif
#endif

#if defined(WIN32) && !defined(_WIN32)
#ifndef RC_INVOKED
#pragma message("MSACM.H: defining _WIN32 because application defined WIN32")
#endif
#define _WIN32
#endif

#if defined(UNICODE) && !defined(_UNICODE)
#ifndef RC_INVOKED
#pragma message("MSACM.H: defining _UNICODE because application defined UNICODE")
#endif
#define _UNICODE
#endif

#include "pshpack1.h"   /* Assume byte packing throughout */

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */


//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;
//
//
//
//
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;

#ifndef DRV_MAPPER_PREFERRED_INPUT_GET
#define DRV_MAPPER_PREFERRED_INPUT_GET  (DRV_USER + 0)
#endif

#ifndef DRV_MAPPER_PREFERRED_OUTPUT_GET
#define DRV_MAPPER_PREFERRED_OUTPUT_GET (DRV_USER + 2)
#endif


#ifndef DRVM_MAPPER_STATUS
#define DRVM_MAPPER             (0x2000)
#define DRVM_MAPPER_STATUS      (DRVM_MAPPER+0)
#endif

#ifndef WIDM_MAPPER_STATUS
#define WIDM_MAPPER_STATUS              (DRVM_MAPPER_STATUS + 0)
#define WAVEIN_MAPPER_STATUS_DEVICE     0
#define WAVEIN_MAPPER_STATUS_MAPPED     1
#define WAVEIN_MAPPER_STATUS_FORMAT     2
#endif

#ifndef WODM_MAPPER_STATUS
#define WODM_MAPPER_STATUS              (DRVM_MAPPER_STATUS + 0)
#define WAVEOUT_MAPPER_STATUS_DEVICE    0
#define WAVEOUT_MAPPER_STATUS_MAPPED    1
#define WAVEOUT_MAPPER_STATUS_FORMAT    2
#endif


//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;
//
//
//
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;

#ifdef _WIN32
    #define ACMAPI              WINAPI
#else
#ifdef _WINDLL
    #define ACMAPI              _far _pascal _loadds
#else
    #define ACMAPI              _far _pascal
#endif
#endif


//--------------------------------------------------------------------------;
//
//  ACM General API's and Defines
//
//
//
//
//--------------------------------------------------------------------------;

//
//  there are four types of 'handles' used by the ACM. the first three
//  are unique types that define specific objects:
//
//  HACMDRIVERID: used to _identify_ an ACM driver. this identifier can be
//  used to _open_ the driver for querying details, etc about the driver.
//
//  HACMDRIVER: used to manage a driver (codec, filter, etc). this handle
//  is much like a handle to other media drivers--you use it to send
//  messages to the converter, query for capabilities, etc.
//
//  HACMSTREAM: used to manage a 'stream' (conversion channel) with the
//  ACM. you use a stream handle to convert data from one format/type
//  to another--much like dealing with a file handle.
//
//
//  the fourth handle type is a generic type used on ACM functions that
//  can accept two or more of the above handle types (for example the
//  acmMetrics and acmDriverID functions).
//
//  HACMOBJ: used to identify ACM objects. this handle is used on functions
//  that can accept two or more ACM handle types.
//
DECLARE_HANDLE(HACMDRIVERID);
typedef HACMDRIVERID       *PHACMDRIVERID;
typedef HACMDRIVERID   FAR *LPHACMDRIVERID;

DECLARE_HANDLE(HACMDRIVER);
typedef HACMDRIVER         *PHACMDRIVER;
typedef HACMDRIVER     FAR *LPHACMDRIVER;

DECLARE_HANDLE(HACMSTREAM);
typedef HACMSTREAM         *PHACMSTREAM;
typedef HACMSTREAM     FAR *LPHACMSTREAM;

DECLARE_HANDLE(HACMOBJ);
typedef HACMOBJ            *PHACMOBJ;
typedef HACMOBJ        FAR *LPHACMOBJ;



//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;
//
//  ACM Error Codes
//
//  Note that these error codes are specific errors that apply to the ACM
//  directly--general errors are defined as MMSYSERR_*.
//
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;

#ifndef _MMRESULT_
#define _MMRESULT_
typedef UINT                MMRESULT;
#endif

#define ACMERR_BASE         (512)
#define ACMERR_NOTPOSSIBLE  (ACMERR_BASE + 0)
#define ACMERR_BUSY         (ACMERR_BASE + 1)
#define ACMERR_UNPREPARED   (ACMERR_BASE + 2)
#define ACMERR_CANCELED     (ACMERR_BASE + 3)


//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;
//
//  ACM Window Messages
//
//  These window messages are sent by the ACM or ACM drivers to notify
//  applications of events.
//
//  Note that these window message numbers will also be defined in
//  mmsystem.
//
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;

#define MM_ACM_OPEN         (MM_STREAM_OPEN)  // conversion callback messages
#define MM_ACM_CLOSE        (MM_STREAM_CLOSE)
#define MM_ACM_DONE         (MM_STREAM_DONE)


//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;
//
//  acmGetVersion()
//
//  the ACM version is a 32 bit number that is broken into three parts as 
//  follows:
//
//      bits 24 - 31:   8 bit _major_ version number
//      bits 16 - 23:   8 bit _minor_ version number
//      bits  0 - 15:   16 bit build number
//
//  this is then displayed as follows:
//
//      bMajor = (BYTE)(dwVersion >> 24)
//      bMinor = (BYTE)(dwVersion >> 16) & 
//      wBuild = LOWORD(dwVersion)
//
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;

DWORD ACMAPI acmGetVersion
(
    void
);


//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;
//
//  acmMetrics()
//
//
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;

MMRESULT ACMAPI acmMetrics
(
    HACMOBJ                 hao,
    UINT                    uMetric,
    LPVOID                  pMetric
);

#define ACM_METRIC_COUNT_DRIVERS            1
#define ACM_METRIC_COUNT_CODECS             2
#define ACM_METRIC_COUNT_CONVERTERS         3
#define ACM_METRIC_COUNT_FILTERS            4
#define ACM_METRIC_COUNT_DISABLED           5
#define ACM_METRIC_COUNT_HARDWARE           6
#define ACM_METRIC_COUNT_LOCAL_DRIVERS      20
#define ACM_METRIC_COUNT_LOCAL_CODECS       21
#define ACM_METRIC_COUNT_LOCAL_CONVERTERS   22
#define ACM_METRIC_COUNT_LOCAL_FILTERS      23
#define ACM_METRIC_COUNT_LOCAL_DISABLED     24
#define ACM_METRIC_HARDWARE_WAVE_INPUT      30
#define ACM_METRIC_HARDWARE_WAVE_OUTPUT     31
#define ACM_METRIC_MAX_SIZE_FORMAT          50
#define ACM_METRIC_MAX_SIZE_FILTER          51
#define ACM_METRIC_DRIVER_SUPPORT           100
#define ACM_METRIC_DRIVER_PRIORITY          101


//--------------------------------------------------------------------------;
//
//  ACM Drivers
//
//
//
//
//--------------------------------------------------------------------------;

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;
//
//  acmDriverEnum()
//
//
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;

typedef BOOL (CALLBACK *ACMDRIVERENUMCB)
(
    HACMDRIVERID            hadid,
    DWORD_PTR               dwInstance,
    DWORD                   fdwSupport
);

MMRESULT ACMAPI acmDriverEnum
(
    ACMDRIVERENUMCB         fnCallback,
    DWORD_PTR               dwInstance,
    DWORD                   fdwEnum
);

#define ACM_DRIVERENUMF_NOLOCAL     0x40000000L
#define ACM_DRIVERENUMF_DISABLED    0x80000000L

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;
//
//  acmDriverID()
//
//
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;

MMRESULT ACMAPI acmDriverID
(
    HACMOBJ                 hao,
    LPHACMDRIVERID          phadid,
    DWORD                   fdwDriverID
);


//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;
//
//  acmDriverAdd()
//
//
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;

#ifdef _WIN32
MMRESULT ACMAPI acmDriverAddA
(
    LPHACMDRIVERID          phadid,
    HINSTANCE               hinstModule,
    LPARAM                  lParam, 
    DWORD                   dwPriority,
    DWORD                   fdwAdd
);

MMRESULT ACMAPI acmDriverAddW
(
    LPHACMDRIVERID          phadid,
    HINSTANCE               hinstModule,
    LPARAM                  lParam, 
    DWORD                   dwPriority,
    DWORD                   fdwAdd
);

#ifdef _UNICODE
#define acmDriverAdd        acmDriverAddW
#else
#define acmDriverAdd        acmDriverAddA
#endif
#else
MMRESULT ACMAPI acmDriverAdd
(
    LPHACMDRIVERID          phadid,
    HINSTANCE               hinstModule,
    LPARAM                  lParam, 
    DWORD                   dwPriority,
    DWORD                   fdwAdd
);
#endif

#define ACM_DRIVERADDF_NAME         0x00000001L
#define ACM_DRIVERADDF_FUNCTION     0x00000003L  // lParam is a procedure
#define ACM_DRIVERADDF_NOTIFYHWND   0x00000004L  // lParam is notify hwnd
#define ACM_DRIVERADDF_TYPEMASK     0x00000007L  // driver type mask
#define ACM_DRIVERADDF_LOCAL        0x00000000L  // is local to current task
#define ACM_DRIVERADDF_GLOBAL       0x00000008L  // is global

//
//  prototype for ACM driver procedures that are installed as _functions_
//  or _notifations_ instead of as a standalone installable driver.
//
typedef LRESULT (CALLBACK *ACMDRIVERPROC)(DWORD_PTR, HACMDRIVERID, UINT, LPARAM, LPARAM);
typedef ACMDRIVERPROC FAR *LPACMDRIVERPROC;

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;
//
//  acmDriverRemove()
//
//
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;

MMRESULT ACMAPI acmDriverRemove
(
    HACMDRIVERID            hadid,
    DWORD                   fdwRemove
);


//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;
//
//  acmDriverOpen()
//
//
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;

MMRESULT ACMAPI acmDriverOpen
(
    LPHACMDRIVER            phad, 
    HACMDRIVERID            hadid,
    DWORD                   fdwOpen
);


//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;
//
//  acmDriverClose()
//
//
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;

MMRESULT ACMAPI acmDriverClose
(
    HACMDRIVER              had,
    DWORD                   fdwClose
);


//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;
//
//  acmDriverMessage()
//
//
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;

LRESULT ACMAPI acmDriverMessage
(
    HACMDRIVER              had,
    UINT                    uMsg, 
    LPARAM                  lParam1,
    LPARAM                  lParam2
);


//
//
//
//
#define ACMDM_USER                  (DRV_USER + 0x0000)
#define ACMDM_RESERVED_LOW          (DRV_USER + 0x2000)
#define ACMDM_RESERVED_HIGH         (DRV_USER + 0x2FFF)

#define ACMDM_BASE                  ACMDM_RESERVED_LOW

#define ACMDM_DRIVER_ABOUT          (ACMDM_BASE + 11)


//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;
//
//  acmDriverPriority
//
//
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;

MMRESULT ACMAPI acmDriverPriority
(
    HACMDRIVERID            hadid,
    DWORD                   dwPriority,
    DWORD                   fdwPriority
);


#define ACM_DRIVERPRIORITYF_ENABLE      0x00000001L
#define ACM_DRIVERPRIORITYF_DISABLE     0x00000002L
#define ACM_DRIVERPRIORITYF_ABLEMASK    0x00000003L
#define ACM_DRIVERPRIORITYF_BEGIN       0x00010000L
#define ACM_DRIVERPRIORITYF_END         0x00020000L
#define ACM_DRIVERPRIORITYF_DEFERMASK   0x00030000L


//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;
//
//  acmDriverDetails()
//
//
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;

//
//  ACMDRIVERDETAILS
//
//  the ACMDRIVERDETAILS structure is used to get various capabilities from
//  an ACM driver (codec, converter, filter).
//
#define ACMDRIVERDETAILS_SHORTNAME_CHARS    32
#define ACMDRIVERDETAILS_LONGNAME_CHARS     128
#define ACMDRIVERDETAILS_COPYRIGHT_CHARS    80
#define ACMDRIVERDETAILS_LICENSING_CHARS    128
#define ACMDRIVERDETAILS_FEATURES_CHARS     512

#ifdef _WIN32
typedef struct tACMDRIVERDETAILSA
{
    DWORD           cbStruct;           // number of valid bytes in structure

    FOURCC          fccType;            // compressor type 'audc'
    FOURCC          fccComp;            // sub-type (not used; reserved)

    WORD            wMid;               // manufacturer id
    WORD            wPid;               // product id

    DWORD           vdwACM;             // version of the ACM *compiled* for
    DWORD           vdwDriver;          // version of the driver

    DWORD           fdwSupport;         // misc. support flags
    DWORD           cFormatTags;        // total unique format tags supported
    DWORD           cFilterTags;        // total unique filter tags supported

    HICON           hicon;              // handle to custom icon

    char            szShortName[ACMDRIVERDETAILS_SHORTNAME_CHARS];
    char            szLongName[ACMDRIVERDETAILS_LONGNAME_CHARS];
    char            szCopyright[ACMDRIVERDETAILS_COPYRIGHT_CHARS];
    char            szLicensing[ACMDRIVERDETAILS_LICENSING_CHARS];
    char            szFeatures[ACMDRIVERDETAILS_FEATURES_CHARS];

} ACMDRIVERDETAILSA, *PACMDRIVERDETAILSA, FAR *LPACMDRIVERDETAILSA;

typedef struct tACMDRIVERDETAILSW
{
    DWORD           cbStruct;           // number of valid bytes in structure

    FOURCC          fccType;            // compressor type 'audc'
    FOURCC          fccComp;            // sub-type (not used; reserved)

    WORD            wMid;               // manufacturer id
    WORD            wPid;               // product id

    DWORD           vdwACM;             // version of the ACM *compiled* for
    DWORD           vdwDriver;          // version of the driver

    DWORD           fdwSupport;         // misc. support flags
    DWORD           cFormatTags;        // total unique format tags supported
    DWORD           cFilterTags;        // total unique filter tags supported

    HICON           hicon;              // handle to custom icon

    WCHAR           szShortName[ACMDRIVERDETAILS_SHORTNAME_CHARS];
    WCHAR           szLongName[ACMDRIVERDETAILS_LONGNAME_CHARS];
    WCHAR           szCopyright[ACMDRIVERDETAILS_COPYRIGHT_CHARS];
    WCHAR           szLicensing[ACMDRIVERDETAILS_LICENSING_CHARS];
    WCHAR           szFeatures[ACMDRIVERDETAILS_FEATURES_CHARS];

} ACMDRIVERDETAILSW, *PACMDRIVERDETAILSW, FAR *LPACMDRIVERDETAILSW;

#ifdef _UNICODE
#define ACMDRIVERDETAILS        ACMDRIVERDETAILSW
#define PACMDRIVERDETAILS       PACMDRIVERDETAILSW
#define LPACMDRIVERDETAILS      LPACMDRIVERDETAILSW
#else
#define ACMDRIVERDETAILS        ACMDRIVERDETAILSA
#define PACMDRIVERDETAILS       PACMDRIVERDETAILSA
#define LPACMDRIVERDETAILS      LPACMDRIVERDETAILSA
#endif
#else
typedef struct tACMDRIVERDETAILS
{
    DWORD           cbStruct;           // number of valid bytes in structure

    FOURCC          fccType;            // compressor type 'audc'
    FOURCC          fccComp;            // sub-type (not used; reserved)

    WORD            wMid;               // manufacturer id
    WORD            wPid;               // product id

    DWORD           vdwACM;             // version of the ACM *compiled* for
    DWORD           vdwDriver;          // version of the driver

    DWORD           fdwSupport;         // misc. support flags
    DWORD           cFormatTags;        // total unique format tags supported
    DWORD           cFilterTags;        // total unique filter tags supported

    HICON           hicon;              // handle to custom icon

    char            szShortName[ACMDRIVERDETAILS_SHORTNAME_CHARS];
    char            szLongName[ACMDRIVERDETAILS_LONGNAME_CHARS];
    char            szCopyright[ACMDRIVERDETAILS_COPYRIGHT_CHARS];
    char            szLicensing[ACMDRIVERDETAILS_LICENSING_CHARS];
    char            szFeatures[ACMDRIVERDETAILS_FEATURES_CHARS];

} ACMDRIVERDETAILS, *PACMDRIVERDETAILS, FAR *LPACMDRIVERDETAILS;
#endif

//
//  ACMDRIVERDETAILS.fccType
//
//  ACMDRIVERDETAILS_FCCTYPE_AUDIOCODEC: the FOURCC used in the fccType
//  field of the ACMDRIVERDETAILS structure to specify that this is an ACM
//  codec designed for audio.
//
//
//  ACMDRIVERDETAILS.fccComp
//
//  ACMDRIVERDETAILS_FCCCOMP_UNDEFINED: the FOURCC used in the fccComp
//  field of the ACMDRIVERDETAILS structure. this is currently an unused
//  field.
//
#define ACMDRIVERDETAILS_FCCTYPE_AUDIOCODEC mmioFOURCC('a', 'u', 'd', 'c')
#define ACMDRIVERDETAILS_FCCCOMP_UNDEFINED  mmioFOURCC('\0', '\0', '\0', '\0')


//
//  the following flags are used to specify the type of conversion(s) that
//  the converter/codec/filter supports. these are placed in the fdwSupport
//  field of the ACMDRIVERDETAILS structure. note that a converter can
//  support one or more of these flags in any combination.
//
//  ACMDRIVERDETAILS_SUPPORTF_CODEC: this flag is set if the driver supports
//  conversions from one format tag to another format tag. for example, if a
//  converter compresses WAVE_FORMAT_PCM to WAVE_FORMAT_ADPCM, then this bit
//  should be set.
//
//  ACMDRIVERDETAILS_SUPPORTF_CONVERTER: this flags is set if the driver
//  supports conversions on the same format tag. as an example, the PCM
//  converter that is built into the ACM sets this bit (and only this bit)
//  because it converts only PCM formats (bits, sample rate).
//
//  ACMDRIVERDETAILS_SUPPORTF_FILTER: this flag is set if the driver supports
//  transformations on a single format. for example, a converter that changed
//  the 'volume' of PCM data would set this bit. 'echo' and 'reverb' are
//  also filter types.
//
//  ACMDRIVERDETAILS_SUPPORTF_HARDWARE: this flag is set if the driver supports
//  hardware input and/or output through a waveform device.
//
//  ACMDRIVERDETAILS_SUPPORTF_ASYNC: this flag is set if the driver supports
//  async conversions.
//
//
//  ACMDRIVERDETAILS_SUPPORTF_LOCAL: this flag is set _by the ACM_ if a
//  driver has been installed local to the current task. this flag is also
//  set in the fdwSupport argument to the enumeration callback function
//  for drivers.
//
//  ACMDRIVERDETAILS_SUPPORTF_DISABLED: this flag is set _by the ACM_ if a
//  driver has been disabled. this flag is also passed set in the fdwSupport
//  argument to the enumeration callback function for drivers.
//
#define ACMDRIVERDETAILS_SUPPORTF_CODEC     0x00000001L
#define ACMDRIVERDETAILS_SUPPORTF_CONVERTER 0x00000002L
#define ACMDRIVERDETAILS_SUPPORTF_FILTER    0x00000004L
#define ACMDRIVERDETAILS_SUPPORTF_HARDWARE  0x00000008L
#define ACMDRIVERDETAILS_SUPPORTF_ASYNC     0x00000010L
#define ACMDRIVERDETAILS_SUPPORTF_LOCAL     0x40000000L
#define ACMDRIVERDETAILS_SUPPORTF_DISABLED  0x80000000L


#ifdef _WIN32
MMRESULT ACMAPI acmDriverDetailsA
(
    HACMDRIVERID            hadid,
    LPACMDRIVERDETAILSA     padd,
    DWORD                   fdwDetails
);

MMRESULT ACMAPI acmDriverDetailsW
(
    HACMDRIVERID            hadid,
    LPACMDRIVERDETAILSW     padd,
    DWORD                   fdwDetails
);

#ifdef _UNICODE
#define acmDriverDetails    acmDriverDetailsW
#else
#define acmDriverDetails    acmDriverDetailsA
#endif
#else
MMRESULT ACMAPI acmDriverDetails
(
    HACMDRIVERID            hadid,
    LPACMDRIVERDETAILS      padd,
    DWORD                   fdwDetails
);
#endif

 
//--------------------------------------------------------------------------;
//
//  ACM Format Tags
//
//
//
//
//--------------------------------------------------------------------------;

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;
//
//  acmFormatTagDetails()
//
//
//
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;

#define ACMFORMATTAGDETAILS_FORMATTAG_CHARS 48

#ifdef _WIN32
typedef struct tACMFORMATTAGDETAILSA
{
    DWORD           cbStruct;
    DWORD           dwFormatTagIndex;
    DWORD           dwFormatTag;
    DWORD           cbFormatSize;
    DWORD           fdwSupport;
    DWORD           cStandardFormats;
    char            szFormatTag[ACMFORMATTAGDETAILS_FORMATTAG_CHARS];

} ACMFORMATTAGDETAILSA, *PACMFORMATTAGDETAILSA, FAR *LPACMFORMATTAGDETAILSA;

typedef struct tACMFORMATTAGDETAILSW
{
    DWORD           cbStruct;
    DWORD           dwFormatTagIndex;
    DWORD           dwFormatTag;
    DWORD           cbFormatSize;
    DWORD           fdwSupport;
    DWORD           cStandardFormats;
    WCHAR           szFormatTag[ACMFORMATTAGDETAILS_FORMATTAG_CHARS];

} ACMFORMATTAGDETAILSW, *PACMFORMATTAGDETAILSW, FAR *LPACMFORMATTAGDETAILSW;

#ifdef _UNICODE
#define ACMFORMATTAGDETAILS     ACMFORMATTAGDETAILSW
#define PACMFORMATTAGDETAILS    PACMFORMATTAGDETAILSW
#define LPACMFORMATTAGDETAILS   LPACMFORMATTAGDETAILSW
#else
#define ACMFORMATTAGDETAILS     ACMFORMATTAGDETAILSA
#define PACMFORMATTAGDETAILS    PACMFORMATTAGDETAILSA
#define LPACMFORMATTAGDETAILS   LPACMFORMATTAGDETAILSA
#endif
#else
typedef struct tACMFORMATTAGDETAILS
{
    DWORD           cbStruct;
    DWORD           dwFormatTagIndex;
    DWORD           dwFormatTag;
    DWORD           cbFormatSize;
    DWORD           fdwSupport;
    DWORD           cStandardFormats;
    char            szFormatTag[ACMFORMATTAGDETAILS_FORMATTAG_CHARS];

} ACMFORMATTAGDETAILS, *PACMFORMATTAGDETAILS, FAR *LPACMFORMATTAGDETAILS;
#endif

#ifdef _WIN32
MMRESULT ACMAPI acmFormatTagDetailsA
(
    HACMDRIVER              had,
    LPACMFORMATTAGDETAILSA  paftd,
    DWORD                   fdwDetails
);

MMRESULT ACMAPI acmFormatTagDetailsW
(
    HACMDRIVER              had,
    LPACMFORMATTAGDETAILSW  paftd,
    DWORD                   fdwDetails
);

#ifdef _UNICODE
#define acmFormatTagDetails     acmFormatTagDetailsW
#else
#define acmFormatTagDetails     acmFormatTagDetailsA
#endif
#else
MMRESULT ACMAPI acmFormatTagDetails
(
    HACMDRIVER              had,
    LPACMFORMATTAGDETAILS   paftd,
    DWORD                   fdwDetails
);
#endif

#define ACM_FORMATTAGDETAILSF_INDEX         0x00000000L
#define ACM_FORMATTAGDETAILSF_FORMATTAG     0x00000001L
#define ACM_FORMATTAGDETAILSF_LARGESTSIZE   0x00000002L
#define ACM_FORMATTAGDETAILSF_QUERYMASK     0x0000000FL


//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;
//
//  acmFormatTagEnum()
//
//
//
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;

#ifdef _WIN32
typedef BOOL (CALLBACK *ACMFORMATTAGENUMCBA)
(
    HACMDRIVERID            hadid,
    LPACMFORMATTAGDETAILSA  paftd,
    DWORD_PTR               dwInstance,
    DWORD                   fdwSupport
);

MMRESULT ACMAPI acmFormatTagEnumA
(
    HACMDRIVER              had,
    LPACMFORMATTAGDETAILSA  paftd,
    ACMFORMATTAGENUMCBA     fnCallback,
    DWORD_PTR               dwInstance, 
    DWORD                   fdwEnum
);
typedef BOOL (CALLBACK *ACMFORMATTAGENUMCBW)
(
    HACMDRIVERID            hadid,
    LPACMFORMATTAGDETAILSW  paftd,
    DWORD_PTR               dwInstance,
    DWORD                   fdwSupport
);

MMRESULT ACMAPI acmFormatTagEnumW
(
    HACMDRIVER              had,
    LPACMFORMATTAGDETAILSW  paftd,
    ACMFORMATTAGENUMCBW     fnCallback,
    DWORD_PTR               dwInstance, 
    DWORD                   fdwEnum
);

#ifdef _UNICODE
#define ACMFORMATTAGENUMCB      ACMFORMATTAGENUMCBW
#define acmFormatTagEnum        acmFormatTagEnumW
#else
#define ACMFORMATTAGENUMCB      ACMFORMATTAGENUMCBA
#define acmFormatTagEnum        acmFormatTagEnumA
#endif
#else
typedef BOOL (CALLBACK *ACMFORMATTAGENUMCB)
(
    HACMDRIVERID            hadid,
    LPACMFORMATTAGDETAILS   paftd,
    DWORD_PTR               dwInstance,
    DWORD                   fdwSupport
);

MMRESULT ACMAPI acmFormatTagEnum
(
    HACMDRIVER              had,
    LPACMFORMATTAGDETAILS   paftd,
    ACMFORMATTAGENUMCB      fnCallback,
    DWORD_PTR               dwInstance, 
    DWORD                   fdwEnum
);
#endif


//--------------------------------------------------------------------------;
//
//  ACM Formats
//
//
//
//
//--------------------------------------------------------------------------;

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;
//
//  acmFormatDetails()
//
//
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;

#define ACMFORMATDETAILS_FORMAT_CHARS   128

#ifdef _WIN32
typedef struct tACMFORMATDETAILSA
{
    DWORD           cbStruct;
    DWORD           dwFormatIndex;
    DWORD           dwFormatTag;
    DWORD           fdwSupport;
    LPWAVEFORMATEX  pwfx;
    DWORD           cbwfx;
    char            szFormat[ACMFORMATDETAILS_FORMAT_CHARS];

} ACMFORMATDETAILSA, *PACMFORMATDETAILSA, FAR *LPACMFORMATDETAILSA;

typedef struct tACMFORMATDETAILSW
{
    DWORD           cbStruct;
    DWORD           dwFormatIndex;
    DWORD           dwFormatTag;
    DWORD           fdwSupport;
    LPWAVEFORMATEX  pwfx;
    DWORD           cbwfx;
    WCHAR           szFormat[ACMFORMATDETAILS_FORMAT_CHARS];

} ACMFORMATDETAILSW, *PACMFORMATDETAILSW, FAR *LPACMFORMATDETAILSW;

#ifdef _UNICODE
#define ACMFORMATDETAILS    ACMFORMATDETAILSW
#define PACMFORMATDETAILS   PACMFORMATDETAILSW
#define LPACMFORMATDETAILS  LPACMFORMATDETAILSW
#else
#define ACMFORMATDETAILS    ACMFORMATDETAILSA
#define PACMFORMATDETAILS   PACMFORMATDETAILSA
#define LPACMFORMATDETAILS  LPACMFORMATDETAILSA
#endif
#else
typedef struct tACMFORMATDETAILS
{
    DWORD           cbStruct;
    DWORD           dwFormatIndex;
    DWORD           dwFormatTag;
    DWORD           fdwSupport;
    LPWAVEFORMATEX  pwfx;
    DWORD           cbwfx;
    char            szFormat[ACMFORMATDETAILS_FORMAT_CHARS];

} ACMFORMATDETAILS, *PACMFORMATDETAILS, FAR *LPACMFORMATDETAILS;
#endif


#ifdef _WIN32
MMRESULT ACMAPI acmFormatDetailsA
(
    HACMDRIVER              had,
    LPACMFORMATDETAILSA     pafd,
    DWORD                   fdwDetails
);

MMRESULT ACMAPI acmFormatDetailsW
(
    HACMDRIVER              had,
    LPACMFORMATDETAILSW     pafd,
    DWORD                   fdwDetails
);

#ifdef _UNICODE
#define acmFormatDetails    acmFormatDetailsW
#else
#define acmFormatDetails    acmFormatDetailsA
#endif
#else
MMRESULT ACMAPI acmFormatDetails
(
    HACMDRIVER              had,
    LPACMFORMATDETAILS      pafd,
    DWORD                   fdwDetails
);
#endif

#define ACM_FORMATDETAILSF_INDEX        0x00000000L
#define ACM_FORMATDETAILSF_FORMAT       0x00000001L
#define ACM_FORMATDETAILSF_QUERYMASK    0x0000000FL


//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;
//
//  acmFormatEnum()
//
//
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;

#ifdef _WIN32
typedef BOOL (CALLBACK *ACMFORMATENUMCBA)
(
    HACMDRIVERID            hadid,
    LPACMFORMATDETAILSA     pafd,
    DWORD_PTR               dwInstance,
    DWORD                   fdwSupport
);

MMRESULT ACMAPI acmFormatEnumA
(
    HACMDRIVER              had,
    LPACMFORMATDETAILSA     pafd,
    ACMFORMATENUMCBA        fnCallback,
    DWORD_PTR               dwInstance, 
    DWORD                   fdwEnum
);

typedef BOOL (CALLBACK *ACMFORMATENUMCBW)
(
    HACMDRIVERID            hadid,
    LPACMFORMATDETAILSW     pafd,
    DWORD_PTR               dwInstance,
    DWORD                   fdwSupport
);

MMRESULT ACMAPI acmFormatEnumW
(
    HACMDRIVER              had,
    LPACMFORMATDETAILSW     pafd,
    ACMFORMATENUMCBW        fnCallback,
    DWORD_PTR               dwInstance, 
    DWORD                   fdwEnum
);

#ifdef _UNICODE
#define ACMFORMATENUMCB     ACMFORMATENUMCBW
#define acmFormatEnum       acmFormatEnumW
#else
#define ACMFORMATENUMCB     ACMFORMATENUMCBA
#define acmFormatEnum       acmFormatEnumA
#endif
#else
typedef BOOL (CALLBACK *ACMFORMATENUMCB)
(
    HACMDRIVERID            hadid,
    LPACMFORMATDETAILS      pafd,
    DWORD_PTR               dwInstance,
    DWORD                   fdwSupport
);

MMRESULT ACMAPI acmFormatEnum
(
    HACMDRIVER              had,
    LPACMFORMATDETAILS      pafd,
    ACMFORMATENUMCB         fnCallback,
    DWORD_PTR               dwInstance, 
    DWORD                   fdwEnum
);
#endif

#define ACM_FORMATENUMF_WFORMATTAG       0x00010000L
#define ACM_FORMATENUMF_NCHANNELS        0x00020000L
#define ACM_FORMATENUMF_NSAMPLESPERSEC   0x00040000L
#define ACM_FORMATENUMF_WBITSPERSAMPLE   0x00080000L
#define ACM_FORMATENUMF_CONVERT          0x00100000L
#define ACM_FORMATENUMF_SUGGEST          0x00200000L
#define ACM_FORMATENUMF_HARDWARE         0x00400000L
#define ACM_FORMATENUMF_INPUT            0x00800000L
#define ACM_FORMATENUMF_OUTPUT           0x01000000L


//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;
//
//  acmFormatSuggest()
//
//
//
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;

MMRESULT ACMAPI acmFormatSuggest
(
    HACMDRIVER          had,
    LPWAVEFORMATEX      pwfxSrc,
    LPWAVEFORMATEX      pwfxDst,
    DWORD               cbwfxDst,
    DWORD               fdwSuggest
);

#define ACM_FORMATSUGGESTF_WFORMATTAG       0x00010000L
#define ACM_FORMATSUGGESTF_NCHANNELS        0x00020000L
#define ACM_FORMATSUGGESTF_NSAMPLESPERSEC   0x00040000L
#define ACM_FORMATSUGGESTF_WBITSPERSAMPLE   0x00080000L

#define ACM_FORMATSUGGESTF_TYPEMASK         0x00FF0000L

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;
//
//  acmFormatChoose()
//
//
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;

#ifdef _WIN32
#define ACMHELPMSGSTRINGA       "acmchoose_help"
#define ACMHELPMSGSTRINGW       L"acmchoose_help"
#define ACMHELPMSGCONTEXTMENUA  "acmchoose_contextmenu"
#define ACMHELPMSGCONTEXTMENUW  L"acmchoose_contextmenu"
#define ACMHELPMSGCONTEXTHELPA  "acmchoose_contexthelp"
#define ACMHELPMSGCONTEXTHELPW  L"acmchoose_contexthelp"
#ifdef _UNICODE
#define ACMHELPMSGSTRING        ACMHELPMSGSTRINGW
#define ACMHELPMSGCONTEXTMENU   ACMHELPMSGCONTEXTMENUW
#define ACMHELPMSGCONTEXTHELP   ACMHELPMSGCONTEXTHELPW
#else
#define ACMHELPMSGSTRING        ACMHELPMSGSTRINGA
#define ACMHELPMSGCONTEXTMENU   ACMHELPMSGCONTEXTMENUA
#define ACMHELPMSGCONTEXTHELP   ACMHELPMSGCONTEXTHELPA
#endif
#else
#define ACMHELPMSGSTRING        "acmchoose_help"
#define ACMHELPMSGCONTEXTMENU   "acmchoose_contextmenu"
#define ACMHELPMSGCONTEXTHELP   "acmchoose_contexthelp"
#endif

//
//  MM_ACM_FORMATCHOOSE is sent to hook callbacks by the Format Chooser
//  Dialog...
//
#define MM_ACM_FORMATCHOOSE             (0x8000)

#define FORMATCHOOSE_MESSAGE            0
#define FORMATCHOOSE_FORMATTAG_VERIFY   (FORMATCHOOSE_MESSAGE+0)
#define FORMATCHOOSE_FORMAT_VERIFY      (FORMATCHOOSE_MESSAGE+1)
#define FORMATCHOOSE_CUSTOM_VERIFY      (FORMATCHOOSE_MESSAGE+2)


#ifdef _WIN32
typedef UINT (CALLBACK *ACMFORMATCHOOSEHOOKPROCA)
(
    HWND                    hwnd,
    UINT                    uMsg,
    WPARAM                  wParam,
    LPARAM                  lParam
);

typedef UINT (CALLBACK *ACMFORMATCHOOSEHOOKPROCW)
(
    HWND                    hwnd,
    UINT                    uMsg,
    WPARAM                  wParam,
    LPARAM                  lParam
);

#ifdef _UNICODE
#define ACMFORMATCHOOSEHOOKPROC     ACMFORMATCHOOSEHOOKPROCW
#else
#define ACMFORMATCHOOSEHOOKPROC     ACMFORMATCHOOSEHOOKPROCA
#endif
#else
typedef UINT (CALLBACK *ACMFORMATCHOOSEHOOKPROC)
(
    HWND                    hwnd,
    UINT                    uMsg,
    WPARAM                  wParam,
    LPARAM                  lParam
);
#endif

//
//
//
//
#ifdef _WIN32
typedef struct tACMFORMATCHOOSEA
{
    DWORD           cbStruct;           // sizeof(ACMFORMATCHOOSE)
    DWORD           fdwStyle;           // chooser style flags
    
    HWND            hwndOwner;          // caller's window handle

    LPWAVEFORMATEX  pwfx;               // ptr to wfx buf to receive choice
    DWORD           cbwfx;              // size of mem buf for pwfx
    LPCSTR          pszTitle;           // dialog box title bar
    
    char            szFormatTag[ACMFORMATTAGDETAILS_FORMATTAG_CHARS];
    char            szFormat[ACMFORMATDETAILS_FORMAT_CHARS];    

    LPSTR           pszName;            // custom name selection
    DWORD           cchName;            // size in chars of mem buf for pszName

    DWORD           fdwEnum;            // format enumeration restrictions
    LPWAVEFORMATEX  pwfxEnum;           // format describing restrictions
    
    HINSTANCE       hInstance;          // app instance containing dlg template
    LPCSTR          pszTemplateName;    // custom template name
    LPARAM          lCustData;          // data passed to hook fn.
    ACMFORMATCHOOSEHOOKPROCA pfnHook;   // ptr to hook function

} ACMFORMATCHOOSEA, *PACMFORMATCHOOSEA, FAR *LPACMFORMATCHOOSEA;

typedef struct tACMFORMATCHOOSEW
{
    DWORD           cbStruct;           // sizeof(ACMFORMATCHOOSE)
    DWORD           fdwStyle;           // chooser style flags
    
    HWND            hwndOwner;          // caller's window handle

    LPWAVEFORMATEX  pwfx;               // ptr to wfx buf to receive choice
    DWORD           cbwfx;              // size of mem buf for pwfx
    LPCWSTR         pszTitle;           // dialog box title bar
    
    WCHAR           szFormatTag[ACMFORMATTAGDETAILS_FORMATTAG_CHARS];
    WCHAR           szFormat[ACMFORMATDETAILS_FORMAT_CHARS];    

    LPWSTR          pszName;            // custom name selection
    DWORD           cchName;            // size in chars of mem buf for pszName

    DWORD           fdwEnum;            // format enumeration restrictions
    LPWAVEFORMATEX  pwfxEnum;           // format describing restrictions
    
    HINSTANCE       hInstance;          // app instance containing dlg template
    LPCWSTR         pszTemplateName;    // custom template name
    LPARAM          lCustData;          // data passed to hook fn.
    ACMFORMATCHOOSEHOOKPROCW pfnHook;   // ptr to hook function

} ACMFORMATCHOOSEW, *PACMFORMATCHOOSEW, FAR *LPACMFORMATCHOOSEW;

#ifdef _UNICODE
#define ACMFORMATCHOOSE     ACMFORMATCHOOSEW
#define PACMFORMATCHOOSE    PACMFORMATCHOOSEW
#define LPACMFORMATCHOOSE   LPACMFORMATCHOOSEW
#else
#define ACMFORMATCHOOSE     ACMFORMATCHOOSEA
#define PACMFORMATCHOOSE    PACMFORMATCHOOSEA
#define LPACMFORMATCHOOSE   LPACMFORMATCHOOSEA
#endif
#else
typedef struct tACMFORMATCHOOSE
{
    DWORD           cbStruct;           // sizeof(ACMFORMATCHOOSE)
    DWORD           fdwStyle;           // chooser style flags
    
    HWND            hwndOwner;          // caller's window handle

    LPWAVEFORMATEX  pwfx;               // ptr to wfx buf to receive choice
    DWORD           cbwfx;              // size of mem buf for pwfx
    LPCSTR          pszTitle;           // dialog box title bar
    
    char            szFormatTag[ACMFORMATTAGDETAILS_FORMATTAG_CHARS];
    char            szFormat[ACMFORMATDETAILS_FORMAT_CHARS];    

    LPSTR           pszName;            // custom name selection
    DWORD           cchName;            // size in chars of mem buf for pszName

    DWORD           fdwEnum;            // format enumeration restrictions
    LPWAVEFORMATEX  pwfxEnum;           // format describing restrictions
    
    HINSTANCE       hInstance;          // app instance containing dlg template
    LPCSTR          pszTemplateName;    // custom template name
    LPARAM          lCustData;          // data passed to hook fn.
    ACMFORMATCHOOSEHOOKPROC pfnHook;    // ptr to hook function

} ACMFORMATCHOOSE, *PACMFORMATCHOOSE, FAR *LPACMFORMATCHOOSE;
#endif

//
//  ACMFORMATCHOOSE.fdwStyle
//
//
//
#define ACMFORMATCHOOSE_STYLEF_SHOWHELP              0x00000004L
#define ACMFORMATCHOOSE_STYLEF_ENABLEHOOK            0x00000008L
#define ACMFORMATCHOOSE_STYLEF_ENABLETEMPLATE        0x00000010L
#define ACMFORMATCHOOSE_STYLEF_ENABLETEMPLATEHANDLE  0x00000020L
#define ACMFORMATCHOOSE_STYLEF_INITTOWFXSTRUCT       0x00000040L
#define ACMFORMATCHOOSE_STYLEF_CONTEXTHELP           0x00000080L

#ifdef _WIN32
MMRESULT ACMAPI acmFormatChooseA
(
    LPACMFORMATCHOOSEA      pafmtc
);

MMRESULT ACMAPI acmFormatChooseW
(
    LPACMFORMATCHOOSEW      pafmtc
);

#ifdef _UNICODE
#define acmFormatChoose     acmFormatChooseW
#else
#define acmFormatChoose     acmFormatChooseA
#endif
#else
MMRESULT ACMAPI acmFormatChoose
(
    LPACMFORMATCHOOSE       pafmtc
);
#endif


//--------------------------------------------------------------------------;
//
//  ACM Filter Tags
//
//
//
//
//--------------------------------------------------------------------------;

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;
//
//  acmFilterTagDetails()
//
//
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;

#define ACMFILTERTAGDETAILS_FILTERTAG_CHARS 48

#ifdef _WIN32
typedef struct tACMFILTERTAGDETAILSA
{
    DWORD           cbStruct;
    DWORD           dwFilterTagIndex;
    DWORD           dwFilterTag;
    DWORD           cbFilterSize;
    DWORD           fdwSupport;
    DWORD           cStandardFilters;
    char            szFilterTag[ACMFILTERTAGDETAILS_FILTERTAG_CHARS];

} ACMFILTERTAGDETAILSA, *PACMFILTERTAGDETAILSA, FAR *LPACMFILTERTAGDETAILSA;

typedef struct tACMFILTERTAGDETAILSW
{
    DWORD           cbStruct;
    DWORD           dwFilterTagIndex;
    DWORD           dwFilterTag;
    DWORD           cbFilterSize;
    DWORD           fdwSupport;
    DWORD           cStandardFilters;
    WCHAR           szFilterTag[ACMFILTERTAGDETAILS_FILTERTAG_CHARS];

} ACMFILTERTAGDETAILSW, *PACMFILTERTAGDETAILSW, FAR *LPACMFILTERTAGDETAILSW;

#ifdef _UNICODE
#define ACMFILTERTAGDETAILS     ACMFILTERTAGDETAILSW
#define PACMFILTERTAGDETAILS    PACMFILTERTAGDETAILSW
#define LPACMFILTERTAGDETAILS   LPACMFILTERTAGDETAILSW
#else
#define ACMFILTERTAGDETAILS     ACMFILTERTAGDETAILSA
#define PACMFILTERTAGDETAILS    PACMFILTERTAGDETAILSA
#define LPACMFILTERTAGDETAILS   LPACMFILTERTAGDETAILSA
#endif
#else
typedef struct tACMFILTERTAGDETAILS
{
    DWORD           cbStruct;
    DWORD           dwFilterTagIndex;
    DWORD           dwFilterTag;
    DWORD           cbFilterSize;
    DWORD           fdwSupport;
    DWORD           cStandardFilters;
    char            szFilterTag[ACMFILTERTAGDETAILS_FILTERTAG_CHARS];

} ACMFILTERTAGDETAILS, *PACMFILTERTAGDETAILS, FAR *LPACMFILTERTAGDETAILS;
#endif

#ifdef _WIN32
MMRESULT ACMAPI acmFilterTagDetailsA
(
    HACMDRIVER              had,
    LPACMFILTERTAGDETAILSA  paftd,
    DWORD                   fdwDetails
);

MMRESULT ACMAPI acmFilterTagDetailsW
(
    HACMDRIVER              had,
    LPACMFILTERTAGDETAILSW  paftd,
    DWORD                   fdwDetails
);

#ifdef _UNICODE
#define acmFilterTagDetails     acmFilterTagDetailsW
#else
#define acmFilterTagDetails     acmFilterTagDetailsA
#endif
#else
MMRESULT ACMAPI acmFilterTagDetails
(
    HACMDRIVER              had,
    LPACMFILTERTAGDETAILS   paftd,
    DWORD                   fdwDetails
);
#endif

#define ACM_FILTERTAGDETAILSF_INDEX         0x00000000L
#define ACM_FILTERTAGDETAILSF_FILTERTAG     0x00000001L
#define ACM_FILTERTAGDETAILSF_LARGESTSIZE   0x00000002L
#define ACM_FILTERTAGDETAILSF_QUERYMASK     0x0000000FL


//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;
//
//  acmFilterTagEnum()
//
//
//
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;

#ifdef _WIN32
typedef BOOL (CALLBACK *ACMFILTERTAGENUMCBA)
(
    HACMDRIVERID            hadid,
    LPACMFILTERTAGDETAILSA  paftd,
    DWORD_PTR               dwInstance,
    DWORD                   fdwSupport
);

MMRESULT ACMAPI acmFilterTagEnumA
(
    HACMDRIVER              had,
    LPACMFILTERTAGDETAILSA  paftd,
    ACMFILTERTAGENUMCBA     fnCallback,
    DWORD_PTR               dwInstance, 
    DWORD                   fdwEnum
);

typedef BOOL (CALLBACK *ACMFILTERTAGENUMCBW)
(
    HACMDRIVERID            hadid,
    LPACMFILTERTAGDETAILSW  paftd,
    DWORD_PTR               dwInstance,
    DWORD                   fdwSupport
);

MMRESULT ACMAPI acmFilterTagEnumW
(
    HACMDRIVER              had,
    LPACMFILTERTAGDETAILSW  paftd,
    ACMFILTERTAGENUMCBW     fnCallback,
    DWORD_PTR               dwInstance, 
    DWORD                   fdwEnum
);

#ifdef _UNICODE
#define ACMFILTERTAGENUMCB  ACMFILTERTAGENUMCBW
#define acmFilterTagEnum    acmFilterTagEnumW
#else
#define ACMFILTERTAGENUMCB  ACMFILTERTAGENUMCBA
#define acmFilterTagEnum    acmFilterTagEnumA
#endif
#else
typedef BOOL (CALLBACK *ACMFILTERTAGENUMCB)
(
    HACMDRIVERID            hadid,
    LPACMFILTERTAGDETAILS   paftd,
    DWORD_PTR               dwInstance,
    DWORD                   fdwSupport
);

MMRESULT ACMAPI acmFilterTagEnum
(
    HACMDRIVER              had,
    LPACMFILTERTAGDETAILS   paftd,
    ACMFILTERTAGENUMCB      fnCallback,
    DWORD_PTR               dwInstance, 
    DWORD                   fdwEnum
);
#endif


//--------------------------------------------------------------------------;
//
//  ACM Filters
//
//
//
//
//--------------------------------------------------------------------------;

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;
//
//  acmFilterDetails()
//
//
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;

#define ACMFILTERDETAILS_FILTER_CHARS   128

#ifdef _WIN32
typedef struct tACMFILTERDETAILSA
{
    DWORD           cbStruct;
    DWORD           dwFilterIndex;
    DWORD           dwFilterTag;
    DWORD           fdwSupport;
    LPWAVEFILTER    pwfltr;
    DWORD           cbwfltr;
    char            szFilter[ACMFILTERDETAILS_FILTER_CHARS];

} ACMFILTERDETAILSA, *PACMFILTERDETAILSA, FAR *LPACMFILTERDETAILSA;

typedef struct tACMFILTERDETAILSW
{
    DWORD           cbStruct;
    DWORD           dwFilterIndex;
    DWORD           dwFilterTag;
    DWORD           fdwSupport;
    LPWAVEFILTER    pwfltr;
    DWORD           cbwfltr;
    WCHAR           szFilter[ACMFILTERDETAILS_FILTER_CHARS];

} ACMFILTERDETAILSW, *PACMFILTERDETAILSW, FAR *LPACMFILTERDETAILSW;

#ifdef _UNICODE
#define ACMFILTERDETAILS    ACMFILTERDETAILSW
#define PACMFILTERDETAILS   PACMFILTERDETAILSW
#define LPACMFILTERDETAILS  LPACMFILTERDETAILSW
#else
#define ACMFILTERDETAILS    ACMFILTERDETAILSA
#define PACMFILTERDETAILS   PACMFILTERDETAILSA
#define LPACMFILTERDETAILS  LPACMFILTERDETAILSA
#endif
#else
typedef struct tACMFILTERDETAILS
{
    DWORD           cbStruct;
    DWORD           dwFilterIndex;
    DWORD           dwFilterTag;
    DWORD           fdwSupport;
    LPWAVEFILTER    pwfltr;
    DWORD           cbwfltr;
    char            szFilter[ACMFILTERDETAILS_FILTER_CHARS];

} ACMFILTERDETAILS, *PACMFILTERDETAILS, FAR *LPACMFILTERDETAILS;
#endif

#ifdef _WIN32
MMRESULT ACMAPI acmFilterDetailsA
(
    HACMDRIVER              had,
    LPACMFILTERDETAILSA     pafd,
    DWORD                   fdwDetails
);

MMRESULT ACMAPI acmFilterDetailsW
(
    HACMDRIVER              had,
    LPACMFILTERDETAILSW     pafd,
    DWORD                   fdwDetails
);
#ifdef _UNICODE
#define acmFilterDetails    acmFilterDetailsW
#else
#define acmFilterDetails    acmFilterDetailsA
#endif
#else
MMRESULT ACMAPI acmFilterDetails
(
    HACMDRIVER              had,
    LPACMFILTERDETAILS      pafd,
    DWORD                   fdwDetails
);
#endif

#define ACM_FILTERDETAILSF_INDEX        0x00000000L
#define ACM_FILTERDETAILSF_FILTER       0x00000001L
#define ACM_FILTERDETAILSF_QUERYMASK    0x0000000FL


//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;
//
//  acmFilterEnum()
//
//
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;

#ifdef _WIN32
typedef BOOL (CALLBACK *ACMFILTERENUMCBA)
(
    HACMDRIVERID            hadid,
    LPACMFILTERDETAILSA     pafd,
    DWORD_PTR               dwInstance,
    DWORD                   fdwSupport
);

MMRESULT ACMAPI acmFilterEnumA
(
    HACMDRIVER              had,
    LPACMFILTERDETAILSA     pafd,
    ACMFILTERENUMCBA        fnCallback,
    DWORD_PTR               dwInstance, 
    DWORD                   fdwEnum
);

typedef BOOL (CALLBACK *ACMFILTERENUMCBW)
(
    HACMDRIVERID            hadid,
    LPACMFILTERDETAILSW     pafd,
    DWORD_PTR               dwInstance,
    DWORD                   fdwSupport
);

MMRESULT ACMAPI acmFilterEnumW
(
    HACMDRIVER              had,
    LPACMFILTERDETAILSW     pafd,
    ACMFILTERENUMCBW        fnCallback,
    DWORD_PTR               dwInstance, 
    DWORD                   fdwEnum
);

#ifdef _UNICODE
#define ACMFILTERENUMCB     ACMFILTERENUMCBW
#define acmFilterEnum       acmFilterEnumW
#else
#define ACMFILTERENUMCB     ACMFILTERENUMCBA
#define acmFilterEnum       acmFilterEnumA
#endif
#else
typedef BOOL (CALLBACK *ACMFILTERENUMCB)
(
    HACMDRIVERID            hadid,
    LPACMFILTERDETAILS      pafd,
    DWORD_PTR               dwInstance,
    DWORD                   fdwSupport
);

MMRESULT ACMAPI acmFilterEnum
(
    HACMDRIVER              had,
    LPACMFILTERDETAILS      pafd,
    ACMFILTERENUMCB         fnCallback,
    DWORD_PTR               dwInstance, 
    DWORD                   fdwEnum
);
#endif

#define ACM_FILTERENUMF_DWFILTERTAG         0x00010000L


//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;
//
//  acmFilterChoose()
//
//
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;

//
//  MM_ACM_FILTERCHOOSE is sent to hook callbacks by the Filter Chooser
//  Dialog...
//
#define MM_ACM_FILTERCHOOSE             (0x8000)

#define FILTERCHOOSE_MESSAGE            0
#define FILTERCHOOSE_FILTERTAG_VERIFY   (FILTERCHOOSE_MESSAGE+0)
#define FILTERCHOOSE_FILTER_VERIFY      (FILTERCHOOSE_MESSAGE+1)
#define FILTERCHOOSE_CUSTOM_VERIFY      (FILTERCHOOSE_MESSAGE+2)


#ifdef _WIN32
typedef UINT (CALLBACK *ACMFILTERCHOOSEHOOKPROCA)
(
    HWND                    hwnd,
    UINT                    uMsg,
    WPARAM                  wParam,
    LPARAM                  lParam
);

typedef UINT (CALLBACK *ACMFILTERCHOOSEHOOKPROCW)
(
    HWND                    hwnd,
    UINT                    uMsg,
    WPARAM                  wParam,
    LPARAM                  lParam
);

#ifdef _UNICODE
#define ACMFILTERCHOOSEHOOKPROC     ACMFILTERCHOOSEHOOKPROCW
#else
#define ACMFILTERCHOOSEHOOKPROC     ACMFILTERCHOOSEHOOKPROCA
#endif
#else
typedef UINT (CALLBACK *ACMFILTERCHOOSEHOOKPROC)
(
    HWND                    hwnd,
    UINT                    uMsg,
    WPARAM                  wParam,
    LPARAM                  lParam
);
#endif

//
//  ACMFILTERCHOOSE
//
//
#ifdef _WIN32
typedef struct tACMFILTERCHOOSEA
{
    DWORD           cbStruct;           // sizeof(ACMFILTERCHOOSE)
    DWORD           fdwStyle;           // chooser style flags

    HWND            hwndOwner;          // caller's window handle

    LPWAVEFILTER    pwfltr;             // ptr to wfltr buf to receive choice
    DWORD           cbwfltr;            // size of mem buf for pwfltr

    LPCSTR          pszTitle;

    char            szFilterTag[ACMFILTERTAGDETAILS_FILTERTAG_CHARS];
    char            szFilter[ACMFILTERDETAILS_FILTER_CHARS];
    LPSTR           pszName;            // custom name selection
    DWORD           cchName;            // size in chars of mem buf for pszName

    DWORD           fdwEnum;            // filter enumeration restrictions
    LPWAVEFILTER    pwfltrEnum;         // filter describing restrictions
    
    HINSTANCE       hInstance;          // app instance containing dlg template
    LPCSTR          pszTemplateName;    // custom template name
    LPARAM          lCustData;          // data passed to hook fn.
    ACMFILTERCHOOSEHOOKPROCA pfnHook;    // ptr to hook function

} ACMFILTERCHOOSEA, *PACMFILTERCHOOSEA, FAR *LPACMFILTERCHOOSEA;

typedef struct tACMFILTERCHOOSEW
{
    DWORD           cbStruct;           // sizeof(ACMFILTERCHOOSE)
    DWORD           fdwStyle;           // chooser style flags

    HWND            hwndOwner;          // caller's window handle

    LPWAVEFILTER    pwfltr;             // ptr to wfltr buf to receive choice
    DWORD           cbwfltr;            // size of mem buf for pwfltr

    LPCWSTR         pszTitle;

    WCHAR           szFilterTag[ACMFILTERTAGDETAILS_FILTERTAG_CHARS];
    WCHAR           szFilter[ACMFILTERDETAILS_FILTER_CHARS];
    LPWSTR          pszName;            // custom name selection
    DWORD           cchName;            // size in chars of mem buf for pszName

    DWORD           fdwEnum;            // filter enumeration restrictions
    LPWAVEFILTER    pwfltrEnum;         // filter describing restrictions
    
    HINSTANCE       hInstance;          // app instance containing dlg template
    LPCWSTR         pszTemplateName;    // custom template name
    LPARAM          lCustData;          // data passed to hook fn.
    ACMFILTERCHOOSEHOOKPROCW pfnHook;    // ptr to hook function

} ACMFILTERCHOOSEW, *PACMFILTERCHOOSEW, FAR *LPACMFILTERCHOOSEW;

#ifdef _UNICODE
#define ACMFILTERCHOOSE     ACMFILTERCHOOSEW
#define PACMFILTERCHOOSE    PACMFILTERCHOOSEW
#define LPACMFILTERCHOOSE   LPACMFILTERCHOOSEW
#else
#define ACMFILTERCHOOSE     ACMFILTERCHOOSEA
#define PACMFILTERCHOOSE    PACMFILTERCHOOSEA
#define LPACMFILTERCHOOSE   LPACMFILTERCHOOSEA
#endif
#else
typedef struct tACMFILTERCHOOSE
{
    DWORD           cbStruct;           // sizeof(ACMFILTERCHOOSE)
    DWORD           fdwStyle;           // chooser style flags

    HWND            hwndOwner;          // caller's window handle

    LPWAVEFILTER    pwfltr;             // ptr to wfltr buf to receive choice
    DWORD           cbwfltr;            // size of mem buf for pwfltr

    LPCSTR          pszTitle;

    char            szFilterTag[ACMFILTERTAGDETAILS_FILTERTAG_CHARS];
    char            szFilter[ACMFILTERDETAILS_FILTER_CHARS];
    LPSTR           pszName;            // custom name selection
    DWORD           cchName;            // size in chars of mem buf for pszName

    DWORD           fdwEnum;            // filter enumeration restrictions
    LPWAVEFILTER    pwfltrEnum;         // filter describing restrictions
    
    HINSTANCE       hInstance;          // app instance containing dlg template
    LPCSTR          pszTemplateName;    // custom template name
    LPARAM          lCustData;          // data passed to hook fn.
    ACMFILTERCHOOSEHOOKPROC pfnHook;    // ptr to hook function

} ACMFILTERCHOOSE, *PACMFILTERCHOOSE, FAR *LPACMFILTERCHOOSE;
#endif

//
//  ACMFILTERCHOOSE.fdwStyle
//
//
#define ACMFILTERCHOOSE_STYLEF_SHOWHELP              0x00000004L
#define ACMFILTERCHOOSE_STYLEF_ENABLEHOOK            0x00000008L
#define ACMFILTERCHOOSE_STYLEF_ENABLETEMPLATE        0x00000010L
#define ACMFILTERCHOOSE_STYLEF_ENABLETEMPLATEHANDLE  0x00000020L
#define ACMFILTERCHOOSE_STYLEF_INITTOFILTERSTRUCT    0x00000040L
#define ACMFILTERCHOOSE_STYLEF_CONTEXTHELP           0x00000080L

#ifdef _WIN32
MMRESULT ACMAPI acmFilterChooseA
(
    LPACMFILTERCHOOSEA      pafltrc
);

MMRESULT ACMAPI acmFilterChooseW
(
    LPACMFILTERCHOOSEW      pafltrc
);

#ifdef _UNICODE
#define acmFilterChoose     acmFilterChooseW
#else
#define acmFilterChoose     acmFilterChooseA
#endif
#else
MMRESULT ACMAPI acmFilterChoose
(
    LPACMFILTERCHOOSE       pafltrc
);
#endif


//--------------------------------------------------------------------------;
//
//  ACM Stream API's
//
//
//
//--------------------------------------------------------------------------;

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;
//
//  acmStreamOpen()
//
//
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;
#ifdef  _WIN64
#define _DRVRESERVED    15
#else
#define _DRVRESERVED    10
#endif  // _WIN64

typedef struct tACMSTREAMHEADER
{
    DWORD           cbStruct;               // sizeof(ACMSTREAMHEADER)
    DWORD           fdwStatus;              // ACMSTREAMHEADER_STATUSF_*
    DWORD_PTR       dwUser;                 // user instance data for hdr
    LPBYTE          pbSrc;
    DWORD           cbSrcLength;
    DWORD           cbSrcLengthUsed;
    DWORD_PTR       dwSrcUser;              // user instance data for src
    LPBYTE          pbDst;
    DWORD           cbDstLength;
    DWORD           cbDstLengthUsed;
    DWORD_PTR       dwDstUser;              // user instance data for dst
    DWORD           dwReservedDriver[_DRVRESERVED];   // driver reserved work space

} ACMSTREAMHEADER, *PACMSTREAMHEADER, FAR *LPACMSTREAMHEADER;

//
//  ACMSTREAMHEADER.fdwStatus
//
//  ACMSTREAMHEADER_STATUSF_DONE: done bit for async conversions.
//
#define ACMSTREAMHEADER_STATUSF_DONE        0x00010000L
#define ACMSTREAMHEADER_STATUSF_PREPARED    0x00020000L
#define ACMSTREAMHEADER_STATUSF_INQUEUE     0x00100000L


MMRESULT ACMAPI acmStreamOpen
(
    LPHACMSTREAM            phas,       // pointer to stream handle
    HACMDRIVER              had,        // optional driver handle
    LPWAVEFORMATEX          pwfxSrc,    // source format to convert
    LPWAVEFORMATEX          pwfxDst,    // required destination format
    LPWAVEFILTER            pwfltr,     // optional filter
    DWORD_PTR               dwCallback, // callback
    DWORD_PTR               dwInstance, // callback instance data
    DWORD                   fdwOpen     // ACM_STREAMOPENF_* and CALLBACK_*
);

#define ACM_STREAMOPENF_QUERY           0x00000001
#define ACM_STREAMOPENF_ASYNC           0x00000002
#define ACM_STREAMOPENF_NONREALTIME     0x00000004

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;
//
//  acmStreamClose()
//
//
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;

MMRESULT ACMAPI acmStreamClose
(
    HACMSTREAM              has,
    DWORD                   fdwClose
);


//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;
//
//  acmStreamSize()
//
//
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;

MMRESULT ACMAPI acmStreamSize
(
    HACMSTREAM              has,
    DWORD                   cbInput,
    LPDWORD                 pdwOutputBytes,
    DWORD                   fdwSize
);

#define ACM_STREAMSIZEF_SOURCE          0x00000000L
#define ACM_STREAMSIZEF_DESTINATION     0x00000001L
#define ACM_STREAMSIZEF_QUERYMASK       0x0000000FL


//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;
//
//  acmStreamReset()
//
//
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;

MMRESULT ACMAPI acmStreamReset
(
    HACMSTREAM              has,
    DWORD                   fdwReset
);


//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;
//
//  acmStreamMessage()
//
//
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;

MMRESULT ACMAPI acmStreamMessage
(
    HACMSTREAM              has,
    UINT                    uMsg, 
    LPARAM                  lParam1,
    LPARAM                  lParam2
);



//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;
//
//  acmStreamConvert()
//
//
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;

MMRESULT ACMAPI acmStreamConvert
(
    HACMSTREAM              has, 
    LPACMSTREAMHEADER       pash,
    DWORD                   fdwConvert
);

#define ACM_STREAMCONVERTF_BLOCKALIGN   0x00000004
#define ACM_STREAMCONVERTF_START        0x00000010
#define ACM_STREAMCONVERTF_END          0x00000020

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;
//
//  acmStreamPrepareHeader()
//
//
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;

MMRESULT ACMAPI acmStreamPrepareHeader
(
    HACMSTREAM          has,
    LPACMSTREAMHEADER   pash,
    DWORD               fdwPrepare
);


//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;
//
//  acmStreamUnprepareHeader()
//
//
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;

MMRESULT ACMAPI acmStreamUnprepareHeader
(
    HACMSTREAM          has,
    LPACMSTREAMHEADER   pash,
    DWORD               fdwUnprepare
);


#include "poppack.h"    /* Revert to default packing */

#ifdef __cplusplus
}                       /* End of extern "C" { */
#endif  /* __cplusplus */

#endif  /* _INC_ACM */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\MSChapp.h ===
/*++

Copyright (C) Microsoft Corporation, 1999

Module Name:

    mschapp - MS-CHAP Password Change API

Abstract:

    These APIs correspond to the MS-CHAP RFC -2433 sections 9 and 10. In order
    to develop an MS-CHAP RAS server that works with an NT domain, these APIs
    are required.

    Only wide (Unicode) versions of these apis will be available. These are the
    2 callable APIs:

    *   MSChapSrvChangePassword
    *   MsChapSrvChangePassword2

--*/

#ifndef _MSCHAPP_H_
#define _MSCHAPP_H_

#ifndef _NTCRYPT_
#define CYPHER_BLOCK_LENGTH         8

typedef struct _CYPHER_BLOCK {
    CHAR    data[CYPHER_BLOCK_LENGTH];
}CYPHER_BLOCK;
    
typedef struct _LM_OWF_PASSWORD {
    CYPHER_BLOCK data[2];
}                                   LM_OWF_PASSWORD;
typedef LM_OWF_PASSWORD *           PLM_OWF_PASSWORD;
typedef LM_OWF_PASSWORD             NT_OWF_PASSWORD;
typedef NT_OWF_PASSWORD *           PNT_OWF_PASSWORD;

typedef struct _SAMPR_ENCRYPTED_USER_PASSWORD {
    UCHAR Buffer[ (256 * 2) + 4 ];
} SAMPR_ENCRYPTED_USER_PASSWORD, *PSAMPR_ENCRYPTED_USER_PASSWORD;

typedef struct _ENCRYPTED_LM_OWF_PASSWORD {
    CYPHER_BLOCK data[2];
} ENCRYPTED_LM_OWF_PASSWORD, *PENCRYPTED_LM_OWF_PASSWORD;

typedef ENCRYPTED_LM_OWF_PASSWORD   ENCRYPTED_NT_OWF_PASSWORD;
typedef ENCRYPTED_NT_OWF_PASSWORD * PENCRYPTED_NT_OWF_PASSWORD;
#endif // _NTCRYPT


//
// Change a password.
//
    
extern WINADVAPI DWORD WINAPI
MSChapSrvChangePassword(
   __in PWSTR ServerName,
   __in PWSTR UserName,
   __in BOOLEAN LmOldPresent,
   __in PLM_OWF_PASSWORD LmOldOwfPassword,
   __in PLM_OWF_PASSWORD LmNewOwfPassword,
   __in PNT_OWF_PASSWORD NtOldOwfPassword,
   __in PNT_OWF_PASSWORD NtNewOwfPassword
   );


//
// Change a password using mutual encryption.
//

extern WINADVAPI DWORD WINAPI
MSChapSrvChangePassword2(
    __in PWSTR ServerName,
    __in PWSTR UserName,
    __in PSAMPR_ENCRYPTED_USER_PASSWORD NewPasswordEncryptedWithOldNt,
    __in PENCRYPTED_NT_OWF_PASSWORD OldNtOwfPasswordEncryptedWithNewNt,
    __in BOOLEAN LmPresent,
    __in PSAMPR_ENCRYPTED_USER_PASSWORD NewPasswordEncryptedWithOldLm,
    __in PENCRYPTED_LM_OWF_PASSWORD OldLmOwfPasswordEncryptedWithNewLmOrNt
    );

#endif // _MSCHAPP_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\msasn1.h ===
/* Copyright (C) Boris Nikolaus, Germany, 1996-1997. All rights reserved. */
/* Copyright (C) Microsoft Corporation 1997-1998, All rights reserved. */

#ifndef __MS_ASN1_H__
#define __MS_ASN1_H__

#include <pshpack8.h> /* Assume 8 byte packing throughout */

#ifdef __cplusplus
extern "C" {
#endif

/* ------ Basic integer types ------ */

typedef unsigned char   ASN1uint8_t;
typedef signed char     ASN1int8_t;

typedef unsigned short  ASN1uint16_t;
typedef signed short    ASN1int16_t;

typedef unsigned long   ASN1uint32_t;
typedef signed long     ASN1int32_t;


/* ------ Function modifiers ------ */

#ifdef ASN1LIB
#define ASN1_PUBLIC
#elif defined(ASN1C)
#define ASN1_PUBLIC
#else
#define ASN1_PUBLIC     __declspec(dllimport)
#endif
#define ASN1API         __stdcall
#define ASN1CALL        __stdcall

#ifdef _M_CEE_PURE
#define ASN1API_INLINE  __clrcall
#else
#define ASN1API_INLINE  ASN1API
#endif

/* ------ Basic ASN.1 types ------ */

typedef ASN1uint8_t ASN1octet_t;

typedef ASN1uint8_t ASN1bool_t;

typedef struct tagASN1intx_t
{
    ASN1uint32_t length;
   
    __field_bcount(length) 
    ASN1octet_t *value;
}
ASN1intx_t;

typedef struct tagASN1octetstring_t
{
    ASN1uint32_t length;

    __field_bcount(length) 
    ASN1octet_t *value;
}
ASN1octetstring_t;

typedef struct tagASN1octetstring2_t
{
    ASN1uint32_t length;
    ASN1octet_t value[1];
}
ASN1octetstring2_t;

typedef struct ASN1iterator_s
{
    struct ASN1iterator_s *next;
    void *value;
}
ASN1iterator_t;

typedef struct tagASN1bitstring_t
{
    ASN1uint32_t length;
    
    __field_bcount(length) 
    ASN1octet_t *value;
}
ASN1bitstring_t;

typedef char ASN1char_t;

typedef struct tagASN1charstring_t
{
    ASN1uint32_t length;
    
    __field_ecount(length) 
    ASN1char_t *value;
}
ASN1charstring_t;

typedef ASN1uint16_t ASN1char16_t;

typedef struct tagASN1char16string_t
{
    ASN1uint32_t length;
    
    __field_ecount(length) 
    ASN1char16_t *value;
}
ASN1char16string_t;

typedef ASN1uint32_t ASN1char32_t;

typedef struct tagASN1char32string_t
{
    ASN1uint32_t length;
    
    __field_ecount(length) 
    ASN1char32_t *value;
}
ASN1char32string_t;

typedef ASN1char_t *ASN1ztcharstring_t;
typedef ASN1char16_t *ASN1ztchar16string_t;
typedef ASN1char32_t *ASN1ztchar32string_t;

typedef struct tagASN1wstring_t
{
    ASN1uint32_t length;
    
    __field_ecount(length) 
    WCHAR *value;
}
ASN1wstring_t;

typedef struct ASN1objectidentifier_s
{
    struct ASN1objectidentifier_s *next;
    ASN1uint32_t value;
}
*ASN1objectidentifier_t;

typedef struct tagASN1objectidentifier2_t
{
    __range(0, 16)
    ASN1uint16_t count;
    ASN1uint32_t value[16];
}
ASN1objectidentifier2_t;

typedef struct tagASN1encodedOID_t
{
    ASN1uint16_t length;
    
    __field_bcount(length) 
    ASN1octet_t  *value;
}
ASN1encodedOID_t;

typedef ASN1ztcharstring_t ASN1objectdescriptor_t;

typedef struct tagASN1generalizedtime_t
{
    ASN1uint16_t year;
    ASN1uint8_t month;
    ASN1uint8_t day;
    ASN1uint8_t hour;
    ASN1uint8_t minute;
    ASN1uint8_t second;
    ASN1uint16_t millisecond;
    ASN1bool_t universal;
    ASN1int16_t diff;
}
ASN1generalizedtime_t;

typedef struct tagASN1utctime_t
{
    ASN1uint8_t year;
    ASN1uint8_t month;
    ASN1uint8_t day;
    ASN1uint8_t hour;
    ASN1uint8_t minute;
    ASN1uint8_t second;
    ASN1bool_t universal;
    ASN1int16_t diff;
}
ASN1utctime_t;

typedef struct tagASN1open_t
{
    // encoded
    ASN1uint32_t    length;
    union
    {
        __field_bcount(length) 
        void           *encoded;

        __field_bcount(length) 
        void           *value;
    };
}
ASN1open_t;

typedef enum tagASN1blocktype_e
{
    ASN1_DER_SET_OF_BLOCK,
}
ASN1blocktype_e;

typedef ASN1int32_t     ASN1enum_t;     // enumerated type

typedef ASN1uint16_t    ASN1choice_t;   // choice

typedef ASN1uint32_t    ASN1magic_t;

/* ------ Current version of this ASN.1 software ------ */

#define ASN1_MAKE_VERSION(major,minor)  (((major) << 16) | (minor))
#define ASN1_THIS_VERSION               ASN1_MAKE_VERSION(1,0)

enum
{
    ASN1_CHOICE_BASE      = 1,
    ASN1_CHOICE_INVALID   = -1,     // invalid choice
    ASN1_CHOICE_EXTENSION = 0,      // extension choice
};



/*
   Error codes for decoding functions:
   - err == 0:    data has been successfully decoded
   - err <  0:    fatal error has occured, no data has been generated
                  err contains the error number
   - err >  0:    non-fatal event has occured, data has been generated
                  err is a bit set of occured events
 */

typedef enum tagASN1error_e
{
    ASN1_SUCCESS        = 0,            /* success */

    // Teles specific error codes
    ASN1_ERR_INTERNAL   = (-1001),      /* internal error */
    ASN1_ERR_EOD        = (-1002),      /* unexpected end of data */
    ASN1_ERR_CORRUPT    = (-1003),      /* corrupted data */
    ASN1_ERR_LARGE      = (-1004),      /* value too large */
    ASN1_ERR_CONSTRAINT = (-1005),      /* constraint violated */
    ASN1_ERR_MEMORY     = (-1006),      /* out of memory */
    ASN1_ERR_OVERFLOW   = (-1007),      /* buffer overflow */
    ASN1_ERR_BADPDU     = (-1008),      /* function not supported for this pdu*/
    ASN1_ERR_BADARGS    = (-1009),      /* bad arguments to function call */
    ASN1_ERR_BADREAL    = (-1010),      /* bad real value */
    ASN1_ERR_BADTAG     = (-1011),      /* bad tag value met */
    ASN1_ERR_CHOICE     = (-1012),      /* bad choice value */
    ASN1_ERR_RULE       = (-1013),      /* bad encoding rule */
    ASN1_ERR_UTF8       = (-1014),      /* bad unicode (utf8) */

    // New error codes
    ASN1_ERR_PDU_TYPE   = (-1051),      /* bad pdu type */
    ASN1_ERR_NYI        = (-1052),      /* not yet implemented */

    // Teles specific warning codes
    ASN1_WRN_EXTENDED   = 1001,         /* skipped unknown extension(s) */
    ASN1_WRN_NOEOD      = 1002,         /* end of data expected */
}
ASN1error_e;

#define ASN1_SUCCEEDED(ret)     (((int) (ret)) >= 0)
#define ASN1_FAILED(ret)        (((int) (ret)) < 0)


/* ------ Encoding rules ------ */

typedef enum
{
    ASN1_BER_RULE_BER           = 0x0100,
    ASN1_BER_RULE_CER           = 0x0200,
    ASN1_BER_RULE_DER           = 0x0400,
    ASN1_BER_RULE               = ASN1_BER_RULE_BER | ASN1_BER_RULE_CER | ASN1_BER_RULE_DER,
}
ASN1encodingrule_e;

/* ------ public structures ------ */

typedef struct ASN1encoding_s   *ASN1encoding_t;
typedef struct ASN1decoding_s   *ASN1decoding_t;

typedef ASN1int32_t (ASN1CALL *ASN1BerEncFun_t)( __in ASN1encoding_t enc, ASN1uint32_t tag, __in void *data);
typedef ASN1int32_t (ASN1CALL *ASN1BerDecFun_t)( __in ASN1decoding_t enc, ASN1uint32_t tag, __out void *data);

typedef struct tagASN1BerFunArr_t
{
    const ASN1BerEncFun_t *apfnEncoder;
    const ASN1BerDecFun_t *apfnDecoder;
}
ASN1BerFunArr_t;

typedef void (ASN1CALL *ASN1GenericFun_t)(void);
typedef void (ASN1CALL *ASN1FreeFun_t)( __in void *data);

typedef struct tagASN1module_t
{
    ASN1magic_t             nModuleName;
    ASN1encodingrule_e      eRule;
    ASN1uint32_t            dwFlags;
    ASN1uint32_t            cPDUs;

    __field_xcount(cPDUs)
    const ASN1FreeFun_t    *apfnFreeMemory;
    
    __field_xcount(cPDUs)
    const ASN1uint32_t     *acbStructSize;
    
    ASN1BerFunArr_t         BER;
}
*ASN1module_t;


struct ASN1encoding_s
{
    ASN1magic_t         magic;  /* magic for this structure */
    ASN1uint32_t        version;/* version number of this library */
    ASN1module_t        module; /* module this encoding_t depends to */
    __field_bcount(size)
    ASN1octet_t        *buf;    /* buffer to encode into */
    ASN1uint32_t        size;   /* current size of buffer */
    ASN1uint32_t        len;    /* len of encoded data in buffer */
    ASN1error_e         err;    /* error code for last encoding */
    ASN1uint32_t        bit;
    ASN1octet_t        *pos;
    ASN1uint32_t        cbExtraHeader;
    ASN1encodingrule_e  eRule;
    ASN1uint32_t        dwFlags;
};

struct ASN1decoding_s
{
    ASN1magic_t         magic;  /* magic for this structure */
    ASN1uint32_t        version;/* version number of this library */
    ASN1module_t        module; /* module this decoding_t depends to */
    __field_bcount(size)
    ASN1octet_t        *buf;    /* buffer to decode from */
    ASN1uint32_t        size;   /* size of buffer */
    ASN1uint32_t        len;    /* len of decoded data in buffer */
    ASN1error_e         err;    /* error code for last decoding */
    ASN1uint32_t        bit;
    ASN1octet_t        *pos;
    ASN1encodingrule_e  eRule;
    ASN1uint32_t        dwFlags;
};


/* --- flags for functions --- */

#define ASN1DECFREE_NON_PDU_ID    ((ASN1uint32_t) -1)

enum
{
    ASN1FLAGS_NONE              = 0x00000000L, /* no flags */
    ASN1FLAGS_NOASSERT          = 0x00001000L, /* no asertion */
};

enum
{
    ASN1ENCODE_APPEND           = 0x00000001L, /* append to current buffer*/
    ASN1ENCODE_REUSEBUFFER      = 0x00000004L, /* empty destination buffer */
    ASN1ENCODE_SETBUFFER        = 0x00000008L, /* use a user-given destination buffer */
    ASN1ENCODE_ALLOCATEBUFFER   = 0x00000010L, /* do not free/reuse buffer */
    ASN1ENCODE_NOASSERT         = ASN1FLAGS_NOASSERT, /* no asertion */
};

enum
{
    ASN1DECODE_APPENDED         = 0x00000001L, /* continue behind last pdu*/
    ASN1DECODE_REWINDBUFFER     = 0x00000004L, /* rescan from buffer start*/
    ASN1DECODE_SETBUFFER        = 0x00000008L, /* use a user-given src buffer */
    ASN1DECODE_AUTOFREEBUFFER   = 0x00000010L, /* Assume responsibility for allocated buffer */
    ASN1DECODE_NOASSERT         = ASN1FLAGS_NOASSERT, /* no asertion */
};

/*****************************************************************************
  ASN1_CreateModule

*****************************************************************************/
extern ASN1_PUBLIC 
ASN1module_t 
ASN1API 
ASN1_CreateModule(
                ASN1uint32_t            nVersion,
                ASN1encodingrule_e      eRule,
                ASN1uint32_t            dwFlags, /* ASN1FLAGS_NONE or ASN1FLAGS_NOASSERT */
                ASN1uint32_t            cPDU,
                const ASN1GenericFun_t  apfnEncoder[],
                const ASN1GenericFun_t  apfnDecoder[],
                const ASN1FreeFun_t     apfnFreeMemory[],
                const ASN1uint32_t      acbStructSize[],
                ASN1magic_t             nModuleName
    );

/*****************************************************************************
  ASN1_CloseModule

*****************************************************************************/
extern ASN1_PUBLIC 
void 
ASN1API 
ASN1_CloseModule(
    __in        ASN1module_t        pModule
    );

/*****************************************************************************
  ASN1_CreateEncoder

*****************************************************************************/
extern ASN1_PUBLIC 
__success( return >= 0 )
ASN1error_e 
ASN1API 
ASN1_CreateEncoder(
    __in        ASN1module_t        pModule,
    __deref_out ASN1encoding_t     *ppEncoderInfo,
    __in_bcount_opt( cbBufSize )
                ASN1octet_t        *pbBuf,
                ASN1uint32_t        cbBufSize,
    __in_opt    ASN1encoding_t      pParent
    );

/*****************************************************************************
  ASN1_Encode

*****************************************************************************/
extern ASN1_PUBLIC 
__success( return >= 0 )
ASN1error_e 
ASN1API 
ASN1_Encode(
    __in        ASN1encoding_t      pEncoderInfo,
    __in        void               *pDataStruct,
                ASN1uint32_t        nPduNum,
                ASN1uint32_t        dwFlags,
    __out_bcount_opt( cbBufSize )          
                ASN1octet_t        *pbBuf,
                ASN1uint32_t        cbBufSize
    );

/*****************************************************************************
  ASN1_CloseEncoder

*****************************************************************************/
extern ASN1_PUBLIC 
void 
ASN1API 
ASN1_CloseEncoder(
    __in        ASN1encoding_t      pEncoderInfo
    );

/*****************************************************************************
  ASN1_CloseEncoder2

*****************************************************************************/
extern ASN1_PUBLIC 
void 
ASN1API 
ASN1_CloseEncoder2(
    __in        ASN1encoding_t      pEncoderInfo
    );

/*****************************************************************************
  ASN1_CreateDecoder

*****************************************************************************/
extern ASN1_PUBLIC 
__success( return >= 0 )
ASN1error_e 
ASN1API 
ASN1_CreateDecoder(
    __in        ASN1module_t        pModule,
    __deref_out ASN1decoding_t     *ppDecoderInfo,
    __in_bcount_opt(cbBufSize)
                ASN1octet_t        *pbBuf,
                ASN1uint32_t        cbBufSize,
    __in_opt    ASN1decoding_t      pParent
    );

/*****************************************************************************
  ASN1_CreateDecoderEx

*****************************************************************************/
extern ASN1_PUBLIC 
__success( return >= 0 )
ASN1error_e 
ASN1API 
ASN1_CreateDecoderEx(
    __in        ASN1module_t        pModule,
    __deref_out ASN1decoding_t     *ppDecoderInfo,
    __in_bcount_opt(cbBufSize)
                ASN1octet_t        *pbBuf,
                ASN1uint32_t        cbBufSize,
    __in_opt    ASN1decoding_t      pParent,
                ASN1uint32_t        dwFlags
    );

/*****************************************************************************
  ASN1_Decode

*****************************************************************************/
extern ASN1_PUBLIC 
__success( return >= 0 )
ASN1error_e 
ASN1API 
ASN1_Decode(
    __in        ASN1decoding_t      pDecoderInfo,
    __deref_out void              **ppDataStruct,
                ASN1uint32_t        nPduNum,
                ASN1uint32_t        dwFlags,
    __in_bcount(cbBufSize)
                ASN1octet_t        *pbBuf,
                ASN1uint32_t        cbBufSize
    );

/*****************************************************************************
  ASN1_CloseDecoder

*****************************************************************************/
extern ASN1_PUBLIC 
void 
ASN1API 
ASN1_CloseDecoder(
    __in        ASN1decoding_t      pDecoderInfo
    );


/*****************************************************************************
  ASN1_FreeEncoded

*****************************************************************************/
extern ASN1_PUBLIC 
void 
ASN1API 
ASN1_FreeEncoded(
    __in        ASN1encoding_t      pEncoderInfo,
    __in        void               *pBuf
    );

/*****************************************************************************
  ASN1_FreeDecoded

*****************************************************************************/
extern 
ASN1_PUBLIC 
void 
ASN1API 
ASN1_FreeDecoded(
    __in        ASN1decoding_t      pDecoderInfo,
    __in        void               *pDataStruct,
                ASN1uint32_t        nPduNum
    );


/*****************************************************************************
  Options

*****************************************************************************/
typedef enum
{
    // common set option
    ASN1OPT_CHANGE_RULE                 = 0x101,

    // common get option
    ASN1OPT_GET_RULE                    = 0x201,

    // set encoder option
    ASN1OPT_NOT_REUSE_BUFFER            = 0x301,
    ASN1OPT_REWIND_BUFFER               = 0x302,

    // get encoder option

    // set decoder option
    ASN1OPT_SET_DECODED_BUFFER          = 0x501,
    ASN1OPT_DEL_DECODED_BUFFER          = 0x502,

    // get decoder option
    ASN1OPT_GET_DECODED_BUFFER_SIZE     = 0x601,
}
ASN1option_e;

typedef struct tagASN1optionparam_t
{
    ASN1option_e    eOption;
    union
    {
        ASN1encodingrule_e              eRule;
        ASN1uint32_t                    cbRequiredDecodedBufSize;
        struct
        {
            ASN1octet_t    *pbBuf;
            ASN1uint32_t    cbBufSize;
        }                               Buffer;
    };
}
ASN1optionparam_t, ASN1optionparam_s;


/*****************************************************************************
  ASN1_SetEncoderOption

*****************************************************************************/
extern ASN1_PUBLIC 
__success( return >= 0 )
ASN1error_e 
ASN1API 
ASN1_SetEncoderOption(
    __in        ASN1encoding_t      pEncoderInfo,
    __in        ASN1optionparam_t  *pOptParam
    );

/*****************************************************************************
  ASN1_GetEncoderOption

*****************************************************************************/
extern ASN1_PUBLIC 
__success( return >= 0 )
ASN1error_e 
ASN1API 
ASN1_GetEncoderOption(
    __in        ASN1encoding_t      pEncoderInfo,
    __inout     ASN1optionparam_t  *pOptParam
    );

/*****************************************************************************
  ASN1_SetDecoderOption

*****************************************************************************/
extern ASN1_PUBLIC 
__success( return >= 0 )
ASN1error_e 
ASN1API 
ASN1_SetDecoderOption(
    __in        ASN1decoding_t      pDecoderInfo,
    __in        ASN1optionparam_t  *pOptParam
    );

/*****************************************************************************
  ASN1_GetDecoderOption

*****************************************************************************/
extern ASN1_PUBLIC 
__success( return >= 0 )
ASN1error_e 
ASN1API 
ASN1_GetDecoderOption(
    __in        ASN1decoding_t      pDecoderInfo,
    __inout     ASN1optionparam_t  *pOptParam
    );


/*****************************************************************************
  XXX_free

*****************************************************************************/
extern ASN1_PUBLIC 
void 
ASN1API 
ASN1bitstring_free(
    __in ASN1bitstring_t *
    );

extern ASN1_PUBLIC 
void 
ASN1API 
ASN1octetstring_free(
    __in ASN1octetstring_t *
    );

extern ASN1_PUBLIC 
void 
ASN1API 
ASN1objectidentifier_free(
    __in ASN1objectidentifier_t *
    );
    
extern ASN1_PUBLIC 
void 
ASN1API 
ASN1charstring_free(
    __in ASN1charstring_t *
    );
    
extern ASN1_PUBLIC 
void 
ASN1API 
ASN1char16string_free(
    __in ASN1char16string_t *
    );
    
extern ASN1_PUBLIC 
void 
ASN1API 
ASN1char32string_free(
    __in ASN1char32string_t *
    );
    
extern ASN1_PUBLIC 
void 
ASN1API 
ASN1ztcharstring_free(
    __in ASN1ztcharstring_t
    );
    
extern ASN1_PUBLIC 
void 
ASN1API 
ASN1ztchar16string_free(
    __in ASN1ztchar16string_t
    );
    
extern ASN1_PUBLIC 
void 
ASN1API 
ASN1ztchar32string_free(
    __in ASN1ztchar32string_t
    );
    
extern ASN1_PUBLIC 
void 
ASN1API 
ASN1open_free(
    __in ASN1open_t *
    );
    
extern ASN1_PUBLIC 
void 
ASN1API 
ASN1utf8string_free(
    __in ASN1wstring_t *
    );

/*****************************************************************************
  ASN1DecAlloc

*****************************************************************************/
extern ASN1_PUBLIC 
__out_bcount_opt( size )
LPVOID 
ASN1API 
ASN1DecAlloc(
    __in        ASN1decoding_t dec, 
                ASN1uint32_t size
    );

/*****************************************************************************
  ASN1DecRealloc

*****************************************************************************/
extern ASN1_PUBLIC 
__out_bcount_opt( size )
LPVOID 
ASN1API 
ASN1DecRealloc(
    __in        ASN1decoding_t dec, 
    __in        LPVOID ptr, 
                ASN1uint32_t size
                );

/*****************************************************************************
  ASN1Free

*****************************************************************************/
extern ASN1_PUBLIC 
void   
ASN1API 
ASN1Free(
    __in        LPVOID  ptr
    );

/*****************************************************************************
  ASN1EncSetError

*****************************************************************************/
extern ASN1_PUBLIC 
__success( return >= 0 )
ASN1error_e 
ASN1API ASN1EncSetError(
    __in        ASN1encoding_t enc, 
                ASN1error_e err
    );
    
/*****************************************************************************
  ASN1EncSetError

*****************************************************************************/
extern ASN1_PUBLIC 
__success( return >= 0 )
ASN1error_e 
ASN1API 
ASN1DecSetError(
    __in        ASN1decoding_t dec, 
                ASN1error_e err
    );

/*****************************************************************************
  intx conversions

*****************************************************************************/
extern ASN1_PUBLIC 
ASN1uint32_t 
ASN1API 
ASN1intx_uoctets(
    __in ASN1intx_t *
    );
    
extern ASN1_PUBLIC 
void         
ASN1API 
ASN1intx_free(
    __in ASN1intx_t *
    );
    
extern ASN1_PUBLIC 
ASN1int32_t  
ASN1API 
ASN1intx2int32(
    __in ASN1intx_t *
    );
    
extern ASN1_PUBLIC 
ASN1uint32_t 
ASN1API 
ASN1intx2uint32(
    __in ASN1intx_t *
    );
    
extern ASN1_PUBLIC 
int          
ASN1API 
ASN1intxisuint32(
    __in ASN1intx_t *
    );
    
extern ASN1_PUBLIC 
void         
ASN1API 
ASN1intx_setuint32(
    __out   ASN1intx_t *dst, 
            ASN1uint32_t val 
    );
    
/*****************************************************************************
 ASN1uint32_uoctets

    count octets for unsigned encoding of an uint32 value 

*****************************************************************************/
extern ASN1_PUBLIC 
ASN1uint32_t 
ASN1API 
ASN1uint32_uoctets(
    ASN1uint32_t
    );

/*****************************************************************************
  Comparisson APIs

*****************************************************************************/
extern ASN1_PUBLIC 
int 
ASN1API 
ASN1intx_cmp(
    __in        ASN1intx_t *, 
    __in        ASN1intx_t *
    );

extern ASN1_PUBLIC 
int 
ASN1API 
ASN1objectidentifier_cmp(
    __in        ASN1objectidentifier_t *,
    __in        ASN1objectidentifier_t *
    );
    
extern ASN1_PUBLIC 
int 
ASN1API 
ASN1objectidentifier2_cmp(
    __in        ASN1objectidentifier2_t *, 
    __in        ASN1objectidentifier2_t *
    );
    
extern ASN1_PUBLIC 
int 
ASN1API 
ASN1bitstring_cmp(
    __in        ASN1bitstring_t *, 
    __in        ASN1bitstring_t *, 
                int
    );
    
extern ASN1_PUBLIC 
int 
ASN1API 
ASN1octetstring_cmp(
    __in        ASN1octetstring_t *, 
    __in        ASN1octetstring_t *
    );
    
extern ASN1_PUBLIC 
int 
ASN1API 
ASN1charstring_cmp(
    __in        ASN1charstring_t *, 
    __in        ASN1charstring_t *
    );

extern ASN1_PUBLIC 
int 
ASN1API 
ASN1char16string_cmp(
    __in        ASN1char16string_t *, 
    __in        ASN1char16string_t *
    );

extern ASN1_PUBLIC 
int 
ASN1API 
ASN1char32string_cmp(
    __in        ASN1char32string_t *, 
    __in        ASN1char32string_t *
    );

extern ASN1_PUBLIC 
int 
ASN1API 
ASN1ztcharstring_cmp(
    __in_z      ASN1ztcharstring_t, 
    __in_z      ASN1ztcharstring_t
    );

extern ASN1_PUBLIC 
int 
ASN1API 
ASN1ztchar16string_cmp(
    __in_z      ASN1ztchar16string_t, 
    __in_z      ASN1ztchar16string_t
    );

extern ASN1_PUBLIC 
int 
ASN1API 
ASN1ztchar32string_cmp(
    __in_z      ASN1ztchar32string_t, 
    __in_z      ASN1ztchar32string_t
    );

extern ASN1_PUBLIC 
int 
ASN1API 
ASN1open_cmp(
    __in        ASN1open_t *, 
    __in        ASN1open_t *
    );

extern ASN1_PUBLIC 
int 
ASN1API
ASN1generalizedtime_cmp(
    __in        ASN1generalizedtime_t *, 
    __in        ASN1generalizedtime_t *
    );
 
extern ASN1_PUBLIC 
int 
ASN1API 
ASN1utctime_cmp(
    __in        ASN1utctime_t *, 
    __in        ASN1utctime_t *
    );


#ifdef __cplusplus
}
#endif

#include <poppack.h> /* End 8-byte packing */

#endif // __MS_ASN1_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\mscat.h ===
//+-------------------------------------------------------------------------
//
//  Microsoft Windows
//
//  Copyright (C) Microsoft Corporation, 1996 - 1999
//
//  File:       mscat.h
//
//  Contents:   Microsoft Internet Security Catalog API
//
//  History:    29-Apr-1997 pberkman    created
//              09-Sep-1997 pberkman    add CATAdmin functions
//
//--------------------------------------------------------------------------


#ifndef MSCAT_H
#define MSCAT_H


#if _MSC_VER > 1000
#pragma once
#endif

#include    "mssip.h"

#ifdef __cplusplus
    extern "C"
    {
#endif

/////////////////////////////////////////////////////////////////////////////
//
//  defines:
//
/////////////////////////////////////////////////////////////////////////////

#define     szOID_CATALOG_LIST                  "1.3.6.1.4.1.311.12.1.1"
#define     szOID_CATALOG_LIST_MEMBER           "1.3.6.1.4.1.311.12.1.2"

#define     CRYPTCAT_FILEEXT                    L"CAT"

#define     CRYPTCAT_MAX_MEMBERTAG              64

        //
        //  fdwOpenFlags
        //
#define     CRYPTCAT_OPEN_CREATENEW             0x00000001  // creates/overwrites
#define     CRYPTCAT_OPEN_ALWAYS                0x00000002  // opens/creates
#define     CRYPTCAT_OPEN_EXISTING              0x00000004  // opens only

#define     CRYPTCAT_OPEN_EXCLUDE_PAGE_HASHES   0x00010000  // Exclude page hashes in SPC_INDIRECT_DATA

// The above CRYPTCAT_OPEN_EXCLUDE_PAGE_HASHES takes precedence if also set.
#define     CRYPTCAT_OPEN_INCLUDE_PAGE_HASHES   0x00020000  // Include page hashes in SPC_INDIRECT_DATA
#define     CRYPTCAT_OPEN_VERIFYSIGHASH         0x10000000  // verifies the signature (not the certs!)

#define     CRYPTCAT_OPEN_NO_CONTENT_HCRYPTMSG  0x20000000  // does CryptMsgDecode without content
#define     CRYPTCAT_OPEN_SORTED                0x40000000  // does CertCreateContext(CERT_CREATE_CONTEXT_SORTED_FLAG)

#define     CRYPTCAT_OPEN_FLAGS_MASK            0xffff0000  // mask for upper word

        //
        //  fdwMemberFlags  (used internal -- do not fill)
        //

#define     CRYPTCAT_MEMBER_SORTED              0x40000000

        //
        //  dwAttrTypeAndAction
        //
#define     CRYPTCAT_ATTR_AUTHENTICATED         0x10000000
#define     CRYPTCAT_ATTR_UNAUTHENTICATED       0x20000000

#define     CRYPTCAT_ATTR_NAMEASCII             0x00000001  // ascii string
#define     CRYPTCAT_ATTR_NAMEOBJID             0x00000002  // crypt obj id

#define     CRYPTCAT_ATTR_DATAASCII             0x00010000  // do not decode simple ascii chars
#define     CRYPTCAT_ATTR_DATABASE64            0x00020000  // base 64
#define     CRYPTCAT_ATTR_DATAREPLACE           0x00040000  // this data is a replacment for an existing attr

        //
        //  dwLocalError - CDF Parse
        //
#define     CRYPTCAT_E_AREA_HEADER              0x00000000
#define     CRYPTCAT_E_AREA_MEMBER              0x00010000
#define     CRYPTCAT_E_AREA_ATTRIBUTE           0x00020000

#define     CRYPTCAT_E_CDF_UNSUPPORTED          0x00000001
#define     CRYPTCAT_E_CDF_DUPLICATE            0x00000002
#define     CRYPTCAT_E_CDF_TAGNOTFOUND          0x00000004

#define     CRYPTCAT_E_CDF_MEMBER_FILE_PATH     0x00010001
#define     CRYPTCAT_E_CDF_MEMBER_INDIRECTDATA  0x00010002
#define     CRYPTCAT_E_CDF_MEMBER_FILENOTFOUND  0x00010004

#define     CRYPTCAT_E_CDF_BAD_GUID_CONV        0x00020001
#define     CRYPTCAT_E_CDF_ATTR_TOOFEWVALUES    0x00020002
#define     CRYPTCAT_E_CDF_ATTR_TYPECOMBO       0x00020004




/////////////////////////////////////////////////////////////////////////////
//
//  structures:
//
/////////////////////////////////////////////////////////////////////////////

#include <pshpack8.h>

typedef struct CRYPTCATSTORE_
{
    DWORD                       cbStruct;       // = sizeof(CRYPTCATSTORE)
    DWORD                       dwPublicVersion;
    LPWSTR                      pwszP7File;
    HCRYPTPROV                  hProv;
    DWORD                       dwEncodingType;
    DWORD                       fdwStoreFlags;
    HANDLE                      hReserved;      // pStack(members) (null if init/pbData) INTERNAL!

    HANDLE                      hAttrs;         // pStack(Catalog attrs) INTERNAL!

    // Following is only set if opened with CRYPTCAT_OPEN_NO_CONTENT_HCRYPTMSG
    HCRYPTMSG                   hCryptMsg;
    // Following is only set if opened with CRYPTCAT_OPEN_SORTED
    HANDLE                      hSorted;        // INTERNAL ONLY!

} CRYPTCATSTORE;

typedef struct CRYPTCATMEMBER_
{
    DWORD                       cbStruct;           // = sizeof(CRYPTCATMEMBER)
    LPWSTR                      pwszReferenceTag;
    LPWSTR                      pwszFileName;       // used only by the CDF APIs
    GUID                        gSubjectType;       // may be zeros -- see sEncodedMemberInfo
    DWORD                       fdwMemberFlags;
    struct SIP_INDIRECT_DATA_   *pIndirectData;     // may be null -- see sEncodedIndirectData
    DWORD                       dwCertVersion;      // may be zero -- see sEncodedMemberInfo
    DWORD                       dwReserved;         // used by enum -- DO NOT USE!
    HANDLE                      hReserved;          // pStack(attrs) (null if init) INTERNAL!

    CRYPT_ATTR_BLOB             sEncodedIndirectData;   // lazy decode
    CRYPT_ATTR_BLOB             sEncodedMemberInfo;     // lazy decode

} CRYPTCATMEMBER;

typedef struct CRYPTCATATTRIBUTE_
{
    DWORD                       cbStruct;           // = sizeof(CRYPTCATATTRIBUTE)
    LPWSTR                      pwszReferenceTag;
    DWORD                       dwAttrTypeAndAction;
    DWORD                       cbValue;
    BYTE                        *pbValue;           // encoded CAT_NAMEVALUE struct
    DWORD                       dwReserved;         // used by enum -- DO NOT USE!

} CRYPTCATATTRIBUTE;

typedef struct CRYPTCATCDF_
{
    DWORD                       cbStruct;           // = sizeof(CRYPTCATCDF)
    HANDLE                      hFile;
    DWORD                       dwCurFilePos;
    DWORD                       dwLastMemberOffset;
    BOOL                        fEOF;
    LPWSTR                      pwszResultDir;
    HANDLE                      hCATStore;

} CRYPTCATCDF;

typedef struct CATALOG_INFO_
{
    DWORD                       cbStruct;   // set to sizeof(CATALOG_INFO)

    WCHAR                       wszCatalogFile[MAX_PATH];

} CATALOG_INFO;

typedef HANDLE          HCATADMIN;
typedef HANDLE          HCATINFO;

#include <poppack.h>

typedef void (WINAPI *PFN_CDF_PARSE_ERROR_CALLBACK)(IN DWORD dwErrorArea,
                                                    IN DWORD dwLocalError,
                                                    IN WCHAR *pwszLine);

/////////////////////////////////////////////////////////////////////////////
//
//  Prototypes:
//
/////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////////////////////
//
//  Open:
// --------------------------------------------------------------------------
//  Usage:
//      open the catalog for Get/Put operations.
//
//  Return:
//      INVALID_HANDLE_VALUE:           an error occured while opening Catalog
//
//  Errors:
//      ERROR_INVALID_PARAMETER:        an input parameter is incorrect
//
extern HANDLE WINAPI CryptCATOpen(__in        LPWSTR pwszFileName,
                                  IN          DWORD fdwOpenFlags,
                                  IN OPTIONAL HCRYPTPROV hProv,
                                  IN OPTIONAL DWORD dwPublicVersion,
                                  IN OPTIONAL DWORD dwEncodingType);

// WOB #1496767
/////////////////////////////////////////////////////////////////////////////
//
//  Set or clear page-hashes bit:
// --------------------------------------------------------------------------
//  Usage:
//      set a new value into the bit that suppresses page-hash generation.
//
//  Errors:
//      ERROR_INVALID_PARAMETER:        an input parameter is incorrect
//
extern void WINAPI
CryptCATSetCreatePageHashesFlag( IN HANDLE hCatalog, IN BOOL newCreatePageHashesFlag );

/////////////////////////////////////////////////////////////////////////////
//
//  Close:
// --------------------------------------------------------------------------
//  Usage:
//      close the catalog handle.
//
//  Errors:
//      ERROR_INVALID_PARAMETER:        an input parameter is incorrect
//
extern BOOL WINAPI CryptCATClose(IN HANDLE hCatalog);

/////////////////////////////////////////////////////////////////////////////
//
//  StoreFromHandle:
// --------------------------------------------------------------------------
//  Usage:
//      retrieve the CRYPTCATSTORE from the store handle.
//
//          *** DO NOT FREE THE POINTER OR ANY OF ITS MEMBERS! ***
//
//  Errors:
//      ERROR_INVALID_PARAMETER:        an input parameter is incorrect
//
extern CRYPTCATSTORE * WINAPI CryptCATStoreFromHandle(IN HANDLE hCatalog);

/////////////////////////////////////////////////////////////////////////////
//
// HandleFromStore:
// --------------------------------------------------------------------------
//  Usage:
//      retrieve the handle from a CRYPTCATSTORE pointer.
//
//  Errors:
//      ERROR_INVALID_PARAMETER:        an input parameter is incorrect
//
extern HANDLE WINAPI CryptCATHandleFromStore(IN CRYPTCATSTORE *pCatStore);


/////////////////////////////////////////////////////////////////////////////
//
//  PersistStore
// --------------------------------------------------------------------------
//  Usage:
//      Persist the information in the current Catalog Store to an unsigned
//      Catalog File. It is REQUIRED to fill in the pwszP7File member
//      of CRYPTCATSTORE prior to this call!
//
//  Errors:
//      ERROR_INVALID_PARAMETER:        an input parameter is incorrect
//
extern BOOL WINAPI CryptCATPersistStore(IN HANDLE hCatalog);


/////////////////////////////////////////////////////////////////////////////
//
//  CryptCATGetCatAttrInfo
// --------------------------------------------------------------------------
//  Usage:
//
//          *** DO NOT FREE THE POINTER OR ANY OF ITS MEMBERS! ***
//
//  Errors:
//      ERROR_INVALID_PARAMETER:        an input parameter is incorrect
//
extern CRYPTCATATTRIBUTE * WINAPI CryptCATGetCatAttrInfo(IN HANDLE hCatalog,
                                                         __in LPWSTR pwszReferenceTag);

/////////////////////////////////////////////////////////////////////////////
//
//  CryptCATPutCatAttrInfo
// --------------------------------------------------------------------------
//  Usage:
//      Allocates and adds the attribute to the catalog.  Returns a pointer
//      to the allocated attribute.
//
//          *** DO NOT FREE THE POINTER OR ANY OF ITS MEMBERS! ***
//
//  Errors:
//      ERROR_INVALID_PARAMETER:        an input parameter is incorrect
//
extern CRYPTCATATTRIBUTE * WINAPI CryptCATPutCatAttrInfo(IN HANDLE hCatalog,
                                                         __in LPWSTR pwszReferenceTag,
                                                         IN DWORD dwAttrTypeAndAction,
                                                         IN DWORD cbData,
                                                         IN BYTE *pbData);

/////////////////////////////////////////////////////////////////////////////
//
//  CryptCATEnumerateCatAttr
// --------------------------------------------------------------------------
//  Usage:
//      Enumerates through the list of attributes associated with the catalog.
//      Returns a pointer to the attribute. This return should be passed in
//      as the 'PrevAttr' to continue the enumeration.  On the first call,
//      the 'PrevAttr' should be set to NULL.
//
//          *** DO NOT FREE THE POINTER OR ANY OF ITS MEMBERS! ***
//
//  Errors:
//      ERROR_INVALID_PARAMETER:        an input parameter is incorrect
//
extern CRYPTCATATTRIBUTE * WINAPI CryptCATEnumerateCatAttr(IN HANDLE hCatalog,
                                                           IN CRYPTCATATTRIBUTE *pPrevAttr);

/////////////////////////////////////////////////////////////////////////////
//
//  CryptCATGetMemberInfo
// --------------------------------------------------------------------------
//  Usage:
//      Retrieve the Tag info (member info) structure from the catalog
//      PKCS#7, fill the CRYPTCATMEMBER structure, and return. -- Opens a
//      member context.
//
//          *** DO NOT FREE THE POINTER OR ANY OF ITS MEMBERS! ***
//
//  Errors:
//      ERROR_INVALID_PARAMETER:        an input parameter is incorrect
//
extern CRYPTCATMEMBER * WINAPI CryptCATGetMemberInfo(IN HANDLE hCatalog,
                                                     __in LPWSTR pwszReferenceTag);

/////////////////////////////////////////////////////////////////////////////
//
//  CryptCATAllocSortedMemberInfo
// --------------------------------------------------------------------------
//  Usage:
//      If CryptCATOpen is called with CRYPTCAT_OPEN_SORTED, this function
//      must be called instead of the above CryptCATGetMemberInfo().
//
//      The returned member context must be freed by calling
//      CryptCATFreeSortedMemberInfo()
//
//  Errors:
//      ERROR_INVALID_PARAMETER:        an input parameter is incorrect
//
extern CRYPTCATMEMBER * WINAPI CryptCATAllocSortedMemberInfo(IN HANDLE hCatalog, 
                                                     __in LPWSTR pwszReferenceTag);

/////////////////////////////////////////////////////////////////////////////
//
//  CryptCATFreeSortedMemberInfo
// --------------------------------------------------------------------------
//  Usage:
//      Free member context returned by the above
//      CryptCATAllocSortedMemberInfo().
//
//  Errors:
//      ERROR_INVALID_PARAMETER:        an input parameter is incorrect
//
extern void WINAPI CryptCATFreeSortedMemberInfo(IN HANDLE hCatalog, 
                                                      IN CRYPTCATMEMBER *pCatMember);

/////////////////////////////////////////////////////////////////////////////
//
//  CryptCATGetAttr:
// --------------------------------------------------------------------------
//  Usage:
//      get pwszReferenceTag attribute information for a member.
//
//  Errors:
//      ERROR_INVALID_PARAMETER:        an input parameter is incorrect
//
extern CRYPTCATATTRIBUTE * WINAPI CryptCATGetAttrInfo(IN HANDLE hCatalog,
                                                      IN CRYPTCATMEMBER *pCatMember,
                                                      __in LPWSTR pwszReferenceTag);

/////////////////////////////////////////////////////////////////////////////
//
//  CryptCATPutMemberInfo
// --------------------------------------------------------------------------
//  Usage:
//      Allocates and adds the member to the catalog.  Returns a pointer
//      to the allocated member.
//
//          *** DO NOT FREE THE POINTER OR ANY OF ITS MEMBERS! ***
//
//  Errors:
//      ERROR_INVALID_PARAMETER:        an input parameter is incorrect
//      CRYPT_E_EXISTS:                 the reference tag already exists
//      CRYPT_E_NOT_FOUND:              the attr was not found
//
extern CRYPTCATMEMBER * WINAPI CryptCATPutMemberInfo(IN HANDLE hCatalog,
                                                     __in_opt    LPWSTR pwszFileName,
                                                     __in        LPWSTR pwszReferenceTag,
                                                     IN          GUID *pgSubjectType,
                                                     IN          DWORD dwCertVersion,
                                                     IN          DWORD cbSIPIndirectData,
                                                     IN          BYTE *pbSIPIndirectData);

/////////////////////////////////////////////////////////////////////////////
//
//  CryptCATPutAttrInfo
// --------------------------------------------------------------------------
//  Usage:
//      Allocates and adds the attribute to the member.  Returns a pointer
//      to the allocated attribute.
//
//          *** DO NOT FREE THE POINTER OR ANY OF ITS MEMBERS! ***
//
//  Errors:
//      ERROR_INVALID_PARAMETER:        an input parameter is incorrect
//
extern CRYPTCATATTRIBUTE * WINAPI CryptCATPutAttrInfo(IN HANDLE hCatalog,
                                                      IN CRYPTCATMEMBER *pCatMember,
                                                      __in LPWSTR pwszReferenceTag,
                                                      IN DWORD dwAttrTypeAndAction,
                                                      IN DWORD cbData,
                                                      IN BYTE *pbData);

/////////////////////////////////////////////////////////////////////////////
//
//  CryptCATEnumerateMember
// --------------------------------------------------------------------------
//  Usage:
//      Enumerates through the list of members in the store.  Returns a pointer
//      to the member. This return should be passed in as the 'PrevMember' to
//      continue the enumeration.  On the first call, the 'PrevMember' should
//      be set to NULL.
//
//          *** DO NOT FREE THE POINTER OR ANY OF ITS MEMBERS! ***
//
//  Errors:
//      ERROR_INVALID_PARAMETER:        an input parameter is incorrect
//
extern CRYPTCATMEMBER * WINAPI CryptCATEnumerateMember(IN HANDLE hCatalog,
                                                       IN CRYPTCATMEMBER *pPrevMember);

/////////////////////////////////////////////////////////////////////////////
//
//  CryptCATEnumerateAttr
// --------------------------------------------------------------------------
//  Usage:
//      Enumerates through the list of attributes associated with the member.
//      Returns a pointer to the attribute. This return should be passed in
//      as the 'PrevAttr' to continue the enumeration.  On the first call,
//      the 'PrevAttr' should be set to NULL.
//
//          *** DO NOT FREE THE POINTER OR ANY OF ITS MEMBERS! ***
//
//  Errors:
//      ERROR_INVALID_PARAMETER:        an input parameter is incorrect
//
extern CRYPTCATATTRIBUTE * WINAPI CryptCATEnumerateAttr(IN HANDLE hCatalog,
                                                        IN CRYPTCATMEMBER *pCatMember,
                                                        IN CRYPTCATATTRIBUTE *pPrevAttr);

/////////////////////////////////////////////////////////////////////////////
//
//  CryptCATCDFOpen
// --------------------------------------------------------------------------
//  Usage:
//      Opens the specified CDF file and initialized the structure
//
//  Errors:
//      ERROR_INVALID_PARAMETER:        an input parameter is incorrect
//      ERROR_FILE_NOT_FOUND:           the CDF file was not found
//
extern CRYPTCATCDF * WINAPI CryptCATCDFOpen(__in LPWSTR pwszFilePath,
                                            __in_opt PFN_CDF_PARSE_ERROR_CALLBACK pfnParseError);


/////////////////////////////////////////////////////////////////////////////
//
//  CryptCATCDFClose
// --------------------------------------------------------------------------
//  Usage:
//      Closes the CDF file and deallocates the structure
//
//  Errors:
//      ERROR_INVALID_PARAMETER:        an input parameter is incorrect
//
extern BOOL WINAPI CryptCATCDFClose(IN CRYPTCATCDF *pCDF);

/////////////////////////////////////////////////////////////////////////////
//
//  CryptCATCDFEnumCatAttributes
// --------------------------------------------------------------------------
//  Usage:
//      Enumerates Catalog level attributes within the "[CatalogFiles]"
//      section of the CDF.
//
//  Errors:
//      ERROR_INVALID_PARAMETER:        an input parameter is incorrect
//
extern CRYPTCATATTRIBUTE * WINAPI CryptCATCDFEnumCatAttributes(CRYPTCATCDF *pCDF,
                                                               CRYPTCATATTRIBUTE *pPrevAttr,
                                                                PFN_CDF_PARSE_ERROR_CALLBACK pfnParseError);

/////////////////////////////////////////////////////////////////////////////
//
//  CryptCATCDFEnumMembers
// --------------------------------------------------------------------------
//  Usage:
//      Enumerates files within the "[CatalogFiles]" section of the CDF.
//
//  Errors:
//      ERROR_INVALID_PARAMETER:        an input parameter is incorrect
//
extern CRYPTCATMEMBER * WINAPI CryptCATCDFEnumMembers(IN          CRYPTCATCDF *pCDF,
                                                      IN          CRYPTCATMEMBER *pPrevMember,
                                                      IN OPTIONAL PFN_CDF_PARSE_ERROR_CALLBACK pfnParseError);

/////////////////////////////////////////////////////////////////////////////
//
//  CryptCATCDFEnumAttributes
// --------------------------------------------------------------------------
//  Usage:
//      Enumerates the files attributes within the "[CatalogFiles]" section
//      of the CDF.
//
//  Errors:
//      ERROR_INVALID_PARAMETER:        an input parameter is incorrect
//
extern CRYPTCATATTRIBUTE *WINAPI CryptCATCDFEnumAttributes(IN          CRYPTCATCDF *pCDF,
                                                           IN          CRYPTCATMEMBER *pMember,
                                                           IN          CRYPTCATATTRIBUTE *pPrevAttr,
                                                           IN OPTIONAL PFN_CDF_PARSE_ERROR_CALLBACK pfnParseError);

//////////////////////////////////////////////////////////////////////////
//
//  IsCatalogFile
// --------------------------------------------------------------------------
//  Usage:
//      Call this function to determine if the file is a Catalog File.  Both
//      parameters are optional.  HOWEVER, one of them MUST be passed!
//
//  Return:
//      TRUE if it is.
//      FALSE if it isn't or an error occured.
//
//
//  Errors:
//      ERROR_INVALID_PARAMETER:        an input parameter is incorrect
//      ERROR_NOT_ENOUGH_MEMORY:        a memory allocation failed
//      {file errors}                   a file error occured
//
extern BOOL WINAPI      IsCatalogFile(IN OPTIONAL HANDLE hFile,
                                      __in_opt WCHAR *pwszFileName);


//////////////////////////////////////////////////////////////////////////
//
//  CryptCATAdminAcquireContext
// --------------------------------------------------------------------------
//  Usage:
//      Opens a new Admin Context based on the pgSubsystem Id.
//
//      the Guid passed in will be converted to a string and used as the
//      sub-directory under %SystemRoot%\CatRoot to store all Catalog files
//      for this app/sub-system.
//
//      if a NULL is passed in to the pgSubsystem parameter, all finds will be
//      "global" and any Adds will be under the "default" Subsystem.
//
//  Return:
//      TRUE if phCatAdmin points to a valid context.
//      FALSE if an error occurs.
//
//  Errors:
//      ERROR_INVALID_PARAMETER:        an input parameter is incorrect
//      ERROR_NOT_ENOUGH_MEMORY:        a memory allocation failed
//      ERROR_DATABASE_FAILURE:         an error occured while processing
//                                      the database.
//
//  Comments:
//          The dwFlags parameter is reserved for future use.  Must
//          be set to NULL.
//
//
extern BOOL WINAPI      CryptCATAdminAcquireContext(OUT HCATADMIN *phCatAdmin,
                                                    IN const GUID *pgSubsystem,
                                                    IN DWORD dwFlags);

//////////////////////////////////////////////////////////////////////////
//
//  CryptCATAdminReleaseContext
// --------------------------------------------------------------------------
//  Usage:
//      Releases (frees) all information related to the Admin Context
//
//  Errors:
//      ERROR_INVALID_PARAMETER:        an input parameter is incorrect
//
//  Comments:
//          The dwFlags parameter is reserved for future use.  Must
//          be set to NULL.
//
extern BOOL WINAPI      CryptCATAdminReleaseContext(IN HCATADMIN hCatAdmin,
                                                    IN DWORD dwFlags);


//////////////////////////////////////////////////////////////////////////
//
//  CryptCATAdminReleaseCatalogContext
// -----------------------------------------------------------------------
//  Usage:
//      Call this function to release memory associated with the Catalog
//      Info Context.
//
//  Errors:
//      ERROR_INVALID_PARAMETER:        an input parameter is incorrect
//
//  Comments:
//      the dwFlags parameter is reserved for future use and must be assigned
//      to NULL.
//
extern BOOL WINAPI CryptCATAdminReleaseCatalogContext(IN HCATADMIN hCatAdmin,
                                                      IN HCATINFO hCatInfo,
                                                      IN DWORD dwFlags);

//////////////////////////////////////////////////////////////////////////
//
//  CryptCATAdminEnumCatalogFromHash
// --------------------------------------------------------------------------
//  Usage:
//      Call this function to retrieve the Catalog Info handle of the Catalog
//      file that currently "points" to the specified Member Hash.
//
//      if hCatInfo is NULL, the first catalog found that contains the
//      hash will be returned.
//
//      if hCatInfo is not NULL, the content must be initialized to NULL prior
//      to going into the enum loop -- this starts the first/next search.
//      This function uses this parameter to determine the last catalog returned.
//
//      if hCatInfo is not NULL, and the loop is terminated prior to this
//      function returning NULL, the application must call
//      CryptCATAdminReleaseCatalogContext to free all memory associated with
//      ppPrevContext.
//
//  Errors:
//      ERROR_INVALID_PARAMETER:        an input parameter is incorrect
//      ERROR_NOT_ENOUGH_MEMORY:        a memory allocation failed
//      ERROR_DATABASE_FAILURE:         an error occurred while processing
//                                      the database.
//
extern HCATINFO WINAPI CryptCATAdminEnumCatalogFromHash(IN HCATADMIN hCatAdmin,
                                                        IN BYTE *pbHash,
                                                        IN DWORD cbHash,
                                                        IN DWORD dwFlags,
                                                        IN OUT HCATINFO *phPrevCatInfo);

//////////////////////////////////////////////////////////////////////////
//
//  CryptCATAdminCalcHashFromFileHandle
// --------------------------------------------------------------------------
//  Usage:
//      Call this function to calculate the has based on an open file handle.
//
//  Return:
//      TRUE if the pbHash was filled with the calculated hash.
//      FALSE if an error occured
//
//      To obtain the size required for pbHash, set pbHash to NULL.  The
//      correct size will be returned in pcbHash, the return value will
//      be TRUE and a call to GetLastError() will equal ERROR_INSUFFICIENT_BUFFER.
//
//  Errors:
//      ERROR_INVALID_PARAMETER:        an input parameter is incorrect
//      ERROR_INSUFFICIENT_BUFFER:      the *pbHash was not big enough.
//      ERROR_NOT_ENOUGH_MEMORY:        a memory allocation failed
//
//  Comments:
//      the dwFlags parameter is reserved for future use and must be assigned
//      to NULL.
//
extern BOOL WINAPI CryptCATAdminCalcHashFromFileHandle(IN HANDLE hFile,
                                                       IN OUT DWORD *pcbHash,
                                                       OUT OPTIONAL BYTE *pbHash,
                                                       IN DWORD dwFlags);

//////////////////////////////////////////////////////////////////////////
//
//  CryptCATAdminAddCatalog
// --------------------------------------------------------------------------
//  Usage:
//      Call this function to add a catalog file to the CAT Maintenance
//      subsystem.
//
//      if the pwszSelectedBaseName is NULL, the Catalog Admin system will
//      generate a file base name for you.  Otherwise, this parameter is
//      used as the file name (base & extension only) of the copied Catalog
//      file.
//
//      Call CryptCATAdminReleaseCatalogContext to free the memory associated
//      with the Catalog Context returned if not NULL.
//
//  Return:
//      On success, the HCATINFO of the catalog that was successfully added
//      is returned.  On failure, NULL is returned.
//
//  Errors:
//      ERROR_INVALID_PARAMETER:        an input parameter is incorrect
//      ERROR_NOT_ENOUGH_MEMORY:        a memory allocation failed
//      ERROR_BAD_FORMAT:               the file is not a catalog file.
//      ERROR_DATABASE_FAILURE:         an error occurred while processing
//                                      the database.
//
//  Comments:
//      the dwFlags parameter is reserved for future use and must be assigned
//      to NULL.
//
extern HCATINFO WINAPI CryptCATAdminAddCatalog(IN HCATADMIN hCatAdmin,
                                               __in PWSTR pwszCatalogFile,
                                               __in_opt PWSTR pwszSelectBaseName,
                                               IN DWORD dwFlags);

//////////////////////////////////////////////////////////////////////////
//
//  CryptCATAdminRemoveCatalog
// --------------------------------------------------------------------------
//  Usage:
//      Call this function to remove a catalog file from the CAT Maintenance
//      subsystem.
//
//  Return:
//      On success, TRUE is returned.  FALSE if an error occurs.
//
//  Errors:
//      ERROR_INVALID_PARAMETER:        an input parameter is incorrect
//
//  Comments:
//      pwszCatalogFile must point to a string that contains only the name
//      of the catalog file, ex. "foo.cat", and not a fully qualified path
//      name
//
extern BOOL WINAPI CryptCATAdminRemoveCatalog(IN HCATADMIN hCatAdmin,
                                              IN LPCWSTR pwszCatalogFile,
                                              IN DWORD dwFlags);

//////////////////////////////////////////////////////////////////////////
//
//  CryptCATCatalogInfoFromContext
// --------------------------------------------------------------------------
//  Usage:
//      call this function to retrieve information relating to the
//      Catalog info handle passed from the Add Catalog function.
//
//  Return:
//      On success, TRUE is returned and the CATALOG_INFO structure
//      is filled in.
//      FALSE if an error occurs.
//
//  Errors:
//      ERROR_INVALID_PARAMETER:        an input parameter is incorrect
//
//  Comments:
//      the dwFlags parameter is reserved for future use and must be assigned
//      to NULL.
//
extern BOOL WINAPI CryptCATCatalogInfoFromContext(IN HCATINFO hCatInfo,
                                                  IN OUT CATALOG_INFO *psCatInfo,
                                                  IN DWORD dwFlags);

//////////////////////////////////////////////////////////////////////////
//
//  CryptCATAdminResolveCatalogPath
// --------------------------------------------------------------------------
//  Usage:
//      call this function to retrieve the fully qualified path to the
//      catalog specified by pwszCatalogFile
//
//  Return:
//      On success, TRUE is returned and the CATALOG_INFO structure
//      is filled in.
//      FALSE if an error occurs.
//
//  Errors:
//      ERROR_INVALID_PARAMETER:        an input parameter is incorrect
//      ERROR_NOT_ENOUGH_MEMORY:        if the fully qualified path is longer
//                                      than MAX_PATH
//
//  Comments:
//      the dwFlags parameter is reserved for future use and must be assigned
//      to NULL.
//
extern BOOL WINAPI CryptCATAdminResolveCatalogPath(IN HCATADMIN hCatAdmin,
                                                   __in WCHAR *pwszCatalogFile,
                                                   __inout CATALOG_INFO *psCatInfo,
                                                   IN DWORD dwFlags);

//////////////////////////////////////////////////////////////////////////
//
//  CryptCATAdminPauseServiceForBackup
// --------------------------------------------------------------------------
//  Usage:
//      call this function to pause the catalog sub-system in preparation
//      for backing up the catalog sub-systems files.
//
//  Return:
//      On success, TRUE is returned.  FALSE if an error occurs.
//
//  Errors:
//      ERROR_INVALID_PARAMETER:        an input parameter is incorrect
//      ERROR_TIMEOUT:                  if clients are accessing database files
//                                      and fail to relinquish them in a timely
//                                      manner.
//
//  Comments:
//      the dwFlags parameter is reserved for future use and must be assigned
//      to NULL.  Set fResume to FALSE when pausing the catalog service, and
//      set it to TRUE to resume service.
//
extern BOOL WINAPI CryptCATAdminPauseServiceForBackup(IN DWORD dwFlags,
                                                      IN BOOL  fResume);


#ifdef __cplusplus
}
#endif

#endif // MSCAT_H
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\mscoree.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0499 */
/* Compiler settings for mscoree.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __mscoree_h__
#define __mscoree_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IObjectHandle_FWD_DEFINED__
#define __IObjectHandle_FWD_DEFINED__
typedef interface IObjectHandle IObjectHandle;
#endif 	/* __IObjectHandle_FWD_DEFINED__ */


#ifndef __IAppDomainBinding_FWD_DEFINED__
#define __IAppDomainBinding_FWD_DEFINED__
typedef interface IAppDomainBinding IAppDomainBinding;
#endif 	/* __IAppDomainBinding_FWD_DEFINED__ */


#ifndef __IGCThreadControl_FWD_DEFINED__
#define __IGCThreadControl_FWD_DEFINED__
typedef interface IGCThreadControl IGCThreadControl;
#endif 	/* __IGCThreadControl_FWD_DEFINED__ */


#ifndef __IGCHostControl_FWD_DEFINED__
#define __IGCHostControl_FWD_DEFINED__
typedef interface IGCHostControl IGCHostControl;
#endif 	/* __IGCHostControl_FWD_DEFINED__ */


#ifndef __ICorThreadpool_FWD_DEFINED__
#define __ICorThreadpool_FWD_DEFINED__
typedef interface ICorThreadpool ICorThreadpool;
#endif 	/* __ICorThreadpool_FWD_DEFINED__ */


#ifndef __IDebuggerThreadControl_FWD_DEFINED__
#define __IDebuggerThreadControl_FWD_DEFINED__
typedef interface IDebuggerThreadControl IDebuggerThreadControl;
#endif 	/* __IDebuggerThreadControl_FWD_DEFINED__ */


#ifndef __IDebuggerInfo_FWD_DEFINED__
#define __IDebuggerInfo_FWD_DEFINED__
typedef interface IDebuggerInfo IDebuggerInfo;
#endif 	/* __IDebuggerInfo_FWD_DEFINED__ */


#ifndef __ICorConfiguration_FWD_DEFINED__
#define __ICorConfiguration_FWD_DEFINED__
typedef interface ICorConfiguration ICorConfiguration;
#endif 	/* __ICorConfiguration_FWD_DEFINED__ */


#ifndef __ICorRuntimeHost_FWD_DEFINED__
#define __ICorRuntimeHost_FWD_DEFINED__
typedef interface ICorRuntimeHost ICorRuntimeHost;
#endif 	/* __ICorRuntimeHost_FWD_DEFINED__ */


#ifndef __ICLRMemoryNotificationCallback_FWD_DEFINED__
#define __ICLRMemoryNotificationCallback_FWD_DEFINED__
typedef interface ICLRMemoryNotificationCallback ICLRMemoryNotificationCallback;
#endif 	/* __ICLRMemoryNotificationCallback_FWD_DEFINED__ */


#ifndef __IHostMalloc_FWD_DEFINED__
#define __IHostMalloc_FWD_DEFINED__
typedef interface IHostMalloc IHostMalloc;
#endif 	/* __IHostMalloc_FWD_DEFINED__ */


#ifndef __IHostMemoryManager_FWD_DEFINED__
#define __IHostMemoryManager_FWD_DEFINED__
typedef interface IHostMemoryManager IHostMemoryManager;
#endif 	/* __IHostMemoryManager_FWD_DEFINED__ */


#ifndef __ICLRTask_FWD_DEFINED__
#define __ICLRTask_FWD_DEFINED__
typedef interface ICLRTask ICLRTask;
#endif 	/* __ICLRTask_FWD_DEFINED__ */


#ifndef __ICLRTask2_FWD_DEFINED__
#define __ICLRTask2_FWD_DEFINED__
typedef interface ICLRTask2 ICLRTask2;
#endif 	/* __ICLRTask2_FWD_DEFINED__ */


#ifndef __IHostTask_FWD_DEFINED__
#define __IHostTask_FWD_DEFINED__
typedef interface IHostTask IHostTask;
#endif 	/* __IHostTask_FWD_DEFINED__ */


#ifndef __ICLRTaskManager_FWD_DEFINED__
#define __ICLRTaskManager_FWD_DEFINED__
typedef interface ICLRTaskManager ICLRTaskManager;
#endif 	/* __ICLRTaskManager_FWD_DEFINED__ */


#ifndef __IHostTaskManager_FWD_DEFINED__
#define __IHostTaskManager_FWD_DEFINED__
typedef interface IHostTaskManager IHostTaskManager;
#endif 	/* __IHostTaskManager_FWD_DEFINED__ */


#ifndef __IHostThreadpoolManager_FWD_DEFINED__
#define __IHostThreadpoolManager_FWD_DEFINED__
typedef interface IHostThreadpoolManager IHostThreadpoolManager;
#endif 	/* __IHostThreadpoolManager_FWD_DEFINED__ */


#ifndef __ICLRIoCompletionManager_FWD_DEFINED__
#define __ICLRIoCompletionManager_FWD_DEFINED__
typedef interface ICLRIoCompletionManager ICLRIoCompletionManager;
#endif 	/* __ICLRIoCompletionManager_FWD_DEFINED__ */


#ifndef __IHostIoCompletionManager_FWD_DEFINED__
#define __IHostIoCompletionManager_FWD_DEFINED__
typedef interface IHostIoCompletionManager IHostIoCompletionManager;
#endif 	/* __IHostIoCompletionManager_FWD_DEFINED__ */


#ifndef __ICLRDebugManager_FWD_DEFINED__
#define __ICLRDebugManager_FWD_DEFINED__
typedef interface ICLRDebugManager ICLRDebugManager;
#endif 	/* __ICLRDebugManager_FWD_DEFINED__ */


#ifndef __ICLRErrorReportingManager_FWD_DEFINED__
#define __ICLRErrorReportingManager_FWD_DEFINED__
typedef interface ICLRErrorReportingManager ICLRErrorReportingManager;
#endif 	/* __ICLRErrorReportingManager_FWD_DEFINED__ */


#ifndef __IHostCrst_FWD_DEFINED__
#define __IHostCrst_FWD_DEFINED__
typedef interface IHostCrst IHostCrst;
#endif 	/* __IHostCrst_FWD_DEFINED__ */


#ifndef __IHostAutoEvent_FWD_DEFINED__
#define __IHostAutoEvent_FWD_DEFINED__
typedef interface IHostAutoEvent IHostAutoEvent;
#endif 	/* __IHostAutoEvent_FWD_DEFINED__ */


#ifndef __IHostManualEvent_FWD_DEFINED__
#define __IHostManualEvent_FWD_DEFINED__
typedef interface IHostManualEvent IHostManualEvent;
#endif 	/* __IHostManualEvent_FWD_DEFINED__ */


#ifndef __IHostSemaphore_FWD_DEFINED__
#define __IHostSemaphore_FWD_DEFINED__
typedef interface IHostSemaphore IHostSemaphore;
#endif 	/* __IHostSemaphore_FWD_DEFINED__ */


#ifndef __ICLRSyncManager_FWD_DEFINED__
#define __ICLRSyncManager_FWD_DEFINED__
typedef interface ICLRSyncManager ICLRSyncManager;
#endif 	/* __ICLRSyncManager_FWD_DEFINED__ */


#ifndef __IHostSyncManager_FWD_DEFINED__
#define __IHostSyncManager_FWD_DEFINED__
typedef interface IHostSyncManager IHostSyncManager;
#endif 	/* __IHostSyncManager_FWD_DEFINED__ */


#ifndef __ICLRPolicyManager_FWD_DEFINED__
#define __ICLRPolicyManager_FWD_DEFINED__
typedef interface ICLRPolicyManager ICLRPolicyManager;
#endif 	/* __ICLRPolicyManager_FWD_DEFINED__ */


#ifndef __IHostPolicyManager_FWD_DEFINED__
#define __IHostPolicyManager_FWD_DEFINED__
typedef interface IHostPolicyManager IHostPolicyManager;
#endif 	/* __IHostPolicyManager_FWD_DEFINED__ */


#ifndef __IActionOnCLREvent_FWD_DEFINED__
#define __IActionOnCLREvent_FWD_DEFINED__
typedef interface IActionOnCLREvent IActionOnCLREvent;
#endif 	/* __IActionOnCLREvent_FWD_DEFINED__ */


#ifndef __ICLROnEventManager_FWD_DEFINED__
#define __ICLROnEventManager_FWD_DEFINED__
typedef interface ICLROnEventManager ICLROnEventManager;
#endif 	/* __ICLROnEventManager_FWD_DEFINED__ */


#ifndef __IHostGCManager_FWD_DEFINED__
#define __IHostGCManager_FWD_DEFINED__
typedef interface IHostGCManager IHostGCManager;
#endif 	/* __IHostGCManager_FWD_DEFINED__ */


#ifndef __ICLRGCManager_FWD_DEFINED__
#define __ICLRGCManager_FWD_DEFINED__
typedef interface ICLRGCManager ICLRGCManager;
#endif 	/* __ICLRGCManager_FWD_DEFINED__ */


#ifndef __ICLRAssemblyReferenceList_FWD_DEFINED__
#define __ICLRAssemblyReferenceList_FWD_DEFINED__
typedef interface ICLRAssemblyReferenceList ICLRAssemblyReferenceList;
#endif 	/* __ICLRAssemblyReferenceList_FWD_DEFINED__ */


#ifndef __ICLRReferenceAssemblyEnum_FWD_DEFINED__
#define __ICLRReferenceAssemblyEnum_FWD_DEFINED__
typedef interface ICLRReferenceAssemblyEnum ICLRReferenceAssemblyEnum;
#endif 	/* __ICLRReferenceAssemblyEnum_FWD_DEFINED__ */


#ifndef __ICLRProbingAssemblyEnum_FWD_DEFINED__
#define __ICLRProbingAssemblyEnum_FWD_DEFINED__
typedef interface ICLRProbingAssemblyEnum ICLRProbingAssemblyEnum;
#endif 	/* __ICLRProbingAssemblyEnum_FWD_DEFINED__ */


#ifndef __ICLRAssemblyIdentityManager_FWD_DEFINED__
#define __ICLRAssemblyIdentityManager_FWD_DEFINED__
typedef interface ICLRAssemblyIdentityManager ICLRAssemblyIdentityManager;
#endif 	/* __ICLRAssemblyIdentityManager_FWD_DEFINED__ */


#ifndef __ICLRHostBindingPolicyManager_FWD_DEFINED__
#define __ICLRHostBindingPolicyManager_FWD_DEFINED__
typedef interface ICLRHostBindingPolicyManager ICLRHostBindingPolicyManager;
#endif 	/* __ICLRHostBindingPolicyManager_FWD_DEFINED__ */


#ifndef __IHostAssemblyStore_FWD_DEFINED__
#define __IHostAssemblyStore_FWD_DEFINED__
typedef interface IHostAssemblyStore IHostAssemblyStore;
#endif 	/* __IHostAssemblyStore_FWD_DEFINED__ */


#ifndef __IHostAssemblyManager_FWD_DEFINED__
#define __IHostAssemblyManager_FWD_DEFINED__
typedef interface IHostAssemblyManager IHostAssemblyManager;
#endif 	/* __IHostAssemblyManager_FWD_DEFINED__ */


#ifndef __IHostControl_FWD_DEFINED__
#define __IHostControl_FWD_DEFINED__
typedef interface IHostControl IHostControl;
#endif 	/* __IHostControl_FWD_DEFINED__ */


#ifndef __ICLRControl_FWD_DEFINED__
#define __ICLRControl_FWD_DEFINED__
typedef interface ICLRControl ICLRControl;
#endif 	/* __ICLRControl_FWD_DEFINED__ */


#ifndef __ICLRRuntimeHost_FWD_DEFINED__
#define __ICLRRuntimeHost_FWD_DEFINED__
typedef interface ICLRRuntimeHost ICLRRuntimeHost;
#endif 	/* __ICLRRuntimeHost_FWD_DEFINED__ */


#ifndef __ICLRHostProtectionManager_FWD_DEFINED__
#define __ICLRHostProtectionManager_FWD_DEFINED__
typedef interface ICLRHostProtectionManager ICLRHostProtectionManager;
#endif 	/* __ICLRHostProtectionManager_FWD_DEFINED__ */


#ifndef __ICLRDomainManager_FWD_DEFINED__
#define __ICLRDomainManager_FWD_DEFINED__
typedef interface ICLRDomainManager ICLRDomainManager;
#endif 	/* __ICLRDomainManager_FWD_DEFINED__ */


#ifndef __ITypeName_FWD_DEFINED__
#define __ITypeName_FWD_DEFINED__
typedef interface ITypeName ITypeName;
#endif 	/* __ITypeName_FWD_DEFINED__ */


#ifndef __ITypeNameBuilder_FWD_DEFINED__
#define __ITypeNameBuilder_FWD_DEFINED__
typedef interface ITypeNameBuilder ITypeNameBuilder;
#endif 	/* __ITypeNameBuilder_FWD_DEFINED__ */


#ifndef __ITypeNameFactory_FWD_DEFINED__
#define __ITypeNameFactory_FWD_DEFINED__
typedef interface ITypeNameFactory ITypeNameFactory;
#endif 	/* __ITypeNameFactory_FWD_DEFINED__ */


#ifndef __IApartmentCallback_FWD_DEFINED__
#define __IApartmentCallback_FWD_DEFINED__
typedef interface IApartmentCallback IApartmentCallback;
#endif 	/* __IApartmentCallback_FWD_DEFINED__ */


#ifndef __IManagedObject_FWD_DEFINED__
#define __IManagedObject_FWD_DEFINED__
typedef interface IManagedObject IManagedObject;
#endif 	/* __IManagedObject_FWD_DEFINED__ */


#ifndef __ICatalogServices_FWD_DEFINED__
#define __ICatalogServices_FWD_DEFINED__
typedef interface ICatalogServices ICatalogServices;
#endif 	/* __ICatalogServices_FWD_DEFINED__ */


#ifndef __ComCallUnmarshal_FWD_DEFINED__
#define __ComCallUnmarshal_FWD_DEFINED__

#ifdef __cplusplus
typedef class ComCallUnmarshal ComCallUnmarshal;
#else
typedef struct ComCallUnmarshal ComCallUnmarshal;
#endif /* __cplusplus */

#endif 	/* __ComCallUnmarshal_FWD_DEFINED__ */


#ifndef __ComCallUnmarshalV4_FWD_DEFINED__
#define __ComCallUnmarshalV4_FWD_DEFINED__

#ifdef __cplusplus
typedef class ComCallUnmarshalV4 ComCallUnmarshalV4;
#else
typedef struct ComCallUnmarshalV4 ComCallUnmarshalV4;
#endif /* __cplusplus */

#endif 	/* __ComCallUnmarshalV4_FWD_DEFINED__ */


#ifndef __CorRuntimeHost_FWD_DEFINED__
#define __CorRuntimeHost_FWD_DEFINED__

#ifdef __cplusplus
typedef class CorRuntimeHost CorRuntimeHost;
#else
typedef struct CorRuntimeHost CorRuntimeHost;
#endif /* __cplusplus */

#endif 	/* __CorRuntimeHost_FWD_DEFINED__ */


#ifndef __CLRRuntimeHost_FWD_DEFINED__
#define __CLRRuntimeHost_FWD_DEFINED__

#ifdef __cplusplus
typedef class CLRRuntimeHost CLRRuntimeHost;
#else
typedef struct CLRRuntimeHost CLRRuntimeHost;
#endif /* __cplusplus */

#endif 	/* __CLRRuntimeHost_FWD_DEFINED__ */


#ifndef __TypeNameFactory_FWD_DEFINED__
#define __TypeNameFactory_FWD_DEFINED__

#ifdef __cplusplus
typedef class TypeNameFactory TypeNameFactory;
#else
typedef struct TypeNameFactory TypeNameFactory;
#endif /* __cplusplus */

#endif 	/* __TypeNameFactory_FWD_DEFINED__ */


#ifndef __IHostSecurityContext_FWD_DEFINED__
#define __IHostSecurityContext_FWD_DEFINED__
typedef interface IHostSecurityContext IHostSecurityContext;
#endif 	/* __IHostSecurityContext_FWD_DEFINED__ */


#ifndef __IHostSecurityManager_FWD_DEFINED__
#define __IHostSecurityManager_FWD_DEFINED__
typedef interface IHostSecurityManager IHostSecurityManager;
#endif 	/* __IHostSecurityManager_FWD_DEFINED__ */


#ifndef __ICLRAppDomainResourceMonitor_FWD_DEFINED__
#define __ICLRAppDomainResourceMonitor_FWD_DEFINED__
typedef interface ICLRAppDomainResourceMonitor ICLRAppDomainResourceMonitor;
#endif 	/* __ICLRAppDomainResourceMonitor_FWD_DEFINED__ */


/* header files for imported files */
#include "unknwn.h"
#include "gchost.h"
#include "ivalidator.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_mscoree_0000_0000 */
/* [local] */ 

#ifndef USE_DEPRECATED_CLR_API_WITHOUT_WARNING
#define DEPRECATED_CLR_API_MESG "This API has been deprecated. Refer to http://go.microsoft.com/fwlink/?LinkId=143720 for more details."
#define DECLARE_DEPRECATED __declspec(deprecated(DEPRECATED_CLR_API_MESG))
#define DEPRECATED_CLR_STDAPI EXTERN_C DECLARE_DEPRECATED HRESULT STDAPICALLTYPE
#else // USE_DEPRECATED_CLR_API_WITHOUT_WARNING
#define DECLARE_DEPRECATED 
#define DEPRECATED_CLR_STDAPI STDAPI
#endif // !USE_DEPRECATED_CLR_API_WITHOUT_WARNING

#define	CLR_MAJOR_VERSION	( 4 )

#define	CLR_MINOR_VERSION	( 0 )

#define	CLR_BUILD_VERSION	( 30319 )

#define	CLR_ASSEMBLY_MAJOR_VERSION	( 4 )

#define	CLR_ASSEMBLY_MINOR_VERSION	( 0 )

#define	CLR_ASSEMBLY_BUILD_VERSION	( 0 )

EXTERN_GUID(LIBID_mscoree, 0x5477469e,0x83b1,0x11d2,0x8b,0x49,0x00,0xa0,0xc9,0xb7,0xc9,0xc4);
EXTERN_GUID(CLSID_CorRuntimeHost, 0xcb2f6723, 0xab3a, 0x11d2, 0x9c, 0x40, 0x00, 0xc0, 0x4f, 0xa3, 0x0a, 0x3e);
EXTERN_GUID(CLSID_TypeNameFactory, 0xB81FF171, 0x20F3, 0x11d2, 0x8d, 0xcc, 0x00, 0xa0, 0xc9, 0xb0, 0x05, 0x25);
EXTERN_GUID(CLSID_CLRRuntimeHost, 0x90F1A06E, 0x7712, 0x4762, 0x86, 0xB5, 0x7A, 0x5E, 0xBA, 0x6B, 0xDB, 0x02);
EXTERN_GUID(CLSID_ComCallUnmarshal, 0x3F281000,0xE95A,0x11d2,0x88,0x6B,0x00,0xC0,0x4F,0x86,0x9F,0x04);
EXTERN_GUID(CLSID_ComCallUnmarshalV4, 0x45fb4600,0xe6e8,0x4928,0xb2,0x5e,0x50,0x47,0x6f,0xf7,0x94,0x25);
EXTERN_GUID(IID_IObjectHandle, 0xc460e2b4, 0xe199, 0x412a, 0x84, 0x56, 0x84, 0xdc, 0x3e, 0x48, 0x38, 0xc3);
EXTERN_GUID(IID_IManagedObject, 0xc3fcc19e, 0xa970, 0x11d2, 0x8b, 0x5a, 0x00, 0xa0, 0xc9, 0xb7, 0xc9, 0xc4);
EXTERN_GUID(IID_IApartmentCallback, 0x178e5337, 0x1528, 0x4591, 0xb1, 0xc9, 0x1c, 0x6e, 0x48, 0x46, 0x86, 0xd8);
EXTERN_GUID(IID_ICatalogServices, 0x04c6be1e, 0x1db1, 0x4058, 0xab, 0x7a, 0x70, 0x0c, 0xcc, 0xfb, 0xf2, 0x54);
EXTERN_GUID(IID_ICorRuntimeHost, 0xcb2f6722, 0xab3a, 0x11d2, 0x9c, 0x40, 0x00, 0xc0, 0x4f, 0xa3, 0x0a, 0x3e);
EXTERN_GUID(IID_ICorThreadpool, 0x84680D3A, 0xB2C1, 0x46e8, 0xAC, 0xC2, 0xDB, 0xC0, 0xA3, 0x59, 0x15, 0x9A);
EXTERN_GUID(IID_ICLRDebugManager, 0xdcaec6, 0x2ac0, 0x43a9, 0xac, 0xf9, 0x1e, 0x36, 0xc1, 0x39, 0xb1, 0xd);
EXTERN_GUID(IID_ICLRErrorReportingManager, 0x980d2f1a, 0xbf79, 0x4c08, 0x81, 0x2a, 0xbb, 0x97, 0x78, 0x92, 0x8f, 0x78);
EXTERN_GUID(IID_IHostMemoryNeededCallback, 0x47EB8E57, 0x0846, 0x4546, 0xAF, 0x76, 0x6F, 0x42, 0xFC, 0xFC, 0x26, 0x49);
EXTERN_GUID(IID_IHostMalloc, 0x1831991C, 0xCC53, 0x4A31, 0xB2, 0x18, 0x04, 0xE9, 0x10, 0x44, 0x64, 0x79);
EXTERN_GUID(IID_IHostMemoryManager, 0x7BC698D1, 0xF9E3, 0x4460, 0x9C, 0xDE, 0xD0, 0x42, 0x48, 0xE9, 0xFA, 0x25);
EXTERN_GUID(IID_ICLRTask, 0x28E66A4A, 0x9906, 0x4225, 0xB2, 0x31, 0x91, 0x87, 0xc3, 0xeb, 0x86, 0x11);
EXTERN_GUID(IID_ICLRTask2, 0x28E66A4A, 0x9906, 0x4225, 0xB2, 0x31, 0x91, 0x87, 0xc3, 0xeb, 0x86, 0x12);
EXTERN_GUID(IID_IHostTask, 0xC2275828, 0xC4B1, 0x4B55, 0x82, 0xC9, 0x92, 0x13, 0x5F, 0x74, 0xDF, 0x1A);
EXTERN_GUID(IID_ICLRTaskManager, 0x4862efbe, 0x3ae5, 0x44f8, 0x8F, 0xEB, 0x34, 0x61, 0x90, 0xeE, 0x8A, 0x34);
EXTERN_GUID(IID_IHostTaskManager, 0x997FF24C, 0x43B7, 0x4352, 0x86, 0x67, 0x0D, 0xC0, 0x4F, 0xAF, 0xD3, 0x54);
EXTERN_GUID(IID_IHostThreadpoolManager, 0x983D50E2, 0xCB15, 0x466B, 0x80, 0xFC, 0x84, 0x5D, 0xC6, 0xE8, 0xC5, 0xFD);
EXTERN_GUID(IID_ICLRIoCompletionManager, 0x2D74CE86, 0xB8D6, 0x4C84, 0xB3, 0xA7, 0x97, 0x68, 0x93, 0x3B, 0x3C, 0x12);
EXTERN_GUID(IID_ICLRGCManager, 0x54D9007E, 0xA8E2, 0x4885, 0xB7, 0xBF, 0xF9, 0x98, 0xDE, 0xEE, 0x4F, 0x2A);
EXTERN_GUID(IID_IHostIoCompletionManager, 0x8BDE9D80, 0xEC06, 0x41D6, 0x83, 0xE6, 0x22, 0x58, 0x0E, 0xFF, 0xCC, 0x20);
EXTERN_GUID(IID_IHostSyncManager, 0x234330c7, 0x5f10, 0x4f20, 0x96, 0x15, 0x51, 0x22, 0xda, 0xb7, 0xa0, 0xac);
EXTERN_GUID(IID_IHostCrst, 0x6DF710A6, 0x26A4, 0x4a65, 0x8c, 0xd5, 0x72, 0x37, 0xb8, 0xbd, 0xa8, 0xdc);
EXTERN_GUID(IID_IHostAutoEvent, 0x50B0CFCE, 0x4063, 0x4278, 0x96, 0x73, 0xe5, 0xcb, 0x4e, 0xd0, 0xbd, 0xb8);
EXTERN_GUID(IID_IHostManualEvent, 0x1BF4EC38, 0xAFFE, 0x4fb9, 0x85, 0xa6, 0x52, 0x52, 0x68, 0xf1, 0x5b, 0x54);
EXTERN_GUID(IID_IHostSemaphore, 0x855efd47, 0xcc09, 0x463a, 0xa9, 0x7d, 0x16, 0xac, 0xab, 0x88, 0x26, 0x61);
EXTERN_GUID(IID_ICLRSyncManager, 0x55FF199D, 0xAD21, 0x48f9, 0xa1, 0x6c, 0xf2, 0x4e, 0xbb, 0xb8, 0x72, 0x7d);
EXTERN_GUID(IID_ICLRAppDomainResourceMonitor, 0XC62DE18C, 0X2E23, 0X4AEA, 0X84, 0X23, 0XB4, 0X0C, 0X1F, 0XC5, 0X9E, 0XAE);
EXTERN_GUID(IID_ICLRPolicyManager, 0x7D290010, 0xD781, 0x45da, 0xA6, 0xF8, 0xAA, 0x5D, 0x71, 0x1A, 0x73, 0x0E);
EXTERN_GUID(IID_IHostPolicyManager, 0x7AE49844, 0xB1E3, 0x4683, 0xBA, 0x7C, 0x1E, 0x82, 0x12, 0xEA, 0x3B, 0x79);
EXTERN_GUID(IID_IHostGCManager, 0x5D4EC34E, 0xF248, 0x457B, 0xB6, 0x03, 0x25, 0x5F, 0xAA, 0xBA, 0x0D, 0x21);
EXTERN_GUID(IID_IActionOnCLREvent, 0x607BE24B, 0xD91B, 0x4E28, 0xA2, 0x42, 0x61, 0x87, 0x1C, 0xE5, 0x6E, 0x35);
EXTERN_GUID(IID_ICLROnEventManager, 0x1D0E0132, 0xE64F, 0x493D, 0x92, 0x60, 0x02, 0x5C, 0x0E, 0x32, 0xC1, 0x75);
EXTERN_GUID(IID_ICLRRuntimeHost, 0x90F1A06C, 0x7712, 0x4762, 0x86, 0xB5, 0x7A, 0x5E, 0xBA, 0x6B, 0xDB, 0x02);
EXTERN_GUID(IID_ICLRHostProtectionManager, 0x89f25f5c, 0xceef, 0x43e1, 0x9c, 0xfa, 0xa6, 0x8c, 0xe8, 0x63, 0xaa, 0xac);
EXTERN_GUID(IID_IHostAssemblyStore, 0x7b102a88, 0x3f7f, 0x496d, 0x8f, 0xa2, 0xc3, 0x53, 0x74, 0xe0, 0x1a, 0xf3);
EXTERN_GUID(IID_IHostAssemblyManager, 0x613dabd7, 0x62b2, 0x493e, 0x9e, 0x65, 0xc1, 0xe3, 0x2a, 0x1e, 0x0c, 0x5e);
EXTERN_GUID(IID_IHostSecurityManager, 0x75ad2468, 0xa349, 0x4d02, 0xa7, 0x64, 0x76, 0xa6, 0x8a, 0xee, 0x0c, 0x4f);
EXTERN_GUID(IID_IHostSecurityContext, 0x7e573ce4, 0x343, 0x4423, 0x98, 0xd7, 0x63, 0x18, 0x34, 0x8a, 0x1d, 0x3c);
EXTERN_GUID(IID_ICLRAssemblyIdentityManager, 0x15f0a9da, 0x3ff6, 0x4393, 0x9d, 0xa9, 0xfd, 0xfd, 0x28, 0x4e, 0x69, 0x72);
EXTERN_GUID(IID_ICLRDomainManager, 0x270d00a2, 0x8e15, 0x4d0b, 0xad, 0xeb, 0x37, 0xbc, 0x3e, 0x47, 0xdf, 0x77);
EXTERN_GUID(IID_ITypeName, 0xB81FF171, 0x20F3, 0x11d2, 0x8d, 0xcc, 0x00, 0xa0, 0xc9, 0xb0, 0x05, 0x22);
EXTERN_GUID(IID_ICLRAssemblyReferenceList, 0x1b2c9750, 0x2e66, 0x4bda, 0x8b, 0x44, 0x0a, 0x64, 0x2c, 0x5c, 0xd7, 0x33);
EXTERN_GUID(IID_ICLRReferenceAssemblyEnum, 0xd509cb5d, 0xcf32, 0x4876, 0xae, 0x61, 0x67, 0x77, 0x0c, 0xf9, 0x19, 0x73);
EXTERN_GUID(IID_ICLRProbingAssemblyEnum, 0xd0c5fb1f, 0x416b, 0x4f97, 0x81, 0xf4, 0x7a, 0xc7, 0xdc, 0x24, 0xdd, 0x5d);
EXTERN_GUID(IID_ICLRHostBindingPolicyManager, 0x4b3545e7, 0x1856, 0x48c9, 0xa8, 0xba, 0x24, 0xb2, 0x1a, 0x75, 0x3c, 0x09);
EXTERN_GUID(IID_ITypeNameBuilder, 0xB81FF171, 0x20F3, 0x11d2, 0x8d, 0xcc, 0x00, 0xa0, 0xc9, 0xb0, 0x05, 0x23);
EXTERN_GUID(IID_ITypeNameFactory, 0xB81FF171, 0x20F3, 0x11d2, 0x8d, 0xcc, 0x00, 0xa0, 0xc9, 0xb0, 0x05, 0x21);
DEPRECATED_CLR_STDAPI GetCORSystemDirectory(__out_ecount_part(cchBuffer, *dwLength) LPWSTR pbuffer, DWORD  cchBuffer, DWORD* dwLength);
DEPRECATED_CLR_STDAPI GetCORVersion(__out_ecount_part(cchBuffer, *dwLength) LPWSTR pbBuffer, DWORD cchBuffer, DWORD* dwLength);
DEPRECATED_CLR_STDAPI GetFileVersion(LPCWSTR szFilename, __out_ecount_part_opt(cchBuffer, *dwLength) LPWSTR szBuffer, DWORD cchBuffer, DWORD* dwLength);
DEPRECATED_CLR_STDAPI GetCORRequiredVersion(__out_ecount_part(cchBuffer, *dwLength) LPWSTR pbuffer, DWORD cchBuffer, DWORD* dwLength);
DEPRECATED_CLR_STDAPI GetRequestedRuntimeInfo(LPCWSTR pExe, LPCWSTR pwszVersion, LPCWSTR pConfigurationFile, DWORD startupFlags, DWORD runtimeInfoFlags, __out_ecount_opt(dwDirectory) LPWSTR pDirectory, DWORD dwDirectory, __out_opt DWORD *dwDirectoryLength, __out_ecount_opt(cchBuffer) LPWSTR pVersion, DWORD cchBuffer, __out_opt DWORD* dwlength);
DEPRECATED_CLR_STDAPI GetRequestedRuntimeVersion(__in LPWSTR pExe, __out_ecount_part(cchBuffer, *pdwLength) LPWSTR pVersion, DWORD cchBuffer, __out DWORD* dwLength);
DEPRECATED_CLR_STDAPI CorBindToRuntimeHost(LPCWSTR pwszVersion, LPCWSTR pwszBuildFlavor, LPCWSTR pwszHostConfigFile, VOID* pReserved, DWORD startupFlags, REFCLSID rclsid, REFIID riid, LPVOID FAR *ppv);
DEPRECATED_CLR_STDAPI CorBindToRuntimeEx(LPCWSTR pwszVersion, LPCWSTR pwszBuildFlavor, DWORD startupFlags, REFCLSID rclsid, REFIID riid, LPVOID FAR *ppv);
DEPRECATED_CLR_STDAPI CorBindToRuntimeByCfg(IStream* pCfgStream, DWORD reserved, DWORD startupFlags, REFCLSID rclsid,REFIID riid, LPVOID FAR* ppv);
DEPRECATED_CLR_STDAPI CorBindToRuntime(LPCWSTR pwszVersion, LPCWSTR pwszBuildFlavor, REFCLSID rclsid, REFIID riid, LPVOID FAR *ppv);
DEPRECATED_CLR_STDAPI CorBindToCurrentRuntime(LPCWSTR pwszFileName, REFCLSID rclsid, REFIID riid, LPVOID FAR *ppv);
DEPRECATED_CLR_STDAPI ClrCreateManagedInstance(LPCWSTR pTypeName, REFIID riid, void **ppObject);
DECLARE_DEPRECATED void STDMETHODCALLTYPE CorMarkThreadInThreadPool();
DEPRECATED_CLR_STDAPI RunDll32ShimW(HWND hwnd, HINSTANCE hinst, LPCWSTR lpszCmdLine, int nCmdShow);
DEPRECATED_CLR_STDAPI LoadLibraryShim(LPCWSTR szDllName, LPCWSTR szVersion, LPVOID pvReserved, HMODULE *phModDll);
DEPRECATED_CLR_STDAPI CallFunctionShim(LPCWSTR szDllName, LPCSTR szFunctionName, LPVOID lpvArgument1, LPVOID lpvArgument2, LPCWSTR szVersion, LPVOID pvReserved);
DEPRECATED_CLR_STDAPI GetRealProcAddress(LPCSTR pwszProcName, VOID** ppv);
void STDMETHODCALLTYPE CorExitProcess(int exitCode);
DEPRECATED_CLR_STDAPI LoadStringRC(UINT iResouceID, __out_ecount_z(iMax) LPWSTR szBuffer, int iMax, int bQuiet);
DEPRECATED_CLR_STDAPI LoadStringRCEx(LCID lcid, UINT iResouceID, __out_ecount_z(iMax) LPWSTR szBuffer, int iMax, int bQuiet, int *pcwchUsed);
typedef HRESULT (__stdcall *FLockClrVersionCallback) ();
DEPRECATED_CLR_STDAPI LockClrVersion(FLockClrVersionCallback hostCallback,FLockClrVersionCallback *pBeginHostSetup,FLockClrVersionCallback *pEndHostSetup);
DEPRECATED_CLR_STDAPI CreateDebuggingInterfaceFromVersion(int iDebuggerVersion, LPCWSTR szDebuggeeVersion, IUnknown ** ppCordb);
DEPRECATED_CLR_STDAPI GetVersionFromProcess(HANDLE hProcess, __out_ecount_part(cchBuffer, *pdwLength) LPWSTR pVersion, DWORD cchBuffer, __out DWORD* dwLength);
typedef /* [public] */ 
enum __MIDL___MIDL_itf_mscoree_0000_0000_0001
    {	HOST_TYPE_DEFAULT	= 0,
	HOST_TYPE_APPLAUNCH	= 0x1,
	HOST_TYPE_CORFLAG	= 0x2
    } 	HOST_TYPE;

STDAPI CorLaunchApplication(HOST_TYPE dwClickOnceHost, LPCWSTR pwzAppFullName, DWORD dwManifestPaths, LPCWSTR* ppwzManifestPaths, DWORD dwActivationData, LPCWSTR* ppwzActivationData, LPPROCESS_INFORMATION lpProcessInformation);
typedef HRESULT ( __stdcall *FExecuteInAppDomainCallback )( 
    void *cookie);

typedef /* [public] */ 
enum __MIDL___MIDL_itf_mscoree_0000_0000_0002
    {	STARTUP_CONCURRENT_GC	= 0x1,
	STARTUP_LOADER_OPTIMIZATION_MASK	= ( 0x3 << 1 ) ,
	STARTUP_LOADER_OPTIMIZATION_SINGLE_DOMAIN	= ( 0x1 << 1 ) ,
	STARTUP_LOADER_OPTIMIZATION_MULTI_DOMAIN	= ( 0x2 << 1 ) ,
	STARTUP_LOADER_OPTIMIZATION_MULTI_DOMAIN_HOST	= ( 0x3 << 1 ) ,
	STARTUP_LOADER_SAFEMODE	= 0x10,
	STARTUP_LOADER_SETPREFERENCE	= 0x100,
	STARTUP_SERVER_GC	= 0x1000,
	STARTUP_HOARD_GC_VM	= 0x2000,
	STARTUP_SINGLE_VERSION_HOSTING_INTERFACE	= 0x4000,
	STARTUP_LEGACY_IMPERSONATION	= 0x10000,
	STARTUP_DISABLE_COMMITTHREADSTACK	= 0x20000,
	STARTUP_ALWAYSFLOW_IMPERSONATION	= 0x40000,
	STARTUP_TRIM_GC_COMMIT	= 0x80000,
	STARTUP_ETW	= 0x100000,
	STARTUP_ARM	= 0x400000
    } 	STARTUP_FLAGS;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_mscoree_0000_0000_0003
    {	CLSID_RESOLUTION_DEFAULT	= 0,
	CLSID_RESOLUTION_REGISTERED	= 0x1
    } 	CLSID_RESOLUTION_FLAGS;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_mscoree_0000_0000_0004
    {	RUNTIME_INFO_UPGRADE_VERSION	= 0x1,
	RUNTIME_INFO_REQUEST_IA64	= 0x2,
	RUNTIME_INFO_REQUEST_AMD64	= 0x4,
	RUNTIME_INFO_REQUEST_X86	= 0x8,
	RUNTIME_INFO_DONT_RETURN_DIRECTORY	= 0x10,
	RUNTIME_INFO_DONT_RETURN_VERSION	= 0x20,
	RUNTIME_INFO_DONT_SHOW_ERROR_DIALOG	= 0x40
    } 	RUNTIME_INFO_FLAGS;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_mscoree_0000_0000_0005
    {	APPDOMAIN_SECURITY_DEFAULT	= 0,
	APPDOMAIN_SECURITY_SANDBOXED	= 0x1,
	APPDOMAIN_SECURITY_FORBID_CROSSAD_REVERSE_PINVOKE	= 0x2,
	APPDOMAIN_FORCE_TRIVIAL_WAIT_OPERATIONS	= 0x8
    } 	APPDOMAIN_SECURITY_FLAGS;

STDAPI GetRequestedRuntimeVersionForCLSID(REFCLSID rclsid, __out_ecount_opt(cchBuffer) LPWSTR pVersion, DWORD cchBuffer, __out_opt DWORD* dwLength, CLSID_RESOLUTION_FLAGS dwResolutionFlags);


extern RPC_IF_HANDLE __MIDL_itf_mscoree_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_mscoree_0000_0000_v0_0_s_ifspec;

#ifndef __IObjectHandle_INTERFACE_DEFINED__
#define __IObjectHandle_INTERFACE_DEFINED__

/* interface IObjectHandle */
/* [unique][helpstring][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IObjectHandle;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C460E2B4-E199-412a-8456-84DC3E4838C3")
    IObjectHandle : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Unwrap( 
            /* [retval][out] */ __RPC__out VARIANT *ppv) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IObjectHandleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IObjectHandle * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IObjectHandle * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IObjectHandle * This);
        
        HRESULT ( STDMETHODCALLTYPE *Unwrap )( 
            IObjectHandle * This,
            /* [retval][out] */ __RPC__out VARIANT *ppv);
        
        END_INTERFACE
    } IObjectHandleVtbl;

    interface IObjectHandle
    {
        CONST_VTBL struct IObjectHandleVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IObjectHandle_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IObjectHandle_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IObjectHandle_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IObjectHandle_Unwrap(This,ppv)	\
    ( (This)->lpVtbl -> Unwrap(This,ppv) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IObjectHandle_INTERFACE_DEFINED__ */


#ifndef __IAppDomainBinding_INTERFACE_DEFINED__
#define __IAppDomainBinding_INTERFACE_DEFINED__

/* interface IAppDomainBinding */
/* [object][local][unique][helpstring][version][uuid] */ 


EXTERN_C const IID IID_IAppDomainBinding;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5C2B07A7-1E98-11d3-872F-00C04F79ED0D")
    IAppDomainBinding : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnAppDomain( 
            /* [in] */ IUnknown *pAppdomain) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IAppDomainBindingVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IAppDomainBinding * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IAppDomainBinding * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IAppDomainBinding * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnAppDomain )( 
            IAppDomainBinding * This,
            /* [in] */ IUnknown *pAppdomain);
        
        END_INTERFACE
    } IAppDomainBindingVtbl;

    interface IAppDomainBinding
    {
        CONST_VTBL struct IAppDomainBindingVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IAppDomainBinding_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IAppDomainBinding_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IAppDomainBinding_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IAppDomainBinding_OnAppDomain(This,pAppdomain)	\
    ( (This)->lpVtbl -> OnAppDomain(This,pAppdomain) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IAppDomainBinding_INTERFACE_DEFINED__ */


#ifndef __IGCThreadControl_INTERFACE_DEFINED__
#define __IGCThreadControl_INTERFACE_DEFINED__

/* interface IGCThreadControl */
/* [object][local][unique][helpstring][version][uuid] */ 


EXTERN_C const IID IID_IGCThreadControl;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("F31D1788-C397-4725-87A5-6AF3472C2791")
    IGCThreadControl : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ThreadIsBlockingForSuspension( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SuspensionStarting( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SuspensionEnding( 
            DWORD Generation) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IGCThreadControlVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGCThreadControl * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGCThreadControl * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGCThreadControl * This);
        
        HRESULT ( STDMETHODCALLTYPE *ThreadIsBlockingForSuspension )( 
            IGCThreadControl * This);
        
        HRESULT ( STDMETHODCALLTYPE *SuspensionStarting )( 
            IGCThreadControl * This);
        
        HRESULT ( STDMETHODCALLTYPE *SuspensionEnding )( 
            IGCThreadControl * This,
            DWORD Generation);
        
        END_INTERFACE
    } IGCThreadControlVtbl;

    interface IGCThreadControl
    {
        CONST_VTBL struct IGCThreadControlVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGCThreadControl_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGCThreadControl_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGCThreadControl_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGCThreadControl_ThreadIsBlockingForSuspension(This)	\
    ( (This)->lpVtbl -> ThreadIsBlockingForSuspension(This) ) 

#define IGCThreadControl_SuspensionStarting(This)	\
    ( (This)->lpVtbl -> SuspensionStarting(This) ) 

#define IGCThreadControl_SuspensionEnding(This,Generation)	\
    ( (This)->lpVtbl -> SuspensionEnding(This,Generation) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGCThreadControl_INTERFACE_DEFINED__ */


#ifndef __IGCHostControl_INTERFACE_DEFINED__
#define __IGCHostControl_INTERFACE_DEFINED__

/* interface IGCHostControl */
/* [object][local][unique][helpstring][version][uuid] */ 


EXTERN_C const IID IID_IGCHostControl;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5513D564-8374-4cb9-AED9-0083F4160A1D")
    IGCHostControl : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE RequestVirtualMemLimit( 
            /* [in] */ SIZE_T sztMaxVirtualMemMB,
            /* [out][in] */ SIZE_T *psztNewMaxVirtualMemMB) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IGCHostControlVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IGCHostControl * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IGCHostControl * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IGCHostControl * This);
        
        HRESULT ( STDMETHODCALLTYPE *RequestVirtualMemLimit )( 
            IGCHostControl * This,
            /* [in] */ SIZE_T sztMaxVirtualMemMB,
            /* [out][in] */ SIZE_T *psztNewMaxVirtualMemMB);
        
        END_INTERFACE
    } IGCHostControlVtbl;

    interface IGCHostControl
    {
        CONST_VTBL struct IGCHostControlVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IGCHostControl_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IGCHostControl_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IGCHostControl_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IGCHostControl_RequestVirtualMemLimit(This,sztMaxVirtualMemMB,psztNewMaxVirtualMemMB)	\
    ( (This)->lpVtbl -> RequestVirtualMemLimit(This,sztMaxVirtualMemMB,psztNewMaxVirtualMemMB) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IGCHostControl_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_mscoree_0000_0004 */
/* [local] */ 

#if (_MSC_VER < 1300 || _WIN32_WINNT < 0x0500)
typedef VOID ( __stdcall *WAITORTIMERCALLBACK )( 
    PVOID __MIDL____MIDL_itf_mscoree_0000_00040000,
    BOOL __MIDL____MIDL_itf_mscoree_0000_00040001);

#endif // (_MSC_VER < 1300 || _WIN32_WINNT < 0x0500)
#ifdef __midl
typedef DWORD ( __stdcall *LPTHREAD_START_ROUTINE )( 
    LPVOID lpThreadParameter);

typedef VOID ( *LPOVERLAPPED_COMPLETION_ROUTINE )( 
    DWORD dwErrorCode,
    DWORD dwNumberOfBytesTransfered,
    LPVOID lpOverlapped);

#endif // __midl
typedef VOID ( __stdcall *PTLS_CALLBACK_FUNCTION )( 
    PVOID __MIDL____MIDL_itf_mscoree_0000_00040005);



extern RPC_IF_HANDLE __MIDL_itf_mscoree_0000_0004_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_mscoree_0000_0004_v0_0_s_ifspec;

#ifndef __ICorThreadpool_INTERFACE_DEFINED__
#define __ICorThreadpool_INTERFACE_DEFINED__

/* interface ICorThreadpool */
/* [object][local][unique][helpstring][version][uuid] */ 


EXTERN_C const IID IID_ICorThreadpool;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("84680D3A-B2C1-46e8-ACC2-DBC0A359159A")
    ICorThreadpool : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE CorRegisterWaitForSingleObject( 
            /* [in] */ HANDLE *phNewWaitObject,
            /* [in] */ HANDLE hWaitObject,
            /* [in] */ WAITORTIMERCALLBACK Callback,
            /* [in] */ PVOID Context,
            /* [in] */ ULONG timeout,
            /* [in] */ BOOL executeOnlyOnce,
            /* [out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CorUnregisterWait( 
            /* [in] */ HANDLE hWaitObject,
            /* [in] */ HANDLE CompletionEvent,
            /* [out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CorQueueUserWorkItem( 
            /* [in] */ LPTHREAD_START_ROUTINE Function,
            /* [in] */ PVOID Context,
            /* [in] */ BOOL executeOnlyOnce,
            /* [out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CorCreateTimer( 
            /* [in] */ HANDLE *phNewTimer,
            /* [in] */ WAITORTIMERCALLBACK Callback,
            /* [in] */ PVOID Parameter,
            /* [in] */ DWORD DueTime,
            /* [in] */ DWORD Period,
            /* [out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CorChangeTimer( 
            /* [in] */ HANDLE Timer,
            /* [in] */ ULONG DueTime,
            /* [in] */ ULONG Period,
            /* [out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CorDeleteTimer( 
            /* [in] */ HANDLE Timer,
            /* [in] */ HANDLE CompletionEvent,
            /* [out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CorBindIoCompletionCallback( 
            /* [in] */ HANDLE fileHandle,
            /* [in] */ LPOVERLAPPED_COMPLETION_ROUTINE callback) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CorCallOrQueueUserWorkItem( 
            /* [in] */ LPTHREAD_START_ROUTINE Function,
            /* [in] */ PVOID Context,
            /* [out] */ BOOL *result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CorSetMaxThreads( 
            /* [in] */ DWORD MaxWorkerThreads,
            /* [in] */ DWORD MaxIOCompletionThreads) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CorGetMaxThreads( 
            /* [out] */ DWORD *MaxWorkerThreads,
            /* [out] */ DWORD *MaxIOCompletionThreads) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CorGetAvailableThreads( 
            /* [out] */ DWORD *AvailableWorkerThreads,
            /* [out] */ DWORD *AvailableIOCompletionThreads) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ICorThreadpoolVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICorThreadpool * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICorThreadpool * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICorThreadpool * This);
        
        HRESULT ( STDMETHODCALLTYPE *CorRegisterWaitForSingleObject )( 
            ICorThreadpool * This,
            /* [in] */ HANDLE *phNewWaitObject,
            /* [in] */ HANDLE hWaitObject,
            /* [in] */ WAITORTIMERCALLBACK Callback,
            /* [in] */ PVOID Context,
            /* [in] */ ULONG timeout,
            /* [in] */ BOOL executeOnlyOnce,
            /* [out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *CorUnregisterWait )( 
            ICorThreadpool * This,
            /* [in] */ HANDLE hWaitObject,
            /* [in] */ HANDLE CompletionEvent,
            /* [out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *CorQueueUserWorkItem )( 
            ICorThreadpool * This,
            /* [in] */ LPTHREAD_START_ROUTINE Function,
            /* [in] */ PVOID Context,
            /* [in] */ BOOL executeOnlyOnce,
            /* [out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *CorCreateTimer )( 
            ICorThreadpool * This,
            /* [in] */ HANDLE *phNewTimer,
            /* [in] */ WAITORTIMERCALLBACK Callback,
            /* [in] */ PVOID Parameter,
            /* [in] */ DWORD DueTime,
            /* [in] */ DWORD Period,
            /* [out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *CorChangeTimer )( 
            ICorThreadpool * This,
            /* [in] */ HANDLE Timer,
            /* [in] */ ULONG DueTime,
            /* [in] */ ULONG Period,
            /* [out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *CorDeleteTimer )( 
            ICorThreadpool * This,
            /* [in] */ HANDLE Timer,
            /* [in] */ HANDLE CompletionEvent,
            /* [out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *CorBindIoCompletionCallback )( 
            ICorThreadpool * This,
            /* [in] */ HANDLE fileHandle,
            /* [in] */ LPOVERLAPPED_COMPLETION_ROUTINE callback);
        
        HRESULT ( STDMETHODCALLTYPE *CorCallOrQueueUserWorkItem )( 
            ICorThreadpool * This,
            /* [in] */ LPTHREAD_START_ROUTINE Function,
            /* [in] */ PVOID Context,
            /* [out] */ BOOL *result);
        
        HRESULT ( STDMETHODCALLTYPE *CorSetMaxThreads )( 
            ICorThreadpool * This,
            /* [in] */ DWORD MaxWorkerThreads,
            /* [in] */ DWORD MaxIOCompletionThreads);
        
        HRESULT ( STDMETHODCALLTYPE *CorGetMaxThreads )( 
            ICorThreadpool * This,
            /* [out] */ DWORD *MaxWorkerThreads,
            /* [out] */ DWORD *MaxIOCompletionThreads);
        
        HRESULT ( STDMETHODCALLTYPE *CorGetAvailableThreads )( 
            ICorThreadpool * This,
            /* [out] */ DWORD *AvailableWorkerThreads,
            /* [out] */ DWORD *AvailableIOCompletionThreads);
        
        END_INTERFACE
    } ICorThreadpoolVtbl;

    interface ICorThreadpool
    {
        CONST_VTBL struct ICorThreadpoolVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICorThreadpool_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICorThreadpool_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICorThreadpool_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICorThreadpool_CorRegisterWaitForSingleObject(This,phNewWaitObject,hWaitObject,Callback,Context,timeout,executeOnlyOnce,result)	\
    ( (This)->lpVtbl -> CorRegisterWaitForSingleObject(This,phNewWaitObject,hWaitObject,Callback,Context,timeout,executeOnlyOnce,result) ) 

#define ICorThreadpool_CorUnregisterWait(This,hWaitObject,CompletionEvent,result)	\
    ( (This)->lpVtbl -> CorUnregisterWait(This,hWaitObject,CompletionEvent,result) ) 

#define ICorThreadpool_CorQueueUserWorkItem(This,Function,Context,executeOnlyOnce,result)	\
    ( (This)->lpVtbl -> CorQueueUserWorkItem(This,Function,Context,executeOnlyOnce,result) ) 

#define ICorThreadpool_CorCreateTimer(This,phNewTimer,Callback,Parameter,DueTime,Period,result)	\
    ( (This)->lpVtbl -> CorCreateTimer(This,phNewTimer,Callback,Parameter,DueTime,Period,result) ) 

#define ICorThreadpool_CorChangeTimer(This,Timer,DueTime,Period,result)	\
    ( (This)->lpVtbl -> CorChangeTimer(This,Timer,DueTime,Period,result) ) 

#define ICorThreadpool_CorDeleteTimer(This,Timer,CompletionEvent,result)	\
    ( (This)->lpVtbl -> CorDeleteTimer(This,Timer,CompletionEvent,result) ) 

#define ICorThreadpool_CorBindIoCompletionCallback(This,fileHandle,callback)	\
    ( (This)->lpVtbl -> CorBindIoCompletionCallback(This,fileHandle,callback) ) 

#define ICorThreadpool_CorCallOrQueueUserWorkItem(This,Function,Context,result)	\
    ( (This)->lpVtbl -> CorCallOrQueueUserWorkItem(This,Function,Context,result) ) 

#define ICorThreadpool_CorSetMaxThreads(This,MaxWorkerThreads,MaxIOCompletionThreads)	\
    ( (This)->lpVtbl -> CorSetMaxThreads(This,MaxWorkerThreads,MaxIOCompletionThreads) ) 

#define ICorThreadpool_CorGetMaxThreads(This,MaxWorkerThreads,MaxIOCompletionThreads)	\
    ( (This)->lpVtbl -> CorGetMaxThreads(This,MaxWorkerThreads,MaxIOCompletionThreads) ) 

#define ICorThreadpool_CorGetAvailableThreads(This,AvailableWorkerThreads,AvailableIOCompletionThreads)	\
    ( (This)->lpVtbl -> CorGetAvailableThreads(This,AvailableWorkerThreads,AvailableIOCompletionThreads) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICorThreadpool_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_mscoree_0000_0005 */
/* [local] */ 

EXTERN_GUID(IID_IDebuggerThreadControl, 0x23d86786, 0x0bb5, 0x4774, 0x8f, 0xb5, 0xe3, 0x52, 0x2a, 0xdd, 0x62, 0x46);


extern RPC_IF_HANDLE __MIDL_itf_mscoree_0000_0005_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_mscoree_0000_0005_v0_0_s_ifspec;

#ifndef __IDebuggerThreadControl_INTERFACE_DEFINED__
#define __IDebuggerThreadControl_INTERFACE_DEFINED__

/* interface IDebuggerThreadControl */
/* [object][local][unique][helpstring][version][uuid] */ 


EXTERN_C const IID IID_IDebuggerThreadControl;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("23D86786-0BB5-4774-8FB5-E3522ADD6246")
    IDebuggerThreadControl : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ThreadIsBlockingForDebugger( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ReleaseAllRuntimeThreads( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE StartBlockingForDebugger( 
            DWORD dwUnused) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebuggerThreadControlVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebuggerThreadControl * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebuggerThreadControl * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebuggerThreadControl * This);
        
        HRESULT ( STDMETHODCALLTYPE *ThreadIsBlockingForDebugger )( 
            IDebuggerThreadControl * This);
        
        HRESULT ( STDMETHODCALLTYPE *ReleaseAllRuntimeThreads )( 
            IDebuggerThreadControl * This);
        
        HRESULT ( STDMETHODCALLTYPE *StartBlockingForDebugger )( 
            IDebuggerThreadControl * This,
            DWORD dwUnused);
        
        END_INTERFACE
    } IDebuggerThreadControlVtbl;

    interface IDebuggerThreadControl
    {
        CONST_VTBL struct IDebuggerThreadControlVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebuggerThreadControl_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDebuggerThreadControl_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDebuggerThreadControl_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDebuggerThreadControl_ThreadIsBlockingForDebugger(This)	\
    ( (This)->lpVtbl -> ThreadIsBlockingForDebugger(This) ) 

#define IDebuggerThreadControl_ReleaseAllRuntimeThreads(This)	\
    ( (This)->lpVtbl -> ReleaseAllRuntimeThreads(This) ) 

#define IDebuggerThreadControl_StartBlockingForDebugger(This,dwUnused)	\
    ( (This)->lpVtbl -> StartBlockingForDebugger(This,dwUnused) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDebuggerThreadControl_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_mscoree_0000_0006 */
/* [local] */ 

EXTERN_GUID(IID_IDebuggerInfo, 0xbf24142d, 0xa47d, 0x4d24, 0xa6, 0x6d, 0x8c, 0x21, 0x41, 0x94, 0x4e, 0x44);


extern RPC_IF_HANDLE __MIDL_itf_mscoree_0000_0006_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_mscoree_0000_0006_v0_0_s_ifspec;

#ifndef __IDebuggerInfo_INTERFACE_DEFINED__
#define __IDebuggerInfo_INTERFACE_DEFINED__

/* interface IDebuggerInfo */
/* [object][local][unique][helpstring][version][uuid] */ 


EXTERN_C const IID IID_IDebuggerInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("BF24142D-A47D-4d24-A66D-8C2141944E44")
    IDebuggerInfo : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE IsDebuggerAttached( 
            /* [out] */ BOOL *pbAttached) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebuggerInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebuggerInfo * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebuggerInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebuggerInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *IsDebuggerAttached )( 
            IDebuggerInfo * This,
            /* [out] */ BOOL *pbAttached);
        
        END_INTERFACE
    } IDebuggerInfoVtbl;

    interface IDebuggerInfo
    {
        CONST_VTBL struct IDebuggerInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebuggerInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDebuggerInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDebuggerInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDebuggerInfo_IsDebuggerAttached(This,pbAttached)	\
    ( (This)->lpVtbl -> IsDebuggerAttached(This,pbAttached) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDebuggerInfo_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_mscoree_0000_0007 */
/* [local] */ 

EXTERN_GUID(IID_ICorConfiguration, 0x5c2b07a5, 0x1e98, 0x11d3, 0x87, 0x2f, 0x00, 0xc0, 0x4f, 0x79, 0xed, 0x0d);


extern RPC_IF_HANDLE __MIDL_itf_mscoree_0000_0007_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_mscoree_0000_0007_v0_0_s_ifspec;

#ifndef __ICorConfiguration_INTERFACE_DEFINED__
#define __ICorConfiguration_INTERFACE_DEFINED__

/* interface ICorConfiguration */
/* [object][local][unique][helpstring][version][uuid] */ 


EXTERN_C const IID IID_ICorConfiguration;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5C2B07A5-1E98-11d3-872F-00C04F79ED0D")
    ICorConfiguration : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetGCThreadControl( 
            /* [in] */ IGCThreadControl *pGCThreadControl) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetGCHostControl( 
            /* [in] */ IGCHostControl *pGCHostControl) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetDebuggerThreadControl( 
            /* [in] */ IDebuggerThreadControl *pDebuggerThreadControl) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddDebuggerSpecialThread( 
            /* [in] */ DWORD dwSpecialThreadId) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ICorConfigurationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICorConfiguration * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICorConfiguration * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICorConfiguration * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetGCThreadControl )( 
            ICorConfiguration * This,
            /* [in] */ IGCThreadControl *pGCThreadControl);
        
        HRESULT ( STDMETHODCALLTYPE *SetGCHostControl )( 
            ICorConfiguration * This,
            /* [in] */ IGCHostControl *pGCHostControl);
        
        HRESULT ( STDMETHODCALLTYPE *SetDebuggerThreadControl )( 
            ICorConfiguration * This,
            /* [in] */ IDebuggerThreadControl *pDebuggerThreadControl);
        
        HRESULT ( STDMETHODCALLTYPE *AddDebuggerSpecialThread )( 
            ICorConfiguration * This,
            /* [in] */ DWORD dwSpecialThreadId);
        
        END_INTERFACE
    } ICorConfigurationVtbl;

    interface ICorConfiguration
    {
        CONST_VTBL struct ICorConfigurationVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICorConfiguration_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICorConfiguration_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICorConfiguration_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICorConfiguration_SetGCThreadControl(This,pGCThreadControl)	\
    ( (This)->lpVtbl -> SetGCThreadControl(This,pGCThreadControl) ) 

#define ICorConfiguration_SetGCHostControl(This,pGCHostControl)	\
    ( (This)->lpVtbl -> SetGCHostControl(This,pGCHostControl) ) 

#define ICorConfiguration_SetDebuggerThreadControl(This,pDebuggerThreadControl)	\
    ( (This)->lpVtbl -> SetDebuggerThreadControl(This,pDebuggerThreadControl) ) 

#define ICorConfiguration_AddDebuggerSpecialThread(This,dwSpecialThreadId)	\
    ( (This)->lpVtbl -> AddDebuggerSpecialThread(This,dwSpecialThreadId) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICorConfiguration_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_mscoree_0000_0008 */
/* [local] */ 

typedef void *HDOMAINENUM;



extern RPC_IF_HANDLE __MIDL_itf_mscoree_0000_0008_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_mscoree_0000_0008_v0_0_s_ifspec;

#ifndef __ICorRuntimeHost_INTERFACE_DEFINED__
#define __ICorRuntimeHost_INTERFACE_DEFINED__

/* interface ICorRuntimeHost */
/* [object][local][unique][helpstring][version][uuid] */ 


EXTERN_C const IID IID_ICorRuntimeHost;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("CB2F6722-AB3A-11d2-9C40-00C04FA30A3E")
    ICorRuntimeHost : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE CreateLogicalThreadState( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DeleteLogicalThreadState( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SwitchInLogicalThreadState( 
            /* [in] */ DWORD *pFiberCookie) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SwitchOutLogicalThreadState( 
            /* [out] */ DWORD **pFiberCookie) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LocksHeldByLogicalThread( 
            /* [out] */ DWORD *pCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MapFile( 
            /* [in] */ HANDLE hFile,
            /* [out] */ HMODULE *hMapAddress) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetConfiguration( 
            /* [out] */ ICorConfiguration **pConfiguration) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Start( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Stop( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateDomain( 
            /* [in] */ LPCWSTR pwzFriendlyName,
            /* [in] */ IUnknown *pIdentityArray,
            /* [out] */ IUnknown **pAppDomain) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDefaultDomain( 
            /* [out] */ IUnknown **pAppDomain) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumDomains( 
            /* [out] */ HDOMAINENUM *hEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE NextDomain( 
            /* [in] */ HDOMAINENUM hEnum,
            /* [out] */ IUnknown **pAppDomain) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CloseEnum( 
            /* [in] */ HDOMAINENUM hEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateDomainEx( 
            /* [in] */ LPCWSTR pwzFriendlyName,
            /* [in] */ IUnknown *pSetup,
            /* [in] */ IUnknown *pEvidence,
            /* [out] */ IUnknown **pAppDomain) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateDomainSetup( 
            /* [out] */ IUnknown **pAppDomainSetup) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateEvidence( 
            /* [out] */ IUnknown **pEvidence) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UnloadDomain( 
            /* [in] */ IUnknown *pAppDomain) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CurrentDomain( 
            /* [out] */ IUnknown **pAppDomain) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ICorRuntimeHostVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICorRuntimeHost * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICorRuntimeHost * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICorRuntimeHost * This);
        
        HRESULT ( STDMETHODCALLTYPE *CreateLogicalThreadState )( 
            ICorRuntimeHost * This);
        
        HRESULT ( STDMETHODCALLTYPE *DeleteLogicalThreadState )( 
            ICorRuntimeHost * This);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchInLogicalThreadState )( 
            ICorRuntimeHost * This,
            /* [in] */ DWORD *pFiberCookie);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchOutLogicalThreadState )( 
            ICorRuntimeHost * This,
            /* [out] */ DWORD **pFiberCookie);
        
        HRESULT ( STDMETHODCALLTYPE *LocksHeldByLogicalThread )( 
            ICorRuntimeHost * This,
            /* [out] */ DWORD *pCount);
        
        HRESULT ( STDMETHODCALLTYPE *MapFile )( 
            ICorRuntimeHost * This,
            /* [in] */ HANDLE hFile,
            /* [out] */ HMODULE *hMapAddress);
        
        HRESULT ( STDMETHODCALLTYPE *GetConfiguration )( 
            ICorRuntimeHost * This,
            /* [out] */ ICorConfiguration **pConfiguration);
        
        HRESULT ( STDMETHODCALLTYPE *Start )( 
            ICorRuntimeHost * This);
        
        HRESULT ( STDMETHODCALLTYPE *Stop )( 
            ICorRuntimeHost * This);
        
        HRESULT ( STDMETHODCALLTYPE *CreateDomain )( 
            ICorRuntimeHost * This,
            /* [in] */ LPCWSTR pwzFriendlyName,
            /* [in] */ IUnknown *pIdentityArray,
            /* [out] */ IUnknown **pAppDomain);
        
        HRESULT ( STDMETHODCALLTYPE *GetDefaultDomain )( 
            ICorRuntimeHost * This,
            /* [out] */ IUnknown **pAppDomain);
        
        HRESULT ( STDMETHODCALLTYPE *EnumDomains )( 
            ICorRuntimeHost * This,
            /* [out] */ HDOMAINENUM *hEnum);
        
        HRESULT ( STDMETHODCALLTYPE *NextDomain )( 
            ICorRuntimeHost * This,
            /* [in] */ HDOMAINENUM hEnum,
            /* [out] */ IUnknown **pAppDomain);
        
        HRESULT ( STDMETHODCALLTYPE *CloseEnum )( 
            ICorRuntimeHost * This,
            /* [in] */ HDOMAINENUM hEnum);
        
        HRESULT ( STDMETHODCALLTYPE *CreateDomainEx )( 
            ICorRuntimeHost * This,
            /* [in] */ LPCWSTR pwzFriendlyName,
            /* [in] */ IUnknown *pSetup,
            /* [in] */ IUnknown *pEvidence,
            /* [out] */ IUnknown **pAppDomain);
        
        HRESULT ( STDMETHODCALLTYPE *CreateDomainSetup )( 
            ICorRuntimeHost * This,
            /* [out] */ IUnknown **pAppDomainSetup);
        
        HRESULT ( STDMETHODCALLTYPE *CreateEvidence )( 
            ICorRuntimeHost * This,
            /* [out] */ IUnknown **pEvidence);
        
        HRESULT ( STDMETHODCALLTYPE *UnloadDomain )( 
            ICorRuntimeHost * This,
            /* [in] */ IUnknown *pAppDomain);
        
        HRESULT ( STDMETHODCALLTYPE *CurrentDomain )( 
            ICorRuntimeHost * This,
            /* [out] */ IUnknown **pAppDomain);
        
        END_INTERFACE
    } ICorRuntimeHostVtbl;

    interface ICorRuntimeHost
    {
        CONST_VTBL struct ICorRuntimeHostVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICorRuntimeHost_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICorRuntimeHost_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICorRuntimeHost_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICorRuntimeHost_CreateLogicalThreadState(This)	\
    ( (This)->lpVtbl -> CreateLogicalThreadState(This) ) 

#define ICorRuntimeHost_DeleteLogicalThreadState(This)	\
    ( (This)->lpVtbl -> DeleteLogicalThreadState(This) ) 

#define ICorRuntimeHost_SwitchInLogicalThreadState(This,pFiberCookie)	\
    ( (This)->lpVtbl -> SwitchInLogicalThreadState(This,pFiberCookie) ) 

#define ICorRuntimeHost_SwitchOutLogicalThreadState(This,pFiberCookie)	\
    ( (This)->lpVtbl -> SwitchOutLogicalThreadState(This,pFiberCookie) ) 

#define ICorRuntimeHost_LocksHeldByLogicalThread(This,pCount)	\
    ( (This)->lpVtbl -> LocksHeldByLogicalThread(This,pCount) ) 

#define ICorRuntimeHost_MapFile(This,hFile,hMapAddress)	\
    ( (This)->lpVtbl -> MapFile(This,hFile,hMapAddress) ) 

#define ICorRuntimeHost_GetConfiguration(This,pConfiguration)	\
    ( (This)->lpVtbl -> GetConfiguration(This,pConfiguration) ) 

#define ICorRuntimeHost_Start(This)	\
    ( (This)->lpVtbl -> Start(This) ) 

#define ICorRuntimeHost_Stop(This)	\
    ( (This)->lpVtbl -> Stop(This) ) 

#define ICorRuntimeHost_CreateDomain(This,pwzFriendlyName,pIdentityArray,pAppDomain)	\
    ( (This)->lpVtbl -> CreateDomain(This,pwzFriendlyName,pIdentityArray,pAppDomain) ) 

#define ICorRuntimeHost_GetDefaultDomain(This,pAppDomain)	\
    ( (This)->lpVtbl -> GetDefaultDomain(This,pAppDomain) ) 

#define ICorRuntimeHost_EnumDomains(This,hEnum)	\
    ( (This)->lpVtbl -> EnumDomains(This,hEnum) ) 

#define ICorRuntimeHost_NextDomain(This,hEnum,pAppDomain)	\
    ( (This)->lpVtbl -> NextDomain(This,hEnum,pAppDomain) ) 

#define ICorRuntimeHost_CloseEnum(This,hEnum)	\
    ( (This)->lpVtbl -> CloseEnum(This,hEnum) ) 

#define ICorRuntimeHost_CreateDomainEx(This,pwzFriendlyName,pSetup,pEvidence,pAppDomain)	\
    ( (This)->lpVtbl -> CreateDomainEx(This,pwzFriendlyName,pSetup,pEvidence,pAppDomain) ) 

#define ICorRuntimeHost_CreateDomainSetup(This,pAppDomainSetup)	\
    ( (This)->lpVtbl -> CreateDomainSetup(This,pAppDomainSetup) ) 

#define ICorRuntimeHost_CreateEvidence(This,pEvidence)	\
    ( (This)->lpVtbl -> CreateEvidence(This,pEvidence) ) 

#define ICorRuntimeHost_UnloadDomain(This,pAppDomain)	\
    ( (This)->lpVtbl -> UnloadDomain(This,pAppDomain) ) 

#define ICorRuntimeHost_CurrentDomain(This,pAppDomain)	\
    ( (This)->lpVtbl -> CurrentDomain(This,pAppDomain) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICorRuntimeHost_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_mscoree_0000_0009 */
/* [local] */ 

typedef /* [public][public] */ 
enum __MIDL___MIDL_itf_mscoree_0000_0009_0001
    {	eMemoryAvailableLow	= 1,
	eMemoryAvailableNeutral	= 2,
	eMemoryAvailableHigh	= 3
    } 	EMemoryAvailable;

typedef /* [public][public][public][public] */ 
enum __MIDL___MIDL_itf_mscoree_0000_0009_0002
    {	eTaskCritical	= 0,
	eAppDomainCritical	= 1,
	eProcessCritical	= 2
    } 	EMemoryCriticalLevel;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_mscoree_0000_0009_0003
    {	WAIT_MSGPUMP	= 0x1,
	WAIT_ALERTABLE	= 0x2,
	WAIT_NOTINDEADLOCK	= 0x4
    } 	WAIT_OPTION;

EXTERN_GUID(IID_ICLRMemoryNotificationCallback, 0x47EB8E57, 0x0846, 0x4546, 0xAF, 0x76, 0x6F, 0x42, 0xFC, 0xFC, 0x26, 0x49);


extern RPC_IF_HANDLE __MIDL_itf_mscoree_0000_0009_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_mscoree_0000_0009_v0_0_s_ifspec;

#ifndef __ICLRMemoryNotificationCallback_INTERFACE_DEFINED__
#define __ICLRMemoryNotificationCallback_INTERFACE_DEFINED__

/* interface ICLRMemoryNotificationCallback */
/* [object][local][unique][helpstring][version][uuid] */ 


EXTERN_C const IID IID_ICLRMemoryNotificationCallback;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("47EB8E57-0846-4546-AF76-6F42FCFC2649")
    ICLRMemoryNotificationCallback : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnMemoryNotification( 
            /* [in] */ EMemoryAvailable eMemoryAvailable) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ICLRMemoryNotificationCallbackVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICLRMemoryNotificationCallback * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICLRMemoryNotificationCallback * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICLRMemoryNotificationCallback * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnMemoryNotification )( 
            ICLRMemoryNotificationCallback * This,
            /* [in] */ EMemoryAvailable eMemoryAvailable);
        
        END_INTERFACE
    } ICLRMemoryNotificationCallbackVtbl;

    interface ICLRMemoryNotificationCallback
    {
        CONST_VTBL struct ICLRMemoryNotificationCallbackVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICLRMemoryNotificationCallback_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICLRMemoryNotificationCallback_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICLRMemoryNotificationCallback_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICLRMemoryNotificationCallback_OnMemoryNotification(This,eMemoryAvailable)	\
    ( (This)->lpVtbl -> OnMemoryNotification(This,eMemoryAvailable) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICLRMemoryNotificationCallback_INTERFACE_DEFINED__ */


#ifndef __IHostMalloc_INTERFACE_DEFINED__
#define __IHostMalloc_INTERFACE_DEFINED__

/* interface IHostMalloc */
/* [object][local][unique][helpstring][version][uuid] */ 


EXTERN_C const IID IID_IHostMalloc;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1831991C-CC53-4A31-B218-04E910446479")
    IHostMalloc : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Alloc( 
            /* [in] */ SIZE_T cbSize,
            /* [in] */ EMemoryCriticalLevel eCriticalLevel,
            /* [out] */ void **ppMem) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DebugAlloc( 
            /* [in] */ SIZE_T cbSize,
            /* [in] */ EMemoryCriticalLevel eCriticalLevel,
            /* [in] */ 
            __in   char *pszFileName,
            /* [in] */ int iLineNo,
            /* [out] */ 
            __deref_out_opt  void **ppMem) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Free( 
            /* [in] */ void *pMem) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHostMallocVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHostMalloc * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHostMalloc * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHostMalloc * This);
        
        HRESULT ( STDMETHODCALLTYPE *Alloc )( 
            IHostMalloc * This,
            /* [in] */ SIZE_T cbSize,
            /* [in] */ EMemoryCriticalLevel eCriticalLevel,
            /* [out] */ void **ppMem);
        
        HRESULT ( STDMETHODCALLTYPE *DebugAlloc )( 
            IHostMalloc * This,
            /* [in] */ SIZE_T cbSize,
            /* [in] */ EMemoryCriticalLevel eCriticalLevel,
            /* [in] */ 
            __in   char *pszFileName,
            /* [in] */ int iLineNo,
            /* [out] */ 
            __deref_out_opt  void **ppMem);
        
        HRESULT ( STDMETHODCALLTYPE *Free )( 
            IHostMalloc * This,
            /* [in] */ void *pMem);
        
        END_INTERFACE
    } IHostMallocVtbl;

    interface IHostMalloc
    {
        CONST_VTBL struct IHostMallocVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHostMalloc_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IHostMalloc_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IHostMalloc_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IHostMalloc_Alloc(This,cbSize,eCriticalLevel,ppMem)	\
    ( (This)->lpVtbl -> Alloc(This,cbSize,eCriticalLevel,ppMem) ) 

#define IHostMalloc_DebugAlloc(This,cbSize,eCriticalLevel,pszFileName,iLineNo,ppMem)	\
    ( (This)->lpVtbl -> DebugAlloc(This,cbSize,eCriticalLevel,pszFileName,iLineNo,ppMem) ) 

#define IHostMalloc_Free(This,pMem)	\
    ( (This)->lpVtbl -> Free(This,pMem) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IHostMalloc_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_mscoree_0000_0011 */
/* [local] */ 

typedef /* [public] */ 
enum __MIDL___MIDL_itf_mscoree_0000_0011_0001
    {	MALLOC_THREADSAFE	= 0x1,
	MALLOC_EXECUTABLE	= 0x2
    } 	MALLOC_TYPE;



extern RPC_IF_HANDLE __MIDL_itf_mscoree_0000_0011_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_mscoree_0000_0011_v0_0_s_ifspec;

#ifndef __IHostMemoryManager_INTERFACE_DEFINED__
#define __IHostMemoryManager_INTERFACE_DEFINED__

/* interface IHostMemoryManager */
/* [object][local][unique][helpstring][version][uuid] */ 


EXTERN_C const IID IID_IHostMemoryManager;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7BC698D1-F9E3-4460-9CDE-D04248E9FA25")
    IHostMemoryManager : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE CreateMalloc( 
            /* [in] */ DWORD dwMallocType,
            /* [out] */ IHostMalloc **ppMalloc) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE VirtualAlloc( 
            /* [in] */ void *pAddress,
            /* [in] */ SIZE_T dwSize,
            /* [in] */ DWORD flAllocationType,
            /* [in] */ DWORD flProtect,
            /* [in] */ EMemoryCriticalLevel eCriticalLevel,
            /* [out] */ void **ppMem) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE VirtualFree( 
            /* [in] */ LPVOID lpAddress,
            /* [in] */ SIZE_T dwSize,
            /* [in] */ DWORD dwFreeType) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE VirtualQuery( 
            /* [in] */ void *lpAddress,
            /* [out] */ void *lpBuffer,
            /* [in] */ SIZE_T dwLength,
            /* [out] */ SIZE_T *pResult) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE VirtualProtect( 
            /* [in] */ void *lpAddress,
            /* [in] */ SIZE_T dwSize,
            /* [in] */ DWORD flNewProtect,
            /* [out] */ DWORD *pflOldProtect) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMemoryLoad( 
            /* [out] */ DWORD *pMemoryLoad,
            /* [out] */ SIZE_T *pAvailableBytes) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RegisterMemoryNotificationCallback( 
            /* [in] */ ICLRMemoryNotificationCallback *pCallback) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE NeedsVirtualAddressSpace( 
            /* [in] */ LPVOID startAddress,
            /* [in] */ SIZE_T size) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AcquiredVirtualAddressSpace( 
            /* [in] */ LPVOID startAddress,
            /* [in] */ SIZE_T size) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ReleasedVirtualAddressSpace( 
            /* [in] */ LPVOID startAddress) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHostMemoryManagerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHostMemoryManager * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHostMemoryManager * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHostMemoryManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *CreateMalloc )( 
            IHostMemoryManager * This,
            /* [in] */ DWORD dwMallocType,
            /* [out] */ IHostMalloc **ppMalloc);
        
        HRESULT ( STDMETHODCALLTYPE *VirtualAlloc )( 
            IHostMemoryManager * This,
            /* [in] */ void *pAddress,
            /* [in] */ SIZE_T dwSize,
            /* [in] */ DWORD flAllocationType,
            /* [in] */ DWORD flProtect,
            /* [in] */ EMemoryCriticalLevel eCriticalLevel,
            /* [out] */ void **ppMem);
        
        HRESULT ( STDMETHODCALLTYPE *VirtualFree )( 
            IHostMemoryManager * This,
            /* [in] */ LPVOID lpAddress,
            /* [in] */ SIZE_T dwSize,
            /* [in] */ DWORD dwFreeType);
        
        HRESULT ( STDMETHODCALLTYPE *VirtualQuery )( 
            IHostMemoryManager * This,
            /* [in] */ void *lpAddress,
            /* [out] */ void *lpBuffer,
            /* [in] */ SIZE_T dwLength,
            /* [out] */ SIZE_T *pResult);
        
        HRESULT ( STDMETHODCALLTYPE *VirtualProtect )( 
            IHostMemoryManager * This,
            /* [in] */ void *lpAddress,
            /* [in] */ SIZE_T dwSize,
            /* [in] */ DWORD flNewProtect,
            /* [out] */ DWORD *pflOldProtect);
        
        HRESULT ( STDMETHODCALLTYPE *GetMemoryLoad )( 
            IHostMemoryManager * This,
            /* [out] */ DWORD *pMemoryLoad,
            /* [out] */ SIZE_T *pAvailableBytes);
        
        HRESULT ( STDMETHODCALLTYPE *RegisterMemoryNotificationCallback )( 
            IHostMemoryManager * This,
            /* [in] */ ICLRMemoryNotificationCallback *pCallback);
        
        HRESULT ( STDMETHODCALLTYPE *NeedsVirtualAddressSpace )( 
            IHostMemoryManager * This,
            /* [in] */ LPVOID startAddress,
            /* [in] */ SIZE_T size);
        
        HRESULT ( STDMETHODCALLTYPE *AcquiredVirtualAddressSpace )( 
            IHostMemoryManager * This,
            /* [in] */ LPVOID startAddress,
            /* [in] */ SIZE_T size);
        
        HRESULT ( STDMETHODCALLTYPE *ReleasedVirtualAddressSpace )( 
            IHostMemoryManager * This,
            /* [in] */ LPVOID startAddress);
        
        END_INTERFACE
    } IHostMemoryManagerVtbl;

    interface IHostMemoryManager
    {
        CONST_VTBL struct IHostMemoryManagerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHostMemoryManager_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IHostMemoryManager_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IHostMemoryManager_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IHostMemoryManager_CreateMalloc(This,dwMallocType,ppMalloc)	\
    ( (This)->lpVtbl -> CreateMalloc(This,dwMallocType,ppMalloc) ) 

#define IHostMemoryManager_VirtualAlloc(This,pAddress,dwSize,flAllocationType,flProtect,eCriticalLevel,ppMem)	\
    ( (This)->lpVtbl -> VirtualAlloc(This,pAddress,dwSize,flAllocationType,flProtect,eCriticalLevel,ppMem) ) 

#define IHostMemoryManager_VirtualFree(This,lpAddress,dwSize,dwFreeType)	\
    ( (This)->lpVtbl -> VirtualFree(This,lpAddress,dwSize,dwFreeType) ) 

#define IHostMemoryManager_VirtualQuery(This,lpAddress,lpBuffer,dwLength,pResult)	\
    ( (This)->lpVtbl -> VirtualQuery(This,lpAddress,lpBuffer,dwLength,pResult) ) 

#define IHostMemoryManager_VirtualProtect(This,lpAddress,dwSize,flNewProtect,pflOldProtect)	\
    ( (This)->lpVtbl -> VirtualProtect(This,lpAddress,dwSize,flNewProtect,pflOldProtect) ) 

#define IHostMemoryManager_GetMemoryLoad(This,pMemoryLoad,pAvailableBytes)	\
    ( (This)->lpVtbl -> GetMemoryLoad(This,pMemoryLoad,pAvailableBytes) ) 

#define IHostMemoryManager_RegisterMemoryNotificationCallback(This,pCallback)	\
    ( (This)->lpVtbl -> RegisterMemoryNotificationCallback(This,pCallback) ) 

#define IHostMemoryManager_NeedsVirtualAddressSpace(This,startAddress,size)	\
    ( (This)->lpVtbl -> NeedsVirtualAddressSpace(This,startAddress,size) ) 

#define IHostMemoryManager_AcquiredVirtualAddressSpace(This,startAddress,size)	\
    ( (This)->lpVtbl -> AcquiredVirtualAddressSpace(This,startAddress,size) ) 

#define IHostMemoryManager_ReleasedVirtualAddressSpace(This,startAddress)	\
    ( (This)->lpVtbl -> ReleasedVirtualAddressSpace(This,startAddress) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IHostMemoryManager_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_mscoree_0000_0012 */
/* [local] */ 

typedef UINT64 TASKID;

typedef DWORD CONNID;



extern RPC_IF_HANDLE __MIDL_itf_mscoree_0000_0012_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_mscoree_0000_0012_v0_0_s_ifspec;

#ifndef __ICLRTask_INTERFACE_DEFINED__
#define __ICLRTask_INTERFACE_DEFINED__

/* interface ICLRTask */
/* [object][local][unique][helpstring][version][uuid] */ 


EXTERN_C const IID IID_ICLRTask;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("28E66A4A-9906-4225-B231-9187C3EB8611")
    ICLRTask : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SwitchIn( 
            /* [in] */ HANDLE threadHandle) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SwitchOut( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMemStats( 
            /* [out] */ COR_GC_THREAD_STATS *memUsage) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( 
            BOOL fFull) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ExitTask( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Abort( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RudeAbort( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE NeedsPriorityScheduling( 
            /* [out] */ BOOL *pbNeedsPriorityScheduling) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE YieldTask( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LocksHeld( 
            /* [out] */ SIZE_T *pLockCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetTaskIdentifier( 
            /* [in] */ TASKID asked) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ICLRTaskVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICLRTask * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICLRTask * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICLRTask * This);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchIn )( 
            ICLRTask * This,
            /* [in] */ HANDLE threadHandle);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchOut )( 
            ICLRTask * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetMemStats )( 
            ICLRTask * This,
            /* [out] */ COR_GC_THREAD_STATS *memUsage);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            ICLRTask * This,
            BOOL fFull);
        
        HRESULT ( STDMETHODCALLTYPE *ExitTask )( 
            ICLRTask * This);
        
        HRESULT ( STDMETHODCALLTYPE *Abort )( 
            ICLRTask * This);
        
        HRESULT ( STDMETHODCALLTYPE *RudeAbort )( 
            ICLRTask * This);
        
        HRESULT ( STDMETHODCALLTYPE *NeedsPriorityScheduling )( 
            ICLRTask * This,
            /* [out] */ BOOL *pbNeedsPriorityScheduling);
        
        HRESULT ( STDMETHODCALLTYPE *YieldTask )( 
            ICLRTask * This);
        
        HRESULT ( STDMETHODCALLTYPE *LocksHeld )( 
            ICLRTask * This,
            /* [out] */ SIZE_T *pLockCount);
        
        HRESULT ( STDMETHODCALLTYPE *SetTaskIdentifier )( 
            ICLRTask * This,
            /* [in] */ TASKID asked);
        
        END_INTERFACE
    } ICLRTaskVtbl;

    interface ICLRTask
    {
        CONST_VTBL struct ICLRTaskVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICLRTask_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICLRTask_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICLRTask_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICLRTask_SwitchIn(This,threadHandle)	\
    ( (This)->lpVtbl -> SwitchIn(This,threadHandle) ) 

#define ICLRTask_SwitchOut(This)	\
    ( (This)->lpVtbl -> SwitchOut(This) ) 

#define ICLRTask_GetMemStats(This,memUsage)	\
    ( (This)->lpVtbl -> GetMemStats(This,memUsage) ) 

#define ICLRTask_Reset(This,fFull)	\
    ( (This)->lpVtbl -> Reset(This,fFull) ) 

#define ICLRTask_ExitTask(This)	\
    ( (This)->lpVtbl -> ExitTask(This) ) 

#define ICLRTask_Abort(This)	\
    ( (This)->lpVtbl -> Abort(This) ) 

#define ICLRTask_RudeAbort(This)	\
    ( (This)->lpVtbl -> RudeAbort(This) ) 

#define ICLRTask_NeedsPriorityScheduling(This,pbNeedsPriorityScheduling)	\
    ( (This)->lpVtbl -> NeedsPriorityScheduling(This,pbNeedsPriorityScheduling) ) 

#define ICLRTask_YieldTask(This)	\
    ( (This)->lpVtbl -> YieldTask(This) ) 

#define ICLRTask_LocksHeld(This,pLockCount)	\
    ( (This)->lpVtbl -> LocksHeld(This,pLockCount) ) 

#define ICLRTask_SetTaskIdentifier(This,asked)	\
    ( (This)->lpVtbl -> SetTaskIdentifier(This,asked) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICLRTask_INTERFACE_DEFINED__ */


#ifndef __ICLRTask2_INTERFACE_DEFINED__
#define __ICLRTask2_INTERFACE_DEFINED__

/* interface ICLRTask2 */
/* [object][local][unique][helpstring][version][uuid] */ 


EXTERN_C const IID IID_ICLRTask2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("28E66A4A-9906-4225-B231-9187C3EB8612")
    ICLRTask2 : public ICLRTask
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE BeginPreventAsyncAbort( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EndPreventAsyncAbort( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ICLRTask2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICLRTask2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICLRTask2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICLRTask2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchIn )( 
            ICLRTask2 * This,
            /* [in] */ HANDLE threadHandle);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchOut )( 
            ICLRTask2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetMemStats )( 
            ICLRTask2 * This,
            /* [out] */ COR_GC_THREAD_STATS *memUsage);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            ICLRTask2 * This,
            BOOL fFull);
        
        HRESULT ( STDMETHODCALLTYPE *ExitTask )( 
            ICLRTask2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *Abort )( 
            ICLRTask2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *RudeAbort )( 
            ICLRTask2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *NeedsPriorityScheduling )( 
            ICLRTask2 * This,
            /* [out] */ BOOL *pbNeedsPriorityScheduling);
        
        HRESULT ( STDMETHODCALLTYPE *YieldTask )( 
            ICLRTask2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *LocksHeld )( 
            ICLRTask2 * This,
            /* [out] */ SIZE_T *pLockCount);
        
        HRESULT ( STDMETHODCALLTYPE *SetTaskIdentifier )( 
            ICLRTask2 * This,
            /* [in] */ TASKID asked);
        
        HRESULT ( STDMETHODCALLTYPE *BeginPreventAsyncAbort )( 
            ICLRTask2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *EndPreventAsyncAbort )( 
            ICLRTask2 * This);
        
        END_INTERFACE
    } ICLRTask2Vtbl;

    interface ICLRTask2
    {
        CONST_VTBL struct ICLRTask2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICLRTask2_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICLRTask2_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICLRTask2_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICLRTask2_SwitchIn(This,threadHandle)	\
    ( (This)->lpVtbl -> SwitchIn(This,threadHandle) ) 

#define ICLRTask2_SwitchOut(This)	\
    ( (This)->lpVtbl -> SwitchOut(This) ) 

#define ICLRTask2_GetMemStats(This,memUsage)	\
    ( (This)->lpVtbl -> GetMemStats(This,memUsage) ) 

#define ICLRTask2_Reset(This,fFull)	\
    ( (This)->lpVtbl -> Reset(This,fFull) ) 

#define ICLRTask2_ExitTask(This)	\
    ( (This)->lpVtbl -> ExitTask(This) ) 

#define ICLRTask2_Abort(This)	\
    ( (This)->lpVtbl -> Abort(This) ) 

#define ICLRTask2_RudeAbort(This)	\
    ( (This)->lpVtbl -> RudeAbort(This) ) 

#define ICLRTask2_NeedsPriorityScheduling(This,pbNeedsPriorityScheduling)	\
    ( (This)->lpVtbl -> NeedsPriorityScheduling(This,pbNeedsPriorityScheduling) ) 

#define ICLRTask2_YieldTask(This)	\
    ( (This)->lpVtbl -> YieldTask(This) ) 

#define ICLRTask2_LocksHeld(This,pLockCount)	\
    ( (This)->lpVtbl -> LocksHeld(This,pLockCount) ) 

#define ICLRTask2_SetTaskIdentifier(This,asked)	\
    ( (This)->lpVtbl -> SetTaskIdentifier(This,asked) ) 


#define ICLRTask2_BeginPreventAsyncAbort(This)	\
    ( (This)->lpVtbl -> BeginPreventAsyncAbort(This) ) 

#define ICLRTask2_EndPreventAsyncAbort(This)	\
    ( (This)->lpVtbl -> EndPreventAsyncAbort(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICLRTask2_INTERFACE_DEFINED__ */


#ifndef __IHostTask_INTERFACE_DEFINED__
#define __IHostTask_INTERFACE_DEFINED__

/* interface IHostTask */
/* [object][local][unique][helpstring][version][uuid] */ 


EXTERN_C const IID IID_IHostTask;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C2275828-C4B1-4B55-82C9-92135F74DF1A")
    IHostTask : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Start( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Alert( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Join( 
            /* [in] */ DWORD dwMilliseconds,
            /* [in] */ DWORD option) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetPriority( 
            /* [in] */ int newPriority) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPriority( 
            /* [out] */ int *pPriority) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetCLRTask( 
            /* [in] */ ICLRTask *pCLRTask) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHostTaskVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHostTask * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHostTask * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHostTask * This);
        
        HRESULT ( STDMETHODCALLTYPE *Start )( 
            IHostTask * This);
        
        HRESULT ( STDMETHODCALLTYPE *Alert )( 
            IHostTask * This);
        
        HRESULT ( STDMETHODCALLTYPE *Join )( 
            IHostTask * This,
            /* [in] */ DWORD dwMilliseconds,
            /* [in] */ DWORD option);
        
        HRESULT ( STDMETHODCALLTYPE *SetPriority )( 
            IHostTask * This,
            /* [in] */ int newPriority);
        
        HRESULT ( STDMETHODCALLTYPE *GetPriority )( 
            IHostTask * This,
            /* [out] */ int *pPriority);
        
        HRESULT ( STDMETHODCALLTYPE *SetCLRTask )( 
            IHostTask * This,
            /* [in] */ ICLRTask *pCLRTask);
        
        END_INTERFACE
    } IHostTaskVtbl;

    interface IHostTask
    {
        CONST_VTBL struct IHostTaskVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHostTask_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IHostTask_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IHostTask_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IHostTask_Start(This)	\
    ( (This)->lpVtbl -> Start(This) ) 

#define IHostTask_Alert(This)	\
    ( (This)->lpVtbl -> Alert(This) ) 

#define IHostTask_Join(This,dwMilliseconds,option)	\
    ( (This)->lpVtbl -> Join(This,dwMilliseconds,option) ) 

#define IHostTask_SetPriority(This,newPriority)	\
    ( (This)->lpVtbl -> SetPriority(This,newPriority) ) 

#define IHostTask_GetPriority(This,pPriority)	\
    ( (This)->lpVtbl -> GetPriority(This,pPriority) ) 

#define IHostTask_SetCLRTask(This,pCLRTask)	\
    ( (This)->lpVtbl -> SetCLRTask(This,pCLRTask) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IHostTask_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_mscoree_0000_0015 */
/* [local] */ 

typedef 
enum ETaskType
    {	TT_DEBUGGERHELPER	= 0x1,
	TT_GC	= 0x2,
	TT_FINALIZER	= 0x4,
	TT_THREADPOOL_TIMER	= 0x8,
	TT_THREADPOOL_GATE	= 0x10,
	TT_THREADPOOL_WORKER	= 0x20,
	TT_THREADPOOL_IOCOMPLETION	= 0x40,
	TT_ADUNLOAD	= 0x80,
	TT_USER	= 0x100,
	TT_THREADPOOL_WAIT	= 0x200,
	TT_UNKNOWN	= 0x80000000
    } 	ETaskType;



extern RPC_IF_HANDLE __MIDL_itf_mscoree_0000_0015_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_mscoree_0000_0015_v0_0_s_ifspec;

#ifndef __ICLRTaskManager_INTERFACE_DEFINED__
#define __ICLRTaskManager_INTERFACE_DEFINED__

/* interface ICLRTaskManager */
/* [object][local][unique][helpstring][version][uuid] */ 


EXTERN_C const IID IID_ICLRTaskManager;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4862efbe-3ae5-44f8-8feb-346190ee8a34")
    ICLRTaskManager : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE CreateTask( 
            /* [out] */ ICLRTask **pTask) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCurrentTask( 
            /* [out] */ ICLRTask **pTask) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetUILocale( 
            /* [in] */ LCID lcid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetLocale( 
            /* [in] */ LCID lcid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCurrentTaskType( 
            /* [out] */ ETaskType *pTaskType) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ICLRTaskManagerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICLRTaskManager * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICLRTaskManager * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICLRTaskManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *CreateTask )( 
            ICLRTaskManager * This,
            /* [out] */ ICLRTask **pTask);
        
        HRESULT ( STDMETHODCALLTYPE *GetCurrentTask )( 
            ICLRTaskManager * This,
            /* [out] */ ICLRTask **pTask);
        
        HRESULT ( STDMETHODCALLTYPE *SetUILocale )( 
            ICLRTaskManager * This,
            /* [in] */ LCID lcid);
        
        HRESULT ( STDMETHODCALLTYPE *SetLocale )( 
            ICLRTaskManager * This,
            /* [in] */ LCID lcid);
        
        HRESULT ( STDMETHODCALLTYPE *GetCurrentTaskType )( 
            ICLRTaskManager * This,
            /* [out] */ ETaskType *pTaskType);
        
        END_INTERFACE
    } ICLRTaskManagerVtbl;

    interface ICLRTaskManager
    {
        CONST_VTBL struct ICLRTaskManagerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICLRTaskManager_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICLRTaskManager_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICLRTaskManager_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICLRTaskManager_CreateTask(This,pTask)	\
    ( (This)->lpVtbl -> CreateTask(This,pTask) ) 

#define ICLRTaskManager_GetCurrentTask(This,pTask)	\
    ( (This)->lpVtbl -> GetCurrentTask(This,pTask) ) 

#define ICLRTaskManager_SetUILocale(This,lcid)	\
    ( (This)->lpVtbl -> SetUILocale(This,lcid) ) 

#define ICLRTaskManager_SetLocale(This,lcid)	\
    ( (This)->lpVtbl -> SetLocale(This,lcid) ) 

#define ICLRTaskManager_GetCurrentTaskType(This,pTaskType)	\
    ( (This)->lpVtbl -> GetCurrentTaskType(This,pTaskType) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICLRTaskManager_INTERFACE_DEFINED__ */


#ifndef __IHostTaskManager_INTERFACE_DEFINED__
#define __IHostTaskManager_INTERFACE_DEFINED__

/* interface IHostTaskManager */
/* [object][local][unique][helpstring][version][uuid] */ 


EXTERN_C const IID IID_IHostTaskManager;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("997FF24C-43B7-4352-8667-0DC04FAFD354")
    IHostTaskManager : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetCurrentTask( 
            /* [out] */ IHostTask **pTask) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateTask( 
            /* [in] */ DWORD dwStackSize,
            /* [in] */ LPTHREAD_START_ROUTINE pStartAddress,
            /* [in] */ PVOID pParameter,
            /* [out] */ IHostTask **ppTask) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Sleep( 
            /* [in] */ DWORD dwMilliseconds,
            /* [in] */ DWORD option) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SwitchToTask( 
            /* [in] */ DWORD option) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetUILocale( 
            /* [in] */ LCID lcid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetLocale( 
            /* [in] */ LCID lcid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CallNeedsHostHook( 
            /* [in] */ SIZE_T target,
            /* [out] */ BOOL *pbCallNeedsHostHook) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LeaveRuntime( 
            /* [in] */ SIZE_T target) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnterRuntime( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ReverseLeaveRuntime( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ReverseEnterRuntime( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE BeginDelayAbort( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EndDelayAbort( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE BeginThreadAffinity( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EndThreadAffinity( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetStackGuarantee( 
            /* [in] */ ULONG guarantee) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetStackGuarantee( 
            /* [out] */ ULONG *pGuarantee) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetCLRTaskManager( 
            /* [in] */ ICLRTaskManager *ppManager) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHostTaskManagerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHostTaskManager * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHostTaskManager * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHostTaskManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetCurrentTask )( 
            IHostTaskManager * This,
            /* [out] */ IHostTask **pTask);
        
        HRESULT ( STDMETHODCALLTYPE *CreateTask )( 
            IHostTaskManager * This,
            /* [in] */ DWORD dwStackSize,
            /* [in] */ LPTHREAD_START_ROUTINE pStartAddress,
            /* [in] */ PVOID pParameter,
            /* [out] */ IHostTask **ppTask);
        
        HRESULT ( STDMETHODCALLTYPE *Sleep )( 
            IHostTaskManager * This,
            /* [in] */ DWORD dwMilliseconds,
            /* [in] */ DWORD option);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToTask )( 
            IHostTaskManager * This,
            /* [in] */ DWORD option);
        
        HRESULT ( STDMETHODCALLTYPE *SetUILocale )( 
            IHostTaskManager * This,
            /* [in] */ LCID lcid);
        
        HRESULT ( STDMETHODCALLTYPE *SetLocale )( 
            IHostTaskManager * This,
            /* [in] */ LCID lcid);
        
        HRESULT ( STDMETHODCALLTYPE *CallNeedsHostHook )( 
            IHostTaskManager * This,
            /* [in] */ SIZE_T target,
            /* [out] */ BOOL *pbCallNeedsHostHook);
        
        HRESULT ( STDMETHODCALLTYPE *LeaveRuntime )( 
            IHostTaskManager * This,
            /* [in] */ SIZE_T target);
        
        HRESULT ( STDMETHODCALLTYPE *EnterRuntime )( 
            IHostTaskManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *ReverseLeaveRuntime )( 
            IHostTaskManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *ReverseEnterRuntime )( 
            IHostTaskManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *BeginDelayAbort )( 
            IHostTaskManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *EndDelayAbort )( 
            IHostTaskManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *BeginThreadAffinity )( 
            IHostTaskManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *EndThreadAffinity )( 
            IHostTaskManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetStackGuarantee )( 
            IHostTaskManager * This,
            /* [in] */ ULONG guarantee);
        
        HRESULT ( STDMETHODCALLTYPE *GetStackGuarantee )( 
            IHostTaskManager * This,
            /* [out] */ ULONG *pGuarantee);
        
        HRESULT ( STDMETHODCALLTYPE *SetCLRTaskManager )( 
            IHostTaskManager * This,
            /* [in] */ ICLRTaskManager *ppManager);
        
        END_INTERFACE
    } IHostTaskManagerVtbl;

    interface IHostTaskManager
    {
        CONST_VTBL struct IHostTaskManagerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHostTaskManager_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IHostTaskManager_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IHostTaskManager_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IHostTaskManager_GetCurrentTask(This,pTask)	\
    ( (This)->lpVtbl -> GetCurrentTask(This,pTask) ) 

#define IHostTaskManager_CreateTask(This,dwStackSize,pStartAddress,pParameter,ppTask)	\
    ( (This)->lpVtbl -> CreateTask(This,dwStackSize,pStartAddress,pParameter,ppTask) ) 

#define IHostTaskManager_Sleep(This,dwMilliseconds,option)	\
    ( (This)->lpVtbl -> Sleep(This,dwMilliseconds,option) ) 

#define IHostTaskManager_SwitchToTask(This,option)	\
    ( (This)->lpVtbl -> SwitchToTask(This,option) ) 

#define IHostTaskManager_SetUILocale(This,lcid)	\
    ( (This)->lpVtbl -> SetUILocale(This,lcid) ) 

#define IHostTaskManager_SetLocale(This,lcid)	\
    ( (This)->lpVtbl -> SetLocale(This,lcid) ) 

#define IHostTaskManager_CallNeedsHostHook(This,target,pbCallNeedsHostHook)	\
    ( (This)->lpVtbl -> CallNeedsHostHook(This,target,pbCallNeedsHostHook) ) 

#define IHostTaskManager_LeaveRuntime(This,target)	\
    ( (This)->lpVtbl -> LeaveRuntime(This,target) ) 

#define IHostTaskManager_EnterRuntime(This)	\
    ( (This)->lpVtbl -> EnterRuntime(This) ) 

#define IHostTaskManager_ReverseLeaveRuntime(This)	\
    ( (This)->lpVtbl -> ReverseLeaveRuntime(This) ) 

#define IHostTaskManager_ReverseEnterRuntime(This)	\
    ( (This)->lpVtbl -> ReverseEnterRuntime(This) ) 

#define IHostTaskManager_BeginDelayAbort(This)	\
    ( (This)->lpVtbl -> BeginDelayAbort(This) ) 

#define IHostTaskManager_EndDelayAbort(This)	\
    ( (This)->lpVtbl -> EndDelayAbort(This) ) 

#define IHostTaskManager_BeginThreadAffinity(This)	\
    ( (This)->lpVtbl -> BeginThreadAffinity(This) ) 

#define IHostTaskManager_EndThreadAffinity(This)	\
    ( (This)->lpVtbl -> EndThreadAffinity(This) ) 

#define IHostTaskManager_SetStackGuarantee(This,guarantee)	\
    ( (This)->lpVtbl -> SetStackGuarantee(This,guarantee) ) 

#define IHostTaskManager_GetStackGuarantee(This,pGuarantee)	\
    ( (This)->lpVtbl -> GetStackGuarantee(This,pGuarantee) ) 

#define IHostTaskManager_SetCLRTaskManager(This,ppManager)	\
    ( (This)->lpVtbl -> SetCLRTaskManager(This,ppManager) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IHostTaskManager_INTERFACE_DEFINED__ */


#ifndef __IHostThreadpoolManager_INTERFACE_DEFINED__
#define __IHostThreadpoolManager_INTERFACE_DEFINED__

/* interface IHostThreadpoolManager */
/* [object][local][unique][helpstring][version][uuid] */ 


EXTERN_C const IID IID_IHostThreadpoolManager;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("983D50E2-CB15-466B-80FC-845DC6E8C5FD")
    IHostThreadpoolManager : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE QueueUserWorkItem( 
            /* [in] */ LPTHREAD_START_ROUTINE Function,
            /* [in] */ PVOID Context,
            /* [in] */ ULONG Flags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetMaxThreads( 
            /* [in] */ DWORD dwMaxWorkerThreads) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMaxThreads( 
            /* [out] */ DWORD *pdwMaxWorkerThreads) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAvailableThreads( 
            /* [out] */ DWORD *pdwAvailableWorkerThreads) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetMinThreads( 
            /* [in] */ DWORD dwMinIOCompletionThreads) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMinThreads( 
            /* [out] */ DWORD *pdwMinIOCompletionThreads) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHostThreadpoolManagerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHostThreadpoolManager * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHostThreadpoolManager * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHostThreadpoolManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *QueueUserWorkItem )( 
            IHostThreadpoolManager * This,
            /* [in] */ LPTHREAD_START_ROUTINE Function,
            /* [in] */ PVOID Context,
            /* [in] */ ULONG Flags);
        
        HRESULT ( STDMETHODCALLTYPE *SetMaxThreads )( 
            IHostThreadpoolManager * This,
            /* [in] */ DWORD dwMaxWorkerThreads);
        
        HRESULT ( STDMETHODCALLTYPE *GetMaxThreads )( 
            IHostThreadpoolManager * This,
            /* [out] */ DWORD *pdwMaxWorkerThreads);
        
        HRESULT ( STDMETHODCALLTYPE *GetAvailableThreads )( 
            IHostThreadpoolManager * This,
            /* [out] */ DWORD *pdwAvailableWorkerThreads);
        
        HRESULT ( STDMETHODCALLTYPE *SetMinThreads )( 
            IHostThreadpoolManager * This,
            /* [in] */ DWORD dwMinIOCompletionThreads);
        
        HRESULT ( STDMETHODCALLTYPE *GetMinThreads )( 
            IHostThreadpoolManager * This,
            /* [out] */ DWORD *pdwMinIOCompletionThreads);
        
        END_INTERFACE
    } IHostThreadpoolManagerVtbl;

    interface IHostThreadpoolManager
    {
        CONST_VTBL struct IHostThreadpoolManagerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHostThreadpoolManager_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IHostThreadpoolManager_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IHostThreadpoolManager_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IHostThreadpoolManager_QueueUserWorkItem(This,Function,Context,Flags)	\
    ( (This)->lpVtbl -> QueueUserWorkItem(This,Function,Context,Flags) ) 

#define IHostThreadpoolManager_SetMaxThreads(This,dwMaxWorkerThreads)	\
    ( (This)->lpVtbl -> SetMaxThreads(This,dwMaxWorkerThreads) ) 

#define IHostThreadpoolManager_GetMaxThreads(This,pdwMaxWorkerThreads)	\
    ( (This)->lpVtbl -> GetMaxThreads(This,pdwMaxWorkerThreads) ) 

#define IHostThreadpoolManager_GetAvailableThreads(This,pdwAvailableWorkerThreads)	\
    ( (This)->lpVtbl -> GetAvailableThreads(This,pdwAvailableWorkerThreads) ) 

#define IHostThreadpoolManager_SetMinThreads(This,dwMinIOCompletionThreads)	\
    ( (This)->lpVtbl -> SetMinThreads(This,dwMinIOCompletionThreads) ) 

#define IHostThreadpoolManager_GetMinThreads(This,pdwMinIOCompletionThreads)	\
    ( (This)->lpVtbl -> GetMinThreads(This,pdwMinIOCompletionThreads) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IHostThreadpoolManager_INTERFACE_DEFINED__ */


#ifndef __ICLRIoCompletionManager_INTERFACE_DEFINED__
#define __ICLRIoCompletionManager_INTERFACE_DEFINED__

/* interface ICLRIoCompletionManager */
/* [object][local][unique][helpstring][version][uuid] */ 


EXTERN_C const IID IID_ICLRIoCompletionManager;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2d74ce86-b8d6-4c84-b3a7-9768933b3c12")
    ICLRIoCompletionManager : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnComplete( 
            /* [in] */ DWORD dwErrorCode,
            /* [in] */ DWORD NumberOfBytesTransferred,
            /* [in] */ void *pvOverlapped) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ICLRIoCompletionManagerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICLRIoCompletionManager * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICLRIoCompletionManager * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICLRIoCompletionManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnComplete )( 
            ICLRIoCompletionManager * This,
            /* [in] */ DWORD dwErrorCode,
            /* [in] */ DWORD NumberOfBytesTransferred,
            /* [in] */ void *pvOverlapped);
        
        END_INTERFACE
    } ICLRIoCompletionManagerVtbl;

    interface ICLRIoCompletionManager
    {
        CONST_VTBL struct ICLRIoCompletionManagerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICLRIoCompletionManager_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICLRIoCompletionManager_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICLRIoCompletionManager_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICLRIoCompletionManager_OnComplete(This,dwErrorCode,NumberOfBytesTransferred,pvOverlapped)	\
    ( (This)->lpVtbl -> OnComplete(This,dwErrorCode,NumberOfBytesTransferred,pvOverlapped) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICLRIoCompletionManager_INTERFACE_DEFINED__ */


#ifndef __IHostIoCompletionManager_INTERFACE_DEFINED__
#define __IHostIoCompletionManager_INTERFACE_DEFINED__

/* interface IHostIoCompletionManager */
/* [object][local][unique][helpstring][version][uuid] */ 


EXTERN_C const IID IID_IHostIoCompletionManager;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8bde9d80-ec06-41d6-83e6-22580effcc20")
    IHostIoCompletionManager : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE CreateIoCompletionPort( 
            /* [out] */ HANDLE *phPort) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CloseIoCompletionPort( 
            /* [in] */ HANDLE hPort) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetMaxThreads( 
            /* [in] */ DWORD dwMaxIOCompletionThreads) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMaxThreads( 
            /* [out] */ DWORD *pdwMaxIOCompletionThreads) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAvailableThreads( 
            /* [out] */ DWORD *pdwAvailableIOCompletionThreads) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetHostOverlappedSize( 
            /* [out] */ DWORD *pcbSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetCLRIoCompletionManager( 
            /* [in] */ ICLRIoCompletionManager *pManager) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE InitializeHostOverlapped( 
            /* [in] */ void *pvOverlapped) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Bind( 
            /* [in] */ HANDLE hPort,
            /* [in] */ HANDLE hHandle) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetMinThreads( 
            /* [in] */ DWORD dwMinIOCompletionThreads) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMinThreads( 
            /* [out] */ DWORD *pdwMinIOCompletionThreads) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHostIoCompletionManagerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHostIoCompletionManager * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHostIoCompletionManager * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHostIoCompletionManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *CreateIoCompletionPort )( 
            IHostIoCompletionManager * This,
            /* [out] */ HANDLE *phPort);
        
        HRESULT ( STDMETHODCALLTYPE *CloseIoCompletionPort )( 
            IHostIoCompletionManager * This,
            /* [in] */ HANDLE hPort);
        
        HRESULT ( STDMETHODCALLTYPE *SetMaxThreads )( 
            IHostIoCompletionManager * This,
            /* [in] */ DWORD dwMaxIOCompletionThreads);
        
        HRESULT ( STDMETHODCALLTYPE *GetMaxThreads )( 
            IHostIoCompletionManager * This,
            /* [out] */ DWORD *pdwMaxIOCompletionThreads);
        
        HRESULT ( STDMETHODCALLTYPE *GetAvailableThreads )( 
            IHostIoCompletionManager * This,
            /* [out] */ DWORD *pdwAvailableIOCompletionThreads);
        
        HRESULT ( STDMETHODCALLTYPE *GetHostOverlappedSize )( 
            IHostIoCompletionManager * This,
            /* [out] */ DWORD *pcbSize);
        
        HRESULT ( STDMETHODCALLTYPE *SetCLRIoCompletionManager )( 
            IHostIoCompletionManager * This,
            /* [in] */ ICLRIoCompletionManager *pManager);
        
        HRESULT ( STDMETHODCALLTYPE *InitializeHostOverlapped )( 
            IHostIoCompletionManager * This,
            /* [in] */ void *pvOverlapped);
        
        HRESULT ( STDMETHODCALLTYPE *Bind )( 
            IHostIoCompletionManager * This,
            /* [in] */ HANDLE hPort,
            /* [in] */ HANDLE hHandle);
        
        HRESULT ( STDMETHODCALLTYPE *SetMinThreads )( 
            IHostIoCompletionManager * This,
            /* [in] */ DWORD dwMinIOCompletionThreads);
        
        HRESULT ( STDMETHODCALLTYPE *GetMinThreads )( 
            IHostIoCompletionManager * This,
            /* [out] */ DWORD *pdwMinIOCompletionThreads);
        
        END_INTERFACE
    } IHostIoCompletionManagerVtbl;

    interface IHostIoCompletionManager
    {
        CONST_VTBL struct IHostIoCompletionManagerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHostIoCompletionManager_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IHostIoCompletionManager_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IHostIoCompletionManager_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IHostIoCompletionManager_CreateIoCompletionPort(This,phPort)	\
    ( (This)->lpVtbl -> CreateIoCompletionPort(This,phPort) ) 

#define IHostIoCompletionManager_CloseIoCompletionPort(This,hPort)	\
    ( (This)->lpVtbl -> CloseIoCompletionPort(This,hPort) ) 

#define IHostIoCompletionManager_SetMaxThreads(This,dwMaxIOCompletionThreads)	\
    ( (This)->lpVtbl -> SetMaxThreads(This,dwMaxIOCompletionThreads) ) 

#define IHostIoCompletionManager_GetMaxThreads(This,pdwMaxIOCompletionThreads)	\
    ( (This)->lpVtbl -> GetMaxThreads(This,pdwMaxIOCompletionThreads) ) 

#define IHostIoCompletionManager_GetAvailableThreads(This,pdwAvailableIOCompletionThreads)	\
    ( (This)->lpVtbl -> GetAvailableThreads(This,pdwAvailableIOCompletionThreads) ) 

#define IHostIoCompletionManager_GetHostOverlappedSize(This,pcbSize)	\
    ( (This)->lpVtbl -> GetHostOverlappedSize(This,pcbSize) ) 

#define IHostIoCompletionManager_SetCLRIoCompletionManager(This,pManager)	\
    ( (This)->lpVtbl -> SetCLRIoCompletionManager(This,pManager) ) 

#define IHostIoCompletionManager_InitializeHostOverlapped(This,pvOverlapped)	\
    ( (This)->lpVtbl -> InitializeHostOverlapped(This,pvOverlapped) ) 

#define IHostIoCompletionManager_Bind(This,hPort,hHandle)	\
    ( (This)->lpVtbl -> Bind(This,hPort,hHandle) ) 

#define IHostIoCompletionManager_SetMinThreads(This,dwMinIOCompletionThreads)	\
    ( (This)->lpVtbl -> SetMinThreads(This,dwMinIOCompletionThreads) ) 

#define IHostIoCompletionManager_GetMinThreads(This,pdwMinIOCompletionThreads)	\
    ( (This)->lpVtbl -> GetMinThreads(This,pdwMinIOCompletionThreads) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IHostIoCompletionManager_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_mscoree_0000_0020 */
/* [local] */ 

typedef /* [public][public] */ 
enum __MIDL___MIDL_itf_mscoree_0000_0020_0001
    {	eSymbolReadingNever	= 0,
	eSymbolReadingAlways	= 1,
	eSymbolReadingFullTrustOnly	= 2
    } 	ESymbolReadingPolicy;



extern RPC_IF_HANDLE __MIDL_itf_mscoree_0000_0020_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_mscoree_0000_0020_v0_0_s_ifspec;

#ifndef __ICLRDebugManager_INTERFACE_DEFINED__
#define __ICLRDebugManager_INTERFACE_DEFINED__

/* interface ICLRDebugManager */
/* [object][local][unique][helpstring][version][uuid] */ 


EXTERN_C const IID IID_ICLRDebugManager;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("00DCAEC6-2AC0-43a9-ACF9-1E36C139B10D")
    ICLRDebugManager : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE BeginConnection( 
            /* [in] */ CONNID dwConnectionId,
            /* [string][in] */ 
            __in  wchar_t *szConnectionName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetConnectionTasks( 
            /* [in] */ CONNID id,
            /* [in] */ DWORD dwCount,
            /* [size_is][in] */ ICLRTask **ppCLRTask) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EndConnection( 
            /* [in] */ CONNID dwConnectionId) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetDacl( 
            /* [in] */ PACL pacl) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDacl( 
            /* [out] */ PACL *pacl) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsDebuggerAttached( 
            /* [out] */ BOOL *pbAttached) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetSymbolReadingPolicy( 
            /* [in] */ ESymbolReadingPolicy policy) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ICLRDebugManagerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICLRDebugManager * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICLRDebugManager * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICLRDebugManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *BeginConnection )( 
            ICLRDebugManager * This,
            /* [in] */ CONNID dwConnectionId,
            /* [string][in] */ 
            __in  wchar_t *szConnectionName);
        
        HRESULT ( STDMETHODCALLTYPE *SetConnectionTasks )( 
            ICLRDebugManager * This,
            /* [in] */ CONNID id,
            /* [in] */ DWORD dwCount,
            /* [size_is][in] */ ICLRTask **ppCLRTask);
        
        HRESULT ( STDMETHODCALLTYPE *EndConnection )( 
            ICLRDebugManager * This,
            /* [in] */ CONNID dwConnectionId);
        
        HRESULT ( STDMETHODCALLTYPE *SetDacl )( 
            ICLRDebugManager * This,
            /* [in] */ PACL pacl);
        
        HRESULT ( STDMETHODCALLTYPE *GetDacl )( 
            ICLRDebugManager * This,
            /* [out] */ PACL *pacl);
        
        HRESULT ( STDMETHODCALLTYPE *IsDebuggerAttached )( 
            ICLRDebugManager * This,
            /* [out] */ BOOL *pbAttached);
        
        HRESULT ( STDMETHODCALLTYPE *SetSymbolReadingPolicy )( 
            ICLRDebugManager * This,
            /* [in] */ ESymbolReadingPolicy policy);
        
        END_INTERFACE
    } ICLRDebugManagerVtbl;

    interface ICLRDebugManager
    {
        CONST_VTBL struct ICLRDebugManagerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICLRDebugManager_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICLRDebugManager_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICLRDebugManager_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICLRDebugManager_BeginConnection(This,dwConnectionId,szConnectionName)	\
    ( (This)->lpVtbl -> BeginConnection(This,dwConnectionId,szConnectionName) ) 

#define ICLRDebugManager_SetConnectionTasks(This,id,dwCount,ppCLRTask)	\
    ( (This)->lpVtbl -> SetConnectionTasks(This,id,dwCount,ppCLRTask) ) 

#define ICLRDebugManager_EndConnection(This,dwConnectionId)	\
    ( (This)->lpVtbl -> EndConnection(This,dwConnectionId) ) 

#define ICLRDebugManager_SetDacl(This,pacl)	\
    ( (This)->lpVtbl -> SetDacl(This,pacl) ) 

#define ICLRDebugManager_GetDacl(This,pacl)	\
    ( (This)->lpVtbl -> GetDacl(This,pacl) ) 

#define ICLRDebugManager_IsDebuggerAttached(This,pbAttached)	\
    ( (This)->lpVtbl -> IsDebuggerAttached(This,pbAttached) ) 

#define ICLRDebugManager_SetSymbolReadingPolicy(This,policy)	\
    ( (This)->lpVtbl -> SetSymbolReadingPolicy(This,policy) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICLRDebugManager_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_mscoree_0000_0021 */
/* [local] */ 

typedef /* [public][public] */ 
enum __MIDL___MIDL_itf_mscoree_0000_0021_0001
    {	DUMP_FLAVOR_Mini	= 0,
	DUMP_FLAVOR_CriticalCLRState	= 1,
	DUMP_FLAVOR_NonHeapCLRState	= 2,
	DUMP_FLAVOR_Default	= DUMP_FLAVOR_Mini
    } 	ECustomDumpFlavor;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_mscoree_0000_0021_0002
    {	DUMP_ITEM_None	= 0
    } 	ECustomDumpItemKind;

typedef /* [public][public] */ struct __MIDL___MIDL_itf_mscoree_0000_0021_0003
    {
    ECustomDumpItemKind itemKind;
    union 
        {
        UINT_PTR pReserved;
        } 	;
    } 	CustomDumpItem;

typedef struct _BucketParameters
    {
    BOOL fInited;
    WCHAR pszEventTypeName[ 255 ];
    WCHAR pszParams[ 10 ][ 255 ];
    } 	BucketParameters;



extern RPC_IF_HANDLE __MIDL_itf_mscoree_0000_0021_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_mscoree_0000_0021_v0_0_s_ifspec;

#ifndef __ICLRErrorReportingManager_INTERFACE_DEFINED__
#define __ICLRErrorReportingManager_INTERFACE_DEFINED__

/* interface ICLRErrorReportingManager */
/* [object][local][unique][helpstring][version][uuid] */ 


EXTERN_C const IID IID_ICLRErrorReportingManager;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("980D2F1A-BF79-4c08-812A-BB9778928F78")
    ICLRErrorReportingManager : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetBucketParametersForCurrentException( 
            /* [out] */ BucketParameters *pParams) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE BeginCustomDump( 
            /* [in] */ ECustomDumpFlavor dwFlavor,
            /* [in] */ DWORD dwNumItems,
            /* [length_is][size_is][in] */ CustomDumpItem *items,
            DWORD dwReserved) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EndCustomDump( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ICLRErrorReportingManagerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICLRErrorReportingManager * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICLRErrorReportingManager * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICLRErrorReportingManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetBucketParametersForCurrentException )( 
            ICLRErrorReportingManager * This,
            /* [out] */ BucketParameters *pParams);
        
        HRESULT ( STDMETHODCALLTYPE *BeginCustomDump )( 
            ICLRErrorReportingManager * This,
            /* [in] */ ECustomDumpFlavor dwFlavor,
            /* [in] */ DWORD dwNumItems,
            /* [length_is][size_is][in] */ CustomDumpItem *items,
            DWORD dwReserved);
        
        HRESULT ( STDMETHODCALLTYPE *EndCustomDump )( 
            ICLRErrorReportingManager * This);
        
        END_INTERFACE
    } ICLRErrorReportingManagerVtbl;

    interface ICLRErrorReportingManager
    {
        CONST_VTBL struct ICLRErrorReportingManagerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICLRErrorReportingManager_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICLRErrorReportingManager_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICLRErrorReportingManager_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICLRErrorReportingManager_GetBucketParametersForCurrentException(This,pParams)	\
    ( (This)->lpVtbl -> GetBucketParametersForCurrentException(This,pParams) ) 

#define ICLRErrorReportingManager_BeginCustomDump(This,dwFlavor,dwNumItems,items,dwReserved)	\
    ( (This)->lpVtbl -> BeginCustomDump(This,dwFlavor,dwNumItems,items,dwReserved) ) 

#define ICLRErrorReportingManager_EndCustomDump(This)	\
    ( (This)->lpVtbl -> EndCustomDump(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICLRErrorReportingManager_INTERFACE_DEFINED__ */


#ifndef __IHostCrst_INTERFACE_DEFINED__
#define __IHostCrst_INTERFACE_DEFINED__

/* interface IHostCrst */
/* [object][local][unique][helpstring][version][uuid] */ 


EXTERN_C const IID IID_IHostCrst;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6DF710A6-26A4-4a65-8CD5-7237B8BDA8DC")
    IHostCrst : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Enter( 
            /* [in] */ DWORD option) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Leave( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE TryEnter( 
            /* [in] */ DWORD option,
            /* [out] */ BOOL *pbSucceeded) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetSpinCount( 
            /* [in] */ DWORD dwSpinCount) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHostCrstVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHostCrst * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHostCrst * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHostCrst * This);
        
        HRESULT ( STDMETHODCALLTYPE *Enter )( 
            IHostCrst * This,
            /* [in] */ DWORD option);
        
        HRESULT ( STDMETHODCALLTYPE *Leave )( 
            IHostCrst * This);
        
        HRESULT ( STDMETHODCALLTYPE *TryEnter )( 
            IHostCrst * This,
            /* [in] */ DWORD option,
            /* [out] */ BOOL *pbSucceeded);
        
        HRESULT ( STDMETHODCALLTYPE *SetSpinCount )( 
            IHostCrst * This,
            /* [in] */ DWORD dwSpinCount);
        
        END_INTERFACE
    } IHostCrstVtbl;

    interface IHostCrst
    {
        CONST_VTBL struct IHostCrstVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHostCrst_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IHostCrst_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IHostCrst_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IHostCrst_Enter(This,option)	\
    ( (This)->lpVtbl -> Enter(This,option) ) 

#define IHostCrst_Leave(This)	\
    ( (This)->lpVtbl -> Leave(This) ) 

#define IHostCrst_TryEnter(This,option,pbSucceeded)	\
    ( (This)->lpVtbl -> TryEnter(This,option,pbSucceeded) ) 

#define IHostCrst_SetSpinCount(This,dwSpinCount)	\
    ( (This)->lpVtbl -> SetSpinCount(This,dwSpinCount) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IHostCrst_INTERFACE_DEFINED__ */


#ifndef __IHostAutoEvent_INTERFACE_DEFINED__
#define __IHostAutoEvent_INTERFACE_DEFINED__

/* interface IHostAutoEvent */
/* [object][local][unique][helpstring][version][uuid] */ 


EXTERN_C const IID IID_IHostAutoEvent;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("50B0CFCE-4063-4278-9673-E5CB4ED0BDB8")
    IHostAutoEvent : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Wait( 
            /* [in] */ DWORD dwMilliseconds,
            /* [in] */ DWORD option) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Set( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHostAutoEventVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHostAutoEvent * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHostAutoEvent * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHostAutoEvent * This);
        
        HRESULT ( STDMETHODCALLTYPE *Wait )( 
            IHostAutoEvent * This,
            /* [in] */ DWORD dwMilliseconds,
            /* [in] */ DWORD option);
        
        HRESULT ( STDMETHODCALLTYPE *Set )( 
            IHostAutoEvent * This);
        
        END_INTERFACE
    } IHostAutoEventVtbl;

    interface IHostAutoEvent
    {
        CONST_VTBL struct IHostAutoEventVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHostAutoEvent_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IHostAutoEvent_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IHostAutoEvent_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IHostAutoEvent_Wait(This,dwMilliseconds,option)	\
    ( (This)->lpVtbl -> Wait(This,dwMilliseconds,option) ) 

#define IHostAutoEvent_Set(This)	\
    ( (This)->lpVtbl -> Set(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IHostAutoEvent_INTERFACE_DEFINED__ */


#ifndef __IHostManualEvent_INTERFACE_DEFINED__
#define __IHostManualEvent_INTERFACE_DEFINED__

/* interface IHostManualEvent */
/* [object][local][unique][helpstring][version][uuid] */ 


EXTERN_C const IID IID_IHostManualEvent;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1BF4EC38-AFFE-4fb9-85A6-525268F15B54")
    IHostManualEvent : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Wait( 
            /* [in] */ DWORD dwMilliseconds,
            /* [in] */ DWORD option) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Set( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHostManualEventVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHostManualEvent * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHostManualEvent * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHostManualEvent * This);
        
        HRESULT ( STDMETHODCALLTYPE *Wait )( 
            IHostManualEvent * This,
            /* [in] */ DWORD dwMilliseconds,
            /* [in] */ DWORD option);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IHostManualEvent * This);
        
        HRESULT ( STDMETHODCALLTYPE *Set )( 
            IHostManualEvent * This);
        
        END_INTERFACE
    } IHostManualEventVtbl;

    interface IHostManualEvent
    {
        CONST_VTBL struct IHostManualEventVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHostManualEvent_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IHostManualEvent_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IHostManualEvent_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IHostManualEvent_Wait(This,dwMilliseconds,option)	\
    ( (This)->lpVtbl -> Wait(This,dwMilliseconds,option) ) 

#define IHostManualEvent_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define IHostManualEvent_Set(This)	\
    ( (This)->lpVtbl -> Set(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IHostManualEvent_INTERFACE_DEFINED__ */


#ifndef __IHostSemaphore_INTERFACE_DEFINED__
#define __IHostSemaphore_INTERFACE_DEFINED__

/* interface IHostSemaphore */
/* [object][local][unique][helpstring][version][uuid] */ 


EXTERN_C const IID IID_IHostSemaphore;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("855efd47-cc09-463a-a97d-16acab882661")
    IHostSemaphore : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Wait( 
            /* [in] */ DWORD dwMilliseconds,
            /* [in] */ DWORD option) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ReleaseSemaphore( 
            /* [in] */ LONG lReleaseCount,
            /* [out] */ LONG *lpPreviousCount) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHostSemaphoreVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHostSemaphore * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHostSemaphore * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHostSemaphore * This);
        
        HRESULT ( STDMETHODCALLTYPE *Wait )( 
            IHostSemaphore * This,
            /* [in] */ DWORD dwMilliseconds,
            /* [in] */ DWORD option);
        
        HRESULT ( STDMETHODCALLTYPE *ReleaseSemaphore )( 
            IHostSemaphore * This,
            /* [in] */ LONG lReleaseCount,
            /* [out] */ LONG *lpPreviousCount);
        
        END_INTERFACE
    } IHostSemaphoreVtbl;

    interface IHostSemaphore
    {
        CONST_VTBL struct IHostSemaphoreVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHostSemaphore_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IHostSemaphore_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IHostSemaphore_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IHostSemaphore_Wait(This,dwMilliseconds,option)	\
    ( (This)->lpVtbl -> Wait(This,dwMilliseconds,option) ) 

#define IHostSemaphore_ReleaseSemaphore(This,lReleaseCount,lpPreviousCount)	\
    ( (This)->lpVtbl -> ReleaseSemaphore(This,lReleaseCount,lpPreviousCount) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IHostSemaphore_INTERFACE_DEFINED__ */


#ifndef __ICLRSyncManager_INTERFACE_DEFINED__
#define __ICLRSyncManager_INTERFACE_DEFINED__

/* interface ICLRSyncManager */
/* [object][local][unique][helpstring][version][uuid] */ 


EXTERN_C const IID IID_ICLRSyncManager;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("55FF199D-AD21-48f9-A16C-F24EBBB8727D")
    ICLRSyncManager : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetMonitorOwner( 
            /* [in] */ SIZE_T Cookie,
            /* [out] */ IHostTask **ppOwnerHostTask) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateRWLockOwnerIterator( 
            /* [in] */ SIZE_T Cookie,
            /* [out] */ SIZE_T *pIterator) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetRWLockOwnerNext( 
            /* [in] */ SIZE_T Iterator,
            /* [out] */ IHostTask **ppOwnerHostTask) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DeleteRWLockOwnerIterator( 
            /* [in] */ SIZE_T Iterator) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ICLRSyncManagerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICLRSyncManager * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICLRSyncManager * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICLRSyncManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetMonitorOwner )( 
            ICLRSyncManager * This,
            /* [in] */ SIZE_T Cookie,
            /* [out] */ IHostTask **ppOwnerHostTask);
        
        HRESULT ( STDMETHODCALLTYPE *CreateRWLockOwnerIterator )( 
            ICLRSyncManager * This,
            /* [in] */ SIZE_T Cookie,
            /* [out] */ SIZE_T *pIterator);
        
        HRESULT ( STDMETHODCALLTYPE *GetRWLockOwnerNext )( 
            ICLRSyncManager * This,
            /* [in] */ SIZE_T Iterator,
            /* [out] */ IHostTask **ppOwnerHostTask);
        
        HRESULT ( STDMETHODCALLTYPE *DeleteRWLockOwnerIterator )( 
            ICLRSyncManager * This,
            /* [in] */ SIZE_T Iterator);
        
        END_INTERFACE
    } ICLRSyncManagerVtbl;

    interface ICLRSyncManager
    {
        CONST_VTBL struct ICLRSyncManagerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICLRSyncManager_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICLRSyncManager_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICLRSyncManager_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICLRSyncManager_GetMonitorOwner(This,Cookie,ppOwnerHostTask)	\
    ( (This)->lpVtbl -> GetMonitorOwner(This,Cookie,ppOwnerHostTask) ) 

#define ICLRSyncManager_CreateRWLockOwnerIterator(This,Cookie,pIterator)	\
    ( (This)->lpVtbl -> CreateRWLockOwnerIterator(This,Cookie,pIterator) ) 

#define ICLRSyncManager_GetRWLockOwnerNext(This,Iterator,ppOwnerHostTask)	\
    ( (This)->lpVtbl -> GetRWLockOwnerNext(This,Iterator,ppOwnerHostTask) ) 

#define ICLRSyncManager_DeleteRWLockOwnerIterator(This,Iterator)	\
    ( (This)->lpVtbl -> DeleteRWLockOwnerIterator(This,Iterator) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICLRSyncManager_INTERFACE_DEFINED__ */


#ifndef __IHostSyncManager_INTERFACE_DEFINED__
#define __IHostSyncManager_INTERFACE_DEFINED__

/* interface IHostSyncManager */
/* [object][local][unique][helpstring][version][uuid] */ 


EXTERN_C const IID IID_IHostSyncManager;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("234330c7-5f10-4f20-9615-5122dab7a0ac")
    IHostSyncManager : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetCLRSyncManager( 
            /* [in] */ ICLRSyncManager *pManager) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateCrst( 
            /* [out] */ IHostCrst **ppCrst) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateCrstWithSpinCount( 
            /* [in] */ DWORD dwSpinCount,
            /* [out] */ IHostCrst **ppCrst) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateAutoEvent( 
            /* [out] */ IHostAutoEvent **ppEvent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateManualEvent( 
            /* [in] */ BOOL bInitialState,
            /* [out] */ IHostManualEvent **ppEvent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateMonitorEvent( 
            /* [in] */ SIZE_T Cookie,
            /* [out] */ IHostAutoEvent **ppEvent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateRWLockWriterEvent( 
            /* [in] */ SIZE_T Cookie,
            /* [out] */ IHostAutoEvent **ppEvent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateRWLockReaderEvent( 
            /* [in] */ BOOL bInitialState,
            /* [in] */ SIZE_T Cookie,
            /* [out] */ IHostManualEvent **ppEvent) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateSemaphore( 
            /* [in] */ DWORD dwInitial,
            /* [in] */ DWORD dwMax,
            /* [out] */ IHostSemaphore **ppSemaphore) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHostSyncManagerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHostSyncManager * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHostSyncManager * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHostSyncManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetCLRSyncManager )( 
            IHostSyncManager * This,
            /* [in] */ ICLRSyncManager *pManager);
        
        HRESULT ( STDMETHODCALLTYPE *CreateCrst )( 
            IHostSyncManager * This,
            /* [out] */ IHostCrst **ppCrst);
        
        HRESULT ( STDMETHODCALLTYPE *CreateCrstWithSpinCount )( 
            IHostSyncManager * This,
            /* [in] */ DWORD dwSpinCount,
            /* [out] */ IHostCrst **ppCrst);
        
        HRESULT ( STDMETHODCALLTYPE *CreateAutoEvent )( 
            IHostSyncManager * This,
            /* [out] */ IHostAutoEvent **ppEvent);
        
        HRESULT ( STDMETHODCALLTYPE *CreateManualEvent )( 
            IHostSyncManager * This,
            /* [in] */ BOOL bInitialState,
            /* [out] */ IHostManualEvent **ppEvent);
        
        HRESULT ( STDMETHODCALLTYPE *CreateMonitorEvent )( 
            IHostSyncManager * This,
            /* [in] */ SIZE_T Cookie,
            /* [out] */ IHostAutoEvent **ppEvent);
        
        HRESULT ( STDMETHODCALLTYPE *CreateRWLockWriterEvent )( 
            IHostSyncManager * This,
            /* [in] */ SIZE_T Cookie,
            /* [out] */ IHostAutoEvent **ppEvent);
        
        HRESULT ( STDMETHODCALLTYPE *CreateRWLockReaderEvent )( 
            IHostSyncManager * This,
            /* [in] */ BOOL bInitialState,
            /* [in] */ SIZE_T Cookie,
            /* [out] */ IHostManualEvent **ppEvent);
        
        HRESULT ( STDMETHODCALLTYPE *CreateSemaphore )( 
            IHostSyncManager * This,
            /* [in] */ DWORD dwInitial,
            /* [in] */ DWORD dwMax,
            /* [out] */ IHostSemaphore **ppSemaphore);
        
        END_INTERFACE
    } IHostSyncManagerVtbl;

    interface IHostSyncManager
    {
        CONST_VTBL struct IHostSyncManagerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHostSyncManager_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IHostSyncManager_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IHostSyncManager_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IHostSyncManager_SetCLRSyncManager(This,pManager)	\
    ( (This)->lpVtbl -> SetCLRSyncManager(This,pManager) ) 

#define IHostSyncManager_CreateCrst(This,ppCrst)	\
    ( (This)->lpVtbl -> CreateCrst(This,ppCrst) ) 

#define IHostSyncManager_CreateCrstWithSpinCount(This,dwSpinCount,ppCrst)	\
    ( (This)->lpVtbl -> CreateCrstWithSpinCount(This,dwSpinCount,ppCrst) ) 

#define IHostSyncManager_CreateAutoEvent(This,ppEvent)	\
    ( (This)->lpVtbl -> CreateAutoEvent(This,ppEvent) ) 

#define IHostSyncManager_CreateManualEvent(This,bInitialState,ppEvent)	\
    ( (This)->lpVtbl -> CreateManualEvent(This,bInitialState,ppEvent) ) 

#define IHostSyncManager_CreateMonitorEvent(This,Cookie,ppEvent)	\
    ( (This)->lpVtbl -> CreateMonitorEvent(This,Cookie,ppEvent) ) 

#define IHostSyncManager_CreateRWLockWriterEvent(This,Cookie,ppEvent)	\
    ( (This)->lpVtbl -> CreateRWLockWriterEvent(This,Cookie,ppEvent) ) 

#define IHostSyncManager_CreateRWLockReaderEvent(This,bInitialState,Cookie,ppEvent)	\
    ( (This)->lpVtbl -> CreateRWLockReaderEvent(This,bInitialState,Cookie,ppEvent) ) 

#define IHostSyncManager_CreateSemaphore(This,dwInitial,dwMax,ppSemaphore)	\
    ( (This)->lpVtbl -> CreateSemaphore(This,dwInitial,dwMax,ppSemaphore) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IHostSyncManager_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_mscoree_0000_0028 */
/* [local] */ 

typedef /* [public][public][public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_mscoree_0000_0028_0001
    {	OPR_ThreadAbort	= 0,
	OPR_ThreadRudeAbortInNonCriticalRegion	= ( OPR_ThreadAbort + 1 ) ,
	OPR_ThreadRudeAbortInCriticalRegion	= ( OPR_ThreadRudeAbortInNonCriticalRegion + 1 ) ,
	OPR_AppDomainUnload	= ( OPR_ThreadRudeAbortInCriticalRegion + 1 ) ,
	OPR_AppDomainRudeUnload	= ( OPR_AppDomainUnload + 1 ) ,
	OPR_ProcessExit	= ( OPR_AppDomainRudeUnload + 1 ) ,
	OPR_FinalizerRun	= ( OPR_ProcessExit + 1 ) ,
	MaxClrOperation	= ( OPR_FinalizerRun + 1 ) 
    } 	EClrOperation;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_mscoree_0000_0028_0002
    {	FAIL_NonCriticalResource	= 0,
	FAIL_CriticalResource	= ( FAIL_NonCriticalResource + 1 ) ,
	FAIL_FatalRuntime	= ( FAIL_CriticalResource + 1 ) ,
	FAIL_OrphanedLock	= ( FAIL_FatalRuntime + 1 ) ,
	FAIL_StackOverflow	= ( FAIL_OrphanedLock + 1 ) ,
	FAIL_AccessViolation	= ( FAIL_StackOverflow + 1 ) ,
	FAIL_CodeContract	= ( FAIL_AccessViolation + 1 ) ,
	MaxClrFailure	= ( FAIL_CodeContract + 1 ) 
    } 	EClrFailure;

typedef /* [public][public] */ 
enum __MIDL___MIDL_itf_mscoree_0000_0028_0003
    {	eRuntimeDeterminedPolicy	= 0,
	eHostDeterminedPolicy	= ( eRuntimeDeterminedPolicy + 1 ) 
    } 	EClrUnhandledException;

typedef /* [public][public][public][public][public][public][public][public] */ 
enum __MIDL___MIDL_itf_mscoree_0000_0028_0004
    {	eNoAction	= 0,
	eThrowException	= ( eNoAction + 1 ) ,
	eAbortThread	= ( eThrowException + 1 ) ,
	eRudeAbortThread	= ( eAbortThread + 1 ) ,
	eUnloadAppDomain	= ( eRudeAbortThread + 1 ) ,
	eRudeUnloadAppDomain	= ( eUnloadAppDomain + 1 ) ,
	eExitProcess	= ( eRudeUnloadAppDomain + 1 ) ,
	eFastExitProcess	= ( eExitProcess + 1 ) ,
	eRudeExitProcess	= ( eFastExitProcess + 1 ) ,
	eDisableRuntime	= ( eRudeExitProcess + 1 ) ,
	MaxPolicyAction	= ( eDisableRuntime + 1 ) 
    } 	EPolicyAction;



extern RPC_IF_HANDLE __MIDL_itf_mscoree_0000_0028_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_mscoree_0000_0028_v0_0_s_ifspec;

#ifndef __ICLRPolicyManager_INTERFACE_DEFINED__
#define __ICLRPolicyManager_INTERFACE_DEFINED__

/* interface ICLRPolicyManager */
/* [object][local][unique][helpstring][version][uuid] */ 


EXTERN_C const IID IID_ICLRPolicyManager;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7D290010-D781-45da-A6F8-AA5D711A730E")
    ICLRPolicyManager : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetDefaultAction( 
            /* [in] */ EClrOperation operation,
            /* [in] */ EPolicyAction action) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetTimeout( 
            /* [in] */ EClrOperation operation,
            /* [in] */ DWORD dwMilliseconds) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetActionOnTimeout( 
            /* [in] */ EClrOperation operation,
            /* [in] */ EPolicyAction action) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetTimeoutAndAction( 
            /* [in] */ EClrOperation operation,
            /* [in] */ DWORD dwMilliseconds,
            /* [in] */ EPolicyAction action) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetActionOnFailure( 
            /* [in] */ EClrFailure failure,
            /* [in] */ EPolicyAction action) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetUnhandledExceptionPolicy( 
            /* [in] */ EClrUnhandledException policy) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ICLRPolicyManagerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICLRPolicyManager * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICLRPolicyManager * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICLRPolicyManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetDefaultAction )( 
            ICLRPolicyManager * This,
            /* [in] */ EClrOperation operation,
            /* [in] */ EPolicyAction action);
        
        HRESULT ( STDMETHODCALLTYPE *SetTimeout )( 
            ICLRPolicyManager * This,
            /* [in] */ EClrOperation operation,
            /* [in] */ DWORD dwMilliseconds);
        
        HRESULT ( STDMETHODCALLTYPE *SetActionOnTimeout )( 
            ICLRPolicyManager * This,
            /* [in] */ EClrOperation operation,
            /* [in] */ EPolicyAction action);
        
        HRESULT ( STDMETHODCALLTYPE *SetTimeoutAndAction )( 
            ICLRPolicyManager * This,
            /* [in] */ EClrOperation operation,
            /* [in] */ DWORD dwMilliseconds,
            /* [in] */ EPolicyAction action);
        
        HRESULT ( STDMETHODCALLTYPE *SetActionOnFailure )( 
            ICLRPolicyManager * This,
            /* [in] */ EClrFailure failure,
            /* [in] */ EPolicyAction action);
        
        HRESULT ( STDMETHODCALLTYPE *SetUnhandledExceptionPolicy )( 
            ICLRPolicyManager * This,
            /* [in] */ EClrUnhandledException policy);
        
        END_INTERFACE
    } ICLRPolicyManagerVtbl;

    interface ICLRPolicyManager
    {
        CONST_VTBL struct ICLRPolicyManagerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICLRPolicyManager_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICLRPolicyManager_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICLRPolicyManager_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICLRPolicyManager_SetDefaultAction(This,operation,action)	\
    ( (This)->lpVtbl -> SetDefaultAction(This,operation,action) ) 

#define ICLRPolicyManager_SetTimeout(This,operation,dwMilliseconds)	\
    ( (This)->lpVtbl -> SetTimeout(This,operation,dwMilliseconds) ) 

#define ICLRPolicyManager_SetActionOnTimeout(This,operation,action)	\
    ( (This)->lpVtbl -> SetActionOnTimeout(This,operation,action) ) 

#define ICLRPolicyManager_SetTimeoutAndAction(This,operation,dwMilliseconds,action)	\
    ( (This)->lpVtbl -> SetTimeoutAndAction(This,operation,dwMilliseconds,action) ) 

#define ICLRPolicyManager_SetActionOnFailure(This,failure,action)	\
    ( (This)->lpVtbl -> SetActionOnFailure(This,failure,action) ) 

#define ICLRPolicyManager_SetUnhandledExceptionPolicy(This,policy)	\
    ( (This)->lpVtbl -> SetUnhandledExceptionPolicy(This,policy) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICLRPolicyManager_INTERFACE_DEFINED__ */


#ifndef __IHostPolicyManager_INTERFACE_DEFINED__
#define __IHostPolicyManager_INTERFACE_DEFINED__

/* interface IHostPolicyManager */
/* [object][local][unique][helpstring][version][uuid] */ 


EXTERN_C const IID IID_IHostPolicyManager;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7AE49844-B1E3-4683-BA7C-1E8212EA3B79")
    IHostPolicyManager : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnDefaultAction( 
            /* [in] */ EClrOperation operation,
            /* [in] */ EPolicyAction action) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnTimeout( 
            /* [in] */ EClrOperation operation,
            /* [in] */ EPolicyAction action) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnFailure( 
            /* [in] */ EClrFailure failure,
            /* [in] */ EPolicyAction action) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHostPolicyManagerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHostPolicyManager * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHostPolicyManager * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHostPolicyManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnDefaultAction )( 
            IHostPolicyManager * This,
            /* [in] */ EClrOperation operation,
            /* [in] */ EPolicyAction action);
        
        HRESULT ( STDMETHODCALLTYPE *OnTimeout )( 
            IHostPolicyManager * This,
            /* [in] */ EClrOperation operation,
            /* [in] */ EPolicyAction action);
        
        HRESULT ( STDMETHODCALLTYPE *OnFailure )( 
            IHostPolicyManager * This,
            /* [in] */ EClrFailure failure,
            /* [in] */ EPolicyAction action);
        
        END_INTERFACE
    } IHostPolicyManagerVtbl;

    interface IHostPolicyManager
    {
        CONST_VTBL struct IHostPolicyManagerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHostPolicyManager_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IHostPolicyManager_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IHostPolicyManager_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IHostPolicyManager_OnDefaultAction(This,operation,action)	\
    ( (This)->lpVtbl -> OnDefaultAction(This,operation,action) ) 

#define IHostPolicyManager_OnTimeout(This,operation,action)	\
    ( (This)->lpVtbl -> OnTimeout(This,operation,action) ) 

#define IHostPolicyManager_OnFailure(This,failure,action)	\
    ( (This)->lpVtbl -> OnFailure(This,failure,action) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IHostPolicyManager_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_mscoree_0000_0030 */
/* [local] */ 

typedef /* [public][public][public][public] */ 
enum __MIDL___MIDL_itf_mscoree_0000_0030_0001
    {	Event_DomainUnload	= 0,
	Event_ClrDisabled	= ( Event_DomainUnload + 1 ) ,
	Event_MDAFired	= ( Event_ClrDisabled + 1 ) ,
	Event_StackOverflow	= ( Event_MDAFired + 1 ) ,
	MaxClrEvent	= ( Event_StackOverflow + 1 ) 
    } 	EClrEvent;

typedef struct _MDAInfo
    {
    LPCWSTR lpMDACaption;
    LPCWSTR lpMDAMessage;
    LPCWSTR lpStackTrace;
    } 	MDAInfo;

typedef /* [public] */ 
enum __MIDL___MIDL_itf_mscoree_0000_0030_0002
    {	SO_Managed	= 0,
	SO_ClrEngine	= ( SO_Managed + 1 ) ,
	SO_Other	= ( SO_ClrEngine + 1 ) 
    } 	StackOverflowType;

typedef struct _StackOverflowInfo
{
    StackOverflowType soType;
    EXCEPTION_POINTERS *pExceptionInfo;
} StackOverflowInfo;


extern RPC_IF_HANDLE __MIDL_itf_mscoree_0000_0030_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_mscoree_0000_0030_v0_0_s_ifspec;

#ifndef __IActionOnCLREvent_INTERFACE_DEFINED__
#define __IActionOnCLREvent_INTERFACE_DEFINED__

/* interface IActionOnCLREvent */
/* [object][local][unique][helpstring][version][uuid] */ 


EXTERN_C const IID IID_IActionOnCLREvent;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("607BE24B-D91B-4E28-A242-61871CE56E35")
    IActionOnCLREvent : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnEvent( 
            /* [in] */ EClrEvent event,
            /* [in] */ PVOID data) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IActionOnCLREventVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IActionOnCLREvent * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IActionOnCLREvent * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IActionOnCLREvent * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnEvent )( 
            IActionOnCLREvent * This,
            /* [in] */ EClrEvent event,
            /* [in] */ PVOID data);
        
        END_INTERFACE
    } IActionOnCLREventVtbl;

    interface IActionOnCLREvent
    {
        CONST_VTBL struct IActionOnCLREventVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IActionOnCLREvent_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IActionOnCLREvent_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IActionOnCLREvent_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IActionOnCLREvent_OnEvent(This,event,data)	\
    ( (This)->lpVtbl -> OnEvent(This,event,data) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IActionOnCLREvent_INTERFACE_DEFINED__ */


#ifndef __ICLROnEventManager_INTERFACE_DEFINED__
#define __ICLROnEventManager_INTERFACE_DEFINED__

/* interface ICLROnEventManager */
/* [object][local][unique][helpstring][version][uuid] */ 


EXTERN_C const IID IID_ICLROnEventManager;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1D0E0132-E64F-493D-9260-025C0E32C175")
    ICLROnEventManager : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE RegisterActionOnEvent( 
            /* [in] */ EClrEvent event,
            /* [in] */ IActionOnCLREvent *pAction) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UnregisterActionOnEvent( 
            /* [in] */ EClrEvent event,
            /* [in] */ IActionOnCLREvent *pAction) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ICLROnEventManagerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICLROnEventManager * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICLROnEventManager * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICLROnEventManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *RegisterActionOnEvent )( 
            ICLROnEventManager * This,
            /* [in] */ EClrEvent event,
            /* [in] */ IActionOnCLREvent *pAction);
        
        HRESULT ( STDMETHODCALLTYPE *UnregisterActionOnEvent )( 
            ICLROnEventManager * This,
            /* [in] */ EClrEvent event,
            /* [in] */ IActionOnCLREvent *pAction);
        
        END_INTERFACE
    } ICLROnEventManagerVtbl;

    interface ICLROnEventManager
    {
        CONST_VTBL struct ICLROnEventManagerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICLROnEventManager_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICLROnEventManager_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICLROnEventManager_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICLROnEventManager_RegisterActionOnEvent(This,event,pAction)	\
    ( (This)->lpVtbl -> RegisterActionOnEvent(This,event,pAction) ) 

#define ICLROnEventManager_UnregisterActionOnEvent(This,event,pAction)	\
    ( (This)->lpVtbl -> UnregisterActionOnEvent(This,event,pAction) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICLROnEventManager_INTERFACE_DEFINED__ */


#ifndef __IHostGCManager_INTERFACE_DEFINED__
#define __IHostGCManager_INTERFACE_DEFINED__

/* interface IHostGCManager */
/* [object][local][unique][helpstring][version][uuid] */ 


EXTERN_C const IID IID_IHostGCManager;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5D4EC34E-F248-457B-B603-255FAABA0D21")
    IHostGCManager : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ThreadIsBlockingForSuspension( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SuspensionStarting( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SuspensionEnding( 
            DWORD Generation) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHostGCManagerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHostGCManager * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHostGCManager * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHostGCManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *ThreadIsBlockingForSuspension )( 
            IHostGCManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *SuspensionStarting )( 
            IHostGCManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *SuspensionEnding )( 
            IHostGCManager * This,
            DWORD Generation);
        
        END_INTERFACE
    } IHostGCManagerVtbl;

    interface IHostGCManager
    {
        CONST_VTBL struct IHostGCManagerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHostGCManager_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IHostGCManager_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IHostGCManager_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IHostGCManager_ThreadIsBlockingForSuspension(This)	\
    ( (This)->lpVtbl -> ThreadIsBlockingForSuspension(This) ) 

#define IHostGCManager_SuspensionStarting(This)	\
    ( (This)->lpVtbl -> SuspensionStarting(This) ) 

#define IHostGCManager_SuspensionEnding(This,Generation)	\
    ( (This)->lpVtbl -> SuspensionEnding(This,Generation) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IHostGCManager_INTERFACE_DEFINED__ */


#ifndef __ICLRGCManager_INTERFACE_DEFINED__
#define __ICLRGCManager_INTERFACE_DEFINED__

/* interface ICLRGCManager */
/* [object][local][unique][version][uuid] */ 


EXTERN_C const IID IID_ICLRGCManager;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("54D9007E-A8E2-4885-B7BF-F998DEEE4F2A")
    ICLRGCManager : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Collect( 
            /* [in] */ LONG Generation) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetStats( 
            /* [out][in] */ COR_GC_STATS *pStats) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetGCStartupLimits( 
            /* [in] */ DWORD SegmentSize,
            /* [in] */ DWORD MaxGen0Size) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ICLRGCManagerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICLRGCManager * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICLRGCManager * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICLRGCManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *Collect )( 
            ICLRGCManager * This,
            /* [in] */ LONG Generation);
        
        HRESULT ( STDMETHODCALLTYPE *GetStats )( 
            ICLRGCManager * This,
            /* [out][in] */ COR_GC_STATS *pStats);
        
        HRESULT ( STDMETHODCALLTYPE *SetGCStartupLimits )( 
            ICLRGCManager * This,
            /* [in] */ DWORD SegmentSize,
            /* [in] */ DWORD MaxGen0Size);
        
        END_INTERFACE
    } ICLRGCManagerVtbl;

    interface ICLRGCManager
    {
        CONST_VTBL struct ICLRGCManagerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICLRGCManager_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICLRGCManager_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICLRGCManager_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICLRGCManager_Collect(This,Generation)	\
    ( (This)->lpVtbl -> Collect(This,Generation) ) 

#define ICLRGCManager_GetStats(This,pStats)	\
    ( (This)->lpVtbl -> GetStats(This,pStats) ) 

#define ICLRGCManager_SetGCStartupLimits(This,SegmentSize,MaxGen0Size)	\
    ( (This)->lpVtbl -> SetGCStartupLimits(This,SegmentSize,MaxGen0Size) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICLRGCManager_INTERFACE_DEFINED__ */


#ifndef __ICLRAssemblyReferenceList_INTERFACE_DEFINED__
#define __ICLRAssemblyReferenceList_INTERFACE_DEFINED__

/* interface ICLRAssemblyReferenceList */
/* [local][unique][helpstring][uuid][version][object] */ 


EXTERN_C const IID IID_ICLRAssemblyReferenceList;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1b2c9750-2e66-4bda-8b44-0a642c5cd733")
    ICLRAssemblyReferenceList : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE IsStringAssemblyReferenceInList( 
            /* [in] */ LPCWSTR pwzAssemblyName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsAssemblyReferenceInList( 
            /* [in] */ IUnknown *pName) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ICLRAssemblyReferenceListVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICLRAssemblyReferenceList * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICLRAssemblyReferenceList * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICLRAssemblyReferenceList * This);
        
        HRESULT ( STDMETHODCALLTYPE *IsStringAssemblyReferenceInList )( 
            ICLRAssemblyReferenceList * This,
            /* [in] */ LPCWSTR pwzAssemblyName);
        
        HRESULT ( STDMETHODCALLTYPE *IsAssemblyReferenceInList )( 
            ICLRAssemblyReferenceList * This,
            /* [in] */ IUnknown *pName);
        
        END_INTERFACE
    } ICLRAssemblyReferenceListVtbl;

    interface ICLRAssemblyReferenceList
    {
        CONST_VTBL struct ICLRAssemblyReferenceListVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICLRAssemblyReferenceList_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICLRAssemblyReferenceList_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICLRAssemblyReferenceList_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICLRAssemblyReferenceList_IsStringAssemblyReferenceInList(This,pwzAssemblyName)	\
    ( (This)->lpVtbl -> IsStringAssemblyReferenceInList(This,pwzAssemblyName) ) 

#define ICLRAssemblyReferenceList_IsAssemblyReferenceInList(This,pName)	\
    ( (This)->lpVtbl -> IsAssemblyReferenceInList(This,pName) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICLRAssemblyReferenceList_INTERFACE_DEFINED__ */


#ifndef __ICLRReferenceAssemblyEnum_INTERFACE_DEFINED__
#define __ICLRReferenceAssemblyEnum_INTERFACE_DEFINED__

/* interface ICLRReferenceAssemblyEnum */
/* [local][unique][helpstring][uuid][version][object] */ 


EXTERN_C const IID IID_ICLRReferenceAssemblyEnum;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("d509cb5d-cf32-4876-ae61-67770cf91973")
    ICLRReferenceAssemblyEnum : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Get( 
            /* [in] */ DWORD dwIndex,
            /* [size_is][out] */ 
            __out_ecount_full(*pcchBufferSize)  LPWSTR pwzBuffer,
            /* [out][in] */ DWORD *pcchBufferSize) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ICLRReferenceAssemblyEnumVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICLRReferenceAssemblyEnum * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICLRReferenceAssemblyEnum * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICLRReferenceAssemblyEnum * This);
        
        HRESULT ( STDMETHODCALLTYPE *Get )( 
            ICLRReferenceAssemblyEnum * This,
            /* [in] */ DWORD dwIndex,
            /* [size_is][out] */ 
            __out_ecount_full(*pcchBufferSize)  LPWSTR pwzBuffer,
            /* [out][in] */ DWORD *pcchBufferSize);
        
        END_INTERFACE
    } ICLRReferenceAssemblyEnumVtbl;

    interface ICLRReferenceAssemblyEnum
    {
        CONST_VTBL struct ICLRReferenceAssemblyEnumVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICLRReferenceAssemblyEnum_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICLRReferenceAssemblyEnum_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICLRReferenceAssemblyEnum_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICLRReferenceAssemblyEnum_Get(This,dwIndex,pwzBuffer,pcchBufferSize)	\
    ( (This)->lpVtbl -> Get(This,dwIndex,pwzBuffer,pcchBufferSize) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICLRReferenceAssemblyEnum_INTERFACE_DEFINED__ */


#ifndef __ICLRProbingAssemblyEnum_INTERFACE_DEFINED__
#define __ICLRProbingAssemblyEnum_INTERFACE_DEFINED__

/* interface ICLRProbingAssemblyEnum */
/* [local][unique][helpstring][uuid][version][object] */ 


EXTERN_C const IID IID_ICLRProbingAssemblyEnum;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("d0c5fb1f-416b-4f97-81f4-7ac7dc24dd5d")
    ICLRProbingAssemblyEnum : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Get( 
            /* [in] */ DWORD dwIndex,
            /* [size_is][out] */ 
            __out_ecount_full(*pcchBufferSize)  LPWSTR pwzBuffer,
            /* [out][in] */ DWORD *pcchBufferSize) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ICLRProbingAssemblyEnumVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICLRProbingAssemblyEnum * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICLRProbingAssemblyEnum * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICLRProbingAssemblyEnum * This);
        
        HRESULT ( STDMETHODCALLTYPE *Get )( 
            ICLRProbingAssemblyEnum * This,
            /* [in] */ DWORD dwIndex,
            /* [size_is][out] */ 
            __out_ecount_full(*pcchBufferSize)  LPWSTR pwzBuffer,
            /* [out][in] */ DWORD *pcchBufferSize);
        
        END_INTERFACE
    } ICLRProbingAssemblyEnumVtbl;

    interface ICLRProbingAssemblyEnum
    {
        CONST_VTBL struct ICLRProbingAssemblyEnumVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICLRProbingAssemblyEnum_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICLRProbingAssemblyEnum_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICLRProbingAssemblyEnum_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICLRProbingAssemblyEnum_Get(This,dwIndex,pwzBuffer,pcchBufferSize)	\
    ( (This)->lpVtbl -> Get(This,dwIndex,pwzBuffer,pcchBufferSize) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICLRProbingAssemblyEnum_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_mscoree_0000_0037 */
/* [local] */ 

typedef 
enum _CLRAssemblyIdentityFlags
    {	CLR_ASSEMBLY_IDENTITY_FLAGS_DEFAULT	= 0
    } 	ECLRAssemblyIdentityFlags;



extern RPC_IF_HANDLE __MIDL_itf_mscoree_0000_0037_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_mscoree_0000_0037_v0_0_s_ifspec;

#ifndef __ICLRAssemblyIdentityManager_INTERFACE_DEFINED__
#define __ICLRAssemblyIdentityManager_INTERFACE_DEFINED__

/* interface ICLRAssemblyIdentityManager */
/* [local][unique][helpstring][uuid][version][object] */ 


EXTERN_C const IID IID_ICLRAssemblyIdentityManager;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("15f0a9da-3ff6-4393-9da9-fdfd284e6972")
    ICLRAssemblyIdentityManager : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetCLRAssemblyReferenceList( 
            /* [in] */ LPCWSTR *ppwzAssemblyReferences,
            /* [in] */ DWORD dwNumOfReferences,
            /* [out] */ ICLRAssemblyReferenceList **ppReferenceList) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetBindingIdentityFromFile( 
            /* [in] */ LPCWSTR pwzFilePath,
            /* [in] */ DWORD dwFlags,
            /* [size_is][out] */ 
            __out_ecount_full(*pcchBufferSize)  LPWSTR pwzBuffer,
            /* [out][in] */ DWORD *pcchBufferSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetBindingIdentityFromStream( 
            /* [in] */ IStream *pStream,
            /* [in] */ DWORD dwFlags,
            /* [size_is][out] */ 
            __out_ecount_full(*pcchBufferSize)  LPWSTR pwzBuffer,
            /* [out][in] */ DWORD *pcchBufferSize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetReferencedAssembliesFromFile( 
            /* [in] */ LPCWSTR pwzFilePath,
            /* [in] */ DWORD dwFlags,
            /* [in] */ ICLRAssemblyReferenceList *pExcludeAssembliesList,
            /* [out] */ ICLRReferenceAssemblyEnum **ppReferenceEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetReferencedAssembliesFromStream( 
            /* [in] */ IStream *pStream,
            /* [in] */ DWORD dwFlags,
            /* [in] */ ICLRAssemblyReferenceList *pExcludeAssembliesList,
            /* [out] */ ICLRReferenceAssemblyEnum **ppReferenceEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetProbingAssembliesFromReference( 
            /* [in] */ DWORD dwMachineType,
            /* [in] */ DWORD dwFlags,
            /* [in] */ LPCWSTR pwzReferenceIdentity,
            /* [out] */ ICLRProbingAssemblyEnum **ppProbingAssemblyEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsStronglyNamed( 
            /* [in] */ LPCWSTR pwzAssemblyIdentity,
            /* [out] */ BOOL *pbIsStronglyNamed) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ICLRAssemblyIdentityManagerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICLRAssemblyIdentityManager * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICLRAssemblyIdentityManager * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICLRAssemblyIdentityManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetCLRAssemblyReferenceList )( 
            ICLRAssemblyIdentityManager * This,
            /* [in] */ LPCWSTR *ppwzAssemblyReferences,
            /* [in] */ DWORD dwNumOfReferences,
            /* [out] */ ICLRAssemblyReferenceList **ppReferenceList);
        
        HRESULT ( STDMETHODCALLTYPE *GetBindingIdentityFromFile )( 
            ICLRAssemblyIdentityManager * This,
            /* [in] */ LPCWSTR pwzFilePath,
            /* [in] */ DWORD dwFlags,
            /* [size_is][out] */ 
            __out_ecount_full(*pcchBufferSize)  LPWSTR pwzBuffer,
            /* [out][in] */ DWORD *pcchBufferSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetBindingIdentityFromStream )( 
            ICLRAssemblyIdentityManager * This,
            /* [in] */ IStream *pStream,
            /* [in] */ DWORD dwFlags,
            /* [size_is][out] */ 
            __out_ecount_full(*pcchBufferSize)  LPWSTR pwzBuffer,
            /* [out][in] */ DWORD *pcchBufferSize);
        
        HRESULT ( STDMETHODCALLTYPE *GetReferencedAssembliesFromFile )( 
            ICLRAssemblyIdentityManager * This,
            /* [in] */ LPCWSTR pwzFilePath,
            /* [in] */ DWORD dwFlags,
            /* [in] */ ICLRAssemblyReferenceList *pExcludeAssembliesList,
            /* [out] */ ICLRReferenceAssemblyEnum **ppReferenceEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetReferencedAssembliesFromStream )( 
            ICLRAssemblyIdentityManager * This,
            /* [in] */ IStream *pStream,
            /* [in] */ DWORD dwFlags,
            /* [in] */ ICLRAssemblyReferenceList *pExcludeAssembliesList,
            /* [out] */ ICLRReferenceAssemblyEnum **ppReferenceEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetProbingAssembliesFromReference )( 
            ICLRAssemblyIdentityManager * This,
            /* [in] */ DWORD dwMachineType,
            /* [in] */ DWORD dwFlags,
            /* [in] */ LPCWSTR pwzReferenceIdentity,
            /* [out] */ ICLRProbingAssemblyEnum **ppProbingAssemblyEnum);
        
        HRESULT ( STDMETHODCALLTYPE *IsStronglyNamed )( 
            ICLRAssemblyIdentityManager * This,
            /* [in] */ LPCWSTR pwzAssemblyIdentity,
            /* [out] */ BOOL *pbIsStronglyNamed);
        
        END_INTERFACE
    } ICLRAssemblyIdentityManagerVtbl;

    interface ICLRAssemblyIdentityManager
    {
        CONST_VTBL struct ICLRAssemblyIdentityManagerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICLRAssemblyIdentityManager_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICLRAssemblyIdentityManager_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICLRAssemblyIdentityManager_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICLRAssemblyIdentityManager_GetCLRAssemblyReferenceList(This,ppwzAssemblyReferences,dwNumOfReferences,ppReferenceList)	\
    ( (This)->lpVtbl -> GetCLRAssemblyReferenceList(This,ppwzAssemblyReferences,dwNumOfReferences,ppReferenceList) ) 

#define ICLRAssemblyIdentityManager_GetBindingIdentityFromFile(This,pwzFilePath,dwFlags,pwzBuffer,pcchBufferSize)	\
    ( (This)->lpVtbl -> GetBindingIdentityFromFile(This,pwzFilePath,dwFlags,pwzBuffer,pcchBufferSize) ) 

#define ICLRAssemblyIdentityManager_GetBindingIdentityFromStream(This,pStream,dwFlags,pwzBuffer,pcchBufferSize)	\
    ( (This)->lpVtbl -> GetBindingIdentityFromStream(This,pStream,dwFlags,pwzBuffer,pcchBufferSize) ) 

#define ICLRAssemblyIdentityManager_GetReferencedAssembliesFromFile(This,pwzFilePath,dwFlags,pExcludeAssembliesList,ppReferenceEnum)	\
    ( (This)->lpVtbl -> GetReferencedAssembliesFromFile(This,pwzFilePath,dwFlags,pExcludeAssembliesList,ppReferenceEnum) ) 

#define ICLRAssemblyIdentityManager_GetReferencedAssembliesFromStream(This,pStream,dwFlags,pExcludeAssembliesList,ppReferenceEnum)	\
    ( (This)->lpVtbl -> GetReferencedAssembliesFromStream(This,pStream,dwFlags,pExcludeAssembliesList,ppReferenceEnum) ) 

#define ICLRAssemblyIdentityManager_GetProbingAssembliesFromReference(This,dwMachineType,dwFlags,pwzReferenceIdentity,ppProbingAssemblyEnum)	\
    ( (This)->lpVtbl -> GetProbingAssembliesFromReference(This,dwMachineType,dwFlags,pwzReferenceIdentity,ppProbingAssemblyEnum) ) 

#define ICLRAssemblyIdentityManager_IsStronglyNamed(This,pwzAssemblyIdentity,pbIsStronglyNamed)	\
    ( (This)->lpVtbl -> IsStronglyNamed(This,pwzAssemblyIdentity,pbIsStronglyNamed) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICLRAssemblyIdentityManager_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_mscoree_0000_0038 */
/* [local] */ 

typedef 
enum _hostBiningPolicyModifyFlags
    {	HOST_BINDING_POLICY_MODIFY_DEFAULT	= 0,
	HOST_BINDING_POLICY_MODIFY_CHAIN	= 1,
	HOST_BINDING_POLICY_MODIFY_REMOVE	= 2,
	HOST_BINDING_POLICY_MODIFY_MAX	= 3
    } 	EHostBindingPolicyModifyFlags;



extern RPC_IF_HANDLE __MIDL_itf_mscoree_0000_0038_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_mscoree_0000_0038_v0_0_s_ifspec;

#ifndef __ICLRHostBindingPolicyManager_INTERFACE_DEFINED__
#define __ICLRHostBindingPolicyManager_INTERFACE_DEFINED__

/* interface ICLRHostBindingPolicyManager */
/* [local][unique][helpstring][uuid][version][object] */ 


EXTERN_C const IID IID_ICLRHostBindingPolicyManager;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4b3545e7-1856-48c9-a8ba-24b21a753c09")
    ICLRHostBindingPolicyManager : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ModifyApplicationPolicy( 
            /* [in] */ LPCWSTR pwzSourceAssemblyIdentity,
            /* [in] */ LPCWSTR pwzTargetAssemblyIdentity,
            /* [in] */ BYTE *pbApplicationPolicy,
            /* [in] */ DWORD cbAppPolicySize,
            /* [in] */ DWORD dwPolicyModifyFlags,
            /* [size_is][out] */ 
            __out_ecount_full(*pcbNewAppPolicySize)  BYTE *pbNewApplicationPolicy,
            /* [out][in] */ DWORD *pcbNewAppPolicySize) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EvaluatePolicy( 
            /* [in] */ LPCWSTR pwzReferenceIdentity,
            /* [in] */ BYTE *pbApplicationPolicy,
            /* [in] */ DWORD cbAppPolicySize,
            /* [size_is][out] */ 
            __out_ecount_full(*pcchPostPolicyReferenceIdentity)  LPWSTR pwzPostPolicyReferenceIdentity,
            /* [out][in] */ DWORD *pcchPostPolicyReferenceIdentity,
            /* [out] */ DWORD *pdwPoliciesApplied) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ICLRHostBindingPolicyManagerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICLRHostBindingPolicyManager * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICLRHostBindingPolicyManager * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICLRHostBindingPolicyManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *ModifyApplicationPolicy )( 
            ICLRHostBindingPolicyManager * This,
            /* [in] */ LPCWSTR pwzSourceAssemblyIdentity,
            /* [in] */ LPCWSTR pwzTargetAssemblyIdentity,
            /* [in] */ BYTE *pbApplicationPolicy,
            /* [in] */ DWORD cbAppPolicySize,
            /* [in] */ DWORD dwPolicyModifyFlags,
            /* [size_is][out] */ 
            __out_ecount_full(*pcbNewAppPolicySize)  BYTE *pbNewApplicationPolicy,
            /* [out][in] */ DWORD *pcbNewAppPolicySize);
        
        HRESULT ( STDMETHODCALLTYPE *EvaluatePolicy )( 
            ICLRHostBindingPolicyManager * This,
            /* [in] */ LPCWSTR pwzReferenceIdentity,
            /* [in] */ BYTE *pbApplicationPolicy,
            /* [in] */ DWORD cbAppPolicySize,
            /* [size_is][out] */ 
            __out_ecount_full(*pcchPostPolicyReferenceIdentity)  LPWSTR pwzPostPolicyReferenceIdentity,
            /* [out][in] */ DWORD *pcchPostPolicyReferenceIdentity,
            /* [out] */ DWORD *pdwPoliciesApplied);
        
        END_INTERFACE
    } ICLRHostBindingPolicyManagerVtbl;

    interface ICLRHostBindingPolicyManager
    {
        CONST_VTBL struct ICLRHostBindingPolicyManagerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICLRHostBindingPolicyManager_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICLRHostBindingPolicyManager_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICLRHostBindingPolicyManager_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICLRHostBindingPolicyManager_ModifyApplicationPolicy(This,pwzSourceAssemblyIdentity,pwzTargetAssemblyIdentity,pbApplicationPolicy,cbAppPolicySize,dwPolicyModifyFlags,pbNewApplicationPolicy,pcbNewAppPolicySize)	\
    ( (This)->lpVtbl -> ModifyApplicationPolicy(This,pwzSourceAssemblyIdentity,pwzTargetAssemblyIdentity,pbApplicationPolicy,cbAppPolicySize,dwPolicyModifyFlags,pbNewApplicationPolicy,pcbNewAppPolicySize) ) 

#define ICLRHostBindingPolicyManager_EvaluatePolicy(This,pwzReferenceIdentity,pbApplicationPolicy,cbAppPolicySize,pwzPostPolicyReferenceIdentity,pcchPostPolicyReferenceIdentity,pdwPoliciesApplied)	\
    ( (This)->lpVtbl -> EvaluatePolicy(This,pwzReferenceIdentity,pbApplicationPolicy,cbAppPolicySize,pwzPostPolicyReferenceIdentity,pcchPostPolicyReferenceIdentity,pdwPoliciesApplied) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICLRHostBindingPolicyManager_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_mscoree_0000_0039 */
/* [local] */ 

typedef /* [public] */ 
enum __MIDL___MIDL_itf_mscoree_0000_0039_0001
    {	ePolicyLevelNone	= 0,
	ePolicyLevelRetargetable	= 0x1,
	ePolicyUnifiedToCLR	= 0x2,
	ePolicyLevelApp	= 0x4,
	ePolicyLevelPublisher	= 0x8,
	ePolicyLevelHost	= 0x10,
	ePolicyLevelAdmin	= 0x20,
	ePolicyPortability	= 0x40
    } 	EBindPolicyLevels;

typedef struct _AssemblyBindInfo
    {
    DWORD dwAppDomainId;
    LPCWSTR lpReferencedIdentity;
    LPCWSTR lpPostPolicyIdentity;
    DWORD ePolicyLevel;
    } 	AssemblyBindInfo;

typedef struct _ModuleBindInfo
    {
    DWORD dwAppDomainId;
    LPCWSTR lpAssemblyIdentity;
    LPCWSTR lpModuleName;
    } 	ModuleBindInfo;

typedef 
enum _HostApplicationPolicy
    {	HOST_APPLICATION_BINDING_POLICY	= 1
    } 	EHostApplicationPolicy;



extern RPC_IF_HANDLE __MIDL_itf_mscoree_0000_0039_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_mscoree_0000_0039_v0_0_s_ifspec;

#ifndef __IHostAssemblyStore_INTERFACE_DEFINED__
#define __IHostAssemblyStore_INTERFACE_DEFINED__

/* interface IHostAssemblyStore */
/* [unique][helpstring][uuid][version][object][local] */ 


EXTERN_C const IID IID_IHostAssemblyStore;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7b102a88-3f7f-496d-8fa2-c35374e01af3")
    IHostAssemblyStore : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ProvideAssembly( 
            /* [in] */ AssemblyBindInfo *pBindInfo,
            /* [out] */ UINT64 *pAssemblyId,
            /* [out] */ UINT64 *pContext,
            /* [out] */ IStream **ppStmAssemblyImage,
            /* [out] */ IStream **ppStmPDB) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ProvideModule( 
            /* [in] */ ModuleBindInfo *pBindInfo,
            /* [out] */ DWORD *pdwModuleId,
            /* [out] */ IStream **ppStmModuleImage,
            /* [out] */ IStream **ppStmPDB) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHostAssemblyStoreVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHostAssemblyStore * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHostAssemblyStore * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHostAssemblyStore * This);
        
        HRESULT ( STDMETHODCALLTYPE *ProvideAssembly )( 
            IHostAssemblyStore * This,
            /* [in] */ AssemblyBindInfo *pBindInfo,
            /* [out] */ UINT64 *pAssemblyId,
            /* [out] */ UINT64 *pContext,
            /* [out] */ IStream **ppStmAssemblyImage,
            /* [out] */ IStream **ppStmPDB);
        
        HRESULT ( STDMETHODCALLTYPE *ProvideModule )( 
            IHostAssemblyStore * This,
            /* [in] */ ModuleBindInfo *pBindInfo,
            /* [out] */ DWORD *pdwModuleId,
            /* [out] */ IStream **ppStmModuleImage,
            /* [out] */ IStream **ppStmPDB);
        
        END_INTERFACE
    } IHostAssemblyStoreVtbl;

    interface IHostAssemblyStore
    {
        CONST_VTBL struct IHostAssemblyStoreVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHostAssemblyStore_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IHostAssemblyStore_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IHostAssemblyStore_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IHostAssemblyStore_ProvideAssembly(This,pBindInfo,pAssemblyId,pContext,ppStmAssemblyImage,ppStmPDB)	\
    ( (This)->lpVtbl -> ProvideAssembly(This,pBindInfo,pAssemblyId,pContext,ppStmAssemblyImage,ppStmPDB) ) 

#define IHostAssemblyStore_ProvideModule(This,pBindInfo,pdwModuleId,ppStmModuleImage,ppStmPDB)	\
    ( (This)->lpVtbl -> ProvideModule(This,pBindInfo,pdwModuleId,ppStmModuleImage,ppStmPDB) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IHostAssemblyStore_INTERFACE_DEFINED__ */


#ifndef __IHostAssemblyManager_INTERFACE_DEFINED__
#define __IHostAssemblyManager_INTERFACE_DEFINED__

/* interface IHostAssemblyManager */
/* [unique][helpstring][uuid][version][object][local] */ 


EXTERN_C const IID IID_IHostAssemblyManager;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("613dabd7-62b2-493e-9e65-c1e32a1e0c5e")
    IHostAssemblyManager : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetNonHostStoreAssemblies( 
            /* [out] */ ICLRAssemblyReferenceList **ppReferenceList) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAssemblyStore( 
            /* [out] */ IHostAssemblyStore **ppAssemblyStore) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHostAssemblyManagerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHostAssemblyManager * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHostAssemblyManager * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHostAssemblyManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetNonHostStoreAssemblies )( 
            IHostAssemblyManager * This,
            /* [out] */ ICLRAssemblyReferenceList **ppReferenceList);
        
        HRESULT ( STDMETHODCALLTYPE *GetAssemblyStore )( 
            IHostAssemblyManager * This,
            /* [out] */ IHostAssemblyStore **ppAssemblyStore);
        
        END_INTERFACE
    } IHostAssemblyManagerVtbl;

    interface IHostAssemblyManager
    {
        CONST_VTBL struct IHostAssemblyManagerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHostAssemblyManager_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IHostAssemblyManager_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IHostAssemblyManager_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IHostAssemblyManager_GetNonHostStoreAssemblies(This,ppReferenceList)	\
    ( (This)->lpVtbl -> GetNonHostStoreAssemblies(This,ppReferenceList) ) 

#define IHostAssemblyManager_GetAssemblyStore(This,ppAssemblyStore)	\
    ( (This)->lpVtbl -> GetAssemblyStore(This,ppAssemblyStore) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IHostAssemblyManager_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_mscoree_0000_0041 */
/* [local] */ 

STDAPI GetCLRIdentityManager(REFIID riid, IUnknown **ppManager);
EXTERN_GUID(IID_IHostControl, 0x02CA073C, 0x7079, 0x4860, 0x88, 0x0A, 0xC2, 0xF7, 0xA4, 0x49, 0xC9, 0x91);


extern RPC_IF_HANDLE __MIDL_itf_mscoree_0000_0041_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_mscoree_0000_0041_v0_0_s_ifspec;

#ifndef __IHostControl_INTERFACE_DEFINED__
#define __IHostControl_INTERFACE_DEFINED__

/* interface IHostControl */
/* [object][local][unique][helpstring][version][uuid] */ 


EXTERN_C const IID IID_IHostControl;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("02CA073C-7079-4860-880A-C2F7A449C991")
    IHostControl : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetHostManager( 
            /* [in] */ REFIID riid,
            /* [out] */ void **ppObject) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetAppDomainManager( 
            /* [in] */ DWORD dwAppDomainID,
            /* [in] */ IUnknown *pUnkAppDomainManager) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHostControlVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHostControl * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHostControl * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHostControl * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetHostManager )( 
            IHostControl * This,
            /* [in] */ REFIID riid,
            /* [out] */ void **ppObject);
        
        HRESULT ( STDMETHODCALLTYPE *SetAppDomainManager )( 
            IHostControl * This,
            /* [in] */ DWORD dwAppDomainID,
            /* [in] */ IUnknown *pUnkAppDomainManager);
        
        END_INTERFACE
    } IHostControlVtbl;

    interface IHostControl
    {
        CONST_VTBL struct IHostControlVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHostControl_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IHostControl_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IHostControl_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IHostControl_GetHostManager(This,riid,ppObject)	\
    ( (This)->lpVtbl -> GetHostManager(This,riid,ppObject) ) 

#define IHostControl_SetAppDomainManager(This,dwAppDomainID,pUnkAppDomainManager)	\
    ( (This)->lpVtbl -> SetAppDomainManager(This,dwAppDomainID,pUnkAppDomainManager) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IHostControl_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_mscoree_0000_0042 */
/* [local] */ 

EXTERN_GUID(IID_ICLRControl, 0x9065597E, 0xD1A1, 0x4fb2, 0xB6, 0xBA, 0x7E, 0x1F, 0xCE, 0x23, 0x0F, 0x61);


extern RPC_IF_HANDLE __MIDL_itf_mscoree_0000_0042_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_mscoree_0000_0042_v0_0_s_ifspec;

#ifndef __ICLRControl_INTERFACE_DEFINED__
#define __ICLRControl_INTERFACE_DEFINED__

/* interface ICLRControl */
/* [object][local][unique][helpstring][version][uuid] */ 


EXTERN_C const IID IID_ICLRControl;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9065597E-D1A1-4fb2-B6BA-7E1FCE230F61")
    ICLRControl : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetCLRManager( 
            /* [in] */ REFIID riid,
            /* [out] */ void **ppObject) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetAppDomainManagerType( 
            /* [in] */ LPCWSTR pwzAppDomainManagerAssembly,
            /* [in] */ LPCWSTR pwzAppDomainManagerType) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ICLRControlVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICLRControl * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICLRControl * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICLRControl * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetCLRManager )( 
            ICLRControl * This,
            /* [in] */ REFIID riid,
            /* [out] */ void **ppObject);
        
        HRESULT ( STDMETHODCALLTYPE *SetAppDomainManagerType )( 
            ICLRControl * This,
            /* [in] */ LPCWSTR pwzAppDomainManagerAssembly,
            /* [in] */ LPCWSTR pwzAppDomainManagerType);
        
        END_INTERFACE
    } ICLRControlVtbl;

    interface ICLRControl
    {
        CONST_VTBL struct ICLRControlVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICLRControl_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICLRControl_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICLRControl_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICLRControl_GetCLRManager(This,riid,ppObject)	\
    ( (This)->lpVtbl -> GetCLRManager(This,riid,ppObject) ) 

#define ICLRControl_SetAppDomainManagerType(This,pwzAppDomainManagerAssembly,pwzAppDomainManagerType)	\
    ( (This)->lpVtbl -> SetAppDomainManagerType(This,pwzAppDomainManagerAssembly,pwzAppDomainManagerType) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICLRControl_INTERFACE_DEFINED__ */


#ifndef __ICLRRuntimeHost_INTERFACE_DEFINED__
#define __ICLRRuntimeHost_INTERFACE_DEFINED__

/* interface ICLRRuntimeHost */
/* [object][local][unique][helpstring][version][uuid] */ 


EXTERN_C const IID IID_ICLRRuntimeHost;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("90F1A06C-7712-4762-86B5-7A5EBA6BDB02")
    ICLRRuntimeHost : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Start( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Stop( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetHostControl( 
            /* [in] */ IHostControl *pHostControl) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCLRControl( 
            /* [out] */ ICLRControl **pCLRControl) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UnloadAppDomain( 
            /* [in] */ DWORD dwAppDomainId,
            /* [in] */ BOOL fWaitUntilDone) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ExecuteInAppDomain( 
            /* [in] */ DWORD dwAppDomainId,
            /* [in] */ FExecuteInAppDomainCallback pCallback,
            /* [in] */ void *cookie) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCurrentAppDomainId( 
            /* [out] */ DWORD *pdwAppDomainId) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ExecuteApplication( 
            /* [in] */ LPCWSTR pwzAppFullName,
            /* [in] */ DWORD dwManifestPaths,
            /* [in] */ LPCWSTR *ppwzManifestPaths,
            /* [in] */ DWORD dwActivationData,
            /* [in] */ LPCWSTR *ppwzActivationData,
            /* [out] */ int *pReturnValue) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ExecuteInDefaultAppDomain( 
            /* [in] */ LPCWSTR pwzAssemblyPath,
            /* [in] */ LPCWSTR pwzTypeName,
            /* [in] */ LPCWSTR pwzMethodName,
            /* [in] */ LPCWSTR pwzArgument,
            /* [out] */ DWORD *pReturnValue) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ICLRRuntimeHostVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICLRRuntimeHost * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICLRRuntimeHost * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICLRRuntimeHost * This);
        
        HRESULT ( STDMETHODCALLTYPE *Start )( 
            ICLRRuntimeHost * This);
        
        HRESULT ( STDMETHODCALLTYPE *Stop )( 
            ICLRRuntimeHost * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetHostControl )( 
            ICLRRuntimeHost * This,
            /* [in] */ IHostControl *pHostControl);
        
        HRESULT ( STDMETHODCALLTYPE *GetCLRControl )( 
            ICLRRuntimeHost * This,
            /* [out] */ ICLRControl **pCLRControl);
        
        HRESULT ( STDMETHODCALLTYPE *UnloadAppDomain )( 
            ICLRRuntimeHost * This,
            /* [in] */ DWORD dwAppDomainId,
            /* [in] */ BOOL fWaitUntilDone);
        
        HRESULT ( STDMETHODCALLTYPE *ExecuteInAppDomain )( 
            ICLRRuntimeHost * This,
            /* [in] */ DWORD dwAppDomainId,
            /* [in] */ FExecuteInAppDomainCallback pCallback,
            /* [in] */ void *cookie);
        
        HRESULT ( STDMETHODCALLTYPE *GetCurrentAppDomainId )( 
            ICLRRuntimeHost * This,
            /* [out] */ DWORD *pdwAppDomainId);
        
        HRESULT ( STDMETHODCALLTYPE *ExecuteApplication )( 
            ICLRRuntimeHost * This,
            /* [in] */ LPCWSTR pwzAppFullName,
            /* [in] */ DWORD dwManifestPaths,
            /* [in] */ LPCWSTR *ppwzManifestPaths,
            /* [in] */ DWORD dwActivationData,
            /* [in] */ LPCWSTR *ppwzActivationData,
            /* [out] */ int *pReturnValue);
        
        HRESULT ( STDMETHODCALLTYPE *ExecuteInDefaultAppDomain )( 
            ICLRRuntimeHost * This,
            /* [in] */ LPCWSTR pwzAssemblyPath,
            /* [in] */ LPCWSTR pwzTypeName,
            /* [in] */ LPCWSTR pwzMethodName,
            /* [in] */ LPCWSTR pwzArgument,
            /* [out] */ DWORD *pReturnValue);
        
        END_INTERFACE
    } ICLRRuntimeHostVtbl;

    interface ICLRRuntimeHost
    {
        CONST_VTBL struct ICLRRuntimeHostVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICLRRuntimeHost_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICLRRuntimeHost_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICLRRuntimeHost_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICLRRuntimeHost_Start(This)	\
    ( (This)->lpVtbl -> Start(This) ) 

#define ICLRRuntimeHost_Stop(This)	\
    ( (This)->lpVtbl -> Stop(This) ) 

#define ICLRRuntimeHost_SetHostControl(This,pHostControl)	\
    ( (This)->lpVtbl -> SetHostControl(This,pHostControl) ) 

#define ICLRRuntimeHost_GetCLRControl(This,pCLRControl)	\
    ( (This)->lpVtbl -> GetCLRControl(This,pCLRControl) ) 

#define ICLRRuntimeHost_UnloadAppDomain(This,dwAppDomainId,fWaitUntilDone)	\
    ( (This)->lpVtbl -> UnloadAppDomain(This,dwAppDomainId,fWaitUntilDone) ) 

#define ICLRRuntimeHost_ExecuteInAppDomain(This,dwAppDomainId,pCallback,cookie)	\
    ( (This)->lpVtbl -> ExecuteInAppDomain(This,dwAppDomainId,pCallback,cookie) ) 

#define ICLRRuntimeHost_GetCurrentAppDomainId(This,pdwAppDomainId)	\
    ( (This)->lpVtbl -> GetCurrentAppDomainId(This,pdwAppDomainId) ) 

#define ICLRRuntimeHost_ExecuteApplication(This,pwzAppFullName,dwManifestPaths,ppwzManifestPaths,dwActivationData,ppwzActivationData,pReturnValue)	\
    ( (This)->lpVtbl -> ExecuteApplication(This,pwzAppFullName,dwManifestPaths,ppwzManifestPaths,dwActivationData,ppwzActivationData,pReturnValue) ) 

#define ICLRRuntimeHost_ExecuteInDefaultAppDomain(This,pwzAssemblyPath,pwzTypeName,pwzMethodName,pwzArgument,pReturnValue)	\
    ( (This)->lpVtbl -> ExecuteInDefaultAppDomain(This,pwzAssemblyPath,pwzTypeName,pwzMethodName,pwzArgument,pReturnValue) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICLRRuntimeHost_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_mscoree_0000_0044 */
/* [local] */ 

typedef /* [public][public] */ 
enum __MIDL___MIDL_itf_mscoree_0000_0044_0001
    {	eNoChecks	= 0,
	eSynchronization	= 0x1,
	eSharedState	= 0x2,
	eExternalProcessMgmt	= 0x4,
	eSelfAffectingProcessMgmt	= 0x8,
	eExternalThreading	= 0x10,
	eSelfAffectingThreading	= 0x20,
	eSecurityInfrastructure	= 0x40,
	eUI	= 0x80,
	eMayLeakOnAbort	= 0x100,
	eAll	= 0x1ff
    } 	EApiCategories;



extern RPC_IF_HANDLE __MIDL_itf_mscoree_0000_0044_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_mscoree_0000_0044_v0_0_s_ifspec;

#ifndef __ICLRHostProtectionManager_INTERFACE_DEFINED__
#define __ICLRHostProtectionManager_INTERFACE_DEFINED__

/* interface ICLRHostProtectionManager */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_ICLRHostProtectionManager;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("89F25F5C-CEEF-43e1-9CFA-A68CE863AAAC")
    ICLRHostProtectionManager : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetProtectedCategories( 
            /* [in] */ EApiCategories categories) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetEagerSerializeGrantSets( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ICLRHostProtectionManagerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICLRHostProtectionManager * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICLRHostProtectionManager * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICLRHostProtectionManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetProtectedCategories )( 
            ICLRHostProtectionManager * This,
            /* [in] */ EApiCategories categories);
        
        HRESULT ( STDMETHODCALLTYPE *SetEagerSerializeGrantSets )( 
            ICLRHostProtectionManager * This);
        
        END_INTERFACE
    } ICLRHostProtectionManagerVtbl;

    interface ICLRHostProtectionManager
    {
        CONST_VTBL struct ICLRHostProtectionManagerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICLRHostProtectionManager_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICLRHostProtectionManager_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICLRHostProtectionManager_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICLRHostProtectionManager_SetProtectedCategories(This,categories)	\
    ( (This)->lpVtbl -> SetProtectedCategories(This,categories) ) 

#define ICLRHostProtectionManager_SetEagerSerializeGrantSets(This)	\
    ( (This)->lpVtbl -> SetEagerSerializeGrantSets(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICLRHostProtectionManager_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_mscoree_0000_0045 */
/* [local] */ 

typedef /* [public][public] */ 
enum __MIDL___MIDL_itf_mscoree_0000_0045_0001
    {	eInitializeNewDomainFlags_None	= 0,
	eInitializeNewDomainFlags_NoSecurityChanges	= 0x2
    } 	EInitializeNewDomainFlags;



extern RPC_IF_HANDLE __MIDL_itf_mscoree_0000_0045_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_mscoree_0000_0045_v0_0_s_ifspec;

#ifndef __ICLRDomainManager_INTERFACE_DEFINED__
#define __ICLRDomainManager_INTERFACE_DEFINED__

/* interface ICLRDomainManager */
/* [unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_ICLRDomainManager;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("270D00A2-8E15-4d0b-ADEB-37BC3E47DF77")
    ICLRDomainManager : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetAppDomainManagerType( 
            /* [in] */ __RPC__in LPCWSTR wszAppDomainManagerAssembly,
            /* [in] */ __RPC__in LPCWSTR wszAppDomainManagerType,
            /* [in] */ EInitializeNewDomainFlags dwInitializeDomainFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetPropertiesForDefaultAppDomain( 
            /* [in] */ DWORD nProperties,
            /* [in] */ __RPC__deref_in_opt LPCWSTR *pwszPropertyNames,
            /* [in] */ __RPC__deref_in_opt LPCWSTR *pwszPropertyValues) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ICLRDomainManagerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICLRDomainManager * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICLRDomainManager * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICLRDomainManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetAppDomainManagerType )( 
            ICLRDomainManager * This,
            /* [in] */ __RPC__in LPCWSTR wszAppDomainManagerAssembly,
            /* [in] */ __RPC__in LPCWSTR wszAppDomainManagerType,
            /* [in] */ EInitializeNewDomainFlags dwInitializeDomainFlags);
        
        HRESULT ( STDMETHODCALLTYPE *SetPropertiesForDefaultAppDomain )( 
            ICLRDomainManager * This,
            /* [in] */ DWORD nProperties,
            /* [in] */ __RPC__deref_in_opt LPCWSTR *pwszPropertyNames,
            /* [in] */ __RPC__deref_in_opt LPCWSTR *pwszPropertyValues);
        
        END_INTERFACE
    } ICLRDomainManagerVtbl;

    interface ICLRDomainManager
    {
        CONST_VTBL struct ICLRDomainManagerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICLRDomainManager_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICLRDomainManager_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICLRDomainManager_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICLRDomainManager_SetAppDomainManagerType(This,wszAppDomainManagerAssembly,wszAppDomainManagerType,dwInitializeDomainFlags)	\
    ( (This)->lpVtbl -> SetAppDomainManagerType(This,wszAppDomainManagerAssembly,wszAppDomainManagerType,dwInitializeDomainFlags) ) 

#define ICLRDomainManager_SetPropertiesForDefaultAppDomain(This,nProperties,pwszPropertyNames,pwszPropertyValues)	\
    ( (This)->lpVtbl -> SetPropertiesForDefaultAppDomain(This,nProperties,pwszPropertyNames,pwszPropertyValues) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICLRDomainManager_INTERFACE_DEFINED__ */



#ifndef __mscoree_LIBRARY_DEFINED__
#define __mscoree_LIBRARY_DEFINED__

/* library mscoree */
/* [helpstring][version][uuid] */ 


EXTERN_C const IID LIBID_mscoree;

#ifndef __ITypeName_INTERFACE_DEFINED__
#define __ITypeName_INTERFACE_DEFINED__

/* interface ITypeName */
/* [unique][helpstring][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_ITypeName;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B81FF171-20F3-11d2-8DCC-00A0C9B00522")
    ITypeName : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetNameCount( 
            /* [retval][out] */ __RPC__out DWORD *pCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetNames( 
            /* [in] */ DWORD count,
            /* [out] */ __RPC__deref_out_opt BSTR *rgbszNames,
            /* [retval][out] */ __RPC__out DWORD *pCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetTypeArgumentCount( 
            /* [retval][out] */ __RPC__out DWORD *pCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetTypeArguments( 
            /* [in] */ DWORD count,
            /* [out] */ __RPC__deref_out_opt ITypeName **rgpArguments,
            /* [retval][out] */ __RPC__out DWORD *pCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetModifierLength( 
            /* [retval][out] */ __RPC__out DWORD *pCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetModifiers( 
            /* [in] */ DWORD count,
            /* [out] */ __RPC__out DWORD *rgModifiers,
            /* [retval][out] */ __RPC__out DWORD *pCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAssemblyName( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *rgbszAssemblyNames) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITypeNameVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITypeName * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITypeName * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITypeName * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetNameCount )( 
            ITypeName * This,
            /* [retval][out] */ __RPC__out DWORD *pCount);
        
        HRESULT ( STDMETHODCALLTYPE *GetNames )( 
            ITypeName * This,
            /* [in] */ DWORD count,
            /* [out] */ __RPC__deref_out_opt BSTR *rgbszNames,
            /* [retval][out] */ __RPC__out DWORD *pCount);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeArgumentCount )( 
            ITypeName * This,
            /* [retval][out] */ __RPC__out DWORD *pCount);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeArguments )( 
            ITypeName * This,
            /* [in] */ DWORD count,
            /* [out] */ __RPC__deref_out_opt ITypeName **rgpArguments,
            /* [retval][out] */ __RPC__out DWORD *pCount);
        
        HRESULT ( STDMETHODCALLTYPE *GetModifierLength )( 
            ITypeName * This,
            /* [retval][out] */ __RPC__out DWORD *pCount);
        
        HRESULT ( STDMETHODCALLTYPE *GetModifiers )( 
            ITypeName * This,
            /* [in] */ DWORD count,
            /* [out] */ __RPC__out DWORD *rgModifiers,
            /* [retval][out] */ __RPC__out DWORD *pCount);
        
        HRESULT ( STDMETHODCALLTYPE *GetAssemblyName )( 
            ITypeName * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *rgbszAssemblyNames);
        
        END_INTERFACE
    } ITypeNameVtbl;

    interface ITypeName
    {
        CONST_VTBL struct ITypeNameVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITypeName_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITypeName_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITypeName_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITypeName_GetNameCount(This,pCount)	\
    ( (This)->lpVtbl -> GetNameCount(This,pCount) ) 

#define ITypeName_GetNames(This,count,rgbszNames,pCount)	\
    ( (This)->lpVtbl -> GetNames(This,count,rgbszNames,pCount) ) 

#define ITypeName_GetTypeArgumentCount(This,pCount)	\
    ( (This)->lpVtbl -> GetTypeArgumentCount(This,pCount) ) 

#define ITypeName_GetTypeArguments(This,count,rgpArguments,pCount)	\
    ( (This)->lpVtbl -> GetTypeArguments(This,count,rgpArguments,pCount) ) 

#define ITypeName_GetModifierLength(This,pCount)	\
    ( (This)->lpVtbl -> GetModifierLength(This,pCount) ) 

#define ITypeName_GetModifiers(This,count,rgModifiers,pCount)	\
    ( (This)->lpVtbl -> GetModifiers(This,count,rgModifiers,pCount) ) 

#define ITypeName_GetAssemblyName(This,rgbszAssemblyNames)	\
    ( (This)->lpVtbl -> GetAssemblyName(This,rgbszAssemblyNames) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITypeName_INTERFACE_DEFINED__ */


#ifndef __ITypeNameBuilder_INTERFACE_DEFINED__
#define __ITypeNameBuilder_INTERFACE_DEFINED__

/* interface ITypeNameBuilder */
/* [unique][helpstring][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_ITypeNameBuilder;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B81FF171-20F3-11d2-8DCC-00A0C9B00523")
    ITypeNameBuilder : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OpenGenericArguments( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CloseGenericArguments( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OpenGenericArgument( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CloseGenericArgument( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddName( 
            /* [in] */ __RPC__in LPCWSTR szName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddPointer( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddByRef( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddSzArray( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddArray( 
            /* [in] */ DWORD rank) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddAssemblySpec( 
            /* [in] */ __RPC__in LPCWSTR szAssemblySpec) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ToString( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pszStringRepresentation) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clear( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITypeNameBuilderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITypeNameBuilder * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITypeNameBuilder * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITypeNameBuilder * This);
        
        HRESULT ( STDMETHODCALLTYPE *OpenGenericArguments )( 
            ITypeNameBuilder * This);
        
        HRESULT ( STDMETHODCALLTYPE *CloseGenericArguments )( 
            ITypeNameBuilder * This);
        
        HRESULT ( STDMETHODCALLTYPE *OpenGenericArgument )( 
            ITypeNameBuilder * This);
        
        HRESULT ( STDMETHODCALLTYPE *CloseGenericArgument )( 
            ITypeNameBuilder * This);
        
        HRESULT ( STDMETHODCALLTYPE *AddName )( 
            ITypeNameBuilder * This,
            /* [in] */ __RPC__in LPCWSTR szName);
        
        HRESULT ( STDMETHODCALLTYPE *AddPointer )( 
            ITypeNameBuilder * This);
        
        HRESULT ( STDMETHODCALLTYPE *AddByRef )( 
            ITypeNameBuilder * This);
        
        HRESULT ( STDMETHODCALLTYPE *AddSzArray )( 
            ITypeNameBuilder * This);
        
        HRESULT ( STDMETHODCALLTYPE *AddArray )( 
            ITypeNameBuilder * This,
            /* [in] */ DWORD rank);
        
        HRESULT ( STDMETHODCALLTYPE *AddAssemblySpec )( 
            ITypeNameBuilder * This,
            /* [in] */ __RPC__in LPCWSTR szAssemblySpec);
        
        HRESULT ( STDMETHODCALLTYPE *ToString )( 
            ITypeNameBuilder * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pszStringRepresentation);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            ITypeNameBuilder * This);
        
        END_INTERFACE
    } ITypeNameBuilderVtbl;

    interface ITypeNameBuilder
    {
        CONST_VTBL struct ITypeNameBuilderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITypeNameBuilder_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITypeNameBuilder_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITypeNameBuilder_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITypeNameBuilder_OpenGenericArguments(This)	\
    ( (This)->lpVtbl -> OpenGenericArguments(This) ) 

#define ITypeNameBuilder_CloseGenericArguments(This)	\
    ( (This)->lpVtbl -> CloseGenericArguments(This) ) 

#define ITypeNameBuilder_OpenGenericArgument(This)	\
    ( (This)->lpVtbl -> OpenGenericArgument(This) ) 

#define ITypeNameBuilder_CloseGenericArgument(This)	\
    ( (This)->lpVtbl -> CloseGenericArgument(This) ) 

#define ITypeNameBuilder_AddName(This,szName)	\
    ( (This)->lpVtbl -> AddName(This,szName) ) 

#define ITypeNameBuilder_AddPointer(This)	\
    ( (This)->lpVtbl -> AddPointer(This) ) 

#define ITypeNameBuilder_AddByRef(This)	\
    ( (This)->lpVtbl -> AddByRef(This) ) 

#define ITypeNameBuilder_AddSzArray(This)	\
    ( (This)->lpVtbl -> AddSzArray(This) ) 

#define ITypeNameBuilder_AddArray(This,rank)	\
    ( (This)->lpVtbl -> AddArray(This,rank) ) 

#define ITypeNameBuilder_AddAssemblySpec(This,szAssemblySpec)	\
    ( (This)->lpVtbl -> AddAssemblySpec(This,szAssemblySpec) ) 

#define ITypeNameBuilder_ToString(This,pszStringRepresentation)	\
    ( (This)->lpVtbl -> ToString(This,pszStringRepresentation) ) 

#define ITypeNameBuilder_Clear(This)	\
    ( (This)->lpVtbl -> Clear(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITypeNameBuilder_INTERFACE_DEFINED__ */


#ifndef __ITypeNameFactory_INTERFACE_DEFINED__
#define __ITypeNameFactory_INTERFACE_DEFINED__

/* interface ITypeNameFactory */
/* [unique][helpstring][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_ITypeNameFactory;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B81FF171-20F3-11d2-8DCC-00A0C9B00521")
    ITypeNameFactory : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ParseTypeName( 
            /* [in] */ __RPC__in LPCWSTR szName,
            /* [out] */ __RPC__out DWORD *pError,
            /* [retval][out] */ __RPC__deref_out_opt ITypeName **ppTypeName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetTypeNameBuilder( 
            /* [retval][out] */ __RPC__deref_out_opt ITypeNameBuilder **ppTypeBuilder) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITypeNameFactoryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITypeNameFactory * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITypeNameFactory * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITypeNameFactory * This);
        
        HRESULT ( STDMETHODCALLTYPE *ParseTypeName )( 
            ITypeNameFactory * This,
            /* [in] */ __RPC__in LPCWSTR szName,
            /* [out] */ __RPC__out DWORD *pError,
            /* [retval][out] */ __RPC__deref_out_opt ITypeName **ppTypeName);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeNameBuilder )( 
            ITypeNameFactory * This,
            /* [retval][out] */ __RPC__deref_out_opt ITypeNameBuilder **ppTypeBuilder);
        
        END_INTERFACE
    } ITypeNameFactoryVtbl;

    interface ITypeNameFactory
    {
        CONST_VTBL struct ITypeNameFactoryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITypeNameFactory_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITypeNameFactory_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITypeNameFactory_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITypeNameFactory_ParseTypeName(This,szName,pError,ppTypeName)	\
    ( (This)->lpVtbl -> ParseTypeName(This,szName,pError,ppTypeName) ) 

#define ITypeNameFactory_GetTypeNameBuilder(This,ppTypeBuilder)	\
    ( (This)->lpVtbl -> GetTypeNameBuilder(This,ppTypeBuilder) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITypeNameFactory_INTERFACE_DEFINED__ */


#ifndef __IApartmentCallback_INTERFACE_DEFINED__
#define __IApartmentCallback_INTERFACE_DEFINED__

/* interface IApartmentCallback */
/* [unique][helpstring][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IApartmentCallback;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("178E5337-1528-4591-B1C9-1C6E484686D8")
    IApartmentCallback : public IUnknown
    {
    public:
        virtual HRESULT __stdcall DoCallback( 
            /* [in] */ SIZE_T pFunc,
            /* [in] */ SIZE_T pData) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IApartmentCallbackVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IApartmentCallback * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IApartmentCallback * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IApartmentCallback * This);
        
        HRESULT ( __stdcall *DoCallback )( 
            IApartmentCallback * This,
            /* [in] */ SIZE_T pFunc,
            /* [in] */ SIZE_T pData);
        
        END_INTERFACE
    } IApartmentCallbackVtbl;

    interface IApartmentCallback
    {
        CONST_VTBL struct IApartmentCallbackVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IApartmentCallback_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IApartmentCallback_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IApartmentCallback_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IApartmentCallback_DoCallback(This,pFunc,pData)	\
    ( (This)->lpVtbl -> DoCallback(This,pFunc,pData) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IApartmentCallback_INTERFACE_DEFINED__ */


#ifndef __IManagedObject_INTERFACE_DEFINED__
#define __IManagedObject_INTERFACE_DEFINED__

/* interface IManagedObject */
/* [unique][helpstring][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_IManagedObject;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C3FCC19E-A970-11d2-8B5A-00A0C9B7C9C4")
    IManagedObject : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetSerializedBuffer( 
            /* [out] */ __RPC__deref_out_opt BSTR *pBSTR) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetObjectIdentity( 
            /* [out] */ __RPC__deref_out_opt BSTR *pBSTRGUID,
            /* [out] */ __RPC__out int *AppDomainID,
            /* [out] */ __RPC__out int *pCCW) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IManagedObjectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IManagedObject * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IManagedObject * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IManagedObject * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetSerializedBuffer )( 
            IManagedObject * This,
            /* [out] */ __RPC__deref_out_opt BSTR *pBSTR);
        
        HRESULT ( STDMETHODCALLTYPE *GetObjectIdentity )( 
            IManagedObject * This,
            /* [out] */ __RPC__deref_out_opt BSTR *pBSTRGUID,
            /* [out] */ __RPC__out int *AppDomainID,
            /* [out] */ __RPC__out int *pCCW);
        
        END_INTERFACE
    } IManagedObjectVtbl;

    interface IManagedObject
    {
        CONST_VTBL struct IManagedObjectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IManagedObject_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IManagedObject_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IManagedObject_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IManagedObject_GetSerializedBuffer(This,pBSTR)	\
    ( (This)->lpVtbl -> GetSerializedBuffer(This,pBSTR) ) 

#define IManagedObject_GetObjectIdentity(This,pBSTRGUID,AppDomainID,pCCW)	\
    ( (This)->lpVtbl -> GetObjectIdentity(This,pBSTRGUID,AppDomainID,pCCW) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IManagedObject_INTERFACE_DEFINED__ */


#ifndef __ICatalogServices_INTERFACE_DEFINED__
#define __ICatalogServices_INTERFACE_DEFINED__

/* interface ICatalogServices */
/* [unique][helpstring][uuid][oleautomation][object] */ 


EXTERN_C const IID IID_ICatalogServices;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("04C6BE1E-1DB1-4058-AB7A-700CCCFBF254")
    ICatalogServices : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Autodone( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE NotAutodone( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ICatalogServicesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICatalogServices * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICatalogServices * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICatalogServices * This);
        
        HRESULT ( STDMETHODCALLTYPE *Autodone )( 
            ICatalogServices * This);
        
        HRESULT ( STDMETHODCALLTYPE *NotAutodone )( 
            ICatalogServices * This);
        
        END_INTERFACE
    } ICatalogServicesVtbl;

    interface ICatalogServices
    {
        CONST_VTBL struct ICatalogServicesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICatalogServices_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICatalogServices_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICatalogServices_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICatalogServices_Autodone(This)	\
    ( (This)->lpVtbl -> Autodone(This) ) 

#define ICatalogServices_NotAutodone(This)	\
    ( (This)->lpVtbl -> NotAutodone(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICatalogServices_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_ComCallUnmarshal;

#ifdef __cplusplus

class DECLSPEC_UUID("3F281000-E95A-11d2-886B-00C04F869F04")
ComCallUnmarshal;
#endif

EXTERN_C const CLSID CLSID_ComCallUnmarshalV4;

#ifdef __cplusplus

class DECLSPEC_UUID("45FB4600-E6E8-4928-B25E-50476FF79425")
ComCallUnmarshalV4;
#endif

EXTERN_C const CLSID CLSID_CorRuntimeHost;

#ifdef __cplusplus

class DECLSPEC_UUID("CB2F6723-AB3A-11d2-9C40-00C04FA30A3E")
CorRuntimeHost;
#endif

EXTERN_C const CLSID CLSID_CLRRuntimeHost;

#ifdef __cplusplus

class DECLSPEC_UUID("90F1A06E-7712-4762-86B5-7A5EBA6BDB02")
CLRRuntimeHost;
#endif

EXTERN_C const CLSID CLSID_TypeNameFactory;

#ifdef __cplusplus

class DECLSPEC_UUID("B81FF171-20F3-11d2-8DCC-00A0C9B00525")
TypeNameFactory;
#endif
#endif /* __mscoree_LIBRARY_DEFINED__ */

/* interface __MIDL_itf_mscoree_0001_0014 */
/* [local] */ 

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_mscoree_0001_0014_0001
    {	eCurrentContext	= 0,
	eRestrictedContext	= 0x1
    } 	EContextType;



extern RPC_IF_HANDLE __MIDL_itf_mscoree_0001_0014_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_mscoree_0001_0014_v0_0_s_ifspec;

#ifndef __IHostSecurityContext_INTERFACE_DEFINED__
#define __IHostSecurityContext_INTERFACE_DEFINED__

/* interface IHostSecurityContext */
/* [local][unique][helpstring][uuid][version][object] */ 


EXTERN_C const IID IID_IHostSecurityContext;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7E573CE4-0343-4423-98D7-6318348A1D3C")
    IHostSecurityContext : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Capture( 
            /* [out] */ IHostSecurityContext **ppClonedContext) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHostSecurityContextVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHostSecurityContext * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHostSecurityContext * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHostSecurityContext * This);
        
        HRESULT ( STDMETHODCALLTYPE *Capture )( 
            IHostSecurityContext * This,
            /* [out] */ IHostSecurityContext **ppClonedContext);
        
        END_INTERFACE
    } IHostSecurityContextVtbl;

    interface IHostSecurityContext
    {
        CONST_VTBL struct IHostSecurityContextVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHostSecurityContext_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IHostSecurityContext_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IHostSecurityContext_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IHostSecurityContext_Capture(This,ppClonedContext)	\
    ( (This)->lpVtbl -> Capture(This,ppClonedContext) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IHostSecurityContext_INTERFACE_DEFINED__ */


#ifndef __IHostSecurityManager_INTERFACE_DEFINED__
#define __IHostSecurityManager_INTERFACE_DEFINED__

/* interface IHostSecurityManager */
/* [local][unique][helpstring][uuid][version][object] */ 


EXTERN_C const IID IID_IHostSecurityManager;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("75ad2468-a349-4d02-a764-76a68aee0c4f")
    IHostSecurityManager : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ImpersonateLoggedOnUser( 
            /* [in] */ HANDLE hToken) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RevertToSelf( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OpenThreadToken( 
            /* [in] */ DWORD dwDesiredAccess,
            /* [in] */ BOOL bOpenAsSelf,
            /* [out] */ HANDLE *phThreadToken) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetThreadToken( 
            /* [in] */ HANDLE hToken) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSecurityContext( 
            /* [in] */ EContextType eContextType,
            /* [out] */ IHostSecurityContext **ppSecurityContext) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetSecurityContext( 
            /* [in] */ EContextType eContextType,
            /* [in] */ IHostSecurityContext *pSecurityContext) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IHostSecurityManagerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IHostSecurityManager * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IHostSecurityManager * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IHostSecurityManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *ImpersonateLoggedOnUser )( 
            IHostSecurityManager * This,
            /* [in] */ HANDLE hToken);
        
        HRESULT ( STDMETHODCALLTYPE *RevertToSelf )( 
            IHostSecurityManager * This);
        
        HRESULT ( STDMETHODCALLTYPE *OpenThreadToken )( 
            IHostSecurityManager * This,
            /* [in] */ DWORD dwDesiredAccess,
            /* [in] */ BOOL bOpenAsSelf,
            /* [out] */ HANDLE *phThreadToken);
        
        HRESULT ( STDMETHODCALLTYPE *SetThreadToken )( 
            IHostSecurityManager * This,
            /* [in] */ HANDLE hToken);
        
        HRESULT ( STDMETHODCALLTYPE *GetSecurityContext )( 
            IHostSecurityManager * This,
            /* [in] */ EContextType eContextType,
            /* [out] */ IHostSecurityContext **ppSecurityContext);
        
        HRESULT ( STDMETHODCALLTYPE *SetSecurityContext )( 
            IHostSecurityManager * This,
            /* [in] */ EContextType eContextType,
            /* [in] */ IHostSecurityContext *pSecurityContext);
        
        END_INTERFACE
    } IHostSecurityManagerVtbl;

    interface IHostSecurityManager
    {
        CONST_VTBL struct IHostSecurityManagerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IHostSecurityManager_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IHostSecurityManager_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IHostSecurityManager_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IHostSecurityManager_ImpersonateLoggedOnUser(This,hToken)	\
    ( (This)->lpVtbl -> ImpersonateLoggedOnUser(This,hToken) ) 

#define IHostSecurityManager_RevertToSelf(This)	\
    ( (This)->lpVtbl -> RevertToSelf(This) ) 

#define IHostSecurityManager_OpenThreadToken(This,dwDesiredAccess,bOpenAsSelf,phThreadToken)	\
    ( (This)->lpVtbl -> OpenThreadToken(This,dwDesiredAccess,bOpenAsSelf,phThreadToken) ) 

#define IHostSecurityManager_SetThreadToken(This,hToken)	\
    ( (This)->lpVtbl -> SetThreadToken(This,hToken) ) 

#define IHostSecurityManager_GetSecurityContext(This,eContextType,ppSecurityContext)	\
    ( (This)->lpVtbl -> GetSecurityContext(This,eContextType,ppSecurityContext) ) 

#define IHostSecurityManager_SetSecurityContext(This,eContextType,pSecurityContext)	\
    ( (This)->lpVtbl -> SetSecurityContext(This,eContextType,pSecurityContext) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IHostSecurityManager_INTERFACE_DEFINED__ */


#ifndef __ICLRAppDomainResourceMonitor_INTERFACE_DEFINED__
#define __ICLRAppDomainResourceMonitor_INTERFACE_DEFINED__

/* interface ICLRAppDomainResourceMonitor */
/* [object][local][unique][helpstring][uuid][version] */ 


EXTERN_C const IID IID_ICLRAppDomainResourceMonitor;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c62de18c-2e23-4aea-8423-b40c1fc59eae")
    ICLRAppDomainResourceMonitor : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetCurrentAllocated( 
            /* [in] */ DWORD dwAppDomainId,
            /* [out] */ ULONGLONG *pBytesAllocated) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCurrentSurvived( 
            /* [in] */ DWORD dwAppDomainId,
            /* [out] */ ULONGLONG *pAppDomainBytesSurvived,
            /* [out] */ ULONGLONG *pTotalBytesSurvived) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCurrentCpuTime( 
            /* [in] */ DWORD dwAppDomainId,
            /* [out] */ ULONGLONG *pMilliseconds) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ICLRAppDomainResourceMonitorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ICLRAppDomainResourceMonitor * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ICLRAppDomainResourceMonitor * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ICLRAppDomainResourceMonitor * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetCurrentAllocated )( 
            ICLRAppDomainResourceMonitor * This,
            /* [in] */ DWORD dwAppDomainId,
            /* [out] */ ULONGLONG *pBytesAllocated);
        
        HRESULT ( STDMETHODCALLTYPE *GetCurrentSurvived )( 
            ICLRAppDomainResourceMonitor * This,
            /* [in] */ DWORD dwAppDomainId,
            /* [out] */ ULONGLONG *pAppDomainBytesSurvived,
            /* [out] */ ULONGLONG *pTotalBytesSurvived);
        
        HRESULT ( STDMETHODCALLTYPE *GetCurrentCpuTime )( 
            ICLRAppDomainResourceMonitor * This,
            /* [in] */ DWORD dwAppDomainId,
            /* [out] */ ULONGLONG *pMilliseconds);
        
        END_INTERFACE
    } ICLRAppDomainResourceMonitorVtbl;

    interface ICLRAppDomainResourceMonitor
    {
        CONST_VTBL struct ICLRAppDomainResourceMonitorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ICLRAppDomainResourceMonitor_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ICLRAppDomainResourceMonitor_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ICLRAppDomainResourceMonitor_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ICLRAppDomainResourceMonitor_GetCurrentAllocated(This,dwAppDomainId,pBytesAllocated)	\
    ( (This)->lpVtbl -> GetCurrentAllocated(This,dwAppDomainId,pBytesAllocated) ) 

#define ICLRAppDomainResourceMonitor_GetCurrentSurvived(This,dwAppDomainId,pAppDomainBytesSurvived,pTotalBytesSurvived)	\
    ( (This)->lpVtbl -> GetCurrentSurvived(This,dwAppDomainId,pAppDomainBytesSurvived,pTotalBytesSurvived) ) 

#define ICLRAppDomainResourceMonitor_GetCurrentCpuTime(This,dwAppDomainId,pMilliseconds)	\
    ( (This)->lpVtbl -> GetCurrentCpuTime(This,dwAppDomainId,pMilliseconds) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ICLRAppDomainResourceMonitor_INTERFACE_DEFINED__ */


/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  VARIANT_UserSize(     unsigned long *, unsigned long            , VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserMarshal(  unsigned long *, unsigned char *, VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserUnmarshal(unsigned long *, unsigned char *, VARIANT * ); 
void                      __RPC_USER  VARIANT_UserFree(     unsigned long *, VARIANT * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\MSClus.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0555 */
/* Compiler settings for msclus.idl:
    Oicf, W1, Zp8, env=Win32 (32b run), target_arch=X86 7.00.0555 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __msclus_h__
#define __msclus_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __ClusApplication_FWD_DEFINED__
#define __ClusApplication_FWD_DEFINED__

#ifdef __cplusplus
typedef class ClusApplication ClusApplication;
#else
typedef struct ClusApplication ClusApplication;
#endif /* __cplusplus */

#endif 	/* __ClusApplication_FWD_DEFINED__ */


#ifndef __Cluster_FWD_DEFINED__
#define __Cluster_FWD_DEFINED__

#ifdef __cplusplus
typedef class Cluster Cluster;
#else
typedef struct Cluster Cluster;
#endif /* __cplusplus */

#endif 	/* __Cluster_FWD_DEFINED__ */


#ifndef __ClusVersion_FWD_DEFINED__
#define __ClusVersion_FWD_DEFINED__

#ifdef __cplusplus
typedef class ClusVersion ClusVersion;
#else
typedef struct ClusVersion ClusVersion;
#endif /* __cplusplus */

#endif 	/* __ClusVersion_FWD_DEFINED__ */


#ifndef __ClusResType_FWD_DEFINED__
#define __ClusResType_FWD_DEFINED__

#ifdef __cplusplus
typedef class ClusResType ClusResType;
#else
typedef struct ClusResType ClusResType;
#endif /* __cplusplus */

#endif 	/* __ClusResType_FWD_DEFINED__ */


#ifndef __ClusProperty_FWD_DEFINED__
#define __ClusProperty_FWD_DEFINED__

#ifdef __cplusplus
typedef class ClusProperty ClusProperty;
#else
typedef struct ClusProperty ClusProperty;
#endif /* __cplusplus */

#endif 	/* __ClusProperty_FWD_DEFINED__ */


#ifndef __ClusProperties_FWD_DEFINED__
#define __ClusProperties_FWD_DEFINED__

#ifdef __cplusplus
typedef class ClusProperties ClusProperties;
#else
typedef struct ClusProperties ClusProperties;
#endif /* __cplusplus */

#endif 	/* __ClusProperties_FWD_DEFINED__ */


#ifndef __DomainNames_FWD_DEFINED__
#define __DomainNames_FWD_DEFINED__

#ifdef __cplusplus
typedef class DomainNames DomainNames;
#else
typedef struct DomainNames DomainNames;
#endif /* __cplusplus */

#endif 	/* __DomainNames_FWD_DEFINED__ */


#ifndef __ClusNetwork_FWD_DEFINED__
#define __ClusNetwork_FWD_DEFINED__

#ifdef __cplusplus
typedef class ClusNetwork ClusNetwork;
#else
typedef struct ClusNetwork ClusNetwork;
#endif /* __cplusplus */

#endif 	/* __ClusNetwork_FWD_DEFINED__ */


#ifndef __ClusNetInterface_FWD_DEFINED__
#define __ClusNetInterface_FWD_DEFINED__

#ifdef __cplusplus
typedef class ClusNetInterface ClusNetInterface;
#else
typedef struct ClusNetInterface ClusNetInterface;
#endif /* __cplusplus */

#endif 	/* __ClusNetInterface_FWD_DEFINED__ */


#ifndef __ClusNetInterfaces_FWD_DEFINED__
#define __ClusNetInterfaces_FWD_DEFINED__

#ifdef __cplusplus
typedef class ClusNetInterfaces ClusNetInterfaces;
#else
typedef struct ClusNetInterfaces ClusNetInterfaces;
#endif /* __cplusplus */

#endif 	/* __ClusNetInterfaces_FWD_DEFINED__ */


#ifndef __ClusResDependencies_FWD_DEFINED__
#define __ClusResDependencies_FWD_DEFINED__

#ifdef __cplusplus
typedef class ClusResDependencies ClusResDependencies;
#else
typedef struct ClusResDependencies ClusResDependencies;
#endif /* __cplusplus */

#endif 	/* __ClusResDependencies_FWD_DEFINED__ */


#ifndef __ClusResGroupResources_FWD_DEFINED__
#define __ClusResGroupResources_FWD_DEFINED__

#ifdef __cplusplus
typedef class ClusResGroupResources ClusResGroupResources;
#else
typedef struct ClusResGroupResources ClusResGroupResources;
#endif /* __cplusplus */

#endif 	/* __ClusResGroupResources_FWD_DEFINED__ */


#ifndef __ClusResTypeResources_FWD_DEFINED__
#define __ClusResTypeResources_FWD_DEFINED__

#ifdef __cplusplus
typedef class ClusResTypeResources ClusResTypeResources;
#else
typedef struct ClusResTypeResources ClusResTypeResources;
#endif /* __cplusplus */

#endif 	/* __ClusResTypeResources_FWD_DEFINED__ */


#ifndef __ClusResGroupPreferredOwnerNodes_FWD_DEFINED__
#define __ClusResGroupPreferredOwnerNodes_FWD_DEFINED__

#ifdef __cplusplus
typedef class ClusResGroupPreferredOwnerNodes ClusResGroupPreferredOwnerNodes;
#else
typedef struct ClusResGroupPreferredOwnerNodes ClusResGroupPreferredOwnerNodes;
#endif /* __cplusplus */

#endif 	/* __ClusResGroupPreferredOwnerNodes_FWD_DEFINED__ */


#ifndef __ClusResPossibleOwnerNodes_FWD_DEFINED__
#define __ClusResPossibleOwnerNodes_FWD_DEFINED__

#ifdef __cplusplus
typedef class ClusResPossibleOwnerNodes ClusResPossibleOwnerNodes;
#else
typedef struct ClusResPossibleOwnerNodes ClusResPossibleOwnerNodes;
#endif /* __cplusplus */

#endif 	/* __ClusResPossibleOwnerNodes_FWD_DEFINED__ */


#ifndef __ClusNetworks_FWD_DEFINED__
#define __ClusNetworks_FWD_DEFINED__

#ifdef __cplusplus
typedef class ClusNetworks ClusNetworks;
#else
typedef struct ClusNetworks ClusNetworks;
#endif /* __cplusplus */

#endif 	/* __ClusNetworks_FWD_DEFINED__ */


#ifndef __ClusNetworkNetInterfaces_FWD_DEFINED__
#define __ClusNetworkNetInterfaces_FWD_DEFINED__

#ifdef __cplusplus
typedef class ClusNetworkNetInterfaces ClusNetworkNetInterfaces;
#else
typedef struct ClusNetworkNetInterfaces ClusNetworkNetInterfaces;
#endif /* __cplusplus */

#endif 	/* __ClusNetworkNetInterfaces_FWD_DEFINED__ */


#ifndef __ClusNodeNetInterfaces_FWD_DEFINED__
#define __ClusNodeNetInterfaces_FWD_DEFINED__

#ifdef __cplusplus
typedef class ClusNodeNetInterfaces ClusNodeNetInterfaces;
#else
typedef struct ClusNodeNetInterfaces ClusNodeNetInterfaces;
#endif /* __cplusplus */

#endif 	/* __ClusNodeNetInterfaces_FWD_DEFINED__ */


#ifndef __ClusRefObject_FWD_DEFINED__
#define __ClusRefObject_FWD_DEFINED__

#ifdef __cplusplus
typedef class ClusRefObject ClusRefObject;
#else
typedef struct ClusRefObject ClusRefObject;
#endif /* __cplusplus */

#endif 	/* __ClusRefObject_FWD_DEFINED__ */


#ifndef __ClusterNames_FWD_DEFINED__
#define __ClusterNames_FWD_DEFINED__

#ifdef __cplusplus
typedef class ClusterNames ClusterNames;
#else
typedef struct ClusterNames ClusterNames;
#endif /* __cplusplus */

#endif 	/* __ClusterNames_FWD_DEFINED__ */


#ifndef __ClusNode_FWD_DEFINED__
#define __ClusNode_FWD_DEFINED__

#ifdef __cplusplus
typedef class ClusNode ClusNode;
#else
typedef struct ClusNode ClusNode;
#endif /* __cplusplus */

#endif 	/* __ClusNode_FWD_DEFINED__ */


#ifndef __ClusNodes_FWD_DEFINED__
#define __ClusNodes_FWD_DEFINED__

#ifdef __cplusplus
typedef class ClusNodes ClusNodes;
#else
typedef struct ClusNodes ClusNodes;
#endif /* __cplusplus */

#endif 	/* __ClusNodes_FWD_DEFINED__ */


#ifndef __ClusResGroup_FWD_DEFINED__
#define __ClusResGroup_FWD_DEFINED__

#ifdef __cplusplus
typedef class ClusResGroup ClusResGroup;
#else
typedef struct ClusResGroup ClusResGroup;
#endif /* __cplusplus */

#endif 	/* __ClusResGroup_FWD_DEFINED__ */


#ifndef __ClusResGroups_FWD_DEFINED__
#define __ClusResGroups_FWD_DEFINED__

#ifdef __cplusplus
typedef class ClusResGroups ClusResGroups;
#else
typedef struct ClusResGroups ClusResGroups;
#endif /* __cplusplus */

#endif 	/* __ClusResGroups_FWD_DEFINED__ */


#ifndef __ClusResource_FWD_DEFINED__
#define __ClusResource_FWD_DEFINED__

#ifdef __cplusplus
typedef class ClusResource ClusResource;
#else
typedef struct ClusResource ClusResource;
#endif /* __cplusplus */

#endif 	/* __ClusResource_FWD_DEFINED__ */


#ifndef __ClusResources_FWD_DEFINED__
#define __ClusResources_FWD_DEFINED__

#ifdef __cplusplus
typedef class ClusResources ClusResources;
#else
typedef struct ClusResources ClusResources;
#endif /* __cplusplus */

#endif 	/* __ClusResources_FWD_DEFINED__ */


#ifndef __ClusResTypes_FWD_DEFINED__
#define __ClusResTypes_FWD_DEFINED__

#ifdef __cplusplus
typedef class ClusResTypes ClusResTypes;
#else
typedef struct ClusResTypes ClusResTypes;
#endif /* __cplusplus */

#endif 	/* __ClusResTypes_FWD_DEFINED__ */


#ifndef __ClusResTypePossibleOwnerNodes_FWD_DEFINED__
#define __ClusResTypePossibleOwnerNodes_FWD_DEFINED__

#ifdef __cplusplus
typedef class ClusResTypePossibleOwnerNodes ClusResTypePossibleOwnerNodes;
#else
typedef struct ClusResTypePossibleOwnerNodes ClusResTypePossibleOwnerNodes;
#endif /* __cplusplus */

#endif 	/* __ClusResTypePossibleOwnerNodes_FWD_DEFINED__ */


#ifndef __ClusPropertyValue_FWD_DEFINED__
#define __ClusPropertyValue_FWD_DEFINED__

#ifdef __cplusplus
typedef class ClusPropertyValue ClusPropertyValue;
#else
typedef struct ClusPropertyValue ClusPropertyValue;
#endif /* __cplusplus */

#endif 	/* __ClusPropertyValue_FWD_DEFINED__ */


#ifndef __ClusPropertyValues_FWD_DEFINED__
#define __ClusPropertyValues_FWD_DEFINED__

#ifdef __cplusplus
typedef class ClusPropertyValues ClusPropertyValues;
#else
typedef struct ClusPropertyValues ClusPropertyValues;
#endif /* __cplusplus */

#endif 	/* __ClusPropertyValues_FWD_DEFINED__ */


#ifndef __ClusPropertyValueData_FWD_DEFINED__
#define __ClusPropertyValueData_FWD_DEFINED__

#ifdef __cplusplus
typedef class ClusPropertyValueData ClusPropertyValueData;
#else
typedef struct ClusPropertyValueData ClusPropertyValueData;
#endif /* __cplusplus */

#endif 	/* __ClusPropertyValueData_FWD_DEFINED__ */


#ifndef __ClusPartition_FWD_DEFINED__
#define __ClusPartition_FWD_DEFINED__

#ifdef __cplusplus
typedef class ClusPartition ClusPartition;
#else
typedef struct ClusPartition ClusPartition;
#endif /* __cplusplus */

#endif 	/* __ClusPartition_FWD_DEFINED__ */


#ifndef __ClusPartitionEx_FWD_DEFINED__
#define __ClusPartitionEx_FWD_DEFINED__

#ifdef __cplusplus
typedef class ClusPartitionEx ClusPartitionEx;
#else
typedef struct ClusPartitionEx ClusPartitionEx;
#endif /* __cplusplus */

#endif 	/* __ClusPartitionEx_FWD_DEFINED__ */


#ifndef __ClusPartitions_FWD_DEFINED__
#define __ClusPartitions_FWD_DEFINED__

#ifdef __cplusplus
typedef class ClusPartitions ClusPartitions;
#else
typedef struct ClusPartitions ClusPartitions;
#endif /* __cplusplus */

#endif 	/* __ClusPartitions_FWD_DEFINED__ */


#ifndef __ClusDisk_FWD_DEFINED__
#define __ClusDisk_FWD_DEFINED__

#ifdef __cplusplus
typedef class ClusDisk ClusDisk;
#else
typedef struct ClusDisk ClusDisk;
#endif /* __cplusplus */

#endif 	/* __ClusDisk_FWD_DEFINED__ */


#ifndef __ClusDisks_FWD_DEFINED__
#define __ClusDisks_FWD_DEFINED__

#ifdef __cplusplus
typedef class ClusDisks ClusDisks;
#else
typedef struct ClusDisks ClusDisks;
#endif /* __cplusplus */

#endif 	/* __ClusDisks_FWD_DEFINED__ */


#ifndef __ClusScsiAddress_FWD_DEFINED__
#define __ClusScsiAddress_FWD_DEFINED__

#ifdef __cplusplus
typedef class ClusScsiAddress ClusScsiAddress;
#else
typedef struct ClusScsiAddress ClusScsiAddress;
#endif /* __cplusplus */

#endif 	/* __ClusScsiAddress_FWD_DEFINED__ */


#ifndef __ClusRegistryKeys_FWD_DEFINED__
#define __ClusRegistryKeys_FWD_DEFINED__

#ifdef __cplusplus
typedef class ClusRegistryKeys ClusRegistryKeys;
#else
typedef struct ClusRegistryKeys ClusRegistryKeys;
#endif /* __cplusplus */

#endif 	/* __ClusRegistryKeys_FWD_DEFINED__ */


#ifndef __ClusCryptoKeys_FWD_DEFINED__
#define __ClusCryptoKeys_FWD_DEFINED__

#ifdef __cplusplus
typedef class ClusCryptoKeys ClusCryptoKeys;
#else
typedef struct ClusCryptoKeys ClusCryptoKeys;
#endif /* __cplusplus */

#endif 	/* __ClusCryptoKeys_FWD_DEFINED__ */


#ifndef __ClusResDependents_FWD_DEFINED__
#define __ClusResDependents_FWD_DEFINED__

#ifdef __cplusplus
typedef class ClusResDependents ClusResDependents;
#else
typedef struct ClusResDependents ClusResDependents;
#endif /* __cplusplus */

#endif 	/* __ClusResDependents_FWD_DEFINED__ */


#ifndef __ISClusApplication_FWD_DEFINED__
#define __ISClusApplication_FWD_DEFINED__
typedef interface ISClusApplication ISClusApplication;
#endif 	/* __ISClusApplication_FWD_DEFINED__ */


#ifndef __ISDomainNames_FWD_DEFINED__
#define __ISDomainNames_FWD_DEFINED__
typedef interface ISDomainNames ISDomainNames;
#endif 	/* __ISDomainNames_FWD_DEFINED__ */


#ifndef __ISClusterNames_FWD_DEFINED__
#define __ISClusterNames_FWD_DEFINED__
typedef interface ISClusterNames ISClusterNames;
#endif 	/* __ISClusterNames_FWD_DEFINED__ */


#ifndef __ISClusRefObject_FWD_DEFINED__
#define __ISClusRefObject_FWD_DEFINED__
typedef interface ISClusRefObject ISClusRefObject;
#endif 	/* __ISClusRefObject_FWD_DEFINED__ */


#ifndef __ISClusVersion_FWD_DEFINED__
#define __ISClusVersion_FWD_DEFINED__
typedef interface ISClusVersion ISClusVersion;
#endif 	/* __ISClusVersion_FWD_DEFINED__ */


#ifndef __ISCluster_FWD_DEFINED__
#define __ISCluster_FWD_DEFINED__
typedef interface ISCluster ISCluster;
#endif 	/* __ISCluster_FWD_DEFINED__ */


#ifndef __ISClusNode_FWD_DEFINED__
#define __ISClusNode_FWD_DEFINED__
typedef interface ISClusNode ISClusNode;
#endif 	/* __ISClusNode_FWD_DEFINED__ */


#ifndef __ISClusNodes_FWD_DEFINED__
#define __ISClusNodes_FWD_DEFINED__
typedef interface ISClusNodes ISClusNodes;
#endif 	/* __ISClusNodes_FWD_DEFINED__ */


#ifndef __ISClusNetwork_FWD_DEFINED__
#define __ISClusNetwork_FWD_DEFINED__
typedef interface ISClusNetwork ISClusNetwork;
#endif 	/* __ISClusNetwork_FWD_DEFINED__ */


#ifndef __ISClusNetworks_FWD_DEFINED__
#define __ISClusNetworks_FWD_DEFINED__
typedef interface ISClusNetworks ISClusNetworks;
#endif 	/* __ISClusNetworks_FWD_DEFINED__ */


#ifndef __ISClusNetInterface_FWD_DEFINED__
#define __ISClusNetInterface_FWD_DEFINED__
typedef interface ISClusNetInterface ISClusNetInterface;
#endif 	/* __ISClusNetInterface_FWD_DEFINED__ */


#ifndef __ISClusNetInterfaces_FWD_DEFINED__
#define __ISClusNetInterfaces_FWD_DEFINED__
typedef interface ISClusNetInterfaces ISClusNetInterfaces;
#endif 	/* __ISClusNetInterfaces_FWD_DEFINED__ */


#ifndef __ISClusNodeNetInterfaces_FWD_DEFINED__
#define __ISClusNodeNetInterfaces_FWD_DEFINED__
typedef interface ISClusNodeNetInterfaces ISClusNodeNetInterfaces;
#endif 	/* __ISClusNodeNetInterfaces_FWD_DEFINED__ */


#ifndef __ISClusNetworkNetInterfaces_FWD_DEFINED__
#define __ISClusNetworkNetInterfaces_FWD_DEFINED__
typedef interface ISClusNetworkNetInterfaces ISClusNetworkNetInterfaces;
#endif 	/* __ISClusNetworkNetInterfaces_FWD_DEFINED__ */


#ifndef __ISClusResGroup_FWD_DEFINED__
#define __ISClusResGroup_FWD_DEFINED__
typedef interface ISClusResGroup ISClusResGroup;
#endif 	/* __ISClusResGroup_FWD_DEFINED__ */


#ifndef __ISClusResGroups_FWD_DEFINED__
#define __ISClusResGroups_FWD_DEFINED__
typedef interface ISClusResGroups ISClusResGroups;
#endif 	/* __ISClusResGroups_FWD_DEFINED__ */


#ifndef __ISClusResource_FWD_DEFINED__
#define __ISClusResource_FWD_DEFINED__
typedef interface ISClusResource ISClusResource;
#endif 	/* __ISClusResource_FWD_DEFINED__ */


#ifndef __ISClusResDependencies_FWD_DEFINED__
#define __ISClusResDependencies_FWD_DEFINED__
typedef interface ISClusResDependencies ISClusResDependencies;
#endif 	/* __ISClusResDependencies_FWD_DEFINED__ */


#ifndef __ISClusResGroupResources_FWD_DEFINED__
#define __ISClusResGroupResources_FWD_DEFINED__
typedef interface ISClusResGroupResources ISClusResGroupResources;
#endif 	/* __ISClusResGroupResources_FWD_DEFINED__ */


#ifndef __ISClusResTypeResources_FWD_DEFINED__
#define __ISClusResTypeResources_FWD_DEFINED__
typedef interface ISClusResTypeResources ISClusResTypeResources;
#endif 	/* __ISClusResTypeResources_FWD_DEFINED__ */


#ifndef __ISClusResources_FWD_DEFINED__
#define __ISClusResources_FWD_DEFINED__
typedef interface ISClusResources ISClusResources;
#endif 	/* __ISClusResources_FWD_DEFINED__ */


#ifndef __ISClusResGroupPreferredOwnerNodes_FWD_DEFINED__
#define __ISClusResGroupPreferredOwnerNodes_FWD_DEFINED__
typedef interface ISClusResGroupPreferredOwnerNodes ISClusResGroupPreferredOwnerNodes;
#endif 	/* __ISClusResGroupPreferredOwnerNodes_FWD_DEFINED__ */


#ifndef __ISClusResPossibleOwnerNodes_FWD_DEFINED__
#define __ISClusResPossibleOwnerNodes_FWD_DEFINED__
typedef interface ISClusResPossibleOwnerNodes ISClusResPossibleOwnerNodes;
#endif 	/* __ISClusResPossibleOwnerNodes_FWD_DEFINED__ */


#ifndef __ISClusResTypePossibleOwnerNodes_FWD_DEFINED__
#define __ISClusResTypePossibleOwnerNodes_FWD_DEFINED__
typedef interface ISClusResTypePossibleOwnerNodes ISClusResTypePossibleOwnerNodes;
#endif 	/* __ISClusResTypePossibleOwnerNodes_FWD_DEFINED__ */


#ifndef __ISClusResType_FWD_DEFINED__
#define __ISClusResType_FWD_DEFINED__
typedef interface ISClusResType ISClusResType;
#endif 	/* __ISClusResType_FWD_DEFINED__ */


#ifndef __ISClusResTypes_FWD_DEFINED__
#define __ISClusResTypes_FWD_DEFINED__
typedef interface ISClusResTypes ISClusResTypes;
#endif 	/* __ISClusResTypes_FWD_DEFINED__ */


#ifndef __ISClusProperty_FWD_DEFINED__
#define __ISClusProperty_FWD_DEFINED__
typedef interface ISClusProperty ISClusProperty;
#endif 	/* __ISClusProperty_FWD_DEFINED__ */


#ifndef __ISClusPropertyValue_FWD_DEFINED__
#define __ISClusPropertyValue_FWD_DEFINED__
typedef interface ISClusPropertyValue ISClusPropertyValue;
#endif 	/* __ISClusPropertyValue_FWD_DEFINED__ */


#ifndef __ISClusPropertyValues_FWD_DEFINED__
#define __ISClusPropertyValues_FWD_DEFINED__
typedef interface ISClusPropertyValues ISClusPropertyValues;
#endif 	/* __ISClusPropertyValues_FWD_DEFINED__ */


#ifndef __ISClusProperties_FWD_DEFINED__
#define __ISClusProperties_FWD_DEFINED__
typedef interface ISClusProperties ISClusProperties;
#endif 	/* __ISClusProperties_FWD_DEFINED__ */


#ifndef __ISClusPropertyValueData_FWD_DEFINED__
#define __ISClusPropertyValueData_FWD_DEFINED__
typedef interface ISClusPropertyValueData ISClusPropertyValueData;
#endif 	/* __ISClusPropertyValueData_FWD_DEFINED__ */


#ifndef __ISClusPartition_FWD_DEFINED__
#define __ISClusPartition_FWD_DEFINED__
typedef interface ISClusPartition ISClusPartition;
#endif 	/* __ISClusPartition_FWD_DEFINED__ */


#ifndef __ISClusPartitionEx_FWD_DEFINED__
#define __ISClusPartitionEx_FWD_DEFINED__
typedef interface ISClusPartitionEx ISClusPartitionEx;
#endif 	/* __ISClusPartitionEx_FWD_DEFINED__ */


#ifndef __ISClusPartitions_FWD_DEFINED__
#define __ISClusPartitions_FWD_DEFINED__
typedef interface ISClusPartitions ISClusPartitions;
#endif 	/* __ISClusPartitions_FWD_DEFINED__ */


#ifndef __ISClusDisk_FWD_DEFINED__
#define __ISClusDisk_FWD_DEFINED__
typedef interface ISClusDisk ISClusDisk;
#endif 	/* __ISClusDisk_FWD_DEFINED__ */


#ifndef __ISClusDisks_FWD_DEFINED__
#define __ISClusDisks_FWD_DEFINED__
typedef interface ISClusDisks ISClusDisks;
#endif 	/* __ISClusDisks_FWD_DEFINED__ */


#ifndef __ISClusScsiAddress_FWD_DEFINED__
#define __ISClusScsiAddress_FWD_DEFINED__
typedef interface ISClusScsiAddress ISClusScsiAddress;
#endif 	/* __ISClusScsiAddress_FWD_DEFINED__ */


#ifndef __ISClusRegistryKeys_FWD_DEFINED__
#define __ISClusRegistryKeys_FWD_DEFINED__
typedef interface ISClusRegistryKeys ISClusRegistryKeys;
#endif 	/* __ISClusRegistryKeys_FWD_DEFINED__ */


#ifndef __ISClusCryptoKeys_FWD_DEFINED__
#define __ISClusCryptoKeys_FWD_DEFINED__
typedef interface ISClusCryptoKeys ISClusCryptoKeys;
#endif 	/* __ISClusCryptoKeys_FWD_DEFINED__ */


#ifndef __ISClusResDependents_FWD_DEFINED__
#define __ISClusResDependents_FWD_DEFINED__
typedef interface ISClusResDependents ISClusResDependents;
#endif 	/* __ISClusResDependents_FWD_DEFINED__ */


/* header files for imported files */
#include "basetsd.h"
#include "oaidl.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_msclus_0000_0000 */
/* [local] */ 

#ifndef _CLUSTER_API_TYPES_
#define _CLUSTER_API_TYPES_
#pragma once
typedef struct _HCLUSTER *HCLUSTER;

typedef struct _HNODE *HNODE;

typedef struct _HRESOURCE *HRESOURCE;

typedef struct _HGROUP *HGROUP;

typedef struct _HNETWORK *HNETWORK;

typedef struct _HNETINTERFACE *HNETINTERFACE;

typedef struct _HCHANGE *HCHANGE;

typedef struct _HCLUSENUM *HCLUSENUM;

typedef struct _HGROUPENUM *HGROUPENUM;

typedef struct _HRESENUM *HRESENUM;

typedef struct _HNETWORKENUM *HNETWORKENUM;

typedef struct _HNODEENUM *HNODEENUM;

typedef struct _HRESTYPEENUM *HRESTYPEENUM;

typedef struct _HREGBATCH *HREGBATCH;

typedef struct _HREGBATCHPORT *HREGBATCHPORT;

typedef struct _HREGBATCHNOTIFICATION *HREGBATCHNOTIFICATION;

typedef struct _HNODEENUMEX *HNODEENUMEX;

typedef struct _HCLUSENUMEX *HCLUSENUMEX;

typedef 
enum CLUSTER_QUORUM_TYPE
    {	OperationalQuorum	= 0,
	ModifyQuorum	= ( OperationalQuorum + 1 ) 
    } 	CLUSTER_QUORUM_TYPE;

typedef 
enum NODE_CLUSTER_STATE
    {	ClusterStateNotInstalled	= 0,
	ClusterStateNotConfigured	= 0x1,
	ClusterStateNotRunning	= ( 0x1 | 0x2 ) ,
	ClusterStateRunning	= ( ( 0x1 | 0x2 )  | 0x10 ) 
    } 	NODE_CLUSTER_STATE;

typedef 
enum CLUSTER_RESOURCE_STATE_CHANGE_REASON
    {	eResourceStateChangeReasonUnknown	= 0,
	eResourceStateChangeReasonMove	= ( eResourceStateChangeReasonUnknown + 1 ) ,
	eResourceStateChangeReasonFailover	= ( eResourceStateChangeReasonMove + 1 ) ,
	eResourceStateChangeReasonFailedMove	= ( eResourceStateChangeReasonFailover + 1 ) ,
	eResourceStateChangeReasonShutdown	= ( eResourceStateChangeReasonFailedMove + 1 ) ,
	eResourceStateChangeReasonRundown	= ( eResourceStateChangeReasonShutdown + 1 ) 
    } 	CLUSTER_RESOURCE_STATE_CHANGE_REASON;

typedef 
enum _CLUSTER_REG_COMMAND
    {	CLUSREG_COMMAND_NONE	= 0,
	CLUSREG_SET_VALUE	= 1,
	CLUSREG_CREATE_KEY	= ( CLUSREG_SET_VALUE + 1 ) ,
	CLUSREG_DELETE_KEY	= ( CLUSREG_CREATE_KEY + 1 ) ,
	CLUSREG_DELETE_VALUE	= ( CLUSREG_DELETE_KEY + 1 ) ,
	CLUSREG_SET_KEY_SECURITY	= ( CLUSREG_DELETE_VALUE + 1 ) ,
	CLUSREG_VALUE_DELETED	= ( CLUSREG_SET_KEY_SECURITY + 1 ) ,
	CLUSREG_LAST_COMMAND	= ( CLUSREG_VALUE_DELETED + 1 ) 
    } 	CLUSTER_REG_COMMAND;

typedef struct _CLUSTER_ENUM_ITEM
    {
    DWORD dwVersion;
    DWORD dwType;
    DWORD cbId;
    LPWSTR lpszId;
    DWORD cbName;
    LPWSTR lpszName;
    } 	CLUSTER_ENUM_ITEM;

typedef struct _CLUSTER_ENUM_ITEM *PCLUSTER_ENUM_ITEM;

typedef 
enum CLUSTER_QUORUM_VALUE
    {	CLUSTER_QUORUM_MAINTAINED	= 0,
	CLUSTER_QUORUM_LOST	= 1
    } 	CLUSTER_QUORUM_VALUE;

typedef 
enum CLUSTER_CHANGE
    {	CLUSTER_CHANGE_NODE_STATE	= 0x1,
	CLUSTER_CHANGE_NODE_DELETED	= 0x2,
	CLUSTER_CHANGE_NODE_ADDED	= 0x4,
	CLUSTER_CHANGE_NODE_PROPERTY	= 0x8,
	CLUSTER_CHANGE_REGISTRY_NAME	= 0x10,
	CLUSTER_CHANGE_REGISTRY_ATTRIBUTES	= 0x20,
	CLUSTER_CHANGE_REGISTRY_VALUE	= 0x40,
	CLUSTER_CHANGE_REGISTRY_SUBTREE	= 0x80,
	CLUSTER_CHANGE_RESOURCE_STATE	= 0x100,
	CLUSTER_CHANGE_RESOURCE_DELETED	= 0x200,
	CLUSTER_CHANGE_RESOURCE_ADDED	= 0x400,
	CLUSTER_CHANGE_RESOURCE_PROPERTY	= 0x800,
	CLUSTER_CHANGE_GROUP_STATE	= 0x1000,
	CLUSTER_CHANGE_GROUP_DELETED	= 0x2000,
	CLUSTER_CHANGE_GROUP_ADDED	= 0x4000,
	CLUSTER_CHANGE_GROUP_PROPERTY	= 0x8000,
	CLUSTER_CHANGE_RESOURCE_TYPE_DELETED	= 0x10000,
	CLUSTER_CHANGE_RESOURCE_TYPE_ADDED	= 0x20000,
	CLUSTER_CHANGE_RESOURCE_TYPE_PROPERTY	= 0x40000,
	CLUSTER_CHANGE_CLUSTER_RECONNECT	= 0x80000,
	CLUSTER_CHANGE_NETWORK_STATE	= 0x100000,
	CLUSTER_CHANGE_NETWORK_DELETED	= 0x200000,
	CLUSTER_CHANGE_NETWORK_ADDED	= 0x400000,
	CLUSTER_CHANGE_NETWORK_PROPERTY	= 0x800000,
	CLUSTER_CHANGE_NETINTERFACE_STATE	= 0x1000000,
	CLUSTER_CHANGE_NETINTERFACE_DELETED	= 0x2000000,
	CLUSTER_CHANGE_NETINTERFACE_ADDED	= 0x4000000,
	CLUSTER_CHANGE_NETINTERFACE_PROPERTY	= 0x8000000,
	CLUSTER_CHANGE_QUORUM_STATE	= 0x10000000,
	CLUSTER_CHANGE_CLUSTER_STATE	= 0x20000000,
	CLUSTER_CHANGE_CLUSTER_PROPERTY	= 0x40000000,
	CLUSTER_CHANGE_HANDLE_CLOSE	= 0x80000000,
	CLUSTER_CHANGE_ALL	= ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( CLUSTER_CHANGE_NODE_STATE | CLUSTER_CHANGE_NODE_DELETED )  | CLUSTER_CHANGE_NODE_ADDED )  | CLUSTER_CHANGE_NODE_PROPERTY )  | CLUSTER_CHANGE_REGISTRY_NAME )  | CLUSTER_CHANGE_REGISTRY_ATTRIBUTES )  | CLUSTER_CHANGE_REGISTRY_VALUE )  | CLUSTER_CHANGE_REGISTRY_SUBTREE )  | CLUSTER_CHANGE_RESOURCE_STATE )  | CLUSTER_CHANGE_RESOURCE_DELETED )  | CLUSTER_CHANGE_RESOURCE_ADDED )  | CLUSTER_CHANGE_RESOURCE_PROPERTY )  | CLUSTER_CHANGE_GROUP_STATE )  | CLUSTER_CHANGE_GROUP_DELETED )  | CLUSTER_CHANGE_GROUP_ADDED )  | CLUSTER_CHANGE_GROUP_PROPERTY )  | CLUSTER_CHANGE_RESOURCE_TYPE_DELETED )  | CLUSTER_CHANGE_RESOURCE_TYPE_ADDED )  | CLUSTER_CHANGE_RESOURCE_TYPE_PROPERTY )  | CLUSTER_CHANGE_NETWORK_STATE )  | CLUSTER_CHANGE_NETWORK_DELETED )  | CLUSTER_CHANGE_NETWORK_ADDED )  | CLUSTER_CHANGE_NETWORK_PROPERTY )  | CLUSTER_CHANGE_NETINTERFACE_STATE )  | CLUSTER_CHANGE_NETINTERFACE_DELETED )  | CLUSTER_CHANGE_NETINTERFACE_ADDED )  | CLUSTER_CHANGE_NETINTERFACE_PROPERTY )  | CLUSTER_CHANGE_QUORUM_STATE )  | CLUSTER_CHANGE_CLUSTER_STATE )  | CLUSTER_CHANGE_CLUSTER_PROPERTY )  | CLUSTER_CHANGE_CLUSTER_RECONNECT )  | CLUSTER_CHANGE_HANDLE_CLOSE ) 
    } 	CLUSTER_CHANGE;

typedef 
enum CLUSTER_ENUM
    {	CLUSTER_ENUM_NODE	= 0x1,
	CLUSTER_ENUM_RESTYPE	= 0x2,
	CLUSTER_ENUM_RESOURCE	= 0x4,
	CLUSTER_ENUM_GROUP	= 0x8,
	CLUSTER_ENUM_NETWORK	= 0x10,
	CLUSTER_ENUM_NETINTERFACE	= 0x20,
	CLUSTER_ENUM_SHARED_VOLUME_RESOURCE	= 0x40000000,
	CLUSTER_ENUM_INTERNAL_NETWORK	= 0x80000000,
	CLUSTER_ENUM_ALL	= ( ( ( ( ( CLUSTER_ENUM_NODE | CLUSTER_ENUM_RESTYPE )  | CLUSTER_ENUM_RESOURCE )  | CLUSTER_ENUM_GROUP )  | CLUSTER_ENUM_NETWORK )  | CLUSTER_ENUM_NETINTERFACE ) 
    } 	CLUSTER_ENUM;

typedef 
enum CLUSTER_NODE_ENUM
    {	CLUSTER_NODE_ENUM_NETINTERFACES	= 0x1,
	CLUSTER_NODE_ENUM_GROUPS	= 0x2,
	CLUSTER_NODE_ENUM_ALL	= ( CLUSTER_NODE_ENUM_NETINTERFACES | CLUSTER_NODE_ENUM_GROUPS ) 
    } 	CLUSTER_NODE_ENUM;

typedef 
enum CLUSTER_NODE_STATE
    {	ClusterNodeStateUnknown	= -1,
	ClusterNodeUp	= ( ClusterNodeStateUnknown + 1 ) ,
	ClusterNodeDown	= ( ClusterNodeUp + 1 ) ,
	ClusterNodePaused	= ( ClusterNodeDown + 1 ) ,
	ClusterNodeJoining	= ( ClusterNodePaused + 1 ) 
    } 	CLUSTER_NODE_STATE;

typedef 
enum CLUSTER_GROUP_ENUM
    {	CLUSTER_GROUP_ENUM_CONTAINS	= 0x1,
	CLUSTER_GROUP_ENUM_NODES	= 0x2,
	CLUSTER_GROUP_ENUM_ALL	= ( CLUSTER_GROUP_ENUM_CONTAINS | CLUSTER_GROUP_ENUM_NODES ) 
    } 	CLUSTER_GROUP_ENUM;

typedef 
enum CLUSTER_GROUP_STATE
    {	ClusterGroupStateUnknown	= -1,
	ClusterGroupOnline	= ( ClusterGroupStateUnknown + 1 ) ,
	ClusterGroupOffline	= ( ClusterGroupOnline + 1 ) ,
	ClusterGroupFailed	= ( ClusterGroupOffline + 1 ) ,
	ClusterGroupPartialOnline	= ( ClusterGroupFailed + 1 ) ,
	ClusterGroupPending	= ( ClusterGroupPartialOnline + 1 ) 
    } 	CLUSTER_GROUP_STATE;

typedef 
enum CLUSTER_GROUP_AUTOFAILBACK_TYPE
    {	ClusterGroupPreventFailback	= 0,
	ClusterGroupAllowFailback	= ( ClusterGroupPreventFailback + 1 ) ,
	ClusterGroupFailbackTypeCount	= ( ClusterGroupAllowFailback + 1 ) 
    } 	CLUSTER_GROUP_AUTOFAILBACK_TYPE;

typedef enum CLUSTER_GROUP_AUTOFAILBACK_TYPE CGAFT;

typedef 
enum CLUSTER_RESOURCE_STATE
    {	ClusterResourceStateUnknown	= -1,
	ClusterResourceInherited	= ( ClusterResourceStateUnknown + 1 ) ,
	ClusterResourceInitializing	= ( ClusterResourceInherited + 1 ) ,
	ClusterResourceOnline	= ( ClusterResourceInitializing + 1 ) ,
	ClusterResourceOffline	= ( ClusterResourceOnline + 1 ) ,
	ClusterResourceFailed	= ( ClusterResourceOffline + 1 ) ,
	ClusterResourcePending	= 128,
	ClusterResourceOnlinePending	= ( ClusterResourcePending + 1 ) ,
	ClusterResourceOfflinePending	= ( ClusterResourceOnlinePending + 1 ) 
    } 	CLUSTER_RESOURCE_STATE;

typedef 
enum CLUSTER_RESOURCE_RESTART_ACTION
    {	ClusterResourceDontRestart	= 0,
	ClusterResourceRestartNoNotify	= ( ClusterResourceDontRestart + 1 ) ,
	ClusterResourceRestartNotify	= ( ClusterResourceRestartNoNotify + 1 ) ,
	ClusterResourceRestartActionCount	= ( ClusterResourceRestartNotify + 1 ) 
    } 	CLUSTER_RESOURCE_RESTART_ACTION;

typedef enum CLUSTER_RESOURCE_RESTART_ACTION CRRA;

typedef 
enum CLUSTER_RESOURCE_CREATE_FLAGS
    {	CLUSTER_RESOURCE_DEFAULT_MONITOR	= 0,
	CLUSTER_RESOURCE_SEPARATE_MONITOR	= 1,
	CLUSTER_RESOURCE_VALID_FLAGS	= CLUSTER_RESOURCE_SEPARATE_MONITOR
    } 	CLUSTER_RESOURCE_CREATE_FLAGS;

typedef 
enum CLUSTER_PROPERTY_TYPE
    {	CLUSPROP_TYPE_UNKNOWN	= -1,
	CLUSPROP_TYPE_ENDMARK	= 0,
	CLUSPROP_TYPE_LIST_VALUE	= ( CLUSPROP_TYPE_ENDMARK + 1 ) ,
	CLUSPROP_TYPE_RESCLASS	= ( CLUSPROP_TYPE_LIST_VALUE + 1 ) ,
	CLUSPROP_TYPE_RESERVED1	= ( CLUSPROP_TYPE_RESCLASS + 1 ) ,
	CLUSPROP_TYPE_NAME	= ( CLUSPROP_TYPE_RESERVED1 + 1 ) ,
	CLUSPROP_TYPE_SIGNATURE	= ( CLUSPROP_TYPE_NAME + 1 ) ,
	CLUSPROP_TYPE_SCSI_ADDRESS	= ( CLUSPROP_TYPE_SIGNATURE + 1 ) ,
	CLUSPROP_TYPE_DISK_NUMBER	= ( CLUSPROP_TYPE_SCSI_ADDRESS + 1 ) ,
	CLUSPROP_TYPE_PARTITION_INFO	= ( CLUSPROP_TYPE_DISK_NUMBER + 1 ) ,
	CLUSPROP_TYPE_FTSET_INFO	= ( CLUSPROP_TYPE_PARTITION_INFO + 1 ) ,
	CLUSPROP_TYPE_DISK_SERIALNUMBER	= ( CLUSPROP_TYPE_FTSET_INFO + 1 ) ,
	CLUSPROP_TYPE_DISK_GUID	= ( CLUSPROP_TYPE_DISK_SERIALNUMBER + 1 ) ,
	CLUSPROP_TYPE_DISK_SIZE	= ( CLUSPROP_TYPE_DISK_GUID + 1 ) ,
	CLUSPROP_TYPE_PARTITION_INFO_EX	= ( CLUSPROP_TYPE_DISK_SIZE + 1 ) ,
	CLUSPROP_TYPE_USER	= 32768
    } 	CLUSTER_PROPERTY_TYPE;

typedef 
enum CLUSTER_PROPERTY_FORMAT
    {	CLUSPROP_FORMAT_UNKNOWN	= 0,
	CLUSPROP_FORMAT_BINARY	= ( CLUSPROP_FORMAT_UNKNOWN + 1 ) ,
	CLUSPROP_FORMAT_DWORD	= ( CLUSPROP_FORMAT_BINARY + 1 ) ,
	CLUSPROP_FORMAT_SZ	= ( CLUSPROP_FORMAT_DWORD + 1 ) ,
	CLUSPROP_FORMAT_EXPAND_SZ	= ( CLUSPROP_FORMAT_SZ + 1 ) ,
	CLUSPROP_FORMAT_MULTI_SZ	= ( CLUSPROP_FORMAT_EXPAND_SZ + 1 ) ,
	CLUSPROP_FORMAT_ULARGE_INTEGER	= ( CLUSPROP_FORMAT_MULTI_SZ + 1 ) ,
	CLUSPROP_FORMAT_LONG	= ( CLUSPROP_FORMAT_ULARGE_INTEGER + 1 ) ,
	CLUSPROP_FORMAT_EXPANDED_SZ	= ( CLUSPROP_FORMAT_LONG + 1 ) ,
	CLUSPROP_FORMAT_SECURITY_DESCRIPTOR	= ( CLUSPROP_FORMAT_EXPANDED_SZ + 1 ) ,
	CLUSPROP_FORMAT_LARGE_INTEGER	= ( CLUSPROP_FORMAT_SECURITY_DESCRIPTOR + 1 ) ,
	CLUSPROP_FORMAT_WORD	= ( CLUSPROP_FORMAT_LARGE_INTEGER + 1 ) ,
	CLUSPROP_FORMAT_FILETIME	= ( CLUSPROP_FORMAT_WORD + 1 ) ,
	CLUSPROP_FORMAT_USER	= 32768
    } 	CLUSTER_PROPERTY_FORMAT;

typedef 
enum CLUSTER_PROPERTY_SYNTAX
    {	CLUSPROP_SYNTAX_ENDMARK	= ( DWORD  )(( ( CLUSPROP_TYPE_ENDMARK << 16 )  | CLUSPROP_FORMAT_UNKNOWN ) ),
	CLUSPROP_SYNTAX_NAME	= ( DWORD  )(( ( CLUSPROP_TYPE_NAME << 16 )  | CLUSPROP_FORMAT_SZ ) ),
	CLUSPROP_SYNTAX_RESCLASS	= ( DWORD  )(( ( CLUSPROP_TYPE_RESCLASS << 16 )  | CLUSPROP_FORMAT_DWORD ) ),
	CLUSPROP_SYNTAX_LIST_VALUE_SZ	= ( DWORD  )(( ( CLUSPROP_TYPE_LIST_VALUE << 16 )  | CLUSPROP_FORMAT_SZ ) ),
	CLUSPROP_SYNTAX_LIST_VALUE_EXPAND_SZ	= ( DWORD  )(( ( CLUSPROP_TYPE_LIST_VALUE << 16 )  | CLUSPROP_FORMAT_EXPAND_SZ ) ),
	CLUSPROP_SYNTAX_LIST_VALUE_DWORD	= ( DWORD  )(( ( CLUSPROP_TYPE_LIST_VALUE << 16 )  | CLUSPROP_FORMAT_DWORD ) ),
	CLUSPROP_SYNTAX_LIST_VALUE_BINARY	= ( DWORD  )(( ( CLUSPROP_TYPE_LIST_VALUE << 16 )  | CLUSPROP_FORMAT_BINARY ) ),
	CLUSPROP_SYNTAX_LIST_VALUE_MULTI_SZ	= ( DWORD  )(( ( CLUSPROP_TYPE_LIST_VALUE << 16 )  | CLUSPROP_FORMAT_MULTI_SZ ) ),
	CLUSPROP_SYNTAX_LIST_VALUE_LONG	= ( DWORD  )(( ( CLUSPROP_TYPE_LIST_VALUE << 16 )  | CLUSPROP_FORMAT_LONG ) ),
	CLUSPROP_SYNTAX_LIST_VALUE_EXPANDED_SZ	= ( DWORD  )(( ( CLUSPROP_TYPE_LIST_VALUE << 16 )  | CLUSPROP_FORMAT_EXPANDED_SZ ) ),
	CLUSPROP_SYNTAX_LIST_VALUE_SECURITY_DESCRIPTOR	= ( DWORD  )(( ( CLUSPROP_TYPE_LIST_VALUE << 16 )  | CLUSPROP_FORMAT_SECURITY_DESCRIPTOR ) ),
	CLUSPROP_SYNTAX_LIST_VALUE_LARGE_INTEGER	= ( DWORD  )(( ( CLUSPROP_TYPE_LIST_VALUE << 16 )  | CLUSPROP_FORMAT_LARGE_INTEGER ) ),
	CLUSPROP_SYNTAX_LIST_VALUE_ULARGE_INTEGER	= ( DWORD  )(( ( CLUSPROP_TYPE_LIST_VALUE << 16 )  | CLUSPROP_FORMAT_ULARGE_INTEGER ) ),
	CLUSPROP_SYNTAX_LIST_VALUE_WORD	= ( DWORD  )(( ( CLUSPROP_TYPE_LIST_VALUE << 16 )  | CLUSPROP_FORMAT_WORD ) ),
	CLUSPROP_SYNTAX_DISK_SIGNATURE	= ( DWORD  )(( ( CLUSPROP_TYPE_SIGNATURE << 16 )  | CLUSPROP_FORMAT_DWORD ) ),
	CLUSPROP_SYNTAX_SCSI_ADDRESS	= ( DWORD  )(( ( CLUSPROP_TYPE_SCSI_ADDRESS << 16 )  | CLUSPROP_FORMAT_DWORD ) ),
	CLUSPROP_SYNTAX_DISK_NUMBER	= ( DWORD  )(( ( CLUSPROP_TYPE_DISK_NUMBER << 16 )  | CLUSPROP_FORMAT_DWORD ) ),
	CLUSPROP_SYNTAX_PARTITION_INFO	= ( DWORD  )(( ( CLUSPROP_TYPE_PARTITION_INFO << 16 )  | CLUSPROP_FORMAT_BINARY ) ),
	CLUSPROP_SYNTAX_FTSET_INFO	= ( DWORD  )(( ( CLUSPROP_TYPE_FTSET_INFO << 16 )  | CLUSPROP_FORMAT_BINARY ) ),
	CLUSPROP_SYNTAX_DISK_SERIALNUMBER	= ( DWORD  )(( ( CLUSPROP_TYPE_DISK_SERIALNUMBER << 16 )  | CLUSPROP_FORMAT_SZ ) ),
	CLUSPROP_SYNTAX_DISK_GUID	= ( DWORD  )(( ( CLUSPROP_TYPE_DISK_GUID << 16 )  | CLUSPROP_FORMAT_SZ ) ),
	CLUSPROP_SYNTAX_DISK_SIZE	= ( DWORD  )(( ( CLUSPROP_TYPE_DISK_SIZE << 16 )  | CLUSPROP_FORMAT_ULARGE_INTEGER ) ),
	CLUSPROP_SYNTAX_PARTITION_INFO_EX	= ( DWORD  )(( ( CLUSPROP_TYPE_PARTITION_INFO_EX << 16 )  | CLUSPROP_FORMAT_BINARY ) ),
	CLUSPROP_SYNTAX_LIST_VALUE_FILETIME	= ( DWORD  )(( ( CLUSPROP_TYPE_LIST_VALUE << 16 )  | CLUSPROP_FORMAT_FILETIME ) )
    } 	CLUSTER_PROPERTY_SYNTAX;

typedef 
enum CLUSTER_CONTROL_OBJECT
    {	CLUS_OBJECT_INVALID	= 0,
	CLUS_OBJECT_RESOURCE	= ( CLUS_OBJECT_INVALID + 1 ) ,
	CLUS_OBJECT_RESOURCE_TYPE	= ( CLUS_OBJECT_RESOURCE + 1 ) ,
	CLUS_OBJECT_GROUP	= ( CLUS_OBJECT_RESOURCE_TYPE + 1 ) ,
	CLUS_OBJECT_NODE	= ( CLUS_OBJECT_GROUP + 1 ) ,
	CLUS_OBJECT_NETWORK	= ( CLUS_OBJECT_NODE + 1 ) ,
	CLUS_OBJECT_NETINTERFACE	= ( CLUS_OBJECT_NETWORK + 1 ) ,
	CLUS_OBJECT_CLUSTER	= ( CLUS_OBJECT_NETINTERFACE + 1 ) ,
	CLUS_OBJECT_USER	= 128
    } 	CLUSTER_CONTROL_OBJECT;

typedef 
enum CLCTL_CODES
    {	CLCTL_UNKNOWN	= ( ( ( 0 << 0 )  | ( ( 0 + 0 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_GET_CHARACTERISTICS	= ( ( ( 0x1 << 0 )  | ( ( 0 + 1 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_GET_FLAGS	= ( ( ( 0x1 << 0 )  | ( ( 0 + 2 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_GET_CLASS_INFO	= ( ( ( 0x1 << 0 )  | ( ( 0 + 3 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_GET_REQUIRED_DEPENDENCIES	= ( ( ( 0x1 << 0 )  | ( ( 0 + 4 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_GET_ARB_TIMEOUT	= ( ( ( 0x1 << 0 )  | ( ( 0 + 5 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_GET_NAME	= ( ( ( 0x1 << 0 )  | ( ( 0 + 10 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_GET_RESOURCE_TYPE	= ( ( ( 0x1 << 0 )  | ( ( 0 + 11 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_GET_NODE	= ( ( ( 0x1 << 0 )  | ( ( 0 + 12 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_GET_NETWORK	= ( ( ( 0x1 << 0 )  | ( ( 0 + 13 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_GET_ID	= ( ( ( 0x1 << 0 )  | ( ( 0 + 14 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_GET_FQDN	= ( ( ( 0x1 << 0 )  | ( ( 0 + 15 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_GET_CLUSTER_SERVICE_ACCOUNT_NAME	= ( ( ( 0x1 << 0 )  | ( ( 0 + 16 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_CHECK_VOTER_EVICT	= ( ( ( 0x1 << 0 )  | ( ( 0 + 17 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_CHECK_VOTER_DOWN	= ( ( ( 0x1 << 0 )  | ( ( 0 + 18 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_SHUTDOWN	= ( ( ( 0x1 << 0 )  | ( ( 0 + 19 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_ENUM_COMMON_PROPERTIES	= ( ( ( 0x1 << 0 )  | ( ( 0 + 20 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_GET_RO_COMMON_PROPERTIES	= ( ( ( 0x1 << 0 )  | ( ( 0 + 21 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_GET_COMMON_PROPERTIES	= ( ( ( 0x1 << 0 )  | ( ( 0 + 22 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_SET_COMMON_PROPERTIES	= ( ( ( 0x2 << 0 )  | ( ( 0 + 23 )  << 2 )  )  | ( 0x1 << 22 )  ) ,
	CLCTL_VALIDATE_COMMON_PROPERTIES	= ( ( ( 0x1 << 0 )  | ( ( 0 + 24 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_GET_COMMON_PROPERTY_FMTS	= ( ( ( 0x1 << 0 )  | ( ( 0 + 25 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_GET_COMMON_RESOURCE_PROPERTY_FMTS	= ( ( ( 0x1 << 0 )  | ( ( 0 + 26 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_ENUM_PRIVATE_PROPERTIES	= ( ( ( 0x1 << 0 )  | ( ( 0 + 30 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_GET_RO_PRIVATE_PROPERTIES	= ( ( ( 0x1 << 0 )  | ( ( 0 + 31 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_GET_PRIVATE_PROPERTIES	= ( ( ( 0x1 << 0 )  | ( ( 0 + 32 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_SET_PRIVATE_PROPERTIES	= ( ( ( 0x2 << 0 )  | ( ( 0 + 33 )  << 2 )  )  | ( 0x1 << 22 )  ) ,
	CLCTL_VALIDATE_PRIVATE_PROPERTIES	= ( ( ( 0x1 << 0 )  | ( ( 0 + 34 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_GET_PRIVATE_PROPERTY_FMTS	= ( ( ( 0x1 << 0 )  | ( ( 0 + 35 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_GET_PRIVATE_RESOURCE_PROPERTY_FMTS	= ( ( ( 0x1 << 0 )  | ( ( 0 + 36 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_ADD_REGISTRY_CHECKPOINT	= ( ( ( 0x2 << 0 )  | ( ( 0 + 40 )  << 2 )  )  | ( 0x1 << 22 )  ) ,
	CLCTL_DELETE_REGISTRY_CHECKPOINT	= ( ( ( 0x2 << 0 )  | ( ( 0 + 41 )  << 2 )  )  | ( 0x1 << 22 )  ) ,
	CLCTL_GET_REGISTRY_CHECKPOINTS	= ( ( ( 0x1 << 0 )  | ( ( 0 + 42 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_ADD_CRYPTO_CHECKPOINT	= ( ( ( 0x2 << 0 )  | ( ( 0 + 43 )  << 2 )  )  | ( 0x1 << 22 )  ) ,
	CLCTL_DELETE_CRYPTO_CHECKPOINT	= ( ( ( 0x2 << 0 )  | ( ( 0 + 44 )  << 2 )  )  | ( 0x1 << 22 )  ) ,
	CLCTL_GET_CRYPTO_CHECKPOINTS	= ( ( ( 0x1 << 0 )  | ( ( 0 + 45 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_RESOURCE_UPGRADE_DLL	= ( ( ( 0x2 << 0 )  | ( ( 0 + 46 )  << 2 )  )  | ( 0x1 << 22 )  ) ,
	CLCTL_ADD_REGISTRY_CHECKPOINT_64BIT	= ( ( ( 0x2 << 0 )  | ( ( 0 + 47 )  << 2 )  )  | ( 0x1 << 22 )  ) ,
	CLCTL_ADD_REGISTRY_CHECKPOINT_32BIT	= ( ( ( 0x2 << 0 )  | ( ( 0 + 48 )  << 2 )  )  | ( 0x1 << 22 )  ) ,
	CLCTL_GET_LOADBAL_PROCESS_LIST	= ( ( ( 0x1 << 0 )  | ( ( 0 + 50 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_GET_NETWORK_NAME	= ( ( ( 0x1 << 0 )  | ( ( 0 + 90 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_NETNAME_GET_VIRTUAL_SERVER_TOKEN	= ( ( ( 0x1 << 0 )  | ( ( 0 + 91 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_NETNAME_REGISTER_DNS_RECORDS	= ( ( ( 0x2 << 0 )  | ( ( 0 + 92 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_GET_DNS_NAME	= ( ( ( 0x1 << 0 )  | ( ( 0 + 93 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_NETNAME_SET_PWD_INFO	= ( ( ( 0x2 << 0 )  | ( ( 0 + 94 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_NETNAME_DELETE_CO	= ( ( ( 0x2 << 0 )  | ( ( 0 + 95 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_NETNAME_VALIDATE_VCO	= ( ( ( 0x1 << 0 )  | ( ( 0 + 96 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_NETNAME_RESET_VCO	= ( ( ( 0x1 << 0 )  | ( ( 0 + 97 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_NETNAME_CREDS_UPDATED	= ( ( ( ( 0x2 << 0 )  | ( ( 0 + 98 )  << 2 )  )  | ( 0x1 << 22 )  )  | ( 1 << 23 )  ) ,
	CLCTL_STORAGE_GET_DISK_INFO	= ( ( ( 0x1 << 0 )  | ( ( 0 + 100 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_STORAGE_GET_AVAILABLE_DISKS	= ( ( ( 0x1 << 0 )  | ( ( 0 + 101 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_STORAGE_IS_PATH_VALID	= ( ( ( 0x1 << 0 )  | ( ( 0 + 102 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_STORAGE_SYNC_CLUSDISK_DB	= ( ( ( 0x2 << 0 )  | ( ( 0 + 103 )  << 2 )  )  | ( 0x1 << 22 )  ) ,
	CLCTL_QUERY_DELETE	= ( ( ( 0x1 << 0 )  | ( ( 0 + 110 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_IPADDRESS_RENEW_LEASE	= ( ( ( 0x2 << 0 )  | ( ( 0 + 111 )  << 2 )  )  | ( 0x1 << 22 )  ) ,
	CLCTL_IPADDRESS_RELEASE_LEASE	= ( ( ( 0x2 << 0 )  | ( ( 0 + 112 )  << 2 )  )  | ( 0x1 << 22 )  ) ,
	CLCTL_QUERY_MAINTENANCE_MODE	= ( ( ( 0x1 << 0 )  | ( ( 0 + 120 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_SET_MAINTENANCE_MODE	= ( ( ( 0x2 << 0 )  | ( ( 0 + 121 )  << 2 )  )  | ( 0x1 << 22 )  ) ,
	CLCTL_STORAGE_SET_DRIVELETTER	= ( ( ( 0x2 << 0 )  | ( ( 0 + 122 )  << 2 )  )  | ( 0x1 << 22 )  ) ,
	CLCTL_STORAGE_GET_DRIVELETTERS	= ( ( ( 0x1 << 0 )  | ( ( 0 + 123 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_STORAGE_GET_DISK_INFO_EX	= ( ( ( 0x1 << 0 )  | ( ( 0 + 124 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_STORAGE_GET_AVAILABLE_DISKS_EX	= ( ( ( 0x1 << 0 )  | ( ( 0 + 125 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_STORAGE_REMAP_DRIVELETTER	= ( ( ( 0x1 << 0 )  | ( ( 0 + 128 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_STORAGE_GET_DISKID	= ( ( ( 0x1 << 0 )  | ( ( 0 + 129 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_STORAGE_IS_CLUSTERABLE	= ( ( ( 0x1 << 0 )  | ( ( 0 + 130 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_STORAGE_REMOVE_VM_OWNERSHIP	= ( ( ( 0x2 << 0 )  | ( ( 0 + 131 )  << 2 )  )  | ( 0x1 << 22 )  ) ,
	CLCTL_STORAGE_GET_MOUNTPOINTS	= ( ( ( 0x1 << 0 )  | ( ( 0 + 132 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_STORAGE_CLUSTER_DISK	= ( ( ( ( 0x2 << 0 )  | ( ( 0 + 132 )  << 2 )  )  | ( 0x1 << 22 )  )  | ( 1 << 23 )  ) ,
	CLCTL_STORAGE_GET_DIRTY	= ( ( ( 0x1 << 0 )  | ( ( 0 + 134 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_STORAGE_GET_SHARED_VOLUME_INFO	= ( ( ( 0x1 << 0 )  | ( ( 0 + 137 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_STORAGE_IS_CSV_FILE	= ( ( ( 0x1 << 0 )  | ( ( 0 + 138 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_VALIDATE_PATH	= ( ( ( 0x1 << 0 )  | ( ( 0 + 140 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_VALIDATE_NETNAME	= ( ( ( 0x1 << 0 )  | ( ( 0 + 141 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_VALIDATE_DIRECTORY	= ( ( ( 0x1 << 0 )  | ( ( 0 + 142 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_BATCH_BLOCK_KEY	= ( ( ( 0x2 << 0 )  | ( ( 0 + 143 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_BATCH_UNBLOCK_KEY	= ( ( ( 0x1 << 0 )  | ( ( 0 + 144 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_FILESERVER_SHARE_ADD	= ( ( ( 0x1 << 0 )  | ( ( 0 + 145 )  << 2 )  )  | ( 0x1 << 22 )  ) ,
	CLCTL_FILESERVER_SHARE_DEL	= ( ( ( 0x1 << 0 )  | ( ( 0 + 146 )  << 2 )  )  | ( 0x1 << 22 )  ) ,
	CLCTL_FILESERVER_SHARE_MODIFY	= ( ( ( 0x1 << 0 )  | ( ( 0 + 147 )  << 2 )  )  | ( 0x1 << 22 )  ) ,
	CLCTL_FILESERVER_SHARE_REPORT	= ( ( ( 0x1 << 0 )  | ( ( 0 + 148 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_ENABLE_SHARED_VOLUME_DIRECTIO	= ( ( ( 0x2 << 0 )  | ( ( 0 + 162 )  << 2 )  )  | ( 0x1 << 22 )  ) ,
	CLCTL_DISABLE_SHARED_VOLUME_DIRECTIO	= ( ( ( 0x2 << 0 )  | ( ( 0 + 163 )  << 2 )  )  | ( 0x1 << 22 )  ) ,
	CLCTL_GET_SHARED_VOLUME_ID	= ( ( ( 0x1 << 0 )  | ( ( 0 + 164 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_SET_CSV_MAINTENANCE_MODE	= ( ( ( 0x2 << 0 )  | ( ( 0 + 165 )  << 2 )  )  | ( 0x1 << 22 )  ) ,
	CLCTL_SET_SHARED_VOLUME_BACKUP_MODE	= ( ( ( 0x2 << 0 )  | ( ( 0 + 166 )  << 2 )  )  | ( 0x1 << 22 )  ) ,
	CLCTL_DELETE	= ( ( ( ( 0x2 << 0 )  | ( 1 << 20 )  )  | ( ( 0 + 1 )  << 2 )  )  | ( 0x1 << 22 )  ) ,
	CLCTL_INSTALL_NODE	= ( ( ( ( 0x2 << 0 )  | ( 1 << 20 )  )  | ( ( 0 + 2 )  << 2 )  )  | ( 0x1 << 22 )  ) ,
	CLCTL_EVICT_NODE	= ( ( ( ( 0x2 << 0 )  | ( 1 << 20 )  )  | ( ( 0 + 3 )  << 2 )  )  | ( 0x1 << 22 )  ) ,
	CLCTL_ADD_DEPENDENCY	= ( ( ( ( 0x2 << 0 )  | ( 1 << 20 )  )  | ( ( 0 + 4 )  << 2 )  )  | ( 0x1 << 22 )  ) ,
	CLCTL_REMOVE_DEPENDENCY	= ( ( ( ( 0x2 << 0 )  | ( 1 << 20 )  )  | ( ( 0 + 5 )  << 2 )  )  | ( 0x1 << 22 )  ) ,
	CLCTL_ADD_OWNER	= ( ( ( ( 0x2 << 0 )  | ( 1 << 20 )  )  | ( ( 0 + 6 )  << 2 )  )  | ( 0x1 << 22 )  ) ,
	CLCTL_REMOVE_OWNER	= ( ( ( ( 0x2 << 0 )  | ( 1 << 20 )  )  | ( ( 0 + 7 )  << 2 )  )  | ( 0x1 << 22 )  ) ,
	CLCTL_SET_NAME	= ( ( ( ( 0x2 << 0 )  | ( 1 << 20 )  )  | ( ( 0 + 9 )  << 2 )  )  | ( 0x1 << 22 )  ) ,
	CLCTL_CLUSTER_NAME_CHANGED	= ( ( ( ( 0x2 << 0 )  | ( 1 << 20 )  )  | ( ( 0 + 10 )  << 2 )  )  | ( 0x1 << 22 )  ) ,
	CLCTL_CLUSTER_VERSION_CHANGED	= ( ( ( ( 0x2 << 0 )  | ( 1 << 20 )  )  | ( ( 0 + 11 )  << 2 )  )  | ( 0x1 << 22 )  ) ,
	CLCTL_FIXUP_ON_UPGRADE	= ( ( ( ( 0x2 << 0 )  | ( 1 << 20 )  )  | ( ( 0 + 12 )  << 2 )  )  | ( 0x1 << 22 )  ) ,
	CLCTL_STARTING_PHASE1	= ( ( ( ( 0x2 << 0 )  | ( 1 << 20 )  )  | ( ( 0 + 13 )  << 2 )  )  | ( 0x1 << 22 )  ) ,
	CLCTL_STARTING_PHASE2	= ( ( ( ( 0x2 << 0 )  | ( 1 << 20 )  )  | ( ( 0 + 14 )  << 2 )  )  | ( 0x1 << 22 )  ) ,
	CLCTL_HOLD_IO	= ( ( ( ( 0x2 << 0 )  | ( 1 << 20 )  )  | ( ( 0 + 15 )  << 2 )  )  | ( 0x1 << 22 )  ) ,
	CLCTL_RESUME_IO	= ( ( ( ( 0x2 << 0 )  | ( 1 << 20 )  )  | ( ( 0 + 16 )  << 2 )  )  | ( 0x1 << 22 )  ) ,
	CLCTL_FORCE_QUORUM	= ( ( ( ( 0x2 << 0 )  | ( 1 << 20 )  )  | ( ( 0 + 17 )  << 2 )  )  | ( 0x1 << 22 )  ) ,
	CLCTL_INITIALIZE	= ( ( ( ( 0x2 << 0 )  | ( 1 << 20 )  )  | ( ( 0 + 18 )  << 2 )  )  | ( 0x1 << 22 )  ) ,
	CLCTL_STATE_CHANGE_REASON	= ( ( ( ( 0x2 << 0 )  | ( 1 << 20 )  )  | ( ( 0 + 19 )  << 2 )  )  | ( 0x1 << 22 )  ) ,
	CLCTL_PROVIDER_STATE_CHANGE	= ( ( ( ( 0x2 << 0 )  | ( 1 << 20 )  )  | ( ( 0 + 20 )  << 2 )  )  | ( 0x1 << 22 )  ) ,
	CLCTL_LEAVING_GROUP	= ( ( ( ( 0x2 << 0 )  | ( 1 << 20 )  )  | ( ( 0 + 21 )  << 2 )  )  | ( 0x1 << 22 )  ) ,
	CLCTL_JOINING_GROUP	= ( ( ( ( 0x2 << 0 )  | ( 1 << 20 )  )  | ( ( 0 + 22 )  << 2 )  )  | ( 0x1 << 22 )  ) ,
	CLCTL_FSWITNESS_GET_EPOCH_INFO	= ( ( ( ( 0x1 << 0 )  | ( 1 << 20 )  )  | ( ( 0 + 23 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_FSWITNESS_SET_EPOCH_INFO	= ( ( ( ( 0x2 << 0 )  | ( 1 << 20 )  )  | ( ( 0 + 24 )  << 2 )  )  | ( 0x1 << 22 )  ) ,
	CLCTL_FSWITNESS_RELEASE_LOCK	= ( ( ( ( 0x2 << 0 )  | ( 1 << 20 )  )  | ( ( 0 + 25 )  << 2 )  )  | ( 0x1 << 22 )  ) ,
	CLCTL_NETNAME_CREDS_NOTIFYCAM	= ( ( ( ( 0x2 << 0 )  | ( 1 << 20 )  )  | ( ( 0 + 26 )  << 2 )  )  | ( 0x1 << 22 )  ) ,
	CLCTL_STORAGE_GET_DISK_NUMBER	= ( ( ( ( 0x1 << 0 )  | ( 1 << 20 )  )  | ( ( 0 + 27 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_STORAGE_GET_CSV_DISK_INFO	= ( ( ( ( 0x1 << 0 )  | ( 1 << 20 )  )  | ( ( 0 + 28 )  << 2 )  )  | ( 0 << 22 )  ) ,
	CLCTL_SET_CLUSTER_MEMBERSHIP	= ( ( ( ( 0x2 << 0 )  | ( 1 << 20 )  )  | ( ( 0 + 29 )  << 2 )  )  | ( 0x1 << 22 )  ) ,
	CLCTL_SET_SHARED_PR_KEY	= ( ( ( ( 0x2 << 0 )  | ( 1 << 20 )  )  | ( ( 0 + 30 )  << 2 )  )  | ( 0x1 << 22 )  ) ,
	CLCTL_QUERY_CSV_MAINTENANCE_MODE	= ( ( ( ( 0x1 << 0 )  | ( 1 << 20 )  )  | ( ( 0 + 31 )  << 2 )  )  | ( 0 << 22 )  ) 
    } 	CLCTL_CODES;

typedef 
enum CLUSCTL_RESOURCE_CODES
    {	CLUSCTL_RESOURCE_UNKNOWN	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_UNKNOWN ) ,
	CLUSCTL_RESOURCE_GET_CHARACTERISTICS	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_GET_CHARACTERISTICS ) ,
	CLUSCTL_RESOURCE_GET_FLAGS	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_GET_FLAGS ) ,
	CLUSCTL_RESOURCE_GET_CLASS_INFO	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_GET_CLASS_INFO ) ,
	CLUSCTL_RESOURCE_GET_REQUIRED_DEPENDENCIES	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_GET_REQUIRED_DEPENDENCIES ) ,
	CLUSCTL_RESOURCE_GET_NAME	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_GET_NAME ) ,
	CLUSCTL_RESOURCE_GET_ID	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_GET_ID ) ,
	CLUSCTL_RESOURCE_GET_RESOURCE_TYPE	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_GET_RESOURCE_TYPE ) ,
	CLUSCTL_RESOURCE_ENUM_COMMON_PROPERTIES	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_ENUM_COMMON_PROPERTIES ) ,
	CLUSCTL_RESOURCE_GET_RO_COMMON_PROPERTIES	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_GET_RO_COMMON_PROPERTIES ) ,
	CLUSCTL_RESOURCE_GET_COMMON_PROPERTIES	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_GET_COMMON_PROPERTIES ) ,
	CLUSCTL_RESOURCE_SET_COMMON_PROPERTIES	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_SET_COMMON_PROPERTIES ) ,
	CLUSCTL_RESOURCE_VALIDATE_COMMON_PROPERTIES	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_VALIDATE_COMMON_PROPERTIES ) ,
	CLUSCTL_RESOURCE_GET_COMMON_PROPERTY_FMTS	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_GET_COMMON_PROPERTY_FMTS ) ,
	CLUSCTL_RESOURCE_ENUM_PRIVATE_PROPERTIES	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_ENUM_PRIVATE_PROPERTIES ) ,
	CLUSCTL_RESOURCE_GET_RO_PRIVATE_PROPERTIES	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_GET_RO_PRIVATE_PROPERTIES ) ,
	CLUSCTL_RESOURCE_GET_PRIVATE_PROPERTIES	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_GET_PRIVATE_PROPERTIES ) ,
	CLUSCTL_RESOURCE_SET_PRIVATE_PROPERTIES	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_SET_PRIVATE_PROPERTIES ) ,
	CLUSCTL_RESOURCE_VALIDATE_PRIVATE_PROPERTIES	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_VALIDATE_PRIVATE_PROPERTIES ) ,
	CLUSCTL_RESOURCE_GET_PRIVATE_PROPERTY_FMTS	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_GET_PRIVATE_PROPERTY_FMTS ) ,
	CLUSCTL_RESOURCE_ADD_REGISTRY_CHECKPOINT	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_ADD_REGISTRY_CHECKPOINT ) ,
	CLUSCTL_RESOURCE_DELETE_REGISTRY_CHECKPOINT	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_DELETE_REGISTRY_CHECKPOINT ) ,
	CLUSCTL_RESOURCE_GET_REGISTRY_CHECKPOINTS	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_GET_REGISTRY_CHECKPOINTS ) ,
	CLUSCTL_RESOURCE_ADD_CRYPTO_CHECKPOINT	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_ADD_CRYPTO_CHECKPOINT ) ,
	CLUSCTL_RESOURCE_DELETE_CRYPTO_CHECKPOINT	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_DELETE_CRYPTO_CHECKPOINT ) ,
	CLUSCTL_RESOURCE_GET_CRYPTO_CHECKPOINTS	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_GET_CRYPTO_CHECKPOINTS ) ,
	CLUSCTL_RESOURCE_GET_LOADBAL_PROCESS_LIST	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_GET_LOADBAL_PROCESS_LIST ) ,
	CLUSCTL_RESOURCE_GET_NETWORK_NAME	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_GET_NETWORK_NAME ) ,
	CLUSCTL_RESOURCE_NETNAME_GET_VIRTUAL_SERVER_TOKEN	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_NETNAME_GET_VIRTUAL_SERVER_TOKEN ) ,
	CLUSCTL_RESOURCE_NETNAME_SET_PWD_INFO	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_NETNAME_SET_PWD_INFO ) ,
	CLUSCTL_RESOURCE_NETNAME_DELETE_CO	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_NETNAME_DELETE_CO ) ,
	CLUSCTL_RESOURCE_NETNAME_VALIDATE_VCO	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_NETNAME_VALIDATE_VCO ) ,
	CLUSCTL_RESOURCE_NETNAME_RESET_VCO	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_NETNAME_RESET_VCO ) ,
	CLUSCTL_RESOURCE_NETNAME_REGISTER_DNS_RECORDS	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_NETNAME_REGISTER_DNS_RECORDS ) ,
	CLUSCTL_RESOURCE_GET_DNS_NAME	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_GET_DNS_NAME ) ,
	CLUSCTL_RESOURCE_STORAGE_GET_DISK_INFO	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_STORAGE_GET_DISK_INFO ) ,
	CLUSCTL_RESOURCE_STORAGE_IS_PATH_VALID	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_STORAGE_IS_PATH_VALID ) ,
	CLUSCTL_RESOURCE_QUERY_DELETE	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_QUERY_DELETE ) ,
	CLUSCTL_RESOURCE_UPGRADE_DLL	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_RESOURCE_UPGRADE_DLL ) ,
	CLUSCTL_RESOURCE_IPADDRESS_RENEW_LEASE	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_IPADDRESS_RENEW_LEASE ) ,
	CLUSCTL_RESOURCE_IPADDRESS_RELEASE_LEASE	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_IPADDRESS_RELEASE_LEASE ) ,
	CLUSCTL_RESOURCE_ADD_REGISTRY_CHECKPOINT_64BIT	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_ADD_REGISTRY_CHECKPOINT_64BIT ) ,
	CLUSCTL_RESOURCE_ADD_REGISTRY_CHECKPOINT_32BIT	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_ADD_REGISTRY_CHECKPOINT_32BIT ) ,
	CLUSCTL_RESOURCE_QUERY_MAINTENANCE_MODE	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_QUERY_MAINTENANCE_MODE ) ,
	CLUSCTL_RESOURCE_SET_MAINTENANCE_MODE	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_SET_MAINTENANCE_MODE ) ,
	CLUSCTL_RESOURCE_STORAGE_SET_DRIVELETTER	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_STORAGE_SET_DRIVELETTER ) ,
	CLUSCTL_RESOURCE_STORAGE_GET_DISK_INFO_EX	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_STORAGE_GET_DISK_INFO_EX ) ,
	CLUSCTL_RESOURCE_FILESERVER_SHARE_ADD	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_FILESERVER_SHARE_ADD ) ,
	CLUSCTL_RESOURCE_FILESERVER_SHARE_DEL	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_FILESERVER_SHARE_DEL ) ,
	CLUSCTL_RESOURCE_FILESERVER_SHARE_MODIFY	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_FILESERVER_SHARE_MODIFY ) ,
	CLUSCTL_RESOURCE_FILESERVER_SHARE_REPORT	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_FILESERVER_SHARE_REPORT ) ,
	CLUSCTL_RESOURCE_STORAGE_GET_MOUNTPOINTS	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_STORAGE_GET_MOUNTPOINTS ) ,
	CLUSCTL_RESOURCE_STORAGE_CLUSTER_DISK	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_STORAGE_CLUSTER_DISK ) ,
	CLUSCTL_RESOURCE_STORAGE_GET_DIRTY	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_STORAGE_GET_DIRTY ) ,
	CLUSCTL_RESOURCE_STORAGE_GET_SHARED_VOLUME_INFO	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_STORAGE_GET_SHARED_VOLUME_INFO ) ,
	CLUSCTL_RESOURCE_SET_CSV_MAINTENANCE_MODE	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_SET_CSV_MAINTENANCE_MODE ) ,
	CLUSCTL_RESOURCE_ENABLE_SHARED_VOLUME_DIRECTIO	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_ENABLE_SHARED_VOLUME_DIRECTIO ) ,
	CLUSCTL_RESOURCE_DISABLE_SHARED_VOLUME_DIRECTIO	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_DISABLE_SHARED_VOLUME_DIRECTIO ) ,
	CLUSCTL_RESOURCE_SET_SHARED_VOLUME_BACKUP_MODE	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_SET_SHARED_VOLUME_BACKUP_MODE ) ,
	CLUSCTL_RESOURCE_DELETE	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_DELETE ) ,
	CLUSCTL_RESOURCE_INSTALL_NODE	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_INSTALL_NODE ) ,
	CLUSCTL_RESOURCE_EVICT_NODE	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_EVICT_NODE ) ,
	CLUSCTL_RESOURCE_ADD_DEPENDENCY	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_ADD_DEPENDENCY ) ,
	CLUSCTL_RESOURCE_REMOVE_DEPENDENCY	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_REMOVE_DEPENDENCY ) ,
	CLUSCTL_RESOURCE_ADD_OWNER	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_ADD_OWNER ) ,
	CLUSCTL_RESOURCE_REMOVE_OWNER	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_REMOVE_OWNER ) ,
	CLUSCTL_RESOURCE_SET_NAME	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_SET_NAME ) ,
	CLUSCTL_RESOURCE_CLUSTER_NAME_CHANGED	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_CLUSTER_NAME_CHANGED ) ,
	CLUSCTL_RESOURCE_CLUSTER_VERSION_CHANGED	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_CLUSTER_VERSION_CHANGED ) ,
	CLUSCTL_RESOURCE_FORCE_QUORUM	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_FORCE_QUORUM ) ,
	CLUSCTL_RESOURCE_INITIALIZE	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_INITIALIZE ) ,
	CLUSCTL_RESOURCE_STATE_CHANGE_REASON	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_STATE_CHANGE_REASON ) ,
	CLUSCTL_RESOURCE_PROVIDER_STATE_CHANGE	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_PROVIDER_STATE_CHANGE ) ,
	CLUSCTL_RESOURCE_LEAVING_GROUP	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_LEAVING_GROUP ) ,
	CLUSCTL_RESOURCE_JOINING_GROUP	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_JOINING_GROUP ) ,
	CLUSCTL_RESOURCE_FSWITNESS_GET_EPOCH_INFO	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_FSWITNESS_GET_EPOCH_INFO ) ,
	CLUSCTL_RESOURCE_FSWITNESS_SET_EPOCH_INFO	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_FSWITNESS_SET_EPOCH_INFO ) ,
	CLUSCTL_RESOURCE_FSWITNESS_RELEASE_LOCK	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_FSWITNESS_RELEASE_LOCK ) ,
	CLUSCTL_RESOURCE_NETNAME_CREDS_UPDATED	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_NETNAME_CREDS_UPDATED ) ,
	CLUSCTL_RESOURCE_NETNAME_CREDS_NOTIFYCAM	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_NETNAME_CREDS_NOTIFYCAM ) ,
	CLUSCTL_RESOURCE_SET_CLUSTER_MEMBERSHIP	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_SET_CLUSTER_MEMBERSHIP ) ,
	CLUSCTL_RESOURCE_SET_SHARED_PR_KEY	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_SET_SHARED_PR_KEY ) ,
	CLUSCTL_RESOURCE_STORAGE_GET_DISK_NUMBER	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_STORAGE_GET_DISK_NUMBER ) ,
	CLUSCTL_RESOURCE_STORAGE_GET_CSV_DISK_INFO	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_STORAGE_GET_CSV_DISK_INFO ) ,
	CLUSCTL_RESOURCE_QUERY_CSV_MAINTENANCE_MODE	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_QUERY_CSV_MAINTENANCE_MODE ) 
    } 	CLUSCTL_RESOURCE_CODES;

typedef 
enum CLUSCTL_RESOURCE_TYPE_CODES
    {	CLUSCTL_RESOURCE_TYPE_UNKNOWN	= ( ( CLUS_OBJECT_RESOURCE_TYPE << 24 )  | CLCTL_UNKNOWN ) ,
	CLUSCTL_RESOURCE_TYPE_GET_CHARACTERISTICS	= ( ( CLUS_OBJECT_RESOURCE_TYPE << 24 )  | CLCTL_GET_CHARACTERISTICS ) ,
	CLUSCTL_RESOURCE_TYPE_GET_FLAGS	= ( ( CLUS_OBJECT_RESOURCE_TYPE << 24 )  | CLCTL_GET_FLAGS ) ,
	CLUSCTL_RESOURCE_TYPE_GET_CLASS_INFO	= ( ( CLUS_OBJECT_RESOURCE_TYPE << 24 )  | CLCTL_GET_CLASS_INFO ) ,
	CLUSCTL_RESOURCE_TYPE_GET_REQUIRED_DEPENDENCIES	= ( ( CLUS_OBJECT_RESOURCE_TYPE << 24 )  | CLCTL_GET_REQUIRED_DEPENDENCIES ) ,
	CLUSCTL_RESOURCE_TYPE_GET_ARB_TIMEOUT	= ( ( CLUS_OBJECT_RESOURCE_TYPE << 24 )  | CLCTL_GET_ARB_TIMEOUT ) ,
	CLUSCTL_RESOURCE_TYPE_ENUM_COMMON_PROPERTIES	= ( ( CLUS_OBJECT_RESOURCE_TYPE << 24 )  | CLCTL_ENUM_COMMON_PROPERTIES ) ,
	CLUSCTL_RESOURCE_TYPE_GET_RO_COMMON_PROPERTIES	= ( ( CLUS_OBJECT_RESOURCE_TYPE << 24 )  | CLCTL_GET_RO_COMMON_PROPERTIES ) ,
	CLUSCTL_RESOURCE_TYPE_GET_COMMON_PROPERTIES	= ( ( CLUS_OBJECT_RESOURCE_TYPE << 24 )  | CLCTL_GET_COMMON_PROPERTIES ) ,
	CLUSCTL_RESOURCE_TYPE_VALIDATE_COMMON_PROPERTIES	= ( ( CLUS_OBJECT_RESOURCE_TYPE << 24 )  | CLCTL_VALIDATE_COMMON_PROPERTIES ) ,
	CLUSCTL_RESOURCE_TYPE_SET_COMMON_PROPERTIES	= ( ( CLUS_OBJECT_RESOURCE_TYPE << 24 )  | CLCTL_SET_COMMON_PROPERTIES ) ,
	CLUSCTL_RESOURCE_TYPE_GET_COMMON_PROPERTY_FMTS	= ( ( CLUS_OBJECT_RESOURCE_TYPE << 24 )  | CLCTL_GET_COMMON_PROPERTY_FMTS ) ,
	CLUSCTL_RESOURCE_TYPE_GET_COMMON_RESOURCE_PROPERTY_FMTS	= ( ( CLUS_OBJECT_RESOURCE_TYPE << 24 )  | CLCTL_GET_COMMON_RESOURCE_PROPERTY_FMTS ) ,
	CLUSCTL_RESOURCE_TYPE_ENUM_PRIVATE_PROPERTIES	= ( ( CLUS_OBJECT_RESOURCE_TYPE << 24 )  | CLCTL_ENUM_PRIVATE_PROPERTIES ) ,
	CLUSCTL_RESOURCE_TYPE_GET_RO_PRIVATE_PROPERTIES	= ( ( CLUS_OBJECT_RESOURCE_TYPE << 24 )  | CLCTL_GET_RO_PRIVATE_PROPERTIES ) ,
	CLUSCTL_RESOURCE_TYPE_GET_PRIVATE_PROPERTIES	= ( ( CLUS_OBJECT_RESOURCE_TYPE << 24 )  | CLCTL_GET_PRIVATE_PROPERTIES ) ,
	CLUSCTL_RESOURCE_TYPE_SET_PRIVATE_PROPERTIES	= ( ( CLUS_OBJECT_RESOURCE_TYPE << 24 )  | CLCTL_SET_PRIVATE_PROPERTIES ) ,
	CLUSCTL_RESOURCE_TYPE_VALIDATE_PRIVATE_PROPERTIES	= ( ( CLUS_OBJECT_RESOURCE_TYPE << 24 )  | CLCTL_VALIDATE_PRIVATE_PROPERTIES ) ,
	CLUSCTL_RESOURCE_TYPE_GET_PRIVATE_PROPERTY_FMTS	= ( ( CLUS_OBJECT_RESOURCE_TYPE << 24 )  | CLCTL_GET_PRIVATE_PROPERTY_FMTS ) ,
	CLUSCTL_RESOURCE_TYPE_GET_PRIVATE_RESOURCE_PROPERTY_FMTS	= ( ( CLUS_OBJECT_RESOURCE_TYPE << 24 )  | CLCTL_GET_PRIVATE_RESOURCE_PROPERTY_FMTS ) ,
	CLUSCTL_RESOURCE_TYPE_GET_REGISTRY_CHECKPOINTS	= ( ( CLUS_OBJECT_RESOURCE_TYPE << 24 )  | CLCTL_GET_REGISTRY_CHECKPOINTS ) ,
	CLUSCTL_RESOURCE_TYPE_GET_CRYPTO_CHECKPOINTS	= ( ( CLUS_OBJECT_RESOURCE_TYPE << 24 )  | CLCTL_GET_CRYPTO_CHECKPOINTS ) ,
	CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS	= ( ( CLUS_OBJECT_RESOURCE_TYPE << 24 )  | CLCTL_STORAGE_GET_AVAILABLE_DISKS ) ,
	CLUSCTL_RESOURCE_TYPE_STORAGE_SYNC_CLUSDISK_DB	= ( ( CLUS_OBJECT_RESOURCE_TYPE << 24 )  | CLCTL_STORAGE_SYNC_CLUSDISK_DB ) ,
	CLUSCTL_RESOURCE_TYPE_NETNAME_VALIDATE_NETNAME	= ( ( CLUS_OBJECT_RESOURCE_TYPE << 24 )  | CLCTL_VALIDATE_NETNAME ) ,
	CLUSCTL_RESOURCE_TYPE_GEN_APP_VALIDATE_PATH	= ( ( CLUS_OBJECT_RESOURCE_TYPE << 24 )  | CLCTL_VALIDATE_PATH ) ,
	CLUSCTL_RESOURCE_TYPE_GEN_APP_VALIDATE_DIRECTORY	= ( ( CLUS_OBJECT_RESOURCE_TYPE << 24 )  | CLCTL_VALIDATE_DIRECTORY ) ,
	CLUSCTL_RESOURCE_TYPE_GEN_SCRIPT_VALIDATE_PATH	= ( ( CLUS_OBJECT_RESOURCE_TYPE << 24 )  | CLCTL_VALIDATE_PATH ) ,
	CLUSCTL_RESOURCE_TYPE_QUERY_DELETE	= ( ( CLUS_OBJECT_RESOURCE_TYPE << 24 )  | CLCTL_QUERY_DELETE ) ,
	CLUSCTL_RESOURCE_TYPE_STORAGE_GET_DRIVELETTERS	= ( ( CLUS_OBJECT_RESOURCE_TYPE << 24 )  | CLCTL_STORAGE_GET_DRIVELETTERS ) ,
	CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS_EX	= ( ( CLUS_OBJECT_RESOURCE_TYPE << 24 )  | CLCTL_STORAGE_GET_AVAILABLE_DISKS_EX ) ,
	CLUSCTL_RESOURCE_TYPE_STORAGE_REMAP_DRIVELETTER	= ( ( CLUS_OBJECT_RESOURCE_TYPE << 24 )  | CLCTL_STORAGE_REMAP_DRIVELETTER ) ,
	CLUSCTL_RESOURCE_TYPE_STORAGE_GET_DISKID	= ( ( CLUS_OBJECT_RESOURCE_TYPE << 24 )  | CLCTL_STORAGE_GET_DISKID ) ,
	CLUSCTL_RESOURCE_TYPE_STORAGE_IS_CLUSTERABLE	= ( ( CLUS_OBJECT_RESOURCE_TYPE << 24 )  | CLCTL_STORAGE_IS_CLUSTERABLE ) ,
	CLUSCTL_RESOURCE_TYPE_STORAGE_REMOVE_VM_OWNERSHIP	= ( ( CLUS_OBJECT_RESOURCE_TYPE << 24 )  | CLCTL_STORAGE_REMOVE_VM_OWNERSHIP ) ,
	CLUSCTL_RESOURCE_TYPE_STORAGE_IS_CSV_FILE	= ( ( CLUS_OBJECT_RESOURCE << 24 )  | CLCTL_STORAGE_IS_CSV_FILE ) ,
	CLUSCTL_RESOURCE_TYPE_WITNESS_VALIDATE_PATH	= ( ( CLUS_OBJECT_RESOURCE_TYPE << 24 )  | CLCTL_VALIDATE_PATH ) ,
	CLUSCTL_RESOURCE_TYPE_INSTALL_NODE	= ( ( CLUS_OBJECT_RESOURCE_TYPE << 24 )  | CLCTL_INSTALL_NODE ) ,
	CLUSCTL_RESOURCE_TYPE_EVICT_NODE	= ( ( CLUS_OBJECT_RESOURCE_TYPE << 24 )  | CLCTL_EVICT_NODE ) ,
	CLUSCTL_RESOURCE_TYPE_CLUSTER_VERSION_CHANGED	= ( ( CLUS_OBJECT_RESOURCE_TYPE << 24 )  | CLCTL_CLUSTER_VERSION_CHANGED ) ,
	CLUSCTL_RESOURCE_TYPE_FIXUP_ON_UPGRADE	= ( ( CLUS_OBJECT_RESOURCE_TYPE << 24 )  | CLCTL_FIXUP_ON_UPGRADE ) ,
	CLUSCTL_RESOURCE_TYPE_STARTING_PHASE1	= ( ( CLUS_OBJECT_RESOURCE_TYPE << 24 )  | CLCTL_STARTING_PHASE1 ) ,
	CLUSCTL_RESOURCE_TYPE_STARTING_PHASE2	= ( ( CLUS_OBJECT_RESOURCE_TYPE << 24 )  | CLCTL_STARTING_PHASE2 ) ,
	CLUSCTL_RESOURCE_TYPE_HOLD_IO	= ( ( CLUS_OBJECT_RESOURCE_TYPE << 24 )  | CLCTL_HOLD_IO ) ,
	CLUSCTL_RESOURCE_TYPE_RESUME_IO	= ( ( CLUS_OBJECT_RESOURCE_TYPE << 24 )  | CLCTL_RESUME_IO ) 
    } 	CLUSCTL_RESOURCE_TYPE_CODES;

typedef 
enum CLUSCTL_GROUP_CODES
    {	CLUSCTL_GROUP_UNKNOWN	= ( ( CLUS_OBJECT_GROUP << 24 )  | CLCTL_UNKNOWN ) ,
	CLUSCTL_GROUP_GET_CHARACTERISTICS	= ( ( CLUS_OBJECT_GROUP << 24 )  | CLCTL_GET_CHARACTERISTICS ) ,
	CLUSCTL_GROUP_GET_FLAGS	= ( ( CLUS_OBJECT_GROUP << 24 )  | CLCTL_GET_FLAGS ) ,
	CLUSCTL_GROUP_GET_NAME	= ( ( CLUS_OBJECT_GROUP << 24 )  | CLCTL_GET_NAME ) ,
	CLUSCTL_GROUP_GET_ID	= ( ( CLUS_OBJECT_GROUP << 24 )  | CLCTL_GET_ID ) ,
	CLUSCTL_GROUP_ENUM_COMMON_PROPERTIES	= ( ( CLUS_OBJECT_GROUP << 24 )  | CLCTL_ENUM_COMMON_PROPERTIES ) ,
	CLUSCTL_GROUP_GET_RO_COMMON_PROPERTIES	= ( ( CLUS_OBJECT_GROUP << 24 )  | CLCTL_GET_RO_COMMON_PROPERTIES ) ,
	CLUSCTL_GROUP_GET_COMMON_PROPERTIES	= ( ( CLUS_OBJECT_GROUP << 24 )  | CLCTL_GET_COMMON_PROPERTIES ) ,
	CLUSCTL_GROUP_SET_COMMON_PROPERTIES	= ( ( CLUS_OBJECT_GROUP << 24 )  | CLCTL_SET_COMMON_PROPERTIES ) ,
	CLUSCTL_GROUP_VALIDATE_COMMON_PROPERTIES	= ( ( CLUS_OBJECT_GROUP << 24 )  | CLCTL_VALIDATE_COMMON_PROPERTIES ) ,
	CLUSCTL_GROUP_ENUM_PRIVATE_PROPERTIES	= ( ( CLUS_OBJECT_GROUP << 24 )  | CLCTL_ENUM_PRIVATE_PROPERTIES ) ,
	CLUSCTL_GROUP_GET_RO_PRIVATE_PROPERTIES	= ( ( CLUS_OBJECT_GROUP << 24 )  | CLCTL_GET_RO_PRIVATE_PROPERTIES ) ,
	CLUSCTL_GROUP_GET_PRIVATE_PROPERTIES	= ( ( CLUS_OBJECT_GROUP << 24 )  | CLCTL_GET_PRIVATE_PROPERTIES ) ,
	CLUSCTL_GROUP_SET_PRIVATE_PROPERTIES	= ( ( CLUS_OBJECT_GROUP << 24 )  | CLCTL_SET_PRIVATE_PROPERTIES ) ,
	CLUSCTL_GROUP_VALIDATE_PRIVATE_PROPERTIES	= ( ( CLUS_OBJECT_GROUP << 24 )  | CLCTL_VALIDATE_PRIVATE_PROPERTIES ) ,
	CLUSCTL_GROUP_QUERY_DELETE	= ( ( CLUS_OBJECT_GROUP << 24 )  | CLCTL_QUERY_DELETE ) ,
	CLUSCTL_GROUP_GET_COMMON_PROPERTY_FMTS	= ( ( CLUS_OBJECT_GROUP << 24 )  | CLCTL_GET_COMMON_PROPERTY_FMTS ) ,
	CLUSCTL_GROUP_GET_PRIVATE_PROPERTY_FMTS	= ( ( CLUS_OBJECT_GROUP << 24 )  | CLCTL_GET_PRIVATE_PROPERTY_FMTS ) 
    } 	CLUSCTL_GROUP_CODES;

typedef 
enum CLUSCTL_NODE_CODES
    {	CLUSCTL_NODE_UNKNOWN	= ( ( CLUS_OBJECT_NODE << 24 )  | CLCTL_UNKNOWN ) ,
	CLUSCTL_NODE_GET_CHARACTERISTICS	= ( ( CLUS_OBJECT_NODE << 24 )  | CLCTL_GET_CHARACTERISTICS ) ,
	CLUSCTL_NODE_GET_FLAGS	= ( ( CLUS_OBJECT_NODE << 24 )  | CLCTL_GET_FLAGS ) ,
	CLUSCTL_NODE_GET_NAME	= ( ( CLUS_OBJECT_NODE << 24 )  | CLCTL_GET_NAME ) ,
	CLUSCTL_NODE_GET_ID	= ( ( CLUS_OBJECT_NODE << 24 )  | CLCTL_GET_ID ) ,
	CLUSCTL_NODE_ENUM_COMMON_PROPERTIES	= ( ( CLUS_OBJECT_NODE << 24 )  | CLCTL_ENUM_COMMON_PROPERTIES ) ,
	CLUSCTL_NODE_GET_RO_COMMON_PROPERTIES	= ( ( CLUS_OBJECT_NODE << 24 )  | CLCTL_GET_RO_COMMON_PROPERTIES ) ,
	CLUSCTL_NODE_GET_COMMON_PROPERTIES	= ( ( CLUS_OBJECT_NODE << 24 )  | CLCTL_GET_COMMON_PROPERTIES ) ,
	CLUSCTL_NODE_SET_COMMON_PROPERTIES	= ( ( CLUS_OBJECT_NODE << 24 )  | CLCTL_SET_COMMON_PROPERTIES ) ,
	CLUSCTL_NODE_VALIDATE_COMMON_PROPERTIES	= ( ( CLUS_OBJECT_NODE << 24 )  | CLCTL_VALIDATE_COMMON_PROPERTIES ) ,
	CLUSCTL_NODE_ENUM_PRIVATE_PROPERTIES	= ( ( CLUS_OBJECT_NODE << 24 )  | CLCTL_ENUM_PRIVATE_PROPERTIES ) ,
	CLUSCTL_NODE_GET_RO_PRIVATE_PROPERTIES	= ( ( CLUS_OBJECT_NODE << 24 )  | CLCTL_GET_RO_PRIVATE_PROPERTIES ) ,
	CLUSCTL_NODE_GET_PRIVATE_PROPERTIES	= ( ( CLUS_OBJECT_NODE << 24 )  | CLCTL_GET_PRIVATE_PROPERTIES ) ,
	CLUSCTL_NODE_SET_PRIVATE_PROPERTIES	= ( ( CLUS_OBJECT_NODE << 24 )  | CLCTL_SET_PRIVATE_PROPERTIES ) ,
	CLUSCTL_NODE_VALIDATE_PRIVATE_PROPERTIES	= ( ( CLUS_OBJECT_NODE << 24 )  | CLCTL_VALIDATE_PRIVATE_PROPERTIES ) ,
	CLUSCTL_NODE_GET_COMMON_PROPERTY_FMTS	= ( ( CLUS_OBJECT_NODE << 24 )  | CLCTL_GET_COMMON_PROPERTY_FMTS ) ,
	CLUSCTL_NODE_GET_PRIVATE_PROPERTY_FMTS	= ( ( CLUS_OBJECT_NODE << 24 )  | CLCTL_GET_PRIVATE_PROPERTY_FMTS ) ,
	CLUSCTL_NODE_GET_CLUSTER_SERVICE_ACCOUNT_NAME	= ( ( CLUS_OBJECT_NODE << 24 )  | CLCTL_GET_CLUSTER_SERVICE_ACCOUNT_NAME ) 
    } 	CLUSCTL_NODE_CODES;

typedef 
enum CLUSCTL_NETWORK_CODES
    {	CLUSCTL_NETWORK_UNKNOWN	= ( ( CLUS_OBJECT_NETWORK << 24 )  | CLCTL_UNKNOWN ) ,
	CLUSCTL_NETWORK_GET_CHARACTERISTICS	= ( ( CLUS_OBJECT_NETWORK << 24 )  | CLCTL_GET_CHARACTERISTICS ) ,
	CLUSCTL_NETWORK_GET_FLAGS	= ( ( CLUS_OBJECT_NETWORK << 24 )  | CLCTL_GET_FLAGS ) ,
	CLUSCTL_NETWORK_GET_NAME	= ( ( CLUS_OBJECT_NETWORK << 24 )  | CLCTL_GET_NAME ) ,
	CLUSCTL_NETWORK_GET_ID	= ( ( CLUS_OBJECT_NETWORK << 24 )  | CLCTL_GET_ID ) ,
	CLUSCTL_NETWORK_ENUM_COMMON_PROPERTIES	= ( ( CLUS_OBJECT_NETWORK << 24 )  | CLCTL_ENUM_COMMON_PROPERTIES ) ,
	CLUSCTL_NETWORK_GET_RO_COMMON_PROPERTIES	= ( ( CLUS_OBJECT_NETWORK << 24 )  | CLCTL_GET_RO_COMMON_PROPERTIES ) ,
	CLUSCTL_NETWORK_GET_COMMON_PROPERTIES	= ( ( CLUS_OBJECT_NETWORK << 24 )  | CLCTL_GET_COMMON_PROPERTIES ) ,
	CLUSCTL_NETWORK_SET_COMMON_PROPERTIES	= ( ( CLUS_OBJECT_NETWORK << 24 )  | CLCTL_SET_COMMON_PROPERTIES ) ,
	CLUSCTL_NETWORK_VALIDATE_COMMON_PROPERTIES	= ( ( CLUS_OBJECT_NETWORK << 24 )  | CLCTL_VALIDATE_COMMON_PROPERTIES ) ,
	CLUSCTL_NETWORK_ENUM_PRIVATE_PROPERTIES	= ( ( CLUS_OBJECT_NETWORK << 24 )  | CLCTL_ENUM_PRIVATE_PROPERTIES ) ,
	CLUSCTL_NETWORK_GET_RO_PRIVATE_PROPERTIES	= ( ( CLUS_OBJECT_NETWORK << 24 )  | CLCTL_GET_RO_PRIVATE_PROPERTIES ) ,
	CLUSCTL_NETWORK_GET_PRIVATE_PROPERTIES	= ( ( CLUS_OBJECT_NETWORK << 24 )  | CLCTL_GET_PRIVATE_PROPERTIES ) ,
	CLUSCTL_NETWORK_SET_PRIVATE_PROPERTIES	= ( ( CLUS_OBJECT_NETWORK << 24 )  | CLCTL_SET_PRIVATE_PROPERTIES ) ,
	CLUSCTL_NETWORK_VALIDATE_PRIVATE_PROPERTIES	= ( ( CLUS_OBJECT_NETWORK << 24 )  | CLCTL_VALIDATE_PRIVATE_PROPERTIES ) ,
	CLUSCTL_NETWORK_GET_COMMON_PROPERTY_FMTS	= ( ( CLUS_OBJECT_NETWORK << 24 )  | CLCTL_GET_COMMON_PROPERTY_FMTS ) ,
	CLUSCTL_NETWORK_GET_PRIVATE_PROPERTY_FMTS	= ( ( CLUS_OBJECT_NETWORK << 24 )  | CLCTL_GET_PRIVATE_PROPERTY_FMTS ) 
    } 	CLUSCTL_NETWORK_CODES;

typedef 
enum CLUSCTL_NETINTERFACE_CODES
    {	CLUSCTL_NETINTERFACE_UNKNOWN	= ( ( CLUS_OBJECT_NETINTERFACE << 24 )  | CLCTL_UNKNOWN ) ,
	CLUSCTL_NETINTERFACE_GET_CHARACTERISTICS	= ( ( CLUS_OBJECT_NETINTERFACE << 24 )  | CLCTL_GET_CHARACTERISTICS ) ,
	CLUSCTL_NETINTERFACE_GET_FLAGS	= ( ( CLUS_OBJECT_NETINTERFACE << 24 )  | CLCTL_GET_FLAGS ) ,
	CLUSCTL_NETINTERFACE_GET_NAME	= ( ( CLUS_OBJECT_NETINTERFACE << 24 )  | CLCTL_GET_NAME ) ,
	CLUSCTL_NETINTERFACE_GET_ID	= ( ( CLUS_OBJECT_NETINTERFACE << 24 )  | CLCTL_GET_ID ) ,
	CLUSCTL_NETINTERFACE_GET_NODE	= ( ( CLUS_OBJECT_NETINTERFACE << 24 )  | CLCTL_GET_NODE ) ,
	CLUSCTL_NETINTERFACE_GET_NETWORK	= ( ( CLUS_OBJECT_NETINTERFACE << 24 )  | CLCTL_GET_NETWORK ) ,
	CLUSCTL_NETINTERFACE_ENUM_COMMON_PROPERTIES	= ( ( CLUS_OBJECT_NETINTERFACE << 24 )  | CLCTL_ENUM_COMMON_PROPERTIES ) ,
	CLUSCTL_NETINTERFACE_GET_RO_COMMON_PROPERTIES	= ( ( CLUS_OBJECT_NETINTERFACE << 24 )  | CLCTL_GET_RO_COMMON_PROPERTIES ) ,
	CLUSCTL_NETINTERFACE_GET_COMMON_PROPERTIES	= ( ( CLUS_OBJECT_NETINTERFACE << 24 )  | CLCTL_GET_COMMON_PROPERTIES ) ,
	CLUSCTL_NETINTERFACE_SET_COMMON_PROPERTIES	= ( ( CLUS_OBJECT_NETINTERFACE << 24 )  | CLCTL_SET_COMMON_PROPERTIES ) ,
	CLUSCTL_NETINTERFACE_VALIDATE_COMMON_PROPERTIES	= ( ( CLUS_OBJECT_NETINTERFACE << 24 )  | CLCTL_VALIDATE_COMMON_PROPERTIES ) ,
	CLUSCTL_NETINTERFACE_ENUM_PRIVATE_PROPERTIES	= ( ( CLUS_OBJECT_NETINTERFACE << 24 )  | CLCTL_ENUM_PRIVATE_PROPERTIES ) ,
	CLUSCTL_NETINTERFACE_GET_RO_PRIVATE_PROPERTIES	= ( ( CLUS_OBJECT_NETINTERFACE << 24 )  | CLCTL_GET_RO_PRIVATE_PROPERTIES ) ,
	CLUSCTL_NETINTERFACE_GET_PRIVATE_PROPERTIES	= ( ( CLUS_OBJECT_NETINTERFACE << 24 )  | CLCTL_GET_PRIVATE_PROPERTIES ) ,
	CLUSCTL_NETINTERFACE_SET_PRIVATE_PROPERTIES	= ( ( CLUS_OBJECT_NETINTERFACE << 24 )  | CLCTL_SET_PRIVATE_PROPERTIES ) ,
	CLUSCTL_NETINTERFACE_VALIDATE_PRIVATE_PROPERTIES	= ( ( CLUS_OBJECT_NETINTERFACE << 24 )  | CLCTL_VALIDATE_PRIVATE_PROPERTIES ) ,
	CLUSCTL_NETINTERFACE_GET_COMMON_PROPERTY_FMTS	= ( ( CLUS_OBJECT_NETINTERFACE << 24 )  | CLCTL_GET_COMMON_PROPERTY_FMTS ) ,
	CLUSCTL_NETINTERFACE_GET_PRIVATE_PROPERTY_FMTS	= ( ( CLUS_OBJECT_NETINTERFACE << 24 )  | CLCTL_GET_PRIVATE_PROPERTY_FMTS ) 
    } 	CLUSCTL_NETINTERFACE_CODES;

typedef 
enum CLUSCTL_CLUSTER_CODES
    {	CLUSCTL_CLUSTER_UNKNOWN	= ( ( CLUS_OBJECT_CLUSTER << 24 )  | CLCTL_UNKNOWN ) ,
	CLUSCTL_CLUSTER_GET_FQDN	= ( ( CLUS_OBJECT_CLUSTER << 24 )  | CLCTL_GET_FQDN ) ,
	CLUSCTL_CLUSTER_ENUM_COMMON_PROPERTIES	= ( ( CLUS_OBJECT_CLUSTER << 24 )  | CLCTL_ENUM_COMMON_PROPERTIES ) ,
	CLUSCTL_CLUSTER_GET_RO_COMMON_PROPERTIES	= ( ( CLUS_OBJECT_CLUSTER << 24 )  | CLCTL_GET_RO_COMMON_PROPERTIES ) ,
	CLUSCTL_CLUSTER_GET_COMMON_PROPERTIES	= ( ( CLUS_OBJECT_CLUSTER << 24 )  | CLCTL_GET_COMMON_PROPERTIES ) ,
	CLUSCTL_CLUSTER_SET_COMMON_PROPERTIES	= ( ( CLUS_OBJECT_CLUSTER << 24 )  | CLCTL_SET_COMMON_PROPERTIES ) ,
	CLUSCTL_CLUSTER_VALIDATE_COMMON_PROPERTIES	= ( ( CLUS_OBJECT_CLUSTER << 24 )  | CLCTL_VALIDATE_COMMON_PROPERTIES ) ,
	CLUSCTL_CLUSTER_ENUM_PRIVATE_PROPERTIES	= ( ( CLUS_OBJECT_CLUSTER << 24 )  | CLCTL_ENUM_PRIVATE_PROPERTIES ) ,
	CLUSCTL_CLUSTER_GET_RO_PRIVATE_PROPERTIES	= ( ( CLUS_OBJECT_CLUSTER << 24 )  | CLCTL_GET_RO_PRIVATE_PROPERTIES ) ,
	CLUSCTL_CLUSTER_GET_PRIVATE_PROPERTIES	= ( ( CLUS_OBJECT_CLUSTER << 24 )  | CLCTL_GET_PRIVATE_PROPERTIES ) ,
	CLUSCTL_CLUSTER_SET_PRIVATE_PROPERTIES	= ( ( CLUS_OBJECT_CLUSTER << 24 )  | CLCTL_SET_PRIVATE_PROPERTIES ) ,
	CLUSCTL_CLUSTER_VALIDATE_PRIVATE_PROPERTIES	= ( ( CLUS_OBJECT_CLUSTER << 24 )  | CLCTL_VALIDATE_PRIVATE_PROPERTIES ) ,
	CLUSCTL_CLUSTER_GET_COMMON_PROPERTY_FMTS	= ( ( CLUS_OBJECT_CLUSTER << 24 )  | CLCTL_GET_COMMON_PROPERTY_FMTS ) ,
	CLUSCTL_CLUSTER_GET_PRIVATE_PROPERTY_FMTS	= ( ( CLUS_OBJECT_CLUSTER << 24 )  | CLCTL_GET_PRIVATE_PROPERTY_FMTS ) ,
	CLUSCTL_CLUSTER_CHECK_VOTER_EVICT	= ( ( CLUS_OBJECT_CLUSTER << 24 )  | CLCTL_CHECK_VOTER_EVICT ) ,
	CLUSCTL_CLUSTER_CHECK_VOTER_DOWN	= ( ( CLUS_OBJECT_CLUSTER << 24 )  | CLCTL_CHECK_VOTER_DOWN ) ,
	CLUSCTL_CLUSTER_SHUTDOWN	= ( ( CLUS_OBJECT_CLUSTER << 24 )  | CLCTL_SHUTDOWN ) ,
	CLUSCTL_CLUSTER_BATCH_BLOCK_KEY	= ( ( CLUS_OBJECT_CLUSTER << 24 )  | CLCTL_BATCH_BLOCK_KEY ) ,
	CLUSCTL_CLUSTER_BATCH_UNBLOCK_KEY	= ( ( CLUS_OBJECT_CLUSTER << 24 )  | CLCTL_BATCH_UNBLOCK_KEY ) ,
	CLUSCTL_CLUSTER_GET_SHARED_VOLUME_ID	= ( ( CLUS_OBJECT_CLUSTER << 24 )  | CLCTL_GET_SHARED_VOLUME_ID ) 
    } 	CLUSCTL_CLUSTER_CODES;

typedef 
enum CLUSTER_RESOURCE_CLASS
    {	CLUS_RESCLASS_UNKNOWN	= 0,
	CLUS_RESCLASS_STORAGE	= ( CLUS_RESCLASS_UNKNOWN + 1 ) ,
	CLUS_RESCLASS_NETWORK	= ( CLUS_RESCLASS_STORAGE + 1 ) ,
	CLUS_RESCLASS_USER	= 32768
    } 	CLUSTER_RESOURCE_CLASS;

typedef 
enum CLUS_RESSUBCLASS
    {	CLUS_RESSUBCLASS_SHARED	= 0x80000000
    } 	CLUS_RESSUBCLASS;

typedef 
enum CLUS_RESSUBCLASS_STORAGE
    {	CLUS_RESSUBCLASS_STORAGE_SHARED_BUS	= 0x80000000
    } 	CLUS_RESSUBCLASS_STORAGE;

typedef 
enum CLUS_RESSUBCLASS_NETWORK
    {	CLUS_RESSUBCLASS_NETWORK_INTERNET_PROTOCOL	= 0x80000000
    } 	CLUS_RESSUBCLASS_NETWORK;

typedef 
enum CLUS_CHARACTERISTICS
    {	CLUS_CHAR_UNKNOWN	= 0,
	CLUS_CHAR_QUORUM	= 0x1,
	CLUS_CHAR_DELETE_REQUIRES_ALL_NODES	= 0x2,
	CLUS_CHAR_LOCAL_QUORUM	= 0x4,
	CLUS_CHAR_LOCAL_QUORUM_DEBUG	= 0x8,
	CLUS_CHAR_REQUIRES_STATE_CHANGE_REASON	= 0x10,
	CLUS_CHAR_BROADCAST_DELETE	= 0x20,
	CLUS_CHAR_SINGLE_CLUSTER_INSTANCE	= 0x40,
	CLUS_CHAR_SINGLE_GROUP_INSTANCE	= 0x80
    } 	CLUS_CHARACTERISTICS;

typedef 
enum CLUS_FLAGS
    {	CLUS_FLAG_CORE	= 0x1
    } 	CLUS_FLAGS;

typedef 
enum CLUSPROP_PIFLAGS
    {	CLUSPROP_PIFLAG_STICKY	= 0x1,
	CLUSPROP_PIFLAG_REMOVABLE	= 0x2,
	CLUSPROP_PIFLAG_USABLE	= 0x4,
	CLUSPROP_PIFLAG_DEFAULT_QUORUM	= 0x8
    } 	CLUSPROP_PIFLAGS;

typedef 
enum CLUSTER_RESOURCE_ENUM
    {	CLUSTER_RESOURCE_ENUM_DEPENDS	= 0x1,
	CLUSTER_RESOURCE_ENUM_PROVIDES	= 0x2,
	CLUSTER_RESOURCE_ENUM_NODES	= 0x4,
	CLUSTER_RESOURCE_ENUM_ALL	= ( ( CLUSTER_RESOURCE_ENUM_DEPENDS | CLUSTER_RESOURCE_ENUM_PROVIDES )  | CLUSTER_RESOURCE_ENUM_NODES ) 
    } 	CLUSTER_RESOURCE_ENUM;

typedef 
enum CLUSTER_RESOURCE_TYPE_ENUM
    {	CLUSTER_RESOURCE_TYPE_ENUM_NODES	= 0x1,
	CLUSTER_RESOURCE_TYPE_ENUM_RESOURCES	= 0x2,
	CLUSTER_RESOURCE_TYPE_ENUM_ALL	= ( CLUSTER_RESOURCE_TYPE_ENUM_NODES | CLUSTER_RESOURCE_TYPE_ENUM_RESOURCES ) 
    } 	CLUSTER_RESOURCE_TYPE_ENUM;

typedef 
enum CLUSTER_NETWORK_ENUM
    {	CLUSTER_NETWORK_ENUM_NETINTERFACES	= 0x1,
	CLUSTER_NETWORK_ENUM_ALL	= CLUSTER_NETWORK_ENUM_NETINTERFACES
    } 	CLUSTER_NETWORK_ENUM;

typedef 
enum CLUSTER_NETWORK_STATE
    {	ClusterNetworkStateUnknown	= -1,
	ClusterNetworkUnavailable	= ( ClusterNetworkStateUnknown + 1 ) ,
	ClusterNetworkDown	= ( ClusterNetworkUnavailable + 1 ) ,
	ClusterNetworkPartitioned	= ( ClusterNetworkDown + 1 ) ,
	ClusterNetworkUp	= ( ClusterNetworkPartitioned + 1 ) 
    } 	CLUSTER_NETWORK_STATE;

typedef 
enum CLUSTER_NETWORK_ROLE
    {	ClusterNetworkRoleNone	= 0,
	ClusterNetworkRoleInternalUse	= 0x1,
	ClusterNetworkRoleClientAccess	= 0x2,
	ClusterNetworkRoleInternalAndClient	= 0x3
    } 	CLUSTER_NETWORK_ROLE;

typedef 
enum CLUSTER_NETINTERFACE_STATE
    {	ClusterNetInterfaceStateUnknown	= -1,
	ClusterNetInterfaceUnavailable	= ( ClusterNetInterfaceStateUnknown + 1 ) ,
	ClusterNetInterfaceFailed	= ( ClusterNetInterfaceUnavailable + 1 ) ,
	ClusterNetInterfaceUnreachable	= ( ClusterNetInterfaceFailed + 1 ) ,
	ClusterNetInterfaceUp	= ( ClusterNetInterfaceUnreachable + 1 ) 
    } 	CLUSTER_NETINTERFACE_STATE;

#endif // _CLUSTER_API_TYPES_











































extern RPC_IF_HANDLE __MIDL_itf_msclus_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_msclus_0000_0000_v0_0_s_ifspec;


#ifndef __MSClusterLib_LIBRARY_DEFINED__
#define __MSClusterLib_LIBRARY_DEFINED__

/* library MSClusterLib */
/* [helpstring][version][uuid] */ 

typedef CLUSTER_QUORUM_TYPE _CLUSTER_QUORUM_TYPE;

typedef NODE_CLUSTER_STATE _NODE_CLUSTER_STATE;

typedef CLUSTER_RESOURCE_STATE_CHANGE_REASON _CLUSTER_RESOURCE_STATE_CHANGE_REASON;

typedef CLUSTER_CHANGE _CLUSTER_CHANGE;

typedef CLUSTER_ENUM _CLUSTER_ENUM;

typedef CLUSTER_NODE_ENUM _CLUSTER_NODE_ENUM;

typedef CLUSTER_NODE_STATE _CLUSTER_NODE_STATE;

typedef CLUSTER_GROUP_ENUM _CLUSTER_GROUP_ENUM;

typedef CLUSTER_GROUP_STATE _CLUSTER_GROUP_STATE;

typedef CLUSTER_GROUP_AUTOFAILBACK_TYPE _CLUSTER_GROUP_AUTOFAILBACK_TYPE;

typedef CLUSTER_RESOURCE_STATE _CLUSTER_RESOURCE_STATE;

typedef CLUSTER_RESOURCE_RESTART_ACTION _CLUSTER_RESOURCE_RESTART_ACTION;

typedef CLUSTER_RESOURCE_CREATE_FLAGS _CLUSTER_RESOURCE_CREATE_FLAGS;

typedef CLUSTER_PROPERTY_TYPE _CLUSTER_PROPERTY_TYPE;

typedef CLUSTER_PROPERTY_FORMAT _CLUSTER_PROPERTY_FORMAT;

typedef CLUSTER_PROPERTY_SYNTAX _CLUSTER_PROPERTY_SYNTAX;

typedef CLUSTER_CONTROL_OBJECT _CLUSTER_CONTROL_OBJECT;

typedef CLCTL_CODES _CLCTL_CODES;

typedef CLUSCTL_RESOURCE_CODES _CLUSCTL_RESOURCE_CODES;

typedef CLUSCTL_RESOURCE_TYPE_CODES _CLUSCTL_RESOURCE_TYPE_CODES;

typedef CLUSCTL_GROUP_CODES _CLUSCTL_GROUP_CODES;

typedef CLUSCTL_NODE_CODES _CLUSCTL_NODE_CODES;

typedef CLUSCTL_NETWORK_CODES _CLUSCTL_NETWORK_CODES;

typedef CLUSCTL_NETINTERFACE_CODES _CLUSCTL_NETINTERFACE_CODES;

typedef CLUSCTL_CLUSTER_CODES _CLUSCTL_CLUSTER_CODES;

typedef CLUSTER_RESOURCE_CLASS _CLUSTER_RESOURCE_CLASS;

typedef CLUS_RESSUBCLASS _CLUS_RESSUBCLASS;

typedef CLUS_CHARACTERISTICS _CLUS_CHARACTERISTICS;

typedef CLUS_FLAGS _CLUS_FLAGS;

typedef CLUSPROP_PIFLAGS _CLUSPROP_PIFLAGS;

typedef CLUSTER_RESOURCE_ENUM _CLUSTER_RESOURCE_ENUM;

typedef CLUSTER_RESOURCE_TYPE_ENUM _CLUSTER_RESOURCE_TYPE_ENUM;

typedef CLUSTER_NETWORK_ENUM _CLUSTER_NETWORK_ENUM;

typedef CLUSTER_NETWORK_STATE _CLUSTER_NETWORK_STATE;

typedef CLUSTER_NETWORK_ROLE _CLUSTER_NETWORK_ROLE;

typedef CLUSTER_NETINTERFACE_STATE _CLUSTER_NETINTERFACE_STATE;


EXTERN_C const IID LIBID_MSClusterLib;

EXTERN_C const CLSID CLSID_ClusApplication;

#ifdef __cplusplus

class DECLSPEC_UUID("f2e606e5-2631-11d1-89f1-00a0c90d061e")
ClusApplication;
#endif

EXTERN_C const CLSID CLSID_Cluster;

#ifdef __cplusplus

class DECLSPEC_UUID("f2e606e3-2631-11d1-89f1-00a0c90d061e")
Cluster;
#endif

EXTERN_C const CLSID CLSID_ClusVersion;

#ifdef __cplusplus

class DECLSPEC_UUID("f2e60715-2631-11d1-89f1-00a0c90d061e")
ClusVersion;
#endif

EXTERN_C const CLSID CLSID_ClusResType;

#ifdef __cplusplus

class DECLSPEC_UUID("f2e6070f-2631-11d1-89f1-00a0c90d061e")
ClusResType;
#endif

EXTERN_C const CLSID CLSID_ClusProperty;

#ifdef __cplusplus

class DECLSPEC_UUID("f2e606fd-2631-11d1-89f1-00a0c90d061e")
ClusProperty;
#endif

EXTERN_C const CLSID CLSID_ClusProperties;

#ifdef __cplusplus

class DECLSPEC_UUID("f2e606ff-2631-11d1-89f1-00a0c90d061e")
ClusProperties;
#endif

EXTERN_C const CLSID CLSID_DomainNames;

#ifdef __cplusplus

class DECLSPEC_UUID("f2e606e1-2631-11d1-89f1-00a0c90d061e")
DomainNames;
#endif

EXTERN_C const CLSID CLSID_ClusNetwork;

#ifdef __cplusplus

class DECLSPEC_UUID("f2e606f1-2631-11d1-89f1-00a0c90d061e")
ClusNetwork;
#endif

EXTERN_C const CLSID CLSID_ClusNetInterface;

#ifdef __cplusplus

class DECLSPEC_UUID("f2e606ed-2631-11d1-89f1-00a0c90d061e")
ClusNetInterface;
#endif

EXTERN_C const CLSID CLSID_ClusNetInterfaces;

#ifdef __cplusplus

class DECLSPEC_UUID("f2e606ef-2631-11d1-89f1-00a0c90d061e")
ClusNetInterfaces;
#endif

EXTERN_C const CLSID CLSID_ClusResDependencies;

#ifdef __cplusplus

class DECLSPEC_UUID("f2e60703-2631-11d1-89f1-00a0c90d061e")
ClusResDependencies;
#endif

EXTERN_C const CLSID CLSID_ClusResGroupResources;

#ifdef __cplusplus

class DECLSPEC_UUID("f2e606e9-2631-11d1-89f1-00a0c90d061e")
ClusResGroupResources;
#endif

EXTERN_C const CLSID CLSID_ClusResTypeResources;

#ifdef __cplusplus

class DECLSPEC_UUID("f2e60713-2631-11d1-89f1-00a0c90d061e")
ClusResTypeResources;
#endif

EXTERN_C const CLSID CLSID_ClusResGroupPreferredOwnerNodes;

#ifdef __cplusplus

class DECLSPEC_UUID("f2e606e7-2631-11d1-89f1-00a0c90d061e")
ClusResGroupPreferredOwnerNodes;
#endif

EXTERN_C const CLSID CLSID_ClusResPossibleOwnerNodes;

#ifdef __cplusplus

class DECLSPEC_UUID("f2e6070d-2631-11d1-89f1-00a0c90d061e")
ClusResPossibleOwnerNodes;
#endif

EXTERN_C const CLSID CLSID_ClusNetworks;

#ifdef __cplusplus

class DECLSPEC_UUID("f2e606f3-2631-11d1-89f1-00a0c90d061e")
ClusNetworks;
#endif

EXTERN_C const CLSID CLSID_ClusNetworkNetInterfaces;

#ifdef __cplusplus

class DECLSPEC_UUID("f2e606f5-2631-11d1-89f1-00a0c90d061e")
ClusNetworkNetInterfaces;
#endif

EXTERN_C const CLSID CLSID_ClusNodeNetInterfaces;

#ifdef __cplusplus

class DECLSPEC_UUID("f2e606fb-2631-11d1-89f1-00a0c90d061e")
ClusNodeNetInterfaces;
#endif

EXTERN_C const CLSID CLSID_ClusRefObject;

#ifdef __cplusplus

class DECLSPEC_UUID("f2e60701-2631-11d1-89f1-00a0c90d061e")
ClusRefObject;
#endif

EXTERN_C const CLSID CLSID_ClusterNames;

#ifdef __cplusplus

class DECLSPEC_UUID("f2e606eb-2631-11d1-89f1-00a0c90d061e")
ClusterNames;
#endif

EXTERN_C const CLSID CLSID_ClusNode;

#ifdef __cplusplus

class DECLSPEC_UUID("f2e606f7-2631-11d1-89f1-00a0c90d061e")
ClusNode;
#endif

EXTERN_C const CLSID CLSID_ClusNodes;

#ifdef __cplusplus

class DECLSPEC_UUID("f2e606f9-2631-11d1-89f1-00a0c90d061e")
ClusNodes;
#endif

EXTERN_C const CLSID CLSID_ClusResGroup;

#ifdef __cplusplus

class DECLSPEC_UUID("f2e60705-2631-11d1-89f1-00a0c90d061e")
ClusResGroup;
#endif

EXTERN_C const CLSID CLSID_ClusResGroups;

#ifdef __cplusplus

class DECLSPEC_UUID("f2e60707-2631-11d1-89f1-00a0c90d061e")
ClusResGroups;
#endif

EXTERN_C const CLSID CLSID_ClusResource;

#ifdef __cplusplus

class DECLSPEC_UUID("f2e60709-2631-11d1-89f1-00a0c90d061e")
ClusResource;
#endif

EXTERN_C const CLSID CLSID_ClusResources;

#ifdef __cplusplus

class DECLSPEC_UUID("f2e6070b-2631-11d1-89f1-00a0c90d061e")
ClusResources;
#endif

EXTERN_C const CLSID CLSID_ClusResTypes;

#ifdef __cplusplus

class DECLSPEC_UUID("f2e60711-2631-11d1-89f1-00a0c90d061e")
ClusResTypes;
#endif

EXTERN_C const CLSID CLSID_ClusResTypePossibleOwnerNodes;

#ifdef __cplusplus

class DECLSPEC_UUID("f2e60717-2631-11d1-89f1-00a0c90d061e")
ClusResTypePossibleOwnerNodes;
#endif

EXTERN_C const CLSID CLSID_ClusPropertyValue;

#ifdef __cplusplus

class DECLSPEC_UUID("f2e60719-2631-11d1-89f1-00a0c90d061e")
ClusPropertyValue;
#endif

EXTERN_C const CLSID CLSID_ClusPropertyValues;

#ifdef __cplusplus

class DECLSPEC_UUID("f2e6071b-2631-11d1-89f1-00a0c90d061e")
ClusPropertyValues;
#endif

EXTERN_C const CLSID CLSID_ClusPropertyValueData;

#ifdef __cplusplus

class DECLSPEC_UUID("f2e6071d-2631-11d1-89f1-00a0c90d061e")
ClusPropertyValueData;
#endif

EXTERN_C const CLSID CLSID_ClusPartition;

#ifdef __cplusplus

class DECLSPEC_UUID("f2e6071f-2631-11d1-89f1-00a0c90d061e")
ClusPartition;
#endif

EXTERN_C const CLSID CLSID_ClusPartitionEx;

#ifdef __cplusplus

class DECLSPEC_UUID("53d51d26-b51b-4a79-b2c3-5048d93a98fc")
ClusPartitionEx;
#endif

EXTERN_C const CLSID CLSID_ClusPartitions;

#ifdef __cplusplus

class DECLSPEC_UUID("f2e60721-2631-11d1-89f1-00a0c90d061e")
ClusPartitions;
#endif

EXTERN_C const CLSID CLSID_ClusDisk;

#ifdef __cplusplus

class DECLSPEC_UUID("f2e60723-2631-11d1-89f1-00a0c90d061e")
ClusDisk;
#endif

EXTERN_C const CLSID CLSID_ClusDisks;

#ifdef __cplusplus

class DECLSPEC_UUID("f2e60725-2631-11d1-89f1-00a0c90d061e")
ClusDisks;
#endif

EXTERN_C const CLSID CLSID_ClusScsiAddress;

#ifdef __cplusplus

class DECLSPEC_UUID("f2e60727-2631-11d1-89f1-00a0c90d061e")
ClusScsiAddress;
#endif

EXTERN_C const CLSID CLSID_ClusRegistryKeys;

#ifdef __cplusplus

class DECLSPEC_UUID("f2e60729-2631-11d1-89f1-00a0c90d061e")
ClusRegistryKeys;
#endif

EXTERN_C const CLSID CLSID_ClusCryptoKeys;

#ifdef __cplusplus

class DECLSPEC_UUID("f2e6072b-2631-11d1-89f1-00a0c90d061e")
ClusCryptoKeys;
#endif

EXTERN_C const CLSID CLSID_ClusResDependents;

#ifdef __cplusplus

class DECLSPEC_UUID("f2e6072d-2631-11d1-89f1-00a0c90d061e")
ClusResDependents;
#endif
#endif /* __MSClusterLib_LIBRARY_DEFINED__ */

#ifndef __ISClusApplication_INTERFACE_DEFINED__
#define __ISClusApplication_INTERFACE_DEFINED__

/* interface ISClusApplication */
/* [unique][helpstring][dual][uuid][object][nonextensible][hidden][oleautomation] */ 


EXTERN_C const IID IID_ISClusApplication;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f2e606e6-2631-11d1-89f1-00a0c90d061e")
    ISClusApplication : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_DomainNames( 
            /* [retval][out] */ __RPC__deref_out_opt ISDomainNames **ppDomains) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ClusterNames( 
            /* [in] */ __RPC__in BSTR bstrDomainName,
            /* [retval][out] */ __RPC__deref_out_opt ISClusterNames **ppClusters) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE OpenCluster( 
            /* [in] */ __RPC__in BSTR bstrClusterName,
            /* [retval][out] */ __RPC__deref_out_opt ISCluster **pCluster) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISClusApplicationVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISClusApplication * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISClusApplication * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISClusApplication * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ISClusApplication * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ISClusApplication * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ISClusApplication * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISClusApplication * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DomainNames )( 
            __RPC__in ISClusApplication * This,
            /* [retval][out] */ __RPC__deref_out_opt ISDomainNames **ppDomains);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClusterNames )( 
            __RPC__in ISClusApplication * This,
            /* [in] */ __RPC__in BSTR bstrDomainName,
            /* [retval][out] */ __RPC__deref_out_opt ISClusterNames **ppClusters);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *OpenCluster )( 
            __RPC__in ISClusApplication * This,
            /* [in] */ __RPC__in BSTR bstrClusterName,
            /* [retval][out] */ __RPC__deref_out_opt ISCluster **pCluster);
        
        END_INTERFACE
    } ISClusApplicationVtbl;

    interface ISClusApplication
    {
        CONST_VTBL struct ISClusApplicationVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISClusApplication_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISClusApplication_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISClusApplication_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISClusApplication_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISClusApplication_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISClusApplication_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISClusApplication_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISClusApplication_get_DomainNames(This,ppDomains)	\
    ( (This)->lpVtbl -> get_DomainNames(This,ppDomains) ) 

#define ISClusApplication_get_ClusterNames(This,bstrDomainName,ppClusters)	\
    ( (This)->lpVtbl -> get_ClusterNames(This,bstrDomainName,ppClusters) ) 

#define ISClusApplication_OpenCluster(This,bstrClusterName,pCluster)	\
    ( (This)->lpVtbl -> OpenCluster(This,bstrClusterName,pCluster) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISClusApplication_INTERFACE_DEFINED__ */


#ifndef __ISDomainNames_INTERFACE_DEFINED__
#define __ISDomainNames_INTERFACE_DEFINED__

/* interface ISDomainNames */
/* [unique][helpstring][dual][uuid][object][nonextensible][hidden][oleautomation] */ 


EXTERN_C const IID IID_ISDomainNames;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f2e606e2-2631-11d1-89f1-00a0c90d061e")
    ISDomainNames : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ __RPC__out long *plCount) = 0;
        
        virtual /* [helpstring][id][restricted][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Refresh( void) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Item( 
            /* [in] */ VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrDomainName) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISDomainNamesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISDomainNames * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISDomainNames * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISDomainNames * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ISDomainNames * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ISDomainNames * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ISDomainNames * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISDomainNames * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            __RPC__in ISDomainNames * This,
            /* [retval][out] */ __RPC__out long *plCount);
        
        /* [helpstring][id][restricted][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            __RPC__in ISDomainNames * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Refresh )( 
            __RPC__in ISDomainNames * This);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Item )( 
            __RPC__in ISDomainNames * This,
            /* [in] */ VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrDomainName);
        
        END_INTERFACE
    } ISDomainNamesVtbl;

    interface ISDomainNames
    {
        CONST_VTBL struct ISDomainNamesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISDomainNames_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISDomainNames_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISDomainNames_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISDomainNames_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISDomainNames_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISDomainNames_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISDomainNames_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISDomainNames_get_Count(This,plCount)	\
    ( (This)->lpVtbl -> get_Count(This,plCount) ) 

#define ISDomainNames_get__NewEnum(This,retval)	\
    ( (This)->lpVtbl -> get__NewEnum(This,retval) ) 

#define ISDomainNames_Refresh(This)	\
    ( (This)->lpVtbl -> Refresh(This) ) 

#define ISDomainNames_get_Item(This,varIndex,pbstrDomainName)	\
    ( (This)->lpVtbl -> get_Item(This,varIndex,pbstrDomainName) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISDomainNames_INTERFACE_DEFINED__ */


#ifndef __ISClusterNames_INTERFACE_DEFINED__
#define __ISClusterNames_INTERFACE_DEFINED__

/* interface ISClusterNames */
/* [unique][helpstring][dual][uuid][object][nonextensible][hidden][oleautomation] */ 


EXTERN_C const IID IID_ISClusterNames;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f2e606ec-2631-11d1-89f1-00a0c90d061e")
    ISClusterNames : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ __RPC__out long *plCount) = 0;
        
        virtual /* [helpstring][id][restricted][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Refresh( void) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Item( 
            /* [in] */ VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrClusterName) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_DomainName( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrDomainName) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISClusterNamesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISClusterNames * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISClusterNames * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISClusterNames * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ISClusterNames * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ISClusterNames * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ISClusterNames * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISClusterNames * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            __RPC__in ISClusterNames * This,
            /* [retval][out] */ __RPC__out long *plCount);
        
        /* [helpstring][id][restricted][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            __RPC__in ISClusterNames * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Refresh )( 
            __RPC__in ISClusterNames * This);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Item )( 
            __RPC__in ISClusterNames * This,
            /* [in] */ VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrClusterName);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DomainName )( 
            __RPC__in ISClusterNames * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrDomainName);
        
        END_INTERFACE
    } ISClusterNamesVtbl;

    interface ISClusterNames
    {
        CONST_VTBL struct ISClusterNamesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISClusterNames_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISClusterNames_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISClusterNames_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISClusterNames_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISClusterNames_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISClusterNames_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISClusterNames_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISClusterNames_get_Count(This,plCount)	\
    ( (This)->lpVtbl -> get_Count(This,plCount) ) 

#define ISClusterNames_get__NewEnum(This,retval)	\
    ( (This)->lpVtbl -> get__NewEnum(This,retval) ) 

#define ISClusterNames_Refresh(This)	\
    ( (This)->lpVtbl -> Refresh(This) ) 

#define ISClusterNames_get_Item(This,varIndex,pbstrClusterName)	\
    ( (This)->lpVtbl -> get_Item(This,varIndex,pbstrClusterName) ) 

#define ISClusterNames_get_DomainName(This,pbstrDomainName)	\
    ( (This)->lpVtbl -> get_DomainName(This,pbstrDomainName) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISClusterNames_INTERFACE_DEFINED__ */


#ifndef __ISClusRefObject_INTERFACE_DEFINED__
#define __ISClusRefObject_INTERFACE_DEFINED__

/* interface ISClusRefObject */
/* [unique][helpstring][dual][uuid][object][nonextensible][hidden][oleautomation] */ 


EXTERN_C const IID IID_ISClusRefObject;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f2e60702-2631-11d1-89f1-00a0c90d061e")
    ISClusRefObject : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Handle( 
            /* [retval][out] */ __RPC__out ULONG_PTR *phandle) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISClusRefObjectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISClusRefObject * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISClusRefObject * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISClusRefObject * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ISClusRefObject * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ISClusRefObject * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ISClusRefObject * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISClusRefObject * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            __RPC__in ISClusRefObject * This,
            /* [retval][out] */ __RPC__out ULONG_PTR *phandle);
        
        END_INTERFACE
    } ISClusRefObjectVtbl;

    interface ISClusRefObject
    {
        CONST_VTBL struct ISClusRefObjectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISClusRefObject_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISClusRefObject_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISClusRefObject_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISClusRefObject_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISClusRefObject_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISClusRefObject_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISClusRefObject_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISClusRefObject_get_Handle(This,phandle)	\
    ( (This)->lpVtbl -> get_Handle(This,phandle) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISClusRefObject_INTERFACE_DEFINED__ */


#ifndef __ISClusVersion_INTERFACE_DEFINED__
#define __ISClusVersion_INTERFACE_DEFINED__

/* interface ISClusVersion */
/* [unique][helpstring][dual][uuid][object][nonextensible][hidden][oleautomation] */ 


EXTERN_C const IID IID_ISClusVersion;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f2e60716-2631-11d1-89f1-00a0c90d061e")
    ISClusVersion : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrClusterName) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_MajorVersion( 
            /* [retval][out] */ __RPC__out long *pnMajorVersion) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_MinorVersion( 
            /* [retval][out] */ __RPC__out long *pnMinorVersion) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_BuildNumber( 
            /* [retval][out] */ __RPC__out SHORT *pnBuildNumber) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_VendorId( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrVendorId) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CSDVersion( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrCSDVersion) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ClusterHighestVersion( 
            /* [retval][out] */ __RPC__out long *pnClusterHighestVersion) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ClusterLowestVersion( 
            /* [retval][out] */ __RPC__out long *pnClusterLowestVersion) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Flags( 
            /* [retval][out] */ __RPC__out long *pnFlags) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_MixedVersion( 
            /* [retval][out] */ __RPC__out VARIANT *pvarMixedVersion) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISClusVersionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISClusVersion * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISClusVersion * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISClusVersion * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ISClusVersion * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ISClusVersion * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ISClusVersion * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISClusVersion * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            __RPC__in ISClusVersion * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrClusterName);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MajorVersion )( 
            __RPC__in ISClusVersion * This,
            /* [retval][out] */ __RPC__out long *pnMajorVersion);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MinorVersion )( 
            __RPC__in ISClusVersion * This,
            /* [retval][out] */ __RPC__out long *pnMinorVersion);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BuildNumber )( 
            __RPC__in ISClusVersion * This,
            /* [retval][out] */ __RPC__out SHORT *pnBuildNumber);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_VendorId )( 
            __RPC__in ISClusVersion * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrVendorId);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CSDVersion )( 
            __RPC__in ISClusVersion * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrCSDVersion);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClusterHighestVersion )( 
            __RPC__in ISClusVersion * This,
            /* [retval][out] */ __RPC__out long *pnClusterHighestVersion);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClusterLowestVersion )( 
            __RPC__in ISClusVersion * This,
            /* [retval][out] */ __RPC__out long *pnClusterLowestVersion);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Flags )( 
            __RPC__in ISClusVersion * This,
            /* [retval][out] */ __RPC__out long *pnFlags);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MixedVersion )( 
            __RPC__in ISClusVersion * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarMixedVersion);
        
        END_INTERFACE
    } ISClusVersionVtbl;

    interface ISClusVersion
    {
        CONST_VTBL struct ISClusVersionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISClusVersion_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISClusVersion_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISClusVersion_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISClusVersion_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISClusVersion_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISClusVersion_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISClusVersion_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISClusVersion_get_Name(This,pbstrClusterName)	\
    ( (This)->lpVtbl -> get_Name(This,pbstrClusterName) ) 

#define ISClusVersion_get_MajorVersion(This,pnMajorVersion)	\
    ( (This)->lpVtbl -> get_MajorVersion(This,pnMajorVersion) ) 

#define ISClusVersion_get_MinorVersion(This,pnMinorVersion)	\
    ( (This)->lpVtbl -> get_MinorVersion(This,pnMinorVersion) ) 

#define ISClusVersion_get_BuildNumber(This,pnBuildNumber)	\
    ( (This)->lpVtbl -> get_BuildNumber(This,pnBuildNumber) ) 

#define ISClusVersion_get_VendorId(This,pbstrVendorId)	\
    ( (This)->lpVtbl -> get_VendorId(This,pbstrVendorId) ) 

#define ISClusVersion_get_CSDVersion(This,pbstrCSDVersion)	\
    ( (This)->lpVtbl -> get_CSDVersion(This,pbstrCSDVersion) ) 

#define ISClusVersion_get_ClusterHighestVersion(This,pnClusterHighestVersion)	\
    ( (This)->lpVtbl -> get_ClusterHighestVersion(This,pnClusterHighestVersion) ) 

#define ISClusVersion_get_ClusterLowestVersion(This,pnClusterLowestVersion)	\
    ( (This)->lpVtbl -> get_ClusterLowestVersion(This,pnClusterLowestVersion) ) 

#define ISClusVersion_get_Flags(This,pnFlags)	\
    ( (This)->lpVtbl -> get_Flags(This,pnFlags) ) 

#define ISClusVersion_get_MixedVersion(This,pvarMixedVersion)	\
    ( (This)->lpVtbl -> get_MixedVersion(This,pvarMixedVersion) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISClusVersion_INTERFACE_DEFINED__ */


#ifndef __ISCluster_INTERFACE_DEFINED__
#define __ISCluster_INTERFACE_DEFINED__

/* interface ISCluster */
/* [unique][helpstring][dual][uuid][object][nonextensible][hidden][oleautomation] */ 


EXTERN_C const IID IID_ISCluster;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f2e606e4-2631-11d1-89f1-00a0c90d061e")
    ISCluster : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CommonProperties( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PrivateProperties( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CommonROProperties( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PrivateROProperties( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties) = 0;
        
        virtual /* [helpstring][id][hidden][propget] */ HRESULT STDMETHODCALLTYPE get_Handle( 
            /* [retval][out] */ __RPC__out ULONG_PTR *phandle) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Open( 
            /* [in] */ __RPC__in BSTR bstrClusterName) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrName) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ __RPC__in BSTR bstrClusterName) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Version( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusVersion **ppClusVersion) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_QuorumResource( 
            /* [in] */ __RPC__in_opt ISClusResource *pClusterResource) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_QuorumResource( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusResource **pClusterResource) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_QuorumLogSize( 
            /* [retval][out] */ __RPC__out long *pnLogSize) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_QuorumLogSize( 
            /* [in] */ long nLogSize) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_QuorumPath( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *ppPath) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_QuorumPath( 
            __RPC__in BSTR pPath) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Nodes( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusNodes **ppNodes) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ResourceGroups( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusResGroups **ppClusterResourceGroups) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Resources( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusResources **ppClusterResources) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ResourceTypes( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusResTypes **ppResourceTypes) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Networks( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusNetworks **ppNetworks) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_NetInterfaces( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusNetInterfaces **ppNetInterfaces) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISClusterVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISCluster * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISCluster * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISCluster * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ISCluster * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ISCluster * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ISCluster * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISCluster * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CommonProperties )( 
            __RPC__in ISCluster * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PrivateProperties )( 
            __RPC__in ISCluster * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CommonROProperties )( 
            __RPC__in ISCluster * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PrivateROProperties )( 
            __RPC__in ISCluster * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties);
        
        /* [helpstring][id][hidden][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            __RPC__in ISCluster * This,
            /* [retval][out] */ __RPC__out ULONG_PTR *phandle);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Open )( 
            __RPC__in ISCluster * This,
            /* [in] */ __RPC__in BSTR bstrClusterName);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            __RPC__in ISCluster * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrName);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            __RPC__in ISCluster * This,
            /* [in] */ __RPC__in BSTR bstrClusterName);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Version )( 
            __RPC__in ISCluster * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusVersion **ppClusVersion);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_QuorumResource )( 
            __RPC__in ISCluster * This,
            /* [in] */ __RPC__in_opt ISClusResource *pClusterResource);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_QuorumResource )( 
            __RPC__in ISCluster * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusResource **pClusterResource);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_QuorumLogSize )( 
            __RPC__in ISCluster * This,
            /* [retval][out] */ __RPC__out long *pnLogSize);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_QuorumLogSize )( 
            __RPC__in ISCluster * This,
            /* [in] */ long nLogSize);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_QuorumPath )( 
            __RPC__in ISCluster * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *ppPath);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_QuorumPath )( 
            __RPC__in ISCluster * This,
            __RPC__in BSTR pPath);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Nodes )( 
            __RPC__in ISCluster * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusNodes **ppNodes);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ResourceGroups )( 
            __RPC__in ISCluster * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusResGroups **ppClusterResourceGroups);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Resources )( 
            __RPC__in ISCluster * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusResources **ppClusterResources);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ResourceTypes )( 
            __RPC__in ISCluster * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusResTypes **ppResourceTypes);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Networks )( 
            __RPC__in ISCluster * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusNetworks **ppNetworks);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NetInterfaces )( 
            __RPC__in ISCluster * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusNetInterfaces **ppNetInterfaces);
        
        END_INTERFACE
    } ISClusterVtbl;

    interface ISCluster
    {
        CONST_VTBL struct ISClusterVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISCluster_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISCluster_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISCluster_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISCluster_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISCluster_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISCluster_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISCluster_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISCluster_get_CommonProperties(This,ppProperties)	\
    ( (This)->lpVtbl -> get_CommonProperties(This,ppProperties) ) 

#define ISCluster_get_PrivateProperties(This,ppProperties)	\
    ( (This)->lpVtbl -> get_PrivateProperties(This,ppProperties) ) 

#define ISCluster_get_CommonROProperties(This,ppProperties)	\
    ( (This)->lpVtbl -> get_CommonROProperties(This,ppProperties) ) 

#define ISCluster_get_PrivateROProperties(This,ppProperties)	\
    ( (This)->lpVtbl -> get_PrivateROProperties(This,ppProperties) ) 

#define ISCluster_get_Handle(This,phandle)	\
    ( (This)->lpVtbl -> get_Handle(This,phandle) ) 

#define ISCluster_Open(This,bstrClusterName)	\
    ( (This)->lpVtbl -> Open(This,bstrClusterName) ) 

#define ISCluster_get_Name(This,pbstrName)	\
    ( (This)->lpVtbl -> get_Name(This,pbstrName) ) 

#define ISCluster_put_Name(This,bstrClusterName)	\
    ( (This)->lpVtbl -> put_Name(This,bstrClusterName) ) 

#define ISCluster_get_Version(This,ppClusVersion)	\
    ( (This)->lpVtbl -> get_Version(This,ppClusVersion) ) 

#define ISCluster_put_QuorumResource(This,pClusterResource)	\
    ( (This)->lpVtbl -> put_QuorumResource(This,pClusterResource) ) 

#define ISCluster_get_QuorumResource(This,pClusterResource)	\
    ( (This)->lpVtbl -> get_QuorumResource(This,pClusterResource) ) 

#define ISCluster_get_QuorumLogSize(This,pnLogSize)	\
    ( (This)->lpVtbl -> get_QuorumLogSize(This,pnLogSize) ) 

#define ISCluster_put_QuorumLogSize(This,nLogSize)	\
    ( (This)->lpVtbl -> put_QuorumLogSize(This,nLogSize) ) 

#define ISCluster_get_QuorumPath(This,ppPath)	\
    ( (This)->lpVtbl -> get_QuorumPath(This,ppPath) ) 

#define ISCluster_put_QuorumPath(This,pPath)	\
    ( (This)->lpVtbl -> put_QuorumPath(This,pPath) ) 

#define ISCluster_get_Nodes(This,ppNodes)	\
    ( (This)->lpVtbl -> get_Nodes(This,ppNodes) ) 

#define ISCluster_get_ResourceGroups(This,ppClusterResourceGroups)	\
    ( (This)->lpVtbl -> get_ResourceGroups(This,ppClusterResourceGroups) ) 

#define ISCluster_get_Resources(This,ppClusterResources)	\
    ( (This)->lpVtbl -> get_Resources(This,ppClusterResources) ) 

#define ISCluster_get_ResourceTypes(This,ppResourceTypes)	\
    ( (This)->lpVtbl -> get_ResourceTypes(This,ppResourceTypes) ) 

#define ISCluster_get_Networks(This,ppNetworks)	\
    ( (This)->lpVtbl -> get_Networks(This,ppNetworks) ) 

#define ISCluster_get_NetInterfaces(This,ppNetInterfaces)	\
    ( (This)->lpVtbl -> get_NetInterfaces(This,ppNetInterfaces) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISCluster_INTERFACE_DEFINED__ */


#ifndef __ISClusNode_INTERFACE_DEFINED__
#define __ISClusNode_INTERFACE_DEFINED__

/* interface ISClusNode */
/* [unique][helpstring][dual][uuid][object][nonextensible][hidden][oleautomation] */ 


EXTERN_C const IID IID_ISClusNode;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f2e606f8-2631-11d1-89f1-00a0c90d061e")
    ISClusNode : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CommonProperties( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PrivateProperties( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CommonROProperties( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PrivateROProperties( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrName) = 0;
        
        virtual /* [helpstring][id][hidden][propget] */ HRESULT STDMETHODCALLTYPE get_Handle( 
            /* [retval][out] */ __RPC__out ULONG_PTR *phandle) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_NodeID( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrNodeID) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_State( 
            /* [retval][out] */ __RPC__out CLUSTER_NODE_STATE *dwState) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Pause( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Resume( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Evict( void) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ResourceGroups( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusResGroups **ppResourceGroups) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Cluster( 
            /* [retval][out] */ __RPC__deref_out_opt ISCluster **ppCluster) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_NetInterfaces( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusNodeNetInterfaces **ppClusNetInterfaces) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISClusNodeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISClusNode * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISClusNode * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISClusNode * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ISClusNode * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ISClusNode * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ISClusNode * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISClusNode * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CommonProperties )( 
            __RPC__in ISClusNode * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PrivateProperties )( 
            __RPC__in ISClusNode * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CommonROProperties )( 
            __RPC__in ISClusNode * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PrivateROProperties )( 
            __RPC__in ISClusNode * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            __RPC__in ISClusNode * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrName);
        
        /* [helpstring][id][hidden][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            __RPC__in ISClusNode * This,
            /* [retval][out] */ __RPC__out ULONG_PTR *phandle);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NodeID )( 
            __RPC__in ISClusNode * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrNodeID);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_State )( 
            __RPC__in ISClusNode * This,
            /* [retval][out] */ __RPC__out CLUSTER_NODE_STATE *dwState);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Pause )( 
            __RPC__in ISClusNode * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Resume )( 
            __RPC__in ISClusNode * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Evict )( 
            __RPC__in ISClusNode * This);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ResourceGroups )( 
            __RPC__in ISClusNode * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusResGroups **ppResourceGroups);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Cluster )( 
            __RPC__in ISClusNode * This,
            /* [retval][out] */ __RPC__deref_out_opt ISCluster **ppCluster);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NetInterfaces )( 
            __RPC__in ISClusNode * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusNodeNetInterfaces **ppClusNetInterfaces);
        
        END_INTERFACE
    } ISClusNodeVtbl;

    interface ISClusNode
    {
        CONST_VTBL struct ISClusNodeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISClusNode_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISClusNode_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISClusNode_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISClusNode_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISClusNode_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISClusNode_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISClusNode_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISClusNode_get_CommonProperties(This,ppProperties)	\
    ( (This)->lpVtbl -> get_CommonProperties(This,ppProperties) ) 

#define ISClusNode_get_PrivateProperties(This,ppProperties)	\
    ( (This)->lpVtbl -> get_PrivateProperties(This,ppProperties) ) 

#define ISClusNode_get_CommonROProperties(This,ppProperties)	\
    ( (This)->lpVtbl -> get_CommonROProperties(This,ppProperties) ) 

#define ISClusNode_get_PrivateROProperties(This,ppProperties)	\
    ( (This)->lpVtbl -> get_PrivateROProperties(This,ppProperties) ) 

#define ISClusNode_get_Name(This,pbstrName)	\
    ( (This)->lpVtbl -> get_Name(This,pbstrName) ) 

#define ISClusNode_get_Handle(This,phandle)	\
    ( (This)->lpVtbl -> get_Handle(This,phandle) ) 

#define ISClusNode_get_NodeID(This,pbstrNodeID)	\
    ( (This)->lpVtbl -> get_NodeID(This,pbstrNodeID) ) 

#define ISClusNode_get_State(This,dwState)	\
    ( (This)->lpVtbl -> get_State(This,dwState) ) 

#define ISClusNode_Pause(This)	\
    ( (This)->lpVtbl -> Pause(This) ) 

#define ISClusNode_Resume(This)	\
    ( (This)->lpVtbl -> Resume(This) ) 

#define ISClusNode_Evict(This)	\
    ( (This)->lpVtbl -> Evict(This) ) 

#define ISClusNode_get_ResourceGroups(This,ppResourceGroups)	\
    ( (This)->lpVtbl -> get_ResourceGroups(This,ppResourceGroups) ) 

#define ISClusNode_get_Cluster(This,ppCluster)	\
    ( (This)->lpVtbl -> get_Cluster(This,ppCluster) ) 

#define ISClusNode_get_NetInterfaces(This,ppClusNetInterfaces)	\
    ( (This)->lpVtbl -> get_NetInterfaces(This,ppClusNetInterfaces) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISClusNode_INTERFACE_DEFINED__ */


#ifndef __ISClusNodes_INTERFACE_DEFINED__
#define __ISClusNodes_INTERFACE_DEFINED__

/* interface ISClusNodes */
/* [unique][helpstring][dual][uuid][object][nonextensible][hidden][oleautomation] */ 


EXTERN_C const IID IID_ISClusNodes;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f2e606fa-2631-11d1-89f1-00a0c90d061e")
    ISClusNodes : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ __RPC__out long *plCount) = 0;
        
        virtual /* [helpstring][id][restricted][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Refresh( void) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Item( 
            /* [in] */ VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt ISClusNode **ppNode) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISClusNodesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISClusNodes * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISClusNodes * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISClusNodes * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ISClusNodes * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ISClusNodes * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ISClusNodes * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISClusNodes * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            __RPC__in ISClusNodes * This,
            /* [retval][out] */ __RPC__out long *plCount);
        
        /* [helpstring][id][restricted][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            __RPC__in ISClusNodes * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Refresh )( 
            __RPC__in ISClusNodes * This);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Item )( 
            __RPC__in ISClusNodes * This,
            /* [in] */ VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt ISClusNode **ppNode);
        
        END_INTERFACE
    } ISClusNodesVtbl;

    interface ISClusNodes
    {
        CONST_VTBL struct ISClusNodesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISClusNodes_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISClusNodes_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISClusNodes_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISClusNodes_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISClusNodes_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISClusNodes_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISClusNodes_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISClusNodes_get_Count(This,plCount)	\
    ( (This)->lpVtbl -> get_Count(This,plCount) ) 

#define ISClusNodes_get__NewEnum(This,retval)	\
    ( (This)->lpVtbl -> get__NewEnum(This,retval) ) 

#define ISClusNodes_Refresh(This)	\
    ( (This)->lpVtbl -> Refresh(This) ) 

#define ISClusNodes_get_Item(This,varIndex,ppNode)	\
    ( (This)->lpVtbl -> get_Item(This,varIndex,ppNode) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISClusNodes_INTERFACE_DEFINED__ */


#ifndef __ISClusNetwork_INTERFACE_DEFINED__
#define __ISClusNetwork_INTERFACE_DEFINED__

/* interface ISClusNetwork */
/* [unique][helpstring][dual][uuid][object][nonextensible][hidden][oleautomation] */ 


EXTERN_C const IID IID_ISClusNetwork;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f2e606f2-2631-11d1-89f1-00a0c90d061e")
    ISClusNetwork : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CommonProperties( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PrivateProperties( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CommonROProperties( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PrivateROProperties( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties) = 0;
        
        virtual /* [helpstring][id][hidden][propget] */ HRESULT STDMETHODCALLTYPE get_Handle( 
            /* [retval][out] */ __RPC__out ULONG_PTR *phandle) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrName) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ __RPC__in BSTR bstrNetworkName) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_NetworkID( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrNetworkID) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_State( 
            /* [retval][out] */ __RPC__out CLUSTER_NETWORK_STATE *dwState) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_NetInterfaces( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusNetworkNetInterfaces **ppClusNetInterfaces) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Cluster( 
            /* [retval][out] */ __RPC__deref_out_opt ISCluster **ppCluster) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISClusNetworkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISClusNetwork * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISClusNetwork * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISClusNetwork * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ISClusNetwork * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ISClusNetwork * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ISClusNetwork * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISClusNetwork * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CommonProperties )( 
            __RPC__in ISClusNetwork * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PrivateProperties )( 
            __RPC__in ISClusNetwork * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CommonROProperties )( 
            __RPC__in ISClusNetwork * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PrivateROProperties )( 
            __RPC__in ISClusNetwork * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties);
        
        /* [helpstring][id][hidden][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            __RPC__in ISClusNetwork * This,
            /* [retval][out] */ __RPC__out ULONG_PTR *phandle);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            __RPC__in ISClusNetwork * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrName);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            __RPC__in ISClusNetwork * This,
            /* [in] */ __RPC__in BSTR bstrNetworkName);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NetworkID )( 
            __RPC__in ISClusNetwork * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrNetworkID);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_State )( 
            __RPC__in ISClusNetwork * This,
            /* [retval][out] */ __RPC__out CLUSTER_NETWORK_STATE *dwState);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_NetInterfaces )( 
            __RPC__in ISClusNetwork * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusNetworkNetInterfaces **ppClusNetInterfaces);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Cluster )( 
            __RPC__in ISClusNetwork * This,
            /* [retval][out] */ __RPC__deref_out_opt ISCluster **ppCluster);
        
        END_INTERFACE
    } ISClusNetworkVtbl;

    interface ISClusNetwork
    {
        CONST_VTBL struct ISClusNetworkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISClusNetwork_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISClusNetwork_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISClusNetwork_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISClusNetwork_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISClusNetwork_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISClusNetwork_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISClusNetwork_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISClusNetwork_get_CommonProperties(This,ppProperties)	\
    ( (This)->lpVtbl -> get_CommonProperties(This,ppProperties) ) 

#define ISClusNetwork_get_PrivateProperties(This,ppProperties)	\
    ( (This)->lpVtbl -> get_PrivateProperties(This,ppProperties) ) 

#define ISClusNetwork_get_CommonROProperties(This,ppProperties)	\
    ( (This)->lpVtbl -> get_CommonROProperties(This,ppProperties) ) 

#define ISClusNetwork_get_PrivateROProperties(This,ppProperties)	\
    ( (This)->lpVtbl -> get_PrivateROProperties(This,ppProperties) ) 

#define ISClusNetwork_get_Handle(This,phandle)	\
    ( (This)->lpVtbl -> get_Handle(This,phandle) ) 

#define ISClusNetwork_get_Name(This,pbstrName)	\
    ( (This)->lpVtbl -> get_Name(This,pbstrName) ) 

#define ISClusNetwork_put_Name(This,bstrNetworkName)	\
    ( (This)->lpVtbl -> put_Name(This,bstrNetworkName) ) 

#define ISClusNetwork_get_NetworkID(This,pbstrNetworkID)	\
    ( (This)->lpVtbl -> get_NetworkID(This,pbstrNetworkID) ) 

#define ISClusNetwork_get_State(This,dwState)	\
    ( (This)->lpVtbl -> get_State(This,dwState) ) 

#define ISClusNetwork_get_NetInterfaces(This,ppClusNetInterfaces)	\
    ( (This)->lpVtbl -> get_NetInterfaces(This,ppClusNetInterfaces) ) 

#define ISClusNetwork_get_Cluster(This,ppCluster)	\
    ( (This)->lpVtbl -> get_Cluster(This,ppCluster) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISClusNetwork_INTERFACE_DEFINED__ */


#ifndef __ISClusNetworks_INTERFACE_DEFINED__
#define __ISClusNetworks_INTERFACE_DEFINED__

/* interface ISClusNetworks */
/* [unique][helpstring][dual][uuid][object][nonextensible][hidden][oleautomation] */ 


EXTERN_C const IID IID_ISClusNetworks;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f2e606f4-2631-11d1-89f1-00a0c90d061e")
    ISClusNetworks : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ __RPC__out long *plCount) = 0;
        
        virtual /* [helpstring][id][restricted][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Refresh( void) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Item( 
            /* [in] */ VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt ISClusNetwork **ppClusNetwork) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISClusNetworksVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISClusNetworks * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISClusNetworks * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISClusNetworks * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ISClusNetworks * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ISClusNetworks * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ISClusNetworks * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISClusNetworks * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            __RPC__in ISClusNetworks * This,
            /* [retval][out] */ __RPC__out long *plCount);
        
        /* [helpstring][id][restricted][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            __RPC__in ISClusNetworks * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Refresh )( 
            __RPC__in ISClusNetworks * This);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Item )( 
            __RPC__in ISClusNetworks * This,
            /* [in] */ VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt ISClusNetwork **ppClusNetwork);
        
        END_INTERFACE
    } ISClusNetworksVtbl;

    interface ISClusNetworks
    {
        CONST_VTBL struct ISClusNetworksVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISClusNetworks_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISClusNetworks_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISClusNetworks_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISClusNetworks_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISClusNetworks_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISClusNetworks_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISClusNetworks_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISClusNetworks_get_Count(This,plCount)	\
    ( (This)->lpVtbl -> get_Count(This,plCount) ) 

#define ISClusNetworks_get__NewEnum(This,retval)	\
    ( (This)->lpVtbl -> get__NewEnum(This,retval) ) 

#define ISClusNetworks_Refresh(This)	\
    ( (This)->lpVtbl -> Refresh(This) ) 

#define ISClusNetworks_get_Item(This,varIndex,ppClusNetwork)	\
    ( (This)->lpVtbl -> get_Item(This,varIndex,ppClusNetwork) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISClusNetworks_INTERFACE_DEFINED__ */


#ifndef __ISClusNetInterface_INTERFACE_DEFINED__
#define __ISClusNetInterface_INTERFACE_DEFINED__

/* interface ISClusNetInterface */
/* [unique][helpstring][dual][uuid][object][nonextensible][hidden][oleautomation] */ 


EXTERN_C const IID IID_ISClusNetInterface;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f2e606ee-2631-11d1-89f1-00a0c90d061e")
    ISClusNetInterface : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CommonProperties( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PrivateProperties( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CommonROProperties( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PrivateROProperties( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrName) = 0;
        
        virtual /* [helpstring][id][hidden][propget] */ HRESULT STDMETHODCALLTYPE get_Handle( 
            /* [retval][out] */ __RPC__out ULONG_PTR *phandle) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_State( 
            /* [retval][out] */ __RPC__out CLUSTER_NETINTERFACE_STATE *dwState) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Cluster( 
            /* [retval][out] */ __RPC__deref_out_opt ISCluster **ppCluster) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISClusNetInterfaceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISClusNetInterface * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISClusNetInterface * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISClusNetInterface * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ISClusNetInterface * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ISClusNetInterface * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ISClusNetInterface * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISClusNetInterface * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CommonProperties )( 
            __RPC__in ISClusNetInterface * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PrivateProperties )( 
            __RPC__in ISClusNetInterface * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CommonROProperties )( 
            __RPC__in ISClusNetInterface * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PrivateROProperties )( 
            __RPC__in ISClusNetInterface * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            __RPC__in ISClusNetInterface * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrName);
        
        /* [helpstring][id][hidden][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            __RPC__in ISClusNetInterface * This,
            /* [retval][out] */ __RPC__out ULONG_PTR *phandle);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_State )( 
            __RPC__in ISClusNetInterface * This,
            /* [retval][out] */ __RPC__out CLUSTER_NETINTERFACE_STATE *dwState);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Cluster )( 
            __RPC__in ISClusNetInterface * This,
            /* [retval][out] */ __RPC__deref_out_opt ISCluster **ppCluster);
        
        END_INTERFACE
    } ISClusNetInterfaceVtbl;

    interface ISClusNetInterface
    {
        CONST_VTBL struct ISClusNetInterfaceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISClusNetInterface_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISClusNetInterface_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISClusNetInterface_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISClusNetInterface_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISClusNetInterface_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISClusNetInterface_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISClusNetInterface_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISClusNetInterface_get_CommonProperties(This,ppProperties)	\
    ( (This)->lpVtbl -> get_CommonProperties(This,ppProperties) ) 

#define ISClusNetInterface_get_PrivateProperties(This,ppProperties)	\
    ( (This)->lpVtbl -> get_PrivateProperties(This,ppProperties) ) 

#define ISClusNetInterface_get_CommonROProperties(This,ppProperties)	\
    ( (This)->lpVtbl -> get_CommonROProperties(This,ppProperties) ) 

#define ISClusNetInterface_get_PrivateROProperties(This,ppProperties)	\
    ( (This)->lpVtbl -> get_PrivateROProperties(This,ppProperties) ) 

#define ISClusNetInterface_get_Name(This,pbstrName)	\
    ( (This)->lpVtbl -> get_Name(This,pbstrName) ) 

#define ISClusNetInterface_get_Handle(This,phandle)	\
    ( (This)->lpVtbl -> get_Handle(This,phandle) ) 

#define ISClusNetInterface_get_State(This,dwState)	\
    ( (This)->lpVtbl -> get_State(This,dwState) ) 

#define ISClusNetInterface_get_Cluster(This,ppCluster)	\
    ( (This)->lpVtbl -> get_Cluster(This,ppCluster) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISClusNetInterface_INTERFACE_DEFINED__ */


#ifndef __ISClusNetInterfaces_INTERFACE_DEFINED__
#define __ISClusNetInterfaces_INTERFACE_DEFINED__

/* interface ISClusNetInterfaces */
/* [unique][helpstring][dual][uuid][object][nonextensible][hidden][oleautomation] */ 


EXTERN_C const IID IID_ISClusNetInterfaces;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f2e606f0-2631-11d1-89f1-00a0c90d061e")
    ISClusNetInterfaces : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ __RPC__out long *plCount) = 0;
        
        virtual /* [helpstring][id][restricted][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Refresh( void) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Item( 
            /* [in] */ VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt ISClusNetInterface **ppClusNetInterface) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISClusNetInterfacesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISClusNetInterfaces * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISClusNetInterfaces * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISClusNetInterfaces * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ISClusNetInterfaces * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ISClusNetInterfaces * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ISClusNetInterfaces * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISClusNetInterfaces * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            __RPC__in ISClusNetInterfaces * This,
            /* [retval][out] */ __RPC__out long *plCount);
        
        /* [helpstring][id][restricted][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            __RPC__in ISClusNetInterfaces * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Refresh )( 
            __RPC__in ISClusNetInterfaces * This);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Item )( 
            __RPC__in ISClusNetInterfaces * This,
            /* [in] */ VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt ISClusNetInterface **ppClusNetInterface);
        
        END_INTERFACE
    } ISClusNetInterfacesVtbl;

    interface ISClusNetInterfaces
    {
        CONST_VTBL struct ISClusNetInterfacesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISClusNetInterfaces_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISClusNetInterfaces_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISClusNetInterfaces_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISClusNetInterfaces_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISClusNetInterfaces_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISClusNetInterfaces_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISClusNetInterfaces_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISClusNetInterfaces_get_Count(This,plCount)	\
    ( (This)->lpVtbl -> get_Count(This,plCount) ) 

#define ISClusNetInterfaces_get__NewEnum(This,retval)	\
    ( (This)->lpVtbl -> get__NewEnum(This,retval) ) 

#define ISClusNetInterfaces_Refresh(This)	\
    ( (This)->lpVtbl -> Refresh(This) ) 

#define ISClusNetInterfaces_get_Item(This,varIndex,ppClusNetInterface)	\
    ( (This)->lpVtbl -> get_Item(This,varIndex,ppClusNetInterface) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISClusNetInterfaces_INTERFACE_DEFINED__ */


#ifndef __ISClusNodeNetInterfaces_INTERFACE_DEFINED__
#define __ISClusNodeNetInterfaces_INTERFACE_DEFINED__

/* interface ISClusNodeNetInterfaces */
/* [unique][helpstring][dual][uuid][object][nonextensible][hidden][oleautomation] */ 


EXTERN_C const IID IID_ISClusNodeNetInterfaces;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f2e606fc-2631-11d1-89f1-00a0c90d061e")
    ISClusNodeNetInterfaces : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ __RPC__out long *plCount) = 0;
        
        virtual /* [helpstring][id][restricted][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Refresh( void) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Item( 
            /* [in] */ VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt ISClusNetInterface **ppClusNetInterface) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISClusNodeNetInterfacesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISClusNodeNetInterfaces * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISClusNodeNetInterfaces * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISClusNodeNetInterfaces * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ISClusNodeNetInterfaces * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ISClusNodeNetInterfaces * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ISClusNodeNetInterfaces * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISClusNodeNetInterfaces * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            __RPC__in ISClusNodeNetInterfaces * This,
            /* [retval][out] */ __RPC__out long *plCount);
        
        /* [helpstring][id][restricted][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            __RPC__in ISClusNodeNetInterfaces * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Refresh )( 
            __RPC__in ISClusNodeNetInterfaces * This);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Item )( 
            __RPC__in ISClusNodeNetInterfaces * This,
            /* [in] */ VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt ISClusNetInterface **ppClusNetInterface);
        
        END_INTERFACE
    } ISClusNodeNetInterfacesVtbl;

    interface ISClusNodeNetInterfaces
    {
        CONST_VTBL struct ISClusNodeNetInterfacesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISClusNodeNetInterfaces_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISClusNodeNetInterfaces_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISClusNodeNetInterfaces_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISClusNodeNetInterfaces_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISClusNodeNetInterfaces_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISClusNodeNetInterfaces_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISClusNodeNetInterfaces_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISClusNodeNetInterfaces_get_Count(This,plCount)	\
    ( (This)->lpVtbl -> get_Count(This,plCount) ) 

#define ISClusNodeNetInterfaces_get__NewEnum(This,retval)	\
    ( (This)->lpVtbl -> get__NewEnum(This,retval) ) 

#define ISClusNodeNetInterfaces_Refresh(This)	\
    ( (This)->lpVtbl -> Refresh(This) ) 

#define ISClusNodeNetInterfaces_get_Item(This,varIndex,ppClusNetInterface)	\
    ( (This)->lpVtbl -> get_Item(This,varIndex,ppClusNetInterface) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISClusNodeNetInterfaces_INTERFACE_DEFINED__ */


#ifndef __ISClusNetworkNetInterfaces_INTERFACE_DEFINED__
#define __ISClusNetworkNetInterfaces_INTERFACE_DEFINED__

/* interface ISClusNetworkNetInterfaces */
/* [unique][helpstring][dual][uuid][object][nonextensible][hidden][oleautomation] */ 


EXTERN_C const IID IID_ISClusNetworkNetInterfaces;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f2e606f6-2631-11d1-89f1-00a0c90d061e")
    ISClusNetworkNetInterfaces : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ __RPC__out long *plCount) = 0;
        
        virtual /* [helpstring][id][restricted][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Refresh( void) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Item( 
            /* [in] */ VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt ISClusNetInterface **ppClusNetInterface) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISClusNetworkNetInterfacesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISClusNetworkNetInterfaces * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISClusNetworkNetInterfaces * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISClusNetworkNetInterfaces * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ISClusNetworkNetInterfaces * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ISClusNetworkNetInterfaces * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ISClusNetworkNetInterfaces * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISClusNetworkNetInterfaces * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            __RPC__in ISClusNetworkNetInterfaces * This,
            /* [retval][out] */ __RPC__out long *plCount);
        
        /* [helpstring][id][restricted][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            __RPC__in ISClusNetworkNetInterfaces * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Refresh )( 
            __RPC__in ISClusNetworkNetInterfaces * This);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Item )( 
            __RPC__in ISClusNetworkNetInterfaces * This,
            /* [in] */ VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt ISClusNetInterface **ppClusNetInterface);
        
        END_INTERFACE
    } ISClusNetworkNetInterfacesVtbl;

    interface ISClusNetworkNetInterfaces
    {
        CONST_VTBL struct ISClusNetworkNetInterfacesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISClusNetworkNetInterfaces_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISClusNetworkNetInterfaces_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISClusNetworkNetInterfaces_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISClusNetworkNetInterfaces_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISClusNetworkNetInterfaces_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISClusNetworkNetInterfaces_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISClusNetworkNetInterfaces_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISClusNetworkNetInterfaces_get_Count(This,plCount)	\
    ( (This)->lpVtbl -> get_Count(This,plCount) ) 

#define ISClusNetworkNetInterfaces_get__NewEnum(This,retval)	\
    ( (This)->lpVtbl -> get__NewEnum(This,retval) ) 

#define ISClusNetworkNetInterfaces_Refresh(This)	\
    ( (This)->lpVtbl -> Refresh(This) ) 

#define ISClusNetworkNetInterfaces_get_Item(This,varIndex,ppClusNetInterface)	\
    ( (This)->lpVtbl -> get_Item(This,varIndex,ppClusNetInterface) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISClusNetworkNetInterfaces_INTERFACE_DEFINED__ */


#ifndef __ISClusResGroup_INTERFACE_DEFINED__
#define __ISClusResGroup_INTERFACE_DEFINED__

/* interface ISClusResGroup */
/* [unique][helpstring][dual][uuid][object][nonextensible][hidden][oleautomation] */ 


EXTERN_C const IID IID_ISClusResGroup;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f2e60706-2631-11d1-89f1-00a0c90d061e")
    ISClusResGroup : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CommonProperties( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PrivateProperties( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CommonROProperties( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PrivateROProperties( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties) = 0;
        
        virtual /* [helpstring][id][hidden][propget] */ HRESULT STDMETHODCALLTYPE get_Handle( 
            /* [retval][out] */ __RPC__out ULONG_PTR *phandle) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrName) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ __RPC__in BSTR bstrGroupName) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_State( 
            /* [retval][out] */ __RPC__out CLUSTER_GROUP_STATE *dwState) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_OwnerNode( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusNode **ppOwnerNode) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Resources( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusResGroupResources **ppClusterGroupResources) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PreferredOwnerNodes( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusResGroupPreferredOwnerNodes **ppOwnerNodes) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Online( 
            /* [in] */ VARIANT varTimeout,
            /* [optional][in] */ VARIANT varNode,
            /* [retval][out] */ __RPC__out VARIANT *pvarPending) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Move( 
            /* [in] */ VARIANT varTimeout,
            /* [optional][in] */ VARIANT varNode,
            /* [retval][out] */ __RPC__out VARIANT *pvarPending) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Offline( 
            /* [in] */ VARIANT varTimeout,
            /* [retval][out] */ __RPC__out VARIANT *pvarPending) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Cluster( 
            /* [retval][out] */ __RPC__deref_out_opt ISCluster **ppCluster) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISClusResGroupVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISClusResGroup * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISClusResGroup * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISClusResGroup * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ISClusResGroup * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ISClusResGroup * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ISClusResGroup * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISClusResGroup * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CommonProperties )( 
            __RPC__in ISClusResGroup * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PrivateProperties )( 
            __RPC__in ISClusResGroup * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CommonROProperties )( 
            __RPC__in ISClusResGroup * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PrivateROProperties )( 
            __RPC__in ISClusResGroup * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties);
        
        /* [helpstring][id][hidden][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            __RPC__in ISClusResGroup * This,
            /* [retval][out] */ __RPC__out ULONG_PTR *phandle);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            __RPC__in ISClusResGroup * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrName);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            __RPC__in ISClusResGroup * This,
            /* [in] */ __RPC__in BSTR bstrGroupName);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_State )( 
            __RPC__in ISClusResGroup * This,
            /* [retval][out] */ __RPC__out CLUSTER_GROUP_STATE *dwState);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerNode )( 
            __RPC__in ISClusResGroup * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusNode **ppOwnerNode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Resources )( 
            __RPC__in ISClusResGroup * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusResGroupResources **ppClusterGroupResources);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PreferredOwnerNodes )( 
            __RPC__in ISClusResGroup * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusResGroupPreferredOwnerNodes **ppOwnerNodes);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            __RPC__in ISClusResGroup * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Online )( 
            __RPC__in ISClusResGroup * This,
            /* [in] */ VARIANT varTimeout,
            /* [optional][in] */ VARIANT varNode,
            /* [retval][out] */ __RPC__out VARIANT *pvarPending);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Move )( 
            __RPC__in ISClusResGroup * This,
            /* [in] */ VARIANT varTimeout,
            /* [optional][in] */ VARIANT varNode,
            /* [retval][out] */ __RPC__out VARIANT *pvarPending);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Offline )( 
            __RPC__in ISClusResGroup * This,
            /* [in] */ VARIANT varTimeout,
            /* [retval][out] */ __RPC__out VARIANT *pvarPending);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Cluster )( 
            __RPC__in ISClusResGroup * This,
            /* [retval][out] */ __RPC__deref_out_opt ISCluster **ppCluster);
        
        END_INTERFACE
    } ISClusResGroupVtbl;

    interface ISClusResGroup
    {
        CONST_VTBL struct ISClusResGroupVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISClusResGroup_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISClusResGroup_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISClusResGroup_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISClusResGroup_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISClusResGroup_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISClusResGroup_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISClusResGroup_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISClusResGroup_get_CommonProperties(This,ppProperties)	\
    ( (This)->lpVtbl -> get_CommonProperties(This,ppProperties) ) 

#define ISClusResGroup_get_PrivateProperties(This,ppProperties)	\
    ( (This)->lpVtbl -> get_PrivateProperties(This,ppProperties) ) 

#define ISClusResGroup_get_CommonROProperties(This,ppProperties)	\
    ( (This)->lpVtbl -> get_CommonROProperties(This,ppProperties) ) 

#define ISClusResGroup_get_PrivateROProperties(This,ppProperties)	\
    ( (This)->lpVtbl -> get_PrivateROProperties(This,ppProperties) ) 

#define ISClusResGroup_get_Handle(This,phandle)	\
    ( (This)->lpVtbl -> get_Handle(This,phandle) ) 

#define ISClusResGroup_get_Name(This,pbstrName)	\
    ( (This)->lpVtbl -> get_Name(This,pbstrName) ) 

#define ISClusResGroup_put_Name(This,bstrGroupName)	\
    ( (This)->lpVtbl -> put_Name(This,bstrGroupName) ) 

#define ISClusResGroup_get_State(This,dwState)	\
    ( (This)->lpVtbl -> get_State(This,dwState) ) 

#define ISClusResGroup_get_OwnerNode(This,ppOwnerNode)	\
    ( (This)->lpVtbl -> get_OwnerNode(This,ppOwnerNode) ) 

#define ISClusResGroup_get_Resources(This,ppClusterGroupResources)	\
    ( (This)->lpVtbl -> get_Resources(This,ppClusterGroupResources) ) 

#define ISClusResGroup_get_PreferredOwnerNodes(This,ppOwnerNodes)	\
    ( (This)->lpVtbl -> get_PreferredOwnerNodes(This,ppOwnerNodes) ) 

#define ISClusResGroup_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define ISClusResGroup_Online(This,varTimeout,varNode,pvarPending)	\
    ( (This)->lpVtbl -> Online(This,varTimeout,varNode,pvarPending) ) 

#define ISClusResGroup_Move(This,varTimeout,varNode,pvarPending)	\
    ( (This)->lpVtbl -> Move(This,varTimeout,varNode,pvarPending) ) 

#define ISClusResGroup_Offline(This,varTimeout,pvarPending)	\
    ( (This)->lpVtbl -> Offline(This,varTimeout,pvarPending) ) 

#define ISClusResGroup_get_Cluster(This,ppCluster)	\
    ( (This)->lpVtbl -> get_Cluster(This,ppCluster) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISClusResGroup_INTERFACE_DEFINED__ */


#ifndef __ISClusResGroups_INTERFACE_DEFINED__
#define __ISClusResGroups_INTERFACE_DEFINED__

/* interface ISClusResGroups */
/* [unique][helpstring][dual][uuid][object][nonextensible][hidden][oleautomation] */ 


EXTERN_C const IID IID_ISClusResGroups;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f2e60708-2631-11d1-89f1-00a0c90d061e")
    ISClusResGroups : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ __RPC__out long *plCount) = 0;
        
        virtual /* [helpstring][id][restricted][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Refresh( void) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Item( 
            /* [in] */ VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt ISClusResGroup **ppClusResGroup) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE CreateItem( 
            /* [in] */ __RPC__in BSTR bstrResourceGroupName,
            /* [retval][out] */ __RPC__deref_out_opt ISClusResGroup **ppResourceGroup) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE DeleteItem( 
            /* [in] */ VARIANT varIndex) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISClusResGroupsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISClusResGroups * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISClusResGroups * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISClusResGroups * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ISClusResGroups * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ISClusResGroups * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ISClusResGroups * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISClusResGroups * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            __RPC__in ISClusResGroups * This,
            /* [retval][out] */ __RPC__out long *plCount);
        
        /* [helpstring][id][restricted][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            __RPC__in ISClusResGroups * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Refresh )( 
            __RPC__in ISClusResGroups * This);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Item )( 
            __RPC__in ISClusResGroups * This,
            /* [in] */ VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt ISClusResGroup **ppClusResGroup);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CreateItem )( 
            __RPC__in ISClusResGroups * This,
            /* [in] */ __RPC__in BSTR bstrResourceGroupName,
            /* [retval][out] */ __RPC__deref_out_opt ISClusResGroup **ppResourceGroup);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteItem )( 
            __RPC__in ISClusResGroups * This,
            /* [in] */ VARIANT varIndex);
        
        END_INTERFACE
    } ISClusResGroupsVtbl;

    interface ISClusResGroups
    {
        CONST_VTBL struct ISClusResGroupsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISClusResGroups_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISClusResGroups_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISClusResGroups_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISClusResGroups_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISClusResGroups_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISClusResGroups_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISClusResGroups_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISClusResGroups_get_Count(This,plCount)	\
    ( (This)->lpVtbl -> get_Count(This,plCount) ) 

#define ISClusResGroups_get__NewEnum(This,retval)	\
    ( (This)->lpVtbl -> get__NewEnum(This,retval) ) 

#define ISClusResGroups_Refresh(This)	\
    ( (This)->lpVtbl -> Refresh(This) ) 

#define ISClusResGroups_get_Item(This,varIndex,ppClusResGroup)	\
    ( (This)->lpVtbl -> get_Item(This,varIndex,ppClusResGroup) ) 

#define ISClusResGroups_CreateItem(This,bstrResourceGroupName,ppResourceGroup)	\
    ( (This)->lpVtbl -> CreateItem(This,bstrResourceGroupName,ppResourceGroup) ) 

#define ISClusResGroups_DeleteItem(This,varIndex)	\
    ( (This)->lpVtbl -> DeleteItem(This,varIndex) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISClusResGroups_INTERFACE_DEFINED__ */


#ifndef __ISClusResource_INTERFACE_DEFINED__
#define __ISClusResource_INTERFACE_DEFINED__

/* interface ISClusResource */
/* [unique][helpstring][dual][uuid][object][nonextensible][hidden][oleautomation] */ 


EXTERN_C const IID IID_ISClusResource;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f2e6070a-2631-11d1-89f1-00a0c90d061e")
    ISClusResource : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CommonProperties( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PrivateProperties( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CommonROProperties( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PrivateROProperties( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties) = 0;
        
        virtual /* [helpstring][id][hidden][propget] */ HRESULT STDMETHODCALLTYPE get_Handle( 
            /* [retval][out] */ __RPC__out ULONG_PTR *phandle) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrName) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Name( 
            /* [in] */ __RPC__in BSTR bstrResourceName) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_State( 
            /* [retval][out] */ __RPC__out CLUSTER_RESOURCE_STATE *dwState) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CoreFlag( 
            /* [retval][out] */ __RPC__out CLUS_FLAGS *dwCoreFlag) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE BecomeQuorumResource( 
            /* [in] */ __RPC__in BSTR bstrDevicePath,
            /* [in] */ long lMaxLogSize) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Fail( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Online( 
            /* [in] */ long nTimeout,
            /* [retval][out] */ __RPC__out VARIANT *pvarPending) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Offline( 
            /* [in] */ long nTimeout,
            /* [retval][out] */ __RPC__out VARIANT *pvarPending) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE ChangeResourceGroup( 
            /* [in] */ __RPC__in_opt ISClusResGroup *pResourceGroup) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddResourceNode( 
            /* [in] */ __RPC__in_opt ISClusNode *pNode) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RemoveResourceNode( 
            /* [in] */ __RPC__in_opt ISClusNode *pNode) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE CanResourceBeDependent( 
            /* [in] */ __RPC__in_opt ISClusResource *pResource,
            /* [retval][out] */ __RPC__out VARIANT *pvarDependent) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PossibleOwnerNodes( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusResPossibleOwnerNodes **ppOwnerNodes) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Dependencies( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusResDependencies **ppResDependencies) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Dependents( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusResDependents **ppResDependents) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Group( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusResGroup **ppResGroup) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_OwnerNode( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusNode **ppOwnerNode) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Cluster( 
            /* [retval][out] */ __RPC__deref_out_opt ISCluster **ppCluster) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ClassInfo( 
            /* [retval][out] */ __RPC__out CLUSTER_RESOURCE_CLASS *prcClassInfo) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Disk( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusDisk **ppDisk) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_RegistryKeys( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusRegistryKeys **ppRegistryKeys) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CryptoKeys( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusCryptoKeys **ppCryptoKeys) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_TypeName( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrTypeName) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusResType **ppResourceType) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_MaintenanceMode( 
            /* [retval][out] */ __RPC__out BOOL *pbMaintenanceMode) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_MaintenanceMode( 
            /* [in] */ BOOL bMaintenanceMode) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISClusResourceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISClusResource * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISClusResource * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISClusResource * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ISClusResource * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ISClusResource * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ISClusResource * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISClusResource * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CommonProperties )( 
            __RPC__in ISClusResource * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PrivateProperties )( 
            __RPC__in ISClusResource * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CommonROProperties )( 
            __RPC__in ISClusResource * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PrivateROProperties )( 
            __RPC__in ISClusResource * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties);
        
        /* [helpstring][id][hidden][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Handle )( 
            __RPC__in ISClusResource * This,
            /* [retval][out] */ __RPC__out ULONG_PTR *phandle);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            __RPC__in ISClusResource * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrName);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Name )( 
            __RPC__in ISClusResource * This,
            /* [in] */ __RPC__in BSTR bstrResourceName);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_State )( 
            __RPC__in ISClusResource * This,
            /* [retval][out] */ __RPC__out CLUSTER_RESOURCE_STATE *dwState);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CoreFlag )( 
            __RPC__in ISClusResource * This,
            /* [retval][out] */ __RPC__out CLUS_FLAGS *dwCoreFlag);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *BecomeQuorumResource )( 
            __RPC__in ISClusResource * This,
            /* [in] */ __RPC__in BSTR bstrDevicePath,
            /* [in] */ long lMaxLogSize);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            __RPC__in ISClusResource * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Fail )( 
            __RPC__in ISClusResource * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Online )( 
            __RPC__in ISClusResource * This,
            /* [in] */ long nTimeout,
            /* [retval][out] */ __RPC__out VARIANT *pvarPending);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Offline )( 
            __RPC__in ISClusResource * This,
            /* [in] */ long nTimeout,
            /* [retval][out] */ __RPC__out VARIANT *pvarPending);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *ChangeResourceGroup )( 
            __RPC__in ISClusResource * This,
            /* [in] */ __RPC__in_opt ISClusResGroup *pResourceGroup);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddResourceNode )( 
            __RPC__in ISClusResource * This,
            /* [in] */ __RPC__in_opt ISClusNode *pNode);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveResourceNode )( 
            __RPC__in ISClusResource * This,
            /* [in] */ __RPC__in_opt ISClusNode *pNode);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CanResourceBeDependent )( 
            __RPC__in ISClusResource * This,
            /* [in] */ __RPC__in_opt ISClusResource *pResource,
            /* [retval][out] */ __RPC__out VARIANT *pvarDependent);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PossibleOwnerNodes )( 
            __RPC__in ISClusResource * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusResPossibleOwnerNodes **ppOwnerNodes);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Dependencies )( 
            __RPC__in ISClusResource * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusResDependencies **ppResDependencies);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Dependents )( 
            __RPC__in ISClusResource * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusResDependents **ppResDependents);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Group )( 
            __RPC__in ISClusResource * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusResGroup **ppResGroup);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OwnerNode )( 
            __RPC__in ISClusResource * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusNode **ppOwnerNode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Cluster )( 
            __RPC__in ISClusResource * This,
            /* [retval][out] */ __RPC__deref_out_opt ISCluster **ppCluster);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClassInfo )( 
            __RPC__in ISClusResource * This,
            /* [retval][out] */ __RPC__out CLUSTER_RESOURCE_CLASS *prcClassInfo);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Disk )( 
            __RPC__in ISClusResource * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusDisk **ppDisk);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_RegistryKeys )( 
            __RPC__in ISClusResource * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusRegistryKeys **ppRegistryKeys);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CryptoKeys )( 
            __RPC__in ISClusResource * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusCryptoKeys **ppCryptoKeys);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TypeName )( 
            __RPC__in ISClusResource * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrTypeName);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            __RPC__in ISClusResource * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusResType **ppResourceType);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MaintenanceMode )( 
            __RPC__in ISClusResource * This,
            /* [retval][out] */ __RPC__out BOOL *pbMaintenanceMode);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_MaintenanceMode )( 
            __RPC__in ISClusResource * This,
            /* [in] */ BOOL bMaintenanceMode);
        
        END_INTERFACE
    } ISClusResourceVtbl;

    interface ISClusResource
    {
        CONST_VTBL struct ISClusResourceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISClusResource_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISClusResource_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISClusResource_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISClusResource_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISClusResource_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISClusResource_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISClusResource_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISClusResource_get_CommonProperties(This,ppProperties)	\
    ( (This)->lpVtbl -> get_CommonProperties(This,ppProperties) ) 

#define ISClusResource_get_PrivateProperties(This,ppProperties)	\
    ( (This)->lpVtbl -> get_PrivateProperties(This,ppProperties) ) 

#define ISClusResource_get_CommonROProperties(This,ppProperties)	\
    ( (This)->lpVtbl -> get_CommonROProperties(This,ppProperties) ) 

#define ISClusResource_get_PrivateROProperties(This,ppProperties)	\
    ( (This)->lpVtbl -> get_PrivateROProperties(This,ppProperties) ) 

#define ISClusResource_get_Handle(This,phandle)	\
    ( (This)->lpVtbl -> get_Handle(This,phandle) ) 

#define ISClusResource_get_Name(This,pbstrName)	\
    ( (This)->lpVtbl -> get_Name(This,pbstrName) ) 

#define ISClusResource_put_Name(This,bstrResourceName)	\
    ( (This)->lpVtbl -> put_Name(This,bstrResourceName) ) 

#define ISClusResource_get_State(This,dwState)	\
    ( (This)->lpVtbl -> get_State(This,dwState) ) 

#define ISClusResource_get_CoreFlag(This,dwCoreFlag)	\
    ( (This)->lpVtbl -> get_CoreFlag(This,dwCoreFlag) ) 

#define ISClusResource_BecomeQuorumResource(This,bstrDevicePath,lMaxLogSize)	\
    ( (This)->lpVtbl -> BecomeQuorumResource(This,bstrDevicePath,lMaxLogSize) ) 

#define ISClusResource_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define ISClusResource_Fail(This)	\
    ( (This)->lpVtbl -> Fail(This) ) 

#define ISClusResource_Online(This,nTimeout,pvarPending)	\
    ( (This)->lpVtbl -> Online(This,nTimeout,pvarPending) ) 

#define ISClusResource_Offline(This,nTimeout,pvarPending)	\
    ( (This)->lpVtbl -> Offline(This,nTimeout,pvarPending) ) 

#define ISClusResource_ChangeResourceGroup(This,pResourceGroup)	\
    ( (This)->lpVtbl -> ChangeResourceGroup(This,pResourceGroup) ) 

#define ISClusResource_AddResourceNode(This,pNode)	\
    ( (This)->lpVtbl -> AddResourceNode(This,pNode) ) 

#define ISClusResource_RemoveResourceNode(This,pNode)	\
    ( (This)->lpVtbl -> RemoveResourceNode(This,pNode) ) 

#define ISClusResource_CanResourceBeDependent(This,pResource,pvarDependent)	\
    ( (This)->lpVtbl -> CanResourceBeDependent(This,pResource,pvarDependent) ) 

#define ISClusResource_get_PossibleOwnerNodes(This,ppOwnerNodes)	\
    ( (This)->lpVtbl -> get_PossibleOwnerNodes(This,ppOwnerNodes) ) 

#define ISClusResource_get_Dependencies(This,ppResDependencies)	\
    ( (This)->lpVtbl -> get_Dependencies(This,ppResDependencies) ) 

#define ISClusResource_get_Dependents(This,ppResDependents)	\
    ( (This)->lpVtbl -> get_Dependents(This,ppResDependents) ) 

#define ISClusResource_get_Group(This,ppResGroup)	\
    ( (This)->lpVtbl -> get_Group(This,ppResGroup) ) 

#define ISClusResource_get_OwnerNode(This,ppOwnerNode)	\
    ( (This)->lpVtbl -> get_OwnerNode(This,ppOwnerNode) ) 

#define ISClusResource_get_Cluster(This,ppCluster)	\
    ( (This)->lpVtbl -> get_Cluster(This,ppCluster) ) 

#define ISClusResource_get_ClassInfo(This,prcClassInfo)	\
    ( (This)->lpVtbl -> get_ClassInfo(This,prcClassInfo) ) 

#define ISClusResource_get_Disk(This,ppDisk)	\
    ( (This)->lpVtbl -> get_Disk(This,ppDisk) ) 

#define ISClusResource_get_RegistryKeys(This,ppRegistryKeys)	\
    ( (This)->lpVtbl -> get_RegistryKeys(This,ppRegistryKeys) ) 

#define ISClusResource_get_CryptoKeys(This,ppCryptoKeys)	\
    ( (This)->lpVtbl -> get_CryptoKeys(This,ppCryptoKeys) ) 

#define ISClusResource_get_TypeName(This,pbstrTypeName)	\
    ( (This)->lpVtbl -> get_TypeName(This,pbstrTypeName) ) 

#define ISClusResource_get_Type(This,ppResourceType)	\
    ( (This)->lpVtbl -> get_Type(This,ppResourceType) ) 

#define ISClusResource_get_MaintenanceMode(This,pbMaintenanceMode)	\
    ( (This)->lpVtbl -> get_MaintenanceMode(This,pbMaintenanceMode) ) 

#define ISClusResource_put_MaintenanceMode(This,bMaintenanceMode)	\
    ( (This)->lpVtbl -> put_MaintenanceMode(This,bMaintenanceMode) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISClusResource_INTERFACE_DEFINED__ */


#ifndef __ISClusResDependencies_INTERFACE_DEFINED__
#define __ISClusResDependencies_INTERFACE_DEFINED__

/* interface ISClusResDependencies */
/* [unique][helpstring][dual][uuid][object][nonextensible][hidden][oleautomation] */ 


EXTERN_C const IID IID_ISClusResDependencies;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f2e60704-2631-11d1-89f1-00a0c90d061e")
    ISClusResDependencies : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ __RPC__out long *plCount) = 0;
        
        virtual /* [helpstring][id][restricted][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Refresh( void) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Item( 
            /* [in] */ VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt ISClusResource **ppClusResource) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE CreateItem( 
            /* [in] */ __RPC__in BSTR bstrResourceName,
            /* [in] */ __RPC__in BSTR bstrResourceType,
            /* [in] */ CLUSTER_RESOURCE_CREATE_FLAGS dwFlags,
            /* [retval][out] */ __RPC__deref_out_opt ISClusResource **ppClusterResource) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE DeleteItem( 
            /* [in] */ VARIANT varIndex) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddItem( 
            /* [in] */ __RPC__in_opt ISClusResource *pResource) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RemoveItem( 
            /* [in] */ VARIANT varIndex) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISClusResDependenciesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISClusResDependencies * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISClusResDependencies * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISClusResDependencies * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ISClusResDependencies * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ISClusResDependencies * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ISClusResDependencies * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISClusResDependencies * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            __RPC__in ISClusResDependencies * This,
            /* [retval][out] */ __RPC__out long *plCount);
        
        /* [helpstring][id][restricted][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            __RPC__in ISClusResDependencies * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Refresh )( 
            __RPC__in ISClusResDependencies * This);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Item )( 
            __RPC__in ISClusResDependencies * This,
            /* [in] */ VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt ISClusResource **ppClusResource);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CreateItem )( 
            __RPC__in ISClusResDependencies * This,
            /* [in] */ __RPC__in BSTR bstrResourceName,
            /* [in] */ __RPC__in BSTR bstrResourceType,
            /* [in] */ CLUSTER_RESOURCE_CREATE_FLAGS dwFlags,
            /* [retval][out] */ __RPC__deref_out_opt ISClusResource **ppClusterResource);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteItem )( 
            __RPC__in ISClusResDependencies * This,
            /* [in] */ VARIANT varIndex);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddItem )( 
            __RPC__in ISClusResDependencies * This,
            /* [in] */ __RPC__in_opt ISClusResource *pResource);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveItem )( 
            __RPC__in ISClusResDependencies * This,
            /* [in] */ VARIANT varIndex);
        
        END_INTERFACE
    } ISClusResDependenciesVtbl;

    interface ISClusResDependencies
    {
        CONST_VTBL struct ISClusResDependenciesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISClusResDependencies_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISClusResDependencies_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISClusResDependencies_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISClusResDependencies_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISClusResDependencies_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISClusResDependencies_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISClusResDependencies_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISClusResDependencies_get_Count(This,plCount)	\
    ( (This)->lpVtbl -> get_Count(This,plCount) ) 

#define ISClusResDependencies_get__NewEnum(This,retval)	\
    ( (This)->lpVtbl -> get__NewEnum(This,retval) ) 

#define ISClusResDependencies_Refresh(This)	\
    ( (This)->lpVtbl -> Refresh(This) ) 

#define ISClusResDependencies_get_Item(This,varIndex,ppClusResource)	\
    ( (This)->lpVtbl -> get_Item(This,varIndex,ppClusResource) ) 

#define ISClusResDependencies_CreateItem(This,bstrResourceName,bstrResourceType,dwFlags,ppClusterResource)	\
    ( (This)->lpVtbl -> CreateItem(This,bstrResourceName,bstrResourceType,dwFlags,ppClusterResource) ) 

#define ISClusResDependencies_DeleteItem(This,varIndex)	\
    ( (This)->lpVtbl -> DeleteItem(This,varIndex) ) 

#define ISClusResDependencies_AddItem(This,pResource)	\
    ( (This)->lpVtbl -> AddItem(This,pResource) ) 

#define ISClusResDependencies_RemoveItem(This,varIndex)	\
    ( (This)->lpVtbl -> RemoveItem(This,varIndex) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISClusResDependencies_INTERFACE_DEFINED__ */


#ifndef __ISClusResGroupResources_INTERFACE_DEFINED__
#define __ISClusResGroupResources_INTERFACE_DEFINED__

/* interface ISClusResGroupResources */
/* [unique][helpstring][dual][uuid][object][nonextensible][hidden][oleautomation] */ 


EXTERN_C const IID IID_ISClusResGroupResources;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f2e606ea-2631-11d1-89f1-00a0c90d061e")
    ISClusResGroupResources : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ __RPC__out long *plCount) = 0;
        
        virtual /* [helpstring][id][restricted][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Refresh( void) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Item( 
            /* [in] */ VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt ISClusResource **ppClusResource) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE CreateItem( 
            /* [in] */ __RPC__in BSTR bstrResourceName,
            /* [in] */ __RPC__in BSTR bstrResourceType,
            /* [in] */ CLUSTER_RESOURCE_CREATE_FLAGS dwFlags,
            /* [retval][out] */ __RPC__deref_out_opt ISClusResource **ppClusterResource) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE DeleteItem( 
            /* [in] */ VARIANT varIndex) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISClusResGroupResourcesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISClusResGroupResources * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISClusResGroupResources * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISClusResGroupResources * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ISClusResGroupResources * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ISClusResGroupResources * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ISClusResGroupResources * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISClusResGroupResources * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            __RPC__in ISClusResGroupResources * This,
            /* [retval][out] */ __RPC__out long *plCount);
        
        /* [helpstring][id][restricted][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            __RPC__in ISClusResGroupResources * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Refresh )( 
            __RPC__in ISClusResGroupResources * This);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Item )( 
            __RPC__in ISClusResGroupResources * This,
            /* [in] */ VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt ISClusResource **ppClusResource);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CreateItem )( 
            __RPC__in ISClusResGroupResources * This,
            /* [in] */ __RPC__in BSTR bstrResourceName,
            /* [in] */ __RPC__in BSTR bstrResourceType,
            /* [in] */ CLUSTER_RESOURCE_CREATE_FLAGS dwFlags,
            /* [retval][out] */ __RPC__deref_out_opt ISClusResource **ppClusterResource);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteItem )( 
            __RPC__in ISClusResGroupResources * This,
            /* [in] */ VARIANT varIndex);
        
        END_INTERFACE
    } ISClusResGroupResourcesVtbl;

    interface ISClusResGroupResources
    {
        CONST_VTBL struct ISClusResGroupResourcesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISClusResGroupResources_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISClusResGroupResources_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISClusResGroupResources_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISClusResGroupResources_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISClusResGroupResources_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISClusResGroupResources_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISClusResGroupResources_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISClusResGroupResources_get_Count(This,plCount)	\
    ( (This)->lpVtbl -> get_Count(This,plCount) ) 

#define ISClusResGroupResources_get__NewEnum(This,retval)	\
    ( (This)->lpVtbl -> get__NewEnum(This,retval) ) 

#define ISClusResGroupResources_Refresh(This)	\
    ( (This)->lpVtbl -> Refresh(This) ) 

#define ISClusResGroupResources_get_Item(This,varIndex,ppClusResource)	\
    ( (This)->lpVtbl -> get_Item(This,varIndex,ppClusResource) ) 

#define ISClusResGroupResources_CreateItem(This,bstrResourceName,bstrResourceType,dwFlags,ppClusterResource)	\
    ( (This)->lpVtbl -> CreateItem(This,bstrResourceName,bstrResourceType,dwFlags,ppClusterResource) ) 

#define ISClusResGroupResources_DeleteItem(This,varIndex)	\
    ( (This)->lpVtbl -> DeleteItem(This,varIndex) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISClusResGroupResources_INTERFACE_DEFINED__ */


#ifndef __ISClusResTypeResources_INTERFACE_DEFINED__
#define __ISClusResTypeResources_INTERFACE_DEFINED__

/* interface ISClusResTypeResources */
/* [unique][helpstring][dual][uuid][object][nonextensible][hidden][oleautomation] */ 


EXTERN_C const IID IID_ISClusResTypeResources;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f2e60714-2631-11d1-89f1-00a0c90d061e")
    ISClusResTypeResources : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ __RPC__out long *plCount) = 0;
        
        virtual /* [helpstring][id][restricted][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Refresh( void) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Item( 
            /* [in] */ VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt ISClusResource **ppClusResource) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE CreateItem( 
            /* [in] */ __RPC__in BSTR bstrResourceName,
            /* [in] */ __RPC__in BSTR bstrGroupName,
            /* [in] */ CLUSTER_RESOURCE_CREATE_FLAGS dwFlags,
            /* [retval][out] */ __RPC__deref_out_opt ISClusResource **ppClusterResource) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE DeleteItem( 
            /* [in] */ VARIANT varIndex) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISClusResTypeResourcesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISClusResTypeResources * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISClusResTypeResources * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISClusResTypeResources * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ISClusResTypeResources * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ISClusResTypeResources * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ISClusResTypeResources * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISClusResTypeResources * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            __RPC__in ISClusResTypeResources * This,
            /* [retval][out] */ __RPC__out long *plCount);
        
        /* [helpstring][id][restricted][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            __RPC__in ISClusResTypeResources * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Refresh )( 
            __RPC__in ISClusResTypeResources * This);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Item )( 
            __RPC__in ISClusResTypeResources * This,
            /* [in] */ VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt ISClusResource **ppClusResource);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CreateItem )( 
            __RPC__in ISClusResTypeResources * This,
            /* [in] */ __RPC__in BSTR bstrResourceName,
            /* [in] */ __RPC__in BSTR bstrGroupName,
            /* [in] */ CLUSTER_RESOURCE_CREATE_FLAGS dwFlags,
            /* [retval][out] */ __RPC__deref_out_opt ISClusResource **ppClusterResource);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteItem )( 
            __RPC__in ISClusResTypeResources * This,
            /* [in] */ VARIANT varIndex);
        
        END_INTERFACE
    } ISClusResTypeResourcesVtbl;

    interface ISClusResTypeResources
    {
        CONST_VTBL struct ISClusResTypeResourcesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISClusResTypeResources_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISClusResTypeResources_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISClusResTypeResources_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISClusResTypeResources_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISClusResTypeResources_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISClusResTypeResources_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISClusResTypeResources_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISClusResTypeResources_get_Count(This,plCount)	\
    ( (This)->lpVtbl -> get_Count(This,plCount) ) 

#define ISClusResTypeResources_get__NewEnum(This,retval)	\
    ( (This)->lpVtbl -> get__NewEnum(This,retval) ) 

#define ISClusResTypeResources_Refresh(This)	\
    ( (This)->lpVtbl -> Refresh(This) ) 

#define ISClusResTypeResources_get_Item(This,varIndex,ppClusResource)	\
    ( (This)->lpVtbl -> get_Item(This,varIndex,ppClusResource) ) 

#define ISClusResTypeResources_CreateItem(This,bstrResourceName,bstrGroupName,dwFlags,ppClusterResource)	\
    ( (This)->lpVtbl -> CreateItem(This,bstrResourceName,bstrGroupName,dwFlags,ppClusterResource) ) 

#define ISClusResTypeResources_DeleteItem(This,varIndex)	\
    ( (This)->lpVtbl -> DeleteItem(This,varIndex) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISClusResTypeResources_INTERFACE_DEFINED__ */


#ifndef __ISClusResources_INTERFACE_DEFINED__
#define __ISClusResources_INTERFACE_DEFINED__

/* interface ISClusResources */
/* [unique][helpstring][dual][uuid][object][nonextensible][hidden][oleautomation] */ 


EXTERN_C const IID IID_ISClusResources;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f2e6070c-2631-11d1-89f1-00a0c90d061e")
    ISClusResources : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ __RPC__out long *plCount) = 0;
        
        virtual /* [helpstring][id][restricted][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Refresh( void) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Item( 
            /* [in] */ VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt ISClusResource **ppClusResource) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE CreateItem( 
            /* [in] */ __RPC__in BSTR bstrResourceName,
            /* [in] */ __RPC__in BSTR bstrResourceType,
            /* [in] */ __RPC__in BSTR bstrGroupName,
            /* [in] */ CLUSTER_RESOURCE_CREATE_FLAGS dwFlags,
            /* [retval][out] */ __RPC__deref_out_opt ISClusResource **ppClusterResource) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE DeleteItem( 
            /* [in] */ VARIANT varIndex) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISClusResourcesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISClusResources * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISClusResources * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISClusResources * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ISClusResources * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ISClusResources * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ISClusResources * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISClusResources * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            __RPC__in ISClusResources * This,
            /* [retval][out] */ __RPC__out long *plCount);
        
        /* [helpstring][id][restricted][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            __RPC__in ISClusResources * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Refresh )( 
            __RPC__in ISClusResources * This);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Item )( 
            __RPC__in ISClusResources * This,
            /* [in] */ VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt ISClusResource **ppClusResource);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CreateItem )( 
            __RPC__in ISClusResources * This,
            /* [in] */ __RPC__in BSTR bstrResourceName,
            /* [in] */ __RPC__in BSTR bstrResourceType,
            /* [in] */ __RPC__in BSTR bstrGroupName,
            /* [in] */ CLUSTER_RESOURCE_CREATE_FLAGS dwFlags,
            /* [retval][out] */ __RPC__deref_out_opt ISClusResource **ppClusterResource);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteItem )( 
            __RPC__in ISClusResources * This,
            /* [in] */ VARIANT varIndex);
        
        END_INTERFACE
    } ISClusResourcesVtbl;

    interface ISClusResources
    {
        CONST_VTBL struct ISClusResourcesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISClusResources_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISClusResources_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISClusResources_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISClusResources_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISClusResources_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISClusResources_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISClusResources_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISClusResources_get_Count(This,plCount)	\
    ( (This)->lpVtbl -> get_Count(This,plCount) ) 

#define ISClusResources_get__NewEnum(This,retval)	\
    ( (This)->lpVtbl -> get__NewEnum(This,retval) ) 

#define ISClusResources_Refresh(This)	\
    ( (This)->lpVtbl -> Refresh(This) ) 

#define ISClusResources_get_Item(This,varIndex,ppClusResource)	\
    ( (This)->lpVtbl -> get_Item(This,varIndex,ppClusResource) ) 

#define ISClusResources_CreateItem(This,bstrResourceName,bstrResourceType,bstrGroupName,dwFlags,ppClusterResource)	\
    ( (This)->lpVtbl -> CreateItem(This,bstrResourceName,bstrResourceType,bstrGroupName,dwFlags,ppClusterResource) ) 

#define ISClusResources_DeleteItem(This,varIndex)	\
    ( (This)->lpVtbl -> DeleteItem(This,varIndex) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISClusResources_INTERFACE_DEFINED__ */


#ifndef __ISClusResGroupPreferredOwnerNodes_INTERFACE_DEFINED__
#define __ISClusResGroupPreferredOwnerNodes_INTERFACE_DEFINED__

/* interface ISClusResGroupPreferredOwnerNodes */
/* [unique][helpstring][dual][uuid][object][nonextensible][hidden][oleautomation] */ 


EXTERN_C const IID IID_ISClusResGroupPreferredOwnerNodes;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f2e606e8-2631-11d1-89f1-00a0c90d061e")
    ISClusResGroupPreferredOwnerNodes : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ __RPC__out long *plCount) = 0;
        
        virtual /* [helpstring][id][restricted][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Refresh( void) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Item( 
            /* [in] */ VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt ISClusNode **ppNode) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE InsertItem( 
            /* [in] */ __RPC__in_opt ISClusNode *pNode,
            /* [in] */ long nPosition) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RemoveItem( 
            /* [in] */ VARIANT varIndex) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Modified( 
            /* [retval][out] */ __RPC__out VARIANT *pvarModified) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SaveChanges( void) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddItem( 
            /* [in] */ __RPC__in_opt ISClusNode *pNode) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISClusResGroupPreferredOwnerNodesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISClusResGroupPreferredOwnerNodes * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISClusResGroupPreferredOwnerNodes * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISClusResGroupPreferredOwnerNodes * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ISClusResGroupPreferredOwnerNodes * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ISClusResGroupPreferredOwnerNodes * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ISClusResGroupPreferredOwnerNodes * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISClusResGroupPreferredOwnerNodes * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            __RPC__in ISClusResGroupPreferredOwnerNodes * This,
            /* [retval][out] */ __RPC__out long *plCount);
        
        /* [helpstring][id][restricted][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            __RPC__in ISClusResGroupPreferredOwnerNodes * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Refresh )( 
            __RPC__in ISClusResGroupPreferredOwnerNodes * This);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Item )( 
            __RPC__in ISClusResGroupPreferredOwnerNodes * This,
            /* [in] */ VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt ISClusNode **ppNode);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *InsertItem )( 
            __RPC__in ISClusResGroupPreferredOwnerNodes * This,
            /* [in] */ __RPC__in_opt ISClusNode *pNode,
            /* [in] */ long nPosition);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveItem )( 
            __RPC__in ISClusResGroupPreferredOwnerNodes * This,
            /* [in] */ VARIANT varIndex);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Modified )( 
            __RPC__in ISClusResGroupPreferredOwnerNodes * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarModified);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SaveChanges )( 
            __RPC__in ISClusResGroupPreferredOwnerNodes * This);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddItem )( 
            __RPC__in ISClusResGroupPreferredOwnerNodes * This,
            /* [in] */ __RPC__in_opt ISClusNode *pNode);
        
        END_INTERFACE
    } ISClusResGroupPreferredOwnerNodesVtbl;

    interface ISClusResGroupPreferredOwnerNodes
    {
        CONST_VTBL struct ISClusResGroupPreferredOwnerNodesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISClusResGroupPreferredOwnerNodes_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISClusResGroupPreferredOwnerNodes_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISClusResGroupPreferredOwnerNodes_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISClusResGroupPreferredOwnerNodes_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISClusResGroupPreferredOwnerNodes_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISClusResGroupPreferredOwnerNodes_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISClusResGroupPreferredOwnerNodes_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISClusResGroupPreferredOwnerNodes_get_Count(This,plCount)	\
    ( (This)->lpVtbl -> get_Count(This,plCount) ) 

#define ISClusResGroupPreferredOwnerNodes_get__NewEnum(This,retval)	\
    ( (This)->lpVtbl -> get__NewEnum(This,retval) ) 

#define ISClusResGroupPreferredOwnerNodes_Refresh(This)	\
    ( (This)->lpVtbl -> Refresh(This) ) 

#define ISClusResGroupPreferredOwnerNodes_get_Item(This,varIndex,ppNode)	\
    ( (This)->lpVtbl -> get_Item(This,varIndex,ppNode) ) 

#define ISClusResGroupPreferredOwnerNodes_InsertItem(This,pNode,nPosition)	\
    ( (This)->lpVtbl -> InsertItem(This,pNode,nPosition) ) 

#define ISClusResGroupPreferredOwnerNodes_RemoveItem(This,varIndex)	\
    ( (This)->lpVtbl -> RemoveItem(This,varIndex) ) 

#define ISClusResGroupPreferredOwnerNodes_get_Modified(This,pvarModified)	\
    ( (This)->lpVtbl -> get_Modified(This,pvarModified) ) 

#define ISClusResGroupPreferredOwnerNodes_SaveChanges(This)	\
    ( (This)->lpVtbl -> SaveChanges(This) ) 

#define ISClusResGroupPreferredOwnerNodes_AddItem(This,pNode)	\
    ( (This)->lpVtbl -> AddItem(This,pNode) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISClusResGroupPreferredOwnerNodes_INTERFACE_DEFINED__ */


#ifndef __ISClusResPossibleOwnerNodes_INTERFACE_DEFINED__
#define __ISClusResPossibleOwnerNodes_INTERFACE_DEFINED__

/* interface ISClusResPossibleOwnerNodes */
/* [unique][helpstring][dual][uuid][object][nonextensible][hidden][oleautomation] */ 


EXTERN_C const IID IID_ISClusResPossibleOwnerNodes;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f2e6070e-2631-11d1-89f1-00a0c90d061e")
    ISClusResPossibleOwnerNodes : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ __RPC__out long *plCount) = 0;
        
        virtual /* [helpstring][id][restricted][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Refresh( void) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Item( 
            /* [in] */ VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt ISClusNode **ppNode) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddItem( 
            /* [in] */ __RPC__in_opt ISClusNode *pNode) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RemoveItem( 
            /* [in] */ VARIANT varIndex) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Modified( 
            /* [retval][out] */ __RPC__out VARIANT *pvarModified) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISClusResPossibleOwnerNodesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISClusResPossibleOwnerNodes * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISClusResPossibleOwnerNodes * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISClusResPossibleOwnerNodes * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ISClusResPossibleOwnerNodes * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ISClusResPossibleOwnerNodes * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ISClusResPossibleOwnerNodes * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISClusResPossibleOwnerNodes * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            __RPC__in ISClusResPossibleOwnerNodes * This,
            /* [retval][out] */ __RPC__out long *plCount);
        
        /* [helpstring][id][restricted][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            __RPC__in ISClusResPossibleOwnerNodes * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Refresh )( 
            __RPC__in ISClusResPossibleOwnerNodes * This);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Item )( 
            __RPC__in ISClusResPossibleOwnerNodes * This,
            /* [in] */ VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt ISClusNode **ppNode);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddItem )( 
            __RPC__in ISClusResPossibleOwnerNodes * This,
            /* [in] */ __RPC__in_opt ISClusNode *pNode);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveItem )( 
            __RPC__in ISClusResPossibleOwnerNodes * This,
            /* [in] */ VARIANT varIndex);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Modified )( 
            __RPC__in ISClusResPossibleOwnerNodes * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarModified);
        
        END_INTERFACE
    } ISClusResPossibleOwnerNodesVtbl;

    interface ISClusResPossibleOwnerNodes
    {
        CONST_VTBL struct ISClusResPossibleOwnerNodesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISClusResPossibleOwnerNodes_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISClusResPossibleOwnerNodes_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISClusResPossibleOwnerNodes_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISClusResPossibleOwnerNodes_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISClusResPossibleOwnerNodes_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISClusResPossibleOwnerNodes_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISClusResPossibleOwnerNodes_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISClusResPossibleOwnerNodes_get_Count(This,plCount)	\
    ( (This)->lpVtbl -> get_Count(This,plCount) ) 

#define ISClusResPossibleOwnerNodes_get__NewEnum(This,retval)	\
    ( (This)->lpVtbl -> get__NewEnum(This,retval) ) 

#define ISClusResPossibleOwnerNodes_Refresh(This)	\
    ( (This)->lpVtbl -> Refresh(This) ) 

#define ISClusResPossibleOwnerNodes_get_Item(This,varIndex,ppNode)	\
    ( (This)->lpVtbl -> get_Item(This,varIndex,ppNode) ) 

#define ISClusResPossibleOwnerNodes_AddItem(This,pNode)	\
    ( (This)->lpVtbl -> AddItem(This,pNode) ) 

#define ISClusResPossibleOwnerNodes_RemoveItem(This,varIndex)	\
    ( (This)->lpVtbl -> RemoveItem(This,varIndex) ) 

#define ISClusResPossibleOwnerNodes_get_Modified(This,pvarModified)	\
    ( (This)->lpVtbl -> get_Modified(This,pvarModified) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISClusResPossibleOwnerNodes_INTERFACE_DEFINED__ */


#ifndef __ISClusResTypePossibleOwnerNodes_INTERFACE_DEFINED__
#define __ISClusResTypePossibleOwnerNodes_INTERFACE_DEFINED__

/* interface ISClusResTypePossibleOwnerNodes */
/* [unique][helpstring][dual][uuid][object][nonextensible][hidden][oleautomation] */ 


EXTERN_C const IID IID_ISClusResTypePossibleOwnerNodes;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f2e60718-2631-11d1-89f1-00a0c90d061e")
    ISClusResTypePossibleOwnerNodes : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ __RPC__out long *plCount) = 0;
        
        virtual /* [helpstring][id][restricted][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Refresh( void) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Item( 
            /* [in] */ VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt ISClusNode **ppNode) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISClusResTypePossibleOwnerNodesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISClusResTypePossibleOwnerNodes * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISClusResTypePossibleOwnerNodes * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISClusResTypePossibleOwnerNodes * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ISClusResTypePossibleOwnerNodes * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ISClusResTypePossibleOwnerNodes * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ISClusResTypePossibleOwnerNodes * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISClusResTypePossibleOwnerNodes * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            __RPC__in ISClusResTypePossibleOwnerNodes * This,
            /* [retval][out] */ __RPC__out long *plCount);
        
        /* [helpstring][id][restricted][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            __RPC__in ISClusResTypePossibleOwnerNodes * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Refresh )( 
            __RPC__in ISClusResTypePossibleOwnerNodes * This);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Item )( 
            __RPC__in ISClusResTypePossibleOwnerNodes * This,
            /* [in] */ VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt ISClusNode **ppNode);
        
        END_INTERFACE
    } ISClusResTypePossibleOwnerNodesVtbl;

    interface ISClusResTypePossibleOwnerNodes
    {
        CONST_VTBL struct ISClusResTypePossibleOwnerNodesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISClusResTypePossibleOwnerNodes_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISClusResTypePossibleOwnerNodes_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISClusResTypePossibleOwnerNodes_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISClusResTypePossibleOwnerNodes_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISClusResTypePossibleOwnerNodes_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISClusResTypePossibleOwnerNodes_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISClusResTypePossibleOwnerNodes_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISClusResTypePossibleOwnerNodes_get_Count(This,plCount)	\
    ( (This)->lpVtbl -> get_Count(This,plCount) ) 

#define ISClusResTypePossibleOwnerNodes_get__NewEnum(This,retval)	\
    ( (This)->lpVtbl -> get__NewEnum(This,retval) ) 

#define ISClusResTypePossibleOwnerNodes_Refresh(This)	\
    ( (This)->lpVtbl -> Refresh(This) ) 

#define ISClusResTypePossibleOwnerNodes_get_Item(This,varIndex,ppNode)	\
    ( (This)->lpVtbl -> get_Item(This,varIndex,ppNode) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISClusResTypePossibleOwnerNodes_INTERFACE_DEFINED__ */


#ifndef __ISClusResType_INTERFACE_DEFINED__
#define __ISClusResType_INTERFACE_DEFINED__

/* interface ISClusResType */
/* [unique][helpstring][dual][uuid][object][nonextensible][hidden][oleautomation] */ 


EXTERN_C const IID IID_ISClusResType;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f2e60710-2631-11d1-89f1-00a0c90d061e")
    ISClusResType : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CommonProperties( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PrivateProperties( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_CommonROProperties( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PrivateROProperties( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrName) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Delete( void) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Cluster( 
            /* [retval][out] */ __RPC__deref_out_opt ISCluster **ppCluster) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Resources( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusResTypeResources **ppClusterResTypeResources) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PossibleOwnerNodes( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusResTypePossibleOwnerNodes **ppOwnerNodes) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_AvailableDisks( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusDisks **ppAvailableDisks) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISClusResTypeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISClusResType * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISClusResType * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISClusResType * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ISClusResType * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ISClusResType * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ISClusResType * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISClusResType * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CommonProperties )( 
            __RPC__in ISClusResType * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PrivateProperties )( 
            __RPC__in ISClusResType * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CommonROProperties )( 
            __RPC__in ISClusResType * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PrivateROProperties )( 
            __RPC__in ISClusResType * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperties **ppProperties);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            __RPC__in ISClusResType * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrName);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Delete )( 
            __RPC__in ISClusResType * This);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Cluster )( 
            __RPC__in ISClusResType * This,
            /* [retval][out] */ __RPC__deref_out_opt ISCluster **ppCluster);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Resources )( 
            __RPC__in ISClusResType * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusResTypeResources **ppClusterResTypeResources);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PossibleOwnerNodes )( 
            __RPC__in ISClusResType * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusResTypePossibleOwnerNodes **ppOwnerNodes);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_AvailableDisks )( 
            __RPC__in ISClusResType * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusDisks **ppAvailableDisks);
        
        END_INTERFACE
    } ISClusResTypeVtbl;

    interface ISClusResType
    {
        CONST_VTBL struct ISClusResTypeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISClusResType_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISClusResType_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISClusResType_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISClusResType_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISClusResType_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISClusResType_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISClusResType_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISClusResType_get_CommonProperties(This,ppProperties)	\
    ( (This)->lpVtbl -> get_CommonProperties(This,ppProperties) ) 

#define ISClusResType_get_PrivateProperties(This,ppProperties)	\
    ( (This)->lpVtbl -> get_PrivateProperties(This,ppProperties) ) 

#define ISClusResType_get_CommonROProperties(This,ppProperties)	\
    ( (This)->lpVtbl -> get_CommonROProperties(This,ppProperties) ) 

#define ISClusResType_get_PrivateROProperties(This,ppProperties)	\
    ( (This)->lpVtbl -> get_PrivateROProperties(This,ppProperties) ) 

#define ISClusResType_get_Name(This,pbstrName)	\
    ( (This)->lpVtbl -> get_Name(This,pbstrName) ) 

#define ISClusResType_Delete(This)	\
    ( (This)->lpVtbl -> Delete(This) ) 

#define ISClusResType_get_Cluster(This,ppCluster)	\
    ( (This)->lpVtbl -> get_Cluster(This,ppCluster) ) 

#define ISClusResType_get_Resources(This,ppClusterResTypeResources)	\
    ( (This)->lpVtbl -> get_Resources(This,ppClusterResTypeResources) ) 

#define ISClusResType_get_PossibleOwnerNodes(This,ppOwnerNodes)	\
    ( (This)->lpVtbl -> get_PossibleOwnerNodes(This,ppOwnerNodes) ) 

#define ISClusResType_get_AvailableDisks(This,ppAvailableDisks)	\
    ( (This)->lpVtbl -> get_AvailableDisks(This,ppAvailableDisks) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISClusResType_INTERFACE_DEFINED__ */


#ifndef __ISClusResTypes_INTERFACE_DEFINED__
#define __ISClusResTypes_INTERFACE_DEFINED__

/* interface ISClusResTypes */
/* [unique][helpstring][dual][uuid][object][nonextensible][hidden][oleautomation] */ 


EXTERN_C const IID IID_ISClusResTypes;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f2e60712-2631-11d1-89f1-00a0c90d061e")
    ISClusResTypes : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ __RPC__out long *plCount) = 0;
        
        virtual /* [helpstring][id][restricted][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Refresh( void) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Item( 
            /* [in] */ VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt ISClusResType **ppClusResType) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE CreateItem( 
            /* [in] */ __RPC__in BSTR bstrResourceTypeName,
            /* [in] */ __RPC__in BSTR bstrDisplayName,
            /* [in] */ __RPC__in BSTR bstrResourceTypeDll,
            /* [in] */ long dwLooksAlivePollInterval,
            /* [in] */ long dwIsAlivePollInterval,
            /* [retval][out] */ __RPC__deref_out_opt ISClusResType **ppResourceType) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE DeleteItem( 
            /* [in] */ VARIANT varIndex) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISClusResTypesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISClusResTypes * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISClusResTypes * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISClusResTypes * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ISClusResTypes * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ISClusResTypes * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ISClusResTypes * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISClusResTypes * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            __RPC__in ISClusResTypes * This,
            /* [retval][out] */ __RPC__out long *plCount);
        
        /* [helpstring][id][restricted][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            __RPC__in ISClusResTypes * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Refresh )( 
            __RPC__in ISClusResTypes * This);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Item )( 
            __RPC__in ISClusResTypes * This,
            /* [in] */ VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt ISClusResType **ppClusResType);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CreateItem )( 
            __RPC__in ISClusResTypes * This,
            /* [in] */ __RPC__in BSTR bstrResourceTypeName,
            /* [in] */ __RPC__in BSTR bstrDisplayName,
            /* [in] */ __RPC__in BSTR bstrResourceTypeDll,
            /* [in] */ long dwLooksAlivePollInterval,
            /* [in] */ long dwIsAlivePollInterval,
            /* [retval][out] */ __RPC__deref_out_opt ISClusResType **ppResourceType);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteItem )( 
            __RPC__in ISClusResTypes * This,
            /* [in] */ VARIANT varIndex);
        
        END_INTERFACE
    } ISClusResTypesVtbl;

    interface ISClusResTypes
    {
        CONST_VTBL struct ISClusResTypesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISClusResTypes_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISClusResTypes_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISClusResTypes_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISClusResTypes_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISClusResTypes_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISClusResTypes_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISClusResTypes_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISClusResTypes_get_Count(This,plCount)	\
    ( (This)->lpVtbl -> get_Count(This,plCount) ) 

#define ISClusResTypes_get__NewEnum(This,retval)	\
    ( (This)->lpVtbl -> get__NewEnum(This,retval) ) 

#define ISClusResTypes_Refresh(This)	\
    ( (This)->lpVtbl -> Refresh(This) ) 

#define ISClusResTypes_get_Item(This,varIndex,ppClusResType)	\
    ( (This)->lpVtbl -> get_Item(This,varIndex,ppClusResType) ) 

#define ISClusResTypes_CreateItem(This,bstrResourceTypeName,bstrDisplayName,bstrResourceTypeDll,dwLooksAlivePollInterval,dwIsAlivePollInterval,ppResourceType)	\
    ( (This)->lpVtbl -> CreateItem(This,bstrResourceTypeName,bstrDisplayName,bstrResourceTypeDll,dwLooksAlivePollInterval,dwIsAlivePollInterval,ppResourceType) ) 

#define ISClusResTypes_DeleteItem(This,varIndex)	\
    ( (This)->lpVtbl -> DeleteItem(This,varIndex) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISClusResTypes_INTERFACE_DEFINED__ */


#ifndef __ISClusProperty_INTERFACE_DEFINED__
#define __ISClusProperty_INTERFACE_DEFINED__

/* interface ISClusProperty */
/* [unique][helpstring][dual][uuid][object][nonextensible][hidden][oleautomation] */ 


EXTERN_C const IID IID_ISClusProperty;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f2e606fe-2631-11d1-89f1-00a0c90d061e")
    ISClusProperty : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Name( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrName) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Length( 
            /* [retval][out] */ __RPC__out long *pLength) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ValueCount( 
            /* [retval][out] */ __RPC__out long *pCount) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Values( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusPropertyValues **ppClusterPropertyValues) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Value( 
            /* [retval][out] */ __RPC__out VARIANT *pvarValue) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Value( 
            /* [in] */ VARIANT varValue) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ __RPC__out CLUSTER_PROPERTY_TYPE *pType) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Type( 
            /* [in] */ CLUSTER_PROPERTY_TYPE Type) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Format( 
            /* [retval][out] */ __RPC__out CLUSTER_PROPERTY_FORMAT *pFormat) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Format( 
            /* [in] */ CLUSTER_PROPERTY_FORMAT Format) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ReadOnly( 
            /* [retval][out] */ __RPC__out VARIANT *pvarReadOnly) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Private( 
            /* [retval][out] */ __RPC__out VARIANT *pvarPrivate) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Common( 
            /* [retval][out] */ __RPC__out VARIANT *pvarCommon) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Modified( 
            /* [retval][out] */ __RPC__out VARIANT *pvarModified) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE UseDefaultValue( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISClusPropertyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISClusProperty * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISClusProperty * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISClusProperty * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ISClusProperty * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ISClusProperty * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ISClusProperty * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISClusProperty * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Name )( 
            __RPC__in ISClusProperty * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrName);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Length )( 
            __RPC__in ISClusProperty * This,
            /* [retval][out] */ __RPC__out long *pLength);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ValueCount )( 
            __RPC__in ISClusProperty * This,
            /* [retval][out] */ __RPC__out long *pCount);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Values )( 
            __RPC__in ISClusProperty * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusPropertyValues **ppClusterPropertyValues);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            __RPC__in ISClusProperty * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarValue);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Value )( 
            __RPC__in ISClusProperty * This,
            /* [in] */ VARIANT varValue);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            __RPC__in ISClusProperty * This,
            /* [retval][out] */ __RPC__out CLUSTER_PROPERTY_TYPE *pType);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Type )( 
            __RPC__in ISClusProperty * This,
            /* [in] */ CLUSTER_PROPERTY_TYPE Type);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Format )( 
            __RPC__in ISClusProperty * This,
            /* [retval][out] */ __RPC__out CLUSTER_PROPERTY_FORMAT *pFormat);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Format )( 
            __RPC__in ISClusProperty * This,
            /* [in] */ CLUSTER_PROPERTY_FORMAT Format);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadOnly )( 
            __RPC__in ISClusProperty * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarReadOnly);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Private )( 
            __RPC__in ISClusProperty * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarPrivate);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Common )( 
            __RPC__in ISClusProperty * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarCommon);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Modified )( 
            __RPC__in ISClusProperty * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarModified);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *UseDefaultValue )( 
            __RPC__in ISClusProperty * This);
        
        END_INTERFACE
    } ISClusPropertyVtbl;

    interface ISClusProperty
    {
        CONST_VTBL struct ISClusPropertyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISClusProperty_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISClusProperty_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISClusProperty_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISClusProperty_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISClusProperty_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISClusProperty_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISClusProperty_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISClusProperty_get_Name(This,pbstrName)	\
    ( (This)->lpVtbl -> get_Name(This,pbstrName) ) 

#define ISClusProperty_get_Length(This,pLength)	\
    ( (This)->lpVtbl -> get_Length(This,pLength) ) 

#define ISClusProperty_get_ValueCount(This,pCount)	\
    ( (This)->lpVtbl -> get_ValueCount(This,pCount) ) 

#define ISClusProperty_get_Values(This,ppClusterPropertyValues)	\
    ( (This)->lpVtbl -> get_Values(This,ppClusterPropertyValues) ) 

#define ISClusProperty_get_Value(This,pvarValue)	\
    ( (This)->lpVtbl -> get_Value(This,pvarValue) ) 

#define ISClusProperty_put_Value(This,varValue)	\
    ( (This)->lpVtbl -> put_Value(This,varValue) ) 

#define ISClusProperty_get_Type(This,pType)	\
    ( (This)->lpVtbl -> get_Type(This,pType) ) 

#define ISClusProperty_put_Type(This,Type)	\
    ( (This)->lpVtbl -> put_Type(This,Type) ) 

#define ISClusProperty_get_Format(This,pFormat)	\
    ( (This)->lpVtbl -> get_Format(This,pFormat) ) 

#define ISClusProperty_put_Format(This,Format)	\
    ( (This)->lpVtbl -> put_Format(This,Format) ) 

#define ISClusProperty_get_ReadOnly(This,pvarReadOnly)	\
    ( (This)->lpVtbl -> get_ReadOnly(This,pvarReadOnly) ) 

#define ISClusProperty_get_Private(This,pvarPrivate)	\
    ( (This)->lpVtbl -> get_Private(This,pvarPrivate) ) 

#define ISClusProperty_get_Common(This,pvarCommon)	\
    ( (This)->lpVtbl -> get_Common(This,pvarCommon) ) 

#define ISClusProperty_get_Modified(This,pvarModified)	\
    ( (This)->lpVtbl -> get_Modified(This,pvarModified) ) 

#define ISClusProperty_UseDefaultValue(This)	\
    ( (This)->lpVtbl -> UseDefaultValue(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISClusProperty_INTERFACE_DEFINED__ */


#ifndef __ISClusPropertyValue_INTERFACE_DEFINED__
#define __ISClusPropertyValue_INTERFACE_DEFINED__

/* interface ISClusPropertyValue */
/* [unique][helpstring][dual][uuid][object][nonextensible][hidden][oleautomation] */ 


EXTERN_C const IID IID_ISClusPropertyValue;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f2e6071a-2631-11d1-89f1-00a0c90d061e")
    ISClusPropertyValue : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Value( 
            /* [retval][out] */ __RPC__out VARIANT *pvarValue) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Value( 
            /* [in] */ VARIANT varValue) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Type( 
            /* [retval][out] */ __RPC__out CLUSTER_PROPERTY_TYPE *pType) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Type( 
            /* [in] */ CLUSTER_PROPERTY_TYPE Type) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Format( 
            /* [retval][out] */ __RPC__out CLUSTER_PROPERTY_FORMAT *pFormat) = 0;
        
        virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Format( 
            /* [in] */ CLUSTER_PROPERTY_FORMAT Format) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Length( 
            /* [retval][out] */ __RPC__out long *pLength) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_DataCount( 
            /* [retval][out] */ __RPC__out long *pCount) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Data( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusPropertyValueData **ppClusterPropertyValueData) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISClusPropertyValueVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISClusPropertyValue * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISClusPropertyValue * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISClusPropertyValue * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ISClusPropertyValue * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ISClusPropertyValue * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ISClusPropertyValue * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISClusPropertyValue * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Value )( 
            __RPC__in ISClusPropertyValue * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarValue);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Value )( 
            __RPC__in ISClusPropertyValue * This,
            /* [in] */ VARIANT varValue);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Type )( 
            __RPC__in ISClusPropertyValue * This,
            /* [retval][out] */ __RPC__out CLUSTER_PROPERTY_TYPE *pType);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Type )( 
            __RPC__in ISClusPropertyValue * This,
            /* [in] */ CLUSTER_PROPERTY_TYPE Type);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Format )( 
            __RPC__in ISClusPropertyValue * This,
            /* [retval][out] */ __RPC__out CLUSTER_PROPERTY_FORMAT *pFormat);
        
        /* [helpstring][id][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Format )( 
            __RPC__in ISClusPropertyValue * This,
            /* [in] */ CLUSTER_PROPERTY_FORMAT Format);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Length )( 
            __RPC__in ISClusPropertyValue * This,
            /* [retval][out] */ __RPC__out long *pLength);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DataCount )( 
            __RPC__in ISClusPropertyValue * This,
            /* [retval][out] */ __RPC__out long *pCount);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Data )( 
            __RPC__in ISClusPropertyValue * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusPropertyValueData **ppClusterPropertyValueData);
        
        END_INTERFACE
    } ISClusPropertyValueVtbl;

    interface ISClusPropertyValue
    {
        CONST_VTBL struct ISClusPropertyValueVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISClusPropertyValue_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISClusPropertyValue_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISClusPropertyValue_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISClusPropertyValue_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISClusPropertyValue_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISClusPropertyValue_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISClusPropertyValue_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISClusPropertyValue_get_Value(This,pvarValue)	\
    ( (This)->lpVtbl -> get_Value(This,pvarValue) ) 

#define ISClusPropertyValue_put_Value(This,varValue)	\
    ( (This)->lpVtbl -> put_Value(This,varValue) ) 

#define ISClusPropertyValue_get_Type(This,pType)	\
    ( (This)->lpVtbl -> get_Type(This,pType) ) 

#define ISClusPropertyValue_put_Type(This,Type)	\
    ( (This)->lpVtbl -> put_Type(This,Type) ) 

#define ISClusPropertyValue_get_Format(This,pFormat)	\
    ( (This)->lpVtbl -> get_Format(This,pFormat) ) 

#define ISClusPropertyValue_put_Format(This,Format)	\
    ( (This)->lpVtbl -> put_Format(This,Format) ) 

#define ISClusPropertyValue_get_Length(This,pLength)	\
    ( (This)->lpVtbl -> get_Length(This,pLength) ) 

#define ISClusPropertyValue_get_DataCount(This,pCount)	\
    ( (This)->lpVtbl -> get_DataCount(This,pCount) ) 

#define ISClusPropertyValue_get_Data(This,ppClusterPropertyValueData)	\
    ( (This)->lpVtbl -> get_Data(This,ppClusterPropertyValueData) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISClusPropertyValue_INTERFACE_DEFINED__ */


#ifndef __ISClusPropertyValues_INTERFACE_DEFINED__
#define __ISClusPropertyValues_INTERFACE_DEFINED__

/* interface ISClusPropertyValues */
/* [unique][helpstring][dual][uuid][object][nonextensible][hidden][oleautomation] */ 


EXTERN_C const IID IID_ISClusPropertyValues;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f2e6071c-2631-11d1-89f1-00a0c90d061e")
    ISClusPropertyValues : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ __RPC__out long *plCount) = 0;
        
        virtual /* [helpstring][id][restricted][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Item( 
            /* [in] */ VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt ISClusPropertyValue **ppPropertyValue) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE CreateItem( 
            /* [in] */ __RPC__in BSTR bstrName,
            /* [in] */ VARIANT varValue,
            /* [retval][out] */ __RPC__deref_out_opt ISClusPropertyValue **ppPropertyValue) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RemoveItem( 
            /* [in] */ VARIANT varIndex) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISClusPropertyValuesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISClusPropertyValues * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISClusPropertyValues * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISClusPropertyValues * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ISClusPropertyValues * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ISClusPropertyValues * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ISClusPropertyValues * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISClusPropertyValues * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            __RPC__in ISClusPropertyValues * This,
            /* [retval][out] */ __RPC__out long *plCount);
        
        /* [helpstring][id][restricted][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            __RPC__in ISClusPropertyValues * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Item )( 
            __RPC__in ISClusPropertyValues * This,
            /* [in] */ VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt ISClusPropertyValue **ppPropertyValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CreateItem )( 
            __RPC__in ISClusPropertyValues * This,
            /* [in] */ __RPC__in BSTR bstrName,
            /* [in] */ VARIANT varValue,
            /* [retval][out] */ __RPC__deref_out_opt ISClusPropertyValue **ppPropertyValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveItem )( 
            __RPC__in ISClusPropertyValues * This,
            /* [in] */ VARIANT varIndex);
        
        END_INTERFACE
    } ISClusPropertyValuesVtbl;

    interface ISClusPropertyValues
    {
        CONST_VTBL struct ISClusPropertyValuesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISClusPropertyValues_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISClusPropertyValues_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISClusPropertyValues_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISClusPropertyValues_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISClusPropertyValues_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISClusPropertyValues_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISClusPropertyValues_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISClusPropertyValues_get_Count(This,plCount)	\
    ( (This)->lpVtbl -> get_Count(This,plCount) ) 

#define ISClusPropertyValues_get__NewEnum(This,retval)	\
    ( (This)->lpVtbl -> get__NewEnum(This,retval) ) 

#define ISClusPropertyValues_get_Item(This,varIndex,ppPropertyValue)	\
    ( (This)->lpVtbl -> get_Item(This,varIndex,ppPropertyValue) ) 

#define ISClusPropertyValues_CreateItem(This,bstrName,varValue,ppPropertyValue)	\
    ( (This)->lpVtbl -> CreateItem(This,bstrName,varValue,ppPropertyValue) ) 

#define ISClusPropertyValues_RemoveItem(This,varIndex)	\
    ( (This)->lpVtbl -> RemoveItem(This,varIndex) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISClusPropertyValues_INTERFACE_DEFINED__ */


#ifndef __ISClusProperties_INTERFACE_DEFINED__
#define __ISClusProperties_INTERFACE_DEFINED__

/* interface ISClusProperties */
/* [unique][helpstring][dual][uuid][object][nonextensible][hidden][oleautomation] */ 


EXTERN_C const IID IID_ISClusProperties;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f2e60700-2631-11d1-89f1-00a0c90d061e")
    ISClusProperties : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ __RPC__out long *plCount) = 0;
        
        virtual /* [helpstring][id][restricted][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Refresh( void) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Item( 
            /* [in] */ VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperty **ppClusProperty) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE CreateItem( 
            /* [in] */ __RPC__in BSTR bstrName,
            /* [in] */ VARIANT varValue,
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperty **pProperty) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE UseDefaultValue( 
            /* [in] */ VARIANT varIndex) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE SaveChanges( 
            /* [defaultvalue][out] */ __RPC__out VARIANT *pvarStatusCode = 0) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ReadOnly( 
            /* [retval][out] */ __RPC__out VARIANT *pvarReadOnly) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Private( 
            /* [retval][out] */ __RPC__out VARIANT *pvarPrivate) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Common( 
            /* [retval][out] */ __RPC__out VARIANT *pvarCommon) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Modified( 
            /* [retval][out] */ __RPC__out VARIANT *pvarModified) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISClusPropertiesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISClusProperties * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISClusProperties * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISClusProperties * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ISClusProperties * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ISClusProperties * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ISClusProperties * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISClusProperties * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            __RPC__in ISClusProperties * This,
            /* [retval][out] */ __RPC__out long *plCount);
        
        /* [helpstring][id][restricted][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            __RPC__in ISClusProperties * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Refresh )( 
            __RPC__in ISClusProperties * This);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Item )( 
            __RPC__in ISClusProperties * This,
            /* [in] */ VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperty **ppClusProperty);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CreateItem )( 
            __RPC__in ISClusProperties * This,
            /* [in] */ __RPC__in BSTR bstrName,
            /* [in] */ VARIANT varValue,
            /* [retval][out] */ __RPC__deref_out_opt ISClusProperty **pProperty);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *UseDefaultValue )( 
            __RPC__in ISClusProperties * This,
            /* [in] */ VARIANT varIndex);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *SaveChanges )( 
            __RPC__in ISClusProperties * This,
            /* [defaultvalue][out] */ __RPC__out VARIANT *pvarStatusCode);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ReadOnly )( 
            __RPC__in ISClusProperties * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarReadOnly);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Private )( 
            __RPC__in ISClusProperties * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarPrivate);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Common )( 
            __RPC__in ISClusProperties * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarCommon);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Modified )( 
            __RPC__in ISClusProperties * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarModified);
        
        END_INTERFACE
    } ISClusPropertiesVtbl;

    interface ISClusProperties
    {
        CONST_VTBL struct ISClusPropertiesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISClusProperties_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISClusProperties_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISClusProperties_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISClusProperties_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISClusProperties_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISClusProperties_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISClusProperties_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISClusProperties_get_Count(This,plCount)	\
    ( (This)->lpVtbl -> get_Count(This,plCount) ) 

#define ISClusProperties_get__NewEnum(This,retval)	\
    ( (This)->lpVtbl -> get__NewEnum(This,retval) ) 

#define ISClusProperties_Refresh(This)	\
    ( (This)->lpVtbl -> Refresh(This) ) 

#define ISClusProperties_get_Item(This,varIndex,ppClusProperty)	\
    ( (This)->lpVtbl -> get_Item(This,varIndex,ppClusProperty) ) 

#define ISClusProperties_CreateItem(This,bstrName,varValue,pProperty)	\
    ( (This)->lpVtbl -> CreateItem(This,bstrName,varValue,pProperty) ) 

#define ISClusProperties_UseDefaultValue(This,varIndex)	\
    ( (This)->lpVtbl -> UseDefaultValue(This,varIndex) ) 

#define ISClusProperties_SaveChanges(This,pvarStatusCode)	\
    ( (This)->lpVtbl -> SaveChanges(This,pvarStatusCode) ) 

#define ISClusProperties_get_ReadOnly(This,pvarReadOnly)	\
    ( (This)->lpVtbl -> get_ReadOnly(This,pvarReadOnly) ) 

#define ISClusProperties_get_Private(This,pvarPrivate)	\
    ( (This)->lpVtbl -> get_Private(This,pvarPrivate) ) 

#define ISClusProperties_get_Common(This,pvarCommon)	\
    ( (This)->lpVtbl -> get_Common(This,pvarCommon) ) 

#define ISClusProperties_get_Modified(This,pvarModified)	\
    ( (This)->lpVtbl -> get_Modified(This,pvarModified) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISClusProperties_INTERFACE_DEFINED__ */


#ifndef __ISClusPropertyValueData_INTERFACE_DEFINED__
#define __ISClusPropertyValueData_INTERFACE_DEFINED__

/* interface ISClusPropertyValueData */
/* [unique][helpstring][dual][uuid][object][nonextensible][hidden][oleautomation] */ 


EXTERN_C const IID IID_ISClusPropertyValueData;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f2e6071e-2631-11d1-89f1-00a0c90d061e")
    ISClusPropertyValueData : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ __RPC__out long *plCount) = 0;
        
        virtual /* [helpstring][id][restricted][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Item( 
            /* [in] */ VARIANT varIndex,
            /* [retval][out] */ __RPC__out VARIANT *pvarValue) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE CreateItem( 
            /* [in] */ VARIANT varValue,
            /* [retval][out] */ __RPC__out VARIANT *pvarData) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RemoveItem( 
            /* [in] */ VARIANT varIndex) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISClusPropertyValueDataVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISClusPropertyValueData * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISClusPropertyValueData * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISClusPropertyValueData * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ISClusPropertyValueData * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ISClusPropertyValueData * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ISClusPropertyValueData * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISClusPropertyValueData * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            __RPC__in ISClusPropertyValueData * This,
            /* [retval][out] */ __RPC__out long *plCount);
        
        /* [helpstring][id][restricted][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            __RPC__in ISClusPropertyValueData * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Item )( 
            __RPC__in ISClusPropertyValueData * This,
            /* [in] */ VARIANT varIndex,
            /* [retval][out] */ __RPC__out VARIANT *pvarValue);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CreateItem )( 
            __RPC__in ISClusPropertyValueData * This,
            /* [in] */ VARIANT varValue,
            /* [retval][out] */ __RPC__out VARIANT *pvarData);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveItem )( 
            __RPC__in ISClusPropertyValueData * This,
            /* [in] */ VARIANT varIndex);
        
        END_INTERFACE
    } ISClusPropertyValueDataVtbl;

    interface ISClusPropertyValueData
    {
        CONST_VTBL struct ISClusPropertyValueDataVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISClusPropertyValueData_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISClusPropertyValueData_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISClusPropertyValueData_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISClusPropertyValueData_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISClusPropertyValueData_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISClusPropertyValueData_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISClusPropertyValueData_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISClusPropertyValueData_get_Count(This,plCount)	\
    ( (This)->lpVtbl -> get_Count(This,plCount) ) 

#define ISClusPropertyValueData_get__NewEnum(This,retval)	\
    ( (This)->lpVtbl -> get__NewEnum(This,retval) ) 

#define ISClusPropertyValueData_get_Item(This,varIndex,pvarValue)	\
    ( (This)->lpVtbl -> get_Item(This,varIndex,pvarValue) ) 

#define ISClusPropertyValueData_CreateItem(This,varValue,pvarData)	\
    ( (This)->lpVtbl -> CreateItem(This,varValue,pvarData) ) 

#define ISClusPropertyValueData_RemoveItem(This,varIndex)	\
    ( (This)->lpVtbl -> RemoveItem(This,varIndex) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISClusPropertyValueData_INTERFACE_DEFINED__ */


#ifndef __ISClusPartition_INTERFACE_DEFINED__
#define __ISClusPartition_INTERFACE_DEFINED__

/* interface ISClusPartition */
/* [unique][helpstring][dual][uuid][object][nonextensible][hidden][oleautomation] */ 


EXTERN_C const IID IID_ISClusPartition;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f2e60720-2631-11d1-89f1-00a0c90d061e")
    ISClusPartition : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Flags( 
            /* [retval][out] */ __RPC__out long *plFlags) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_DeviceName( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrDeviceName) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_VolumeLabel( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrVolumeLabel) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_SerialNumber( 
            /* [retval][out] */ __RPC__out long *plSerialNumber) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_MaximumComponentLength( 
            /* [retval][out] */ __RPC__out long *plMaximumComponentLength) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_FileSystemFlags( 
            /* [retval][out] */ __RPC__out long *plFileSystemFlags) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_FileSystem( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrFileSystem) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISClusPartitionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISClusPartition * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISClusPartition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISClusPartition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ISClusPartition * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ISClusPartition * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ISClusPartition * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISClusPartition * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Flags )( 
            __RPC__in ISClusPartition * This,
            /* [retval][out] */ __RPC__out long *plFlags);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DeviceName )( 
            __RPC__in ISClusPartition * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrDeviceName);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_VolumeLabel )( 
            __RPC__in ISClusPartition * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrVolumeLabel);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SerialNumber )( 
            __RPC__in ISClusPartition * This,
            /* [retval][out] */ __RPC__out long *plSerialNumber);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MaximumComponentLength )( 
            __RPC__in ISClusPartition * This,
            /* [retval][out] */ __RPC__out long *plMaximumComponentLength);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FileSystemFlags )( 
            __RPC__in ISClusPartition * This,
            /* [retval][out] */ __RPC__out long *plFileSystemFlags);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FileSystem )( 
            __RPC__in ISClusPartition * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrFileSystem);
        
        END_INTERFACE
    } ISClusPartitionVtbl;

    interface ISClusPartition
    {
        CONST_VTBL struct ISClusPartitionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISClusPartition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISClusPartition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISClusPartition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISClusPartition_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISClusPartition_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISClusPartition_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISClusPartition_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISClusPartition_get_Flags(This,plFlags)	\
    ( (This)->lpVtbl -> get_Flags(This,plFlags) ) 

#define ISClusPartition_get_DeviceName(This,pbstrDeviceName)	\
    ( (This)->lpVtbl -> get_DeviceName(This,pbstrDeviceName) ) 

#define ISClusPartition_get_VolumeLabel(This,pbstrVolumeLabel)	\
    ( (This)->lpVtbl -> get_VolumeLabel(This,pbstrVolumeLabel) ) 

#define ISClusPartition_get_SerialNumber(This,plSerialNumber)	\
    ( (This)->lpVtbl -> get_SerialNumber(This,plSerialNumber) ) 

#define ISClusPartition_get_MaximumComponentLength(This,plMaximumComponentLength)	\
    ( (This)->lpVtbl -> get_MaximumComponentLength(This,plMaximumComponentLength) ) 

#define ISClusPartition_get_FileSystemFlags(This,plFileSystemFlags)	\
    ( (This)->lpVtbl -> get_FileSystemFlags(This,plFileSystemFlags) ) 

#define ISClusPartition_get_FileSystem(This,pbstrFileSystem)	\
    ( (This)->lpVtbl -> get_FileSystem(This,pbstrFileSystem) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISClusPartition_INTERFACE_DEFINED__ */


#ifndef __ISClusPartitionEx_INTERFACE_DEFINED__
#define __ISClusPartitionEx_INTERFACE_DEFINED__

/* interface ISClusPartitionEx */
/* [unique][helpstring][dual][uuid][object][nonextensible][hidden][oleautomation] */ 


EXTERN_C const IID IID_ISClusPartitionEx;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8802d4fe-b32e-4ad1-9dbd-64f18e1166ce")
    ISClusPartitionEx : public ISClusPartition
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_TotalSize( 
            /* [retval][out] */ __RPC__out long *plTotalSize) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_FreeSpace( 
            /* [retval][out] */ __RPC__out long *plFreeSpace) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_DeviceNumber( 
            /* [retval][out] */ __RPC__out long *plDeviceNumber) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PartitionNumber( 
            /* [retval][out] */ __RPC__out long *plPartitionNumber) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_VolumeGuid( 
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrVolumeGuid) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISClusPartitionExVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISClusPartitionEx * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISClusPartitionEx * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISClusPartitionEx * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ISClusPartitionEx * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ISClusPartitionEx * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ISClusPartitionEx * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISClusPartitionEx * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Flags )( 
            __RPC__in ISClusPartitionEx * This,
            /* [retval][out] */ __RPC__out long *plFlags);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DeviceName )( 
            __RPC__in ISClusPartitionEx * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrDeviceName);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_VolumeLabel )( 
            __RPC__in ISClusPartitionEx * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrVolumeLabel);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SerialNumber )( 
            __RPC__in ISClusPartitionEx * This,
            /* [retval][out] */ __RPC__out long *plSerialNumber);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MaximumComponentLength )( 
            __RPC__in ISClusPartitionEx * This,
            /* [retval][out] */ __RPC__out long *plMaximumComponentLength);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FileSystemFlags )( 
            __RPC__in ISClusPartitionEx * This,
            /* [retval][out] */ __RPC__out long *plFileSystemFlags);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FileSystem )( 
            __RPC__in ISClusPartitionEx * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrFileSystem);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TotalSize )( 
            __RPC__in ISClusPartitionEx * This,
            /* [retval][out] */ __RPC__out long *plTotalSize);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_FreeSpace )( 
            __RPC__in ISClusPartitionEx * This,
            /* [retval][out] */ __RPC__out long *plFreeSpace);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DeviceNumber )( 
            __RPC__in ISClusPartitionEx * This,
            /* [retval][out] */ __RPC__out long *plDeviceNumber);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PartitionNumber )( 
            __RPC__in ISClusPartitionEx * This,
            /* [retval][out] */ __RPC__out long *plPartitionNumber);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_VolumeGuid )( 
            __RPC__in ISClusPartitionEx * This,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrVolumeGuid);
        
        END_INTERFACE
    } ISClusPartitionExVtbl;

    interface ISClusPartitionEx
    {
        CONST_VTBL struct ISClusPartitionExVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISClusPartitionEx_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISClusPartitionEx_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISClusPartitionEx_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISClusPartitionEx_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISClusPartitionEx_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISClusPartitionEx_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISClusPartitionEx_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISClusPartitionEx_get_Flags(This,plFlags)	\
    ( (This)->lpVtbl -> get_Flags(This,plFlags) ) 

#define ISClusPartitionEx_get_DeviceName(This,pbstrDeviceName)	\
    ( (This)->lpVtbl -> get_DeviceName(This,pbstrDeviceName) ) 

#define ISClusPartitionEx_get_VolumeLabel(This,pbstrVolumeLabel)	\
    ( (This)->lpVtbl -> get_VolumeLabel(This,pbstrVolumeLabel) ) 

#define ISClusPartitionEx_get_SerialNumber(This,plSerialNumber)	\
    ( (This)->lpVtbl -> get_SerialNumber(This,plSerialNumber) ) 

#define ISClusPartitionEx_get_MaximumComponentLength(This,plMaximumComponentLength)	\
    ( (This)->lpVtbl -> get_MaximumComponentLength(This,plMaximumComponentLength) ) 

#define ISClusPartitionEx_get_FileSystemFlags(This,plFileSystemFlags)	\
    ( (This)->lpVtbl -> get_FileSystemFlags(This,plFileSystemFlags) ) 

#define ISClusPartitionEx_get_FileSystem(This,pbstrFileSystem)	\
    ( (This)->lpVtbl -> get_FileSystem(This,pbstrFileSystem) ) 


#define ISClusPartitionEx_get_TotalSize(This,plTotalSize)	\
    ( (This)->lpVtbl -> get_TotalSize(This,plTotalSize) ) 

#define ISClusPartitionEx_get_FreeSpace(This,plFreeSpace)	\
    ( (This)->lpVtbl -> get_FreeSpace(This,plFreeSpace) ) 

#define ISClusPartitionEx_get_DeviceNumber(This,plDeviceNumber)	\
    ( (This)->lpVtbl -> get_DeviceNumber(This,plDeviceNumber) ) 

#define ISClusPartitionEx_get_PartitionNumber(This,plPartitionNumber)	\
    ( (This)->lpVtbl -> get_PartitionNumber(This,plPartitionNumber) ) 

#define ISClusPartitionEx_get_VolumeGuid(This,pbstrVolumeGuid)	\
    ( (This)->lpVtbl -> get_VolumeGuid(This,pbstrVolumeGuid) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISClusPartitionEx_INTERFACE_DEFINED__ */


#ifndef __ISClusPartitions_INTERFACE_DEFINED__
#define __ISClusPartitions_INTERFACE_DEFINED__

/* interface ISClusPartitions */
/* [unique][helpstring][dual][uuid][object][nonextensible][hidden][oleautomation] */ 


EXTERN_C const IID IID_ISClusPartitions;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f2e60722-2631-11d1-89f1-00a0c90d061e")
    ISClusPartitions : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ __RPC__out long *plCount) = 0;
        
        virtual /* [helpstring][id][restricted][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Item( 
            /* [in] */ VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt ISClusPartition **ppPartition) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISClusPartitionsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISClusPartitions * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISClusPartitions * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISClusPartitions * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ISClusPartitions * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ISClusPartitions * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ISClusPartitions * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISClusPartitions * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            __RPC__in ISClusPartitions * This,
            /* [retval][out] */ __RPC__out long *plCount);
        
        /* [helpstring][id][restricted][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            __RPC__in ISClusPartitions * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Item )( 
            __RPC__in ISClusPartitions * This,
            /* [in] */ VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt ISClusPartition **ppPartition);
        
        END_INTERFACE
    } ISClusPartitionsVtbl;

    interface ISClusPartitions
    {
        CONST_VTBL struct ISClusPartitionsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISClusPartitions_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISClusPartitions_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISClusPartitions_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISClusPartitions_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISClusPartitions_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISClusPartitions_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISClusPartitions_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISClusPartitions_get_Count(This,plCount)	\
    ( (This)->lpVtbl -> get_Count(This,plCount) ) 

#define ISClusPartitions_get__NewEnum(This,retval)	\
    ( (This)->lpVtbl -> get__NewEnum(This,retval) ) 

#define ISClusPartitions_get_Item(This,varIndex,ppPartition)	\
    ( (This)->lpVtbl -> get_Item(This,varIndex,ppPartition) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISClusPartitions_INTERFACE_DEFINED__ */


#ifndef __ISClusDisk_INTERFACE_DEFINED__
#define __ISClusDisk_INTERFACE_DEFINED__

/* interface ISClusDisk */
/* [unique][helpstring][dual][uuid][object][nonextensible][hidden][oleautomation] */ 


EXTERN_C const IID IID_ISClusDisk;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f2e60724-2631-11d1-89f1-00a0c90d061e")
    ISClusDisk : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Signature( 
            /* [retval][out] */ __RPC__out long *plSignature) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ScsiAddress( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusScsiAddress **ppScsiAddress) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_DiskNumber( 
            /* [retval][out] */ __RPC__out long *plDiskNumber) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Partitions( 
            /* [retval][out] */ __RPC__deref_out_opt ISClusPartitions **ppPartitions) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISClusDiskVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISClusDisk * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISClusDisk * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISClusDisk * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ISClusDisk * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ISClusDisk * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ISClusDisk * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISClusDisk * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Signature )( 
            __RPC__in ISClusDisk * This,
            /* [retval][out] */ __RPC__out long *plSignature);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ScsiAddress )( 
            __RPC__in ISClusDisk * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusScsiAddress **ppScsiAddress);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DiskNumber )( 
            __RPC__in ISClusDisk * This,
            /* [retval][out] */ __RPC__out long *plDiskNumber);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Partitions )( 
            __RPC__in ISClusDisk * This,
            /* [retval][out] */ __RPC__deref_out_opt ISClusPartitions **ppPartitions);
        
        END_INTERFACE
    } ISClusDiskVtbl;

    interface ISClusDisk
    {
        CONST_VTBL struct ISClusDiskVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISClusDisk_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISClusDisk_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISClusDisk_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISClusDisk_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISClusDisk_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISClusDisk_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISClusDisk_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISClusDisk_get_Signature(This,plSignature)	\
    ( (This)->lpVtbl -> get_Signature(This,plSignature) ) 

#define ISClusDisk_get_ScsiAddress(This,ppScsiAddress)	\
    ( (This)->lpVtbl -> get_ScsiAddress(This,ppScsiAddress) ) 

#define ISClusDisk_get_DiskNumber(This,plDiskNumber)	\
    ( (This)->lpVtbl -> get_DiskNumber(This,plDiskNumber) ) 

#define ISClusDisk_get_Partitions(This,ppPartitions)	\
    ( (This)->lpVtbl -> get_Partitions(This,ppPartitions) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISClusDisk_INTERFACE_DEFINED__ */


#ifndef __ISClusDisks_INTERFACE_DEFINED__
#define __ISClusDisks_INTERFACE_DEFINED__

/* interface ISClusDisks */
/* [unique][helpstring][dual][uuid][object][nonextensible][hidden][oleautomation] */ 


EXTERN_C const IID IID_ISClusDisks;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f2e60726-2631-11d1-89f1-00a0c90d061e")
    ISClusDisks : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ __RPC__out long *plCount) = 0;
        
        virtual /* [helpstring][id][restricted][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Item( 
            /* [in] */ VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt ISClusDisk **ppDisk) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISClusDisksVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISClusDisks * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISClusDisks * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISClusDisks * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ISClusDisks * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ISClusDisks * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ISClusDisks * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISClusDisks * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            __RPC__in ISClusDisks * This,
            /* [retval][out] */ __RPC__out long *plCount);
        
        /* [helpstring][id][restricted][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            __RPC__in ISClusDisks * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Item )( 
            __RPC__in ISClusDisks * This,
            /* [in] */ VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt ISClusDisk **ppDisk);
        
        END_INTERFACE
    } ISClusDisksVtbl;

    interface ISClusDisks
    {
        CONST_VTBL struct ISClusDisksVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISClusDisks_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISClusDisks_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISClusDisks_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISClusDisks_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISClusDisks_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISClusDisks_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISClusDisks_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISClusDisks_get_Count(This,plCount)	\
    ( (This)->lpVtbl -> get_Count(This,plCount) ) 

#define ISClusDisks_get__NewEnum(This,retval)	\
    ( (This)->lpVtbl -> get__NewEnum(This,retval) ) 

#define ISClusDisks_get_Item(This,varIndex,ppDisk)	\
    ( (This)->lpVtbl -> get_Item(This,varIndex,ppDisk) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISClusDisks_INTERFACE_DEFINED__ */


#ifndef __ISClusScsiAddress_INTERFACE_DEFINED__
#define __ISClusScsiAddress_INTERFACE_DEFINED__

/* interface ISClusScsiAddress */
/* [unique][helpstring][dual][uuid][object][nonextensible][hidden][oleautomation] */ 


EXTERN_C const IID IID_ISClusScsiAddress;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f2e60728-2631-11d1-89f1-00a0c90d061e")
    ISClusScsiAddress : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PortNumber( 
            /* [retval][out] */ __RPC__out VARIANT *pvarPortNumber) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_PathId( 
            /* [retval][out] */ __RPC__out VARIANT *pvarPathId) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_TargetId( 
            /* [retval][out] */ __RPC__out VARIANT *pvarTargetId) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Lun( 
            /* [retval][out] */ __RPC__out VARIANT *pvarLun) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISClusScsiAddressVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISClusScsiAddress * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISClusScsiAddress * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISClusScsiAddress * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ISClusScsiAddress * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ISClusScsiAddress * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ISClusScsiAddress * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISClusScsiAddress * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PortNumber )( 
            __RPC__in ISClusScsiAddress * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarPortNumber);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PathId )( 
            __RPC__in ISClusScsiAddress * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarPathId);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TargetId )( 
            __RPC__in ISClusScsiAddress * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarTargetId);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Lun )( 
            __RPC__in ISClusScsiAddress * This,
            /* [retval][out] */ __RPC__out VARIANT *pvarLun);
        
        END_INTERFACE
    } ISClusScsiAddressVtbl;

    interface ISClusScsiAddress
    {
        CONST_VTBL struct ISClusScsiAddressVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISClusScsiAddress_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISClusScsiAddress_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISClusScsiAddress_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISClusScsiAddress_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISClusScsiAddress_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISClusScsiAddress_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISClusScsiAddress_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISClusScsiAddress_get_PortNumber(This,pvarPortNumber)	\
    ( (This)->lpVtbl -> get_PortNumber(This,pvarPortNumber) ) 

#define ISClusScsiAddress_get_PathId(This,pvarPathId)	\
    ( (This)->lpVtbl -> get_PathId(This,pvarPathId) ) 

#define ISClusScsiAddress_get_TargetId(This,pvarTargetId)	\
    ( (This)->lpVtbl -> get_TargetId(This,pvarTargetId) ) 

#define ISClusScsiAddress_get_Lun(This,pvarLun)	\
    ( (This)->lpVtbl -> get_Lun(This,pvarLun) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISClusScsiAddress_INTERFACE_DEFINED__ */


#ifndef __ISClusRegistryKeys_INTERFACE_DEFINED__
#define __ISClusRegistryKeys_INTERFACE_DEFINED__

/* interface ISClusRegistryKeys */
/* [unique][helpstring][dual][uuid][object][nonextensible][hidden][oleautomation] */ 


EXTERN_C const IID IID_ISClusRegistryKeys;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f2e6072a-2631-11d1-89f1-00a0c90d061e")
    ISClusRegistryKeys : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ __RPC__out long *plCount) = 0;
        
        virtual /* [helpstring][id][restricted][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Refresh( void) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Item( 
            /* [in] */ VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrRegistryKey) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddItem( 
            /* [in] */ __RPC__in BSTR bstrRegistryKey) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RemoveItem( 
            /* [in] */ VARIANT varIndex) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISClusRegistryKeysVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISClusRegistryKeys * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISClusRegistryKeys * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISClusRegistryKeys * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ISClusRegistryKeys * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ISClusRegistryKeys * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ISClusRegistryKeys * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISClusRegistryKeys * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            __RPC__in ISClusRegistryKeys * This,
            /* [retval][out] */ __RPC__out long *plCount);
        
        /* [helpstring][id][restricted][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            __RPC__in ISClusRegistryKeys * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Refresh )( 
            __RPC__in ISClusRegistryKeys * This);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Item )( 
            __RPC__in ISClusRegistryKeys * This,
            /* [in] */ VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrRegistryKey);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddItem )( 
            __RPC__in ISClusRegistryKeys * This,
            /* [in] */ __RPC__in BSTR bstrRegistryKey);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveItem )( 
            __RPC__in ISClusRegistryKeys * This,
            /* [in] */ VARIANT varIndex);
        
        END_INTERFACE
    } ISClusRegistryKeysVtbl;

    interface ISClusRegistryKeys
    {
        CONST_VTBL struct ISClusRegistryKeysVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISClusRegistryKeys_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISClusRegistryKeys_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISClusRegistryKeys_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISClusRegistryKeys_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISClusRegistryKeys_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISClusRegistryKeys_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISClusRegistryKeys_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISClusRegistryKeys_get_Count(This,plCount)	\
    ( (This)->lpVtbl -> get_Count(This,plCount) ) 

#define ISClusRegistryKeys_get__NewEnum(This,retval)	\
    ( (This)->lpVtbl -> get__NewEnum(This,retval) ) 

#define ISClusRegistryKeys_Refresh(This)	\
    ( (This)->lpVtbl -> Refresh(This) ) 

#define ISClusRegistryKeys_get_Item(This,varIndex,pbstrRegistryKey)	\
    ( (This)->lpVtbl -> get_Item(This,varIndex,pbstrRegistryKey) ) 

#define ISClusRegistryKeys_AddItem(This,bstrRegistryKey)	\
    ( (This)->lpVtbl -> AddItem(This,bstrRegistryKey) ) 

#define ISClusRegistryKeys_RemoveItem(This,varIndex)	\
    ( (This)->lpVtbl -> RemoveItem(This,varIndex) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISClusRegistryKeys_INTERFACE_DEFINED__ */


#ifndef __ISClusCryptoKeys_INTERFACE_DEFINED__
#define __ISClusCryptoKeys_INTERFACE_DEFINED__

/* interface ISClusCryptoKeys */
/* [unique][helpstring][dual][uuid][object][nonextensible][hidden][oleautomation] */ 


EXTERN_C const IID IID_ISClusCryptoKeys;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f2e6072c-2631-11d1-89f1-00a0c90d061e")
    ISClusCryptoKeys : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ __RPC__out long *plCount) = 0;
        
        virtual /* [helpstring][id][restricted][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Refresh( void) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Item( 
            /* [in] */ VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrCyrptoKey) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddItem( 
            /* [in] */ __RPC__in BSTR bstrCryptoKey) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RemoveItem( 
            /* [in] */ VARIANT varIndex) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISClusCryptoKeysVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISClusCryptoKeys * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISClusCryptoKeys * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISClusCryptoKeys * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ISClusCryptoKeys * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ISClusCryptoKeys * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ISClusCryptoKeys * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISClusCryptoKeys * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            __RPC__in ISClusCryptoKeys * This,
            /* [retval][out] */ __RPC__out long *plCount);
        
        /* [helpstring][id][restricted][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            __RPC__in ISClusCryptoKeys * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Refresh )( 
            __RPC__in ISClusCryptoKeys * This);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Item )( 
            __RPC__in ISClusCryptoKeys * This,
            /* [in] */ VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt BSTR *pbstrCyrptoKey);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddItem )( 
            __RPC__in ISClusCryptoKeys * This,
            /* [in] */ __RPC__in BSTR bstrCryptoKey);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveItem )( 
            __RPC__in ISClusCryptoKeys * This,
            /* [in] */ VARIANT varIndex);
        
        END_INTERFACE
    } ISClusCryptoKeysVtbl;

    interface ISClusCryptoKeys
    {
        CONST_VTBL struct ISClusCryptoKeysVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISClusCryptoKeys_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISClusCryptoKeys_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISClusCryptoKeys_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISClusCryptoKeys_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISClusCryptoKeys_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISClusCryptoKeys_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISClusCryptoKeys_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISClusCryptoKeys_get_Count(This,plCount)	\
    ( (This)->lpVtbl -> get_Count(This,plCount) ) 

#define ISClusCryptoKeys_get__NewEnum(This,retval)	\
    ( (This)->lpVtbl -> get__NewEnum(This,retval) ) 

#define ISClusCryptoKeys_Refresh(This)	\
    ( (This)->lpVtbl -> Refresh(This) ) 

#define ISClusCryptoKeys_get_Item(This,varIndex,pbstrCyrptoKey)	\
    ( (This)->lpVtbl -> get_Item(This,varIndex,pbstrCyrptoKey) ) 

#define ISClusCryptoKeys_AddItem(This,bstrCryptoKey)	\
    ( (This)->lpVtbl -> AddItem(This,bstrCryptoKey) ) 

#define ISClusCryptoKeys_RemoveItem(This,varIndex)	\
    ( (This)->lpVtbl -> RemoveItem(This,varIndex) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISClusCryptoKeys_INTERFACE_DEFINED__ */


#ifndef __ISClusResDependents_INTERFACE_DEFINED__
#define __ISClusResDependents_INTERFACE_DEFINED__

/* interface ISClusResDependents */
/* [unique][helpstring][dual][uuid][object][nonextensible][hidden][oleautomation] */ 


EXTERN_C const IID IID_ISClusResDependents;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f2e6072e-2631-11d1-89f1-00a0c90d061e")
    ISClusResDependents : public IDispatch
    {
    public:
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Count( 
            /* [retval][out] */ __RPC__out long *plCount) = 0;
        
        virtual /* [helpstring][id][restricted][propget] */ HRESULT STDMETHODCALLTYPE get__NewEnum( 
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Refresh( void) = 0;
        
        virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Item( 
            /* [in] */ VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt ISClusResource **ppClusResource) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE CreateItem( 
            /* [in] */ __RPC__in BSTR bstrResourceName,
            /* [in] */ __RPC__in BSTR bstrResourceType,
            /* [in] */ CLUSTER_RESOURCE_CREATE_FLAGS dwFlags,
            /* [retval][out] */ __RPC__deref_out_opt ISClusResource **ppClusterResource) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE DeleteItem( 
            /* [in] */ VARIANT varIndex) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddItem( 
            /* [in] */ __RPC__in_opt ISClusResource *pResource) = 0;
        
        virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RemoveItem( 
            /* [in] */ VARIANT varIndex) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISClusResDependentsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISClusResDependents * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISClusResDependents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISClusResDependents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in ISClusResDependents * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in ISClusResDependents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in ISClusResDependents * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            ISClusResDependents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Count )( 
            __RPC__in ISClusResDependents * This,
            /* [retval][out] */ __RPC__out long *plCount);
        
        /* [helpstring][id][restricted][propget] */ HRESULT ( STDMETHODCALLTYPE *get__NewEnum )( 
            __RPC__in ISClusResDependents * This,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **retval);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *Refresh )( 
            __RPC__in ISClusResDependents * This);
        
        /* [helpstring][id][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Item )( 
            __RPC__in ISClusResDependents * This,
            /* [in] */ VARIANT varIndex,
            /* [retval][out] */ __RPC__deref_out_opt ISClusResource **ppClusResource);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *CreateItem )( 
            __RPC__in ISClusResDependents * This,
            /* [in] */ __RPC__in BSTR bstrResourceName,
            /* [in] */ __RPC__in BSTR bstrResourceType,
            /* [in] */ CLUSTER_RESOURCE_CREATE_FLAGS dwFlags,
            /* [retval][out] */ __RPC__deref_out_opt ISClusResource **ppClusterResource);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *DeleteItem )( 
            __RPC__in ISClusResDependents * This,
            /* [in] */ VARIANT varIndex);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *AddItem )( 
            __RPC__in ISClusResDependents * This,
            /* [in] */ __RPC__in_opt ISClusResource *pResource);
        
        /* [helpstring][id] */ HRESULT ( STDMETHODCALLTYPE *RemoveItem )( 
            __RPC__in ISClusResDependents * This,
            /* [in] */ VARIANT varIndex);
        
        END_INTERFACE
    } ISClusResDependentsVtbl;

    interface ISClusResDependents
    {
        CONST_VTBL struct ISClusResDependentsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISClusResDependents_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISClusResDependents_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISClusResDependents_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISClusResDependents_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define ISClusResDependents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define ISClusResDependents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define ISClusResDependents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define ISClusResDependents_get_Count(This,plCount)	\
    ( (This)->lpVtbl -> get_Count(This,plCount) ) 

#define ISClusResDependents_get__NewEnum(This,retval)	\
    ( (This)->lpVtbl -> get__NewEnum(This,retval) ) 

#define ISClusResDependents_Refresh(This)	\
    ( (This)->lpVtbl -> Refresh(This) ) 

#define ISClusResDependents_get_Item(This,varIndex,ppClusResource)	\
    ( (This)->lpVtbl -> get_Item(This,varIndex,ppClusResource) ) 

#define ISClusResDependents_CreateItem(This,bstrResourceName,bstrResourceType,dwFlags,ppClusterResource)	\
    ( (This)->lpVtbl -> CreateItem(This,bstrResourceName,bstrResourceType,dwFlags,ppClusterResource) ) 

#define ISClusResDependents_DeleteItem(This,varIndex)	\
    ( (This)->lpVtbl -> DeleteItem(This,varIndex) ) 

#define ISClusResDependents_AddItem(This,pResource)	\
    ( (This)->lpVtbl -> AddItem(This,pResource) ) 

#define ISClusResDependents_RemoveItem(This,varIndex)	\
    ( (This)->lpVtbl -> RemoveItem(This,varIndex) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISClusResDependents_INTERFACE_DEFINED__ */


/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     __RPC__in unsigned long *, unsigned long            , __RPC__in BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out BSTR * ); 
void                      __RPC_USER  BSTR_UserFree(     __RPC__in unsigned long *, __RPC__in BSTR * ); 

unsigned long             __RPC_USER  VARIANT_UserSize(     __RPC__in unsigned long *, unsigned long            , __RPC__in VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserMarshal(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserUnmarshal(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out VARIANT * ); 
void                      __RPC_USER  VARIANT_UserFree(     __RPC__in unsigned long *, __RPC__in VARIANT * ); 

unsigned long             __RPC_USER  BSTR_UserSize64(     __RPC__in unsigned long *, unsigned long            , __RPC__in BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal64(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal64(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out BSTR * ); 
void                      __RPC_USER  BSTR_UserFree64(     __RPC__in unsigned long *, __RPC__in BSTR * ); 

unsigned long             __RPC_USER  VARIANT_UserSize64(     __RPC__in unsigned long *, unsigned long            , __RPC__in VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserMarshal64(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserUnmarshal64(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out VARIANT * ); 
void                      __RPC_USER  VARIANT_UserFree64(     __RPC__in unsigned long *, __RPC__in VARIANT * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\msctfmonitorapi.h ===
//=--------------------------------------------------------------------------=
// MsCtfMonitorApi.h
//
//
// MsCtfMonitorApi declarations.

//=--------------------------------------------------------------------------=
// (C) Copyright 1995-2003 Microsoft Corporation.  All Rights Reserved.
//
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESSED OR TFPLIED, INCLUDING BUT NOT LIMITED TO
// THE TFPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
// PARTICULAR PURPOSE.
//=--------------------------------------------------------------------------=

#pragma once


////////////////////////////////////////////////////////////////////////////
//
// DoMsCtfMonitor for ctfmon.exe
//
////////////////////////////////////////////////////////////////////////////

#define DCM_FLAGS_TASKENG         0x00000001
#define DCM_FLAGS_CTFMON          0x00000002
#define DCM_FLAGS_LOCALTHREADTSF  0x00000004
extern "C" BOOL WINAPI DoMsCtfMonitor(DWORD dwFlags, HANDLE hEventForServiceStop);

////////////////////////////////////////////////////////////////////////////
//
// Flags for InitLocalMsCtfMonitor()
//
// ILMCM_CHECKLAYOUTANDTIPENABLED
//
//    With this flag, InitLocalMsCtfMonitor() checkes the keyboard layout or 
//    tips are enabled. If there is only one keyboard layout, it does not 
//    initialize Text Services Framework or start the language bar.
//
////////////////////////////////////////////////////////////////////////////
#define ILMCM_CHECKLAYOUTANDTIPENABLED    0x00001    

////////////////////////////////////////////////////////////////////////////
//
// InitLocalMsCtfMonitor
//
////////////////////////////////////////////////////////////////////////////
extern "C" HRESULT WINAPI InitLocalMsCtfMonitor(DWORD dwFlags);

////////////////////////////////////////////////////////////////////////////
//
// UninitLocalMsCtfMonitor
//
////////////////////////////////////////////////////////////////////////////
extern "C" HRESULT WINAPI UninitLocalMsCtfMonitor();
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\msdadc.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0555 */
/* Compiler settings for msdadc.idl:
    Oicf, W1, Zp8, env=Win32 (32b run), target_arch=X86 7.00.0555 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __msdadc_h__
#define __msdadc_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IDataConvert_FWD_DEFINED__
#define __IDataConvert_FWD_DEFINED__
typedef interface IDataConvert IDataConvert;
#endif 	/* __IDataConvert_FWD_DEFINED__ */


#ifndef __IDCInfo_FWD_DEFINED__
#define __IDCInfo_FWD_DEFINED__
typedef interface IDCInfo IDCInfo;
#endif 	/* __IDCInfo_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "ocidl.h"
#include "oledb.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_msdadc_0000_0000 */
/* [local] */ 

//-----------------------------------------------------------------------------
// File:				.C or .H file generated by msdadc.idl 
//
// Copyright:		Copyright (c) 1998-1999 Microsoft Corporation
//
// Contents: 		.C or .H file generated by msdadc.idl
//
// Comments: 		
//
//-----------------------------------------------------------------------------
#include <pshpack8.h>	// 8-byte structure packing
#undef OLEDBDECLSPEC
#if _MSC_VER >= 1100
#define OLEDBDECLSPEC __declspec(selectany)
#else
#define OLEDBDECLSPEC 
#endif //_MSC_VER


extern RPC_IF_HANDLE __MIDL_itf_msdadc_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_msdadc_0000_0000_v0_0_s_ifspec;

#ifndef __IDataConvert_INTERFACE_DEFINED__
#define __IDataConvert_INTERFACE_DEFINED__

/* interface IDataConvert */
/* [unique][helpstring][uuid][object] */ 

typedef DWORD DBDATACONVERT;


enum DBDATACONVERTENUM
    {	DBDATACONVERT_DEFAULT	= 0,
	DBDATACONVERT_SETDATABEHAVIOR	= 0x1,
	DBDATACONVERT_LENGTHFROMNTS	= 0x2,
	DBDATACONVERT_DSTISFIXEDLENGTH	= 0x4,
	DBDATACONVERT_DECIMALSCALE	= 0x8
    } ;

EXTERN_C const IID IID_IDataConvert;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0c733a8d-2a1c-11ce-ade5-00aa0044773d")
    IDataConvert : public IUnknown
    {
    public:
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE DataConvert( 
            /* [in] */ DBTYPE wSrcType,
            /* [in] */ DBTYPE wDstType,
            /* [in] */ DBLENGTH cbSrcLength,
            /* [annotation][out][in] */ 
            __out_opt  DBLENGTH *pcbDstLength,
            /* [annotation][in] */ 
            __in_bcount(cbSrcLength)  void *pSrc,
            /* [annotation][out] */ 
            __out_xcount(cbDstMaxLength)  void *pDst,
            /* [in] */ DBLENGTH cbDstMaxLength,
            /* [in] */ DBSTATUS dbsSrcStatus,
            /* [annotation][out] */ 
            __out_opt  DBSTATUS *pdbsStatus,
            /* [in] */ BYTE bPrecision,
            /* [in] */ BYTE bScale,
            /* [in] */ DBDATACONVERT dwFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CanConvert( 
            /* [in] */ DBTYPE wSrcType,
            /* [in] */ DBTYPE wDstType) = 0;
        
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE GetConversionSize( 
            /* [in] */ DBTYPE wSrcType,
            /* [in] */ DBTYPE wDstType,
            /* [annotation][in] */ 
            __in_opt  DBLENGTH *pcbSrcLength,
            /* [annotation][out] */ 
            __out_opt  DBLENGTH *pcbDstLength,
            /* [annotation][size_is][in] */ 
            __in_bcount_opt(*pcbSrcLength)  void *pSrc) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDataConvertVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IDataConvert * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IDataConvert * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IDataConvert * This);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *DataConvert )( 
            IDataConvert * This,
            /* [in] */ DBTYPE wSrcType,
            /* [in] */ DBTYPE wDstType,
            /* [in] */ DBLENGTH cbSrcLength,
            /* [annotation][out][in] */ 
            __out_opt  DBLENGTH *pcbDstLength,
            /* [annotation][in] */ 
            __in_bcount(cbSrcLength)  void *pSrc,
            /* [annotation][out] */ 
            __out_xcount(cbDstMaxLength)  void *pDst,
            /* [in] */ DBLENGTH cbDstMaxLength,
            /* [in] */ DBSTATUS dbsSrcStatus,
            /* [annotation][out] */ 
            __out_opt  DBSTATUS *pdbsStatus,
            /* [in] */ BYTE bPrecision,
            /* [in] */ BYTE bScale,
            /* [in] */ DBDATACONVERT dwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *CanConvert )( 
            __RPC__in IDataConvert * This,
            /* [in] */ DBTYPE wSrcType,
            /* [in] */ DBTYPE wDstType);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetConversionSize )( 
            IDataConvert * This,
            /* [in] */ DBTYPE wSrcType,
            /* [in] */ DBTYPE wDstType,
            /* [annotation][in] */ 
            __in_opt  DBLENGTH *pcbSrcLength,
            /* [annotation][out] */ 
            __out_opt  DBLENGTH *pcbDstLength,
            /* [annotation][size_is][in] */ 
            __in_bcount_opt(*pcbSrcLength)  void *pSrc);
        
        END_INTERFACE
    } IDataConvertVtbl;

    interface IDataConvert
    {
        CONST_VTBL struct IDataConvertVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDataConvert_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDataConvert_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDataConvert_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDataConvert_DataConvert(This,wSrcType,wDstType,cbSrcLength,pcbDstLength,pSrc,pDst,cbDstMaxLength,dbsSrcStatus,pdbsStatus,bPrecision,bScale,dwFlags)	\
    ( (This)->lpVtbl -> DataConvert(This,wSrcType,wDstType,cbSrcLength,pcbDstLength,pSrc,pDst,cbDstMaxLength,dbsSrcStatus,pdbsStatus,bPrecision,bScale,dwFlags) ) 

#define IDataConvert_CanConvert(This,wSrcType,wDstType)	\
    ( (This)->lpVtbl -> CanConvert(This,wSrcType,wDstType) ) 

#define IDataConvert_GetConversionSize(This,wSrcType,wDstType,pcbSrcLength,pcbDstLength,pSrc)	\
    ( (This)->lpVtbl -> GetConversionSize(This,wSrcType,wDstType,pcbSrcLength,pcbDstLength,pSrc) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDataConvert_INTERFACE_DEFINED__ */


#ifndef __IDCInfo_INTERFACE_DEFINED__
#define __IDCInfo_INTERFACE_DEFINED__

/* interface IDCInfo */
/* [unique][helpstring][uuid][object] */ 

typedef DWORD DCINFOTYPE;


enum DCINFOTYPEENUM
    {	DCINFOTYPE_VERSION	= 1
    } ;
typedef struct tagDCINFO
    {
    DCINFOTYPE eInfoType;
    VARIANT vData;
    } 	DCINFO;


EXTERN_C const IID IID_IDCInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0c733a9c-2a1c-11ce-ade5-00aa0044773d")
    IDCInfo : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetInfo( 
            /* [in] */ ULONG cInfo,
            /* [size_is][in] */ __RPC__in_ecount_full(cInfo) DCINFOTYPE rgeInfoType[  ],
            /* [size_is][out] */ __RPC__out_ecount_full(cInfo) DCINFO **prgInfo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetInfo( 
            /* [in] */ ULONG cInfo,
            /* [size_is][in] */ __RPC__in_ecount_full(cInfo) DCINFO rgInfo[  ]) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDCInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IDCInfo * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IDCInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IDCInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetInfo )( 
            __RPC__in IDCInfo * This,
            /* [in] */ ULONG cInfo,
            /* [size_is][in] */ __RPC__in_ecount_full(cInfo) DCINFOTYPE rgeInfoType[  ],
            /* [size_is][out] */ __RPC__out_ecount_full(cInfo) DCINFO **prgInfo);
        
        HRESULT ( STDMETHODCALLTYPE *SetInfo )( 
            __RPC__in IDCInfo * This,
            /* [in] */ ULONG cInfo,
            /* [size_is][in] */ __RPC__in_ecount_full(cInfo) DCINFO rgInfo[  ]);
        
        END_INTERFACE
    } IDCInfoVtbl;

    interface IDCInfo
    {
        CONST_VTBL struct IDCInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDCInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDCInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDCInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDCInfo_GetInfo(This,cInfo,rgeInfoType,prgInfo)	\
    ( (This)->lpVtbl -> GetInfo(This,cInfo,rgeInfoType,prgInfo) ) 

#define IDCInfo_SetInfo(This,cInfo,rgInfo)	\
    ( (This)->lpVtbl -> SetInfo(This,cInfo,rgInfo) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDCInfo_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_msdadc_0000_0002 */
/* [local] */ 

extern const GUID OLEDBDECLSPEC IID_IDataConvert = { 0x0c733a8dL,0x2a1c,0x11ce, { 0xad,0xe5,0x00,0xaa,0x00,0x44,0x77,0x3d } };
extern const GUID OLEDBDECLSPEC IID_IDCInfo = { 0x0c733a9cL,0x2a1c,0x11ce, { 0xad,0xe5,0x00,0xaa,0x00,0x44,0x77,0x3d } };
#include <poppack.h>     // restore original structure packing


extern RPC_IF_HANDLE __MIDL_itf_msdadc_0000_0002_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_msdadc_0000_0002_v0_0_s_ifspec;

/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  VARIANT_UserSize(     __RPC__in unsigned long *, unsigned long            , __RPC__in VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserMarshal(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserUnmarshal(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out VARIANT * ); 
void                      __RPC_USER  VARIANT_UserFree(     __RPC__in unsigned long *, __RPC__in VARIANT * ); 

unsigned long             __RPC_USER  VARIANT_UserSize64(     __RPC__in unsigned long *, unsigned long            , __RPC__in VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserMarshal64(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserUnmarshal64(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out VARIANT * ); 
void                      __RPC_USER  VARIANT_UserFree64(     __RPC__in unsigned long *, __RPC__in VARIANT * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\msctf.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0555 */
/* Compiler settings for msctf.idl:
    Oicf, W1, Zp8, env=Win32 (32b run), target_arch=X86 7.00.0555 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __msctf_h__
#define __msctf_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __ITfThreadMgr_FWD_DEFINED__
#define __ITfThreadMgr_FWD_DEFINED__
typedef interface ITfThreadMgr ITfThreadMgr;
#endif 	/* __ITfThreadMgr_FWD_DEFINED__ */


#ifndef __ITfThreadMgrEx_FWD_DEFINED__
#define __ITfThreadMgrEx_FWD_DEFINED__
typedef interface ITfThreadMgrEx ITfThreadMgrEx;
#endif 	/* __ITfThreadMgrEx_FWD_DEFINED__ */


#ifndef __ITfThreadMgrEventSink_FWD_DEFINED__
#define __ITfThreadMgrEventSink_FWD_DEFINED__
typedef interface ITfThreadMgrEventSink ITfThreadMgrEventSink;
#endif 	/* __ITfThreadMgrEventSink_FWD_DEFINED__ */


#ifndef __ITfConfigureSystemKeystrokeFeed_FWD_DEFINED__
#define __ITfConfigureSystemKeystrokeFeed_FWD_DEFINED__
typedef interface ITfConfigureSystemKeystrokeFeed ITfConfigureSystemKeystrokeFeed;
#endif 	/* __ITfConfigureSystemKeystrokeFeed_FWD_DEFINED__ */


#ifndef __IEnumTfDocumentMgrs_FWD_DEFINED__
#define __IEnumTfDocumentMgrs_FWD_DEFINED__
typedef interface IEnumTfDocumentMgrs IEnumTfDocumentMgrs;
#endif 	/* __IEnumTfDocumentMgrs_FWD_DEFINED__ */


#ifndef __ITfDocumentMgr_FWD_DEFINED__
#define __ITfDocumentMgr_FWD_DEFINED__
typedef interface ITfDocumentMgr ITfDocumentMgr;
#endif 	/* __ITfDocumentMgr_FWD_DEFINED__ */


#ifndef __IEnumTfContexts_FWD_DEFINED__
#define __IEnumTfContexts_FWD_DEFINED__
typedef interface IEnumTfContexts IEnumTfContexts;
#endif 	/* __IEnumTfContexts_FWD_DEFINED__ */


#ifndef __ITfCompositionView_FWD_DEFINED__
#define __ITfCompositionView_FWD_DEFINED__
typedef interface ITfCompositionView ITfCompositionView;
#endif 	/* __ITfCompositionView_FWD_DEFINED__ */


#ifndef __IEnumITfCompositionView_FWD_DEFINED__
#define __IEnumITfCompositionView_FWD_DEFINED__
typedef interface IEnumITfCompositionView IEnumITfCompositionView;
#endif 	/* __IEnumITfCompositionView_FWD_DEFINED__ */


#ifndef __ITfComposition_FWD_DEFINED__
#define __ITfComposition_FWD_DEFINED__
typedef interface ITfComposition ITfComposition;
#endif 	/* __ITfComposition_FWD_DEFINED__ */


#ifndef __ITfCompositionSink_FWD_DEFINED__
#define __ITfCompositionSink_FWD_DEFINED__
typedef interface ITfCompositionSink ITfCompositionSink;
#endif 	/* __ITfCompositionSink_FWD_DEFINED__ */


#ifndef __ITfContextComposition_FWD_DEFINED__
#define __ITfContextComposition_FWD_DEFINED__
typedef interface ITfContextComposition ITfContextComposition;
#endif 	/* __ITfContextComposition_FWD_DEFINED__ */


#ifndef __ITfContextOwnerCompositionServices_FWD_DEFINED__
#define __ITfContextOwnerCompositionServices_FWD_DEFINED__
typedef interface ITfContextOwnerCompositionServices ITfContextOwnerCompositionServices;
#endif 	/* __ITfContextOwnerCompositionServices_FWD_DEFINED__ */


#ifndef __ITfContextOwnerCompositionSink_FWD_DEFINED__
#define __ITfContextOwnerCompositionSink_FWD_DEFINED__
typedef interface ITfContextOwnerCompositionSink ITfContextOwnerCompositionSink;
#endif 	/* __ITfContextOwnerCompositionSink_FWD_DEFINED__ */


#ifndef __ITfContextView_FWD_DEFINED__
#define __ITfContextView_FWD_DEFINED__
typedef interface ITfContextView ITfContextView;
#endif 	/* __ITfContextView_FWD_DEFINED__ */


#ifndef __IEnumTfContextViews_FWD_DEFINED__
#define __IEnumTfContextViews_FWD_DEFINED__
typedef interface IEnumTfContextViews IEnumTfContextViews;
#endif 	/* __IEnumTfContextViews_FWD_DEFINED__ */


#ifndef __ITfContext_FWD_DEFINED__
#define __ITfContext_FWD_DEFINED__
typedef interface ITfContext ITfContext;
#endif 	/* __ITfContext_FWD_DEFINED__ */


#ifndef __ITfQueryEmbedded_FWD_DEFINED__
#define __ITfQueryEmbedded_FWD_DEFINED__
typedef interface ITfQueryEmbedded ITfQueryEmbedded;
#endif 	/* __ITfQueryEmbedded_FWD_DEFINED__ */


#ifndef __ITfInsertAtSelection_FWD_DEFINED__
#define __ITfInsertAtSelection_FWD_DEFINED__
typedef interface ITfInsertAtSelection ITfInsertAtSelection;
#endif 	/* __ITfInsertAtSelection_FWD_DEFINED__ */


#ifndef __ITfCleanupContextSink_FWD_DEFINED__
#define __ITfCleanupContextSink_FWD_DEFINED__
typedef interface ITfCleanupContextSink ITfCleanupContextSink;
#endif 	/* __ITfCleanupContextSink_FWD_DEFINED__ */


#ifndef __ITfCleanupContextDurationSink_FWD_DEFINED__
#define __ITfCleanupContextDurationSink_FWD_DEFINED__
typedef interface ITfCleanupContextDurationSink ITfCleanupContextDurationSink;
#endif 	/* __ITfCleanupContextDurationSink_FWD_DEFINED__ */


#ifndef __ITfReadOnlyProperty_FWD_DEFINED__
#define __ITfReadOnlyProperty_FWD_DEFINED__
typedef interface ITfReadOnlyProperty ITfReadOnlyProperty;
#endif 	/* __ITfReadOnlyProperty_FWD_DEFINED__ */


#ifndef __IEnumTfPropertyValue_FWD_DEFINED__
#define __IEnumTfPropertyValue_FWD_DEFINED__
typedef interface IEnumTfPropertyValue IEnumTfPropertyValue;
#endif 	/* __IEnumTfPropertyValue_FWD_DEFINED__ */


#ifndef __ITfMouseTracker_FWD_DEFINED__
#define __ITfMouseTracker_FWD_DEFINED__
typedef interface ITfMouseTracker ITfMouseTracker;
#endif 	/* __ITfMouseTracker_FWD_DEFINED__ */


#ifndef __ITfMouseTrackerACP_FWD_DEFINED__
#define __ITfMouseTrackerACP_FWD_DEFINED__
typedef interface ITfMouseTrackerACP ITfMouseTrackerACP;
#endif 	/* __ITfMouseTrackerACP_FWD_DEFINED__ */


#ifndef __ITfMouseSink_FWD_DEFINED__
#define __ITfMouseSink_FWD_DEFINED__
typedef interface ITfMouseSink ITfMouseSink;
#endif 	/* __ITfMouseSink_FWD_DEFINED__ */


#ifndef __ITfEditRecord_FWD_DEFINED__
#define __ITfEditRecord_FWD_DEFINED__
typedef interface ITfEditRecord ITfEditRecord;
#endif 	/* __ITfEditRecord_FWD_DEFINED__ */


#ifndef __ITfTextEditSink_FWD_DEFINED__
#define __ITfTextEditSink_FWD_DEFINED__
typedef interface ITfTextEditSink ITfTextEditSink;
#endif 	/* __ITfTextEditSink_FWD_DEFINED__ */


#ifndef __ITfTextLayoutSink_FWD_DEFINED__
#define __ITfTextLayoutSink_FWD_DEFINED__
typedef interface ITfTextLayoutSink ITfTextLayoutSink;
#endif 	/* __ITfTextLayoutSink_FWD_DEFINED__ */


#ifndef __ITfStatusSink_FWD_DEFINED__
#define __ITfStatusSink_FWD_DEFINED__
typedef interface ITfStatusSink ITfStatusSink;
#endif 	/* __ITfStatusSink_FWD_DEFINED__ */


#ifndef __ITfEditTransactionSink_FWD_DEFINED__
#define __ITfEditTransactionSink_FWD_DEFINED__
typedef interface ITfEditTransactionSink ITfEditTransactionSink;
#endif 	/* __ITfEditTransactionSink_FWD_DEFINED__ */


#ifndef __ITfContextOwner_FWD_DEFINED__
#define __ITfContextOwner_FWD_DEFINED__
typedef interface ITfContextOwner ITfContextOwner;
#endif 	/* __ITfContextOwner_FWD_DEFINED__ */


#ifndef __ITfContextOwnerServices_FWD_DEFINED__
#define __ITfContextOwnerServices_FWD_DEFINED__
typedef interface ITfContextOwnerServices ITfContextOwnerServices;
#endif 	/* __ITfContextOwnerServices_FWD_DEFINED__ */


#ifndef __ITfContextKeyEventSink_FWD_DEFINED__
#define __ITfContextKeyEventSink_FWD_DEFINED__
typedef interface ITfContextKeyEventSink ITfContextKeyEventSink;
#endif 	/* __ITfContextKeyEventSink_FWD_DEFINED__ */


#ifndef __ITfEditSession_FWD_DEFINED__
#define __ITfEditSession_FWD_DEFINED__
typedef interface ITfEditSession ITfEditSession;
#endif 	/* __ITfEditSession_FWD_DEFINED__ */


#ifndef __ITfRange_FWD_DEFINED__
#define __ITfRange_FWD_DEFINED__
typedef interface ITfRange ITfRange;
#endif 	/* __ITfRange_FWD_DEFINED__ */


#ifndef __ITfRangeACP_FWD_DEFINED__
#define __ITfRangeACP_FWD_DEFINED__
typedef interface ITfRangeACP ITfRangeACP;
#endif 	/* __ITfRangeACP_FWD_DEFINED__ */


#ifndef __ITextStoreACPServices_FWD_DEFINED__
#define __ITextStoreACPServices_FWD_DEFINED__
typedef interface ITextStoreACPServices ITextStoreACPServices;
#endif 	/* __ITextStoreACPServices_FWD_DEFINED__ */


#ifndef __ITfRangeBackup_FWD_DEFINED__
#define __ITfRangeBackup_FWD_DEFINED__
typedef interface ITfRangeBackup ITfRangeBackup;
#endif 	/* __ITfRangeBackup_FWD_DEFINED__ */


#ifndef __ITfPropertyStore_FWD_DEFINED__
#define __ITfPropertyStore_FWD_DEFINED__
typedef interface ITfPropertyStore ITfPropertyStore;
#endif 	/* __ITfPropertyStore_FWD_DEFINED__ */


#ifndef __IEnumTfRanges_FWD_DEFINED__
#define __IEnumTfRanges_FWD_DEFINED__
typedef interface IEnumTfRanges IEnumTfRanges;
#endif 	/* __IEnumTfRanges_FWD_DEFINED__ */


#ifndef __ITfCreatePropertyStore_FWD_DEFINED__
#define __ITfCreatePropertyStore_FWD_DEFINED__
typedef interface ITfCreatePropertyStore ITfCreatePropertyStore;
#endif 	/* __ITfCreatePropertyStore_FWD_DEFINED__ */


#ifndef __ITfPersistentPropertyLoaderACP_FWD_DEFINED__
#define __ITfPersistentPropertyLoaderACP_FWD_DEFINED__
typedef interface ITfPersistentPropertyLoaderACP ITfPersistentPropertyLoaderACP;
#endif 	/* __ITfPersistentPropertyLoaderACP_FWD_DEFINED__ */


#ifndef __ITfProperty_FWD_DEFINED__
#define __ITfProperty_FWD_DEFINED__
typedef interface ITfProperty ITfProperty;
#endif 	/* __ITfProperty_FWD_DEFINED__ */


#ifndef __IEnumTfProperties_FWD_DEFINED__
#define __IEnumTfProperties_FWD_DEFINED__
typedef interface IEnumTfProperties IEnumTfProperties;
#endif 	/* __IEnumTfProperties_FWD_DEFINED__ */


#ifndef __ITfCompartment_FWD_DEFINED__
#define __ITfCompartment_FWD_DEFINED__
typedef interface ITfCompartment ITfCompartment;
#endif 	/* __ITfCompartment_FWD_DEFINED__ */


#ifndef __ITfCompartmentEventSink_FWD_DEFINED__
#define __ITfCompartmentEventSink_FWD_DEFINED__
typedef interface ITfCompartmentEventSink ITfCompartmentEventSink;
#endif 	/* __ITfCompartmentEventSink_FWD_DEFINED__ */


#ifndef __ITfCompartmentMgr_FWD_DEFINED__
#define __ITfCompartmentMgr_FWD_DEFINED__
typedef interface ITfCompartmentMgr ITfCompartmentMgr;
#endif 	/* __ITfCompartmentMgr_FWD_DEFINED__ */


#ifndef __ITfFunction_FWD_DEFINED__
#define __ITfFunction_FWD_DEFINED__
typedef interface ITfFunction ITfFunction;
#endif 	/* __ITfFunction_FWD_DEFINED__ */


#ifndef __ITfFunctionProvider_FWD_DEFINED__
#define __ITfFunctionProvider_FWD_DEFINED__
typedef interface ITfFunctionProvider ITfFunctionProvider;
#endif 	/* __ITfFunctionProvider_FWD_DEFINED__ */


#ifndef __IEnumTfFunctionProviders_FWD_DEFINED__
#define __IEnumTfFunctionProviders_FWD_DEFINED__
typedef interface IEnumTfFunctionProviders IEnumTfFunctionProviders;
#endif 	/* __IEnumTfFunctionProviders_FWD_DEFINED__ */


#ifndef __ITfInputProcessorProfiles_FWD_DEFINED__
#define __ITfInputProcessorProfiles_FWD_DEFINED__
typedef interface ITfInputProcessorProfiles ITfInputProcessorProfiles;
#endif 	/* __ITfInputProcessorProfiles_FWD_DEFINED__ */


#ifndef __ITfInputProcessorProfilesEx_FWD_DEFINED__
#define __ITfInputProcessorProfilesEx_FWD_DEFINED__
typedef interface ITfInputProcessorProfilesEx ITfInputProcessorProfilesEx;
#endif 	/* __ITfInputProcessorProfilesEx_FWD_DEFINED__ */


#ifndef __ITfInputProcessorProfileSubstituteLayout_FWD_DEFINED__
#define __ITfInputProcessorProfileSubstituteLayout_FWD_DEFINED__
typedef interface ITfInputProcessorProfileSubstituteLayout ITfInputProcessorProfileSubstituteLayout;
#endif 	/* __ITfInputProcessorProfileSubstituteLayout_FWD_DEFINED__ */


#ifndef __ITfActiveLanguageProfileNotifySink_FWD_DEFINED__
#define __ITfActiveLanguageProfileNotifySink_FWD_DEFINED__
typedef interface ITfActiveLanguageProfileNotifySink ITfActiveLanguageProfileNotifySink;
#endif 	/* __ITfActiveLanguageProfileNotifySink_FWD_DEFINED__ */


#ifndef __IEnumTfLanguageProfiles_FWD_DEFINED__
#define __IEnumTfLanguageProfiles_FWD_DEFINED__
typedef interface IEnumTfLanguageProfiles IEnumTfLanguageProfiles;
#endif 	/* __IEnumTfLanguageProfiles_FWD_DEFINED__ */


#ifndef __ITfLanguageProfileNotifySink_FWD_DEFINED__
#define __ITfLanguageProfileNotifySink_FWD_DEFINED__
typedef interface ITfLanguageProfileNotifySink ITfLanguageProfileNotifySink;
#endif 	/* __ITfLanguageProfileNotifySink_FWD_DEFINED__ */


#ifndef __ITfInputProcessorProfileMgr_FWD_DEFINED__
#define __ITfInputProcessorProfileMgr_FWD_DEFINED__
typedef interface ITfInputProcessorProfileMgr ITfInputProcessorProfileMgr;
#endif 	/* __ITfInputProcessorProfileMgr_FWD_DEFINED__ */


#ifndef __IEnumTfInputProcessorProfiles_FWD_DEFINED__
#define __IEnumTfInputProcessorProfiles_FWD_DEFINED__
typedef interface IEnumTfInputProcessorProfiles IEnumTfInputProcessorProfiles;
#endif 	/* __IEnumTfInputProcessorProfiles_FWD_DEFINED__ */


#ifndef __ITfInputProcessorProfileActivationSink_FWD_DEFINED__
#define __ITfInputProcessorProfileActivationSink_FWD_DEFINED__
typedef interface ITfInputProcessorProfileActivationSink ITfInputProcessorProfileActivationSink;
#endif 	/* __ITfInputProcessorProfileActivationSink_FWD_DEFINED__ */


#ifndef __ITfKeystrokeMgr_FWD_DEFINED__
#define __ITfKeystrokeMgr_FWD_DEFINED__
typedef interface ITfKeystrokeMgr ITfKeystrokeMgr;
#endif 	/* __ITfKeystrokeMgr_FWD_DEFINED__ */


#ifndef __ITfKeyEventSink_FWD_DEFINED__
#define __ITfKeyEventSink_FWD_DEFINED__
typedef interface ITfKeyEventSink ITfKeyEventSink;
#endif 	/* __ITfKeyEventSink_FWD_DEFINED__ */


#ifndef __ITfKeyTraceEventSink_FWD_DEFINED__
#define __ITfKeyTraceEventSink_FWD_DEFINED__
typedef interface ITfKeyTraceEventSink ITfKeyTraceEventSink;
#endif 	/* __ITfKeyTraceEventSink_FWD_DEFINED__ */


#ifndef __ITfPreservedKeyNotifySink_FWD_DEFINED__
#define __ITfPreservedKeyNotifySink_FWD_DEFINED__
typedef interface ITfPreservedKeyNotifySink ITfPreservedKeyNotifySink;
#endif 	/* __ITfPreservedKeyNotifySink_FWD_DEFINED__ */


#ifndef __ITfMessagePump_FWD_DEFINED__
#define __ITfMessagePump_FWD_DEFINED__
typedef interface ITfMessagePump ITfMessagePump;
#endif 	/* __ITfMessagePump_FWD_DEFINED__ */


#ifndef __ITfThreadFocusSink_FWD_DEFINED__
#define __ITfThreadFocusSink_FWD_DEFINED__
typedef interface ITfThreadFocusSink ITfThreadFocusSink;
#endif 	/* __ITfThreadFocusSink_FWD_DEFINED__ */


#ifndef __ITfTextInputProcessor_FWD_DEFINED__
#define __ITfTextInputProcessor_FWD_DEFINED__
typedef interface ITfTextInputProcessor ITfTextInputProcessor;
#endif 	/* __ITfTextInputProcessor_FWD_DEFINED__ */


#ifndef __ITfTextInputProcessorEx_FWD_DEFINED__
#define __ITfTextInputProcessorEx_FWD_DEFINED__
typedef interface ITfTextInputProcessorEx ITfTextInputProcessorEx;
#endif 	/* __ITfTextInputProcessorEx_FWD_DEFINED__ */


#ifndef __ITfClientId_FWD_DEFINED__
#define __ITfClientId_FWD_DEFINED__
typedef interface ITfClientId ITfClientId;
#endif 	/* __ITfClientId_FWD_DEFINED__ */


#ifndef __ITfDisplayAttributeInfo_FWD_DEFINED__
#define __ITfDisplayAttributeInfo_FWD_DEFINED__
typedef interface ITfDisplayAttributeInfo ITfDisplayAttributeInfo;
#endif 	/* __ITfDisplayAttributeInfo_FWD_DEFINED__ */


#ifndef __IEnumTfDisplayAttributeInfo_FWD_DEFINED__
#define __IEnumTfDisplayAttributeInfo_FWD_DEFINED__
typedef interface IEnumTfDisplayAttributeInfo IEnumTfDisplayAttributeInfo;
#endif 	/* __IEnumTfDisplayAttributeInfo_FWD_DEFINED__ */


#ifndef __ITfDisplayAttributeProvider_FWD_DEFINED__
#define __ITfDisplayAttributeProvider_FWD_DEFINED__
typedef interface ITfDisplayAttributeProvider ITfDisplayAttributeProvider;
#endif 	/* __ITfDisplayAttributeProvider_FWD_DEFINED__ */


#ifndef __ITfDisplayAttributeMgr_FWD_DEFINED__
#define __ITfDisplayAttributeMgr_FWD_DEFINED__
typedef interface ITfDisplayAttributeMgr ITfDisplayAttributeMgr;
#endif 	/* __ITfDisplayAttributeMgr_FWD_DEFINED__ */


#ifndef __ITfDisplayAttributeNotifySink_FWD_DEFINED__
#define __ITfDisplayAttributeNotifySink_FWD_DEFINED__
typedef interface ITfDisplayAttributeNotifySink ITfDisplayAttributeNotifySink;
#endif 	/* __ITfDisplayAttributeNotifySink_FWD_DEFINED__ */


#ifndef __ITfCategoryMgr_FWD_DEFINED__
#define __ITfCategoryMgr_FWD_DEFINED__
typedef interface ITfCategoryMgr ITfCategoryMgr;
#endif 	/* __ITfCategoryMgr_FWD_DEFINED__ */


#ifndef __ITfSource_FWD_DEFINED__
#define __ITfSource_FWD_DEFINED__
typedef interface ITfSource ITfSource;
#endif 	/* __ITfSource_FWD_DEFINED__ */


#ifndef __ITfSourceSingle_FWD_DEFINED__
#define __ITfSourceSingle_FWD_DEFINED__
typedef interface ITfSourceSingle ITfSourceSingle;
#endif 	/* __ITfSourceSingle_FWD_DEFINED__ */


#ifndef __ITfUIElementMgr_FWD_DEFINED__
#define __ITfUIElementMgr_FWD_DEFINED__
typedef interface ITfUIElementMgr ITfUIElementMgr;
#endif 	/* __ITfUIElementMgr_FWD_DEFINED__ */


#ifndef __IEnumTfUIElements_FWD_DEFINED__
#define __IEnumTfUIElements_FWD_DEFINED__
typedef interface IEnumTfUIElements IEnumTfUIElements;
#endif 	/* __IEnumTfUIElements_FWD_DEFINED__ */


#ifndef __ITfUIElementSink_FWD_DEFINED__
#define __ITfUIElementSink_FWD_DEFINED__
typedef interface ITfUIElementSink ITfUIElementSink;
#endif 	/* __ITfUIElementSink_FWD_DEFINED__ */


#ifndef __ITfUIElement_FWD_DEFINED__
#define __ITfUIElement_FWD_DEFINED__
typedef interface ITfUIElement ITfUIElement;
#endif 	/* __ITfUIElement_FWD_DEFINED__ */


#ifndef __ITfCandidateListUIElement_FWD_DEFINED__
#define __ITfCandidateListUIElement_FWD_DEFINED__
typedef interface ITfCandidateListUIElement ITfCandidateListUIElement;
#endif 	/* __ITfCandidateListUIElement_FWD_DEFINED__ */


#ifndef __ITfCandidateListUIElementBehavior_FWD_DEFINED__
#define __ITfCandidateListUIElementBehavior_FWD_DEFINED__
typedef interface ITfCandidateListUIElementBehavior ITfCandidateListUIElementBehavior;
#endif 	/* __ITfCandidateListUIElementBehavior_FWD_DEFINED__ */


#ifndef __ITfReadingInformationUIElement_FWD_DEFINED__
#define __ITfReadingInformationUIElement_FWD_DEFINED__
typedef interface ITfReadingInformationUIElement ITfReadingInformationUIElement;
#endif 	/* __ITfReadingInformationUIElement_FWD_DEFINED__ */


#ifndef __ITfTransitoryExtensionUIElement_FWD_DEFINED__
#define __ITfTransitoryExtensionUIElement_FWD_DEFINED__
typedef interface ITfTransitoryExtensionUIElement ITfTransitoryExtensionUIElement;
#endif 	/* __ITfTransitoryExtensionUIElement_FWD_DEFINED__ */


#ifndef __ITfTransitoryExtensionSink_FWD_DEFINED__
#define __ITfTransitoryExtensionSink_FWD_DEFINED__
typedef interface ITfTransitoryExtensionSink ITfTransitoryExtensionSink;
#endif 	/* __ITfTransitoryExtensionSink_FWD_DEFINED__ */


#ifndef __ITfToolTipUIElement_FWD_DEFINED__
#define __ITfToolTipUIElement_FWD_DEFINED__
typedef interface ITfToolTipUIElement ITfToolTipUIElement;
#endif 	/* __ITfToolTipUIElement_FWD_DEFINED__ */


#ifndef __ITfReverseConversionList_FWD_DEFINED__
#define __ITfReverseConversionList_FWD_DEFINED__
typedef interface ITfReverseConversionList ITfReverseConversionList;
#endif 	/* __ITfReverseConversionList_FWD_DEFINED__ */


#ifndef __ITfReverseConversion_FWD_DEFINED__
#define __ITfReverseConversion_FWD_DEFINED__
typedef interface ITfReverseConversion ITfReverseConversion;
#endif 	/* __ITfReverseConversion_FWD_DEFINED__ */


#ifndef __ITfReverseConversionMgr_FWD_DEFINED__
#define __ITfReverseConversionMgr_FWD_DEFINED__
typedef interface ITfReverseConversionMgr ITfReverseConversionMgr;
#endif 	/* __ITfReverseConversionMgr_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "comcat.h"
#include "textstor.h"
#include "ctfutb.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_msctf_0000_0000 */
/* [local] */ 

//=--------------------------------------------------------------------------=
// msctf.h


// Text Framework declarations.

//=--------------------------------------------------------------------------=
// (C) Copyright 1995-2001 Microsoft Corporation.  All Rights Reserved.
//
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
// PARTICULAR PURPOSE.
//=--------------------------------------------------------------------------=

#ifndef MSCTF_DEFINED
#define MSCTF_DEFINED

#include <windows.h>

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#define TF_E_LOCKED          MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0500)
#define TF_E_STACKFULL       MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0501)
#define TF_E_NOTOWNEDRANGE   MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0502)
#define TF_E_NOPROVIDER      MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0503)
#define TF_E_DISCONNECTED    MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0504)
#define TF_E_INVALIDVIEW     MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0505)
#define TF_E_ALREADY_EXISTS  MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0506)
#define TF_E_RANGE_NOT_COVERED MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0507)
#define TF_E_COMPOSITION_REJECTED MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0508)
#define TF_E_EMPTYCONTEXT    MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0509)
#define TF_E_INVALIDPOS      MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0200)
#define TF_E_NOLOCK          MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0201)
#define TF_E_NOOBJECT        MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0202)
#define TF_E_NOSERVICE       MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0203)
#define TF_E_NOINTERFACE     MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0204)
#define TF_E_NOSELECTION     MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0205)
#define TF_E_NOLAYOUT        MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0206)
#define TF_E_INVALIDPOINT    MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0207)
#define TF_E_SYNCHRONOUS     MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0208)
#define TF_E_READONLY        MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x0209)
#define TF_E_FORMAT          MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x020a)
#define TF_S_ASYNC           MAKE_HRESULT(SEVERITY_SUCCESS, FACILITY_ITF, 0x0300)
#define TF_RCM_COMLESS                          0x00000001
#define TF_RCM_VKEY                             0x00000002
#define TF_RCM_HINT_READING_LENGTH              0x00000004
#define TF_RCM_HINT_COLLISION                   0x00000008

HRESULT WINAPI TF_CreateThreadMgr(ITfThreadMgr **pptim);
HRESULT WINAPI TF_GetThreadMgr(ITfThreadMgr **pptim);
HRESULT WINAPI TF_CreateInputProcessorProfiles(ITfInputProcessorProfiles **ppipr);
HRESULT WINAPI TF_CreateDisplayAttributeMgr(ITfDisplayAttributeMgr **ppdam);
HRESULT WINAPI TF_CreateLangBarMgr(ITfLangBarMgr **pppbm);
HRESULT WINAPI TF_CreateLangBarItemMgr(ITfLangBarItemMgr **pplbim);
HRESULT WINAPI TF_CreateCategoryMgr(ITfCategoryMgr **ppcat);

EXTERN_C const GUID GUID_PROP_TEXTOWNER;
EXTERN_C const GUID GUID_PROP_ATTRIBUTE;
EXTERN_C const GUID GUID_PROP_LANGID;
EXTERN_C const GUID GUID_PROP_READING;
EXTERN_C const GUID GUID_PROP_COMPOSING;

EXTERN_C const CLSID CLSID_TF_ThreadMgr;
EXTERN_C const CLSID CLSID_TF_InputProcessorProfiles;
EXTERN_C const CLSID CLSID_TF_LangBarMgr;
EXTERN_C const CLSID CLSID_TF_DisplayAttributeMgr;
EXTERN_C const CLSID CLSID_TF_CategoryMgr;
EXTERN_C const CLSID CLSID_TF_LangBarItemMgr;
EXTERN_C const GUID GUID_SYSTEM_FUNCTIONPROVIDER;
EXTERN_C const GUID GUID_APP_FUNCTIONPROVIDER;


EXTERN_C const GUID GUID_COMPARTMENT_KEYBOARD_DISABLED;
EXTERN_C const GUID GUID_COMPARTMENT_KEYBOARD_OPENCLOSE;
EXTERN_C const GUID GUID_COMPARTMENT_HANDWRITING_OPENCLOSE;
EXTERN_C const GUID GUID_COMPARTMENT_SPEECH_DISABLED;
EXTERN_C const GUID GUID_COMPARTMENT_SPEECH_OPENCLOSE;
EXTERN_C const GUID GUID_COMPARTMENT_SPEECH_GLOBALSTATE;
EXTERN_C const GUID GUID_COMPARTMENT_PERSISTMENUENABLED;
EXTERN_C const GUID GUID_COMPARTMENT_EMPTYCONTEXT;
EXTERN_C const GUID GUID_COMPARTMENT_TIPUISTATUS;
EXTERN_C const GUID GUID_COMPARTMENT_KEYBOARD_INPUTMODE_CONVERSION;
EXTERN_C const GUID GUID_COMPARTMENT_KEYBOARD_INPUTMODE_SENTENCE;
EXTERN_C const GUID GUID_COMPARTMENT_TRANSITORYEXTENSION;
EXTERN_C const GUID GUID_COMPARTMENT_TRANSITORYEXTENSION_DOCUMENTMANAGER;
EXTERN_C const GUID GUID_COMPARTMENT_TRANSITORYEXTENSION_PARENT;

EXTERN_C const GUID GUID_PROP_MODEBIAS;

EXTERN_C const GUID GUID_MODEBIAS_NONE;
EXTERN_C const GUID GUID_MODEBIAS_URLHISTORY;
EXTERN_C const GUID GUID_MODEBIAS_FILENAME;
EXTERN_C const GUID GUID_MODEBIAS_READING;
EXTERN_C const GUID GUID_MODEBIAS_DATETIME;
EXTERN_C const GUID GUID_MODEBIAS_NAME;
EXTERN_C const GUID GUID_MODEBIAS_CONVERSATION;
EXTERN_C const GUID GUID_MODEBIAS_NUMERIC;
EXTERN_C const GUID GUID_MODEBIAS_HIRAGANA;
EXTERN_C const GUID GUID_MODEBIAS_KATAKANA;
EXTERN_C const GUID GUID_MODEBIAS_HANGUL;
EXTERN_C const GUID GUID_MODEBIAS_CHINESE;
EXTERN_C const GUID GUID_MODEBIAS_HALFWIDTHKATAKANA;
EXTERN_C const GUID GUID_MODEBIAS_FULLWIDTHALPHANUMERIC;
EXTERN_C const GUID GUID_MODEBIAS_HALFWIDTHALPHANUMERIC;
EXTERN_C const GUID GUID_MODEBIAS_FULLWIDTHHANGUL;
EXTERN_C const GUID GUID_TFCAT_CATEGORY_OF_TIP;
EXTERN_C const GUID GUID_TFCAT_TIP_KEYBOARD;
EXTERN_C const GUID GUID_TFCAT_TIP_SPEECH;
EXTERN_C const GUID GUID_TFCAT_TIP_HANDWRITING;
EXTERN_C const GUID GUID_TFCAT_TIPCAP_SECUREMODE;
EXTERN_C const GUID GUID_TFCAT_TIPCAP_UIELEMENTENABLED;
EXTERN_C const GUID GUID_TFCAT_TIPCAP_INPUTMODECOMPARTMENT;
EXTERN_C const GUID GUID_TFCAT_TIPCAP_COMLESS;
EXTERN_C const GUID GUID_TFCAT_TIPCAP_WOW16;

EXTERN_C const GUID GUID_TFCAT_PROP_AUDIODATA;
EXTERN_C const GUID GUID_TFCAT_PROP_INKDATA;

EXTERN_C const GUID GUID_TFCAT_PROPSTYLE_CUSTOM;
EXTERN_C const GUID GUID_TFCAT_PROPSTYLE_STATIC;
EXTERN_C const GUID GUID_TFCAT_PROPSTYLE_STATICCOMPACT;

EXTERN_C const GUID GUID_TFCAT_DISPLAYATTRIBUTEPROVIDER;
EXTERN_C const GUID GUID_TFCAT_DISPLAYATTRIBUTEPROPERTY;

#define TF_INVALID_GUIDATOM ((TfGuidAtom)0)
#define TF_CLIENTID_NULL    ((TfClientId)0)

#define TF_TMAE_NOACTIVATETIP              0x00000001
#define TF_TMAE_SECUREMODE                 0x00000002
#define TF_TMAE_UIELEMENTENABLEDONLY       0x00000004
#define TF_TMAE_COMLESS                    0x00000008
#define TF_TMAE_WOW16                      0x00000010
#define TF_TMAE_NOACTIVATEKEYBOARDLAYOUT   0x00000020
#define TF_TMAE_CONSOLE                    0x00000040

#define TF_TMF_NOACTIVATETIP          TF_TMAE_NOACTIVATETIP
#define TF_TMF_SECUREMODE             TF_TMAE_SECUREMODE
#define TF_TMF_UIELEMENTENABLEDONLY   TF_TMAE_UIELEMENTENABLEDONLY
#define TF_TMF_COMLESS                TF_TMAE_COMLESS
#define TF_TMF_WOW16                  TF_TMAE_WOW16
#define TF_TMF_CONSOLE                TF_TMAE_CONSOLE
#define TF_TMF_ACTIVATED              0x80000000

#define TF_MOD_ALT                         0x0001
#define TF_MOD_CONTROL                     0x0002
#define TF_MOD_SHIFT                       0x0004
#define TF_MOD_RALT                        0x0008
#define TF_MOD_RCONTROL                    0x0010
#define TF_MOD_RSHIFT                      0x0020
#define TF_MOD_LALT                        0x0040
#define TF_MOD_LCONTROL                    0x0080
#define TF_MOD_LSHIFT                      0x0100
#define TF_MOD_ON_KEYUP                    0x0200
#define TF_MOD_IGNORE_ALL_MODIFIER         0x0400

#define TF_US_HIDETIPUI         0x00000001

#define TF_DISABLE_SPEECH         0x00000001
#define TF_DISABLE_DICTATION      0x00000002
#define TF_DISABLE_COMMANDING     0x00000004

#define TF_PROCESS_ATOM             TEXT("_CTF_PROCESS_ATOM_")
#define TF_ENABLE_PROCESS_ATOM      TEXT("_CTF_ENABLE_PROCESS_ATOM_")
#define TF_INVALID_UIELEMENTID    DWORD(-1)
#define TF_CLUIE_DOCUMENTMGR      0x00000001
#define TF_CLUIE_COUNT            0x00000002
#define TF_CLUIE_SELECTION        0x00000004
#define TF_CLUIE_STRING           0x00000008
#define TF_CLUIE_PAGEINDEX        0x00000010
#define TF_CLUIE_CURRENTPAGE      0x00000020
#define TF_RIUIE_CONTEXT                 0x00000001
#define TF_RIUIE_STRING                  0x00000002
#define TF_RIUIE_MAXREADINGSTRINGLENGTH  0x00000004
#define TF_RIUIE_ERRORINDEX              0x00000008
#define TF_RIUIE_VERTICALORDER           0x00000010
#define TF_CONVERSIONMODE_ALPHANUMERIC        0x0000
#define TF_CONVERSIONMODE_NATIVE              0x0001
#define TF_CONVERSIONMODE_KATAKANA            0x0002
#define TF_CONVERSIONMODE_FULLSHAPE           0x0008
#define TF_CONVERSIONMODE_ROMAN               0x0010
#define TF_CONVERSIONMODE_CHARCODE            0x0020
#define TF_CONVERSIONMODE_SOFTKEYBOARD        0x0080
#define TF_CONVERSIONMODE_NOCONVERSION        0x0100
#define TF_CONVERSIONMODE_EUDC                0x0200
#define TF_CONVERSIONMODE_SYMBOL              0x0400
#define TF_CONVERSIONMODE_FIXED               0x0800
#define TF_SENTENCEMODE_NONE                  0x0000
#define TF_SENTENCEMODE_PLAURALCLAUSE         0x0001
#define TF_SENTENCEMODE_SINGLECONVERT         0x0002
#define TF_SENTENCEMODE_AUTOMATIC             0x0004
#define TF_SENTENCEMODE_PHRASEPREDICT         0x0008
#define TF_SENTENCEMODE_CONVERSATION          0x0010

#define TF_TRANSITORYEXTENSION_NONE           0x0000
#define TF_TRANSITORYEXTENSION_FLOATING       0x0001
#define TF_TRANSITORYEXTENSION_ATSELECTION    0x0002

#define TF_PROFILETYPE_INPUTPROCESSOR         0x0001
#define TF_PROFILETYPE_KEYBOARDLAYOUT         0x0002
#define TF_RIP_FLAG_FREEUNUSEDLIBRARIES         0x00000001
#define TF_IPP_FLAG_ACTIVE                      0x00000001
#define TF_IPP_FLAG_ENABLED                     0x00000002
#define TF_IPP_FLAG_SUBSTITUTEDBYINPUTPROCESSOR 0x00000004
#define TF_IPP_CAPS_DISABLEONTRANSITORY         0x00000001
#define TF_IPP_CAPS_SECUREMODESUPPORT           0x00000002
#define TF_IPP_CAPS_UIELEMENTENABLED            0x00000004
#define TF_IPP_CAPS_COMLESSSUPPORT              0x00000008
#define TF_IPP_CAPS_WOW16SUPPORT                0x00000010
#define TF_IPPMF_FORPROCESS                     0x10000000
#define TF_IPPMF_FORSESSION                     0x20000000
#define TF_IPPMF_FORSYSTEMALL                   0x40000000
#define TF_IPPMF_ENABLEPROFILE                  0x00000001
#define TF_IPPMF_DISABLEPROFILE                 0x00000002
#define TF_IPPMF_DONTCARECURRENTINPUTLANGUAGE   0x00000004
#define TF_RP_HIDDENINSETTINGUI                 0x00000002
#define TF_RP_LOCALPROCESS                      0x00000004
#define TF_RP_LOCALTHREAD                       0x00000008
#define TF_RP_SUBITEMINSETTINGUI                0x00000010
#define TF_URP_ALLPROFILES                      0x00000002
#define TF_URP_LOCALPROCESS                     0x00000004
#define TF_URP_LOCALTHREAD                      0x00000008
#define TF_IPSINK_FLAG_ACTIVE                   0x0001
#ifdef __cplusplus
}
#endif  /* __cplusplus */

#if 0
typedef /* [uuid] */  DECLSPEC_UUID("4f5d560f-5ab5-4dde-8c4d-404592857ab0") UINT_PTR HKL;

#endif



























typedef /* [uuid] */  DECLSPEC_UUID("7213778c-7bb0-4270-b050-6189ee594e97") DWORD TfEditCookie;

#define	TF_INVALID_EDIT_COOKIE	( 0 )

typedef /* [uuid] */  DECLSPEC_UUID("88a9c478-f3ec-4763-8345-cd9250443f8d") DWORD TfGuidAtom;

typedef /* [uuid] */  DECLSPEC_UUID("de403c21-89fd-4f85-8b87-64584d063fbc") DWORD TfClientId;

typedef /* [uuid] */  DECLSPEC_UUID("e26d9e1d-691e-4f29-90d7-338dcf1f8cef") struct TF_PERSISTENT_PROPERTY_HEADER_ACP
    {
    GUID guidType;
    LONG ichStart;
    LONG cch;
    ULONG cb;
    DWORD dwPrivate;
    CLSID clsidTIP;
    } 	TF_PERSISTENT_PROPERTY_HEADER_ACP;

typedef /* [uuid] */  DECLSPEC_UUID("e1b5808d-1e46-4c19-84dc-68c5f5978cc8") struct TF_LANGUAGEPROFILE
    {
    CLSID clsid;
    LANGID langid;
    GUID catid;
    BOOL fActive;
    GUID guidProfile;
    } 	TF_LANGUAGEPROFILE;

typedef /* [public][public][public][public][public][public][public][public][public][public][public][uuid] */  DECLSPEC_UUID("5a886226-ae9a-489b-b991-2b1e25ee59a9") 
enum __MIDL___MIDL_itf_msctf_0000_0000_0001
    {	TF_ANCHOR_START	= 0,
	TF_ANCHOR_END	= 1
    } 	TfAnchor;



extern RPC_IF_HANDLE __MIDL_itf_msctf_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_msctf_0000_0000_v0_0_s_ifspec;

#ifndef __ITfThreadMgr_INTERFACE_DEFINED__
#define __ITfThreadMgr_INTERFACE_DEFINED__

/* interface ITfThreadMgr */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITfThreadMgr;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("aa80e801-2021-11d2-93e0-0060b067b86e")
    ITfThreadMgr : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Activate( 
            /* [out] */ __RPC__out TfClientId *ptid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Deactivate( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateDocumentMgr( 
            /* [out] */ __RPC__deref_out_opt ITfDocumentMgr **ppdim) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumDocumentMgrs( 
            /* [out] */ __RPC__deref_out_opt IEnumTfDocumentMgrs **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetFocus( 
            /* [out] */ __RPC__deref_out_opt ITfDocumentMgr **ppdimFocus) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetFocus( 
            /* [in] */ __RPC__in_opt ITfDocumentMgr *pdimFocus) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AssociateFocus( 
            /* [in] */ __RPC__in HWND hwnd,
            /* [unique][in] */ __RPC__in_opt ITfDocumentMgr *pdimNew,
            /* [out] */ __RPC__deref_out_opt ITfDocumentMgr **ppdimPrev) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsThreadFocus( 
            /* [out] */ __RPC__out BOOL *pfThreadFocus) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetFunctionProvider( 
            /* [in] */ __RPC__in REFCLSID clsid,
            /* [out] */ __RPC__deref_out_opt ITfFunctionProvider **ppFuncProv) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumFunctionProviders( 
            /* [out] */ __RPC__deref_out_opt IEnumTfFunctionProviders **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetGlobalCompartment( 
            /* [out] */ __RPC__deref_out_opt ITfCompartmentMgr **ppCompMgr) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfThreadMgrVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfThreadMgr * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfThreadMgr * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfThreadMgr * This);
        
        HRESULT ( STDMETHODCALLTYPE *Activate )( 
            __RPC__in ITfThreadMgr * This,
            /* [out] */ __RPC__out TfClientId *ptid);
        
        HRESULT ( STDMETHODCALLTYPE *Deactivate )( 
            __RPC__in ITfThreadMgr * This);
        
        HRESULT ( STDMETHODCALLTYPE *CreateDocumentMgr )( 
            __RPC__in ITfThreadMgr * This,
            /* [out] */ __RPC__deref_out_opt ITfDocumentMgr **ppdim);
        
        HRESULT ( STDMETHODCALLTYPE *EnumDocumentMgrs )( 
            __RPC__in ITfThreadMgr * This,
            /* [out] */ __RPC__deref_out_opt IEnumTfDocumentMgrs **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetFocus )( 
            __RPC__in ITfThreadMgr * This,
            /* [out] */ __RPC__deref_out_opt ITfDocumentMgr **ppdimFocus);
        
        HRESULT ( STDMETHODCALLTYPE *SetFocus )( 
            __RPC__in ITfThreadMgr * This,
            /* [in] */ __RPC__in_opt ITfDocumentMgr *pdimFocus);
        
        HRESULT ( STDMETHODCALLTYPE *AssociateFocus )( 
            __RPC__in ITfThreadMgr * This,
            /* [in] */ __RPC__in HWND hwnd,
            /* [unique][in] */ __RPC__in_opt ITfDocumentMgr *pdimNew,
            /* [out] */ __RPC__deref_out_opt ITfDocumentMgr **ppdimPrev);
        
        HRESULT ( STDMETHODCALLTYPE *IsThreadFocus )( 
            __RPC__in ITfThreadMgr * This,
            /* [out] */ __RPC__out BOOL *pfThreadFocus);
        
        HRESULT ( STDMETHODCALLTYPE *GetFunctionProvider )( 
            __RPC__in ITfThreadMgr * This,
            /* [in] */ __RPC__in REFCLSID clsid,
            /* [out] */ __RPC__deref_out_opt ITfFunctionProvider **ppFuncProv);
        
        HRESULT ( STDMETHODCALLTYPE *EnumFunctionProviders )( 
            __RPC__in ITfThreadMgr * This,
            /* [out] */ __RPC__deref_out_opt IEnumTfFunctionProviders **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetGlobalCompartment )( 
            __RPC__in ITfThreadMgr * This,
            /* [out] */ __RPC__deref_out_opt ITfCompartmentMgr **ppCompMgr);
        
        END_INTERFACE
    } ITfThreadMgrVtbl;

    interface ITfThreadMgr
    {
        CONST_VTBL struct ITfThreadMgrVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfThreadMgr_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfThreadMgr_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfThreadMgr_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfThreadMgr_Activate(This,ptid)	\
    ( (This)->lpVtbl -> Activate(This,ptid) ) 

#define ITfThreadMgr_Deactivate(This)	\
    ( (This)->lpVtbl -> Deactivate(This) ) 

#define ITfThreadMgr_CreateDocumentMgr(This,ppdim)	\
    ( (This)->lpVtbl -> CreateDocumentMgr(This,ppdim) ) 

#define ITfThreadMgr_EnumDocumentMgrs(This,ppEnum)	\
    ( (This)->lpVtbl -> EnumDocumentMgrs(This,ppEnum) ) 

#define ITfThreadMgr_GetFocus(This,ppdimFocus)	\
    ( (This)->lpVtbl -> GetFocus(This,ppdimFocus) ) 

#define ITfThreadMgr_SetFocus(This,pdimFocus)	\
    ( (This)->lpVtbl -> SetFocus(This,pdimFocus) ) 

#define ITfThreadMgr_AssociateFocus(This,hwnd,pdimNew,ppdimPrev)	\
    ( (This)->lpVtbl -> AssociateFocus(This,hwnd,pdimNew,ppdimPrev) ) 

#define ITfThreadMgr_IsThreadFocus(This,pfThreadFocus)	\
    ( (This)->lpVtbl -> IsThreadFocus(This,pfThreadFocus) ) 

#define ITfThreadMgr_GetFunctionProvider(This,clsid,ppFuncProv)	\
    ( (This)->lpVtbl -> GetFunctionProvider(This,clsid,ppFuncProv) ) 

#define ITfThreadMgr_EnumFunctionProviders(This,ppEnum)	\
    ( (This)->lpVtbl -> EnumFunctionProviders(This,ppEnum) ) 

#define ITfThreadMgr_GetGlobalCompartment(This,ppCompMgr)	\
    ( (This)->lpVtbl -> GetGlobalCompartment(This,ppCompMgr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfThreadMgr_INTERFACE_DEFINED__ */


#ifndef __ITfThreadMgrEx_INTERFACE_DEFINED__
#define __ITfThreadMgrEx_INTERFACE_DEFINED__

/* interface ITfThreadMgrEx */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITfThreadMgrEx;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3e90ade3-7594-4cb0-bb58-69628f5f458c")
    ITfThreadMgrEx : public ITfThreadMgr
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ActivateEx( 
            /* [out] */ __RPC__out TfClientId *ptid,
            /* [in] */ DWORD dwFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetActiveFlags( 
            /* [out] */ __RPC__out DWORD *lpdwFlags) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfThreadMgrExVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfThreadMgrEx * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfThreadMgrEx * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfThreadMgrEx * This);
        
        HRESULT ( STDMETHODCALLTYPE *Activate )( 
            __RPC__in ITfThreadMgrEx * This,
            /* [out] */ __RPC__out TfClientId *ptid);
        
        HRESULT ( STDMETHODCALLTYPE *Deactivate )( 
            __RPC__in ITfThreadMgrEx * This);
        
        HRESULT ( STDMETHODCALLTYPE *CreateDocumentMgr )( 
            __RPC__in ITfThreadMgrEx * This,
            /* [out] */ __RPC__deref_out_opt ITfDocumentMgr **ppdim);
        
        HRESULT ( STDMETHODCALLTYPE *EnumDocumentMgrs )( 
            __RPC__in ITfThreadMgrEx * This,
            /* [out] */ __RPC__deref_out_opt IEnumTfDocumentMgrs **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetFocus )( 
            __RPC__in ITfThreadMgrEx * This,
            /* [out] */ __RPC__deref_out_opt ITfDocumentMgr **ppdimFocus);
        
        HRESULT ( STDMETHODCALLTYPE *SetFocus )( 
            __RPC__in ITfThreadMgrEx * This,
            /* [in] */ __RPC__in_opt ITfDocumentMgr *pdimFocus);
        
        HRESULT ( STDMETHODCALLTYPE *AssociateFocus )( 
            __RPC__in ITfThreadMgrEx * This,
            /* [in] */ __RPC__in HWND hwnd,
            /* [unique][in] */ __RPC__in_opt ITfDocumentMgr *pdimNew,
            /* [out] */ __RPC__deref_out_opt ITfDocumentMgr **ppdimPrev);
        
        HRESULT ( STDMETHODCALLTYPE *IsThreadFocus )( 
            __RPC__in ITfThreadMgrEx * This,
            /* [out] */ __RPC__out BOOL *pfThreadFocus);
        
        HRESULT ( STDMETHODCALLTYPE *GetFunctionProvider )( 
            __RPC__in ITfThreadMgrEx * This,
            /* [in] */ __RPC__in REFCLSID clsid,
            /* [out] */ __RPC__deref_out_opt ITfFunctionProvider **ppFuncProv);
        
        HRESULT ( STDMETHODCALLTYPE *EnumFunctionProviders )( 
            __RPC__in ITfThreadMgrEx * This,
            /* [out] */ __RPC__deref_out_opt IEnumTfFunctionProviders **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetGlobalCompartment )( 
            __RPC__in ITfThreadMgrEx * This,
            /* [out] */ __RPC__deref_out_opt ITfCompartmentMgr **ppCompMgr);
        
        HRESULT ( STDMETHODCALLTYPE *ActivateEx )( 
            __RPC__in ITfThreadMgrEx * This,
            /* [out] */ __RPC__out TfClientId *ptid,
            /* [in] */ DWORD dwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *GetActiveFlags )( 
            __RPC__in ITfThreadMgrEx * This,
            /* [out] */ __RPC__out DWORD *lpdwFlags);
        
        END_INTERFACE
    } ITfThreadMgrExVtbl;

    interface ITfThreadMgrEx
    {
        CONST_VTBL struct ITfThreadMgrExVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfThreadMgrEx_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfThreadMgrEx_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfThreadMgrEx_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfThreadMgrEx_Activate(This,ptid)	\
    ( (This)->lpVtbl -> Activate(This,ptid) ) 

#define ITfThreadMgrEx_Deactivate(This)	\
    ( (This)->lpVtbl -> Deactivate(This) ) 

#define ITfThreadMgrEx_CreateDocumentMgr(This,ppdim)	\
    ( (This)->lpVtbl -> CreateDocumentMgr(This,ppdim) ) 

#define ITfThreadMgrEx_EnumDocumentMgrs(This,ppEnum)	\
    ( (This)->lpVtbl -> EnumDocumentMgrs(This,ppEnum) ) 

#define ITfThreadMgrEx_GetFocus(This,ppdimFocus)	\
    ( (This)->lpVtbl -> GetFocus(This,ppdimFocus) ) 

#define ITfThreadMgrEx_SetFocus(This,pdimFocus)	\
    ( (This)->lpVtbl -> SetFocus(This,pdimFocus) ) 

#define ITfThreadMgrEx_AssociateFocus(This,hwnd,pdimNew,ppdimPrev)	\
    ( (This)->lpVtbl -> AssociateFocus(This,hwnd,pdimNew,ppdimPrev) ) 

#define ITfThreadMgrEx_IsThreadFocus(This,pfThreadFocus)	\
    ( (This)->lpVtbl -> IsThreadFocus(This,pfThreadFocus) ) 

#define ITfThreadMgrEx_GetFunctionProvider(This,clsid,ppFuncProv)	\
    ( (This)->lpVtbl -> GetFunctionProvider(This,clsid,ppFuncProv) ) 

#define ITfThreadMgrEx_EnumFunctionProviders(This,ppEnum)	\
    ( (This)->lpVtbl -> EnumFunctionProviders(This,ppEnum) ) 

#define ITfThreadMgrEx_GetGlobalCompartment(This,ppCompMgr)	\
    ( (This)->lpVtbl -> GetGlobalCompartment(This,ppCompMgr) ) 


#define ITfThreadMgrEx_ActivateEx(This,ptid,dwFlags)	\
    ( (This)->lpVtbl -> ActivateEx(This,ptid,dwFlags) ) 

#define ITfThreadMgrEx_GetActiveFlags(This,lpdwFlags)	\
    ( (This)->lpVtbl -> GetActiveFlags(This,lpdwFlags) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfThreadMgrEx_INTERFACE_DEFINED__ */


#ifndef __ITfThreadMgrEventSink_INTERFACE_DEFINED__
#define __ITfThreadMgrEventSink_INTERFACE_DEFINED__

/* interface ITfThreadMgrEventSink */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITfThreadMgrEventSink;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("aa80e80e-2021-11d2-93e0-0060b067b86e")
    ITfThreadMgrEventSink : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnInitDocumentMgr( 
            /* [in] */ __RPC__in_opt ITfDocumentMgr *pdim) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnUninitDocumentMgr( 
            /* [in] */ __RPC__in_opt ITfDocumentMgr *pdim) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnSetFocus( 
            /* [in] */ __RPC__in_opt ITfDocumentMgr *pdimFocus,
            /* [in] */ __RPC__in_opt ITfDocumentMgr *pdimPrevFocus) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnPushContext( 
            /* [in] */ __RPC__in_opt ITfContext *pic) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnPopContext( 
            /* [in] */ __RPC__in_opt ITfContext *pic) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfThreadMgrEventSinkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfThreadMgrEventSink * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfThreadMgrEventSink * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfThreadMgrEventSink * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnInitDocumentMgr )( 
            __RPC__in ITfThreadMgrEventSink * This,
            /* [in] */ __RPC__in_opt ITfDocumentMgr *pdim);
        
        HRESULT ( STDMETHODCALLTYPE *OnUninitDocumentMgr )( 
            __RPC__in ITfThreadMgrEventSink * This,
            /* [in] */ __RPC__in_opt ITfDocumentMgr *pdim);
        
        HRESULT ( STDMETHODCALLTYPE *OnSetFocus )( 
            __RPC__in ITfThreadMgrEventSink * This,
            /* [in] */ __RPC__in_opt ITfDocumentMgr *pdimFocus,
            /* [in] */ __RPC__in_opt ITfDocumentMgr *pdimPrevFocus);
        
        HRESULT ( STDMETHODCALLTYPE *OnPushContext )( 
            __RPC__in ITfThreadMgrEventSink * This,
            /* [in] */ __RPC__in_opt ITfContext *pic);
        
        HRESULT ( STDMETHODCALLTYPE *OnPopContext )( 
            __RPC__in ITfThreadMgrEventSink * This,
            /* [in] */ __RPC__in_opt ITfContext *pic);
        
        END_INTERFACE
    } ITfThreadMgrEventSinkVtbl;

    interface ITfThreadMgrEventSink
    {
        CONST_VTBL struct ITfThreadMgrEventSinkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfThreadMgrEventSink_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfThreadMgrEventSink_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfThreadMgrEventSink_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfThreadMgrEventSink_OnInitDocumentMgr(This,pdim)	\
    ( (This)->lpVtbl -> OnInitDocumentMgr(This,pdim) ) 

#define ITfThreadMgrEventSink_OnUninitDocumentMgr(This,pdim)	\
    ( (This)->lpVtbl -> OnUninitDocumentMgr(This,pdim) ) 

#define ITfThreadMgrEventSink_OnSetFocus(This,pdimFocus,pdimPrevFocus)	\
    ( (This)->lpVtbl -> OnSetFocus(This,pdimFocus,pdimPrevFocus) ) 

#define ITfThreadMgrEventSink_OnPushContext(This,pic)	\
    ( (This)->lpVtbl -> OnPushContext(This,pic) ) 

#define ITfThreadMgrEventSink_OnPopContext(This,pic)	\
    ( (This)->lpVtbl -> OnPopContext(This,pic) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfThreadMgrEventSink_INTERFACE_DEFINED__ */


#ifndef __ITfConfigureSystemKeystrokeFeed_INTERFACE_DEFINED__
#define __ITfConfigureSystemKeystrokeFeed_INTERFACE_DEFINED__

/* interface ITfConfigureSystemKeystrokeFeed */
/* [unique][uuid][local][object] */ 


EXTERN_C const IID IID_ITfConfigureSystemKeystrokeFeed;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0d2c969a-bc9c-437c-84ee-951c49b1a764")
    ITfConfigureSystemKeystrokeFeed : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE DisableSystemKeystrokeFeed( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnableSystemKeystrokeFeed( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfConfigureSystemKeystrokeFeedVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITfConfigureSystemKeystrokeFeed * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITfConfigureSystemKeystrokeFeed * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITfConfigureSystemKeystrokeFeed * This);
        
        HRESULT ( STDMETHODCALLTYPE *DisableSystemKeystrokeFeed )( 
            ITfConfigureSystemKeystrokeFeed * This);
        
        HRESULT ( STDMETHODCALLTYPE *EnableSystemKeystrokeFeed )( 
            ITfConfigureSystemKeystrokeFeed * This);
        
        END_INTERFACE
    } ITfConfigureSystemKeystrokeFeedVtbl;

    interface ITfConfigureSystemKeystrokeFeed
    {
        CONST_VTBL struct ITfConfigureSystemKeystrokeFeedVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfConfigureSystemKeystrokeFeed_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfConfigureSystemKeystrokeFeed_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfConfigureSystemKeystrokeFeed_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfConfigureSystemKeystrokeFeed_DisableSystemKeystrokeFeed(This)	\
    ( (This)->lpVtbl -> DisableSystemKeystrokeFeed(This) ) 

#define ITfConfigureSystemKeystrokeFeed_EnableSystemKeystrokeFeed(This)	\
    ( (This)->lpVtbl -> EnableSystemKeystrokeFeed(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfConfigureSystemKeystrokeFeed_INTERFACE_DEFINED__ */


#ifndef __IEnumTfDocumentMgrs_INTERFACE_DEFINED__
#define __IEnumTfDocumentMgrs_INTERFACE_DEFINED__

/* interface IEnumTfDocumentMgrs */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IEnumTfDocumentMgrs;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("aa80e808-2021-11d2-93e0-0060b067b86e")
    IEnumTfDocumentMgrs : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ __RPC__deref_out_opt IEnumTfDocumentMgrs **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG ulCount,
            /* [length_is][size_is][out] */ __RPC__out_ecount_part(ulCount, *pcFetched) ITfDocumentMgr **rgDocumentMgr,
            /* [out] */ __RPC__out ULONG *pcFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG ulCount) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumTfDocumentMgrsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IEnumTfDocumentMgrs * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IEnumTfDocumentMgrs * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IEnumTfDocumentMgrs * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            __RPC__in IEnumTfDocumentMgrs * This,
            /* [out] */ __RPC__deref_out_opt IEnumTfDocumentMgrs **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            __RPC__in IEnumTfDocumentMgrs * This,
            /* [in] */ ULONG ulCount,
            /* [length_is][size_is][out] */ __RPC__out_ecount_part(ulCount, *pcFetched) ITfDocumentMgr **rgDocumentMgr,
            /* [out] */ __RPC__out ULONG *pcFetched);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            __RPC__in IEnumTfDocumentMgrs * This);
        
        HRESULT ( STDMETHODCALLTYPE *Skip )( 
            __RPC__in IEnumTfDocumentMgrs * This,
            /* [in] */ ULONG ulCount);
        
        END_INTERFACE
    } IEnumTfDocumentMgrsVtbl;

    interface IEnumTfDocumentMgrs
    {
        CONST_VTBL struct IEnumTfDocumentMgrsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumTfDocumentMgrs_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IEnumTfDocumentMgrs_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IEnumTfDocumentMgrs_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IEnumTfDocumentMgrs_Clone(This,ppEnum)	\
    ( (This)->lpVtbl -> Clone(This,ppEnum) ) 

#define IEnumTfDocumentMgrs_Next(This,ulCount,rgDocumentMgr,pcFetched)	\
    ( (This)->lpVtbl -> Next(This,ulCount,rgDocumentMgr,pcFetched) ) 

#define IEnumTfDocumentMgrs_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define IEnumTfDocumentMgrs_Skip(This,ulCount)	\
    ( (This)->lpVtbl -> Skip(This,ulCount) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IEnumTfDocumentMgrs_INTERFACE_DEFINED__ */


#ifndef __ITfDocumentMgr_INTERFACE_DEFINED__
#define __ITfDocumentMgr_INTERFACE_DEFINED__

/* interface ITfDocumentMgr */
/* [unique][uuid][object] */ 

#define	TF_POPF_ALL	( 0x1 )


EXTERN_C const IID IID_ITfDocumentMgr;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("aa80e7f4-2021-11d2-93e0-0060b067b86e")
    ITfDocumentMgr : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE CreateContext( 
            /* [in] */ TfClientId tidOwner,
            /* [in] */ DWORD dwFlags,
            /* [unique][in] */ __RPC__in_opt IUnknown *punk,
            /* [out] */ __RPC__deref_out_opt ITfContext **ppic,
            /* [out] */ __RPC__out TfEditCookie *pecTextStore) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Push( 
            /* [in] */ __RPC__in_opt ITfContext *pic) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Pop( 
            /* [in] */ DWORD dwFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetTop( 
            /* [out] */ __RPC__deref_out_opt ITfContext **ppic) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetBase( 
            /* [out] */ __RPC__deref_out_opt ITfContext **ppic) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumContexts( 
            /* [out] */ __RPC__deref_out_opt IEnumTfContexts **ppEnum) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfDocumentMgrVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfDocumentMgr * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfDocumentMgr * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfDocumentMgr * This);
        
        HRESULT ( STDMETHODCALLTYPE *CreateContext )( 
            __RPC__in ITfDocumentMgr * This,
            /* [in] */ TfClientId tidOwner,
            /* [in] */ DWORD dwFlags,
            /* [unique][in] */ __RPC__in_opt IUnknown *punk,
            /* [out] */ __RPC__deref_out_opt ITfContext **ppic,
            /* [out] */ __RPC__out TfEditCookie *pecTextStore);
        
        HRESULT ( STDMETHODCALLTYPE *Push )( 
            __RPC__in ITfDocumentMgr * This,
            /* [in] */ __RPC__in_opt ITfContext *pic);
        
        HRESULT ( STDMETHODCALLTYPE *Pop )( 
            __RPC__in ITfDocumentMgr * This,
            /* [in] */ DWORD dwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *GetTop )( 
            __RPC__in ITfDocumentMgr * This,
            /* [out] */ __RPC__deref_out_opt ITfContext **ppic);
        
        HRESULT ( STDMETHODCALLTYPE *GetBase )( 
            __RPC__in ITfDocumentMgr * This,
            /* [out] */ __RPC__deref_out_opt ITfContext **ppic);
        
        HRESULT ( STDMETHODCALLTYPE *EnumContexts )( 
            __RPC__in ITfDocumentMgr * This,
            /* [out] */ __RPC__deref_out_opt IEnumTfContexts **ppEnum);
        
        END_INTERFACE
    } ITfDocumentMgrVtbl;

    interface ITfDocumentMgr
    {
        CONST_VTBL struct ITfDocumentMgrVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfDocumentMgr_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfDocumentMgr_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfDocumentMgr_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfDocumentMgr_CreateContext(This,tidOwner,dwFlags,punk,ppic,pecTextStore)	\
    ( (This)->lpVtbl -> CreateContext(This,tidOwner,dwFlags,punk,ppic,pecTextStore) ) 

#define ITfDocumentMgr_Push(This,pic)	\
    ( (This)->lpVtbl -> Push(This,pic) ) 

#define ITfDocumentMgr_Pop(This,dwFlags)	\
    ( (This)->lpVtbl -> Pop(This,dwFlags) ) 

#define ITfDocumentMgr_GetTop(This,ppic)	\
    ( (This)->lpVtbl -> GetTop(This,ppic) ) 

#define ITfDocumentMgr_GetBase(This,ppic)	\
    ( (This)->lpVtbl -> GetBase(This,ppic) ) 

#define ITfDocumentMgr_EnumContexts(This,ppEnum)	\
    ( (This)->lpVtbl -> EnumContexts(This,ppEnum) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfDocumentMgr_INTERFACE_DEFINED__ */


#ifndef __IEnumTfContexts_INTERFACE_DEFINED__
#define __IEnumTfContexts_INTERFACE_DEFINED__

/* interface IEnumTfContexts */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IEnumTfContexts;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8f1a7ea6-1654-4502-a86e-b2902344d507")
    IEnumTfContexts : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ __RPC__deref_out_opt IEnumTfContexts **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG ulCount,
            /* [length_is][size_is][out] */ __RPC__out_ecount_part(ulCount, *pcFetched) ITfContext **rgContext,
            /* [out] */ __RPC__out ULONG *pcFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG ulCount) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumTfContextsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IEnumTfContexts * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IEnumTfContexts * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IEnumTfContexts * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            __RPC__in IEnumTfContexts * This,
            /* [out] */ __RPC__deref_out_opt IEnumTfContexts **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            __RPC__in IEnumTfContexts * This,
            /* [in] */ ULONG ulCount,
            /* [length_is][size_is][out] */ __RPC__out_ecount_part(ulCount, *pcFetched) ITfContext **rgContext,
            /* [out] */ __RPC__out ULONG *pcFetched);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            __RPC__in IEnumTfContexts * This);
        
        HRESULT ( STDMETHODCALLTYPE *Skip )( 
            __RPC__in IEnumTfContexts * This,
            /* [in] */ ULONG ulCount);
        
        END_INTERFACE
    } IEnumTfContextsVtbl;

    interface IEnumTfContexts
    {
        CONST_VTBL struct IEnumTfContextsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumTfContexts_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IEnumTfContexts_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IEnumTfContexts_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IEnumTfContexts_Clone(This,ppEnum)	\
    ( (This)->lpVtbl -> Clone(This,ppEnum) ) 

#define IEnumTfContexts_Next(This,ulCount,rgContext,pcFetched)	\
    ( (This)->lpVtbl -> Next(This,ulCount,rgContext,pcFetched) ) 

#define IEnumTfContexts_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define IEnumTfContexts_Skip(This,ulCount)	\
    ( (This)->lpVtbl -> Skip(This,ulCount) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IEnumTfContexts_INTERFACE_DEFINED__ */


#ifndef __ITfCompositionView_INTERFACE_DEFINED__
#define __ITfCompositionView_INTERFACE_DEFINED__

/* interface ITfCompositionView */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITfCompositionView;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D7540241-F9A1-4364-BEFC-DBCD2C4395B7")
    ITfCompositionView : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetOwnerClsid( 
            /* [out] */ __RPC__out CLSID *pclsid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetRange( 
            /* [out] */ __RPC__deref_out_opt ITfRange **ppRange) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfCompositionViewVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfCompositionView * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfCompositionView * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfCompositionView * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetOwnerClsid )( 
            __RPC__in ITfCompositionView * This,
            /* [out] */ __RPC__out CLSID *pclsid);
        
        HRESULT ( STDMETHODCALLTYPE *GetRange )( 
            __RPC__in ITfCompositionView * This,
            /* [out] */ __RPC__deref_out_opt ITfRange **ppRange);
        
        END_INTERFACE
    } ITfCompositionViewVtbl;

    interface ITfCompositionView
    {
        CONST_VTBL struct ITfCompositionViewVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfCompositionView_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfCompositionView_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfCompositionView_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfCompositionView_GetOwnerClsid(This,pclsid)	\
    ( (This)->lpVtbl -> GetOwnerClsid(This,pclsid) ) 

#define ITfCompositionView_GetRange(This,ppRange)	\
    ( (This)->lpVtbl -> GetRange(This,ppRange) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfCompositionView_INTERFACE_DEFINED__ */


#ifndef __IEnumITfCompositionView_INTERFACE_DEFINED__
#define __IEnumITfCompositionView_INTERFACE_DEFINED__

/* interface IEnumITfCompositionView */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IEnumITfCompositionView;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5EFD22BA-7838-46CB-88E2-CADB14124F8F")
    IEnumITfCompositionView : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ __RPC__deref_out_opt IEnumITfCompositionView **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG ulCount,
            /* [length_is][size_is][out] */ __RPC__out_ecount_part(ulCount, *pcFetched) ITfCompositionView **rgCompositionView,
            /* [out] */ __RPC__out ULONG *pcFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG ulCount) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumITfCompositionViewVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IEnumITfCompositionView * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IEnumITfCompositionView * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IEnumITfCompositionView * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            __RPC__in IEnumITfCompositionView * This,
            /* [out] */ __RPC__deref_out_opt IEnumITfCompositionView **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            __RPC__in IEnumITfCompositionView * This,
            /* [in] */ ULONG ulCount,
            /* [length_is][size_is][out] */ __RPC__out_ecount_part(ulCount, *pcFetched) ITfCompositionView **rgCompositionView,
            /* [out] */ __RPC__out ULONG *pcFetched);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            __RPC__in IEnumITfCompositionView * This);
        
        HRESULT ( STDMETHODCALLTYPE *Skip )( 
            __RPC__in IEnumITfCompositionView * This,
            /* [in] */ ULONG ulCount);
        
        END_INTERFACE
    } IEnumITfCompositionViewVtbl;

    interface IEnumITfCompositionView
    {
        CONST_VTBL struct IEnumITfCompositionViewVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumITfCompositionView_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IEnumITfCompositionView_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IEnumITfCompositionView_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IEnumITfCompositionView_Clone(This,ppEnum)	\
    ( (This)->lpVtbl -> Clone(This,ppEnum) ) 

#define IEnumITfCompositionView_Next(This,ulCount,rgCompositionView,pcFetched)	\
    ( (This)->lpVtbl -> Next(This,ulCount,rgCompositionView,pcFetched) ) 

#define IEnumITfCompositionView_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define IEnumITfCompositionView_Skip(This,ulCount)	\
    ( (This)->lpVtbl -> Skip(This,ulCount) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IEnumITfCompositionView_INTERFACE_DEFINED__ */


#ifndef __ITfComposition_INTERFACE_DEFINED__
#define __ITfComposition_INTERFACE_DEFINED__

/* interface ITfComposition */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITfComposition;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("20168D64-5A8F-4A5A-B7BD-CFA29F4D0FD9")
    ITfComposition : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetRange( 
            /* [out] */ __RPC__deref_out_opt ITfRange **ppRange) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ShiftStart( 
            /* [in] */ TfEditCookie ecWrite,
            /* [in] */ __RPC__in_opt ITfRange *pNewStart) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ShiftEnd( 
            /* [in] */ TfEditCookie ecWrite,
            /* [in] */ __RPC__in_opt ITfRange *pNewEnd) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EndComposition( 
            /* [in] */ TfEditCookie ecWrite) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfCompositionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfComposition * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfComposition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfComposition * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetRange )( 
            __RPC__in ITfComposition * This,
            /* [out] */ __RPC__deref_out_opt ITfRange **ppRange);
        
        HRESULT ( STDMETHODCALLTYPE *ShiftStart )( 
            __RPC__in ITfComposition * This,
            /* [in] */ TfEditCookie ecWrite,
            /* [in] */ __RPC__in_opt ITfRange *pNewStart);
        
        HRESULT ( STDMETHODCALLTYPE *ShiftEnd )( 
            __RPC__in ITfComposition * This,
            /* [in] */ TfEditCookie ecWrite,
            /* [in] */ __RPC__in_opt ITfRange *pNewEnd);
        
        HRESULT ( STDMETHODCALLTYPE *EndComposition )( 
            __RPC__in ITfComposition * This,
            /* [in] */ TfEditCookie ecWrite);
        
        END_INTERFACE
    } ITfCompositionVtbl;

    interface ITfComposition
    {
        CONST_VTBL struct ITfCompositionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfComposition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfComposition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfComposition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfComposition_GetRange(This,ppRange)	\
    ( (This)->lpVtbl -> GetRange(This,ppRange) ) 

#define ITfComposition_ShiftStart(This,ecWrite,pNewStart)	\
    ( (This)->lpVtbl -> ShiftStart(This,ecWrite,pNewStart) ) 

#define ITfComposition_ShiftEnd(This,ecWrite,pNewEnd)	\
    ( (This)->lpVtbl -> ShiftEnd(This,ecWrite,pNewEnd) ) 

#define ITfComposition_EndComposition(This,ecWrite)	\
    ( (This)->lpVtbl -> EndComposition(This,ecWrite) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfComposition_INTERFACE_DEFINED__ */


#ifndef __ITfCompositionSink_INTERFACE_DEFINED__
#define __ITfCompositionSink_INTERFACE_DEFINED__

/* interface ITfCompositionSink */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITfCompositionSink;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("A781718C-579A-4B15-A280-32B8577ACC5E")
    ITfCompositionSink : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnCompositionTerminated( 
            /* [in] */ TfEditCookie ecWrite,
            /* [in] */ __RPC__in_opt ITfComposition *pComposition) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfCompositionSinkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfCompositionSink * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfCompositionSink * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfCompositionSink * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnCompositionTerminated )( 
            __RPC__in ITfCompositionSink * This,
            /* [in] */ TfEditCookie ecWrite,
            /* [in] */ __RPC__in_opt ITfComposition *pComposition);
        
        END_INTERFACE
    } ITfCompositionSinkVtbl;

    interface ITfCompositionSink
    {
        CONST_VTBL struct ITfCompositionSinkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfCompositionSink_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfCompositionSink_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfCompositionSink_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfCompositionSink_OnCompositionTerminated(This,ecWrite,pComposition)	\
    ( (This)->lpVtbl -> OnCompositionTerminated(This,ecWrite,pComposition) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfCompositionSink_INTERFACE_DEFINED__ */


#ifndef __ITfContextComposition_INTERFACE_DEFINED__
#define __ITfContextComposition_INTERFACE_DEFINED__

/* interface ITfContextComposition */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITfContextComposition;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D40C8AAE-AC92-4FC7-9A11-0EE0E23AA39B")
    ITfContextComposition : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE StartComposition( 
            /* [in] */ TfEditCookie ecWrite,
            /* [in] */ __RPC__in_opt ITfRange *pCompositionRange,
            /* [in] */ __RPC__in_opt ITfCompositionSink *pSink,
            /* [out] */ __RPC__deref_out_opt ITfComposition **ppComposition) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumCompositions( 
            /* [out] */ __RPC__deref_out_opt IEnumITfCompositionView **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FindComposition( 
            /* [in] */ TfEditCookie ecRead,
            /* [in] */ __RPC__in_opt ITfRange *pTestRange,
            /* [out] */ __RPC__deref_out_opt IEnumITfCompositionView **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE TakeOwnership( 
            /* [in] */ TfEditCookie ecWrite,
            /* [in] */ __RPC__in_opt ITfCompositionView *pComposition,
            /* [in] */ __RPC__in_opt ITfCompositionSink *pSink,
            /* [out] */ __RPC__deref_out_opt ITfComposition **ppComposition) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfContextCompositionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfContextComposition * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfContextComposition * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfContextComposition * This);
        
        HRESULT ( STDMETHODCALLTYPE *StartComposition )( 
            __RPC__in ITfContextComposition * This,
            /* [in] */ TfEditCookie ecWrite,
            /* [in] */ __RPC__in_opt ITfRange *pCompositionRange,
            /* [in] */ __RPC__in_opt ITfCompositionSink *pSink,
            /* [out] */ __RPC__deref_out_opt ITfComposition **ppComposition);
        
        HRESULT ( STDMETHODCALLTYPE *EnumCompositions )( 
            __RPC__in ITfContextComposition * This,
            /* [out] */ __RPC__deref_out_opt IEnumITfCompositionView **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *FindComposition )( 
            __RPC__in ITfContextComposition * This,
            /* [in] */ TfEditCookie ecRead,
            /* [in] */ __RPC__in_opt ITfRange *pTestRange,
            /* [out] */ __RPC__deref_out_opt IEnumITfCompositionView **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *TakeOwnership )( 
            __RPC__in ITfContextComposition * This,
            /* [in] */ TfEditCookie ecWrite,
            /* [in] */ __RPC__in_opt ITfCompositionView *pComposition,
            /* [in] */ __RPC__in_opt ITfCompositionSink *pSink,
            /* [out] */ __RPC__deref_out_opt ITfComposition **ppComposition);
        
        END_INTERFACE
    } ITfContextCompositionVtbl;

    interface ITfContextComposition
    {
        CONST_VTBL struct ITfContextCompositionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfContextComposition_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfContextComposition_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfContextComposition_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfContextComposition_StartComposition(This,ecWrite,pCompositionRange,pSink,ppComposition)	\
    ( (This)->lpVtbl -> StartComposition(This,ecWrite,pCompositionRange,pSink,ppComposition) ) 

#define ITfContextComposition_EnumCompositions(This,ppEnum)	\
    ( (This)->lpVtbl -> EnumCompositions(This,ppEnum) ) 

#define ITfContextComposition_FindComposition(This,ecRead,pTestRange,ppEnum)	\
    ( (This)->lpVtbl -> FindComposition(This,ecRead,pTestRange,ppEnum) ) 

#define ITfContextComposition_TakeOwnership(This,ecWrite,pComposition,pSink,ppComposition)	\
    ( (This)->lpVtbl -> TakeOwnership(This,ecWrite,pComposition,pSink,ppComposition) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfContextComposition_INTERFACE_DEFINED__ */


#ifndef __ITfContextOwnerCompositionServices_INTERFACE_DEFINED__
#define __ITfContextOwnerCompositionServices_INTERFACE_DEFINED__

/* interface ITfContextOwnerCompositionServices */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITfContextOwnerCompositionServices;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("86462810-593B-4916-9764-19C08E9CE110")
    ITfContextOwnerCompositionServices : public ITfContextComposition
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE TerminateComposition( 
            /* [in] */ __RPC__in_opt ITfCompositionView *pComposition) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfContextOwnerCompositionServicesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfContextOwnerCompositionServices * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfContextOwnerCompositionServices * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfContextOwnerCompositionServices * This);
        
        HRESULT ( STDMETHODCALLTYPE *StartComposition )( 
            __RPC__in ITfContextOwnerCompositionServices * This,
            /* [in] */ TfEditCookie ecWrite,
            /* [in] */ __RPC__in_opt ITfRange *pCompositionRange,
            /* [in] */ __RPC__in_opt ITfCompositionSink *pSink,
            /* [out] */ __RPC__deref_out_opt ITfComposition **ppComposition);
        
        HRESULT ( STDMETHODCALLTYPE *EnumCompositions )( 
            __RPC__in ITfContextOwnerCompositionServices * This,
            /* [out] */ __RPC__deref_out_opt IEnumITfCompositionView **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *FindComposition )( 
            __RPC__in ITfContextOwnerCompositionServices * This,
            /* [in] */ TfEditCookie ecRead,
            /* [in] */ __RPC__in_opt ITfRange *pTestRange,
            /* [out] */ __RPC__deref_out_opt IEnumITfCompositionView **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *TakeOwnership )( 
            __RPC__in ITfContextOwnerCompositionServices * This,
            /* [in] */ TfEditCookie ecWrite,
            /* [in] */ __RPC__in_opt ITfCompositionView *pComposition,
            /* [in] */ __RPC__in_opt ITfCompositionSink *pSink,
            /* [out] */ __RPC__deref_out_opt ITfComposition **ppComposition);
        
        HRESULT ( STDMETHODCALLTYPE *TerminateComposition )( 
            __RPC__in ITfContextOwnerCompositionServices * This,
            /* [in] */ __RPC__in_opt ITfCompositionView *pComposition);
        
        END_INTERFACE
    } ITfContextOwnerCompositionServicesVtbl;

    interface ITfContextOwnerCompositionServices
    {
        CONST_VTBL struct ITfContextOwnerCompositionServicesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfContextOwnerCompositionServices_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfContextOwnerCompositionServices_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfContextOwnerCompositionServices_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfContextOwnerCompositionServices_StartComposition(This,ecWrite,pCompositionRange,pSink,ppComposition)	\
    ( (This)->lpVtbl -> StartComposition(This,ecWrite,pCompositionRange,pSink,ppComposition) ) 

#define ITfContextOwnerCompositionServices_EnumCompositions(This,ppEnum)	\
    ( (This)->lpVtbl -> EnumCompositions(This,ppEnum) ) 

#define ITfContextOwnerCompositionServices_FindComposition(This,ecRead,pTestRange,ppEnum)	\
    ( (This)->lpVtbl -> FindComposition(This,ecRead,pTestRange,ppEnum) ) 

#define ITfContextOwnerCompositionServices_TakeOwnership(This,ecWrite,pComposition,pSink,ppComposition)	\
    ( (This)->lpVtbl -> TakeOwnership(This,ecWrite,pComposition,pSink,ppComposition) ) 


#define ITfContextOwnerCompositionServices_TerminateComposition(This,pComposition)	\
    ( (This)->lpVtbl -> TerminateComposition(This,pComposition) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfContextOwnerCompositionServices_INTERFACE_DEFINED__ */


#ifndef __ITfContextOwnerCompositionSink_INTERFACE_DEFINED__
#define __ITfContextOwnerCompositionSink_INTERFACE_DEFINED__

/* interface ITfContextOwnerCompositionSink */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITfContextOwnerCompositionSink;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5F20AA40-B57A-4F34-96AB-3576F377CC79")
    ITfContextOwnerCompositionSink : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnStartComposition( 
            /* [in] */ __RPC__in_opt ITfCompositionView *pComposition,
            /* [out] */ __RPC__out BOOL *pfOk) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnUpdateComposition( 
            /* [in] */ __RPC__in_opt ITfCompositionView *pComposition,
            /* [in] */ __RPC__in_opt ITfRange *pRangeNew) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnEndComposition( 
            /* [in] */ __RPC__in_opt ITfCompositionView *pComposition) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfContextOwnerCompositionSinkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfContextOwnerCompositionSink * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfContextOwnerCompositionSink * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfContextOwnerCompositionSink * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnStartComposition )( 
            __RPC__in ITfContextOwnerCompositionSink * This,
            /* [in] */ __RPC__in_opt ITfCompositionView *pComposition,
            /* [out] */ __RPC__out BOOL *pfOk);
        
        HRESULT ( STDMETHODCALLTYPE *OnUpdateComposition )( 
            __RPC__in ITfContextOwnerCompositionSink * This,
            /* [in] */ __RPC__in_opt ITfCompositionView *pComposition,
            /* [in] */ __RPC__in_opt ITfRange *pRangeNew);
        
        HRESULT ( STDMETHODCALLTYPE *OnEndComposition )( 
            __RPC__in ITfContextOwnerCompositionSink * This,
            /* [in] */ __RPC__in_opt ITfCompositionView *pComposition);
        
        END_INTERFACE
    } ITfContextOwnerCompositionSinkVtbl;

    interface ITfContextOwnerCompositionSink
    {
        CONST_VTBL struct ITfContextOwnerCompositionSinkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfContextOwnerCompositionSink_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfContextOwnerCompositionSink_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfContextOwnerCompositionSink_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfContextOwnerCompositionSink_OnStartComposition(This,pComposition,pfOk)	\
    ( (This)->lpVtbl -> OnStartComposition(This,pComposition,pfOk) ) 

#define ITfContextOwnerCompositionSink_OnUpdateComposition(This,pComposition,pRangeNew)	\
    ( (This)->lpVtbl -> OnUpdateComposition(This,pComposition,pRangeNew) ) 

#define ITfContextOwnerCompositionSink_OnEndComposition(This,pComposition)	\
    ( (This)->lpVtbl -> OnEndComposition(This,pComposition) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfContextOwnerCompositionSink_INTERFACE_DEFINED__ */


#ifndef __ITfContextView_INTERFACE_DEFINED__
#define __ITfContextView_INTERFACE_DEFINED__

/* interface ITfContextView */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITfContextView;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2433bf8e-0f9b-435c-ba2c-180611978c30")
    ITfContextView : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetRangeFromPoint( 
            /* [in] */ TfEditCookie ec,
            /* [in] */ __RPC__in const POINT *ppt,
            /* [in] */ DWORD dwFlags,
            /* [out] */ __RPC__deref_out_opt ITfRange **ppRange) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetTextExt( 
            /* [in] */ TfEditCookie ec,
            /* [in] */ __RPC__in_opt ITfRange *pRange,
            /* [out] */ __RPC__out RECT *prc,
            /* [out] */ __RPC__out BOOL *pfClipped) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetScreenExt( 
            /* [out] */ __RPC__out RECT *prc) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetWnd( 
            /* [out] */ __RPC__deref_out_opt HWND *phwnd) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfContextViewVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfContextView * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfContextView * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfContextView * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetRangeFromPoint )( 
            __RPC__in ITfContextView * This,
            /* [in] */ TfEditCookie ec,
            /* [in] */ __RPC__in const POINT *ppt,
            /* [in] */ DWORD dwFlags,
            /* [out] */ __RPC__deref_out_opt ITfRange **ppRange);
        
        HRESULT ( STDMETHODCALLTYPE *GetTextExt )( 
            __RPC__in ITfContextView * This,
            /* [in] */ TfEditCookie ec,
            /* [in] */ __RPC__in_opt ITfRange *pRange,
            /* [out] */ __RPC__out RECT *prc,
            /* [out] */ __RPC__out BOOL *pfClipped);
        
        HRESULT ( STDMETHODCALLTYPE *GetScreenExt )( 
            __RPC__in ITfContextView * This,
            /* [out] */ __RPC__out RECT *prc);
        
        HRESULT ( STDMETHODCALLTYPE *GetWnd )( 
            __RPC__in ITfContextView * This,
            /* [out] */ __RPC__deref_out_opt HWND *phwnd);
        
        END_INTERFACE
    } ITfContextViewVtbl;

    interface ITfContextView
    {
        CONST_VTBL struct ITfContextViewVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfContextView_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfContextView_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfContextView_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfContextView_GetRangeFromPoint(This,ec,ppt,dwFlags,ppRange)	\
    ( (This)->lpVtbl -> GetRangeFromPoint(This,ec,ppt,dwFlags,ppRange) ) 

#define ITfContextView_GetTextExt(This,ec,pRange,prc,pfClipped)	\
    ( (This)->lpVtbl -> GetTextExt(This,ec,pRange,prc,pfClipped) ) 

#define ITfContextView_GetScreenExt(This,prc)	\
    ( (This)->lpVtbl -> GetScreenExt(This,prc) ) 

#define ITfContextView_GetWnd(This,phwnd)	\
    ( (This)->lpVtbl -> GetWnd(This,phwnd) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfContextView_INTERFACE_DEFINED__ */


#ifndef __IEnumTfContextViews_INTERFACE_DEFINED__
#define __IEnumTfContextViews_INTERFACE_DEFINED__

/* interface IEnumTfContextViews */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IEnumTfContextViews;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("F0C0F8DD-CF38-44E1-BB0F-68CF0D551C78")
    IEnumTfContextViews : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ __RPC__deref_out_opt IEnumTfContextViews **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG ulCount,
            /* [length_is][size_is][out] */ __RPC__out_ecount_part(ulCount, *pcFetched) ITfContextView **rgViews,
            /* [out] */ __RPC__out ULONG *pcFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG ulCount) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumTfContextViewsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IEnumTfContextViews * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IEnumTfContextViews * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IEnumTfContextViews * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            __RPC__in IEnumTfContextViews * This,
            /* [out] */ __RPC__deref_out_opt IEnumTfContextViews **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            __RPC__in IEnumTfContextViews * This,
            /* [in] */ ULONG ulCount,
            /* [length_is][size_is][out] */ __RPC__out_ecount_part(ulCount, *pcFetched) ITfContextView **rgViews,
            /* [out] */ __RPC__out ULONG *pcFetched);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            __RPC__in IEnumTfContextViews * This);
        
        HRESULT ( STDMETHODCALLTYPE *Skip )( 
            __RPC__in IEnumTfContextViews * This,
            /* [in] */ ULONG ulCount);
        
        END_INTERFACE
    } IEnumTfContextViewsVtbl;

    interface IEnumTfContextViews
    {
        CONST_VTBL struct IEnumTfContextViewsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumTfContextViews_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IEnumTfContextViews_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IEnumTfContextViews_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IEnumTfContextViews_Clone(This,ppEnum)	\
    ( (This)->lpVtbl -> Clone(This,ppEnum) ) 

#define IEnumTfContextViews_Next(This,ulCount,rgViews,pcFetched)	\
    ( (This)->lpVtbl -> Next(This,ulCount,rgViews,pcFetched) ) 

#define IEnumTfContextViews_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define IEnumTfContextViews_Skip(This,ulCount)	\
    ( (This)->lpVtbl -> Skip(This,ulCount) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IEnumTfContextViews_INTERFACE_DEFINED__ */


#ifndef __ITfContext_INTERFACE_DEFINED__
#define __ITfContext_INTERFACE_DEFINED__

/* interface ITfContext */
/* [unique][uuid][object] */ 

#define	TF_ES_ASYNCDONTCARE	( 0 )

#define	TF_ES_SYNC	( 0x1 )

#define	TF_ES_READ	( 0x2 )

#define	TF_ES_READWRITE	( 0x6 )

#define	TF_ES_ASYNC	( 0x8 )

typedef /* [public][public][public][public][public][uuid] */  DECLSPEC_UUID("1690be9b-d3e9-49f6-8d8b-51b905af4c43") 
enum __MIDL_ITfContext_0001
    {	TF_AE_NONE	= 0,
	TF_AE_START	= 1,
	TF_AE_END	= 2
    } 	TfActiveSelEnd;

typedef /* [uuid] */  DECLSPEC_UUID("36ae42a4-6989-4bdc-b48a-6137b7bf2e42") struct TF_SELECTIONSTYLE
    {
    TfActiveSelEnd ase;
    BOOL fInterimChar;
    } 	TF_SELECTIONSTYLE;

typedef /* [uuid] */  DECLSPEC_UUID("75eb22f2-b0bf-46a8-8006-975a3b6efcf1") struct TF_SELECTION
    {
    ITfRange *range;
    TF_SELECTIONSTYLE style;
    } 	TF_SELECTION;

#define	TF_DEFAULT_SELECTION	( TS_DEFAULT_SELECTION )

#define	TF_SD_READONLY	( TS_SD_READONLY )

#define	TF_SD_LOADING	( TS_SD_LOADING )

#define	TF_SS_DISJOINTSEL	( TS_SS_DISJOINTSEL )

#define	TF_SS_REGIONS	( TS_SS_REGIONS )

#define	TF_SS_TRANSITORY	( TS_SS_TRANSITORY )

typedef /* [uuid] */  DECLSPEC_UUID("bc7d979a-846a-444d-afef-0a9bfa82b961") TS_STATUS TF_STATUS;


EXTERN_C const IID IID_ITfContext;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("aa80e7fd-2021-11d2-93e0-0060b067b86e")
    ITfContext : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE RequestEditSession( 
            /* [in] */ TfClientId tid,
            /* [in] */ __RPC__in_opt ITfEditSession *pes,
            /* [in] */ DWORD dwFlags,
            /* [out] */ __RPC__out HRESULT *phrSession) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE InWriteSession( 
            /* [in] */ TfClientId tid,
            /* [out] */ __RPC__out BOOL *pfWriteSession) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSelection( 
            /* [in] */ TfEditCookie ec,
            /* [in] */ ULONG ulIndex,
            /* [in] */ ULONG ulCount,
            /* [length_is][size_is][out] */ __RPC__out_ecount_part(ulCount, *pcFetched) TF_SELECTION *pSelection,
            /* [out] */ __RPC__out ULONG *pcFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetSelection( 
            /* [in] */ TfEditCookie ec,
            /* [in] */ ULONG ulCount,
            /* [size_is][in] */ __RPC__in_ecount_full(ulCount) const TF_SELECTION *pSelection) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetStart( 
            /* [in] */ TfEditCookie ec,
            /* [out] */ __RPC__deref_out_opt ITfRange **ppStart) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetEnd( 
            /* [in] */ TfEditCookie ec,
            /* [out] */ __RPC__deref_out_opt ITfRange **ppEnd) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetActiveView( 
            /* [out] */ __RPC__deref_out_opt ITfContextView **ppView) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumViews( 
            /* [out] */ __RPC__deref_out_opt IEnumTfContextViews **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetStatus( 
            /* [out] */ __RPC__out TF_STATUS *pdcs) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetProperty( 
            /* [in] */ __RPC__in REFGUID guidProp,
            /* [out] */ __RPC__deref_out_opt ITfProperty **ppProp) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAppProperty( 
            /* [in] */ __RPC__in REFGUID guidProp,
            /* [out] */ __RPC__deref_out_opt ITfReadOnlyProperty **ppProp) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE TrackProperties( 
            /* [size_is][in] */ __RPC__in_ecount_full(cProp) const GUID **prgProp,
            /* [in] */ ULONG cProp,
            /* [size_is][in] */ __RPC__in_ecount_full(cAppProp) const GUID **prgAppProp,
            /* [in] */ ULONG cAppProp,
            /* [out] */ __RPC__deref_out_opt ITfReadOnlyProperty **ppProperty) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumProperties( 
            /* [out] */ __RPC__deref_out_opt IEnumTfProperties **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDocumentMgr( 
            /* [out] */ __RPC__deref_out_opt ITfDocumentMgr **ppDm) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateRangeBackup( 
            /* [in] */ TfEditCookie ec,
            /* [in] */ __RPC__in_opt ITfRange *pRange,
            /* [out] */ __RPC__deref_out_opt ITfRangeBackup **ppBackup) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfContextVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfContext * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfContext * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfContext * This);
        
        HRESULT ( STDMETHODCALLTYPE *RequestEditSession )( 
            __RPC__in ITfContext * This,
            /* [in] */ TfClientId tid,
            /* [in] */ __RPC__in_opt ITfEditSession *pes,
            /* [in] */ DWORD dwFlags,
            /* [out] */ __RPC__out HRESULT *phrSession);
        
        HRESULT ( STDMETHODCALLTYPE *InWriteSession )( 
            __RPC__in ITfContext * This,
            /* [in] */ TfClientId tid,
            /* [out] */ __RPC__out BOOL *pfWriteSession);
        
        HRESULT ( STDMETHODCALLTYPE *GetSelection )( 
            __RPC__in ITfContext * This,
            /* [in] */ TfEditCookie ec,
            /* [in] */ ULONG ulIndex,
            /* [in] */ ULONG ulCount,
            /* [length_is][size_is][out] */ __RPC__out_ecount_part(ulCount, *pcFetched) TF_SELECTION *pSelection,
            /* [out] */ __RPC__out ULONG *pcFetched);
        
        HRESULT ( STDMETHODCALLTYPE *SetSelection )( 
            __RPC__in ITfContext * This,
            /* [in] */ TfEditCookie ec,
            /* [in] */ ULONG ulCount,
            /* [size_is][in] */ __RPC__in_ecount_full(ulCount) const TF_SELECTION *pSelection);
        
        HRESULT ( STDMETHODCALLTYPE *GetStart )( 
            __RPC__in ITfContext * This,
            /* [in] */ TfEditCookie ec,
            /* [out] */ __RPC__deref_out_opt ITfRange **ppStart);
        
        HRESULT ( STDMETHODCALLTYPE *GetEnd )( 
            __RPC__in ITfContext * This,
            /* [in] */ TfEditCookie ec,
            /* [out] */ __RPC__deref_out_opt ITfRange **ppEnd);
        
        HRESULT ( STDMETHODCALLTYPE *GetActiveView )( 
            __RPC__in ITfContext * This,
            /* [out] */ __RPC__deref_out_opt ITfContextView **ppView);
        
        HRESULT ( STDMETHODCALLTYPE *EnumViews )( 
            __RPC__in ITfContext * This,
            /* [out] */ __RPC__deref_out_opt IEnumTfContextViews **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetStatus )( 
            __RPC__in ITfContext * This,
            /* [out] */ __RPC__out TF_STATUS *pdcs);
        
        HRESULT ( STDMETHODCALLTYPE *GetProperty )( 
            __RPC__in ITfContext * This,
            /* [in] */ __RPC__in REFGUID guidProp,
            /* [out] */ __RPC__deref_out_opt ITfProperty **ppProp);
        
        HRESULT ( STDMETHODCALLTYPE *GetAppProperty )( 
            __RPC__in ITfContext * This,
            /* [in] */ __RPC__in REFGUID guidProp,
            /* [out] */ __RPC__deref_out_opt ITfReadOnlyProperty **ppProp);
        
        HRESULT ( STDMETHODCALLTYPE *TrackProperties )( 
            __RPC__in ITfContext * This,
            /* [size_is][in] */ __RPC__in_ecount_full(cProp) const GUID **prgProp,
            /* [in] */ ULONG cProp,
            /* [size_is][in] */ __RPC__in_ecount_full(cAppProp) const GUID **prgAppProp,
            /* [in] */ ULONG cAppProp,
            /* [out] */ __RPC__deref_out_opt ITfReadOnlyProperty **ppProperty);
        
        HRESULT ( STDMETHODCALLTYPE *EnumProperties )( 
            __RPC__in ITfContext * This,
            /* [out] */ __RPC__deref_out_opt IEnumTfProperties **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetDocumentMgr )( 
            __RPC__in ITfContext * This,
            /* [out] */ __RPC__deref_out_opt ITfDocumentMgr **ppDm);
        
        HRESULT ( STDMETHODCALLTYPE *CreateRangeBackup )( 
            __RPC__in ITfContext * This,
            /* [in] */ TfEditCookie ec,
            /* [in] */ __RPC__in_opt ITfRange *pRange,
            /* [out] */ __RPC__deref_out_opt ITfRangeBackup **ppBackup);
        
        END_INTERFACE
    } ITfContextVtbl;

    interface ITfContext
    {
        CONST_VTBL struct ITfContextVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfContext_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfContext_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfContext_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfContext_RequestEditSession(This,tid,pes,dwFlags,phrSession)	\
    ( (This)->lpVtbl -> RequestEditSession(This,tid,pes,dwFlags,phrSession) ) 

#define ITfContext_InWriteSession(This,tid,pfWriteSession)	\
    ( (This)->lpVtbl -> InWriteSession(This,tid,pfWriteSession) ) 

#define ITfContext_GetSelection(This,ec,ulIndex,ulCount,pSelection,pcFetched)	\
    ( (This)->lpVtbl -> GetSelection(This,ec,ulIndex,ulCount,pSelection,pcFetched) ) 

#define ITfContext_SetSelection(This,ec,ulCount,pSelection)	\
    ( (This)->lpVtbl -> SetSelection(This,ec,ulCount,pSelection) ) 

#define ITfContext_GetStart(This,ec,ppStart)	\
    ( (This)->lpVtbl -> GetStart(This,ec,ppStart) ) 

#define ITfContext_GetEnd(This,ec,ppEnd)	\
    ( (This)->lpVtbl -> GetEnd(This,ec,ppEnd) ) 

#define ITfContext_GetActiveView(This,ppView)	\
    ( (This)->lpVtbl -> GetActiveView(This,ppView) ) 

#define ITfContext_EnumViews(This,ppEnum)	\
    ( (This)->lpVtbl -> EnumViews(This,ppEnum) ) 

#define ITfContext_GetStatus(This,pdcs)	\
    ( (This)->lpVtbl -> GetStatus(This,pdcs) ) 

#define ITfContext_GetProperty(This,guidProp,ppProp)	\
    ( (This)->lpVtbl -> GetProperty(This,guidProp,ppProp) ) 

#define ITfContext_GetAppProperty(This,guidProp,ppProp)	\
    ( (This)->lpVtbl -> GetAppProperty(This,guidProp,ppProp) ) 

#define ITfContext_TrackProperties(This,prgProp,cProp,prgAppProp,cAppProp,ppProperty)	\
    ( (This)->lpVtbl -> TrackProperties(This,prgProp,cProp,prgAppProp,cAppProp,ppProperty) ) 

#define ITfContext_EnumProperties(This,ppEnum)	\
    ( (This)->lpVtbl -> EnumProperties(This,ppEnum) ) 

#define ITfContext_GetDocumentMgr(This,ppDm)	\
    ( (This)->lpVtbl -> GetDocumentMgr(This,ppDm) ) 

#define ITfContext_CreateRangeBackup(This,ec,pRange,ppBackup)	\
    ( (This)->lpVtbl -> CreateRangeBackup(This,ec,pRange,ppBackup) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfContext_INTERFACE_DEFINED__ */


#ifndef __ITfQueryEmbedded_INTERFACE_DEFINED__
#define __ITfQueryEmbedded_INTERFACE_DEFINED__

/* interface ITfQueryEmbedded */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITfQueryEmbedded;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0fab9bdb-d250-4169-84e5-6be118fdd7a8")
    ITfQueryEmbedded : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE QueryInsertEmbedded( 
            /* [in] */ __RPC__in const GUID *pguidService,
            /* [in] */ __RPC__in const FORMATETC *pFormatEtc,
            /* [out] */ __RPC__out BOOL *pfInsertable) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfQueryEmbeddedVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfQueryEmbedded * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfQueryEmbedded * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfQueryEmbedded * This);
        
        HRESULT ( STDMETHODCALLTYPE *QueryInsertEmbedded )( 
            __RPC__in ITfQueryEmbedded * This,
            /* [in] */ __RPC__in const GUID *pguidService,
            /* [in] */ __RPC__in const FORMATETC *pFormatEtc,
            /* [out] */ __RPC__out BOOL *pfInsertable);
        
        END_INTERFACE
    } ITfQueryEmbeddedVtbl;

    interface ITfQueryEmbedded
    {
        CONST_VTBL struct ITfQueryEmbeddedVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfQueryEmbedded_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfQueryEmbedded_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfQueryEmbedded_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfQueryEmbedded_QueryInsertEmbedded(This,pguidService,pFormatEtc,pfInsertable)	\
    ( (This)->lpVtbl -> QueryInsertEmbedded(This,pguidService,pFormatEtc,pfInsertable) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfQueryEmbedded_INTERFACE_DEFINED__ */


#ifndef __ITfInsertAtSelection_INTERFACE_DEFINED__
#define __ITfInsertAtSelection_INTERFACE_DEFINED__

/* interface ITfInsertAtSelection */
/* [unique][uuid][object] */ 

#define	TF_IAS_NOQUERY	( 0x1 )

#define	TF_IAS_QUERYONLY	( 0x2 )

#define	TF_IAS_NO_DEFAULT_COMPOSITION	( 0x80000000 )


EXTERN_C const IID IID_ITfInsertAtSelection;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("55ce16ba-3014-41c1-9ceb-fade1446ac6c")
    ITfInsertAtSelection : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE InsertTextAtSelection( 
            /* [in] */ TfEditCookie ec,
            /* [in] */ DWORD dwFlags,
            /* [size_is][in] */ __RPC__in_ecount_full(cch) const WCHAR *pchText,
            /* [in] */ LONG cch,
            /* [out] */ __RPC__deref_out_opt ITfRange **ppRange) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE InsertEmbeddedAtSelection( 
            /* [in] */ TfEditCookie ec,
            /* [in] */ DWORD dwFlags,
            /* [in] */ __RPC__in_opt IDataObject *pDataObject,
            /* [out] */ __RPC__deref_out_opt ITfRange **ppRange) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfInsertAtSelectionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfInsertAtSelection * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfInsertAtSelection * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfInsertAtSelection * This);
        
        HRESULT ( STDMETHODCALLTYPE *InsertTextAtSelection )( 
            __RPC__in ITfInsertAtSelection * This,
            /* [in] */ TfEditCookie ec,
            /* [in] */ DWORD dwFlags,
            /* [size_is][in] */ __RPC__in_ecount_full(cch) const WCHAR *pchText,
            /* [in] */ LONG cch,
            /* [out] */ __RPC__deref_out_opt ITfRange **ppRange);
        
        HRESULT ( STDMETHODCALLTYPE *InsertEmbeddedAtSelection )( 
            __RPC__in ITfInsertAtSelection * This,
            /* [in] */ TfEditCookie ec,
            /* [in] */ DWORD dwFlags,
            /* [in] */ __RPC__in_opt IDataObject *pDataObject,
            /* [out] */ __RPC__deref_out_opt ITfRange **ppRange);
        
        END_INTERFACE
    } ITfInsertAtSelectionVtbl;

    interface ITfInsertAtSelection
    {
        CONST_VTBL struct ITfInsertAtSelectionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfInsertAtSelection_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfInsertAtSelection_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfInsertAtSelection_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfInsertAtSelection_InsertTextAtSelection(This,ec,dwFlags,pchText,cch,ppRange)	\
    ( (This)->lpVtbl -> InsertTextAtSelection(This,ec,dwFlags,pchText,cch,ppRange) ) 

#define ITfInsertAtSelection_InsertEmbeddedAtSelection(This,ec,dwFlags,pDataObject,ppRange)	\
    ( (This)->lpVtbl -> InsertEmbeddedAtSelection(This,ec,dwFlags,pDataObject,ppRange) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfInsertAtSelection_INTERFACE_DEFINED__ */


#ifndef __ITfCleanupContextSink_INTERFACE_DEFINED__
#define __ITfCleanupContextSink_INTERFACE_DEFINED__

/* interface ITfCleanupContextSink */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITfCleanupContextSink;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("01689689-7acb-4e9b-ab7c-7ea46b12b522")
    ITfCleanupContextSink : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnCleanupContext( 
            /* [in] */ TfEditCookie ecWrite,
            /* [in] */ __RPC__in_opt ITfContext *pic) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfCleanupContextSinkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfCleanupContextSink * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfCleanupContextSink * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfCleanupContextSink * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnCleanupContext )( 
            __RPC__in ITfCleanupContextSink * This,
            /* [in] */ TfEditCookie ecWrite,
            /* [in] */ __RPC__in_opt ITfContext *pic);
        
        END_INTERFACE
    } ITfCleanupContextSinkVtbl;

    interface ITfCleanupContextSink
    {
        CONST_VTBL struct ITfCleanupContextSinkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfCleanupContextSink_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfCleanupContextSink_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfCleanupContextSink_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfCleanupContextSink_OnCleanupContext(This,ecWrite,pic)	\
    ( (This)->lpVtbl -> OnCleanupContext(This,ecWrite,pic) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfCleanupContextSink_INTERFACE_DEFINED__ */


#ifndef __ITfCleanupContextDurationSink_INTERFACE_DEFINED__
#define __ITfCleanupContextDurationSink_INTERFACE_DEFINED__

/* interface ITfCleanupContextDurationSink */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITfCleanupContextDurationSink;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("45c35144-154e-4797-bed8-d33ae7bf8794")
    ITfCleanupContextDurationSink : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnStartCleanupContext( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnEndCleanupContext( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfCleanupContextDurationSinkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfCleanupContextDurationSink * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfCleanupContextDurationSink * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfCleanupContextDurationSink * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnStartCleanupContext )( 
            __RPC__in ITfCleanupContextDurationSink * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnEndCleanupContext )( 
            __RPC__in ITfCleanupContextDurationSink * This);
        
        END_INTERFACE
    } ITfCleanupContextDurationSinkVtbl;

    interface ITfCleanupContextDurationSink
    {
        CONST_VTBL struct ITfCleanupContextDurationSinkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfCleanupContextDurationSink_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfCleanupContextDurationSink_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfCleanupContextDurationSink_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfCleanupContextDurationSink_OnStartCleanupContext(This)	\
    ( (This)->lpVtbl -> OnStartCleanupContext(This) ) 

#define ITfCleanupContextDurationSink_OnEndCleanupContext(This)	\
    ( (This)->lpVtbl -> OnEndCleanupContext(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfCleanupContextDurationSink_INTERFACE_DEFINED__ */


#ifndef __ITfReadOnlyProperty_INTERFACE_DEFINED__
#define __ITfReadOnlyProperty_INTERFACE_DEFINED__

/* interface ITfReadOnlyProperty */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITfReadOnlyProperty;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("17d49a3d-f8b8-4b2f-b254-52319dd64c53")
    ITfReadOnlyProperty : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetType( 
            /* [out] */ __RPC__out GUID *pguid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumRanges( 
            /* [in] */ TfEditCookie ec,
            /* [out] */ __RPC__deref_out_opt IEnumTfRanges **ppEnum,
            /* [in] */ __RPC__in_opt ITfRange *pTargetRange) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetValue( 
            /* [in] */ TfEditCookie ec,
            /* [in] */ __RPC__in_opt ITfRange *pRange,
            /* [out] */ __RPC__out VARIANT *pvarValue) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetContext( 
            /* [out] */ __RPC__deref_out_opt ITfContext **ppContext) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfReadOnlyPropertyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfReadOnlyProperty * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfReadOnlyProperty * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfReadOnlyProperty * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetType )( 
            __RPC__in ITfReadOnlyProperty * This,
            /* [out] */ __RPC__out GUID *pguid);
        
        HRESULT ( STDMETHODCALLTYPE *EnumRanges )( 
            __RPC__in ITfReadOnlyProperty * This,
            /* [in] */ TfEditCookie ec,
            /* [out] */ __RPC__deref_out_opt IEnumTfRanges **ppEnum,
            /* [in] */ __RPC__in_opt ITfRange *pTargetRange);
        
        HRESULT ( STDMETHODCALLTYPE *GetValue )( 
            __RPC__in ITfReadOnlyProperty * This,
            /* [in] */ TfEditCookie ec,
            /* [in] */ __RPC__in_opt ITfRange *pRange,
            /* [out] */ __RPC__out VARIANT *pvarValue);
        
        HRESULT ( STDMETHODCALLTYPE *GetContext )( 
            __RPC__in ITfReadOnlyProperty * This,
            /* [out] */ __RPC__deref_out_opt ITfContext **ppContext);
        
        END_INTERFACE
    } ITfReadOnlyPropertyVtbl;

    interface ITfReadOnlyProperty
    {
        CONST_VTBL struct ITfReadOnlyPropertyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfReadOnlyProperty_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfReadOnlyProperty_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfReadOnlyProperty_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfReadOnlyProperty_GetType(This,pguid)	\
    ( (This)->lpVtbl -> GetType(This,pguid) ) 

#define ITfReadOnlyProperty_EnumRanges(This,ec,ppEnum,pTargetRange)	\
    ( (This)->lpVtbl -> EnumRanges(This,ec,ppEnum,pTargetRange) ) 

#define ITfReadOnlyProperty_GetValue(This,ec,pRange,pvarValue)	\
    ( (This)->lpVtbl -> GetValue(This,ec,pRange,pvarValue) ) 

#define ITfReadOnlyProperty_GetContext(This,ppContext)	\
    ( (This)->lpVtbl -> GetContext(This,ppContext) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfReadOnlyProperty_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_msctf_0000_0022 */
/* [local] */ 

typedef /* [uuid] */  DECLSPEC_UUID("d678c645-eb6a-45c9-b4ee-0f3e3a991348") struct TF_PROPERTYVAL
    {
    GUID guidId;
    VARIANT varValue;
    } 	TF_PROPERTYVAL;



extern RPC_IF_HANDLE __MIDL_itf_msctf_0000_0022_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_msctf_0000_0022_v0_0_s_ifspec;

#ifndef __IEnumTfPropertyValue_INTERFACE_DEFINED__
#define __IEnumTfPropertyValue_INTERFACE_DEFINED__

/* interface IEnumTfPropertyValue */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IEnumTfPropertyValue;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8ed8981b-7c10-4d7d-9fb3-ab72e9c75f72")
    IEnumTfPropertyValue : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ __RPC__deref_out_opt IEnumTfPropertyValue **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG ulCount,
            /* [length_is][size_is][out] */ __RPC__out_ecount_part(ulCount, *pcFetched) TF_PROPERTYVAL *rgValues,
            /* [out] */ __RPC__out ULONG *pcFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG ulCount) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumTfPropertyValueVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IEnumTfPropertyValue * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IEnumTfPropertyValue * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IEnumTfPropertyValue * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            __RPC__in IEnumTfPropertyValue * This,
            /* [out] */ __RPC__deref_out_opt IEnumTfPropertyValue **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            __RPC__in IEnumTfPropertyValue * This,
            /* [in] */ ULONG ulCount,
            /* [length_is][size_is][out] */ __RPC__out_ecount_part(ulCount, *pcFetched) TF_PROPERTYVAL *rgValues,
            /* [out] */ __RPC__out ULONG *pcFetched);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            __RPC__in IEnumTfPropertyValue * This);
        
        HRESULT ( STDMETHODCALLTYPE *Skip )( 
            __RPC__in IEnumTfPropertyValue * This,
            /* [in] */ ULONG ulCount);
        
        END_INTERFACE
    } IEnumTfPropertyValueVtbl;

    interface IEnumTfPropertyValue
    {
        CONST_VTBL struct IEnumTfPropertyValueVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumTfPropertyValue_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IEnumTfPropertyValue_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IEnumTfPropertyValue_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IEnumTfPropertyValue_Clone(This,ppEnum)	\
    ( (This)->lpVtbl -> Clone(This,ppEnum) ) 

#define IEnumTfPropertyValue_Next(This,ulCount,rgValues,pcFetched)	\
    ( (This)->lpVtbl -> Next(This,ulCount,rgValues,pcFetched) ) 

#define IEnumTfPropertyValue_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define IEnumTfPropertyValue_Skip(This,ulCount)	\
    ( (This)->lpVtbl -> Skip(This,ulCount) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IEnumTfPropertyValue_INTERFACE_DEFINED__ */


#ifndef __ITfMouseTracker_INTERFACE_DEFINED__
#define __ITfMouseTracker_INTERFACE_DEFINED__

/* interface ITfMouseTracker */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITfMouseTracker;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("09d146cd-a544-4132-925b-7afa8ef322d0")
    ITfMouseTracker : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE AdviseMouseSink( 
            /* [in] */ __RPC__in_opt ITfRange *range,
            /* [in] */ __RPC__in_opt ITfMouseSink *pSink,
            /* [out] */ __RPC__out DWORD *pdwCookie) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UnadviseMouseSink( 
            /* [in] */ DWORD dwCookie) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfMouseTrackerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfMouseTracker * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfMouseTracker * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfMouseTracker * This);
        
        HRESULT ( STDMETHODCALLTYPE *AdviseMouseSink )( 
            __RPC__in ITfMouseTracker * This,
            /* [in] */ __RPC__in_opt ITfRange *range,
            /* [in] */ __RPC__in_opt ITfMouseSink *pSink,
            /* [out] */ __RPC__out DWORD *pdwCookie);
        
        HRESULT ( STDMETHODCALLTYPE *UnadviseMouseSink )( 
            __RPC__in ITfMouseTracker * This,
            /* [in] */ DWORD dwCookie);
        
        END_INTERFACE
    } ITfMouseTrackerVtbl;

    interface ITfMouseTracker
    {
        CONST_VTBL struct ITfMouseTrackerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfMouseTracker_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfMouseTracker_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfMouseTracker_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfMouseTracker_AdviseMouseSink(This,range,pSink,pdwCookie)	\
    ( (This)->lpVtbl -> AdviseMouseSink(This,range,pSink,pdwCookie) ) 

#define ITfMouseTracker_UnadviseMouseSink(This,dwCookie)	\
    ( (This)->lpVtbl -> UnadviseMouseSink(This,dwCookie) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfMouseTracker_INTERFACE_DEFINED__ */


#ifndef __ITfMouseTrackerACP_INTERFACE_DEFINED__
#define __ITfMouseTrackerACP_INTERFACE_DEFINED__

/* interface ITfMouseTrackerACP */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITfMouseTrackerACP;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3bdd78e2-c16e-47fd-b883-ce6facc1a208")
    ITfMouseTrackerACP : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE AdviseMouseSink( 
            /* [in] */ __RPC__in_opt ITfRangeACP *range,
            /* [in] */ __RPC__in_opt ITfMouseSink *pSink,
            /* [out] */ __RPC__out DWORD *pdwCookie) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UnadviseMouseSink( 
            /* [in] */ DWORD dwCookie) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfMouseTrackerACPVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfMouseTrackerACP * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfMouseTrackerACP * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfMouseTrackerACP * This);
        
        HRESULT ( STDMETHODCALLTYPE *AdviseMouseSink )( 
            __RPC__in ITfMouseTrackerACP * This,
            /* [in] */ __RPC__in_opt ITfRangeACP *range,
            /* [in] */ __RPC__in_opt ITfMouseSink *pSink,
            /* [out] */ __RPC__out DWORD *pdwCookie);
        
        HRESULT ( STDMETHODCALLTYPE *UnadviseMouseSink )( 
            __RPC__in ITfMouseTrackerACP * This,
            /* [in] */ DWORD dwCookie);
        
        END_INTERFACE
    } ITfMouseTrackerACPVtbl;

    interface ITfMouseTrackerACP
    {
        CONST_VTBL struct ITfMouseTrackerACPVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfMouseTrackerACP_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfMouseTrackerACP_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfMouseTrackerACP_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfMouseTrackerACP_AdviseMouseSink(This,range,pSink,pdwCookie)	\
    ( (This)->lpVtbl -> AdviseMouseSink(This,range,pSink,pdwCookie) ) 

#define ITfMouseTrackerACP_UnadviseMouseSink(This,dwCookie)	\
    ( (This)->lpVtbl -> UnadviseMouseSink(This,dwCookie) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfMouseTrackerACP_INTERFACE_DEFINED__ */


#ifndef __ITfMouseSink_INTERFACE_DEFINED__
#define __ITfMouseSink_INTERFACE_DEFINED__

/* interface ITfMouseSink */
/* [unique][uuid][local][object] */ 


EXTERN_C const IID IID_ITfMouseSink;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a1adaaa2-3a24-449d-ac96-5183e7f5c217")
    ITfMouseSink : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnMouseEvent( 
            /* [in] */ ULONG uEdge,
            /* [in] */ ULONG uQuadrant,
            /* [in] */ DWORD dwBtnStatus,
            /* [out] */ BOOL *pfEaten) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfMouseSinkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITfMouseSink * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITfMouseSink * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITfMouseSink * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnMouseEvent )( 
            ITfMouseSink * This,
            /* [in] */ ULONG uEdge,
            /* [in] */ ULONG uQuadrant,
            /* [in] */ DWORD dwBtnStatus,
            /* [out] */ BOOL *pfEaten);
        
        END_INTERFACE
    } ITfMouseSinkVtbl;

    interface ITfMouseSink
    {
        CONST_VTBL struct ITfMouseSinkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfMouseSink_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfMouseSink_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfMouseSink_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfMouseSink_OnMouseEvent(This,uEdge,uQuadrant,dwBtnStatus,pfEaten)	\
    ( (This)->lpVtbl -> OnMouseEvent(This,uEdge,uQuadrant,dwBtnStatus,pfEaten) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfMouseSink_INTERFACE_DEFINED__ */


#ifndef __ITfEditRecord_INTERFACE_DEFINED__
#define __ITfEditRecord_INTERFACE_DEFINED__

/* interface ITfEditRecord */
/* [unique][uuid][object] */ 

#define	TF_GTP_INCL_TEXT	( 0x1 )


EXTERN_C const IID IID_ITfEditRecord;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("42d4d099-7c1a-4a89-b836-6c6f22160df0")
    ITfEditRecord : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetSelectionStatus( 
            /* [out] */ __RPC__out BOOL *pfChanged) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetTextAndPropertyUpdates( 
            /* [in] */ DWORD dwFlags,
            /* [size_is][in] */ __RPC__in_ecount_full(cProperties) const GUID **prgProperties,
            /* [in] */ ULONG cProperties,
            /* [out] */ __RPC__deref_out_opt IEnumTfRanges **ppEnum) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfEditRecordVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfEditRecord * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfEditRecord * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfEditRecord * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetSelectionStatus )( 
            __RPC__in ITfEditRecord * This,
            /* [out] */ __RPC__out BOOL *pfChanged);
        
        HRESULT ( STDMETHODCALLTYPE *GetTextAndPropertyUpdates )( 
            __RPC__in ITfEditRecord * This,
            /* [in] */ DWORD dwFlags,
            /* [size_is][in] */ __RPC__in_ecount_full(cProperties) const GUID **prgProperties,
            /* [in] */ ULONG cProperties,
            /* [out] */ __RPC__deref_out_opt IEnumTfRanges **ppEnum);
        
        END_INTERFACE
    } ITfEditRecordVtbl;

    interface ITfEditRecord
    {
        CONST_VTBL struct ITfEditRecordVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfEditRecord_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfEditRecord_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfEditRecord_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfEditRecord_GetSelectionStatus(This,pfChanged)	\
    ( (This)->lpVtbl -> GetSelectionStatus(This,pfChanged) ) 

#define ITfEditRecord_GetTextAndPropertyUpdates(This,dwFlags,prgProperties,cProperties,ppEnum)	\
    ( (This)->lpVtbl -> GetTextAndPropertyUpdates(This,dwFlags,prgProperties,cProperties,ppEnum) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfEditRecord_INTERFACE_DEFINED__ */


#ifndef __ITfTextEditSink_INTERFACE_DEFINED__
#define __ITfTextEditSink_INTERFACE_DEFINED__

/* interface ITfTextEditSink */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITfTextEditSink;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8127d409-ccd3-4683-967a-b43d5b482bf7")
    ITfTextEditSink : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnEndEdit( 
            /* [in] */ __RPC__in_opt ITfContext *pic,
            /* [in] */ TfEditCookie ecReadOnly,
            /* [in] */ __RPC__in_opt ITfEditRecord *pEditRecord) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfTextEditSinkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfTextEditSink * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfTextEditSink * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfTextEditSink * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnEndEdit )( 
            __RPC__in ITfTextEditSink * This,
            /* [in] */ __RPC__in_opt ITfContext *pic,
            /* [in] */ TfEditCookie ecReadOnly,
            /* [in] */ __RPC__in_opt ITfEditRecord *pEditRecord);
        
        END_INTERFACE
    } ITfTextEditSinkVtbl;

    interface ITfTextEditSink
    {
        CONST_VTBL struct ITfTextEditSinkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfTextEditSink_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfTextEditSink_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfTextEditSink_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfTextEditSink_OnEndEdit(This,pic,ecReadOnly,pEditRecord)	\
    ( (This)->lpVtbl -> OnEndEdit(This,pic,ecReadOnly,pEditRecord) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfTextEditSink_INTERFACE_DEFINED__ */


#ifndef __ITfTextLayoutSink_INTERFACE_DEFINED__
#define __ITfTextLayoutSink_INTERFACE_DEFINED__

/* interface ITfTextLayoutSink */
/* [unique][uuid][object] */ 

typedef /* [public][public][uuid] */  DECLSPEC_UUID("603553cf-9edd-4cc1-9ecc-069e4a427734") 
enum __MIDL_ITfTextLayoutSink_0001
    {	TF_LC_CREATE	= 0,
	TF_LC_CHANGE	= 1,
	TF_LC_DESTROY	= 2
    } 	TfLayoutCode;


EXTERN_C const IID IID_ITfTextLayoutSink;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2af2d06a-dd5b-4927-a0b4-54f19c91fade")
    ITfTextLayoutSink : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnLayoutChange( 
            /* [in] */ __RPC__in_opt ITfContext *pic,
            /* [in] */ TfLayoutCode lcode,
            /* [in] */ __RPC__in_opt ITfContextView *pView) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfTextLayoutSinkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfTextLayoutSink * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfTextLayoutSink * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfTextLayoutSink * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnLayoutChange )( 
            __RPC__in ITfTextLayoutSink * This,
            /* [in] */ __RPC__in_opt ITfContext *pic,
            /* [in] */ TfLayoutCode lcode,
            /* [in] */ __RPC__in_opt ITfContextView *pView);
        
        END_INTERFACE
    } ITfTextLayoutSinkVtbl;

    interface ITfTextLayoutSink
    {
        CONST_VTBL struct ITfTextLayoutSinkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfTextLayoutSink_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfTextLayoutSink_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfTextLayoutSink_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfTextLayoutSink_OnLayoutChange(This,pic,lcode,pView)	\
    ( (This)->lpVtbl -> OnLayoutChange(This,pic,lcode,pView) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfTextLayoutSink_INTERFACE_DEFINED__ */


#ifndef __ITfStatusSink_INTERFACE_DEFINED__
#define __ITfStatusSink_INTERFACE_DEFINED__

/* interface ITfStatusSink */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITfStatusSink;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6b7d8d73-b267-4f69-b32e-1ca321ce4f45")
    ITfStatusSink : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnStatusChange( 
            /* [in] */ __RPC__in_opt ITfContext *pic,
            /* [in] */ DWORD dwFlags) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfStatusSinkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfStatusSink * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfStatusSink * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfStatusSink * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnStatusChange )( 
            __RPC__in ITfStatusSink * This,
            /* [in] */ __RPC__in_opt ITfContext *pic,
            /* [in] */ DWORD dwFlags);
        
        END_INTERFACE
    } ITfStatusSinkVtbl;

    interface ITfStatusSink
    {
        CONST_VTBL struct ITfStatusSinkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfStatusSink_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfStatusSink_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfStatusSink_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfStatusSink_OnStatusChange(This,pic,dwFlags)	\
    ( (This)->lpVtbl -> OnStatusChange(This,pic,dwFlags) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfStatusSink_INTERFACE_DEFINED__ */


#ifndef __ITfEditTransactionSink_INTERFACE_DEFINED__
#define __ITfEditTransactionSink_INTERFACE_DEFINED__

/* interface ITfEditTransactionSink */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITfEditTransactionSink;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("708fbf70-b520-416b-b06c-2c41ab44f8ba")
    ITfEditTransactionSink : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnStartEditTransaction( 
            /* [in] */ __RPC__in_opt ITfContext *pic) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnEndEditTransaction( 
            /* [in] */ __RPC__in_opt ITfContext *pic) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfEditTransactionSinkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfEditTransactionSink * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfEditTransactionSink * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfEditTransactionSink * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnStartEditTransaction )( 
            __RPC__in ITfEditTransactionSink * This,
            /* [in] */ __RPC__in_opt ITfContext *pic);
        
        HRESULT ( STDMETHODCALLTYPE *OnEndEditTransaction )( 
            __RPC__in ITfEditTransactionSink * This,
            /* [in] */ __RPC__in_opt ITfContext *pic);
        
        END_INTERFACE
    } ITfEditTransactionSinkVtbl;

    interface ITfEditTransactionSink
    {
        CONST_VTBL struct ITfEditTransactionSinkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfEditTransactionSink_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfEditTransactionSink_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfEditTransactionSink_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfEditTransactionSink_OnStartEditTransaction(This,pic)	\
    ( (This)->lpVtbl -> OnStartEditTransaction(This,pic) ) 

#define ITfEditTransactionSink_OnEndEditTransaction(This,pic)	\
    ( (This)->lpVtbl -> OnEndEditTransaction(This,pic) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfEditTransactionSink_INTERFACE_DEFINED__ */


#ifndef __ITfContextOwner_INTERFACE_DEFINED__
#define __ITfContextOwner_INTERFACE_DEFINED__

/* interface ITfContextOwner */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITfContextOwner;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("aa80e80c-2021-11d2-93e0-0060b067b86e")
    ITfContextOwner : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetACPFromPoint( 
            /* [in] */ __RPC__in const POINT *ptScreen,
            /* [in] */ DWORD dwFlags,
            /* [out] */ __RPC__out LONG *pacp) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetTextExt( 
            /* [in] */ LONG acpStart,
            /* [in] */ LONG acpEnd,
            /* [out] */ __RPC__out RECT *prc,
            /* [out] */ __RPC__out BOOL *pfClipped) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetScreenExt( 
            /* [out] */ __RPC__out RECT *prc) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetStatus( 
            /* [out] */ __RPC__out TF_STATUS *pdcs) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetWnd( 
            /* [out] */ __RPC__deref_out_opt HWND *phwnd) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAttribute( 
            /* [in] */ __RPC__in REFGUID rguidAttribute,
            /* [out] */ __RPC__out VARIANT *pvarValue) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfContextOwnerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfContextOwner * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfContextOwner * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfContextOwner * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetACPFromPoint )( 
            __RPC__in ITfContextOwner * This,
            /* [in] */ __RPC__in const POINT *ptScreen,
            /* [in] */ DWORD dwFlags,
            /* [out] */ __RPC__out LONG *pacp);
        
        HRESULT ( STDMETHODCALLTYPE *GetTextExt )( 
            __RPC__in ITfContextOwner * This,
            /* [in] */ LONG acpStart,
            /* [in] */ LONG acpEnd,
            /* [out] */ __RPC__out RECT *prc,
            /* [out] */ __RPC__out BOOL *pfClipped);
        
        HRESULT ( STDMETHODCALLTYPE *GetScreenExt )( 
            __RPC__in ITfContextOwner * This,
            /* [out] */ __RPC__out RECT *prc);
        
        HRESULT ( STDMETHODCALLTYPE *GetStatus )( 
            __RPC__in ITfContextOwner * This,
            /* [out] */ __RPC__out TF_STATUS *pdcs);
        
        HRESULT ( STDMETHODCALLTYPE *GetWnd )( 
            __RPC__in ITfContextOwner * This,
            /* [out] */ __RPC__deref_out_opt HWND *phwnd);
        
        HRESULT ( STDMETHODCALLTYPE *GetAttribute )( 
            __RPC__in ITfContextOwner * This,
            /* [in] */ __RPC__in REFGUID rguidAttribute,
            /* [out] */ __RPC__out VARIANT *pvarValue);
        
        END_INTERFACE
    } ITfContextOwnerVtbl;

    interface ITfContextOwner
    {
        CONST_VTBL struct ITfContextOwnerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfContextOwner_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfContextOwner_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfContextOwner_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfContextOwner_GetACPFromPoint(This,ptScreen,dwFlags,pacp)	\
    ( (This)->lpVtbl -> GetACPFromPoint(This,ptScreen,dwFlags,pacp) ) 

#define ITfContextOwner_GetTextExt(This,acpStart,acpEnd,prc,pfClipped)	\
    ( (This)->lpVtbl -> GetTextExt(This,acpStart,acpEnd,prc,pfClipped) ) 

#define ITfContextOwner_GetScreenExt(This,prc)	\
    ( (This)->lpVtbl -> GetScreenExt(This,prc) ) 

#define ITfContextOwner_GetStatus(This,pdcs)	\
    ( (This)->lpVtbl -> GetStatus(This,pdcs) ) 

#define ITfContextOwner_GetWnd(This,phwnd)	\
    ( (This)->lpVtbl -> GetWnd(This,phwnd) ) 

#define ITfContextOwner_GetAttribute(This,rguidAttribute,pvarValue)	\
    ( (This)->lpVtbl -> GetAttribute(This,rguidAttribute,pvarValue) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfContextOwner_INTERFACE_DEFINED__ */


#ifndef __ITfContextOwnerServices_INTERFACE_DEFINED__
#define __ITfContextOwnerServices_INTERFACE_DEFINED__

/* interface ITfContextOwnerServices */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITfContextOwnerServices;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b23eb630-3e1c-11d3-a745-0050040ab407")
    ITfContextOwnerServices : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnLayoutChange( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnStatusChange( 
            /* [in] */ DWORD dwFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnAttributeChange( 
            /* [in] */ __RPC__in REFGUID rguidAttribute) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Serialize( 
            /* [in] */ __RPC__in_opt ITfProperty *pProp,
            /* [in] */ __RPC__in_opt ITfRange *pRange,
            /* [out] */ __RPC__out TF_PERSISTENT_PROPERTY_HEADER_ACP *pHdr,
            /* [in] */ __RPC__in_opt IStream *pStream) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Unserialize( 
            /* [in] */ __RPC__in_opt ITfProperty *pProp,
            /* [in] */ __RPC__in const TF_PERSISTENT_PROPERTY_HEADER_ACP *pHdr,
            /* [in] */ __RPC__in_opt IStream *pStream,
            /* [in] */ __RPC__in_opt ITfPersistentPropertyLoaderACP *pLoader) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ForceLoadProperty( 
            /* [in] */ __RPC__in_opt ITfProperty *pProp) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateRange( 
            /* [in] */ LONG acpStart,
            /* [in] */ LONG acpEnd,
            /* [out] */ __RPC__deref_out_opt ITfRangeACP **ppRange) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfContextOwnerServicesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfContextOwnerServices * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfContextOwnerServices * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfContextOwnerServices * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnLayoutChange )( 
            __RPC__in ITfContextOwnerServices * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnStatusChange )( 
            __RPC__in ITfContextOwnerServices * This,
            /* [in] */ DWORD dwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *OnAttributeChange )( 
            __RPC__in ITfContextOwnerServices * This,
            /* [in] */ __RPC__in REFGUID rguidAttribute);
        
        HRESULT ( STDMETHODCALLTYPE *Serialize )( 
            __RPC__in ITfContextOwnerServices * This,
            /* [in] */ __RPC__in_opt ITfProperty *pProp,
            /* [in] */ __RPC__in_opt ITfRange *pRange,
            /* [out] */ __RPC__out TF_PERSISTENT_PROPERTY_HEADER_ACP *pHdr,
            /* [in] */ __RPC__in_opt IStream *pStream);
        
        HRESULT ( STDMETHODCALLTYPE *Unserialize )( 
            __RPC__in ITfContextOwnerServices * This,
            /* [in] */ __RPC__in_opt ITfProperty *pProp,
            /* [in] */ __RPC__in const TF_PERSISTENT_PROPERTY_HEADER_ACP *pHdr,
            /* [in] */ __RPC__in_opt IStream *pStream,
            /* [in] */ __RPC__in_opt ITfPersistentPropertyLoaderACP *pLoader);
        
        HRESULT ( STDMETHODCALLTYPE *ForceLoadProperty )( 
            __RPC__in ITfContextOwnerServices * This,
            /* [in] */ __RPC__in_opt ITfProperty *pProp);
        
        HRESULT ( STDMETHODCALLTYPE *CreateRange )( 
            __RPC__in ITfContextOwnerServices * This,
            /* [in] */ LONG acpStart,
            /* [in] */ LONG acpEnd,
            /* [out] */ __RPC__deref_out_opt ITfRangeACP **ppRange);
        
        END_INTERFACE
    } ITfContextOwnerServicesVtbl;

    interface ITfContextOwnerServices
    {
        CONST_VTBL struct ITfContextOwnerServicesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfContextOwnerServices_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfContextOwnerServices_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfContextOwnerServices_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfContextOwnerServices_OnLayoutChange(This)	\
    ( (This)->lpVtbl -> OnLayoutChange(This) ) 

#define ITfContextOwnerServices_OnStatusChange(This,dwFlags)	\
    ( (This)->lpVtbl -> OnStatusChange(This,dwFlags) ) 

#define ITfContextOwnerServices_OnAttributeChange(This,rguidAttribute)	\
    ( (This)->lpVtbl -> OnAttributeChange(This,rguidAttribute) ) 

#define ITfContextOwnerServices_Serialize(This,pProp,pRange,pHdr,pStream)	\
    ( (This)->lpVtbl -> Serialize(This,pProp,pRange,pHdr,pStream) ) 

#define ITfContextOwnerServices_Unserialize(This,pProp,pHdr,pStream,pLoader)	\
    ( (This)->lpVtbl -> Unserialize(This,pProp,pHdr,pStream,pLoader) ) 

#define ITfContextOwnerServices_ForceLoadProperty(This,pProp)	\
    ( (This)->lpVtbl -> ForceLoadProperty(This,pProp) ) 

#define ITfContextOwnerServices_CreateRange(This,acpStart,acpEnd,ppRange)	\
    ( (This)->lpVtbl -> CreateRange(This,acpStart,acpEnd,ppRange) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfContextOwnerServices_INTERFACE_DEFINED__ */


#ifndef __ITfContextKeyEventSink_INTERFACE_DEFINED__
#define __ITfContextKeyEventSink_INTERFACE_DEFINED__

/* interface ITfContextKeyEventSink */
/* [unique][uuid][local][object] */ 


EXTERN_C const IID IID_ITfContextKeyEventSink;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0552ba5d-c835-4934-bf50-846aaa67432f")
    ITfContextKeyEventSink : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnKeyDown( 
            /* [in] */ WPARAM wParam,
            /* [in] */ LPARAM lParam,
            /* [out] */ BOOL *pfEaten) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnKeyUp( 
            /* [in] */ WPARAM wParam,
            /* [in] */ LPARAM lParam,
            /* [out] */ BOOL *pfEaten) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnTestKeyDown( 
            /* [in] */ WPARAM wParam,
            /* [in] */ LPARAM lParam,
            /* [out] */ BOOL *pfEaten) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnTestKeyUp( 
            /* [in] */ WPARAM wParam,
            /* [in] */ LPARAM lParam,
            /* [out] */ BOOL *pfEaten) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfContextKeyEventSinkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITfContextKeyEventSink * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITfContextKeyEventSink * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITfContextKeyEventSink * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnKeyDown )( 
            ITfContextKeyEventSink * This,
            /* [in] */ WPARAM wParam,
            /* [in] */ LPARAM lParam,
            /* [out] */ BOOL *pfEaten);
        
        HRESULT ( STDMETHODCALLTYPE *OnKeyUp )( 
            ITfContextKeyEventSink * This,
            /* [in] */ WPARAM wParam,
            /* [in] */ LPARAM lParam,
            /* [out] */ BOOL *pfEaten);
        
        HRESULT ( STDMETHODCALLTYPE *OnTestKeyDown )( 
            ITfContextKeyEventSink * This,
            /* [in] */ WPARAM wParam,
            /* [in] */ LPARAM lParam,
            /* [out] */ BOOL *pfEaten);
        
        HRESULT ( STDMETHODCALLTYPE *OnTestKeyUp )( 
            ITfContextKeyEventSink * This,
            /* [in] */ WPARAM wParam,
            /* [in] */ LPARAM lParam,
            /* [out] */ BOOL *pfEaten);
        
        END_INTERFACE
    } ITfContextKeyEventSinkVtbl;

    interface ITfContextKeyEventSink
    {
        CONST_VTBL struct ITfContextKeyEventSinkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfContextKeyEventSink_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfContextKeyEventSink_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfContextKeyEventSink_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfContextKeyEventSink_OnKeyDown(This,wParam,lParam,pfEaten)	\
    ( (This)->lpVtbl -> OnKeyDown(This,wParam,lParam,pfEaten) ) 

#define ITfContextKeyEventSink_OnKeyUp(This,wParam,lParam,pfEaten)	\
    ( (This)->lpVtbl -> OnKeyUp(This,wParam,lParam,pfEaten) ) 

#define ITfContextKeyEventSink_OnTestKeyDown(This,wParam,lParam,pfEaten)	\
    ( (This)->lpVtbl -> OnTestKeyDown(This,wParam,lParam,pfEaten) ) 

#define ITfContextKeyEventSink_OnTestKeyUp(This,wParam,lParam,pfEaten)	\
    ( (This)->lpVtbl -> OnTestKeyUp(This,wParam,lParam,pfEaten) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfContextKeyEventSink_INTERFACE_DEFINED__ */


#ifndef __ITfEditSession_INTERFACE_DEFINED__
#define __ITfEditSession_INTERFACE_DEFINED__

/* interface ITfEditSession */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITfEditSession;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("aa80e803-2021-11d2-93e0-0060b067b86e")
    ITfEditSession : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE DoEditSession( 
            /* [in] */ TfEditCookie ec) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfEditSessionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfEditSession * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfEditSession * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfEditSession * This);
        
        HRESULT ( STDMETHODCALLTYPE *DoEditSession )( 
            __RPC__in ITfEditSession * This,
            /* [in] */ TfEditCookie ec);
        
        END_INTERFACE
    } ITfEditSessionVtbl;

    interface ITfEditSession
    {
        CONST_VTBL struct ITfEditSessionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfEditSession_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfEditSession_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfEditSession_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfEditSession_DoEditSession(This,ec)	\
    ( (This)->lpVtbl -> DoEditSession(This,ec) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfEditSession_INTERFACE_DEFINED__ */


#ifndef __ITfRange_INTERFACE_DEFINED__
#define __ITfRange_INTERFACE_DEFINED__

/* interface ITfRange */
/* [unique][uuid][object] */ 

#define	TF_CHAR_EMBEDDED	( TS_CHAR_EMBEDDED )

typedef /* [public][public][public][public][public][uuid] */  DECLSPEC_UUID("cf610f06-2882-46f6-abe5-298568b664c4") 
enum __MIDL_ITfRange_0001
    {	TF_GRAVITY_BACKWARD	= 0,
	TF_GRAVITY_FORWARD	= 1
    } 	TfGravity;

typedef /* [public][public][public][uuid] */  DECLSPEC_UUID("1e512533-bbdc-4530-9a8e-a1dc0af67468") 
enum __MIDL_ITfRange_0002
    {	TF_SD_BACKWARD	= 0,
	TF_SD_FORWARD	= 1
    } 	TfShiftDir;

#define	TF_HF_OBJECT	( 1 )

#define	TF_TF_MOVESTART	( 1 )

#define	TF_TF_IGNOREEND	( 2 )

#define	TF_ST_CORRECTION	( 1 )

#define	TF_IE_CORRECTION	( 1 )

typedef /* [uuid] */  DECLSPEC_UUID("49930d51-7d93-448c-a48c-fea5dac192b1") struct TF_HALTCOND
    {
    ITfRange *pHaltRange;
    TfAnchor aHaltPos;
    DWORD dwFlags;
    } 	TF_HALTCOND;


EXTERN_C const IID IID_ITfRange;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("aa80e7ff-2021-11d2-93e0-0060b067b86e")
    ITfRange : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetText( 
            /* [in] */ TfEditCookie ec,
            /* [in] */ DWORD dwFlags,
            /* [length_is][size_is][out] */ __RPC__out_ecount_part(cchMax, *pcch) WCHAR *pchText,
            /* [in] */ ULONG cchMax,
            /* [out] */ __RPC__out ULONG *pcch) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetText( 
            /* [in] */ TfEditCookie ec,
            /* [in] */ DWORD dwFlags,
            /* [unique][size_is][in] */ __RPC__in_ecount_full_opt(cch) const WCHAR *pchText,
            /* [in] */ LONG cch) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetFormattedText( 
            /* [in] */ TfEditCookie ec,
            /* [out] */ __RPC__deref_out_opt IDataObject **ppDataObject) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetEmbedded( 
            /* [in] */ TfEditCookie ec,
            /* [in] */ __RPC__in REFGUID rguidService,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ __RPC__deref_out_opt IUnknown **ppunk) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE InsertEmbedded( 
            /* [in] */ TfEditCookie ec,
            /* [in] */ DWORD dwFlags,
            /* [in] */ __RPC__in_opt IDataObject *pDataObject) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ShiftStart( 
            /* [in] */ TfEditCookie ec,
            /* [in] */ LONG cchReq,
            /* [out] */ __RPC__out LONG *pcch,
            /* [unique][in] */ __RPC__in_opt const TF_HALTCOND *pHalt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ShiftEnd( 
            /* [in] */ TfEditCookie ec,
            /* [in] */ LONG cchReq,
            /* [out] */ __RPC__out LONG *pcch,
            /* [unique][in] */ __RPC__in_opt const TF_HALTCOND *pHalt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ShiftStartToRange( 
            /* [in] */ TfEditCookie ec,
            /* [in] */ __RPC__in_opt ITfRange *pRange,
            /* [in] */ TfAnchor aPos) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ShiftEndToRange( 
            /* [in] */ TfEditCookie ec,
            /* [in] */ __RPC__in_opt ITfRange *pRange,
            /* [in] */ TfAnchor aPos) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ShiftStartRegion( 
            /* [in] */ TfEditCookie ec,
            /* [in] */ TfShiftDir dir,
            /* [out] */ __RPC__out BOOL *pfNoRegion) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ShiftEndRegion( 
            /* [in] */ TfEditCookie ec,
            /* [in] */ TfShiftDir dir,
            /* [out] */ __RPC__out BOOL *pfNoRegion) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsEmpty( 
            /* [in] */ TfEditCookie ec,
            /* [out] */ __RPC__out BOOL *pfEmpty) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Collapse( 
            /* [in] */ TfEditCookie ec,
            /* [in] */ TfAnchor aPos) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsEqualStart( 
            /* [in] */ TfEditCookie ec,
            /* [in] */ __RPC__in_opt ITfRange *pWith,
            /* [in] */ TfAnchor aPos,
            /* [out] */ __RPC__out BOOL *pfEqual) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsEqualEnd( 
            /* [in] */ TfEditCookie ec,
            /* [in] */ __RPC__in_opt ITfRange *pWith,
            /* [in] */ TfAnchor aPos,
            /* [out] */ __RPC__out BOOL *pfEqual) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CompareStart( 
            /* [in] */ TfEditCookie ec,
            /* [in] */ __RPC__in_opt ITfRange *pWith,
            /* [in] */ TfAnchor aPos,
            /* [out] */ __RPC__out LONG *plResult) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CompareEnd( 
            /* [in] */ TfEditCookie ec,
            /* [in] */ __RPC__in_opt ITfRange *pWith,
            /* [in] */ TfAnchor aPos,
            /* [out] */ __RPC__out LONG *plResult) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AdjustForInsert( 
            /* [in] */ TfEditCookie ec,
            /* [in] */ ULONG cchInsert,
            /* [out] */ __RPC__out BOOL *pfInsertOk) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetGravity( 
            /* [out] */ __RPC__out TfGravity *pgStart,
            /* [out] */ __RPC__out TfGravity *pgEnd) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetGravity( 
            /* [in] */ TfEditCookie ec,
            /* [in] */ TfGravity gStart,
            /* [in] */ TfGravity gEnd) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ __RPC__deref_out_opt ITfRange **ppClone) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetContext( 
            /* [out] */ __RPC__deref_out_opt ITfContext **ppContext) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfRangeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfRange * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfRange * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfRange * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetText )( 
            __RPC__in ITfRange * This,
            /* [in] */ TfEditCookie ec,
            /* [in] */ DWORD dwFlags,
            /* [length_is][size_is][out] */ __RPC__out_ecount_part(cchMax, *pcch) WCHAR *pchText,
            /* [in] */ ULONG cchMax,
            /* [out] */ __RPC__out ULONG *pcch);
        
        HRESULT ( STDMETHODCALLTYPE *SetText )( 
            __RPC__in ITfRange * This,
            /* [in] */ TfEditCookie ec,
            /* [in] */ DWORD dwFlags,
            /* [unique][size_is][in] */ __RPC__in_ecount_full_opt(cch) const WCHAR *pchText,
            /* [in] */ LONG cch);
        
        HRESULT ( STDMETHODCALLTYPE *GetFormattedText )( 
            __RPC__in ITfRange * This,
            /* [in] */ TfEditCookie ec,
            /* [out] */ __RPC__deref_out_opt IDataObject **ppDataObject);
        
        HRESULT ( STDMETHODCALLTYPE *GetEmbedded )( 
            __RPC__in ITfRange * This,
            /* [in] */ TfEditCookie ec,
            /* [in] */ __RPC__in REFGUID rguidService,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ __RPC__deref_out_opt IUnknown **ppunk);
        
        HRESULT ( STDMETHODCALLTYPE *InsertEmbedded )( 
            __RPC__in ITfRange * This,
            /* [in] */ TfEditCookie ec,
            /* [in] */ DWORD dwFlags,
            /* [in] */ __RPC__in_opt IDataObject *pDataObject);
        
        HRESULT ( STDMETHODCALLTYPE *ShiftStart )( 
            __RPC__in ITfRange * This,
            /* [in] */ TfEditCookie ec,
            /* [in] */ LONG cchReq,
            /* [out] */ __RPC__out LONG *pcch,
            /* [unique][in] */ __RPC__in_opt const TF_HALTCOND *pHalt);
        
        HRESULT ( STDMETHODCALLTYPE *ShiftEnd )( 
            __RPC__in ITfRange * This,
            /* [in] */ TfEditCookie ec,
            /* [in] */ LONG cchReq,
            /* [out] */ __RPC__out LONG *pcch,
            /* [unique][in] */ __RPC__in_opt const TF_HALTCOND *pHalt);
        
        HRESULT ( STDMETHODCALLTYPE *ShiftStartToRange )( 
            __RPC__in ITfRange * This,
            /* [in] */ TfEditCookie ec,
            /* [in] */ __RPC__in_opt ITfRange *pRange,
            /* [in] */ TfAnchor aPos);
        
        HRESULT ( STDMETHODCALLTYPE *ShiftEndToRange )( 
            __RPC__in ITfRange * This,
            /* [in] */ TfEditCookie ec,
            /* [in] */ __RPC__in_opt ITfRange *pRange,
            /* [in] */ TfAnchor aPos);
        
        HRESULT ( STDMETHODCALLTYPE *ShiftStartRegion )( 
            __RPC__in ITfRange * This,
            /* [in] */ TfEditCookie ec,
            /* [in] */ TfShiftDir dir,
            /* [out] */ __RPC__out BOOL *pfNoRegion);
        
        HRESULT ( STDMETHODCALLTYPE *ShiftEndRegion )( 
            __RPC__in ITfRange * This,
            /* [in] */ TfEditCookie ec,
            /* [in] */ TfShiftDir dir,
            /* [out] */ __RPC__out BOOL *pfNoRegion);
        
        HRESULT ( STDMETHODCALLTYPE *IsEmpty )( 
            __RPC__in ITfRange * This,
            /* [in] */ TfEditCookie ec,
            /* [out] */ __RPC__out BOOL *pfEmpty);
        
        HRESULT ( STDMETHODCALLTYPE *Collapse )( 
            __RPC__in ITfRange * This,
            /* [in] */ TfEditCookie ec,
            /* [in] */ TfAnchor aPos);
        
        HRESULT ( STDMETHODCALLTYPE *IsEqualStart )( 
            __RPC__in ITfRange * This,
            /* [in] */ TfEditCookie ec,
            /* [in] */ __RPC__in_opt ITfRange *pWith,
            /* [in] */ TfAnchor aPos,
            /* [out] */ __RPC__out BOOL *pfEqual);
        
        HRESULT ( STDMETHODCALLTYPE *IsEqualEnd )( 
            __RPC__in ITfRange * This,
            /* [in] */ TfEditCookie ec,
            /* [in] */ __RPC__in_opt ITfRange *pWith,
            /* [in] */ TfAnchor aPos,
            /* [out] */ __RPC__out BOOL *pfEqual);
        
        HRESULT ( STDMETHODCALLTYPE *CompareStart )( 
            __RPC__in ITfRange * This,
            /* [in] */ TfEditCookie ec,
            /* [in] */ __RPC__in_opt ITfRange *pWith,
            /* [in] */ TfAnchor aPos,
            /* [out] */ __RPC__out LONG *plResult);
        
        HRESULT ( STDMETHODCALLTYPE *CompareEnd )( 
            __RPC__in ITfRange * This,
            /* [in] */ TfEditCookie ec,
            /* [in] */ __RPC__in_opt ITfRange *pWith,
            /* [in] */ TfAnchor aPos,
            /* [out] */ __RPC__out LONG *plResult);
        
        HRESULT ( STDMETHODCALLTYPE *AdjustForInsert )( 
            __RPC__in ITfRange * This,
            /* [in] */ TfEditCookie ec,
            /* [in] */ ULONG cchInsert,
            /* [out] */ __RPC__out BOOL *pfInsertOk);
        
        HRESULT ( STDMETHODCALLTYPE *GetGravity )( 
            __RPC__in ITfRange * This,
            /* [out] */ __RPC__out TfGravity *pgStart,
            /* [out] */ __RPC__out TfGravity *pgEnd);
        
        HRESULT ( STDMETHODCALLTYPE *SetGravity )( 
            __RPC__in ITfRange * This,
            /* [in] */ TfEditCookie ec,
            /* [in] */ TfGravity gStart,
            /* [in] */ TfGravity gEnd);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            __RPC__in ITfRange * This,
            /* [out] */ __RPC__deref_out_opt ITfRange **ppClone);
        
        HRESULT ( STDMETHODCALLTYPE *GetContext )( 
            __RPC__in ITfRange * This,
            /* [out] */ __RPC__deref_out_opt ITfContext **ppContext);
        
        END_INTERFACE
    } ITfRangeVtbl;

    interface ITfRange
    {
        CONST_VTBL struct ITfRangeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfRange_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfRange_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfRange_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfRange_GetText(This,ec,dwFlags,pchText,cchMax,pcch)	\
    ( (This)->lpVtbl -> GetText(This,ec,dwFlags,pchText,cchMax,pcch) ) 

#define ITfRange_SetText(This,ec,dwFlags,pchText,cch)	\
    ( (This)->lpVtbl -> SetText(This,ec,dwFlags,pchText,cch) ) 

#define ITfRange_GetFormattedText(This,ec,ppDataObject)	\
    ( (This)->lpVtbl -> GetFormattedText(This,ec,ppDataObject) ) 

#define ITfRange_GetEmbedded(This,ec,rguidService,riid,ppunk)	\
    ( (This)->lpVtbl -> GetEmbedded(This,ec,rguidService,riid,ppunk) ) 

#define ITfRange_InsertEmbedded(This,ec,dwFlags,pDataObject)	\
    ( (This)->lpVtbl -> InsertEmbedded(This,ec,dwFlags,pDataObject) ) 

#define ITfRange_ShiftStart(This,ec,cchReq,pcch,pHalt)	\
    ( (This)->lpVtbl -> ShiftStart(This,ec,cchReq,pcch,pHalt) ) 

#define ITfRange_ShiftEnd(This,ec,cchReq,pcch,pHalt)	\
    ( (This)->lpVtbl -> ShiftEnd(This,ec,cchReq,pcch,pHalt) ) 

#define ITfRange_ShiftStartToRange(This,ec,pRange,aPos)	\
    ( (This)->lpVtbl -> ShiftStartToRange(This,ec,pRange,aPos) ) 

#define ITfRange_ShiftEndToRange(This,ec,pRange,aPos)	\
    ( (This)->lpVtbl -> ShiftEndToRange(This,ec,pRange,aPos) ) 

#define ITfRange_ShiftStartRegion(This,ec,dir,pfNoRegion)	\
    ( (This)->lpVtbl -> ShiftStartRegion(This,ec,dir,pfNoRegion) ) 

#define ITfRange_ShiftEndRegion(This,ec,dir,pfNoRegion)	\
    ( (This)->lpVtbl -> ShiftEndRegion(This,ec,dir,pfNoRegion) ) 

#define ITfRange_IsEmpty(This,ec,pfEmpty)	\
    ( (This)->lpVtbl -> IsEmpty(This,ec,pfEmpty) ) 

#define ITfRange_Collapse(This,ec,aPos)	\
    ( (This)->lpVtbl -> Collapse(This,ec,aPos) ) 

#define ITfRange_IsEqualStart(This,ec,pWith,aPos,pfEqual)	\
    ( (This)->lpVtbl -> IsEqualStart(This,ec,pWith,aPos,pfEqual) ) 

#define ITfRange_IsEqualEnd(This,ec,pWith,aPos,pfEqual)	\
    ( (This)->lpVtbl -> IsEqualEnd(This,ec,pWith,aPos,pfEqual) ) 

#define ITfRange_CompareStart(This,ec,pWith,aPos,plResult)	\
    ( (This)->lpVtbl -> CompareStart(This,ec,pWith,aPos,plResult) ) 

#define ITfRange_CompareEnd(This,ec,pWith,aPos,plResult)	\
    ( (This)->lpVtbl -> CompareEnd(This,ec,pWith,aPos,plResult) ) 

#define ITfRange_AdjustForInsert(This,ec,cchInsert,pfInsertOk)	\
    ( (This)->lpVtbl -> AdjustForInsert(This,ec,cchInsert,pfInsertOk) ) 

#define ITfRange_GetGravity(This,pgStart,pgEnd)	\
    ( (This)->lpVtbl -> GetGravity(This,pgStart,pgEnd) ) 

#define ITfRange_SetGravity(This,ec,gStart,gEnd)	\
    ( (This)->lpVtbl -> SetGravity(This,ec,gStart,gEnd) ) 

#define ITfRange_Clone(This,ppClone)	\
    ( (This)->lpVtbl -> Clone(This,ppClone) ) 

#define ITfRange_GetContext(This,ppContext)	\
    ( (This)->lpVtbl -> GetContext(This,ppContext) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfRange_INTERFACE_DEFINED__ */


#ifndef __ITfRangeACP_INTERFACE_DEFINED__
#define __ITfRangeACP_INTERFACE_DEFINED__

/* interface ITfRangeACP */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITfRangeACP;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("057a6296-029b-4154-b79a-0d461d4ea94c")
    ITfRangeACP : public ITfRange
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetExtent( 
            /* [out] */ __RPC__out LONG *pacpAnchor,
            /* [out] */ __RPC__out LONG *pcch) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetExtent( 
            /* [in] */ LONG acpAnchor,
            /* [in] */ LONG cch) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfRangeACPVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfRangeACP * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfRangeACP * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfRangeACP * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetText )( 
            __RPC__in ITfRangeACP * This,
            /* [in] */ TfEditCookie ec,
            /* [in] */ DWORD dwFlags,
            /* [length_is][size_is][out] */ __RPC__out_ecount_part(cchMax, *pcch) WCHAR *pchText,
            /* [in] */ ULONG cchMax,
            /* [out] */ __RPC__out ULONG *pcch);
        
        HRESULT ( STDMETHODCALLTYPE *SetText )( 
            __RPC__in ITfRangeACP * This,
            /* [in] */ TfEditCookie ec,
            /* [in] */ DWORD dwFlags,
            /* [unique][size_is][in] */ __RPC__in_ecount_full_opt(cch) const WCHAR *pchText,
            /* [in] */ LONG cch);
        
        HRESULT ( STDMETHODCALLTYPE *GetFormattedText )( 
            __RPC__in ITfRangeACP * This,
            /* [in] */ TfEditCookie ec,
            /* [out] */ __RPC__deref_out_opt IDataObject **ppDataObject);
        
        HRESULT ( STDMETHODCALLTYPE *GetEmbedded )( 
            __RPC__in ITfRangeACP * This,
            /* [in] */ TfEditCookie ec,
            /* [in] */ __RPC__in REFGUID rguidService,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ __RPC__deref_out_opt IUnknown **ppunk);
        
        HRESULT ( STDMETHODCALLTYPE *InsertEmbedded )( 
            __RPC__in ITfRangeACP * This,
            /* [in] */ TfEditCookie ec,
            /* [in] */ DWORD dwFlags,
            /* [in] */ __RPC__in_opt IDataObject *pDataObject);
        
        HRESULT ( STDMETHODCALLTYPE *ShiftStart )( 
            __RPC__in ITfRangeACP * This,
            /* [in] */ TfEditCookie ec,
            /* [in] */ LONG cchReq,
            /* [out] */ __RPC__out LONG *pcch,
            /* [unique][in] */ __RPC__in_opt const TF_HALTCOND *pHalt);
        
        HRESULT ( STDMETHODCALLTYPE *ShiftEnd )( 
            __RPC__in ITfRangeACP * This,
            /* [in] */ TfEditCookie ec,
            /* [in] */ LONG cchReq,
            /* [out] */ __RPC__out LONG *pcch,
            /* [unique][in] */ __RPC__in_opt const TF_HALTCOND *pHalt);
        
        HRESULT ( STDMETHODCALLTYPE *ShiftStartToRange )( 
            __RPC__in ITfRangeACP * This,
            /* [in] */ TfEditCookie ec,
            /* [in] */ __RPC__in_opt ITfRange *pRange,
            /* [in] */ TfAnchor aPos);
        
        HRESULT ( STDMETHODCALLTYPE *ShiftEndToRange )( 
            __RPC__in ITfRangeACP * This,
            /* [in] */ TfEditCookie ec,
            /* [in] */ __RPC__in_opt ITfRange *pRange,
            /* [in] */ TfAnchor aPos);
        
        HRESULT ( STDMETHODCALLTYPE *ShiftStartRegion )( 
            __RPC__in ITfRangeACP * This,
            /* [in] */ TfEditCookie ec,
            /* [in] */ TfShiftDir dir,
            /* [out] */ __RPC__out BOOL *pfNoRegion);
        
        HRESULT ( STDMETHODCALLTYPE *ShiftEndRegion )( 
            __RPC__in ITfRangeACP * This,
            /* [in] */ TfEditCookie ec,
            /* [in] */ TfShiftDir dir,
            /* [out] */ __RPC__out BOOL *pfNoRegion);
        
        HRESULT ( STDMETHODCALLTYPE *IsEmpty )( 
            __RPC__in ITfRangeACP * This,
            /* [in] */ TfEditCookie ec,
            /* [out] */ __RPC__out BOOL *pfEmpty);
        
        HRESULT ( STDMETHODCALLTYPE *Collapse )( 
            __RPC__in ITfRangeACP * This,
            /* [in] */ TfEditCookie ec,
            /* [in] */ TfAnchor aPos);
        
        HRESULT ( STDMETHODCALLTYPE *IsEqualStart )( 
            __RPC__in ITfRangeACP * This,
            /* [in] */ TfEditCookie ec,
            /* [in] */ __RPC__in_opt ITfRange *pWith,
            /* [in] */ TfAnchor aPos,
            /* [out] */ __RPC__out BOOL *pfEqual);
        
        HRESULT ( STDMETHODCALLTYPE *IsEqualEnd )( 
            __RPC__in ITfRangeACP * This,
            /* [in] */ TfEditCookie ec,
            /* [in] */ __RPC__in_opt ITfRange *pWith,
            /* [in] */ TfAnchor aPos,
            /* [out] */ __RPC__out BOOL *pfEqual);
        
        HRESULT ( STDMETHODCALLTYPE *CompareStart )( 
            __RPC__in ITfRangeACP * This,
            /* [in] */ TfEditCookie ec,
            /* [in] */ __RPC__in_opt ITfRange *pWith,
            /* [in] */ TfAnchor aPos,
            /* [out] */ __RPC__out LONG *plResult);
        
        HRESULT ( STDMETHODCALLTYPE *CompareEnd )( 
            __RPC__in ITfRangeACP * This,
            /* [in] */ TfEditCookie ec,
            /* [in] */ __RPC__in_opt ITfRange *pWith,
            /* [in] */ TfAnchor aPos,
            /* [out] */ __RPC__out LONG *plResult);
        
        HRESULT ( STDMETHODCALLTYPE *AdjustForInsert )( 
            __RPC__in ITfRangeACP * This,
            /* [in] */ TfEditCookie ec,
            /* [in] */ ULONG cchInsert,
            /* [out] */ __RPC__out BOOL *pfInsertOk);
        
        HRESULT ( STDMETHODCALLTYPE *GetGravity )( 
            __RPC__in ITfRangeACP * This,
            /* [out] */ __RPC__out TfGravity *pgStart,
            /* [out] */ __RPC__out TfGravity *pgEnd);
        
        HRESULT ( STDMETHODCALLTYPE *SetGravity )( 
            __RPC__in ITfRangeACP * This,
            /* [in] */ TfEditCookie ec,
            /* [in] */ TfGravity gStart,
            /* [in] */ TfGravity gEnd);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            __RPC__in ITfRangeACP * This,
            /* [out] */ __RPC__deref_out_opt ITfRange **ppClone);
        
        HRESULT ( STDMETHODCALLTYPE *GetContext )( 
            __RPC__in ITfRangeACP * This,
            /* [out] */ __RPC__deref_out_opt ITfContext **ppContext);
        
        HRESULT ( STDMETHODCALLTYPE *GetExtent )( 
            __RPC__in ITfRangeACP * This,
            /* [out] */ __RPC__out LONG *pacpAnchor,
            /* [out] */ __RPC__out LONG *pcch);
        
        HRESULT ( STDMETHODCALLTYPE *SetExtent )( 
            __RPC__in ITfRangeACP * This,
            /* [in] */ LONG acpAnchor,
            /* [in] */ LONG cch);
        
        END_INTERFACE
    } ITfRangeACPVtbl;

    interface ITfRangeACP
    {
        CONST_VTBL struct ITfRangeACPVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfRangeACP_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfRangeACP_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfRangeACP_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfRangeACP_GetText(This,ec,dwFlags,pchText,cchMax,pcch)	\
    ( (This)->lpVtbl -> GetText(This,ec,dwFlags,pchText,cchMax,pcch) ) 

#define ITfRangeACP_SetText(This,ec,dwFlags,pchText,cch)	\
    ( (This)->lpVtbl -> SetText(This,ec,dwFlags,pchText,cch) ) 

#define ITfRangeACP_GetFormattedText(This,ec,ppDataObject)	\
    ( (This)->lpVtbl -> GetFormattedText(This,ec,ppDataObject) ) 

#define ITfRangeACP_GetEmbedded(This,ec,rguidService,riid,ppunk)	\
    ( (This)->lpVtbl -> GetEmbedded(This,ec,rguidService,riid,ppunk) ) 

#define ITfRangeACP_InsertEmbedded(This,ec,dwFlags,pDataObject)	\
    ( (This)->lpVtbl -> InsertEmbedded(This,ec,dwFlags,pDataObject) ) 

#define ITfRangeACP_ShiftStart(This,ec,cchReq,pcch,pHalt)	\
    ( (This)->lpVtbl -> ShiftStart(This,ec,cchReq,pcch,pHalt) ) 

#define ITfRangeACP_ShiftEnd(This,ec,cchReq,pcch,pHalt)	\
    ( (This)->lpVtbl -> ShiftEnd(This,ec,cchReq,pcch,pHalt) ) 

#define ITfRangeACP_ShiftStartToRange(This,ec,pRange,aPos)	\
    ( (This)->lpVtbl -> ShiftStartToRange(This,ec,pRange,aPos) ) 

#define ITfRangeACP_ShiftEndToRange(This,ec,pRange,aPos)	\
    ( (This)->lpVtbl -> ShiftEndToRange(This,ec,pRange,aPos) ) 

#define ITfRangeACP_ShiftStartRegion(This,ec,dir,pfNoRegion)	\
    ( (This)->lpVtbl -> ShiftStartRegion(This,ec,dir,pfNoRegion) ) 

#define ITfRangeACP_ShiftEndRegion(This,ec,dir,pfNoRegion)	\
    ( (This)->lpVtbl -> ShiftEndRegion(This,ec,dir,pfNoRegion) ) 

#define ITfRangeACP_IsEmpty(This,ec,pfEmpty)	\
    ( (This)->lpVtbl -> IsEmpty(This,ec,pfEmpty) ) 

#define ITfRangeACP_Collapse(This,ec,aPos)	\
    ( (This)->lpVtbl -> Collapse(This,ec,aPos) ) 

#define ITfRangeACP_IsEqualStart(This,ec,pWith,aPos,pfEqual)	\
    ( (This)->lpVtbl -> IsEqualStart(This,ec,pWith,aPos,pfEqual) ) 

#define ITfRangeACP_IsEqualEnd(This,ec,pWith,aPos,pfEqual)	\
    ( (This)->lpVtbl -> IsEqualEnd(This,ec,pWith,aPos,pfEqual) ) 

#define ITfRangeACP_CompareStart(This,ec,pWith,aPos,plResult)	\
    ( (This)->lpVtbl -> CompareStart(This,ec,pWith,aPos,plResult) ) 

#define ITfRangeACP_CompareEnd(This,ec,pWith,aPos,plResult)	\
    ( (This)->lpVtbl -> CompareEnd(This,ec,pWith,aPos,plResult) ) 

#define ITfRangeACP_AdjustForInsert(This,ec,cchInsert,pfInsertOk)	\
    ( (This)->lpVtbl -> AdjustForInsert(This,ec,cchInsert,pfInsertOk) ) 

#define ITfRangeACP_GetGravity(This,pgStart,pgEnd)	\
    ( (This)->lpVtbl -> GetGravity(This,pgStart,pgEnd) ) 

#define ITfRangeACP_SetGravity(This,ec,gStart,gEnd)	\
    ( (This)->lpVtbl -> SetGravity(This,ec,gStart,gEnd) ) 

#define ITfRangeACP_Clone(This,ppClone)	\
    ( (This)->lpVtbl -> Clone(This,ppClone) ) 

#define ITfRangeACP_GetContext(This,ppContext)	\
    ( (This)->lpVtbl -> GetContext(This,ppContext) ) 


#define ITfRangeACP_GetExtent(This,pacpAnchor,pcch)	\
    ( (This)->lpVtbl -> GetExtent(This,pacpAnchor,pcch) ) 

#define ITfRangeACP_SetExtent(This,acpAnchor,cch)	\
    ( (This)->lpVtbl -> SetExtent(This,acpAnchor,cch) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfRangeACP_INTERFACE_DEFINED__ */


#ifndef __ITextStoreACPServices_INTERFACE_DEFINED__
#define __ITextStoreACPServices_INTERFACE_DEFINED__

/* interface ITextStoreACPServices */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITextStoreACPServices;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("aa80e901-2021-11d2-93e0-0060b067b86e")
    ITextStoreACPServices : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Serialize( 
            /* [in] */ __RPC__in_opt ITfProperty *pProp,
            /* [in] */ __RPC__in_opt ITfRange *pRange,
            /* [out] */ __RPC__out TF_PERSISTENT_PROPERTY_HEADER_ACP *pHdr,
            /* [in] */ __RPC__in_opt IStream *pStream) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Unserialize( 
            /* [in] */ __RPC__in_opt ITfProperty *pProp,
            /* [in] */ __RPC__in const TF_PERSISTENT_PROPERTY_HEADER_ACP *pHdr,
            /* [in] */ __RPC__in_opt IStream *pStream,
            /* [in] */ __RPC__in_opt ITfPersistentPropertyLoaderACP *pLoader) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ForceLoadProperty( 
            /* [in] */ __RPC__in_opt ITfProperty *pProp) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreateRange( 
            /* [in] */ LONG acpStart,
            /* [in] */ LONG acpEnd,
            /* [out] */ __RPC__deref_out_opt ITfRangeACP **ppRange) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITextStoreACPServicesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITextStoreACPServices * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITextStoreACPServices * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITextStoreACPServices * This);
        
        HRESULT ( STDMETHODCALLTYPE *Serialize )( 
            __RPC__in ITextStoreACPServices * This,
            /* [in] */ __RPC__in_opt ITfProperty *pProp,
            /* [in] */ __RPC__in_opt ITfRange *pRange,
            /* [out] */ __RPC__out TF_PERSISTENT_PROPERTY_HEADER_ACP *pHdr,
            /* [in] */ __RPC__in_opt IStream *pStream);
        
        HRESULT ( STDMETHODCALLTYPE *Unserialize )( 
            __RPC__in ITextStoreACPServices * This,
            /* [in] */ __RPC__in_opt ITfProperty *pProp,
            /* [in] */ __RPC__in const TF_PERSISTENT_PROPERTY_HEADER_ACP *pHdr,
            /* [in] */ __RPC__in_opt IStream *pStream,
            /* [in] */ __RPC__in_opt ITfPersistentPropertyLoaderACP *pLoader);
        
        HRESULT ( STDMETHODCALLTYPE *ForceLoadProperty )( 
            __RPC__in ITextStoreACPServices * This,
            /* [in] */ __RPC__in_opt ITfProperty *pProp);
        
        HRESULT ( STDMETHODCALLTYPE *CreateRange )( 
            __RPC__in ITextStoreACPServices * This,
            /* [in] */ LONG acpStart,
            /* [in] */ LONG acpEnd,
            /* [out] */ __RPC__deref_out_opt ITfRangeACP **ppRange);
        
        END_INTERFACE
    } ITextStoreACPServicesVtbl;

    interface ITextStoreACPServices
    {
        CONST_VTBL struct ITextStoreACPServicesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITextStoreACPServices_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITextStoreACPServices_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITextStoreACPServices_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITextStoreACPServices_Serialize(This,pProp,pRange,pHdr,pStream)	\
    ( (This)->lpVtbl -> Serialize(This,pProp,pRange,pHdr,pStream) ) 

#define ITextStoreACPServices_Unserialize(This,pProp,pHdr,pStream,pLoader)	\
    ( (This)->lpVtbl -> Unserialize(This,pProp,pHdr,pStream,pLoader) ) 

#define ITextStoreACPServices_ForceLoadProperty(This,pProp)	\
    ( (This)->lpVtbl -> ForceLoadProperty(This,pProp) ) 

#define ITextStoreACPServices_CreateRange(This,acpStart,acpEnd,ppRange)	\
    ( (This)->lpVtbl -> CreateRange(This,acpStart,acpEnd,ppRange) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITextStoreACPServices_INTERFACE_DEFINED__ */


#ifndef __ITfRangeBackup_INTERFACE_DEFINED__
#define __ITfRangeBackup_INTERFACE_DEFINED__

/* interface ITfRangeBackup */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITfRangeBackup;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("463a506d-6992-49d2-9b88-93d55e70bb16")
    ITfRangeBackup : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Restore( 
            /* [in] */ TfEditCookie ec,
            /* [in] */ __RPC__in_opt ITfRange *pRange) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfRangeBackupVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfRangeBackup * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfRangeBackup * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfRangeBackup * This);
        
        HRESULT ( STDMETHODCALLTYPE *Restore )( 
            __RPC__in ITfRangeBackup * This,
            /* [in] */ TfEditCookie ec,
            /* [in] */ __RPC__in_opt ITfRange *pRange);
        
        END_INTERFACE
    } ITfRangeBackupVtbl;

    interface ITfRangeBackup
    {
        CONST_VTBL struct ITfRangeBackupVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfRangeBackup_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfRangeBackup_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfRangeBackup_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfRangeBackup_Restore(This,ec,pRange)	\
    ( (This)->lpVtbl -> Restore(This,ec,pRange) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfRangeBackup_INTERFACE_DEFINED__ */


#ifndef __ITfPropertyStore_INTERFACE_DEFINED__
#define __ITfPropertyStore_INTERFACE_DEFINED__

/* interface ITfPropertyStore */
/* [unique][uuid][object] */ 

#define	TF_TU_CORRECTION	( 0x1 )


EXTERN_C const IID IID_ITfPropertyStore;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6834b120-88cb-11d2-bf45-00105a2799b5")
    ITfPropertyStore : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetType( 
            /* [out] */ __RPC__out GUID *pguid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDataType( 
            /* [out] */ __RPC__out DWORD *pdwReserved) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetData( 
            /* [out] */ __RPC__out VARIANT *pvarValue) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnTextUpdated( 
            /* [in] */ DWORD dwFlags,
            /* [in] */ __RPC__in_opt ITfRange *pRangeNew,
            /* [out] */ __RPC__out BOOL *pfAccept) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Shrink( 
            /* [in] */ __RPC__in_opt ITfRange *pRangeNew,
            /* [out] */ __RPC__out BOOL *pfFree) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Divide( 
            /* [in] */ __RPC__in_opt ITfRange *pRangeThis,
            /* [in] */ __RPC__in_opt ITfRange *pRangeNew,
            /* [out] */ __RPC__deref_out_opt ITfPropertyStore **ppPropStore) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ __RPC__deref_out_opt ITfPropertyStore **pPropStore) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPropertyRangeCreator( 
            /* [out] */ __RPC__out CLSID *pclsid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Serialize( 
            /* [in] */ __RPC__in_opt IStream *pStream,
            /* [out] */ __RPC__out ULONG *pcb) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfPropertyStoreVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfPropertyStore * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfPropertyStore * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfPropertyStore * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetType )( 
            __RPC__in ITfPropertyStore * This,
            /* [out] */ __RPC__out GUID *pguid);
        
        HRESULT ( STDMETHODCALLTYPE *GetDataType )( 
            __RPC__in ITfPropertyStore * This,
            /* [out] */ __RPC__out DWORD *pdwReserved);
        
        HRESULT ( STDMETHODCALLTYPE *GetData )( 
            __RPC__in ITfPropertyStore * This,
            /* [out] */ __RPC__out VARIANT *pvarValue);
        
        HRESULT ( STDMETHODCALLTYPE *OnTextUpdated )( 
            __RPC__in ITfPropertyStore * This,
            /* [in] */ DWORD dwFlags,
            /* [in] */ __RPC__in_opt ITfRange *pRangeNew,
            /* [out] */ __RPC__out BOOL *pfAccept);
        
        HRESULT ( STDMETHODCALLTYPE *Shrink )( 
            __RPC__in ITfPropertyStore * This,
            /* [in] */ __RPC__in_opt ITfRange *pRangeNew,
            /* [out] */ __RPC__out BOOL *pfFree);
        
        HRESULT ( STDMETHODCALLTYPE *Divide )( 
            __RPC__in ITfPropertyStore * This,
            /* [in] */ __RPC__in_opt ITfRange *pRangeThis,
            /* [in] */ __RPC__in_opt ITfRange *pRangeNew,
            /* [out] */ __RPC__deref_out_opt ITfPropertyStore **ppPropStore);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            __RPC__in ITfPropertyStore * This,
            /* [out] */ __RPC__deref_out_opt ITfPropertyStore **pPropStore);
        
        HRESULT ( STDMETHODCALLTYPE *GetPropertyRangeCreator )( 
            __RPC__in ITfPropertyStore * This,
            /* [out] */ __RPC__out CLSID *pclsid);
        
        HRESULT ( STDMETHODCALLTYPE *Serialize )( 
            __RPC__in ITfPropertyStore * This,
            /* [in] */ __RPC__in_opt IStream *pStream,
            /* [out] */ __RPC__out ULONG *pcb);
        
        END_INTERFACE
    } ITfPropertyStoreVtbl;

    interface ITfPropertyStore
    {
        CONST_VTBL struct ITfPropertyStoreVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfPropertyStore_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfPropertyStore_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfPropertyStore_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfPropertyStore_GetType(This,pguid)	\
    ( (This)->lpVtbl -> GetType(This,pguid) ) 

#define ITfPropertyStore_GetDataType(This,pdwReserved)	\
    ( (This)->lpVtbl -> GetDataType(This,pdwReserved) ) 

#define ITfPropertyStore_GetData(This,pvarValue)	\
    ( (This)->lpVtbl -> GetData(This,pvarValue) ) 

#define ITfPropertyStore_OnTextUpdated(This,dwFlags,pRangeNew,pfAccept)	\
    ( (This)->lpVtbl -> OnTextUpdated(This,dwFlags,pRangeNew,pfAccept) ) 

#define ITfPropertyStore_Shrink(This,pRangeNew,pfFree)	\
    ( (This)->lpVtbl -> Shrink(This,pRangeNew,pfFree) ) 

#define ITfPropertyStore_Divide(This,pRangeThis,pRangeNew,ppPropStore)	\
    ( (This)->lpVtbl -> Divide(This,pRangeThis,pRangeNew,ppPropStore) ) 

#define ITfPropertyStore_Clone(This,pPropStore)	\
    ( (This)->lpVtbl -> Clone(This,pPropStore) ) 

#define ITfPropertyStore_GetPropertyRangeCreator(This,pclsid)	\
    ( (This)->lpVtbl -> GetPropertyRangeCreator(This,pclsid) ) 

#define ITfPropertyStore_Serialize(This,pStream,pcb)	\
    ( (This)->lpVtbl -> Serialize(This,pStream,pcb) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfPropertyStore_INTERFACE_DEFINED__ */


#ifndef __IEnumTfRanges_INTERFACE_DEFINED__
#define __IEnumTfRanges_INTERFACE_DEFINED__

/* interface IEnumTfRanges */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IEnumTfRanges;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("f99d3f40-8e32-11d2-bf46-00105a2799b5")
    IEnumTfRanges : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ __RPC__deref_out_opt IEnumTfRanges **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG ulCount,
            /* [length_is][size_is][out] */ __RPC__out_ecount_part(ulCount, *pcFetched) ITfRange **ppRange,
            /* [out] */ __RPC__out ULONG *pcFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            ULONG ulCount) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumTfRangesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IEnumTfRanges * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IEnumTfRanges * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IEnumTfRanges * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            __RPC__in IEnumTfRanges * This,
            /* [out] */ __RPC__deref_out_opt IEnumTfRanges **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            __RPC__in IEnumTfRanges * This,
            /* [in] */ ULONG ulCount,
            /* [length_is][size_is][out] */ __RPC__out_ecount_part(ulCount, *pcFetched) ITfRange **ppRange,
            /* [out] */ __RPC__out ULONG *pcFetched);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            __RPC__in IEnumTfRanges * This);
        
        HRESULT ( STDMETHODCALLTYPE *Skip )( 
            __RPC__in IEnumTfRanges * This,
            ULONG ulCount);
        
        END_INTERFACE
    } IEnumTfRangesVtbl;

    interface IEnumTfRanges
    {
        CONST_VTBL struct IEnumTfRangesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumTfRanges_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IEnumTfRanges_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IEnumTfRanges_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IEnumTfRanges_Clone(This,ppEnum)	\
    ( (This)->lpVtbl -> Clone(This,ppEnum) ) 

#define IEnumTfRanges_Next(This,ulCount,ppRange,pcFetched)	\
    ( (This)->lpVtbl -> Next(This,ulCount,ppRange,pcFetched) ) 

#define IEnumTfRanges_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define IEnumTfRanges_Skip(This,ulCount)	\
    ( (This)->lpVtbl -> Skip(This,ulCount) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IEnumTfRanges_INTERFACE_DEFINED__ */


#ifndef __ITfCreatePropertyStore_INTERFACE_DEFINED__
#define __ITfCreatePropertyStore_INTERFACE_DEFINED__

/* interface ITfCreatePropertyStore */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITfCreatePropertyStore;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2463fbf0-b0af-11d2-afc5-00105a2799b5")
    ITfCreatePropertyStore : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE IsStoreSerializable( 
            /* [in] */ __RPC__in REFGUID guidProp,
            /* [in] */ __RPC__in_opt ITfRange *pRange,
            /* [in] */ __RPC__in_opt ITfPropertyStore *pPropStore,
            /* [out] */ __RPC__out BOOL *pfSerializable) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CreatePropertyStore( 
            /* [in] */ __RPC__in REFGUID guidProp,
            /* [in] */ __RPC__in_opt ITfRange *pRange,
            /* [in] */ ULONG cb,
            /* [in] */ __RPC__in_opt IStream *pStream,
            /* [out] */ __RPC__deref_out_opt ITfPropertyStore **ppStore) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfCreatePropertyStoreVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfCreatePropertyStore * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfCreatePropertyStore * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfCreatePropertyStore * This);
        
        HRESULT ( STDMETHODCALLTYPE *IsStoreSerializable )( 
            __RPC__in ITfCreatePropertyStore * This,
            /* [in] */ __RPC__in REFGUID guidProp,
            /* [in] */ __RPC__in_opt ITfRange *pRange,
            /* [in] */ __RPC__in_opt ITfPropertyStore *pPropStore,
            /* [out] */ __RPC__out BOOL *pfSerializable);
        
        HRESULT ( STDMETHODCALLTYPE *CreatePropertyStore )( 
            __RPC__in ITfCreatePropertyStore * This,
            /* [in] */ __RPC__in REFGUID guidProp,
            /* [in] */ __RPC__in_opt ITfRange *pRange,
            /* [in] */ ULONG cb,
            /* [in] */ __RPC__in_opt IStream *pStream,
            /* [out] */ __RPC__deref_out_opt ITfPropertyStore **ppStore);
        
        END_INTERFACE
    } ITfCreatePropertyStoreVtbl;

    interface ITfCreatePropertyStore
    {
        CONST_VTBL struct ITfCreatePropertyStoreVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfCreatePropertyStore_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfCreatePropertyStore_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfCreatePropertyStore_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfCreatePropertyStore_IsStoreSerializable(This,guidProp,pRange,pPropStore,pfSerializable)	\
    ( (This)->lpVtbl -> IsStoreSerializable(This,guidProp,pRange,pPropStore,pfSerializable) ) 

#define ITfCreatePropertyStore_CreatePropertyStore(This,guidProp,pRange,cb,pStream,ppStore)	\
    ( (This)->lpVtbl -> CreatePropertyStore(This,guidProp,pRange,cb,pStream,ppStore) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfCreatePropertyStore_INTERFACE_DEFINED__ */


#ifndef __ITfPersistentPropertyLoaderACP_INTERFACE_DEFINED__
#define __ITfPersistentPropertyLoaderACP_INTERFACE_DEFINED__

/* interface ITfPersistentPropertyLoaderACP */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITfPersistentPropertyLoaderACP;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4ef89150-0807-11d3-8df0-00105a2799b5")
    ITfPersistentPropertyLoaderACP : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE LoadProperty( 
            /* [in] */ __RPC__in const TF_PERSISTENT_PROPERTY_HEADER_ACP *pHdr,
            /* [out] */ __RPC__deref_out_opt IStream **ppStream) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfPersistentPropertyLoaderACPVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfPersistentPropertyLoaderACP * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfPersistentPropertyLoaderACP * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfPersistentPropertyLoaderACP * This);
        
        HRESULT ( STDMETHODCALLTYPE *LoadProperty )( 
            __RPC__in ITfPersistentPropertyLoaderACP * This,
            /* [in] */ __RPC__in const TF_PERSISTENT_PROPERTY_HEADER_ACP *pHdr,
            /* [out] */ __RPC__deref_out_opt IStream **ppStream);
        
        END_INTERFACE
    } ITfPersistentPropertyLoaderACPVtbl;

    interface ITfPersistentPropertyLoaderACP
    {
        CONST_VTBL struct ITfPersistentPropertyLoaderACPVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfPersistentPropertyLoaderACP_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfPersistentPropertyLoaderACP_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfPersistentPropertyLoaderACP_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfPersistentPropertyLoaderACP_LoadProperty(This,pHdr,ppStream)	\
    ( (This)->lpVtbl -> LoadProperty(This,pHdr,ppStream) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfPersistentPropertyLoaderACP_INTERFACE_DEFINED__ */


#ifndef __ITfProperty_INTERFACE_DEFINED__
#define __ITfProperty_INTERFACE_DEFINED__

/* interface ITfProperty */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITfProperty;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e2449660-9542-11d2-bf46-00105a2799b5")
    ITfProperty : public ITfReadOnlyProperty
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE FindRange( 
            /* [in] */ TfEditCookie ec,
            /* [in] */ __RPC__in_opt ITfRange *pRange,
            /* [out] */ __RPC__deref_out_opt ITfRange **ppRange,
            /* [in] */ TfAnchor aPos) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetValueStore( 
            /* [in] */ TfEditCookie ec,
            /* [in] */ __RPC__in_opt ITfRange *pRange,
            /* [in] */ __RPC__in_opt ITfPropertyStore *pPropStore) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetValue( 
            /* [in] */ TfEditCookie ec,
            /* [in] */ __RPC__in_opt ITfRange *pRange,
            /* [in] */ __RPC__in const VARIANT *pvarValue) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clear( 
            /* [in] */ TfEditCookie ec,
            /* [in] */ __RPC__in_opt ITfRange *pRange) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfPropertyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfProperty * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfProperty * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfProperty * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetType )( 
            __RPC__in ITfProperty * This,
            /* [out] */ __RPC__out GUID *pguid);
        
        HRESULT ( STDMETHODCALLTYPE *EnumRanges )( 
            __RPC__in ITfProperty * This,
            /* [in] */ TfEditCookie ec,
            /* [out] */ __RPC__deref_out_opt IEnumTfRanges **ppEnum,
            /* [in] */ __RPC__in_opt ITfRange *pTargetRange);
        
        HRESULT ( STDMETHODCALLTYPE *GetValue )( 
            __RPC__in ITfProperty * This,
            /* [in] */ TfEditCookie ec,
            /* [in] */ __RPC__in_opt ITfRange *pRange,
            /* [out] */ __RPC__out VARIANT *pvarValue);
        
        HRESULT ( STDMETHODCALLTYPE *GetContext )( 
            __RPC__in ITfProperty * This,
            /* [out] */ __RPC__deref_out_opt ITfContext **ppContext);
        
        HRESULT ( STDMETHODCALLTYPE *FindRange )( 
            __RPC__in ITfProperty * This,
            /* [in] */ TfEditCookie ec,
            /* [in] */ __RPC__in_opt ITfRange *pRange,
            /* [out] */ __RPC__deref_out_opt ITfRange **ppRange,
            /* [in] */ TfAnchor aPos);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueStore )( 
            __RPC__in ITfProperty * This,
            /* [in] */ TfEditCookie ec,
            /* [in] */ __RPC__in_opt ITfRange *pRange,
            /* [in] */ __RPC__in_opt ITfPropertyStore *pPropStore);
        
        HRESULT ( STDMETHODCALLTYPE *SetValue )( 
            __RPC__in ITfProperty * This,
            /* [in] */ TfEditCookie ec,
            /* [in] */ __RPC__in_opt ITfRange *pRange,
            /* [in] */ __RPC__in const VARIANT *pvarValue);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            __RPC__in ITfProperty * This,
            /* [in] */ TfEditCookie ec,
            /* [in] */ __RPC__in_opt ITfRange *pRange);
        
        END_INTERFACE
    } ITfPropertyVtbl;

    interface ITfProperty
    {
        CONST_VTBL struct ITfPropertyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfProperty_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfProperty_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfProperty_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfProperty_GetType(This,pguid)	\
    ( (This)->lpVtbl -> GetType(This,pguid) ) 

#define ITfProperty_EnumRanges(This,ec,ppEnum,pTargetRange)	\
    ( (This)->lpVtbl -> EnumRanges(This,ec,ppEnum,pTargetRange) ) 

#define ITfProperty_GetValue(This,ec,pRange,pvarValue)	\
    ( (This)->lpVtbl -> GetValue(This,ec,pRange,pvarValue) ) 

#define ITfProperty_GetContext(This,ppContext)	\
    ( (This)->lpVtbl -> GetContext(This,ppContext) ) 


#define ITfProperty_FindRange(This,ec,pRange,ppRange,aPos)	\
    ( (This)->lpVtbl -> FindRange(This,ec,pRange,ppRange,aPos) ) 

#define ITfProperty_SetValueStore(This,ec,pRange,pPropStore)	\
    ( (This)->lpVtbl -> SetValueStore(This,ec,pRange,pPropStore) ) 

#define ITfProperty_SetValue(This,ec,pRange,pvarValue)	\
    ( (This)->lpVtbl -> SetValue(This,ec,pRange,pvarValue) ) 

#define ITfProperty_Clear(This,ec,pRange)	\
    ( (This)->lpVtbl -> Clear(This,ec,pRange) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfProperty_INTERFACE_DEFINED__ */


#ifndef __IEnumTfProperties_INTERFACE_DEFINED__
#define __IEnumTfProperties_INTERFACE_DEFINED__

/* interface IEnumTfProperties */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IEnumTfProperties;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("19188cb0-aca9-11d2-afc5-00105a2799b5")
    IEnumTfProperties : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ __RPC__deref_out_opt IEnumTfProperties **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG ulCount,
            /* [length_is][size_is][out] */ __RPC__out_ecount_part(ulCount, *pcFetched) ITfProperty **ppProp,
            /* [out] */ __RPC__out ULONG *pcFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG ulCount) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumTfPropertiesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IEnumTfProperties * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IEnumTfProperties * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IEnumTfProperties * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            __RPC__in IEnumTfProperties * This,
            /* [out] */ __RPC__deref_out_opt IEnumTfProperties **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            __RPC__in IEnumTfProperties * This,
            /* [in] */ ULONG ulCount,
            /* [length_is][size_is][out] */ __RPC__out_ecount_part(ulCount, *pcFetched) ITfProperty **ppProp,
            /* [out] */ __RPC__out ULONG *pcFetched);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            __RPC__in IEnumTfProperties * This);
        
        HRESULT ( STDMETHODCALLTYPE *Skip )( 
            __RPC__in IEnumTfProperties * This,
            /* [in] */ ULONG ulCount);
        
        END_INTERFACE
    } IEnumTfPropertiesVtbl;

    interface IEnumTfProperties
    {
        CONST_VTBL struct IEnumTfPropertiesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumTfProperties_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IEnumTfProperties_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IEnumTfProperties_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IEnumTfProperties_Clone(This,ppEnum)	\
    ( (This)->lpVtbl -> Clone(This,ppEnum) ) 

#define IEnumTfProperties_Next(This,ulCount,ppProp,pcFetched)	\
    ( (This)->lpVtbl -> Next(This,ulCount,ppProp,pcFetched) ) 

#define IEnumTfProperties_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define IEnumTfProperties_Skip(This,ulCount)	\
    ( (This)->lpVtbl -> Skip(This,ulCount) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IEnumTfProperties_INTERFACE_DEFINED__ */


#ifndef __ITfCompartment_INTERFACE_DEFINED__
#define __ITfCompartment_INTERFACE_DEFINED__

/* interface ITfCompartment */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITfCompartment;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("bb08f7a9-607a-4384-8623-056892b64371")
    ITfCompartment : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetValue( 
            /* [in] */ TfClientId tid,
            /* [in] */ __RPC__in const VARIANT *pvarValue) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetValue( 
            /* [out] */ __RPC__out VARIANT *pvarValue) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfCompartmentVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfCompartment * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfCompartment * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfCompartment * This);
        
        HRESULT ( STDMETHODCALLTYPE *SetValue )( 
            __RPC__in ITfCompartment * This,
            /* [in] */ TfClientId tid,
            /* [in] */ __RPC__in const VARIANT *pvarValue);
        
        HRESULT ( STDMETHODCALLTYPE *GetValue )( 
            __RPC__in ITfCompartment * This,
            /* [out] */ __RPC__out VARIANT *pvarValue);
        
        END_INTERFACE
    } ITfCompartmentVtbl;

    interface ITfCompartment
    {
        CONST_VTBL struct ITfCompartmentVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfCompartment_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfCompartment_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfCompartment_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfCompartment_SetValue(This,tid,pvarValue)	\
    ( (This)->lpVtbl -> SetValue(This,tid,pvarValue) ) 

#define ITfCompartment_GetValue(This,pvarValue)	\
    ( (This)->lpVtbl -> GetValue(This,pvarValue) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfCompartment_INTERFACE_DEFINED__ */


#ifndef __ITfCompartmentEventSink_INTERFACE_DEFINED__
#define __ITfCompartmentEventSink_INTERFACE_DEFINED__

/* interface ITfCompartmentEventSink */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITfCompartmentEventSink;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("743abd5f-f26d-48df-8cc5-238492419b64")
    ITfCompartmentEventSink : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnChange( 
            /* [in] */ __RPC__in REFGUID rguid) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfCompartmentEventSinkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfCompartmentEventSink * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfCompartmentEventSink * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfCompartmentEventSink * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnChange )( 
            __RPC__in ITfCompartmentEventSink * This,
            /* [in] */ __RPC__in REFGUID rguid);
        
        END_INTERFACE
    } ITfCompartmentEventSinkVtbl;

    interface ITfCompartmentEventSink
    {
        CONST_VTBL struct ITfCompartmentEventSinkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfCompartmentEventSink_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfCompartmentEventSink_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfCompartmentEventSink_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfCompartmentEventSink_OnChange(This,rguid)	\
    ( (This)->lpVtbl -> OnChange(This,rguid) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfCompartmentEventSink_INTERFACE_DEFINED__ */


#ifndef __ITfCompartmentMgr_INTERFACE_DEFINED__
#define __ITfCompartmentMgr_INTERFACE_DEFINED__

/* interface ITfCompartmentMgr */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITfCompartmentMgr;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7dcf57ac-18ad-438b-824d-979bffb74b7c")
    ITfCompartmentMgr : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetCompartment( 
            /* [in] */ __RPC__in REFGUID rguid,
            /* [out] */ __RPC__deref_out_opt ITfCompartment **ppcomp) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ClearCompartment( 
            /* [in] */ TfClientId tid,
            /* [in] */ __RPC__in REFGUID rguid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumCompartments( 
            /* [out] */ __RPC__deref_out_opt IEnumGUID **ppEnum) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfCompartmentMgrVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfCompartmentMgr * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfCompartmentMgr * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfCompartmentMgr * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetCompartment )( 
            __RPC__in ITfCompartmentMgr * This,
            /* [in] */ __RPC__in REFGUID rguid,
            /* [out] */ __RPC__deref_out_opt ITfCompartment **ppcomp);
        
        HRESULT ( STDMETHODCALLTYPE *ClearCompartment )( 
            __RPC__in ITfCompartmentMgr * This,
            /* [in] */ TfClientId tid,
            /* [in] */ __RPC__in REFGUID rguid);
        
        HRESULT ( STDMETHODCALLTYPE *EnumCompartments )( 
            __RPC__in ITfCompartmentMgr * This,
            /* [out] */ __RPC__deref_out_opt IEnumGUID **ppEnum);
        
        END_INTERFACE
    } ITfCompartmentMgrVtbl;

    interface ITfCompartmentMgr
    {
        CONST_VTBL struct ITfCompartmentMgrVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfCompartmentMgr_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfCompartmentMgr_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfCompartmentMgr_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfCompartmentMgr_GetCompartment(This,rguid,ppcomp)	\
    ( (This)->lpVtbl -> GetCompartment(This,rguid,ppcomp) ) 

#define ITfCompartmentMgr_ClearCompartment(This,tid,rguid)	\
    ( (This)->lpVtbl -> ClearCompartment(This,tid,rguid) ) 

#define ITfCompartmentMgr_EnumCompartments(This,ppEnum)	\
    ( (This)->lpVtbl -> EnumCompartments(This,ppEnum) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfCompartmentMgr_INTERFACE_DEFINED__ */


#ifndef __ITfFunction_INTERFACE_DEFINED__
#define __ITfFunction_INTERFACE_DEFINED__

/* interface ITfFunction */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITfFunction;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("db593490-098f-11d3-8df0-00105a2799b5")
    ITfFunction : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetDisplayName( 
            /* [out] */ __RPC__deref_out_opt BSTR *pbstrName) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfFunctionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfFunction * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfFunction * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfFunction * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetDisplayName )( 
            __RPC__in ITfFunction * This,
            /* [out] */ __RPC__deref_out_opt BSTR *pbstrName);
        
        END_INTERFACE
    } ITfFunctionVtbl;

    interface ITfFunction
    {
        CONST_VTBL struct ITfFunctionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfFunction_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfFunction_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfFunction_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfFunction_GetDisplayName(This,pbstrName)	\
    ( (This)->lpVtbl -> GetDisplayName(This,pbstrName) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfFunction_INTERFACE_DEFINED__ */


#ifndef __ITfFunctionProvider_INTERFACE_DEFINED__
#define __ITfFunctionProvider_INTERFACE_DEFINED__

/* interface ITfFunctionProvider */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITfFunctionProvider;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("101d6610-0990-11d3-8df0-00105a2799b5")
    ITfFunctionProvider : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetType( 
            /* [out] */ __RPC__out GUID *pguid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDescription( 
            /* [out] */ __RPC__deref_out_opt BSTR *pbstrDesc) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetFunction( 
            /* [in] */ __RPC__in REFGUID rguid,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ __RPC__deref_out_opt IUnknown **ppunk) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfFunctionProviderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfFunctionProvider * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfFunctionProvider * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfFunctionProvider * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetType )( 
            __RPC__in ITfFunctionProvider * This,
            /* [out] */ __RPC__out GUID *pguid);
        
        HRESULT ( STDMETHODCALLTYPE *GetDescription )( 
            __RPC__in ITfFunctionProvider * This,
            /* [out] */ __RPC__deref_out_opt BSTR *pbstrDesc);
        
        HRESULT ( STDMETHODCALLTYPE *GetFunction )( 
            __RPC__in ITfFunctionProvider * This,
            /* [in] */ __RPC__in REFGUID rguid,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ __RPC__deref_out_opt IUnknown **ppunk);
        
        END_INTERFACE
    } ITfFunctionProviderVtbl;

    interface ITfFunctionProvider
    {
        CONST_VTBL struct ITfFunctionProviderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfFunctionProvider_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfFunctionProvider_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfFunctionProvider_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfFunctionProvider_GetType(This,pguid)	\
    ( (This)->lpVtbl -> GetType(This,pguid) ) 

#define ITfFunctionProvider_GetDescription(This,pbstrDesc)	\
    ( (This)->lpVtbl -> GetDescription(This,pbstrDesc) ) 

#define ITfFunctionProvider_GetFunction(This,rguid,riid,ppunk)	\
    ( (This)->lpVtbl -> GetFunction(This,rguid,riid,ppunk) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfFunctionProvider_INTERFACE_DEFINED__ */


#ifndef __IEnumTfFunctionProviders_INTERFACE_DEFINED__
#define __IEnumTfFunctionProviders_INTERFACE_DEFINED__

/* interface IEnumTfFunctionProviders */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IEnumTfFunctionProviders;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("e4b24db0-0990-11d3-8df0-00105a2799b5")
    IEnumTfFunctionProviders : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ __RPC__deref_out_opt IEnumTfFunctionProviders **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG ulCount,
            /* [length_is][size_is][out] */ __RPC__out_ecount_part(ulCount, *pcFetch) ITfFunctionProvider **ppCmdobj,
            /* [out] */ __RPC__out ULONG *pcFetch) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG ulCount) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumTfFunctionProvidersVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IEnumTfFunctionProviders * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IEnumTfFunctionProviders * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IEnumTfFunctionProviders * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            __RPC__in IEnumTfFunctionProviders * This,
            /* [out] */ __RPC__deref_out_opt IEnumTfFunctionProviders **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            __RPC__in IEnumTfFunctionProviders * This,
            /* [in] */ ULONG ulCount,
            /* [length_is][size_is][out] */ __RPC__out_ecount_part(ulCount, *pcFetch) ITfFunctionProvider **ppCmdobj,
            /* [out] */ __RPC__out ULONG *pcFetch);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            __RPC__in IEnumTfFunctionProviders * This);
        
        HRESULT ( STDMETHODCALLTYPE *Skip )( 
            __RPC__in IEnumTfFunctionProviders * This,
            /* [in] */ ULONG ulCount);
        
        END_INTERFACE
    } IEnumTfFunctionProvidersVtbl;

    interface IEnumTfFunctionProviders
    {
        CONST_VTBL struct IEnumTfFunctionProvidersVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumTfFunctionProviders_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IEnumTfFunctionProviders_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IEnumTfFunctionProviders_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IEnumTfFunctionProviders_Clone(This,ppEnum)	\
    ( (This)->lpVtbl -> Clone(This,ppEnum) ) 

#define IEnumTfFunctionProviders_Next(This,ulCount,ppCmdobj,pcFetch)	\
    ( (This)->lpVtbl -> Next(This,ulCount,ppCmdobj,pcFetch) ) 

#define IEnumTfFunctionProviders_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define IEnumTfFunctionProviders_Skip(This,ulCount)	\
    ( (This)->lpVtbl -> Skip(This,ulCount) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IEnumTfFunctionProviders_INTERFACE_DEFINED__ */


#ifndef __ITfInputProcessorProfiles_INTERFACE_DEFINED__
#define __ITfInputProcessorProfiles_INTERFACE_DEFINED__

/* interface ITfInputProcessorProfiles */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITfInputProcessorProfiles;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1F02B6C5-7842-4EE6-8A0B-9A24183A95CA")
    ITfInputProcessorProfiles : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Register( 
            /* [in] */ __RPC__in REFCLSID rclsid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Unregister( 
            /* [in] */ __RPC__in REFCLSID rclsid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddLanguageProfile( 
            /* [in] */ __RPC__in REFCLSID rclsid,
            /* [in] */ LANGID langid,
            /* [in] */ __RPC__in REFGUID guidProfile,
            /* [size_is][in] */ __RPC__in_ecount_full(cchDesc) const WCHAR *pchDesc,
            /* [in] */ ULONG cchDesc,
            /* [size_is][in] */ __RPC__in_ecount_full(cchFile) const WCHAR *pchIconFile,
            /* [in] */ ULONG cchFile,
            /* [in] */ ULONG uIconIndex) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveLanguageProfile( 
            /* [in] */ __RPC__in REFCLSID rclsid,
            /* [in] */ LANGID langid,
            /* [in] */ __RPC__in REFGUID guidProfile) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumInputProcessorInfo( 
            /* [out] */ __RPC__deref_out_opt IEnumGUID **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDefaultLanguageProfile( 
            /* [in] */ LANGID langid,
            /* [in] */ __RPC__in REFGUID catid,
            /* [out] */ __RPC__out CLSID *pclsid,
            /* [out] */ __RPC__out GUID *pguidProfile) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetDefaultLanguageProfile( 
            /* [in] */ LANGID langid,
            /* [in] */ __RPC__in REFCLSID rclsid,
            /* [in] */ __RPC__in REFGUID guidProfiles) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ActivateLanguageProfile( 
            /* [in] */ __RPC__in REFCLSID rclsid,
            /* [in] */ LANGID langid,
            /* [in] */ __RPC__in REFGUID guidProfiles) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetActiveLanguageProfile( 
            /* [in] */ __RPC__in REFCLSID rclsid,
            /* [out] */ __RPC__out LANGID *plangid,
            /* [out] */ __RPC__out GUID *pguidProfile) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetLanguageProfileDescription( 
            /* [in] */ __RPC__in REFCLSID rclsid,
            /* [in] */ LANGID langid,
            /* [in] */ __RPC__in REFGUID guidProfile,
            /* [out] */ __RPC__deref_out_opt BSTR *pbstrProfile) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCurrentLanguage( 
            /* [out] */ __RPC__out LANGID *plangid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ChangeCurrentLanguage( 
            /* [in] */ LANGID langid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetLanguageList( 
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pulCount) LANGID **ppLangId,
            /* [out] */ __RPC__out ULONG *pulCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumLanguageProfiles( 
            /* [in] */ LANGID langid,
            /* [out] */ __RPC__deref_out_opt IEnumTfLanguageProfiles **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnableLanguageProfile( 
            /* [in] */ __RPC__in REFCLSID rclsid,
            /* [in] */ LANGID langid,
            /* [in] */ __RPC__in REFGUID guidProfile,
            /* [in] */ BOOL fEnable) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsEnabledLanguageProfile( 
            /* [in] */ __RPC__in REFCLSID rclsid,
            /* [in] */ LANGID langid,
            /* [in] */ __RPC__in REFGUID guidProfile,
            /* [out] */ __RPC__out BOOL *pfEnable) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnableLanguageProfileByDefault( 
            /* [in] */ __RPC__in REFCLSID rclsid,
            /* [in] */ LANGID langid,
            /* [in] */ __RPC__in REFGUID guidProfile,
            /* [in] */ BOOL fEnable) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SubstituteKeyboardLayout( 
            /* [in] */ __RPC__in REFCLSID rclsid,
            /* [in] */ LANGID langid,
            /* [in] */ __RPC__in REFGUID guidProfile,
            /* [in] */ HKL hKL) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfInputProcessorProfilesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfInputProcessorProfiles * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfInputProcessorProfiles * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfInputProcessorProfiles * This);
        
        HRESULT ( STDMETHODCALLTYPE *Register )( 
            __RPC__in ITfInputProcessorProfiles * This,
            /* [in] */ __RPC__in REFCLSID rclsid);
        
        HRESULT ( STDMETHODCALLTYPE *Unregister )( 
            __RPC__in ITfInputProcessorProfiles * This,
            /* [in] */ __RPC__in REFCLSID rclsid);
        
        HRESULT ( STDMETHODCALLTYPE *AddLanguageProfile )( 
            __RPC__in ITfInputProcessorProfiles * This,
            /* [in] */ __RPC__in REFCLSID rclsid,
            /* [in] */ LANGID langid,
            /* [in] */ __RPC__in REFGUID guidProfile,
            /* [size_is][in] */ __RPC__in_ecount_full(cchDesc) const WCHAR *pchDesc,
            /* [in] */ ULONG cchDesc,
            /* [size_is][in] */ __RPC__in_ecount_full(cchFile) const WCHAR *pchIconFile,
            /* [in] */ ULONG cchFile,
            /* [in] */ ULONG uIconIndex);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveLanguageProfile )( 
            __RPC__in ITfInputProcessorProfiles * This,
            /* [in] */ __RPC__in REFCLSID rclsid,
            /* [in] */ LANGID langid,
            /* [in] */ __RPC__in REFGUID guidProfile);
        
        HRESULT ( STDMETHODCALLTYPE *EnumInputProcessorInfo )( 
            __RPC__in ITfInputProcessorProfiles * This,
            /* [out] */ __RPC__deref_out_opt IEnumGUID **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetDefaultLanguageProfile )( 
            __RPC__in ITfInputProcessorProfiles * This,
            /* [in] */ LANGID langid,
            /* [in] */ __RPC__in REFGUID catid,
            /* [out] */ __RPC__out CLSID *pclsid,
            /* [out] */ __RPC__out GUID *pguidProfile);
        
        HRESULT ( STDMETHODCALLTYPE *SetDefaultLanguageProfile )( 
            __RPC__in ITfInputProcessorProfiles * This,
            /* [in] */ LANGID langid,
            /* [in] */ __RPC__in REFCLSID rclsid,
            /* [in] */ __RPC__in REFGUID guidProfiles);
        
        HRESULT ( STDMETHODCALLTYPE *ActivateLanguageProfile )( 
            __RPC__in ITfInputProcessorProfiles * This,
            /* [in] */ __RPC__in REFCLSID rclsid,
            /* [in] */ LANGID langid,
            /* [in] */ __RPC__in REFGUID guidProfiles);
        
        HRESULT ( STDMETHODCALLTYPE *GetActiveLanguageProfile )( 
            __RPC__in ITfInputProcessorProfiles * This,
            /* [in] */ __RPC__in REFCLSID rclsid,
            /* [out] */ __RPC__out LANGID *plangid,
            /* [out] */ __RPC__out GUID *pguidProfile);
        
        HRESULT ( STDMETHODCALLTYPE *GetLanguageProfileDescription )( 
            __RPC__in ITfInputProcessorProfiles * This,
            /* [in] */ __RPC__in REFCLSID rclsid,
            /* [in] */ LANGID langid,
            /* [in] */ __RPC__in REFGUID guidProfile,
            /* [out] */ __RPC__deref_out_opt BSTR *pbstrProfile);
        
        HRESULT ( STDMETHODCALLTYPE *GetCurrentLanguage )( 
            __RPC__in ITfInputProcessorProfiles * This,
            /* [out] */ __RPC__out LANGID *plangid);
        
        HRESULT ( STDMETHODCALLTYPE *ChangeCurrentLanguage )( 
            __RPC__in ITfInputProcessorProfiles * This,
            /* [in] */ LANGID langid);
        
        HRESULT ( STDMETHODCALLTYPE *GetLanguageList )( 
            __RPC__in ITfInputProcessorProfiles * This,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pulCount) LANGID **ppLangId,
            /* [out] */ __RPC__out ULONG *pulCount);
        
        HRESULT ( STDMETHODCALLTYPE *EnumLanguageProfiles )( 
            __RPC__in ITfInputProcessorProfiles * This,
            /* [in] */ LANGID langid,
            /* [out] */ __RPC__deref_out_opt IEnumTfLanguageProfiles **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *EnableLanguageProfile )( 
            __RPC__in ITfInputProcessorProfiles * This,
            /* [in] */ __RPC__in REFCLSID rclsid,
            /* [in] */ LANGID langid,
            /* [in] */ __RPC__in REFGUID guidProfile,
            /* [in] */ BOOL fEnable);
        
        HRESULT ( STDMETHODCALLTYPE *IsEnabledLanguageProfile )( 
            __RPC__in ITfInputProcessorProfiles * This,
            /* [in] */ __RPC__in REFCLSID rclsid,
            /* [in] */ LANGID langid,
            /* [in] */ __RPC__in REFGUID guidProfile,
            /* [out] */ __RPC__out BOOL *pfEnable);
        
        HRESULT ( STDMETHODCALLTYPE *EnableLanguageProfileByDefault )( 
            __RPC__in ITfInputProcessorProfiles * This,
            /* [in] */ __RPC__in REFCLSID rclsid,
            /* [in] */ LANGID langid,
            /* [in] */ __RPC__in REFGUID guidProfile,
            /* [in] */ BOOL fEnable);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteKeyboardLayout )( 
            __RPC__in ITfInputProcessorProfiles * This,
            /* [in] */ __RPC__in REFCLSID rclsid,
            /* [in] */ LANGID langid,
            /* [in] */ __RPC__in REFGUID guidProfile,
            /* [in] */ HKL hKL);
        
        END_INTERFACE
    } ITfInputProcessorProfilesVtbl;

    interface ITfInputProcessorProfiles
    {
        CONST_VTBL struct ITfInputProcessorProfilesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfInputProcessorProfiles_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfInputProcessorProfiles_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfInputProcessorProfiles_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfInputProcessorProfiles_Register(This,rclsid)	\
    ( (This)->lpVtbl -> Register(This,rclsid) ) 

#define ITfInputProcessorProfiles_Unregister(This,rclsid)	\
    ( (This)->lpVtbl -> Unregister(This,rclsid) ) 

#define ITfInputProcessorProfiles_AddLanguageProfile(This,rclsid,langid,guidProfile,pchDesc,cchDesc,pchIconFile,cchFile,uIconIndex)	\
    ( (This)->lpVtbl -> AddLanguageProfile(This,rclsid,langid,guidProfile,pchDesc,cchDesc,pchIconFile,cchFile,uIconIndex) ) 

#define ITfInputProcessorProfiles_RemoveLanguageProfile(This,rclsid,langid,guidProfile)	\
    ( (This)->lpVtbl -> RemoveLanguageProfile(This,rclsid,langid,guidProfile) ) 

#define ITfInputProcessorProfiles_EnumInputProcessorInfo(This,ppEnum)	\
    ( (This)->lpVtbl -> EnumInputProcessorInfo(This,ppEnum) ) 

#define ITfInputProcessorProfiles_GetDefaultLanguageProfile(This,langid,catid,pclsid,pguidProfile)	\
    ( (This)->lpVtbl -> GetDefaultLanguageProfile(This,langid,catid,pclsid,pguidProfile) ) 

#define ITfInputProcessorProfiles_SetDefaultLanguageProfile(This,langid,rclsid,guidProfiles)	\
    ( (This)->lpVtbl -> SetDefaultLanguageProfile(This,langid,rclsid,guidProfiles) ) 

#define ITfInputProcessorProfiles_ActivateLanguageProfile(This,rclsid,langid,guidProfiles)	\
    ( (This)->lpVtbl -> ActivateLanguageProfile(This,rclsid,langid,guidProfiles) ) 

#define ITfInputProcessorProfiles_GetActiveLanguageProfile(This,rclsid,plangid,pguidProfile)	\
    ( (This)->lpVtbl -> GetActiveLanguageProfile(This,rclsid,plangid,pguidProfile) ) 

#define ITfInputProcessorProfiles_GetLanguageProfileDescription(This,rclsid,langid,guidProfile,pbstrProfile)	\
    ( (This)->lpVtbl -> GetLanguageProfileDescription(This,rclsid,langid,guidProfile,pbstrProfile) ) 

#define ITfInputProcessorProfiles_GetCurrentLanguage(This,plangid)	\
    ( (This)->lpVtbl -> GetCurrentLanguage(This,plangid) ) 

#define ITfInputProcessorProfiles_ChangeCurrentLanguage(This,langid)	\
    ( (This)->lpVtbl -> ChangeCurrentLanguage(This,langid) ) 

#define ITfInputProcessorProfiles_GetLanguageList(This,ppLangId,pulCount)	\
    ( (This)->lpVtbl -> GetLanguageList(This,ppLangId,pulCount) ) 

#define ITfInputProcessorProfiles_EnumLanguageProfiles(This,langid,ppEnum)	\
    ( (This)->lpVtbl -> EnumLanguageProfiles(This,langid,ppEnum) ) 

#define ITfInputProcessorProfiles_EnableLanguageProfile(This,rclsid,langid,guidProfile,fEnable)	\
    ( (This)->lpVtbl -> EnableLanguageProfile(This,rclsid,langid,guidProfile,fEnable) ) 

#define ITfInputProcessorProfiles_IsEnabledLanguageProfile(This,rclsid,langid,guidProfile,pfEnable)	\
    ( (This)->lpVtbl -> IsEnabledLanguageProfile(This,rclsid,langid,guidProfile,pfEnable) ) 

#define ITfInputProcessorProfiles_EnableLanguageProfileByDefault(This,rclsid,langid,guidProfile,fEnable)	\
    ( (This)->lpVtbl -> EnableLanguageProfileByDefault(This,rclsid,langid,guidProfile,fEnable) ) 

#define ITfInputProcessorProfiles_SubstituteKeyboardLayout(This,rclsid,langid,guidProfile,hKL)	\
    ( (This)->lpVtbl -> SubstituteKeyboardLayout(This,rclsid,langid,guidProfile,hKL) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfInputProcessorProfiles_INTERFACE_DEFINED__ */


#ifndef __ITfInputProcessorProfilesEx_INTERFACE_DEFINED__
#define __ITfInputProcessorProfilesEx_INTERFACE_DEFINED__

/* interface ITfInputProcessorProfilesEx */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITfInputProcessorProfilesEx;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("892f230f-fe00-4a41-a98e-fcd6de0d35ef")
    ITfInputProcessorProfilesEx : public ITfInputProcessorProfiles
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetLanguageProfileDisplayName( 
            /* [in] */ __RPC__in REFCLSID rclsid,
            /* [in] */ LANGID langid,
            /* [in] */ __RPC__in REFGUID guidProfile,
            /* [size_is][in] */ __RPC__in_ecount_full(cchFile) const WCHAR *pchFile,
            /* [in] */ ULONG cchFile,
            /* [in] */ ULONG uResId) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfInputProcessorProfilesExVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfInputProcessorProfilesEx * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfInputProcessorProfilesEx * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfInputProcessorProfilesEx * This);
        
        HRESULT ( STDMETHODCALLTYPE *Register )( 
            __RPC__in ITfInputProcessorProfilesEx * This,
            /* [in] */ __RPC__in REFCLSID rclsid);
        
        HRESULT ( STDMETHODCALLTYPE *Unregister )( 
            __RPC__in ITfInputProcessorProfilesEx * This,
            /* [in] */ __RPC__in REFCLSID rclsid);
        
        HRESULT ( STDMETHODCALLTYPE *AddLanguageProfile )( 
            __RPC__in ITfInputProcessorProfilesEx * This,
            /* [in] */ __RPC__in REFCLSID rclsid,
            /* [in] */ LANGID langid,
            /* [in] */ __RPC__in REFGUID guidProfile,
            /* [size_is][in] */ __RPC__in_ecount_full(cchDesc) const WCHAR *pchDesc,
            /* [in] */ ULONG cchDesc,
            /* [size_is][in] */ __RPC__in_ecount_full(cchFile) const WCHAR *pchIconFile,
            /* [in] */ ULONG cchFile,
            /* [in] */ ULONG uIconIndex);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveLanguageProfile )( 
            __RPC__in ITfInputProcessorProfilesEx * This,
            /* [in] */ __RPC__in REFCLSID rclsid,
            /* [in] */ LANGID langid,
            /* [in] */ __RPC__in REFGUID guidProfile);
        
        HRESULT ( STDMETHODCALLTYPE *EnumInputProcessorInfo )( 
            __RPC__in ITfInputProcessorProfilesEx * This,
            /* [out] */ __RPC__deref_out_opt IEnumGUID **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetDefaultLanguageProfile )( 
            __RPC__in ITfInputProcessorProfilesEx * This,
            /* [in] */ LANGID langid,
            /* [in] */ __RPC__in REFGUID catid,
            /* [out] */ __RPC__out CLSID *pclsid,
            /* [out] */ __RPC__out GUID *pguidProfile);
        
        HRESULT ( STDMETHODCALLTYPE *SetDefaultLanguageProfile )( 
            __RPC__in ITfInputProcessorProfilesEx * This,
            /* [in] */ LANGID langid,
            /* [in] */ __RPC__in REFCLSID rclsid,
            /* [in] */ __RPC__in REFGUID guidProfiles);
        
        HRESULT ( STDMETHODCALLTYPE *ActivateLanguageProfile )( 
            __RPC__in ITfInputProcessorProfilesEx * This,
            /* [in] */ __RPC__in REFCLSID rclsid,
            /* [in] */ LANGID langid,
            /* [in] */ __RPC__in REFGUID guidProfiles);
        
        HRESULT ( STDMETHODCALLTYPE *GetActiveLanguageProfile )( 
            __RPC__in ITfInputProcessorProfilesEx * This,
            /* [in] */ __RPC__in REFCLSID rclsid,
            /* [out] */ __RPC__out LANGID *plangid,
            /* [out] */ __RPC__out GUID *pguidProfile);
        
        HRESULT ( STDMETHODCALLTYPE *GetLanguageProfileDescription )( 
            __RPC__in ITfInputProcessorProfilesEx * This,
            /* [in] */ __RPC__in REFCLSID rclsid,
            /* [in] */ LANGID langid,
            /* [in] */ __RPC__in REFGUID guidProfile,
            /* [out] */ __RPC__deref_out_opt BSTR *pbstrProfile);
        
        HRESULT ( STDMETHODCALLTYPE *GetCurrentLanguage )( 
            __RPC__in ITfInputProcessorProfilesEx * This,
            /* [out] */ __RPC__out LANGID *plangid);
        
        HRESULT ( STDMETHODCALLTYPE *ChangeCurrentLanguage )( 
            __RPC__in ITfInputProcessorProfilesEx * This,
            /* [in] */ LANGID langid);
        
        HRESULT ( STDMETHODCALLTYPE *GetLanguageList )( 
            __RPC__in ITfInputProcessorProfilesEx * This,
            /* [size_is][size_is][out] */ __RPC__deref_out_ecount_full_opt(*pulCount) LANGID **ppLangId,
            /* [out] */ __RPC__out ULONG *pulCount);
        
        HRESULT ( STDMETHODCALLTYPE *EnumLanguageProfiles )( 
            __RPC__in ITfInputProcessorProfilesEx * This,
            /* [in] */ LANGID langid,
            /* [out] */ __RPC__deref_out_opt IEnumTfLanguageProfiles **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *EnableLanguageProfile )( 
            __RPC__in ITfInputProcessorProfilesEx * This,
            /* [in] */ __RPC__in REFCLSID rclsid,
            /* [in] */ LANGID langid,
            /* [in] */ __RPC__in REFGUID guidProfile,
            /* [in] */ BOOL fEnable);
        
        HRESULT ( STDMETHODCALLTYPE *IsEnabledLanguageProfile )( 
            __RPC__in ITfInputProcessorProfilesEx * This,
            /* [in] */ __RPC__in REFCLSID rclsid,
            /* [in] */ LANGID langid,
            /* [in] */ __RPC__in REFGUID guidProfile,
            /* [out] */ __RPC__out BOOL *pfEnable);
        
        HRESULT ( STDMETHODCALLTYPE *EnableLanguageProfileByDefault )( 
            __RPC__in ITfInputProcessorProfilesEx * This,
            /* [in] */ __RPC__in REFCLSID rclsid,
            /* [in] */ LANGID langid,
            /* [in] */ __RPC__in REFGUID guidProfile,
            /* [in] */ BOOL fEnable);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteKeyboardLayout )( 
            __RPC__in ITfInputProcessorProfilesEx * This,
            /* [in] */ __RPC__in REFCLSID rclsid,
            /* [in] */ LANGID langid,
            /* [in] */ __RPC__in REFGUID guidProfile,
            /* [in] */ HKL hKL);
        
        HRESULT ( STDMETHODCALLTYPE *SetLanguageProfileDisplayName )( 
            __RPC__in ITfInputProcessorProfilesEx * This,
            /* [in] */ __RPC__in REFCLSID rclsid,
            /* [in] */ LANGID langid,
            /* [in] */ __RPC__in REFGUID guidProfile,
            /* [size_is][in] */ __RPC__in_ecount_full(cchFile) const WCHAR *pchFile,
            /* [in] */ ULONG cchFile,
            /* [in] */ ULONG uResId);
        
        END_INTERFACE
    } ITfInputProcessorProfilesExVtbl;

    interface ITfInputProcessorProfilesEx
    {
        CONST_VTBL struct ITfInputProcessorProfilesExVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfInputProcessorProfilesEx_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfInputProcessorProfilesEx_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfInputProcessorProfilesEx_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfInputProcessorProfilesEx_Register(This,rclsid)	\
    ( (This)->lpVtbl -> Register(This,rclsid) ) 

#define ITfInputProcessorProfilesEx_Unregister(This,rclsid)	\
    ( (This)->lpVtbl -> Unregister(This,rclsid) ) 

#define ITfInputProcessorProfilesEx_AddLanguageProfile(This,rclsid,langid,guidProfile,pchDesc,cchDesc,pchIconFile,cchFile,uIconIndex)	\
    ( (This)->lpVtbl -> AddLanguageProfile(This,rclsid,langid,guidProfile,pchDesc,cchDesc,pchIconFile,cchFile,uIconIndex) ) 

#define ITfInputProcessorProfilesEx_RemoveLanguageProfile(This,rclsid,langid,guidProfile)	\
    ( (This)->lpVtbl -> RemoveLanguageProfile(This,rclsid,langid,guidProfile) ) 

#define ITfInputProcessorProfilesEx_EnumInputProcessorInfo(This,ppEnum)	\
    ( (This)->lpVtbl -> EnumInputProcessorInfo(This,ppEnum) ) 

#define ITfInputProcessorProfilesEx_GetDefaultLanguageProfile(This,langid,catid,pclsid,pguidProfile)	\
    ( (This)->lpVtbl -> GetDefaultLanguageProfile(This,langid,catid,pclsid,pguidProfile) ) 

#define ITfInputProcessorProfilesEx_SetDefaultLanguageProfile(This,langid,rclsid,guidProfiles)	\
    ( (This)->lpVtbl -> SetDefaultLanguageProfile(This,langid,rclsid,guidProfiles) ) 

#define ITfInputProcessorProfilesEx_ActivateLanguageProfile(This,rclsid,langid,guidProfiles)	\
    ( (This)->lpVtbl -> ActivateLanguageProfile(This,rclsid,langid,guidProfiles) ) 

#define ITfInputProcessorProfilesEx_GetActiveLanguageProfile(This,rclsid,plangid,pguidProfile)	\
    ( (This)->lpVtbl -> GetActiveLanguageProfile(This,rclsid,plangid,pguidProfile) ) 

#define ITfInputProcessorProfilesEx_GetLanguageProfileDescription(This,rclsid,langid,guidProfile,pbstrProfile)	\
    ( (This)->lpVtbl -> GetLanguageProfileDescription(This,rclsid,langid,guidProfile,pbstrProfile) ) 

#define ITfInputProcessorProfilesEx_GetCurrentLanguage(This,plangid)	\
    ( (This)->lpVtbl -> GetCurrentLanguage(This,plangid) ) 

#define ITfInputProcessorProfilesEx_ChangeCurrentLanguage(This,langid)	\
    ( (This)->lpVtbl -> ChangeCurrentLanguage(This,langid) ) 

#define ITfInputProcessorProfilesEx_GetLanguageList(This,ppLangId,pulCount)	\
    ( (This)->lpVtbl -> GetLanguageList(This,ppLangId,pulCount) ) 

#define ITfInputProcessorProfilesEx_EnumLanguageProfiles(This,langid,ppEnum)	\
    ( (This)->lpVtbl -> EnumLanguageProfiles(This,langid,ppEnum) ) 

#define ITfInputProcessorProfilesEx_EnableLanguageProfile(This,rclsid,langid,guidProfile,fEnable)	\
    ( (This)->lpVtbl -> EnableLanguageProfile(This,rclsid,langid,guidProfile,fEnable) ) 

#define ITfInputProcessorProfilesEx_IsEnabledLanguageProfile(This,rclsid,langid,guidProfile,pfEnable)	\
    ( (This)->lpVtbl -> IsEnabledLanguageProfile(This,rclsid,langid,guidProfile,pfEnable) ) 

#define ITfInputProcessorProfilesEx_EnableLanguageProfileByDefault(This,rclsid,langid,guidProfile,fEnable)	\
    ( (This)->lpVtbl -> EnableLanguageProfileByDefault(This,rclsid,langid,guidProfile,fEnable) ) 

#define ITfInputProcessorProfilesEx_SubstituteKeyboardLayout(This,rclsid,langid,guidProfile,hKL)	\
    ( (This)->lpVtbl -> SubstituteKeyboardLayout(This,rclsid,langid,guidProfile,hKL) ) 


#define ITfInputProcessorProfilesEx_SetLanguageProfileDisplayName(This,rclsid,langid,guidProfile,pchFile,cchFile,uResId)	\
    ( (This)->lpVtbl -> SetLanguageProfileDisplayName(This,rclsid,langid,guidProfile,pchFile,cchFile,uResId) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfInputProcessorProfilesEx_INTERFACE_DEFINED__ */


#ifndef __ITfInputProcessorProfileSubstituteLayout_INTERFACE_DEFINED__
#define __ITfInputProcessorProfileSubstituteLayout_INTERFACE_DEFINED__

/* interface ITfInputProcessorProfileSubstituteLayout */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITfInputProcessorProfileSubstituteLayout;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4fd67194-1002-4513-bff2-c0ddf6258552")
    ITfInputProcessorProfileSubstituteLayout : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetSubstituteKeyboardLayout( 
            /* [in] */ __RPC__in REFCLSID rclsid,
            /* [in] */ LANGID langid,
            /* [in] */ __RPC__in REFGUID guidProfile,
            /* [out] */ __RPC__out HKL *phKL) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfInputProcessorProfileSubstituteLayoutVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfInputProcessorProfileSubstituteLayout * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfInputProcessorProfileSubstituteLayout * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfInputProcessorProfileSubstituteLayout * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetSubstituteKeyboardLayout )( 
            __RPC__in ITfInputProcessorProfileSubstituteLayout * This,
            /* [in] */ __RPC__in REFCLSID rclsid,
            /* [in] */ LANGID langid,
            /* [in] */ __RPC__in REFGUID guidProfile,
            /* [out] */ __RPC__out HKL *phKL);
        
        END_INTERFACE
    } ITfInputProcessorProfileSubstituteLayoutVtbl;

    interface ITfInputProcessorProfileSubstituteLayout
    {
        CONST_VTBL struct ITfInputProcessorProfileSubstituteLayoutVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfInputProcessorProfileSubstituteLayout_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfInputProcessorProfileSubstituteLayout_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfInputProcessorProfileSubstituteLayout_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfInputProcessorProfileSubstituteLayout_GetSubstituteKeyboardLayout(This,rclsid,langid,guidProfile,phKL)	\
    ( (This)->lpVtbl -> GetSubstituteKeyboardLayout(This,rclsid,langid,guidProfile,phKL) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfInputProcessorProfileSubstituteLayout_INTERFACE_DEFINED__ */


#ifndef __ITfActiveLanguageProfileNotifySink_INTERFACE_DEFINED__
#define __ITfActiveLanguageProfileNotifySink_INTERFACE_DEFINED__

/* interface ITfActiveLanguageProfileNotifySink */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITfActiveLanguageProfileNotifySink;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b246cb75-a93e-4652-bf8c-b3fe0cfd7e57")
    ITfActiveLanguageProfileNotifySink : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnActivated( 
            /* [in] */ __RPC__in REFCLSID clsid,
            /* [in] */ __RPC__in REFGUID guidProfile,
            /* [in] */ BOOL fActivated) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfActiveLanguageProfileNotifySinkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfActiveLanguageProfileNotifySink * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfActiveLanguageProfileNotifySink * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfActiveLanguageProfileNotifySink * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnActivated )( 
            __RPC__in ITfActiveLanguageProfileNotifySink * This,
            /* [in] */ __RPC__in REFCLSID clsid,
            /* [in] */ __RPC__in REFGUID guidProfile,
            /* [in] */ BOOL fActivated);
        
        END_INTERFACE
    } ITfActiveLanguageProfileNotifySinkVtbl;

    interface ITfActiveLanguageProfileNotifySink
    {
        CONST_VTBL struct ITfActiveLanguageProfileNotifySinkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfActiveLanguageProfileNotifySink_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfActiveLanguageProfileNotifySink_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfActiveLanguageProfileNotifySink_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfActiveLanguageProfileNotifySink_OnActivated(This,clsid,guidProfile,fActivated)	\
    ( (This)->lpVtbl -> OnActivated(This,clsid,guidProfile,fActivated) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfActiveLanguageProfileNotifySink_INTERFACE_DEFINED__ */


#ifndef __IEnumTfLanguageProfiles_INTERFACE_DEFINED__
#define __IEnumTfLanguageProfiles_INTERFACE_DEFINED__

/* interface IEnumTfLanguageProfiles */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IEnumTfLanguageProfiles;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3d61bf11-ac5f-42c8-a4cb-931bcc28c744")
    IEnumTfLanguageProfiles : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ __RPC__deref_out_opt IEnumTfLanguageProfiles **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG ulCount,
            /* [length_is][size_is][out] */ __RPC__out_ecount_part(ulCount, *pcFetch) TF_LANGUAGEPROFILE *pProfile,
            /* [out] */ __RPC__out ULONG *pcFetch) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG ulCount) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumTfLanguageProfilesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IEnumTfLanguageProfiles * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IEnumTfLanguageProfiles * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IEnumTfLanguageProfiles * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            __RPC__in IEnumTfLanguageProfiles * This,
            /* [out] */ __RPC__deref_out_opt IEnumTfLanguageProfiles **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            __RPC__in IEnumTfLanguageProfiles * This,
            /* [in] */ ULONG ulCount,
            /* [length_is][size_is][out] */ __RPC__out_ecount_part(ulCount, *pcFetch) TF_LANGUAGEPROFILE *pProfile,
            /* [out] */ __RPC__out ULONG *pcFetch);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            __RPC__in IEnumTfLanguageProfiles * This);
        
        HRESULT ( STDMETHODCALLTYPE *Skip )( 
            __RPC__in IEnumTfLanguageProfiles * This,
            /* [in] */ ULONG ulCount);
        
        END_INTERFACE
    } IEnumTfLanguageProfilesVtbl;

    interface IEnumTfLanguageProfiles
    {
        CONST_VTBL struct IEnumTfLanguageProfilesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumTfLanguageProfiles_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IEnumTfLanguageProfiles_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IEnumTfLanguageProfiles_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IEnumTfLanguageProfiles_Clone(This,ppEnum)	\
    ( (This)->lpVtbl -> Clone(This,ppEnum) ) 

#define IEnumTfLanguageProfiles_Next(This,ulCount,pProfile,pcFetch)	\
    ( (This)->lpVtbl -> Next(This,ulCount,pProfile,pcFetch) ) 

#define IEnumTfLanguageProfiles_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define IEnumTfLanguageProfiles_Skip(This,ulCount)	\
    ( (This)->lpVtbl -> Skip(This,ulCount) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IEnumTfLanguageProfiles_INTERFACE_DEFINED__ */


#ifndef __ITfLanguageProfileNotifySink_INTERFACE_DEFINED__
#define __ITfLanguageProfileNotifySink_INTERFACE_DEFINED__

/* interface ITfLanguageProfileNotifySink */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITfLanguageProfileNotifySink;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("43c9fe15-f494-4c17-9de2-b8a4ac350aa8")
    ITfLanguageProfileNotifySink : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnLanguageChange( 
            /* [in] */ LANGID langid,
            /* [out] */ __RPC__out BOOL *pfAccept) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnLanguageChanged( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfLanguageProfileNotifySinkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfLanguageProfileNotifySink * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfLanguageProfileNotifySink * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfLanguageProfileNotifySink * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnLanguageChange )( 
            __RPC__in ITfLanguageProfileNotifySink * This,
            /* [in] */ LANGID langid,
            /* [out] */ __RPC__out BOOL *pfAccept);
        
        HRESULT ( STDMETHODCALLTYPE *OnLanguageChanged )( 
            __RPC__in ITfLanguageProfileNotifySink * This);
        
        END_INTERFACE
    } ITfLanguageProfileNotifySinkVtbl;

    interface ITfLanguageProfileNotifySink
    {
        CONST_VTBL struct ITfLanguageProfileNotifySinkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfLanguageProfileNotifySink_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfLanguageProfileNotifySink_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfLanguageProfileNotifySink_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfLanguageProfileNotifySink_OnLanguageChange(This,langid,pfAccept)	\
    ( (This)->lpVtbl -> OnLanguageChange(This,langid,pfAccept) ) 

#define ITfLanguageProfileNotifySink_OnLanguageChanged(This)	\
    ( (This)->lpVtbl -> OnLanguageChanged(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfLanguageProfileNotifySink_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_msctf_0000_0057 */
/* [local] */ 

typedef /* [uuid] */  DECLSPEC_UUID("44d2825a-10e5-43b2-877f-6cb2f43b7e7e") struct TF_INPUTPROCESSORPROFILE
    {
    DWORD dwProfileType;
    LANGID langid;
    CLSID clsid;
    GUID guidProfile;
    GUID catid;
    HKL hklSubstitute;
    DWORD dwCaps;
    HKL hkl;
    DWORD dwFlags;
    } 	TF_INPUTPROCESSORPROFILE;



extern RPC_IF_HANDLE __MIDL_itf_msctf_0000_0057_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_msctf_0000_0057_v0_0_s_ifspec;

#ifndef __ITfInputProcessorProfileMgr_INTERFACE_DEFINED__
#define __ITfInputProcessorProfileMgr_INTERFACE_DEFINED__

/* interface ITfInputProcessorProfileMgr */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITfInputProcessorProfileMgr;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("71c6e74c-0f28-11d8-a82a-00065b84435c")
    ITfInputProcessorProfileMgr : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ActivateProfile( 
            /* [in] */ DWORD dwProfileType,
            /* [in] */ LANGID langid,
            /* [in] */ __RPC__in REFCLSID clsid,
            /* [in] */ __RPC__in REFGUID guidProfile,
            /* [in] */ HKL hkl,
            /* [in] */ DWORD dwFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DeactivateProfile( 
            /* [in] */ DWORD dwProfileType,
            /* [in] */ LANGID langid,
            /* [in] */ __RPC__in REFCLSID clsid,
            /* [in] */ __RPC__in REFGUID guidProfile,
            /* [in] */ HKL hkl,
            /* [in] */ DWORD dwFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetProfile( 
            /* [in] */ DWORD dwProfileType,
            /* [in] */ LANGID langid,
            /* [in] */ __RPC__in REFCLSID clsid,
            /* [in] */ __RPC__in REFGUID guidProfile,
            /* [in] */ HKL hkl,
            /* [out] */ __RPC__out TF_INPUTPROCESSORPROFILE *pProfile) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumProfiles( 
            /* [in] */ LANGID langid,
            /* [out] */ __RPC__deref_out_opt IEnumTfInputProcessorProfiles **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ReleaseInputProcessor( 
            /* [in] */ __RPC__in REFCLSID rclsid,
            /* [in] */ DWORD dwFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RegisterProfile( 
            /* [in] */ __RPC__in REFCLSID rclsid,
            /* [in] */ LANGID langid,
            /* [in] */ __RPC__in REFGUID guidProfile,
            /* [size_is][in] */ __RPC__in_ecount_full(cchDesc) const WCHAR *pchDesc,
            /* [in] */ ULONG cchDesc,
            /* [size_is][in] */ __RPC__in_ecount_full(cchFile) const WCHAR *pchIconFile,
            /* [in] */ ULONG cchFile,
            /* [in] */ ULONG uIconIndex,
            /* [in] */ HKL hklsubstitute,
            /* [in] */ DWORD dwPreferredLayout,
            /* [in] */ BOOL bEnabledByDefault,
            /* [in] */ DWORD dwFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UnregisterProfile( 
            /* [in] */ __RPC__in REFCLSID rclsid,
            /* [in] */ LANGID langid,
            /* [in] */ __RPC__in REFGUID guidProfile,
            /* [in] */ DWORD dwFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetActiveProfile( 
            /* [in] */ __RPC__in REFGUID catid,
            /* [out] */ __RPC__out TF_INPUTPROCESSORPROFILE *pProfile) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfInputProcessorProfileMgrVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfInputProcessorProfileMgr * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfInputProcessorProfileMgr * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfInputProcessorProfileMgr * This);
        
        HRESULT ( STDMETHODCALLTYPE *ActivateProfile )( 
            __RPC__in ITfInputProcessorProfileMgr * This,
            /* [in] */ DWORD dwProfileType,
            /* [in] */ LANGID langid,
            /* [in] */ __RPC__in REFCLSID clsid,
            /* [in] */ __RPC__in REFGUID guidProfile,
            /* [in] */ HKL hkl,
            /* [in] */ DWORD dwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *DeactivateProfile )( 
            __RPC__in ITfInputProcessorProfileMgr * This,
            /* [in] */ DWORD dwProfileType,
            /* [in] */ LANGID langid,
            /* [in] */ __RPC__in REFCLSID clsid,
            /* [in] */ __RPC__in REFGUID guidProfile,
            /* [in] */ HKL hkl,
            /* [in] */ DWORD dwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *GetProfile )( 
            __RPC__in ITfInputProcessorProfileMgr * This,
            /* [in] */ DWORD dwProfileType,
            /* [in] */ LANGID langid,
            /* [in] */ __RPC__in REFCLSID clsid,
            /* [in] */ __RPC__in REFGUID guidProfile,
            /* [in] */ HKL hkl,
            /* [out] */ __RPC__out TF_INPUTPROCESSORPROFILE *pProfile);
        
        HRESULT ( STDMETHODCALLTYPE *EnumProfiles )( 
            __RPC__in ITfInputProcessorProfileMgr * This,
            /* [in] */ LANGID langid,
            /* [out] */ __RPC__deref_out_opt IEnumTfInputProcessorProfiles **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *ReleaseInputProcessor )( 
            __RPC__in ITfInputProcessorProfileMgr * This,
            /* [in] */ __RPC__in REFCLSID rclsid,
            /* [in] */ DWORD dwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *RegisterProfile )( 
            __RPC__in ITfInputProcessorProfileMgr * This,
            /* [in] */ __RPC__in REFCLSID rclsid,
            /* [in] */ LANGID langid,
            /* [in] */ __RPC__in REFGUID guidProfile,
            /* [size_is][in] */ __RPC__in_ecount_full(cchDesc) const WCHAR *pchDesc,
            /* [in] */ ULONG cchDesc,
            /* [size_is][in] */ __RPC__in_ecount_full(cchFile) const WCHAR *pchIconFile,
            /* [in] */ ULONG cchFile,
            /* [in] */ ULONG uIconIndex,
            /* [in] */ HKL hklsubstitute,
            /* [in] */ DWORD dwPreferredLayout,
            /* [in] */ BOOL bEnabledByDefault,
            /* [in] */ DWORD dwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *UnregisterProfile )( 
            __RPC__in ITfInputProcessorProfileMgr * This,
            /* [in] */ __RPC__in REFCLSID rclsid,
            /* [in] */ LANGID langid,
            /* [in] */ __RPC__in REFGUID guidProfile,
            /* [in] */ DWORD dwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *GetActiveProfile )( 
            __RPC__in ITfInputProcessorProfileMgr * This,
            /* [in] */ __RPC__in REFGUID catid,
            /* [out] */ __RPC__out TF_INPUTPROCESSORPROFILE *pProfile);
        
        END_INTERFACE
    } ITfInputProcessorProfileMgrVtbl;

    interface ITfInputProcessorProfileMgr
    {
        CONST_VTBL struct ITfInputProcessorProfileMgrVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfInputProcessorProfileMgr_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfInputProcessorProfileMgr_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfInputProcessorProfileMgr_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfInputProcessorProfileMgr_ActivateProfile(This,dwProfileType,langid,clsid,guidProfile,hkl,dwFlags)	\
    ( (This)->lpVtbl -> ActivateProfile(This,dwProfileType,langid,clsid,guidProfile,hkl,dwFlags) ) 

#define ITfInputProcessorProfileMgr_DeactivateProfile(This,dwProfileType,langid,clsid,guidProfile,hkl,dwFlags)	\
    ( (This)->lpVtbl -> DeactivateProfile(This,dwProfileType,langid,clsid,guidProfile,hkl,dwFlags) ) 

#define ITfInputProcessorProfileMgr_GetProfile(This,dwProfileType,langid,clsid,guidProfile,hkl,pProfile)	\
    ( (This)->lpVtbl -> GetProfile(This,dwProfileType,langid,clsid,guidProfile,hkl,pProfile) ) 

#define ITfInputProcessorProfileMgr_EnumProfiles(This,langid,ppEnum)	\
    ( (This)->lpVtbl -> EnumProfiles(This,langid,ppEnum) ) 

#define ITfInputProcessorProfileMgr_ReleaseInputProcessor(This,rclsid,dwFlags)	\
    ( (This)->lpVtbl -> ReleaseInputProcessor(This,rclsid,dwFlags) ) 

#define ITfInputProcessorProfileMgr_RegisterProfile(This,rclsid,langid,guidProfile,pchDesc,cchDesc,pchIconFile,cchFile,uIconIndex,hklsubstitute,dwPreferredLayout,bEnabledByDefault,dwFlags)	\
    ( (This)->lpVtbl -> RegisterProfile(This,rclsid,langid,guidProfile,pchDesc,cchDesc,pchIconFile,cchFile,uIconIndex,hklsubstitute,dwPreferredLayout,bEnabledByDefault,dwFlags) ) 

#define ITfInputProcessorProfileMgr_UnregisterProfile(This,rclsid,langid,guidProfile,dwFlags)	\
    ( (This)->lpVtbl -> UnregisterProfile(This,rclsid,langid,guidProfile,dwFlags) ) 

#define ITfInputProcessorProfileMgr_GetActiveProfile(This,catid,pProfile)	\
    ( (This)->lpVtbl -> GetActiveProfile(This,catid,pProfile) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfInputProcessorProfileMgr_INTERFACE_DEFINED__ */


#ifndef __IEnumTfInputProcessorProfiles_INTERFACE_DEFINED__
#define __IEnumTfInputProcessorProfiles_INTERFACE_DEFINED__

/* interface IEnumTfInputProcessorProfiles */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IEnumTfInputProcessorProfiles;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("71c6e74d-0f28-11d8-a82a-00065b84435c")
    IEnumTfInputProcessorProfiles : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ __RPC__deref_out_opt IEnumTfInputProcessorProfiles **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG ulCount,
            /* [length_is][size_is][out] */ __RPC__out_ecount_part(ulCount, *pcFetch) TF_INPUTPROCESSORPROFILE *pProfile,
            /* [out] */ __RPC__out ULONG *pcFetch) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG ulCount) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumTfInputProcessorProfilesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IEnumTfInputProcessorProfiles * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IEnumTfInputProcessorProfiles * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IEnumTfInputProcessorProfiles * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            __RPC__in IEnumTfInputProcessorProfiles * This,
            /* [out] */ __RPC__deref_out_opt IEnumTfInputProcessorProfiles **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            __RPC__in IEnumTfInputProcessorProfiles * This,
            /* [in] */ ULONG ulCount,
            /* [length_is][size_is][out] */ __RPC__out_ecount_part(ulCount, *pcFetch) TF_INPUTPROCESSORPROFILE *pProfile,
            /* [out] */ __RPC__out ULONG *pcFetch);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            __RPC__in IEnumTfInputProcessorProfiles * This);
        
        HRESULT ( STDMETHODCALLTYPE *Skip )( 
            __RPC__in IEnumTfInputProcessorProfiles * This,
            /* [in] */ ULONG ulCount);
        
        END_INTERFACE
    } IEnumTfInputProcessorProfilesVtbl;

    interface IEnumTfInputProcessorProfiles
    {
        CONST_VTBL struct IEnumTfInputProcessorProfilesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumTfInputProcessorProfiles_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IEnumTfInputProcessorProfiles_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IEnumTfInputProcessorProfiles_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IEnumTfInputProcessorProfiles_Clone(This,ppEnum)	\
    ( (This)->lpVtbl -> Clone(This,ppEnum) ) 

#define IEnumTfInputProcessorProfiles_Next(This,ulCount,pProfile,pcFetch)	\
    ( (This)->lpVtbl -> Next(This,ulCount,pProfile,pcFetch) ) 

#define IEnumTfInputProcessorProfiles_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define IEnumTfInputProcessorProfiles_Skip(This,ulCount)	\
    ( (This)->lpVtbl -> Skip(This,ulCount) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IEnumTfInputProcessorProfiles_INTERFACE_DEFINED__ */


#ifndef __ITfInputProcessorProfileActivationSink_INTERFACE_DEFINED__
#define __ITfInputProcessorProfileActivationSink_INTERFACE_DEFINED__

/* interface ITfInputProcessorProfileActivationSink */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITfInputProcessorProfileActivationSink;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("71c6e74e-0f28-11d8-a82a-00065b84435c")
    ITfInputProcessorProfileActivationSink : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnActivated( 
            /* [in] */ DWORD dwProfileType,
            /* [in] */ LANGID langid,
            /* [in] */ __RPC__in REFCLSID clsid,
            /* [in] */ __RPC__in REFGUID catid,
            /* [in] */ __RPC__in REFGUID guidProfile,
            /* [in] */ HKL hkl,
            /* [in] */ DWORD dwFlags) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfInputProcessorProfileActivationSinkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfInputProcessorProfileActivationSink * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfInputProcessorProfileActivationSink * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfInputProcessorProfileActivationSink * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnActivated )( 
            __RPC__in ITfInputProcessorProfileActivationSink * This,
            /* [in] */ DWORD dwProfileType,
            /* [in] */ LANGID langid,
            /* [in] */ __RPC__in REFCLSID clsid,
            /* [in] */ __RPC__in REFGUID catid,
            /* [in] */ __RPC__in REFGUID guidProfile,
            /* [in] */ HKL hkl,
            /* [in] */ DWORD dwFlags);
        
        END_INTERFACE
    } ITfInputProcessorProfileActivationSinkVtbl;

    interface ITfInputProcessorProfileActivationSink
    {
        CONST_VTBL struct ITfInputProcessorProfileActivationSinkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfInputProcessorProfileActivationSink_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfInputProcessorProfileActivationSink_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfInputProcessorProfileActivationSink_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfInputProcessorProfileActivationSink_OnActivated(This,dwProfileType,langid,clsid,catid,guidProfile,hkl,dwFlags)	\
    ( (This)->lpVtbl -> OnActivated(This,dwProfileType,langid,clsid,catid,guidProfile,hkl,dwFlags) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfInputProcessorProfileActivationSink_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_msctf_0000_0060 */
/* [local] */ 

typedef /* [uuid] */  DECLSPEC_UUID("77c12f95-b783-450d-879f-1cd2362c6521") struct TF_PRESERVEDKEY
    {
    UINT uVKey;
    UINT uModifiers;
    } 	TF_PRESERVEDKEY;



extern RPC_IF_HANDLE __MIDL_itf_msctf_0000_0060_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_msctf_0000_0060_v0_0_s_ifspec;

#ifndef __ITfKeystrokeMgr_INTERFACE_DEFINED__
#define __ITfKeystrokeMgr_INTERFACE_DEFINED__

/* interface ITfKeystrokeMgr */
/* [unique][uuid][local][object] */ 


EXTERN_C const IID IID_ITfKeystrokeMgr;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("aa80e7f0-2021-11d2-93e0-0060b067b86e")
    ITfKeystrokeMgr : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE AdviseKeyEventSink( 
            /* [in] */ TfClientId tid,
            /* [in] */ ITfKeyEventSink *pSink,
            /* [in] */ BOOL fForeground) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UnadviseKeyEventSink( 
            /* [in] */ TfClientId tid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetForeground( 
            /* [out] */ CLSID *pclsid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE TestKeyDown( 
            /* [in] */ WPARAM wParam,
            /* [in] */ LPARAM lParam,
            /* [out] */ BOOL *pfEaten) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE TestKeyUp( 
            /* [in] */ WPARAM wParam,
            /* [in] */ LPARAM lParam,
            /* [out] */ BOOL *pfEaten) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE KeyDown( 
            /* [in] */ WPARAM wParam,
            /* [in] */ LPARAM lParam,
            /* [out] */ BOOL *pfEaten) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE KeyUp( 
            /* [in] */ WPARAM wParam,
            /* [in] */ LPARAM lParam,
            /* [out] */ BOOL *pfEaten) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPreservedKey( 
            /* [in] */ ITfContext *pic,
            /* [in] */ const TF_PRESERVEDKEY *pprekey,
            /* [out] */ GUID *pguid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsPreservedKey( 
            /* [in] */ REFGUID rguid,
            /* [in] */ const TF_PRESERVEDKEY *pprekey,
            /* [out] */ BOOL *pfRegistered) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE PreserveKey( 
            /* [in] */ TfClientId tid,
            /* [in] */ REFGUID rguid,
            /* [in] */ const TF_PRESERVEDKEY *prekey,
            /* [size_is][in] */ const WCHAR *pchDesc,
            /* [in] */ ULONG cchDesc) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UnpreserveKey( 
            /* [in] */ REFGUID rguid,
            /* [in] */ const TF_PRESERVEDKEY *pprekey) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetPreservedKeyDescription( 
            /* [in] */ REFGUID rguid,
            /* [size_is][in] */ const WCHAR *pchDesc,
            /* [in] */ ULONG cchDesc) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPreservedKeyDescription( 
            /* [in] */ REFGUID rguid,
            /* [out] */ BSTR *pbstrDesc) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SimulatePreservedKey( 
            /* [in] */ ITfContext *pic,
            /* [in] */ REFGUID rguid,
            /* [out] */ BOOL *pfEaten) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfKeystrokeMgrVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITfKeystrokeMgr * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITfKeystrokeMgr * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITfKeystrokeMgr * This);
        
        HRESULT ( STDMETHODCALLTYPE *AdviseKeyEventSink )( 
            ITfKeystrokeMgr * This,
            /* [in] */ TfClientId tid,
            /* [in] */ ITfKeyEventSink *pSink,
            /* [in] */ BOOL fForeground);
        
        HRESULT ( STDMETHODCALLTYPE *UnadviseKeyEventSink )( 
            ITfKeystrokeMgr * This,
            /* [in] */ TfClientId tid);
        
        HRESULT ( STDMETHODCALLTYPE *GetForeground )( 
            ITfKeystrokeMgr * This,
            /* [out] */ CLSID *pclsid);
        
        HRESULT ( STDMETHODCALLTYPE *TestKeyDown )( 
            ITfKeystrokeMgr * This,
            /* [in] */ WPARAM wParam,
            /* [in] */ LPARAM lParam,
            /* [out] */ BOOL *pfEaten);
        
        HRESULT ( STDMETHODCALLTYPE *TestKeyUp )( 
            ITfKeystrokeMgr * This,
            /* [in] */ WPARAM wParam,
            /* [in] */ LPARAM lParam,
            /* [out] */ BOOL *pfEaten);
        
        HRESULT ( STDMETHODCALLTYPE *KeyDown )( 
            ITfKeystrokeMgr * This,
            /* [in] */ WPARAM wParam,
            /* [in] */ LPARAM lParam,
            /* [out] */ BOOL *pfEaten);
        
        HRESULT ( STDMETHODCALLTYPE *KeyUp )( 
            ITfKeystrokeMgr * This,
            /* [in] */ WPARAM wParam,
            /* [in] */ LPARAM lParam,
            /* [out] */ BOOL *pfEaten);
        
        HRESULT ( STDMETHODCALLTYPE *GetPreservedKey )( 
            ITfKeystrokeMgr * This,
            /* [in] */ ITfContext *pic,
            /* [in] */ const TF_PRESERVEDKEY *pprekey,
            /* [out] */ GUID *pguid);
        
        HRESULT ( STDMETHODCALLTYPE *IsPreservedKey )( 
            ITfKeystrokeMgr * This,
            /* [in] */ REFGUID rguid,
            /* [in] */ const TF_PRESERVEDKEY *pprekey,
            /* [out] */ BOOL *pfRegistered);
        
        HRESULT ( STDMETHODCALLTYPE *PreserveKey )( 
            ITfKeystrokeMgr * This,
            /* [in] */ TfClientId tid,
            /* [in] */ REFGUID rguid,
            /* [in] */ const TF_PRESERVEDKEY *prekey,
            /* [size_is][in] */ const WCHAR *pchDesc,
            /* [in] */ ULONG cchDesc);
        
        HRESULT ( STDMETHODCALLTYPE *UnpreserveKey )( 
            ITfKeystrokeMgr * This,
            /* [in] */ REFGUID rguid,
            /* [in] */ const TF_PRESERVEDKEY *pprekey);
        
        HRESULT ( STDMETHODCALLTYPE *SetPreservedKeyDescription )( 
            ITfKeystrokeMgr * This,
            /* [in] */ REFGUID rguid,
            /* [size_is][in] */ const WCHAR *pchDesc,
            /* [in] */ ULONG cchDesc);
        
        HRESULT ( STDMETHODCALLTYPE *GetPreservedKeyDescription )( 
            ITfKeystrokeMgr * This,
            /* [in] */ REFGUID rguid,
            /* [out] */ BSTR *pbstrDesc);
        
        HRESULT ( STDMETHODCALLTYPE *SimulatePreservedKey )( 
            ITfKeystrokeMgr * This,
            /* [in] */ ITfContext *pic,
            /* [in] */ REFGUID rguid,
            /* [out] */ BOOL *pfEaten);
        
        END_INTERFACE
    } ITfKeystrokeMgrVtbl;

    interface ITfKeystrokeMgr
    {
        CONST_VTBL struct ITfKeystrokeMgrVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfKeystrokeMgr_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfKeystrokeMgr_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfKeystrokeMgr_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfKeystrokeMgr_AdviseKeyEventSink(This,tid,pSink,fForeground)	\
    ( (This)->lpVtbl -> AdviseKeyEventSink(This,tid,pSink,fForeground) ) 

#define ITfKeystrokeMgr_UnadviseKeyEventSink(This,tid)	\
    ( (This)->lpVtbl -> UnadviseKeyEventSink(This,tid) ) 

#define ITfKeystrokeMgr_GetForeground(This,pclsid)	\
    ( (This)->lpVtbl -> GetForeground(This,pclsid) ) 

#define ITfKeystrokeMgr_TestKeyDown(This,wParam,lParam,pfEaten)	\
    ( (This)->lpVtbl -> TestKeyDown(This,wParam,lParam,pfEaten) ) 

#define ITfKeystrokeMgr_TestKeyUp(This,wParam,lParam,pfEaten)	\
    ( (This)->lpVtbl -> TestKeyUp(This,wParam,lParam,pfEaten) ) 

#define ITfKeystrokeMgr_KeyDown(This,wParam,lParam,pfEaten)	\
    ( (This)->lpVtbl -> KeyDown(This,wParam,lParam,pfEaten) ) 

#define ITfKeystrokeMgr_KeyUp(This,wParam,lParam,pfEaten)	\
    ( (This)->lpVtbl -> KeyUp(This,wParam,lParam,pfEaten) ) 

#define ITfKeystrokeMgr_GetPreservedKey(This,pic,pprekey,pguid)	\
    ( (This)->lpVtbl -> GetPreservedKey(This,pic,pprekey,pguid) ) 

#define ITfKeystrokeMgr_IsPreservedKey(This,rguid,pprekey,pfRegistered)	\
    ( (This)->lpVtbl -> IsPreservedKey(This,rguid,pprekey,pfRegistered) ) 

#define ITfKeystrokeMgr_PreserveKey(This,tid,rguid,prekey,pchDesc,cchDesc)	\
    ( (This)->lpVtbl -> PreserveKey(This,tid,rguid,prekey,pchDesc,cchDesc) ) 

#define ITfKeystrokeMgr_UnpreserveKey(This,rguid,pprekey)	\
    ( (This)->lpVtbl -> UnpreserveKey(This,rguid,pprekey) ) 

#define ITfKeystrokeMgr_SetPreservedKeyDescription(This,rguid,pchDesc,cchDesc)	\
    ( (This)->lpVtbl -> SetPreservedKeyDescription(This,rguid,pchDesc,cchDesc) ) 

#define ITfKeystrokeMgr_GetPreservedKeyDescription(This,rguid,pbstrDesc)	\
    ( (This)->lpVtbl -> GetPreservedKeyDescription(This,rguid,pbstrDesc) ) 

#define ITfKeystrokeMgr_SimulatePreservedKey(This,pic,rguid,pfEaten)	\
    ( (This)->lpVtbl -> SimulatePreservedKey(This,pic,rguid,pfEaten) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfKeystrokeMgr_INTERFACE_DEFINED__ */


#ifndef __ITfKeyEventSink_INTERFACE_DEFINED__
#define __ITfKeyEventSink_INTERFACE_DEFINED__

/* interface ITfKeyEventSink */
/* [unique][uuid][local][object] */ 


EXTERN_C const IID IID_ITfKeyEventSink;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("aa80e7f5-2021-11d2-93e0-0060b067b86e")
    ITfKeyEventSink : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnSetFocus( 
            /* [in] */ BOOL fForeground) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnTestKeyDown( 
            /* [in] */ ITfContext *pic,
            /* [in] */ WPARAM wParam,
            /* [in] */ LPARAM lParam,
            /* [out] */ BOOL *pfEaten) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnTestKeyUp( 
            /* [in] */ ITfContext *pic,
            /* [in] */ WPARAM wParam,
            /* [in] */ LPARAM lParam,
            /* [out] */ BOOL *pfEaten) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnKeyDown( 
            /* [in] */ ITfContext *pic,
            /* [in] */ WPARAM wParam,
            /* [in] */ LPARAM lParam,
            /* [out] */ BOOL *pfEaten) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnKeyUp( 
            /* [in] */ ITfContext *pic,
            /* [in] */ WPARAM wParam,
            /* [in] */ LPARAM lParam,
            /* [out] */ BOOL *pfEaten) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnPreservedKey( 
            /* [in] */ ITfContext *pic,
            /* [in] */ REFGUID rguid,
            /* [out] */ BOOL *pfEaten) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfKeyEventSinkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITfKeyEventSink * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITfKeyEventSink * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITfKeyEventSink * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnSetFocus )( 
            ITfKeyEventSink * This,
            /* [in] */ BOOL fForeground);
        
        HRESULT ( STDMETHODCALLTYPE *OnTestKeyDown )( 
            ITfKeyEventSink * This,
            /* [in] */ ITfContext *pic,
            /* [in] */ WPARAM wParam,
            /* [in] */ LPARAM lParam,
            /* [out] */ BOOL *pfEaten);
        
        HRESULT ( STDMETHODCALLTYPE *OnTestKeyUp )( 
            ITfKeyEventSink * This,
            /* [in] */ ITfContext *pic,
            /* [in] */ WPARAM wParam,
            /* [in] */ LPARAM lParam,
            /* [out] */ BOOL *pfEaten);
        
        HRESULT ( STDMETHODCALLTYPE *OnKeyDown )( 
            ITfKeyEventSink * This,
            /* [in] */ ITfContext *pic,
            /* [in] */ WPARAM wParam,
            /* [in] */ LPARAM lParam,
            /* [out] */ BOOL *pfEaten);
        
        HRESULT ( STDMETHODCALLTYPE *OnKeyUp )( 
            ITfKeyEventSink * This,
            /* [in] */ ITfContext *pic,
            /* [in] */ WPARAM wParam,
            /* [in] */ LPARAM lParam,
            /* [out] */ BOOL *pfEaten);
        
        HRESULT ( STDMETHODCALLTYPE *OnPreservedKey )( 
            ITfKeyEventSink * This,
            /* [in] */ ITfContext *pic,
            /* [in] */ REFGUID rguid,
            /* [out] */ BOOL *pfEaten);
        
        END_INTERFACE
    } ITfKeyEventSinkVtbl;

    interface ITfKeyEventSink
    {
        CONST_VTBL struct ITfKeyEventSinkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfKeyEventSink_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfKeyEventSink_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfKeyEventSink_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfKeyEventSink_OnSetFocus(This,fForeground)	\
    ( (This)->lpVtbl -> OnSetFocus(This,fForeground) ) 

#define ITfKeyEventSink_OnTestKeyDown(This,pic,wParam,lParam,pfEaten)	\
    ( (This)->lpVtbl -> OnTestKeyDown(This,pic,wParam,lParam,pfEaten) ) 

#define ITfKeyEventSink_OnTestKeyUp(This,pic,wParam,lParam,pfEaten)	\
    ( (This)->lpVtbl -> OnTestKeyUp(This,pic,wParam,lParam,pfEaten) ) 

#define ITfKeyEventSink_OnKeyDown(This,pic,wParam,lParam,pfEaten)	\
    ( (This)->lpVtbl -> OnKeyDown(This,pic,wParam,lParam,pfEaten) ) 

#define ITfKeyEventSink_OnKeyUp(This,pic,wParam,lParam,pfEaten)	\
    ( (This)->lpVtbl -> OnKeyUp(This,pic,wParam,lParam,pfEaten) ) 

#define ITfKeyEventSink_OnPreservedKey(This,pic,rguid,pfEaten)	\
    ( (This)->lpVtbl -> OnPreservedKey(This,pic,rguid,pfEaten) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfKeyEventSink_INTERFACE_DEFINED__ */


#ifndef __ITfKeyTraceEventSink_INTERFACE_DEFINED__
#define __ITfKeyTraceEventSink_INTERFACE_DEFINED__

/* interface ITfKeyTraceEventSink */
/* [unique][uuid][local][object] */ 


EXTERN_C const IID IID_ITfKeyTraceEventSink;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("1cd4c13b-1c36-4191-a70a-7f3e611f367d")
    ITfKeyTraceEventSink : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnKeyTraceDown( 
            /* [in] */ WPARAM wParam,
            /* [in] */ LPARAM lParam) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnKeyTraceUp( 
            /* [in] */ WPARAM wParam,
            /* [in] */ LPARAM lParam) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfKeyTraceEventSinkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITfKeyTraceEventSink * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITfKeyTraceEventSink * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITfKeyTraceEventSink * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnKeyTraceDown )( 
            ITfKeyTraceEventSink * This,
            /* [in] */ WPARAM wParam,
            /* [in] */ LPARAM lParam);
        
        HRESULT ( STDMETHODCALLTYPE *OnKeyTraceUp )( 
            ITfKeyTraceEventSink * This,
            /* [in] */ WPARAM wParam,
            /* [in] */ LPARAM lParam);
        
        END_INTERFACE
    } ITfKeyTraceEventSinkVtbl;

    interface ITfKeyTraceEventSink
    {
        CONST_VTBL struct ITfKeyTraceEventSinkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfKeyTraceEventSink_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfKeyTraceEventSink_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfKeyTraceEventSink_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfKeyTraceEventSink_OnKeyTraceDown(This,wParam,lParam)	\
    ( (This)->lpVtbl -> OnKeyTraceDown(This,wParam,lParam) ) 

#define ITfKeyTraceEventSink_OnKeyTraceUp(This,wParam,lParam)	\
    ( (This)->lpVtbl -> OnKeyTraceUp(This,wParam,lParam) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfKeyTraceEventSink_INTERFACE_DEFINED__ */


#ifndef __ITfPreservedKeyNotifySink_INTERFACE_DEFINED__
#define __ITfPreservedKeyNotifySink_INTERFACE_DEFINED__

/* interface ITfPreservedKeyNotifySink */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITfPreservedKeyNotifySink;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6f77c993-d2b1-446e-853e-5912efc8a286")
    ITfPreservedKeyNotifySink : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnUpdated( 
            /* [in] */ __RPC__in const TF_PRESERVEDKEY *pprekey) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfPreservedKeyNotifySinkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfPreservedKeyNotifySink * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfPreservedKeyNotifySink * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfPreservedKeyNotifySink * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnUpdated )( 
            __RPC__in ITfPreservedKeyNotifySink * This,
            /* [in] */ __RPC__in const TF_PRESERVEDKEY *pprekey);
        
        END_INTERFACE
    } ITfPreservedKeyNotifySinkVtbl;

    interface ITfPreservedKeyNotifySink
    {
        CONST_VTBL struct ITfPreservedKeyNotifySinkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfPreservedKeyNotifySink_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfPreservedKeyNotifySink_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfPreservedKeyNotifySink_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfPreservedKeyNotifySink_OnUpdated(This,pprekey)	\
    ( (This)->lpVtbl -> OnUpdated(This,pprekey) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfPreservedKeyNotifySink_INTERFACE_DEFINED__ */


#ifndef __ITfMessagePump_INTERFACE_DEFINED__
#define __ITfMessagePump_INTERFACE_DEFINED__

/* interface ITfMessagePump */
/* [unique][uuid][local][object] */ 


EXTERN_C const IID IID_ITfMessagePump;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8f1b8ad8-0b6b-4874-90c5-bd76011e8f7c")
    ITfMessagePump : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE PeekMessageA( 
            /* [out] */ LPMSG pMsg,
            /* [in] */ HWND hwnd,
            /* [in] */ UINT wMsgFilterMin,
            /* [in] */ UINT wMsgFilterMax,
            /* [in] */ UINT wRemoveMsg,
            /* [out] */ BOOL *pfResult) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMessageA( 
            /* [out] */ LPMSG pMsg,
            /* [in] */ HWND hwnd,
            /* [in] */ UINT wMsgFilterMin,
            /* [in] */ UINT wMsgFilterMax,
            /* [out] */ BOOL *pfResult) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE PeekMessageW( 
            /* [out] */ LPMSG pMsg,
            /* [in] */ HWND hwnd,
            /* [in] */ UINT wMsgFilterMin,
            /* [in] */ UINT wMsgFilterMax,
            /* [in] */ UINT wRemoveMsg,
            /* [out] */ BOOL *pfResult) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMessageW( 
            /* [out] */ LPMSG pMsg,
            /* [in] */ HWND hwnd,
            /* [in] */ UINT wMsgFilterMin,
            /* [in] */ UINT wMsgFilterMax,
            /* [out] */ BOOL *pfResult) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfMessagePumpVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITfMessagePump * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITfMessagePump * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITfMessagePump * This);
        
        HRESULT ( STDMETHODCALLTYPE *PeekMessageA )( 
            ITfMessagePump * This,
            /* [out] */ LPMSG pMsg,
            /* [in] */ HWND hwnd,
            /* [in] */ UINT wMsgFilterMin,
            /* [in] */ UINT wMsgFilterMax,
            /* [in] */ UINT wRemoveMsg,
            /* [out] */ BOOL *pfResult);
        
        HRESULT ( STDMETHODCALLTYPE *GetMessageA )( 
            ITfMessagePump * This,
            /* [out] */ LPMSG pMsg,
            /* [in] */ HWND hwnd,
            /* [in] */ UINT wMsgFilterMin,
            /* [in] */ UINT wMsgFilterMax,
            /* [out] */ BOOL *pfResult);
        
        HRESULT ( STDMETHODCALLTYPE *PeekMessageW )( 
            ITfMessagePump * This,
            /* [out] */ LPMSG pMsg,
            /* [in] */ HWND hwnd,
            /* [in] */ UINT wMsgFilterMin,
            /* [in] */ UINT wMsgFilterMax,
            /* [in] */ UINT wRemoveMsg,
            /* [out] */ BOOL *pfResult);
        
        HRESULT ( STDMETHODCALLTYPE *GetMessageW )( 
            ITfMessagePump * This,
            /* [out] */ LPMSG pMsg,
            /* [in] */ HWND hwnd,
            /* [in] */ UINT wMsgFilterMin,
            /* [in] */ UINT wMsgFilterMax,
            /* [out] */ BOOL *pfResult);
        
        END_INTERFACE
    } ITfMessagePumpVtbl;

    interface ITfMessagePump
    {
        CONST_VTBL struct ITfMessagePumpVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfMessagePump_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfMessagePump_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfMessagePump_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfMessagePump_PeekMessageA(This,pMsg,hwnd,wMsgFilterMin,wMsgFilterMax,wRemoveMsg,pfResult)	\
    ( (This)->lpVtbl -> PeekMessageA(This,pMsg,hwnd,wMsgFilterMin,wMsgFilterMax,wRemoveMsg,pfResult) ) 

#define ITfMessagePump_GetMessageA(This,pMsg,hwnd,wMsgFilterMin,wMsgFilterMax,pfResult)	\
    ( (This)->lpVtbl -> GetMessageA(This,pMsg,hwnd,wMsgFilterMin,wMsgFilterMax,pfResult) ) 

#define ITfMessagePump_PeekMessageW(This,pMsg,hwnd,wMsgFilterMin,wMsgFilterMax,wRemoveMsg,pfResult)	\
    ( (This)->lpVtbl -> PeekMessageW(This,pMsg,hwnd,wMsgFilterMin,wMsgFilterMax,wRemoveMsg,pfResult) ) 

#define ITfMessagePump_GetMessageW(This,pMsg,hwnd,wMsgFilterMin,wMsgFilterMax,pfResult)	\
    ( (This)->lpVtbl -> GetMessageW(This,pMsg,hwnd,wMsgFilterMin,wMsgFilterMax,pfResult) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfMessagePump_INTERFACE_DEFINED__ */


#ifndef __ITfThreadFocusSink_INTERFACE_DEFINED__
#define __ITfThreadFocusSink_INTERFACE_DEFINED__

/* interface ITfThreadFocusSink */
/* [unique][uuid][local][object] */ 


EXTERN_C const IID IID_ITfThreadFocusSink;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c0f1db0c-3a20-405c-a303-96b6010a885f")
    ITfThreadFocusSink : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnSetThreadFocus( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnKillThreadFocus( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfThreadFocusSinkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITfThreadFocusSink * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITfThreadFocusSink * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITfThreadFocusSink * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnSetThreadFocus )( 
            ITfThreadFocusSink * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnKillThreadFocus )( 
            ITfThreadFocusSink * This);
        
        END_INTERFACE
    } ITfThreadFocusSinkVtbl;

    interface ITfThreadFocusSink
    {
        CONST_VTBL struct ITfThreadFocusSinkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfThreadFocusSink_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfThreadFocusSink_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfThreadFocusSink_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfThreadFocusSink_OnSetThreadFocus(This)	\
    ( (This)->lpVtbl -> OnSetThreadFocus(This) ) 

#define ITfThreadFocusSink_OnKillThreadFocus(This)	\
    ( (This)->lpVtbl -> OnKillThreadFocus(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfThreadFocusSink_INTERFACE_DEFINED__ */


#ifndef __ITfTextInputProcessor_INTERFACE_DEFINED__
#define __ITfTextInputProcessor_INTERFACE_DEFINED__

/* interface ITfTextInputProcessor */
/* [unique][uuid][local][object] */ 


EXTERN_C const IID IID_ITfTextInputProcessor;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("aa80e7f7-2021-11d2-93e0-0060b067b86e")
    ITfTextInputProcessor : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Activate( 
            /* [in] */ ITfThreadMgr *ptim,
            /* [in] */ TfClientId tid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Deactivate( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfTextInputProcessorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITfTextInputProcessor * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITfTextInputProcessor * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITfTextInputProcessor * This);
        
        HRESULT ( STDMETHODCALLTYPE *Activate )( 
            ITfTextInputProcessor * This,
            /* [in] */ ITfThreadMgr *ptim,
            /* [in] */ TfClientId tid);
        
        HRESULT ( STDMETHODCALLTYPE *Deactivate )( 
            ITfTextInputProcessor * This);
        
        END_INTERFACE
    } ITfTextInputProcessorVtbl;

    interface ITfTextInputProcessor
    {
        CONST_VTBL struct ITfTextInputProcessorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfTextInputProcessor_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfTextInputProcessor_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfTextInputProcessor_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfTextInputProcessor_Activate(This,ptim,tid)	\
    ( (This)->lpVtbl -> Activate(This,ptim,tid) ) 

#define ITfTextInputProcessor_Deactivate(This)	\
    ( (This)->lpVtbl -> Deactivate(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfTextInputProcessor_INTERFACE_DEFINED__ */


#ifndef __ITfTextInputProcessorEx_INTERFACE_DEFINED__
#define __ITfTextInputProcessorEx_INTERFACE_DEFINED__

/* interface ITfTextInputProcessorEx */
/* [unique][uuid][local][object] */ 


EXTERN_C const IID IID_ITfTextInputProcessorEx;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6e4e2102-f9cd-433d-b496-303ce03a6507")
    ITfTextInputProcessorEx : public ITfTextInputProcessor
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ActivateEx( 
            /* [in] */ ITfThreadMgr *ptim,
            /* [in] */ TfClientId tid,
            /* [in] */ DWORD dwFlags) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfTextInputProcessorExVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITfTextInputProcessorEx * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITfTextInputProcessorEx * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITfTextInputProcessorEx * This);
        
        HRESULT ( STDMETHODCALLTYPE *Activate )( 
            ITfTextInputProcessorEx * This,
            /* [in] */ ITfThreadMgr *ptim,
            /* [in] */ TfClientId tid);
        
        HRESULT ( STDMETHODCALLTYPE *Deactivate )( 
            ITfTextInputProcessorEx * This);
        
        HRESULT ( STDMETHODCALLTYPE *ActivateEx )( 
            ITfTextInputProcessorEx * This,
            /* [in] */ ITfThreadMgr *ptim,
            /* [in] */ TfClientId tid,
            /* [in] */ DWORD dwFlags);
        
        END_INTERFACE
    } ITfTextInputProcessorExVtbl;

    interface ITfTextInputProcessorEx
    {
        CONST_VTBL struct ITfTextInputProcessorExVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfTextInputProcessorEx_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfTextInputProcessorEx_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfTextInputProcessorEx_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfTextInputProcessorEx_Activate(This,ptim,tid)	\
    ( (This)->lpVtbl -> Activate(This,ptim,tid) ) 

#define ITfTextInputProcessorEx_Deactivate(This)	\
    ( (This)->lpVtbl -> Deactivate(This) ) 


#define ITfTextInputProcessorEx_ActivateEx(This,ptim,tid,dwFlags)	\
    ( (This)->lpVtbl -> ActivateEx(This,ptim,tid,dwFlags) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfTextInputProcessorEx_INTERFACE_DEFINED__ */


#ifndef __ITfClientId_INTERFACE_DEFINED__
#define __ITfClientId_INTERFACE_DEFINED__

/* interface ITfClientId */
/* [unique][uuid][local][object] */ 


EXTERN_C const IID IID_ITfClientId;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("d60a7b49-1b9f-4be2-b702-47e9dc05dec3")
    ITfClientId : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetClientId( 
            /* [in] */ REFCLSID rclsid,
            /* [out] */ TfClientId *ptid) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfClientIdVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITfClientId * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITfClientId * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITfClientId * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetClientId )( 
            ITfClientId * This,
            /* [in] */ REFCLSID rclsid,
            /* [out] */ TfClientId *ptid);
        
        END_INTERFACE
    } ITfClientIdVtbl;

    interface ITfClientId
    {
        CONST_VTBL struct ITfClientIdVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfClientId_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfClientId_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfClientId_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfClientId_GetClientId(This,rclsid,ptid)	\
    ( (This)->lpVtbl -> GetClientId(This,rclsid,ptid) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfClientId_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_msctf_0000_0069 */
/* [local] */ 

typedef /* [public][public][public][public][uuid] */  DECLSPEC_UUID("c4cc07f1-80cc-4a7b-bc54-98512782cbe3") 
enum __MIDL___MIDL_itf_msctf_0000_0069_0001
    {	TF_LS_NONE	= 0,
	TF_LS_SOLID	= 1,
	TF_LS_DOT	= 2,
	TF_LS_DASH	= 3,
	TF_LS_SQUIGGLE	= 4
    } 	TF_DA_LINESTYLE;

typedef /* [public][public][public][public][public][uuid] */  DECLSPEC_UUID("d9b92e21-084a-401b-9c64-1e6dad91a1ab") 
enum __MIDL___MIDL_itf_msctf_0000_0069_0002
    {	TF_CT_NONE	= 0,
	TF_CT_SYSCOLOR	= 1,
	TF_CT_COLORREF	= 2
    } 	TF_DA_COLORTYPE;

typedef /* [uuid] */  DECLSPEC_UUID("90d0cb5e-6520-4a0f-b47c-c39bd955f0d6") struct TF_DA_COLOR
    {
    TF_DA_COLORTYPE type;
    union 
        {
        int nIndex;
        COLORREF cr;
        } 	;
    } 	TF_DA_COLOR;

typedef /* [public][public][public][public][uuid] */  DECLSPEC_UUID("33d2fe4b-6c24-4f67-8d75-3bc1819e4126") 
enum __MIDL___MIDL_itf_msctf_0000_0069_0004
    {	TF_ATTR_INPUT	= 0,
	TF_ATTR_TARGET_CONVERTED	= 1,
	TF_ATTR_CONVERTED	= 2,
	TF_ATTR_TARGET_NOTCONVERTED	= 3,
	TF_ATTR_INPUT_ERROR	= 4,
	TF_ATTR_FIXEDCONVERTED	= 5,
	TF_ATTR_OTHER	= -1
    } 	TF_DA_ATTR_INFO;

typedef /* [uuid] */  DECLSPEC_UUID("1bf1c305-419b-4182-a4d2-9bfadc3f021f") struct TF_DISPLAYATTRIBUTE
    {
    TF_DA_COLOR crText;
    TF_DA_COLOR crBk;
    TF_DA_LINESTYLE lsStyle;
    BOOL fBoldLine;
    TF_DA_COLOR crLine;
    TF_DA_ATTR_INFO bAttr;
    } 	TF_DISPLAYATTRIBUTE;



extern RPC_IF_HANDLE __MIDL_itf_msctf_0000_0069_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_msctf_0000_0069_v0_0_s_ifspec;

#ifndef __ITfDisplayAttributeInfo_INTERFACE_DEFINED__
#define __ITfDisplayAttributeInfo_INTERFACE_DEFINED__

/* interface ITfDisplayAttributeInfo */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITfDisplayAttributeInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("70528852-2f26-4aea-8c96-215150578932")
    ITfDisplayAttributeInfo : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetGUID( 
            /* [out] */ __RPC__out GUID *pguid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDescription( 
            /* [out] */ __RPC__deref_out_opt BSTR *pbstrDesc) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetAttributeInfo( 
            /* [out] */ __RPC__out TF_DISPLAYATTRIBUTE *pda) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetAttributeInfo( 
            /* [in] */ __RPC__in const TF_DISPLAYATTRIBUTE *pda) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfDisplayAttributeInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfDisplayAttributeInfo * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfDisplayAttributeInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfDisplayAttributeInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetGUID )( 
            __RPC__in ITfDisplayAttributeInfo * This,
            /* [out] */ __RPC__out GUID *pguid);
        
        HRESULT ( STDMETHODCALLTYPE *GetDescription )( 
            __RPC__in ITfDisplayAttributeInfo * This,
            /* [out] */ __RPC__deref_out_opt BSTR *pbstrDesc);
        
        HRESULT ( STDMETHODCALLTYPE *GetAttributeInfo )( 
            __RPC__in ITfDisplayAttributeInfo * This,
            /* [out] */ __RPC__out TF_DISPLAYATTRIBUTE *pda);
        
        HRESULT ( STDMETHODCALLTYPE *SetAttributeInfo )( 
            __RPC__in ITfDisplayAttributeInfo * This,
            /* [in] */ __RPC__in const TF_DISPLAYATTRIBUTE *pda);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            __RPC__in ITfDisplayAttributeInfo * This);
        
        END_INTERFACE
    } ITfDisplayAttributeInfoVtbl;

    interface ITfDisplayAttributeInfo
    {
        CONST_VTBL struct ITfDisplayAttributeInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfDisplayAttributeInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfDisplayAttributeInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfDisplayAttributeInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfDisplayAttributeInfo_GetGUID(This,pguid)	\
    ( (This)->lpVtbl -> GetGUID(This,pguid) ) 

#define ITfDisplayAttributeInfo_GetDescription(This,pbstrDesc)	\
    ( (This)->lpVtbl -> GetDescription(This,pbstrDesc) ) 

#define ITfDisplayAttributeInfo_GetAttributeInfo(This,pda)	\
    ( (This)->lpVtbl -> GetAttributeInfo(This,pda) ) 

#define ITfDisplayAttributeInfo_SetAttributeInfo(This,pda)	\
    ( (This)->lpVtbl -> SetAttributeInfo(This,pda) ) 

#define ITfDisplayAttributeInfo_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfDisplayAttributeInfo_INTERFACE_DEFINED__ */


#ifndef __IEnumTfDisplayAttributeInfo_INTERFACE_DEFINED__
#define __IEnumTfDisplayAttributeInfo_INTERFACE_DEFINED__

/* interface IEnumTfDisplayAttributeInfo */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IEnumTfDisplayAttributeInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7cef04d7-cb75-4e80-a7ab-5f5bc7d332de")
    IEnumTfDisplayAttributeInfo : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ __RPC__deref_out_opt IEnumTfDisplayAttributeInfo **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG ulCount,
            /* [length_is][size_is][out] */ __RPC__out_ecount_part(ulCount, *pcFetched) ITfDisplayAttributeInfo **rgInfo,
            /* [out] */ __RPC__out ULONG *pcFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG ulCount) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumTfDisplayAttributeInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IEnumTfDisplayAttributeInfo * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IEnumTfDisplayAttributeInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IEnumTfDisplayAttributeInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            __RPC__in IEnumTfDisplayAttributeInfo * This,
            /* [out] */ __RPC__deref_out_opt IEnumTfDisplayAttributeInfo **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            __RPC__in IEnumTfDisplayAttributeInfo * This,
            /* [in] */ ULONG ulCount,
            /* [length_is][size_is][out] */ __RPC__out_ecount_part(ulCount, *pcFetched) ITfDisplayAttributeInfo **rgInfo,
            /* [out] */ __RPC__out ULONG *pcFetched);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            __RPC__in IEnumTfDisplayAttributeInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *Skip )( 
            __RPC__in IEnumTfDisplayAttributeInfo * This,
            /* [in] */ ULONG ulCount);
        
        END_INTERFACE
    } IEnumTfDisplayAttributeInfoVtbl;

    interface IEnumTfDisplayAttributeInfo
    {
        CONST_VTBL struct IEnumTfDisplayAttributeInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumTfDisplayAttributeInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IEnumTfDisplayAttributeInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IEnumTfDisplayAttributeInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IEnumTfDisplayAttributeInfo_Clone(This,ppEnum)	\
    ( (This)->lpVtbl -> Clone(This,ppEnum) ) 

#define IEnumTfDisplayAttributeInfo_Next(This,ulCount,rgInfo,pcFetched)	\
    ( (This)->lpVtbl -> Next(This,ulCount,rgInfo,pcFetched) ) 

#define IEnumTfDisplayAttributeInfo_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define IEnumTfDisplayAttributeInfo_Skip(This,ulCount)	\
    ( (This)->lpVtbl -> Skip(This,ulCount) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IEnumTfDisplayAttributeInfo_INTERFACE_DEFINED__ */


#ifndef __ITfDisplayAttributeProvider_INTERFACE_DEFINED__
#define __ITfDisplayAttributeProvider_INTERFACE_DEFINED__

/* interface ITfDisplayAttributeProvider */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITfDisplayAttributeProvider;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("fee47777-163c-4769-996a-6e9c50ad8f54")
    ITfDisplayAttributeProvider : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE EnumDisplayAttributeInfo( 
            /* [out] */ __RPC__deref_out_opt IEnumTfDisplayAttributeInfo **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDisplayAttributeInfo( 
            /* [in] */ __RPC__in REFGUID guid,
            /* [out] */ __RPC__deref_out_opt ITfDisplayAttributeInfo **ppInfo) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfDisplayAttributeProviderVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfDisplayAttributeProvider * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfDisplayAttributeProvider * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfDisplayAttributeProvider * This);
        
        HRESULT ( STDMETHODCALLTYPE *EnumDisplayAttributeInfo )( 
            __RPC__in ITfDisplayAttributeProvider * This,
            /* [out] */ __RPC__deref_out_opt IEnumTfDisplayAttributeInfo **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetDisplayAttributeInfo )( 
            __RPC__in ITfDisplayAttributeProvider * This,
            /* [in] */ __RPC__in REFGUID guid,
            /* [out] */ __RPC__deref_out_opt ITfDisplayAttributeInfo **ppInfo);
        
        END_INTERFACE
    } ITfDisplayAttributeProviderVtbl;

    interface ITfDisplayAttributeProvider
    {
        CONST_VTBL struct ITfDisplayAttributeProviderVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfDisplayAttributeProvider_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfDisplayAttributeProvider_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfDisplayAttributeProvider_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfDisplayAttributeProvider_EnumDisplayAttributeInfo(This,ppEnum)	\
    ( (This)->lpVtbl -> EnumDisplayAttributeInfo(This,ppEnum) ) 

#define ITfDisplayAttributeProvider_GetDisplayAttributeInfo(This,guid,ppInfo)	\
    ( (This)->lpVtbl -> GetDisplayAttributeInfo(This,guid,ppInfo) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfDisplayAttributeProvider_INTERFACE_DEFINED__ */


#ifndef __ITfDisplayAttributeMgr_INTERFACE_DEFINED__
#define __ITfDisplayAttributeMgr_INTERFACE_DEFINED__

/* interface ITfDisplayAttributeMgr */
/* [unique][uuid][local][object] */ 


EXTERN_C const IID IID_ITfDisplayAttributeMgr;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("8ded7393-5db1-475c-9e71-a39111b0ff67")
    ITfDisplayAttributeMgr : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnUpdateInfo( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumDisplayAttributeInfo( 
            /* [out] */ IEnumTfDisplayAttributeInfo **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDisplayAttributeInfo( 
            /* [in] */ REFGUID guid,
            /* [out] */ ITfDisplayAttributeInfo **ppInfo,
            /* [out] */ CLSID *pclsidOwner) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfDisplayAttributeMgrVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITfDisplayAttributeMgr * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITfDisplayAttributeMgr * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITfDisplayAttributeMgr * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnUpdateInfo )( 
            ITfDisplayAttributeMgr * This);
        
        HRESULT ( STDMETHODCALLTYPE *EnumDisplayAttributeInfo )( 
            ITfDisplayAttributeMgr * This,
            /* [out] */ IEnumTfDisplayAttributeInfo **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *GetDisplayAttributeInfo )( 
            ITfDisplayAttributeMgr * This,
            /* [in] */ REFGUID guid,
            /* [out] */ ITfDisplayAttributeInfo **ppInfo,
            /* [out] */ CLSID *pclsidOwner);
        
        END_INTERFACE
    } ITfDisplayAttributeMgrVtbl;

    interface ITfDisplayAttributeMgr
    {
        CONST_VTBL struct ITfDisplayAttributeMgrVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfDisplayAttributeMgr_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfDisplayAttributeMgr_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfDisplayAttributeMgr_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfDisplayAttributeMgr_OnUpdateInfo(This)	\
    ( (This)->lpVtbl -> OnUpdateInfo(This) ) 

#define ITfDisplayAttributeMgr_EnumDisplayAttributeInfo(This,ppEnum)	\
    ( (This)->lpVtbl -> EnumDisplayAttributeInfo(This,ppEnum) ) 

#define ITfDisplayAttributeMgr_GetDisplayAttributeInfo(This,guid,ppInfo,pclsidOwner)	\
    ( (This)->lpVtbl -> GetDisplayAttributeInfo(This,guid,ppInfo,pclsidOwner) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfDisplayAttributeMgr_INTERFACE_DEFINED__ */


#ifndef __ITfDisplayAttributeNotifySink_INTERFACE_DEFINED__
#define __ITfDisplayAttributeNotifySink_INTERFACE_DEFINED__

/* interface ITfDisplayAttributeNotifySink */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITfDisplayAttributeNotifySink;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ad56f402-e162-4f25-908f-7d577cf9bda9")
    ITfDisplayAttributeNotifySink : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnUpdateInfo( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfDisplayAttributeNotifySinkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfDisplayAttributeNotifySink * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfDisplayAttributeNotifySink * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfDisplayAttributeNotifySink * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnUpdateInfo )( 
            __RPC__in ITfDisplayAttributeNotifySink * This);
        
        END_INTERFACE
    } ITfDisplayAttributeNotifySinkVtbl;

    interface ITfDisplayAttributeNotifySink
    {
        CONST_VTBL struct ITfDisplayAttributeNotifySinkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfDisplayAttributeNotifySink_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfDisplayAttributeNotifySink_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfDisplayAttributeNotifySink_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfDisplayAttributeNotifySink_OnUpdateInfo(This)	\
    ( (This)->lpVtbl -> OnUpdateInfo(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfDisplayAttributeNotifySink_INTERFACE_DEFINED__ */


#ifndef __ITfCategoryMgr_INTERFACE_DEFINED__
#define __ITfCategoryMgr_INTERFACE_DEFINED__

/* interface ITfCategoryMgr */
/* [unique][uuid][local][object] */ 


EXTERN_C const IID IID_ITfCategoryMgr;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("c3acefb5-f69d-4905-938f-fcadcf4be830")
    ITfCategoryMgr : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE RegisterCategory( 
            /* [in] */ REFCLSID rclsid,
            /* [in] */ REFGUID rcatid,
            /* [in] */ REFGUID rguid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UnregisterCategory( 
            /* [in] */ REFCLSID rclsid,
            /* [in] */ REFGUID rcatid,
            /* [in] */ REFGUID rguid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumCategoriesInItem( 
            /* [in] */ REFGUID rguid,
            /* [out] */ IEnumGUID **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumItemsInCategory( 
            /* [in] */ REFGUID rcatid,
            /* [out] */ IEnumGUID **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FindClosestCategory( 
            /* [in] */ REFGUID rguid,
            /* [out] */ GUID *pcatid,
            /* [size_is][in] */ const GUID **ppcatidList,
            /* [in] */ ULONG ulCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RegisterGUIDDescription( 
            /* [in] */ REFCLSID rclsid,
            /* [in] */ REFGUID rguid,
            /* [size_is][in] */ const WCHAR *pchDesc,
            /* [in] */ ULONG cch) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UnregisterGUIDDescription( 
            /* [in] */ REFCLSID rclsid,
            /* [in] */ REFGUID rguid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetGUIDDescription( 
            /* [in] */ REFGUID rguid,
            /* [out] */ BSTR *pbstrDesc) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RegisterGUIDDWORD( 
            /* [in] */ REFCLSID rclsid,
            /* [in] */ REFGUID rguid,
            /* [in] */ DWORD dw) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UnregisterGUIDDWORD( 
            /* [in] */ REFCLSID rclsid,
            /* [in] */ REFGUID rguid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetGUIDDWORD( 
            /* [in] */ REFGUID rguid,
            /* [out] */ DWORD *pdw) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RegisterGUID( 
            /* [in] */ REFGUID rguid,
            /* [out] */ TfGuidAtom *pguidatom) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetGUID( 
            /* [in] */ TfGuidAtom guidatom,
            /* [out] */ GUID *pguid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsEqualTfGuidAtom( 
            /* [in] */ TfGuidAtom guidatom,
            /* [in] */ REFGUID rguid,
            /* [out] */ BOOL *pfEqual) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfCategoryMgrVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITfCategoryMgr * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITfCategoryMgr * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITfCategoryMgr * This);
        
        HRESULT ( STDMETHODCALLTYPE *RegisterCategory )( 
            ITfCategoryMgr * This,
            /* [in] */ REFCLSID rclsid,
            /* [in] */ REFGUID rcatid,
            /* [in] */ REFGUID rguid);
        
        HRESULT ( STDMETHODCALLTYPE *UnregisterCategory )( 
            ITfCategoryMgr * This,
            /* [in] */ REFCLSID rclsid,
            /* [in] */ REFGUID rcatid,
            /* [in] */ REFGUID rguid);
        
        HRESULT ( STDMETHODCALLTYPE *EnumCategoriesInItem )( 
            ITfCategoryMgr * This,
            /* [in] */ REFGUID rguid,
            /* [out] */ IEnumGUID **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *EnumItemsInCategory )( 
            ITfCategoryMgr * This,
            /* [in] */ REFGUID rcatid,
            /* [out] */ IEnumGUID **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *FindClosestCategory )( 
            ITfCategoryMgr * This,
            /* [in] */ REFGUID rguid,
            /* [out] */ GUID *pcatid,
            /* [size_is][in] */ const GUID **ppcatidList,
            /* [in] */ ULONG ulCount);
        
        HRESULT ( STDMETHODCALLTYPE *RegisterGUIDDescription )( 
            ITfCategoryMgr * This,
            /* [in] */ REFCLSID rclsid,
            /* [in] */ REFGUID rguid,
            /* [size_is][in] */ const WCHAR *pchDesc,
            /* [in] */ ULONG cch);
        
        HRESULT ( STDMETHODCALLTYPE *UnregisterGUIDDescription )( 
            ITfCategoryMgr * This,
            /* [in] */ REFCLSID rclsid,
            /* [in] */ REFGUID rguid);
        
        HRESULT ( STDMETHODCALLTYPE *GetGUIDDescription )( 
            ITfCategoryMgr * This,
            /* [in] */ REFGUID rguid,
            /* [out] */ BSTR *pbstrDesc);
        
        HRESULT ( STDMETHODCALLTYPE *RegisterGUIDDWORD )( 
            ITfCategoryMgr * This,
            /* [in] */ REFCLSID rclsid,
            /* [in] */ REFGUID rguid,
            /* [in] */ DWORD dw);
        
        HRESULT ( STDMETHODCALLTYPE *UnregisterGUIDDWORD )( 
            ITfCategoryMgr * This,
            /* [in] */ REFCLSID rclsid,
            /* [in] */ REFGUID rguid);
        
        HRESULT ( STDMETHODCALLTYPE *GetGUIDDWORD )( 
            ITfCategoryMgr * This,
            /* [in] */ REFGUID rguid,
            /* [out] */ DWORD *pdw);
        
        HRESULT ( STDMETHODCALLTYPE *RegisterGUID )( 
            ITfCategoryMgr * This,
            /* [in] */ REFGUID rguid,
            /* [out] */ TfGuidAtom *pguidatom);
        
        HRESULT ( STDMETHODCALLTYPE *GetGUID )( 
            ITfCategoryMgr * This,
            /* [in] */ TfGuidAtom guidatom,
            /* [out] */ GUID *pguid);
        
        HRESULT ( STDMETHODCALLTYPE *IsEqualTfGuidAtom )( 
            ITfCategoryMgr * This,
            /* [in] */ TfGuidAtom guidatom,
            /* [in] */ REFGUID rguid,
            /* [out] */ BOOL *pfEqual);
        
        END_INTERFACE
    } ITfCategoryMgrVtbl;

    interface ITfCategoryMgr
    {
        CONST_VTBL struct ITfCategoryMgrVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfCategoryMgr_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfCategoryMgr_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfCategoryMgr_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfCategoryMgr_RegisterCategory(This,rclsid,rcatid,rguid)	\
    ( (This)->lpVtbl -> RegisterCategory(This,rclsid,rcatid,rguid) ) 

#define ITfCategoryMgr_UnregisterCategory(This,rclsid,rcatid,rguid)	\
    ( (This)->lpVtbl -> UnregisterCategory(This,rclsid,rcatid,rguid) ) 

#define ITfCategoryMgr_EnumCategoriesInItem(This,rguid,ppEnum)	\
    ( (This)->lpVtbl -> EnumCategoriesInItem(This,rguid,ppEnum) ) 

#define ITfCategoryMgr_EnumItemsInCategory(This,rcatid,ppEnum)	\
    ( (This)->lpVtbl -> EnumItemsInCategory(This,rcatid,ppEnum) ) 

#define ITfCategoryMgr_FindClosestCategory(This,rguid,pcatid,ppcatidList,ulCount)	\
    ( (This)->lpVtbl -> FindClosestCategory(This,rguid,pcatid,ppcatidList,ulCount) ) 

#define ITfCategoryMgr_RegisterGUIDDescription(This,rclsid,rguid,pchDesc,cch)	\
    ( (This)->lpVtbl -> RegisterGUIDDescription(This,rclsid,rguid,pchDesc,cch) ) 

#define ITfCategoryMgr_UnregisterGUIDDescription(This,rclsid,rguid)	\
    ( (This)->lpVtbl -> UnregisterGUIDDescription(This,rclsid,rguid) ) 

#define ITfCategoryMgr_GetGUIDDescription(This,rguid,pbstrDesc)	\
    ( (This)->lpVtbl -> GetGUIDDescription(This,rguid,pbstrDesc) ) 

#define ITfCategoryMgr_RegisterGUIDDWORD(This,rclsid,rguid,dw)	\
    ( (This)->lpVtbl -> RegisterGUIDDWORD(This,rclsid,rguid,dw) ) 

#define ITfCategoryMgr_UnregisterGUIDDWORD(This,rclsid,rguid)	\
    ( (This)->lpVtbl -> UnregisterGUIDDWORD(This,rclsid,rguid) ) 

#define ITfCategoryMgr_GetGUIDDWORD(This,rguid,pdw)	\
    ( (This)->lpVtbl -> GetGUIDDWORD(This,rguid,pdw) ) 

#define ITfCategoryMgr_RegisterGUID(This,rguid,pguidatom)	\
    ( (This)->lpVtbl -> RegisterGUID(This,rguid,pguidatom) ) 

#define ITfCategoryMgr_GetGUID(This,guidatom,pguid)	\
    ( (This)->lpVtbl -> GetGUID(This,guidatom,pguid) ) 

#define ITfCategoryMgr_IsEqualTfGuidAtom(This,guidatom,rguid,pfEqual)	\
    ( (This)->lpVtbl -> IsEqualTfGuidAtom(This,guidatom,rguid,pfEqual) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfCategoryMgr_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_msctf_0000_0075 */
/* [local] */ 

#define	TF_INVALID_COOKIE	( 0xffffffff )



extern RPC_IF_HANDLE __MIDL_itf_msctf_0000_0075_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_msctf_0000_0075_v0_0_s_ifspec;

#ifndef __ITfSource_INTERFACE_DEFINED__
#define __ITfSource_INTERFACE_DEFINED__

/* interface ITfSource */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITfSource;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4ea48a35-60ae-446f-8fd6-e6a8d82459f7")
    ITfSource : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE AdviseSink( 
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][in] */ __RPC__in_opt IUnknown *punk,
            /* [out] */ __RPC__out DWORD *pdwCookie) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UnadviseSink( 
            /* [in] */ DWORD dwCookie) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfSourceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfSource * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfSource * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfSource * This);
        
        HRESULT ( STDMETHODCALLTYPE *AdviseSink )( 
            __RPC__in ITfSource * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][in] */ __RPC__in_opt IUnknown *punk,
            /* [out] */ __RPC__out DWORD *pdwCookie);
        
        HRESULT ( STDMETHODCALLTYPE *UnadviseSink )( 
            __RPC__in ITfSource * This,
            /* [in] */ DWORD dwCookie);
        
        END_INTERFACE
    } ITfSourceVtbl;

    interface ITfSource
    {
        CONST_VTBL struct ITfSourceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfSource_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfSource_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfSource_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfSource_AdviseSink(This,riid,punk,pdwCookie)	\
    ( (This)->lpVtbl -> AdviseSink(This,riid,punk,pdwCookie) ) 

#define ITfSource_UnadviseSink(This,dwCookie)	\
    ( (This)->lpVtbl -> UnadviseSink(This,dwCookie) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfSource_INTERFACE_DEFINED__ */


#ifndef __ITfSourceSingle_INTERFACE_DEFINED__
#define __ITfSourceSingle_INTERFACE_DEFINED__

/* interface ITfSourceSingle */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITfSourceSingle;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("73131f9c-56a9-49dd-b0ee-d046633f7528")
    ITfSourceSingle : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE AdviseSingleSink( 
            /* [in] */ TfClientId tid,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][in] */ __RPC__in_opt IUnknown *punk) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UnadviseSingleSink( 
            /* [in] */ TfClientId tid,
            /* [in] */ __RPC__in REFIID riid) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfSourceSingleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfSourceSingle * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfSourceSingle * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfSourceSingle * This);
        
        HRESULT ( STDMETHODCALLTYPE *AdviseSingleSink )( 
            __RPC__in ITfSourceSingle * This,
            /* [in] */ TfClientId tid,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][in] */ __RPC__in_opt IUnknown *punk);
        
        HRESULT ( STDMETHODCALLTYPE *UnadviseSingleSink )( 
            __RPC__in ITfSourceSingle * This,
            /* [in] */ TfClientId tid,
            /* [in] */ __RPC__in REFIID riid);
        
        END_INTERFACE
    } ITfSourceSingleVtbl;

    interface ITfSourceSingle
    {
        CONST_VTBL struct ITfSourceSingleVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfSourceSingle_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfSourceSingle_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfSourceSingle_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfSourceSingle_AdviseSingleSink(This,tid,riid,punk)	\
    ( (This)->lpVtbl -> AdviseSingleSink(This,tid,riid,punk) ) 

#define ITfSourceSingle_UnadviseSingleSink(This,tid,riid)	\
    ( (This)->lpVtbl -> UnadviseSingleSink(This,tid,riid) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfSourceSingle_INTERFACE_DEFINED__ */


#ifndef __ITfUIElementMgr_INTERFACE_DEFINED__
#define __ITfUIElementMgr_INTERFACE_DEFINED__

/* interface ITfUIElementMgr */
/* [unique][uuid][local][object] */ 


EXTERN_C const IID IID_ITfUIElementMgr;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ea1ea135-19df-11d7-a6d2-00065b84435c")
    ITfUIElementMgr : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE BeginUIElement( 
            /* [in] */ ITfUIElement *pElement,
            /* [out][in] */ BOOL *pbShow,
            /* [out] */ DWORD *pdwUIElementId) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UpdateUIElement( 
            /* [in] */ DWORD dwUIElementId) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EndUIElement( 
            /* [in] */ DWORD dwUIElementId) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetUIElement( 
            /* [in] */ DWORD dwUIELementId,
            /* [out] */ ITfUIElement **ppElement) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumUIElements( 
            /* [out] */ IEnumTfUIElements **ppEnum) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfUIElementMgrVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITfUIElementMgr * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITfUIElementMgr * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITfUIElementMgr * This);
        
        HRESULT ( STDMETHODCALLTYPE *BeginUIElement )( 
            ITfUIElementMgr * This,
            /* [in] */ ITfUIElement *pElement,
            /* [out][in] */ BOOL *pbShow,
            /* [out] */ DWORD *pdwUIElementId);
        
        HRESULT ( STDMETHODCALLTYPE *UpdateUIElement )( 
            ITfUIElementMgr * This,
            /* [in] */ DWORD dwUIElementId);
        
        HRESULT ( STDMETHODCALLTYPE *EndUIElement )( 
            ITfUIElementMgr * This,
            /* [in] */ DWORD dwUIElementId);
        
        HRESULT ( STDMETHODCALLTYPE *GetUIElement )( 
            ITfUIElementMgr * This,
            /* [in] */ DWORD dwUIELementId,
            /* [out] */ ITfUIElement **ppElement);
        
        HRESULT ( STDMETHODCALLTYPE *EnumUIElements )( 
            ITfUIElementMgr * This,
            /* [out] */ IEnumTfUIElements **ppEnum);
        
        END_INTERFACE
    } ITfUIElementMgrVtbl;

    interface ITfUIElementMgr
    {
        CONST_VTBL struct ITfUIElementMgrVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfUIElementMgr_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfUIElementMgr_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfUIElementMgr_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfUIElementMgr_BeginUIElement(This,pElement,pbShow,pdwUIElementId)	\
    ( (This)->lpVtbl -> BeginUIElement(This,pElement,pbShow,pdwUIElementId) ) 

#define ITfUIElementMgr_UpdateUIElement(This,dwUIElementId)	\
    ( (This)->lpVtbl -> UpdateUIElement(This,dwUIElementId) ) 

#define ITfUIElementMgr_EndUIElement(This,dwUIElementId)	\
    ( (This)->lpVtbl -> EndUIElement(This,dwUIElementId) ) 

#define ITfUIElementMgr_GetUIElement(This,dwUIELementId,ppElement)	\
    ( (This)->lpVtbl -> GetUIElement(This,dwUIELementId,ppElement) ) 

#define ITfUIElementMgr_EnumUIElements(This,ppEnum)	\
    ( (This)->lpVtbl -> EnumUIElements(This,ppEnum) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfUIElementMgr_INTERFACE_DEFINED__ */


#ifndef __IEnumTfUIElements_INTERFACE_DEFINED__
#define __IEnumTfUIElements_INTERFACE_DEFINED__

/* interface IEnumTfUIElements */
/* [unique][uuid][local][object] */ 


EXTERN_C const IID IID_IEnumTfUIElements;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("887aa91e-acba-4931-84da-3c5208cf543f")
    IEnumTfUIElements : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ IEnumTfUIElements **ppEnum) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG ulCount,
            /* [length_is][size_is][out] */ ITfUIElement **ppElement,
            /* [out] */ ULONG *pcFetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG ulCount) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumTfUIElementsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IEnumTfUIElements * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IEnumTfUIElements * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IEnumTfUIElements * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            IEnumTfUIElements * This,
            /* [out] */ IEnumTfUIElements **ppEnum);
        
        HRESULT ( STDMETHODCALLTYPE *Next )( 
            IEnumTfUIElements * This,
            /* [in] */ ULONG ulCount,
            /* [length_is][size_is][out] */ ITfUIElement **ppElement,
            /* [out] */ ULONG *pcFetched);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IEnumTfUIElements * This);
        
        HRESULT ( STDMETHODCALLTYPE *Skip )( 
            IEnumTfUIElements * This,
            /* [in] */ ULONG ulCount);
        
        END_INTERFACE
    } IEnumTfUIElementsVtbl;

    interface IEnumTfUIElements
    {
        CONST_VTBL struct IEnumTfUIElementsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumTfUIElements_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IEnumTfUIElements_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IEnumTfUIElements_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IEnumTfUIElements_Clone(This,ppEnum)	\
    ( (This)->lpVtbl -> Clone(This,ppEnum) ) 

#define IEnumTfUIElements_Next(This,ulCount,ppElement,pcFetched)	\
    ( (This)->lpVtbl -> Next(This,ulCount,ppElement,pcFetched) ) 

#define IEnumTfUIElements_Reset(This)	\
    ( (This)->lpVtbl -> Reset(This) ) 

#define IEnumTfUIElements_Skip(This,ulCount)	\
    ( (This)->lpVtbl -> Skip(This,ulCount) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IEnumTfUIElements_INTERFACE_DEFINED__ */


#ifndef __ITfUIElementSink_INTERFACE_DEFINED__
#define __ITfUIElementSink_INTERFACE_DEFINED__

/* interface ITfUIElementSink */
/* [unique][uuid][local][object] */ 


EXTERN_C const IID IID_ITfUIElementSink;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ea1ea136-19df-11d7-a6d2-00065b84435c")
    ITfUIElementSink : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE BeginUIElement( 
            /* [in] */ DWORD dwUIElementId,
            /* [out][in] */ BOOL *pbShow) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UpdateUIElement( 
            /* [in] */ DWORD dwUIElementId) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EndUIElement( 
            /* [in] */ DWORD dwUIElementId) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfUIElementSinkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITfUIElementSink * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITfUIElementSink * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITfUIElementSink * This);
        
        HRESULT ( STDMETHODCALLTYPE *BeginUIElement )( 
            ITfUIElementSink * This,
            /* [in] */ DWORD dwUIElementId,
            /* [out][in] */ BOOL *pbShow);
        
        HRESULT ( STDMETHODCALLTYPE *UpdateUIElement )( 
            ITfUIElementSink * This,
            /* [in] */ DWORD dwUIElementId);
        
        HRESULT ( STDMETHODCALLTYPE *EndUIElement )( 
            ITfUIElementSink * This,
            /* [in] */ DWORD dwUIElementId);
        
        END_INTERFACE
    } ITfUIElementSinkVtbl;

    interface ITfUIElementSink
    {
        CONST_VTBL struct ITfUIElementSinkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfUIElementSink_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfUIElementSink_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfUIElementSink_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfUIElementSink_BeginUIElement(This,dwUIElementId,pbShow)	\
    ( (This)->lpVtbl -> BeginUIElement(This,dwUIElementId,pbShow) ) 

#define ITfUIElementSink_UpdateUIElement(This,dwUIElementId)	\
    ( (This)->lpVtbl -> UpdateUIElement(This,dwUIElementId) ) 

#define ITfUIElementSink_EndUIElement(This,dwUIElementId)	\
    ( (This)->lpVtbl -> EndUIElement(This,dwUIElementId) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfUIElementSink_INTERFACE_DEFINED__ */


#ifndef __ITfUIElement_INTERFACE_DEFINED__
#define __ITfUIElement_INTERFACE_DEFINED__

/* interface ITfUIElement */
/* [unique][uuid][local][object] */ 


EXTERN_C const IID IID_ITfUIElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ea1ea137-19df-11d7-a6d2-00065b84435c")
    ITfUIElement : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetDescription( 
            /* [out] */ BSTR *pbstrDescription) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetGUID( 
            /* [out] */ GUID *pguid) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Show( 
            /* [in] */ BOOL bShow) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsShown( 
            /* [out] */ BOOL *pbShow) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfUIElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITfUIElement * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITfUIElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITfUIElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetDescription )( 
            ITfUIElement * This,
            /* [out] */ BSTR *pbstrDescription);
        
        HRESULT ( STDMETHODCALLTYPE *GetGUID )( 
            ITfUIElement * This,
            /* [out] */ GUID *pguid);
        
        HRESULT ( STDMETHODCALLTYPE *Show )( 
            ITfUIElement * This,
            /* [in] */ BOOL bShow);
        
        HRESULT ( STDMETHODCALLTYPE *IsShown )( 
            ITfUIElement * This,
            /* [out] */ BOOL *pbShow);
        
        END_INTERFACE
    } ITfUIElementVtbl;

    interface ITfUIElement
    {
        CONST_VTBL struct ITfUIElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfUIElement_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfUIElement_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfUIElement_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfUIElement_GetDescription(This,pbstrDescription)	\
    ( (This)->lpVtbl -> GetDescription(This,pbstrDescription) ) 

#define ITfUIElement_GetGUID(This,pguid)	\
    ( (This)->lpVtbl -> GetGUID(This,pguid) ) 

#define ITfUIElement_Show(This,bShow)	\
    ( (This)->lpVtbl -> Show(This,bShow) ) 

#define ITfUIElement_IsShown(This,pbShow)	\
    ( (This)->lpVtbl -> IsShown(This,pbShow) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfUIElement_INTERFACE_DEFINED__ */


#ifndef __ITfCandidateListUIElement_INTERFACE_DEFINED__
#define __ITfCandidateListUIElement_INTERFACE_DEFINED__

/* interface ITfCandidateListUIElement */
/* [unique][uuid][local][object] */ 


EXTERN_C const IID IID_ITfCandidateListUIElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ea1ea138-19df-11d7-a6d2-00065b84435c")
    ITfCandidateListUIElement : public ITfUIElement
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetUpdatedFlags( 
            /* [out] */ DWORD *pdwFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDocumentMgr( 
            /* [out] */ ITfDocumentMgr **ppdim) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCount( 
            /* [out] */ UINT *puCount) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetSelection( 
            /* [out] */ UINT *puIndex) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetString( 
            /* [in] */ UINT uIndex,
            /* [out] */ BSTR *pstr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPageIndex( 
            /* [length_is][size_is][out] */ UINT *pIndex,
            /* [in] */ UINT uSize,
            /* [out] */ UINT *puPageCnt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetPageIndex( 
            /* [size_is][in] */ UINT *pIndex,
            /* [in] */ UINT uPageCnt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCurrentPage( 
            /* [out] */ UINT *puPage) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfCandidateListUIElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITfCandidateListUIElement * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITfCandidateListUIElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITfCandidateListUIElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetDescription )( 
            ITfCandidateListUIElement * This,
            /* [out] */ BSTR *pbstrDescription);
        
        HRESULT ( STDMETHODCALLTYPE *GetGUID )( 
            ITfCandidateListUIElement * This,
            /* [out] */ GUID *pguid);
        
        HRESULT ( STDMETHODCALLTYPE *Show )( 
            ITfCandidateListUIElement * This,
            /* [in] */ BOOL bShow);
        
        HRESULT ( STDMETHODCALLTYPE *IsShown )( 
            ITfCandidateListUIElement * This,
            /* [out] */ BOOL *pbShow);
        
        HRESULT ( STDMETHODCALLTYPE *GetUpdatedFlags )( 
            ITfCandidateListUIElement * This,
            /* [out] */ DWORD *pdwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *GetDocumentMgr )( 
            ITfCandidateListUIElement * This,
            /* [out] */ ITfDocumentMgr **ppdim);
        
        HRESULT ( STDMETHODCALLTYPE *GetCount )( 
            ITfCandidateListUIElement * This,
            /* [out] */ UINT *puCount);
        
        HRESULT ( STDMETHODCALLTYPE *GetSelection )( 
            ITfCandidateListUIElement * This,
            /* [out] */ UINT *puIndex);
        
        HRESULT ( STDMETHODCALLTYPE *GetString )( 
            ITfCandidateListUIElement * This,
            /* [in] */ UINT uIndex,
            /* [out] */ BSTR *pstr);
        
        HRESULT ( STDMETHODCALLTYPE *GetPageIndex )( 
            ITfCandidateListUIElement * This,
            /* [length_is][size_is][out] */ UINT *pIndex,
            /* [in] */ UINT uSize,
            /* [out] */ UINT *puPageCnt);
        
        HRESULT ( STDMETHODCALLTYPE *SetPageIndex )( 
            ITfCandidateListUIElement * This,
            /* [size_is][in] */ UINT *pIndex,
            /* [in] */ UINT uPageCnt);
        
        HRESULT ( STDMETHODCALLTYPE *GetCurrentPage )( 
            ITfCandidateListUIElement * This,
            /* [out] */ UINT *puPage);
        
        END_INTERFACE
    } ITfCandidateListUIElementVtbl;

    interface ITfCandidateListUIElement
    {
        CONST_VTBL struct ITfCandidateListUIElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfCandidateListUIElement_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfCandidateListUIElement_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfCandidateListUIElement_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfCandidateListUIElement_GetDescription(This,pbstrDescription)	\
    ( (This)->lpVtbl -> GetDescription(This,pbstrDescription) ) 

#define ITfCandidateListUIElement_GetGUID(This,pguid)	\
    ( (This)->lpVtbl -> GetGUID(This,pguid) ) 

#define ITfCandidateListUIElement_Show(This,bShow)	\
    ( (This)->lpVtbl -> Show(This,bShow) ) 

#define ITfCandidateListUIElement_IsShown(This,pbShow)	\
    ( (This)->lpVtbl -> IsShown(This,pbShow) ) 


#define ITfCandidateListUIElement_GetUpdatedFlags(This,pdwFlags)	\
    ( (This)->lpVtbl -> GetUpdatedFlags(This,pdwFlags) ) 

#define ITfCandidateListUIElement_GetDocumentMgr(This,ppdim)	\
    ( (This)->lpVtbl -> GetDocumentMgr(This,ppdim) ) 

#define ITfCandidateListUIElement_GetCount(This,puCount)	\
    ( (This)->lpVtbl -> GetCount(This,puCount) ) 

#define ITfCandidateListUIElement_GetSelection(This,puIndex)	\
    ( (This)->lpVtbl -> GetSelection(This,puIndex) ) 

#define ITfCandidateListUIElement_GetString(This,uIndex,pstr)	\
    ( (This)->lpVtbl -> GetString(This,uIndex,pstr) ) 

#define ITfCandidateListUIElement_GetPageIndex(This,pIndex,uSize,puPageCnt)	\
    ( (This)->lpVtbl -> GetPageIndex(This,pIndex,uSize,puPageCnt) ) 

#define ITfCandidateListUIElement_SetPageIndex(This,pIndex,uPageCnt)	\
    ( (This)->lpVtbl -> SetPageIndex(This,pIndex,uPageCnt) ) 

#define ITfCandidateListUIElement_GetCurrentPage(This,puPage)	\
    ( (This)->lpVtbl -> GetCurrentPage(This,puPage) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfCandidateListUIElement_INTERFACE_DEFINED__ */


#ifndef __ITfCandidateListUIElementBehavior_INTERFACE_DEFINED__
#define __ITfCandidateListUIElementBehavior_INTERFACE_DEFINED__

/* interface ITfCandidateListUIElementBehavior */
/* [unique][uuid][local][object] */ 


EXTERN_C const IID IID_ITfCandidateListUIElementBehavior;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("85fad185-58ce-497a-9460-355366b64b9a")
    ITfCandidateListUIElementBehavior : public ITfCandidateListUIElement
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetSelection( 
            /* [in] */ UINT nIndex) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Finalize( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Abort( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfCandidateListUIElementBehaviorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITfCandidateListUIElementBehavior * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITfCandidateListUIElementBehavior * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITfCandidateListUIElementBehavior * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetDescription )( 
            ITfCandidateListUIElementBehavior * This,
            /* [out] */ BSTR *pbstrDescription);
        
        HRESULT ( STDMETHODCALLTYPE *GetGUID )( 
            ITfCandidateListUIElementBehavior * This,
            /* [out] */ GUID *pguid);
        
        HRESULT ( STDMETHODCALLTYPE *Show )( 
            ITfCandidateListUIElementBehavior * This,
            /* [in] */ BOOL bShow);
        
        HRESULT ( STDMETHODCALLTYPE *IsShown )( 
            ITfCandidateListUIElementBehavior * This,
            /* [out] */ BOOL *pbShow);
        
        HRESULT ( STDMETHODCALLTYPE *GetUpdatedFlags )( 
            ITfCandidateListUIElementBehavior * This,
            /* [out] */ DWORD *pdwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *GetDocumentMgr )( 
            ITfCandidateListUIElementBehavior * This,
            /* [out] */ ITfDocumentMgr **ppdim);
        
        HRESULT ( STDMETHODCALLTYPE *GetCount )( 
            ITfCandidateListUIElementBehavior * This,
            /* [out] */ UINT *puCount);
        
        HRESULT ( STDMETHODCALLTYPE *GetSelection )( 
            ITfCandidateListUIElementBehavior * This,
            /* [out] */ UINT *puIndex);
        
        HRESULT ( STDMETHODCALLTYPE *GetString )( 
            ITfCandidateListUIElementBehavior * This,
            /* [in] */ UINT uIndex,
            /* [out] */ BSTR *pstr);
        
        HRESULT ( STDMETHODCALLTYPE *GetPageIndex )( 
            ITfCandidateListUIElementBehavior * This,
            /* [length_is][size_is][out] */ UINT *pIndex,
            /* [in] */ UINT uSize,
            /* [out] */ UINT *puPageCnt);
        
        HRESULT ( STDMETHODCALLTYPE *SetPageIndex )( 
            ITfCandidateListUIElementBehavior * This,
            /* [size_is][in] */ UINT *pIndex,
            /* [in] */ UINT uPageCnt);
        
        HRESULT ( STDMETHODCALLTYPE *GetCurrentPage )( 
            ITfCandidateListUIElementBehavior * This,
            /* [out] */ UINT *puPage);
        
        HRESULT ( STDMETHODCALLTYPE *SetSelection )( 
            ITfCandidateListUIElementBehavior * This,
            /* [in] */ UINT nIndex);
        
        HRESULT ( STDMETHODCALLTYPE *Finalize )( 
            ITfCandidateListUIElementBehavior * This);
        
        HRESULT ( STDMETHODCALLTYPE *Abort )( 
            ITfCandidateListUIElementBehavior * This);
        
        END_INTERFACE
    } ITfCandidateListUIElementBehaviorVtbl;

    interface ITfCandidateListUIElementBehavior
    {
        CONST_VTBL struct ITfCandidateListUIElementBehaviorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfCandidateListUIElementBehavior_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfCandidateListUIElementBehavior_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfCandidateListUIElementBehavior_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfCandidateListUIElementBehavior_GetDescription(This,pbstrDescription)	\
    ( (This)->lpVtbl -> GetDescription(This,pbstrDescription) ) 

#define ITfCandidateListUIElementBehavior_GetGUID(This,pguid)	\
    ( (This)->lpVtbl -> GetGUID(This,pguid) ) 

#define ITfCandidateListUIElementBehavior_Show(This,bShow)	\
    ( (This)->lpVtbl -> Show(This,bShow) ) 

#define ITfCandidateListUIElementBehavior_IsShown(This,pbShow)	\
    ( (This)->lpVtbl -> IsShown(This,pbShow) ) 


#define ITfCandidateListUIElementBehavior_GetUpdatedFlags(This,pdwFlags)	\
    ( (This)->lpVtbl -> GetUpdatedFlags(This,pdwFlags) ) 

#define ITfCandidateListUIElementBehavior_GetDocumentMgr(This,ppdim)	\
    ( (This)->lpVtbl -> GetDocumentMgr(This,ppdim) ) 

#define ITfCandidateListUIElementBehavior_GetCount(This,puCount)	\
    ( (This)->lpVtbl -> GetCount(This,puCount) ) 

#define ITfCandidateListUIElementBehavior_GetSelection(This,puIndex)	\
    ( (This)->lpVtbl -> GetSelection(This,puIndex) ) 

#define ITfCandidateListUIElementBehavior_GetString(This,uIndex,pstr)	\
    ( (This)->lpVtbl -> GetString(This,uIndex,pstr) ) 

#define ITfCandidateListUIElementBehavior_GetPageIndex(This,pIndex,uSize,puPageCnt)	\
    ( (This)->lpVtbl -> GetPageIndex(This,pIndex,uSize,puPageCnt) ) 

#define ITfCandidateListUIElementBehavior_SetPageIndex(This,pIndex,uPageCnt)	\
    ( (This)->lpVtbl -> SetPageIndex(This,pIndex,uPageCnt) ) 

#define ITfCandidateListUIElementBehavior_GetCurrentPage(This,puPage)	\
    ( (This)->lpVtbl -> GetCurrentPage(This,puPage) ) 


#define ITfCandidateListUIElementBehavior_SetSelection(This,nIndex)	\
    ( (This)->lpVtbl -> SetSelection(This,nIndex) ) 

#define ITfCandidateListUIElementBehavior_Finalize(This)	\
    ( (This)->lpVtbl -> Finalize(This) ) 

#define ITfCandidateListUIElementBehavior_Abort(This)	\
    ( (This)->lpVtbl -> Abort(This) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfCandidateListUIElementBehavior_INTERFACE_DEFINED__ */


#ifndef __ITfReadingInformationUIElement_INTERFACE_DEFINED__
#define __ITfReadingInformationUIElement_INTERFACE_DEFINED__

/* interface ITfReadingInformationUIElement */
/* [unique][uuid][local][object] */ 


EXTERN_C const IID IID_ITfReadingInformationUIElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("ea1ea139-19df-11d7-a6d2-00065b84435c")
    ITfReadingInformationUIElement : public ITfUIElement
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetUpdatedFlags( 
            /* [out] */ DWORD *pdwFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetContext( 
            /* [out] */ ITfContext **ppic) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetString( 
            /* [out] */ BSTR *pstr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetMaxReadingStringLength( 
            /* [out] */ UINT *pcchMax) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetErrorIndex( 
            /* [out] */ UINT *pErrorIndex) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsVerticalOrderPreferred( 
            /* [out] */ BOOL *pfVertical) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfReadingInformationUIElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITfReadingInformationUIElement * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITfReadingInformationUIElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITfReadingInformationUIElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetDescription )( 
            ITfReadingInformationUIElement * This,
            /* [out] */ BSTR *pbstrDescription);
        
        HRESULT ( STDMETHODCALLTYPE *GetGUID )( 
            ITfReadingInformationUIElement * This,
            /* [out] */ GUID *pguid);
        
        HRESULT ( STDMETHODCALLTYPE *Show )( 
            ITfReadingInformationUIElement * This,
            /* [in] */ BOOL bShow);
        
        HRESULT ( STDMETHODCALLTYPE *IsShown )( 
            ITfReadingInformationUIElement * This,
            /* [out] */ BOOL *pbShow);
        
        HRESULT ( STDMETHODCALLTYPE *GetUpdatedFlags )( 
            ITfReadingInformationUIElement * This,
            /* [out] */ DWORD *pdwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *GetContext )( 
            ITfReadingInformationUIElement * This,
            /* [out] */ ITfContext **ppic);
        
        HRESULT ( STDMETHODCALLTYPE *GetString )( 
            ITfReadingInformationUIElement * This,
            /* [out] */ BSTR *pstr);
        
        HRESULT ( STDMETHODCALLTYPE *GetMaxReadingStringLength )( 
            ITfReadingInformationUIElement * This,
            /* [out] */ UINT *pcchMax);
        
        HRESULT ( STDMETHODCALLTYPE *GetErrorIndex )( 
            ITfReadingInformationUIElement * This,
            /* [out] */ UINT *pErrorIndex);
        
        HRESULT ( STDMETHODCALLTYPE *IsVerticalOrderPreferred )( 
            ITfReadingInformationUIElement * This,
            /* [out] */ BOOL *pfVertical);
        
        END_INTERFACE
    } ITfReadingInformationUIElementVtbl;

    interface ITfReadingInformationUIElement
    {
        CONST_VTBL struct ITfReadingInformationUIElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfReadingInformationUIElement_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfReadingInformationUIElement_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfReadingInformationUIElement_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfReadingInformationUIElement_GetDescription(This,pbstrDescription)	\
    ( (This)->lpVtbl -> GetDescription(This,pbstrDescription) ) 

#define ITfReadingInformationUIElement_GetGUID(This,pguid)	\
    ( (This)->lpVtbl -> GetGUID(This,pguid) ) 

#define ITfReadingInformationUIElement_Show(This,bShow)	\
    ( (This)->lpVtbl -> Show(This,bShow) ) 

#define ITfReadingInformationUIElement_IsShown(This,pbShow)	\
    ( (This)->lpVtbl -> IsShown(This,pbShow) ) 


#define ITfReadingInformationUIElement_GetUpdatedFlags(This,pdwFlags)	\
    ( (This)->lpVtbl -> GetUpdatedFlags(This,pdwFlags) ) 

#define ITfReadingInformationUIElement_GetContext(This,ppic)	\
    ( (This)->lpVtbl -> GetContext(This,ppic) ) 

#define ITfReadingInformationUIElement_GetString(This,pstr)	\
    ( (This)->lpVtbl -> GetString(This,pstr) ) 

#define ITfReadingInformationUIElement_GetMaxReadingStringLength(This,pcchMax)	\
    ( (This)->lpVtbl -> GetMaxReadingStringLength(This,pcchMax) ) 

#define ITfReadingInformationUIElement_GetErrorIndex(This,pErrorIndex)	\
    ( (This)->lpVtbl -> GetErrorIndex(This,pErrorIndex) ) 

#define ITfReadingInformationUIElement_IsVerticalOrderPreferred(This,pfVertical)	\
    ( (This)->lpVtbl -> IsVerticalOrderPreferred(This,pfVertical) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfReadingInformationUIElement_INTERFACE_DEFINED__ */


#ifndef __ITfTransitoryExtensionUIElement_INTERFACE_DEFINED__
#define __ITfTransitoryExtensionUIElement_INTERFACE_DEFINED__

/* interface ITfTransitoryExtensionUIElement */
/* [unique][uuid][local][object] */ 


EXTERN_C const IID IID_ITfTransitoryExtensionUIElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("858f956a-972f-42a2-a2f2-0321e1abe209")
    ITfTransitoryExtensionUIElement : public ITfUIElement
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetDocumentMgr( 
            /* [out] */ ITfDocumentMgr **ppdim) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfTransitoryExtensionUIElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITfTransitoryExtensionUIElement * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITfTransitoryExtensionUIElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITfTransitoryExtensionUIElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetDescription )( 
            ITfTransitoryExtensionUIElement * This,
            /* [out] */ BSTR *pbstrDescription);
        
        HRESULT ( STDMETHODCALLTYPE *GetGUID )( 
            ITfTransitoryExtensionUIElement * This,
            /* [out] */ GUID *pguid);
        
        HRESULT ( STDMETHODCALLTYPE *Show )( 
            ITfTransitoryExtensionUIElement * This,
            /* [in] */ BOOL bShow);
        
        HRESULT ( STDMETHODCALLTYPE *IsShown )( 
            ITfTransitoryExtensionUIElement * This,
            /* [out] */ BOOL *pbShow);
        
        HRESULT ( STDMETHODCALLTYPE *GetDocumentMgr )( 
            ITfTransitoryExtensionUIElement * This,
            /* [out] */ ITfDocumentMgr **ppdim);
        
        END_INTERFACE
    } ITfTransitoryExtensionUIElementVtbl;

    interface ITfTransitoryExtensionUIElement
    {
        CONST_VTBL struct ITfTransitoryExtensionUIElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfTransitoryExtensionUIElement_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfTransitoryExtensionUIElement_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfTransitoryExtensionUIElement_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfTransitoryExtensionUIElement_GetDescription(This,pbstrDescription)	\
    ( (This)->lpVtbl -> GetDescription(This,pbstrDescription) ) 

#define ITfTransitoryExtensionUIElement_GetGUID(This,pguid)	\
    ( (This)->lpVtbl -> GetGUID(This,pguid) ) 

#define ITfTransitoryExtensionUIElement_Show(This,bShow)	\
    ( (This)->lpVtbl -> Show(This,bShow) ) 

#define ITfTransitoryExtensionUIElement_IsShown(This,pbShow)	\
    ( (This)->lpVtbl -> IsShown(This,pbShow) ) 


#define ITfTransitoryExtensionUIElement_GetDocumentMgr(This,ppdim)	\
    ( (This)->lpVtbl -> GetDocumentMgr(This,ppdim) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfTransitoryExtensionUIElement_INTERFACE_DEFINED__ */


#ifndef __ITfTransitoryExtensionSink_INTERFACE_DEFINED__
#define __ITfTransitoryExtensionSink_INTERFACE_DEFINED__

/* interface ITfTransitoryExtensionSink */
/* [unique][uuid][local][object] */ 


EXTERN_C const IID IID_ITfTransitoryExtensionSink;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a615096f-1c57-4813-8a15-55ee6e5a839c")
    ITfTransitoryExtensionSink : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE OnTransitoryExtensionUpdated( 
            /* [in] */ ITfContext *pic,
            /* [in] */ TfEditCookie ecReadOnly,
            /* [in] */ ITfRange *pResultRange,
            /* [in] */ ITfRange *pCompositionRange,
            /* [out] */ BOOL *pfDeleteResultRange) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfTransitoryExtensionSinkVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITfTransitoryExtensionSink * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITfTransitoryExtensionSink * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITfTransitoryExtensionSink * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnTransitoryExtensionUpdated )( 
            ITfTransitoryExtensionSink * This,
            /* [in] */ ITfContext *pic,
            /* [in] */ TfEditCookie ecReadOnly,
            /* [in] */ ITfRange *pResultRange,
            /* [in] */ ITfRange *pCompositionRange,
            /* [out] */ BOOL *pfDeleteResultRange);
        
        END_INTERFACE
    } ITfTransitoryExtensionSinkVtbl;

    interface ITfTransitoryExtensionSink
    {
        CONST_VTBL struct ITfTransitoryExtensionSinkVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfTransitoryExtensionSink_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfTransitoryExtensionSink_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfTransitoryExtensionSink_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfTransitoryExtensionSink_OnTransitoryExtensionUpdated(This,pic,ecReadOnly,pResultRange,pCompositionRange,pfDeleteResultRange)	\
    ( (This)->lpVtbl -> OnTransitoryExtensionUpdated(This,pic,ecReadOnly,pResultRange,pCompositionRange,pfDeleteResultRange) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfTransitoryExtensionSink_INTERFACE_DEFINED__ */


#ifndef __ITfToolTipUIElement_INTERFACE_DEFINED__
#define __ITfToolTipUIElement_INTERFACE_DEFINED__

/* interface ITfToolTipUIElement */
/* [unique][uuid][local][object] */ 


EXTERN_C const IID IID_ITfToolTipUIElement;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("52b18b5c-555d-46b2-b00a-fa680144fbdb")
    ITfToolTipUIElement : public ITfUIElement
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetString( 
            /* [out] */ BSTR *pstr) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfToolTipUIElementVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            ITfToolTipUIElement * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            ITfToolTipUIElement * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            ITfToolTipUIElement * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetDescription )( 
            ITfToolTipUIElement * This,
            /* [out] */ BSTR *pbstrDescription);
        
        HRESULT ( STDMETHODCALLTYPE *GetGUID )( 
            ITfToolTipUIElement * This,
            /* [out] */ GUID *pguid);
        
        HRESULT ( STDMETHODCALLTYPE *Show )( 
            ITfToolTipUIElement * This,
            /* [in] */ BOOL bShow);
        
        HRESULT ( STDMETHODCALLTYPE *IsShown )( 
            ITfToolTipUIElement * This,
            /* [out] */ BOOL *pbShow);
        
        HRESULT ( STDMETHODCALLTYPE *GetString )( 
            ITfToolTipUIElement * This,
            /* [out] */ BSTR *pstr);
        
        END_INTERFACE
    } ITfToolTipUIElementVtbl;

    interface ITfToolTipUIElement
    {
        CONST_VTBL struct ITfToolTipUIElementVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfToolTipUIElement_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfToolTipUIElement_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfToolTipUIElement_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfToolTipUIElement_GetDescription(This,pbstrDescription)	\
    ( (This)->lpVtbl -> GetDescription(This,pbstrDescription) ) 

#define ITfToolTipUIElement_GetGUID(This,pguid)	\
    ( (This)->lpVtbl -> GetGUID(This,pguid) ) 

#define ITfToolTipUIElement_Show(This,bShow)	\
    ( (This)->lpVtbl -> Show(This,bShow) ) 

#define ITfToolTipUIElement_IsShown(This,pbShow)	\
    ( (This)->lpVtbl -> IsShown(This,pbShow) ) 


#define ITfToolTipUIElement_GetString(This,pstr)	\
    ( (This)->lpVtbl -> GetString(This,pstr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfToolTipUIElement_INTERFACE_DEFINED__ */


#ifndef __ITfReverseConversionList_INTERFACE_DEFINED__
#define __ITfReverseConversionList_INTERFACE_DEFINED__

/* interface ITfReverseConversionList */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITfReverseConversionList;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("151d69f0-86f4-4674-b721-56911e797f47")
    ITfReverseConversionList : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetLength( 
            /* [out] */ __RPC__out UINT *puIndex) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetString( 
            /* [in] */ UINT uIndex,
            /* [out] */ __RPC__deref_out_opt BSTR *pbstr) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfReverseConversionListVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfReverseConversionList * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfReverseConversionList * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfReverseConversionList * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetLength )( 
            __RPC__in ITfReverseConversionList * This,
            /* [out] */ __RPC__out UINT *puIndex);
        
        HRESULT ( STDMETHODCALLTYPE *GetString )( 
            __RPC__in ITfReverseConversionList * This,
            /* [in] */ UINT uIndex,
            /* [out] */ __RPC__deref_out_opt BSTR *pbstr);
        
        END_INTERFACE
    } ITfReverseConversionListVtbl;

    interface ITfReverseConversionList
    {
        CONST_VTBL struct ITfReverseConversionListVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfReverseConversionList_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfReverseConversionList_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfReverseConversionList_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfReverseConversionList_GetLength(This,puIndex)	\
    ( (This)->lpVtbl -> GetLength(This,puIndex) ) 

#define ITfReverseConversionList_GetString(This,uIndex,pbstr)	\
    ( (This)->lpVtbl -> GetString(This,uIndex,pbstr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfReverseConversionList_INTERFACE_DEFINED__ */


#ifndef __ITfReverseConversion_INTERFACE_DEFINED__
#define __ITfReverseConversion_INTERFACE_DEFINED__

/* interface ITfReverseConversion */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITfReverseConversion;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("a415e162-157d-417d-8a8c-0ab26c7d2781")
    ITfReverseConversion : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE DoReverseConversion( 
            /* [in] */ __RPC__in LPCWSTR lpstr,
            /* [out] */ __RPC__deref_out_opt ITfReverseConversionList **ppList) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfReverseConversionVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfReverseConversion * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfReverseConversion * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfReverseConversion * This);
        
        HRESULT ( STDMETHODCALLTYPE *DoReverseConversion )( 
            __RPC__in ITfReverseConversion * This,
            /* [in] */ __RPC__in LPCWSTR lpstr,
            /* [out] */ __RPC__deref_out_opt ITfReverseConversionList **ppList);
        
        END_INTERFACE
    } ITfReverseConversionVtbl;

    interface ITfReverseConversion
    {
        CONST_VTBL struct ITfReverseConversionVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfReverseConversion_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfReverseConversion_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfReverseConversion_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfReverseConversion_DoReverseConversion(This,lpstr,ppList)	\
    ( (This)->lpVtbl -> DoReverseConversion(This,lpstr,ppList) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfReverseConversion_INTERFACE_DEFINED__ */


#ifndef __ITfReverseConversionMgr_INTERFACE_DEFINED__
#define __ITfReverseConversionMgr_INTERFACE_DEFINED__

/* interface ITfReverseConversionMgr */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_ITfReverseConversionMgr;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("b643c236-c493-41b6-abb3-692412775cc4")
    ITfReverseConversionMgr : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetReverseConversion( 
            /* [in] */ LANGID langid,
            /* [in] */ __RPC__in REFGUID guidProfile,
            /* [in] */ DWORD dwflag,
            /* [out] */ __RPC__deref_out_opt ITfReverseConversion **ppReverseConversion) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ITfReverseConversionMgrVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ITfReverseConversionMgr * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ITfReverseConversionMgr * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ITfReverseConversionMgr * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetReverseConversion )( 
            __RPC__in ITfReverseConversionMgr * This,
            /* [in] */ LANGID langid,
            /* [in] */ __RPC__in REFGUID guidProfile,
            /* [in] */ DWORD dwflag,
            /* [out] */ __RPC__deref_out_opt ITfReverseConversion **ppReverseConversion);
        
        END_INTERFACE
    } ITfReverseConversionMgrVtbl;

    interface ITfReverseConversionMgr
    {
        CONST_VTBL struct ITfReverseConversionMgrVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ITfReverseConversionMgr_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ITfReverseConversionMgr_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ITfReverseConversionMgr_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ITfReverseConversionMgr_GetReverseConversion(This,langid,guidProfile,dwflag,ppReverseConversion)	\
    ( (This)->lpVtbl -> GetReverseConversion(This,langid,guidProfile,dwflag,ppReverseConversion) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ITfReverseConversionMgr_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_msctf_0000_0090 */
/* [local] */ 


DEFINE_GUID( TF_PROFILE_NEWPHONETIC, 0xB2F9C502, 0x1742, 0x11D4, 0x97, 0x90, 0x00, 0x80, 0xC8, 0x82, 0x68, 0x7E);
DEFINE_GUID( TF_PROFILE_PHONETIC,    0x761309DE, 0x317A, 0x11D4, 0x9B, 0x5D, 0x00, 0x80, 0xC8, 0x82, 0x68, 0x7E);
DEFINE_GUID( TF_PROFILE_NEWCHANGJIE, 0xF3BA907A, 0x6C7E, 0x11D4, 0x97, 0xFA, 0x00, 0x80, 0xC8, 0x82, 0x68, 0x7E);
DEFINE_GUID( TF_PROFILE_CHANGJIE,    0x4BDF9F03, 0xC7D3, 0x11D4, 0xB2, 0xAB, 0x00, 0x80, 0xC8, 0x82, 0x68, 0x7E);
DEFINE_GUID( TF_PROFILE_NEWQUICK,    0x0B883BA0, 0xC1C7, 0x11D4, 0x87, 0xF9, 0x00, 0x80, 0xC8, 0x82, 0x68, 0x7E);
DEFINE_GUID( TF_PROFILE_QUICK,       0x6024B45F, 0x5C54, 0x11D4, 0xB9, 0x21, 0x00, 0x80, 0xC8, 0x82, 0x68, 0x7E);
DEFINE_GUID( TF_PROFILE_CANTONESE,   0x0AEC109C, 0x7E96, 0x11D4, 0xB2, 0xEF, 0x00, 0x80, 0xC8, 0x82, 0x68, 0x7E);
DEFINE_GUID( TF_PROFILE_PINYIN,      0xF3BA9077, 0x6C7E, 0x11D4, 0x97, 0xFA, 0x00, 0x80, 0xC8, 0x82, 0x68, 0x7E);
DEFINE_GUID( TF_PROFILE_DAYI,        0x037B2C25, 0x480C, 0x4D7F, 0xB0, 0x27, 0xD6, 0xCA, 0x6B, 0x69, 0x78, 0x8A);
DEFINE_GUID( TF_PROFILE_ARRAY,       0xD38EFF65, 0xAA46, 0x4FD5, 0x91, 0xA7, 0x67, 0x84, 0x5F, 0xB0, 0x2F, 0x5B);
DEFINE_GUID( TF_PROFILE_QUANPIN,     0x54FC610E, 0x6ABD, 0x4685, 0x9D, 0xDD, 0xA1, 0x30, 0xBD, 0xF1, 0xB1, 0x70);
DEFINE_GUID( TF_PROFILE_ZHENGMA,      0x733B4D81, 0x3BC3, 0x4132, 0xB9, 0x1A, 0xE9, 0xCD, 0xD5, 0xE2, 0xBF, 0xC9);
DEFINE_GUID( TF_PROFILE_SHUANGPIN,    0xEF63706D, 0x31C4, 0x490E, 0x9D, 0xBB, 0xBD, 0x15, 0x0A, 0xDC, 0x45, 0x4B);
DEFINE_GUID( TF_PROFILE_YI,           0x409C8376, 0x007B, 0x4357, 0xAE, 0x8E, 0x26, 0x31, 0x6E, 0xE3, 0xFB, 0x0D);
#endif // MSCTF_DEFINED


extern RPC_IF_HANDLE __MIDL_itf_msctf_0000_0090_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_msctf_0000_0090_v0_0_s_ifspec;

/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  BSTR_UserSize(     __RPC__in unsigned long *, unsigned long            , __RPC__in BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out BSTR * ); 
void                      __RPC_USER  BSTR_UserFree(     __RPC__in unsigned long *, __RPC__in BSTR * ); 

unsigned long             __RPC_USER  CLIPFORMAT_UserSize(     __RPC__in unsigned long *, unsigned long            , __RPC__in CLIPFORMAT * ); 
unsigned char * __RPC_USER  CLIPFORMAT_UserMarshal(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in CLIPFORMAT * ); 
unsigned char * __RPC_USER  CLIPFORMAT_UserUnmarshal(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out CLIPFORMAT * ); 
void                      __RPC_USER  CLIPFORMAT_UserFree(     __RPC__in unsigned long *, __RPC__in CLIPFORMAT * ); 

unsigned long             __RPC_USER  HWND_UserSize(     __RPC__in unsigned long *, unsigned long            , __RPC__in HWND * ); 
unsigned char * __RPC_USER  HWND_UserMarshal(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in HWND * ); 
unsigned char * __RPC_USER  HWND_UserUnmarshal(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out HWND * ); 
void                      __RPC_USER  HWND_UserFree(     __RPC__in unsigned long *, __RPC__in HWND * ); 

unsigned long             __RPC_USER  VARIANT_UserSize(     __RPC__in unsigned long *, unsigned long            , __RPC__in VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserMarshal(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserUnmarshal(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out VARIANT * ); 
void                      __RPC_USER  VARIANT_UserFree(     __RPC__in unsigned long *, __RPC__in VARIANT * ); 

unsigned long             __RPC_USER  BSTR_UserSize64(     __RPC__in unsigned long *, unsigned long            , __RPC__in BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserMarshal64(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in BSTR * ); 
unsigned char * __RPC_USER  BSTR_UserUnmarshal64(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out BSTR * ); 
void                      __RPC_USER  BSTR_UserFree64(     __RPC__in unsigned long *, __RPC__in BSTR * ); 

unsigned long             __RPC_USER  CLIPFORMAT_UserSize64(     __RPC__in unsigned long *, unsigned long            , __RPC__in CLIPFORMAT * ); 
unsigned char * __RPC_USER  CLIPFORMAT_UserMarshal64(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in CLIPFORMAT * ); 
unsigned char * __RPC_USER  CLIPFORMAT_UserUnmarshal64(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out CLIPFORMAT * ); 
void                      __RPC_USER  CLIPFORMAT_UserFree64(     __RPC__in unsigned long *, __RPC__in CLIPFORMAT * ); 

unsigned long             __RPC_USER  HWND_UserSize64(     __RPC__in unsigned long *, unsigned long            , __RPC__in HWND * ); 
unsigned char * __RPC_USER  HWND_UserMarshal64(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in HWND * ); 
unsigned char * __RPC_USER  HWND_UserUnmarshal64(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out HWND * ); 
void                      __RPC_USER  HWND_UserFree64(     __RPC__in unsigned long *, __RPC__in HWND * ); 

unsigned long             __RPC_USER  VARIANT_UserSize64(     __RPC__in unsigned long *, unsigned long            , __RPC__in VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserMarshal64(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserUnmarshal64(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out VARIANT * ); 
void                      __RPC_USER  VARIANT_UserFree64(     __RPC__in unsigned long *, __RPC__in VARIANT * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\msdaguid.h ===
//---------------------------------------------------------------------------
//
//	File:			MSDAGUID.H
//
//	Copyright:		Copyright (c) Microsoft Corporation          
//	
//	Contents:		Microsoft Data Access GUID defintions
//
//	Comments:	
//
//---------------------------------------------------------------------------

#ifndef MSDAGUID
#define MSDAGUID

#undef OLEDBDECLSPEC
#if _MSC_VER >= 1100
#define OLEDBDECLSPEC __declspec(selectany)
#else
#define OLEDBDECLSPEC 
#endif //_MSC_VER

#ifdef DBINITCONSTANTS
EXTERN_C const OLEDBDECLSPEC GUID CLSID_OLEDB_ENUMERATOR = {0xc8b522d0L,0x5cf3,0x11ce,{0xad,0xe5,0x00,0xaa,0x00,0x44,0x77,0x3d}};
EXTERN_C const OLEDBDECLSPEC GUID CLSID_EXTENDEDERRORINFO = {0xc8b522cfL,0x5cf3,0x11ce,{0xad,0xe5,0x00,0xaa,0x00,0x44,0x77,0x3d}};
EXTERN_C const OLEDBDECLSPEC GUID CLSID_MSDAVTM = {0x0c733a8eL,0x2a1c,0x11ce,{0xad,0xe5,0x00,0xaa,0x00,0x44,0x77,0x3d}};
EXTERN_C const OLEDBDECLSPEC GUID CLSID_OLEDB_CONVERSIONLIBRARY= {0xc8b522d1L,0x5cf3,0x11ce,{0xad,0xe5,0x00,0xaa,0x00,0x44,0x77,0x3d}};
EXTERN_C const OLEDBDECLSPEC GUID CLSID_OLEDB_ROWPOSITIONLIBRARY= {0x2048eee6l,0x7fa2,0x11d0,{0x9e,0x6a,0x00,0xa0,0xc9,0x13,0x8c,0x29}};
EXTERN_C const OLEDBDECLSPEC GUID OLEDB_SVC_DSLPropertyPages = {0x51740c02,0x7e8e,0x11d2,{0xa0,0x2d,0x00,0xc0,0x4f,0xa3,0x73,0x48}};

#else
EXTERN_C const GUID CLSID_OLEDB_ENUMERATOR;
EXTERN_C const GUID CLSID_EXTENDEDERRORINFO;
EXTERN_C const GUID CLSID_MSDAVTM;
EXTERN_C const GUID CLSID_OLEDB_CONVERSIONLIBRARY;
EXTERN_C const GUID CLSID_OLEDB_ROWPOSITIONLIBRARY;
EXTERN_C const GUID OLEDB_SVC_DSLPropertyPages;
#endif

#endif // MSDAGUID
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\msdaora.h ===
//-----------------------------------------------------------------------------
// File:            msdaora.h
//
// Copyright:       Copyright (c) Microsoft Corporation
//
// Contents:        Internal GUIDS
//
// Comments:        
//
//-----------------------------------------------------------------------------

#ifndef __MSDAORAGUIDS_DEFINED__
#define __MSDAORAGUIDS_DEFINED__

#undef MSDAORADECLSPEC
#if _MSC_VER >= 1100 && (!defined(SHx) || (defined(SHx) && _MSC_VER >= 1200))
#define MSDAORADECLSPEC __declspec(selectany)
#else
#define MSDAORADECLSPEC 
#endif //_MSC_VER

EXTERN_C const MSDAORADECLSPEC CLSID CLSID_MSDAORA        = {0xE8CC4CBE,0xFDFF,0x11D0,{0xB8,0x65,0x00,0xA0,0xC9,0x08,0x1C,0x1D}};
EXTERN_C const MSDAORADECLSPEC CLSID CLSID_MSDAORA_ERROR  = {0xE8CC4CBF,0xFDFF,0x11D0,{0xB8,0x65,0x00,0xA0,0xC9,0x08,0x1C,0x1D}};

EXTERN_C const MSDAORADECLSPEC CLSID CLSID_MSDAORA8       = {0x7f06a373,0xdd6a,0x43db,{0xb4,0xe0,0x1f,0xc1,0x21,0xe5,0xe6,0x2b}};
EXTERN_C const MSDAORADECLSPEC CLSID CLSID_MSDAORA8_ERROR = {0x7f06a374,0xdd6a,0x43db,{0xb4,0xe0,0x1f,0xc1,0x21,0xe5,0xe6,0x2b}};

class DECLSPEC_UUID("E8CC4CBE-FDFF-11D0-B865-00A0C9081C1D")
MSDAORA;

class DECLSPEC_UUID("E8CC4CBF-FDFF-11D0-B865-00A0C9081C1D")
MSDAORA_ERROR;

class DECLSPEC_UUID("7F06A373-DD6A-43db-B4E0-1FC121E5E62B")
MSDAORA8;

class DECLSPEC_UUID("7F06A374-DD6A-43db-B4E0-1FC121E5E62B")
MSDAORA8_ERROR;

//----------------------------------------------------------------------------
// MSDAORA specific properties
//

extern const MSDAORADECLSPEC GUID DBPROPSET_MSDAORA_ROWSET  = {0xE8CC4CBD,0xFDFF,0x11D0,{0xB8,0x65,0x00,0xA0,0xC9,0x08,0x1C,0x1D}};

extern const MSDAORADECLSPEC GUID DBPROPSET_MSDAORA8_ROWSET = {0x7f06a375,0xdd6a,0x43db,{0xb4,0xe0,0x1f,0xc1,0x21,0xe5,0xe6,0x2b}};

// PropIds under DBPROPSET_MSDAORA_ROWSET 
#define DBPROP_MSDAORA_DETERMINEKEYCOLUMNS  1
#define DBPROP_MSDAORA8_DETERMINEKEYCOLUMNS 2

#endif // __MSDAORAGUIDS_DEFINED__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\MSDaIpp.h ===
#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 5.02.0221 */
/* at Fri Apr 19 18:30:12 2002
 */
/* Compiler settings for msdaipp.idl:
    Oicf (OptLev=i2), W1, Zp8, env=Win32 (32b run), ms_ext, c_ext
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 440
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __msdaipp_h__
#define __msdaipp_h__

/* Forward Declarations */ 

#ifndef __ISynchronizeRow_FWD_DEFINED__
#define __ISynchronizeRow_FWD_DEFINED__
typedef interface ISynchronizeRow ISynchronizeRow;
#endif 	/* __ISynchronizeRow_FWD_DEFINED__ */


#ifndef __MSDAIPP_DSO_FWD_DEFINED__
#define __MSDAIPP_DSO_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSDAIPP_DSO MSDAIPP_DSO;
#else
typedef struct MSDAIPP_DSO MSDAIPP_DSO;
#endif /* __cplusplus */

#endif 	/* __MSDAIPP_DSO_FWD_DEFINED__ */


#ifndef __MSDAIPP_BINDER_FWD_DEFINED__
#define __MSDAIPP_BINDER_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSDAIPP_BINDER MSDAIPP_BINDER;
#else
typedef struct MSDAIPP_BINDER MSDAIPP_BINDER;
#endif /* __cplusplus */

#endif 	/* __MSDAIPP_BINDER_FWD_DEFINED__ */


/* header files for imported files */
#include "oledb.h"

#ifdef __cplusplus
extern "C"{
#endif 

void __RPC_FAR * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void __RPC_FAR * ); 

/* interface __MIDL_itf_msdaipp_0000 */
/* [local] */ 

                                                                                                                     
// Papyrus resource rowset                                                                                           
#define MSDAIPP_MAX_URL_LENGTH 4096																					
                                                                                                                     
#define RESOURCE_PARSENAME                      L"RESOURCE_PARSENAME"                                              
#define RESOURCE_PARSENAME_DBTYPE               DBTYPE_WSTR                                                          
#define RESOURCE_PARSENAME_MAXLENGTH            MSDAIPP_MAX_URL_LENGTH                                              	
                                                                                                                     
#define RESOURCE_PARENTNAME                     L"RESOURCE_PARENTNAME"                                             
#define RESOURCE_PARENTNAME_DBTYPE              DBTYPE_WSTR                                                          
#define RESOURCE_PARENTNAME_MAXLENGTH           MSDAIPP_MAX_URL_LENGTH                                               
                                                                                                                     
#define RESOURCE_ABSOLUTEPARSENAME              L"RESOURCE_ABSOLUTEPARSENAME"                                      
#define RESOURCE_ABSOLUTEPARSENAME_DBTYPE       DBTYPE_WSTR                                                          
#define RESOURCE_ABSOLUTEPARSENAME_MAXLENGTH    MSDAIPP_MAX_URL_LENGTH                                               
                                                                                                                     
#define RESOURCE_ISHIDDEN                       L"RESOURCE_ISHIDDEN"                                               
#define RESOURCE_ISHIDDEN_DBTYPE                DBTYPE_BOOL                                                          
#define RESOURCE_ISHIDDEN_MAXLENGTH             sizeof(VARIANT_BOOL)                                                 
                                                                                                                     
#define RESOURCE_ISREADONLY                     L"RESOURCE_ISREADONLY"                                             
#define RESOURCE_ISREADONLY_DBTYPE              DBTYPE_BOOL                                                          
#define RESOURCE_ISREADONLY_MAXLENGTH           sizeof(VARIANT_BOOL)                                                 
                                                                                                                     
#define RESOURCE_CONTENTTYPE                    L"RESOURCE_CONTENTTYPE"                                            
#define RESOURCE_CONTENTTYPE_DBTYPE             DBTYPE_WSTR                                                          
#define RESOURCE_CONTENTTYPE_MAXLENGTH          MSDAIPP_MAX_URL_LENGTH                                               
                                                                                                                     
#define RESOURCE_CONTENTCLASS                   L"RESOURCE_CONTENTCLASS"                                           
#define RESOURCE_CONTENTCLASS_DBTYPE            DBTYPE_WSTR                                                          
#define RESOURCE_CONTENTCLASS_MAXLENGTH         MSDAIPP_MAX_URL_LENGTH                                               
                                                                                                                     
#define RESOURCE_CONTENTLANGUAGE                L"RESOURCE_CONTENTLANGUAGE"                                        
#define RESOURCE_CONTENTLANGUAGE_DBTYPE         DBTYPE_WSTR                                                          
#define RESOURCE_CONTENTLANGUAGE_MAXLENGTH      MSDAIPP_MAX_URL_LENGTH                                               
                                                                                                                     
#define RESOURCE_CREATIONTIME                   L"RESOURCE_CREATIONTIME"                                           
#define RESOURCE_CREATIONTIME_DBTYPE            DBTYPE_FILETIME                                                      
#define RESOURCE_CREATIONTIME_MAXLENGTH         sizeof(FILETIME)                                                     
                                                                                                                     
#define RESOURCE_LASTACCESSTIME                 L"RESOURCE_LASTACCESSTIME"                                         
#define RESOURCE_LASTACCESSTIME_DBTYPE          DBTYPE_FILETIME                                                      
#define RESOURCE_LASTACCESSTIME_MAXLENGTH       sizeof(FILETIME)                                                     
                                                                                                                     
#define RESOURCE_LASTWRITETIME                  L"RESOURCE_LASTWRITETIME"                                          
#define RESOURCE_LASTWRITETIME_DBTYPE           DBTYPE_FILETIME                                                      
#define RESOURCE_LASTWRITETIME_MAXLENGTH        sizeof(FILETIME)                                                     
                                                                                                                     
#define RESOURCE_STREAMSIZE                     L"RESOURCE_STREAMSIZE"                                             
#define RESOURCE_STREAMSIZE_DBTYPE              DBTYPE_UI8                                                           
#define RESOURCE_STREAMSIZE_MAXLENGTH           sizeof(DWORDLONG)                                                    
                                                                                                                     
#define RESOURCE_ISCOLLECTION                   L"RESOURCE_ISCOLLECTION"                                           
#define RESOURCE_ISCOLLECTION_DBTYPE            DBTYPE_BOOL                                                          
#define RESOURCE_ISCOLLECTION_MAXLENGTH         sizeof(VARIANT_BOOL)                                                 
                                                                                                                     
#define RESOURCE_ISSTRUCTUREDDOCUMENT           L"RESOURCE_ISSTRUCTUREDDOCUMENT"                                   
#define RESOURCE_ISSTRUCTUREDDOCUMENT_DBTYPE    DBTYPE_BOOL                                                          
#define RESOURCE_ISSTRUCTUREDDOCUMENT_MAXLENGTH sizeof(VARIANT_BOOL)                                                 
                                                                                                                     
#define RESOURCE_DEFAULTDOCUMENT                L"DEFAULT_DOCUMENT"                                                
#define RESOURCE_DEFAULTDOCUMENT_DBTYPE         DBTYPE_WSTR                                                          
#define RESOURCE_DEFAULTDOCUMENT_MAXLENGTH      MSDAIPP_MAX_URL_LENGTH                                               
                                                                                                                     
#define RESOURCE_DISPLAYNAME                    L"RESOURCE_DISPLAYNAME"                                            
#define RESOURCE_DISPLAYNAME_DBTYPE             DBTYPE_WSTR                                                          
#define RESOURCE_DISPLAYNAME_MAXLENGTH          MSDAIPP_MAX_URL_LENGTH                                               
                                                                                                                     
#define RESOURCE_ISROOT                         L"RESOURCE_ISROOT"                                                 
#define RESOURCE_ISROOT_DBTYPE                  DBTYPE_BOOL                                                          
#define RESOURCE_ISROOT_MAXLENGTH               sizeof(VARIANT_BOOL)                                                 
// MSDAIPP-specific properties
const GUID DBPROPSET_MSDAIPP_INIT = {0x8f1033e3,0xb2cd,0x11d1,{0x9c,0x74,0x0,0x0,0xf8,0x75,0xac,0x61}};
#define DBPROP_INIT_IGNORECACHEDDATA     2L      // VT_BOOL
#define DBPROP_INIT_CACHEAGGRESSIVELY    3L      // VT_BOOL
#define DBPROP_INIT_TREATASOFFLINE       4L      // VT_BOOL
#define DBPROP_INIT_MARKFOROFFLINE       5L      // VT_I4
#define DBPROP_INIT_PROTOCOLPROVIDER     6L      // VT_CLSID
			/* size is 2 */

enum MFO
    {	MFO_DONTCHANGE	= 0,
	MFO_MARK	= 1,
	MFO_UNMARK	= 2
    };

// Standard properties specific to MSDAIPP

#define RESOURCE_ISMARKEDFOROFFLINE             L"RESOURCE_ISMARKEDFOROFFLINE"                                     
#define RESOURCE_ISMARKEDFOROFFLINE_DBTYPE      DBTYPE_BOOL                                                          
#define RESOURCE_ISMARKEDFOROFFLINE_MAXLENGTH   sizeof(VARIANT_BOOL)                                                 
#define DBGUID_RESOURCE_ISMARKEDFOROFFLINE      {0x3c5d1c61,0x111e,0x11d2,{0x9c,0xda,0x0,0x0,0xf8,0x75,0xac,0x61}}   

#ifdef DBINITCONSTANTS
extern const DBID DBROWCOL_ISMARKEDFOROFFLINE = { DBGUID_RESOURCE_ISMARKEDFOROFFLINE, DBKIND_GUID, 0};
#else
extern const DBID DBROWCOL_ISMARKEDFOROFFLINE; 
#endif


// MSDAIPP alternate names for Resource Rowset columns
//   Form DBID as { 0, DBKIND_NAME, <altname> }

#define RESOURCE_PARSENAME_ALTNAME              L"DAV:name"                   
#define RESOURCE_PARENTNAME_ALTNAME             L"DAV:parentname"             
#define RESOURCE_ABSOLUTEPARSENAME_ALTNAME      L"DAV:href"                   
#define RESOURCE_ISHIDDEN_ALTNAME               L"DAV:ishidden"               
#define RESOURCE_ISREADONLY_ALTNAME             L"DAV:isreadonly"             
#define RESOURCE_CONTENTTYPE_ALTNAME            L"DAV:getcontenttype"         
#define RESOURCE_CONTENTCLASS_ALTNAME           L"DAV:contentclass"           
#define RESOURCE_CONTENTLANGUAGE_ALTNAME        L"DAV:getcontentlanguage"     
#define RESOURCE_CREATIONTIME_ALTNAME           L"DAV:creationdate"           
#define RESOURCE_LASTACCESSTIME_ALTNAME         L"DAV:lastaccessed"           
#define RESOURCE_LASTWRITETIME_ALTNAME          L"DAV:getlastmodified"        
#define RESOURCE_STREAMSIZE_ALTNAME             L"DAV:getcontentlength"       
#define RESOURCE_ISCOLLECTION_ALTNAME           L"DAV:iscollection"           
#define RESOURCE_ISSTRUCTUREDDOCUMENT_ALTNAME   L"DAV:isstructureddocument"   
#define RESOURCE_DEFAULTDOCUMENT_ALTNAME        L"DAV:defaultdocument"        
#define RESOURCE_DISPLAYNAME_ALTNAME            L"DAV:displayname"            
#define RESOURCE_ISROOT_ALTNAME                 L"DAV:isroot"                 
#define RESOURCE_ISMARKEDFOROFFLINE_ALTNAME     L"MSDAIPP:ismarkedforoffline" 

const GUID GUID_IPPCOMMAND = { 0xd395c253, 0x6511, 0x11d1, { 0x9c, 0x9, 0x0, 0x0, 0xf8, 0x75, 0xac, 0x61 } };
// String representation of GUIDs for MSDAIPP protocol providers
const GUID GUID_DAV_PROVIDER  = {0x9FECD570, 0xB9D4, 0x11d1, 0x9C, 0x78, 0x00, 0x00, 0xF8, 0x75, 0xAC, 0x61};
const GUID GUID_WEC_PROVIDER  = {0x9FECD571, 0xB9D4, 0x11d1, 0x9C, 0x78, 0x00, 0x00, 0xF8, 0x75, 0xAC, 0x61};
const GUID GUID_HTTP_PROVIDER = {0x9FECD572, 0xB9D4, 0x11d1, 0x9C, 0x78, 0x00, 0x00, 0xF8, 0x75, 0xAC, 0x61};


extern RPC_IF_HANDLE __MIDL_itf_msdaipp_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_msdaipp_0000_v0_0_s_ifspec;

#ifndef __ISynchronizeRow_INTERFACE_DEFINED__
#define __ISynchronizeRow_INTERFACE_DEFINED__

/* interface ISynchronizeRow */
/* [unique][uuid][object][local] */ 

			/* size is 4 */
typedef DWORD MSDAIPP_SYNC_FLAGS;

			/* size is 2 */

enum MSDAIPP_SYNCFLAGSENUM
    {	MSDAIPP_SYNC_NONE	= 0,
	MSDAIPP_SYNC_ABANDON_SERVER	= 0x1,
	MSDAIPP_SYNC_ABANDON_LOCAL	= 0x2,
	MSDAIPP_SYNC_MERGE	= 0x4
    };

EXTERN_C const IID IID_ISynchronizeRow;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("70546361-1177-11d2-9CDB-0000F875AC61")
    ISynchronizeRow : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Synchronize( 
            /* [in] */ MSDAIPP_SYNC_FLAGS dwFlags) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISynchronizeRowVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *QueryInterface )( 
            ISynchronizeRow __RPC_FAR * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void __RPC_FAR *__RPC_FAR *ppvObject);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *AddRef )( 
            ISynchronizeRow __RPC_FAR * This);
        
        ULONG ( STDMETHODCALLTYPE __RPC_FAR *Release )( 
            ISynchronizeRow __RPC_FAR * This);
        
        HRESULT ( STDMETHODCALLTYPE __RPC_FAR *Synchronize )( 
            ISynchronizeRow __RPC_FAR * This,
            /* [in] */ MSDAIPP_SYNC_FLAGS dwFlags);
        
        END_INTERFACE
    } ISynchronizeRowVtbl;

    interface ISynchronizeRow
    {
        CONST_VTBL struct ISynchronizeRowVtbl __RPC_FAR *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISynchronizeRow_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define ISynchronizeRow_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define ISynchronizeRow_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define ISynchronizeRow_Synchronize(This,dwFlags)	\
    (This)->lpVtbl -> Synchronize(This,dwFlags)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE ISynchronizeRow_Synchronize_Proxy( 
    ISynchronizeRow __RPC_FAR * This,
    /* [in] */ MSDAIPP_SYNC_FLAGS dwFlags);


void __RPC_STUB ISynchronizeRow_Synchronize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __ISynchronizeRow_INTERFACE_DEFINED__ */



#ifndef __MSDAIPPLib_LIBRARY_DEFINED__
#define __MSDAIPPLib_LIBRARY_DEFINED__

/* library MSDAIPPLib */
/* [helpstring][version][uuid] */ 


EXTERN_C const IID LIBID_MSDAIPPLib;

EXTERN_C const CLSID CLSID_MSDAIPP_DSO;

#ifdef __cplusplus

class DECLSPEC_UUID("AF320921-9381-11d1-9C3C-0000F875AC61")
MSDAIPP_DSO;
#endif

EXTERN_C const CLSID CLSID_MSDAIPP_BINDER;

#ifdef __cplusplus

class DECLSPEC_UUID("E1D2BF40-A96B-11d1-9C6B-0000F875AC61")
MSDAIPP_BINDER;
#endif
#endif /* __MSDAIPPLib_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\MSDaIppEr.h ===
//
//  Values are 32 bit values layed out as follows:
//
//   3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1
//   1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
//  +---+-+-+-----------------------+-------------------------------+
//  |Sev|C|R|     Facility          |               Code            |
//  +---+-+-+-----------------------+-------------------------------+
//
//  where
//
//      Sev - is the severity code
//
//          00 - Success
//          01 - Informational
//          10 - Warning
//          11 - Error
//
//      C - is the Customer code flag
//
//      R - is a reserved bit
//
//      Facility - is the facility code
//
//      Code - is the facility's status code
//
//
// Define the facility codes
//


//
// Define the severity codes
//


//
// MessageId: IPP_E_FIRST
//
// MessageText:
//
//  Internet Publishing Provider first error message
//
#define IPP_E_FIRST                      0x40048000L

//
// MessageId: IPP_E_SYNCCONFLICT
//
// MessageText:
//
//  The server resource has changed since the local copy on your computer was obtained.
//
#define IPP_E_SYNCCONFLICT               0xC0048003L

//
// MessageId: IPP_E_FILENOTDIRTY
//
// MessageText:
//
//  The copy of the resource on your computer has not been modified since it was downloaded from the server.
//
#define IPP_E_FILENOTDIRTY               0xC0048004L

//
// MessageId: IPP_E_MARKFOROFFLINE_FAILED
//
// MessageText:
//
//  The attempt to mark or unmark the resource for offline use failed.
//
#define IPP_E_MARKFOROFFLINE_FAILED      0xC0048006L

//
// MessageId: IPP_E_OFFLINE
//
// MessageText:
//
//  The requested operation could not be completed because the resource is offline.
//
#define IPP_E_OFFLINE                    0xC0048007L

//
// MessageId: IPP_E_UNSYNCHRONIZED
//
// MessageText:
//
//  The requested operation could not be completed because the resource has been modified
//  on your computer but has not been synchronized with the server.
//
#define IPP_E_UNSYNCHRONIZED             0xC0048008L

//
// MessageId: IPP_E_SERVERTYPE_NOT_SUPPORTED
//
// MessageText:
//
//  This server type is not currently supported.
//
#define IPP_E_SERVERTYPE_NOT_SUPPORTED   0xC004800AL

//
// MessageId: IPP_E_MDAC_VERSION
//
// MessageText:
//
//  The Microsoft Data Access Components (MDAC) are either not present on this computer or are an old version. (MSDAIPP 1.0 requires MDAC 2.1)
//
#define IPP_E_MDAC_VERSION               0xC004800DL

//
// MessageId: IPP_E_COLLECTIONEXISTS
//
// MessageText:
//
//  The move or copy operation failed because a collection with that name already exists.
//
#define IPP_E_COLLECTIONEXISTS           0xC004800EL

//
// MessageId: IPP_E_CANNOTCREATEOFFLINE
//
// MessageText:
//
//  The requested resource could not be created because parent cache entry does not exist.
//
#define IPP_E_CANNOTCREATEOFFLINE        0xC004800FL

//
// MessageId: IPP_E_STATUS_CANNOTCOMPLETE
//
// MessageText:
//
//  This is an internal MSDAIPP.DLL error.
//
#define IPP_E_STATUS_CANNOTCOMPLETE      0xC0048101L

//
// MessageId: IPP_E_RESELECTPROVIDER
//
// MessageText:
//
//  This is an internal MSDAIPP.DLL error.
//
#define IPP_E_RESELECTPROVIDER           0xC0048102L

//
// MessageId: IPP_E_CLIENTMUSTEMULATE
//
// MessageText:
//
//  This is an internal MSDAIPP.DLL error.
//
#define IPP_E_CLIENTMUSTEMULATE          0xC0048103L

//
// MessageId: IPP_S_WEAKRESERVE
//
// MessageText:
//
//  This is an internal MSDAIPP.DLL error.
//
#define IPP_S_WEAKRESERVE                0x00048104L

//
// MessageId: IPP_S_TRUNCATED
//
// MessageText:
//
//  This is an internal MSDAIPP.DLL error.
//
#define IPP_S_TRUNCATED                  0x00048105L

//
// MessageId: IPP_E_LAST
//
// MessageText:
//
//  Internet Publishing Provider last error message
//
#define IPP_E_LAST                       0x40048106L
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\msdaosp.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0555 */
/* Compiler settings for msdaosp.idl:
    Oicf, W1, Zp8, env=Win32 (32b run), target_arch=X86 7.00.0555 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__


#ifndef __msdaosp_h__
#define __msdaosp_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __DataSourceObject_FWD_DEFINED__
#define __DataSourceObject_FWD_DEFINED__
typedef interface DataSourceObject DataSourceObject;
#endif 	/* __DataSourceObject_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_msdaosp_0000_0000 */
/* [local] */ 

#include "msdatsrc.h"
#include "simpdata.h"
#ifdef DBINITCONSTANTS
extern const GUID CLSID_MSDAOSP		= {0xdfc8bdc0,0xe378,0x11d0,{0x9b,0x30,0x0,0x80,0xc7,0xe9,0xfe,0x95}};
extern const GUID DBPROPSET_PWROWSET = {0xe6e478db,0xf226,0x11d0,{0x94,0xee,0x0,0xc0,0x4f,0xb6,0x6a,0x50}};
#else  // !DBINITCONSTANTS
extern const GUID CLSID_MSDAOSP;
extern const GUID DBPROPSET_PWROWSET;
#endif // DBINITCONSTANTS
#define PWPROP_OSPVALUE			2


extern RPC_IF_HANDLE __MIDL_itf_msdaosp_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_msdaosp_0000_0000_v0_0_s_ifspec;


#ifndef __MSDAOSPT_LIBRARY_DEFINED__
#define __MSDAOSPT_LIBRARY_DEFINED__

/* library MSDAOSPT */
/* [helpstring][version][uuid] */ 


EXTERN_C const IID LIBID_MSDAOSPT;

#ifndef __DataSourceObject_DISPINTERFACE_DEFINED__
#define __DataSourceObject_DISPINTERFACE_DEFINED__

/* dispinterface DataSourceObject */
/* [uuid] */ 


EXTERN_C const IID DIID_DataSourceObject;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("0ae9a4e4-18d4-11d1-b3b3-00aa00c1a924")
    DataSourceObject : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct DataSourceObjectVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in DataSourceObject * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in DataSourceObject * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in DataSourceObject * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in DataSourceObject * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in DataSourceObject * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in DataSourceObject * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            DataSourceObject * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } DataSourceObjectVtbl;

    interface DataSourceObject
    {
        CONST_VTBL struct DataSourceObjectVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DataSourceObject_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define DataSourceObject_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define DataSourceObject_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define DataSourceObject_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define DataSourceObject_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define DataSourceObject_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define DataSourceObject_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* __DataSourceObject_DISPINTERFACE_DEFINED__ */

#endif /* __MSDAOSPT_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\msdasc.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0555 */
/* Compiler settings for msdasc.idl:
    Oicf, W1, Zp8, env=Win32 (32b run), target_arch=X86 7.00.0555 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __msdasc_h__
#define __msdasc_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IService_FWD_DEFINED__
#define __IService_FWD_DEFINED__
typedef interface IService IService;
#endif 	/* __IService_FWD_DEFINED__ */


#ifndef __IDBPromptInitialize_FWD_DEFINED__
#define __IDBPromptInitialize_FWD_DEFINED__
typedef interface IDBPromptInitialize IDBPromptInitialize;
#endif 	/* __IDBPromptInitialize_FWD_DEFINED__ */


#ifndef __IDataInitialize_FWD_DEFINED__
#define __IDataInitialize_FWD_DEFINED__
typedef interface IDataInitialize IDataInitialize;
#endif 	/* __IDataInitialize_FWD_DEFINED__ */


#ifndef __IDataSourceLocator_FWD_DEFINED__
#define __IDataSourceLocator_FWD_DEFINED__
typedef interface IDataSourceLocator IDataSourceLocator;
#endif 	/* __IDataSourceLocator_FWD_DEFINED__ */


#ifndef __DataLinks_FWD_DEFINED__
#define __DataLinks_FWD_DEFINED__

#ifdef __cplusplus
typedef class DataLinks DataLinks;
#else
typedef struct DataLinks DataLinks;
#endif /* __cplusplus */

#endif 	/* __DataLinks_FWD_DEFINED__ */


#ifndef __MSDAINITIALIZE_FWD_DEFINED__
#define __MSDAINITIALIZE_FWD_DEFINED__

#ifdef __cplusplus
typedef class MSDAINITIALIZE MSDAINITIALIZE;
#else
typedef struct MSDAINITIALIZE MSDAINITIALIZE;
#endif /* __cplusplus */

#endif 	/* __MSDAINITIALIZE_FWD_DEFINED__ */


#ifndef __PDPO_FWD_DEFINED__
#define __PDPO_FWD_DEFINED__

#ifdef __cplusplus
typedef class PDPO PDPO;
#else
typedef struct PDPO PDPO;
#endif /* __cplusplus */

#endif 	/* __PDPO_FWD_DEFINED__ */


#ifndef __RootBinder_FWD_DEFINED__
#define __RootBinder_FWD_DEFINED__

#ifdef __cplusplus
typedef class RootBinder RootBinder;
#else
typedef struct RootBinder RootBinder;
#endif /* __cplusplus */

#endif 	/* __RootBinder_FWD_DEFINED__ */


/* header files for imported files */
#include "oaidl.h"
#include "ocidl.h"
#include "oledb.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_msdasc_0000_0000 */
/* [local] */ 

//-----------------------------------------------------------------------------
// File:				.C or .H file generated by msdasc.idl 
//
// Copyright:		Copyright (c) 1998-1999 Microsoft Corporation
//
// Contents: 		.C or .H file generated by msdasc.idl
//
// Comments: 		
//
//-----------------------------------------------------------------------------

#ifdef _WIN64

typedef LONGLONG			COMPATIBLE_LONG;

#else

typedef LONG COMPATIBLE_LONG;

#endif	// _WIN64
typedef 
enum tagEBindInfoOptions
    {	BIO_BINDER	= 0x1
    } 	EBindInfoOptions;

#define STGM_COLLECTION		0x00002000L
#define STGM_OUTPUT			0x00008000L
#define STGM_OPEN			0x80000000L
#define STGM_RECURSIVE		0x01000000L
#define STGM_STRICTOPEN		0x40000000L


extern RPC_IF_HANDLE __MIDL_itf_msdasc_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_msdasc_0000_0000_v0_0_s_ifspec;

#ifndef __IService_INTERFACE_DEFINED__
#define __IService_INTERFACE_DEFINED__

/* interface IService */
/* [object][unique][helpstring][uuid] */ 


EXTERN_C const IID IID_IService;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("06210E88-01F5-11D1-B512-0080C781C384")
    IService : public IUnknown
    {
    public:
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE InvokeService( 
            /* [annotation][in] */ 
            __in  IUnknown *pUnkInner) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IServiceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IService * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IService * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IService * This);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *InvokeService )( 
            IService * This,
            /* [annotation][in] */ 
            __in  IUnknown *pUnkInner);
        
        END_INTERFACE
    } IServiceVtbl;

    interface IService
    {
        CONST_VTBL struct IServiceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IService_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IService_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IService_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IService_InvokeService(This,pUnkInner)	\
    ( (This)->lpVtbl -> InvokeService(This,pUnkInner) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IService_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_msdasc_0000_0001 */
/* [local] */ 

typedef DWORD DBPROMPTOPTIONS;

typedef 
enum tagDBPROMPTOPTIONSENUM
    {	DBPROMPTOPTIONS_NONE	= 0,
	DBPROMPTOPTIONS_WIZARDSHEET	= 0x1,
	DBPROMPTOPTIONS_PROPERTYSHEET	= 0x2,
	DBPROMPTOPTIONS_BROWSEONLY	= 0x8,
	DBPROMPTOPTIONS_DISABLE_PROVIDER_SELECTION	= 0x10,
	DBPROMPTOPTIONS_DISABLESAVEPASSWORD	= 0x20
    } 	DBPROMPTOPTIONSENUM;



extern RPC_IF_HANDLE __MIDL_itf_msdasc_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_msdasc_0000_0001_v0_0_s_ifspec;

#ifndef __IDBPromptInitialize_INTERFACE_DEFINED__
#define __IDBPromptInitialize_INTERFACE_DEFINED__

/* interface IDBPromptInitialize */
/* [restricted][local][unique][helpstring][uuid][object] */ 


EXTERN_C const IID IID_IDBPromptInitialize;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2206CCB0-19C1-11D1-89E0-00C04FD7A829")
    IDBPromptInitialize : public IUnknown
    {
    public:
        virtual /* [local][helpstring] */ HRESULT STDMETHODCALLTYPE PromptDataSource( 
            /* [annotation][in] */ 
            __in_opt  IUnknown *pUnkOuter,
            /* [in] */ HWND hWndParent,
            /* [in] */ DBPROMPTOPTIONS dwPromptOptions,
            /* [in] */ ULONG cSourceTypeFilter,
            /* [annotation][size_is][in] */ 
            __in_ecount_opt(cSourceTypeFilter)  DBSOURCETYPE *rgSourceTypeFilter,
            /* [annotation][in] */ 
            __in_z_opt  LPCOLESTR pwszszzProviderFilter,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out][in] */ 
            __deref_inout  IUnknown **ppDataSource) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE PromptFileName( 
            /* [in] */ HWND hWndParent,
            /* [in] */ DBPROMPTOPTIONS dwPromptOptions,
            /* [in] */ LPCOLESTR pwszInitialDirectory,
            /* [in] */ LPCOLESTR pwszInitialFile,
            /* [annotation][out] */ 
            __deref_out  LPOLESTR *ppwszSelectedFile) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDBPromptInitializeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDBPromptInitialize * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDBPromptInitialize * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDBPromptInitialize * This);
        
        /* [local][helpstring] */ HRESULT ( STDMETHODCALLTYPE *PromptDataSource )( 
            IDBPromptInitialize * This,
            /* [annotation][in] */ 
            __in_opt  IUnknown *pUnkOuter,
            /* [in] */ HWND hWndParent,
            /* [in] */ DBPROMPTOPTIONS dwPromptOptions,
            /* [in] */ ULONG cSourceTypeFilter,
            /* [annotation][size_is][in] */ 
            __in_ecount_opt(cSourceTypeFilter)  DBSOURCETYPE *rgSourceTypeFilter,
            /* [annotation][in] */ 
            __in_z_opt  LPCOLESTR pwszszzProviderFilter,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out][in] */ 
            __deref_inout  IUnknown **ppDataSource);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *PromptFileName )( 
            IDBPromptInitialize * This,
            /* [in] */ HWND hWndParent,
            /* [in] */ DBPROMPTOPTIONS dwPromptOptions,
            /* [in] */ LPCOLESTR pwszInitialDirectory,
            /* [in] */ LPCOLESTR pwszInitialFile,
            /* [annotation][out] */ 
            __deref_out  LPOLESTR *ppwszSelectedFile);
        
        END_INTERFACE
    } IDBPromptInitializeVtbl;

    interface IDBPromptInitialize
    {
        CONST_VTBL struct IDBPromptInitializeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDBPromptInitialize_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDBPromptInitialize_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDBPromptInitialize_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDBPromptInitialize_PromptDataSource(This,pUnkOuter,hWndParent,dwPromptOptions,cSourceTypeFilter,rgSourceTypeFilter,pwszszzProviderFilter,riid,ppDataSource)	\
    ( (This)->lpVtbl -> PromptDataSource(This,pUnkOuter,hWndParent,dwPromptOptions,cSourceTypeFilter,rgSourceTypeFilter,pwszszzProviderFilter,riid,ppDataSource) ) 

#define IDBPromptInitialize_PromptFileName(This,hWndParent,dwPromptOptions,pwszInitialDirectory,pwszInitialFile,ppwszSelectedFile)	\
    ( (This)->lpVtbl -> PromptFileName(This,hWndParent,dwPromptOptions,pwszInitialDirectory,pwszInitialFile,ppwszSelectedFile) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDBPromptInitialize_INTERFACE_DEFINED__ */


#ifndef __IDataInitialize_INTERFACE_DEFINED__
#define __IDataInitialize_INTERFACE_DEFINED__

/* interface IDataInitialize */
/* [unique][helpstring][uuid][object] */ 




EXTERN_C const IID IID_IDataInitialize;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2206CCB1-19C1-11D1-89E0-00C04FD7A829")
    IDataInitialize : public IUnknown
    {
    public:
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetDataSource( 
            /* [in] */ __RPC__in_opt IUnknown *pUnkOuter,
            /* [in] */ DWORD dwClsCtx,
            /* [unique][in] */ __RPC__in_opt LPCOLESTR pwszInitializationString,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out][in] */ __RPC__deref_inout_opt IUnknown **ppDataSource) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE GetInitializationString( 
            /* [in] */ __RPC__in_opt IUnknown *pDataSource,
            /* [in] */ boolean fIncludePassword,
            /* [out] */ __RPC__deref_out_opt LPOLESTR *ppwszInitString) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE CreateDBInstance( 
            /* [in] */ __RPC__in REFCLSID clsidProvider,
            /* [in] */ __RPC__in_opt IUnknown *pUnkOuter,
            /* [in] */ DWORD dwClsCtx,
            /* [unique][in] */ __RPC__in_opt LPOLESTR pwszReserved,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ __RPC__deref_out_opt IUnknown **ppDataSource) = 0;
        
        virtual /* [local][helpstring] */ HRESULT STDMETHODCALLTYPE CreateDBInstanceEx( 
            /* [in] */ REFCLSID clsidProvider,
            /* [annotation][in] */ 
            __in_opt  IUnknown *pUnkOuter,
            /* [in] */ DWORD dwClsCtx,
            /* [annotation][unique][in] */ 
            __in_z_opt  LPOLESTR pwszReserved,
            /* [annotation][unique][in] */ 
            __in  COSERVERINFO *pServerInfo,
            /* [in] */ ULONG cmq,
            /* [annotation][size_is][out][in] */ 
            __out_ecount(cmq)  MULTI_QI *rgmqResults) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE LoadStringFromStorage( 
            /* [unique][in] */ __RPC__in_opt LPCOLESTR pwszFileName,
            /* [out] */ __RPC__deref_out_opt LPOLESTR *ppwszInitializationString) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE WriteStringToStorage( 
            /* [unique][in] */ __RPC__in_opt LPCOLESTR pwszFileName,
            /* [unique][in] */ __RPC__in_opt LPCOLESTR pwszInitializationString,
            /* [in] */ DWORD dwCreationDisposition) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDataInitializeVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IDataInitialize * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IDataInitialize * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IDataInitialize * This);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetDataSource )( 
            __RPC__in IDataInitialize * This,
            /* [in] */ __RPC__in_opt IUnknown *pUnkOuter,
            /* [in] */ DWORD dwClsCtx,
            /* [unique][in] */ __RPC__in_opt LPCOLESTR pwszInitializationString,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out][in] */ __RPC__deref_inout_opt IUnknown **ppDataSource);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *GetInitializationString )( 
            __RPC__in IDataInitialize * This,
            /* [in] */ __RPC__in_opt IUnknown *pDataSource,
            /* [in] */ boolean fIncludePassword,
            /* [out] */ __RPC__deref_out_opt LPOLESTR *ppwszInitString);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *CreateDBInstance )( 
            __RPC__in IDataInitialize * This,
            /* [in] */ __RPC__in REFCLSID clsidProvider,
            /* [in] */ __RPC__in_opt IUnknown *pUnkOuter,
            /* [in] */ DWORD dwClsCtx,
            /* [unique][in] */ __RPC__in_opt LPOLESTR pwszReserved,
            /* [in] */ __RPC__in REFIID riid,
            /* [iid_is][out] */ __RPC__deref_out_opt IUnknown **ppDataSource);
        
        /* [local][helpstring] */ HRESULT ( STDMETHODCALLTYPE *CreateDBInstanceEx )( 
            IDataInitialize * This,
            /* [in] */ REFCLSID clsidProvider,
            /* [annotation][in] */ 
            __in_opt  IUnknown *pUnkOuter,
            /* [in] */ DWORD dwClsCtx,
            /* [annotation][unique][in] */ 
            __in_z_opt  LPOLESTR pwszReserved,
            /* [annotation][unique][in] */ 
            __in  COSERVERINFO *pServerInfo,
            /* [in] */ ULONG cmq,
            /* [annotation][size_is][out][in] */ 
            __out_ecount(cmq)  MULTI_QI *rgmqResults);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *LoadStringFromStorage )( 
            __RPC__in IDataInitialize * This,
            /* [unique][in] */ __RPC__in_opt LPCOLESTR pwszFileName,
            /* [out] */ __RPC__deref_out_opt LPOLESTR *ppwszInitializationString);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *WriteStringToStorage )( 
            __RPC__in IDataInitialize * This,
            /* [unique][in] */ __RPC__in_opt LPCOLESTR pwszFileName,
            /* [unique][in] */ __RPC__in_opt LPCOLESTR pwszInitializationString,
            /* [in] */ DWORD dwCreationDisposition);
        
        END_INTERFACE
    } IDataInitializeVtbl;

    interface IDataInitialize
    {
        CONST_VTBL struct IDataInitializeVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDataInitialize_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDataInitialize_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDataInitialize_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDataInitialize_GetDataSource(This,pUnkOuter,dwClsCtx,pwszInitializationString,riid,ppDataSource)	\
    ( (This)->lpVtbl -> GetDataSource(This,pUnkOuter,dwClsCtx,pwszInitializationString,riid,ppDataSource) ) 

#define IDataInitialize_GetInitializationString(This,pDataSource,fIncludePassword,ppwszInitString)	\
    ( (This)->lpVtbl -> GetInitializationString(This,pDataSource,fIncludePassword,ppwszInitString) ) 

#define IDataInitialize_CreateDBInstance(This,clsidProvider,pUnkOuter,dwClsCtx,pwszReserved,riid,ppDataSource)	\
    ( (This)->lpVtbl -> CreateDBInstance(This,clsidProvider,pUnkOuter,dwClsCtx,pwszReserved,riid,ppDataSource) ) 

#define IDataInitialize_CreateDBInstanceEx(This,clsidProvider,pUnkOuter,dwClsCtx,pwszReserved,pServerInfo,cmq,rgmqResults)	\
    ( (This)->lpVtbl -> CreateDBInstanceEx(This,clsidProvider,pUnkOuter,dwClsCtx,pwszReserved,pServerInfo,cmq,rgmqResults) ) 

#define IDataInitialize_LoadStringFromStorage(This,pwszFileName,ppwszInitializationString)	\
    ( (This)->lpVtbl -> LoadStringFromStorage(This,pwszFileName,ppwszInitializationString) ) 

#define IDataInitialize_WriteStringToStorage(This,pwszFileName,pwszInitializationString,dwCreationDisposition)	\
    ( (This)->lpVtbl -> WriteStringToStorage(This,pwszFileName,pwszInitializationString,dwCreationDisposition) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [call_as] */ HRESULT STDMETHODCALLTYPE IDataInitialize_RemoteCreateDBInstanceEx_Proxy( 
    __RPC__in IDataInitialize * This,
    /* [in] */ __RPC__in REFCLSID clsidProvider,
    /* [in] */ __RPC__in_opt IUnknown *pUnkOuter,
    /* [in] */ DWORD dwClsCtx,
    /* [unique][in] */ __RPC__in_opt LPOLESTR pwszReserved,
    /* [unique][in] */ __RPC__in_opt COSERVERINFO *pServerInfo,
    /* [in] */ ULONG cmq,
    /* [size_is][in] */ __RPC__in_ecount_full(cmq) const IID **rgpIID,
    /* [size_is][out] */ __RPC__out_ecount_full(cmq) IUnknown **rgpItf,
    /* [size_is][out] */ __RPC__out_ecount_full(cmq) HRESULT *rghr);


void __RPC_STUB IDataInitialize_RemoteCreateDBInstanceEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDataInitialize_INTERFACE_DEFINED__ */



#ifndef __MSDASC_LIBRARY_DEFINED__
#define __MSDASC_LIBRARY_DEFINED__

/* library MSDASC */
/* [helpstring][version][uuid] */ 


EXTERN_C const IID LIBID_MSDASC;

#ifndef __IDataSourceLocator_INTERFACE_DEFINED__
#define __IDataSourceLocator_INTERFACE_DEFINED__

/* interface IDataSourceLocator */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IDataSourceLocator;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2206CCB2-19C1-11D1-89E0-00C04FD7A829")
    IDataSourceLocator : public IDispatch
    {
    public:
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_hWnd( 
            /* [retval][out] */ __RPC__out COMPATIBLE_LONG *phwndParent) = 0;
        
        virtual /* [helpstring][propput] */ HRESULT STDMETHODCALLTYPE put_hWnd( 
            /* [in] */ COMPATIBLE_LONG hwndParent) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE PromptNew( 
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppADOConnection) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE PromptEdit( 
            /* [out][in] */ __RPC__deref_inout_opt IDispatch **ppADOConnection,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pbSuccess) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDataSourceLocatorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in IDataSourceLocator * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in IDataSourceLocator * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in IDataSourceLocator * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            __RPC__in IDataSourceLocator * This,
            /* [out] */ __RPC__out UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            __RPC__in IDataSourceLocator * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ __RPC__deref_out_opt ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            __RPC__in IDataSourceLocator * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [size_is][in] */ __RPC__in_ecount_full(cNames) LPOLESTR *rgszNames,
            /* [range][in] */ __RPC__in_range(0,16384) UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ __RPC__out_ecount_full(cNames) DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDataSourceLocator * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_hWnd )( 
            __RPC__in IDataSourceLocator * This,
            /* [retval][out] */ __RPC__out COMPATIBLE_LONG *phwndParent);
        
        /* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE *put_hWnd )( 
            __RPC__in IDataSourceLocator * This,
            /* [in] */ COMPATIBLE_LONG hwndParent);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *PromptNew )( 
            __RPC__in IDataSourceLocator * This,
            /* [retval][out] */ __RPC__deref_out_opt IDispatch **ppADOConnection);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *PromptEdit )( 
            __RPC__in IDataSourceLocator * This,
            /* [out][in] */ __RPC__deref_inout_opt IDispatch **ppADOConnection,
            /* [retval][out] */ __RPC__out VARIANT_BOOL *pbSuccess);
        
        END_INTERFACE
    } IDataSourceLocatorVtbl;

    interface IDataSourceLocator
    {
        CONST_VTBL struct IDataSourceLocatorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDataSourceLocator_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IDataSourceLocator_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IDataSourceLocator_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IDataSourceLocator_GetTypeInfoCount(This,pctinfo)	\
    ( (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo) ) 

#define IDataSourceLocator_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    ( (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo) ) 

#define IDataSourceLocator_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    ( (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) ) 

#define IDataSourceLocator_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    ( (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) ) 


#define IDataSourceLocator_get_hWnd(This,phwndParent)	\
    ( (This)->lpVtbl -> get_hWnd(This,phwndParent) ) 

#define IDataSourceLocator_put_hWnd(This,hwndParent)	\
    ( (This)->lpVtbl -> put_hWnd(This,hwndParent) ) 

#define IDataSourceLocator_PromptNew(This,ppADOConnection)	\
    ( (This)->lpVtbl -> PromptNew(This,ppADOConnection) ) 

#define IDataSourceLocator_PromptEdit(This,ppADOConnection,pbSuccess)	\
    ( (This)->lpVtbl -> PromptEdit(This,ppADOConnection,pbSuccess) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDataSourceLocator_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_DataLinks;

#ifdef __cplusplus

class DECLSPEC_UUID("2206CDB2-19C1-11D1-89E0-00C04FD7A829")
DataLinks;
#endif

EXTERN_C const CLSID CLSID_MSDAINITIALIZE;

#ifdef __cplusplus

class DECLSPEC_UUID("2206CDB0-19C1-11D1-89E0-00C04FD7A829")
MSDAINITIALIZE;
#endif

EXTERN_C const CLSID CLSID_PDPO;

#ifdef __cplusplus

class DECLSPEC_UUID("CCB4EC60-B9DC-11D1-AC80-00A0C9034873")
PDPO;
#endif

EXTERN_C const CLSID CLSID_RootBinder;

#ifdef __cplusplus

class DECLSPEC_UUID("FF151822-B0BF-11D1-A80D-000000000000")
RootBinder;
#endif
#endif /* __MSDASC_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

/* [local][helpstring] */ HRESULT STDMETHODCALLTYPE IDataInitialize_CreateDBInstanceEx_Proxy( 
    IDataInitialize * This,
    /* [in] */ REFCLSID clsidProvider,
    /* [annotation][in] */ 
    __in_opt  IUnknown *pUnkOuter,
    /* [in] */ DWORD dwClsCtx,
    /* [annotation][unique][in] */ 
    __in_z_opt  LPOLESTR pwszReserved,
    /* [annotation][unique][in] */ 
    __in  COSERVERINFO *pServerInfo,
    /* [in] */ ULONG cmq,
    /* [annotation][size_is][out][in] */ 
    __out_ecount(cmq)  MULTI_QI *rgmqResults);


/* [call_as] */ HRESULT STDMETHODCALLTYPE IDataInitialize_CreateDBInstanceEx_Stub( 
    __RPC__in IDataInitialize * This,
    /* [in] */ __RPC__in REFCLSID clsidProvider,
    /* [in] */ __RPC__in_opt IUnknown *pUnkOuter,
    /* [in] */ DWORD dwClsCtx,
    /* [unique][in] */ __RPC__in_opt LPOLESTR pwszReserved,
    /* [unique][in] */ __RPC__in_opt COSERVERINFO *pServerInfo,
    /* [in] */ ULONG cmq,
    /* [size_is][in] */ __RPC__in_ecount_full(cmq) const IID **rgpIID,
    /* [size_is][out] */ __RPC__out_ecount_full(cmq) IUnknown **rgpItf,
    /* [size_is][out] */ __RPC__out_ecount_full(cmq) HRESULT *rghr);



/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\msdasql.h ===
//-----------------------------------------------------------------------------
// File:            msdasql.h
//
// Copyright:       Copyright (c) Microsoft Corporation     
//
// Contents:        Provider Specific definitions
//
// Comments:        
//
//-----------------------------------------------------------------------------

#ifndef  _MSDASQL_H_
#define  _MSDASQL_H_

#undef MSDASQLDECLSPEC
#if _MSC_VER >= 1100 && (!defined(SHx) || (defined(SHx) && _MSC_VER >= 1200))
#define MSDASQLDECLSPEC __declspec(selectany)
#else
#define MSDASQLDECLSPEC 
#endif //_MSC_VER

// Provider Class Id
// IID_ISQLRequestDiagFields {228972F0-B5FF-11d0-8A80-00C04FD611CD}
extern const MSDASQLDECLSPEC GUID IID_ISQLRequestDiagFields   = { 0x228972f0, 0xb5ff, 0x11d0, { 0x8a, 0x80, 0x0, 0xc0, 0x4f, 0xd6, 0x11, 0xcd } };
// IID_ISQLGetDiagField {228972F1-B5FF-11d0-8A80-00C04FD611CD}
extern const MSDASQLDECLSPEC GUID IID_ISQLGetDiagField        = { 0x228972f1, 0xb5ff, 0x11d0, { 0x8a, 0x80, 0x0, 0xc0, 0x4f, 0xd6, 0x11, 0xcd } };
// @msg IID_IRowsetChangeExtInfo | {0c733a8f-2a1c-11ce-ade5-00aa0044773d}
extern const MSDASQLDECLSPEC GUID IID_IRowsetChangeExtInfo    = {0x0C733A8FL,0x2A1C,0x11CE,{0xAD,0xE5,0x00,0xAA,0x00,0x44,0x77,0x3D}};
extern const MSDASQLDECLSPEC GUID CLSID_MSDASQL               = {0xC8B522CBL,0x5CF3,0x11CE,{0xAD,0xE5,0x00,0xAA,0x00,0x44,0x77,0x3D}};
extern const MSDASQLDECLSPEC GUID CLSID_MSDASQL_ENUMERATOR    = {0xC8B522CDL,0x5CF3,0x11CE,{0xAD,0xE5,0x00,0xAA,0x00,0x44,0x77,0x3D}};

//----------------------------------------------------------------------------
// MSDASQL specific properties
extern const MSDASQLDECLSPEC GUID DBPROPSET_PROVIDERDATASOURCEINFO  = {0x497c60e0,0x7123,0x11cf,{0xb1,0x71,0x0,0xaa,0x0,0x57,0x59,0x9e}};
extern const MSDASQLDECLSPEC GUID DBPROPSET_PROVIDERROWSET          = {0x497c60e1,0x7123,0x11cf,{0xb1,0x71,0x0,0xaa,0x0,0x57,0x59,0x9e}};
extern const MSDASQLDECLSPEC GUID DBPROPSET_PROVIDERDBINIT          = {0x497c60e2,0x7123,0x11cf,{0xb1,0x71,0x0,0xaa,0x0,0x57,0x59,0x9e}};
extern const MSDASQLDECLSPEC GUID DBPROPSET_PROVIDERSTMTATTR        = {0x497c60e3,0x7123,0x11cf,{0xb1,0x71,0x0,0xaa,0x0,0x57,0x59,0x9e}};
extern const MSDASQLDECLSPEC GUID DBPROPSET_PROVIDERCONNATTR        = {0x497c60e4,0x7123,0x11cf,{0xb1,0x71,0x0,0xaa,0x0,0x57,0x59,0x9e}};

// PropIds under DBPROPSET_PROVIDERROWSET 
#define KAGPROP_QUERYBASEDUPDATES           2
#define KAGPROP_MARSHALLABLE                3
#define KAGPROP_POSITIONONNEWROW            4
#define KAGPROP_IRowsetChangeExtInfo        5
#define KAGPROP_CURSOR                      6
#define KAGPROP_CONCURRENCY                 7
#define KAGPROP_BLOBSONFOCURSOR             8
#define KAGPROP_INCLUDENONEXACT             9
#define KAGPROP_FORCESSFIREHOSEMODE         10
#define KAGPROP_FORCENOPARAMETERREBIND      11
#define KAGPROP_FORCENOPREPARE              12
#define KAGPROP_FORCENOREEXECUTE            13

// PropIds under DPBROPSET_PROVIDERDATASOURCEINFO
#define KAGPROP_ACCESSIBLEPROCEDURES        2
#define KAGPROP_ACCESSIBLETABLES            3
#define KAGPROP_ODBCSQLOPTIEF               4
#define KAGPROP_OJCAPABILITY                5
#define KAGPROP_PROCEDURES                  6
#define KAGPROP_DRIVERNAME                  7
#define KAGPROP_DRIVERVER                   8
#define KAGPROP_DRIVERODBCVER               9
#define KAGPROP_LIKEESCAPECLAUSE            10
#define KAGPROP_SPECIALCHARACTERS           11
#define KAGPROP_MAXCOLUMNSINGROUPBY         12
#define KAGPROP_MAXCOLUMNSININDEX           13
#define KAGPROP_MAXCOLUMNSINORDERBY         14
#define KAGPROP_MAXCOLUMNSINSELECT          15
#define KAGPROP_MAXCOLUMNSINTABLE           16
#define KAGPROP_NUMERICFUNCTIONS            17
#define KAGPROP_ODBCSQLCONFORMANCE          18
#define KAGPROP_OUTERJOINS                  19
#define KAGPROP_STRINGFUNCTIONS             20
#define KAGPROP_SYSTEMFUNCTIONS             21
#define KAGPROP_TIMEDATEFUNCTIONS           22
#define KAGPROP_FILEUSAGE                   23
#define KAGPROP_ACTIVESTATEMENTS            24

// PropIds under DBPROPSET_PROVIDERDBINIT 
#define KAGPROP_AUTH_TRUSTEDCONNECTION      2
#define KAGPROP_AUTH_SERVERINTEGRATED       3


// Bitmask values for KAGPROP_CONCURRENCY
#define KAGPROPVAL_CONCUR_ROWVER            0x00000001
#define KAGPROPVAL_CONCUR_VALUES            0x00000002
#define KAGPROPVAL_CONCUR_LOCK              0x00000004
#define KAGPROPVAL_CONCUR_READ_ONLY         0x00000008

//Include the interface definitions
#include "msdasql_interfaces.h"

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\msdasql_interfaces.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0555 */
/* Compiler settings for msdasql_interfaces.idl:
    Oicf, W1, Zp8, env=Win32 (32b run), target_arch=X86 7.00.0555 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __msdasql_interfaces_h__
#define __msdasql_interfaces_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IRowsetChangeExtInfo_FWD_DEFINED__
#define __IRowsetChangeExtInfo_FWD_DEFINED__
typedef interface IRowsetChangeExtInfo IRowsetChangeExtInfo;
#endif 	/* __IRowsetChangeExtInfo_FWD_DEFINED__ */


#ifndef __ISQLRequestDiagFields_FWD_DEFINED__
#define __ISQLRequestDiagFields_FWD_DEFINED__
typedef interface ISQLRequestDiagFields ISQLRequestDiagFields;
#endif 	/* __ISQLRequestDiagFields_FWD_DEFINED__ */


#ifndef __ISQLGetDiagField_FWD_DEFINED__
#define __ISQLGetDiagField_FWD_DEFINED__
typedef interface ISQLGetDiagField ISQLGetDiagField;
#endif 	/* __ISQLGetDiagField_FWD_DEFINED__ */


/* header files for imported files */
#include "unknwn.h"
#include "oaidl.h"
#include "oledb.h"

#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_msdasql_interfaces_0000_0000 */
/* [local] */ 


enum KAGREQDIAGFLAGSENUM
    {	KAGREQDIAGFLAGS_HEADER	= 0x1,
	KAGREQDIAGFLAGS_RECORD	= 0x2
    } ;


extern RPC_IF_HANDLE __MIDL_itf_msdasql_interfaces_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_msdasql_interfaces_0000_0000_v0_0_s_ifspec;

#ifndef __IRowsetChangeExtInfo_INTERFACE_DEFINED__
#define __IRowsetChangeExtInfo_INTERFACE_DEFINED__

/* interface IRowsetChangeExtInfo */
/* [unique][uuid][object][local] */ 


EXTERN_C const IID IID_IRowsetChangeExtInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0c733a8f-2a1c-11ce-ade5-00aa0044773d")
    IRowsetChangeExtInfo : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetOriginalRow( 
            /* [in] */ HCHAPTER hReserved,
            /* [in] */ HROW hRow,
            /* [out] */ HROW *phRowOriginal) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPendingColumns( 
            /* [in] */ HCHAPTER hReserved,
            /* [in] */ HROW hRow,
            /* [in] */ ULONG cColumnOrdinals,
            /* [size_is][in] */ const ULONG rgiOrdinals[  ],
            /* [size_is][out] */ DBPENDINGSTATUS rgColumnStatus[  ]) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IRowsetChangeExtInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IRowsetChangeExtInfo * This,
            /* [in] */ REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IRowsetChangeExtInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IRowsetChangeExtInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetOriginalRow )( 
            IRowsetChangeExtInfo * This,
            /* [in] */ HCHAPTER hReserved,
            /* [in] */ HROW hRow,
            /* [out] */ HROW *phRowOriginal);
        
        HRESULT ( STDMETHODCALLTYPE *GetPendingColumns )( 
            IRowsetChangeExtInfo * This,
            /* [in] */ HCHAPTER hReserved,
            /* [in] */ HROW hRow,
            /* [in] */ ULONG cColumnOrdinals,
            /* [size_is][in] */ const ULONG rgiOrdinals[  ],
            /* [size_is][out] */ DBPENDINGSTATUS rgColumnStatus[  ]);
        
        END_INTERFACE
    } IRowsetChangeExtInfoVtbl;

    interface IRowsetChangeExtInfo
    {
        CONST_VTBL struct IRowsetChangeExtInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IRowsetChangeExtInfo_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define IRowsetChangeExtInfo_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define IRowsetChangeExtInfo_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define IRowsetChangeExtInfo_GetOriginalRow(This,hReserved,hRow,phRowOriginal)	\
    ( (This)->lpVtbl -> GetOriginalRow(This,hReserved,hRow,phRowOriginal) ) 

#define IRowsetChangeExtInfo_GetPendingColumns(This,hReserved,hRow,cColumnOrdinals,rgiOrdinals,rgColumnStatus)	\
    ( (This)->lpVtbl -> GetPendingColumns(This,hReserved,hRow,cColumnOrdinals,rgiOrdinals,rgColumnStatus) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IRowsetChangeExtInfo_INTERFACE_DEFINED__ */


/* interface __MIDL_itf_msdasql_interfaces_0000_0001 */
/* [local] */ 

// the structure passed in in IRequestDiagFields::RequestDiagFields
typedef struct tagKAGREQDIAG
    {
    ULONG ulDiagFlags;
    VARTYPE vt;
    SHORT sDiagField;
    } 	KAGREQDIAG;

// the structure passed in in IGetDiagField::GetDiagField
typedef struct tagKAGGETDIAG
    {
    ULONG ulSize;
    VARIANTARG vDiagInfo;
    SHORT sDiagField;
    } 	KAGGETDIAG;



extern RPC_IF_HANDLE __MIDL_itf_msdasql_interfaces_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_msdasql_interfaces_0000_0001_v0_0_s_ifspec;

#ifndef __ISQLRequestDiagFields_INTERFACE_DEFINED__
#define __ISQLRequestDiagFields_INTERFACE_DEFINED__

/* interface ISQLRequestDiagFields */
/* [object][uuid] */ 


EXTERN_C const IID IID_ISQLRequestDiagFields;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("228972F0-B5FF-11d0-8A80-00C04FD611CD")
    ISQLRequestDiagFields : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE RequestDiagFields( 
            /* [in] */ ULONG cDiagFields,
            /* [size_is][in] */ __RPC__in_ecount_full(cDiagFields) KAGREQDIAG rgDiagFields[  ]) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISQLRequestDiagFieldsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISQLRequestDiagFields * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISQLRequestDiagFields * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISQLRequestDiagFields * This);
        
        HRESULT ( STDMETHODCALLTYPE *RequestDiagFields )( 
            __RPC__in ISQLRequestDiagFields * This,
            /* [in] */ ULONG cDiagFields,
            /* [size_is][in] */ __RPC__in_ecount_full(cDiagFields) KAGREQDIAG rgDiagFields[  ]);
        
        END_INTERFACE
    } ISQLRequestDiagFieldsVtbl;

    interface ISQLRequestDiagFields
    {
        CONST_VTBL struct ISQLRequestDiagFieldsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISQLRequestDiagFields_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISQLRequestDiagFields_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISQLRequestDiagFields_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISQLRequestDiagFields_RequestDiagFields(This,cDiagFields,rgDiagFields)	\
    ( (This)->lpVtbl -> RequestDiagFields(This,cDiagFields,rgDiagFields) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISQLRequestDiagFields_INTERFACE_DEFINED__ */


#ifndef __ISQLGetDiagField_INTERFACE_DEFINED__
#define __ISQLGetDiagField_INTERFACE_DEFINED__

/* interface ISQLGetDiagField */
/* [object][uuid] */ 


EXTERN_C const IID IID_ISQLGetDiagField;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("228972F1-B5FF-11d0-8A80-00C04FD611CD")
    ISQLGetDiagField : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetDiagField( 
            /* [unique][out][in] */ __RPC__inout_opt KAGGETDIAG *pDiagInfo) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct ISQLGetDiagFieldVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in ISQLGetDiagField * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in ISQLGetDiagField * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in ISQLGetDiagField * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetDiagField )( 
            __RPC__in ISQLGetDiagField * This,
            /* [unique][out][in] */ __RPC__inout_opt KAGGETDIAG *pDiagInfo);
        
        END_INTERFACE
    } ISQLGetDiagFieldVtbl;

    interface ISQLGetDiagField
    {
        CONST_VTBL struct ISQLGetDiagFieldVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define ISQLGetDiagField_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define ISQLGetDiagField_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define ISQLGetDiagField_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define ISQLGetDiagField_GetDiagField(This,pDiagInfo)	\
    ( (This)->lpVtbl -> GetDiagField(This,pDiagInfo) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __ISQLGetDiagField_INTERFACE_DEFINED__ */


/* Additional Prototypes for ALL interfaces */

unsigned long             __RPC_USER  VARIANT_UserSize(     __RPC__in unsigned long *, unsigned long            , __RPC__in VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserMarshal(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserUnmarshal(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out VARIANT * ); 
void                      __RPC_USER  VARIANT_UserFree(     __RPC__in unsigned long *, __RPC__in VARIANT * ); 

unsigned long             __RPC_USER  VARIANT_UserSize64(     __RPC__in unsigned long *, unsigned long            , __RPC__in VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserMarshal64(  __RPC__in unsigned long *, __RPC__inout_xcount(0) unsigned char *, __RPC__in VARIANT * ); 
unsigned char * __RPC_USER  VARIANT_UserUnmarshal64(__RPC__in unsigned long *, __RPC__in_xcount(0) unsigned char *, __RPC__out VARIANT * ); 
void                      __RPC_USER  VARIANT_UserFree64(     __RPC__in unsigned long *, __RPC__in VARIANT * ); 

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\msdatsrc.h ===
/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 7.00.0555 */
/* Compiler settings for msdatsrc.idl:
    Oicf, W1, Zp8, env=Win32 (32b run), target_arch=X86 7.00.0555 
    protocol : dce , ms_ext, c_ext, robust
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
/* @@MIDL_FILE_HEADING(  ) */

#pragma warning( disable: 4049 )  /* more than 64k source lines */


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

/* verify that the <rpcsal.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__


#ifndef __msdatsrc_h__
#define __msdatsrc_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __DataSourceListener_FWD_DEFINED__
#define __DataSourceListener_FWD_DEFINED__
typedef interface DataSourceListener DataSourceListener;
#endif 	/* __DataSourceListener_FWD_DEFINED__ */


#ifndef __DataSource_FWD_DEFINED__
#define __DataSource_FWD_DEFINED__
typedef interface DataSource DataSource;
#endif 	/* __DataSource_FWD_DEFINED__ */


#ifdef __cplusplus
extern "C"{
#endif 


/* interface __MIDL_itf_msdatsrc_0000_0000 */
/* [local] */ 

//-----------------------------------------------------------------------------
// File:				.C or .H file generated by msdatsrc.idl 
//
// Copyright:		Copyright (c) 1998-1999 Microsoft Corporation
//
// Contents: 		.C or .H file generated by msdatsrc.idl
//
// Comments: 		
//
//-----------------------------------------------------------------------------
// For non-VC5 compilers
#if (_MSC_VER >= 1100) && defined (__cplusplus)
#define DECLSPEC_UUID(x)	__declspec(uuid(x))
#else
#define DECLSPEC_UUID(x)
#endif

// C/C++ interface names
#define IDataSource		DataSource
#define IDataSourceListener	DataSourceListener


extern RPC_IF_HANDLE __MIDL_itf_msdatsrc_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_msdatsrc_0000_0000_v0_0_s_ifspec;


#ifndef __MSDATASRC_LIBRARY_DEFINED__
#define __MSDATASRC_LIBRARY_DEFINED__

/* library MSDATASRC */
/* [helpstring][version][uuid] */ 

typedef /* [uuid] */  DECLSPEC_UUID("7c0ffab1-cd84-11d0-949a-00a0c91110ed") BSTR DataMember;


EXTERN_C const IID LIBID_MSDATASRC;

#ifndef __DataSourceListener_INTERFACE_DEFINED__
#define __DataSourceListener_INTERFACE_DEFINED__

/* interface DataSourceListener */
/* [object][hidden][oleautomation][uuid] */ 


EXTERN_C const IID IID_DataSourceListener;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7c0ffab2-cd84-11d0-949a-00a0c91110ed")
    DataSourceListener : public IUnknown
    {
    public:
        virtual /* [hidden] */ HRESULT STDMETHODCALLTYPE dataMemberChanged( 
            /* [in] */ __RPC__in DataMember bstrDM) = 0;
        
        virtual /* [hidden] */ HRESULT STDMETHODCALLTYPE dataMemberAdded( 
            /* [in] */ __RPC__in DataMember bstrDM) = 0;
        
        virtual /* [hidden] */ HRESULT STDMETHODCALLTYPE dataMemberRemoved( 
            /* [in] */ __RPC__in DataMember bstrDM) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct DataSourceListenerVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in DataSourceListener * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in DataSourceListener * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in DataSourceListener * This);
        
        /* [hidden] */ HRESULT ( STDMETHODCALLTYPE *dataMemberChanged )( 
            __RPC__in DataSourceListener * This,
            /* [in] */ __RPC__in DataMember bstrDM);
        
        /* [hidden] */ HRESULT ( STDMETHODCALLTYPE *dataMemberAdded )( 
            __RPC__in DataSourceListener * This,
            /* [in] */ __RPC__in DataMember bstrDM);
        
        /* [hidden] */ HRESULT ( STDMETHODCALLTYPE *dataMemberRemoved )( 
            __RPC__in DataSourceListener * This,
            /* [in] */ __RPC__in DataMember bstrDM);
        
        END_INTERFACE
    } DataSourceListenerVtbl;

    interface DataSourceListener
    {
        CONST_VTBL struct DataSourceListenerVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DataSourceListener_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define DataSourceListener_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define DataSourceListener_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define DataSourceListener_dataMemberChanged(This,bstrDM)	\
    ( (This)->lpVtbl -> dataMemberChanged(This,bstrDM) ) 

#define DataSourceListener_dataMemberAdded(This,bstrDM)	\
    ( (This)->lpVtbl -> dataMemberAdded(This,bstrDM) ) 

#define DataSourceListener_dataMemberRemoved(This,bstrDM)	\
    ( (This)->lpVtbl -> dataMemberRemoved(This,bstrDM) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __DataSourceListener_INTERFACE_DEFINED__ */


#ifndef __DataSource_INTERFACE_DEFINED__
#define __DataSource_INTERFACE_DEFINED__

/* interface DataSource */
/* [object][oleautomation][uuid] */ 


EXTERN_C const IID IID_DataSource;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("7c0ffab3-cd84-11d0-949a-00a0c91110ed")
    DataSource : public IUnknown
    {
    public:
        virtual /* [restricted][hidden] */ HRESULT STDMETHODCALLTYPE getDataMember( 
            /* [in] */ __RPC__in DataMember bstrDM,
            /* [in] */ __RPC__in REFIID riid,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **ppunk) = 0;
        
        virtual /* [hidden] */ HRESULT STDMETHODCALLTYPE getDataMemberName( 
            /* [in] */ long lIndex,
            /* [retval][out] */ __RPC__deref_out_opt DataMember *pbstrDM) = 0;
        
        virtual /* [hidden] */ HRESULT STDMETHODCALLTYPE getDataMemberCount( 
            /* [retval][out] */ __RPC__out long *plCount) = 0;
        
        virtual /* [hidden] */ HRESULT STDMETHODCALLTYPE addDataSourceListener( 
            /* [in] */ __RPC__in_opt DataSourceListener *pDSL) = 0;
        
        virtual /* [hidden] */ HRESULT STDMETHODCALLTYPE removeDataSourceListener( 
            /* [in] */ __RPC__in_opt DataSourceListener *pDSL) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct DataSourceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            __RPC__in DataSource * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */ 
            __RPC__deref_out  void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            __RPC__in DataSource * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            __RPC__in DataSource * This);
        
        /* [restricted][hidden] */ HRESULT ( STDMETHODCALLTYPE *getDataMember )( 
            __RPC__in DataSource * This,
            /* [in] */ __RPC__in DataMember bstrDM,
            /* [in] */ __RPC__in REFIID riid,
            /* [retval][out] */ __RPC__deref_out_opt IUnknown **ppunk);
        
        /* [hidden] */ HRESULT ( STDMETHODCALLTYPE *getDataMemberName )( 
            __RPC__in DataSource * This,
            /* [in] */ long lIndex,
            /* [retval][out] */ __RPC__deref_out_opt DataMember *pbstrDM);
        
        /* [hidden] */ HRESULT ( STDMETHODCALLTYPE *getDataMemberCount )( 
            __RPC__in DataSource * This,
            /* [retval][out] */ __RPC__out long *plCount);
        
        /* [hidden] */ HRESULT ( STDMETHODCALLTYPE *addDataSourceListener )( 
            __RPC__in DataSource * This,
            /* [in] */ __RPC__in_opt DataSourceListener *pDSL);
        
        /* [hidden] */ HRESULT ( STDMETHODCALLTYPE *removeDataSourceListener )( 
            __RPC__in DataSource * This,
            /* [in] */ __RPC__in_opt DataSourceListener *pDSL);
        
        END_INTERFACE
    } DataSourceVtbl;

    interface DataSource
    {
        CONST_VTBL struct DataSourceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define DataSource_QueryInterface(This,riid,ppvObject)	\
    ( (This)->lpVtbl -> QueryInterface(This,riid,ppvObject) ) 

#define DataSource_AddRef(This)	\
    ( (This)->lpVtbl -> AddRef(This) ) 

#define DataSource_Release(This)	\
    ( (This)->lpVtbl -> Release(This) ) 


#define DataSource_getDataMember(This,bstrDM,riid,ppunk)	\
    ( (This)->lpVtbl -> getDataMember(This,bstrDM,riid,ppunk) ) 

#define DataSource_getDataMemberName(This,lIndex,pbstrDM)	\
    ( (This)->lpVtbl -> getDataMemberName(This,lIndex,pbstrDM) ) 

#define DataSource_getDataMemberCount(This,plCount)	\
    ( (This)->lpVtbl -> getDataMemberCount(This,plCount) ) 

#define DataSource_addDataSourceListener(This,pDSL)	\
    ( (This)->lpVtbl -> addDataSourceListener(This,pDSL) ) 

#define DataSource_removeDataSourceListener(This,pDSL)	\
    ( (This)->lpVtbl -> removeDataSourceListener(This,pDSL) ) 

#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __DataSource_INTERFACE_DEFINED__ */

#endif /* __MSDATASRC_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\msdelta.h ===
/* Copyright (c) Microsoft Corporation.  All rights reserved. */

#pragma once

/** Delta Compression Engine API. */

#include <windows.h>

/** For crypto algorithm identifiers, ALG_ID. */
#include <wincrypt.h>

/** Allows anonymous structs and unions. */
#pragma warning( disable: 4201 )

#ifdef __cplusplus
extern "C"
{
#endif /* __cplusplus */

/** Default size limit for source and target files and buffers. */
#define DELTA_FILE_SIZE_LIMIT           ( 32 * 1024 * 1024 )

/** Default size limit for options files and buffers. */
#define DELTA_OPTIONS_SIZE_LIMIT        ( 128 * 1024 * 1024 )

/** Type for input memory blocks. */
typedef struct _DELTA_INPUT
{
    union
    {
        /** Start of memory block, if it is not Editable. */
        LPCVOID lpcStart;

        /** Start of memory block, if it is Editable. */
        LPVOID lpStart;
    };

    /** Size of memory block in bytes. */
    SIZE_T uSize;

    /** TRUE if caller allows msdelta to edit this memory block, FALSE otherwise. */
    BOOL Editable;

} DELTA_INPUT;

typedef DELTA_INPUT *LPDELTA_INPUT;

typedef const DELTA_INPUT *LPCDELTA_INPUT;

/** Type for output memory blocks. */
typedef struct _DELTA_OUTPUT
{
    /** Start of memory block. */
    LPVOID lpStart;

    /** Size of memory block in bytes. */
    SIZE_T uSize;
} DELTA_OUTPUT;

typedef DELTA_OUTPUT *LPDELTA_OUTPUT;

typedef const DELTA_OUTPUT *LPCDELTA_OUTPUT;

typedef __int64 DELTA_FILE_TYPE;

/** Raw file type. */
#define DELTA_FILE_TYPE_RAW                 ( (DELTA_FILE_TYPE) 0x00000001 )

/** File type for I386 Portable Executable files. */
#define DELTA_FILE_TYPE_I386                ( (DELTA_FILE_TYPE) 0x00000002 )

/** File type for for IA64 Portable Executable files. */
#define DELTA_FILE_TYPE_IA64                ( (DELTA_FILE_TYPE) 0x00000004 )

/** File type for AMD64 Portable Executable files. */
#define DELTA_FILE_TYPE_AMD64               ( (DELTA_FILE_TYPE) 0x00000008 )


/** File type set that treats any file as raw. */
#define DELTA_FILE_TYPE_SET_RAW_ONLY        ( DELTA_FILE_TYPE_RAW )

/** File type set that distinguishes I386, IA64 and AMD64 Portable Executable file and treats others as raw. */
#define DELTA_FILE_TYPE_SET_EXECUTABLES     ( DELTA_FILE_TYPE_RAW | \
                                              DELTA_FILE_TYPE_I386 | \
                                              DELTA_FILE_TYPE_IA64 | \
                                              DELTA_FILE_TYPE_AMD64 )

/** Type for msdelta flags. */
typedef __int64 DELTA_FLAG_TYPE;

/** No flags. */
#define DELTA_FLAG_NONE                     ( (DELTA_FLAG_TYPE)0x00000000 )

/** Allow application of legacy PA19 deltas by mspatcha.dll. */
#define DELTA_APPLY_FLAG_ALLOW_PA19         ( (DELTA_FLAG_TYPE)0x00000001 )

/** Transform E8 pieces (relative calls in x86) of target file . */
#define DELTA_FLAG_E8                       ( (DELTA_FLAG_TYPE)0x00000001 ) /* flags[ 0 ] */

/** Mark non-executable parts of source PE. */
#define DELTA_FLAG_MARK                     ( (DELTA_FLAG_TYPE)0x00000002 ) /* flags[ 1 ] */

/** Transform imports of source PE. */
#define DELTA_FLAG_IMPORTS                  ( (DELTA_FLAG_TYPE)0x00000004 ) /* flags[ 2 ] */

/** Transform exports of source PE. */
#define DELTA_FLAG_EXPORTS                  ( (DELTA_FLAG_TYPE)0x00000008 ) /* flags[ 3 ] */

/** Transform resources of source PE. */
#define DELTA_FLAG_RESOURCES                ( (DELTA_FLAG_TYPE)0x00000010 ) /* flags[ 4 ] */

/** Transform relocations of source PE. */
#define DELTA_FLAG_RELOCS                   ( (DELTA_FLAG_TYPE)0x00000020 ) /* flags[ 5 ] */

/** Smash lock prefixes of source PE. */
#define DELTA_FLAG_I386_SMASHLOCK           ( (DELTA_FLAG_TYPE)0x00000040 ) /* flags[ 6 ] */

/** Transform relative jumps of source I386 (x86) PE. */
#define DELTA_FLAG_I386_JMPS                ( (DELTA_FLAG_TYPE)0x00000080 ) /* flags[ 7 ] */

/** Transform relative calls of source I386 (x86) PE. */
#define DELTA_FLAG_I386_CALLS               ( (DELTA_FLAG_TYPE)0x00000100 ) /* flags[ 8 ] */

/** Transform instructions of source AMD64 (x86-64) PE. */
#define DELTA_FLAG_AMD64_DISASM             ( (DELTA_FLAG_TYPE)0x00000200 ) /* flags[ 9 ] */

/** Transform pdata of source AMD64 (x86-64) PE. */
#define DELTA_FLAG_AMD64_PDATA              ( (DELTA_FLAG_TYPE)0x00000400 ) /* flags[ 10 ] */

/** Transform intstructions of source IA64 (Itanium) PE. */
#define DELTA_FLAG_IA64_DISASM              ( (DELTA_FLAG_TYPE)0x00000800 ) /* flags[ 11 ] */

/** Transform pdata of source IA64 (Itanium) PE. */
#define DELTA_FLAG_IA64_PDATA               ( (DELTA_FLAG_TYPE)0x00001000 ) /* flags[ 12 ] */

/** Unbind source PE. */
#define DELTA_FLAG_UNBIND                   ( (DELTA_FLAG_TYPE)0x00002000 ) /* flags[ 13 ] */

/** Transform CLI instructions of source PE. */
#define DELTA_FLAG_CLI_DISASM               ( (DELTA_FLAG_TYPE)0x00004000 ) /* flags[ 14 ] */

/** Transform CLI Metadata of source PE. */
#define DELTA_FLAG_CLI_METADATA             ( (DELTA_FLAG_TYPE)0x00008000 ) /* flags[ 15 ] */

/** Transform headers of source PE. */
#define DELTA_FLAG_HEADERS                  ( (DELTA_FLAG_TYPE)0x00010000 ) /* flags[ 16 ] */

/** Allow source or target file or buffer to exceed its default size limit. */
#define DELTA_FLAG_IGNORE_FILE_SIZE_LIMIT   ( (DELTA_FLAG_TYPE)0x00020000 ) /* flags[ 17 ] */

/** Allow options buffer or file to exceeed its default size limit. */
#define DELTA_FLAG_IGNORE_OPTIONS_SIZE_LIMIT ((DELTA_FLAG_TYPE)0x00040000 ) /* flags[ 18 ] */

#define DELTA_DEFAULT_FLAGS_RAW             ( DELTA_FLAG_NONE )

#define DELTA_DEFAULT_FLAGS_I386            ( DELTA_FLAG_MARK | \
                                              DELTA_FLAG_IMPORTS | \
                                              DELTA_FLAG_EXPORTS | \
                                              DELTA_FLAG_RESOURCES | \
                                              DELTA_FLAG_RELOCS | \
                                              DELTA_FLAG_I386_SMASHLOCK | \
                                              DELTA_FLAG_I386_JMPS | \
                                              DELTA_FLAG_I386_CALLS | \
                                              DELTA_FLAG_UNBIND | \
                                              DELTA_FLAG_CLI_DISASM | \
                                              DELTA_FLAG_CLI_METADATA ) 

#define DELTA_DEFAULT_FLAGS_IA64            ( DELTA_FLAG_MARK | \
                                              DELTA_FLAG_IMPORTS | \
                                              DELTA_FLAG_EXPORTS | \
                                              DELTA_FLAG_RESOURCES | \
                                              DELTA_FLAG_RELOCS | \
                                              DELTA_FLAG_IA64_DISASM | \
                                              DELTA_FLAG_IA64_PDATA | \
                                              DELTA_FLAG_UNBIND | \
                                              DELTA_FLAG_CLI_DISASM | \
                                              DELTA_FLAG_CLI_METADATA ) 

#define DELTA_DEFAULT_FLAGS_AMD64           ( DELTA_FLAG_MARK | \
                                              DELTA_FLAG_IMPORTS | \
                                              DELTA_FLAG_EXPORTS | \
                                              DELTA_FLAG_RESOURCES | \
                                              DELTA_FLAG_RELOCS | \
                                              DELTA_FLAG_AMD64_DISASM | \
                                              DELTA_FLAG_AMD64_PDATA | \
                                              DELTA_FLAG_UNBIND | \
                                              DELTA_FLAG_CLI_DISASM | \
                                              DELTA_FLAG_CLI_METADATA )

/** Maximal allowed size of hash in bytes. */
#define DELTA_MAX_HASH_SIZE                 32

/** Hash structure. */
typedef struct _DELTA_HASH
{
    /** Size of hash in bytes. Does not exceed DELTA_MAX_HASH_SIZE. */
    DWORD HashSize;

    /** Hash value. */
    UCHAR HashValue[ DELTA_MAX_HASH_SIZE ];
} DELTA_HASH;

typedef DELTA_HASH *LPDELTA_HASH;

typedef const DELTA_HASH *LPCDELTA_HASH;

/** Delta header information. */
typedef struct _DELTA_HEADER_INFO
{
    /** Used file type set. */
    DELTA_FILE_TYPE FileTypeSet;

    /** Source file type. */
    DELTA_FILE_TYPE FileType;

    /** Delta flags. */
    DELTA_FLAG_TYPE Flags;

    /** Size of target file in bytes. */
    SIZE_T  TargetSize;

    /** Time of target file. */
    FILETIME TargetFileTime;

    /** Algorithm used for hashing. */
    ALG_ID TargetHashAlgId;

    /** Target hash. */
    DELTA_HASH TargetHash;

} DELTA_HEADER_INFO;

typedef DELTA_HEADER_INFO *LPDELTA_HEADER_INFO;

typedef const DELTA_HEADER_INFO *LPCDELTA_HEADER_INFO;

/**
 * Gets header information for a delta in memory.
 * @param Delta         Delta memory block.
 * @param lpHeaderInfo  Header information for given Delta.
 * @return              TRUE if success, FALSE otherwise.
 */
BOOL
WINAPI
GetDeltaInfoB(
    __in DELTA_INPUT Delta,
    __out LPDELTA_HEADER_INFO lpHeaderInfo
    );

/**
 * Gets header information for a delta accessed by ASCII file name.
 * @param lpDeltaName   Delta file name, ASCII.
 * @param lpHeaderInfo  Header information for given Delta.
 * @return              TRUE if success, FALSE otherwise.
 */
BOOL
WINAPI
GetDeltaInfoA(
    __in LPCSTR lpDeltaName,
    __out LPDELTA_HEADER_INFO lpHeaderInfo
    );

/**
 * Gets header information for a delta accessed by Unicode file name.
 * @param lpDeltaName   Delta file name, Unicode.
 * @param lpHeaderInfo  Header information for given Delta.
 * @return              TRUE if success, FALSE otherwise.
 */
BOOL
WINAPI
GetDeltaInfoW(
    __in LPCWSTR lpDeltaName,
    __out LPDELTA_HEADER_INFO lpHeaderInfo
    );

#ifdef _UNICODE
#define GetDeltaInfo                        GetDeltaInfoW
#else
#define GetDeltaInfo                        GetDeltaInfoA
#endif /* _UNICODE */


/**
 * Applies a given delta to a given source file.
 * The resultant target file is put into allocated memory.
 * @param ApplyFlags    Apply-specific flags, such as DELTA_APPLY_FLAG_ALLOW_PA19.
 * @param Source        Source memory block.
 * @param Delta         Delta memory block.
 * @param lpTarget      Target memory block. Caller DeltaFree.
 * @return              TRUE if success, FALSE otherwise.
 */
BOOL
WINAPI
ApplyDeltaB(
    __in DELTA_FLAG_TYPE ApplyFlags,
    __in DELTA_INPUT Source,
    __in DELTA_INPUT Delta,
    __out LPDELTA_OUTPUT lpTarget
    );


/**
 * Applies a given delta to a given source file.
 * The resultant target file is put into caller-provided memory.
 * @param ApplyFlags    Apply-specific flags, such as DELTA_APPLY_FLAG_ALLOW_PA19.
 * @param Source        Source memory block.
 * @param Delta         Delta memory block.
 * @param lpTarget      Pointer to caller-allocated target memory block.
 * @param uTargetSize   Size of target memory block in bytes, caller needs to call GetDeltaInfo to obtain it.
 * @return              TRUE if success, FALSE otherwise.
 */
BOOL
WINAPI
ApplyDeltaProvidedB(
    __in DELTA_FLAG_TYPE ApplyFlags,
    __in DELTA_INPUT Source,
    __in DELTA_INPUT Delta,
    __inout_bcount( uTargetSize ) LPVOID lpTarget,
    __in SIZE_T uTargetSize
    );

/**
 * Applies a given delta to a given source file. The resultant target file is written to disk.
 * All files accessed by ASCII file names.
 * @param ApplyFlags    Apply-specific flags, such as DELTA_APPLY_FLAG_ALLOW_PA19.
 * @param lpSourceName  Source file name, ASCII.
 * @param lpDeltaName   Delta file name, ASCII.
 * @param lpTargetName  Target file name, ASCII.
 * @return              TRUE if success, FALSE otherwise.
 */
BOOL
WINAPI
ApplyDeltaA(
    __in DELTA_FLAG_TYPE ApplyFlags,
    __in LPCSTR lpSourceName,
    __in LPCSTR lpDeltaName,
    __in LPCSTR lpTargetName
    );

/**
 * Applies a given delta to a given source file. The resultant target file is written to disk.
 * All files accessed by Unicode file names.
 * @param ApplyFlags    Apply-specific flags, such as DELTA_APPLY_FLAG_ALLOW_PA19.
 * @param lpSourceName  Source file name, Unicode.
 * @param lpDeltaName   Delta file name, Unicode.
 * @param lpTargetName  Target file name, Unicode.
 * @return              TRUE if success, FALSE otherwise.
 */
BOOL
WINAPI
ApplyDeltaW(
    __in DELTA_FLAG_TYPE ApplyFlags,
    __in LPCWSTR lpSourceName,
    __in LPCWSTR lpDeltaName,
    __in LPCWSTR lpTargetName
    );

#ifdef _UNICODE
#define ApplyDelta                          ApplyDeltaW
#else
#define ApplyDelta                          ApplyDeltaA
#endif /* _UNICODE */

/**
 * Creates a delta from a given source file to a given target file in memory.
 * The resultant delta is put into allocated memory.
 * @param FileTypeSet   File type set.
 * @param SetFlags      Set these flags.
 * @param ResetFlags    Reset (supress) these flags.
 * @param Source        Source memory block.
 * @param Target        Target memory block.
 * @param SourceOptions Memory block with source-specific options.
 * @param TargetOptions Memory block with target-specific options.
 * @param GlobalOptions Memory block with global options.
 * @param lpTargetFileTime  Target file time to use, null to use current time.
 * @param HashAlgId     Algorithm for hashing.
 * @param lpDelta       Result delta memory block.
 * @return              TRUE if sucess, FALSE otherwise.
 */
BOOL
WINAPI
CreateDeltaB(
    __in DELTA_FILE_TYPE FileTypeSet,
    __in DELTA_FLAG_TYPE SetFlags,
    __in DELTA_FLAG_TYPE ResetFlags,
    __in DELTA_INPUT Source,
    __in DELTA_INPUT Target,
    __in DELTA_INPUT SourceOptions,
    __in DELTA_INPUT TargetOptions,
    __in DELTA_INPUT GlobalOptions,
    __in_opt const FILETIME *lpTargetFileTime,
    __in ALG_ID HashAlgId,
    __out LPDELTA_OUTPUT lpDelta
    );

/**
 * Creates a delta from a given source file to a given target file. The resultant delta is written to disk
 * All files accessed by ASCII file names.
 * @param FileTypeSet   File type set.
 * @param SetFlags      Set these flags.
 * @param ResetFlags    Reset (supress) these flags.
 * @param lpSourceName  Source file name, ASCII.
 * @param lpTargetName  Target file name, ASCII.
 * @param lpSourceOptionsName   Name of file with source-specific options, ASCII.
 * @param lpTargetOptionsName   Name of file with target-specific options, ASCII.
 * @param GlobalOptions Memory block with global options.
 * @param lpTargetFileTime  Target file time to use, null to use actual target file time.
 * @param HashAlgId     Algorithm for hashing.
 * @param lpDeltaName   Result delta file name, ASCII.
 * @return              TRUE if sucess, FALSE otherwise.
 */
BOOL
WINAPI
CreateDeltaA(
    __in DELTA_FILE_TYPE FileTypeSet,
    __in DELTA_FLAG_TYPE SetFlags,
    __in DELTA_FLAG_TYPE ResetFlags,
    __in LPCSTR lpSourceName,
    __in LPCSTR lpTargetName,
    __in_opt LPCSTR lpSourceOptionsName,
    __in_opt LPCSTR lpTargetOptionsName,
    __in DELTA_INPUT GlobalOptions,
    __in_opt const FILETIME *lpTargetFileTime,
    __in ALG_ID HashAlgId,
    __in LPCSTR lpDeltaName
    );

/**
 * Creates a delta from a given source file to a given target file. The resultant delta is written to disk
 * All files accessed by Unicode file names.
 * @param FileTypeSet  File type set.
 * @param SetFlags      Set these flags.
 * @param ResetFlags    Reset (supress) these flags.
 * @param lpSourceName  Source file name, Unicode.
 * @param lpTargetName  Target file name, Unicode.
 * @param lpSourceOptionsName   Name of file with source-specific options, Unicode.
 * @param lpTargetOptionsName   Name of file with target-specific options, Unicode.
 * @param GlobalOptions Memory block with global options.
 * @param lpTargetFileTime  Target file time to use, null to use actual target file time.
 * @param HashAlgId     Algorithm for hashing.
 * @param lpDeltaName   Result delta file name, Unicode.
 * @return              TRUE if sucess, FALSE otherwise.
 */
BOOL
WINAPI
CreateDeltaW(
    __in DELTA_FILE_TYPE FileTypeSet,
    __in DELTA_FLAG_TYPE SetFlags,
    __in DELTA_FLAG_TYPE ResetFlags,
    __in LPCWSTR lpSourceName,
    __in LPCWSTR lpTargetName,
    __in_opt LPCWSTR lpSourceOptionsName,
    __in_opt LPCWSTR lpTargetOptionsName,
    __in DELTA_INPUT GlobalOptions,
    __in_opt const FILETIME *lpTargetFileTime,
    __in ALG_ID HashAlgId,
    __in LPCWSTR lpDeltaName
    );

#ifdef _UNICODE
#define CreateDelta                         CreateDeltaW
#else
#define CreateDelta                         CreateDeltaA
#endif /* _UNICODE */


/**
 * Calculates a hash for normalized source file in memory.
 * Normalization is based on source file type,
 * which is determined automatically according to the given file type set.
 * @param FileTypeSet   File type set.
 * @param HashAlgId     Algorithm for hashing.
 * @param Source        Source memory block.
 * @param lpHash        Result hash.
 * @return              TRUE if success, FALSE otherwise.
 */
BOOL
WINAPI
GetDeltaSignatureB(
    __in DELTA_FILE_TYPE FileTypeSet,
    __in ALG_ID HashAlgId,
    __in DELTA_INPUT Source,
    __out LPDELTA_HASH lpHash
    );

/**
 * Calculates a hash for normalized source file accessed by ASCII file name.
 * Normalization is based on source file type,
 * which is determined automatically according to the given file type set.
 * @param FileTypeSet   File type set.
 * @param HashAlgId     Algorithm for hashing.
 * @param lpSourceName  Source file name, ASCII.
 * @param lpHash        Result hash.
 * @return              TRUE if success, FALSE otherwise.
 */
BOOL
WINAPI
GetDeltaSignatureA(
    __in DELTA_FILE_TYPE FileTypeSet,
    __in ALG_ID HashAlgId,
    __in LPCSTR lpSourceName,
    __out LPDELTA_HASH lpHash
    );

/**
 * Calculates a hash for normalized source file accessed by Unicode file name.
 * Normalization is based on source file type,
 * which is determined automatically according to the given file type set.
 * @param FileTypeSet   File type set.
 * @param HashAlgId     Algorithm for hashing.
 * @param lpSourceName  Source file name, Unicode.
 * @param lpHash        Result hash.
 * @return              TRUE if success, FALSE otherwise.
 */
BOOL
WINAPI
GetDeltaSignatureW(
    __in DELTA_FILE_TYPE FileTypeSet,
    __in ALG_ID HashAlgId,
    __in LPCWSTR lpSourceName,
    __out LPDELTA_HASH lpHash
    );


#ifdef _UNICODE
#define GetDeltaSignature                   GetDeltaSignatureW
#else
#define GetDeltaSignature                   GetDeltaSignatureA
#endif /* _UNICODE */

/**
 * Normalizes source buffer, normalization is  based on source file type, which is
 * determined automatically according to the given file type set.
 * @param FileTypeSet   File type set.
 * @param NormalizeFlags    Normalization flags.
 * @param NormalizeOptions  Normalization options.
 * @param lpSource      Pointer to source buffer.
 * @param uSourceSize   Size of source buffer in bytes.
 * @return              TRUE if success, FALSE otherwise.
 */
BOOL
WINAPI
DeltaNormalizeProvidedB(
    __in DELTA_FILE_TYPE FileTypeSet,
    __in DELTA_FLAG_TYPE NormalizeFlags,
    __in DELTA_INPUT NormalizeOptions,
    __inout_bcount( uSourceSize ) LPVOID lpSource,
    __in SIZE_T uSourceSize
    );

/**
 * Frees memory block allocated by msdelta.
 * @param lpMemory Pointer to memory block, previously allocated by msdelta.
 * @return TRUE if success, FALSE otherwise.
 */
BOOL
WINAPI
DeltaFree(
    __in LPVOID lpMemory
    );

#ifdef __cplusplus
}
#endif /* __cplusplus */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\msdrmdefs.h ===
#pragma once
/*
//-----------------------------------------------------------------------------
//
// File: msdrmdefs.h
//
// Copyright (C) 2001-2004 Microsoft Corporation.  All Rights Reserved.
//
//-----------------------------------------------------------------------------
*/

#ifndef __MSDRMDEFS_H_
#define __MSDRMDEFS_H_

#if !defined(__midl)
#ifndef _INC_WINDOWS
    #include <windows.h>
    #include <wtypes.h>
#endif // _INC_WINDOWS
#endif // __midl

typedef ULONG DRMHANDLE;
typedef ULONG DRMQUERYHANDLE;
typedef ULONG DRMENVHANDLE;

typedef ULONG DRMHSESSION;
typedef ULONG DRMPUBHANDLE;


#define DRMHANDLE_INVALID       0
#define DRMENVHANDLE_INVALID    0
#define DRMQUERYHANDLE_INVALID  0

#define DRMHSESSION_INVALID     0
#define DRMPUBHANDLE_INVALID    0


#define UDAPICALL __stdcall

#ifdef __cplusplus
#define DRMEXPORT extern "C"
#else
#define DRMEXPORT __declspec(dllexport)
#endif

#ifndef IN
    #define IN
#endif
#ifndef OUT
    #define OUT
#endif

const UINT DRMIDVERSION = 0;
typedef struct _DRMID {

    UINT  uVersion;
    PWSTR wszIDType;
    PWSTR wszID;

    #ifdef __cplusplus

    _DRMID() : uVersion(DRMIDVERSION),
               wszIDType(NULL),
               wszID(NULL)
    {
    }

    _DRMID(__in_opt PWSTR wszTypein,
           __in_opt PWSTR wszIDin) : uVersion(DRMIDVERSION),
                            wszIDType(wszTypein),
                            wszID(wszIDin)
    {
    }

    #endif

} DRMID;

// DRM flag sets

typedef enum _DRMTIMETYPE { DRMTIMETYPE_SYSTEMUTC,
                            DRMTIMETYPE_SYSTEMLOCAL }
              DRMTIMETYPE;

typedef enum _DRMENCODINGTYPE { DRMENCODINGTYPE_BASE64,
                                DRMENCODINGTYPE_STRING,
                                DRMENCODINGTYPE_LONG,
                                DRMENCODINGTYPE_TIME,
                                DRMENCODINGTYPE_UINT,
                                DRMENCODINGTYPE_RAW }
              DRMENCODINGTYPE;

typedef enum _DRMATTESTTYPE { DRMATTESTTYPE_FULLENVIRONMENT,
                              DRMATTESTTYPE_HASHONLY }
              DRMATTESTTYPE;

typedef enum _DRMSPECTYPE { DRMSPECTYPE_UNKNOWN,
                            DRMSPECTYPE_FILENAME }
              DRMSPECTYPE;

// security provider types
typedef enum _DRMSECURITYPROVIDERTYPE { DRMSECURITYPROVIDERTYPE_SOFTWARESECREP }
              DRMSECURITYPROVIDERTYPE;

typedef enum _DRMGLOBALOPTIONS  { DRMGLOBALOPTIONS_USE_WINHTTP,
                                  DRMGLOBALOPTIONS_USE_SERVERSECURITYPROCESSOR }
              DRMGLOBALOPTIONS;

const UINT DRMBOUNDLICENSEPARAMSVERSION = 1;
typedef struct _DRMBOUNDLICENSEPARAMS {    

    UINT        uVersion;
    DRMHANDLE   hEnablingPrincipal;
    DRMHANDLE   hSecureStore;          // reserved for future, must be NULL for now
    PWSTR       wszRightsRequested;
    PWSTR       wszRightsGroup;
    DRMID       idResource;
    UINT        cAuthenticatorCount;   // reserved for future, must be 0 for now
    DRMHANDLE*  rghAuthenticators;     // reserved for future, must be NULL for now
    PWSTR       wszDefaultEnablingPrincipalCredentials;    

    DWORD       dwFlags;

#ifdef __cplusplus
    _DRMBOUNDLICENSEPARAMS() : uVersion(DRMBOUNDLICENSEPARAMSVERSION),
                               hEnablingPrincipal(NULL),
                               hSecureStore(NULL),
                               wszRightsRequested(NULL),
                               wszRightsGroup(NULL),
                               cAuthenticatorCount(0),
                               rghAuthenticators(NULL),
                               wszDefaultEnablingPrincipalCredentials(NULL),
                               idResource(NULL,NULL),
                               dwFlags(0)
    {
    }
#endif // #ifdef __cplusplus

} DRMBOUNDLICENSEPARAMS;

// flags for the dwFlags parameter of the binding parameters structure
const DWORD DRMBINDINGFLAGS_IGNORE_VALIDITY_INTERVALS = 0x1;



const UINT DRMLICENSEACQDATAVERSION = 0;
typedef struct _DRM_LICENSE_ACQ_DATA
{    
    UINT    uVersion;
    PWSTR   wszURL;
    PWSTR   wszLocalFilename;
    BYTE*   pbPostData;
    DWORD   dwPostDataSize;
    PWSTR   wszFriendlyName;

#ifdef __cplusplus
    _DRM_LICENSE_ACQ_DATA() : uVersion(DRMLICENSEACQDATAVERSION),
                              wszURL(NULL),
                              wszLocalFilename(NULL),
                              pbPostData(NULL),
                              dwPostDataSize(NULL),
                              wszFriendlyName(NULL)
    {
    }
#endif // #ifdef __cplusplus
} DRM_LICENSE_ACQ_DATA;

const UINT DRMACTSERVINFOVERSION = 0;
typedef struct _DRM_ACTSERV_INFO
{    
    UINT    uVersion;
    PWSTR   wszPubKey;
    PWSTR   wszURL;

#ifdef __cplusplus
    _DRM_ACTSERV_INFO() : uVersion(DRMACTSERVINFOVERSION),
                          wszPubKey(NULL),
                          wszURL(NULL)
    {
    }
#endif // #ifdef __cplusplus
} DRM_ACTSERV_INFO;

const UINT DRMCLIENTSTRUCTVERSION = 1;
typedef struct _DRM_CLIENT_VERSION_INFO {    

    UINT        uStructVersion;
    DWORD       dwVersion[4];
    WCHAR       wszHierarchy[256];
    WCHAR       wszProductId[256];
    WCHAR       wszProductDescription[256];

#ifdef __cplusplus
    _DRM_CLIENT_VERSION_INFO() : uStructVersion(DRMCLIENTSTRUCTVERSION)
    {
        dwVersion[0] = 0;
        dwVersion[1] = 0;
        dwVersion[2] = 0;
        dwVersion[3] = 0;
        wszHierarchy[0] = 0;
        wszProductId[0] = 0;
        wszProductDescription[0] = 0;
    }
#endif // #ifdef __cplusplus

} DRM_CLIENT_VERSION_INFO;

typedef enum _DRM_STATUS_MSG
{
    DRM_MSG_ACTIVATE_MACHINE,
    DRM_MSG_ACTIVATE_GROUPIDENTITY,
    DRM_MSG_ACQUIRE_LICENSE,
    DRM_MSG_ACQUIRE_ADVISORY,
    DRM_MSG_SIGN_ISSUANCE_LICENSE,
    DRM_MSG_ACQUIRE_CLIENTLICENSOR,
    DRM_MSG_ACQUIRE_ISSUANCE_LICENSE_TEMPLATE
}DRM_STATUS_MSG;

typedef enum _DRM_USAGEPOLICY_TYPE
{
    DRM_USAGEPOLICY_TYPE_BYNAME,
    DRM_USAGEPOLICY_TYPE_BYPUBLICKEY,
    DRM_USAGEPOLICY_TYPE_BYDIGEST,
    DRM_USAGEPOLICY_TYPE_OSEXCLUSION
}DRM_USAGEPOLICY_TYPE;


// DRM_ACQUIRE_LICENSE_FLAGS

#define DRM_AL_NONSILENT        0x01    // Acquire non-silently
#define DRM_AL_NOPERSIST        0x02    // Don't persist the license
#define DRM_AL_CANCEL           0x04    // Cancel previous request
#define DRM_AL_FETCHNOADVISORY  0x08    // Don't acquire advisories
#define DRM_AL_NOUI             0x10    // Don't display any Authentication UI


// DRM_ACTIVATION_FLAGS

#define DRM_ACTIVATE_MACHINE                0x01    // Activate machine
#define DRM_ACTIVATE_GROUPIDENTITY          0x02    // Activate Group Identity
#define DRM_ACTIVATE_TEMPORARY              0x04    // Temporary certificate
#define DRM_ACTIVATE_CANCEL                 0x08    // Cancel previous request
#define DRM_ACTIVATE_SILENT                 0x10    // Silent Activation
#define DRM_ACTIVATE_SHARED_GROUPIDENTITY   0x20    // Shared Group Identity certificate
#define DRM_ACTIVATE_DELAYED                0x40    // Delayed activation


//  DRM_ENUMERATE_LICENSE_FLAGS

#define DRM_EL_MACHINE                      0x0001
#define DRM_EL_GROUPIDENTITY                0x0002
#define DRM_EL_GROUPIDENTITY_NAME           0x0004
#define DRM_EL_GROUPIDENTITY_LID            0x0008
#define DRM_EL_SPECIFIED_GROUPIDENTITY      0x0010
#define DRM_EL_EUL                          0x0020
#define DRM_EL_EUL_LID                      0x0040
#define DRM_EL_CLIENTLICENSOR               0x0080
#define DRM_EL_CLIENTLICENSOR_LID           0x0100
#define DRM_EL_SPECIFIED_CLIENTLICENSOR     0x0200
#define DRM_EL_REVOCATIONLIST               0x0400
#define DRM_EL_REVOCATIONLIST_LID           0x0800
#define DRM_EL_EXPIRED                      0x1000
#define DRM_EL_ISSUERNAME                   0x2000
#define DRM_EL_ISSUANCELICENSE_TEMPLATE     0x4000
#define DRM_EL_ISSUANCELICENSE_TEMPLATE_LID 0x8000


//DRM_ADD_LICENSE_FLAGS
#define DRM_ADD_LICENSE_NOPERSIST           0x00
#define DRM_ADD_LICENSE_PERSIST             0x01


//DRM_SERVICE_TYPE
#define DRM_SERVICE_TYPE_ACTIVATION         0x01
#define DRM_SERVICE_TYPE_CERTIFICATION      0x02
#define DRM_SERVICE_TYPE_PUBLISHING         0x04
#define DRM_SERVICE_TYPE_CLIENTLICENSOR     0x08
#define DRM_SERVICE_TYPE_SILENT             0x10

//DRM_SERVICE_LOCATION
#define DRM_SERVICE_LOCATION_INTERNET       0x01
#define DRM_SERVICE_LOCATION_ENTERPRISE     0x02

//GROUPID Provider Type
#define DRM_DEFAULTGROUPIDTYPE_WINDOWSAUTH L"WindowsAuthProvider"
#define DRM_DEFAULTGROUPIDTYPE_PASSPORT    L"PassportAuthProvider"

//ISSUANCE LICENSE SIGN
#define DRM_SIGN_ONLINE                0x01
#define DRM_SIGN_OFFLINE               0x02
#define DRM_SIGN_CANCEL                0x04
#define DRM_SERVER_ISSUANCELICENSE     0x08
#define DRM_AUTO_GENERATE_KEY          0x10
#define DRM_OWNER_LICENSE_NOPERSIST    0x20
#define DRM_REUSE_KEY                  0x40

// LOCKBOX TYPE
#define DRM_LOCKBOXTYPE_NONE        0x00
#define DRM_LOCKBOXTYPE_WHITEBOX    0x01
#define DRM_LOCKBOXTYPE_BLACKBOX    0x02
#define DRM_LOCKBOXTYPE_DEFAULT     DRM_LOCKBOXTYPE_BLACKBOX

// Template Distribution

#define DRM_AILT_NONSILENT          0x01
#define DRM_AILT_OBTAIN_ALL         0x02
#define DRM_AILT_CANCEL             0x04


typedef enum _DRM_DISTRIBUTION_POINT_INFO
{
    DRM_DISTRIBUTION_POINT_LICENSE_ACQUISITION,
    DRM_DISTRIBUTION_POINT_PUBLISHING,
    DRM_DISTRIBUTION_POINT_REFERRAL_INFO
}DRM_DISTRIBUTION_POINT_INFO;



//    DRM Callback
const UINT DRMCALLBACKVERSION = 1;
typedef HRESULT (__stdcall *DRMCALLBACK)(DRM_STATUS_MSG,HRESULT,void*,void*);


#endif // #ifndef __MSDRMDEFS_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\msdrmgetinfo.h ===
#pragma once
/*
//-----------------------------------------------------------------------------
//
// File: msdrmgetinfo.h
//
// Copyright (C) 2001-2004 Microsoft Corporation.  All Rights Reserved.
//
//-----------------------------------------------------------------------------
*/

#ifndef __MSDRMGETINFO_H_
#define __MSDRMGETINFO_H_

#include "msdrm.h"

/*

The following codes are used to indicate where the various query strings may be used:

for example, GI(*) means that all DRMHANDLES may be asked the indicated question using DRMGetInfo &
             GI(hEnv) means on environment handle only

GI: DRMGetInfo
GULA: DRMGetUnboundLicenceAttribute
GULO: DRMGetUnboundLicenseObject
GBLA: DRMGetBoundLicenseAttribute
GBLO: DRMGetBoundLicenseObject

*/

const PWSTR     g_wszTAG_ASCII = L"ASCII Tag",
                g_wszTAG_XRML = L"XrML Tag",
                g_wszTAG_FILENAME = L"filename",
                g_wszTAG_MSGUID = L"MS-GUID",

                g_wszPLUG_STANDARDENABLINGPRINCIPAL = L"UDStdPlg Enabling Principal",
                g_wszPLUG_STANDARDRIGHTSINTERPRETER = L"XrMLv2a",
                g_wszPLUG_STANDARDEBDECRYPTOR = L"UDStdPlg Enabling Bits Decryptor",
                g_wszPLUG_STANDARDEBENCRYPTOR = L"UDStdPlg Enabling Bits Encryptor",
                g_wszPLUG_STANDARDEBCRYPTOPROVIDER = L"UDStdPlg Enabling Bits Crypto Provider",
                g_wszPLUG_STANDARDLIBRARY = L"UDStdPlg",

                g_wszALGORITHMID_DES = L"DES",
                g_wszALGORITHMID_COCKTAIL = L"COCKTAIL",
                g_wszALGORITHMID_AES = L"AES",
                g_wszALGORITHMID_RC4 = L"RC4",

                // QUERY CONSTANTS BELOW HERE ////////////////////////////////////////////////

                // GI(*)
                g_wszQUERY_OBJECTIDTYPE = L"object-id-type",
                g_wszQUERY_OBJECTID = L"object-id",

                // GBLA(on a bound right object), GULA(on a principal object, rights group, right, & work)
                g_wszQUERY_NAME = L"name",

                // GBLA(on a bound license)
                g_wszQUERY_CONTENTIDTYPE = L"content-id-type",
                g_wszQUERY_CONTENTIDVALUE = L"content-id-value",
                g_wszQUERY_CONTENTSKUTYPE = L"content-sku-type",
                g_wszQUERY_CONTENTSKUVALUE = L"content-sku-value",

                // GI(hEnv)
                g_wszQUERY_MANIFESTSOURCE = L"manifest-xrml",
                g_wszQUERY_MACHINECERTSOURCE = L"machine-certificate-xrml",

                // GI(hEnv)
                g_wszQUERY_APIVERSION = L"api-version",
                g_wszQUERY_SECREPVERSION = L"secrep-version",

                // GI(hCrypto)
                g_wszQUERY_BLOCKSIZE  = L"block-size",
                g_wszQUERY_SYMMETRICKEYTYPE  = L"symmetric-key-type";

                // GULO(on a condition list), GBLO(on a bound right)
const PWSTR     g_wszQUERY_ACCESSCONDITION = L"access-condition",

                // GULA(on a principal)
                g_wszQUERY_ADDRESSTYPE = L"address-type",
                g_wszQUERY_ADDRESSVALUE = L"address-value",

                g_wszQUERY_APPDATANAME = L"appdata-name",
                g_wszQUERY_APPDATAVALUE = L"appdata-value",

                // GULA(on a license, a work, and rights group, or a right)
                g_wszQUERY_CONDITIONLIST = L"condition-list",

                // GULO(on a license or revocation condition)
                g_wszQUERY_DISTRIBUTIONPOINT = L"distribution-point",

                g_wszQUERY_OBJECTTYPE = L"object-type",

                // GBLA(on a bound license)
                g_wszQUERY_ENABLINGPRINCIPALIDTYPE = L"enabling-principal-id-type",
                g_wszQUERY_ENABLINGPRINCIPALIDVALUE = L"enabling-principal-id-value",

                // GULO(on a license)
                g_wszQUERY_GROUPIDENTITYPRINCIPAL = L"group-identity-principal",

                // GULO(on an interval time condition)
                g_wszQUERY_FIRSTUSETAG = L"first-use-tag",

                // GULA(on a range time condition)
                g_wszQUERY_FROMTIME = L"from-time",

                // GULA(on a license, principal, or work)
                g_wszQUERY_IDTYPE = L"id-type",
                g_wszQUERY_IDVALUE = L"id-value",

                // GULO(on a license)
                g_wszQUERY_ISSUEDPRINCIPAL = L"issued-principal",

                // GULA(on a license)
                g_wszQUERY_ISSUEDTIME = L"issued-time",

                // GULO(on a license)
                g_wszQUERY_ISSUER = L"issuer",

                // GULO(on a work)
                g_wszQUERY_OWNER = L"owner",

                // GULO(on an access condition)
                g_wszQUERY_PRINCIPAL = L"principal",

                // GI(hEnablingPrincipal)
                g_wszQUERY_PRINCIPALIDVALUE = L"principal-id-value",
                g_wszQUERY_PRINCIPALIDTYPE = L"principal-id-type",

                // GULO(on a condition list)
                g_wszQUERY_RANGETIMECONDITION = L"rangetime-condition",
                g_wszQUERY_OSEXCLUSIONCONDITION = L"os-exclusion-condition",

                // GULA
                g_wszQUERY_INTERVALTIMECONDITION = L"intervaltime-condition",
                g_wszQUERY_INTERVALTIMEINTERVAL = L"intervaltime-interval",
                g_wszQUERY_MAXVERSION = L"max-version",
                g_wszQUERY_MINVERSION = L"min-version",

                // GULA(on a revocation condition)
                g_wszQUERY_REFRESHPERIOD = L"refresh-period",

                // GULO(on a condition list)
                g_wszQUERY_REVOCATIONCONDITION = L"revocation-condition",

                // GULO(on a rights group), GBLO(on a bound license)
                g_wszQUERY_RIGHT = L"right",

                // GULO(on a work)
                g_wszQUERY_RIGHTSGROUP = L"rights-group",

                // GULA(on a right), GBLA(on a bound right)
                g_wszQUERY_RIGHTSPARAMETERNAME = L"rights-parameter-name",
                g_wszQUERY_RIGHTSPARAMETERVALUE = L"rights-parameter-value",

                // GULA(on a work)
                g_wszQUERY_SKUTYPE = L"sku-type",
                g_wszQUERY_SKUVALUE = L"sku-value",

                // GULA(on an interval time or metered time condition)
                g_wszQUERY_TIMEINTERVAL = L"time-interval",

                // GULA(on a range time condition)
                g_wszQUERY_UNTILTIME = L"until-time",

                // GULA(on a license)
                g_wszQUERY_VALIDITYFROMTIME = L"valid-from",
                g_wszQUERY_VALIDITYUNTILTIME = L"valid-until",

                // GULO(on a license)
                g_wszQUERY_WORK = L"work";

#endif // __MSDRMGETINFO_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\msdrmerror.h ===
#pragma once
/*
//-----------------------------------------------------------------------------
//
// File: msdrmerror.h
//
// Copyright (C) 2001-2004 Microsoft Corporation.  All Rights Reserved.
//
//
//-----------------------------------------------------------------------------
*/

#ifndef __MSDRMERROR_H_
#define __MSDRMERROR_H_

#define GetLastHR()                 HRESULT_FROM_WIN32(::GetLastError())

#define MSDRM_MAKE_ERROR(z,e)       MAKE_HRESULT(1,FACILITY_ITF,((z)|(e)))
#define MSDRM_MAKE_WARNING(z,w)     MAKE_HRESULT(0,FACILITY_ITF,((z)|(w)))


// Microsoft RM client error codes

#ifndef E_DRM_INSUFFICIENT_BUFFER
  #define E_DRM_INSUFFICIENT_BUFFER __HRESULT_FROM_WIN32(ERROR_INSUFFICIENT_BUFFER)
#endif

////////

#define MSDRM_CLIENT_ZONE  0xCF00 // zone for client API errors
#define MSDRM_POLICY_ZONE  0x9300

// licenses /////////////////////////////////////////////////////////////////
//      E_DRM_INVALID_LICENSE                      0x8004CF00
#define E_DRM_INVALID_LICENSE                      MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x00)

//      E_DRM_INFO_NOT_IN_LICENSE                  0x8004CF01
#define E_DRM_INFO_NOT_IN_LICENSE                  MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x01)

//      E_DRM_INVALID_LICENSE_SIGNATURE            0x8004CF02
#define E_DRM_INVALID_LICENSE_SIGNATURE            MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x02)

//      E_DRM_ENCRYPTION_NOT_PERMITTED             0x8004CF04
#define E_DRM_ENCRYPTION_NOT_PERMITTED             MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x04)

//      E_DRM_RIGHT_NOT_GRANTED                    0x8004CF05
#define E_DRM_RIGHT_NOT_GRANTED                    MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x05)

//      E_DRM_INVALID_VERSION                      0x8004CF06
#define E_DRM_INVALID_VERSION                      MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x06)

//      E_DRM_INVALID_ENCODING_TYPE                0x8004CF07
#define E_DRM_INVALID_ENCODING_TYPE                MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x07)

//      E_DRM_INVALID_NUMERICAL_VALUE              0x8004CF08
#define E_DRM_INVALID_NUMERICAL_VALUE              MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x08)

//      E_DRM_INVALID_ALGORITHM_TYPE               0x8004CF09
#define E_DRM_INVALID_ALGORITHM_TYPE               MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x09)


// environments /////////////////////////////////////////////////////////////

//      E_DRM_ENV_NOT_LOADED                       0x8004CF0A
#define E_DRM_ENV_NOT_LOADED                       MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x0A)

//      E_DRM_ENV_CANNOT_LOAD                      0x8004CF0B
#define E_DRM_ENV_CANNOT_LOAD                      MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x0B)

//      E_DRM_TOO_MANY_LOADED_ENVIRONMENTS         0x8004CF0C
#define E_DRM_TOO_MANY_LOADED_ENVIRONMENTS         MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x0C)

//      E_DRM_INCOMPATIBLE_OBJECTS                 0x8004CF0E
#define E_DRM_INCOMPATIBLE_OBJECTS                 MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x0E)


// libraries /////////////////////////////////////////////////////////////

//      E_DRM_LIB_FAIL                             0x8004CF0F
#define E_DRM_LIB_FAIL                             MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x0F)

// miscellany /////////////////////////////////////////////////////////////

//      E_DRM_ENABLING_PRINCIPAL_FAILURE          0x8004CF10
#define E_DRM_ENABLING_PRINCIPAL_FAILURE          MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x10)

//      E_DRM_INFO_NOT_PRESENT                    0x8004CF11
#define E_DRM_INFO_NOT_PRESENT                    MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x11)

//      E_DRM_BAD_GET_INFO_QUERY                  0x8004CF12
#define E_DRM_BAD_GET_INFO_QUERY                  MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x12)

//      E_DRM_KEY_TYPE_UNSUPPORTED                0x8004CF13
#define E_DRM_KEY_TYPE_UNSUPPORTED                MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x13)

//      E_DRM_CRYPTO_OPERATION_UNSUPPORTED        0x8004CF14
#define E_DRM_CRYPTO_OPERATION_UNSUPPORTED        MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x14)

//      E_DRM_CLOCK_ROLL_BACK_DETECTED            0x8004CF15
#define E_DRM_CLOCK_ROLL_BACK_DETECTED            MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x15)

//      E_DRM_QUERY_REPORTS_NO_RESULTS            0x8004CF16
#define E_DRM_QUERY_REPORTS_NO_RESULTS            MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x16)

//      E_DRM_UNEXPECTED_EXCEPTION                0x8004CF17
#define E_DRM_UNEXPECTED_EXCEPTION                MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x17)

// binding errors ///////////////////////////////////////////////////////////

//      E_DRM_BIND_VALIDITY_TIME_VIOLATED         0x8004CF18
#define E_DRM_BIND_VALIDITY_TIME_VIOLATED         MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x18)

//      E_DRM_BROKEN_CERT_CHAIN                   0x8004CF19
#define E_DRM_BROKEN_CERT_CHAIN                   MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x19)

//      E_DRM_BIND_POLICY_VIOLATION               0x8004CF1B
#define E_DRM_BIND_POLICY_VIOLATION               MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x1B)

//      E_DRM_MANIFEST_POLICY_VIOLATION           0x8004930C
#define E_DRM_MANIFEST_POLICY_VIOLATION           MSDRM_MAKE_ERROR(MSDRM_POLICY_ZONE,0x000C)

//      E_DRM_BIND_REVOKED_LICENSE                0x8004CF1C
#define E_DRM_BIND_REVOKED_LICENSE                MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x1C)

//      E_DRM_BIND_REVOKED_ISSUER                 0x8004CF1D
#define E_DRM_BIND_REVOKED_ISSUER                 MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x1D)

//      E_DRM_BIND_REVOKED_PRINCIPAL              0x8004CF1E
#define E_DRM_BIND_REVOKED_PRINCIPAL              MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x1E)

//      E_DRM_BIND_REVOKED_RESOURCE               0x8004CF1F
#define E_DRM_BIND_REVOKED_RESOURCE               MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x1F)

//      E_DRM_BIND_REVOKED_MODULE                 0x8004CF20
#define E_DRM_BIND_REVOKED_MODULE                 MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x20)

//      E_DRM_BIND_CONTENT_NOT_IN_EUL             0x8004CF21
#define E_DRM_BIND_CONTENT_NOT_IN_EUL             MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x21)

//      E_DRM_BIND_ACCESS_PRINCIPAL_NOT_ENABLING  0x8004CF22
#define E_DRM_BIND_ACCESS_PRINCIPAL_NOT_ENABLING  MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x22)

//      E_DRM_BIND_ACCESS_UNSATISFIED             0x8004CF23
#define E_DRM_BIND_ACCESS_UNSATISFIED             MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x23)

//      E_DRM_BIND_INDICATED_PRINCIPAL_MISSING    0x8004CF24
#define E_DRM_BIND_INDICATED_PRINCIPAL_MISSING    MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x24)

//      E_DRM_BIND_MACHINE_NOT_FOUND_IN_GROUP_IDENTITY 0x8004CF25
#define E_DRM_BIND_MACHINE_NOT_FOUND_IN_GROUP_IDENTITY MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x25)

//      E_DRM_LIB_UNSUPPORTED_PLUGIN              0x8004CF26
#define E_DRM_LIB_UNSUPPORTED_PLUGIN              MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x26)

//      E_DRM_BIND_REVOCATION_LIST_STALE          0x8004CF27
#define E_DRM_BIND_REVOCATION_LIST_STALE          MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x27)

//      E_DRM_BIND_NO_APPLICABLE_REVOCATION_LIST  0x8004CF28
#define E_DRM_BIND_NO_APPLICABLE_REVOCATION_LIST  MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x28)

//      E_DRM_INVALID_HANDLE                      0x8004CF2C
#define E_DRM_INVALID_HANDLE                      MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x2C)

//      E_DRM_BIND_INTERVALTIME_VIOLATED          0x8004CF2F
#define E_DRM_BIND_INTERVALTIME_VIOLATED          MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x2F)

//      E_DRM_BIND_NO_SATISFIED_RIGHTS_GROUP      0x8004CF30
#define E_DRM_BIND_NO_SATISFIED_RIGHTS_GROUP      MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x30)

//      E_DRM_BIND_SPECIFIED_WORK_MISSING         0x8004CF31
#define E_DRM_BIND_SPECIFIED_WORK_MISSING         MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x31)


// client SDK error codes

//      E_DRM_NO_MORE_DATA                        0x8004CF33
#define E_DRM_NO_MORE_DATA                        MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x33)

//      E_DRM_LICENSEACQUISITIONFAILED            0x8004CF34
#define E_DRM_LICENSEACQUISITIONFAILED            MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x34)

//      E_DRM_ID_MISMATCH                         0x8004CF35
#define E_DRM_ID_MISMATCH                         MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x35)

//      E_DRM_TOO_MANY_CERTS                      0x8004CF36
#define E_DRM_TOO_MANY_CERTS                      MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x36)

//      E_DRM_NO_DPURL_FOUND                      0x8004CF37
#define E_DRM_NO_DPURL_FOUND                      MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x37)

//      E_DRM_ALREADY_IN_PROGRESS                 0x8004CF38
#define E_DRM_ALREADY_IN_PROGRESS                 MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x38)

//      E_DRM_GROUPID_NOT_SET                     0x8004CF39
#define E_DRM_GROUPID_NOT_SET                     MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x39)

//      E_DRM_RECORD_NOT_FOUND                    0x8004CF3A
#define E_DRM_RECORD_NOT_FOUND                    MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x3A)


//      E_DRM_NO_CONNECT                          0x8004CF3B
#define E_DRM_NO_CONNECT                          MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x3B)

//      E_DRM_NO_LICENSE                          0x8004CF3C
#define E_DRM_NO_LICENSE                          MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x3C)

//      E_DRM_NEEDS_MACHINE_ACTIVATION            0x8004CF3D
#define E_DRM_NEEDS_MACHINE_ACTIVATION            MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x3D)

//      E_DRM_NEEDS_GROUPIDENTITY_ACTIVATION      0x8004CF3E
#define E_DRM_NEEDS_GROUPIDENTITY_ACTIVATION      MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x3E)

//      E_DRM_ACTIVATIONFAILED                    0x8004CF40
#define E_DRM_ACTIVATIONFAILED                    MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x40)

//      E_DRM_ABORTED                             0x8004CF41
#define E_DRM_ABORTED                             MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x41)

//      E_DRM_OUT_OF_QUOTA                        0x8004CF42
#define E_DRM_OUT_OF_QUOTA                        MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x42)

//      E_DRM_AUTHENTICATION_FAILED               0x8004CF43
#define E_DRM_AUTHENTICATION_FAILED               MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x43)

//      E_DRM_SERVER_ERROR                        0x8004CF44
#define E_DRM_SERVER_ERROR                        MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x44)

//      E_DRM_INSTALLATION_FAILED                 0x8004CF45
#define E_DRM_INSTALLATION_FAILED                 MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x45)

//      E_DRM_HID_CORRUPTED                       0x8004CF46
#define E_DRM_HID_CORRUPTED                       MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x46)

//      E_DRM_INVALID_SERVER_RESPONSE             0x8004CF47
#define E_DRM_INVALID_SERVER_RESPONSE             MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x47)

//      E_DRM_SERVICE_NOT_FOUND                   0x8004CF48
#define E_DRM_SERVICE_NOT_FOUND                   MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x48)

//      E_DRM_USE_DEFAULT                         0x8004CF49
#define E_DRM_USE_DEFAULT                         MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x49)

//      E_DRM_SERVER_NOT_FOUND                    0x8004CF4A
#define E_DRM_SERVER_NOT_FOUND                    MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x4A)

//      E_DRM_INVALID_EMAIL                       0x8004CF4B
#define E_DRM_INVALID_EMAIL                       MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x4B)

//      E_DRM_VALIDITYTIME_VIOLATION              0x8004CF4C
#define E_DRM_VALIDITYTIME_VIOLATION              MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x4C)

//      E_DRM_OUTDATED_MODULE                     0x8004CF4D
#define E_DRM_OUTDATED_MODULE                     MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x4D)

//      E_DRM_SERVICE_MOVED                       0x8004CF5B
#define E_DRM_SERVICE_MOVED                       MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x5B)

//      E_DRM_SERVICE_GONE                        0x8004CF5C
#define E_DRM_SERVICE_GONE                        MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x5C)

//      E_DRM_AD_ENTRY_NOT_FOUND                  0x8004CF5D
#define E_DRM_AD_ENTRY_NOT_FOUND                  MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x5D)

//      E_DRM_NOT_A_CHAIN                         0x8004CF5E
#define E_DRM_NOT_A_CHAIN                         MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x5E)

//      E_DRM_REQUEST_DENIED                      0x8004CF5F
#define E_DRM_REQUEST_DENIED                      MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x5F)


// Publishing SDK Error Codes

//      E_DRM_NOT_SET                             0x8004CF4E
#define E_DRM_NOT_SET                             MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x4E)

//      E_DRM_METADATA_NOT_SET                    0x8004CF4F
#define E_DRM_METADATA_NOT_SET                    MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x4F)

//      E_DRM_REVOCATIONINFO_NOT_SET              0x8004CF50
#define E_DRM_REVOCATIONINFO_NOT_SET              MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x50)

//      E_DRM_INVALID_TIMEINFO                    0x8004CF51
#define E_DRM_INVALID_TIMEINFO                    MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x51)

//      E_DRM_RIGHT_NOT_SET                       0x8004CF52
#define E_DRM_RIGHT_NOT_SET                       MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x52)


// NTLM Credential checking

//      E_DRM_BIND_NTLM_FAIL                      0x8004CF53
#define E_DRM_BIND_NTLM_FAIL                      MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x53)

//      E_DRM_INVALID_ISSUANCELICENSE_TEMPLATE    0x8004CF54
#define E_DRM_INVALID_ISSUANCELICENSE_TEMPLATE    MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x54)

//      E_DRM_INVALID_KEY_LENGTH                  0x8004CF55
#define E_DRM_INVALID_KEY_LENGTH                  MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x55)

//      E_DRM_EXPIRED_OFFICIAL_ISSUANCELICENSE_TEMPLATE     0x8004CF57
#define E_DRM_EXPIRED_OFFICIAL_ISSUANCELICENSE_TEMPLATE     MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x57)

//      E_DRM_INVALID_CLIENT_LICENSOR_CERTIFICATE           0x8004CF58
#define E_DRM_INVALID_CLIENT_LICENSOR_CERTIFICATE           MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x58)


//      E_DRM_HID_INVALID                         0x8004CF59
#define E_DRM_HID_INVALID                         MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x59)

//      E_DRM_EMAIL_NOT_VERIFIED                  0x8004CF5A
#define E_DRM_EMAIL_NOT_VERIFIED                  MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x5A)

//      E_DRM_DEBUGGER_DETECTED                   0x8004CF60
#define E_DRM_DEBUGGER_DETECTED                   MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x60)


//    License Acquisition Success Codes


//      S_DRM_REQUEST_PREPARED                    0x0004CF00
#define S_DRM_REQUEST_PREPARED                    MSDRM_MAKE_WARNING(MSDRM_CLIENT_ZONE,0x00)

//Activation Success Codes

//      S_DRM_ALREADY_ACTIVATED                   0x0004CF01
#define S_DRM_ALREADY_ACTIVATED                   MSDRM_MAKE_WARNING(MSDRM_CLIENT_ZONE,0x01)

// Callback Success Codes

//      S_DRM_CONNECTING                          0x0004CF02
#define S_DRM_CONNECTING                          MSDRM_MAKE_WARNING(MSDRM_CLIENT_ZONE,0x02)

//      S_DRM_CONNECTED                           0x0004CF03
#define S_DRM_CONNECTED                           MSDRM_MAKE_WARNING(MSDRM_CLIENT_ZONE,0x03)

//      S_DRM_COMPLETED                           0x0004CF04
#define S_DRM_COMPLETED                           MSDRM_MAKE_WARNING(MSDRM_CLIENT_ZONE,0x04)

//      S_DRM_INPROGRESS                          0x0004CF05
#define S_DRM_INPROGRESS                          MSDRM_MAKE_WARNING(MSDRM_CLIENT_ZONE,0x05)


//      E_DRM_INVALID_LOCKBOX_TYPE                0x8004CF70
#define E_DRM_INVALID_LOCKBOX_TYPE                MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x70)

//      E_DRM_INVALID_LOCKBOX_PATH                0x8004CF71
#define E_DRM_INVALID_LOCKBOX_PATH                MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x71)

//      E_DRM_INVALID_REGISTRY_PATH               0x8004CF72
#define E_DRM_INVALID_REGISTRY_PATH               MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x72)

//      E_DRM_NO_AES_PROVIDER                     0x8004CF73
#define E_DRM_NO_AES_PROVIDER                     MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x73)

//      E_DRM_GLOBAL_OPTION_ALREADY_SET           0x8004CF74
#define E_DRM_GLOBAL_OPTION_ALREADY_SET           MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x74)

//      E_DRM_OWNER_LICENSE_NOT_FOUND             0x8004CF75
#define E_DRM_OWNER_LICENSE_NOT_FOUND             MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x75)

//      E_DRM_INVALID_WINDOW                      0x8004CF76
#define E_DRM_INVALID_WINDOW                      MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x76)

//      E_DRM_WINDOW_REGISTRATION_FAILED          0x8004CF77
#define E_DRM_WINDOW_REGISTRATION_FAILED          MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x77)

//      E_DRM_SAFEMODE_OS_DETECTED                0x8004CF78
#define E_DRM_SAFEMODE_OS_DETECTED                MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x78)

//      E_DRM_PLATFORM_POLICY_VIOLATION           0x8004CF79
#define E_DRM_PLATFORM_POLICY_VIOLATION           MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x79)

//      E_DRM_TEMPLATE_ACQUISITION_FAILED         0x8004CF80
#define E_DRM_TEMPLATE_ACQUISITION_FAILED         MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x80)

//      E_DRM_ISSUANCELICENSE_LENGTH_LIMIT_EXCEEDED         0x8004CF81
#define E_DRM_ISSUANCELICENSE_LENGTH_LIMIT_EXCEEDED         MSDRM_MAKE_ERROR(MSDRM_CLIENT_ZONE,0x81)

#endif // #ifndef __MSDRMERROR_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\msdrm.h ===
#pragma once

#ifndef __MSDRM_H_
#define __MSDRM_H_

//-----------------------------------------------------------------------------
//
// 
// File: msdrm.h
//
// Copyright (C) 2001-2004 Microsoft Corporation.  All Rights Reserved.
//
//-----------------------------------------------------------------------------

#include "msdrmdefs.h"

// environment & handle control

DRMEXPORT HRESULT UDAPICALL DRMSetGlobalOptions(
                    IN DRMGLOBALOPTIONS eGlobalOptions,
                    IN LPVOID pvdata,
                    IN DWORD  dwlen);

DRMEXPORT HRESULT UDAPICALL DRMGetClientVersion(
                    OUT DRM_CLIENT_VERSION_INFO   *pDRMClientVersionInfo);

DRMEXPORT HRESULT UDAPICALL DRMInitEnvironment (
                    IN DRMSECURITYPROVIDERTYPE eSecurityProviderType,
                    IN DRMSPECTYPE eSpecification,
                    __in_opt PWSTR wszSecurityProvider,
                    __in_opt PWSTR wszManifestCredentials,
                    __in     PWSTR wszMachineCredentials,
                    OUT DRMENVHANDLE* phEnv,
                    OUT DRMHANDLE* phDefaultLibrary);

DRMEXPORT HRESULT UDAPICALL DRMLoadLibrary (
                    IN DRMENVHANDLE hEnv,
                    IN DRMSPECTYPE eSpecification,
                    __in     PWSTR wszLibraryProvider,
                    __in_opt PWSTR wszCredentials,
                    OUT DRMHANDLE* phLibrary);

DRMEXPORT HRESULT UDAPICALL DRMCreateEnablingPrincipal (
                    IN DRMENVHANDLE hEnv,
                    IN DRMHANDLE hLibrary,
                    __in PWSTR wszObject,
                    IN DRMID* pidPrincipal,
                    __in PWSTR wszCredentials,
                    OUT DRMHANDLE* phEnablingPrincipal);

DRMEXPORT HRESULT UDAPICALL DRMCloseHandle(
                    IN DRMHANDLE handle);

DRMEXPORT HRESULT UDAPICALL DRMCloseEnvironmentHandle(
                    IN DRMENVHANDLE hEnv);

DRMEXPORT HRESULT UDAPICALL DRMDuplicateHandle(
                    IN DRMHANDLE hToCopy,
                    OUT DRMHANDLE* phCopy);

DRMEXPORT HRESULT UDAPICALL DRMDuplicateEnvironmentHandle(
                    IN DRMENVHANDLE hToCopy,
                    OUT DRMENVHANDLE* phCopy);
 
DRMEXPORT HRESULT UDAPICALL DRMRegisterRevocationList (
                    IN DRMENVHANDLE hEnv,
                    __in_opt PWSTR wszRevocationList);

DRMEXPORT HRESULT UDAPICALL DRMCheckSecurity(
                    IN DRMENVHANDLE hEnv,
                    IN UINT cLevel);

DRMEXPORT HRESULT UDAPICALL DRMRegisterContent(
                    IN BOOL fRegister);

// cryptographic functions 

DRMEXPORT HRESULT UDAPICALL DRMEncrypt (
                    IN DRMHANDLE hCryptoProvider,
                    IN UINT iPosition,
                    IN UINT cNumInBytes,
                    IN BYTE* pbInData,
                    IN OUT UINT* pcNumOutBytes,
                    OUT BYTE* pbOutData);

DRMEXPORT HRESULT UDAPICALL DRMDecrypt (
                    IN DRMHANDLE hCryptoProvider,
                    IN UINT iPosition,
                    IN UINT cNumInBytes,
                    IN BYTE* pbInData,
                    IN OUT UINT* pcNumOutBytes,
                    OUT BYTE* pbOutData);

// license binding and enabling bits

DRMEXPORT HRESULT UDAPICALL DRMCreateBoundLicense (
                    IN DRMENVHANDLE hEnv,
                    IN DRMBOUNDLICENSEPARAMS* pParams,
                    __in PWSTR wszLicenseChain,
                    OUT DRMHANDLE* phBoundLicense,
                    OUT DRMHANDLE* phErrorLog);

DRMEXPORT HRESULT UDAPICALL DRMCreateEnablingBitsDecryptor (
                    IN DRMHANDLE hBoundLicense,
                    __in_opt PWSTR wszRight,
                    IN DRMHANDLE hAuxLib,
                    __in_opt PWSTR wszAuxPlug,
                    OUT DRMHANDLE* phDecryptor);

DRMEXPORT HRESULT UDAPICALL DRMCreateEnablingBitsEncryptor (
                    IN DRMHANDLE hBoundLicense,
                    __in_opt PWSTR wszRight,
                    IN DRMHANDLE hAuxLib,
                    __in_opt PWSTR wszAuxPlug,
                    OUT DRMHANDLE* phEncryptor);

// inter-environment security attestation

DRMEXPORT HRESULT UDAPICALL DRMAttest (
                    IN DRMHANDLE hEnablingPrincipal,
                    __in PWSTR wszData,
                    IN DRMATTESTTYPE eType,
                    __inout UINT* pcAttestedBlob,
                    __out_ecount(*pcAttestedBlob) PWSTR wszAttestedBlob);


// miscellaneous calls and helper functions

DRMEXPORT HRESULT UDAPICALL DRMGetTime (
                    IN DRMENVHANDLE hEnv,
                    IN DRMTIMETYPE eTimerIdType,
                    OUT SYSTEMTIME* poTimeObject);

DRMEXPORT HRESULT UDAPICALL DRMGetInfo(
                    __in DRMHANDLE handle,
                    __in PWSTR wszAttribute,
                    __in DRMENCODINGTYPE* peEncoding,
                    __inout UINT* pcBuffer,
                    OUT BYTE* pbBuffer);

DRMEXPORT HRESULT UDAPICALL DRMGetEnvironmentInfo(
                    IN DRMENVHANDLE handle,
                    __in_opt PWSTR wszAttribute,
                    OUT DRMENCODINGTYPE* peEncoding,
                    IN OUT UINT* pcBuffer,
                    OUT BYTE* pbBuffer);

DRMEXPORT HRESULT UDAPICALL DRMGetProcAddress(
                    IN DRMHANDLE hLibrary,
                    __in PWSTR wszProcName,
                    OUT FARPROC* ppfnProcAddress);

// support for querying bound licenses

DRMEXPORT HRESULT UDAPICALL DRMGetBoundLicenseObjectCount(
                    IN DRMHANDLE hQueryRoot,
                    __in PWSTR wszSubObjectType,
                    OUT UINT* pcSubObjects);

DRMEXPORT HRESULT UDAPICALL DRMGetBoundLicenseObject(
                    IN DRMHANDLE hQueryRoot,
                    __in PWSTR wszSubObjectType,
                    IN UINT iWhich,
                    OUT DRMHANDLE* phSubObject);

DRMEXPORT HRESULT UDAPICALL DRMGetBoundLicenseAttributeCount(
                    IN DRMHANDLE hQueryRoot,
                    __in PWSTR wszAttribute,
                    OUT UINT* pcAttributes);

DRMEXPORT HRESULT UDAPICALL DRMGetBoundLicenseAttribute(
                    IN DRMHANDLE hQueryRoot,
                    __in PWSTR wszAttribute,
                    IN UINT iWhich,
                    OUT DRMENCODINGTYPE* peEncoding,
                    IN OUT UINT* pcBuffer,
                    OUT BYTE* pbBuffer);



DRMEXPORT HRESULT UDAPICALL DRMCreateClientSession(
                        IN  DRMCALLBACK  pfnCallback,            // Callback 
                        IN  UINT         uCallbackVersion,        // Version of the callback
                        __in     PWSTR        wszGroupIDProviderType, // one of WINDOWSAUTH/PASSPORT
                        __in_opt PWSTR        wszGroupID,             // Group ID
                        OUT DRMHSESSION* phClient );


DRMEXPORT HRESULT UDAPICALL DRMIsActivated(
                        IN  DRMHSESSION       hClient,      // Client session
                        IN  UINT              uFlags,       // One of DRM_ACTIVATE_MACHINE/GROUPIDENTITY
                        IN  DRM_ACTSERV_INFO* pActServInfo);// Optional activation server info


DRMEXPORT HRESULT UDAPICALL DRMActivate(
                        IN DRMHSESSION    hClient,            // Client session
                        IN UINT           uFlags,             // One/both: DRM_ACTIVATE_MACHINE/GROUPIDENTITY
                        IN UINT           uLangID,            // Language ID
                        IN DRM_ACTSERV_INFO* pActServInfo,  // Optional activation server info
                        IN VOID*          pvContext,          // Context used for callback
                        IN HWND           hParentWnd);        // Parent window Handle


DRMEXPORT HRESULT UDAPICALL DRMGetServiceLocation(
                        IN    DRMHSESSION    hClient,            // Client session
                        IN    UINT           uServiceType,       //One of DRM_SERVICE_TYPE
                        IN    UINT           uServiceLocation,   //One of DRM_SERVICE_LOCATION
                        __in_opt    PWSTR          wszIssuanceLicense, //Optional
                        IN OUT UINT*         puServiceURLLength,
                        __out_ecount_opt(*puServiceURLLength)   PWSTR          wszServiceURL);



//    LicenseStorage
DRMEXPORT HRESULT UDAPICALL DRMCreateLicenseStorageSession(
                        IN  DRMENVHANDLE hEnv,               // Environment Handle ( o/p of DRMInitEnvironment)
                        IN  DRMHANDLE    hDefaultLibrary,    // Default Library Handle (o/p of DRMInitEnvironment)
                        IN  DRMHSESSION  hClient,            // Client session
                        IN  UINT         uFlags,             // Reserved
                        __in  PWSTR        wszIssuanceLicense, // IssuanceLicense
                        OUT DRMHSESSION* phLicenseStorage);

DRMEXPORT HRESULT UDAPICALL DRMAddLicense(
                        IN DRMHSESSION  hLicenseStorage,    // LicenseStorage session
                        IN UINT         uFlags,             // One of DRM_ADD_LICENSE_FLAGS
                        __in PWSTR        wszLicense);        // License to add to the inmemory license store

DRMEXPORT HRESULT UDAPICALL DRMAcquireAdvisories(
                        IN    DRMHSESSION   hLicenseStorage,
                        __in    PWSTR         wszLicense,
                        __in_opt    PWSTR         wszURL,//Optional
                        IN    VOID*         pvContext);



DRMEXPORT HRESULT UDAPICALL DRMEnumerateLicense(
                        IN    DRMHSESSION  hSession,                   // Client/License Storage session
                        IN    UINT         uFlags,                     // One of DRM_ENUMERATE_LICENSE_FLAGS
                        IN    UINT         uIndex,                     // Cert index
                        IN OUT BOOL*       pfSharedFlag,               // Shared Flag
                        IN OUT UINT*       puCertificateDataLen,       // String Length of wszCertificateData buffer 
                        __out_ecount_opt(*puCertificateDataLen)   PWSTR        wszCertificateData );       // CertChain 

DRMEXPORT HRESULT UDAPICALL DRMAcquireLicense(
                        IN    DRMHSESSION  hSession,           //Client/License Storage session
                        IN    UINT         uFlags,             //DRM_ACQUIRE_LICENSE_FLAGS
                        __in_opt    PWSTR        wszGroupIdentityCredential,// Optional
                        __in_opt    PWSTR        wszRequestedRights, //RESERVED, must be NULL.
                        __in_opt    PWSTR        wszCustomData,      //Custom data that goes with the request
                        __in_opt    PWSTR        wszURL,             //
                        IN    VOID*        pvContext );

DRMEXPORT HRESULT UDAPICALL DRMDeleteLicense( 
                        IN DRMHSESSION  hSession,           //Client/License Storage session
                        __in PWSTR        wszLicenseId);


DRMEXPORT HRESULT UDAPICALL DRMCloseSession(
                        IN DRMHSESSION hSession);

DRMEXPORT HRESULT UDAPICALL DRMDuplicateSession(
                        IN  DRMHSESSION hSessionIn, 
                        OUT DRMHSESSION *phSessionOut);

DRMEXPORT HRESULT UDAPICALL DRMGetSecurityProvider(
                        IN    UINT      uFlags,
                        IN OUT UINT*    puTypeLen,
                        __out_ecount_opt(*puTypeLen)   PWSTR     wszType,
                        IN OUT UINT*    puPathLen,
                        __out_ecount_opt(*puPathLen)   PWSTR     wszPath);

DRMEXPORT HRESULT UDAPICALL DRMEncode(
                        __in PWSTR    wszAlgID,
                        IN UINT     uDataLen,
                        IN BYTE*    pbDecodedData,
                        IN OUT UINT* puEncodedStringLen,
                        __out_ecount_opt(*puEncodedStringLen) PWSTR   wszEncodedString);

DRMEXPORT HRESULT UDAPICALL DRMDecode(
                        __in PWSTR    wszAlgID,
                        __in PWSTR    wszEncodedString,
                        IN OUT UINT* puDecodedDataLen,
                        OUT BYTE*   pbDecodedData);

DRMEXPORT HRESULT UDAPICALL DRMConstructCertificateChain(
                        IN      UINT cCertificates,
                        __in_ecount(cCertificates)      PWSTR* rgwszCertificates,
                        IN OUT   UINT* pcChain,
                        __out_ecount_opt(*pcChain)     PWSTR wszChain);


// support for unbound license querying

DRMEXPORT HRESULT UDAPICALL DRMParseUnboundLicense(
                        __in      PWSTR wszCertificate,
                        OUT     DRMQUERYHANDLE* phQueryRoot);

DRMEXPORT HRESULT UDAPICALL DRMCloseQueryHandle(
                        IN      DRMQUERYHANDLE hQuery);

DRMEXPORT HRESULT UDAPICALL DRMGetUnboundLicenseObjectCount(
                        IN      DRMQUERYHANDLE hQueryRoot,
                        __in      PWSTR wszSubObjectType,
                        OUT     UINT* pcSubObjects);

DRMEXPORT HRESULT UDAPICALL DRMGetUnboundLicenseObject(
                        IN      DRMQUERYHANDLE hQueryRoot,
                        __in      PWSTR wszSubObjectType,
                        IN      UINT iIndex,
                        OUT     DRMQUERYHANDLE* phSubQuery);

DRMEXPORT HRESULT UDAPICALL DRMGetUnboundLicenseAttributeCount(
                        IN      DRMQUERYHANDLE hQueryRoot,
                        __in      PWSTR wszAttributeType,
                        OUT     UINT* pcAttributes);

DRMEXPORT HRESULT UDAPICALL DRMGetUnboundLicenseAttribute(
                        IN      DRMQUERYHANDLE hQueryRoot,
                        __in      PWSTR wszAttributeType,
                        IN      UINT iWhich,
                        OUT     DRMENCODINGTYPE* peEncoding,
                        IN OUT   UINT* pcBuffer,
                        OUT     BYTE* pbBuffer);

DRMEXPORT HRESULT UDAPICALL DRMGetCertificateChainCount(
                        __in      PWSTR wszChain,
                        OUT     UINT* pcCertCount);

DRMEXPORT HRESULT UDAPICALL DRMDeconstructCertificateChain(
                        __in      PWSTR wszChain,
                        IN      UINT iWhich,
                        IN OUT   UINT* pcCert,
                        __out_ecount_opt(*pcCert)     PWSTR wszCert);

DRMEXPORT HRESULT UDAPICALL DRMVerify (
                    __in_opt PWSTR wszData,
                    UINT* pcAttestedData,
                    __out_ecount_opt(*pcAttestedData) PWSTR wszAttestedData,
                    DRMATTESTTYPE* peType,
                    UINT* pcPrincipal,
                    __out_ecount_opt(*pcPrincipal) PWSTR wszPrincipal,
                    UINT* pcManifest,
                    __out_ecount_opt(*pcManifest) PWSTR wszManifest);




DRMEXPORT HRESULT UDAPICALL DRMCreateUser(
                                __in_opt  PWSTR           wszUserName,
                                __in_opt  PWSTR           wszUserId,
                                __in_opt  PWSTR           wszUserIdType,
                                OUT DRMPUBHANDLE*   phUser);


DRMEXPORT HRESULT UDAPICALL DRMCreateRight(
                                __in PWSTR           wszRightName,
                                IN  SYSTEMTIME*     pstFrom,
                                IN  SYSTEMTIME*     pstUntil,
                                IN  UINT            cExtendedInfo,
                                __in_ecount_opt(cExtendedInfo) PWSTR*          pwszExtendedInfoName,
                                __in_ecount_opt(cExtendedInfo) PWSTR*          pwszExtendedInfoValue,
                                OUT DRMPUBHANDLE    *phRight);

DRMEXPORT HRESULT UDAPICALL DRMCreateIssuanceLicense(
                                IN  SYSTEMTIME*     pstTimeFrom,
                                IN  SYSTEMTIME*     pstTimeUntil,
                                __in_opt  PWSTR           wszReferralInfoName,
                                __in_opt  PWSTR           wszReferralInfoURL,
                                IN  DRMPUBHANDLE    hOwner,//Use created using DRMCreateUser.

                                __in_opt  PWSTR           wszIssuanceLicense,//Issuance License Template or Signed Issuance License
                                IN  DRMHANDLE       hBoundLicense,
                                OUT DRMPUBHANDLE*   phIssuanceLicense);

    
DRMEXPORT HRESULT UDAPICALL DRMAddRightWithUser(
                                IN  DRMPUBHANDLE     hIssuanceLicense,
                                IN  DRMPUBHANDLE     hRight,
                                IN  DRMPUBHANDLE     hUser);

DRMEXPORT HRESULT UDAPICALL DRMClearAllRights(
                                IN  DRMPUBHANDLE     hIssuanceLicense);


DRMEXPORT HRESULT UDAPICALL DRMSetMetaData(
                                IN  DRMPUBHANDLE    hIssuanceLicense,
                                __in  PWSTR           wszContentId,
                                __in  PWSTR           wszContentIdType,
                                __in_opt  PWSTR           wszSKUId,
                                __in_opt  PWSTR           wszSKUIdType,
                                __in_opt  PWSTR           wszContentType,
                                __in_opt  PWSTR           wszContentName);

DRMEXPORT HRESULT UDAPICALL DRMSetUsagePolicy(
                                IN  DRMPUBHANDLE    hIssuanceLicense,
                                IN  DRM_USAGEPOLICY_TYPE eUsagePolicyType,
                                IN  BOOL            fDelete,
                                IN  BOOL            fExclusion,

                                __in_opt  PWSTR           wszName,//Set usage policy by Name
                                __in_opt  PWSTR           wszMinVersion,
                                __in_opt  PWSTR           wszMaxVersion,

                                __in_opt  PWSTR           wszPublicKey,//Set usage policy by public key

                                __in_opt  PWSTR           wszDigestAlgorithm,//Set usage policy by digest
                                IN  BYTE*           pbDigest,
                                IN  UINT            cbDigest);

DRMEXPORT HRESULT UDAPICALL DRMSetRevocationPoint(
                                IN  DRMPUBHANDLE    hIssuanceLicense,
                                IN  BOOL            fDelete,
                                __in  PWSTR           wszId,
                                __in  PWSTR           wszIdType,
                                __in  PWSTR           wszURL,
                                IN  SYSTEMTIME*     pstFrequency,
                                __in_opt  PWSTR           wszName,//Optional
                                __in_opt  PWSTR           wszPublicKey);

DRMEXPORT HRESULT UDAPICALL DRMSetApplicationSpecificData(
                                IN  DRMPUBHANDLE    hIssuanceLicense,
                                IN  BOOL            fDelete,
                                __in_opt  PWSTR           wszName,
                                __in_opt  PWSTR           wszValue);

DRMEXPORT HRESULT UDAPICALL DRMSetNameAndDescription(
                                IN   DRMPUBHANDLE    hIssuanceLicense,
                                IN   BOOL            fDelete,
                                IN   UINT            lcid,
                                __in_opt   PWSTR           wszName,
                                __in_opt   PWSTR           wszDescription);

DRMEXPORT HRESULT UDAPICALL DRMSetIntervalTime(
                                IN      DRMPUBHANDLE    hIssuanceLicense,
                                IN      UINT            cDays);


DRMEXPORT HRESULT UDAPICALL DRMGetIssuanceLicenseTemplate(
                                IN      DRMPUBHANDLE hIssuanceLicense,
                                IN OUT   UINT*       puIssuanceLicenseTemplateLength,
                                __out_ecount_opt(*puIssuanceLicenseTemplateLength)     PWSTR        wszIssuanceLicenseTemplate);


DRMEXPORT HRESULT UDAPICALL DRMGetSignedIssuanceLicense(
                                IN      DRMENVHANDLE hEnv,//Optional.Mandatory for DRM_SIGN_OFFLINE
                                IN      DRMPUBHANDLE hIssuanceLicense,
                                IN      UINT         uFlags,//DRM_SIGN_ONLINE/DRM_SIGN_OFFLINE/DRM_SIGN_CANCEL
                                
                                IN      BYTE*        pbSymKey,
                                IN      UINT         cbSymKey,
                                __in_opt      PWSTR        wszSymKeyType,
                                
                                __in_opt      PWSTR        wszClientLicensorCertificate,//Should be NULL for DRM_SIGN_ONLINE , not NULL otherwise
                                IN      DRMCALLBACK  pfnCallback,
                                __in_opt      PWSTR        wszURL,//Mandatory if uFlags is DRM_SIGN_ONLINE

                                IN      VOID*        pvContext);//Optional

DRMEXPORT HRESULT UDAPICALL DRMGetSignedIssuanceLicenseEx(
                                DRMENVHANDLE                hEnv,
                                DRMPUBHANDLE                hIssuanceLicense,
                                UINT                        uFlags,
    __in_bcount_opt(cbSymKey)   BYTE*                       pbSymKey,
                                UINT                        cbSymKey,
            __in_opt            PWSTR                       wszSymKeyType,                                
            __in_opt            PVOID                       pvReserved,                                
            __in                DRMHANDLE                   hEnablingPrincipal,
            __in                DRMHANDLE                   hBoundLicenseCLC,
            __in                DRMCALLBACK                 pfnCallback,
            __in                PVOID                       pvContext);

DRMEXPORT HRESULT UDAPICALL DRMClosePubHandle(
                                IN      DRMPUBHANDLE hPub);

DRMEXPORT HRESULT UDAPICALL DRMDuplicatePubHandle(
                                IN      DRMPUBHANDLE  hPubIn,
                                OUT     DRMPUBHANDLE* phPubOut);


DRMEXPORT HRESULT UDAPICALL DRMGetUserInfo(  
                                 IN     DRMPUBHANDLE    hUser,
                                 IN OUT UINT*           puUserNameLength,
                                 __out_ecount_opt(*puUserNameLength) PWSTR           wszUserName,
                                 IN OUT UINT*           puUserIdLength,
                                 __out_ecount_opt(*puUserIdLength) PWSTR           wszUserId,
                                 IN OUT UINT*           puUserIdTypeLength,
                                 __out_ecount_opt(*puUserIdTypeLength) PWSTR           wszUserIdType);

DRMEXPORT HRESULT UDAPICALL DRMGetRightInfo(  
                                 IN    DRMPUBHANDLE     hRight,
                                 IN OUT UINT*           puRightNameLength,
                                 __out_ecount_opt(*puRightNameLength)   PWSTR            wszRightName,
                                 OUT   SYSTEMTIME*      pstFrom,
                                 OUT   SYSTEMTIME*      pstUntil);

DRMEXPORT HRESULT UDAPICALL DRMGetRightExtendedInfo(  
                                 IN     DRMPUBHANDLE    hRight,
                                 IN     UINT            uIndex,
                                 IN OUT  UINT*          puExtendedInfoNameLength,
                                 __out_ecount_opt(*puExtendedInfoNameLength)    PWSTR           wszExtendedInfoName,
                                 IN OUT  UINT*          puExtendedInfoValueLength,
                                 __out_ecount_opt(*puExtendedInfoValueLength)    PWSTR           wszExtendedInfoValue);

DRMEXPORT HRESULT UDAPICALL DRMGetUsers(
                                IN      DRMPUBHANDLE    hIssuanceLicense,
                                IN      UINT            uIndex,
                                OUT     DRMPUBHANDLE*   phUser);

DRMEXPORT HRESULT UDAPICALL DRMGetUserRights(  
                                IN      DRMPUBHANDLE    hIssuanceLicense,
                                IN      DRMPUBHANDLE    hUser,
                                IN      UINT            uIndex,
                                OUT     DRMPUBHANDLE*   phRight);

DRMEXPORT HRESULT UDAPICALL DRMGetMetaData(
                                IN      DRMPUBHANDLE    hIssuanceLicense,
                                IN OUT  UINT*           puContentIdLength,
                                __out_ecount_opt(*puContentIdLength)      PWSTR           wszContentId,
                                IN OUT  UINT*           puContentIdTypeLength,
                                __out_ecount_opt(*puContentIdTypeLength)  PWSTR           wszContentIdType,
                                IN OUT  UINT*           puSKUIdLength,
                                __out_ecount_opt(*puSKUIdLength)          PWSTR           wszSKUId,
                                IN OUT  UINT*           puSKUIdTypeLength,
                                __out_ecount_opt(*puSKUIdTypeLength)      PWSTR           wszSKUIdType,
                                IN OUT  UINT*           puContentTypeLength,
                                __out_ecount_opt(*puContentTypeLength)    PWSTR           wszContentType,
                                IN OUT  UINT*           puContentNameLength,
                                __out_ecount_opt(*puContentNameLength)    PWSTR           wszContentName);

DRMEXPORT HRESULT UDAPICALL DRMGetApplicationSpecificData(
                                IN      DRMPUBHANDLE    hIssuanceLicense,
                                IN      UINT            uIndex,
                                IN OUT   UINT*          puNameLength,
                                __out_ecount_opt(*puNameLength)     PWSTR   wszName,
                                IN OUT   UINT*          puValueLength,
                                __out_ecount_opt(*puValueLength)    PWSTR   wszValue);



DRMEXPORT HRESULT UDAPICALL DRMGetIssuanceLicenseInfo(
                                IN      DRMPUBHANDLE    hIssuanceLicense,
                                OUT     SYSTEMTIME*     pstTimeFrom,
                                OUT     SYSTEMTIME*     pstTimeUntil,
                                IN      UINT            uFlags,
                                IN OUT  UINT*           puDistributionPointNameLength,
                                __out_ecount_opt(*puDistributionPointNameLength)    PWSTR   wszDistributionPointName,
                                IN OUT  UINT*           puDistributionPointURLLength,
                                __out_ecount_opt(*puDistributionPointURLLength)     PWSTR   wszDistributionPointURL,
                                OUT     DRMPUBHANDLE*   phOwner,
                                OUT     BOOL*           pfOfficial);


DRMEXPORT HRESULT UDAPICALL DRMGetRevocationPoint(
                                IN      DRMPUBHANDLE    hIssuanceLicense,
                                IN OUT  UINT*           puIdLength,
                                __out_ecount_opt(*puIdLength)      PWSTR      wszId,
                                IN OUT  UINT*           puIdTypeLength,
                                __out_ecount_opt(*puIdTypeLength)  PWSTR      wszIdType,
                                IN OUT  UINT*           puURLLength,
                                __out_ecount_opt(*puURLLength)     PWSTR      wszRL,
                                OUT     SYSTEMTIME*     pstFrequency,
                                IN OUT  UINT*           puNameLength,
                                __out_ecount_opt(*puNameLength)    PWSTR      wszName,
                                IN OUT  UINT*           puPublicKeyLength,
                                __out_ecount_opt(*puPublicKeyLength) PWSTR    wszPublicKey);

DRMEXPORT HRESULT UDAPICALL DRMGetUsagePolicy(
                                IN      DRMPUBHANDLE    hIssuanceLicense,
                                IN      UINT            uIndex,
                                OUT     DRM_USAGEPOLICY_TYPE* peUsagePolicyType,
                                OUT     BOOL*           pfExclusion,
                                IN OUT  UINT*           puNameLength,
                                __out_ecount_opt(*puNameLength)       PWSTR           wszName,
                                IN OUT  UINT*           puMinVersionLength,
                                __out_ecount_opt(*puMinVersionLength) PWSTR           wszMinVersion,
                                IN OUT  UINT*           puMaxVersionLength,
                                __out_ecount_opt(*puMaxVersionLength) PWSTR           wszMaxVersion,
                                IN OUT  UINT*           puPublicKeyLength,
                                __out_ecount_opt(*puPublicKeyLength)  PWSTR           wszPublicKey,
                                IN OUT  UINT*           puDigestAlgorithmLength,
                                __out_ecount_opt(*puDigestAlgorithmLength)  PWSTR     wszDigestAlgorithm,
                                IN OUT  UINT*           pcbDigest,
                                OUT     BYTE*           pbDigest);

DRMEXPORT HRESULT UDAPICALL DRMGetNameAndDescription(
                                IN      DRMPUBHANDLE    hIssuanceLicense,
                                IN      UINT            uIndex,
                                OUT     UINT*           pulcid,
                                IN OUT   UINT*          puNameLength,
                                __out_ecount_opt(*puNameLength)     PWSTR           wszName,
                                IN OUT   UINT*          puDescriptionLength,
                                __out_ecount_opt(*puDescriptionLength)     PWSTR           wszDescription);

DRMEXPORT HRESULT UDAPICALL DRMGetOwnerLicense(
                                IN      DRMPUBHANDLE    hIssuanceLicense,
                                IN OUT  UINT*           puOwnerLicenseLength,
                                __out_ecount_opt(*puOwnerLicenseLength)     PWSTR           wszOwnerLicense);

DRMEXPORT HRESULT UDAPICALL DRMGetIntervalTime(
                                IN      DRMPUBHANDLE    hIssuanceLicense,
                                OUT     UINT*           pcDays);


DRMEXPORT HRESULT UDAPICALL DRMRepair();

DRMEXPORT HRESULT UDAPICALL DRMRegisterProtectedWindow(
								IN		DRMENVHANDLE hEnv,
								IN		HWND hwnd);

DRMEXPORT HRESULT UDAPICALL DRMIsWindowProtected(
								IN		HWND	hwnd,
								OUT		BOOL*	pfProtected);

DRMEXPORT HRESULT UDAPICALL DRMAcquireIssuanceLicenseTemplate(
								IN		DRMHSESSION	hClient,
								IN		UINT uFlags,
								IN		VOID* pvReserved,
								IN		UINT cTemplates,
								__in_ecount_opt(cTemplates) PWSTR* pwszTemplateIds,
								__in PWSTR wszUrl,
								IN		VOID* pvContext);


#endif // #ifndef __MSDRM_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\vs10rtm\SDK\include\msfeedsid.h ===
//+---------------------------------------------------------------------------
//
//  Microsoft Windows
//  Copyright (C) Microsoft Corporation.  All Rights Reserved.
//
//  File:       msfeedsid.h
//
//----------------------------------------------------------------------------


#define DISPID_FEEDS_RootFolder                                 0x00001000
#define DISPID_FEEDS_IsSubscribed                               0x00001001
#define DISPID_FEEDS_ExistsFeed                                 0x00001002
#define DISPID_FEEDS_GetFeed                                    0x00001003
#define DISPID_FEEDS_ExistsFolder                               0x00001004
#define DISPID_FEEDS_GetFolder                                  0x00001005
#define DISPID_FEEDS_DeleteFeed                                 0x00001006
#define DISPID_FEEDS_DeleteFolder                               0x00001007
#define DISPID_FEEDS_GetFeedByUrl                               0x00001008
#define DISPID_FEEDS_BackgroundSync                             0x00001009
#define DISPID_FEEDS_BackgroundSyncStatus                       0x0000100a
#define DISPID_FEEDS_DefaultInterval                            0x0000100b
#define DISPID_FEEDS_AsyncSyncAll                               0x0000100c
#define DISPID_FEEDS_Normalize                                  0x0000100d
#define DISPID_FEEDS_ItemCountLimit                             0x0000100e

#define DISPID_FEEDSENUM_Count                                  0x00002000
#define DISPID_FEEDSENUM_Item                                   0x00002001

#define DISPID_FEEDFOLDER_Feeds                                 0x00003000
#define DISPID_FEEDFOLDER_Subfolders                            0x00003001
#define DISPID_FEEDFOLDER_CreateFeed                            0x00003002
#define DISPID_FEEDFOLDER_CreateSubfolder                       0x00003003
#define DISPID_FEEDFOLDER_ExistsFeed                            0x00003004
#define DISPID_FEEDFOLDER_GetFeed                               0x00003005
#define DISPID_FEEDFOLDER_ExistsSubfolder                       0x00003006
#define DISPID_FEEDFOLDER_GetSubfolder                          0x00003007
#define DISPID_FEEDFOLDER_Delete                                0x00003008
#define DISPID_FEEDFOLDER_Name                                  0x00003009
#define DISPID_FEEDFOLDER_Rename                                0x0000300a
#define DISPID_FEEDFOLDER_Path                                  0x0000300b
#define DISPID_FEEDFOLDER_Move                                  0x0000300c
#define DISPID_FEEDFOLDER_Parent                                0x0000300d
#define DISPID_FEEDFOLDER_IsRoot                                0x0000300e
#define DISPID_FEEDFOLDER_TotalUnreadItemCount                  0x0000300f
#define DISPID_FEEDFOLDER_TotalItemCount                        0x00003010
#define DISPID_FEEDFOLDER_GetWatcher                            0x00003011

#define DISPID_FEED_Xml                                         0x00004000
#define DISPID_FEED_Name                                        0x00004001
#define DISPID_FEED_Rename                                      0x00004002
#define DISPID_FEED_Url                           