  /// <summary>
        /// 
        /// </summary>
        /// <param name="sessionId"></param>
        /// <param name="gameId"></param>
        /// <returns></returns>
        public FullGameState GetGameState(string sessionId, string gameId)
        {
            return GetGameState(GetHttpHeaders(), sessionId, gameId);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="httpHeaders"></param>
        /// <param name="sessionId"></param>
        /// <param name="gameId"></param>
        /// <returns></returns>
        public FullGameState GetGameState(Dictionary<string, string> httpHeaders, string sessionId, string gameId)
        {
            string url = FormatGameStateUrl(GetGameStateUrlFormat, sessionId, gameId);
            
            RestResponse response = Get(url, httpHeaders);
            HandleResponse(response);
            
            return DeserializeObject<FullGameState>(response.Body);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sessionId"></param>
        /// <param name="gameId"></param>
        /// <param name="gameStateData"></param>
        public void PutGameState(string sessionId, string gameId, ModifiableGameState gameStateData)
        {
            PutGameState(GetHttpHeaders(), sessionId, gameId, gameStateData);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="httpHeaders"></param>
        /// <param name="sessionId"></param>
        /// <param name="gameId"></param>
        /// <param name="gameStateData"></param>
        public void PutGameState(Dictionary<string, string> httpHeaders, string sessionId, string gameId, ModifiableGameState gameStateData)
        {
            string url = FormatGameStateUrl(PutGameStateUrlFormat, sessionId, gameId);

            RestResponse response = Put(url, httpHeaders, SerializeObject(gameStateData));
            HandleResponse(response);            
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sessionId"></param>
        /// <param name="gameId"></param>
        /// <param name="results"></param>
        public void PostGameEnd(string sessionId, string gameId, GameResults results)
        {
            PostGameEnd(GetHttpHeaders(), sessionId, gameId, results);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="httpHeaders"></param>
        /// <param name="sessionId"></param>
        /// <param name="gameId"></param>
        /// <param name="results"></param>
        public void PostGameEnd(Dictionary<string, string> httpHeaders, string sessionId, string gameId, GameResults results)
        {
            string url = FormatGameStateUrl(PostGameEndUrlFormat, sessionId, gameId);

            RestResponse response = Post(url, httpHeaders, SerializeObject(results));
            HandleResponse(response);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sessionId"></param>
        /// <param name="gameId"></param>
        /// <param name="gameAction"></param>
        public void PostGameAction(string sessionId, string gameId, GameAction gameAction)
        {
            PostGameAction(GetHttpHeaders(), sessionId, gameId, gameAction);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="httpHeaders"></param>
        /// <param name="sessionId"></param>
        /// <param name="gameId"></param>
        /// <param name="gameAction"></param>
        public void PostGameAction(Dictionary<string, string> httpHeaders, string sessionId, string gameId, GameAction gameAction)
        {
            string url = FormatGameStateUrl(PostGameActionUrlFormat, sessionId, gameId);

            RestResponse response = Post(url, httpHeaders, SerializeObject(gameAction));
            HandleResponse(response);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Tools\MPStress\MultiplayerThreadState.cs ===
﻿using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Text;

namespace MPStress
{

    public class MultiplayerThreadStateCollection
    {
        public List<MultiplayerThreadState> StateCollection { get; set; }
        public MultiplayerThreadStateCollection(List<MultiplayerThreadState> collection)
        {
            this.StateCollection = collection;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public class MultiplayerThreadState
    {
        public bool RecordPerformance
        {
            get;
            set;
        }

        public bool ExtractSessionId
        {
            get;
            set;
        }

        public bool ExtractNotificationId
        {
            get;
            set;
        }
        /// <summary>
        /// 
        /// </summary>
        public string RequestBody
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public string HttpMethod
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public string BaseUrl
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public int Timeout
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public string Locale
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public bool UseRandomXuid
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public string Xuid
        {
            get;
            set;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Tools\MultiplayerUI\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("MultiplayerUI")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
//[assembly: AssemblyCompany("Microsoft")]
//[assembly: AssemblyProduct("MultiplayerUI")]
//[assembly: AssemblyCopyright("Copyright © Microsoft 2009")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("cf8dce1c-cb0b-42aa-bfe7-3ef460950b1b")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
//[assembly: AssemblyVersion("1.0.0.0")]
//[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Tools\MultiplayerUI\MainForm.cs ===
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Threading;

using AsyncMultiplayer.SessionCommon;
using CloudServices.Test.Common.Proxy;
using Multiplayer.Test.Proxy;
using CloudServices.Test.Common;

namespace MultiplayerUI
{
    /// <summary>
    /// 
    /// </summary>
    public partial class MainForm : Form
    {
        /// <summary>
        /// 
        /// </summary>
        public MainForm()
        {
            InitializeComponent();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void sessionAPI_SelectedIndexChanged(object sender, EventArgs e)
        {
            ClearSessionForm();
            
            SessionsService sessionsSvc = new SessionsService("http://sessions.test.xboxlive.com/Sessions.svc");
            this.sessionHttpHeaders.Text = FormatHttpHeaders(sessionsSvc.GetHttpHeaders());

            switch (this.sessionAPI.Text)
            {
                case "CreateSession":
                    {
                        this.sessionUrl.Text = sessionsSvc.FormatCreateSessionUrl("{gameId}");
                        CreationData creationData = new CreationData();
                        creationData.CanRemoveEmptySeats = true;
                        creationData.DisplayName = "asdfasdf";
                        creationData.GameID = 0;
                        creationData.ReservedSeatsAvailable = 5;
                        creationData.Variant = 0;
                        creationData.TotalSeatsAvailable = 10;
                        creationData.InactivityWarning = new InactivityWarningBehavior() { Action = InactivityWarningAction.Kick, Interval = 30, MaxNumberOfNudges = 3 };

                        this.sessionBody.Text = FormatXml(SessionsService.SerializeObject(creationData));
                        break;
                    }
            }
        }

        /// <summary>
        /// 
        /// </summary>
        private void ClearSessionForm()
        {
            this.sessionBody.Clear();
            this.sessionHttpHeaders.Clear();
            this.sessionResponse.Clear();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="httpHeaders"></param>
        /// <returns></returns>
        private static string FormatHttpHeaders(Dictionary<string, string> httpHeaders)
        {
            StringBuilder headers = new StringBuilder();
            foreach (string key in httpHeaders.Keys)
                headers.AppendFormat("{0}: {1}\r\n", key, httpHeaders[key]);

            return headers.ToString();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="httpHeadersText"></param>
        /// <returns></returns>
        private static Dictionary<string, string> GetHttpHeadersFromText(string httpHeadersText)
        {
            Dictionary<string, string> httpHeaders = new Dictionary<string, string>();
            string[] headers = httpHeadersText.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries);
            
            for (int i = 0; i < headers.Length; i++)
            {
                string[] parts = headers[i].Split(':');
                if (parts.Length == 2)
                {
                    httpHeaders.Add(parts[0].Trim(), parts[1].Trim());
                }
            }

            return httpHeaders;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="httpHeaders"></param>
        /// <returns></returns>
        private static string GetTextFromHttpHeaders(Dictionary<string, string> httpHeaders)
        {
            StringBuilder headers = new StringBuilder();
            foreach (string key in httpHeaders.Keys)
                headers.AppendFormat("{0}:\t{1}\r\n", key, httpHeaders[key]);

            return headers.ToString() + Environment.NewLine;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="xml"></param>
        /// <returns></returns>
        private static string FormatXml(string xml)
        {
            XmlDocumentEx xmlDoc = new XmlDocumentEx(xml, true);
            return xmlDoc.FormatXml(2, ' ', '"');
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void sessionSend_Click(object sender, EventArgs e)
        {
            this.sessionHttpStatus.Text = "";
            this.sessionResponse.Text = "";
            Thread.Sleep(100);
            
            try
            {
                RestResponse response = null;
                switch (this.sessionAPI.Text)
                {
                    case "CreateSession":
                        {
                            response = RestRequest.Post(this.sessionUrl.Text, GetHttpHeadersFromText(this.sessionHttpHeaders.Text), this.sessionBody.Text);
                            break;
                        }
                }

                UpdateSessionResponseUI(response);
            }
            catch (Exception ex)
            {
                this.sessionResponse.Text = ex.ToString();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="response"></param>
        private void UpdateSessionResponseUI(RestResponse response)
        {
            this.sessionHttpStatus.Text = String.Format("{0} ({1})", (int)response.Status, response.Status);
            this.sessionHttpStatus.ForeColor = (response.Succeeded) ? Color.LightGreen : Color.Red;
            this.sessionResponse.Text = GetTextFromHttpHeaders(response.Headers);
            this.sessionResponse.AppendText(response.Body);
        }

        private void MainForm_Load(object sender, EventArgs e)
        {
            gmsRequestBody.Text =
                @"<!--GMS Content Creator Generated XML - Filename: GMSSample.xml-->
                <game id=""1"" visibility=""3"" usesLiveMultiplayerServices=""1"">
                    <localizedNames>
                        <name locale=""en-US"">(en-US) Sample Game</name>
                    </localizedNames>
                    <images />
                    <availablePlatforms>
                    <platform id=""5"">Mobile</platform>
                    </availablePlatforms>
                    <variants />
                    </game>";
        }

        private void button4_Click(object sender, EventArgs e)
        {

        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Common\Multiplayer.Proxy\GameStateProxy.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;
using System.Xml.Linq;
using System.Runtime.Serialization;
using LiveN.Test.Framework.Configuration;
using AsyncMultiplayer.SessionCommon;
using System.IO;
using System.Net;
using System.Configuration;
using LiveN.Test.Framework.Authorization;
using Multiplayer.Test.UserAccounts;

namespace Multiplayer.Test.Proxy
{
    /// <summary>
    /// Client wrapper for the SessionManagementService.
    /// </summary>
    public class GameStateProxy 
    {
        private StateService stateService;


        /// <summary>
        /// 
        /// </summary>
        public GameStateProxy()
        {
            Initialize(this.UserID,this.Password, Config.Environment);
        }

        public GameStateProxy(string uname, string pword, EnvironmentElement env)
        {
            Initialize(uname, pword, env);
        }
       
        private void Initialize(string uname, string pword, EnvironmentElement env)
        {
            this.UserID = uname;
            this.Password = pword;
            Uri baseUri = env.GameStateService;
            this.stateService = new StateService(baseUri.ToString());
            StateService.Timeout = int.Parse(ConfigurationManager.AppSettings["Timeout"]);
            
            this.stateService.AuthorizationDelegate = () =>
            {
                string userToken = Users.authCache.GetUserToken(
                    this.UserID,
                    this.Password,
                    env.WindowsLiveIDSettings.LiveIdServiceTarget,
                    env.WindowsLiveIDSettings.Policy,
                    env.WindowsLiveIDSettings.Environment,
                    env.StsSettings.PlatformType,
                    env.StsSettings.TitleId,
                    env.StsSettings.TitleVersion,
                    env.StsSettings.ClientVersion);

                string partnerToken = Users.authCache.GetPartnerToken(
                    userToken,
                    env.StsSettings.TitleId,
                    env.StsSettings.TitleVersion,
                    env.StsSettings.AudienceUri_MultiPlayer);

                KeyValuePair<string, string> authzHeader = new KeyValuePair<string, string>("X-PartnerAuthorization", "XBL1.0 x=" + partnerToken);
                return authzHeader;
            };
        }

        /// <summary>
        /// 
        /// </summary>
        public string UserID
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public string Password
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="gameId"></param>
        /// <param name="sessionId"></param>
        /// <returns></returns>
        public FullGameState GetGameState(string sessionId, string gameId)
        {
            Dictionary<string, string> httpHeaders = this.stateService.GetHttpHeaders();
            return GetGameState(httpHeaders, sessionId, gameId);
        }

        public FullGameState GetGameState(string sessionId, string gameId, string userName, string password)
        {
            this.UserID = userName;
            this.Password = password;
            return GetGameState(sessionId, gameId);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="httpHeaders"></param>
        /// <param name="gameId"></param>
        /// <param name="sessionId"></param>
        /// <returns></returns>
        public FullGameState GetGameState(Dictionary<string, string> httpHeaders, string sessionId, string gameId)
        {
            return this.stateService.GetGameState(httpHeaders, sessionId, gameId);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sessionId"></param>
        /// <param name="gameId"></param>
        /// <param name="gameState"></param>
        public void PutGameState(string sessionId, string gameId, ModifiableGameState gameState)
        {
            Dictionary<string, string> httpHeaders = this.stateService.GetHttpHeaders();
            PutGameState(httpHeaders, sessionId, gameId, gameState);
        }
        public void PutGameState(string sessionId, string gameId, ModifiableGameState gameState, string userName, string password)
        {
            this.UserID = userName;
            this.Password = password;
            PutGameState(sessionId, gameId, gameState);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="httpHeaders"></param>
        /// <param name="sessionId"></param>
        /// <param name="gameId"></param>
        /// <param name="gameState"></param>
        public void PutGameState(Dictionary<string, string> httpHeaders, string sessionId, string gameId, ModifiableGameState gameState)
        {
            this.stateService.PutGameState(httpHeaders, sessionId, gameId, gameState);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sessionId"></param>
        /// <param name="gameId"></param>
        /// <param name="results"></param>
        public void PostGameEnd(string sessionId, string gameId, GameResults results)
        {
            Dictionary<string, string> httpHeaders = this.stateService.GetHttpHeaders();
            this.stateService.PostGameEnd(httpHeaders, sessionId, gameId, results);
        }
        public void PostGameEnd(string sessionId, string gameId, GameResults results, string userName, string password)
        {
            this.UserID = userName;
            this.Password = password;
            PostGameEnd(sessionId, gameId, results);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="httpHeaders"></param>
        /// <param name="sessionId"></param>
        /// <param name="gameId"></param>
        /// <param name="results"></param>
        public void PostGameEnd(Dictionary<string, string> httpHeaders, string sessionId, string gameId, GameResults results)
        {
            this.stateService.PostGameEnd(httpHeaders, sessionId, gameId, results);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sessionId"></param>
        /// <param name="gameId"></param>
        /// <param name="gameAction"></param>
        public void PostGameAction(string sessionId, string gameId, GameAction gameAction)
        {
            Dictionary<string, string> httpHeaders = this.stateService.GetHttpHeaders();
            this.stateService.PostGameAction(httpHeaders, sessionId, gameId, gameAction);
        }
        public void PostGameAction(string sessionId, string gameId, GameAction gameAction, string userName, string password)
        {
            this.UserID = userName;
            this.Password = password;
            PostGameAction(sessionId, gameId, gameAction);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="httpHeaders"></param>
        /// <param name="sessionId"></param>
        /// <param name="gameId"></param>
        /// <param name="gameAction"></param>
        public void PostGameAction(Dictionary<string, string> httpHeaders, string sessionId, string gameId, GameAction gameAction)
        {
            this.stateService.PostGameAction(httpHeaders, sessionId, gameId, gameAction);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Common\Multiplayer.Proxy\CertBasedNotificationServiceProxy.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Configuration;
using System.Security.Cryptography.X509Certificates;
using AsyncMultiplayer.NotificationService;
using Leet.Core.Platforms;
using LiveN.Test.Framework.Configuration;

namespace Multiplayer.Test.Proxy
{
    public class CertBasedNotificationServiceProxy : NotificationFEService
    {
        //Just add a header nefse and a certificate nefse
        public X509Certificate2 cert;
        string locale;

        public CertBasedNotificationServiceProxy()
        {
            cert = InstallClientCertificate();
            locale = "en-US";
            serviceEndPoint = Config.Environment.NotificationsServicePrivate;
            Timeout = int.Parse(ConfigurationManager.AppSettings["Timeout"]);
        }

        public List<Notification> GetNotifications(
           string gameId,
           string sessionId,
           int category,
           string lastId,
           int count,
           string type,
           bool userVisibleOnly,
           string eTag,
           string userXuid)
        {

            return GetNotifications(
                GetHttpHeaders(this.locale, eTag, PlatformType.Mobile, userXuid), gameId, sessionId, category, lastId, count, type, userVisibleOnly, cert);
        }

        public void UpdateNotification(
            string notificationId,
            string status,
            string userXuid)
        {
            UpdateNotification(GetHttpHeaders(this.locale, null, PlatformType.Mobile, userXuid), notificationId, status, cert);
        }

        public void DeleteNotificationQuery(
            string notificationId,
            string userXuid)
        {

            DeleteNotificationQuery(GetHttpHeaders(this.locale, null, PlatformType.Mobile, userXuid), notificationId, cert);
        }

        public void DeleteNotificationBySession(
            string gameIdString,
            string sessionId,
            string userXuid)
        {
            DeleteNotificationBySession(GetHttpHeaders(this.locale, null, PlatformType.Mobile, userXuid), gameIdString, sessionId, cert);
        }

        public void SendInvite(InviteRequest inviteRequest, string userXuid)
        {
            SendInvite(GetHttpHeaders(this.locale, null, PlatformType.Mobile, userXuid), inviteRequest, cert);
        }

        public static X509Certificate2 InstallClientCertificate()
        {
            return LiveN.Test.Framework.Authorization.Authorization.InstallClientCertificate(ConfigurationManager.AppSettings["InternalClientCertName"], ConfigurationManager.AppSettings["InternalClientCertThumbprint"], ConfigurationManager.AppSettings["InternalClientCertPwd"], "Internal");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Tools\MultiplayerUI\MainForm.Designer.cs ===
﻿namespace MultiplayerUI
{
    partial class MainForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.menuStrip = new System.Windows.Forms.MenuStrip();
            this.fileToolStripMenuItem1 = new System.Windows.Forms.ToolStripMenuItem();
            this.exitToolStripMenuItem1 = new System.Windows.Forms.ToolStripMenuItem();
            this.oPtionsToolStripMenuItem1 = new System.Windows.Forms.ToolStripMenuItem();
            this.environmentToolStripMenuItem1 = new System.Windows.Forms.ToolStripMenuItem();
            this.helpToolStripMenuItem1 = new System.Windows.Forms.ToolStripMenuItem();
            this.aboutMultiplayerUIToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.fileToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.optionsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.helpToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.statusStrip1 = new System.Windows.Forms.StatusStrip();
            this.exitToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.environmentToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.tabControl = new System.Windows.Forms.TabControl();
            this.tabPage1 = new System.Windows.Forms.TabPage();
            this.sessionHttpStatus = new System.Windows.Forms.Label();
            this.label11 = new System.Windows.Forms.Label();
            this.sessionAPI = new System.Windows.Forms.ComboBox();
            this.label8 = new System.Windows.Forms.Label();
            this.sessionSend = new System.Windows.Forms.Button();
            this.label7 = new System.Windows.Forms.Label();
            this.sessionBody = new System.Windows.Forms.TextBox();
            this.label3 = new System.Windows.Forms.Label();
            this.sessionResponse = new System.Windows.Forms.TextBox();
            this.sts = new System.Windows.Forms.Button();
            this.rps = new System.Windows.Forms.Button();
            this.label2 = new System.Windows.Forms.Label();
            this.sessionHttpHeaders = new System.Windows.Forms.TextBox();
            this.label1 = new System.Windows.Forms.Label();
            this.sessionUrl = new System.Windows.Forms.TextBox();
            this.tabPage2 = new System.Windows.Forms.TabPage();
            this.comboBox1 = new System.Windows.Forms.ComboBox();
            this.label4 = new System.Windows.Forms.Label();
            this.button1 = new System.Windows.Forms.Button();
            this.label5 = new System.Windows.Forms.Label();
            this.textBox1 = new System.Windows.Forms.TextBox();
            this.label6 = new System.Windows.Forms.Label();
            this.textBox2 = new System.Windows.Forms.TextBox();
            this.button2 = new System.Windows.Forms.Button();
            this.button3 = new System.Windows.Forms.Button();
            this.label9 = new System.Windows.Forms.Label();
            this.textBox3 = new System.Windows.Forms.TextBox();
            this.label10 = new System.Windows.Forms.Label();
            this.textBox4 = new System.Windows.Forms.TextBox();
            this.tabPage3 = new System.Windows.Forms.TabPage();
            this.label12 = new System.Windows.Forms.Label();
            this.gmsRequestUrl = new System.Windows.Forms.TextBox();
            this.button4 = new System.Windows.Forms.Button();
            this.gmsRequestBody = new System.Windows.Forms.TextBox();
            this.tabPage4 = new System.Windows.Forms.TabPage();
            this.menuStrip.SuspendLayout();
            this.tabControl.SuspendLayout();
            this.tabPage1.SuspendLayout();
            this.tabPage2.SuspendLayout();
            this.tabPage3.SuspendLayout();
            this.SuspendLayout();
            // 
            // menuStrip
            // 
            this.menuStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.fileToolStripMenuItem1,
            this.oPtionsToolStripMenuItem1,
            this.helpToolStripMenuItem1});
            this.menuStrip.Location = new System.Drawing.Point(0, 0);
            this.menuStrip.Name = "menuStrip";
            this.menuStrip.Size = new System.Drawing.Size(607, 24);
            this.menuStrip.TabIndex = 0;
            this.menuStrip.Text = "menuStrip1";
            // 
            // fileToolStripMenuItem1
            // 
            this.fileToolStripMenuItem1.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.exitToolStripMenuItem1});
            this.fileToolStripMenuItem1.Name = "fileToolStripMenuItem1";
            this.fileToolStripMenuItem1.Size = new System.Drawing.Size(35, 20);
            this.fileToolStripMenuItem1.Text = "&File";
            // 
            // exitToolStripMenuItem1
            // 
            this.exitToolStripMenuItem1.Name = "exitToolStripMenuItem1";
            this.exitToolStripMenuItem1.Size = new System.Drawing.Size(92, 22);
            this.exitToolStripMenuItem1.Text = "E&xit";
            // 
            // oPtionsToolStripMenuItem1
            // 
            this.oPtionsToolStripMenuItem1.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.environmentToolStripMenuItem1});
            this.oPtionsToolStripMenuItem1.Name = "oPtionsToolStripMenuItem1";
            this.oPtionsToolStripMenuItem1.Size = new System.Drawing.Size(56, 20);
            this.oPtionsToolStripMenuItem1.Text = "&Options";
            // 
            // environmentToolStripMenuItem1
            // 
            this.environmentToolStripMenuItem1.Name = "environmentToolStripMenuItem1";
            this.environmentToolStripMenuItem1.Size = new System.Drawing.Size(134, 22);
            this.environmentToolStripMenuItem1.Text = "&Environment";
            // 
            // helpToolStripMenuItem1
            // 
            this.helpToolStripMenuItem1.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.aboutMultiplayerUIToolStripMenuItem});
            this.helpToolStripMenuItem1.Name = "helpToolStripMenuItem1";
            this.helpToolStripMenuItem1.Size = new System.Drawing.Size(40, 20);
            this.helpToolStripMenuItem1.Text = "&Help";
            // 
            // aboutMultiplayerUIToolStripMenuItem
            // 
            this.aboutMultiplayerUIToolStripMenuItem.Name = "aboutMultiplayerUIToolStripMenuItem";
            this.aboutMultiplayerUIToolStripMenuItem.Size = new System.Drawing.Size(184, 22);
            this.aboutMultiplayerUIToolStripMenuItem.Text = "&About Multiplayer UI...";
            // 
            // fileToolStripMenuItem
            // 
            this.fileToolStripMenuItem.Name = "fileToolStripMenuItem";
            this.fileToolStripMenuItem.Size = new System.Drawing.Size(35, 20);
            this.fileToolStripMenuItem.Text = "&File";
            // 
            // optionsToolStripMenuItem
            // 
            this.optionsToolStripMenuItem.Name = "optionsToolStripMenuItem";
            this.optionsToolStripMenuItem.Size = new System.Drawing.Size(56, 20);
            this.optionsToolStripMenuItem.Text = "&Options";
            // 
            // helpToolStripMenuItem
            // 
            this.helpToolStripMenuItem.Name = "helpToolStripMenuItem";
            this.helpToolStripMenuItem.Size = new System.Drawing.Size(40, 20);
            this.helpToolStripMenuItem.Text = "&Help";
            // 
            // statusStrip1
            // 
            this.statusStrip1.Location = new System.Drawing.Point(0, 697);
            this.statusStrip1.Name = "statusStrip1";
            this.statusStrip1.Size = new System.Drawing.Size(607, 22);
            this.statusStrip1.TabIndex = 1;
            this.statusStrip1.Text = "statusStrip1";
            // 
            // exitToolStripMenuItem
            // 
            this.exitToolStripMenuItem.Name = "exitToolStripMenuItem";
            this.exitToolStripMenuItem.Size = new System.Drawing.Size(152, 22);
            this.exitToolStripMenuItem.Text = "E&xit";
            // 
            // environmentToolStripMenuItem
            // 
            this.environmentToolStripMenuItem.Name = "environmentToolStripMenuItem";
            this.environmentToolStripMenuItem.Size = new System.Drawing.Size(152, 22);
            this.environmentToolStripMenuItem.Text = "Environment";
            // 
            // tabControl
            // 
            this.tabControl.Controls.Add(this.tabPage1);
            this.tabControl.Controls.Add(this.tabPage2);
            this.tabControl.Controls.Add(this.tabPage3);
            this.tabControl.Controls.Add(this.tabPage4);
            this.tabControl.Location = new System.Drawing.Point(21, 37);
            this.tabControl.Name = "tabControl";
            this.tabControl.SelectedIndex = 0;
            this.tabControl.Size = new System.Drawing.Size(564, 643);
            this.tabControl.TabIndex = 11;
            // 
            // tabPage1
            // 
            this.tabPage1.Controls.Add(this.sessionHttpStatus);
            this.tabPage1.Controls.Add(this.sessionAPI);
            this.tabPage1.Controls.Add(this.label8);
            this.tabPage1.Controls.Add(this.sessionSend);
            this.tabPage1.Controls.Add(this.label7);
            this.tabPage1.Controls.Add(this.sessionBody);
            this.tabPage1.Controls.Add(this.label3);
            this.tabPage1.Controls.Add(this.sessionResponse);
            this.tabPage1.Controls.Add(this.sts);
            this.tabPage1.Controls.Add(this.rps);
            this.tabPage1.Controls.Add(this.label2);
            this.tabPage1.Controls.Add(this.sessionHttpHeaders);
            this.tabPage1.Controls.Add(this.label1);
            this.tabPage1.Controls.Add(this.sessionUrl);
            this.tabPage1.Location = new System.Drawing.Point(4, 22);
            this.tabPage1.Name = "tabPage1";
            this.tabPage1.Padding = new System.Windows.Forms.Padding(3);
            this.tabPage1.Size = new System.Drawing.Size(556, 617);
            this.tabPage1.TabIndex = 0;
            this.tabPage1.Text = "Game Session";
            this.tabPage1.UseVisualStyleBackColor = true;
            // 
            // sessionHttpStatus
            // 
            this.sessionHttpStatus.AutoSize = true;
            this.sessionHttpStatus.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.sessionHttpStatus.Location = new System.Drawing.Point(135, 440);
            this.sessionHttpStatus.Name = "sessionHttpStatus";
            this.sessionHttpStatus.Size = new System.Drawing.Size(0, 13);
            this.sessionHttpStatus.TabIndex = 26;
            // 
            // label11
            // 
            this.label11.AutoSize = true;
            this.label11.Location = new System.Drawing.Point(31, 10);
            this.label11.Name = "label11";
            this.label11.Size = new System.Drawing.Size(63, 13);
            this.label11.TabIndex = 38;
            this.label11.Text = "Request Url";
            // 
            // sessionAPI
            // 
            this.sessionAPI.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.sessionAPI.Items.AddRange(new object[] {
            "CreateSession",
            "JoinSession",
            "LeaveSession",
            "ModifySession",
            "RejectInvitation",
            "ViewSession",
            "ViewSessionSummaries"});
            this.sessionAPI.Location = new System.Drawing.Point(65, 16);
            this.sessionAPI.Name = "sessionAPI";
            this.sessionAPI.Size = new System.Drawing.Size(167, 21);
            this.sessionAPI.TabIndex = 24;
            this.sessionAPI.SelectedIndexChanged += new System.EventHandler(this.sessionAPI_SelectedIndexChanged);
            // 
            // label8
            // 
            this.label8.AutoSize = true;
            this.label8.Location = new System.Drawing.Point(38, 20);
            this.label8.Name = "label8";
            this.label8.Size = new System.Drawing.Size(27, 13);
            this.label8.TabIndex = 23;
            this.label8.Text = "API:";
            // 
            // sessionSend
            // 
            this.sessionSend.Location = new System.Drawing.Point(419, 398);
            this.sessionSend.Name = "sessionSend";
            this.sessionSend.Size = new System.Drawing.Size(100, 23);
            this.sessionSend.TabIndex = 22;
            this.sessionSend.Text = "&Send Request";
            this.sessionSend.UseVisualStyleBackColor = true;
            this.sessionSend.Click += new System.EventHandler(this.sessionSend_Click);
            // 
            // label7
            // 
            this.label7.AutoSize = true;
            this.label7.Location = new System.Drawing.Point(38, 278);
            this.label7.Name = "label7";
            this.label7.Size = new System.Drawing.Size(63, 13);
            this.label7.TabIndex = 21;
            this.label7.Text = "HTTP Body";
            // 
            // sessionBody
            // 
            this.sessionBody.Location = new System.Drawing.Point(41, 294);
            this.sessionBody.Multiline = true;
            this.sessionBody.Name = "sessionBody";
            this.sessionBody.ScrollBars = System.Windows.Forms.ScrollBars.Both;
            this.sessionBody.Size = new System.Drawing.Size(478, 98);
            this.sessionBody.TabIndex = 20;
            this.sessionBody.WordWrap = false;
            // 
            // label3
            // 
            this.label3.AutoSize = true;
            this.label3.Location = new System.Drawing.Point(39, 462);
            this.label3.Name = "label3";
            this.label3.Size = new System.Drawing.Size(58, 13);
            this.label3.TabIndex = 19;
            this.label3.Text = "Response:";
            // 
            // sessionResponse
            // 
            this.sessionResponse.Location = new System.Drawing.Point(41, 478);
            this.sessionResponse.Multiline = true;
            this.sessionResponse.Name = "sessionResponse";
            this.sessionResponse.ScrollBars = System.Windows.Forms.ScrollBars.Both;
            this.sessionResponse.Size = new System.Drawing.Size(478, 124);
            this.sessionResponse.TabIndex = 18;
            // 
            // sts
            // 
            this.sts.Location = new System.Drawing.Point(397, 243);
            this.sts.Name = "sts";
            this.sts.Size = new System.Drawing.Size(122, 23);
            this.sts.TabIndex = 16;
            this.sts.Text = "Generate S&TS token";
            this.sts.UseVisualStyleBackColor = true;
            // 
            // rps
            // 
            this.rps.Location = new System.Drawing.Point(268, 243);
            this.rps.Name = "rps";
            this.rps.Size = new System.Drawing.Size(122, 23);
            this.rps.TabIndex = 15;
            this.rps.Text = "Generate &RPS ticket";
            this.rps.UseVisualStyleBackColor = true;
            // 
            // label2
            // 
            this.label2.AutoSize = true;
            this.label2.Location = new System.Drawing.Point(38, 123);
            this.label2.Name = "label2";
            this.label2.Size = new System.Drawing.Size(79, 13);
            this.label2.TabIndex = 14;
            this.label2.Text = "HTTP Headers";
            // 
            // sessionHttpHeaders
            // 
            this.sessionHttpHeaders.Location = new System.Drawing.Point(41, 139);
            this.sessionHttpHeaders.Multiline = true;
            this.sessionHttpHeaders.Name = "sessionHttpHeaders";
            this.sessionHttpHeaders.Size = new System.Drawing.Size(478, 98);
            this.sessionHttpHeaders.TabIndex = 13;
            // 
            // label1
            // 
            this.label1.AutoSize = true;
            this.label1.Location = new System.Drawing.Point(38, 50);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(63, 13);
            this.label1.TabIndex = 12;
            this.label1.Text = "Request Url";
            // 
            // sessionUrl
            // 
            this.sessionUrl.Location = new System.Drawing.Point(41, 66);
            this.sessionUrl.Multiline = true;
            this.sessionUrl.Name = "sessionUrl";
            this.sessionUrl.Size = new System.Drawing.Size(478, 40);
            this.sessionUrl.TabIndex = 11;
            this.sessionUrl.Text = "http://sessions.storax.xboxlive.com/Sessions.svc";
            // 
            // tabPage2
            // 
            this.tabPage2.Controls.Add(this.comboBox1);
            this.tabPage2.Controls.Add(this.label4);
            this.tabPage2.Controls.Add(this.button1);
            this.tabPage2.Controls.Add(this.label5);
            this.tabPage2.Controls.Add(this.textBox1);
            this.tabPage2.Controls.Add(this.label6);
            this.tabPage2.Controls.Add(this.textBox2);
            this.tabPage2.Controls.Add(this.button2);
            this.tabPage2.Controls.Add(this.button3);
            this.tabPage2.Controls.Add(this.label9);
            this.tabPage2.Controls.Add(this.textBox3);
            this.tabPage2.Controls.Add(this.label10);
            this.tabPage2.Controls.Add(this.textBox4);
            this.tabPage2.Location = new System.Drawing.Point(4, 22);
            this.tabPage2.Name = "tabPage2";
            this.tabPage2.Padding = new System.Windows.Forms.Padding(3);
            this.tabPage2.Size = new System.Drawing.Size(556, 617);
            this.tabPage2.TabIndex = 1;
            this.tabPage2.Text = "Notifications";
            this.tabPage2.UseVisualStyleBackColor = true;
            // 
            // comboBox1
            // 
            this.comboBox1.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.comboBox1.Items.AddRange(new object[] {
            "CreateSession",
            "JoinSession",
            "LeaveSession",
            "ModifySession",
            "ViewSession",
            "",
            ""});
            this.comboBox1.Location = new System.Drawing.Point(65, 16);
            this.comboBox1.Name = "comboBox1";
            this.comboBox1.Size = new System.Drawing.Size(167, 21);
            this.comboBox1.TabIndex = 37;
            // 
            // label4
            // 
            this.label4.AutoSize = true;
            this.label4.Location = new System.Drawing.Point(38, 20);
            this.label4.Name = "label4";
            this.label4.Size = new System.Drawing.Size(27, 13);
            this.label4.TabIndex = 36;
            this.label4.Text = "API:";
            // 
            // button1
            // 
            this.button1.Location = new System.Drawing.Point(419, 398);
            this.button1.Name = "button1";
            this.button1.Size = new System.Drawing.Size(100, 23);
            this.button1.TabIndex = 35;
            this.button1.Text = "&Send Request";
            this.button1.UseVisualStyleBackColor = true;
            // 
            // label5
            // 
            this.label5.AutoSize = true;
            this.label5.Location = new System.Drawing.Point(38, 278);
            this.label5.Name = "label5";
            this.label5.Size = new System.Drawing.Size(63, 13);
            this.label5.TabIndex = 34;
            this.label5.Text = "HTTP Body";
            // 
            // textBox1
            // 
            this.textBox1.Location = new System.Drawing.Point(41, 294);
            this.textBox1.Multiline = true;
            this.textBox1.Name = "textBox1";
            this.textBox1.Size = new System.Drawing.Size(478, 98);
            this.textBox1.TabIndex = 33;
            // 
            // label6
            // 
            this.label6.AutoSize = true;
            this.label6.Location = new System.Drawing.Point(39, 429);
            this.label6.Name = "label6";
            this.label6.Size = new System.Drawing.Size(58, 13);
            this.label6.TabIndex = 32;
            this.label6.Text = "Response:";
            // 
            // textBox2
            // 
            this.textBox2.Location = new System.Drawing.Point(41, 445);
            this.textBox2.Multiline = true;
            this.textBox2.Name = "textBox2";
            this.textBox2.Size = new System.Drawing.Size(478, 124);
            this.textBox2.TabIndex = 31;
            // 
            // button2
            // 
            this.button2.Location = new System.Drawing.Point(397, 243);
            this.button2.Name = "button2";
            this.button2.Size = new System.Drawing.Size(122, 23);
            this.button2.TabIndex = 30;
            this.button2.Text = "Generate S&TS token";
            this.button2.UseVisualStyleBackColor = true;
            // 
            // button3
            // 
            this.button3.Location = new System.Drawing.Point(268, 243);
            this.button3.Name = "button3";
            this.button3.Size = new System.Drawing.Size(122, 23);
            this.button3.TabIndex = 29;
            this.button3.Text = "Generate &RPS ticket";
            this.button3.UseVisualStyleBackColor = true;
            // 
            // label9
            // 
            this.label9.AutoSize = true;
            this.label9.Location = new System.Drawing.Point(38, 123);
            this.label9.Name = "label9";
            this.label9.Size = new System.Drawing.Size(79, 13);
            this.label9.TabIndex = 28;
            this.label9.Text = "HTTP Headers";
            // 
            // textBox3
            // 
            this.textBox3.Location = new System.Drawing.Point(41, 139);
            this.textBox3.Multiline = true;
            this.textBox3.Name = "textBox3";
            this.textBox3.Size = new System.Drawing.Size(478, 98);
            this.textBox3.TabIndex = 27;
            // 
            // label10
            // 
            this.label10.AutoSize = true;
            this.label10.Location = new System.Drawing.Point(38, 50);
            this.label10.Name = "label10";
            this.label10.Size = new System.Drawing.Size(63, 13);
            this.label10.TabIndex = 26;
            this.label10.Text = "Request Url";
            // 
            // textBox4
            // 
            this.textBox4.Location = new System.Drawing.Point(41, 66);
            this.textBox4.Multiline = true;
            this.textBox4.Name = "textBox4";
            this.textBox4.Size = new System.Drawing.Size(478, 40);
            this.textBox4.TabIndex = 25;
            // 
            // tabPage3
            // 
            this.tabPage3.Controls.Add(this.label12);
            this.tabPage3.Controls.Add(this.label11);
            this.tabPage3.Controls.Add(this.gmsRequestUrl);
            this.tabPage3.Controls.Add(this.button4);
            this.tabPage3.Controls.Add(this.gmsRequestBody);
            this.tabPage3.Location = new System.Drawing.Point(4, 22);
            this.tabPage3.Name = "tabPage3";
            this.tabPage3.Size = new System.Drawing.Size(556, 617);
            this.tabPage3.TabIndex = 0;
            this.tabPage3.Text = "GMS";
            this.tabPage3.UseVisualStyleBackColor = true;
            // 
            // label12
            // 
            this.label12.AutoSize = true;
            this.label12.Location = new System.Drawing.Point(31, 90);
            this.label12.Name = "label12";
            this.label12.Size = new System.Drawing.Size(74, 13);
            this.label12.TabIndex = 39;
            this.label12.Text = "Request Body";
            // 
            // gmsRequestUrl
            // 
            this.gmsRequestUrl.Location = new System.Drawing.Point(34, 26);
            this.gmsRequestUrl.Multiline = true;
            this.gmsRequestUrl.Name = "gmsRequestUrl";
            this.gmsRequestUrl.Size = new System.Drawing.Size(478, 40);
            this.gmsRequestUrl.TabIndex = 37;
            this.gmsRequestUrl.Text = "http://gms.storax.xbox.com/Ingestion.svc";
            // 
            // button4
            // 
            this.button4.Location = new System.Drawing.Point(412, 500);
            this.button4.Name = "button4";
            this.button4.Size = new System.Drawing.Size(100, 23);
            this.button4.TabIndex = 36;
            this.button4.Text = "&Send Request";
            this.button4.UseVisualStyleBackColor = true;
            this.button4.Click += new System.EventHandler(this.button4_Click);
            // 
            // gmsRequestBody
            // 
            this.gmsRequestBody.Location = new System.Drawing.Point(34, 119);
            this.gmsRequestBody.Multiline = true;
            this.gmsRequestBody.Name = "gmsRequestBody";
            this.gmsRequestBody.Size = new System.Drawing.Size(478, 375);
            this.gmsRequestBody.TabIndex = 0;
            // 
            // tabPage4
            // 
            this.tabPage4.Location = new System.Drawing.Point(4, 22);
            this.tabPage4.Name = "tabPage4";
            this.tabPage4.Padding = new System.Windows.Forms.Padding(3);
            this.tabPage4.Size = new System.Drawing.Size(556, 617);
            this.tabPage4.TabIndex = 2;
            this.tabPage4.Text = "tabPage4";
            this.tabPage4.UseVisualStyleBackColor = true;
            // 
            // MainForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(607, 719);
            this.Controls.Add(this.tabControl);
            this.Controls.Add(this.statusStrip1);
            this.Controls.Add(this.menuStrip);
            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
            this.MainMenuStrip = this.menuStrip;
            this.Name = "MainForm";
            this.Text = "Multiplayer UI";
            this.Load += new System.EventHandler(this.MainForm_Load);
            this.menuStrip.ResumeLayout(false);
            this.menuStrip.PerformLayout();
            this.tabControl.ResumeLayout(false);
            this.tabPage1.ResumeLayout(false);
            this.tabPage1.PerformLayout();
            this.tabPage2.ResumeLayout(false);
            this.tabPage2.PerformLayout();
            this.tabPage3.ResumeLayout(false);
            this.tabPage3.PerformLayout();
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.MenuStrip menuStrip;
        private System.Windows.Forms.ToolStripMenuItem fileToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem optionsToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem helpToolStripMenuItem;
        private System.Windows.Forms.StatusStrip statusStrip1;
        private System.Windows.Forms.ToolStripMenuItem exitToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem environmentToolStripMenuItem;
        private System.Windows.Forms.TabControl tabControl;
        private System.Windows.Forms.TabPage tabPage1;
        private System.Windows.Forms.Label label3;
        private System.Windows.Forms.TextBox sessionResponse;
        private System.Windows.Forms.Button sts;
        private System.Windows.Forms.Button rps;
        private System.Windows.Forms.Label label2;
        private System.Windows.Forms.TextBox sessionHttpHeaders;
        private System.Windows.Forms.Label label1;
        private System.Windows.Forms.TextBox sessionUrl;
        private System.Windows.Forms.TabPage tabPage2;
        private System.Windows.Forms.ToolStripMenuItem fileToolStripMenuItem1;
        private System.Windows.Forms.ToolStripMenuItem oPtionsToolStripMenuItem1;
        private System.Windows.Forms.ToolStripMenuItem helpToolStripMenuItem1;
        private System.Windows.Forms.ToolStripMenuItem exitToolStripMenuItem1;
        private System.Windows.Forms.ToolStripMenuItem aboutMultiplayerUIToolStripMenuItem;
        private System.Windows.Forms.Button sessionSend;
        private System.Windows.Forms.Label label7;
        private System.Windows.Forms.TextBox sessionBody;
        private System.Windows.Forms.ComboBox sessionAPI;
        private System.Windows.Forms.Label label8;
        private System.Windows.Forms.ComboBox comboBox1;
        private System.Windows.Forms.Label label4;
        private System.Windows.Forms.Button button1;
        private System.Windows.Forms.Label label5;
        private System.Windows.Forms.TextBox textBox1;
        private System.Windows.Forms.Label label6;
        private System.Windows.Forms.TextBox textBox2;
        private System.Windows.Forms.Button button2;
        private System.Windows.Forms.Button button3;
        private System.Windows.Forms.Label label9;
        private System.Windows.Forms.TextBox textBox3;
        private System.Windows.Forms.Label label10;
        private System.Windows.Forms.TextBox textBox4;
        private System.Windows.Forms.ToolStripMenuItem environmentToolStripMenuItem1;
        private System.Windows.Forms.Label sessionHttpStatus;
        private System.Windows.Forms.Label label11;
        private System.Windows.Forms.TabPage tabPage3;
        private System.Windows.Forms.TextBox gmsRequestBody;
        private System.Windows.Forms.Label label12;
        private System.Windows.Forms.TextBox gmsRequestUrl;
        private System.Windows.Forms.Button button4;
        private System.Windows.Forms.TabPage tabPage4;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Common\Multiplayer.Proxy\GameSessionProxy.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;
using System.Xml.Linq;
using System.Runtime.Serialization;
using AsyncMultiplayer.SessionCommon;
using System.IO;
using System.Net;
using System.Configuration;
using LiveN.Test.Framework.Configuration;
using LiveN.Test.Common.Web;
using LiveN.Test.Framework.Authorization;
using Multiplayer.Test.UserAccounts;

namespace Multiplayer.Test.Proxy
{
    /// <summary>
    /// Client wrapper for the SessionManagementService.
    /// </summary>
    public class GameSessionProxy 
    {
        private SessionsService sessionService;
        private XNamespace asyncSessionManagementNamespace = "http://schemas.datacontract.org/2004/07/AsyncMultiplayer.SessionCommon";

        /// <summary>
        /// 
        /// </summary>
        public GameSessionProxy()
        {
            Initialize(this.UserID,this.Password, Config.Environment);
        }

        public GameSessionProxy(string uname, string pword, EnvironmentElement env)
        {
            Initialize(uname, pword, env);
        }
       
        private void Initialize(string uname, string pword, EnvironmentElement env)
        {
            this.UserID = uname;
            this.Password = pword;
            Uri baseUri = env.GameSessionService;
            this.sessionService = new SessionsService(baseUri.ToString());
            SessionsService.Timeout = int.Parse(ConfigurationManager.AppSettings["Timeout"]);
            this.Locale = "en-US";
            this.sessionService.AuthorizationDelegate = () =>
            {
                string userToken = Users.authCache.GetUserToken(
                    this.UserID,
                    this.Password,
                    env.WindowsLiveIDSettings.LiveIdServiceTarget,
                    env.WindowsLiveIDSettings.Policy,
                    env.WindowsLiveIDSettings.Environment,
                    env.StsSettings.PlatformType,
                    env.StsSettings.TitleId,
                    env.StsSettings.TitleVersion,
                    env.StsSettings.ClientVersion);

                string partnerToken = Users.authCache.GetPartnerToken(
                    userToken,
                    env.StsSettings.TitleId,
                    env.StsSettings.TitleVersion,
                    env.StsSettings.AudienceUri_MultiPlayer);

                KeyValuePair<string, string> authzHeader = new KeyValuePair<string, string>("X-PartnerAuthorization", "XBL1.0 x=" + partnerToken);
                return authzHeader;
            };
        }
        /// <summary>
        /// 
        /// </summary>
        public string UserID
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public string Password
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public string Locale
        {
            get;
            set;
        }

        public SessionState CreateSession(string locale, Leet.Core.Platforms.PlatformType platformType, CreationData creationData)
        {
            Dictionary<string, string> httpHeaders = this.sessionService.GetHttpHeaders(locale, platformType);
            return CreateSession(httpHeaders, creationData);
        }

        public SessionState CreateSession(Dictionary<string, string> httpHeaders, CreationData creationData)
        {
            return this.sessionService.CreateSession(httpHeaders, creationData);
        }

        /// 
        /// <summary>
        /// Client wrapper for the SessionManagementService's CreateSessionInXml() method.
        /// </summary>
        /// 
        public SessionState CreateSession(string gameID, CreationData creationData)
        {
            Dictionary<string, string> httpHeaders = this.sessionService.GetHttpHeaders(this.Locale, Leet.Core.Platforms.PlatformType.Mobile);
            return CreateSession(httpHeaders, gameID, creationData);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="gameID"></param>
        /// <param name="creationData"></param>
        /// <param name="userName"></param>
        /// <param name="password"></param>
        /// <returns></returns>
        public SessionState CreateSession(string gameID, CreationData creationData, string userName, string password)
        {
            this.UserID = userName;
            this.Password = password;
            return CreateSession(gameID, creationData);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="httpHeaders"></param>
        /// <param name="gameID"></param>
        /// <param name="creationData"></param>
        /// <returns></returns>
        public SessionState CreateSession(Dictionary<string, string> httpHeaders, string gameID, CreationData creationData)
        {
            return this.sessionService.CreateSession(httpHeaders, gameID, creationData);
        }

        public SessionState CreateSession(string memberName,
            string password,
            string locale,
            Leet.Core.Platforms.PlatformType platformType,
            InactivityWarningAction inactivityWarningAction,
            int inactivityWarningInterval,
            int inactivityWarningMaxNudges,
            byte[] sessionParameters,
            uint gameId,
            int variant,
            int totalSeatsAvailable,
            int reservedSeatsAvailable,
            bool canRemoveEmptySeats,
            string displayName
            )
        {
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = inactivityWarningAction;
            iwb.Interval = inactivityWarningInterval;
            iwb.MaxNumberOfNudges = inactivityWarningMaxNudges;

            CreationData creationData = new CreationData();
            creationData.GameID = gameId;
            creationData.Variant = variant;
            creationData.TotalSeatsAvailable = totalSeatsAvailable;
            creationData.ReservedSeatsAvailable = reservedSeatsAvailable;   //with current implementation TotalSeatsAvailable should be equal to ReservedSeatsAvailable
            creationData.SessionParameters = sessionParameters;
            creationData.InactivityWarning = iwb;
            creationData.CanRemoveEmptySeats = canRemoveEmptySeats;
            creationData.DisplayName = displayName;

            this.UserID = memberName;
            this.Password = password;
            SessionState sessionState = this.CreateSession(locale, platformType, creationData);

            return sessionState;
        }


        /// 
        /// <summary>
        /// Client wrapper for the SessionManagementService's JoinSessionInXml() method.
        /// </summary>
        /// 
        public SessionState JoinSession(string sessionId, JoinData joinData)
        {
            Dictionary<string, string> httpHeaders = this.sessionService.GetHttpHeaders(this.Locale, Leet.Core.Platforms.PlatformType.Mobile);
            return this.sessionService.JoinSession(httpHeaders, sessionId, joinData);
        }

        public SessionState JoinSession(string sessionId, JoinData joinData, string userName, string password)
        {
            this.UserID = userName;
            this.Password = password;
            return JoinSession(sessionId, joinData);
        }

        /// 
        /// <summary>
        /// Client wrapper for the SessionManagementService's RejectInvitation() method.
        /// </summary>
        /// 
        public void RejectInvitation(string gameIDString, string sessionID)
        {
            Dictionary<string, string> httpHeaders = this.sessionService.GetHttpHeaders(this.Locale, Leet.Core.Platforms.PlatformType.Mobile);
            this.sessionService.RejectInvitation(httpHeaders, sessionID, gameIDString);
        }

        public void RejectInvitation(string gameIDString, string sessionID, string userName, string password)
        {
            this.UserID = userName;
            this.Password = password;
            RejectInvitation(gameIDString, sessionID);
        }

        /// 
        /// <summary>
        /// Client wrapper for the SessionManagementService's LeaveSession() method.
        /// </summary>
        /// 
        public void LeaveSession(string sessionID, string gameID)
        {
            Dictionary<string, string> httpHeaders = this.sessionService.GetHttpHeaders(this.Locale, Leet.Core.Platforms.PlatformType.Mobile);
            this.sessionService.LeaveSession(httpHeaders, sessionID, gameID);
        }

        public void LeaveSession(string sessionID, string gameID, string userName, string password)
        {
            this.UserID = userName;
            this.Password = password;
            LeaveSession(sessionID, gameID);
        }

        /// 
        /// <summary>
        /// Client wrapper for the SessionManagementService's ModifySession() method.
        /// </summary>
        /// 
        public void ModifySession(string sessionID, string gameID, ModificationData modificationData)
        {
            Dictionary<string, string> httpHeaders = this.sessionService.GetHttpHeaders(this.Locale, Leet.Core.Platforms.PlatformType.Mobile);
            this.sessionService.ModifySession(httpHeaders, sessionID, gameID, modificationData);
        }

        public void ModifySession(string sessionID, string gameID, ModificationData modificationData, string userName, string password)
        {
            this.UserID = userName;
            this.Password = password;
            ModifySession(sessionID, gameID, modificationData);
        }
        /// 
        /// <summary>
        /// Client wrapper for the SessionManagementService's ViewSessionInXml() method.
        /// </summary>
        /// 
        public SessionState ViewSession(string sessionID, string gameID)
        {
            Dictionary<string, string> httpHeaders = this.sessionService.GetHttpHeaders(this.Locale, Leet.Core.Platforms.PlatformType.Mobile);
            return this.sessionService.ViewSession(httpHeaders, sessionID, gameID);
        }

        public SessionState ViewSession(string sessionID, string gameID, string userName, string password)
        {
            this.UserID = userName;
            this.Password = password;
            return ViewSession(sessionID, gameID);
        }

        /// 
        /// <summary>
        /// Client wrapper for the SessionManagementService's ViewSessionSummariesInXml() method.
        /// </summary>
        /// 
        public SessionEntry[] ViewSessionSummaries(string gameId, string variant, string lastSessionID, string lastGameID, string maxSessions, string showSessionType)
        {
            Dictionary<string, string> httpHeaders = this.sessionService.GetHttpHeaders(this.Locale, Leet.Core.Platforms.PlatformType.Mobile);
            return this.sessionService.ViewSessionSummaries(httpHeaders, gameId, variant, lastSessionID, lastGameID, maxSessions, showSessionType);
        }

        public SessionEntry[] ViewSessionSummaries(string gameId, string variant, string lastSessionID, string lastGameID, string maxSessions, string showSessionType, string userName, string password)
        {
            this.UserID = userName;
            this.Password = password;
            return ViewSessionSummaries(gameId, variant, lastSessionID, lastGameID, maxSessions, showSessionType);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Tools\SMTPTest\SMTPListener.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Net;
using System.Net.Sockets;
using System.Net.Mail;
using System.Text.RegularExpressions;

namespace SMTPTest
{
    public class MailReceivedEventArgs : EventArgs
    {
        public String MailString { get; set; }
    }

    public delegate void MailReceivedEventHandler(object sender, MailReceivedEventArgs e);

    public static class MailStorage
    {
        private static Dictionary<int, StringBuilder> _sb = new Dictionary<int, StringBuilder>();
        public static void Update(int hash, StringBuilder dataToAdd)
        {
            lock (_sb)
            {
                StringBuilder s;
                if (!_sb.TryGetValue(hash, out s))
                {
                    _sb.Add(hash, new StringBuilder().Append(dataToAdd));
                }
                else
                {
                    s.Append(dataToAdd);
                }
            }
        }
        public static string GetMail(int hash)
        {
            lock (_sb)
            {
                return _sb[hash].ToString();
            }
        }

        public static void ClearMail(int hash)
        {
            lock (_sb)
            {
                _sb[hash] = new StringBuilder();
            }
        }

    }

    public class ReadObject
    {
        public const int BufferSize = 1024;

        public ReadObject(Socket w, int id)
        {
            WorkSocket = w;
            Id = id;
        }

        public readonly Socket WorkSocket;
        public byte[] buffer = new byte[BufferSize];
        public StringBuilder sb = new StringBuilder();
        public readonly int Id;
    }

    public class SendObject
    {
        public SendObject(Socket s, bool sc, int id)
        {
            WorkSocket = s;
            ShouldClose = sc;
            Id = id;
        }
        public readonly int Id;
        public Socket WorkSocket
        {
            get;
            set;
        }
        public readonly bool ShouldClose = false;
    }

    public class SmtpListener
    {
        private Random _randomGenerator = new Random();
        private Socket _listenerSocket;
        private ManualResetEvent _accepted;
        private volatile bool _isStopping = false;

        private Thread _listenerThread;

        public event MailReceivedEventHandler MailReceivedEvent;

        public SmtpListener()
        {
            _listenerSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            _accepted = new ManualResetEvent(false);

            _listenerThread = new Thread(new ThreadStart(this.Listen));

        }

        protected virtual void OnMailReceived(MailReceivedEventArgs e)
        {
            if (MailReceivedEvent != null)
            {
                MailReceivedEvent(this, e);
            }
        }


        public static string Chomp(string s)
        {
            return s.EndsWith("\r\n") ? s.TrimEnd("\r\n".ToCharArray()) : s;
        }

        public void ReadCompleted(ReadObject so)
        {
            Console.WriteLine("DoneReading: " + so.sb);
            string[] split = Chomp(so.sb.ToString()).Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);

            //data?
            if (split.Length < 1)
            {
                string response = "250 Ok" + Environment.NewLine;
                if (so.sb.ToString() == Environment.NewLine)
                {
                    //response = "221 BBN-UNIX.ARPA Service closing transmission channel";
                }
                Send(so.WorkSocket, response, so.Id);
                return;
            }

            switch (split[0])
            {
                case "EHLO":
                    Send(so.WorkSocket, "250 " + Environment.MachineName + Environment.NewLine, so.Id);
                    break;
                case "MAIL":
                    if (!split[1].StartsWith("FROM:"))
                    {
                    }
                    MailStorage.Update(so.Id, so.sb);
                    //Send(so.WorkSocket, "250 Ok" + Environment.NewLine, so.Id);
                    Send(so.WorkSocket, "250 2.1.0 Sender OK" + Environment.NewLine, so.Id);
                    break;
                case "RCPT":
                    if (!split[1].StartsWith("TO:"))
                    {

                    }
                    MailStorage.Update(so.Id, so.sb);
                    //Send(so.WorkSocket, "250 Ok" + Environment.NewLine, so.Id);
                    Send(so.WorkSocket, "250 2.1.5 Recipient OK" + Environment.NewLine, so.Id);
                    break;
                case "DATA":
                    Send(so.WorkSocket, "354 End data with <CR><LF>.<CR><LF>" + Environment.NewLine, so.Id);
                    break;
                case "\r\n.":
                    //the extra \r\n is chomped off
                    OnMailReceived(new MailReceivedEventArgs() { MailString = MailStorage.GetMail(so.Id) });

                    //smtpclient in a loop will reuse it's existing connection, so clear the entry we're storing for this socket since it's already been delievered
                    //to a higher layer

                    MailStorage.ClearMail(so.Id);
                    Send(so.WorkSocket, "250 2.6.0 <test:to@to.com> Queued mail for delivery" + Environment.NewLine, so.Id, false);
                    //Send(so.WorkSocket, "250 Ok: queued as 12345" + Environment.NewLine, so.Id, false);
                    break;
                case "QUIT":
                    Send(so.WorkSocket, "221 Bye" + Environment.NewLine, so.Id, true);
                    break;
                case "Subject:":
                    string decodedSubject = String.Join(" ", split, 1, split.Length - 1);
                    Regex r = new Regex(@"^=\?utf-8\?B\?(?<Message>.*)\?=$", RegexOptions.Compiled);
                    Match match = r.Match(split[1]);
                    if (match.Length > 0)
                    {
                        decodedSubject = Encoding.UTF8.GetString(Convert.FromBase64String(match.Groups["Message"].Value));
                    }
                    MailStorage.Update(so.Id, new StringBuilder("Subject: " + decodedSubject + Environment.NewLine));
                    //Send(so.WorkSocket, "250 Ok" + Environment.NewLine, so.Id);
                    Send(so.WorkSocket, String.Empty, so.Id);
                    break;
                default:
                    //really this is a hack, but i would need to turn this stateless thing into an actual state machine per request, and that seems like much more work.

                    try
                    {
                        so.sb = new StringBuilder(Encoding.UTF8.GetString(Convert.FromBase64String(so.sb.ToString())));
                    }
                    catch (Exception)
                    {
                    }

                    MailStorage.Update(so.Id, so.sb);
                    Send(so.WorkSocket, String.Empty, so.Id);
                    break;

            }
        }

        public void ReadCallback(IAsyncResult ar)
        {
            ReadObject state = (ReadObject)ar.AsyncState;
            int read = 0;
            try
            {
                read = state.WorkSocket.EndReceive(ar);
            }
            catch (SocketException e)
            {
                if (e.ErrorCode == 10054)
                {
                    return;
                }

            }

            if (read <= 0)
            {
                //todo(michperr): Put error handling here
            }
            string readStr = Encoding.ASCII.GetString(state.buffer, 0, read);
            state.sb.Append(readStr);

            //if (state.buffer[read-2]== '\r' && state.buffer[read-1]=='\n')
            if (!state.sb.ToString().Equals("\r\n") && readStr.Equals("\n"))
            //if (read < state.buffer.Length)
            {
                ReadCompleted(state);
            }
            else
            {
                try
                {
                    state.WorkSocket.BeginReceive(state.buffer, 0, 1, 0,
                            new AsyncCallback(ReadCallback), state);
                }
                catch (SocketException)
                {
                    //int a = 0;
                }
            }

        }

        public void AcceptCallback(IAsyncResult ar)
        {
            Console.WriteLine("AcceptCallback");
            Socket clientSock = (Socket)ar.AsyncState;
            Socket handler;

            try
            {
                handler = clientSock.EndAccept(ar);
                _accepted.Set();
                Send(handler, "220 " + Environment.MachineName + " Simple Mail Transfer Service Ready" + Environment.NewLine, _randomGenerator.Next());
            }
            catch (ObjectDisposedException)
            {
                //server is shutting down...
                //todo(michperr): Fix this logic
                _accepted.Set();
                return;
            }
        }

        private void Send(Socket handler, String data, int id)
        {
            Send(handler, data, id, false);
        }
        private void Send(Socket handler, String data, int id, bool shouldClose)
        {
            byte[] byteData = Encoding.ASCII.GetBytes(data);
            Console.WriteLine("{0} Sending: {1}", handler.GetHashCode(), data);

            handler.BeginSend(byteData, 0, byteData.Length, 0,
                new AsyncCallback(this.SendCallback), new SendObject(handler, shouldClose, id));

        }

        private void SendCallback(IAsyncResult ar)
        {
            try
            {
                SendObject so = (SendObject)ar.AsyncState;
                int bytesSent = so.WorkSocket.EndSend(ar);

                Console.WriteLine("Sent {0} bytes to client.", bytesSent);

                if (so.ShouldClose)
                {
                    Console.WriteLine(MailStorage.GetMail(so.Id));

                    so.WorkSocket.Shutdown(SocketShutdown.Both);
                    so.WorkSocket.Close();
                    so.WorkSocket = null;
                    Console.WriteLine("Connection closed");
                    return;
                }

                ReadObject state = new ReadObject(so.WorkSocket, so.Id);
                so.WorkSocket.BeginReceive(state.buffer, 0, 1, 0,
                    new AsyncCallback(ReadCallback), state);
            }
            catch (Exception e)
            {
                Console.WriteLine(e.ToString());
            }
        }


        public void StopListener()
        {
            Stop();
            _listenerThread.Join();
        }

        private void Stop()
        {
            _isStopping = true;
            if (_listenerSocket.Connected)
            {
                _listenerSocket.Shutdown(SocketShutdown.Both);
            }
            _listenerSocket.Close(0);
            _listenerSocket = null;
        }

        public void StartListener()
        {
            _listenerThread.Start();
        }

        private void Listen()
        {
            Console.WriteLine("Listener: Starting");
            _listenerSocket.Bind(new IPEndPoint(IPAddress.Any, 25));
            _listenerSocket.Listen(Int32.MaxValue);

            while (!_isStopping)
            {
                _accepted.Reset();
                _listenerSocket.BeginAccept(new AsyncCallback(AcceptCallback), _listenerSocket);
                _accepted.WaitOne();
            }
            //Console.WriteLine("Done Listening");
        }
    }

    public class SMTPListenerWrapper
    {
        private AutoResetEvent _resetEvent;
        private int _mailsExpected;
        private bool stopReceivingEmails = false;
        private List<string> _receivedMail;
        private SmtpListener _listener;

        public MailReceivedEventHandler _mailHandler;

        public SMTPListenerWrapper(int numberOfMailsExpected)
        {
            _mailsExpected = numberOfMailsExpected;
            _resetEvent = new AutoResetEvent(false);
            _resetEvent.Reset();
            _listener = new SmtpListener();
            _receivedMail = new List<string>();

            _mailHandler = delegate(object sender, MailReceivedEventArgs e)
            {
                _receivedMail.Add(e.MailString);

                if (_receivedMail.Count == _mailsExpected || stopReceivingEmails)
                {
                    _resetEvent.Set();
                }
            };
            _listener.MailReceivedEvent += _mailHandler;
        }

        public void Init()
        {
            _listener.StartListener();
        }

        public List<string> WaitForMail(int timeoutMs)
        {
            Console.WriteLine("Waiting For Mail");

            if (!_resetEvent.WaitOne(timeoutMs))
            {
                //throw some exception because we slept for 10 seconds and didn't get any mail
                //throw new Exception("FAIL");
                stopReceivingEmails = true;
            }
            Console.WriteLine("DONE Waiting For Mail");
            return _receivedMail;
        }

        public void Stop()
        {
            _listener.MailReceivedEvent -= _mailHandler;
            _listener.StopListener();
        }
    }

    public class email
    {
        public string To { get; set; }
        public string Subject { get; set; }
        public string Body { get; set; }
    }

    class Program
    {

        static void GetMail(string subject)
        {
            int numOfMails = 20;
            SMTPListenerWrapper listener = new SMTPListenerWrapper(numOfMails);

            listener.Init();

            Console.WriteLine("Main Thread: starting listener");


            Thread.Sleep(1 * 1000);

            SmtpClient cl = new SmtpClient("127.0.0.1", 25);
            //SmtpClient cl = new SmtpClient("smtphost.redmond.corp.microsoft.com", 25);
            cl.Credentials = new NetworkCredential(
                "ztest01",
                "TN7SmQ8qJ8",
                "REDMOND");

            for (int i = 0; i < numOfMails; i++)
            {
                using (MailMessage m = new MailMessage("ztest01@microsoft.com", "opssek" + i + "@gmail.com"))
                {
                    m.Subject = subject;
                    m.Body = "veut jouer à Backgammon (French)!";

                    //m.Subject = "A";
                    //m.Body = "B";
                    try
                    {
                        cl.Send(m);
                        //Thread.Sleep(10000);
                    }
                    catch (Exception e)
                    {
                        Console.WriteLine("SMTP FAIL :( {0}", e);
                        return;
                    }

                }

            }
            List<string> recMail = listener.WaitForMail(100 * 10000);
            string receivedMail = recMail[0];

            string[] mailLines = receivedMail.Split(new string[] { Environment.NewLine }, StringSplitOptions.None);
            //Array.ForEach(mailLines, x => Console.WriteLine(x));

            string encodedSubject = mailLines[6].Split(new string[] { "Subject: " }, StringSplitOptions.RemoveEmptyEntries)[0];
            string decodedBody = mailLines[9];

            listener.Stop();

        }


        static void Main(string[] args)
        {
            GetMail("möchte Backgammon (German) spielen!");
            GetMail("A");

            /*
            SMTPListenerWrapper listener = new SMTPListenerWrapper(2);
            listener.Init();
            SMTPSend();
            */
            Console.WriteLine("Complete");

        }

        //mike's test code for incomplete send.  Ignore.
        static void SMTPSend()
        {
            byte[] buffer = new byte[512];
            byte[] data;

            TcpClient tcpCl = new TcpClient();
            tcpCl.Connect(new IPEndPoint(IPAddress.Parse("127.0.0.1"), 25));

            NetworkStream ns = tcpCl.GetStream();

            //server ID
            int bytesRead = ns.Read(buffer, 0, buffer.Length);
            Console.WriteLine("Received: {0}", System.Text.Encoding.ASCII.GetString(buffer, 0, bytesRead));


            data = System.Text.Encoding.ASCII.GetBytes("EHLO MICHPERR1" + Environment.NewLine);
            ns.Write(data, 0, data.Length);

            //250 michperr1
            bytesRead = ns.Read(buffer, 0, buffer.Length);
            Console.WriteLine("Received: {0}", System.Text.Encoding.ASCII.GetString(buffer, 0, bytesRead));

            data = System.Text.Encoding.ASCII.GetBytes("MAIL FROM:<ztest01@microsoft.com>" + Environment.NewLine);
            ns.Write(data, 0, data.Length);

            //250 2.1.0 Sender OK
            bytesRead = ns.Read(buffer, 0, buffer.Length);
            Console.WriteLine("Received: {0}", System.Text.Encoding.ASCII.GetString(buffer, 0, bytesRead));

            data = System.Text.Encoding.ASCII.GetBytes("RCPT TO:<opssek0@gmail.com>" + Environment.NewLine);
            ns.Write(data, 0, data.Length);

            //250 2.1.5 Recipient OK
            bytesRead = ns.Read(buffer, 0, buffer.Length);
            Console.WriteLine("Received: {0}", System.Text.Encoding.ASCII.GetString(buffer, 0, bytesRead));


            data = System.Text.Encoding.ASCII.GetBytes("DATA" + Environment.NewLine);
            ns.Write(data, 0, data.Length);

            //354 End data with <CR><LF>.<CR><LF>
            bytesRead = ns.Read(buffer, 0, buffer.Length);
            Console.WriteLine("Received: {0}", System.Text.Encoding.ASCII.GetString(buffer, 0, bytesRead));

            data = System.Text.Encoding.ASCII.GetBytes(
                        @"MIME-Version: 1.0
                        From: ztest01@microsoft.com
                        To: opssek0@gmail.com
                        Date: 14 Jul 2010 19:50:38 -0700
                        Subject: =?utf-8?B?bcO2Y2h0ZSBCYWNrZ2FtbW9uIChHZXJtYW4pIHNwaWVsZW4h?=
                        Content-Type: text/plain; charset=utf-8
                        Content-Transfer-Encoding: base64
                        dmV1dCBqb3VlciDDoCBCYWNrZ2FtbW9uIChGcmVuY2gpIQ==
                        "
                        );
            ns.Write(data, 0, data.Length);

            //354 End data with <CR><LF>.<CR><LF>
            bytesRead = ns.Read(buffer, 0, buffer.Length);
            Console.WriteLine("Received: {0}", System.Text.Encoding.ASCII.GetString(buffer, 0, bytesRead));
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Tools\MultiplayerUI\Program.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;

namespace MultiplayerUI
{
    static class Program
    {
        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new MainForm());
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Common\Multiplayer.Proxy\NotificationFEService.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using LiveN.Test.Common.Web;
using AsyncMultiplayer.NotificationService;
using Gds.Contracts;
using Leet.Core.Platforms;
using LiveN.Test.Framework.Configuration;
using System.Security.Cryptography.X509Certificates;
using LiveN.Test.Framework.Authorization;

namespace Multiplayer.Test.Proxy
{
    public class NotificationFEService : RestRequest
    {
        public const string GetNotificationsUrlFormat = "/game/{gameId}";
        public const string DeleteNotificationsBySessionUrlFormat = "deletesession/?game={gameIdString}&session={sessionId}";
        public const string DeleteNotificationsUrlFormat = "delete/?notification={notificationId}";
        public const string SpotlightUrlFormat = "Spotlight/?carrier={carrierString}";
        public const string UpdateNotificationUrlFormat = "update/?notification={notificationId}&status={status}";
        public Uri serviceEndPoint;

        public string EtagInResponse
        {
            get;
            private set;
        }

        public string BaseUri
        {
            get;
            set;
        }

        public Dictionary<string, string> GetHttpHeaders(string locale, string eTag, PlatformType platformType, string xuid)
        {
            Dictionary<string, string> httpHeaders = base.GetHttpHeaders();
            if (!String.IsNullOrEmpty(locale))
                httpHeaders.Add("X-Locale", locale);
            if (eTag != null)
                httpHeaders.Add("If-None-Match", eTag);
            if (!string.IsNullOrEmpty(xuid))
                httpHeaders.Add("X-Xuid", xuid);
            httpHeaders.Add("X-Platform-Type", ((uint)platformType).ToString());
            return httpHeaders;
        }

        public Dictionary<string, string> GetHttpHeaders(string locale, string eTag, PlatformType platformType)
        {
            return GetHttpHeaders(locale, eTag, platformType, null);
        }

        public List<Notification> GetNotifications(
            Dictionary<string, string> httpHeaders,
            string gameId,
            string sessionId,
            int category,
            string lastId,
            int count,
            string typeString,
            bool userVisibleOnly,
            X509Certificate2 cert)
        {
            string url = String.Format("{0}/?game={1}&session={2}&category={3}&last={4}&count={5}&type={6}&userVisibleOnly={7}",
                serviceEndPoint,
                gameId,
                sessionId,
                category,
                lastId,
                count,
                typeString,
                userVisibleOnly);

            RestResponse response = Get(url, httpHeaders, cert);
            if (response.Headers.ContainsKey("ETag"))
            {
                this.EtagInResponse = response.Headers["ETag"];
            }
            else
                this.EtagInResponse = null;

            if (!response.Succeeded)
            {
                throw new RestException(response);
            }
            return DeserializeObject<NotificationList>(response.Body);
        }

        public void UpdateNotification(
            Dictionary<string, string> httpHeaders,
            string notificationId,
            string status,
            X509Certificate2 cert)
        {
            string uri = String.Format("{0}/update/?notification={1}&status={2}",
                serviceEndPoint,
                notificationId,
                status);

            RestResponse rr = Put(uri, httpHeaders, null, cert);

            if (!rr.Succeeded)
            {
                throw new RestException(rr);
            }
        }

        public void DeleteNotificationQuery(
            Dictionary<string, string> customHeaders,
            string notificationId,
            X509Certificate2 cert)
        {
            string uri = String.Format("{0}/delete/?notification={1}",
                serviceEndPoint,
                notificationId);

            RestResponse rr = Delete(uri, customHeaders, cert);
            if (!rr.Succeeded)
            {
                throw new RestException(rr);
            }
        }

        public void DeleteNotificationBySession(
            Dictionary<string, string> customHeaders,
            string gameIdString,
            string sessionId,
            X509Certificate2 cert)
        {

            string uri = String.Format("{0}/deletesession/?game={1}&session={2}",
                serviceEndPoint,
                gameIdString,
                sessionId);

            RestResponse rr = Delete(uri, customHeaders, cert);
            if (!rr.Succeeded)
            {
                throw new RestException(rr);
            }
        }

        public void SendInvite(
            Dictionary<string, string> customHeaders,
            InviteRequest request,
            X509Certificate2 cert)
        {

            string uri = String.Format("{0}/invite/",
                                serviceEndPoint);

            RestResponse rr = Post(uri, customHeaders, SerializeObject(request), cert);
            if (!rr.Succeeded)
            {
                throw new RestException(rr);
            }
        }

        public List<Spotlight> GetSpotlight(
            Dictionary<string, string> customHeaders,
            string carrierString)
        {
            string uri = String.Format("{0}/Spotlight/", serviceEndPoint);

            if (carrierString != null)
            {
                uri += String.Format("?carrier={0}/", carrierString);
            }

            RestResponse rr = Get(uri, customHeaders);

            if (rr.Headers.ContainsKey("ETag"))
            {
                // If you query for Spotlight with an unsupported language+locale combination you don't get an ETag back
                this.EtagInResponse = rr.Headers["ETag"];
            }
            else
            {
                this.EtagInResponse = null;
            }

            if (!rr.Succeeded)
            {
                throw new RestException(rr);
            }

            if (string.IsNullOrEmpty(rr.Body))
            {
                return null;
            }
            else
                return new List<Spotlight>(DeserializeObject<Spotlight[]>(rr.Body));
        }

        public LeaderboardResult GetLeaderboard(
            Dictionary<string, string> customHeaders,
            string gameId,
            string variant,
            string property,
            string rankStart,
            string dataGroup,
            string numRows,
            string socialGraph)
        {
            string uri = String.Format("{0}/leaderboard?format=xml&gameId={1}&variant={2}&property={3}&datagroup={5}&numRows={6}&rankStart={4}&socialGraph={7}",
                            Config.Environment.GameDataService,
                            gameId,
                            variant,
                            property,
                            rankStart,
                            dataGroup,
                            numRows,
                            socialGraph);

            RestResponse rr = Get(uri, customHeaders);
            if (!rr.Succeeded)
            {
                throw new RestException(rr);
            }
            return DeserializeObject<LeaderboardResult>(rr.Body);
        }


    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Archive\Tools\MPStress\MainForm.cs ===
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Net;
using System.Windows.Forms;
using System.Diagnostics;
using System.Xml.Linq;
using System.Security.Cryptography;

namespace MPStress
{
    /// <summary>
    /// 
    /// </summary>
    public partial class mainForm : Form
    {
        private static bool quit;
        private static int calls;
        private static int totalCalls;
        private static int succeeded;
        private static int failed;
        private static int timeouts;
        private static ulong latencyTotal;
        private static int tpsSampleCount;

        private System.Threading.Timer timer;
        private Queue<Thread> workerThreads;

        private const string XUID_PLACEHOLDER = "{XUID}";
        private const string partnerTokenDefault = "<?xml version=\"1.0\" encoding=\"utf-16\"?><saml:Assertion MajorVersion=\"1\" MinorVersion=\"1\" AssertionID=\"SamlSecurityToken-78949cc1-b489-474a-a16e-580eb4105280\" Issuer=\"http://sts.xboxlive.com\" IssueInstant=\"2010-04-21T18:55:12.270Z\" xmlns:saml=\"urn:oasis:names:tc:SAML:1.0:assertion\"><saml:Conditions NotBefore=\"2010-04-21T18:55:12.270Z\" NotOnOrAfter=\"2010-04-21T22:55:12.254Z\"></saml:Conditions><saml:AttributeStatement><saml:Subject><saml:NameIdentifier Format=\"/xboxlive/nameFormat\" NameQualifier=\"Microsoft-NameQualifier-domain\">XboxLive Partner security ticket</saml:NameIdentifier></saml:Subject><saml:Attribute AttributeName=\"PlatformType\" AttributeNamespace=\"http://xboxlive.com/claims\"><saml:AttributeValue>15</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=\"MachineID\" AttributeNamespace=\"http://xboxlive.com/claims\"><saml:AttributeValue>18158543855591058837</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=\"DeviceID\" AttributeNamespace=\"http://xboxlive.com/claims\"><saml:AttributeValue>7D1DFFCEAA9C39374813DBDD473D49DF6DA1FF00</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=\"ClientVersion\" AttributeNamespace=\"http://xboxlive.com/claims\"><saml:AttributeValue>1</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=\"TitleID\" AttributeNamespace=\"http://xboxlive.com/claims\"><saml:AttributeValue>4D5308E2</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=\"TitleVersion\" AttributeNamespace=\"http://xboxlive.com/claims\"><saml:AttributeValue>1</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=\"Puid0\" AttributeNamespace=\"http://xboxlive.com/claims\"><saml:AttributeValue>985160354119684</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=\"CID0\" AttributeNamespace=\"http://xboxlive.com/claims\"><saml:AttributeValue>10877358472251249868</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=\"PartnerID0\" AttributeNamespace=\"http://xboxlive.com/claims\"><saml:AttributeValue>" + XUID_PLACEHOLDER + " </saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=\"Gamertag0\" AttributeNamespace=\"http://xboxlive.com/claims\"><saml:AttributeValue>LL430ua15ie26</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=\"Tier0\" AttributeNamespace=\"http://xboxlive.com/claims\"><saml:AttributeValue>6</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=\"Country0\" AttributeNamespace=\"http://xboxlive.com/claims\"><saml:AttributeValue>103</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=\"Privileges0\" AttributeNamespace=\"http://xboxlive.com/claims\"><saml:AttributeValue>220,223,224,226,227,228,229,230,231,234,237,238,240,242,243,244,245,246,247,248,249,250,251,252,253,254,255</saml:AttributeValue></saml:Attribute></saml:AttributeStatement><Signature xmlns=\"http://www.w3.org/2000/09/xmldsig#\"><SignedInfo><CanonicalizationMethod Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\"></CanonicalizationMethod><SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\"></SignatureMethod><Reference URI=\"#SamlSecurityToken-78949cc1-b489-474a-a16e-580eb4105280\"><Transforms><Transform Algorithm=\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\"></Transform><Transform Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\"></Transform></Transforms><DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\"></DigestMethod><DigestValue>1UlncW+k7i/jk+t88/AB3/STJS0=</DigestValue></Reference></SignedInfo><SignatureValue>HM/T/OsmlmI77Qhu/2J8Ac6/q6zD/iN59jgGx9JKP4vE3BUjWZNJWzLImDKbqqqkTvVjmuJgVDCdJlFovtZJgLQyTdAjrbyEteFgZdtlp02tZjDImLP01A8Ulo+3TH7AeReXrkJlYW6hcOR6O9TAojoLv4233ZgfJmutsEZiOezvOHUe4uwS0EO4vVByRnFxJf7AWFq66AmbN5V3Dp/3FK14iUeVQ2OkvUqBLwyma426vkiUfDswcBYAVUHTlvPZZ+96/5qTF3fz1l8ecaivp0iYUgp1nppLaS+dl5WDhPtl6Z7zDIB+wb/iJ+yxHemXgTbgge1DgY93jIUj4x1AFw==</SignatureValue><KeyInfo><X509Data><X509Certificate>MIIGdjCCBV6gAwIBAgIKaus+gwAFAAExNzANBgkqhkiG9w0BAQUFADCBizETMBEGCgmSJomT8ixkARkWA2NvbTEZMBcGCgmSJomT8ixkARkWCW1pY3Jvc29mdDEUMBIGCgmSJomT8ixkARkWBGNvcnAxFzAVBgoJkiaJk/IsZAEZFgdyZWRtb25kMSowKAYDVQQDEyFNaWNyb3NvZnQgU2VjdXJlIFNlcnZlciBBdXRob3JpdHkwHhcNMDkwNzIwMjIzMzUzWhcNMTAwNzIwMjIzMzUzWjB0MQswCQYDVQQGEwJVUzELMAkGA1UECBMCV0ExEDAOBgNVBAcTB1JlZG1vbmQxEjAQBgNVBAoTCU1pY3Jvc29mdDESMBAGA1UECxMJWGJveCBMaXZlMR4wHAYDVQQDExVzdHMudGVzdC54Ym94bGl2ZS5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCo0JkOVgSJPAJEBI9CQfi7kA2k2Tzha0eQQPuDMoQLhOQ6D1JmdfOjpc20ZUkhlw3J/JQ8asrYJfbVm1DVxE3tggP3CfZDu17nWG+IwWr4GtrekVPaSumIks7oCTBUWUSy3LXN7sBrLpWhjO+u6SVcx4/EfSVfcn9tXzBADnkZT7Tg9YyRnXxM/Lbp3WKGRFgAHwkeyULhzkW01RSyRJjvYDGQmyS5Nrvshf+UlDTiAegFd87y87uMFCxRGzOIw/FEifHpl0zDQa7t/09KYIjF54CLPna5+TrutxuvIqvLTVbtxmQKLS+vCMlGd/9zvjVR/v5w3F4hSMF9OmIHQXifAgMBAAGjggLwMIIC7DALBgNVHQ8EBAMCBLAwRAYJKoZIhvcNAQkPBDcwNTAOBggqhkiG9w0DAgICAIAwDgYIKoZIhvcNAwQCAgCAMAcGBSsOAwIHMAoGCCqGSIb3DQMHMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEFBQcDATAdBgNVHQ4EFgQUyMXx5f+44yhMQ6LbnebvHs7k6nMwHwYDVR0jBBgwFoAUFFXEOeA9LtFVLkiWsNh+FCIGk7wwggEKBgNVHR8EggEBMIH+MIH7oIH4oIH1hlhodHRwOi8vbXNjcmwubWljcm9zb2Z0LmNvbS9wa2kvbXNjb3JwL2NybC9NaWNyb3NvZnQlMjBTZWN1cmUlMjBTZXJ2ZXIlMjBBdXRob3JpdHkoNSkuY3JshlZodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL21zY29ycC9jcmwvTWljcm9zb2Z0JTIwU2VjdXJlJTIwU2VydmVyJTIwQXV0aG9yaXR5KDUpLmNybIZBaHR0cDovL2NvcnBwa2kvY3JsL01pY3Jvc29mdCUyMFNlY3VyZSUyMFNlcnZlciUyMEF1dGhvcml0eSg1KS5jcmwwgb8GCCsGAQUFBwEBBIGyMIGvMF4GCCsGAQUFBzAChlJodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpL21zY29ycC9NaWNyb3NvZnQlMjBTZWN1cmUlMjBTZXJ2ZXIlMjBBdXRob3JpdHkoNSkuY3J0ME0GCCsGAQUFBzAChkFodHRwOi8vY29ycHBraS9haWEvTWljcm9zb2Z0JTIwU2VjdXJlJTIwU2VydmVyJTIwQXV0aG9yaXR5KDUpLmNydDA/BgkrBgEEAYI3FQcEMjAwBigrBgEEAYI3FQiDz4lNrfIChaGfDIL6yn2B4ft0gU+Dwu2FCI6p0oVjAgFkAgEGMCcGCSsGAQQBgjcVCgQaMBgwCgYIKwYBBQUHAwIwCgYIKwYBBQUHAwEwDQYJKoZIhvcNAQEFBQADggEBAHueQfJCg4CjE4DD6gaQcbIdoyid+25U2X6SXnkzGktZv9eAI3lU8syYKRewb7buJALGQYkc8Xi9RNbQ32vUwXhh/gog/1nSnFJqPW5ry5350TZTSCkMEzPkit04IDsiN34NG9z821NrkWOXuhJzkuW5ZR9rmyPjD/sw3EMmeXVFk1tgLw9ggekPIxTymxUnEBadBMIhMBha9xA1MbHcYwHHH2AEHwUaEbpSg1SUcqSOaXESKwDm3Etf176juBKev/ghUiTU3dIXGvF/VzZFWyk0NlFLUA2EEbBmaIizHfc18/MQH4V6RXwSPgIXmKAKcNb0a6pv+MCXSB8nq5FDwpw=</X509Certificate></X509Data></KeyInfo></Signature></saml:Assertion>";
        private const string userTokenDefault = "<?xml version=\"1.0\" encoding=\"utf-16\"?><saml:Assertion MajorVersion=\"1\" MinorVersion=\"1\" AssertionID=\"SamlSecurityToken-78949cc1-b489-474a-a16e-580eb4105280\" Issuer=\"http://sts.xboxlive.com\" IssueInstant=\"2010-04-21T18:55:12.270Z\" xmlns:saml=\"urn:oasis:names:tc:SAML:1.0:assertion\"><saml:Conditions NotBefore=\"2010-04-21T18:55:12.270Z\" NotOnOrAfter=\"2010-04-21T22:55:12.254Z\"></saml:Conditions><saml:AttributeStatement><saml:Subject><saml:NameIdentifier Format=\"/xboxlive/nameFormat\" NameQualifier=\"Microsoft-NameQualifier-domain\">XboxLive User security ticket</saml:NameIdentifier></saml:Subject><saml:Attribute AttributeName=\"PlatformType\" AttributeNamespace=\"http://xboxlive.com/claims\"><saml:AttributeValue>15</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=\"MachineID\" AttributeNamespace=\"http://xboxlive.com/claims\"><saml:AttributeValue>18158543855591058837</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=\"DeviceID\" AttributeNamespace=\"http://xboxlive.com/claims\"><saml:AttributeValue>7D1DFFCEAA9C39374813DBDD473D49DF6DA1FF00</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=\"ClientVersion\" AttributeNamespace=\"http://xboxlive.com/claims\"><saml:AttributeValue>1</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=\"TitleID\" AttributeNamespace=\"http://xboxlive.com/claims\"><saml:AttributeValue>4D5308E2</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=\"TitleVersion\" AttributeNamespace=\"http://xboxlive.com/claims\"><saml:AttributeValue>1</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=\"Puid0\" AttributeNamespace=\"http://xboxlive.com/claims\"><saml:AttributeValue>985160354119684</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=\"CID0\" AttributeNamespace=\"http://xboxlive.com/claims\"><saml:AttributeValue>10877358472251249868</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=\"Xuid0\" AttributeNamespace=\"http://xboxlive.com/claims\"><saml:AttributeValue>" + XUID_PLACEHOLDER + " </saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=\"Gamertag0\" AttributeNamespace=\"http://xboxlive.com/claims\"><saml:AttributeValue>LL430ua15ie26</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=\"Tier0\" AttributeNamespace=\"http://xboxlive.com/claims\"><saml:AttributeValue>6</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=\"Country0\" AttributeNamespace=\"http://xboxlive.com/claims\"><saml:AttributeValue>103</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=\"Privileges0\" AttributeNamespace=\"http://xboxlive.com/claims\"><saml:AttributeValue>220,223,224,226,227,228,229,230,231,234,237,238,240,242,243,244,245,246,247,248,249,250,251,252,253,254,255</saml:AttributeValue></saml:Attribute></saml:AttributeStatement><Signature xmlns=\"http://www.w3.org/2000/09/xmldsig#\"><SignedInfo><CanonicalizationMethod Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\"></CanonicalizationMethod><SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\"></SignatureMethod><Reference URI=\"#SamlSecurityToken-78949cc1-b489-474a-a16e-580eb4105280\"><Transforms><Transform Algorithm=\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\"></Transform><Transform Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\"></Transform></Transforms><DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\"></DigestMethod><DigestValue>1UlncW+k7i/jk+t88/AB3/STJS0=</DigestValue></Reference></SignedInfo><SignatureValue>HM/T/OsmlmI77Qhu/2J8Ac6/q6zD/iN59jgGx9JKP4vE3BUjWZNJWzLImDKbqqqkTvVjmuJgVDCdJlFovtZJgLQyTdAjrbyEteFgZdtlp02tZjDImLP01A8Ulo+3TH7AeReXrkJlYW6hcOR6O9TAojoLv4233ZgfJmutsEZiOezvOHUe4uwS0EO4vVByRnFxJf7AWFq66AmbN5V3Dp/3FK14iUeVQ2OkvUqBLwyma426vkiUfDswcBYAVUHTlvPZZ+96/5qTF3fz1l8ecaivp0iYUgp1nppLaS+dl5WDhPtl6Z7zDIB+wb/iJ+yxHemXgTbgge1DgY93jIUj4x1AFw==</SignatureValue><KeyInfo><X509Data><X509Certificate>MIIGdjCCBV6gAwIBAgIKaus+gwAFAAExNzANBgkqhkiG9w0BAQUFADCBizETMBEGCgmSJomT8ixkARkWA2NvbTEZMBcGCgmSJomT8ixkARkWCW1pY3Jvc29mdDEUMBIGCgmSJomT8ixkARkWBGNvcnAxFzAVBgoJkiaJk/IsZAEZFgdyZWRtb25kMSowKAYDVQQDEyFNaWNyb3NvZnQgU2VjdXJlIFNlcnZlciBBdXRob3JpdHkwHhcNMDkwNzIwMjIzMzUzWhcNMTAwNzIwMjIzMzUzWjB0MQswCQYDVQQGEwJVUzELMAkGA1UECBMCV0ExEDAOBgNVBAcTB1JlZG1vbmQxEjAQBgNVBAoTCU1pY3Jvc29mdDESMBAGA1UECxMJWGJveCBMaXZlMR4wHAYDVQQDExVzdHMudGVzdC54Ym94bGl2ZS5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCo0JkOVgSJPAJEBI9CQfi7kA2k2Tzha0eQQPuDMoQLhOQ6D1JmdfOjpc20ZUkhlw3J/JQ8asrYJfbVm1DVxE3tggP3CfZDu17nWG+IwWr4GtrekVPaSumIks7oCTBUWUSy3LXN7sBrLpWhjO+u6SVcx4/EfSVfcn9tXzBADnkZT7Tg9YyRnXxM/Lbp3WKGRFgAHwkeyULhzkW01RSyRJjvYDGQmyS5Nrvshf+UlDTiAegFd87y87uMFCxRGzOIw/FEifHpl0zDQa7t/09KYIjF54CLPna5+TrutxuvIqvLTVbtxmQKLS+vCMlGd/9zvjVR/v5w3F4hSMF9OmIHQXifAgMBAAGjggLwMIIC7DALBgNVHQ8EBAMCBLAwRAYJKoZIhvcNAQkPBDcwNTAOBggqhkiG9w0DAgICAIAwDgYIKoZIhvcNAwQCAgCAMAcGBSsOAwIHMAoGCCqGSIb3DQMHMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEFBQcDATAdBgNVHQ4EFgQUyMXx5f+44yhMQ6LbnebvHs7k6nMwHwYDVR0jBBgwFoAUFFXEOeA9LtFVLkiWsNh+FCIGk7wwggEKBgNVHR8EggEBMIH+MIH7oIH4oIH1hlhodHRwOi8vbXNjcmwubWljcm9zb2Z0LmNvbS9wa2kvbXNjb3JwL2NybC9NaWNyb3NvZnQlMjBTZWN1cmUlMjBTZXJ2ZXIlMjBBdXRob3JpdHkoNSkuY3JshlZodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL21zY29ycC9jcmwvTWljcm9zb2Z0JTIwU2VjdXJlJTIwU2VydmVyJTIwQXV0aG9yaXR5KDUpLmNybIZBaHR0cDovL2NvcnBwa2kvY3JsL01pY3Jvc29mdCUyMFNlY3VyZSUyMFNlcnZlciUyMEF1dGhvcml0eSg1KS5jcmwwgb8GCCsGAQUFBwEBBIGyMIGvMF4GCCsGAQUFBzAChlJodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpL21zY29ycC9NaWNyb3NvZnQlMjBTZWN1cmUlMjBTZXJ2ZXIlMjBBdXRob3JpdHkoNSkuY3J0ME0GCCsGAQUFBzAChkFodHRwOi8vY29ycHBraS9haWEvTWljcm9zb2Z0JTIwU2VjdXJlJTIwU2VydmVyJTIwQXV0aG9yaXR5KDUpLmNydDA/BgkrBgEEAYI3FQcEMjAwBigrBgEEAYI3FQiDz4lNrfIChaGfDIL6yn2B4ft0gU+Dwu2FCI6p0oVjAgFkAgEGMCcGCSsGAQQBgjcVCgQaMBgwCgYIKwYBBQUHAwIwCgYIKwYBBQUHAwEwDQYJKoZIhvcNAQEFBQADggEBAHueQfJCg4CjE4DD6gaQcbIdoyid+25U2X6SXnkzGktZv9eAI3lU8syYKRewb7buJALGQYkc8Xi9RNbQ32vUwXhh/gog/1nSnFJqPW5ry5350TZTSCkMEzPkit04IDsiN34NG9z821NrkWOXuhJzkuW5ZR9rmyPjD/sw3EMmeXVFk1tgLw9ggekPIxTymxUnEBadBMIhMBha9xA1MbHcYwHHH2AEHwUaEbpSg1SUcqSOaXESKwDm3Etf176juBKev/ghUiTU3dIXGvF/VzZFWyk0NlFLUA2EEbBmaIizHfc18/MQH4V6RXwSPgIXmKAKcNb0a6pv+MCXSB8nq5FDwpw=</X509Certificate></X509Data></KeyInfo></Signature></saml:Assertion>";

        private const string DefaultXuid = "3563432827428330";

        /// <summary>
        /// 
        /// </summary>
        public mainForm()
        {
            InitializeComponent();
            this.cboApi.SelectedIndex = 0;
            this.workerThreads = new Queue<Thread>(100);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void start_Click(object sender, EventArgs e)
        {
            this.tps.Text = "0";
            this.avgLatency.Text = "0";
            this.avgtps.Text = "0";
            quit = false;
            calls = totalCalls = succeeded = failed = timeouts = tpsSampleCount = 0;

            timer = new System.Threading.Timer(new TimerCallback(UpdateStats), null, 0, 1000);

            for (int i = 1; i <= threadCount.Value; i++)
            {
                Thread worker = new Thread(new ParameterizedThreadStart(SubmitRequests));
                this.workerThreads.Enqueue(worker);

                MultiplayerThreadStateCollection tests = this.BuildTestList();

                worker.Start(tests);

                IncrementRunningThreads();
            }
        }

        private MultiplayerThreadState BuildState(string apiName)
        {
            string url = string.Empty;
            string body = string.Empty;
            string method = string.Empty;
            bool extractNotificationId = false;
            bool extractSessionId = false;
            bool useRandomXuid = false;

            switch (apiName)
            {
                case "CreateNotification":
                    url = "http://mptesthooks.stress.xboxlive.com/MPTestHooks.svc/createnotifications";
                    body = "<ArrayOfNotification xmlns=\"http://schemas.datacontract.org/2004/07/AsyncMultiplayer.NotificationService\"> <Notification i:type=\"InvitationNotification\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\">  <Category>NotSpecified</Category>   <DataBlob>String content</DataBlob>   <DeliveredTime>1999-05-31T11:20:00</DeliveredTime>   <ExpirationTime>1999-05-31T11:20:00</ExpirationTime>   <From>String content</From>   <GameDisplayName>String content</GameDisplayName>   <GameId>4294967295</GameId>   <Images>String content</Images>   <IsUserVisible>true</IsUserVisible>   <SentTime>1999-05-31T11:20:00</SentTime>   <SessionId>String content</SessionId>   <Status>UnRead</Status>   <SupportedPlatform>2147483647</SupportedPlatform>   <Type>YourTurn</Type>   <TypeDisplayName>String content</TypeDisplayName>   <Url>String content</Url>   <UserId>{xuid}</UserId>   <Variant>4294967295</Variant>   <id>{generatednotificationid}</id>   </Notification></ArrayOfNotification>";
                    method = "POST";
                    useRandomXuid = true;
                    break;
                case "CreateSession":
                    url = "https://sessions.stress.xboxlive.com:51424/Sessions.svc/game/1297287394";
                    body = "<CreationData xmlns=\"http://schemas.datacontract.org/2004/07/AsyncMultiplayer.SessionCommon\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\"><CanRemoveEmptySeats>true</CanRemoveEmptySeats><DisplayName>FooName</DisplayName><GameID>1297287394</GameID><InactivityWarning><Action>Kick</Action><Interval>30</Interval><MaxNumberOfNudges>5</MaxNumberOfNudges></InactivityWarning><ReservedSeatsAvailable>10</ReservedSeatsAvailable><SessionParameters>AQID</SessionParameters><TotalSeatsAvailable>10</TotalSeatsAvailable><Variant>0</Variant></CreationData>";
                    method = "POST";
                    extractSessionId = true;
                    useRandomXuid = true;
                    break;
                case "DeleteNotification":
                    url = "https://notifications.stress.xboxlive.com:51420/Notifications.svc/delete/?notification={notificationid}";
                    body = "";
                    method = "DELETE";
                    break;
                case "DeleteNotificationsBySession":
                    url = "https://notifications.stress.xboxlive.com:51420/Notifications.svc/deletesession/?game=1297287394&session={sessionid}";
                    body = "";
                    method = "DELETE";
                    break;
                case "GetGameState":
                    url = "https://sessions.stress.xboxlive.com:51424/GameState.svc/GameState/{sessionid}/1297287394";
                    body = "";
                    method = "GET";
                    break;
                case "GetNotifications":
                    url = "https://notifications.stress.xboxlive.com:51420/Notifications.svc/?count=10";
                    body = "";
                    method = "GET";
                    extractNotificationId = true;
                    break;
                case "JoinSession":
                    url = "https://sessions.stress.xboxlive.com:51424/Sessions.svc/session/{sessionid}";
                    body = "<JoinData xmlns=\"http://schemas.datacontract.org/2004/07/AsyncMultiplayer.SessionCommon\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\"><GameID>1297287394</GameID><SeatIndex>0</SeatIndex><SeatParameters>AQID</SeatParameters><SessionID>{sessionid}</SessionID></JoinData>";
                    method = "POST";
                    useRandomXuid = true;
                    break;
                case "LeaveSession":
                    url = "https://sessions.stress.xboxlive.com:51424/Sessions.svc/session/{sessionid}/1297287394";
                    body = "";
                    method = "DELETE";
                    useRandomXuid = false;
                    break;
                case "ModifySession":
                    url = "https://sessions.stress.xboxlive.com:51424/Sessions.svc/session/{sessionid}/1297287394";
                    body = "<ModificationData xmlns=\"http://schemas.datacontract.org/2004/07/AsyncMultiplayer.SessionCommon\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\"><CanRemoveEmptySeats>true</CanRemoveEmptySeats><DisplayName>FooName</DisplayName><InactivityWarning><Action>Kick</Action><Interval>30</Interval><MaxNumberOfNudges>5</MaxNumberOfNudges></InactivityWarning><IsFriendsOnly>false</IsFriendsOnly><ReservedSeatsAvailable>10</ReservedSeatsAvailable><SessionParameters>QVFJRA==</SessionParameters><TotalSeatsAvailable>10</TotalSeatsAvailable></ModificationData>";
                    method = "PUT";
                    useRandomXuid = false;
                    break;
                case "PostGameAction":
                    url = "https://sessions.stress.xboxlive.com:51424/GameState.svc/GameAction/{sessionid}/1297287394";
                    body = "<GameAction xmlns=\"http://schemas.datacontract.org/2004/07/AsyncMultiplayer.SessionCommon\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\"><ActionData>QVFJRA==</ActionData><ActionTime>2010-08-03T12:33:30</ActionTime><ActionType>UserNudge</ActionType><SequenceNumber>0</SequenceNumber></GameAction>";
                    method = "POST";
                    break;
                case "PostGameEnd":
                    url = "https://sessions.stress.xboxlive.com:51424/GameState.svc/GameState/{sessionid}/1297287394";
                    body = "<GameResults xmlns=\"http://schemas.datacontract.org/2004/07/AsyncMultiplayer.SessionCommon\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\"><GameOverSeatIndexes xmlns:a=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\"><a:int>0</a:int></GameOverSeatIndexes><LosingSeatIndexes xmlns:a=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\"><a:int>1</a:int><a:int>2</a:int></LosingSeatIndexes><Results xmlns:a=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\"><a:KeyValueOfintGameResultsCyVQWkm><a:Key>1</a:Key><a:Value xmlns:b=\"http://schemas.datacontract.org/2004/07/Wgx.Services.Gds.BusinessObjects\"><b:GameId>1297287394</b:GameId><b:Variant>0</b:Variant><b:GameResultId>125a9e3d-d31e-440c-9ea4-544307d8801f</b:GameResultId><b:TimeStamp>2010-06-21T13:30:55</b:TimeStamp><b:Score>10000</b:Score><b:Time>100</b:Time><b:Outcome>Win</b:Outcome><b:Blob>NTY3</b:Blob></a:Value></a:KeyValueOfintGameResultsCyVQWkm></Results><TierSeatIndexes xmlns:a=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\"><a:int>1</a:int><a:int>2</a:int></TierSeatIndexes><WinningSeatIndexes xmlns:a=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\"><a:int>0</a:int></WinningSeatIndexes></GameResults>";
                    method = "POST";
                    break;
                case "GetSpotlight":
                    url = "https://notifications.stress.xboxlive.com:51420/Notifications.svc/Spotlight/";
                    body = string.Empty;
                    method = "GET";
                    break;
                case "PutGameState":
                    url = "https://sessions.stress.xboxlive.com:51424/GameState.svc/GameState/{sessionid}/1297287394";
                    body = "<ModifiableGameState xmlns=\"http://schemas.datacontract.org/2004/07/AsyncMultiplayer.SessionCommon\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\"><ActiveSeatIndex>0</ActiveSeatIndex><GameDataameData></ModifiableGameState>";
                    method = "PUT";
                    break;
                case "RejectInvitation":
                    url = "https://sessions.stress.xboxlive.com:51424/Sessions.svc/invite/{sessionid}/1297287394";
                    body = "";
                    method = "DELETE";
                    break;
                case "SendInvite":
                    url = "https://notifications.stress.xboxlive.com:51420/Notifications.svc/invite";
                    body = "<InviteRequest xmlns=\"http://schemas.datacontract.org/2004/07/AsyncMultiplayer.NotificationService\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\"><Data>foo</Data><GameId>1297287394</GameId><Recipients>LL430ua15ie26@live-int.com</Recipients><SessionId>{sessionid}</SessionId><FriendRequest>false</FriendRequest></InviteRequest>";
                    method = "POST";
                    extractNotificationId = true;
                    break;
                case "UpdateNotification":
                    url = "https://notifications.stress.xboxlive.com:51420/Notifications.svc/update/?notification=2521214300776146542-99842030-8cda-4f77-b176-98fec8133db3&status=1";
                    body = "";
                    method = "PUT";
                    break;
                case "ViewSession":
                    url = "https://sessions.stress.xboxlive.com:51424/Sessions.svc/session/{sessionid}/1297287394";
                    body = "";
                    method = "GET";
                    break;
                case "ViewSessionSummaries":
                    url = "https://sessions.stress.xboxlive.com:51424/Sessions.svc/game?game=1297287394&variant=0&max=5&showSessionType=1";
                    body = "";
                    method = "GET";
                    break;
                default:
                    break;

            }
            int timeout;
            if (!int.TryParse(this.timeout.Text.Trim(), out timeout))
                timeout = 30000;

            MultiplayerThreadState ret = new MultiplayerThreadState()
            {
                Xuid = string.Empty,
                BaseUrl = url,
                Locale = "en-US",
                RequestBody = body,
                HttpMethod = method,
                Timeout = timeout,
                UseRandomXuid = useRandomXuid,
                ExtractSessionId = extractSessionId,
                ExtractNotificationId = extractNotificationId,
                RecordPerformance = true
            };

            return ret;
        }

        private MultiplayerThreadStateCollection BuildTestList()
        {
            List<MultiplayerThreadState> states = new List<MultiplayerThreadState>();

            int timeout;
            if (!int.TryParse(this.timeout.Text.Trim(), out timeout))
                timeout = 30000;

            MultiplayerThreadState createSessionParams = new MultiplayerThreadState()
            {
                Xuid = this.txtXuid.Text,
                BaseUrl = "https://sessions.stress.xboxlive.com:51424/Sessions.svc/game/1297287394",
                Locale = "en-US",
                RequestBody = "<CreationData xmlns=\"http://schemas.datacontract.org/2004/07/AsyncMultiplayer.SessionCommon\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\"><CanRemoveEmptySeats>true</CanRemoveEmptySeats><DisplayName>FooName</DisplayName><GameID>1297287394</GameID><InactivityWarning><Action>Kick</Action><Interval>30</Interval><MaxNumberOfNudges>5</MaxNumberOfNudges></InactivityWarning><ReservedSeatsAvailable>10</ReservedSeatsAvailable><SessionParameters>AQID</SessionParameters><TotalSeatsAvailable>16</TotalSeatsAvailable><Variant>0</Variant></CreationData>",
                HttpMethod = "POST",
                Timeout = timeout,
                UseRandomXuid = true,
                ExtractSessionId = true,
                RecordPerformance = false
            };

            switch (cboApi.Text)
            {
                case "E2E":
                    //0.2	createsession	0.074183976
                    //60.5	getnotifications	22.44065282
                    //60.5	getspotlight	22.44065282
                    //20.2	updatenotification	7.492581602
                    //60.5	sendinvite	22.44065282
                    //0.2	joinsession	0.074183976
                    //6.1	viewsession	2.262611276
                    //0.6	viewsessionsummaries	0.222551929
                    //45.4	getgamestate	16.83976261
                    //15.1	putgamestate	5.600890208
                    //0.3	postgameend	0.111275964

                    states.Add(this.BuildState("CreateSession"));
                    for (int i = 0; i < 3; i++)
                    {
                        states.Add(this.BuildState("GetSpotlight"));
                        states.Add(this.BuildState("SendInvite"));
                    }
                    states.Add(this.BuildState("ViewSession"));
                    states.Add(this.BuildState("ViewSessionSummaries"));

                    for (int i = 0; i < 5; i++)
                    {
                        states.Add(this.BuildState("PutGameState"));
                        states.Add(this.BuildState("GetGameState"));
                    }

                    states.Add(this.BuildState("PostGameEnd"));

                    MultiplayerThreadState gn = this.BuildState("GetNotifications");
                    gn.Xuid = DefaultXuid;

                    for (int i = 0; i < 5; i++)
                    {
                        states.Add(gn);
                    }

                    MultiplayerThreadState un = this.BuildState("UpdateNotification");
                    un.Xuid = DefaultXuid;

                    for (int i = 0; i < 2; i++)
                    {
                        states.Add(un);
                    }

                    states.Add(this.BuildState("CreateSession"));
                    states.Add(this.BuildState("JoinSession"));

                    break;
                case "E2E (SMS only)":

                    states.Add(this.BuildState("CreateSession"));
                    states.Add(this.BuildState("GetSpotlight"));
                    states.Add(this.BuildState("ViewSession"));
                    states.Add(this.BuildState("ViewSessionSummaries"));
                    states.Add(this.BuildState("PutGameState"));
                    states.Add(this.BuildState("GetGameState"));
                    states.Add(this.BuildState("PostGameEnd"));
                    states.Add(this.BuildState("CreateSession"));
                    states.Add(this.BuildState("JoinSession"));

                    break;
                case "JoinSession":
                    states.Add(createSessionParams);
                    MultiplayerThreadState joinSessionParams = new MultiplayerThreadState()
                    {
                        BaseUrl = this.baseUrl.Text,
                        Xuid = this.txtXuid.Text,
                        Locale = "en-US",
                        RequestBody = this.requestBody.Text,
                        HttpMethod = this.comboBox1.SelectedItem.ToString(),
                        Timeout = timeout,
                        UseRandomXuid = true,
                        ExtractSessionId = false,
                        RecordPerformance = true
                    };
                    for (int i = 0; i < 15; i++)
                    {
                        states.Add(joinSessionParams);
                    }
                    break;
                case "ModifySession":
                    states.Add(createSessionParams);
                    states.Add(this.BuildState("ModifySession"));
                    break;
                case "SendInvite":
                    states.Add(createSessionParams);
                    states.Add(this.BuildState("SendInvite"));
                    break;
                case "PutGameState":
                    states.Add(createSessionParams);
                    states.Add(this.BuildState("PutGameState"));
                    break;
                case "PostGameEnd":
                    states.Add(createSessionParams);
                    states.Add(this.BuildState("PostGameEnd"));
                    break;
                case "LeaveSession":
                    states.Add(createSessionParams);
                    states.Add(this.BuildState("LeaveSession"));
                    break;
                case "PostGameAction":
                    states.Add(createSessionParams);
                    states.Add(this.BuildState("PostGameAction"));
                    break;
                case "RejectInvitation":
                    states.Add(createSessionParams);
                    states.Add(this.BuildState("CreateNotification"));
                    states.Add(this.BuildState("RejectInvitation"));
                    break;
                case "DeleteNotification":
                    states.Add(createSessionParams);
                    states.Add(this.BuildState("CreateNotification"));
                    states.Add(this.BuildState("DeleteNotification"));
                    break;
                case "DeleteNotificationsBySession":
                    states.Add(createSessionParams);
                    states.Add(this.BuildState("CreateNotification"));
                    states.Add(this.BuildState("DeleteNotificationsBySession"));
                    break;
                default:
                    states.Add(new MultiplayerThreadState()
                    {
                        BaseUrl = this.baseUrl.Text,
                        Xuid = this.txtXuid.Text,
                        Locale = "en-US",
                        RequestBody = this.requestBody.Text,
                        HttpMethod = this.comboBox1.SelectedItem.ToString(),
                        Timeout = timeout,
                        UseRandomXuid = this.chkRandomize.Checked,
                        ExtractSessionId = false,
                        RecordPerformance = true
                    });
                    break;
            }


            return new MultiplayerThreadStateCollection(states);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void stop_Click(object sender, EventArgs e)
        {
            quit = true;
            if (timer != null)
                timer.Dispose();
            timer = null;

            //kill all worker threads
            while (this.workerThreads.Count > 0)
            {
                Thread worker = this.workerThreads.Dequeue();
                if (!worker.Join(10) && worker.IsAlive)
                    worker.Abort();
                DecrementRunningThreads();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="state"></param>
        private void UpdateStats(object state)
        {
            UpdateTps(calls);
            calls = 0;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="tps"></param>
        private void UpdateTps(object tps)
        {
            if (this.InvokeRequired)
            {
                this.BeginInvoke(new ParameterizedThreadStart(UpdateTps), tps);
            }
            else
            {
                this.tps.Text = tps.ToString();
                Interlocked.Increment(ref tpsSampleCount);

                this.avgtps.Text = (totalCalls / tpsSampleCount).ToString();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        private void UpdateSuccess()
        {
            if (this.InvokeRequired)
            {
                this.BeginInvoke(new MethodInvoker(UpdateSuccess));
            }
            else
            {
                this.totalSucceeded.Text = succeeded.ToString();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        private void UpdateFailed()
        {
            if (this.InvokeRequired)
            {
                this.BeginInvoke(new MethodInvoker(UpdateFailed));
            }
            else
            {
                this.totalFailed.Text = failed.ToString();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        private void UpdateTimeout()
        {
            if (this.InvokeRequired)
            {
                this.BeginInvoke(new MethodInvoker(UpdateTimeout));
            }
            else
            {
                this.totalTimeout.Text = timeouts.ToString();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        private void IncrementRunningThreads()
        {
            if (this.InvokeRequired)
            {
                this.BeginInvoke(new MethodInvoker(IncrementRunningThreads));
            }
            else
            {
                int count = int.Parse(this.threadsRunning.Text);
                this.threadsRunning.Text = (count + 1).ToString();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        private void DecrementRunningThreads()
        {
            if (this.InvokeRequired)
            {
                this.BeginInvoke(new MethodInvoker(DecrementRunningThreads));
            }
            else
            {
                int count = int.Parse(this.threadsRunning.Text);
                this.threadsRunning.Text = (count - 1).ToString();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="time"></param>
        private void AppendDuration(object data)
        {
            if (this.InvokeRequired)
            {
                this.BeginInvoke(new ParameterizedThreadStart(AppendDuration), data);
            }
            else
            {
                object[] stats = data as object[];

                latencyTotal += Convert.ToUInt64(stats[0]);

                if (totalCalls > 0)
                {
                    this.avgLatency.Text = (latencyTotal / (ulong)totalCalls).ToString();
                }
                this.durations.AppendText(stats[1].ToString());
                Trace.TraceInformation(stats[1].ToString());
            }
        }

        private object lockScope = new object();

        /// <summary>
        /// 
        /// </summary>
        /// <param name="state"></param>
        private void SubmitRequests(object states)
        {
            MultiplayerThreadStateCollection mpStates = states as MultiplayerThreadStateCollection;
            string sessionId = null;
            string notificationId = null;
            string previousXuid = null;
            DateTime start = DateTime.MinValue;
            DateTime finish = DateTime.MinValue;

            while (!quit)
            {
                foreach (MultiplayerThreadState mpState in mpStates.StateCollection)
                {
                    try
                    {
                        string xuid = mpState.Xuid;
                        if (previousXuid == null)
                        {
                            previousXuid = xuid;
                        }

                        if (mpState.UseRandomXuid)
                        {
                            xuid = GenerateRandomUInt64().ToString();
                            previousXuid = xuid;
                        }
                        else
                        {
                            if (xuid == string.Empty)
                            {
                                xuid = previousXuid;
                            }
                        }

                        string userToken = this.GetUserToken(xuid);
                        string partnerToken = this.GetPartnerToken(xuid);
                        string url = mpState.BaseUrl;
                        string body = mpState.RequestBody;

                        if (url.Contains("{sessionid}") || body.Contains("{sessionid}"))
                        {
                            if (sessionId != null)
                            {
                                url = url.Replace("{sessionid}", sessionId);
                                body = body.Replace("{sessionid}", sessionId);
                            }
                            else
                            {
                                break;
                            }
                        }
                        if (url.Contains("{notificationid}") || body.Contains("{notificationid}"))
                        {
                            if (notificationId != null)
                            {
                                url = url.Replace("{notificationid}", notificationId);
                                body = body.Replace("{notificationid}", notificationId);
                            }
                            else
                            {
                                break;
                            }
                        }
                        if (url.Contains("{generatednotificationid}") || body.Contains("{generatednotificationid}"))
                        {
                            string generatedNotificationId = "2521231689342194898-" + Guid.NewGuid().ToString();

                            url = url.Replace("{generatednotificationid}", generatedNotificationId);
                            body = body.Replace("{generatednotificationid}", generatedNotificationId);
                            notificationId = generatedNotificationId;

                        }
                        if (url.Contains("{recipientxuid}") || body.Contains("{recipientxuid}"))
                        {
                            string recipientXuid = GenerateRandomUInt64().ToString();

                            url = url.Replace("{recipientxuid}", recipientXuid);
                            body = body.Replace("{recipientxuid}", recipientXuid);
                            previousXuid = recipientXuid;
                        }
                        WebRequest request = WebRequest.Create(url);
                        request.Method = mpState.HttpMethod;
                        request.ContentType = "application/xml";
                        request.ContentLength = 0;
                        //request.UserAgent = "MP Stress Tool";
                        request.Timeout = mpState.Timeout;
                        request.Headers.Add("X-Locale", mpState.Locale);
                        request.Headers.Add("X-Authorization", "XBL1.0 x=" + userToken);
                        request.Headers.Add("X-PartnerAuthorization", "XBL1.0 x=" + partnerToken);
                        request.Headers.Add("X-Platform-Type", "5");

                        if (!string.IsNullOrEmpty(body))
                        {
                            byte[] buffer = Encoding.ASCII.GetBytes(body);
                            request.ContentLength = buffer.Length;
                            using (Stream st = request.GetRequestStream())
                            {
                                st.Write(buffer, 0, buffer.Length);
                            }
                        }

                        HttpWebResponse response = null;
                        string status = "N/A";

                        try
                        {
                            start = DateTime.Now;
                            response = (HttpWebResponse)request.GetResponse();
                            status = "200";
                        }
                        catch (WebException e)
                        {
                            using (StreamReader sr = new StreamReader(e.Response.GetResponseStream()))
                            {
                                string responseString = sr.ReadToEnd().Trim();
                            }

                            Interlocked.Increment(ref failed);
                            UpdateFailed();

                            if (e.Status == WebExceptionStatus.Timeout)
                            {
                                Interlocked.Increment(ref timeouts);
                                UpdateTimeout();
                                status = "Timeout";
                            }
                            else if (e.Status == WebExceptionStatus.ProtocolError)
                            {
                                status = ((int)((HttpWebResponse)e.Response).StatusCode).ToString();
                            }
                        }
                        catch (ThreadAbortException)
                        {
                            status = "Thread Aborted";
                        }
                        catch
                        {
                            Interlocked.Increment(ref failed);
                        }
                        finally
                        {
                            finish = DateTime.Now;
                            //only record the perf if this is the API being tested (not a setup call)
                            if (mpState.RecordPerformance)
                            {
                                Interlocked.Increment(ref succeeded);
                                UpdateSuccess();

                                Interlocked.Increment(ref calls);
                                Interlocked.Increment(ref totalCalls);

                                double latency = finish.Subtract(start).TotalMilliseconds;

                                object[] data = { latency, String.Format("{0} - {1}\r\n", latency, status) };

                                AppendDuration(data);
                            }
                            if (status == "200")
                            {
                                if (mpState.ExtractSessionId)
                                {
                                    using (StreamReader sr = new StreamReader(response.GetResponseStream()))
                                    {
                                        string responseString = sr.ReadToEnd().Trim();

                                        XDocument x = XDocument.Load(new StringReader(responseString));
                                        XNamespace ns = "http://schemas.datacontract.org/2004/07/AsyncMultiplayer.SessionCommon";

                                        sessionId = x.Element(ns + "SessionState").Element(ns + "SessionID").Value.ToString();

                                    }
                                }
                                if (mpState.ExtractNotificationId)
                                {
                                    using (StreamReader sr = new StreamReader(response.GetResponseStream()))
                                    {
                                        string responseString = sr.ReadToEnd().Trim();

                                        XDocument x = XDocument.Load(new StringReader(responseString));
                                        XNamespace ns = "http://schemas.datacontract.org/2004/07/AsyncMultiplayer.NotificationService";

                                        notificationId = x.Element(ns + "NotificationList").Elements(ns + "Notification").First
                                            (a => a.Name == "id").Value.ToString();

                                    }
                                }
                            }
                            response.Close();
                        }
                    }

                    catch
                    {
                        //keep the loop going, no matter what...
                    }
                    finally
                    {
                        Thread.Sleep(50);
                    }
                }
            }

        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cboApi_SelectedIndexChanged(object sender, EventArgs e)
        {
            switch (cboApi.SelectedItem.ToString())
            {
                case "CreateSession":
                    txtXuid.Text = DefaultXuid;
                    baseUrl.Text = "https://sessions.stress.xboxlive.com:51424/Sessions.svc/game/1297287394";
                    requestBody.Text = "<CreationData xmlns=\"http://schemas.datacontract.org/2004/07/AsyncMultiplayer.SessionCommon\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\"><CanRemoveEmptySeats>true</CanRemoveEmptySeats><DisplayName>FooName</DisplayName><GameID>1297287394</GameID><InactivityWarning><Action>Kick</Action><Interval>30</Interval><MaxNumberOfNudges>5</MaxNumberOfNudges></InactivityWarning><ReservedSeatsAvailable>10</ReservedSeatsAvailable><SessionParameters>AQID</SessionParameters><TotalSeatsAvailable>10</TotalSeatsAvailable><Variant>0</Variant></CreationData>";
                    comboBox1.SelectedIndex = 2;
                    chkRandomize.Checked = true;
                    txtXuid.Enabled = true;
                    baseUrl.Enabled = true;
                    requestBody.Enabled = true;
                    comboBox1.Enabled = true;
                    chkRandomize.Enabled = true;
                    break;
                case "MPTestHooks.CreateSession":
                    txtXuid.Text = DefaultXuid;
                    baseUrl.Text = "https://sessions.stress.xboxlive.com:51424/Sessions.svc/game/1297287394";
                    requestBody.Text = "<SessionState xmlns=\"http://schemas.datacontract.org/2004/07/AsyncMultiplayer.SessionCommon\"><ActorSeat>2147483647</ActorSeat><CanRemoveEmptySeats>true</CanRemoveEmptySeats><Category>AllPublic</Category><CreationTime>1999-05-31T11:20:00</CreationTime><DisplayName>String content</DisplayName><GameID>4294967295</GameID><InactivityWarning><Action>Kick</Action><Interval>2147483647</Interval><MaxNumberOfNudges>2147483647</MaxNumberOfNudges></InactivityWarning><IsClosed>true</IsClosed><IsInactivityWarningSent>true</IsInactivityWarningSent><IsWarningSent>true</IsWarningSent><NumberOfNudgesSent>2147483647</NumberOfNudgesSent><OwnerSeatIndex>2147483647</OwnerSeatIndex><ReservedSeatsAvailable>2147483647</ReservedSeatsAvailable><Seats><SeatInfo><DisplayName>String content</DisplayName><DisplayPicSmallURL>String content</DisplayPicSmallURL><DisplayPicURL>String content</DisplayPicURL><Index>2147483647</Index><IsAI>true</IsAI><Locale>String content</Locale><PlatformType>Xbox1</PlatformType><Profile><_x003C_PublicToken_x003E_k__BackingField>String content</_x003C_PublicToken_x003E_k__BackingField><_x003C_ServiceType_x003E_k__BackingField>XUID</_x003C_ServiceType_x003E_k__BackingField><_x003C_Token_x003E_k__BackingField>String content</_x003C_Token_x003E_k__BackingField></Profile></SeatInfo><SeatInfo><DisplayName>String content</DisplayName><DisplayPicSmallURL>String content</DisplayPicSmallURL><DisplayPicURL>String content</DisplayPicURL><Index>2147483647</Index><IsAI>true</IsAI><Locale>String content</Locale><PlatformType>Xbox1</PlatformType><Profile><_x003C_PublicToken_x003E_k__BackingField>String content</_x003C_PublicToken_x003E_k__BackingField><_x003C_ServiceType_x003E_k__BackingField>XUID</_x003C_ServiceType_x003E_k__BackingField><_x003C_Token_x003E_k__BackingField>String content</_x003C_Token_x003E_k__BackingField></Profile></SeatInfo></Seats><SeatsAvailable>2147483647</SeatsAvailable><SessionID>String content</SessionID><SessionParameters>QmFzZSA2NCBTdHJlYW0=</SessionParameters><State><ActiveSeatIndex>2147483647</ActiveSeatIndex><GameID>4294967295</GameID><IsComplete>true</IsComplete><LastModified>1999-05-31T11:20:00</LastModified><SequenceNumber>2147483647</SequenceNumber><SessionID>{generatedsessionid}</SessionID><Variant>2147483647</Variant></State><Variant>2147483647</Variant></SessionState>";
                    comboBox1.SelectedIndex = 2;
                    chkRandomize.Checked = true;
                    txtXuid.Enabled = true;
                    baseUrl.Enabled = true;
                    requestBody.Enabled = true;
                    comboBox1.Enabled = true;
                    chkRandomize.Enabled = true;
                    break;
                case "DeleteNotification":
                    txtXuid.Text = DefaultXuid;
                    baseUrl.Text = "https://notifications.stress.xboxlive.com:51420/Notifications.svc/delete/?notification={notificationid}";
                    requestBody.Text = "";
                    comboBox1.SelectedIndex = 0; //DELETE
                    chkRandomize.Checked = true;
                    txtXuid.Enabled = false;
                    baseUrl.Enabled = false;
                    requestBody.Enabled = false;
                    comboBox1.Enabled = false;
                    chkRandomize.Enabled = false;
                    break;
                case "E2E":

                    txtXuid.Text = string.Empty;
                    baseUrl.Text = string.Empty;
                    requestBody.Text = string.Empty;
                    comboBox1.SelectedIndex = 1;//GET
                    chkRandomize.Checked = false;
                    txtXuid.Enabled = false;
                    baseUrl.Enabled = false;
                    requestBody.Enabled = false;
                    comboBox1.Enabled = false;
                    chkRandomize.Enabled = false;
                    break;

                case "E2E (SMS only)":

                    txtXuid.Text = string.Empty;
                    baseUrl.Text = string.Empty;
                    requestBody.Text = string.Empty;
                    comboBox1.SelectedIndex = 1;//GET
                    chkRandomize.Checked = false;
                    txtXuid.Enabled = false;
                    baseUrl.Enabled = false;
                    requestBody.Enabled = false;
                    comboBox1.Enabled = false;
                    chkRandomize.Enabled = false; break;
                case "GetGameState":
                    txtXuid.Text = DefaultXuid;
                    baseUrl.Text = "https://sessions.stress.xboxlive.com:51424/GameState.svc/GameState/a2a3b1e0-1d16-4c22-9601-09037d3bb30e/1297287394";
                    requestBody.Text = "";
                    comboBox1.SelectedIndex = 1;//GET
                    chkRandomize.Checked = false;
                    txtXuid.Enabled = true;
                    baseUrl.Enabled = true;
                    requestBody.Enabled = true;
                    comboBox1.Enabled = true;
                    chkRandomize.Enabled = true;
                    break;
                case "GetNotifications":
                    txtXuid.Text = DefaultXuid;
                    baseUrl.Text = "https://notifications.stress.xboxlive.com:51420/Notifications.svc/?count=10";
                    requestBody.Text = "";
                    comboBox1.SelectedIndex = 1;//GET
                    chkRandomize.Checked = false;
                    txtXuid.Enabled = true;
                    baseUrl.Enabled = true;
                    requestBody.Enabled = true;
                    comboBox1.Enabled = true;
                    chkRandomize.Enabled = true;
                    break;
                case "GetSpotlight":
                    txtXuid.Text = DefaultXuid;
                    baseUrl.Text = "https://notifications.stress.xboxlive.com:51420/Notifications.svc/Spotlight/";
                    requestBody.Text = string.Empty;
                    comboBox1.SelectedIndex = 1;//GET
                    chkRandomize.Checked = false;
                    txtXuid.Enabled = true;
                    baseUrl.Enabled = true;
                    requestBody.Enabled = true;
                    comboBox1.Enabled = true;
                    chkRandomize.Enabled = true;
                    break;
                case "JoinSession":
                    txtXuid.Text = DefaultXuid;
                    baseUrl.Text = "https://sessions.stress.xboxlive.com:51424/Sessions.svc/session/{sessionid}";
                    requestBody.Text = "<JoinData xmlns=\"http://schemas.datacontract.org/2004/07/AsyncMultiplayer.SessionCommon\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\"><GameID>1297287394</GameID><SeatIndex>0</SeatIndex><SeatParameters>AQID</SeatParameters><SessionID>{sessionid}</SessionID></JoinData>";
                    comboBox1.SelectedIndex = 2;//POST
                    chkRandomize.Checked = false;
                    txtXuid.Enabled = false;
                    baseUrl.Enabled = false;
                    requestBody.Enabled = false;
                    comboBox1.Enabled = false;
                    chkRandomize.Enabled = false;
                    break;
                case "ModifySession":
                    txtXuid.Text = DefaultXuid;
                    baseUrl.Text = "https://sessions.stress.xboxlive.com:51424/Sessions.svc/session/{sessionid}/1297287394";
                    requestBody.Text = "<ModificationData xmlns=\"http://schemas.datacontract.org/2004/07/AsyncMultiplayer.SessionCommon\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\"><CanRemoveEmptySeats>true</CanRemoveEmptySeats><DisplayName>FooName</DisplayName><InactivityWarning><Action>Kick</Action><Interval>30</Interval><MaxNumberOfNudges>5</MaxNumberOfNudges></InactivityWarning><IsFriendsOnly>false</IsFriendsOnly><ReservedSeatsAvailable>10</ReservedSeatsAvailable><SessionParameters>QVFJRA==</SessionParameters><TotalSeatsAvailable>10</TotalSeatsAvailable></ModificationData>";
                    comboBox1.SelectedIndex = 3;//PUT
                    chkRandomize.Checked = false;
                    txtXuid.Enabled = false;
                    baseUrl.Enabled = false;
                    requestBody.Enabled = false;
                    comboBox1.Enabled = false;
                    chkRandomize.Enabled = false;
                    break;
                case "PostGameEnd":
                    txtXuid.Text = DefaultXuid;
                    baseUrl.Text = "https://sessions.stress.xboxlive.com:51424/GameState.svc/GameState/{sessionid}/1297287394";
                    requestBody.Text = "<GameResults xmlns=\"http://schemas.datacontract.org/2004/07/AsyncMultiplayer.SessionCommon\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\"><GameOverSeatIndexes xmlns:a=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\"><a:int>0</a:int></GameOverSeatIndexes><LosingSeatIndexes xmlns:a=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\"><a:int>1</a:int><a:int>2</a:int></LosingSeatIndexes><Results xmlns:a=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\"><a:KeyValueOfintGameResultsCyVQWkm><a:Key>1</a:Key><a:Value xmlns:b=\"http://schemas.datacontract.org/2004/07/Wgx.Services.Gds.BusinessObjects\"><b:GameId>1297287394</b:GameId><b:Variant>0</b:Variant><b:GameResultId>125a9e3d-d31e-440c-9ea4-544307d8801f</b:GameResultId><b:TimeStamp>2010-06-21T13:30:55</b:TimeStamp><b:Score>10000</b:Score><b:Time>100</b:Time><b:Outcome>Win</b:Outcome><b:Blob>NTY3</b:Blob></a:Value></a:KeyValueOfintGameResultsCyVQWkm></Results><TierSeatIndexes xmlns:a=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\"><a:int>1</a:int><a:int>2</a:int></TierSeatIndexes><WinningSeatIndexes xmlns:a=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\"><a:int>0</a:int></WinningSeatIndexes></GameResults>";
                    comboBox1.SelectedIndex = 2;//POST
                    chkRandomize.Checked = false;
                    txtXuid.Enabled = false;
                    baseUrl.Enabled = false;
                    requestBody.Enabled = false;
                    comboBox1.Enabled = false;
                    chkRandomize.Enabled = false;
                    break;
                case "PutGameState":
                    txtXuid.Text = DefaultXuid;
                    baseUrl.Text = "https://sessions.stress.xboxlive.com:51424/GameState.svc/GameState/{sessionid}/1297287394";
                    requestBody.Text = "<ModifiableGameState xmlns=\"http://schemas.datacontract.org/2004/07/AsyncMultiplayer.SessionCommon\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\"><ActiveSeatIndex>0</ActiveSeatIndex><GameData>AQID</GameData></ModifiableGameState>";
                    comboBox1.SelectedIndex = 3;//PUT
                    chkRandomize.Checked = true;
                    txtXuid.Enabled = true;
                    baseUrl.Enabled = true;
                    requestBody.Enabled = true;
                    comboBox1.Enabled = true;
                    chkRandomize.Enabled = true;
                    break;
                case "SendInvite":
                    txtXuid.Text = DefaultXuid;
                    baseUrl.Text = "https://notifications.stress.xboxlive.com:51420/Notifications.svc/invite";
                    requestBody.Text = "<InviteRequest xmlns=\"http://schemas.datacontract.org/2004/07/AsyncMultiplayer.NotificationService\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\"><Data>foo</Data><GameId>1297287394</GameId><Recipients>LL430ua15ie26@live-int.com</Recipients><SessionId>{sessionid}</SessionId><FriendRequest>false</FriendRequest></InviteRequest>";
                    comboBox1.SelectedIndex = 2;//POST
                    chkRandomize.Checked = true;
                    txtXuid.Enabled = true;
                    baseUrl.Enabled = true;
                    requestBody.Enabled = true;
                    comboBox1.Enabled = true;
                    chkRandomize.Enabled = true;
                    break;
                case "UpdateNotification":
                    txtXuid.Text = DefaultXuid;
                    baseUrl.Text = "https://notifications.stress.xboxlive.com:51420/Notifications.svc/update/?notification=2521214300776146542-99842030-8cda-4f77-b176-98fec8133db3&status=1";
                    requestBody.Text = "";
                    comboBox1.SelectedIndex = 3;//PUT
                    chkRandomize.Checked = false;
                    txtXuid.Enabled = true;
                    baseUrl.Enabled = true;
                    requestBody.Enabled = true;
                    comboBox1.Enabled = true;
                    chkRandomize.Enabled = true;
                    break;
                case "ViewSessions":
                    txtXuid.Text = DefaultXuid;
                    baseUrl.Text = "https://sessions.stress.xboxlive.com:51424/Sessions.svc/session/019d85f6-b871-4b33-8a4c-33b2505112cd/1297287394";
                    requestBody.Text = "";
                    comboBox1.SelectedIndex = 1;//GET
                    chkRandomize.Checked = false;
                    txtXuid.Enabled = true;
                    baseUrl.Enabled = true;
                    requestBody.Enabled = true;
                    comboBox1.Enabled = true;
                    chkRandomize.Enabled = true;
                    break;
                case "ViewSessionSummaries":
                    txtXuid.Text = DefaultXuid;
                    baseUrl.Text = "https://sessions.stress.xboxlive.com:51424/Sessions.svc/game?game=1297287394&variant=0&lastSession=a2a3b1e0-1d16-4c22-9601-09037d3bb30e&lastGame=1297287394&max=100&showSessionType=1";
                    requestBody.Text = "";
                    comboBox1.SelectedIndex = 1;//GET
                    chkRandomize.Checked = false;
                    txtXuid.Enabled = true;
                    baseUrl.Enabled = true;
                    requestBody.Enabled = true;
                    comboBox1.Enabled = true;
                    chkRandomize.Enabled = true;
                    break;
                default:
                    chkRandomize.Checked = false;
                    txtXuid.Enabled = false;
                    baseUrl.Enabled = false;
                    requestBody.Enabled = false;
                    comboBox1.Enabled = false;
                    chkRandomize.Enabled = false;
                    break;
            }

        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void mainForm_FormClosing(object sender, FormClosingEventArgs e)
        {
            //make sure this shit gets cleaned up... particularly if it's running when closed
            stop_Click(this.stop, EventArgs.Empty);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void ignoreSSLErrorsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            System.Net.ServicePointManager.ServerCertificateValidationCallback = (senderz, certificate, chain, sslPolicyErrors) => true;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void exitToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Close();
        }

        private string GetUserToken(string xuid)
        {
            string ret = userTokenDefault.Replace(XUID_PLACEHOLDER, xuid).Replace(Environment.NewLine, string.Empty);
            return ret;
        }

        private string GetPartnerToken(string xuid)
        {
            string ret = partnerTokenDefault.Replace(XUID_PLACEHOLDER, xuid).Replace(Environment.NewLine, string.Empty);
            return ret;
        }
        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public static ulong GenerateRandomUInt64()
        {
            byte[] buffer = new byte[sizeof(ulong)];
            RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();
            rng.GetNonZeroBytes(buffer);
            return BitConverter.ToUInt64(buffer, 0);
        }

        public static uint GenerateRandomUInt32()
        {
            byte[] buffer = new byte[sizeof(uint)];
            RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();
            rng.GetNonZeroBytes(buffer);
            return BitConverter.ToUInt32(buffer, 0);
        }

        private void userToken_TextChanged(object sender, EventArgs e)
        {

        }

        private void btnReset_Click(object sender, EventArgs e)
        {
            calls = 0;
            totalCalls = 0;
            succeeded = 0;
            failed = 0;
            timeouts = 0;
            latencyTotal = 0;
            tpsSampleCount = 0;
            this.tps.Text = "0";
            this.avgLatency.Text = "0";
            this.avgtps.Text = "0";
            this.totalFailed.Text = "0";
            this.totalSucceeded.Text = "0";
            this.totalTimeout.Text = "0";
        }

        private void chkRandomize_CheckedChanged(object sender, EventArgs e)
        {
            if (chkRandomize.Checked)
            {
                txtXuid.Enabled = false;
            }
            else
            {
                txtXuid.Enabled = true;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Common\MultiplayerCommon\Log.cs ===
﻿using System;
using System.Configuration;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Diagnostics;

namespace Multiplayer.Test.API
{
    /// <summary>
    /// 
    /// </summary>
    public enum LogLevel
    {
        Error,
        Info,
        Verbose
    }

    /// <summary>
    /// 
    /// </summary>
    public static class Log
    {
        private static String logDirectory;
        private static String filePath;
        private static Stream fs;

        /// <summary>
        /// 
        /// </summary>
        static Log()
        {
            LogToFile = true;
        }

        /// <summary>
        /// 
        /// </summary>
        public static bool LogToFile
        {
            get;
            set;
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="message"></param>
        public static void WriteLine(string message)
        {
            WriteLine(message, LogLevel.Info);
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="message"></param>
        /// <param name="level"></param>
        public static void WriteLine(string message, LogLevel level)
        {
            if (level == LogLevel.Verbose)
            {
                Debug.WriteLine(message);
                return;
            }

            if (LogToFile)
            {
                logDirectory = System.Configuration.ConfigurationManager.AppSettings["logDirectory"];

                if (!Directory.Exists(logDirectory))
                {
                    try
                    {
                        Directory.CreateDirectory(logDirectory);
                    }
                    catch (IOException ex)
                    {
                        WriteToConsole("");
                        WriteToConsole(ex.Message);
                        WriteToConsole(message);
                    }
                }
                else
                {
                    filePath = logDirectory + "\\MultiplayerTestLog" + DateTime.Now.ToString("yyyyMMdd") + ".log";

                    if (!File.Exists(filePath))
                    {
                        try
                        {
                            fs = File.Create(filePath);
                            WriteToFile(message);
                        }
                        catch(IOException ex)
                        {
                            WriteToConsole("");
                            WriteToConsole(ex.Message);
                            WriteToConsole(message);
                        }
                    }
                    else
                    {
                        try
                        {
                            fs = File.Open(filePath, FileMode.Append);
                            WriteToFile(message);
                        }
                        catch(IOException ex)
                        {
                            WriteToConsole("");
                            WriteToConsole(ex.Message);
                            WriteToConsole(message);
                        }
                    }
                }
            }
            else
            {
                WriteToConsole(message);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="e"></param>
        public static void LogException(Exception e)
        {
            Log.WriteLine("----------------------------------------------", LogLevel.Error);
            Log.WriteLine("Exception! Type: " + e.GetType().ToString(), LogLevel.Error);
            Log.WriteLine("Message: " + e.Message, LogLevel.Error);
            Log.WriteLine("----------------------------------------------", LogLevel.Error);
            Log.WriteLine("StackTrace: " + e.StackTrace, LogLevel.Error);
            Log.WriteLine("----------------------------------------------", LogLevel.Error);
            Log.WriteLine("InnerException: " + e.InnerException, LogLevel.Error);
            Log.WriteLine("----------------------------------------------", LogLevel.Error);
            Log.WriteLine("Source: " + e.Source, LogLevel.Error);
            Log.WriteLine("----------------------------------------------", LogLevel.Error);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="message"></param>
        private static void WriteToFile(string message)
        {
            TextWriterTraceListener myTextListener = new TextWriterTraceListener(fs);

            Trace.Listeners.Add(myTextListener);

            Trace.WriteLine(DateTime.Now.ToString("hh:mm:ss.ffff") + ": " + message);

            Trace.Flush();
            Trace.Listeners.Remove(myTextListener);
            myTextListener.Close();
            Trace.Close();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="message"></param>
        private static void WriteToConsole(string message)
        {
            TextWriterTraceListener consoleListener = new TextWriterTraceListener(Console.Out);
            Trace.Listeners.Add(consoleListener);
            
            Trace.WriteLine(DateTime.Now.ToString("hh:mm:ss.ffff") + ": " + message);

            Trace.Flush();
            Trace.Listeners.Remove(consoleListener);
            //consoleListener.Close();
            //Trace.Close();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Common\Multiplayer.Proxy\NotificationSubscriptionProxy.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using LiveN.Test.Framework.Authorization;
using LiveN.Test.Framework.Configuration;
using LiveN.Test.Common.Web;
using Multiplayer.Test.UserAccounts;
using System.Configuration;
using AsyncMultiplayer.NotificationService;
using LiveN.Test.Framework;

namespace Multiplayer.Test.Proxy
{
    public class PushSubscriptionProxy : RestRequest
    {
        const string US_LOCALE = "en-US";

        public Uri BaseUri
        {
            get;
            set;
        }

        public string UserID
        {
            get;
            set;
        }
        public string Password
        {
            get;
            set;
        }

        public string Locale 
        { 
            get; 
            set; 
        }

        public PushSubscriptionProxy(string username, string password)
        {
            this.Initialize(username, password, US_LOCALE, Config.EnvironmentSettings.SelectedEnvironment);
        }

        public PushSubscriptionProxy(string username, string password, EnvironmentElement env)
        {
            this.Initialize(username, password, US_LOCALE, env);
        }

        public PushSubscriptionProxy(string username, string password, string locale, EnvironmentElement env)
        {
            this.Initialize(username, password, locale, env);
        }

        public void Initialize(string username, string password, string locale, EnvironmentElement env)
        {
            this.UserID = username;
            this.Password = password;
            this.Locale = locale;

            this.LocaleDelegate = () =>
                {
                    KeyValuePair<string, string> localeHeader = new KeyValuePair<string, string>("X-Locale", this.Locale);
                    return localeHeader;
                };

            this.AuthorizationDelegate = () =>
            {
                string userToken = Users.authCache.GetUserToken(
                   this.UserID,
                   this.Password,
                   env.WindowsLiveIDSettings.LiveIdServiceTarget,
                   env.WindowsLiveIDSettings.Policy,
                   env.WindowsLiveIDSettings.Environment,
                   env.StsSettings.PlatformType,
                   env.StsSettings.TitleId,
                   env.StsSettings.TitleVersion,
                   env.StsSettings.ClientVersion);

                KeyValuePair<string, string> authzHeader = new KeyValuePair<string, string>("X-Authorization", "XBL1.0 x=" + userToken);
                return authzHeader;
            };

            BaseUri = env.NotificationSubscriptionService;
            Timeout = int.Parse(ConfigurationManager.AppSettings["Timeout"]);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="xblAccount"></param>
        /// <param name="key"></param>
        public void UpdatePushSubscription(PushSubscription ps, XboxLiveAccount xblAccount, string key)
        {
            if (String.IsNullOrEmpty(xblAccount.GamerTag))
            {
                xblAccount.GamerTag = Users.GetGamertag(xblAccount.MemberName, xblAccount.Password);
            }

            this.UpdatePushSubscription(ps, xblAccount.GamerTag, key, xblAccount.MemberName, xblAccount.Password);
        }

        /// <summary>
        /// Wraper method for UpdatePushSubscription API
        /// </summary>
        /// <param name="subscription"></param>
        /// <param name="gamertag"></param>
        /// <param name="key"></param>
        /// <param name="username"></param>
        /// <param name="password"></param>
        public void UpdatePushSubscription(
            PushSubscription subscription,
            string gamertag,
            string key,
            string username,
            string password)
        {
            this.UserID = username;
            this.Password = password;
            string uri = String.Format("{0}/Push?gamertag={1}&key={2}",
                this.BaseUri,
                gamertag,
                key);

            RestResponse rr = Put(uri, GetHttpHeaders(), SerializeObject(subscription));
            if (!rr.Succeeded)
            {
                throw new RestException(rr);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="xblAccount"></param>
        /// <param name="key"></param>
        public void DeletePushSubscription(XboxLiveAccount xblAccount, string key)
        {
            if (String.IsNullOrEmpty(xblAccount.GamerTag))
            {
                xblAccount.GamerTag = Users.GetGamertag(xblAccount.MemberName, xblAccount.Password);
            }
            this.DeletePushSubscription(xblAccount.GamerTag, key, xblAccount.MemberName, xblAccount.Password);
        }

        /// <summary>
        /// Wraper method for DeletePushSubscription API
        /// </summary>
        /// <param name="gamertag"></param>
        /// <param name="key"></param>
        /// <param name="username"></param>
        /// <param name="password"></param>
        public void DeletePushSubscription(
            string gamertag,
            string key,
            string username,
            string password)
        {
            this.UserID = username;
            this.Password = password;
            string uri = String.Format("{0}/Push?gamertag={1}&key={2}",
                this.BaseUri,
                gamertag,
                key);

            RestResponse rr = Delete(uri, GetHttpHeaders());
            if (!rr.Succeeded)
            {
                throw new RestException(rr);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="xblAccount"></param>
        /// <param name="key"></param>
        public PushSubscription GetPushSubscription(XboxLiveAccount xblAccount, string key)
        {
            if (String.IsNullOrEmpty(xblAccount.GamerTag))
            {
                xblAccount.GamerTag = Users.GetGamertag(xblAccount.MemberName, xblAccount.Password);
            }

            return this.GetPushSubscription(xblAccount.GamerTag, key, xblAccount.MemberName, xblAccount.Password);
        }

        /// <summary>
        /// Wraper method for GetPushSubscription API
        /// </summary>
        /// <param name="gamertag"></param>
        /// <param name="key"></param>
        /// <returns></returns>
        /// <param name="username"></param>
        /// <param name="password"></param>
        public PushSubscription GetPushSubscription(
            string gamertag,
            string key,
            string username,
            string password)
        {
            this.UserID = username;
            this.Password = password;
            string uri = String.Format("{0}/Push?gamertag={1}&key={2}",
                this.BaseUri,
                gamertag,
                key);

            RestResponse rr = Get(uri, GetHttpHeaders());
            if (!rr.Succeeded)
            {
                throw new RestException(rr);
            }
            return DeserializeObject<PushSubscription>(rr.Body);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Common\Multiplayer.Proxy\PartnerServiceProxy.cs ===
﻿using System;
using System.Net;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml.Linq;
using System.Configuration;
using System.Runtime.Serialization;
using LiveN.Test.Framework.Configuration;
using LiveN.Test.Common.Web;
using AsyncMultiplayer.PartnerService.DataContracts;
using System.Security.Cryptography.X509Certificates;
using System.Diagnostics;
using System.IO;

namespace Multiplayer.Test.Proxy
{
    public class PartnerServiceProxy : RestRequest
    {
        public string Locale
        {
            get;
            set;
        }
 
        public PartnerServiceProxy()
        {
            XmlContentType = "text/xml";
            Timeout = int.Parse(ConfigurationManager.AppSettings["Timeout"]);
            this.Locale = "en-US";
        }

        /// <summary>
        /// Client wrapper for the Partner frontend's SendNotification(PartnerNotificationRequest sendRequest) method
        /// </summary>
        public void SendNotification(PartnerNotificationRequest sendRequest)
        {
            SendNotification(GetHttpHeaders(), sendRequest);
        }
                
        /// <summary>
        /// Client wrapper for the Partner frontend's DeleteNotificationBySession() method
        /// </summary>
        public void DeleteNotificationBySession(
            string gameIdString,
            string sessionId,
            string gamertags)
        {
            DeleteNotificationBySession(GetHttpHeaders(), gameIdString, sessionId, gamertags);
        }

        public void DeleteNotificationBySession(PartnerDeleteRequest deleteRequest )
        {
            DeleteNotificationBySession(GetHttpHeaders(), deleteRequest);
        }

        /// <summary>
        /// Client wrapper for the Partner frontend's PostGameResults(List<PartnerCompositeGameResult> gameResults) method
        /// </summary>
        public void PostGameResults(List<PartnerCompositeGameResult> gameResults)
        {
           PostGameResults(GetHttpHeaders(), gameResults);
        }

        public void DeleteNotificationBySession(
            Dictionary<string, string> customHeaders,
            string gameIdString, 
            string sessionId, 
            string gamertags)
        {
            PartnerDeleteRequest deleteRequest = new PartnerDeleteRequest();
            deleteRequest.GameId = uint.Parse(gameIdString);
            deleteRequest.SessionId = sessionId;
            deleteRequest.Players = gamertags;

            DeleteNotificationBySession(customHeaders, deleteRequest);
        }

        public void SendNotification(
            Dictionary<string, string> customHeaders,
            PartnerNotificationRequest sendRequest)
        {
            string uri = String.Format("{0}/notification", Config.Environment.PartnerService);
            RestResponse rr = Post(uri, customHeaders, SerializeObject(sendRequest), InstallStsClientCertificate(uri));
            if (!rr.Succeeded)
            {
                throw new RestException(rr);
            }
        }

        public void DeleteNotificationBySession(
            Dictionary<string, string> customHeaders,
            PartnerDeleteRequest deleteRequest)
        {
            string uri = String.Format("{0}/deletenotifications", Config.Environment.PartnerService);

            RestResponse rr = Post(uri, customHeaders, SerializeObject(deleteRequest), InstallStsClientCertificate(uri));
            if (!rr.Succeeded)
            {
                throw new RestException(rr);
            }
        }

        public void PostGameResults(
            Dictionary<string, string> customHeaders,
            List<PartnerCompositeGameResult> gameResults)
        {
            string uri = String.Format("{0}/gameresults", Config.Environment.PartnerService);

            RestResponse rr = Post(uri, customHeaders, SerializeObject(gameResults), InstallStsClientCertificate(uri));
            if (!rr.Succeeded)
            {
                throw new RestException(rr);
            }
        }

        public static X509Certificate2 InstallStsClientCertificate(string uri)
        {
            X509Certificate2 clientCert = null;
            if (uri.StartsWith("https://")) // take this out nefse
            {
                clientCert = LiveN.Test.Framework.Authorization.Authorization.InstallClientCertificate(ConfigurationManager.AppSettings["PFEClientCertName"], ConfigurationManager.AppSettings["PFEClientCertThumbprint"], ConfigurationManager.AppSettings["PFEClientCertPwd"], "WebSG");
            }
            return clientCert;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Common\Multiplayer.Proxy\NotificationsServiceProxy.cs ===
﻿using System;
using System.Net;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml.Linq;
using System.Configuration;
using System.IO;
using System.Runtime.Serialization;
using System.Threading;
using AsyncMultiplayer.NotificationService;
using LiveN.Test.Framework.Authorization;
using LiveN.Test.Framework.Configuration;
using Gds.Contracts;
using Leet.Core.Platforms;
using Multiplayer.Test.UserAccounts;

namespace Multiplayer.Test.Proxy
{
    public class NotificationsServiceProxy : NotificationFEService
    {
        public string UserID
        {
            get;
            set;
        }
        public string Password
        {
            get;
            set;
        }

        public string Locale
        {
            get;
            set;
        }


        public NotificationsServiceProxy(string username, string password)
        {
            this.initialize(username, password, Config.EnvironmentSettings.SelectedEnvironment);
        }

        public NotificationsServiceProxy(string username, string password, EnvironmentElement env)
        {
            this.initialize(username, password, env);
        }
        
        public void initialize(string username, string password, EnvironmentElement env)
        {
            serviceEndPoint = env.NotificationsService;
            //todo(michperr): Refactor the delegate so it can take a username/pw as parameters
            this.UserID = username;
            this.Password = password;
            
            //todo(michperr): Fix all the api's to take locale in direclty
            this.Locale = "en-US";

            this.AuthorizationDelegate = () =>
                {
                    string userToken = Users.authCache.GetUserToken(
                       this.UserID,
                       this.Password,
                       env.WindowsLiveIDSettings.LiveIdServiceTarget,
                       env.WindowsLiveIDSettings.Policy,
                       env.WindowsLiveIDSettings.Environment,
                       env.StsSettings.PlatformType,
                       env.StsSettings.TitleId,
                       env.StsSettings.TitleVersion,
                       env.StsSettings.ClientVersion);

                    KeyValuePair<string, string> authzHeader = new KeyValuePair<string, string>("X-Authorization", "XBL1.0 x=" + userToken);
                    return authzHeader;
                };
            Uri baseUri = env.NotificationsService;
            base.BaseUri = baseUri.ToString();
            Timeout = int.Parse(ConfigurationManager.AppSettings["Timeout"]);
        }


        public List<Notification> GetNotifications(
           string gameId,
           string sessionId,
           int category,
           string lastId,
           int count,
           string type,
           bool userVisibleOnly,
           string eTag)
        {

            return GetNotifications(
                GetHttpHeaders(this.Locale, eTag, PlatformType.Mobile), gameId, sessionId, category, lastId, count, type, userVisibleOnly, null);
        }

        public List<Notification> GetNotifications(
            string gameIdString,
            string sessionId,
            int category,
            string lastId,
            int count,
            string typeString,
            bool userVisibleOnly)
        {
            return GetNotifications(gameIdString, sessionId, category, lastId, count, typeString, userVisibleOnly, null);
        }

        public List<Notification> GetNotifications(
            string gameIdString,
            string sessionId,
            int category,
            string lastId,
            int count,
            string typeString,
            bool userVisibleOnly,
            string memberName,
            string password,
            int timesToQuery,
            int timeoutMs)
        {
            this.UserID = memberName;
            this.Password = password;

            List<Notification> retVal;

            for (int x = 0; x < timesToQuery; x++)
            {
                Thread.Sleep(timeoutMs);
                retVal = GetNotifications(gameIdString, sessionId, category, lastId, count, typeString, userVisibleOnly, null);
                if (retVal != null && retVal.Count != 0)
                {
                    return retVal;
                }
            }
            throw new ApplicationException(String.Format("waited {0} ms {1} times.  No notifications returned", timeoutMs, timesToQuery));
        }

        /// <summary>
        /// Client wrapper for the Notification Server's GetNotifications() method
        /// </summary>
        public List<Notification> GetNotifications(
            string gameIdString,
            string sessionId,
            int category,
            string lastId,
            int count,
            string typeString,
            bool userVisibleOnly,
            string memberName,
            string password,
            string eTag)
        {
            this.UserID = memberName;
            this.Password = password;

            return GetNotifications(gameIdString, sessionId, category, lastId, count, typeString, userVisibleOnly, eTag);
        }

        /// <summary>
        /// Client wrapper for the Notification Server's UpdateNotification() method
        /// </summary>
        public void UpdateNotification(
            string notificationId,
            string status)
        {
            UpdateNotification(GetHttpHeaders(this.Locale, null, PlatformType.Mobile), notificationId, status, null);
        }
        
        /// <summary>
        /// Client wrapper for the Notification Server's UpdateNotification() method
        /// </summary>
        public void UpdateNotification(
            string notificationId,
            string status, 
            string username,
            string password)
        {
            this.UserID = username;
            this.Password = password;
            UpdateNotification(notificationId, status);
        }

        /// <summary>
        /// Client wrapper for the Notification Server's DeleteNotificationQuery() method with string inputs
        /// </summary>
        public void DeleteNotificationQuery(
            string notificationId)
        {
            DeleteNotificationQuery(notificationId, this.UserID, this.Password);
        }

        public void DeleteNotificationQuery(
            string notificationId,
            string memberName,
            string password)
        {
            this.UserID = memberName;
            this.Password = password;
            DeleteNotificationQuery(GetHttpHeaders(this.Locale, null, PlatformType.Mobile), notificationId, null);
        }

        /// <summary>
        /// Client wrapper for the Notification Server's DeleteNotificationBySession() method
        /// </summary>
        public void DeleteNotificationBySession(
            string gameIdString,
            string sessionId)
        {
            DeleteNotificationBySession(gameIdString, sessionId, this.UserID, this.Password);
        }

        public void DeleteNotificationBySession(
            string gameIdString,
            string sessionId,
            string memberName,
            string password)
        {
            this.UserID = memberName;
            this.Password = password;
            DeleteNotificationBySession(GetHttpHeaders(this.Locale, null, PlatformType.Mobile), gameIdString, sessionId, null);
        }

        /// <summary>
        /// Client wrapper for the Notification Server's SendInvite() method
        /// </summary>
        public void SendInvite(InviteRequest inviteRequest)
        {
            SendInvite(inviteRequest, GetHttpHeaders(this.Locale, null, PlatformType.Mobile));
        }
        public void SendInvite(InviteRequest inviteRequest, string memberName, string password)
        {
            this.UserID = memberName;
            this.Password = password;
            SendInvite(inviteRequest);
        }
        public void SendInvite(InviteRequest inviteRequest, Dictionary<string, string> customHeaders)
        {
            SendInvite(customHeaders, inviteRequest, null);
        }

        /// <summary>
        /// Client wrapper for the Notification Server's GetSpotLight() method
        /// </summary>
        public List<Spotlight> GetSpotlight(string carrierString)
        {
            return GetSpotlight(carrierString, this.Locale);
        }

        /// <summary>
        /// Client wrapper for the Notification Server's GetSpotLight() method with a specified locale
        /// </summary>
        public List<Spotlight> GetSpotlight(string carrierString, string locale)
        {
            return GetSpotlight(carrierString, locale, null);
        }

        /// <summary>
        /// Client wrapper for the Notification Server's GetSpotlight() method with locale and ETag.
        /// </summary>
        public List<Spotlight> GetSpotlight(string carrierString, string locale, string eTag)
        {
            return GetSpotlight(GetHttpHeaders(locale, eTag, PlatformType.Mobile), carrierString);
        }

        /// <summary>
        /// Client wrapper for the Rewards API - GetLeaderboard
        /// </summary>
        public LeaderboardResult GetLeaderboard(string gameId, string variant, string property, string rankStart, string dataGroup, string numRows, string socialGraph)
        {
            return GetLeaderboard(GetHttpHeaders(this.Locale, null, PlatformType.Mobile), gameId, variant, property, rankStart, dataGroup, numRows, socialGraph);
        }

        /// <summary>
        /// Client wrapper for the Rewards API - GetLeaderboard
        /// </summary>
        public LeaderboardResult GetLeaderboard(string gameId, string variant, string property, string rankStart, string dataGroup, string numRows, string socialGraph, string userName, string Password)
        {
            this.UserID = userName;
            this.Password = Password;
            return GetLeaderboard(gameId, variant, property, rankStart, dataGroup, numRows, socialGraph);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Common\Multiplayer.Proxy\StateService.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Runtime.Serialization;
using AsyncMultiplayer.SessionCommon;

using LiveN.Test.Common.Web;

namespace Multiplayer.Test.Proxy
{
    /// <summary>
    /// 
    /// </summary>
    public class StateService : RestRequest
    {
        public const string GetGameStateUrlFormat = "/GameState/{sessionId}/{gameId}";
        public const string PutGameStateUrlFormat = "/GameState/{sessionId}/{gameId}";
        public const string PostGameEndUrlFormat = "/GameState/{sessionId}/{gameId}";
        public const string PostGameActionUrlFormat = "/GameAction/{sessionId}/{gameId}";

        /// <summary>
        /// 
        /// </summary>
        /// <param name="baseUri"></param>
        public StateService(string baseUri)
        {
            this.BaseUri = baseUri;
        }

        /// <summary>
        /// 
        /// </summary>
        public string BaseUri
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="url"></param>
        /// <param name="sessionId"></param>
        /// <param name="gameId"></param>
        /// <returns></returns>
        public string FormatGameStateUrl(string url, string sessionId, string gameId)
        {
            return this.BaseUri + url.Replace("{sessionId}", sessionId).Replace("{gameId}", gameId);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="locale"></param>
        /// <returns></returns>
        public new Dictionary<string, string> GetHttpHeaders(string locale)
        {
            Dictionary<string, string> httpHeaders = base.GetHttpHeaders();
            if (!String.IsNullOrEmpty(locale))
                httpHeaders.Add("X-Locale", locale);
            return httpHeaders;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sessionId"></param>
        /// <param name="gameId"></param>
        /// <returns></returns>
        public FullGameState GetGameState(string sessionId, string gameId)
        {
            return GetGameState(GetHttpHeaders(), sessionId, gameId);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="httpHeaders"></param>
        /// <param name="sessionId"></param>
        /// <param name="gameId"></param>
        /// <returns></returns>
        public FullGameState GetGameState(Dictionary<string, string> httpHeaders, string sessionId, string gameId)
        {
            string url = FormatGameStateUrl(GetGameStateUrlFormat, sessionId, gameId);
            
            RestResponse response = Get(url, httpHeaders);
            HandleResponse(response);
            
            return DeserializeObject<FullGameState>(response.Body);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sessionId"></param>
        /// <param name="gameId"></param>
        /// <param name="gameStateData"></param>
        public void PutGameState(string sessionId, string gameId, ModifiableGameState gameStateData)
        {
            PutGameState(GetHttpHeaders(), sessionId, gameId, gameStateData);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="httpHeaders"></param>
        /// <param name="sessionId"></param>
        /// <param name="gameId"></param>
        /// <param name="gameStateData"></param>
        public void PutGameState(Dictionary<string, string> httpHeaders, string sessionId, string gameId, ModifiableGameState gameStateData)
        {
            string url = FormatGameStateUrl(PutGameStateUrlFormat, sessionId, gameId);

            RestResponse response = Put(url, httpHeaders, SerializeObject(gameStateData));
            HandleResponse(response);            
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sessionId"></param>
        /// <param name="gameId"></param>
        /// <param name="results"></param>
        public void PostGameEnd(string sessionId, string gameId, GameResults results)
        {
            PostGameEnd(GetHttpHeaders(), sessionId, gameId, results);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="httpHeaders"></param>
        /// <param name="sessionId"></param>
        /// <param name="gameId"></param>
        /// <param name="results"></param>
        public void PostGameEnd(Dictionary<string, string> httpHeaders, string sessionId, string gameId, GameResults results)
        {
            string url = FormatGameStateUrl(PostGameEndUrlFormat, sessionId, gameId);

            RestResponse response = Post(url, httpHeaders, SerializeObject(results));
            HandleResponse(response);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sessionId"></param>
        /// <param name="gameId"></param>
        /// <param name="gameAction"></param>
        public void PostGameAction(string sessionId, string gameId, GameAction gameAction)
        {
            PostGameAction(GetHttpHeaders(), sessionId, gameId, gameAction);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="httpHeaders"></param>
        /// <param name="sessionId"></param>
        /// <param name="gameId"></param>
        /// <param name="gameAction"></param>
        public void PostGameAction(Dictionary<string, string> httpHeaders, string sessionId, string gameId, GameAction gameAction)
        {
            string url = FormatGameStateUrl(PostGameActionUrlFormat, sessionId, gameId);

            RestResponse response = Post(url, httpHeaders, SerializeObject(gameAction));
            HandleResponse(response);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Common\Multiplayer.Proxy\SessionService.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Runtime.Serialization;
using AsyncMultiplayer.SessionCommon;
using Leet.Core.Platforms;
using LiveN.Test.Common.Web;

namespace Multiplayer.Test.Proxy
{
    /// <summary>
    /// 
    /// </summary>
    public class SessionsService : RestRequest
    {
        public const string CreateSessionUrlFormat = "/game/{gameId}";
        public const string JoinSessionUrlFormat = "/session/{sessionId}";

        /// <summary>
        /// 
        /// </summary>
        /// <param name="baseUri"></param>
        public SessionsService(string baseUri)
        {
            this.BaseUri = baseUri;
        }

        /// <summary>
        /// 
        /// </summary>
        public string BaseUri
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="gameId"></param>
        /// <returns></returns>
        public string FormatCreateSessionUrl(string gameId)
        {
            return this.BaseUri + CreateSessionUrlFormat.Replace("{gameId}", gameId);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sessionId"></param>
        /// <returns></returns>
        public string FormatJoinSessionUrl(string sessionId)
        {
            return this.BaseUri + JoinSessionUrlFormat.Replace("{sessionId}", sessionId);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public Dictionary<string, string> GetHttpHeaders(string locale, PlatformType platformType)
        {
            Dictionary<string, string> httpHeaders = base.GetHttpHeaders();
            if (!String.IsNullOrEmpty(locale))
                httpHeaders.Add("X-Locale", locale);

            httpHeaders.Add("X-Platform-Type", ((uint)platformType).ToString());

            return httpHeaders;
        }

        public SessionState CreateSession(CreationData creationData)
        {
            return CreateSession(GetHttpHeaders(), creationData.GameID.ToString(), creationData);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="httpHeaders"></param>
        /// <param name="creationData"></param>
        public SessionState CreateSession(Dictionary<string, string> httpHeaders, CreationData creationData)
        {
            return CreateSession(httpHeaders, creationData.GameID.ToString(), creationData);
        }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="gameId"></param>
        /// <param name="creationData"></param>
        public SessionState CreateSession(string gameId, CreationData creationData)
        {
            return CreateSession(GetHttpHeaders(), gameId, creationData);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="httpHeaders"></param>
        /// <param name="gameId"></param>
        /// <param name="creationData"></param>
        public SessionState CreateSession(Dictionary<string, string> httpHeaders, string gameId, CreationData creationData)
        {
            string url = FormatCreateSessionUrl(gameId);

            RestResponse response = Post(url, httpHeaders, SerializeObject(creationData));
            HandleResponse(response);

            return DeserializeObject<SessionState>(response.Body);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sessionId"></param>
        /// <param name="joinData"></param>
        /// <returns></returns>
        public SessionState JoinSession(string sessionId, JoinData joinData)
        {
            return JoinSession(GetHttpHeaders(), sessionId, joinData);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="httpHeaders"></param>
        /// <param name="sessionId"></param>
        /// <param name="joinData"></param>
        public SessionState JoinSession(Dictionary<string, string> httpHeaders, string sessionId, JoinData joinData)
        {
            string url = FormatJoinSessionUrl(sessionId);

            RestResponse response = Post(url, httpHeaders, SerializeObject(joinData));
            HandleResponse(response);

            return DeserializeObject<SessionState>(response.Body);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sessionId"></param>
        /// <param name="gameId"></param>
        public void RejectInvitation(string sessionId, string gameId)
        {
            RejectInvitation(GetHttpHeaders(), sessionId, gameId);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sessionId"></param>
        /// <param name="gameId"></param>
        public void RejectInvitation(Dictionary<string, string> httpHeaders, string sessionId, string gameId)
        {
            string url = String.Format("{0}/invite/{1}/{2}", this.BaseUri, sessionId, gameId);

            RestResponse response = Delete(url, httpHeaders);
            HandleResponse(response);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sessionId"></param>
        /// <param name="gameId"></param>
        public void LeaveSession(string sessionId, string gameId)
        {
            LeaveSession(GetHttpHeaders(), sessionId, gameId);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sessionId"></param>
        /// <param name="gameId"></param>
        public void LeaveSession(Dictionary<string, string> httpHeaders, string sessionId, string gameId)
        {
            string url = String.Format("{0}/session/{1}/{2}", this.BaseUri, sessionId, gameId);

            RestResponse response = Delete(url, httpHeaders);
            HandleResponse(response);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sessionId"></param>
        /// <param name="gameId"></param>
        /// <param name="modData"></param>
        public void ModifySession(string sessionId, string gameId, ModificationData modData)
        {
            ModifySession(GetHttpHeaders(), sessionId, gameId, modData);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="httpHeaders"></param>
        /// <param name="sessionId"></param>
        /// <param name="gameId"></param>
        /// <param name="modData"></param>
        public void ModifySession(Dictionary<string, string> httpHeaders, string sessionId, string gameId, ModificationData modData)
        {
            string url = String.Format("{0}/session/{1}/{2}", this.BaseUri, sessionId, gameId);

            RestResponse response = Put(url, httpHeaders, SerializeObject(modData));
            HandleResponse(response);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sessionId"></param>
        /// <param name="gameId"></param>
        /// <returns></returns>
        public SessionState ViewSession(string sessionId, string gameId)
        {
            return ViewSession(GetHttpHeaders(), sessionId, gameId);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="httpHeaders"></param>
        /// <param name="sessionId"></param>
        /// <param name="gameId"></param>
        /// <returns></returns>
        public SessionState ViewSession(Dictionary<string, string> httpHeaders, string sessionId, string gameId)
        {
            string url = String.Format("{0}/session/{1}/{2}", this.BaseUri, sessionId, gameId);

            RestResponse response = Get(url, httpHeaders);
            HandleResponse(response);

            return DeserializeObject<SessionState>(response.Body);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="gameId"></param>
        /// <param name="firstSession"></param>
        /// <param name="max"></param>
        /// <param name="sessionType"></param>
        /// <returns></returns>
        public SessionEntry[] ViewSessionSummaries(string gameId, string variant, string lastSessionID, string lastGameID, string maxSessions, string showSessionType)
        {
            return ViewSessionSummaries(GetHttpHeaders(), gameId, variant, lastSessionID, lastGameID, maxSessions, showSessionType);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="gameId"></param>
        /// <param name="firstSession"></param>
        /// <param name="max"></param>
        /// <param name="sessionType"></param>
        /// <returns></returns>
        public SessionEntry[] ViewSessionSummaries(string gameId, string variant, string lastSessionID, string lastGameID, int maxSessions, ShowSessionType showSessionType)
        {
            return ViewSessionSummaries(GetHttpHeaders(), gameId, variant, lastSessionID, lastGameID, maxSessions, showSessionType);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="httpHeaders"></param>
        /// <param name="gameId"></param>
        /// <param name="firstSession"></param>
        /// <param name="max"></param>
        /// <param name="sessionType"></param>
        /// <returns></returns>
        public SessionEntry[] ViewSessionSummaries(Dictionary<string, string> httpHeaders, string gameId, string variant, string lastSessionID, string lastGameID, int maxSessions, ShowSessionType showSessionType)
        {
            return ViewSessionSummaries(httpHeaders, gameId, variant, lastSessionID, lastGameID, maxSessions.ToString(), showSessionType.ToString());
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="httpHeaders"></param>
        /// <param name="gameId"></param>
        /// <param name="firstSession"></param>
        /// <param name="max"></param>
        /// <param name="sessionType"></param>
        /// <returns></returns>
        public SessionEntry[] ViewSessionSummaries(Dictionary<string, string> httpHeaders, string gameId, string variant, string lastSessionID, string lastGameID, string maxSessions, string showSessionType)
        {
            StringBuilder url = new StringBuilder(String.Format("{0}/game?", this.BaseUri));
            Dictionary<string, string> queryStringParams = new Dictionary<string, string>();

            if (gameId != null)
                queryStringParams.Add("game", gameId);
            if (variant != null)
                queryStringParams.Add("variant", variant);
            if (lastSessionID != null)
                queryStringParams.Add("lastSession", lastSessionID);
            if (lastGameID != null)
                queryStringParams.Add("lastGame", lastGameID);
            if (maxSessions != null)
                queryStringParams.Add("max", maxSessions);
            if (showSessionType != null)
                queryStringParams.Add("showSessionType", showSessionType);

            foreach (string key in queryStringParams.Keys)
            {
                url.AppendFormat("{0}={1}&", key, queryStringParams[key]);
            }

            url.Length -= 1;    //strip off the last & (or ?)

            RestResponse response = Get(url.ToString(), httpHeaders);
            HandleResponse(response);

            return DeserializeObject<SessionEntry[]>(response.Body);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Common\Multiplayer.Proxy\TestHooksService.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;
using System.Web;
using AsyncMultiplayer.NotificationService;
using System.Configuration;
using LiveN.Test.Framework.Configuration;
using LiveN.Test.Common.Web;
using System.IO;
using System.Runtime.Serialization;
using LiveN.Test.Common;
using AsyncMultiplayer.SessionCommon;

namespace Multiplayer.Test.Proxy
{
    public class TestHooksService : RestRequest
    {
        public Uri MPTestHooksServiceUrl;

        public TestHooksService()
        {
            Initialize(Config.Environment.MPTestHooksService);
        }

        public TestHooksService(Uri serviceUrl)
        {
            Initialize(serviceUrl);
        }

        private void Initialize(Uri serviceUrl)
        {
            this.MPTestHooksServiceUrl = serviceUrl;
        }

        public void CreateNotifications(List<Notification> notificationList)
        {
            string uri = String.Format("{0}/createnotifications",
                MPTestHooksServiceUrl);

            TraceEx.TraceStart("Sending POST request: " + uri);
            Dictionary<string, string> customHeaders = new Dictionary<string, string>();
            customHeaders.Add("ContentType", "application/xml");

            RestResponse response = Post(uri, customHeaders, SerializeObject(notificationList));
            TraceEx.TraceVerbose("Response: " + response);
            if (!response.Succeeded)
            {
                throw new RestException(response);
            }
        }

        public void SetupNotFriendsAndNoFR(ulong userXuid, ulong targetXuid)
        {
            string uri = String.Format("{0}/makenotfsnofr/?user={1}&target={2}",
                MPTestHooksServiceUrl, userXuid, targetXuid);

            TraceEx.TraceStart("Sending POST request: " + uri);
            Dictionary<string, string> customHeaders = new Dictionary<string, string>();
            customHeaders.Add("ContentType", "application/xml");

            RestResponse response = Post(uri, customHeaders, String.Empty);
            TraceEx.TraceStart("Response: "   + response);
            if (!response.Succeeded)
            {
                throw new RestException(response);
            }
        }

        public void SetupFriends(ulong userXuid, ulong targetXuid)
        {
            string uri = String.Format("{0}/makefriends/?user={1}&target={2}",
                MPTestHooksServiceUrl, userXuid, targetXuid);

            TraceEx.TraceStart("Sending POST request: " + uri);
            Dictionary<string, string> customHeaders = new Dictionary<string, string>();
            customHeaders.Add("ContentType", "application/xml");

            RestResponse response = Post(uri, customHeaders, String.Empty);

            TraceEx.TraceStart("Response: "   + response);
            if (!response.Succeeded)
            {
                throw new RestException(response);
            }
        }

        public bool HasFR(ulong userXuid, ulong targetXuid)
        {
            string uri = String.Format("{0}/hasfr/?user={1}&target={2}",
                MPTestHooksServiceUrl, userXuid, targetXuid);

            TraceEx.TraceStart("Sending GET request: " + uri);
            Dictionary<string, string> customHeaders = new Dictionary<string, string>();
            customHeaders.Add("ContentType", "application/xml");

            RestResponse response = Get(uri, customHeaders);
            TraceEx.TraceStart("Response: "   + response);
            if (!response.Succeeded)
            {
                throw new RestException(response);
            }
            return GetBoolResponse(response.Body);
        }

        public bool AreFriends(ulong userXuid, ulong targetXuid)
        {
            string uri = String.Format("{0}/arefriends/?user={1}&target={2}",
                MPTestHooksServiceUrl, userXuid, targetXuid);

            TraceEx.TraceStart("Sending GET request: " + uri);
            Dictionary<string, string> customHeaders = new Dictionary<string, string>();
            customHeaders.Add("ContentType", "application/xml");

            RestResponse response = Get(uri, customHeaders);
            TraceEx.TraceStart("Response: "   + response);
            if (!response.Succeeded)
            {
                throw new RestException(response);
            }
            return GetBoolResponse(response.Body);
        }

        public void AcceptFR(ulong userXuid, ulong targetXuid)
        {
            string uri = String.Format("{0}/acceptfr/?user={1}&target={2}",
                MPTestHooksServiceUrl, userXuid, targetXuid);

            TraceEx.TraceStart("Sending POST request: " + uri);
            Dictionary<string, string> customHeaders = new Dictionary<string, string>();
            customHeaders.Add("ContentType", "application/xml");

            RestResponse response = Post(uri, customHeaders, String.Empty);

            TraceEx.TraceStart("Response: "   + response);
            if (!response.Succeeded)
            {
                throw new RestException(response);
            }
        }

        public bool BeginTest(string testType)
        {
            string uri = String.Format("{0}/begintest/?TestType={1}",
                MPTestHooksServiceUrl,
                testType);

            TraceEx.TraceStart("Sending POST request: " + uri);
            Dictionary<string, string> customHeaders = new Dictionary<string, string>();
            customHeaders.Add("ContentType", "application/xml");
            RestResponse response = Post(uri, customHeaders, String.Empty);
            TraceEx.TraceStart("Response: "   + response);
            if (!response.Succeeded)
            {
                throw new RestException(response);
            }
            return GetBoolResponse(response.Body);
        }

        public void EndTest(string testType)
        {
            string uri = String.Format("{0}/endtest/?TestType={1}",
                MPTestHooksServiceUrl,
                testType);

            TraceEx.TraceStart("Sending POST request: " + uri);
            Dictionary<string, string> customHeaders = new Dictionary<string, string>();
            customHeaders.Add("ContentType", "application/xml");
            RestResponse response = Post(uri, customHeaders, String.Empty);
            TraceEx.TraceStart("Response: "   + response);
            if (!response.Succeeded)
            {
                throw new RestException(response);
            }
        }

        public void AddFR(ulong userXuid, ulong targetXuid)
        {
            string uri = String.Format("{0}/addfr/?user={1}&target={2}",
                MPTestHooksServiceUrl, userXuid, targetXuid);

            TraceEx.TraceStart("Sending POST request: " + uri);
            Dictionary<string, string> customHeaders = new Dictionary<string, string>();
            customHeaders.Add("ContentType", "application/xml");

            RestResponse response = Post(uri, customHeaders, String.Empty);

            TraceEx.TraceStart("Response: "   + response);
            if (!response.Succeeded)
            {
                throw new RestException(response);
            }
        }

        public void CleanupFR(ulong userXuid, ulong targetXuid)
        {
            string uri = String.Format("{0}/cleanupfr/?user={1}&target={2}",
                MPTestHooksServiceUrl, userXuid, targetXuid);

            TraceEx.TraceStart("Sending POST request: " + uri);
            Dictionary<string, string> customHeaders = new Dictionary<string, string>();
            customHeaders.Add("ContentType", "application/xml");

            RestResponse response = Post(uri, customHeaders, String.Empty);

            TraceEx.TraceStart("Response: "   + response);
            if (!response.Succeeded)
            {
                throw new RestException(response);
            }
        }

        public List<Notification> QueryGarbageNotifications(DateTime olderThanDateTime)
        {
            string uri = String.Format("{0}/querygarbagenotifications/?olderthan={1}",
                MPTestHooksServiceUrl,
                olderThanDateTime.ToString());

            Dictionary<string, string> customHeaders = new Dictionary<string, string>();
            customHeaders.Add("ContentType", "application/xml");

            RestResponse response = Get(uri, customHeaders);
            TraceEx.TraceStart("Response: "   + response);
            if (!response.Succeeded)
            {
                throw new RestException(response);
            }
            return DeserializeObject<List<Notification>>(response.Body);
        }

        public void AddUserToNeverList(ulong userXuid, ulong targetXuid)
        {
            string uri = String.Format("{0}/addusertoneverlist/?user={1}&target={2}",
                MPTestHooksServiceUrl, userXuid, targetXuid);

            TraceEx.TraceStart("Sending POST request: " + uri);
            Dictionary<string, string> customHeaders = new Dictionary<string, string>();
            customHeaders.Add("ContentType", "application/xml");

            RestResponse response = Post(uri, customHeaders, String.Empty);
            TraceEx.TraceStart("Response: "   + response);
            if (!response.Succeeded)
            {
                throw new RestException(response);
            }
        }

        public void RemoveUserFromNeverList(ulong userXuid, ulong targetXuid)
        {
            string uri = String.Format("{0}/removeuserfromneverlist/?user={1}&target={2}",
                MPTestHooksServiceUrl, userXuid, targetXuid);

            TraceEx.TraceStart("Sending POST request: " + uri);
            Dictionary<string, string> customHeaders = new Dictionary<string, string>();
            customHeaders.Add("ContentType", "application/xml");

            RestResponse response = Post(uri, customHeaders, String.Empty);
            TraceEx.TraceStart("Response: "   + response);
            if (!response.Succeeded)
            {
                throw new RestException(response);
            }
        }

        public bool IsUserInTargetsNeverList(ulong userXuid, ulong targetXuid)
        {
            string uri = String.Format("{0}/isuserinneverlist/?user={1}&target={2}",
                MPTestHooksServiceUrl, userXuid, targetXuid);

            TraceEx.TraceStart("Sending GET request: " + uri);
            Dictionary<string, string> customHeaders = new Dictionary<string, string>();
            customHeaders.Add("ContentType", "application/xml");

            RestResponse response = Get(uri, customHeaders);
            TraceEx.TraceStart("Response: "   + response);
            if (!response.Succeeded)
            {
                throw new RestException(response);
            } return GetBoolResponse(response.Body);
        }

        public void SendMessage(ulong userXuid, ulong targetXuid)
        {
            string uri = String.Format("{0}/sendmessage/?user={1}&target={2}",
                MPTestHooksServiceUrl, userXuid, targetXuid);

            TraceEx.TraceStart("Sending POST request: " + uri);
            Dictionary<string, string> customHeaders = new Dictionary<string, string>();
            customHeaders.Add("ContentType", "application/xml");

            RestResponse response = Post(uri, customHeaders, String.Empty);
            TraceEx.TraceStart("Response: "   + response);
            if (!response.Succeeded)
            {
                throw new RestException(response);
            }
        }

        public void DeleteAllUnreadMessages(ulong userXuid)
        {
            string uri = String.Format("{0}/deleteallunreadmessages/?user={1}",
                MPTestHooksServiceUrl, userXuid);

            TraceEx.TraceStart("Sending POST request: " + uri);
            Dictionary<string, string> customHeaders = new Dictionary<string, string>();
            customHeaders.Add("ContentType", "application/xml");

            RestResponse response = Post(uri, customHeaders, String.Empty);
            TraceEx.TraceStart("Response: "  + response);
            if (!response.Succeeded)
            {
                throw new RestException(response);
            }
        }

        public bool HasUnreadMessages(ulong userXuid)
        {
            string uri = String.Format("{0}/hasunreadmessages/?user={1}",
                MPTestHooksServiceUrl, userXuid);

            TraceEx.TraceStart("Sending GET request: " + uri);
            Dictionary<string, string> customHeaders = new Dictionary<string, string>();
            customHeaders.Add("ContentType", "application/xml");

            RestResponse response = Get(uri, customHeaders);
            TraceEx.TraceStart("Response: "   + response);
            if (!response.Succeeded)
            {
                throw new RestException(response);
            }
            return GetBoolResponse(response.Body);
        }

        public void ResetNumberOfSessions(IdentityToken profile)
        {
            string uri = String.Format("{0}/resetnumberofsessions",
                MPTestHooksServiceUrl);

            TraceEx.TraceStart("Sending POST request: " + uri);
            Dictionary<string, string> customHeaders = new Dictionary<string, string>();
            customHeaders.Add("ContentType", "application/xml");

            RestResponse response = Post(uri, customHeaders, SerializeObject(profile));
            TraceEx.TraceStart("Response: " + response);
            if (!response.Succeeded)
            {
                throw new RestException(response);
            }
        }


        public void CreateSession(SessionState sessionState)
        {
            string uri = String.Format("{0}/createsession", MPTestHooksServiceUrl);

            TraceEx.TraceStart("Sending POST request: " + uri);
            Dictionary<string, string> customHeaders = new Dictionary<string, string>();
            customHeaders.Add("Content-Type", "application/xml");

            RestResponse response = Post(uri, customHeaders, SerializeObject(sessionState));

            TraceEx.TraceStart("Response: "   + response);
            TraceEx.TraceStart("Session created with Session Id: " + sessionState.SessionID);
            if (!response.Succeeded)
            {
                throw new RestException(response);
            }
        }

        public void UpdateUserEntry(
         string xuid,
         DateTime lastInviteResetTime,
         DateTime lastUpdateTime,
         int inviteCount)
        {
            string uri = String.Format("{0}/user?Xuid={1}&LastInviteResetTime={2}&LastUpdateTime={3}&InviteCount={4}",
                MPTestHooksServiceUrl,
                xuid,
                lastInviteResetTime,
                lastUpdateTime,
                inviteCount);

            TraceEx.TraceStart("Sending GET request: " + uri);
            Dictionary<string, string> customHeaders = new Dictionary<string, string>();
            customHeaders.Add("ContentType", "application/xml");

            RestResponse response = Get(uri, customHeaders);

            TraceEx.TraceStart("Response: "   + response);
            if (!response.Succeeded)
            {
                throw new RestException(response);
            }
        }

         public UserData GetUserData(
            string xuid)
        {
            string uri = String.Format("{0}/userdata?xuid={1}",
                MPTestHooksServiceUrl,
                xuid);

            TraceEx.TraceStart("Sending GET request: " + uri);
            Dictionary<string, string> customHeaders = new Dictionary<string, string>();
            customHeaders.Add("ContentType", "application/xml");

            RestResponse response = Get(uri, customHeaders);

            TraceEx.TraceStart("Response: " + response);
            if (!response.Succeeded)
            {
                throw new RestException(response);
            }

            if (string.IsNullOrEmpty(response.Body))
                return null;
            else
                return DeserializeObject<UserData>(response.Body);
        }
        

        private string GetNotificationId(string responseXml)
        {
            if (responseXml.Length == 0)
            {
                throw new InvalidOperationException("Response XML was empty - cannot get generated Notification GUID");
            }

            XmlDocument xmlDocument = new XmlDocument();
            xmlDocument.LoadXml(responseXml);

            string responseId = xmlDocument.InnerText;
            return responseId;
        }

        private bool GetBoolResponse(string responseXml)
        {
            if (responseXml.Length == 0)
            {
                throw new InvalidOperationException("Response XML was empty");
            }

            XmlDocument xmlDocument = new XmlDocument();
            xmlDocument.LoadXml(responseXml);

            string response = xmlDocument.InnerText;
            if (response.Equals("true"))
                return true;
            else
                return false;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Common\MultiplayerCommon\LoggingUtilityTests.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using System.Globalization;
using System.IO;
using System.Net;
using System.Web;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Multiplayer.Test.API;
using AsyncMultiplayer.NotificationService;
using Multiplayer.Test.Proxy;
namespace Multiplayer.Test
{
    /// <summary>
    /// LoggingUtilityTests TestClass contains tests for Logging Utility (Leet.Core) 
    /// </summary>
    [TestClass]
    public class LoggingUtilityTests :  TestAreaBase
    {
        private static string NotificationServiceDirectory;
        private static string NotificationStorageShare;
        private static string logCopiesFolderPath;
        private static string logFilePath, copyLogFilePath;
        private const string DateFormat = "yyyy-MM-dd";

        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
            NotificationServiceDirectory = System.Configuration.ConfigurationManager.AppSettings["NotificationServiceShare"];
            NotificationStorageShare = System.Configuration.ConfigurationManager.AppSettings["NotificationStorageShare"];
            logCopiesFolderPath = Path.GetTempPath() + "\\notificationlogcopies";
        }

        //
        // This code runs before every test case -
        // For Notifications, this means ensuring at least a single notification is populated in the server
        //
        [TestInitialize()]
        public void MyTestInitialize()
        {
            TestAreaBase.testHooksClient.CreateDummyNotification();
        }

        //[TestMethod, Owner("lewbamp")]
        //[Description("Call GET on NotificationsService to query for Notifications & verify it log messages to log file")]
        //[TestProperty("Type", "Feature")]
        public void FeatureTest_GetNotificationsLog()
        {
            Log.WriteLine("");
            Log.WriteLine("In FeatureTest_GetNotificationsLog()");

            //Calling GetNotifications on NotificationService
            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), String.Empty, 0, String.Empty, 1, String.Empty, true);

            //Verify we get notifications list from above call
            Assert.IsNotNull(notifications);
            Assert.IsTrue(notifications.Count > 0, "ERROR: Notification list was empty.");

            //Expected Exception message to verify
            string expectedMessage = "NotificationServiceFrontEnd> Calling GetNotifications";

            //Call VerifyLogFileEx to verify the exception has been logged in log file
            VerifyLogFile(expectedMessage);
        }

        //[TestMethod, Owner("lewbamp")]
        //[Description("Call GET on NotificationsService to query for Notifications and make it throw exception & verify exception message log to log file")]
        //[TestProperty("Type", "Feature")]
        public void FeatureTest_GetNotificationsLogException()
        {
            Log.WriteLine("");
            Log.WriteLine("In FeatureTest_GetNotificationsLogException()");

            bool hitException = false;
            List<Notification> notifications = null;

            //Deleting test notifications folder to make NotificationService to throw exception on query
            if (Directory.Exists(NotificationStorageShare + "\\50"))
            {
                Directory.Delete(NotificationStorageShare + "\\50", true);
            }

            //Calling GetNotifications on NotificationService - putting the call in try/catch block to catch the exception 
            //and verify exception has been logged to logfile
            try
            {
                notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), String.Empty, 0, String.Empty, 1, String.Empty, true);
            }
            catch (WebException webEx)
            {
                //setting Exception hit flag to true
                hitException = true;

                //logging exception message to test log file
                Log.WriteLine("FeatureTest_GetNotificationsLogException: " + webEx.Message);

                //Expected Exception message to verify
                string expectedMessage = "NotificationServiceFrontEnd> Exception caught in method: GetNotificationsSystem.IO.DirectoryNotFoundException";

                //Assert the GetNotification call didn't return any notifications
                Assert.IsNull(notifications);

                //Call VerifyLogFileEx to verify the exception has been logged in log file
                VerifyLogFile(expectedMessage);
            }

            //Fail the test if it doesn't throw an Exception
            if (!hitException)
            {
                Assert.Fail("GetNotifications did not throw an Exception");
            }
        }

        //[TestMethod, Owner("lewbamp")]
        //[Description("Call DELETE on NotificationsService to delete Notification and make it throw exception & verify exception message log to log file")]
        //[TestProperty("Type", "Feature")]
        public void FeatureTest_DeleteNotificationLogException()
        {
            Log.WriteLine("");
            Log.WriteLine("In FeatureTest_DeleteNotificationLogException()");

            bool hitException = false;

            if (Directory.Exists(NotificationStorageShare + "\\50"))
            {
                Directory.Delete(NotificationStorageShare + "\\50", true);
            }

            try
            {
                this.NotificationsServiceProxy.DeleteNotificationQuery(String.Empty);
            }
            catch (WebException webEx)
            {

                hitException = true;
                Log.WriteLine("FeatureTest_DeleteNotificationLogException: " + webEx.Message);

                string expectedMessage = "NotificationServiceFrontEnd> Exception caught in method: DeleteNotificationSystem.IO.DirectoryNotFoundException";

                VerifyLogFile(expectedMessage);
            }

            if (!hitException)
            {
                Assert.Fail("DeleteNotification did not throw an Exception");
            }
        }


        private void VerifyLogFile(string expectedMessage)
        {
            //Get today's timeStamp in "yyyy-MM-dd" format for log file name
            string timeStamp = null;
            DateTime nowTime = DateTime.Now.ToLocalTime();
            timeStamp = nowTime.ToString(DateFormat, CultureInfo.InvariantCulture);

            //setting path for logfile on NotificationService server
            logFilePath = NotificationServiceDirectory + "\\Leet.Utils.Test-" + timeStamp + ".log";

            //setting destination path for logfile to copy it to local temp folder
            copyLogFilePath = logCopiesFolderPath + "\\Leet.Utils.Test-" + timeStamp + ".log";

            //Verifying log file exists on NotificationService server
            Assert.IsTrue(File.Exists(logFilePath), "Log file: " + logFilePath + " does not exist and not created");

            //Check for destination log file directory exists, create if not exists
            if (!Directory.Exists(logCopiesFolderPath))
            {
                Directory.CreateDirectory(logCopiesFolderPath);
            }

            //Copy logfile from NotificationService server to local temp folder
            File.Copy(logFilePath, copyLogFilePath, true);

            //Reading log file content to an array
            string[] fileOutput = File.ReadAllLines(copyLogFilePath);

            //Getting line index for expected message in log file
            int exceptionStartIndex = 0;
            for (int i = (fileOutput.Length - 1); i >= 0; i--)
            {
                if (fileOutput[i].StartsWith(timeStamp))
                {
                    exceptionStartIndex = i;
                    break;
                }
            }

            //Verify log message logged to log file
            Assert.IsTrue(fileOutput[exceptionStartIndex].Contains(expectedMessage), "Logging is not working");

            //Deleting the copy of log file on local temp folder
            File.Delete(copyLogFilePath);
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Common\MultiplayerCommon\TestFailureException.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Multiplayer.Test.API
{
    /// <summary>
    /// 
    /// </summary>
    public class TestFailureException : Exception
    {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="message"></param>
        public TestFailureException(string message)
            : base(message)
        {

        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="message"></param>
        /// <param name="innerException"></param>
        public TestFailureException(string message, Exception innerException)
            : base(message, innerException)
        {

        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="format"></param>
        /// <param name="args"></param>
        public TestFailureException(string format, params object[] args)
            : base(String.Format(format, args))
        {

        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Common\MultiplayerCommon\Constants.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using LiveN.Test.Framework.Configuration;

namespace Multiplayer.Test.API
{

    public class Constants
    {
        public static UInt32 TESTGAMEID = uint.Parse(Config.Environment.StsSettings.TitleId);
        public const UInt32 ALTERNATE_TESTGAMEID = 1297287395; // checkers (variant 0 is valid)
        public const UInt32 NONMULTIPLAYER_TESTGAMEID = 1297287392; // Flowers (variant 0 is valid)
        public const int TESTGAMEVARIANT = 0;
        public const int TESTGAMEVARIANT2 = 2;
        public const string TESTGAMEVARIANTNAME = "Backgammon Hotseat";
        public const string TESTGAMEVARIANTNAME2 = "Backgammon Multiplayer";
        public const uint XBOX_LIVE_EXTRAS_TITLE_ID = 1297287404;
        public const string XBOX_LIVE_EXTRAS_DISPLAY_NAME = "View with Xbox LIVE Extras";
        public const int XBLFRPROCESSTIMEINSEC = 180;
        public const string IGNORE_lAST_ID = "";
        public const string SecurityTicketQuery = "/GetSecurityTicket?platformType={platformId}&titleId={titleId}&titleVersion={titleVersion}&clientVersion={clientVersion}&deviceId={deviceId}";
        public const string PartnerSecurityTicketQuery = "/GetPartnerSecurityTicket?xuid={xuid}&titleId={titleId}&titleVersion={titleVersion}";
        public const int NOTIFICATION_SLEEP_TIME = 5000;
        public const int NOTIFICATION_RETRIES = 12;
        public const int NEW_USER_WAIT_TIME = 30000;
        public static readonly string[] LOCALES = new string[] { "de-AT", "de-CH", "de-DE", "es-ES", "es-MX", "fr-BE", "it-IT", "fr-CA", "fr-FR", "fr-CH", "fr-BE", "en-AU", "en-CA", "en-GB", "en-HK", "en-IE", "en-IN", "en-NZ", "en-SG", "en-US" };

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Common\MultiplayerCommon\RestCommand.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Net;
using System.Collections;
using System.IO;

namespace Multiplayer.Test.API
{
    class RestCommand
    {
        WebClient webClient = new WebClient();
        
        public RestCommand()
        {
         
        }

        WebHeaderCollection _headers;

        public string Get(string uri, Dictionary<string, string> customHeaders)
        {
            return MakeRequest(uri,customHeaders,"GET");
        }

        private string MakeRequest(string uri, Dictionary<string, string> customHeaders, string verb)
        {
            HttpWebRequest webRequest = WebRequest.Create(uri) as HttpWebRequest;
            if (webRequest == null)
            {
                throw new NotSupportedException("WebRequest.Create failed in RestCommand::Delete");
            }
            webRequest.Method = verb;

            foreach (KeyValuePair<string, string> kvp in customHeaders)
            {
                if (kvp.Key.Equals("Content-Type"))
                {
                    webRequest.ContentType = kvp.Value;
                    continue;
                }
                webRequest.Headers[kvp.Key] = kvp.Value;
            }
            HttpWebResponse webResponse = webRequest.GetResponse() as HttpWebResponse;

            if (webResponse == null)
            {
                throw new NotSupportedException("WebRequest.GetResponse failed in RestCommand::MakeRequest");
            }

            _headers = webResponse.Headers;

            using (Stream responseStream = webResponse.GetResponseStream())
            {
                using (StreamReader responseStreamReader = new StreamReader(responseStream))
                {
                    return responseStreamReader.ReadToEnd();
                }
            }
        }

        public string GetResponseHeader(string headerItem)
        {
            return _headers[headerItem];
        }

        public string Put(string uri, string data)
        {
            return webClient.UploadString(uri, "PUT", data);
        }

        public string Put(string uri, Dictionary<string, string> customHeaders, string data)
        {
            foreach (KeyValuePair<string, string> kvp in customHeaders)
            {
                webClient.Headers[kvp.Key] = kvp.Value;
            }

            return webClient.UploadString(uri, "PUT", data);
        }

        public string Post(string uri, string data)
        {
            return webClient.UploadString(uri, "POST", data);
        }

        public string Post(string uri, Dictionary<string, string> customHeaders, string data)
        {
            foreach (KeyValuePair<string, string> kvp in customHeaders)
            {
                webClient.Headers[kvp.Key] = kvp.Value;
            }

            return webClient.UploadString(uri, "POST", data);
        }

        public string Delete(string uri)
        {
            
            HttpWebRequest webRequest = WebRequest.Create(uri) as HttpWebRequest;
            if (webRequest == null)
            {
                throw new NotSupportedException("WebRequest.Create failed in RestCommand::Delete");
            }

            
            webRequest.Method = "DELETE";
            webRequest.ContentType = "application/xml";
            HttpWebResponse webResponse = webRequest.GetResponse() as HttpWebResponse;
            if (webResponse == null)
            {
                throw new NotSupportedException("WebRequest.GetResponse failed in RestCommand::Delete");
            }

            Stream responseStream = webResponse.GetResponseStream();
            StreamReader responseStreamReader = new StreamReader(responseStream);
            string responseString = responseStreamReader.ReadToEnd();
            responseStream.Close();
            webResponse.Close();

            return responseString;
        }

        public string Delete(string uri, Dictionary<string, string> customHeaders)
        {

            HttpWebRequest webRequest = WebRequest.Create(uri) as HttpWebRequest;
            if (webRequest == null)
            {
                throw new NotSupportedException("WebRequest.Create failed in RestCommand::Delete");
            }


            webRequest.Method = "DELETE";
            
            //Set Headers
            foreach (KeyValuePair<string, string> kvp in customHeaders)
            {
                //don't set the content type on deletes for some reason
                if (kvp.Key.Equals("Content-Type"))
                {
                    //webRequest.ContentType = kvp.Value;
                    continue;
                }
                webRequest.Headers[kvp.Key] = kvp.Value;
            }

            HttpWebResponse webResponse = webRequest.GetResponse() as HttpWebResponse;
            if (webResponse == null)
            {
                throw new NotSupportedException("WebRequest.GetResponse failed in RestCommand::Delete");
            }

            Stream responseStream = webResponse.GetResponseStream();
            StreamReader responseStreamReader = new StreamReader(responseStream);
            string responseString = responseStreamReader.ReadToEnd();
            responseStream.Close();
            webResponse.Close();

            return responseString;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Common\MultiplayerCommon\MPTestHooksProxy.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Multiplayer.Test.API;
using System.Xml;
using System.Web;
using AsyncMultiplayer.NotificationService;
using System.Configuration;
using LiveN.Test.Framework.Configuration;
using LiveN.Test.Common.Web;
using AsyncMultiplayer.SessionCommon;
using System.IO;
using System.Runtime.Serialization;
using Multiplayer.Test.UserAccounts;
using LiveN.Test.Common;
using Multiplayer.Test.Proxy;

namespace Multiplayer.Test.API
{
    public class MPTestHooksProxy : TestHooksService
    {
        private readonly Notification.NotificationCategory TestCategoryValue = Notification.NotificationCategory.NotSpecified;

        public string TestSessionId
        {
            get;
            private set;
        }
        
        public MPTestHooksProxy()
        {            
            CreateNewSessionId();
            Timeout = int.Parse(ConfigurationManager.AppSettings["Timeout"]);
        }

        public Notification.NotificationCategory TestCategory
        {
            get { return TestCategoryValue; } 
        }

        /// <summary>
        /// Used when tests want to make sure to use a new global SessionID for their scenarios
        /// </summary>
        public void CreateNewSessionId()
        {
            TestSessionId = Guid.NewGuid().ToString();
        }
 
        /// <summary>
        /// Used to Create a single, dummy notification.
        /// </summary>
        public string CreateDummyNotification()
        {
            return this.CreateDummyNotification(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password));
        }
        
        public string CreateDummyNotification(string userId)
        {
            return CreateNotification(
                Notification.NotificationType.YourTurn,
                Constants.TESTGAMEID,
                TestSessionId,
                4,
                userId,
                Constants.TESTGAMEVARIANT);
            //return string.Empty;
        }
        /// <summary>
        /// create a set of notifications.  Use different sessionIds to avoid the notification service's 
        /// aggregation of types for the same session.
        /// </summary>
        /// <param name="numToCreate"></param>
        /// <returns></returns>
        public List<string> CreateDummyNotification(int numToCreate)
        {
            List<string> sList = new List<string>();
            
            for (int x = 0; x < numToCreate; x++)
            {
                sList.Insert(
                    0,
                    CreateNotification(
                    Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password),
                    Constants.TESTGAMEID,
                    Guid.NewGuid().ToString()));
            }

            return sList;
        }

        /// <summary>
        /// create a random notification type.  
        /// </summary>
        /// <returns>the ID of the notification created</returns>
        public string CreateNotification()
        {
            return CreateNotification(
                    Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password),
                    Constants.TESTGAMEID,
                    Guid.NewGuid().ToString());
        }

        /// <summary>
        /// Generic CreateNotification method used to inject a Notification in the test server specified in App.config.
        /// Uses new values for Session ID, Game ID and Notification ID
        /// </summary>
        /// <returns>A unique identifier for the saved Notification</returns>
        public string CreateNotification(
            Notification.NotificationType notificationType,
            string userId,
            uint gameId,
            string sessionId)
        {
            return CreateNotification(
                notificationType,
                gameId, 
                sessionId, 
                4,
                userId, 
                Constants.TESTGAMEVARIANT);
        }
        //todo(michperr): Make this generic and move to common
        private Notification.NotificationType GetRandomNotificationType()
        {
            Notification.NotificationType[] n = (Notification.NotificationType[])Enum.GetValues(typeof(Notification.NotificationType));

            Notification.NotificationType ret;
            do
            {
                ret = n[new Random().Next(n.Length)];
            } while (ret == Notification.NotificationType.FriendRequest || ret == Notification.NotificationType.Message);

            return ret;
        }

        public string CreateNotification(
            string userId,
            uint gameId,
            string sessionId)
        {

            return CreateNotification(
                GetRandomNotificationType(),
                userId,
                gameId,
                sessionId);
        }

        /// <summary>
        /// Client wrapper for the MPTestHooks service's CreateNotification() API. This lets you inject a Notification into the system.
        /// </summary>
        public string CreateNotification(
            Notification.NotificationType notificationType,
            UInt32 gameId,
            string sessionId,
            Int32 supportedPlatform,
            string userId,
            Int32 gameVariant)
        {
            return CreateNotification(notificationType, gameId, sessionId, supportedPlatform, userId, gameVariant, null);
        }


        public string CreateNotification(
            Notification.NotificationType notificationType,
            UInt32 gameId,
            string sessionId,
            Int32 supportedPlatform,
            string userId,
            Int32 gameVariant,
            string deliveredTime)
        {
            List<Notification> nList = new List<Notification>();
            Notification notification = BuildNotification(notificationType, gameId, sessionId, supportedPlatform, userId, gameVariant, string.Empty);
            nList.Add(notification);
            CreateNotifications(nList);
            return notification.Id;
        }

        /// <summary>
        /// Helper internal method - creates N number of notifications with a specific type.
        /// Used to test notification aggregation.
        /// </summary>
        /// <returns>The last notification ID generated</returns>
        public string CreateNotificationsInternal(int count, Notification.NotificationType type)
        {
            return CreateNotificationsInternal(count, type, TestSessionId, Constants.TESTGAMEID);
        }

        /// <summary>
        /// Helper internal method - creates N number of notifications with a specific type.
        /// Used to test notification aggregation.
        /// </summary>
        public string CreateNotificationsInternal(int count, Notification.NotificationType type, string sessionID, uint gameID)
        {
            string lastNotificationId = String.Empty;

            for (int i = 0; i < count; i++)
            {
                lastNotificationId = CreateNotification(
                    type,
                    gameID,
                    sessionID,
                    4,
                    Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password),
                    Constants.TESTGAMEVARIANT);
            }

            return lastNotificationId;
        }

 
        public Notification BuildNotification(
             string userId,
             string sentTime)
        {
            return BuildNotification(Guid.NewGuid().ToString(), userId, sentTime);
        }
       
        public Notification BuildNotification(
            string sessionId,
            string userId,
            string sentTime)
        {
            return BuildNotification(sessionId, userId, sentTime, GetRandomNotificationType());
        }

        public Notification BuildNotification(
            string sessionId,
            string userId,
            string sentTime,
            Notification.NotificationType type)
        {
            return BuildNotification(type, Constants.TESTGAMEID, sessionId, 5, userId, Constants.TESTGAMEVARIANT, sentTime);
        }

        public Notification BuildFRNotification(
            string userId,
            string sentTime)
        {
            Notification notification = BuildNotification(Notification.NotificationType.FriendRequest, 0, string.Empty, 0, userId, 0, sentTime);
            UserInfo creatorInfo = new UserInfo(0);
            creatorInfo.DisplayName = "";
            creatorInfo.GamerTag = "Xbox LIVE";
            creatorInfo.EmailAddress = "ztest01@microsoft.com";
            notification.From = Notification.SerializeToString(creatorInfo);
            return notification;
        }

        public Notification BuildMessageNotification(
            string userId,
            string sentTime)
        {
            Notification notification = BuildNotification(Notification.NotificationType.Message, Constants.XBOX_LIVE_EXTRAS_TITLE_ID, string.Empty, 0, userId, 0, sentTime);
            UserInfo creatorInfo = new UserInfo(0);
            creatorInfo.DisplayName = "";
            creatorInfo.GamerTag = "Xbox LIVE";
            creatorInfo.EmailAddress = "ztest01@microsoft.com";
            notification.From = Notification.SerializeToString(creatorInfo);
            return notification;
        }

        private static Notification BuildNotification(
            Notification.NotificationType notificationType,
            UInt32 gameId,
            string sessionId,
            Int32 supportedPlatform,
            string userId,
            Int32 gameVariant,
            string sentTime)
        {
            Notification notification = null;

            //
            // First figure out which Notification class to create based on the type.
            // This switch requires manual maintenance to be sync'd with NotificationType in TestAreaBase.notificationCommon.dll
            // It uses switch rather than runtime type loading for performance reasons.
            //
            switch (notificationType)
            {
                case Notification.NotificationType.GameOver:
                    notification = new GameOverNotification();
                    break;

                case Notification.NotificationType.Invitation:
                    notification = new InvitationNotification();
                    break;

                case Notification.NotificationType.Message:
                    notification = new MessageNotification();
                    break;

                case Notification.NotificationType.Nudge:
                    notification = new NudgeNotification();
                    break;

                case Notification.NotificationType.YourTurn:
                    notification = new YourTurnNotification();
                    break;

                case Notification.NotificationType.YouWin:
                    notification = new YouWinNotification();
                    break;

                case Notification.NotificationType.YouLose:
                    notification = new YouLoseNotification();
                    break;

                case Notification.NotificationType.GameTie:
                    notification = new GameTieNotification();
                    break;

                case Notification.NotificationType.FriendRequest:
                    notification = new FriendRequestNotification();
                    break;

                default:
                    throw new NotSupportedException("Requested Notification type not found: " + notificationType);
            }

            //
            // Fill out Notification fields
            // Notification ID, SentTime, IsUserVisible, Category, Status and Type are auto-filled out by the notification constructor.
            // DeliveryTime is auto-set by the service and we don't need to pre-set that.
            // ExpirationTime will be deprecated so we're not exposing it anymore.
            //

            notification.GameId = (uint)gameId;
            notification.SessionId = sessionId;
            notification.SupportedPlatform = supportedPlatform;
            notification.UserId = userId;
            notification.Variant = (uint)gameVariant;
            UserInfo creatorInfo = new UserInfo(0);
            creatorInfo.DisplayName = "MPTestHook";
            creatorInfo.GamerTag = "MpTestHook";
            creatorInfo.EmailAddress = "ztest01@microsoft.com";
            notification.From = Notification.SerializeToString(creatorInfo);
 
            if (!string.IsNullOrEmpty(sentTime))
            {
                notification.DeliveredTime = DateTime.Parse(sentTime);
                notification.SentTime = DateTime.Parse(sentTime);
                notification.Id = string.Format("{0:D19}-{1}", (DateTime.MaxValue.Ticks - notification.SentTime.Ticks), Guid.NewGuid());
            }
            return notification;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Common\Tools\MPStress\MultiplayerThreadState.cs ===
﻿using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Text;

namespace MPStress
{

    public class MultiplayerThreadStateCollection
    {
        public List<MultiplayerThreadState> StateCollection { get; set; }
        public MultiplayerThreadStateCollection(List<MultiplayerThreadState> collection)
        {
            this.StateCollection = collection;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public class MultiplayerThreadState
    {
        public bool RecordPerformance
        {
            get;
            set;
        }

        public bool ExtractSessionId
        {
            get;
            set;
        }

        public bool ExtractNotificationId
        {
            get;
            set;
        }
        /// <summary>
        /// 
        /// </summary>
        public string RequestBody
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public string HttpMethod
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public string BaseUrl
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public int Timeout
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public string Locale
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public bool UseRandomXuid
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public string Xuid
        {
            get;
            set;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Common\Tools\MPStress\Program.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;

namespace MPStress
{
    static class Program
    {
        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new mainForm());
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Common\Tools\MultiplayerUI\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("MultiplayerUI")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
//[assembly: AssemblyCompany("Microsoft")]
//[assembly: AssemblyProduct("MultiplayerUI")]
//[assembly: AssemblyCopyright("Copyright © Microsoft 2009")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("cf8dce1c-cb0b-42aa-bfe7-3ef460950b1b")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
//[assembly: AssemblyVersion("1.0.0.0")]
//[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Common\MultiplayerCommon\TestAreaBase.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Diagnostics;
using System.Net;
using System.Xml;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Configuration;
using AsyncMultiplayer.SessionCommon;
using AsyncMultiplayer.NotificationService;
using LiveN.Test.Framework.Configuration;
using LiveN.Test.Framework.Authorization;
using LIVEN.Common.Diagnostics;
using System.Threading;
using Multiplayer.Test.Proxy;
using Leet.Core.Platforms;
using Gds.Contracts;
using System.Runtime.Serialization;
using System.IO;
using System.Web;
using System.Data.SqlClient;
using LiveN.Test.Common.Web;
using LiveN.Test.Common;
using Multiplayer.Test.UserAccounts;
using LiveN.Test.Framework;


namespace Multiplayer.Test.API
{
    /// <summary>
    /// 
    /// </summary>
    [TestClass]
    public class TestAreaBase
    {

        private TestContext testContextInstance;
        private GameSessionProxy gameSessionProxy;
        private GameStateProxy gameStateProxy;
        private static NotificationsServiceProxy nClient;
        private PushSubscriptionProxy pushSubscriptionProxy;
        public static MPTestHooksProxy testHooksClient;
        public static List<XboxLiveAccount> users;
        public static bool lockTest = false;
        public static bool failedToCreateAccounts = false;
        private static Random rnd = new Random();
        private static object rndLock = new object();
        private string npdbMachineName;
        private string testClientMachineName;
        public static bool IsNpdbSettingsTableUpdated = false;
        protected static NotificationTestCommon notificationCommon = new NotificationTestCommon();
        public static Notification.NotificationType[] nTypes = {Notification.NotificationType.Nudge,  //make sure that you have nudge before Yourturn so that it will not be consolidated. 
                                                                Notification.NotificationType.Invitation, 
                                                                Notification.NotificationType.GameOver, 
                                                                Notification.NotificationType.YouWin,
                                                                Notification.NotificationType.YouLose,
                                                                Notification.NotificationType.GameTie,
                                                                Notification.NotificationType.YourTurn};

        /// <summary>
        /// 
        /// </summary>
        static TestAreaBase()
        {
            //important... we need to init this guy to be able to successfully directly reference dev error codes/messages
            SessionServiceEvents.Initialize("Multiplayer.Test");
            NotificationEvents.Initialize("Multiplayer.Test");
            TraceEx.TraceStart("Setting up users in {0} environment", Config.EnvironmentSettings.Selected);
            if (ConfigurationManager.AppSettings["useCannedUsers"] == "false")
            {
                SetupTestUsers();
            }
            else
            {
                TraceEx.TraceStart("Loading canned users.");
                users = LoadCannedUsers();
                if (ConfigurationManager.AppSettings["lockTest"] == "true")
                    lockTest = true;
            }

            nClient = new NotificationsServiceProxy(users[0].MemberName, users[0].Password);
            testHooksClient = new MPTestHooksProxy();
        }

        /// <summary>
        /// 
        /// </summary>
        public TestAreaBase()
        {
            if (Trace.Listeners.Count > 1)
            {
                Trace.Listeners[1].Filter = Trace.Listeners[0].Filter;
                Trace.Listeners[1].IndentLevel = Trace.Listeners[0].IndentLevel;
                Trace.Listeners[1].IndentSize = Trace.Listeners[0].IndentSize;
                Trace.Listeners[1].TraceOutputOptions = Trace.Listeners[0].TraceOutputOptions;
            }
            else
                Trace.TraceWarning("Unable to configure custom trace listening.");

            if (bool.Parse(System.Configuration.ConfigurationManager.AppSettings["IgnoreServerSSLErrors"]))
                System.Net.ServicePointManager.ServerCertificateValidationCallback = (sender, certificate, chain, sslPolicyErrors) => true;

            StringBuilder trace = new StringBuilder();
            trace.AppendFormat("Running against the {0} environment.\r\n", Config.Environment.Name);
            trace.AppendFormat("\tGame Session Url:\t{0}\r\n", Config.Environment.GameSessionService);
            trace.AppendFormat("\tGame State Url:\t{0}\r\n", Config.Environment.GameStateService);
            trace.AppendFormat("\tNotifications Url:\t{0}\r\n", Config.Environment.NotificationsService);
            trace.AppendFormat("\tNotifications For Internal Url:\t{0}\r\n", Config.Environment.NotificationsServicePrivate);
            trace.AppendFormat("\tMPTestHooks url:\t{0}\r\n", Config.Environment.MPTestHooksService);
            trace.AppendFormat("\tXblob Machine/Host name:\t{0}\r\n", new Uri(Config.Environment.StsSettings.StsUrl).Host);
            Trace.TraceInformation(trace.ToString());
        }

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return this.testContextInstance;
            }
            set
            {
                this.testContextInstance = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public GameSessionProxy GameSessionProxy
        {
            get
            {
                if (this.gameSessionProxy == null)
                    this.gameSessionProxy = new GameSessionProxy();
                return this.gameSessionProxy;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public GameStateProxy GameStateProxy
        {
            get
            {
                if (this.gameStateProxy == null)
                    this.gameStateProxy = new GameStateProxy();
                return this.gameStateProxy;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public PushSubscriptionProxy PushSubscriptionProxy
        {
            get
            {
                if (this.pushSubscriptionProxy == null)
                    this.pushSubscriptionProxy = new PushSubscriptionProxy(users[0].MemberName, users[0].Password);
                return this.pushSubscriptionProxy;
            }
        }
        /// <summary>
        /// 
        /// </summary>
        public NotificationsServiceProxy NotificationsServiceProxy
        {
            get
            {
                return nClient;
            }
        }

        

        /// <summary>
        /// 
        /// </summary>
        public string NpdbMachineName
        {
            get
            {
                if (this.npdbMachineName == null)
                    this.npdbMachineName = ConfigurationManager.ConnectionStrings["lest_AsyncNotification_db"].ConnectionString.Split(';')[0].Substring(12);
                return this.npdbMachineName;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public string TestClientMachineName
        {
            get
            {
                if (this.testClientMachineName == null)
                    this.testClientMachineName = System.Net.Dns.GetHostEntry("LocalHost").HostName;
                return this.testClientMachineName;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public static Random GlobalRandom
        {
            get
            {
                //NOTE: NOT thread safe!
                return rnd;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="max"></param>
        /// <returns></returns>
        public static int GenerateRandomNumber(int max)
        {
            lock (rndLock)
            {
                return rnd.Next(max);
            }
        }
        /// <summary>
        /// 
        /// </summary>
        [TestInitialize]
        public void Start()
        {
            TraceEx.TraceStart("Starting test: {0}", this.testContextInstance.TestName);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCleanup]
        public void Finish()
        {
            TraceEx.TraceStop("Finished test: {0}", this.testContextInstance.TestName);
            if (this.testContextInstance.CurrentTestOutcome == UnitTestOutcome.Passed)
                Trace.TraceInformation("{0} Passed!", this.testContextInstance.TestName);
        }

        private static List<XboxLiveAccount> LoadCannedUsers()
        {
            List<XboxLiveAccount> accounts = new List<XboxLiveAccount>();
            foreach (PreExistingUserElement user in Config.Environment.UserSettings)
            {
                XboxLiveAccount account = new XboxLiveAccount();
                account.MemberName = user.Membername;
                account.Password = user.Password;
                accounts.Add(account);
            }
            return accounts;
        }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="expectedHttpStatus"></param>
        /// <param name="expectedErrorCode"></param>
        /// <param name="response"></param>
        public static void VerifyException(HttpStatusCode expectedHttpStatus, int expectedErrorCode, RestResponse response)
        {
            VerifyException((int)expectedHttpStatus, expectedErrorCode, response);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="expectedHttpStatus"></param>
        /// <param name="expectedErrorCode"></param>
        /// <param name="response"></param>
        public static void VerifyException(int expectedHttpStatus, int expectedErrorCode, RestResponse response)
        {
            Assert.AreEqual<int>(expectedHttpStatus, (int)response.Status, String.Format("Error validating HTTP status; expected {0}, but got {1}.", expectedHttpStatus, (int)response.Status));
            int actualErrorCode = ParseErrorCodeFromResponse(response.Body);
            Assert.AreEqual<int>(expectedErrorCode, actualErrorCode, String.Format("Error validating service error code; expected {0}, but got {1}.", expectedErrorCode, actualErrorCode));
        }

        ///<summary>
        ///
        ///<summary>
        /// <param name="expectedHttpStatus"></param>   
        /// <param name="response"></param>
        public static void VerifyException(HttpStatusCode expectedHttpStatus, RestResponse response)
        {
            VerifyException((int)expectedHttpStatus, response);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="expectedHttpStatus"></param>   
        /// <param name="response"></param>
        public static void VerifyException(int expectedHttpStatus, RestResponse response)
        {
            Assert.AreEqual<int>(expectedHttpStatus, (int)response.Status, String.Format("Error validating HTTP status; expected {0}, but got {1}.", expectedHttpStatus, (int)response.Status));
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="body"></param>
        /// <returns></returns>
        public static int ParseErrorCodeFromResponse(string body)
        {
            try
            {
                XmlDocumentEx xml = new XmlDocumentEx(body, true);
                XmlNode node = xml.SelectSingleNode("dfltns:ServiceErrorMessage/dfltns:LIVEnErrorCode", xml.NamespaceManager);
                if (node == null)
                    throw new TestFailureException("Unable to find xpath 'dfltns:ServiceErrorMessage/dfltns:LIVEnErrorCode' in response xml!");

                string errorCodeText = node.InnerText;
                int livEnExceptionEventID = (int)long.Parse(errorCodeText) & 0x0000FFFF; // Disregard the higher 16 bits of LIVEnErrorCode.
                return livEnExceptionEventID;
            }
            catch (XmlException)
            {
                throw new TestFailureException("Bug! Invalid error Xml response returned by the server!");
            }
        }


        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public static CreationData InitializeCreationData(uint gameID, int variant, int totalSeatsAvailable, int reservedSeatsAvailable, byte[] sessionParameters, InactivityWarningBehavior iwb, bool canRemoveEmptySeats, string displayName , SessionLeavePolicy leavePolicy)
        {
            // Initialize creationData
            CreationData creationData = new CreationData();
            creationData.GameID = gameID;
            creationData.Variant = variant;
            creationData.TotalSeatsAvailable = totalSeatsAvailable;
            creationData.ReservedSeatsAvailable = reservedSeatsAvailable;   //with current implementation TotalSeatsAvailable should be equal to ReservedSeatsAvailable
            creationData.SessionParameters = sessionParameters;
            creationData.InactivityWarning = iwb;
            creationData.CanRemoveEmptySeats = canRemoveEmptySeats;
            creationData.DisplayName = displayName;
            creationData.LeavePolicy = leavePolicy;

            return creationData;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public static CreationData InitializeCreationData(uint gameID, int variant, int totalSeatsAvailable, int reservedSeatsAvailable, byte[] sessionParameters, InactivityWarningBehavior iwb, bool canRemoveEmptySeats, string displayName)
        {
            return InitializeCreationData(gameID, variant, totalSeatsAvailable, reservedSeatsAvailable, sessionParameters, iwb, canRemoveEmptySeats, displayName, SessionLeavePolicy.None);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="gameID"></param>
        /// <param name="sessionID"></param>
        /// <param name="seatIndex"></param>
        /// <returns></returns>
        public static JoinData InitializeJoinData(uint gameID, string sessionID, int seatIndex)
        {
            JoinData joinData = new JoinData();
            joinData.GameID = gameID;
            joinData.SessionID = sessionID;
            joinData.SeatIndex = seatIndex;
            joinData.SeatParameters = new byte[] { 4, 5, 6 };

            return joinData;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="beforeModifySessionState"></param>
        /// <returns></returns>
        public static ModificationData InitializeModificationData(SessionState beforeModifySessionState)
        {
            // Initialize ModificationData
            ModificationData modificationData = new ModificationData();
            modificationData.CanRemoveEmptySeats = true;
            modificationData.DisplayName = "TestGameModify";
            modificationData.InactivityWarning = new InactivityWarningBehavior();
            modificationData.IsFriendsOnly = true;
            modificationData.ReservedSeatsAvailable = 10;
            modificationData.SessionParameters = new byte[] { 1, 2, 3 };
            modificationData.TotalSeatsAvailable = 10;

            return modificationData;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="creationData"></param>
        /// <param name="sessionState"></param>
        public static void AssertCreateSessionState(CreationData creationData, SessionState sessionState)
        {
            Trace.TraceInformation("Verifying expected/actual SessionState data...");
            Assert.IsNotNull(sessionState);
            Assert.IsNotNull(Convert.ToDateTime(sessionState.CreationTime.ToString("MM/dd/yyyy hh:mm:ss.ffff")), "ERROR: sessionState.CreationTime: " + sessionState.CreationTime.ToString("MM/dd/yyyy hh:mm:ss.ffff") + " timestamp should NOT be Null");
            Assert.AreEqual(creationData.GameID, sessionState.GameID, String.Format("Expected Game ID {0}, but found {1}!", creationData.GameID, sessionState.GameID));
            Assert.AreEqual(creationData.Variant, sessionState.Variant, "ERROR: VerifyStub_CreateSession(): Variant is Wrong");
            Assert.AreEqual(creationData.TotalSeatsAvailable - 1, sessionState.SeatsAvailable, "ERROR: VerifyStub_CreateSession(): SeatsAvailable is Wrong");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="beforeJoinSessionState"></param>
        /// <param name="afterJoinSessionState"></param>
        public static void AssertJoinSessionState(SessionState beforeJoinSessionState, SessionState afterJoinSessionState)
        {
            Assert.IsNotNull(afterJoinSessionState);

            Assert.IsNotNull(Convert.ToDateTime(afterJoinSessionState.CreationTime.ToString("MM/dd/yyyy hh:mm:ss.ffff")), "ERROR: afterJoinSessionState.CreationTime: " + afterJoinSessionState.CreationTime.ToString("MM/dd/yyyy hh:mm:ss.ffff") + " timestamp should NOT be Null");
            Assert.AreEqual(beforeJoinSessionState.GameID, afterJoinSessionState.GameID, "ERROR: GameID is wrong");
            Assert.AreEqual(beforeJoinSessionState.Variant, afterJoinSessionState.Variant, "ERROR: Variant is Wrong");
            Assert.AreEqual(beforeJoinSessionState.SeatsAvailable - 1, afterJoinSessionState.SeatsAvailable, "ERROR: SeatsAvailable is Wrong");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="expectedSessionState"></param>
        /// <param name="actualSessionState"></param>
        public static void AssertSessionState(SessionState expectedSessionState, SessionState actualSessionState)
        {
            Assert.IsNotNull(actualSessionState);

            Assert.AreEqual<DateTime>(expectedSessionState.CreationTime, actualSessionState.CreationTime, "ERROR: expectedSessionState.CreationTime should be equal to actualSessionState.CreationTime");
            Assert.AreEqual(expectedSessionState.GameID, actualSessionState.GameID, "ERROR: GameID is wrong");
            Assert.AreEqual(expectedSessionState.Variant, actualSessionState.Variant, "ERROR: Variant is Wrong");
            Assert.AreEqual(expectedSessionState.SeatsAvailable, actualSessionState.SeatsAvailable, "ERROR: SeatsAvailable is Wrong");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="beforeLeaveSessionState"></param>
        /// <param name="afterLeaveSessionState"></param>
        public static void AssertLeaveSessionState(SessionState beforeLeaveSessionState, SessionState afterLeaveSessionState)
        {
            Assert.IsNotNull(afterLeaveSessionState);

            Assert.IsNotNull(Convert.ToDateTime(afterLeaveSessionState.CreationTime.ToString("MM/dd/yyyy hh:mm:ss.ffff")), "ERROR: afterLeaveSessionState.CreationTime: " + afterLeaveSessionState.CreationTime.ToString("MM/dd/yyyy hh:mm:ss.ffff") + " timestamp should NOT be Null");
            Assert.AreEqual(beforeLeaveSessionState.GameID, afterLeaveSessionState.GameID, "ERROR: GameID is wrong");
            Assert.AreEqual(beforeLeaveSessionState.Variant, afterLeaveSessionState.Variant, "ERROR: Variant is Wrong");
            Assert.AreEqual(beforeLeaveSessionState.SeatsAvailable + 1, afterLeaveSessionState.SeatsAvailable, "ERROR: SeatsAvailable is Wrong");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="modificationData"></param>
        /// <param name="beforeModifySessionState"></param>
        /// <param name="afterModifySessionState"></param>
        public static void AssertModifySessionState(ModificationData modificationData, SessionState beforeModifySessionState, SessionState afterModifySessionState)
        {
            Assert.IsNotNull(afterModifySessionState);

            //modificationData.SessionParameters

            Assert.IsNotNull(Convert.ToDateTime(afterModifySessionState.CreationTime.ToString("MM/dd/yyyy hh:mm:ss.ffff")), "ERROR: afterModifySessionState.CreationTime: " + afterModifySessionState.CreationTime.ToString("MM/dd/yyyy hh:mm:ss.ffff") + " timestamp should NOT be Null");
            Assert.AreEqual(beforeModifySessionState.GameID, afterModifySessionState.GameID, "ERROR: GameID is not as Expected");
            Assert.AreEqual(beforeModifySessionState.SessionID, afterModifySessionState.SessionID, "ERROR: Variant is not as Expected");
            Assert.AreEqual(beforeModifySessionState.Variant, afterModifySessionState.Variant, "ERROR: Variant is not as Expected");

            Assert.AreEqual(modificationData.CanRemoveEmptySeats, afterModifySessionState.CanRemoveEmptySeats, "ERROR: Modified CanRemoveEmptySeats is not as Expected");
            Assert.AreEqual(modificationData.DisplayName, afterModifySessionState.DisplayName, "ERROR: Modified DisplayName is not as Expected");
            Assert.AreEqual(modificationData.InactivityWarning.Action.ToString(), afterModifySessionState.InactivityWarning.Action.ToString(), "ERROR: Modified InactivityWarningBehavior.Action is not as Expected");
            Assert.AreEqual(modificationData.InactivityWarning.Interval, afterModifySessionState.InactivityWarning.Interval, "ERROR: Modified InactivityWarningBehavior.Interval is not as Expected");
            Assert.AreEqual(modificationData.InactivityWarning.MaxNumberOfNudges, afterModifySessionState.InactivityWarning.MaxNumberOfNudges, "ERROR: Modified InactivityWarningBehavior.MaxNumberofNudges is not as Expected");
            Assert.IsTrue(modificationData.SessionParameters.SequenceEqual(afterModifySessionState.SessionParameters), "ERROR: Modified SessionParameters is not as Expected");
            Assert.AreEqual(modificationData.TotalSeatsAvailable, afterModifySessionState.SeatsAvailable, "ERROR: Modified SeatsAvailable is not as Expected");

        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="gamestate"></param>
        /// <param name="modifiableGameState"></param>
        public static void AssertGameState(ModifiableGameState expectedGameState, FullGameState actualGameState)
        {
            Trace.TraceInformation("Verifying expected/actual Game State data...");
            Assert.AreEqual<int>(expectedGameState.ActiveSeatIndex, actualGameState.GameStateInfo.ActiveSeatIndex, "ActiveSeatIndex is not as Expected");
            Assert.IsTrue(expectedGameState.GameData.SequenceEqual(actualGameState.GameData), "actual.GameData is not as expected GameData");
            Trace.TraceInformation("Successfully verified Game State data!");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="gamestate"></param>
        /// <param name="modifiableGameState"></param>
        public static void AssertFullGameStateToSessionStateGameState(SessionState expectedState, FullGameState actualGameState)
        {
            Trace.TraceInformation("Verifying expected/actual Game State data...");

            Assert.IsTrue(expectedState.SessionParameters.SequenceEqual(actualGameState.GameData), "actual.GameData is not as expected GameData");
            Assert.AreEqual(expectedState.State.ActiveSeatIndex, actualGameState.GameStateInfo.ActiveSeatIndex, "ActiveSeatIndex does not match between SessionState & GameState");
            Assert.AreEqual(expectedState.State.GameID, actualGameState.GameStateInfo.GameID, "GameID does not match between SessionState & GameState");
            Assert.AreEqual(expectedState.State.IsComplete, actualGameState.GameStateInfo.IsComplete, "IsComplete does not match between SessionState & GameState");
            Assert.AreEqual(expectedState.State.LastModified, actualGameState.GameStateInfo.LastModified, "LastModified does not match between SessionState & GameState");
            Assert.AreEqual(expectedState.State.SequenceNumber, actualGameState.GameStateInfo.SequenceNumber, "SequenceNumber does not match between SessionState & GameState");
            Assert.AreEqual(expectedState.State.SessionID, actualGameState.GameStateInfo.SessionID, "SessionID does not match between SessionState & GameState");
            Assert.AreEqual(expectedState.State.Variant, actualGameState.GameStateInfo.Variant, "Variant does not match between SessionState & GameState");

            Trace.TraceInformation("Successfully verified Game State data!");
        }

        /// <summary>
        /// Verify Notification
        /// </summary>
        /// <param name="sessionState"></param>
        /// <param name="category"></param>
        /// <param name="notificationType"></param>
        /// <param name="userVisible"></param>
        /// <param name="memberName"></param>
        /// <param name="password"></param>
        public void VerifyNotification(SessionState sessionState, Notification.NotificationCategory category, Notification.NotificationType notificationType, bool userVisible, string memberName, string password)
        {
            List<Notification> notificationList = this.NotificationsServiceProxy.GetNotifications(
                sessionState.GameID.ToString(),
                sessionState.SessionID,
                (int)category,
                String.Empty,
                1,
                notificationType.ToString(),
                true,
                memberName,
                password,
                Constants.NOTIFICATION_RETRIES,
                Constants.NOTIFICATION_SLEEP_TIME);

            Notification notification = null;
            if (notificationList.Count > 0)
            {
                notification = notificationList[0];
            }

            Assert.IsNotNull(notification, "Error: Did not find Notification.");
            Assert.AreEqual(notificationType, notification.Type, "Notification Type did not match.");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public static byte[] GenerateRandomBytes()
        {
            return GenerateRandomBytes(GlobalRandom.Next(129));
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="length"></param>
        /// <returns></returns>
        public static byte[] GenerateRandomBytes(int length)
        {
            byte[] data = new byte[length];
            GlobalRandom.NextBytes(data);
            return data;
        }

        public static GameResults GetDefaultTwoPlayerGameResult(string gameId, uint variant)
        {
            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(gameId),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 10,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = variant
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(gameId),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 10,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = variant
            };
            return gameResults;
        }

        public static void ValidateNotificationContent(Notification notification, string notificationDisplayName, string senderGamerTag, string senderDisplayName)
        {
            ValidateNotificationContent(notification, notificationDisplayName, senderGamerTag, senderDisplayName, null);
        }
        public static void ValidateNotificationContent(Notification notification, string notificationDisplayName, string senderGamerTag, string senderDisplayName, string datablob)
        {
            UserInfo uinfo = new UserInfo();
            string from = HttpUtility.HtmlDecode(notification.From);
            DataContractSerializer dcjs = new DataContractSerializer(typeof(UserInfo));
            UserInfo userInfo = (UserInfo)dcjs.ReadObject(XmlReader.Create(new StringReader(from)));
            Assert.AreEqual(senderGamerTag, userInfo.GamerTag, "Error: From is incorrect.");
            Assert.AreEqual(@"12/31/9999 11:59:59 PM", notification.ExpirationTime.ToString(), "Error: Incorrect Expiration Time in Notification");
            Assert.IsTrue(((DateTime.UtcNow.CompareTo(notification.SentTime) >= 0) && (DateTime.UtcNow.AddMinutes(-5).CompareTo(notification.SentTime) <= 0)), "Error: Incorrect Sent Time " + notification.SentTime.ToString() + " in notification as compared to now " + DateTime.UtcNow.ToString());
            Assert.AreEqual(Constants.TESTGAMEVARIANTNAME, notification.GameDisplayName, "Error: Incorrect game display name.");
            Assert.AreEqual(notificationDisplayName, notification.TypeDisplayName, "Error: Incorrect notification display name.");
            Assert.AreEqual(datablob, notification.DataBlob, "Error: Incorrect data blob content.");
            Assert.AreEqual("", notification.UserId, "Error:UserId should be empty in notifications");
            Assert.AreEqual((uint)0, notification.Variant, "Error: Unexpected variant in notification.");
            Assert.AreEqual(Notification.NotificationStatus.UnRead, notification.Status, "Error: Unexpected notification status.");
            
            if (String.IsNullOrEmpty(senderDisplayName)) // depending on the account creation, sender display name can either be empty or null.
            {
                Assert.IsTrue(String.IsNullOrEmpty(userInfo.DisplayName), "Error: Wrong sender display name. Expected it to be empty or null.");
            }
            else
            {
                Assert.AreEqual(senderDisplayName, userInfo.DisplayName, "Error: Wrong sender display name.");
            }
        }

        public Notification GetNotification(string gameId, string sessionId, string type, string userName, string Password)
        {
            List<Notification> notificationList = this.NotificationsServiceProxy.GetNotifications(
                gameId,
                sessionId,
                0,
                Constants.IGNORE_lAST_ID,
                10,
                type,
                true,
                userName,
                Password,
                Constants.NOTIFICATION_RETRIES,
                Constants.NOTIFICATION_SLEEP_TIME);
            Assert.IsNotNull(notificationList, "Error: Did not find Notification.");
            Assert.AreEqual(1, notificationList.Count, "Error: Incorrect number of notifications.");
            return notificationList[0];
        }

        public static SessionState InitSessionState(string createDateTime, bool isSessionComplete, int activeSeatIndex)
        {
            SessionState initSession = InitSessionState(createDateTime, isSessionComplete, activeSeatIndex, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            return initSession;
        }

        public static SessionState InitSessionState(string createDateTime, bool isSessionComplete, int activeSeatIndex, string userName, string password)
        {
            // Initialize InactivityWarningBehavior
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            //SessionParameters
            byte[] sessionParameters = new byte[] { 1, 2, 3 };

            // Initalize testPlayer1Identity
            string token1 = "0000" + Users.GetXuid(userName, password);
            string publicToken1 = Users.GetGamertag(userName, password);

            //Set SessionState for Session
            SessionState sessionState = new SessionState();

            sessionState.GameID = Constants.TESTGAMEID;
            sessionState.Variant = 0;
            sessionState.SessionID = Guid.NewGuid().ToString();
            sessionState.DisplayName = "TestGame";
            sessionState.SeatsAvailable = 10;
            sessionState.ReservedSeatsAvailable = 10;
            sessionState.Category = SessionType.AllReserved;
            sessionState.OwnerSeatIndex = 0;
            sessionState.SessionParameters = sessionParameters;
            sessionState.CreationTime = DateTime.Parse(createDateTime);
            sessionState.InactivityWarning = iwb;
            sessionState.IsInactivityWarningSent = false;
            sessionState.IsClosed = false;
            sessionState.CanRemoveEmptySeats = true;

            // Put in the SeatInfo for the users

            sessionState.Seats = new SeatInfo[1];

            SeatInfo seatInfo1 = new SeatInfo();
            seatInfo1.Index = 0; // Creator always sits on seat 0.
            seatInfo1.IsAI = false;
            seatInfo1.Profile = new IdentityToken(IdentityServiceType.XUID, token1, publicToken1);
            seatInfo1.Locale = "en-US";
            seatInfo1.PlatformType = PlatformType.Mobile;
            sessionState.Seats[0] = seatInfo1;

            // Create the initial game state
            sessionState.State = new GameState();
            sessionState.State.GameID = Constants.TESTGAMEID;
            sessionState.State.Variant = sessionState.Variant;
            sessionState.State.SessionID = sessionState.SessionID;
            sessionState.State.IsComplete = isSessionComplete;
            sessionState.State.LastModified = sessionState.CreationTime;
            sessionState.State.SequenceNumber = 0;
            sessionState.State.ActiveSeatIndex = activeSeatIndex;
            return sessionState;
        }
        public string GetGameIdOtherThanTitleId()
        {
            string[] differentGameIds = { Constants.ALTERNATE_TESTGAMEID.ToString(), Constants.NONMULTIPLAYER_TESTGAMEID.ToString(), "3456734", "1", "0", "3456" };
            return differentGameIds[rnd.Next(differentGameIds.Length)];
        }

        public string GetInvalidGameId()
        {
            string[] invalidGameIds = { "invalidGameId", "67578947386436525486582346523465981364589236458263456234865" };
            return invalidGameIds[rnd.Next(invalidGameIds.Length)];
        }

        public static bool BeginTest(string testType)
        {
            return testHooksClient.BeginTest(testType);
        }

        public static void LockTest()
        {
            LockTest("notification");
        }

        public static void LockTest(string testType)
        {
            if (lockTest)
            {
                for (int i = 0; i < 60; i++) //try this a number of times 
                {
                    try
                    {
                        if (BeginTest(testType))
                        {
                            return;
                        }
                        else
                        {
                            if (!failedToCreateAccounts)
                            {
                                TraceEx.TraceVerbose("There is another test running. Test is locked. Creating new users ...");
                                SetupTestUsers();
                                if (lockTest)
                                    failedToCreateAccounts = true;
                                else
                                    return;
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        TraceEx.TraceVerbose(String.Format("There was an error while trying to lock test. Exception: {0}", e.Message));
                        return;
                    }
                    Thread.Sleep(2000);
                }
                Assert.Fail("Another test is running in parallel and failed to create new accounts. Please try running the test another time.");
            }
        }

        public static void UnlockTest()
        {
            UnlockTest("notification");
        }

        public static void UnlockTest(string testType)
        {
            if (TestAreaBase.lockTest)
                try
                {
                    testHooksClient.EndTest(testType);
                }
                catch (Exception e)
                {
                    TraceEx.TraceVerbose(String.Format("There was an error while trying to unlock test. Exception: {0}", e.Message));
                }
        }

        /// <summary>
        /// FFTP- overiding NPDB settings for FFTP
        /// </summary>        
        public static bool OverideNpdbSettings()
        {
            try
            {
                //create a new connection 
                using (SqlConnection newConnect = new SqlConnection(ConfigurationManager.ConnectionStrings["lest_AsyncNotification_db"].ConnectionString + ";Asynchronous Processing=true"))
                {
                   newConnect.Open();

                   //Update the settings table
                   using (SqlCommand myCommand = new SqlCommand("UPDATE  [LIVEN_NPDB].[dbo].[t_settings]" +
                                                                "SET  [vc_value]= 0" +
                                                                "WHERE [vc_setting]='lest_SystemNudgeService_StartingDay'", newConnect))
                    {

                        IAsyncResult asyncResult = myCommand.BeginExecuteReader();
                    
                        myCommand.EndExecuteReader(asyncResult);
                    }

                   newConnect.Close();
                   
                }

                //flag to assert update is successful
                IsNpdbSettingsTableUpdated = true;
            }
            catch (Exception ex)
            {
                TraceEx.TraceStart("Error: Unable to change some of the NPDB settings");
                TraceEx.TraceStart("make sure appropriate chages has been done to NPDB settings before proceeding to run other tests");
                throw new Exception(ex.Message);
            }
            return IsNpdbSettingsTableUpdated;
        }

        private static void SetupTestUsers()
        {
            users = new List<XboxLiveAccount>();
            try
            {
                users = Users.CreateUsers(5);
                TraceEx.TraceVerbose("Successfully created all the 5 users.");
                lockTest = false;
            }
            catch (Exception e)
            {
                TraceEx.TraceVerbose("Failed to create users. " + e.Message + "--- Using canned users");
                users = LoadCannedUsers();
                if (ConfigurationManager.AppSettings["lockTest"] == "true")
                    lockTest = true;
            }
        }

        public void VerifyProfileInfo(SessionState sessionState, int seatIndex, string gamertag)
        {
            //use liveCache data when time allows
            Assert.AreEqual(gamertag, sessionState.Seats[seatIndex].DisplayName, "Dispaly name in LiveCache is not as expected");

            string avatarUrl = string.Format("avatar.{0}.xboxlive.com", Config.Environment.Name);
            if (string.Compare(Config.Environment.Name, "dev", true) == 0)
            {
                avatarUrl = string.Format("{0}:13100", new Uri(Config.Environment.StsSettings.StsUrl).Host);
            }
            else if (string.Compare(Config.Environment.Name, "testnet", true) == 0)
            {
                avatarUrl = "avatar.test.xboxlive.com";
            }

            Assert.AreEqual(string.Format("http://{0}/avatar/{1}/avatarpic-s.png", avatarUrl, gamertag),
                                    sessionState.Seats[seatIndex].DisplayPicSmallURL,
                                    true,//ignore case
                                    "Display Pic Small URL in LiveCache is not as expected");

            Assert.AreEqual(string.Format("http://{0}/avatar/{1}/avatarpic-l.png", avatarUrl, gamertag),
                                    sessionState.Seats[seatIndex].DisplayPicURL,
                                    true,   //ignore case
                                    "Display Pic  URL in LiveCache is not as expected");

        }

        public UserInfo GetUserInfo(string NotificationFrom)
        {

            UserInfo UI = new UserInfo();

            string from = HttpUtility.HtmlDecode(NotificationFrom);

            DataContractSerializer dcjs = new DataContractSerializer(typeof(UserInfo));

            UserInfo userInfo = (UserInfo)dcjs.ReadObject(XmlReader.Create(new StringReader(from)));

            return userInfo;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Common\MultiplayerCommon\Data\LocalizationTestData.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using AsyncMultiplayer.NotificationService;
using System.Xml;
using System.IO;

namespace MultiPlayer.Test.Data
{
    class LocalizationTestData
    {
        public static readonly string[] UNSUPPORTED_lOCALE = new string[] { "aa-aa", "hh-hh", "!!-!!", "AA-AA", "45-56", "??-??", "$^-*)", "7897", "?????" };
        //List of pairs of locale and expected language for localization 
        public static readonly string[,] GOOD_LOCALE = new string[,] { 
        { "cs-CZ", "cs" }, 
        { "da-DK", "da" }, 
        { "de-AT", "de" }, 
        { "de-CH", "de" }, 
        { "de-DE", "de" }, 
        { "el-GR", "el" }, 
        { "en-AU", "en" }, 
        { "en-CA", "en" }, 
        { "en-GB", "en" }, 
        { "en-HK", "en" }, 
        { "en-IE", "en" }, 
        { "en-IN", "en" }, 
        { "en-NZ", "en" }, 
        { "en-SG", "en" }, 
        { "en-US", "en" },
        { "en-ZA", "en" },
        { "es-CL", "es" },
        { "es-CO", "es" },
        { "es-ES", "es" }, 
        { "es-MX", "es" }, 
        { "fi-FI", "fi" }, 
        { "fr-BE", "fr" },
        { "fr-CA", "fr" },
        { "fr-CH", "fr" },
        { "fr-FR", "fr" },
        { "hu-HU", "hu" },
        { "it-IT", "it" },
        { "ja-JP", "ja" },
        { "ko-KR", "ko" },
        { "nl-NL", "nl" },
        { "nl-BE", "nl" },
        { "nb-NO", "nb" },
        { "pl-PL", "pl" },
        { "pt-BR", "pt" },
        { "pt-PT", "pt" },
        { "ru-RU", "ru" },
        { "sk-SK", "sk" },
        { "sv-SE", "sv" },
        { "zh-HK", "zh" },
        { "zh-TW", "zh" }};

        public static readonly string[,] AVAILABLE_GOOD_LOCALES = new string[,]
        {
            { "de-AT", "de" },
            { "de-CH", "de" },
            { "de-DE", "de" },
            { "en-AU", "en" },
            { "en-CA", "en" },
            { "en-GB", "en" },
            { "en-HK", "en" },
            { "en-IE", "en" },
            { "en-IN", "en" },
            { "en-NZ", "en" },
            { "en-SG", "en" },
            { "en-US", "en" },
            { "es-ES", "es" },
            { "es-MX", "es" },
            { "fr-BE", "fr" },
            { "fr-CA", "fr" },
            { "fr-CH", "fr" },
            { "fr-FR", "fr" }
        };


        public static readonly string[,] MIXED_LOCALE = new string[,] { { "fr-ET", "en" }, { "es-RU", "en" }, { "fr-SM", "en" }, { "es-RR", "en" }, { "it-ET", "en" }, { "fr-TT", "en" }, { "en-ET", "en" } };
        //TODO: Please review the list after fix in localization logic. (there are some missing good locales line {de, de}, and also please add some more unsupported locales...)

        public static readonly string[] LIVEAPP_SUPPORTED_LOCALE = { "en-AU", "en-CA", "en-GB", "en-HK", "en-IE", "en-IN", "en-NZ", "en-SG", "en-US", "de-AT", "de-CH", "de-DE", "es-ES", "es-MX", "fr-BE", "it-IT", "fr-CA", "fr-FR", "fr-CH", "fr-BE" };
        public static readonly string[] NON_LIVEAPP_SUPPORTED_LOCALE = { "cs-CZ", "nb-NO", "pl-PL", "pt-BR", "pt-PT", "ru-RU", "sk-SK", "sv-SE", "zh-HK", "zh-TW" };

        public static readonly string[] ALL_SUPPORTED_LOCALES = { "cs-CZ", "da-DK", "de-AT", "de-CH", "de-DE", "el-GR", "en-AU", "en-CA", "en-GB", "en-HK", "en-IE", "en-IN", "en-NZ", "en-SG", "en-US", "en-ZA",
                                                                  "es-CL", "es-CO", "es-ES", "es-MX", "fi-FI", "fr-BE", "fr-CA", "fr-CH", "fr-FR", "hu-HU", "it-IT", "it-IT", "ja-JP", "ko-KR", "nl-NL", "nl-BE",
                                                                  "nb-NO", "pl-PL", "pt-BR", "pt-PT", "ru-RU", "sk-SK", "sv-SE", "zh-HK", "zh-TW"};

        public const string DEFAULT_LOCALE = "en-US";
        public const string DEFAULT_LANGUAGE = "en";

        public const string TESTGAMEVARIANTNAME_EN = "Backgammon Hotseat";
        public const string TESTGAMEVARIANTNAME_DE = "Backgammon Hotseat (German)";
        public const string TESTGAMEVARIANTNAME_ES = "Backgammon Hotseat (Spanish)";
        public const string TESTGAMEVARIANTNAME_FR = "Backgammon Hotseat (French)";
        public const string TESTGAMEVARIANTNAME_IT = "Backgammon Hotseat (Italian)";

        public static ExpectedLocalizedEmailContent GetExpectedLocalizedContentOnEmail(string lang, string gamertag, string displayName)
        {
            ExpectedLocalizedEmailContent expectedEmailContent = new ExpectedLocalizedEmailContent();
            expectedEmailContent.frLink = "http://live.xbox.com/FriendCenter";
            switch (lang)
            {
                case "en": //english
                    expectedEmailContent.subject = gamertag + displayName + " has invited you to play " + TESTGAMEVARIANTNAME_EN;
                    expectedEmailContent.title = gamertag + displayName + " has invited you to play " + TESTGAMEVARIANTNAME_EN + ".";
                    expectedEmailContent.bodyPart1 = gamertag + displayName + " invites you to a game of " + TESTGAMEVARIANTNAME_EN + ".";
                    expectedEmailContent.bodyPart2 = "Click here to take your turn.";
                    expectedEmailContent.bodyPart3 = "You can play throughout your day from your Windows Phone or from the web (where supported).";
                    expectedEmailContent.frPart1 = gamertag + displayName + " wants to be your friend and compare scores.";
                    expectedEmailContent.frPart2 = "Click here to send a friend request.";
                    expectedEmailContent.footerPart1 = "This message has been sent by Xbox LIVE at the request of " + gamertag + displayName + ".";
                    expectedEmailContent.footerPart2 = "Click here to view your requests and communication options.";
                    expectedEmailContent.footerPart3 = "Privacy Statement";
                    expectedEmailContent.msAddressPart1 = "Microsoft, One Microsoft Way, Redmond, WA 98052";
                    expectedEmailContent.msAddressPart2 = "2010 Microsoft Corporation. All rights reserved.";
                    break;
                case "fr": //French
                    expectedEmailContent.subject = gamertag + displayName + " vous a invité à jouer à " + TESTGAMEVARIANTNAME_FR;
                    expectedEmailContent.title = gamertag + displayName + " vous a invité à jouer à " + TESTGAMEVARIANTNAME_FR + ".";
                    expectedEmailContent.bodyPart1 = gamertag + displayName + " vous invite à une partie de " + TESTGAMEVARIANTNAME_FR + ".";
                    expectedEmailContent.bodyPart2 = "Cliquez ici pour jouer votre tour.";
                    expectedEmailContent.bodyPart3 = "Vous pouvez jouer toute la journée avec votre téléphone Windows ou sur le Web (selon disponibilités).";
                    expectedEmailContent.frPart1 = gamertag + displayName + " souhaite être votre ami et comparer vos scores.";
                    expectedEmailContent.frPart2 = "Cliquez ici pour envoyer une requête d’ami.";
                    expectedEmailContent.footerPart1 = /*Ce message a été envoy��*/"par Xbox LIVE à la demande de " + gamertag + displayName + ".";
                    expectedEmailContent.footerPart2 = "Cliquez ici pour voir les requêtes et afficher vos options de communication.";
                    expectedEmailContent.footerPart3 = "Déclaration de confidentialité";
                    expectedEmailContent.msAddressPart1 = "Microsoft, One Microsoft Way, Redmond, WA 98052, États-Unis.";
                    expectedEmailContent.msAddressPart2 = "© 2010 Microsoft Corporation. Tous droits réservés.";
                    break;
                case "it": //Italian
                    expectedEmailContent.subject = gamertag + displayName + " ti ha invitato a giocare a " + TESTGAMEVARIANTNAME_IT;
                    expectedEmailContent.title = gamertag + displayName + " ti ha invitato a giocare a " + TESTGAMEVARIANTNAME_IT + ".";
                    expectedEmailContent.bodyPart1 = gamertag + displayName + " ti invita a giocare a " + TESTGAMEVARIANTNAME_IT + ".";
                    expectedEmailContent.bodyPart2 = "Fai clic qui per iniziare il tuo turno.";
                    expectedEmailContent.bodyPart3 = "Puoi giocare in qualsiasi momento dal tuo telefono Windows o dal Web (se supportato).";
                    expectedEmailContent.frPart1 = gamertag + displayName + " desidera diventare tuo amico e confrontare i punteggi.";
                    expectedEmailContent.frPart2 = "Fai clic qui per inviare una richiesta amico.";
                    expectedEmailContent.footerPart1 = "Questo messaggio è stato inviato da Xbox LIVE in seguito alla richiesta di " + gamertag + displayName + ".";
                    expectedEmailContent.footerPart2 = "Fai clic qui per visualizzare le tue richieste e le opzioni di comunicazione disponibili.";
                    expectedEmailContent.footerPart3 = "Informativa sulla privacy";
                    expectedEmailContent.msAddressPart1 = "Microsoft, One Microsoft Way, Redmond, WA 98052";
                    expectedEmailContent.msAddressPart2 = "© 2010 Microsoft Corporation. Tutti i diritti riservati.";
                    break;
                case "de": //Germany
                    expectedEmailContent.subject = gamertag + displayName + " hat Sie zum Spielen von " + TESTGAMEVARIANTNAME_DE + " eingeladen";
                    expectedEmailContent.title = gamertag + displayName + " hat Sie zum Spielen von " + TESTGAMEVARIANTNAME_DE + " eingeladen.";
                    expectedEmailContent.bodyPart1 = gamertag + displayName + " lädt Sie zum Spielen von " + TESTGAMEVARIANTNAME_DE + " ein.";
                    expectedEmailContent.bodyPart2 = "Klicken Sie hier, um an die Reihe zu kommen.";
                    expectedEmailContent.bodyPart3 = "Sie können den ganzen Tag lang von Ihrem Windows Phone oder vom Internet aus spielen (wo unterstützt). ";
                    expectedEmailContent.frPart1 = gamertag + displayName + " möchte Ihr Freund sein und Punkte vergleichen.";
                    expectedEmailContent.frPart2 = "Klicken Sie hier, um eine Freundesanfrage zu senden.";
                    expectedEmailContent.footerPart1 = "Diese Nachricht wurde von Xbox LIVE auf Wunsch von " + gamertag + displayName + " gesendet.";
                    expectedEmailContent.footerPart2 = "Klicken Sie hier, um Ihre Anfragen und Kommunikationsoptionen anzuzeigen.";
                    expectedEmailContent.footerPart3 = "Datenschutzerklärung";
                    expectedEmailContent.msAddressPart1 = "Microsoft, One Microsoft Way, Redmond, WA 98052";
                    expectedEmailContent.msAddressPart2 = /*©*/" 2010 Microsoft Corporation. Alle Rechte vorbehalten.";
                    break;
                case "es": //Spanish
                    expectedEmailContent.subject = gamertag + displayName + " te ha invitado a jugar a " + TESTGAMEVARIANTNAME_ES;
                    expectedEmailContent.title = gamertag + displayName + " te ha invitado a jugar a " + TESTGAMEVARIANTNAME_ES + ".";
                    expectedEmailContent.bodyPart1 = gamertag + displayName + " te invita a una partida de " + TESTGAMEVARIANTNAME_ES + ".";
                    expectedEmailContent.bodyPart2 = "Haz clic aquí para jugar en tu turno.";
                    expectedEmailContent.bodyPart3 = "Puedes jugar todo el día desde tu teléfono Windows o desde la web (donde sea compatible).";
                    expectedEmailContent.frPart1 = gamertag + displayName + " quiere ser tu amigo y comparar las puntuaciones.";
                    expectedEmailContent.frPart2 = "Haz clic aquí para enviar una solicitud de amigo.";
                    expectedEmailContent.footerPart1 = "Este mensaje ha sido enviado por Xbox LIVE a petición de " + gamertag + displayName + ".";
                    expectedEmailContent.footerPart2 = "Haz clic aquí para ver las opciones de solicitudes y comunicaciones.";
                    expectedEmailContent.footerPart3 = "Declaración de privacidad";
                    expectedEmailContent.msAddressPart1 = "Microsoft, One Microsoft Way, Redmond, WA 98052";
                    expectedEmailContent.msAddressPart2 = "© 2010 Microsoft Corporation. Reservados todos los derechos.";
                    break;
                default:
                    break;

            }
            return expectedEmailContent;
        }

        public static string GetLocalizedNotificationName(string lang, Notification.NotificationType type)
        {
            if (lang == "")
                return type.ToString();
            XmlDocument doc = new XmlDocument();
            doc.Load("LocalizedNotificationTypeName.xml");
            XmlNodeList x = doc.SelectNodes("//NotificationTypeDisplayName//Entry");

            foreach (XmlNode y in x)
            {

                if (y.Attributes["Type"].Value == type.ToString())
                {
                    if (y.Attributes["Locale"].Value == lang)
                    {
                        return y.Attributes["Value"].Value;
                    }
                }
            }
            return type.ToString();
        }
    }

    public class ExpectedLocalizedEmailContent
    {
        public string frLink;
        public string subject;
        public string title;
        public string bodyPart1;
        public string bodyPart2;
        public string bodyPart3;
        public string frPart1;
        public string frPart2;
        public string footerPart1;
        public string footerPart2;
        public string footerPart3;
        public string msAddressPart1;
        public string msAddressPart2;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Common\Tools\MultiplayerUI\Program.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;

namespace MultiplayerUI
{
    static class Program
    {
        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new MainForm());
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Common\MultiplayerCommon\NotificationTestCommon.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Configuration;
using AsyncMultiplayer.NotificationService;
using LiveN.Test.Framework.Configuration;
using System.Threading;
using MultiPlayer.Test.Data;
using Multiplayer.Test.Proxy;
using System.ServiceProcess;
using System.Xml;
using LiveN.Test.Common.Web;
using System.Net;
using SMTPTest;
using Multiplayer.Test.UserAccounts;
using LiveN.Test.Common;
using LiveN.Test.Framework;

namespace Multiplayer.Test.API
{
    public class NotificationTestCommon : TestAreaBase
    {
        public static bool cleanupFR = false;

        public void VerifyNotification(Notification n, string expectedNotificationId)
        {
            Assert.AreEqual(n.Id, expectedNotificationId, "Unexpected NotificationId");
        }

        /// <summary>
        /// Used for tests where the user CANNOT have any notifications preloaded
        /// </summary>
        public void CheckNotificationCount()
        {
            CheckNotificationCount(Constants.TESTGAMEID.ToString(), string.Empty, this.NotificationsServiceProxy.UserID, this.NotificationsServiceProxy.Password);
        }

        public void CheckNotificationCount(string userName, string password)
        {
            CheckNotificationCount(Constants.TESTGAMEID.ToString(), string.Empty, userName, password);
        }

        public void CheckNotificationCount(string gameId, string sessionId, string userName, string password)
        {
            CheckNotificationCount(gameId, sessionId, string.Empty, userName, password);
        }

        public void CheckNotificationCount(string gameId, string sessionId, string type, string userName, string password)
        {
            List<Notification> nList = this.NotificationsServiceProxy.GetNotifications(
                    gameId,
                    sessionId,
                    0,
                    string.Empty,
                    Int32.MaxValue,
                    type,
                    false,
                    userName,
                    password,
                    null);
            if (nList.Count == 0)
            {
                return;
            }
            else if (nList.Count > 0)
            {
                foreach (Notification n in nList)
                {
                    this.NotificationsServiceProxy.DeleteNotificationQuery(n.Id, userName, password);
                }
                Assert.AreEqual<int>(
                    0,
                    this.NotificationsServiceProxy.GetNotifications(
                        gameId,
                        sessionId,
                        0,
                        string.Empty,
                        Int32.MaxValue,
                        type,
                        false,
                        userName,
                        password,
                        null).Count,
                        "Setup failed: Expected 0 notifications loaded for this user.");
            }
        }

        public void CheckNotificationCountFR(string userName, string password)
        {
            CheckNotificationCount(string.Empty, string.Empty, Notification.NotificationType.FriendRequest.ToString(), userName, password);
        }

        public void ValidateLocalization(List<Notification> notifications, string notificationId, string loc, string lang)
        {
            Assert.IsNotNull(notifications, "ERROR : Notification is null");
            Assert.AreEqual<int>(1, notifications.Count, "ERROR: GetNotification failed to fetch notifications for " + loc + "locale.");
            VerifyNotification(notifications[0], notificationId);
            Assert.AreEqual(GetLocalizedGameDisplayName(lang), notifications[0].GameDisplayName, "Display name is not correctly localized.");
            Assert.AreEqual(LocalizationTestData.GetLocalizedNotificationName(lang, notifications[0].Type), notifications[0].TypeDisplayName, "ERROR :Notification is not localized to " + lang + "when locale = " + loc);
        }


        private string GetLocalizedGameDisplayName(string lang)
        {
            string dispName;
            switch (lang)
            {
                case "en":
                    dispName = LocalizationTestData.TESTGAMEVARIANTNAME_EN;
                    break;
                case "es":
                    dispName = LocalizationTestData.TESTGAMEVARIANTNAME_ES;
                    break;
                case "de":
                    dispName = LocalizationTestData.TESTGAMEVARIANTNAME_DE;
                    break;
                case "fr":
                    dispName = LocalizationTestData.TESTGAMEVARIANTNAME_FR;
                    break;
                case "it":
                    dispName = LocalizationTestData.TESTGAMEVARIANTNAME_IT;
                    break;
                default:
                    dispName = LocalizationTestData.TESTGAMEVARIANTNAME_EN;
                    break;
            }
            return dispName;
        }

        /// <summary>
        /// Verifies that there are no notifications of such parameters.
        /// </summary>
        /// <param name="sessionId"></param>
        /// <param name="userName"></param>
        /// <param name="password"></param>
        /// <param name="type"></param>
        public void VerifyNoNotifications(string sessionId, string userName, string password, string type)
        {
            string gameId = Constants.TESTGAMEID.ToString();
            if (string.IsNullOrEmpty(sessionId))
                gameId = string.Empty;
            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                gameId,
                sessionId.ToString(),
                0,
                Constants.IGNORE_lAST_ID,
                100,
                type,
                false,
                userName,
                password,
                null);
            Assert.IsNotNull(notifications);
            Assert.AreEqual(0, notifications.Count, "ERROR: Unexpected Number of notifications.");
        }

        /// <summary>
        /// Verifies that the notification with those parameters exists.
        /// </summary>
        /// <param name="gameId"></param>
        /// <param name="sessionId"></param>
        /// <param name="type"></param>
        /// <param name="memberName"></param>
        /// <param name="password"></param>
        public void VerifyNotificationCreated(string gameId, string sessionId, Notification.NotificationType type, string memberName, string password)
        {
            VerifyNotificationCreated(gameId, sessionId, type.ToString(), memberName, password);
        }

        public void VerifyNotificationCreated(string gameId, string sessionId, string type, string memberName, string password)
        {
            for (int x = 0; x < Constants.NOTIFICATION_RETRIES; x++)
            {
                Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME);
                List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                     gameId,
                     sessionId,
                     0,
                     Constants.IGNORE_lAST_ID,
                     100,
                     type,
                     false,
                     memberName,
                     password,
                     null);

                Assert.IsNotNull(notifications, "Notification list should not be null");
                if (notifications.Count == 1)
                {
                    return;
                }
                else if (notifications.Count > 1)
                {
                    Assert.AreEqual(1, notifications.Count, "Unexpected number of notifications found");
                }
            }
            Assert.Fail("No notification could be found");
        }

        /// <summary>
        /// Verifies that Friend Request Notification is not processed for the user.
        /// </summary>
        /// <param name="memberName"></param>
        /// <param name="password"></param>
        public void VerifyNoFRNotification(string memberName, string password)
        {
            // a triggering call to GetNotification - to put the a friend request notification on notifications queue
            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                     string.Empty,
                     string.Empty,
                     0,
                     Constants.IGNORE_lAST_ID,
                     100,
                     string.Empty,
                     false,
                     memberName,
                     password,
                     null);

            //sleep while the notification is processed 
            Thread.Sleep(Constants.NOTIFICATION_RETRIES * Constants.NOTIFICATION_SLEEP_TIME);
            VerifyNoNotifications(string.Empty, memberName, password, Notification.NotificationType.FriendRequest.ToString());
        }

        /// <summary>
        /// Helper method to create and validate a specific notification type.
        /// Does NOT do any type-specific validations
        /// </summary>
        /// <returns>A strongly-typed Notification object for the generated notification, to be used by callers to validate type-specific data members</returns>
        public Notification CreateAndValidateNotificationByType(Enum notificationType)
        {
            Notification.NotificationType type = (Notification.NotificationType)notificationType;

            string notificationId = testHooksClient.CreateNotification(
                    type,
                    Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password),
                    Constants.TESTGAMEID,
                    testHooksClient.TestSessionId);

            // Validate that we get the right type of notification
            List<Notification> notificationList = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), testHooksClient.TestSessionId, (int)testHooksClient.TestCategory, Constants.IGNORE_lAST_ID, Int32.MaxValue, String.Empty, false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, null);
            Notification match = notificationList.Find(n => n.Id == notificationId);
            Assert.AreEqual(
                match.Type, (AsyncMultiplayer.NotificationService.Notification.NotificationType)notificationType, "Notification type created does not match.");

            return match;
        }
        /// <summary>
        /// Helper internal method - creates N number of notifications with a specific type.
        /// Used to test notification aggregation.
        /// </summary>
        /// <returns>The last notification ID generated</returns>
        public string CreateNotificationsInternal(int count, Notification.NotificationType type)
        {
            return CreateNotificationsInternal(count, type, testHooksClient.TestSessionId, Constants.TESTGAMEID);
        }

        /// <summary>
        /// Helper internal method - creates N number of notifications with a specific type.
        /// Used to test notification aggregation.
        /// </summary>
        public string CreateNotificationsInternal(int count, Notification.NotificationType type, string sessionID, uint gameID)
        {
            string lastNotificationId = String.Empty;

            for (int i = 0; i < count; i++)
            {
                lastNotificationId = testHooksClient.CreateNotification(
                    type,
                    gameID,
                    sessionID,
                    4,
                    Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password),
                    Constants.TESTGAMEVARIANT);
            }

            return lastNotificationId;
        }
        /// <summary>
        /// Helper internal method - used to get the count of notifications per type in a specific notification list
        /// </summary>
        /// <param name="notifications"></param>
        /// <param name="type"></param>
        /// <returns></returns>
        public List<Notification> FilterNotificationListByType(List<Notification> notifications, Notification.NotificationType type)
        {
            List<Notification> matches = new List<Notification>();
            foreach (Notification n in notifications)
            {
                if (n.Type == type)
                {
                    matches.Add(n);
                }
            }

            return matches;
        }
        public string GetNextGamertag(ref string gamertags)
        {
            string nextGamertag = String.Empty;

            if (!String.IsNullOrEmpty(gamertags))
            {
                int nextComma = gamertags.IndexOf(",");
                if (nextComma >= 0)
                {
                    nextGamertag = gamertags.Substring(0, nextComma);
                    gamertags = gamertags.Remove(0, nextComma + 1);
                }
                else if (nextComma == -1)
                {
                    nextGamertag = gamertags;
                    gamertags = String.Empty;
                }
            }

            return nextGamertag;
        }
        /// <summary>
        /// Helper method used to validate a given Notification's state. 
        /// It does a query against the server to get the latest notification state, then compares that against the expectedState
        /// </summary>
        /// <param name="notificationId">Notification to validate</param>
        /// <param name="gameId">GameId of this Notification</param>
        /// <param name="sessionId">SessionId of this Notification</param>
        /// <param name="expectedState">Expected state to validate</param>
        public void ValidateNotificationState(string notificationId, UInt32 gameId, string sessionId, Notification.NotificationStatus expectedState, string userName, string password)
        {
            // Query for the latest state of the notification
            List<Notification> notificationList = this.NotificationsServiceProxy.GetNotifications(gameId.ToString(), sessionId, 0, Constants.IGNORE_lAST_ID, 100, String.Empty, false, userName, password, null);
            Assert.IsNotNull(notificationList, "Could not find most recently created notification. Aborting.");

            Notification newNotification = notificationList.Find(n => n.Id == notificationId);
            Assert.IsNotNull(newNotification, "Could not find generated Notification on the server");
            Notification.NotificationStatus notificationState = (Notification.NotificationStatus)newNotification.Status;

            // Compare current Notification state with expected state
            Assert.IsTrue((Notification.NotificationStatus)newNotification.Status == expectedState, "Notification state was incorrect.");
        }

        public void CleanupFRs()
        {
            if (cleanupFR)
            {
                CleanupFR();
            }
        }
        public static void CleanupFR()
        {
            TraceEx.TraceStart("Cleaning up - Deleting all pending friend requests on XBL");
            //Delete FR
            foreach (XboxLiveAccount user in TestAreaBase.users)
            {
                foreach (XboxLiveAccount target in TestAreaBase.users)
                {
                    testHooksClient.CleanupFR(ulong.Parse(Users.GetXuid(user.MemberName, user.Password)), ulong.Parse(Users.GetXuid(target.MemberName, target.Password)));
                }
            }
            Thread.Sleep(60000); //sleep for one minute to give time to FR message be in sync with XBL. 
            //verify
            foreach (XboxLiveAccount user in TestAreaBase.users)
            {
                foreach (XboxLiveAccount target in TestAreaBase.users)
                {
                    if (!VerifyNoFR(ulong.Parse(Users.GetXuid(user.MemberName, user.Password)), ulong.Parse(Users.GetXuid(target.MemberName, target.Password))))
                        TraceEx.TraceStart("Cleanup was unable to delete FR for " + Users.GetGamertag(user.MemberName, user.Password) + " from " + Users.GetGamertag(target.MemberName, target.Password));
                }
            }
            TraceEx.TraceStart("Cleaning up friend request completed");
        }

        public static void RemoveUsersFromNeverList()
        {
            TraceEx.TraceStart("Cleaning up blocked users");
            foreach (XboxLiveAccount user in TestAreaBase.users)
            {
                foreach (XboxLiveAccount target in TestAreaBase.users)
                {
                    if (testHooksClient.IsUserInTargetsNeverList(ulong.Parse(Users.GetXuid(target.MemberName, target.Password)), ulong.Parse(Users.GetXuid(user.MemberName, user.Password))))
                    {
                        testHooksClient.RemoveUserFromNeverList(ulong.Parse(Users.GetXuid(user.MemberName, user.Password)), ulong.Parse(Users.GetXuid(target.MemberName, target.Password)));
                    }
                }
            }
        }

        public void TestCleanup()
        {
            TraceEx.TraceStart("Cleaning up - Deleting all Notifications");

            foreach (XboxLiveAccount e in TestAreaBase.users)
            {
                this.NotificationsServiceProxy.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), testHooksClient.TestSessionId.ToString(), e.MemberName, e.Password);

                List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                    String.Empty,
                    String.Empty,
                    0,
                    Constants.IGNORE_lAST_ID,
                    100,
                    String.Empty,
                    false,
                    e.MemberName,
                    e.Password,
                    null);

                List<string> sessions = new List<string>();

                foreach (Notification n in notifications)
                {
                    if (sessions.Contains(n.SessionId + "-" + n.GameId))
                    {
                        continue;
                    }
                    if ((n.GameId != 0) && (!String.IsNullOrEmpty(n.SessionId))) //DeleteNotification throws an exception if sessionId null or empty. And we do not want to cleanup FR notifications as they get created again and again.
                    {
                        this.NotificationsServiceProxy.DeleteNotificationBySession(n.GameId.ToString(), n.SessionId, e.MemberName, e.Password);
                        sessions.Add(n.SessionId + '-' + n.GameId);
                    }
                }
                notifications = this.NotificationsServiceProxy.GetNotifications(
                    String.Empty,
                    String.Empty,
                    0,
                    Constants.IGNORE_lAST_ID,
                    100,
                    String.Empty,
                    false,
                    e.MemberName,
                    e.Password,
                    null);
                foreach (Notification n in notifications)
                {
                    this.NotificationsServiceProxy.DeleteNotificationQuery(n.Id, e.MemberName, e.Password);
                }
            }
        }

        public string SendInviteRequest(string sessionId, uint gameId, bool friendRequest, string recipients, int senderIndex)
        {
            InviteRequest inviteRequest = new InviteRequest();
            inviteRequest.GameId = gameId;
            inviteRequest.SessionId = sessionId;
            inviteRequest.Data = "SendInvite test data";
            inviteRequest.Recipients = recipients;
            inviteRequest.FriendRequest = friendRequest;
            this.NotificationsServiceProxy.SendInvite(inviteRequest, TestAreaBase.users[senderIndex].MemberName, TestAreaBase.users[senderIndex].Password);
            return sessionId.ToString();
        }

        public string SendInviteRequest(uint gameId, string recipients, string senderUserName, string senderPassword)
        {
            InviteRequest inviteRequest = new InviteRequest();
            inviteRequest.GameId = gameId;
            inviteRequest.SessionId = Guid.NewGuid().ToString();
            inviteRequest.Data = "SendInvite test data";
            inviteRequest.Recipients = recipients;
            inviteRequest.FriendRequest = false;
            this.NotificationsServiceProxy.SendInvite(inviteRequest, senderUserName, senderPassword);
            return inviteRequest.SessionId;
        }

        /// <summary>
        /// Sends invite from P0 to the recipients specified for the given session from the specified sender
        /// </summary>
        /// <param name="sessionId"></param>
        /// <param name="friendRequest"></param>
        /// <param name="recipients"></param>
        /// <param name="senderUserName"></param>
        /// <param name="senderPassword"></param>
        /// <returns></returns>
        public string SendInviteRequest(string sessionId, bool friendRequest, string recipients, int senderIndex)
        {
            this.SendInviteRequest(sessionId,  /*1297287394*/Constants.TESTGAMEID, friendRequest, recipients, senderIndex);
            return sessionId.ToString();
        }

        public string SendInviteRequest(string sessionId, bool friendRequest, string recipients)
        {
            return SendInviteRequest(sessionId, friendRequest, recipients, 0);
        }


        /// <summary>
        /// Creates a new session, verifies that there are no existing notifications for (the session + users), and sends invite
        /// </summary>
        /// <param name="friendRequest"></param>
        /// <param name="senderIndex">the index of the sender from the users in app.config</param>
        /// <param name="numRec"> number of recipients</param>
        /// <returns></returns>
        public string SendInviteRequest(bool friendRequest, int numRec)
        {
            string sessionId = Guid.NewGuid().ToString();
            return SendInviteRequest(sessionId, friendRequest, numRec);
        }
        public string SendInviteRequest(string sessionId, bool friendRequest, int numRec)
        {
            string gameId = Constants.TESTGAMEID.ToString(); /*"1297287394"; */
            string oldNotificationSession = sessionId;
            if (friendRequest)
            {
                oldNotificationSession = string.Empty; // if we are sending invitation with friend request = true, we need to check that we do not have prior FR notifications too. - Avoid filtering notifications by sessionID and gameID
                gameId = string.Empty;
            }
            StringBuilder recipients = new StringBuilder();
            for (int i = 1; i <= numRec; i++)
            {
                CheckNotificationCount(gameId, oldNotificationSession, TestAreaBase.users[i].MemberName, TestAreaBase.users[i].Password);
                recipients.Append(TestAreaBase.users[i].MemberName);
                recipients.Append(";");
            }
            return SendInviteRequest(sessionId, friendRequest, recipients.ToString());
        }

        public static void VerifyFriendRequest(ulong userXuid, ulong targetXuid, string message)
        {
            for (int i = 0; i < 10; i++)
            {
                if (testHooksClient.HasFR(userXuid, targetXuid))
                    return;
                else
                    Thread.Sleep(Constants.XBLFRPROCESSTIMEINSEC * 100);
            }
            Assert.Fail(message);
        }

        public static void VerifyUserIsInTargetsNeverList(ulong userXuid, ulong targetXuid, string message)
        {
            for (int i = 0; i < 10; i++)
            {
                if (testHooksClient.IsUserInTargetsNeverList(userXuid, targetXuid))
                    return;
                else
                    Thread.Sleep(Constants.XBLFRPROCESSTIMEINSEC * 100);
            }
            Assert.Fail(message);
        }

        public static void VerifyUserIsNotInTargetsNeverList(ulong userXuid, ulong targetXuid, string message)
        {
            for (int i = 0; i < 10; i++)
            {
                if (!testHooksClient.IsUserInTargetsNeverList(userXuid, targetXuid))
                    return;
                else
                    Thread.Sleep(Constants.XBLFRPROCESSTIMEINSEC * 100);
            }
            Assert.Fail(message);
        }



        public static void VerifyNoFR(ulong userXuid, ulong targetXuid, string message)
        {
            for (int i = 0; i < 10; i++)
            {
                if (!testHooksClient.HasFR(userXuid, targetXuid))
                    return;
                else
                    Thread.Sleep(Constants.XBLFRPROCESSTIMEINSEC * 100);
            }
            Assert.Fail(message);
        }

        public static bool VerifyNoFR(ulong userXuid, ulong targetXuid)
        {
            for (int i = 0; i < 10; i++)
            {
                if (!testHooksClient.HasFR(userXuid, targetXuid))
                    return true;
                else
                    Thread.Sleep(Constants.XBLFRPROCESSTIMEINSEC * 100);
            }
            return false;
        }

        public static void VerifyNotFriends(ulong userXuid, ulong targetXuid, string message)
        {
            for (int i = 0; i < 10; i++)
            {
                if (!testHooksClient.AreFriends(userXuid, targetXuid))
                    return;
                else
                    Thread.Sleep(Constants.XBLFRPROCESSTIMEINSEC * 100);
            }
            Assert.Fail(message);
        }

        public static void VerifyFriends(ulong userXuid, ulong targetXuid, string message)
        {
            for (int i = 0; i < 10; i++)
            {
                if (testHooksClient.AreFriends(userXuid, targetXuid))
                    return;
                else
                    Thread.Sleep(Constants.XBLFRPROCESSTIMEINSEC * 100);
            }
            Assert.Fail(message);
        }

        public static void StopService(string machineName, string serviceName)
        {
            ServiceController controller = new ServiceController();

            controller.MachineName = machineName;
            controller.ServiceName = serviceName;
            ServiceControllerStatus status = controller.Status;

            if (status == ServiceControllerStatus.Running)
            {
                controller.Stop();
            }

            controller.WaitForStatus(ServiceControllerStatus.Stopped);

            status = controller.Status;
        }

        public static void StartService(string machineName, string serviceName)
        {
            ServiceController controller = new ServiceController();

            controller.MachineName = machineName;
            controller.ServiceName = serviceName;
            ServiceControllerStatus status = controller.Status;

            if (status == ServiceControllerStatus.Stopped)
            {
                controller.Start();
            }

            controller.WaitForStatus(ServiceControllerStatus.Running);

            status = controller.Status;
        }

        public static string Base64Decode(string data)
        {
            if (String.IsNullOrEmpty(data))
            {
                throw new ArgumentNullException(data, "Error in Base64Decode: input parameter data is Null or Empty.");
            }

            System.Text.UTF8Encoding encoder = new System.Text.UTF8Encoding();
            System.Text.Decoder utf8Decode = encoder.GetDecoder();
            byte[] todecode_byte;

            try
            {
                todecode_byte = Convert.FromBase64String(data);
            }
            catch (FormatException formatEx)
            {
                throw new FormatException("Error in Base64Decode: " + formatEx.Message);
            }

            int charCount = utf8Decode.GetCharCount(todecode_byte, 0, todecode_byte.Length);
            char[] decoded_char = new char[charCount];
            utf8Decode.GetChars(todecode_byte, 0, todecode_byte.Length, decoded_char, 0);
            string decodedData = new String(decoded_char);
            return decodedData;
        }

        public static void ValidateEmail(string emailSubject, string emailBody, ExpectedLocalizedEmailContent expectedLocalizedEmailContent, string locale, string gamertag, string sessionId)
        {
            ValidateEmail(emailSubject, emailBody, expectedLocalizedEmailContent, locale, gamertag, false, sessionId);
        }

        public static void ValidateEmail(string emailSubject, string emailBody, ExpectedLocalizedEmailContent expectedLocalizedEmailContent, string locale, string gamertag, bool friendRequest, string sessionId)
        {
            ValidateEmail(emailSubject, emailBody, expectedLocalizedEmailContent, locale, gamertag, friendRequest, sessionId, false);
        }

        public static void ValidateEmail(string emailSubject, string emailBody, ExpectedLocalizedEmailContent expectedLocalizedEmailContent, string locale, string gamertag, bool friendRequest, string sessionId, bool IsInternalTest)
        {
            string subject = emailSubject;
            TraceEx.TraceStart("The subject of the email is : " + subject);
            TraceEx.TraceStart("The body of the email is : " + emailBody);
            string title = emailBody.Substring(emailBody.IndexOf(gamertag), (emailBody.IndexOf("</title></head><body>") - 19));
            Assert.AreEqual(expectedLocalizedEmailContent.subject, subject, "Subject of email is not localized correctly when locale = " + locale);
            Assert.AreEqual(expectedLocalizedEmailContent.title, title, "Body of email is not localized correctly when locale = " + locale);
            Assert.IsTrue(emailBody.Contains(expectedLocalizedEmailContent.bodyPart1), @"body is incorrect\missing in email when locale = " + locale + ". Expected " + expectedLocalizedEmailContent.bodyPart1 + " in the email.");
            Assert.IsTrue(emailBody.Contains(expectedLocalizedEmailContent.bodyPart2), @"body is incorrect\missing in email when locale = " + locale + ". Expected " + expectedLocalizedEmailContent.bodyPart2 + " in the email.");
            Assert.IsTrue(emailBody.Contains(expectedLocalizedEmailContent.bodyPart3), @"body is incorrect\missing in email when locale = " + locale + ". Expected " + expectedLocalizedEmailContent.bodyPart3 + " in the email.");
            Assert.IsTrue(emailBody.Contains(expectedLocalizedEmailContent.footerPart1), @"footer is incorrect\missing in email when locale = " + locale + ". Expected " + expectedLocalizedEmailContent.footerPart1 + " in the email.");
            Assert.IsTrue(emailBody.Contains(expectedLocalizedEmailContent.footerPart2), @"footer is incorrect\missing in email when locale = " + locale + ". Expected " + expectedLocalizedEmailContent.footerPart2 + " in the email.");
            Assert.IsTrue(emailBody.Contains(expectedLocalizedEmailContent.footerPart3), @"footer is incorrect\missing in email when locale = " + locale + ". Expected " + expectedLocalizedEmailContent.footerPart3 + " in the email.");
            Assert.IsTrue(emailBody.Contains(expectedLocalizedEmailContent.msAddressPart1), @"Address is incorrect\missing in email when locale = " + locale + ". Expected " + expectedLocalizedEmailContent.msAddressPart1 + " in the email.");
            Assert.IsTrue(emailBody.Contains(expectedLocalizedEmailContent.msAddressPart2), @"Address is incorrect\missing in email when locale = " + locale + ". Expected " + expectedLocalizedEmailContent.msAddressPart2 + " in the email.");

            if (friendRequest)
            {
                Assert.IsTrue(emailBody.Contains(expectedLocalizedEmailContent.frPart1), "Missing FR related content. Expected " + expectedLocalizedEmailContent.frPart1);
                Assert.IsTrue(emailBody.Contains(expectedLocalizedEmailContent.frPart2), "Missing FR related content. Expected " + expectedLocalizedEmailContent.frPart1);
                Assert.IsTrue(emailBody.Contains(expectedLocalizedEmailContent.frLink), "Missing FR link. Expected " + expectedLocalizedEmailContent.frLink);
            }

            string expectedEmail;
            using (System.IO.StreamReader sr = System.IO.File.OpenText("NonLocalizableEmailHtml.txt"))
            {
                while ((expectedEmail = sr.ReadLine()) != null)
                {
                    Assert.IsTrue(emailBody.Contains(expectedEmail), "Something is different on the email overall look. Please send an email to yourself and verify. Expected something like ---- " + expectedEmail + " --- in the email."); ;
                }
            }

            //  TODO: Add logic to verify the rest of the email content --- images, ...
            Assert.IsTrue(emailBody.Contains("http://zone.msn.com/images/v9/en-us/game/test/AppTesting/AppIconBackgammon_32x32.png"), "Missing the game icon.");
            if (!IsInternalTest)
            {
                string clickHereLink = string.Format("http://redirect.dev.xboxlive.com/s/{0}/{1}/", Constants.TESTGAMEID, sessionId);
                Assert.IsTrue(emailBody.Contains(clickHereLink), "Missing the 'click here to take your turn' link as " + clickHereLink);
            }
        }

        public static string GetErrorMessageFromResponse(string body)
        {
            try
            {
                XmlDocumentEx xml = new XmlDocumentEx(body, true);
                XmlNode node = xml.SelectSingleNode("dfltns:ServiceErrorMessage/dfltns:ErrorMessage", xml.NamespaceManager);
                if (node == null)
                    throw new TestFailureException("Unable to find xpath 'dfltns:ServiceErrorMessage/dfltns:ErrorMessage' in response xml!");

                return node.InnerText;
            }
            catch (XmlException)
            {
                throw new TestFailureException("Bug! Invalid error Xml response returned by the server!");
            }
        }


        public static void VerifyException(HttpStatusCode expectedHttpStatus, string expectedErrorMessage, RestResponse response)
        {
            Assert.AreEqual<HttpStatusCode>(expectedHttpStatus, response.Status, "Error validating HTTP response status");
            Assert.AreEqual<string>(expectedErrorMessage, GetErrorMessageFromResponse(response.Body), "Error validating service error message");
        }



        public static SMTPListenerWrapper StartListening(int numberOfEmails)
        {
            Thread.Sleep(Constants.NOTIFICATION_RETRIES * Constants.NOTIFICATION_SLEEP_TIME); //this is required because there might be other invite requests being processed in the queue before the test that makes this call.
            Console.WriteLine("Main Thread: starting listener");
            SMTPListenerWrapper listener = new SMTPListenerWrapper(numberOfEmails);
            listener.Init();
            return listener;
        }

        public static SMTPListenerWrapper StartListening()
        {
            return StartListening(1);
        }

        public static email GetMailAndStopListening(SMTPListenerWrapper listener)
        {
            List<email> emails = GetMailsAndStopListening(listener);
            Assert.IsNotNull(emails, "Error: email should not be null.");
            Assert.AreEqual(1, emails.Count, "Error: wrong number of emails.");
            return emails[0];
        }

        public static List<email> GetMailsAndStopListening(SMTPListenerWrapper listener)
        {
            return GetMailsAndStopListening(listener, 1);
        }

        public static List<email> GetMailsAndStopListening(SMTPListenerWrapper listener, int numberOfEmails)
        {
            email inviteEmail = new email();
            List<email> inviteEmails = new List<email>();
            List<string> recMails = listener.WaitForMail(numberOfEmails * 30000);
            foreach (string recMail in recMails)
            {
                inviteEmail = new email();
                string[] mailLines = recMail.Split(new string[] { Environment.NewLine }, StringSplitOptions.None);
                Array.ForEach(mailLines, x => Console.WriteLine(x));
                inviteEmail.To = mailLines[5].Split(new string[] { "To: " }, StringSplitOptions.RemoveEmptyEntries)[0];
                inviteEmail.Subject = mailLines[7].Split(new string[] { "Subject: " }, StringSplitOptions.RemoveEmptyEntries)[0];
                inviteEmail.Body = "";
                for (int i = 10; i < mailLines.Length; i++)
                    inviteEmail.Body = inviteEmail.Body + mailLines[i];
                inviteEmails.Add(inviteEmail);
            }
            listener.Stop();
            return inviteEmails;
        }

        public static void VerifyNoUnreadMessage(ulong userXuid, string errorMessage)
        {
            for (int i = 0; i < 10; i++)
            {
                if (!testHooksClient.HasUnreadMessages(userXuid))
                    return;
                else
                    Thread.Sleep(Constants.XBLFRPROCESSTIMEINSEC * 100);
            }
            Assert.Fail(errorMessage);
        }

        public static void VerifyUnreadMessages(ulong userXuid, string errorMessage)
        {
            for (int i = 0; i < 10; i++)
            {
                if (testHooksClient.HasUnreadMessages(userXuid))
                    return;
                else
                    Thread.Sleep(Constants.XBLFRPROCESSTIMEINSEC * 100);
            }
            Assert.Fail(errorMessage);
        }

        public void VerifyMessageNotificationIsCreated(string memberName, string password)
        {
            for (int i = 0; i < Constants.NOTIFICATION_RETRIES; i++)
            {
                Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME);

                List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                     string.Empty,
                     string.Empty,
                     0,
                     Constants.IGNORE_lAST_ID,
                     100,
                     Notification.NotificationType.Message.ToString(),
                     false,
                     memberName,
                     password,
                     null);
                Assert.IsNotNull(notifications, "Notification list should not be null");
                if (notifications.Count == 1)
                {
                    return;
                }
                else if (notifications.Count > 1)
                {
                    Assert.AreEqual(1, notifications.Count, "Unexpected number of message notifications found");
                }
            }
            Assert.Fail("No Message notification could be found");
        }

        public void MakeATriggeringCallToPutRequestOnBackEnd(string username, string password)
        {
            this.NotificationsServiceProxy.GetNotifications(
                string.Empty,
                string.Empty,
                0,
                Constants.IGNORE_lAST_ID,
                100,
                string.Empty,
                false,
                username,
                password,
                null);
        }

        public static void CleanupMessages()
        {
            TraceEx.TraceStart("Cleaning up - Deleting all unread messages.");
            foreach (XboxLiveAccount user in TestAreaBase.users)
            {
                testHooksClient.DeleteAllUnreadMessages(ulong.Parse(Users.GetXuid(user.MemberName, user.Password)));
            }
            //try to verif 
            foreach (XboxLiveAccount user in TestAreaBase.users)
            {
                try
                {
                    VerifyNoUnreadMessage(ulong.Parse(Users.GetXuid(user.MemberName, user.Password)), "Failed to delete message while cleaning up.");
                }
                catch (Exception e)
                {
                    TraceEx.TraceStart("Error happened while verifying message cleanup for  -- " + user.MemberName + ". " + e.Message);
                }
            }
            TraceEx.TraceStart("Finished message cleanup.");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Common\Tools\MPStress\MainForm.cs ===
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Net;
using System.Windows.Forms;
using System.Diagnostics;
using System.Xml.Linq;
using System.Security.Cryptography;

namespace MPStress
{
    /// <summary>
    /// 
    /// </summary>
    public partial class mainForm : Form
    {
        private static bool quit;
        private static int calls;
        private static int totalCalls;
        private static int succeeded;
        private static int failed;
        private static int timeouts;
        private static ulong latencyTotal;
        private static int tpsSampleCount;

        private System.Threading.Timer timer;
        private Queue<Thread> workerThreads;

        private const string XUID_PLACEHOLDER = "{XUID}";
        private const string partnerTokenDefault = "<?xml version=\"1.0\" encoding=\"utf-16\"?><saml:Assertion MajorVersion=\"1\" MinorVersion=\"1\" AssertionID=\"SamlSecurityToken-78949cc1-b489-474a-a16e-580eb4105280\" Issuer=\"http://sts.xboxlive.com\" IssueInstant=\"2010-04-21T18:55:12.270Z\" xmlns:saml=\"urn:oasis:names:tc:SAML:1.0:assertion\"><saml:Conditions NotBefore=\"2010-04-21T18:55:12.270Z\" NotOnOrAfter=\"2010-04-21T22:55:12.254Z\"></saml:Conditions><saml:AttributeStatement><saml:Subject><saml:NameIdentifier Format=\"/xboxlive/nameFormat\" NameQualifier=\"Microsoft-NameQualifier-domain\">XboxLive Partner security ticket</saml:NameIdentifier></saml:Subject><saml:Attribute AttributeName=\"PlatformType\" AttributeNamespace=\"http://xboxlive.com/claims\"><saml:AttributeValue>15</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=\"MachineID\" AttributeNamespace=\"http://xboxlive.com/claims\"><saml:AttributeValue>18158543855591058837</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=\"DeviceID\" AttributeNamespace=\"http://xboxlive.com/claims\"><saml:AttributeValue>7D1DFFCEAA9C39374813DBDD473D49DF6DA1FF00</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=\"ClientVersion\" AttributeNamespace=\"http://xboxlive.com/claims\"><saml:AttributeValue>1</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=\"TitleID\" AttributeNamespace=\"http://xboxlive.com/claims\"><saml:AttributeValue>4D5308E2</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=\"TitleVersion\" AttributeNamespace=\"http://xboxlive.com/claims\"><saml:AttributeValue>1</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=\"Puid0\" AttributeNamespace=\"http://xboxlive.com/claims\"><saml:AttributeValue>985160354119684</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=\"CID0\" AttributeNamespace=\"http://xboxlive.com/claims\"><saml:AttributeValue>10877358472251249868</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=\"PartnerID0\" AttributeNamespace=\"http://xboxlive.com/claims\"><saml:AttributeValue>" + XUID_PLACEHOLDER + " </saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=\"Gamertag0\" AttributeNamespace=\"http://xboxlive.com/claims\"><saml:AttributeValue>LL430ua15ie26</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=\"Tier0\" AttributeNamespace=\"http://xboxlive.com/claims\"><saml:AttributeValue>6</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=\"Country0\" AttributeNamespace=\"http://xboxlive.com/claims\"><saml:AttributeValue>103</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=\"Privileges0\" AttributeNamespace=\"http://xboxlive.com/claims\"><saml:AttributeValue>220,223,224,226,227,228,229,230,231,234,237,238,240,242,243,244,245,246,247,248,249,250,251,252,253,254,255</saml:AttributeValue></saml:Attribute></saml:AttributeStatement><Signature xmlns=\"http://www.w3.org/2000/09/xmldsig#\"><SignedInfo><CanonicalizationMethod Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\"></CanonicalizationMethod><SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\"></SignatureMethod><Reference URI=\"#SamlSecurityToken-78949cc1-b489-474a-a16e-580eb4105280\"><Transforms><Transform Algorithm=\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\"></Transform><Transform Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\"></Transform></Transforms><DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\"></DigestMethod><DigestValue>1UlncW+k7i/jk+t88/AB3/STJS0=</DigestValue></Reference></SignedInfo><SignatureValue>HM/T/OsmlmI77Qhu/2J8Ac6/q6zD/iN59jgGx9JKP4vE3BUjWZNJWzLImDKbqqqkTvVjmuJgVDCdJlFovtZJgLQyTdAjrbyEteFgZdtlp02tZjDImLP01A8Ulo+3TH7AeReXrkJlYW6hcOR6O9TAojoLv4233ZgfJmutsEZiOezvOHUe4uwS0EO4vVByRnFxJf7AWFq66AmbN5V3Dp/3FK14iUeVQ2OkvUqBLwyma426vkiUfDswcBYAVUHTlvPZZ+96/5qTF3fz1l8ecaivp0iYUgp1nppLaS+dl5WDhPtl6Z7zDIB+wb/iJ+yxHemXgTbgge1DgY93jIUj4x1AFw==</SignatureValue><KeyInfo><X509Data><X509Certificate>MIIGdjCCBV6gAwIBAgIKaus+gwAFAAExNzANBgkqhkiG9w0BAQUFADCBizETMBEGCgmSJomT8ixkARkWA2NvbTEZMBcGCgmSJomT8ixkARkWCW1pY3Jvc29mdDEUMBIGCgmSJomT8ixkARkWBGNvcnAxFzAVBgoJkiaJk/IsZAEZFgdyZWRtb25kMSowKAYDVQQDEyFNaWNyb3NvZnQgU2VjdXJlIFNlcnZlciBBdXRob3JpdHkwHhcNMDkwNzIwMjIzMzUzWhcNMTAwNzIwMjIzMzUzWjB0MQswCQYDVQQGEwJVUzELMAkGA1UECBMCV0ExEDAOBgNVBAcTB1JlZG1vbmQxEjAQBgNVBAoTCU1pY3Jvc29mdDESMBAGA1UECxMJWGJveCBMaXZlMR4wHAYDVQQDExVzdHMudGVzdC54Ym94bGl2ZS5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCo0JkOVgSJPAJEBI9CQfi7kA2k2Tzha0eQQPuDMoQLhOQ6D1JmdfOjpc20ZUkhlw3J/JQ8asrYJfbVm1DVxE3tggP3CfZDu17nWG+IwWr4GtrekVPaSumIks7oCTBUWUSy3LXN7sBrLpWhjO+u6SVcx4/EfSVfcn9tXzBADnkZT7Tg9YyRnXxM/Lbp3WKGRFgAHwkeyULhzkW01RSyRJjvYDGQmyS5Nrvshf+UlDTiAegFd87y87uMFCxRGzOIw/FEifHpl0zDQa7t/09KYIjF54CLPna5+TrutxuvIqvLTVbtxmQKLS+vCMlGd/9zvjVR/v5w3F4hSMF9OmIHQXifAgMBAAGjggLwMIIC7DALBgNVHQ8EBAMCBLAwRAYJKoZIhvcNAQkPBDcwNTAOBggqhkiG9w0DAgICAIAwDgYIKoZIhvcNAwQCAgCAMAcGBSsOAwIHMAoGCCqGSIb3DQMHMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEFBQcDATAdBgNVHQ4EFgQUyMXx5f+44yhMQ6LbnebvHs7k6nMwHwYDVR0jBBgwFoAUFFXEOeA9LtFVLkiWsNh+FCIGk7wwggEKBgNVHR8EggEBMIH+MIH7oIH4oIH1hlhodHRwOi8vbXNjcmwubWljcm9zb2Z0LmNvbS9wa2kvbXNjb3JwL2NybC9NaWNyb3NvZnQlMjBTZWN1cmUlMjBTZXJ2ZXIlMjBBdXRob3JpdHkoNSkuY3JshlZodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL21zY29ycC9jcmwvTWljcm9zb2Z0JTIwU2VjdXJlJTIwU2VydmVyJTIwQXV0aG9yaXR5KDUpLmNybIZBaHR0cDovL2NvcnBwa2kvY3JsL01pY3Jvc29mdCUyMFNlY3VyZSUyMFNlcnZlciUyMEF1dGhvcml0eSg1KS5jcmwwgb8GCCsGAQUFBwEBBIGyMIGvMF4GCCsGAQUFBzAChlJodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpL21zY29ycC9NaWNyb3NvZnQlMjBTZWN1cmUlMjBTZXJ2ZXIlMjBBdXRob3JpdHkoNSkuY3J0ME0GCCsGAQUFBzAChkFodHRwOi8vY29ycHBraS9haWEvTWljcm9zb2Z0JTIwU2VjdXJlJTIwU2VydmVyJTIwQXV0aG9yaXR5KDUpLmNydDA/BgkrBgEEAYI3FQcEMjAwBigrBgEEAYI3FQiDz4lNrfIChaGfDIL6yn2B4ft0gU+Dwu2FCI6p0oVjAgFkAgEGMCcGCSsGAQQBgjcVCgQaMBgwCgYIKwYBBQUHAwIwCgYIKwYBBQUHAwEwDQYJKoZIhvcNAQEFBQADggEBAHueQfJCg4CjE4DD6gaQcbIdoyid+25U2X6SXnkzGktZv9eAI3lU8syYKRewb7buJALGQYkc8Xi9RNbQ32vUwXhh/gog/1nSnFJqPW5ry5350TZTSCkMEzPkit04IDsiN34NG9z821NrkWOXuhJzkuW5ZR9rmyPjD/sw3EMmeXVFk1tgLw9ggekPIxTymxUnEBadBMIhMBha9xA1MbHcYwHHH2AEHwUaEbpSg1SUcqSOaXESKwDm3Etf176juBKev/ghUiTU3dIXGvF/VzZFWyk0NlFLUA2EEbBmaIizHfc18/MQH4V6RXwSPgIXmKAKcNb0a6pv+MCXSB8nq5FDwpw=</X509Certificate></X509Data></KeyInfo></Signature></saml:Assertion>";
        private const string userTokenDefault = "<?xml version=\"1.0\" encoding=\"utf-16\"?><saml:Assertion MajorVersion=\"1\" MinorVersion=\"1\" AssertionID=\"SamlSecurityToken-78949cc1-b489-474a-a16e-580eb4105280\" Issuer=\"http://sts.xboxlive.com\" IssueInstant=\"2010-04-21T18:55:12.270Z\" xmlns:saml=\"urn:oasis:names:tc:SAML:1.0:assertion\"><saml:Conditions NotBefore=\"2010-04-21T18:55:12.270Z\" NotOnOrAfter=\"2010-04-21T22:55:12.254Z\"></saml:Conditions><saml:AttributeStatement><saml:Subject><saml:NameIdentifier Format=\"/xboxlive/nameFormat\" NameQualifier=\"Microsoft-NameQualifier-domain\">XboxLive User security ticket</saml:NameIdentifier></saml:Subject><saml:Attribute AttributeName=\"PlatformType\" AttributeNamespace=\"http://xboxlive.com/claims\"><saml:AttributeValue>15</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=\"MachineID\" AttributeNamespace=\"http://xboxlive.com/claims\"><saml:AttributeValue>18158543855591058837</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=\"DeviceID\" AttributeNamespace=\"http://xboxlive.com/claims\"><saml:AttributeValue>7D1DFFCEAA9C39374813DBDD473D49DF6DA1FF00</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=\"ClientVersion\" AttributeNamespace=\"http://xboxlive.com/claims\"><saml:AttributeValue>1</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=\"TitleID\" AttributeNamespace=\"http://xboxlive.com/claims\"><saml:AttributeValue>4D5308E2</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=\"TitleVersion\" AttributeNamespace=\"http://xboxlive.com/claims\"><saml:AttributeValue>1</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=\"Puid0\" AttributeNamespace=\"http://xboxlive.com/claims\"><saml:AttributeValue>985160354119684</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=\"CID0\" AttributeNamespace=\"http://xboxlive.com/claims\"><saml:AttributeValue>10877358472251249868</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=\"Xuid0\" AttributeNamespace=\"http://xboxlive.com/claims\"><saml:AttributeValue>" + XUID_PLACEHOLDER + " </saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=\"Gamertag0\" AttributeNamespace=\"http://xboxlive.com/claims\"><saml:AttributeValue>LL430ua15ie26</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=\"Tier0\" AttributeNamespace=\"http://xboxlive.com/claims\"><saml:AttributeValue>6</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=\"Country0\" AttributeNamespace=\"http://xboxlive.com/claims\"><saml:AttributeValue>103</saml:AttributeValue></saml:Attribute><saml:Attribute AttributeName=\"Privileges0\" AttributeNamespace=\"http://xboxlive.com/claims\"><saml:AttributeValue>220,223,224,226,227,228,229,230,231,234,237,238,240,242,243,244,245,246,247,248,249,250,251,252,253,254,255</saml:AttributeValue></saml:Attribute></saml:AttributeStatement><Signature xmlns=\"http://www.w3.org/2000/09/xmldsig#\"><SignedInfo><CanonicalizationMethod Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\"></CanonicalizationMethod><SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\"></SignatureMethod><Reference URI=\"#SamlSecurityToken-78949cc1-b489-474a-a16e-580eb4105280\"><Transforms><Transform Algorithm=\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\"></Transform><Transform Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\"></Transform></Transforms><DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\"></DigestMethod><DigestValue>1UlncW+k7i/jk+t88/AB3/STJS0=</DigestValue></Reference></SignedInfo><SignatureValue>HM/T/OsmlmI77Qhu/2J8Ac6/q6zD/iN59jgGx9JKP4vE3BUjWZNJWzLImDKbqqqkTvVjmuJgVDCdJlFovtZJgLQyTdAjrbyEteFgZdtlp02tZjDImLP01A8Ulo+3TH7AeReXrkJlYW6hcOR6O9TAojoLv4233ZgfJmutsEZiOezvOHUe4uwS0EO4vVByRnFxJf7AWFq66AmbN5V3Dp/3FK14iUeVQ2OkvUqBLwyma426vkiUfDswcBYAVUHTlvPZZ+96/5qTF3fz1l8ecaivp0iYUgp1nppLaS+dl5WDhPtl6Z7zDIB+wb/iJ+yxHemXgTbgge1DgY93jIUj4x1AFw==</SignatureValue><KeyInfo><X509Data><X509Certificate>MIIGdjCCBV6gAwIBAgIKaus+gwAFAAExNzANBgkqhkiG9w0BAQUFADCBizETMBEGCgmSJomT8ixkARkWA2NvbTEZMBcGCgmSJomT8ixkARkWCW1pY3Jvc29mdDEUMBIGCgmSJomT8ixkARkWBGNvcnAxFzAVBgoJkiaJk/IsZAEZFgdyZWRtb25kMSowKAYDVQQDEyFNaWNyb3NvZnQgU2VjdXJlIFNlcnZlciBBdXRob3JpdHkwHhcNMDkwNzIwMjIzMzUzWhcNMTAwNzIwMjIzMzUzWjB0MQswCQYDVQQGEwJVUzELMAkGA1UECBMCV0ExEDAOBgNVBAcTB1JlZG1vbmQxEjAQBgNVBAoTCU1pY3Jvc29mdDESMBAGA1UECxMJWGJveCBMaXZlMR4wHAYDVQQDExVzdHMudGVzdC54Ym94bGl2ZS5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCo0JkOVgSJPAJEBI9CQfi7kA2k2Tzha0eQQPuDMoQLhOQ6D1JmdfOjpc20ZUkhlw3J/JQ8asrYJfbVm1DVxE3tggP3CfZDu17nWG+IwWr4GtrekVPaSumIks7oCTBUWUSy3LXN7sBrLpWhjO+u6SVcx4/EfSVfcn9tXzBADnkZT7Tg9YyRnXxM/Lbp3WKGRFgAHwkeyULhzkW01RSyRJjvYDGQmyS5Nrvshf+UlDTiAegFd87y87uMFCxRGzOIw/FEifHpl0zDQa7t/09KYIjF54CLPna5+TrutxuvIqvLTVbtxmQKLS+vCMlGd/9zvjVR/v5w3F4hSMF9OmIHQXifAgMBAAGjggLwMIIC7DALBgNVHQ8EBAMCBLAwRAYJKoZIhvcNAQkPBDcwNTAOBggqhkiG9w0DAgICAIAwDgYIKoZIhvcNAwQCAgCAMAcGBSsOAwIHMAoGCCqGSIb3DQMHMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEFBQcDATAdBgNVHQ4EFgQUyMXx5f+44yhMQ6LbnebvHs7k6nMwHwYDVR0jBBgwFoAUFFXEOeA9LtFVLkiWsNh+FCIGk7wwggEKBgNVHR8EggEBMIH+MIH7oIH4oIH1hlhodHRwOi8vbXNjcmwubWljcm9zb2Z0LmNvbS9wa2kvbXNjb3JwL2NybC9NaWNyb3NvZnQlMjBTZWN1cmUlMjBTZXJ2ZXIlMjBBdXRob3JpdHkoNSkuY3JshlZodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL21zY29ycC9jcmwvTWljcm9zb2Z0JTIwU2VjdXJlJTIwU2VydmVyJTIwQXV0aG9yaXR5KDUpLmNybIZBaHR0cDovL2NvcnBwa2kvY3JsL01pY3Jvc29mdCUyMFNlY3VyZSUyMFNlcnZlciUyMEF1dGhvcml0eSg1KS5jcmwwgb8GCCsGAQUFBwEBBIGyMIGvMF4GCCsGAQUFBzAChlJodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpL21zY29ycC9NaWNyb3NvZnQlMjBTZWN1cmUlMjBTZXJ2ZXIlMjBBdXRob3JpdHkoNSkuY3J0ME0GCCsGAQUFBzAChkFodHRwOi8vY29ycHBraS9haWEvTWljcm9zb2Z0JTIwU2VjdXJlJTIwU2VydmVyJTIwQXV0aG9yaXR5KDUpLmNydDA/BgkrBgEEAYI3FQcEMjAwBigrBgEEAYI3FQiDz4lNrfIChaGfDIL6yn2B4ft0gU+Dwu2FCI6p0oVjAgFkAgEGMCcGCSsGAQQBgjcVCgQaMBgwCgYIKwYBBQUHAwIwCgYIKwYBBQUHAwEwDQYJKoZIhvcNAQEFBQADggEBAHueQfJCg4CjE4DD6gaQcbIdoyid+25U2X6SXnkzGktZv9eAI3lU8syYKRewb7buJALGQYkc8Xi9RNbQ32vUwXhh/gog/1nSnFJqPW5ry5350TZTSCkMEzPkit04IDsiN34NG9z821NrkWOXuhJzkuW5ZR9rmyPjD/sw3EMmeXVFk1tgLw9ggekPIxTymxUnEBadBMIhMBha9xA1MbHcYwHHH2AEHwUaEbpSg1SUcqSOaXESKwDm3Etf176juBKev/ghUiTU3dIXGvF/VzZFWyk0NlFLUA2EEbBmaIizHfc18/MQH4V6RXwSPgIXmKAKcNb0a6pv+MCXSB8nq5FDwpw=</X509Certificate></X509Data></KeyInfo></Signature></saml:Assertion>";

        private const string DefaultXuid = "3563432827428330";

        /// <summary>
        /// 
        /// </summary>
        public mainForm()
        {
            InitializeComponent();
            this.cboApi.SelectedIndex = 0;
            this.workerThreads = new Queue<Thread>(255);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void start_Click(object sender, EventArgs e)
        {
            this.tps.Text = "0";
            this.avgLatency.Text = "0";
            this.avgtps.Text = "0";
            quit = false;
            calls = totalCalls = succeeded = failed = timeouts = tpsSampleCount = 0;

            timer = new System.Threading.Timer(new TimerCallback(UpdateStats), null, 0, 1000);

            for (int i = 1; i <= threadCount.Value; i++)
            {
                Thread worker = new Thread(new ParameterizedThreadStart(SubmitRequests));
                this.workerThreads.Enqueue(worker);

                MultiplayerThreadStateCollection tests = this.BuildTestList();

                worker.Start(tests);

                IncrementRunningThreads();
            }
        }

        private MultiplayerThreadState BuildState(string apiName)
        {
            string url = string.Empty;
            string body = string.Empty;
            string method = string.Empty;
            bool extractNotificationId = false;
            bool extractSessionId = false;
            bool useRandomXuid = false;

            switch (apiName)
            {
                case "CreateNotification":
                    url = "http://mptesthooks.stress.xboxlive.com/MPTestHooks.svc/createnotifications";
                    body = "<ArrayOfNotification xmlns=\"http://schemas.datacontract.org/2004/07/AsyncMultiplayer.NotificationService\"> <Notification i:type=\"InvitationNotification\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\">  <Category>NotSpecified</Category>   <DataBlob>String content</DataBlob>   <DeliveredTime>1999-05-31T11:20:00</DeliveredTime>   <ExpirationTime>1999-05-31T11:20:00</ExpirationTime>   <From>String content</From>   <GameDisplayName>String content</GameDisplayName>   <GameId>4294967295</GameId>   <Images>String content</Images>   <IsUserVisible>true</IsUserVisible>   <SentTime>1999-05-31T11:20:00</SentTime>   <SessionId>String content</SessionId>   <Status>UnRead</Status>   <SupportedPlatform>2147483647</SupportedPlatform>   <Type>YourTurn</Type>   <TypeDisplayName>String content</TypeDisplayName>   <Url>String content</Url>   <UserId>{xuid}</UserId>   <Variant>4294967295</Variant>   <id>{generatednotificationid}</id>   </Notification></ArrayOfNotification>";
                    method = "POST";
                    useRandomXuid = true;
                    break;
                case "CreateSession":
                    url = "https://sessions.stress.xboxlive.com:51424/Sessions.svc/game/1297287394";
                    body = "<CreationData xmlns=\"http://schemas.datacontract.org/2004/07/AsyncMultiplayer.SessionCommon\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\"><CanRemoveEmptySeats>true</CanRemoveEmptySeats><DisplayName>FooName</DisplayName><GameID>1297287394</GameID><InactivityWarning><Action>Kick</Action><Interval>30</Interval><MaxNumberOfNudges>5</MaxNumberOfNudges></InactivityWarning><ReservedSeatsAvailable>10</ReservedSeatsAvailable><SessionParameters>AQID</SessionParameters><TotalSeatsAvailable>10</TotalSeatsAvailable><Variant>0</Variant></CreationData>";
                    method = "POST";
                    extractSessionId = true;
                    useRandomXuid = true;
                    break;
                case "DeleteNotification":
                    url = "https://notifications.stress.xboxlive.com:51420/Notifications.svc/delete/?notification={notificationid}";
                    body = "";
                    method = "DELETE";
                    break;
                case "DeleteNotificationsBySession":
                    url = "https://notifications.stress.xboxlive.com:51420/Notifications.svc/deletesession/?game=1297287394&session={sessionid}";
                    body = "";
                    method = "DELETE";
                    break;
                case "GetGameState":
                    url = "https://sessions.stress.xboxlive.com:51424/GameState.svc/GameState/{sessionid}/1297287394";
                    body = "";
                    method = "GET";
                    break;
                case "GetNotifications":
                    url = "https://notifications.stress.xboxlive.com:51420/Notifications.svc/?count=10";
                    body = "";
                    method = "GET";
                    extractNotificationId = true;
                    break;
                case "JoinSession":
                    url = "https://sessions.stress.xboxlive.com:51424/Sessions.svc/session/{sessionid}";
                    body = "<JoinData xmlns=\"http://schemas.datacontract.org/2004/07/AsyncMultiplayer.SessionCommon\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\"><GameID>1297287394</GameID><SeatIndex>0</SeatIndex><SeatParameters>AQID</SeatParameters><SessionID>{sessionid}</SessionID></JoinData>";
                    method = "POST";
                    useRandomXuid = true;
                    break;
                case "LeaveSession":
                    url = "https://sessions.stress.xboxlive.com:51424/Sessions.svc/session/{sessionid}/1297287394";
                    body = "";
                    method = "DELETE";
                    useRandomXuid = false;
                    break;
                case "ModifySession":
                    url = "https://sessions.stress.xboxlive.com:51424/Sessions.svc/session/{sessionid}/1297287394";
                    body = "<ModificationData xmlns=\"http://schemas.datacontract.org/2004/07/AsyncMultiplayer.SessionCommon\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\"><CanRemoveEmptySeats>true</CanRemoveEmptySeats><DisplayName>FooName</DisplayName><InactivityWarning><Action>Kick</Action><Interval>30</Interval><MaxNumberOfNudges>5</MaxNumberOfNudges></InactivityWarning><IsFriendsOnly>false</IsFriendsOnly><ReservedSeatsAvailable>10</ReservedSeatsAvailable><SessionParameters>QVFJRA==</SessionParameters><TotalSeatsAvailable>10</TotalSeatsAvailable></ModificationData>";
                    method = "PUT";
                    useRandomXuid = false;
                    break;
                case "PostGameAction":
                    url = "https://sessions.stress.xboxlive.com:51424/GameState.svc/GameAction/{sessionid}/1297287394";
                    body = "<GameAction xmlns=\"http://schemas.datacontract.org/2004/07/AsyncMultiplayer.SessionCommon\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\"><ActionData>QVFJRA==</ActionData><ActionTime>2010-08-03T12:33:30</ActionTime><ActionType>UserNudge</ActionType><SequenceNumber>0</SequenceNumber></GameAction>";
                    method = "POST";
                    break;
                case "PostGameEnd":
                    url = "https://sessions.stress.xboxlive.com:51424/GameState.svc/GameState/{sessionid}/1297287394";
                    body = "<GameResults xmlns=\"http://schemas.datacontract.org/2004/07/AsyncMultiplayer.SessionCommon\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\"><GameOverSeatIndexes xmlns:a=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\"><a:int>0</a:int></GameOverSeatIndexes><LosingSeatIndexes xmlns:a=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\"><a:int>1</a:int><a:int>2</a:int></LosingSeatIndexes><Results xmlns:a=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\"><a:KeyValueOfintGameResultsCyVQWkm><a:Key>1</a:Key><a:Value xmlns:b=\"http://schemas.datacontract.org/2004/07/Wgx.Services.Gds.BusinessObjects\"><b:GameId>1297287394</b:GameId><b:Variant>0</b:Variant><b:GameResultId>125a9e3d-d31e-440c-9ea4-544307d8801f</b:GameResultId><b:TimeStamp>2010-06-21T13:30:55</b:TimeStamp><b:Score>10000</b:Score><b:Time>100</b:Time><b:Outcome>Win</b:Outcome><b:Blob>NTY3</b:Blob></a:Value></a:KeyValueOfintGameResultsCyVQWkm></Results><TierSeatIndexes xmlns:a=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\"><a:int>1</a:int><a:int>2</a:int></TierSeatIndexes><WinningSeatIndexes xmlns:a=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\"><a:int>0</a:int></WinningSeatIndexes></GameResults>";
                    method = "POST";
                    break;
                case "GetSpotlight":
                    url = "https://notifications.stress.xboxlive.com:51420/Notifications.svc/Spotlight/";
                    body = string.Empty;
                    method = "GET";
                    break;
                case "PutGameState":
                    url = "https://sessions.stress.xboxlive.com:51424/GameState.svc/GameState/{sessionid}/1297287394";
                    body = "<ModifiableGameState xmlns=\"http://schemas.datacontract.org/2004/07/AsyncMultiplayer.SessionCommon\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\"><ActiveSeatIndex>0</ActiveSeatIndex><GameDataameData></ModifiableGameState>";
                    method = "PUT";
                    break;
                case "RejectInvitation":
                    url = "https://sessions.stress.xboxlive.com:51424/Sessions.svc/invite/{sessionid}/1297287394";
                    body = "";
                    method = "DELETE";
                    break;
                case "SendInvite":
                    url = "https://notifications.stress.xboxlive.com:51420/Notifications.svc/invite";
                    body = "<InviteRequest xmlns=\"http://schemas.datacontract.org/2004/07/AsyncMultiplayer.NotificationService\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\"><Data>foo</Data><GameId>1297287394</GameId><Recipients>LL430ua15ie26@live-int.com</Recipients><SessionId>{sessionid}</SessionId><FriendRequest>false</FriendRequest></InviteRequest>";
                    method = "POST";
                    extractNotificationId = true;
                    break;
                case "UpdateNotification":
                    url = "https://notifications.stress.xboxlive.com:51420/Notifications.svc/update/?notification=2521214300776146542-99842030-8cda-4f77-b176-98fec8133db3&status=1";
                    body = "";
                    method = "PUT";
                    break;
                case "ViewSession":
                    url = "https://sessions.stress.xboxlive.com:51424/Sessions.svc/session/{sessionid}/1297287394";
                    body = "";
                    method = "GET";
                    break;
                case "ViewSessionSummaries":
                    url = "https://sessions.stress.xboxlive.com:51424/Sessions.svc/game?game=1297287394&variant=0&max=5&showSessionType=1";
                    body = "";
                    method = "GET";
                    break;
                default:
                    break;

            }
            int timeout;
            if (!int.TryParse(this.timeout.Text.Trim(), out timeout))
                timeout = 30000;

            MultiplayerThreadState ret = new MultiplayerThreadState()
            {
                Xuid = string.Empty,
                BaseUrl = url,
                Locale = "en-US",
                RequestBody = body,
                HttpMethod = method,
                Timeout = timeout,
                UseRandomXuid = useRandomXuid,
                ExtractSessionId = extractSessionId,
                ExtractNotificationId = extractNotificationId,
                RecordPerformance = true
            };

            return ret;
        }

        private MultiplayerThreadStateCollection BuildTestList()
        {
            List<MultiplayerThreadState> states = new List<MultiplayerThreadState>();

            int timeout;
            if (!int.TryParse(this.timeout.Text.Trim(), out timeout))
                timeout = 30000;

            MultiplayerThreadState createSessionParams = new MultiplayerThreadState()
            {
                Xuid = this.txtXuid.Text,
                BaseUrl = "https://sessions.stress.xboxlive.com:51424/Sessions.svc/game/1297287394",
                Locale = "en-US",
                RequestBody = "<CreationData xmlns=\"http://schemas.datacontract.org/2004/07/AsyncMultiplayer.SessionCommon\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\"><CanRemoveEmptySeats>true</CanRemoveEmptySeats><DisplayName>FooName</DisplayName><GameID>1297287394</GameID><InactivityWarning><Action>Kick</Action><Interval>30</Interval><MaxNumberOfNudges>5</MaxNumberOfNudges></InactivityWarning><ReservedSeatsAvailable>10</ReservedSeatsAvailable><SessionParameters>AQID</SessionParameters><TotalSeatsAvailable>16</TotalSeatsAvailable><Variant>0</Variant></CreationData>",
                HttpMethod = "POST",
                Timeout = timeout,
                UseRandomXuid = true,
                ExtractSessionId = true,
                RecordPerformance = false
            };

            switch (cboApi.Text)
            {
                case "E2E":
                    //0.2	createsession	0.074183976
                    //60.5	getnotifications	22.44065282
                    //60.5	getspotlight	22.44065282
                    //20.2	updatenotification	7.492581602
                    //60.5	sendinvite	22.44065282
                    //0.2	joinsession	0.074183976
                    //6.1	viewsession	2.262611276
                    //0.6	viewsessionsummaries	0.222551929
                    //45.4	getgamestate	16.83976261
                    //15.1	putgamestate	5.600890208
                    //0.3	postgameend	0.111275964

                    states.Add(this.BuildState("CreateSession"));
                    for (int i = 0; i < 3; i++)
                    {
                        states.Add(this.BuildState("GetSpotlight"));
                        states.Add(this.BuildState("SendInvite"));
                    }
                    states.Add(this.BuildState("ViewSession"));
                    states.Add(this.BuildState("ViewSessionSummaries"));

                    for (int i = 0; i < 5; i++)
                    {
                        states.Add(this.BuildState("PutGameState"));
                        states.Add(this.BuildState("GetGameState"));
                    }

                    states.Add(this.BuildState("PostGameEnd"));

                    MultiplayerThreadState gn = this.BuildState("GetNotifications");
                    gn.Xuid = DefaultXuid;

                    for (int i = 0; i < 5; i++)
                    {
                        states.Add(gn);
                    }

                    MultiplayerThreadState un = this.BuildState("UpdateNotification");
                    un.Xuid = DefaultXuid;

                    for (int i = 0; i < 2; i++)
                    {
                        states.Add(un);
                    }

                    states.Add(this.BuildState("CreateSession"));
                    states.Add(this.BuildState("JoinSession"));

                    break;
                case "E2E (SMS only)":

                    states.Add(this.BuildState("CreateSession"));
                    states.Add(this.BuildState("GetSpotlight"));
                    states.Add(this.BuildState("ViewSession"));
                    states.Add(this.BuildState("ViewSessionSummaries"));
                    states.Add(this.BuildState("PutGameState"));
                    states.Add(this.BuildState("GetGameState"));
                    states.Add(this.BuildState("PostGameEnd"));
                    states.Add(this.BuildState("CreateSession"));
                    states.Add(this.BuildState("JoinSession"));

                    break;
                case "JoinSession":
                    states.Add(createSessionParams);
                    MultiplayerThreadState joinSessionParams = new MultiplayerThreadState()
                    {
                        BaseUrl = this.baseUrl.Text,
                        Xuid = this.txtXuid.Text,
                        Locale = "en-US",
                        RequestBody = this.requestBody.Text,
                        HttpMethod = this.comboBox1.SelectedItem.ToString(),
                        Timeout = timeout,
                        UseRandomXuid = true,
                        ExtractSessionId = false,
                        RecordPerformance = true
                    };
                    for (int i = 0; i < 15; i++)
                    {
                        states.Add(joinSessionParams);
                    }
                    break;
                case "ModifySession":
                    states.Add(createSessionParams);
                    states.Add(this.BuildState("ModifySession"));
                    break;
                case "SendInvite":
                    states.Add(createSessionParams);
                    states.Add(this.BuildState("SendInvite"));
                    break;
                case "PutGameState":
                    states.Add(createSessionParams);
                    states.Add(this.BuildState("PutGameState"));
                    break;
                case "PostGameEnd":
                    states.Add(createSessionParams);
                    states.Add(this.BuildState("PostGameEnd"));
                    break;
                case "LeaveSession":
                    states.Add(createSessionParams);
                    states.Add(this.BuildState("LeaveSession"));
                    break;
                case "PostGameAction":
                    states.Add(createSessionParams);
                    states.Add(this.BuildState("PostGameAction"));
                    break;
                case "RejectInvitation":
                    states.Add(createSessionParams);
                    states.Add(this.BuildState("CreateNotification"));
                    states.Add(this.BuildState("RejectInvitation"));
                    break;
                case "DeleteNotification":
                    states.Add(createSessionParams);
                    states.Add(this.BuildState("CreateNotification"));
                    states.Add(this.BuildState("DeleteNotification"));
                    break;
                case "DeleteNotificationsBySession":
                    states.Add(createSessionParams);
                    states.Add(this.BuildState("CreateNotification"));
                    states.Add(this.BuildState("DeleteNotificationsBySession"));
                    break;
                default:
                    states.Add(new MultiplayerThreadState()
                    {
                        BaseUrl = this.baseUrl.Text,
                        Xuid = this.txtXuid.Text,
                        Locale = "en-US",
                        RequestBody = this.requestBody.Text,
                        HttpMethod = this.comboBox1.SelectedItem.ToString(),
                        Timeout = timeout,
                        UseRandomXuid = this.chkRandomize.Checked,
                        ExtractSessionId = false,
                        RecordPerformance = true
                    });
                    break;
            }


            return new MultiplayerThreadStateCollection(states);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void stop_Click(object sender, EventArgs e)
        {
            quit = true;
            if (timer != null)
                timer.Dispose();
            timer = null;

            //kill all worker threads
            while (this.workerThreads.Count > 0)
            {
                Thread worker = this.workerThreads.Dequeue();
                if (!worker.Join(10) && worker.IsAlive)
                    worker.Abort();
                DecrementRunningThreads();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="state"></param>
        private void UpdateStats(object state)
        {
            UpdateTps(calls);
            calls = 0;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="tps"></param>
        private void UpdateTps(object tps)
        {
            if (this.InvokeRequired)
            {
                this.BeginInvoke(new ParameterizedThreadStart(UpdateTps), tps);
            }
            else
            {
                this.tps.Text = tps.ToString();
                Interlocked.Increment(ref tpsSampleCount);

                this.avgtps.Text = (totalCalls / tpsSampleCount).ToString();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        private void UpdateSuccess()
        {
            if (this.InvokeRequired)
            {
                this.BeginInvoke(new MethodInvoker(UpdateSuccess));
            }
            else
            {
                this.totalSucceeded.Text = succeeded.ToString();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        private void UpdateFailed()
        {
            if (this.InvokeRequired)
            {
                this.BeginInvoke(new MethodInvoker(UpdateFailed));
            }
            else
            {
                this.totalFailed.Text = failed.ToString();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        private void UpdateTimeout()
        {
            if (this.InvokeRequired)
            {
                this.BeginInvoke(new MethodInvoker(UpdateTimeout));
            }
            else
            {
                this.totalTimeout.Text = timeouts.ToString();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        private void IncrementRunningThreads()
        {
            if (this.InvokeRequired)
            {
                this.BeginInvoke(new MethodInvoker(IncrementRunningThreads));
            }
            else
            {
                int count = int.Parse(this.threadsRunning.Text);
                this.threadsRunning.Text = (count + 1).ToString();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        private void DecrementRunningThreads()
        {
            if (this.InvokeRequired)
            {
                this.BeginInvoke(new MethodInvoker(DecrementRunningThreads));
            }
            else
            {
                int count = int.Parse(this.threadsRunning.Text);
                this.threadsRunning.Text = (count - 1).ToString();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="time"></param>
        private void AppendDuration(object data)
        {
            if (this.InvokeRequired)
            {
                this.BeginInvoke(new ParameterizedThreadStart(AppendDuration), data);
            }
            else
            {
                object[] stats = data as object[];

                latencyTotal += Convert.ToUInt64(stats[0]);

                if (totalCalls > 0)
                {
                    this.avgLatency.Text = (latencyTotal / (ulong)totalCalls).ToString();
                }
                this.durations.AppendText(stats[1].ToString());
                Trace.TraceInformation(stats[1].ToString());
            }
        }

        private object lockScope = new object();

        /// <summary>
        /// 
        /// </summary>
        /// <param name="state"></param>
        private void SubmitRequests(object states)
        {
            MultiplayerThreadStateCollection mpStates = states as MultiplayerThreadStateCollection;
            string sessionId = null;
            string notificationId = null;
            string previousXuid = null;
            DateTime start = DateTime.MinValue;
            DateTime finish = DateTime.MinValue;

            while (!quit)
            {
                foreach (MultiplayerThreadState mpState in mpStates.StateCollection)
                {
                    try
                    {
                        string xuid = mpState.Xuid;
                        if (previousXuid == null)
                        {
                            previousXuid = xuid;
                        }

                        if (mpState.UseRandomXuid)
                        {
                            xuid = GenerateRandomUInt64().ToString();
                            previousXuid = xuid;
                        }
                        else
                        {
                            if (xuid == string.Empty)
                            {
                                xuid = previousXuid;
                            }
                        }

                        string userToken = this.GetUserToken(xuid);
                        string partnerToken = this.GetPartnerToken(xuid);
                        string url = mpState.BaseUrl;
                        string body = mpState.RequestBody;

                        if (url.Contains("{sessionid}") || body.Contains("{sessionid}"))
                        {
                            if (sessionId != null)
                            {
                                url = url.Replace("{sessionid}", sessionId);
                                body = body.Replace("{sessionid}", sessionId);
                            }
                            else
                            {
                                break;
                            }
                        }
                        if (url.Contains("{notificationid}") || body.Contains("{notificationid}"))
                        {
                            if (notificationId != null)
                            {
                                url = url.Replace("{notificationid}", notificationId);
                                body = body.Replace("{notificationid}", notificationId);
                            }
                            else
                            {
                                break;
                            }
                        }
                        if (url.Contains("{generatednotificationid}") || body.Contains("{generatednotificationid}"))
                        {
                            string generatedNotificationId = "2521231689342194898-" + Guid.NewGuid().ToString();

                            url = url.Replace("{generatednotificationid}", generatedNotificationId);
                            body = body.Replace("{generatednotificationid}", generatedNotificationId);
                            notificationId = generatedNotificationId;

                        }
                        if (url.Contains("{recipientxuid}") || body.Contains("{recipientxuid}"))
                        {
                            string recipientXuid = GenerateRandomUInt64().ToString();

                            url = url.Replace("{recipientxuid}", recipientXuid);
                            body = body.Replace("{recipientxuid}", recipientXuid);
                            previousXuid = recipientXuid;
                        }
                        WebRequest request = WebRequest.Create(url);
                        request.Method = mpState.HttpMethod;
                        request.ContentType = "application/xml";
                        request.ContentLength = 0;
                        //request.UserAgent = "MP Stress Tool";
                        request.Timeout = mpState.Timeout;
                        request.Headers.Add("X-Locale", mpState.Locale);
                        request.Headers.Add("X-Authorization", "XBL1.0 x=" + userToken);
                        request.Headers.Add("X-PartnerAuthorization", "XBL1.0 x=" + partnerToken);
                        request.Headers.Add("X-Platform-Type", "5");

                        if (!string.IsNullOrEmpty(body))
                        {
                            byte[] buffer = Encoding.ASCII.GetBytes(body);
                            request.ContentLength = buffer.Length;
                            using (Stream st = request.GetRequestStream())
                            {
                                st.Write(buffer, 0, buffer.Length);
                            }
                        }

                        HttpWebResponse response = null;
                        string status = "N/A";

                        try
                        {
                            start = DateTime.Now;
                            response = (HttpWebResponse)request.GetResponse();
                            status = "200";
                        }
                        catch (WebException e)
                        {
                            using (StreamReader sr = new StreamReader(e.Response.GetResponseStream()))
                            {
                                string responseString = sr.ReadToEnd().Trim();
                            }

                            Interlocked.Increment(ref failed);
                            UpdateFailed();

                            if (e.Status == WebExceptionStatus.Timeout)
                            {
                                Interlocked.Increment(ref timeouts);
                                UpdateTimeout();
                                status = "Timeout";
                            }
                            else if (e.Status == WebExceptionStatus.ProtocolError)
                            {
                                status = ((int)((HttpWebResponse)e.Response).StatusCode).ToString();
                            }
                        }
                        catch (ThreadAbortException)
                        {
                            status = "Thread Aborted";
                        }
                        catch
                        {
                            Interlocked.Increment(ref failed);
                        }
                        finally
                        {
                            finish = DateTime.Now;
                            //only record the perf if this is the API being tested (not a setup call)
                            if (mpState.RecordPerformance)
                            {
                                Interlocked.Increment(ref succeeded);
                                UpdateSuccess();

                                Interlocked.Increment(ref calls);
                                Interlocked.Increment(ref totalCalls);

                                double latency = finish.Subtract(start).TotalMilliseconds;

                                object[] data = { latency, String.Format("{0} - {1}\r\n", latency, status) };

                                AppendDuration(data);
                            }
                            if (status == "200")
                            {
                                if (mpState.ExtractSessionId)
                                {
                                    using (StreamReader sr = new StreamReader(response.GetResponseStream()))
                                    {
                                        string responseString = sr.ReadToEnd().Trim();

                                        XDocument x = XDocument.Load(new StringReader(responseString));
                                        XNamespace ns = "http://schemas.datacontract.org/2004/07/AsyncMultiplayer.SessionCommon";

                                        sessionId = x.Element(ns + "SessionState").Element(ns + "SessionID").Value.ToString();

                                    }
                                }
                                if (mpState.ExtractNotificationId)
                                {
                                    using (StreamReader sr = new StreamReader(response.GetResponseStream()))
                                    {
                                        string responseString = sr.ReadToEnd().Trim();

                                        XDocument x = XDocument.Load(new StringReader(responseString));
                                        XNamespace ns = "http://schemas.datacontract.org/2004/07/AsyncMultiplayer.NotificationService";

                                        notificationId = x.Element(ns + "NotificationList").Elements(ns + "Notification").First
                                            (a => a.Name == "id").Value.ToString();

                                    }
                                }
                            }
                            response.Close();
                        }
                    }

                    catch
                    {
                        //keep the loop going, no matter what...
                    }
                    finally
                    {
                        Thread.Sleep(50);
                    }
                }
            }

        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cboApi_SelectedIndexChanged(object sender, EventArgs e)
        {
            switch (cboApi.SelectedItem.ToString())
            {
                case "CreateSession":
                    txtXuid.Text = DefaultXuid;
                    baseUrl.Text = "https://sessions.stress.xboxlive.com:51424/Sessions.svc/game/1297287394";
                    requestBody.Text = "<CreationData xmlns=\"http://schemas.datacontract.org/2004/07/AsyncMultiplayer.SessionCommon\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\"><CanRemoveEmptySeats>true</CanRemoveEmptySeats><DisplayName>FooName</DisplayName><GameID>1297287394</GameID><InactivityWarning><Action>Kick</Action><Interval>30</Interval><MaxNumberOfNudges>5</MaxNumberOfNudges></InactivityWarning><ReservedSeatsAvailable>10</ReservedSeatsAvailable><SessionParameters>AQID</SessionParameters><TotalSeatsAvailable>10</TotalSeatsAvailable><Variant>0</Variant></CreationData>";
                    comboBox1.SelectedIndex = 2;
                    chkRandomize.Checked = true;
                    txtXuid.Enabled = true;
                    baseUrl.Enabled = true;
                    requestBody.Enabled = true;
                    comboBox1.Enabled = true;
                    chkRandomize.Enabled = true;
                    break;
                case "MPTestHooks.CreateSession":
                    txtXuid.Text = DefaultXuid;
                    baseUrl.Text = "https://sessions.stress.xboxlive.com:51424/Sessions.svc/game/1297287394";
                    requestBody.Text = "<SessionState xmlns=\"http://schemas.datacontract.org/2004/07/AsyncMultiplayer.SessionCommon\"><ActorSeat>2147483647</ActorSeat><CanRemoveEmptySeats>true</CanRemoveEmptySeats><Category>AllPublic</Category><CreationTime>1999-05-31T11:20:00</CreationTime><DisplayName>String content</DisplayName><GameID>4294967295</GameID><InactivityWarning><Action>Kick</Action><Interval>2147483647</Interval><MaxNumberOfNudges>2147483647</MaxNumberOfNudges></InactivityWarning><IsClosed>true</IsClosed><IsInactivityWarningSent>true</IsInactivityWarningSent><IsWarningSent>true</IsWarningSent><NumberOfNudgesSent>2147483647</NumberOfNudgesSent><OwnerSeatIndex>2147483647</OwnerSeatIndex><ReservedSeatsAvailable>2147483647</ReservedSeatsAvailable><Seats><SeatInfo><DisplayName>String content</DisplayName><DisplayPicSmallURL>String content</DisplayPicSmallURL><DisplayPicURL>String content</DisplayPicURL><Index>2147483647</Index><IsAI>true</IsAI><Locale>String content</Locale><PlatformType>Xbox1</PlatformType><Profile><_x003C_PublicToken_x003E_k__BackingField>String content</_x003C_PublicToken_x003E_k__BackingField><_x003C_ServiceType_x003E_k__BackingField>XUID</_x003C_ServiceType_x003E_k__BackingField><_x003C_Token_x003E_k__BackingField>String content</_x003C_Token_x003E_k__BackingField></Profile></SeatInfo><SeatInfo><DisplayName>String content</DisplayName><DisplayPicSmallURL>String content</DisplayPicSmallURL><DisplayPicURL>String content</DisplayPicURL><Index>2147483647</Index><IsAI>true</IsAI><Locale>String content</Locale><PlatformType>Xbox1</PlatformType><Profile><_x003C_PublicToken_x003E_k__BackingField>String content</_x003C_PublicToken_x003E_k__BackingField><_x003C_ServiceType_x003E_k__BackingField>XUID</_x003C_ServiceType_x003E_k__BackingField><_x003C_Token_x003E_k__BackingField>String content</_x003C_Token_x003E_k__BackingField></Profile></SeatInfo></Seats><SeatsAvailable>2147483647</SeatsAvailable><SessionID>String content</SessionID><SessionParameters>QmFzZSA2NCBTdHJlYW0=</SessionParameters><State><ActiveSeatIndex>2147483647</ActiveSeatIndex><GameID>4294967295</GameID><IsComplete>true</IsComplete><LastModified>1999-05-31T11:20:00</LastModified><SequenceNumber>2147483647</SequenceNumber><SessionID>{generatedsessionid}</SessionID><Variant>2147483647</Variant></State><Variant>2147483647</Variant></SessionState>";
                    comboBox1.SelectedIndex = 2;
                    chkRandomize.Checked = true;
                    txtXuid.Enabled = true;
                    baseUrl.Enabled = true;
                    requestBody.Enabled = true;
                    comboBox1.Enabled = true;
                    chkRandomize.Enabled = true;
                    break;
                case "DeleteNotification":
                    txtXuid.Text = DefaultXuid;
                    baseUrl.Text = "https://notifications.stress.xboxlive.com:51420/Notifications.svc/delete/?notification={notificationid}";
                    requestBody.Text = "";
                    comboBox1.SelectedIndex = 0; //DELETE
                    chkRandomize.Checked = true;
                    txtXuid.Enabled = false;
                    baseUrl.Enabled = false;
                    requestBody.Enabled = false;
                    comboBox1.Enabled = false;
                    chkRandomize.Enabled = false;
                    break;
                case "E2E":

                    txtXuid.Text = string.Empty;
                    baseUrl.Text = string.Empty;
                    requestBody.Text = string.Empty;
                    comboBox1.SelectedIndex = 1;//GET
                    chkRandomize.Checked = false;
                    txtXuid.Enabled = false;
                    baseUrl.Enabled = false;
                    requestBody.Enabled = false;
                    comboBox1.Enabled = false;
                    chkRandomize.Enabled = false;
                    break;

                case "E2E (SMS only)":

                    txtXuid.Text = string.Empty;
                    baseUrl.Text = string.Empty;
                    requestBody.Text = string.Empty;
                    comboBox1.SelectedIndex = 1;//GET
                    chkRandomize.Checked = false;
                    txtXuid.Enabled = false;
                    baseUrl.Enabled = false;
                    requestBody.Enabled = false;
                    comboBox1.Enabled = false;
                    chkRandomize.Enabled = false; break;
                case "GetGameState":
                    txtXuid.Text = DefaultXuid;
                    baseUrl.Text = "https://sessions.stress.xboxlive.com:51424/GameState.svc/GameState/a2a3b1e0-1d16-4c22-9601-09037d3bb30e/1297287394";
                    requestBody.Text = "";
                    comboBox1.SelectedIndex = 1;//GET
                    chkRandomize.Checked = false;
                    txtXuid.Enabled = true;
                    baseUrl.Enabled = true;
                    requestBody.Enabled = true;
                    comboBox1.Enabled = true;
                    chkRandomize.Enabled = true;
                    break;
                case "GetNotifications":
                    txtXuid.Text = DefaultXuid;
                    baseUrl.Text = "https://notifications.stress.xboxlive.com:51420/Notifications.svc/?count=10";
                    requestBody.Text = "";
                    comboBox1.SelectedIndex = 1;//GET
                    chkRandomize.Checked = false;
                    txtXuid.Enabled = true;
                    baseUrl.Enabled = true;
                    requestBody.Enabled = true;
                    comboBox1.Enabled = true;
                    chkRandomize.Enabled = true;
                    break;
                case "GetSpotlight":
                    txtXuid.Text = DefaultXuid;
                    baseUrl.Text = "https://notifications.stress.xboxlive.com:51420/Notifications.svc/Spotlight/";
                    requestBody.Text = string.Empty;
                    comboBox1.SelectedIndex = 1;//GET
                    chkRandomize.Checked = false;
                    txtXuid.Enabled = true;
                    baseUrl.Enabled = true;
                    requestBody.Enabled = true;
                    comboBox1.Enabled = true;
                    chkRandomize.Enabled = true;
                    break;
                case "JoinSession":
                    txtXuid.Text = DefaultXuid;
                    baseUrl.Text = "https://sessions.stress.xboxlive.com:51424/Sessions.svc/session/{sessionid}";
                    requestBody.Text = "<JoinData xmlns=\"http://schemas.datacontract.org/2004/07/AsyncMultiplayer.SessionCommon\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\"><GameID>1297287394</GameID><SeatIndex>0</SeatIndex><SeatParameters>AQID</SeatParameters><SessionID>{sessionid}</SessionID></JoinData>";
                    comboBox1.SelectedIndex = 2;//POST
                    chkRandomize.Checked = false;
                    txtXuid.Enabled = false;
                    baseUrl.Enabled = false;
                    requestBody.Enabled = false;
                    comboBox1.Enabled = false;
                    chkRandomize.Enabled = false;
                    break;
                case "ModifySession":
                    txtXuid.Text = DefaultXuid;
                    baseUrl.Text = "https://sessions.stress.xboxlive.com:51424/Sessions.svc/session/{sessionid}/1297287394";
                    requestBody.Text = "<ModificationData xmlns=\"http://schemas.datacontract.org/2004/07/AsyncMultiplayer.SessionCommon\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\"><CanRemoveEmptySeats>true</CanRemoveEmptySeats><DisplayName>FooName</DisplayName><InactivityWarning><Action>Kick</Action><Interval>30</Interval><MaxNumberOfNudges>5</MaxNumberOfNudges></InactivityWarning><IsFriendsOnly>false</IsFriendsOnly><ReservedSeatsAvailable>10</ReservedSeatsAvailable><SessionParameters>QVFJRA==</SessionParameters><TotalSeatsAvailable>10</TotalSeatsAvailable></ModificationData>";
                    comboBox1.SelectedIndex = 3;//PUT
                    chkRandomize.Checked = false;
                    txtXuid.Enabled = false;
                    baseUrl.Enabled = false;
                    requestBody.Enabled = false;
                    comboBox1.Enabled = false;
                    chkRandomize.Enabled = false;
                    break;
                case "PostGameEnd":
                    txtXuid.Text = DefaultXuid;
                    baseUrl.Text = "https://sessions.stress.xboxlive.com:51424/GameState.svc/GameState/{sessionid}/1297287394";
                    requestBody.Text = "<GameResults xmlns=\"http://schemas.datacontract.org/2004/07/AsyncMultiplayer.SessionCommon\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\"><GameOverSeatIndexes xmlns:a=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\"><a:int>0</a:int></GameOverSeatIndexes><LosingSeatIndexes xmlns:a=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\"><a:int>1</a:int><a:int>2</a:int></LosingSeatIndexes><Results xmlns:a=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\"><a:KeyValueOfintGameResultsCyVQWkm><a:Key>1</a:Key><a:Value xmlns:b=\"http://schemas.datacontract.org/2004/07/Wgx.Services.Gds.BusinessObjects\"><b:GameId>1297287394</b:GameId><b:Variant>0</b:Variant><b:GameResultId>125a9e3d-d31e-440c-9ea4-544307d8801f</b:GameResultId><b:TimeStamp>2010-06-21T13:30:55</b:TimeStamp><b:Score>10000</b:Score><b:Time>100</b:Time><b:Outcome>Win</b:Outcome><b:Blob>NTY3</b:Blob></a:Value></a:KeyValueOfintGameResultsCyVQWkm></Results><TierSeatIndexes xmlns:a=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\"><a:int>1</a:int><a:int>2</a:int></TierSeatIndexes><WinningSeatIndexes xmlns:a=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\"><a:int>0</a:int></WinningSeatIndexes></GameResults>";
                    comboBox1.SelectedIndex = 2;//POST
                    chkRandomize.Checked = false;
                    txtXuid.Enabled = false;
                    baseUrl.Enabled = false;
                    requestBody.Enabled = false;
                    comboBox1.Enabled = false;
                    chkRandomize.Enabled = false;
                    break;
                case "PutGameState":
                    txtXuid.Text = DefaultXuid;
                    baseUrl.Text = "https://sessions.stress.xboxlive.com:51424/GameState.svc/GameState/{sessionid}/1297287394";
                    requestBody.Text = "<ModifiableGameState xmlns=\"http://schemas.datacontract.org/2004/07/AsyncMultiplayer.SessionCommon\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\"><ActiveSeatIndex>0</ActiveSeatIndex><GameData>AQID</GameData></ModifiableGameState>";
                    comboBox1.SelectedIndex = 3;//PUT
                    chkRandomize.Checked = true;
                    txtXuid.Enabled = true;
                    baseUrl.Enabled = true;
                    requestBody.Enabled = true;
                    comboBox1.Enabled = true;
                    chkRandomize.Enabled = true;
                    break;
                case "SendInvite":
                    txtXuid.Text = DefaultXuid;
                    baseUrl.Text = "https://notifications.stress.xboxlive.com:51420/Notifications.svc/invite";
                    requestBody.Text = "<InviteRequest xmlns=\"http://schemas.datacontract.org/2004/07/AsyncMultiplayer.NotificationService\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\"><Data>foo</Data><GameId>1297287394</GameId><Recipients>LL430ua15ie26@live-int.com</Recipients><SessionId>{sessionid}</SessionId><FriendRequest>false</FriendRequest></InviteRequest>";
                    comboBox1.SelectedIndex = 2;//POST
                    chkRandomize.Checked = true;
                    txtXuid.Enabled = true;
                    baseUrl.Enabled = true;
                    requestBody.Enabled = true;
                    comboBox1.Enabled = true;
                    chkRandomize.Enabled = true;
                    break;
                case "UpdateNotification":
                    txtXuid.Text = DefaultXuid;
                    baseUrl.Text = "https://notifications.stress.xboxlive.com:51420/Notifications.svc/update/?notification=2521214300776146542-99842030-8cda-4f77-b176-98fec8133db3&status=1";
                    requestBody.Text = "";
                    comboBox1.SelectedIndex = 3;//PUT
                    chkRandomize.Checked = false;
                    txtXuid.Enabled = true;
                    baseUrl.Enabled = true;
                    requestBody.Enabled = true;
                    comboBox1.Enabled = true;
                    chkRandomize.Enabled = true;
                    break;
                case "ViewSessions":
                    txtXuid.Text = DefaultXuid;
                    baseUrl.Text = "https://sessions.stress.xboxlive.com:51424/Sessions.svc/session/019d85f6-b871-4b33-8a4c-33b2505112cd/1297287394";
                    requestBody.Text = "";
                    comboBox1.SelectedIndex = 1;//GET
                    chkRandomize.Checked = false;
                    txtXuid.Enabled = true;
                    baseUrl.Enabled = true;
                    requestBody.Enabled = true;
                    comboBox1.Enabled = true;
                    chkRandomize.Enabled = true;
                    break;
                case "ViewSessionSummaries":
                    txtXuid.Text = DefaultXuid;
                    baseUrl.Text = "https://sessions.stress.xboxlive.com:51424/Sessions.svc/game?game=1297287394&variant=0&lastSession=a2a3b1e0-1d16-4c22-9601-09037d3bb30e&lastGame=1297287394&max=100&showSessionType=1";
                    requestBody.Text = "";
                    comboBox1.SelectedIndex = 1;//GET
                    chkRandomize.Checked = false;
                    txtXuid.Enabled = true;
                    baseUrl.Enabled = true;
                    requestBody.Enabled = true;
                    comboBox1.Enabled = true;
                    chkRandomize.Enabled = true;
                    break;
                default:
                    chkRandomize.Checked = false;
                    txtXuid.Enabled = false;
                    baseUrl.Enabled = false;
                    requestBody.Enabled = false;
                    comboBox1.Enabled = false;
                    chkRandomize.Enabled = false;
                    break;
            }

        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void mainForm_FormClosing(object sender, FormClosingEventArgs e)
        {
            //make sure this shit gets cleaned up... particularly if it's running when closed
            stop_Click(this.stop, EventArgs.Empty);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void ignoreSSLErrorsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            System.Net.ServicePointManager.ServerCertificateValidationCallback = (senderz, certificate, chain, sslPolicyErrors) => true;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void exitToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Close();
        }

        private string GetUserToken(string xuid)
        {
            string ret = userTokenDefault.Replace(XUID_PLACEHOLDER, xuid).Replace(Environment.NewLine, string.Empty);
            return ret;
        }

        private string GetPartnerToken(string xuid)
        {
            string ret = partnerTokenDefault.Replace(XUID_PLACEHOLDER, xuid).Replace(Environment.NewLine, string.Empty);
            return ret;
        }
        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public static ulong GenerateRandomUInt64()
        {
            byte[] buffer = new byte[sizeof(ulong)];
            RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();
            rng.GetNonZeroBytes(buffer);
            return BitConverter.ToUInt64(buffer, 0);
        }

        public static uint GenerateRandomUInt32()
        {
            byte[] buffer = new byte[sizeof(uint)];
            RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();
            rng.GetNonZeroBytes(buffer);
            return BitConverter.ToUInt32(buffer, 0);
        }

        private void userToken_TextChanged(object sender, EventArgs e)
        {

        }

        private void btnReset_Click(object sender, EventArgs e)
        {
            calls = 0;
            totalCalls = 0;
            succeeded = 0;
            failed = 0;
            timeouts = 0;
            latencyTotal = 0;
            tpsSampleCount = 0;
            this.tps.Text = "0";
            this.avgLatency.Text = "0";
            this.avgtps.Text = "0";
            this.totalFailed.Text = "0";
            this.totalSucceeded.Text = "0";
            this.totalTimeout.Text = "0";
        }

        private void chkRandomize_CheckedChanged(object sender, EventArgs e)
        {
            if (chkRandomize.Checked)
            {
                txtXuid.Enabled = false;
            }
            else
            {
                txtXuid.Enabled = true;
            }
        }

        private void threadCount_ValueChanged(object sender, EventArgs e)
        {

        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test\makefile.inc ===
# this is a slight modification of the makefile.def target that skips ComVisible since it's specified per project.

$(OBJ_PATH)\$O\_generated.cs: $(SOURCES_USED)
    -$(_DEL)
    set createfile=<<$@.temp
!if defined(LANGUAGE_SPECIFIC_MANAGED_RESOURCES) && "$(MUI)" == "1" && "$(URT_VER)" == "2.0"
[assembly:System.Resources.NeutralResourcesLanguage("en")]
!endif
[assembly:System.Reflection.AssemblyVersion("$(ASSEMBLY_IDENTITY_VERSION)")]
!ifdef VER_PRODUCTNAME_STR
[assembly:System.Reflection.AssemblyProduct("$(VER_PRODUCTNAME_STR)")]
!endif
!ifdef VER_LEGALCOPYRIGHT_STR
[assembly:System.Reflection.AssemblyCopyright("$(VER_LEGALCOPYRIGHT_STR)")]
!endif
!ifdef VER_COMPANYNAME_STR
[assembly:System.Reflection.AssemblyCompany("$(VER_COMPANYNAME_STR)")]
!endif
!ifdef VER_PRODUCTVERSION_STR
[assembly:System.Reflection.AssemblyFileVersion("$(VER_PRODUCTVERSION_STR)")]
!endif
<<KEEP
!if defined(_ASSEMBLY_IDENTITY) \
        && "$(_ASSEMBLY_IDENTITY_PUBLIC_KEY_NAME_LOWERCASE)" != "none" \
        && "$(_ASSEMBLY_IDENTITY:\=)" == "$(_ASSEMBLY_IDENTITY)" \
        && !defined(_MANAGED_CXX_LIBRARY) \
        && "$(MANAGED_TARGET_TYPE)" != "module"
    asmIdToAttribs.cmd "$(_ASSEMBLY_IDENTITY)" $@.temp csharp
!endif
    $(_MOVE)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test\MPTestHooks\Global.asax.cs ===
//-------------------------------------------------------------------
// <copyright file="Global.asax.cs" company="Microsoft">
//     Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>
//
// <author email="fgao">
//     Feng Gao
// </author>
//
// <summary>
//  Notification Service FrontEnd Global application
// </summary>
//
// <remarks/>
//
// <disclaimer/>
//
// <history date="10/08/2008">
//     Class created
// </history>
//-------------------------------------------------------------------

namespace MPTestHooks
{
    using System;
    using System.Collections;
    using System.Configuration;
    using System.Data;
    using System.IO;
    using System.Web;
    using System.Web.Security;
    using System.Web.SessionState;
    using System.Xml;
    using System.Xml.XPath;
    using AsyncMultiplayer.Common.AzureStorage;
    using Leet.Core.Configuration;
    using Leet.Core.IO;
    using Leet.Core.IoCCo;
    using Wgx.Services.Monitoring;
    using Leet.Live.Livecache;
    using Leet.Core.Diagnostics;


    /// <summary>
    /// Global Application Class.
    /// </summary>
    public class Global : System.Web.HttpApplication
    {
        /// <summary>
        /// Component Name.
        /// </summary>
        private const string ComponentName = "MPTestHooks";

        /// <summary>
        /// The name used in the NPDB configuration. 
        /// </summary>
        private const string ServiceConfigName = "MPTestHooks_www";

        /// <summary>
        /// Gets the Azure storage account
        /// </summary>
        public static string AzureStorageAccount
        {
            get
            {
                IConfigurationProvider configSettings = Container.Instance.GetComponent<IConfigurationProvider>();
                return configSettings.GetSetting(Settings.NotificationFE_AzureStorageAccount);
            }
        }

        /// <summary>
        /// Gets the Azure storage access token
        /// </summary>
        public static string AzureStorageToken
        {
            get
            {
                IConfigurationProvider configSettings = Container.Instance.GetComponent<IConfigurationProvider>();
                return configSettings.GetSetting(Settings.NotificationFE_AzureStorageToken);
            }
        }

        /// <summary>
        /// Gets the Azure table storage access endpoint.
        /// </summary>
        public static string AzureTableStorageEndPoint
        {
            get
            {
                IConfigurationProvider configSettings = Container.Instance.GetComponent<IConfigurationProvider>();
                return configSettings.GetSetting(Settings.AzureTableStorageEndPoint);
            }
        }

        /// <summary>
        /// Gets the Azure blob storage access endpoint. 
        /// </summary>
        public static string AzureBlobStorageEndPoint
        {
            get
            {
                IConfigurationProvider configSettings = Container.Instance.GetComponent<IConfigurationProvider>();
                return configSettings.GetSetting(Settings.AzureBlobStorageEndPoint);
            }
        }

        /// <summary>
        /// Gets the Azure retry count
        /// </summary>
        public static int AzureRetryCount
        {
            get
            {
                IConfigurationProvider configSettings = Container.Instance.GetComponent<IConfigurationProvider>();
                return configSettings.GetIntSetting(Settings.AzureRetryCount);
            }
        }

        /// <summary>
        /// Gets the Azure queue storage access point. 
        /// </summary>
        public static string AzureQueueStorageEndPoint
        {
            get
            {
                IConfigurationProvider configSettings = Container.Instance.GetComponent<IConfigurationProvider>();
                return configSettings.GetSetting(Settings.AzureQueueStorageEndPoint);
            }
        }

        /// <summary>
        /// Gets the proxy address for the environment. 
        /// </summary>
        public static string ProxyAddress
        {
            get
            {
                IConfigurationProvider configSettings = Container.Instance.GetComponent<IConfigurationProvider>();
                return configSettings.GetSetting(Settings.ProxyAddress);
            }
        }

        private static bool isTestLocked = false;

        public static bool IsTestLocked
        {
            get { return isTestLocked; }
            set { isTestLocked = value; }
        }

        private static bool isSpotlightTestLocked = false;

        public static bool IsSpotlightTestLocked
        {
            get { return isSpotlightTestLocked; }
            set { isSpotlightTestLocked = value; }
        }

        private static bool isGameResultTestLocked = false;

        public static bool IsGameResultTestLocked
        {
            get { return isGameResultTestLocked; }
            set { isGameResultTestLocked = value; }
        }

        /// <summary>
        /// Application OnStart event handler.
        /// </summary>
        /// <param name="sender">Sender object.</param>
        /// <param name="e">Event arguments.</param>
        protected void Application_Start(object sender, EventArgs e)
        {
            // register the configuration providers
            Container.Instance.AddService<IRegistryProvider, RegistryProvider>();
            Container.Instance.AddService<IFileSystem, FileSystem>();
            Container.Instance.AddService<ILogFormatter, LogFormatter>();
            Container.Instance.AddService<ILogging, Logging>();
            ConfigurationSelector.RegisterProvider(ServiceConfigName, "LEET");

            // Initialize perfcounters
            StorageClientPerfCounters.Counters =
                PerformanceCounters.GetPerformanceCounters(typeof(StorageClientPerfCounters), Global.ServiceConfigName);
            LeetLivecacheClient.RegisterServiceInterfacesAndInitialize(ServiceConfigName);
        }

        /// <summary>
        /// Application OnEnd event handler.
        /// </summary>
        /// <param name="sender">Sender object.</param>
        /// <param name="e">Event arguments.</param>
        protected void Application_End(object sender, EventArgs e)
        {
        }

        /// <summary>
        /// Application BeginRequest event handler.
        /// </summary>
        /// <param name="sender">Sender object.</param>
        /// <param name="e">Event arguments.</param>
        protected void Application_BeginRequest(object sender, EventArgs e)
        {
            // TODO: add performance counter start 
        }

        /// <summary>
        /// Application EndRequest event handler.
        /// </summary>
        /// <param name="sender">Sender object.</param>
        /// <param name="e">Event arguments.</param>
        protected void Application_EndRequest(object sender, EventArgs e)
        {
            // TODO: add performance counter stop.  
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Common\Tools\MPStress\MainForm.Designer.cs ===
﻿namespace MPStress
{
    partial class mainForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.label1 = new System.Windows.Forms.Label();
            this.txtXuid = new System.Windows.Forms.TextBox();
            this.start = new System.Windows.Forms.Button();
            this.stop = new System.Windows.Forms.Button();
            this.label3 = new System.Windows.Forms.Label();
            this.baseUrl = new System.Windows.Forms.TextBox();
            this.label2 = new System.Windows.Forms.Label();
            this.tps = new System.Windows.Forms.Label();
            this.label4 = new System.Windows.Forms.Label();
            this.durations = new System.Windows.Forms.TextBox();
            this.label5 = new System.Windows.Forms.Label();
            this.threadCount = new System.Windows.Forms.NumericUpDown();
            this.requestBody = new System.Windows.Forms.TextBox();
            this.label6 = new System.Windows.Forms.Label();
            this.label7 = new System.Windows.Forms.Label();
            this.comboBox1 = new System.Windows.Forms.ComboBox();
            this.cboApi = new System.Windows.Forms.ComboBox();
            this.label8 = new System.Windows.Forms.Label();
            this.timeout = new System.Windows.Forms.TextBox();
            this.label9 = new System.Windows.Forms.Label();
            this.label10 = new System.Windows.Forms.Label();
            this.avgLatency = new System.Windows.Forms.Label();
            this.label11 = new System.Windows.Forms.Label();
            this.label12 = new System.Windows.Forms.Label();
            this.label13 = new System.Windows.Forms.Label();
            this.totalSucceeded = new System.Windows.Forms.Label();
            this.totalFailed = new System.Windows.Forms.Label();
            this.totalTimeout = new System.Windows.Forms.Label();
            this.menuStrip1 = new System.Windows.Forms.MenuStrip();
            this.fileToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.exitToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.optionsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.ignoreSSLErrorsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.helpToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.statusStrip1 = new System.Windows.Forms.StatusStrip();
            this.toolStripStatusLabel1 = new System.Windows.Forms.ToolStripStatusLabel();
            this.threadsRunning = new System.Windows.Forms.ToolStripStatusLabel();
            this.btnReset = new System.Windows.Forms.Button();
            this.chkRandomize = new System.Windows.Forms.CheckBox();
            this.avgtps = new System.Windows.Forms.Label();
            this.label15 = new System.Windows.Forms.Label();
            ((System.ComponentModel.ISupportInitialize)(this.threadCount)).BeginInit();
            this.menuStrip1.SuspendLayout();
            this.statusStrip1.SuspendLayout();
            this.SuspendLayout();
            // 
            // label1
            // 
            this.label1.AutoSize = true;
            this.label1.Location = new System.Drawing.Point(24, 138);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(33, 13);
            this.label1.TabIndex = 0;
            this.label1.Text = "XUID";
            // 
            // txtXuid
            // 
            this.txtXuid.Location = new System.Drawing.Point(27, 154);
            this.txtXuid.Multiline = true;
            this.txtXuid.Name = "txtXuid";
            this.txtXuid.ScrollBars = System.Windows.Forms.ScrollBars.Both;
            this.txtXuid.Size = new System.Drawing.Size(176, 22);
            this.txtXuid.TabIndex = 1;
            this.txtXuid.TextChanged += new System.EventHandler(this.userToken_TextChanged);
            // 
            // start
            // 
            this.start.Location = new System.Drawing.Point(46, 530);
            this.start.Name = "start";
            this.start.Size = new System.Drawing.Size(75, 23);
            this.start.TabIndex = 2;
            this.start.Text = "&Start";
            this.start.UseVisualStyleBackColor = true;
            this.start.Click += new System.EventHandler(this.start_Click);
            // 
            // stop
            // 
            this.stop.Location = new System.Drawing.Point(127, 530);
            this.stop.Name = "stop";
            this.stop.Size = new System.Drawing.Size(75, 23);
            this.stop.TabIndex = 3;
            this.stop.Text = "S&top";
            this.stop.UseVisualStyleBackColor = true;
            this.stop.Click += new System.EventHandler(this.stop_Click);
            // 
            // label3
            // 
            this.label3.AutoSize = true;
            this.label3.Location = new System.Drawing.Point(24, 63);
            this.label3.Name = "label3";
            this.label3.Size = new System.Drawing.Size(29, 13);
            this.label3.TabIndex = 4;
            this.label3.Text = "URL";
            // 
            // baseUrl
            // 
            this.baseUrl.Location = new System.Drawing.Point(27, 79);
            this.baseUrl.Multiline = true;
            this.baseUrl.Name = "baseUrl";
            this.baseUrl.ScrollBars = System.Windows.Forms.ScrollBars.Both;
            this.baseUrl.Size = new System.Drawing.Size(292, 50);
            this.baseUrl.TabIndex = 5;
            this.baseUrl.Text = "https://notifications.stress.xboxlive.com:51420/Notifications.svc/?count=10";
            // 
            // label2
            // 
            this.label2.AutoSize = true;
            this.label2.Location = new System.Drawing.Point(71, 377);
            this.label2.Name = "label2";
            this.label2.Size = new System.Drawing.Size(31, 13);
            this.label2.TabIndex = 6;
            this.label2.Text = "TPS:";
            // 
            // tps
            // 
            this.tps.AutoSize = true;
            this.tps.Location = new System.Drawing.Point(101, 377);
            this.tps.Name = "tps";
            this.tps.Size = new System.Drawing.Size(13, 13);
            this.tps.TabIndex = 8;
            this.tps.Text = "0";
            // 
            // label4
            // 
            this.label4.AutoSize = true;
            this.label4.Location = new System.Drawing.Point(24, 445);
            this.label4.Name = "label4";
            this.label4.Size = new System.Drawing.Size(87, 13);
            this.label4.TabIndex = 9;
            this.label4.Text = "Call Latency (ms)";
            // 
            // durations
            // 
            this.durations.Location = new System.Drawing.Point(27, 461);
            this.durations.Multiline = true;
            this.durations.Name = "durations";
            this.durations.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;
            this.durations.Size = new System.Drawing.Size(292, 63);
            this.durations.TabIndex = 10;
            this.durations.WordWrap = false;
            // 
            // label5
            // 
            this.label5.AutoSize = true;
            this.label5.Location = new System.Drawing.Point(53, 350);
            this.label5.Name = "label5";
            this.label5.Size = new System.Drawing.Size(49, 13);
            this.label5.TabIndex = 11;
            this.label5.Text = "Threads:";
            // 
            // threadCount
            // 
            this.threadCount.Location = new System.Drawing.Point(105, 347);
            this.threadCount.Maximum = new decimal(new int[] {
            255,
            0,
            0,
            0});
            this.threadCount.Name = "threadCount";
            this.threadCount.Size = new System.Drawing.Size(120, 20);
            this.threadCount.TabIndex = 12;
            this.threadCount.Value = new decimal(new int[] {
            1,
            0,
            0,
            0});
            this.threadCount.ValueChanged += new System.EventHandler(this.threadCount_ValueChanged);
            // 
            // requestBody
            // 
            this.requestBody.Location = new System.Drawing.Point(27, 208);
            this.requestBody.Multiline = true;
            this.requestBody.Name = "requestBody";
            this.requestBody.ScrollBars = System.Windows.Forms.ScrollBars.Both;
            this.requestBody.Size = new System.Drawing.Size(292, 73);
            this.requestBody.TabIndex = 14;
            // 
            // label6
            // 
            this.label6.AutoSize = true;
            this.label6.Location = new System.Drawing.Point(24, 192);
            this.label6.Name = "label6";
            this.label6.Size = new System.Drawing.Size(74, 13);
            this.label6.TabIndex = 13;
            this.label6.Text = "Request Body";
            // 
            // label7
            // 
            this.label7.AutoSize = true;
            this.label7.Location = new System.Drawing.Point(24, 296);
            this.label7.Name = "label7";
            this.label7.Size = new System.Drawing.Size(78, 13);
            this.label7.TabIndex = 15;
            this.label7.Text = "HTTP Method:";
            // 
            // comboBox1
            // 
            this.comboBox1.FormattingEnabled = true;
            this.comboBox1.Items.AddRange(new object[] {
            "DELETE",
            "GET",
            "POST",
            "PUT"});
            this.comboBox1.Location = new System.Drawing.Point(104, 293);
            this.comboBox1.Name = "comboBox1";
            this.comboBox1.Size = new System.Drawing.Size(121, 21);
            this.comboBox1.TabIndex = 16;
            // 
            // cboApi
            // 
            this.cboApi.FormattingEnabled = true;
            this.cboApi.Items.AddRange(new object[] {
            "CreateSession",
            "DeleteNotification",
            "DeleteNotificationsBySession",
            "E2E",
            "E2E (SMS only)",
            "GetGameState",
            "GetNotifications",
            "GetSpotlight",
            "JoinSession",
            "LeaveSession",
            "ModifySession",
            "PostGameAction",
            "PostGameEnd",
            "PutGameState",
            "RejectInvitation",
            "UpdateNotification",
            "SendInvite",
            "ViewSessions",
            "ViewSessionSummaries"});
            this.cboApi.Location = new System.Drawing.Point(63, 32);
            this.cboApi.Name = "cboApi";
            this.cboApi.Size = new System.Drawing.Size(121, 21);
            this.cboApi.TabIndex = 18;
            this.cboApi.SelectedIndexChanged += new System.EventHandler(this.cboApi_SelectedIndexChanged);
            // 
            // label8
            // 
            this.label8.AutoSize = true;
            this.label8.Location = new System.Drawing.Point(26, 35);
            this.label8.Name = "label8";
            this.label8.Size = new System.Drawing.Size(31, 13);
            this.label8.TabIndex = 17;
            this.label8.Text = "Test:";
            // 
            // timeout
            // 
            this.timeout.Location = new System.Drawing.Point(104, 321);
            this.timeout.Name = "timeout";
            this.timeout.Size = new System.Drawing.Size(121, 20);
            this.timeout.TabIndex = 19;
            this.timeout.Text = "30000";
            // 
            // label9
            // 
            this.label9.AutoSize = true;
            this.label9.Location = new System.Drawing.Point(31, 324);
            this.label9.Name = "label9";
            this.label9.Size = new System.Drawing.Size(70, 13);
            this.label9.TabIndex = 20;
            this.label9.Text = "Timeout (ms):";
            // 
            // label10
            // 
            this.label10.AutoSize = true;
            this.label10.Location = new System.Drawing.Point(28, 421);
            this.label10.Name = "label10";
            this.label10.Size = new System.Drawing.Size(73, 13);
            this.label10.TabIndex = 21;
            this.label10.Text = "Avg. Latency:";
            // 
            // avgLatency
            // 
            this.avgLatency.AutoSize = true;
            this.avgLatency.Location = new System.Drawing.Point(100, 422);
            this.avgLatency.Name = "avgLatency";
            this.avgLatency.Size = new System.Drawing.Size(13, 13);
            this.avgLatency.TabIndex = 22;
            this.avgLatency.Text = "0";
            // 
            // label11
            // 
            this.label11.AutoSize = true;
            this.label11.Location = new System.Drawing.Point(169, 377);
            this.label11.Name = "label11";
            this.label11.Size = new System.Drawing.Size(65, 13);
            this.label11.TabIndex = 23;
            this.label11.Text = "Succeeded:";
            // 
            // label12
            // 
            this.label12.AutoSize = true;
            this.label12.Location = new System.Drawing.Point(196, 399);
            this.label12.Name = "label12";
            this.label12.Size = new System.Drawing.Size(38, 13);
            this.label12.TabIndex = 24;
            this.label12.Text = "Failed:";
            // 
            // label13
            // 
            this.label13.AutoSize = true;
            this.label13.Location = new System.Drawing.Point(175, 421);
            this.label13.Name = "label13";
            this.label13.Size = new System.Drawing.Size(59, 13);
            this.label13.TabIndex = 25;
            this.label13.Text = "Timed Out:";
            // 
            // totalSucceeded
            // 
            this.totalSucceeded.AutoSize = true;
            this.totalSucceeded.Location = new System.Drawing.Point(233, 378);
            this.totalSucceeded.Name = "totalSucceeded";
            this.totalSucceeded.Size = new System.Drawing.Size(13, 13);
            this.totalSucceeded.TabIndex = 26;
            this.totalSucceeded.Text = "0";
            // 
            // totalFailed
            // 
            this.totalFailed.AutoSize = true;
            this.totalFailed.Location = new System.Drawing.Point(233, 400);
            this.totalFailed.Name = "totalFailed";
            this.totalFailed.Size = new System.Drawing.Size(13, 13);
            this.totalFailed.TabIndex = 27;
            this.totalFailed.Text = "0";
            // 
            // totalTimeout
            // 
            this.totalTimeout.AutoSize = true;
            this.totalTimeout.Location = new System.Drawing.Point(233, 422);
            this.totalTimeout.Name = "totalTimeout";
            this.totalTimeout.Size = new System.Drawing.Size(13, 13);
            this.totalTimeout.TabIndex = 28;
            this.totalTimeout.Text = "0";
            // 
            // menuStrip1
            // 
            this.menuStrip1.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.fileToolStripMenuItem,
            this.optionsToolStripMenuItem,
            this.helpToolStripMenuItem});
            this.menuStrip1.Location = new System.Drawing.Point(0, 0);
            this.menuStrip1.Name = "menuStrip1";
            this.menuStrip1.Size = new System.Drawing.Size(346, 24);
            this.menuStrip1.TabIndex = 29;
            this.menuStrip1.Text = "menuStrip1";
            // 
            // fileToolStripMenuItem
            // 
            this.fileToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.exitToolStripMenuItem});
            this.fileToolStripMenuItem.Name = "fileToolStripMenuItem";
            this.fileToolStripMenuItem.Size = new System.Drawing.Size(37, 20);
            this.fileToolStripMenuItem.Text = "&File";
            // 
            // exitToolStripMenuItem
            // 
            this.exitToolStripMenuItem.Name = "exitToolStripMenuItem";
            this.exitToolStripMenuItem.Size = new System.Drawing.Size(92, 22);
            this.exitToolStripMenuItem.Text = "E&xit";
            this.exitToolStripMenuItem.Click += new System.EventHandler(this.exitToolStripMenuItem_Click);
            // 
            // optionsToolStripMenuItem
            // 
            this.optionsToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.ignoreSSLErrorsToolStripMenuItem});
            this.optionsToolStripMenuItem.Name = "optionsToolStripMenuItem";
            this.optionsToolStripMenuItem.Size = new System.Drawing.Size(61, 20);
            this.optionsToolStripMenuItem.Text = "&Options";
            // 
            // ignoreSSLErrorsToolStripMenuItem
            // 
            this.ignoreSSLErrorsToolStripMenuItem.CheckOnClick = true;
            this.ignoreSSLErrorsToolStripMenuItem.Name = "ignoreSSLErrorsToolStripMenuItem";
            this.ignoreSSLErrorsToolStripMenuItem.Size = new System.Drawing.Size(162, 22);
            this.ignoreSSLErrorsToolStripMenuItem.Text = "&Ignore SSL Errors";
            this.ignoreSSLErrorsToolStripMenuItem.Click += new System.EventHandler(this.ignoreSSLErrorsToolStripMenuItem_Click);
            // 
            // helpToolStripMenuItem
            // 
            this.helpToolStripMenuItem.Name = "helpToolStripMenuItem";
            this.helpToolStripMenuItem.Size = new System.Drawing.Size(44, 20);
            this.helpToolStripMenuItem.Text = "&Help";
            // 
            // statusStrip1
            // 
            this.statusStrip1.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripStatusLabel1,
            this.threadsRunning});
            this.statusStrip1.Location = new System.Drawing.Point(0, 562);
            this.statusStrip1.Name = "statusStrip1";
            this.statusStrip1.Size = new System.Drawing.Size(346, 22);
            this.statusStrip1.TabIndex = 30;
            this.statusStrip1.Text = "statusStrip";
            // 
            // toolStripStatusLabel1
            // 
            this.toolStripStatusLabel1.Name = "toolStripStatusLabel1";
            this.toolStripStatusLabel1.Size = new System.Drawing.Size(100, 17);
            this.toolStripStatusLabel1.Text = "Threads Running:";
            // 
            // threadsRunning
            // 
            this.threadsRunning.Name = "threadsRunning";
            this.threadsRunning.Size = new System.Drawing.Size(13, 17);
            this.threadsRunning.Text = "0";
            // 
            // btnReset
            // 
            this.btnReset.Location = new System.Drawing.Point(208, 530);
            this.btnReset.Name = "btnReset";
            this.btnReset.Size = new System.Drawing.Size(75, 23);
            this.btnReset.TabIndex = 31;
            this.btnReset.Text = "&Reset";
            this.btnReset.UseVisualStyleBackColor = true;
            this.btnReset.Click += new System.EventHandler(this.btnReset_Click);
            // 
            // chkRandomize
            // 
            this.chkRandomize.AutoSize = true;
            this.chkRandomize.Location = new System.Drawing.Point(210, 158);
            this.chkRandomize.Name = "chkRandomize";
            this.chkRandomize.Size = new System.Drawing.Size(79, 17);
            this.chkRandomize.TabIndex = 32;
            this.chkRandomize.Text = "Randomize";
            this.chkRandomize.UseVisualStyleBackColor = true;
            this.chkRandomize.CheckedChanged += new System.EventHandler(this.chkRandomize_CheckedChanged);
            // 
            // avgtps
            // 
            this.avgtps.AutoSize = true;
            this.avgtps.Location = new System.Drawing.Point(101, 399);
            this.avgtps.Name = "avgtps";
            this.avgtps.Size = new System.Drawing.Size(13, 13);
            this.avgtps.TabIndex = 34;
            this.avgtps.Text = "0";
            // 
            // label15
            // 
            this.label15.AutoSize = true;
            this.label15.Location = new System.Drawing.Point(43, 400);
            this.label15.Name = "label15";
            this.label15.Size = new System.Drawing.Size(56, 13);
            this.label15.TabIndex = 33;
            this.label15.Text = "Avg. TPS:";
            // 
            // mainForm
            // 
            this.AcceptButton = this.start;
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(346, 584);
            this.Controls.Add(this.avgtps);
            this.Controls.Add(this.label15);
            this.Controls.Add(this.chkRandomize);
            this.Controls.Add(this.btnReset);
            this.Controls.Add(this.statusStrip1);
            this.Controls.Add(this.totalTimeout);
            this.Controls.Add(this.totalFailed);
            this.Controls.Add(this.totalSucceeded);
            this.Controls.Add(this.label13);
            this.Controls.Add(this.label12);
            this.Controls.Add(this.label11);
            this.Controls.Add(this.avgLatency);
            this.Controls.Add(this.label10);
            this.Controls.Add(this.label9);
            this.Controls.Add(this.timeout);
            this.Controls.Add(this.cboApi);
            this.Controls.Add(this.label8);
            this.Controls.Add(this.comboBox1);
            this.Controls.Add(this.label7);
            this.Controls.Add(this.requestBody);
            this.Controls.Add(this.label6);
            this.Controls.Add(this.threadCount);
            this.Controls.Add(this.label5);
            this.Controls.Add(this.durations);
            this.Controls.Add(this.label4);
            this.Controls.Add(this.tps);
            this.Controls.Add(this.label2);
            this.Controls.Add(this.baseUrl);
            this.Controls.Add(this.label3);
            this.Controls.Add(this.stop);
            this.Controls.Add(this.start);
            this.Controls.Add(this.txtXuid);
            this.Controls.Add(this.label1);
            this.Controls.Add(this.menuStrip1);
            this.MainMenuStrip = this.menuStrip1;
            this.Name = "mainForm";
            this.Text = "MP Xtress Tool Ultimate v0.01 Beta, Sign-off Edition";
            this.FormClosing += new System.Windows.Forms.FormClosingEventHandler(this.mainForm_FormClosing);
            ((System.ComponentModel.ISupportInitialize)(this.threadCount)).EndInit();
            this.menuStrip1.ResumeLayout(false);
            this.menuStrip1.PerformLayout();
            this.statusStrip1.ResumeLayout(false);
            this.statusStrip1.PerformLayout();
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.Label label1;
        private System.Windows.Forms.TextBox txtXuid;
        private System.Windows.Forms.Button start;
        private System.Windows.Forms.Button stop;
        private System.Windows.Forms.Label label3;
        private System.Windows.Forms.TextBox baseUrl;
        private System.Windows.Forms.Label label2;
        private System.Windows.Forms.Label tps;
        private System.Windows.Forms.Label label4;
        private System.Windows.Forms.TextBox durations;
        private System.Windows.Forms.Label label5;
        private System.Windows.Forms.NumericUpDown threadCount;
        private System.Windows.Forms.TextBox requestBody;
        private System.Windows.Forms.Label label6;
        private System.Windows.Forms.Label label7;
        private System.Windows.Forms.ComboBox comboBox1;
        private System.Windows.Forms.ComboBox cboApi;
        private System.Windows.Forms.Label label8;
        private System.Windows.Forms.TextBox timeout;
        private System.Windows.Forms.Label label9;
        private System.Windows.Forms.Label label10;
        private System.Windows.Forms.Label avgLatency;
        private System.Windows.Forms.Label label11;
        private System.Windows.Forms.Label label12;
        private System.Windows.Forms.Label label13;
        private System.Windows.Forms.Label totalSucceeded;
        private System.Windows.Forms.Label totalFailed;
        private System.Windows.Forms.Label totalTimeout;
        private System.Windows.Forms.MenuStrip menuStrip1;
        private System.Windows.Forms.ToolStripMenuItem fileToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem optionsToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem helpToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem ignoreSSLErrorsToolStripMenuItem;
        private System.Windows.Forms.StatusStrip statusStrip1;
        private System.Windows.Forms.ToolStripStatusLabel toolStripStatusLabel1;
        private System.Windows.Forms.ToolStripStatusLabel threadsRunning;
        private System.Windows.Forms.ToolStripMenuItem exitToolStripMenuItem;
        private System.Windows.Forms.Button btnReset;
        private System.Windows.Forms.CheckBox chkRandomize;
        private System.Windows.Forms.Label avgtps;
        private System.Windows.Forms.Label label15;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Common\Tools\MultiplayerUI\MainForm.Designer.cs ===
﻿namespace MultiplayerUI
{
    partial class MainForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.menuStrip = new System.Windows.Forms.MenuStrip();
            this.fileToolStripMenuItem1 = new System.Windows.Forms.ToolStripMenuItem();
            this.exitToolStripMenuItem1 = new System.Windows.Forms.ToolStripMenuItem();
            this.oPtionsToolStripMenuItem1 = new System.Windows.Forms.ToolStripMenuItem();
            this.environmentToolStripMenuItem1 = new System.Windows.Forms.ToolStripMenuItem();
            this.helpToolStripMenuItem1 = new System.Windows.Forms.ToolStripMenuItem();
            this.aboutMultiplayerUIToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.fileToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.optionsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.helpToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.statusStrip1 = new System.Windows.Forms.StatusStrip();
            this.exitToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.environmentToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.tabControl = new System.Windows.Forms.TabControl();
            this.tabPage1 = new System.Windows.Forms.TabPage();
            this.sessionHttpStatus = new System.Windows.Forms.Label();
            this.label11 = new System.Windows.Forms.Label();
            this.sessionAPI = new System.Windows.Forms.ComboBox();
            this.label8 = new System.Windows.Forms.Label();
            this.sessionSend = new System.Windows.Forms.Button();
            this.label7 = new System.Windows.Forms.Label();
            this.sessionBody = new System.Windows.Forms.TextBox();
            this.label3 = new System.Windows.Forms.Label();
            this.sessionResponse = new System.Windows.Forms.TextBox();
            this.sts = new System.Windows.Forms.Button();
            this.rps = new System.Windows.Forms.Button();
            this.label2 = new System.Windows.Forms.Label();
            this.sessionHttpHeaders = new System.Windows.Forms.TextBox();
            this.label1 = new System.Windows.Forms.Label();
            this.sessionUrl = new System.Windows.Forms.TextBox();
            this.tabPage2 = new System.Windows.Forms.TabPage();
            this.comboBox1 = new System.Windows.Forms.ComboBox();
            this.label4 = new System.Windows.Forms.Label();
            this.button1 = new System.Windows.Forms.Button();
            this.label5 = new System.Windows.Forms.Label();
            this.textBox1 = new System.Windows.Forms.TextBox();
            this.label6 = new System.Windows.Forms.Label();
            this.textBox2 = new System.Windows.Forms.TextBox();
            this.button2 = new System.Windows.Forms.Button();
            this.button3 = new System.Windows.Forms.Button();
            this.label9 = new System.Windows.Forms.Label();
            this.textBox3 = new System.Windows.Forms.TextBox();
            this.label10 = new System.Windows.Forms.Label();
            this.textBox4 = new System.Windows.Forms.TextBox();
            this.tabPage3 = new System.Windows.Forms.TabPage();
            this.label12 = new System.Windows.Forms.Label();
            this.gmsRequestUrl = new System.Windows.Forms.TextBox();
            this.button4 = new System.Windows.Forms.Button();
            this.gmsRequestBody = new System.Windows.Forms.TextBox();
            this.tabPage4 = new System.Windows.Forms.TabPage();
            this.menuStrip.SuspendLayout();
            this.tabControl.SuspendLayout();
            this.tabPage1.SuspendLayout();
            this.tabPage2.SuspendLayout();
            this.tabPage3.SuspendLayout();
            this.SuspendLayout();
            // 
            // menuStrip
            // 
            this.menuStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.fileToolStripMenuItem1,
            this.oPtionsToolStripMenuItem1,
            this.helpToolStripMenuItem1});
            this.menuStrip.Location = new System.Drawing.Point(0, 0);
            this.menuStrip.Name = "menuStrip";
            this.menuStrip.Size = new System.Drawing.Size(607, 24);
            this.menuStrip.TabIndex = 0;
            this.menuStrip.Text = "menuStrip1";
            // 
            // fileToolStripMenuItem1
            // 
            this.fileToolStripMenuItem1.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.exitToolStripMenuItem1});
            this.fileToolStripMenuItem1.Name = "fileToolStripMenuItem1";
            this.fileToolStripMenuItem1.Size = new System.Drawing.Size(35, 20);
            this.fileToolStripMenuItem1.Text = "&File";
            // 
            // exitToolStripMenuItem1
            // 
            this.exitToolStripMenuItem1.Name = "exitToolStripMenuItem1";
            this.exitToolStripMenuItem1.Size = new System.Drawing.Size(92, 22);
            this.exitToolStripMenuItem1.Text = "E&xit";
            // 
            // oPtionsToolStripMenuItem1
            // 
            this.oPtionsToolStripMenuItem1.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.environmentToolStripMenuItem1});
            this.oPtionsToolStripMenuItem1.Name = "oPtionsToolStripMenuItem1";
            this.oPtionsToolStripMenuItem1.Size = new System.Drawing.Size(56, 20);
            this.oPtionsToolStripMenuItem1.Text = "&Options";
            // 
            // environmentToolStripMenuItem1
            // 
            this.environmentToolStripMenuItem1.Name = "environmentToolStripMenuItem1";
            this.environmentToolStripMenuItem1.Size = new System.Drawing.Size(134, 22);
            this.environmentToolStripMenuItem1.Text = "&Environment";
            // 
            // helpToolStripMenuItem1
            // 
            this.helpToolStripMenuItem1.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.aboutMultiplayerUIToolStripMenuItem});
            this.helpToolStripMenuItem1.Name = "helpToolStripMenuItem1";
            this.helpToolStripMenuItem1.Size = new System.Drawing.Size(40, 20);
            this.helpToolStripMenuItem1.Text = "&Help";
            // 
            // aboutMultiplayerUIToolStripMenuItem
            // 
            this.aboutMultiplayerUIToolStripMenuItem.Name = "aboutMultiplayerUIToolStripMenuItem";
            this.aboutMultiplayerUIToolStripMenuItem.Size = new System.Drawing.Size(184, 22);
            this.aboutMultiplayerUIToolStripMenuItem.Text = "&About Multiplayer UI...";
            // 
            // fileToolStripMenuItem
            // 
            this.fileToolStripMenuItem.Name = "fileToolStripMenuItem";
            this.fileToolStripMenuItem.Size = new System.Drawing.Size(35, 20);
            this.fileToolStripMenuItem.Text = "&File";
            // 
            // optionsToolStripMenuItem
            // 
            this.optionsToolStripMenuItem.Name = "optionsToolStripMenuItem";
            this.optionsToolStripMenuItem.Size = new System.Drawing.Size(56, 20);
            this.optionsToolStripMenuItem.Text = "&Options";
            // 
            // helpToolStripMenuItem
            // 
            this.helpToolStripMenuItem.Name = "helpToolStripMenuItem";
            this.helpToolStripMenuItem.Size = new System.Drawing.Size(40, 20);
            this.helpToolStripMenuItem.Text = "&Help";
            // 
            // statusStrip1
            // 
            this.statusStrip1.Location = new System.Drawing.Point(0, 697);
            this.statusStrip1.Name = "statusStrip1";
            this.statusStrip1.Size = new System.Drawing.Size(607, 22);
            this.statusStrip1.TabIndex = 1;
            this.statusStrip1.Text = "statusStrip1";
            // 
            // exitToolStripMenuItem
            // 
            this.exitToolStripMenuItem.Name = "exitToolStripMenuItem";
            this.exitToolStripMenuItem.Size = new System.Drawing.Size(152, 22);
            this.exitToolStripMenuItem.Text = "E&xit";
            // 
            // environmentToolStripMenuItem
            // 
            this.environmentToolStripMenuItem.Name = "environmentToolStripMenuItem";
            this.environmentToolStripMenuItem.Size = new System.Drawing.Size(152, 22);
            this.environmentToolStripMenuItem.Text = "Environment";
            // 
            // tabControl
            // 
            this.tabControl.Controls.Add(this.tabPage1);
            this.tabControl.Controls.Add(this.tabPage2);
            this.tabControl.Controls.Add(this.tabPage3);
            this.tabControl.Controls.Add(this.tabPage4);
            this.tabControl.Location = new System.Drawing.Point(21, 37);
            this.tabControl.Name = "tabControl";
            this.tabControl.SelectedIndex = 0;
            this.tabControl.Size = new System.Drawing.Size(564, 643);
            this.tabControl.TabIndex = 11;
            // 
            // tabPage1
            // 
            this.tabPage1.Controls.Add(this.sessionHttpStatus);
            this.tabPage1.Controls.Add(this.sessionAPI);
            this.tabPage1.Controls.Add(this.label8);
            this.tabPage1.Controls.Add(this.sessionSend);
            this.tabPage1.Controls.Add(this.label7);
            this.tabPage1.Controls.Add(this.sessionBody);
            this.tabPage1.Controls.Add(this.label3);
            this.tabPage1.Controls.Add(this.sessionResponse);
            this.tabPage1.Controls.Add(this.sts);
            this.tabPage1.Controls.Add(this.rps);
            this.tabPage1.Controls.Add(this.label2);
            this.tabPage1.Controls.Add(this.sessionHttpHeaders);
            this.tabPage1.Controls.Add(this.label1);
            this.tabPage1.Controls.Add(this.sessionUrl);
            this.tabPage1.Location = new System.Drawing.Point(4, 22);
            this.tabPage1.Name = "tabPage1";
            this.tabPage1.Padding = new System.Windows.Forms.Padding(3);
            this.tabPage1.Size = new System.Drawing.Size(556, 617);
            this.tabPage1.TabIndex = 0;
            this.tabPage1.Text = "Game Session";
            this.tabPage1.UseVisualStyleBackColor = true;
            // 
            // sessionHttpStatus
            // 
            this.sessionHttpStatus.AutoSize = true;
            this.sessionHttpStatus.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.sessionHttpStatus.Location = new System.Drawing.Point(135, 440);
            this.sessionHttpStatus.Name = "sessionHttpStatus";
            this.sessionHttpStatus.Size = new System.Drawing.Size(0, 13);
            this.sessionHttpStatus.TabIndex = 26;
            // 
            // label11
            // 
            this.label11.AutoSize = true;
            this.label11.Location = new System.Drawing.Point(31, 10);
            this.label11.Name = "label11";
            this.label11.Size = new System.Drawing.Size(63, 13);
            this.label11.TabIndex = 38;
            this.label11.Text = "Request Url";
            // 
            // sessionAPI
            // 
            this.sessionAPI.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.sessionAPI.Items.AddRange(new object[] {
            "CreateSession",
            "JoinSession",
            "LeaveSession",
            "ModifySession",
            "RejectInvitation",
            "ViewSession",
            "ViewSessionSummaries"});
            this.sessionAPI.Location = new System.Drawing.Point(65, 16);
            this.sessionAPI.Name = "sessionAPI";
            this.sessionAPI.Size = new System.Drawing.Size(167, 21);
            this.sessionAPI.TabIndex = 24;
            this.sessionAPI.SelectedIndexChanged += new System.EventHandler(this.sessionAPI_SelectedIndexChanged);
            // 
            // label8
            // 
            this.label8.AutoSize = true;
            this.label8.Location = new System.Drawing.Point(38, 20);
            this.label8.Name = "label8";
            this.label8.Size = new System.Drawing.Size(27, 13);
            this.label8.TabIndex = 23;
            this.label8.Text = "API:";
            // 
            // sessionSend
            // 
            this.sessionSend.Location = new System.Drawing.Point(419, 398);
            this.sessionSend.Name = "sessionSend";
            this.sessionSend.Size = new System.Drawing.Size(100, 23);
            this.sessionSend.TabIndex = 22;
            this.sessionSend.Text = "&Send Request";
            this.sessionSend.UseVisualStyleBackColor = true;
            this.sessionSend.Click += new System.EventHandler(this.sessionSend_Click);
            // 
            // label7
            // 
            this.label7.AutoSize = true;
            this.label7.Location = new System.Drawing.Point(38, 278);
            this.label7.Name = "label7";
            this.label7.Size = new System.Drawing.Size(63, 13);
            this.label7.TabIndex = 21;
            this.label7.Text = "HTTP Body";
            // 
            // sessionBody
            // 
            this.sessionBody.Location = new System.Drawing.Point(41, 294);
            this.sessionBody.Multiline = true;
            this.sessionBody.Name = "sessionBody";
            this.sessionBody.ScrollBars = System.Windows.Forms.ScrollBars.Both;
            this.sessionBody.Size = new System.Drawing.Size(478, 98);
            this.sessionBody.TabIndex = 20;
            this.sessionBody.WordWrap = false;
            // 
            // label3
            // 
            this.label3.AutoSize = true;
            this.label3.Location = new System.Drawing.Point(39, 462);
            this.label3.Name = "label3";
            this.label3.Size = new System.Drawing.Size(58, 13);
            this.label3.TabIndex = 19;
            this.label3.Text = "Response:";
            // 
            // sessionResponse
            // 
            this.sessionResponse.Location = new System.Drawing.Point(41, 478);
            this.sessionResponse.Multiline = true;
            this.sessionResponse.Name = "sessionResponse";
            this.sessionResponse.ScrollBars = System.Windows.Forms.ScrollBars.Both;
            this.sessionResponse.Size = new System.Drawing.Size(478, 124);
            this.sessionResponse.TabIndex = 18;
            // 
            // sts
            // 
            this.sts.Location = new System.Drawing.Point(397, 243);
            this.sts.Name = "sts";
            this.sts.Size = new System.Drawing.Size(122, 23);
            this.sts.TabIndex = 16;
            this.sts.Text = "Generate S&TS token";
            this.sts.UseVisualStyleBackColor = true;
            // 
            // rps
            // 
            this.rps.Location = new System.Drawing.Point(268, 243);
            this.rps.Name = "rps";
            this.rps.Size = new System.Drawing.Size(122, 23);
            this.rps.TabIndex = 15;
            this.rps.Text = "Generate &RPS ticket";
            this.rps.UseVisualStyleBackColor = true;
            // 
            // label2
            // 
            this.label2.AutoSize = true;
            this.label2.Location = new System.Drawing.Point(38, 123);
            this.label2.Name = "label2";
            this.label2.Size = new System.Drawing.Size(79, 13);
            this.label2.TabIndex = 14;
            this.label2.Text = "HTTP Headers";
            // 
            // sessionHttpHeaders
            // 
            this.sessionHttpHeaders.Location = new System.Drawing.Point(41, 139);
            this.sessionHttpHeaders.Multiline = true;
            this.sessionHttpHeaders.Name = "sessionHttpHeaders";
            this.sessionHttpHeaders.Size = new System.Drawing.Size(478, 98);
            this.sessionHttpHeaders.TabIndex = 13;
            // 
            // label1
            // 
            this.label1.AutoSize = true;
            this.label1.Location = new System.Drawing.Point(38, 50);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(63, 13);
            this.label1.TabIndex = 12;
            this.label1.Text = "Request Url";
            // 
            // sessionUrl
            // 
            this.sessionUrl.Location = new System.Drawing.Point(41, 66);
            this.sessionUrl.Multiline = true;
            this.sessionUrl.Name = "sessionUrl";
            this.sessionUrl.Size = new System.Drawing.Size(478, 40);
            this.sessionUrl.TabIndex = 11;
            this.sessionUrl.Text = "http://sessions.storax.xboxlive.com/Sessions.svc";
            // 
            // tabPage2
            // 
            this.tabPage2.Controls.Add(this.comboBox1);
            this.tabPage2.Controls.Add(this.label4);
            this.tabPage2.Controls.Add(this.button1);
            this.tabPage2.Controls.Add(this.label5);
            this.tabPage2.Controls.Add(this.textBox1);
            this.tabPage2.Controls.Add(this.label6);
            this.tabPage2.Controls.Add(this.textBox2);
            this.tabPage2.Controls.Add(this.button2);
            this.tabPage2.Controls.Add(this.button3);
            this.tabPage2.Controls.Add(this.label9);
            this.tabPage2.Controls.Add(this.textBox3);
            this.tabPage2.Controls.Add(this.label10);
            this.tabPage2.Controls.Add(this.textBox4);
            this.tabPage2.Location = new System.Drawing.Point(4, 22);
            this.tabPage2.Name = "tabPage2";
            this.tabPage2.Padding = new System.Windows.Forms.Padding(3);
            this.tabPage2.Size = new System.Drawing.Size(556, 617);
            this.tabPage2.TabIndex = 1;
            this.tabPage2.Text = "Notifications";
            this.tabPage2.UseVisualStyleBackColor = true;
            // 
            // comboBox1
            // 
            this.comboBox1.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.comboBox1.Items.AddRange(new object[] {
            "CreateSession",
            "JoinSession",
            "LeaveSession",
            "ModifySession",
            "ViewSession",
            "",
            ""});
            this.comboBox1.Location = new System.Drawing.Point(65, 16);
            this.comboBox1.Name = "comboBox1";
            this.comboBox1.Size = new System.Drawing.Size(167, 21);
            this.comboBox1.TabIndex = 37;
            // 
            // label4
            // 
            this.label4.AutoSize = true;
            this.label4.Location = new System.Drawing.Point(38, 20);
            this.label4.Name = "label4";
            this.label4.Size = new System.Drawing.Size(27, 13);
            this.label4.TabIndex = 36;
            this.label4.Text = "API:";
            // 
            // button1
            // 
            this.button1.Location = new System.Drawing.Point(419, 398);
            this.button1.Name = "button1";
            this.button1.Size = new System.Drawing.Size(100, 23);
            this.button1.TabIndex = 35;
            this.button1.Text = "&Send Request";
            this.button1.UseVisualStyleBackColor = true;
            // 
            // label5
            // 
            this.label5.AutoSize = true;
            this.label5.Location = new System.Drawing.Point(38, 278);
            this.label5.Name = "label5";
            this.label5.Size = new System.Drawing.Size(63, 13);
            this.label5.TabIndex = 34;
            this.label5.Text = "HTTP Body";
            // 
            // textBox1
            // 
            this.textBox1.Location = new System.Drawing.Point(41, 294);
            this.textBox1.Multiline = true;
            this.textBox1.Name = "textBox1";
            this.textBox1.Size = new System.Drawing.Size(478, 98);
            this.textBox1.TabIndex = 33;
            // 
            // label6
            // 
            this.label6.AutoSize = true;
            this.label6.Location = new System.Drawing.Point(39, 429);
            this.label6.Name = "label6";
            this.label6.Size = new System.Drawing.Size(58, 13);
            this.label6.TabIndex = 32;
            this.label6.Text = "Response:";
            // 
            // textBox2
            // 
            this.textBox2.Location = new System.Drawing.Point(41, 445);
            this.textBox2.Multiline = true;
            this.textBox2.Name = "textBox2";
            this.textBox2.Size = new System.Drawing.Size(478, 124);
            this.textBox2.TabIndex = 31;
            // 
            // button2
            // 
            this.button2.Location = new System.Drawing.Point(397, 243);
            this.button2.Name = "button2";
            this.button2.Size = new System.Drawing.Size(122, 23);
            this.button2.TabIndex = 30;
            this.button2.Text = "Generate S&TS token";
            this.button2.UseVisualStyleBackColor = true;
            // 
            // button3
            // 
            this.button3.Location = new System.Drawing.Point(268, 243);
            this.button3.Name = "button3";
            this.button3.Size = new System.Drawing.Size(122, 23);
            this.button3.TabIndex = 29;
            this.button3.Text = "Generate &RPS ticket";
            this.button3.UseVisualStyleBackColor = true;
            // 
            // label9
            // 
            this.label9.AutoSize = true;
            this.label9.Location = new System.Drawing.Point(38, 123);
            this.label9.Name = "label9";
            this.label9.Size = new System.Drawing.Size(79, 13);
            this.label9.TabIndex = 28;
            this.label9.Text = "HTTP Headers";
            // 
            // textBox3
            // 
            this.textBox3.Location = new System.Drawing.Point(41, 139);
            this.textBox3.Multiline = true;
            this.textBox3.Name = "textBox3";
            this.textBox3.Size = new System.Drawing.Size(478, 98);
            this.textBox3.TabIndex = 27;
            // 
            // label10
            // 
            this.label10.AutoSize = true;
            this.label10.Location = new System.Drawing.Point(38, 50);
            this.label10.Name = "label10";
            this.label10.Size = new System.Drawing.Size(63, 13);
            this.label10.TabIndex = 26;
            this.label10.Text = "Request Url";
            // 
            // textBox4
            // 
            this.textBox4.Location = new System.Drawing.Point(41, 66);
            this.textBox4.Multiline = true;
            this.textBox4.Name = "textBox4";
            this.textBox4.Size = new System.Drawing.Size(478, 40);
            this.textBox4.TabIndex = 25;
            // 
            // tabPage3
            // 
            this.tabPage3.Controls.Add(this.label12);
            this.tabPage3.Controls.Add(this.label11);
            this.tabPage3.Controls.Add(this.gmsRequestUrl);
            this.tabPage3.Controls.Add(this.button4);
            this.tabPage3.Controls.Add(this.gmsRequestBody);
            this.tabPage3.Location = new System.Drawing.Point(4, 22);
            this.tabPage3.Name = "tabPage3";
            this.tabPage3.Size = new System.Drawing.Size(556, 617);
            this.tabPage3.TabIndex = 0;
            this.tabPage3.Text = "GMS";
            this.tabPage3.UseVisualStyleBackColor = true;
            // 
            // label12
            // 
            this.label12.AutoSize = true;
            this.label12.Location = new System.Drawing.Point(31, 90);
            this.label12.Name = "label12";
            this.label12.Size = new System.Drawing.Size(74, 13);
            this.label12.TabIndex = 39;
            this.label12.Text = "Request Body";
            // 
            // gmsRequestUrl
            // 
            this.gmsRequestUrl.Location = new System.Drawing.Point(34, 26);
            this.gmsRequestUrl.Multiline = true;
            this.gmsRequestUrl.Name = "gmsRequestUrl";
            this.gmsRequestUrl.Size = new System.Drawing.Size(478, 40);
            this.gmsRequestUrl.TabIndex = 37;
            this.gmsRequestUrl.Text = "http://gms.storax.xbox.com/Ingestion.svc";
            // 
            // button4
            // 
            this.button4.Location = new System.Drawing.Point(412, 500);
            this.button4.Name = "button4";
            this.button4.Size = new System.Drawing.Size(100, 23);
            this.button4.TabIndex = 36;
            this.button4.Text = "&Send Request";
            this.button4.UseVisualStyleBackColor = true;
            this.button4.Click += new System.EventHandler(this.button4_Click);
            // 
            // gmsRequestBody
            // 
            this.gmsRequestBody.Location = new System.Drawing.Point(34, 119);
            this.gmsRequestBody.Multiline = true;
            this.gmsRequestBody.Name = "gmsRequestBody";
            this.gmsRequestBody.Size = new System.Drawing.Size(478, 375);
            this.gmsRequestBody.TabIndex = 0;
            // 
            // tabPage4
            // 
            this.tabPage4.Location = new System.Drawing.Point(4, 22);
            this.tabPage4.Name = "tabPage4";
            this.tabPage4.Padding = new System.Windows.Forms.Padding(3);
            this.tabPage4.Size = new System.Drawing.Size(556, 617);
            this.tabPage4.TabIndex = 2;
            this.tabPage4.Text = "tabPage4";
            this.tabPage4.UseVisualStyleBackColor = true;
            // 
            // MainForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(607, 719);
            this.Controls.Add(this.tabControl);
            this.Controls.Add(this.statusStrip1);
            this.Controls.Add(this.menuStrip);
            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
            this.MainMenuStrip = this.menuStrip;
            this.Name = "MainForm";
            this.Text = "Multiplayer UI";
            this.Load += new System.EventHandler(this.MainForm_Load);
            this.menuStrip.ResumeLayout(false);
            this.menuStrip.PerformLayout();
            this.tabControl.ResumeLayout(false);
            this.tabPage1.ResumeLayout(false);
            this.tabPage1.PerformLayout();
            this.tabPage2.ResumeLayout(false);
            this.tabPage2.PerformLayout();
            this.tabPage3.ResumeLayout(false);
            this.tabPage3.PerformLayout();
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.MenuStrip menuStrip;
        private System.Windows.Forms.ToolStripMenuItem fileToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem optionsToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem helpToolStripMenuItem;
        private System.Windows.Forms.StatusStrip statusStrip1;
        private System.Windows.Forms.ToolStripMenuItem exitToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem environmentToolStripMenuItem;
        private System.Windows.Forms.TabControl tabControl;
        private System.Windows.Forms.TabPage tabPage1;
        private System.Windows.Forms.Label label3;
        private System.Windows.Forms.TextBox sessionResponse;
        private System.Windows.Forms.Button sts;
        private System.Windows.Forms.Button rps;
        private System.Windows.Forms.Label label2;
        private System.Windows.Forms.TextBox sessionHttpHeaders;
        private System.Windows.Forms.Label label1;
        private System.Windows.Forms.TextBox sessionUrl;
        private System.Windows.Forms.TabPage tabPage2;
        private System.Windows.Forms.ToolStripMenuItem fileToolStripMenuItem1;
        private System.Windows.Forms.ToolStripMenuItem oPtionsToolStripMenuItem1;
        private System.Windows.Forms.ToolStripMenuItem helpToolStripMenuItem1;
        private System.Windows.Forms.ToolStripMenuItem exitToolStripMenuItem1;
        private System.Windows.Forms.ToolStripMenuItem aboutMultiplayerUIToolStripMenuItem;
        private System.Windows.Forms.Button sessionSend;
        private System.Windows.Forms.Label label7;
        private System.Windows.Forms.TextBox sessionBody;
        private System.Windows.Forms.ComboBox sessionAPI;
        private System.Windows.Forms.Label label8;
        private System.Windows.Forms.ComboBox comboBox1;
        private System.Windows.Forms.Label label4;
        private System.Windows.Forms.Button button1;
        private System.Windows.Forms.Label label5;
        private System.Windows.Forms.TextBox textBox1;
        private System.Windows.Forms.Label label6;
        private System.Windows.Forms.TextBox textBox2;
        private System.Windows.Forms.Button button2;
        private System.Windows.Forms.Button button3;
        private System.Windows.Forms.Label label9;
        private System.Windows.Forms.TextBox textBox3;
        private System.Windows.Forms.Label label10;
        private System.Windows.Forms.TextBox textBox4;
        private System.Windows.Forms.ToolStripMenuItem environmentToolStripMenuItem1;
        private System.Windows.Forms.Label sessionHttpStatus;
        private System.Windows.Forms.Label label11;
        private System.Windows.Forms.TabPage tabPage3;
        private System.Windows.Forms.TextBox gmsRequestBody;
        private System.Windows.Forms.Label label12;
        private System.Windows.Forms.TextBox gmsRequestUrl;
        private System.Windows.Forms.Button button4;
        private System.Windows.Forms.TabPage tabPage4;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Common\Tools\MultiplayerUI\MainForm.cs ===
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Threading;
using AsyncMultiplayer.SessionCommon;
using LiveN.Test.Common.Web;
using Multiplayer.Test.Proxy;
using LiveN.Test.Common;

namespace MultiplayerUI
{
    /// <summary>
    /// 
    /// </summary>
    public partial class MainForm : Form
    {
        /// <summary>
        /// 
        /// </summary>
        public MainForm()
        {
            InitializeComponent();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void sessionAPI_SelectedIndexChanged(object sender, EventArgs e)
        {
            ClearSessionForm();
            
            SessionsService sessionsSvc = new SessionsService("http://sessions.test.xboxlive.com/Sessions.svc");
            this.sessionHttpHeaders.Text = FormatHttpHeaders(sessionsSvc.GetHttpHeaders());

            switch (this.sessionAPI.Text)
            {
                case "CreateSession":
                    {
                        this.sessionUrl.Text = sessionsSvc.FormatCreateSessionUrl("{gameId}");
                        CreationData creationData = new CreationData();
                        creationData.CanRemoveEmptySeats = true;
                        creationData.DisplayName = "asdfasdf";
                        creationData.GameID = 0;
                        creationData.ReservedSeatsAvailable = 5;
                        creationData.Variant = 0;
                        creationData.TotalSeatsAvailable = 10;
                        creationData.InactivityWarning = new InactivityWarningBehavior() { Action = InactivityWarningAction.Kick, Interval = 30, MaxNumberOfNudges = 3 };

                        this.sessionBody.Text = FormatXml(SessionsService.SerializeObject(creationData));
                        break;
                    }
            }
        }

        /// <summary>
        /// 
        /// </summary>
        private void ClearSessionForm()
        {
            this.sessionBody.Clear();
            this.sessionHttpHeaders.Clear();
            this.sessionResponse.Clear();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="httpHeaders"></param>
        /// <returns></returns>
        private static string FormatHttpHeaders(Dictionary<string, string> httpHeaders)
        {
            StringBuilder headers = new StringBuilder();
            foreach (string key in httpHeaders.Keys)
                headers.AppendFormat("{0}: {1}\r\n", key, httpHeaders[key]);

            return headers.ToString();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="httpHeadersText"></param>
        /// <returns></returns>
        private static Dictionary<string, string> GetHttpHeadersFromText(string httpHeadersText)
        {
            Dictionary<string, string> httpHeaders = new Dictionary<string, string>();
            string[] headers = httpHeadersText.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries);
            
            for (int i = 0; i < headers.Length; i++)
            {
                string[] parts = headers[i].Split(':');
                if (parts.Length == 2)
                {
                    httpHeaders.Add(parts[0].Trim(), parts[1].Trim());
                }
            }

            return httpHeaders;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="httpHeaders"></param>
        /// <returns></returns>
        private static string GetTextFromHttpHeaders(Dictionary<string, string> httpHeaders)
        {
            StringBuilder headers = new StringBuilder();
            foreach (string key in httpHeaders.Keys)
                headers.AppendFormat("{0}:\t{1}\r\n", key, httpHeaders[key]);

            return headers.ToString() + Environment.NewLine;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="xml"></param>
        /// <returns></returns>
        private static string FormatXml(string xml)
        {
            XmlDocumentEx xmlDoc = new XmlDocumentEx(xml, true);
            return xmlDoc.FormatXml(2, ' ', '"');
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void sessionSend_Click(object sender, EventArgs e)
        {
            this.sessionHttpStatus.Text = "";
            this.sessionResponse.Text = "";
            Thread.Sleep(100);
            
            try
            {
                RestResponse response = null;
                switch (this.sessionAPI.Text)
                {
                    case "CreateSession":
                        {
                            response = RestRequest.Post(this.sessionUrl.Text, GetHttpHeadersFromText(this.sessionHttpHeaders.Text), this.sessionBody.Text);
                            break;
                        }
                }

                UpdateSessionResponseUI(response);
            }
            catch (Exception ex)
            {
                this.sessionResponse.Text = ex.ToString();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="response"></param>
        private void UpdateSessionResponseUI(RestResponse response)
        {
            this.sessionHttpStatus.Text = String.Format("{0} ({1})", (int)response.Status, response.Status);
            this.sessionHttpStatus.ForeColor = (response.Succeeded) ? Color.LightGreen : Color.Red;
            this.sessionResponse.Text = GetTextFromHttpHeaders(response.Headers);
            this.sessionResponse.AppendText(response.Body);
        }

        private void MainForm_Load(object sender, EventArgs e)
        {
            gmsRequestBody.Text =
                @"<!--GMS Content Creator Generated XML - Filename: GMSSample.xml-->
                <game id=""1"" visibility=""3"" usesLiveMultiplayerServices=""1"">
                    <localizedNames>
                        <name locale=""en-US"">(en-US) Sample Game</name>
                    </localizedNames>
                    <images />
                    <availablePlatforms>
                    <platform id=""5"">Mobile</platform>
                    </availablePlatforms>
                    <variants />
                    </game>";
        }

        private void button4_Click(object sender, EventArgs e)
        {

        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test\MPTestHooks\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("MPTestHooks")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("a493d290-bfac-46f8-b5fa-85ef1827e6b3")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Common\Users\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("Users")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("3cabe051-8027-47f5-8122-ceda0bc0a38b")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Common\Users\Users.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Configuration;
using LiveN.Test.Framework.Authorization;
using LiveN.Test.Framework.Configuration;
using LiveN.Test.Framework;

namespace Multiplayer.Test.UserAccounts
{
    public class Users 
    {
        public static AuthorizationCache authCache = new AuthorizationCache(Config.Environment.StsSettings.StsUrl, Config.Environment.StsSettings.ClientCertSubject);

        public static List<XboxLiveAccount> CreateUsers(int numberOfUsers)
        {
            XboxLive xboxClient = new XboxLive(Config.Environment.XuacsSettings.XuacsUrl, Config.Environment.XuacsSettings.ClientCertSubject, Config.Environment.XuacsSettings.Timeout, Config.Environment.StsSettings.StsUrl, Config.Environment.StsSettings.ClientCertSubject, Config.Environment.WindowsLiveIDSettings.LiveIdServiceTarget, Config.Environment.WindowsLiveIDSettings.Policy, Config.Environment.WindowsLiveIDSettings.Environment, Config.Environment.StsSettings.PlatformType, Config.Environment.StsSettings.TitleId, Config.Environment.StsSettings.TitleVersion, Config.Environment.StsSettings.ClientVersion);
            List<XboxLiveAccount> accouts = new List<XboxLiveAccount>();
            for (int i = 0; i < numberOfUsers; i++)
            {
                XboxLiveAccount account = xboxClient.CreateWlidAndXblAccount();
                accouts.Add(account);
            }
            return accouts;
        }

        public static string GetXuid(string userID, string password)
        {
            return LiveN.Test.Framework.Authorization.Authorization.GetXuid(
                authCache.GetUserToken(
                    userID,
                    password,
                    Config.Environment.WindowsLiveIDSettings.LiveIdServiceTarget,
                    Config.Environment.WindowsLiveIDSettings.Policy,
                    Config.Environment.WindowsLiveIDSettings.Environment,
                    Config.Environment.StsSettings.PlatformType,
                    Config.Environment.StsSettings.TitleId,
                    Config.Environment.StsSettings.TitleVersion,
                    Config.Environment.StsSettings.ClientVersion));
        }

        public static string GetGamertag(string userID, string password)
        {
            return LiveN.Test.Framework.Authorization.Authorization.GetGamertag(
                authCache.GetUserToken(
                    userID,
                    password,
                    Config.Environment.WindowsLiveIDSettings.LiveIdServiceTarget,
                    Config.Environment.WindowsLiveIDSettings.Policy,
                    Config.Environment.WindowsLiveIDSettings.Environment,
                    Config.Environment.StsSettings.PlatformType,
                    Config.Environment.StsSettings.TitleId,
                    Config.Environment.StsSettings.TitleVersion,
                    Config.Environment.StsSettings.ClientVersion));
        }


 
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Common\Tools\SMTPTest\SMTPListener.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Net;
using System.Net.Sockets;
using System.Net.Mail;
using System.Text.RegularExpressions;

namespace SMTPTest
{
    public class MailReceivedEventArgs : EventArgs
    {
        public String MailString { get; set; }
    }

    public delegate void MailReceivedEventHandler(object sender, MailReceivedEventArgs e);

    public static class MailStorage
    {
        private static Dictionary<int, StringBuilder> _sb = new Dictionary<int, StringBuilder>();
        public static void Update(int hash, StringBuilder dataToAdd)
        {
            lock (_sb)
            {
                StringBuilder s;
                if (!_sb.TryGetValue(hash, out s))
                {
                    _sb.Add(hash, new StringBuilder().Append(dataToAdd));
                }
                else
                {
                    s.Append(dataToAdd);
                }
            }
        }
        public static string GetMail(int hash)
        {
            lock (_sb)
            {
                return _sb[hash].ToString();
            }
        }

        public static void ClearMail(int hash)
        {
            lock (_sb)
            {
                _sb[hash] = new StringBuilder();
            }
        }

    }

    public class ReadObject
    {
        public const int BufferSize = 1024;

        public ReadObject(Socket w, int id)
        {
            WorkSocket = w;
            Id = id;
        }

        public readonly Socket WorkSocket;
        public byte[] buffer = new byte[BufferSize];
        public StringBuilder sb = new StringBuilder();
        public readonly int Id;
    }

    public class SendObject
    {
        public SendObject(Socket s, bool sc, int id)
        {
            WorkSocket = s;
            ShouldClose = sc;
            Id = id;
        }
        public readonly int Id;
        public Socket WorkSocket
        {
            get;
            set;
        }
        public readonly bool ShouldClose = false;
    }

    public class SmtpListener
    {
        private Random _randomGenerator = new Random();
        private Socket _listenerSocket;
        private ManualResetEvent _accepted;
        private volatile bool _isStopping = false;

        private Thread _listenerThread;

        public event MailReceivedEventHandler MailReceivedEvent;

        public SmtpListener()
        {
            _listenerSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            _accepted = new ManualResetEvent(false);

            _listenerThread = new Thread(new ThreadStart(this.Listen));

        }

        protected virtual void OnMailReceived(MailReceivedEventArgs e)
        {
            if (MailReceivedEvent != null)
            {
                MailReceivedEvent(this, e);
            }
        }


        public static string Chomp(string s)
        {
            return s.EndsWith("\r\n") ? s.TrimEnd("\r\n".ToCharArray()) : s;
        }

        public void ReadCompleted(ReadObject so)
        {
            Console.WriteLine("DoneReading: " + so.sb);
            string[] split = Chomp(so.sb.ToString()).Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);

            //data?
            if (split.Length < 1)
            {
                string response = "250 Ok" + Environment.NewLine;
                if (so.sb.ToString() == Environment.NewLine)
                {
                    //response = "221 BBN-UNIX.ARPA Service closing transmission channel";
                }
                Send(so.WorkSocket, response, so.Id);
                return;
            }

            switch (split[0])
            {
                case "EHLO":
                    Send(so.WorkSocket, "250 " + Environment.MachineName + Environment.NewLine, so.Id);
                    break;
                case "MAIL":
                    if (!split[1].StartsWith("FROM:"))
                    {
                    }
                    MailStorage.Update(so.Id, so.sb);
                    //Send(so.WorkSocket, "250 Ok" + Environment.NewLine, so.Id);
                    Send(so.WorkSocket, "250 2.1.0 Sender OK" + Environment.NewLine, so.Id);
                    break;
                case "RCPT":
                    if (!split[1].StartsWith("TO:"))
                    {

                    }
                    MailStorage.Update(so.Id, so.sb);
                    //Send(so.WorkSocket, "250 Ok" + Environment.NewLine, so.Id);
                    Send(so.WorkSocket, "250 2.1.5 Recipient OK" + Environment.NewLine, so.Id);
                    break;
                case "DATA":
                    Send(so.WorkSocket, "354 End data with <CR><LF>.<CR><LF>" + Environment.NewLine, so.Id);
                    break;
                case "\r\n.":
                    //the extra \r\n is chomped off
                    OnMailReceived(new MailReceivedEventArgs() { MailString = MailStorage.GetMail(so.Id) });

                    //smtpclient in a loop will reuse it's existing connection, so clear the entry we're storing for this socket since it's already been delievered
                    //to a higher layer

                    MailStorage.ClearMail(so.Id);
                    Send(so.WorkSocket, "250 2.6.0 <test:to@to.com> Queued mail for delivery" + Environment.NewLine, so.Id, false);
                    //Send(so.WorkSocket, "250 Ok: queued as 12345" + Environment.NewLine, so.Id, false);
                    break;
                case "QUIT":
                    Send(so.WorkSocket, "221 Bye" + Environment.NewLine, so.Id, true);
                    break;
                case "Subject:":
                    string decodedSubject = String.Join(" ", split, 1, split.Length - 1);
                    Regex r = new Regex(@"^=\?utf-8\?B\?(?<Message>.*)\?=$", RegexOptions.Compiled);
                    Match match = r.Match(split[1]);
                    if (match.Length > 0)
                    {
                        decodedSubject = Encoding.UTF8.GetString(Convert.FromBase64String(match.Groups["Message"].Value));
                    }
                    MailStorage.Update(so.Id, new StringBuilder("Subject: " + decodedSubject + Environment.NewLine));
                    //Send(so.WorkSocket, "250 Ok" + Environment.NewLine, so.Id);
                    Send(so.WorkSocket, String.Empty, so.Id);
                    break;
                default:
                    //really this is a hack, but i would need to turn this stateless thing into an actual state machine per request, and that seems like much more work.

                    try
                    {
                        so.sb = new StringBuilder(Encoding.UTF8.GetString(Convert.FromBase64String(so.sb.ToString())));
                    }
                    catch (Exception)
                    {
                    }

                    MailStorage.Update(so.Id, so.sb);
                    Send(so.WorkSocket, String.Empty, so.Id);
                    break;

            }
        }

        public void ReadCallback(IAsyncResult ar)
        {
            ReadObject state = (ReadObject)ar.AsyncState;
            int read = 0;
            try
            {
                read = state.WorkSocket.EndReceive(ar);
            }
            catch (SocketException e)
            {
                if (e.ErrorCode == 10054)
                {
                    return;
                }

            }

            if (read <= 0)
            {
                //todo(michperr): Put error handling here
            }
            string readStr = Encoding.ASCII.GetString(state.buffer, 0, read);
            state.sb.Append(readStr);

            //if (state.buffer[read-2]== '\r' && state.buffer[read-1]=='\n')
            if (!state.sb.ToString().Equals("\r\n") && readStr.Equals("\n"))
            //if (read < state.buffer.Length)
            {
                ReadCompleted(state);
            }
            else
            {
                try
                {
                    state.WorkSocket.BeginReceive(state.buffer, 0, 1, 0,
                            new AsyncCallback(ReadCallback), state);
                }
                catch (SocketException)
                {
                    //int a = 0;
                }
            }

        }

        public void AcceptCallback(IAsyncResult ar)
        {
            Console.WriteLine("AcceptCallback");
            Socket clientSock = (Socket)ar.AsyncState;
            Socket handler;

            try
            {
                handler = clientSock.EndAccept(ar);
                _accepted.Set();
                Send(handler, "220 " + Environment.MachineName + " Simple Mail Transfer Service Ready" + Environment.NewLine, _randomGenerator.Next());
            }
            catch (ObjectDisposedException)
            {
                //server is shutting down...
                //todo(michperr): Fix this logic
                _accepted.Set();
                return;
            }
        }

        private void Send(Socket handler, String data, int id)
        {
            Send(handler, data, id, false);
        }
        private void Send(Socket handler, String data, int id, bool shouldClose)
        {
            byte[] byteData = Encoding.ASCII.GetBytes(data);
            Console.WriteLine("{0} Sending: {1}", handler.GetHashCode(), data);

            handler.BeginSend(byteData, 0, byteData.Length, 0,
                new AsyncCallback(this.SendCallback), new SendObject(handler, shouldClose, id));

        }

        private void SendCallback(IAsyncResult ar)
        {
            try
            {
                SendObject so = (SendObject)ar.AsyncState;
                int bytesSent = so.WorkSocket.EndSend(ar);

                Console.WriteLine("Sent {0} bytes to client.", bytesSent);

                if (so.ShouldClose)
                {
                    Console.WriteLine(MailStorage.GetMail(so.Id));

                    so.WorkSocket.Shutdown(SocketShutdown.Both);
                    so.WorkSocket.Close();
                    so.WorkSocket = null;
                    Console.WriteLine("Connection closed");
                    return;
                }

                ReadObject state = new ReadObject(so.WorkSocket, so.Id);
                so.WorkSocket.BeginReceive(state.buffer, 0, 1, 0,
                    new AsyncCallback(ReadCallback), state);
            }
            catch (Exception e)
            {
                Console.WriteLine(e.ToString());
            }
        }


        public void StopListener()
        {
            Stop();
            _listenerThread.Join();
        }

        private void Stop()
        {
            _isStopping = true;
            if (_listenerSocket.Connected)
            {
                _listenerSocket.Shutdown(SocketShutdown.Both);
            }
            _listenerSocket.Close(0);
            _listenerSocket = null;
        }

        public void StartListener()
        {
            _listenerThread.Start();
        }

        private void Listen()
        {
            Console.WriteLine("Listener: Starting");
            _listenerSocket.Bind(new IPEndPoint(IPAddress.Any, 25));
            _listenerSocket.Listen(Int32.MaxValue);

            while (!_isStopping)
            {
                _accepted.Reset();
                _listenerSocket.BeginAccept(new AsyncCallback(AcceptCallback), _listenerSocket);
                _accepted.WaitOne();
            }
            //Console.WriteLine("Done Listening");
        }
    }

    public class SMTPListenerWrapper
    {
        private AutoResetEvent _resetEvent;
        private int _mailsExpected;
        private bool stopReceivingEmails = false;
        private List<string> _receivedMail;
        private SmtpListener _listener;

        public MailReceivedEventHandler _mailHandler;

        public SMTPListenerWrapper(int numberOfMailsExpected)
        {
            _mailsExpected = numberOfMailsExpected;
            _resetEvent = new AutoResetEvent(false);
            _resetEvent.Reset();
            _listener = new SmtpListener();
            _receivedMail = new List<string>();

            _mailHandler = delegate(object sender, MailReceivedEventArgs e)
            {
                _receivedMail.Add(e.MailString);

                if (_receivedMail.Count == _mailsExpected || stopReceivingEmails)
                {
                    _resetEvent.Set();
                }
            };
            _listener.MailReceivedEvent += _mailHandler;
        }

        public void Init()
        {
            _listener.StartListener();
        }

        public List<string> WaitForMail(int timeoutMs)
        {
            Console.WriteLine("Waiting For Mail");

            if (!_resetEvent.WaitOne(timeoutMs))
            {
                //throw some exception because we slept for 10 seconds and didn't get any mail
                //throw new Exception("FAIL");
                stopReceivingEmails = true;
            }
            Console.WriteLine("DONE Waiting For Mail");
            return _receivedMail;
        }

        public void Stop()
        {
            _listener.MailReceivedEvent -= _mailHandler;
            _listener.StopListener();
        }
    }

    public class email
    {
        public string To { get; set; }
        public string Subject { get; set; }
        public string Body { get; set; }
    }

    class Program
    {

        static void GetMail(string subject)
        {
            int numOfMails = 20;
            SMTPListenerWrapper listener = new SMTPListenerWrapper(numOfMails);

            listener.Init();

            Console.WriteLine("Main Thread: starting listener");


            Thread.Sleep(1 * 1000);

            SmtpClient cl = new SmtpClient("127.0.0.1", 25);
            //SmtpClient cl = new SmtpClient("smtphost.redmond.corp.microsoft.com", 25);
            cl.Credentials = new NetworkCredential(
                "ztest01",
                "TN7SmQ8qJ8",
                "REDMOND");

            for (int i = 0; i < numOfMails; i++)
            {
                using (MailMessage m = new MailMessage("ztest01@microsoft.com", "opssek" + i + "@gmail.com"))
                {
                    m.Subject = subject;
                    m.Body = "veut jouer à Backgammon (French)!";

                    //m.Subject = "A";
                    //m.Body = "B";
                    try
                    {
                        cl.Send(m);
                        //Thread.Sleep(10000);
                    }
                    catch (Exception e)
                    {
                        Console.WriteLine("SMTP FAIL :( {0}", e);
                        return;
                    }

                }

            }
            List<string> recMail = listener.WaitForMail(100 * 10000);
            string receivedMail = recMail[0];

            string[] mailLines = receivedMail.Split(new string[] { Environment.NewLine }, StringSplitOptions.None);
            //Array.ForEach(mailLines, x => Console.WriteLine(x));

            string encodedSubject = mailLines[6].Split(new string[] { "Subject: " }, StringSplitOptions.RemoveEmptyEntries)[0];
            string decodedBody = mailLines[9];

            listener.Stop();

        }


        static void Main(string[] args)
        {
            GetMail("möchte Backgammon (German) spielen!");
            GetMail("A");

            /*
            SMTPListenerWrapper listener = new SMTPListenerWrapper(2);
            listener.Init();
            SMTPSend();
            */
            Console.WriteLine("Complete");

        }

        //mike's test code for incomplete send.  Ignore.
        static void SMTPSend()
        {
            byte[] buffer = new byte[512];
            byte[] data;

            TcpClient tcpCl = new TcpClient();
            tcpCl.Connect(new IPEndPoint(IPAddress.Parse("127.0.0.1"), 25));

            NetworkStream ns = tcpCl.GetStream();

            //server ID
            int bytesRead = ns.Read(buffer, 0, buffer.Length);
            Console.WriteLine("Received: {0}", System.Text.Encoding.ASCII.GetString(buffer, 0, bytesRead));


            data = System.Text.Encoding.ASCII.GetBytes("EHLO MICHPERR1" + Environment.NewLine);
            ns.Write(data, 0, data.Length);

            //250 michperr1
            bytesRead = ns.Read(buffer, 0, buffer.Length);
            Console.WriteLine("Received: {0}", System.Text.Encoding.ASCII.GetString(buffer, 0, bytesRead));

            data = System.Text.Encoding.ASCII.GetBytes("MAIL FROM:<ztest01@microsoft.com>" + Environment.NewLine);
            ns.Write(data, 0, data.Length);

            //250 2.1.0 Sender OK
            bytesRead = ns.Read(buffer, 0, buffer.Length);
            Console.WriteLine("Received: {0}", System.Text.Encoding.ASCII.GetString(buffer, 0, bytesRead));

            data = System.Text.Encoding.ASCII.GetBytes("RCPT TO:<opssek0@gmail.com>" + Environment.NewLine);
            ns.Write(data, 0, data.Length);

            //250 2.1.5 Recipient OK
            bytesRead = ns.Read(buffer, 0, buffer.Length);
            Console.WriteLine("Received: {0}", System.Text.Encoding.ASCII.GetString(buffer, 0, bytesRead));


            data = System.Text.Encoding.ASCII.GetBytes("DATA" + Environment.NewLine);
            ns.Write(data, 0, data.Length);

            //354 End data with <CR><LF>.<CR><LF>
            bytesRead = ns.Read(buffer, 0, buffer.Length);
            Console.WriteLine("Received: {0}", System.Text.Encoding.ASCII.GetString(buffer, 0, bytesRead));

            data = System.Text.Encoding.ASCII.GetBytes(
                        @"MIME-Version: 1.0
                        From: ztest01@microsoft.com
                        To: opssek0@gmail.com
                        Date: 14 Jul 2010 19:50:38 -0700
                        Subject: =?utf-8?B?bcO2Y2h0ZSBCYWNrZ2FtbW9uIChHZXJtYW4pIHNwaWVsZW4h?=
                        Content-Type: text/plain; charset=utf-8
                        Content-Transfer-Encoding: base64
                        dmV1dCBqb3VlciDDoCBCYWNrZ2FtbW9uIChGcmVuY2gpIQ==
                        "
                        );
            ns.Write(data, 0, data.Length);

            //354 End data with <CR><LF>.<CR><LF>
            bytesRead = ns.Read(buffer, 0, buffer.Length);
            Console.WriteLine("Received: {0}", System.Text.Encoding.ASCII.GetString(buffer, 0, bytesRead));
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test\MPTestHooks\SessionsTestHooks.cs ===
﻿using System;
using AsyncMultiplayer.Common.AzureStorage;
using AsyncMultiplayer.SessionCommon;
using AsyncMultiplayer.SessionAzureStorage;
using AsyncMultiplayer.SessionManagementService;
using AsyncMultiplayer.GameStateAzureStorage;
using AsyncMultiplayer.PassThruGameLogicModule;


namespace MPTestHooks
{
    /// <summary>
    /// 
    /// This is a helper class that knows how the Sessions service is built and exposes test hooks
    /// for Test Cases to use.
    /// 
    /// Any logic that needs explicit internal knowledge outside of the Sessions API should be exposed in this class.
    /// 
    /// </summary>
    /// 
    public class SessionsTestHooks
    {
        static StorageAccountInfo account = new StorageAccountInfo(
            new Uri(Global.AzureTableStorageEndPoint),
            null,
            Global.AzureStorageAccount,
            Global.AzureStorageToken,
            false);
        
        /// <summary>
        /// This class contains static helper methods and doesn't need to be instantiated.
        /// </summary>
        static SessionsTestHooks()
        {
        }

        /// <summary>
        /// Generic CreateSession method used to inject a Session in the test server specified in App.config
        /// </summary>
        /// <returns></returns>
        public static void CreateSession(SessionState sessionState)
        {
            CreationData creationData = new CreationData();

            creationData.CanRemoveEmptySeats = sessionState.CanRemoveEmptySeats;
            creationData.DisplayName = sessionState.DisplayName;
            creationData.GameID = sessionState.GameID;
            creationData.InactivityWarning = sessionState.InactivityWarning;
            creationData.ReservedSeatsAvailable = sessionState.ReservedSeatsAvailable;
            creationData.SessionParameters = sessionState.SessionParameters;
            creationData.TotalSeatsAvailable = sessionState.SeatsAvailable;
            creationData.Variant = sessionState.Variant;

            StorageAccountInfo blobAccount = new StorageAccountInfo(
                new Uri(Global.AzureBlobStorageEndPoint),
                null,
                Global.AzureStorageAccount,
                Global.AzureStorageToken,
                false);

            ISessionStorage sessionStorage = new SessionAzureStorage(account, Global.ProxyAddress);

            IGameStateStorage stateStorage = new GameStateAzureStorage(blobAccount, Global.ProxyAddress);
            
            IGameLogicModule gameLogicModule = new PassThruGameLogicModule(stateStorage, sessionStorage);

            sessionStorage.AddSession(sessionState, int.MaxValue);

            gameLogicModule.OnCreateSession(sessionState, creationData);
        }
     
        public static void ResetSessionCount(IdentityToken profile)
        {
            SessionCountDataServiceContext sessionCountContext = new SessionCountDataServiceContext(account);
            sessionCountContext.RetryPolicy = RetryPolicies.RetryN(3, TimeSpan.FromSeconds(1));
            sessionCountContext.ProxyAddress = Global.ProxyAddress; ;
            SessionCountAzureTableEntity sessionCountEntity = SessionAzureStorage.GetSessionCountEntityForUser(profile, sessionCountContext);
            
            if (sessionCountEntity != null)
            {
                sessionCountEntity.UserCreatedSessionCount = 0;
                sessionCountContext.UpdateObject(sessionCountEntity);
                for (int retryCount = 0; retryCount < 5; retryCount++)
                {
                    try
                    {
                        sessionCountContext.SaveChangesWithRetries();
                        break;
                    }
                    catch (Exception)
                    {
                        // Probably another thread has updated the player session count, retry a number of times and finally throw the exception.
                        if (retryCount == 4)
                            throw;
                    }
                }
            }
        }
        //public static string DisplaySessionCount(IdentityToken profile)
        //{
        //    SessionCountDataServiceContext sessionCountContext = new SessionCountDataServiceContext(account);
        //    sessionCountContext.RetryPolicy = RetryPolicies.RetryN(3, TimeSpan.FromSeconds(1));
        //    sessionCountContext.ProxyAddress = Global.ProxyAddress; ;
        //    SessionCountAzureTableEntity sessionCountEntity = SessionAzureStorage.GetSessionCountEntityForUser(profile, sessionCountContext);
                   
        //    return sessionCountEntity.UserCreatedSessionCount.ToString();                
            
        //}
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test\Multiplayer.Test\Notifications\GetSpotlight.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using AsyncMultiplayer.NotificationService;
using System.Xml; 
using LiveN.Test.Framework.Configuration;
using System.Net; 
using CosmosTest.Common;
using Cosmos.Core.Exceptions;
using Multiplayer.Test.Proxy;
using LiveN.Test.Common.Web;


namespace Multiplayer.Test.API
{
    /// <summary>
    /// Summary description for GetSpotlight
    /// </summary>
    [TestClass]
    public class GetSpotlight : TestAreaBase
    {
        private Random randomGenerator = new Random();

        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
        }

        [TestInitialize()]
        public void MyTestInitialize()
        {
            LockTest("spotlight");
        }

        [TestCleanup]
        public void TestCleanup()
        {
            UnlockTest("spotlight");
        }

        [TestMethod, Owner("a-sediro"), Priority(0)]
        [Description("Smoke test spotlight. (Useful for environments that are not for test only)")]
        [TestProperty("Type", "BVTs")]
        public void Smoke_GetSpotlight()
        {
            if ((string.Compare(Config.Environment.Name, "dev", true) != 0) && (string.Compare(Config.Environment.Name, "Airlock_LEST", true) != 0))
            {
                List<Spotlight> spotlightEntries = this.NotificationsServiceProxy.GetSpotlight("");
                Assert.IsNotNull(spotlightEntries);
                Assert.IsTrue(spotlightEntries.Count > 0, "ERROR: There are no spotlight entries.");
            }
        }


        //todo(michperr): These are created/owned by some guy on the mobile team.  Figure out how we can verify these ourselves.
        [TestMethod, Owner("a-sediro"), Priority(0)]
        [Description("Call GET to query for Spotlight entries. Verify Title, Subtitle and URL for each of the Spotlight entries.")]
        [TestProperty("Type", "Feature")]
        public void BVT_GetSpotlight_VerifyEntries()
        {
            if ((string.Compare(Config.Environment.Name, "dev", true) != 0) && (string.Compare(Config.Environment.Name, "Airlock_LEST", true) != 0))
            {
                Assert.AreEqual(true, Config.Environment.IsTestOnlyEnvironment, "This test should be run only on a test only environment as it adds and deletes entries.");
                CosmosTestHooks.PopulateFiveSpotlightEntries("en-US");
                List<Spotlight> spotlightEntries = this.NotificationsServiceProxy.GetSpotlight("Test");

                Assert.IsNotNull(spotlightEntries);
                Assert.AreEqual(5, spotlightEntries.Count, "ERROR: Wrong number of entries.");

                // For each Spotlight entry, validate that each entry has a valid string value and that the URI can actually be parsed into a valid URI
                Log.WriteLine("------------------------------------------------------------");
                foreach (Spotlight currentEntry in spotlightEntries)
                {
                    // Validate string values
                    Assert.IsFalse(String.IsNullOrEmpty(currentEntry.Title));
                    Assert.IsFalse(String.IsNullOrEmpty(currentEntry.Subtitle));

                    // Validate that Web link entries have a valid URL and GameID entries have the expected GameID
                    if (currentEntry.Subtitle.Equals(SpotlightItemType.GameID.ToString()))
                    {
                        Assert.IsTrue(String.IsNullOrEmpty(currentEntry.Url));
                        Assert.AreEqual(Constants.TESTGAMEID, currentEntry.GameId, "Error: Wrong gameID");
                    }
                    else
                    {
                        Assert.IsFalse(String.IsNullOrEmpty(currentEntry.Url));
                        Assert.IsTrue(
                            Uri.IsWellFormedUriString(currentEntry.Url, UriKind.Absolute),
                            String.Format("URL was not well-formed. URLs in Spotlight entries must be well-formed, fully-escaped URL values. Value: '{0}'", currentEntry.Url));
                    }
                    // Print out the entry for debugging purposes
                    Log.WriteLine(String.Format("Title: {0}", currentEntry.Title));
                    Log.WriteLine(String.Format("Subtitle: {0}", currentEntry.Subtitle));
                    Log.WriteLine(String.Format("URL: {0}", currentEntry.Url));
                    Log.WriteLine("");
                }
                Log.WriteLine("------------------------------------------------------------");
            }
        }
        //TODO: possibel addition to the spotlight test cases: code for setting/sending the spotlight entries to the db and then 
        //retriving the entries for testing, to ensure that there is always some spotlight data for the test to run on.
        /* todo(michperr): Refactoring needed:
         * 1) Should the list of spotlight entries for en-us and en-gb be completely different?  If they come back in the wrong order
         * this case will pass
         * 2) case sensitivity should be moved out into a seperate case
         */

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Query for spotlight entries by specifying supported but mismatched language and locale")]
        [TestProperty("Type", "Feature")]
        public void P_GetSpotlight_MismatchedLanguageLocale()
        {
            if ((string.Compare(Config.Environment.Name, "dev", true) != 0) && (string.Compare(Config.Environment.Name, "Airlock_LEST", true) != 0))
            {
                Assert.AreEqual(true, Config.Environment.IsTestOnlyEnvironment, "This test should be run only on a test only environment as it adds and deletes entries.");
                string[] mismatchedLocaleList = { "de-US", "es-IT", "fr-DE", "en-DE", "it-GB" };
                int randomIndex = randomGenerator.Next(0, mismatchedLocaleList.Length);

                string[] localeList = { "de-DE", "es-ES", "fr-FR", "en-GB", "it-IT", "en-US" };
                string fallbackCountry = (mismatchedLocaleList[randomIndex].Split('-'))[1];
                List<Spotlight> spotlightEntries = new List<Spotlight>();
                foreach (string loc in localeList)
                {
                    CosmosTestHooks.PopulateFiveSpotlightEntries(loc, false);
                }

                CosmosTestHooks.WaitForCosmosCacheToExpire();

                foreach (string loc in localeList)
                {
                    if (loc.Contains(fallbackCountry))
                    {

                        spotlightEntries = this.NotificationsServiceProxy.GetSpotlight("Test", loc);
                        Assert.IsNotNull(spotlightEntries, string.Format("ERROR: Spotlight list is null for locale: {0}", loc));
                        Assert.AreEqual(5, spotlightEntries.Count, "Error: Wrong number of entries");
                        break;
                    }
                }
                List<Spotlight> spotlightEntriesFallback = this.NotificationsServiceProxy.GetSpotlight("Test", mismatchedLocaleList[randomIndex]);
                Assert.IsNotNull(spotlightEntriesFallback, string.Format("ERROR: Spotlight list is null for locale: {0}", mismatchedLocaleList[randomIndex]));
                Assert.AreEqual(5, spotlightEntriesFallback.Count, "Error: Wrong number of entries for fall back locale");

                int numberOfEntries = spotlightEntriesFallback.Count;
                for (int i = 0; i < numberOfEntries; i++)
                {
                    Assert.AreEqual(spotlightEntries[i].Title, spotlightEntriesFallback[i].Title, string.Format("ERROR: Incorrect fallback for mismatched locale: {0}", mismatchedLocaleList[randomIndex]));
                }
            }
        }
        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Query for spotlight entries by specifying unsupported language and locale")]
        [TestProperty("Type", "Feature")]
        public void N_GetSpotlightWithUnsupportedLanguageLocale()
        {
            Assert.AreEqual(true, Config.Environment.IsTestOnlyEnvironment, "This test should be run only on a test only environment as it adds and deletes entries.");
            CosmosTestHooks.PopulateFiveSpotlightEntries("en-US");
            string unsupportedLocale = "ru-RU";  //Russian 
            List<Spotlight> spotlightEntries = null;
            spotlightEntries = this.NotificationsServiceProxy.GetSpotlight("Test", unsupportedLocale);
            Assert.IsNotNull(spotlightEntries, "Error: response should not be null.");
            Assert.AreEqual(0, spotlightEntries.Count, string.Format("ERROR: Some spotlight entries returned for unsupported locale: {0}", unsupportedLocale));
            string unsupportedMismatchedLocale = "ru-DK";
            spotlightEntries = this.NotificationsServiceProxy.GetSpotlight("Test", unsupportedMismatchedLocale);
            Assert.IsNotNull(spotlightEntries, "Error: response should not be null.");
            Assert.AreEqual(0, spotlightEntries.Count, string.Format("ERROR: Some spotlight entries returned for unsupported mismatched locale: {0}", unsupportedMismatchedLocale));
            string invalidLocale = "sdjrh1231^&GH";
            spotlightEntries = this.NotificationsServiceProxy.GetSpotlight("Test", invalidLocale);
            Assert.IsNotNull(spotlightEntries, "Error: response should not be null.");
            Assert.AreEqual(0, spotlightEntries.Count, string.Format("ERROR: Some spotlight entries returned for invalid locale: {0}", invalidLocale));
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Query for Spotlight entries with an empty carrier string.")]
        [TestProperty("Type", "Feature")]
        public void P_GetSpotlight_EmptyCarrier()
        {
            if ((string.Compare(Config.Environment.Name, "dev", true) != 0) && (string.Compare(Config.Environment.Name, "Airlock_LEST", true) != 0))
            {
                Assert.AreEqual(true, Config.Environment.IsTestOnlyEnvironment, "This test should be run only on a test only environment as it adds and deletes entries.");
                CosmosTestHooks.PopulateFiveSpotlightEntries("en-US");
                List<Spotlight> spotlightEntries = this.NotificationsServiceProxy.GetSpotlight(string.Empty, "en-US");
                Assert.IsNotNull(spotlightEntries, "ERROR: Spotlight entries are null for request url with empty carrier string");
                Assert.AreEqual(5, spotlightEntries.Count, "ERROR: Wrong number of entries");
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Query for Spotlight entries with an invalid locale and bad etag (PS 2155)")]
        [TestProperty("Type", "Feature")]
        public void P_GetSpotlight_BadLocale_withEtag()
        {
            Assert.AreEqual(true, Config.Environment.IsTestOnlyEnvironment, "This test should be run only on a test only environment as it adds and deletes entries.");
            CosmosTestHooks.PopulateFiveSpotlightEntries("en-US");
            string eTag = "blah";
            List<Spotlight> spotlightEntries = this.NotificationsServiceProxy.GetSpotlight("blah", "AA-AA", eTag);
            Assert.IsNotNull(spotlightEntries, "ERROR: response should not be null.");
            Assert.AreEqual(0, spotlightEntries.Count, "ERROR: Not expecting any entry to be found.");
        }

        //todo(michperr): Shouldn't this fail?
        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Query for Spotlight entries with a long carrier string.")]
        [TestProperty("Type", "Feature")]
        public void P_GetSpotlight_LongCarrierString()
        {
            Assert.AreEqual(true, Config.Environment.IsTestOnlyEnvironment, "This test should be run only on a test only environment as it adds and deletes entries.");
            CosmosTestHooks.PopulateFiveSpotlightEntries("en-US");

            //Max URL length for mobile browser = 2048 chars. This is the limit on the client side, not on services side.            
            //Testing here for url string less than and greater than 2048 characters

            //Less than 2048 chars.
            int i, count = 1900;
            Random r = new Random();
            char ch;
            StringBuilder longCarrierName = new StringBuilder(count);

            for (i = 1; i <= count; i++)
            {
                ch = (char)(r.Next(32, 128));
                longCarrierName = longCarrierName.Append(ch);
            }

            List<Spotlight> spotlightEntries = this.NotificationsServiceProxy.GetSpotlight(longCarrierName.ToString());
            Assert.IsNotNull(spotlightEntries, String.Format("ERROR: Spotlight entries are null for request url with very long carrier string: {0}", longCarrierName));
            Assert.IsTrue(spotlightEntries.Count > 0, String.Format("ERROR: Spotlight list is empty for request url with very long carrier string: {0}", longCarrierName));

            //Greater than 2048 characters.
            for (i = 1; i <= 400; i++)
            {
                ch = (char)(r.Next(32, 128));
                longCarrierName = longCarrierName.Append(ch);
            }

            spotlightEntries = this.NotificationsServiceProxy.GetSpotlight(longCarrierName.ToString());
            Assert.IsNotNull(spotlightEntries, String.Format("ERROR: Spotlight entries are null for url with very long carrier string: {0}", longCarrierName));
            Assert.IsTrue(spotlightEntries.Count > 0, String.Format("ERROR: Spotlight list is empty for request url with very long carrier string: {0}", longCarrierName));
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Query for Spotlight entries with unicode character carrier string.")]
        [TestProperty("Type", "Feature")]
        public void P_GetSpotlight_UnicodeCarrierString()
        {
            Assert.AreEqual(true, Config.Environment.IsTestOnlyEnvironment, "This test should be run only on a test only environment as it adds and deletes entries.");
            // Generate 5 Cosmos Spotlight entries
            CosmosTestHooks.PopulateFiveSpotlightEntries("en-US");

            string testString = "ʵˀ˂ˠͼΏΦκϠϢЏфՊמϣϧϜϨ향찰/鄕札";
            List<Spotlight> spotlightEntries = this.NotificationsServiceProxy.GetSpotlight(testString);
            Assert.IsNotNull(spotlightEntries, String.Format("ERROR: Spotlight entries are null for request url with unicode carrier string: {0}", testString));
            Assert.IsTrue(spotlightEntries.Count > 0, String.Format("ERROR: Spotlight list is empty for request url with unicode carrier string: {0}", testString));
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Query for Spotlight entries using ETag and verify that caching of spotlight entries occurs.")]
        [TestProperty("Type", "Feature")]
        public void P_GetSpotlight_ETag_RightETag()
        {
            if ((string.Compare(Config.Environment.Name, "dev", true) != 0) && (string.Compare(Config.Environment.Name, "Airlock_LEST", true) != 0))
            {
                Assert.AreEqual(true, Config.Environment.IsTestOnlyEnvironment, "This test should be run only on a test only environment as it adds and deletes entries.");
                CosmosTestHooks.PopulateFiveSpotlightEntries("en-US");

                List<Spotlight> spotlightEntries = this.NotificationsServiceProxy.GetSpotlight("Test");
                string eTag = this.NotificationsServiceProxy.EtagInResponse;
                try
                {
                    List<Spotlight> spotlightEntriesNew = this.NotificationsServiceProxy.GetSpotlight("Test", "en-US", eTag);
                }
                catch (RestException e)
                {
                    Assert.AreEqual<HttpStatusCode>(HttpStatusCode.NotModified, e.Response.Status, "Error:Expecting a 304.");
                    Assert.AreEqual<string>(eTag, (e.Response.Headers["ETag"]), "Response does not have etag");
                }
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Query for Spotlight entries using ETag and verify that caching of spotlight entries occurs.")]
        [TestProperty("Type", "Feature")]
        public void P_GetSpotlight_ETag_WrongETag()
        {
            if ((string.Compare(Config.Environment.Name, "dev", true) != 0) && (string.Compare(Config.Environment.Name, "Airlock_LEST", true) != 0))
            {
                Assert.AreEqual(true, Config.Environment.IsTestOnlyEnvironment, "This test should be run only on a test only environment as it adds and deletes entries.");
                CosmosTestHooks.PopulateFiveSpotlightEntries("en-US");

                List<Spotlight> spotlightEntries = this.NotificationsServiceProxy.GetSpotlight("Test", "en-US");
                string eTag = this.NotificationsServiceProxy.EtagInResponse;
                Assert.IsNotNull(spotlightEntries, "ERROR: Spotlight entries are null.");
                Assert.AreEqual(5, spotlightEntries.Count, "ERROR: Wrong number of entries.");

                spotlightEntries = this.NotificationsServiceProxy.GetSpotlight("Test", "en-US", "blah");
                Assert.IsNotNull(spotlightEntries, "ERROR: Spotlight entries are null.");
                Assert.AreEqual(5, spotlightEntries.Count, "ERROR: Wrong number of entries.");
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Query for Spotlight entries using eTag and verify Cosmos doesn't get re-queried before the Cosmos timeout period expires.")]
        [TestProperty("Type", "Feature")]
        public void P_GetSpotlight_Cache_CosmosCacheHit()
        {
            Assert.AreEqual(true, Config.Environment.IsTestOnlyEnvironment, "This test should be run only on a test only environment as it adds and deletes entries.");
            string locale = "en-US";

            //Delete whatever was there and then Publish out a single new Spotlight entry.
            CosmosTestHooks.DestroyDirectory(locale);

            CosmosTestHooks.CreateSpotlightItem(
                String.Format("Cache Test 1 {0}", locale),
                SpotlightItemType.WebLink.ToString(),
                "http://m.bing.com",
                "",
                locale);
            CosmosTestHooks.WaitForCosmosCacheToExpire();

            //Request for spotlight once and get the eTag value.
            List<Spotlight> spotlightEntries = this.NotificationsServiceProxy.GetSpotlight("Test", "en-US", null);

            //Publish out a single new Spotlight entry.
            CosmosTestHooks.CreateSpotlightItem(
                String.Format("Cache Test 2 {0}", locale),
                SpotlightItemType.WebLink.ToString(),
                "http://m.microsoft.com",
                "",
                locale);

            // Immediatly re-request Spotlight -- this should hit the Cosmos cache
            List<Spotlight> spotlightEntriesNew = new List<Spotlight>();
            spotlightEntriesNew = this.NotificationsServiceProxy.GetSpotlight("Test", locale);
            Assert.AreEqual(spotlightEntries.Count, spotlightEntriesNew.Count, "ERROR: The Spotlight request with current ETag did not return an empty list.");
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Query for Spotlight entries with no eTag and verify you get Cosmos cached data")]
        [TestProperty("Type", "Feature")]
        public void P_GetSpotlight_Cache_CosmosCacheNotHit_WrongEtag()
        {
            Assert.AreEqual(true, Config.Environment.IsTestOnlyEnvironment, "This test should be run only on a test only environment as it adds and deletes entries.");
            string locale = "en-US";

            //Delete whatever was there and then Publish out a single new Spotlight entry.
            CosmosTestHooks.DestroyDirectory(locale);

            CosmosTestHooks.CreateSpotlightItem(
                String.Format("Cache Test 1 {0}", locale),
                SpotlightItemType.WebLink.ToString(),
                "http://m.bing.com",
                "",
                locale);
            CosmosTestHooks.WaitForCosmosCacheToExpire();

            List<Spotlight> spotlightEntries = this.NotificationsServiceProxy.GetSpotlight("Test", locale, null);

            //Publish out a single new Spotlight entry.
            CosmosTestHooks.CreateSpotlightItem(
                String.Format("Cache Test 2 {0}", locale),
                SpotlightItemType.WebLink.ToString(),
                "http://m.microsoft.com",
                "",
                locale);
            CosmosTestHooks.WaitForCosmosCacheToExpire();

            List<Spotlight> spotlightEntriesNew = new List<Spotlight>();
            spotlightEntriesNew = this.NotificationsServiceProxy.GetSpotlight("Test", locale, "blah");
            Assert.AreEqual(spotlightEntries.Count + 1, spotlightEntriesNew.Count, "ERROR: The Spotlight request with current ETag did not return an empty list.");
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Query for Spotlight entries using ETag and verify that caching of spotlight entries does not occur.")]
        [TestProperty("Type", "Feature")]
        public void P_GetSpotlight_Cache_CosmosCacheNotHit_WithETag()
        {
            Assert.AreEqual(true, Config.Environment.IsTestOnlyEnvironment, "This test should be run only on a test only environment as it adds and deletes entries.");
            string locale = "en-US";

            //Delete whatever was there and then Publish out a single new Spotlight entry.
            CosmosTestHooks.DestroyDirectory(locale);

            //Publish out a single new Spotlight entry.
            CosmosTestHooks.CreateSpotlightItem(
                String.Format("Cache Test 1 {0}", locale),
                SpotlightItemType.WebLink.ToString(),
                "http://m.bing.com",
                "",
                locale);
            CosmosTestHooks.WaitForCosmosCacheToExpire();

            // Query Spotlight once and save the eTag value.
            List<Spotlight> spotlightEntries = this.NotificationsServiceProxy.GetSpotlight("Test", locale, null);
            string eTag = this.NotificationsServiceProxy.EtagInResponse;

            //Publish out a single new Spotlight entry.
            CosmosTestHooks.CreateSpotlightItem(
                String.Format("Cache Test 2 {0}", locale),
                SpotlightItemType.WebLink.ToString(),
                "http://m.microsoft.com",
                "",
                locale);
            CosmosTestHooks.WaitForCosmosCacheToExpire();
            // Query Spotlightwith etag.
            List<Spotlight> spotlightEntriesNew = new List<Spotlight>();
            spotlightEntriesNew = this.NotificationsServiceProxy.GetSpotlight("Test", locale, eTag);
            Assert.AreEqual(spotlightEntries.Count + 1, spotlightEntriesNew.Count, "ERROR: The Spotlight request with current ETag did not return an empty list.");
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Populate Cosmos with five Spotlight entries and verify they're returned in order, with recent published item first")]
        [TestProperty("Type", "Feature")]
        public void P_GetSpotlight_SortByTimestamp_5()
        {
            Assert.AreEqual(true, Config.Environment.IsTestOnlyEnvironment, "This test should be run only on a test only environment as it adds and deletes entries.");
            string locale = "en-US";

            string spotlightItemTestPrefix = "Test Item";

            // Publish out five Spotlight timestamps
            CosmosTestHooks.PopulateFiveSpotlightEntries(locale);

            CosmosTestHooks.WaitForCosmosCacheToExpire();

            // Request Spotlight -- this should NOT hit the Cosmos cache since the cache has expired
            List<Spotlight> spotlightEntries = this.NotificationsServiceProxy.GetSpotlight("Test", locale, null);

            Assert.AreEqual(5, spotlightEntries.Count, "Error: Wrong number of entries");

            string expectedTitle;
            for (int i = 0; i < 5; i++)
            {
                expectedTitle = String.Format("{0} {1} {2}", spotlightItemTestPrefix, 5 - i, locale);

                Log.WriteLine("Current title: " + spotlightEntries[i].Title);
                Log.WriteLine("Expected title: " + expectedTitle);

                // Validate that the order is newest-to-oldest
                Assert.AreEqual(expectedTitle, spotlightEntries[i].Title, "Error: unexpected title");
            }

        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Query for spotlight entries with a specified valid locale other than 'en-US'")]
        [TestProperty("Type", "Feature")]
        public void P_GetSpotlightWithValidLocaleOtherThan_enUS()
        {
            Assert.AreEqual(true, Config.Environment.IsTestOnlyEnvironment, "This test should be run only on a test only environment as it adds and deletes entries.");
            string[] localeList = { "de-DE", "es-ES", "fr-FR", "en-GB", "it-IT" };
            int randomIndex = randomGenerator.Next(0, localeList.Length);
            string locale = localeList[randomIndex];

            foreach (string loc in localeList)
            {
                // Generate 5 Cosmos Spotlight entries on valid locale
                CosmosTestHooks.PopulateFiveSpotlightEntries(loc, false);
            }

            CosmosTestHooks.WaitForCosmosCacheToExpire();

            List<Spotlight> spotlightEntries = this.NotificationsServiceProxy.GetSpotlight("Test", locale);
            Assert.IsNotNull(spotlightEntries, string.Format("ERROR: Spotlight list is null for locale: {0}", locale));
            Assert.AreEqual(5, spotlightEntries.Count, string.Format("ERROR: Wrong number of entries for locale: {0}", locale));

            //For locales other than 'en-__'(any English locale), verifying that the spotlight content is different from content in the 'en-US' locale.
            if (!localeList[randomIndex].Contains("en-"))
            {
                List<Spotlight> spotlightEntries_ENUS = this.NotificationsServiceProxy.GetSpotlight("Test", "en-US");
                int numberOfEntries_ENUS = spotlightEntries_ENUS.Count;
                int numberOfEntries = spotlightEntries.Count;
                int i, j;
                for (i = 0; i < numberOfEntries; i++)
                {
                    for (j = 0; j < numberOfEntries_ENUS; j++)
                    {
                        Assert.AreNotEqual(spotlightEntries[i].Title, spotlightEntries_ENUS[j].Title, string.Format("ERROR: Spotlight entries for locale: {0} are same as entries for locale: en-US", locale));
                    }
                }
            }

            //verifying that the locale specification is not case sensitive.
            locale = localeList[randomIndex].ToLower();
            spotlightEntries = this.NotificationsServiceProxy.GetSpotlight("Test", locale);
            Assert.IsNotNull(spotlightEntries, string.Format("ERROR: Spotlight list is null for locale: {0}", locale));
            Assert.IsTrue(spotlightEntries.Count > 0, string.Format("ERROR: Spotlight list is empty for locale: {0}", locale));

            locale = localeList[randomIndex].ToUpper();
            spotlightEntries = this.NotificationsServiceProxy.GetSpotlight("Test", locale);
            Assert.IsNotNull(spotlightEntries, string.Format("ERROR: Spotlight list is null for locale: {0}", locale));
            Assert.IsTrue(spotlightEntries.Count > 0, string.Format("ERROR: Spotlight list is empty for locale: {0}", locale));
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test\Multiplayer.Test\Notifications\CosmosTestHooks.cs ===
﻿namespace Multiplayer.Test.API
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using Cosmos.Core;
    using Cosmos.Core.Exceptions;
    using CosmosTest.Common;
    using System.Configuration;
    using LiveN.Test.Framework.Configuration;
    using Microsoft.VisualStudio.TestTools.UnitTesting;

    /// <summary>
    /// CosmosTestHooks
    /// Main class that deals with talking to Cosmos on the backend so we can create Spotlight entries dynamically
    /// </summary>
    public class CosmosTestHooks
    {
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Spotlight item const strings
        // These are hardcoded both on the Notifications service and on the Spotlight client, so it's safe to say they're not changing anytime soon
        // These need to be kept in sync with Source/Multiplayer/AsyncMultiplayer/NotificationService/NotificationServiceFrontEnd/SpotlightManager.cs
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        /// <summary>
        /// Spotlight item type name used by the Notifications service to query Spotlight entries in Cosmos
        /// </summary>
        private const string SpotlightItemContentTypeName = "spotlight-feed";

        /// <summary>
        /// Spotlight item title used by the Notifications service to query Spotlight entries in Cosmos
        /// </summary>
        private const string SpotlightItemTitle = "title";

        /// <summary>
        /// Spotlight item subtitle used by the Notifications service to query Spotlight entries in Cosmos
        /// </summary>
        private const string SpotlightItemSubtitle = "subtitle";

        /// <summary>
        /// Spotlight item URL used by the Notifications service to query Spotlight entries in Cosmos
        /// </summary>
        private const string SpotlightItemUrl = "link";

        /// <summary>
        /// Spotlight item GameID used by the Notifications service to query Spotlight entries in Cosmos
        /// </summary>
        private const string SpotlightItemGameID = "gameid";

        /// <summary>
        /// Cosmos path const string - "Shared Content" folder name (off root)
        /// </summary>
        private const string SharedContentFolderName = "Shared Content";

        /// <summary>
        /// Cosmos path const string - Spotlight Mobile folder name
        /// </summary>
        private const string SpotlightMobileFolderName = "Mobile";

        /// <summary>
        /// Cosmos path const string - Spotlight folder name
        /// </summary>
        private const string SpotlightFolderName = "Spotlight";

        /// <summary>
        /// Cosmos path const string - Spotlight feed folder name
        /// </summary>
        private const string SpotlightFeedFolderName = "feed";

        /// <summary>
        /// The error thrown when a required input string is null or empty
        /// </summary>
        private const string InvalidStringExceptionMessage = "The provided string is either null or empty";

        /// <summary>
        /// Cosmos ContentType object that we'll use to pass in when generating Spotlight items
        /// </summary>
        private static ContentType spotlightContentType = null;

        private static Dictionary<string, bool> isSpotlightLocalePopulated = new Dictionary<string, bool>();
        private static int CosmosCacheTimeoutInMinutes = Config.Environment.CosmosCacheTimeoutInMinutes;


        /// <summary>
        /// Prevents a default instance of the CosmosTestHooks class from being created.
        /// </summary>
        private CosmosTestHooks()
        {
        }

        /// <summary>
        /// Public CreateSpotlightItem API. Uses app.config settings to find the right Cosmos instance and inject Spotlight entries there.
        /// It takes care of all initialization so the call works, including creating Spotlight fields and content types.
        /// </summary>
        /// <param name="locale">Four character code for locale, e.g. en-US, es-ES, de-DE or fr-FR</param>
        /// <param name="title">Spotlight item title</param>
        /// <param name="subtitle">Spotlight item subtitle</param>
        /// <param name="uri">Spotlight item URI. Should be a fully-qualified and escaped URL.</param>
        /// <param name="gameID">String value for gameID. GameID range is the same as UInt32.</param>
        /// <returns>The newly created item's unique ID.</returns>
        public static Guid CreateSpotlightItem(string title, string subtitle, string uri, string gameID, string locale)
        {
            // Validate title is not null or empty
            if (String.IsNullOrEmpty(title))
            {
                throw new ArgumentException(CosmosTestHooks.InvalidStringExceptionMessage, "title");
            }

            // Validate subtitle is not null or empty
            if (String.IsNullOrEmpty(subtitle))
            {
                throw new ArgumentException(CosmosTestHooks.InvalidStringExceptionMessage, "subtitle");
            }

            // Default to en-US if locale is not specified
            if (String.IsNullOrEmpty(locale))
            {
                locale = "en-US";
            }

            CreateSpotlightContentType();

            // First make sure Spotlight folder exists for that locale
            Guid feedFolderId = CreateSpotlightFolder(locale);

            Log.WriteLine("Existing entry not found, creating a new Spotlight item");

            ContentItem newSpotlightEntry = CreateContent.CreateNewContentItem(title, feedFolderId, spotlightContentType.Id);
            CosmosAuthServiceClient.Instance.LoadContentItemFields(newSpotlightEntry);
            CosmosAuthServiceClient.Instance.PublishContentItem(newSpotlightEntry.Id);
            
            //check out and update values
            CosmosAuthServiceClient.Instance.CheckOutContentItem(newSpotlightEntry.Id);
            newSpotlightEntry.Variants["InvariantCulture"].Fields[SpotlightItemTitle].Value = title;
            newSpotlightEntry.Variants["InvariantCulture"].Fields[SpotlightItemSubtitle].Value = subtitle;
            if (!String.IsNullOrEmpty(uri))
            {
                newSpotlightEntry.Variants["InvariantCulture"].Fields[SpotlightItemUrl].Value = uri.ToString();
            }

            if (!String.IsNullOrEmpty(gameID))
            {
                newSpotlightEntry.Variants["InvariantCulture"].Fields[SpotlightItemGameID].Value = gameID;
            }
            //check in and publish
            CosmosAuthServiceClient.Instance.UpdateContentItem(newSpotlightEntry);
            CosmosAuthServiceClient.Instance.CheckInContentItem(newSpotlightEntry.Id, false); //put it is this block because we don't want to leave items checked out.
            CosmosAuthServiceClient.Instance.PublishContentItem(newSpotlightEntry.Id);
            Log.WriteLine(String.Format("New Spotlight item created with ID {0}", newSpotlightEntry.Id));
            return newSpotlightEntry.Id;
        }

        /// <summary>
        /// Validates that the Spotlight content type is created
        /// </summary>
        private static void CreateSpotlightContentType()
        {
            Log.WriteLine("Verifying Spotlight content type exists in Cosmos");

            try
            {
                spotlightContentType = CosmosAuthServiceClient.Instance.GetContentTypeByName(SpotlightItemContentTypeName);
            }
            catch (Cosmos.Core.Exceptions.ContentTypeNotFoundException)
            {
                // We ignore this exception since _spotlightContentType will remain as null and we'll go into the block below to initialize it
            }

            if (spotlightContentType == null)
            {
                Log.WriteLine("Creating Spotlight Content Type");

                // To create the Spotlight content type we need to define the fields first
                spotlightContentType = new ContentType();

                // Title
                FieldDefinition titleField = new FieldDefinition();
                titleField.DisplayName = SpotlightItemTitle;
                titleField.SystemName = SpotlightItemTitle;
                titleField.FieldType = FieldDefinitionType.String;
                titleField.Constraints = new FieldConstraints();
                titleField.Constraints.Text_IsMultiline = true;
                spotlightContentType.Fields.Add(titleField);

                // Subtitle
                FieldDefinition subtitleField = new FieldDefinition();
                subtitleField.DisplayName = SpotlightItemSubtitle;
                subtitleField.SystemName = SpotlightItemSubtitle;
                subtitleField.FieldType = FieldDefinitionType.String;
                subtitleField.Constraints = new FieldConstraints();
                spotlightContentType.Fields.Add(subtitleField);

                // Url
                FieldDefinition urlField = new FieldDefinition();
                urlField.DisplayName = SpotlightItemUrl;
                urlField.SystemName = SpotlightItemUrl;
                urlField.FieldType = FieldDefinitionType.Url;
                urlField.Constraints = new FieldConstraints();
                spotlightContentType.Fields.Add(urlField);

                // GameID
                FieldDefinition gameIdField = new FieldDefinition();
                gameIdField.DisplayName = SpotlightItemGameID;
                gameIdField.SystemName = SpotlightItemGameID;
                gameIdField.FieldType = FieldDefinitionType.String;
                gameIdField.Constraints = new FieldConstraints();
                gameIdField.Constraints.Text_IsMultiline = false;
                spotlightContentType.Fields.Add(gameIdField);

                // Now that all fields are added to the Field array, create the content type and save a reference
                spotlightContentType.Name = SpotlightItemContentTypeName;

                // This actually creates the content item once all fields are filled out
                CosmosAuthServiceClient.Instance.AddContentType(spotlightContentType);
                Log.WriteLine(String.Format("Spotlight Content Type created with ID {0}", spotlightContentType.Id));
            }
            else
            {
                Log.WriteLine(String.Format("Spotlight Content Type exists in Cosmos DB with ID {0}", spotlightContentType.Id));
            }
        }

        /// <summary>
        /// Creates a Spotlight content folder in the specified locale
        /// Locale is any valid four-letter combination that Xbox LIVE supports e.g. en-US, en-GB, de-DE, fr-FR
        /// This ends up in the $/Shared Content/Mobile/Spotlight/{locale}/feed folder in Cosmos
        /// Returns a GUID representing the folder ID of the spotlight feed folder for the specified locale in Cosmos
        /// </summary>
        /// <param name="locale">Four character code for locale, e.g. en-US, es-ES, de-DE or fr-FR</param>
        /// <returns>The newly created folder's unique ID.</returns>
        private static Guid CreateSpotlightFolder(string locale)
        {
            // Cosmos content folders need to be created separately, 
            // linking each subfolder to its parent, so we need to go level by level

            // Check if the /Shared Content/Mobile folder exists. If not, create it
            string folderPath = String.Format("/{0}", SharedContentFolderName);
            CreateCosmosFolder(folderPath, SpotlightMobileFolderName);

            // Check if the /Shared Content/Mobile/Spotlight folder exists. If not, create it
            folderPath = String.Format("/{0}/{1}", SharedContentFolderName, SpotlightMobileFolderName);
            CreateCosmosFolder(folderPath, SpotlightFolderName);

            // Check if the /Shared Content/Mobile/Spotlight/<locale> folder exists. If not, create it
            folderPath = String.Format("/{0}/{1}/{2}", SharedContentFolderName, SpotlightMobileFolderName, SpotlightFolderName);
            CreateCosmosFolder(folderPath, locale);

            // Check if the /Shared Content/Mobile/Spotlight/<locale>/feed folder exists. If not, create it
            folderPath = String.Format("/{0}/{1}/{2}/{3}", SharedContentFolderName, SpotlightMobileFolderName, SpotlightFolderName, locale);
            Guid spotlightFeedFolderID = CreateCosmosFolder(folderPath, SpotlightFeedFolderName);

            ICollection<ContentItem> items = CosmosAuthServiceClient.Instance.GetChildContentItems(spotlightFeedFolderID);

            return spotlightFeedFolderID;
        }

        /// <summary>
        /// Creates a Cosmos folder based on a specified path. 
        /// If the folder path already exists, this method just returns the ID for that folder.
        /// The parentDirectoryID parameter is only used when creating a new folder, to specify which folder is the parent
        /// </summary>
        /// <param name="path">Cosmos path to create subfolder under.</param>
        /// <param name="folderName">Folder name to create.</param>
        /// <returns>The newly created folder's unique ID.</returns>
        private static Guid CreateCosmosFolder(string path, string folderName)
        {
            Guid folderID = Guid.Empty;

            // Get the parent directory ID so we can link the subfolder to it
            CosmosDirectory parentDirectory = null;
            try
            {
                //Log.WriteLine("Getting parent folder " + path);
                parentDirectory = CosmosAuthServiceClient.Instance.GetDirectoryByPath(path);
            }
            catch (DirectoryNotFoundException e)
            {
                throw new ArgumentException("Cannot recursively create subfolders with this method. Make sure parent folder exists in Cosmos", path, e);
            }

            // Get the sub-path directory if it already exists
            string fullPath = String.Format("{0}/{1}", path, folderName);
            //Log.WriteLine("Getting subpath folder " + fullPath);

            CosmosDirectory cosmosDirectory = null;
            try
            {
                cosmosDirectory = CosmosAuthServiceClient.Instance.GetDirectoryByPath(fullPath);

                // Cosmos directory already exists, print out ID
                //Log.WriteLine(String.Format("Existing Cosmos folder found: {0}", fullPath));
                folderID = cosmosDirectory.Id;
            }
            catch (DirectoryNotFoundException)
            {
                // If the Cosmos folder is not found, create it
                //Log.WriteLine(String.Format("Creating Cosmos folder: {0}", fullPath));

                CosmosDirectory directory = new CosmosDirectory();
                folderID = directory.Id;
                directory.Name = folderName;
                directory.ParentId = parentDirectory.Id;
                CosmosAuthServiceClient.Instance.AddCosmosDirectory(directory);
            }

            return folderID;
        }
        public static string GetPath(string locale)
        {
            return String.Format("/{0}/{1}/{2}/{3}", SharedContentFolderName, SpotlightMobileFolderName, SpotlightFolderName, locale);
        }
        
        // Populate Cosmos with five canned Spotlight entries for testing on the specified locale
        // By default this waits for the Cosmos cache to expire on the Notifications service
        public static void PopulateFiveSpotlightEntries(string locale)
        {
            PopulateFiveSpotlightEntries(locale, true);
        }

        // Populate Cosmos with five canned Spotlight entries for testing on the specified locale
        // This takes as an input a param specifying whether or not to wait for the Cosmos cache to expire on the Notifications service
        public static void PopulateFiveSpotlightEntries(string locale, bool waitForCacheToExpire)
        {
            if (!isSpotlightLocalePopulated.ContainsKey(locale))
            {
                string spotlightItemTestPrefix = "Test Item";

                // First delete whatever is there as it breaks the test.
                DestroyDirectory(locale);

                CosmosTestHooks.CreateSpotlightItem(
                    String.Format("{0} 1 {1}", spotlightItemTestPrefix, locale),
                    SpotlightItemType.WebLink.ToString(),
                    "http://m.bing.com",
                    "",
                    locale);

                CosmosTestHooks.CreateSpotlightItem(
                    String.Format("{0} 2 {1}", spotlightItemTestPrefix, locale),
                    SpotlightItemType.WebLink.ToString(),
                    "http://m.facebook.com",
                    "",
                    locale);

                CosmosTestHooks.CreateSpotlightItem(
                    String.Format("{0} 3 {1}", spotlightItemTestPrefix, locale),
                    SpotlightItemType.WebLink.ToString(),
                    "http://m.digg.com",
                    "",
                    locale);

                CosmosTestHooks.CreateSpotlightItem(
                    String.Format("{0} 4 {1}", spotlightItemTestPrefix, locale),
                    SpotlightItemType.GameID.ToString(),
                    null,
                    Constants.TESTGAMEID.ToString(),
                    locale);

                CosmosTestHooks.CreateSpotlightItem(
                    String.Format("{0} 5 {1}", spotlightItemTestPrefix, locale),
                    SpotlightItemType.GameID.ToString(),
                    null,
                    Constants.TESTGAMEID.ToString(),
                    locale);

                isSpotlightLocalePopulated.Add(locale, true);

                if (waitForCacheToExpire)
                {
                    WaitForCosmosCacheToExpire();
                }
            }
        }

        public static void WaitForCosmosCacheToExpire()
        {
            // Sleep until the Cosmos cache is refreshed by the Notifications service (timeout + a few seconds)
            int ExtraTimeoutInSeconds = 10;

            Log.WriteLine(String.Format("Sleeping for {0} minutes and {1} seconds to allow the Notifications-Cosmos cache to time out...",
                CosmosCacheTimeoutInMinutes,
                ExtraTimeoutInSeconds));

            System.Threading.Thread.Sleep(CosmosCacheTimeoutInMinutes * 60 * 1000 + ExtraTimeoutInSeconds * 1000);

            Log.WriteLine("Done");
        }

        public static void DestroyDirectory(string locale)
        {
            //Double check that this is being run on a test only environment.
            ValidateEnvironment();

            string folderPath = CosmosTestHooks.GetPath(locale);
            try
            {
                CosmosAuthServiceClient.Instance.DestroyDirectory(folderPath);
            }
            catch (DirectoryNotFoundException)
            {
            }
            catch (Exception e)
            {
                Log.WriteLine("Got an exception " + e.Message + " Trying again in case it is a time out issue."); // added because first test on testnet was failing with InvalidOperationException  caused by time outs
                try
                {
                    CosmosAuthServiceClient.Instance.DestroyDirectory(folderPath);
                }
                catch (DirectoryNotFoundException)
                {
                }
            }
        }

        private static void ValidateEnvironment()
        {
            //Double check that test is being run on a test only environment.
            Assert.IsFalse(string.Compare(Config.Environment.Name, "int2", true) == 0, "This test should not be run on int2");
            Assert.IsFalse(string.Compare(Config.Environment.Name, "partnernet", true) == 0, "this test should not be run on partnet net");
            string envNameForAuthoring = ConfigurationManager.AppSettings["leet_CosmosTest_AuthBaseUrl"].Substring("authoring.".Length, (ConfigurationManager.AppSettings["leet_CosmosTest_AuthBaseUrl"].Length - "authoring..xbox.com".Length));
            Log.WriteLine(string.Format("Environment provided in app config for authoring = {0}", envNameForAuthoring));
            Assert.IsFalse(string.Compare(envNameForAuthoring, "int2", true) == 0, "This test should not point to int2. Make sure that the cosmos config settings in the app config are pointing to the environment selected.");
            Assert.IsFalse(string.Compare(envNameForAuthoring, "part", true) == 0, "This test should not point to PartnerNet. Make sure that the cosmos config settings in the app config are pointing to the environment selected.");
            string envNameForPublishing = ConfigurationManager.AppSettings["leet_CosmosTest_PublishingBaseUrl"].Substring("publishing.".Length, (ConfigurationManager.AppSettings["leet_CosmosTest_PublishingBaseUrl"].Length - "publishing..xbox.com".Length));
            Log.WriteLine(string.Format("Environment provided in app config for publishing = {0}", envNameForPublishing));
            Assert.IsFalse(string.Compare(envNameForPublishing, "int2", true) == 0, "This test should not point to int2. Make sure that the cosmos config settings in the app config are pointing to the environment selected.");
            Assert.IsFalse(string.Compare(envNameForPublishing, "part", true) == 0, "This test should not point to PartnerNet. Make sure that the cosmos config settings in the app config are pointing to the environment selected.");
        }
    }

    public enum SpotlightItemType
    {
        WebLink,
        GameID,
        Both

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test\MPTestHooks\MPTestHooks.svc.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.Text;
using System.Web;
using Microsoft.ServiceModel.Web;
using Microsoft.ServiceModel.Web.SpecializedServices;
using System.ServiceModel.Activation;
using System.ServiceModel.Web;
using AsyncMultiplayer.NotificationService;
using AsyncMultiplayer.SessionCommon;

namespace MPTestHooks
{
    [ServiceBehavior(IncludeExceptionDetailInFaults = true, InstanceContextMode = InstanceContextMode.Single, ConcurrencyMode = ConcurrencyMode.Single)]
    [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed)]
    [ServiceContract]

    public class MPTestHooksService
    {
        [WebHelp(Comment = "Inject a notification to the system.")]
        [WebInvoke(Method = "POST", UriTemplate = "createnotifications")]
        [OperationContract]
        public
        void CreateNotifications(List<Notification> notificationList)
        {
            NotificationsTestHooks.CreateNotifications(notificationList);
        }

        [WebHelp(Comment = "Inject a notification to the system.")]
        [WebInvoke(Method = "GET", UriTemplate = "querygarbagenotifications/?olderthan={olderThanDateTime}")]
        [OperationContract]
        public
        List<Notification> QueryGarbageNotifications(string olderThanDateTime)
        {
            return NotificationsTestHooks.QueryGarbageNotifications(olderThanDateTime);
        }
        
        [WebHelp(Comment = "Inject a User Storage Entry to the system.")]
        [WebInvoke(Method = "GET", UriTemplate = "user?Xuid={xuid}&LastInviteResetTime={lastInviteResetTime}&LastUpdateTime={lastUpdateTime}&InviteCount={inviteCount}")]
        [OperationContract]
        public void CreateUserStorageEntry(string xuid, DateTime lastInviteResetTime, DateTime lastUpdateTime, int inviteCount)
        {
            UserDataAzureStorage userDataStorage =
                new UserDataAzureStorage(
                    Global.AzureTableStorageEndPoint,
                    Global.AzureStorageAccount,
                    Global.AzureStorageToken,
                    Global.ProxyAddress);

            // Check how many invites the user has already sent in the past hour. 
            UserData userData = userDataStorage.GetUserData(xuid);
            if (userData == null)
            {
                userData = new UserData(xuid);
            }
            userData.InviteCount = inviteCount;
            userData.LastInviteResetTime = lastInviteResetTime;
            userData.LastUpdateTime = lastUpdateTime;
            
            userDataStorage.UpdateUserData(userData);

        }
        
        [WebHelp(Comment = "Gets user data from Azure")]
        [WebInvoke(Method = "GET", UriTemplate = "userdata?xuid={xuid}")]
        [OperationContract]
        public UserData GetUserData(string xuid)
        {
            UserDataAzureStorage userDataStorage =
                new UserDataAzureStorage(
                    Global.AzureTableStorageEndPoint,
                    Global.AzureStorageAccount,
                    Global.AzureStorageToken,
                    Global.ProxyAddress);

            return userDataStorage.GetUserData(xuid); 
        }

        //[WebHelp(Comment = "Return a User Storage Entry to the system.")]
        //[WebInvoke(Method = "POST", UriTemplate = "DisplayInviteCount/?XUID={xuid}")]
        //[OperationContract]
        //public string DisplayInviteCount(string xuid)
        //{
        //    UserDataAzureStorage userDataStorage =
        //        new UserDataAzureStorage(
        //            Global.AzureTableStorageEndPoint,
        //            Global.AzureStorageAccount,
        //            Global.AzureStorageToken,
        //            Global.ProxyAddress);

        //    // Check how many invites the user has already sent in the past hour. 
        //    UserData userData = userDataStorage.GetUserData(xuid);
        //    if (userData == null)
        //    {
        //        userData = new UserData(xuid);
        //    }
           
        //    return userData.InviteCount.ToString();
        //}

        [WebHelp(Comment = "Reset the number of sessions created by the user to 0.")]
        [WebInvoke(Method = "POST", UriTemplate = "resetnumberofsessions")]
        [OperationContract]
        public void ResetNumberOfSessions(IdentityToken profile)
        {
            SessionsTestHooks.ResetSessionCount(profile);        
        }

        //[WebHelp(Comment = "Display the number of sessions created by the user .")]
        //[WebInvoke(Method = "POST", UriTemplate = "DisplaySessionCount/?IdentityToken{profile}")]
        //[OperationContract]
        //public string DisplaySessionCount(IdentityToken profile)
        //{
        //   return SessionsTestHooks.DisplaySessionCount(profile);
        //}

        [WebHelp(Comment = "Begin test")]
        [WebInvoke(Method = "POST", UriTemplate = "begintest/?TestType={testType}")]
        [OperationContract]
        public bool BeginTest(string testType)
        {
            if (testType == "notification")
            {
             if (Global.IsTestLocked)
                        return false;
                    else
                    {
                        Global.IsTestLocked = true;
                        return true;
                    }
            }
            else if (testType == "spotlight")
            {
                if (Global.IsSpotlightTestLocked)
                    return false;
                else
                {
                    Global.IsSpotlightTestLocked = true;
                    return true;
                }
            }
            else if (testType == "gameresult")
            {
                if (Global.IsGameResultTestLocked)
                    return false;
                else
                {
                    Global.IsGameResultTestLocked = true;
                    return true;
                }
            }
            else
            {
                throw new Exception("Need to pass in the test type");
            }
        }

        [WebHelp(Comment = "End Test")]
        [WebInvoke(Method = "POST", UriTemplate = "endtest/?TestType={testType}")]
        [OperationContract]
        public void EndTest(string testType)
        {
            if (testType == "notification")
            {
                Global.IsTestLocked = false;
            }
            else if (testType == "spotlight")
            {
                Global.IsSpotlightTestLocked = false;
            }
            else if (testType == "gameresult")
            {
                Global.IsGameResultTestLocked = false;
            }
            else
            {
                throw new Exception("Need to pass in the test type");
            }
        }
         
        [WebHelp(Comment = "Setup not friends and no FR")]
        [WebInvoke(Method = "POST", UriTemplate = "makenotfsnofr/?user={userXuid}&target={targetXuid}")]
        [OperationContract]
        public void SetupNotFriendsAndNoFR(ulong userXuid, ulong targetXuid)
        {
            NotificationsTestHooks.SetupNotFriendsAndNoFR(userXuid, targetXuid);
        }

        [WebHelp(Comment = "Make friends")]
        [WebInvoke(Method = "POST", UriTemplate = "makefriends/?user={userXuid}&target={targetXuid}")]
        [OperationContract]
        public void SetupFriends(ulong userXuid, ulong targetXuid)
        {
            NotificationsTestHooks.SetupFriends(userXuid, targetXuid);
        }

        [WebHelp(Comment = "Are the users friends?")]
        [WebInvoke(Method = "GET", UriTemplate = "arefriends/?user={userXuid}&target={targetXuid}")]
        [OperationContract]
        public bool AreFriends(ulong userXuid, ulong targetXuid)
        {
           return NotificationsTestHooks.AreFriends(userXuid, targetXuid);
        }

        [WebHelp(Comment = "Does the user have friend request from the target user?")]
        [WebInvoke(Method = "GET", UriTemplate = "hasfr/?user={userXuid}&target={targetXuid}")]
        [OperationContract]
        public bool HasFR(ulong userXuid, ulong targetXuid)
        {
            return NotificationsTestHooks.HasFR(userXuid, targetXuid);
        }

        [WebHelp(Comment = "Accept friend request")]
        [WebInvoke(Method = "POST", UriTemplate = "acceptfr/?user={userXuid}&target={targetXuid}")]
        [OperationContract]
        public void AcceptFR(ulong userXuid, ulong targetXuid)
        {
            NotificationsTestHooks.AcceptFriendRequest(userXuid, targetXuid);
        }

        [WebHelp(Comment = "Add friend request")]
        [WebInvoke(Method = "POST", UriTemplate = "addfr/?user={userXuid}&target={targetXuid}")]
        [OperationContract]
        public void AddFR(ulong userXuid, ulong targetXuid)
        {
            NotificationsTestHooks.AddFriendRequest(userXuid, targetXuid);
        }

        [WebHelp(Comment = "delete FR from target to user if exists.")]
        [WebInvoke(Method = "POST", UriTemplate = "cleanupfr/?user={userXuid}&target={targetXuid}")]
        [OperationContract]
        public void CleanupFR(ulong userXuid, ulong targetXuid)
        {
            NotificationsTestHooks.CleanupFR(userXuid, targetXuid);
        }

        [WebHelp(Comment = "Inject a Session to the system.")]
        [WebInvoke(Method = "POST", UriTemplate = "createsession")]
        [OperationContract]
        public void CreateSession(SessionState sessionState)
        {
            SessionsTestHooks.CreateSession(sessionState);
        }

        [WebHelp(Comment = "Add user to never list")]
        [WebInvoke(Method = "POST", UriTemplate = "addusertoneverlist/?user={userXuid}&target={targetXuid}")]
        [OperationContract]
        public void AddUserToNeverList(ulong userXuid, ulong targetXuid)
        {
            NotificationsTestHooks.AddUserToNeverList(userXuid, targetXuid);
        }

        [WebHelp(Comment = "Remove user from never list")]
        [WebInvoke(Method = "POST", UriTemplate = "removeuserfromneverlist/?user={userXuid}&target={targetXuid}")]
        [OperationContract]
        public void RemoveUserFromNeverList(ulong userXuid, ulong targetXuid)
        {
            NotificationsTestHooks.RemoveUserFromNeverList(userXuid, targetXuid);
        }

        [WebHelp(Comment = "Is user in targets never list?")]
        [WebInvoke(Method = "GET", UriTemplate = "isuserinneverlist/?user={userXuid}&target={targetXuid}")]
        [OperationContract]
        public bool IsUserInNeverList(ulong userXuid, ulong targetXuid)
        {
            return NotificationsTestHooks.IsUserInTargetsNeverList(userXuid, targetXuid);
        }

        [WebHelp(Comment = "Send Message")]
        [WebInvoke(Method = "POST", UriTemplate = "sendmessage/?user={userXuid}&target={targetXuid}")]
        [OperationContract]
        public void SendMessage(ulong userXuid, ulong targetXuid)
        {
            NotificationsTestHooks.SendMessage(userXuid, targetXuid);
        }

        [WebHelp(Comment = "Delete Message")]
        [WebInvoke(Method = "POST", UriTemplate = "deleteallunreadmessages/?user={userXuid}")]
        [OperationContract]
        public void DeleteAllUnreadMessages(ulong userXuid, ulong targetXuid)
        {
            NotificationsTestHooks.DeleteAllUnreadMessages(userXuid);
        }

        [WebHelp(Comment = "Does the user has any unread messages?")]
        [WebInvoke(Method = "GET", UriTemplate = "hasunreadmessages/?user={userXuid}")]
        [OperationContract]
        public bool HasUnreadMessages(ulong userXuid)
        {
            return NotificationsTestHooks.HasUnreadMessages(userXuid);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test\MPTestHooks\NotificationsTestHooks.cs ===
﻿using System;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using System.Text;
using System.IO;
using AsyncMultiplayer.Common.AzureStorage;
using AsyncMultiplayer.NotificationService;
using Leet.Live.Livecache.DataAccess;
using Leet.Live.Livecache.Logic.Profile;
using Leet.Live.Livecache;
using Leet.Live.Livecache.Providers;
using Leet.Core.IoCCo;
using System.Threading;
using System.Data.Services.Client;
using xonline.common.webplatform.livecache;
using xonline.common.protocol;

namespace MPTestHooks
{
    /// <summary>
    /// 
    /// This is a helper class that knows how the Notifications service is built and exposes test hooks
    /// for Test Cases to use.
    /// 
    /// Any logic that needs explicit internal knowledge outside of the Notifications API should be exposed in this class.
    /// 
    /// </summary>
    public class NotificationsTestHooks
    {

        private const int XBLFRPROCESSTIMEINSEC = 120;

        /// <summary>
        /// This class contains static helper methods and doesn't need to be instantiated.
        /// </summary>
        private NotificationsTestHooks()
        {
        }

        public static void CreateNotifications(List<Notification> notificationList)
        {
            Hashtable userXuidHash = new Hashtable();
            NotificationDataServiceContext svc = new NotificationDataServiceContext(new StorageAccountInfo(new Uri(Global.AzureTableStorageEndPoint), null, Global.AzureStorageAccount, Global.AzureStorageToken, false));
            svc.RetryPolicy = RetryPolicies.RetryN(3, TimeSpan.FromSeconds(1));
            svc.ProxyAddress = Global.ProxyAddress;

            foreach (Notification notification in notificationList)
            {
                NotificationAzureTableEntity entity = new NotificationAzureTableEntity(notification);
                svc.AddObject(NotificationDataServiceContext.NotificationTableName, entity);
               
                bool consolidateSameNtfn = true;
                bool consolidateYourTurn = true;
                if (notification.Type != Notification.NotificationType.Nudge)
                    consolidateYourTurn = false;


                // consolidate existing entity of the same type/game/session
                if (notification.Category != Notification.NotificationCategory.Info)
                {
                    // find the previous one and delete it. 
                    NotificationQueryParameter queryParameterForSameNtfn = new NotificationQueryParameter();
                    queryParameterForSameNtfn.Type = (uint)notification.Type;
                    queryParameterForSameNtfn.GameId = notification.GameId;
                    queryParameterForSameNtfn.SessionId = notification.SessionId;


                    NotificationQueryParameter queryParameterForYourTurnNtfn = new NotificationQueryParameter();
                    queryParameterForYourTurnNtfn.Type = (uint)Notification.NotificationType.YourTurn;
                    queryParameterForYourTurnNtfn.GameId = notification.GameId;
                    queryParameterForYourTurnNtfn.SessionId = notification.SessionId;

                    foreach (NotificationAzureTableEntity existEntity in GetEntityListByUserId(svc, notification.UserId))
                    {
                        if (consolidateSameNtfn)
                        {
                            if (existEntity.SatisfyQueryParamter(queryParameterForSameNtfn, true))
                            {
                                svc.DeleteObject(existEntity);
                                consolidateSameNtfn = false;
                            }
                        }
                        if (consolidateYourTurn)
                        {
                            if (existEntity.SatisfyQueryParamter(queryParameterForYourTurnNtfn, true))
                            {
                                svc.DeleteObject(existEntity);
                                consolidateYourTurn = false;
                            }
                        }
                        if (!consolidateSameNtfn && !consolidateYourTurn)
                        {
                            break;
                        }
                    }
                }

                if (!userXuidHash.ContainsKey(notification.UserId))
                {
                    userXuidHash.Add(notification.UserId, "Don't care");
                }
            }
            svc.SaveChangesWithRetries();
            ICollection userXuids = userXuidHash.Keys;
            foreach (string userXuid in userXuids)
            {
                UpdateUsersLastUpdateTime(userXuid);
            }
        }

        public static List<Notification> QueryGarbageNotifications(string olderThanDateTime)
        {
            IEnumerable<NotificationAzureTableEntity> entityList = GetEntityListByDate(olderThanDateTime);
            List<Notification> nList = new List<Notification>();
            foreach (NotificationAzureTableEntity entity in entityList)
            {
                Notification.NotificationType type = (Notification.NotificationType)Enum.ToObject(
                    typeof(Notification.NotificationType),
                    entity.Type);

                Notification notification = Notification.DeserializeFromString(entity.NotificationString, type);
                nList.Add(notification);
            }
            return nList;
        }

        private static string UpdateUsersLastUpdateTime(string userXuid)
        {
            string returnValue = string.Empty;

            try
            {
                UserDataAzureStorage userDataStorage = new UserDataAzureStorage(
                    Global.AzureTableStorageEndPoint,
                    Global.AzureStorageAccount,
                    Global.AzureStorageToken,
                    Global.ProxyAddress);

                userDataStorage.UpdateUserDataTimeStamp(userXuid);
            }
            catch (Exception e)
            {
                // If you get here there's a problem in the Azure service
                throw e;
            }
            return returnValue;
        }

        private static IEnumerable<NotificationAzureTableEntity> GetEntityListByUserId(
            NotificationDataServiceContext svc,
            string userId)
        {
            var queryResult = from c in svc.AsyncNotificationTable
                              where c.PartitionKey == userId
                              select c;

            TableStorageDataServiceQuery<NotificationAzureTableEntity> query =
                new TableStorageDataServiceQuery<NotificationAzureTableEntity>(queryResult as DataServiceQuery<NotificationAzureTableEntity>, svc.RetryPolicy);

            IEnumerable<NotificationAzureTableEntity> res = query.ExecuteAllWithRetries();
            return res;
        }

        private static IEnumerable<NotificationAzureTableEntity> GetEntityListByDate(string olderThanDateTime)
        {
            NotificationDataServiceContext svc = new NotificationDataServiceContext(new StorageAccountInfo(new Uri(Global.AzureTableStorageEndPoint), null, Global.AzureStorageAccount, Global.AzureStorageToken, false));
            svc.RetryPolicy = RetryPolicies.RetryN(2, TimeSpan.FromSeconds(1));
            svc.ProxyAddress = Global.ProxyAddress;
            var queryResult = from c in svc.AsyncNotificationTable
                              where c.SentTime.CompareTo(DateTime.Parse(olderThanDateTime)) < 0 //could be really slow as it is not querying by row key or partition key                              select c;
                              select c;
            TableStorageDataServiceQuery<NotificationAzureTableEntity> query =
                new TableStorageDataServiceQuery<NotificationAzureTableEntity>(queryResult as DataServiceQuery<NotificationAzureTableEntity>, svc.RetryPolicy);
            IEnumerable<NotificationAzureTableEntity> res = query.ExecuteAllWithRetries();
            return res;
        }

        public static bool HasFriendState(ulong userXuid, ulong targetXuid, FriendState friendState)
        {
            bool friendInfo = false;
            var presenceDataAccess = Container.Instance.GetComponent<IPresenceDataAccess>();
            IReadOnlyFriendInfo[] xboxFriendsInfo = null;

            LIVEnServiceMobileExtendedAuthDataProvider.Puid = userXuid;
            xboxFriendsInfo = presenceDataAccess.GetFriendsInfo(userXuid, true, false);

            if (xboxFriendsInfo != null)
            {
                var friendsRequesting = xboxFriendsInfo.Where(item => (item.FriendState == friendState & item.LivePuid == targetXuid));

                if ((friendsRequesting != null) && (friendsRequesting.Count() > 0))
                {
                    friendInfo = true;
                }
            }
            return friendInfo;
        }

        public static void AcceptFriendRequest(ulong userXuid, ulong targetXuid)
        {
            var presenceDataAccess = Container.Instance.GetComponent<IPresenceDataAccess>();
            LIVEnServiceMobileExtendedAuthDataProvider.Puid = userXuid;
            presenceDataAccess.AcceptFriendRequest(userXuid, targetXuid);
        }

        public static void AddFriendRequest(ulong userXuid, ulong targetXuid)
        {
            var presenceDataAccess = Container.Instance.GetComponent<IPresenceDataAccess>();
            LIVEnServiceMobileExtendedAuthDataProvider.Puid = userXuid;
            presenceDataAccess.AddFriend(userXuid, targetXuid);
        }

        public static void RejectFriendRequest(ulong userXuid, ulong targetXuid)
        {
            var presenceDataAccess = Container.Instance.GetComponent<IPresenceDataAccess>();
            LIVEnServiceMobileExtendedAuthDataProvider.Puid = userXuid;
            presenceDataAccess.RejectFriendRequest(userXuid, targetXuid);
        }

        public static void DeleteFriend(ulong userXuid, ulong targetXuid)
        {
            var presenceDataAccess = Container.Instance.GetComponent<IPresenceDataAccess>();
            LIVEnServiceMobileExtendedAuthDataProvider.Puid = userXuid;
            presenceDataAccess.DeleteFriend(userXuid, targetXuid);
        }

        public static void VerifyFriendRequest(ulong userXuid, ulong targetXuid, string message)
        {
            for (int i = 0; i < 10; i++)
            {
                if (HasFriendState(userXuid, targetXuid, FriendState.Requesting))
                    return;
                else
                    Thread.Sleep(XBLFRPROCESSTIMEINSEC * 100);
            }
        }
        
        public static void SetupNotFriendsAndNoFR(ulong userXuid, ulong targetXuid)
        {
            if (HasFriendState(userXuid, targetXuid, FriendState.Friend))
                DeleteFriend(userXuid, targetXuid);
            if (HasFriendState(userXuid, targetXuid, FriendState.Requesting))
                RejectFriendRequest(userXuid, targetXuid);
            if (HasFriendState(userXuid, targetXuid, FriendState.Pending))
                RejectFriendRequest(targetXuid, userXuid);
        }
        public static void SetupFriends(ulong userXuid, ulong targetXuid)
        {
            if (!HasFriendState(userXuid, targetXuid, FriendState.Friend))
            {
                AddFriendRequest(targetXuid, userXuid);
                VerifyFriendRequest(userXuid, targetXuid, "Couldn't find friend request that was just added to XBL");
                AcceptFriendRequest(userXuid, targetXuid);
            }
        }

        public static bool HasFR(ulong userXuid, ulong targetXuid)
        {
            return HasFriendState(userXuid, targetXuid, FriendState.Requesting);
        }

        public static bool AreFriends(ulong userXuid, ulong targetXuid)
        {
            return HasFriendState(userXuid, targetXuid, FriendState.Friend);
        }
  
        public static void CleanupFR(ulong userXuid, ulong targetXuid)
        {
            if (HasFriendState(userXuid, targetXuid, FriendState.Requesting))
                RejectFriendRequest(userXuid, targetXuid);
        }

        public static void AddUserToNeverList(ulong userXuid, ulong targetXuid)
        {
            AddUsersToNeverListMsg request = new AddUsersToNeverListMsg();
            request.qwUserID = userXuid;
            request.rgqwNeverListUsers = new ulong[] { targetXuid };
            request.cNeverListUserCount = 1;
            LIVEnServiceMobileExtendedAuthDataProvider.Puid = userXuid;
            var _lcPresence = Container.Instance.GetComponent<ILcPresence>();
            _lcPresence.AddUsersToNeverList(request);
        }

        public static void RemoveUserFromNeverList(ulong userXuid, ulong targetXuid)
        {
            RemoveUsersFromNeverListMsg request = new RemoveUsersFromNeverListMsg();
            request.qwUserID = userXuid;
            request.rgqwNeverListUsers = new ulong[] { targetXuid };
            request.cNeverListUserCount = 1;
            LIVEnServiceMobileExtendedAuthDataProvider.Puid = userXuid;
            var _lcPresence = Container.Instance.GetComponent<ILcPresence>();
            _lcPresence.RemoveUsersFromNeverList(request);
        }

        public static bool IsUserInTargetsNeverList(ulong userXuid, ulong targetXuid)
        {
            LIVEnServiceMobileExtendedAuthDataProvider.Puid = userXuid;
            var presenceDataAccess = Container.Instance.GetComponent<IPresenceDataAccess>();
            uint[] hrResults = presenceDataAccess.CanSendMessageToUsers(userXuid, new ulong[] { targetXuid });
            if (hrResults[0] == LivecacheConstants.XONLINE_E_MESSAGE_SENDER_BLOCKED)
                return true;
            else
                return false;
        }


        public static void SendMessage(ulong userXuid, ulong targetXuid)
        {
            LIVEnServiceMobileExtendedAuthDataProvider.Puid = userXuid;
            
            var presenceDataAccess = Container.Instance.GetComponent<IPresenceDataAccess>();
            
            MessageDetails details = new MessageDetails();
            CMessage cMessage = new CMessage();
            cMessage.AddProperty(MsgDefs.XONLINE_MSG_PROP_TEXT, "Test message");
            cMessage.SetDetails(ref details);

            presenceDataAccess.SendMessage(userXuid, "FakeGamertag", 0, MsgDefs.XONLINE_MSG_FLAG_HAS_TEXT, 30, xonline.common.protocol.MsgDefs.XONLINE_MSG_TYPE_PERSONAL_MESSAGE, new ulong[] { targetXuid }, details);
        }

        public static void DeleteAllUnreadMessages(ulong xuid)
        {
            List<MessageSummary2> unreadMessages = GetUnreadMessages(xuid);
            if (unreadMessages.Count == 0)
                return;
            else
            {
                LIVEnServiceMobileExtendedAuthDataProvider.Puid = xuid;

                var presenceDataAccess = Container.Instance.GetComponent<IPresenceDataAccess>();
                foreach (MessageSummary2 message in unreadMessages)
                {
                    presenceDataAccess.DeleteMessage(xuid, message.dwMessageID, 0);
                }
            }
        }

        public static bool HasUnreadMessages(ulong xuid)
        {
            if (GetUnreadMessages(xuid).Count > 0)
                return true;
            else
                return false;
        }

        private static List<MessageSummary2> GetUnreadMessages(ulong xuid)
        {
            LIVEnServiceMobileExtendedAuthDataProvider.Puid = xuid;

            var presenceDataAccess = Container.Instance.GetComponent<IPresenceDataAccess>();
            MessageSummary2[] messages = presenceDataAccess.EnumerateMessages(xuid);

            List<MessageSummary2> unreadMessages = new List<MessageSummary2>();
            foreach (MessageSummary2 messageSummary in messages)
            {
                if ((messageSummary.dwMessageFlags & xonline.common.protocol.MsgDefs.XONLINE_MSG_FLAG_NON_EXPORTABLE) == 0 &&
                         (messageSummary.dwMessageFlags & xonline.common.protocol.MsgDefs.XONLINE_MSG_FLAG_READ) == 0 &&
                        messageSummary.bMessageType != xonline.common.protocol.MsgDefs.XONLINE_MSG_TYPE_FRIEND_REQUEST &&
                        messageSummary.bMessageType != xonline.common.protocol.MsgDefs.XONLINE_MSG_TYPE_LIVE_MESSAGE &&
                        messageSummary.bMessageType != xonline.common.protocol.MsgDefs.XONLINE_MSG_TYPE_COMP_REMINDER &&
                        messageSummary.bMessageType != xonline.common.protocol.MsgDefs.XONLINE_MSG_TYPE_COMP_REQUEST &&
                        messageSummary.bMessageType != xonline.common.protocol.MsgDefs.XONLINE_MSG_TYPE_TEAM_RECRUIT &&
                        messageSummary.dwSenderTitleID != xonline.common.service.XOn.ZUNE_TITLE_ID)
                    unreadMessages.Add(messageSummary);
            }
            return unreadMessages;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test\Service References\GmsIngestionService\Reference.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MultiPlayer.Test.GmsIngestionService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://gamemetadata.common.mix.contentingestion/V1", ConfigurationName="GmsIngestionService.IIngestionService")]
    public interface IIngestionService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gamemetadata.common.mix.contentingestion/V1/IIngestionService/ConfigureGam" +
            "e", ReplyAction="http://gamemetadata.common.mix.contentingestion/V1/IIngestionService/ConfigureGam" +
            "eResponse")]
        MultiPlayer.Test.GmsIngestionService.ConfigureGameResponse ConfigureGame(MultiPlayer.Test.GmsIngestionService.ConfigureGameRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gamemetadata.common.mix.contentingestion/V1/IIngestionService/ConfigureGam" +
            "eViaXml", ReplyAction="http://gamemetadata.common.mix.contentingestion/V1/IIngestionService/ConfigureGam" +
            "eViaXmlResponse")]
        MultiPlayer.Test.GmsIngestionService.ConfigureGameViaXmlResponse ConfigureGameViaXml(MultiPlayer.Test.GmsIngestionService.ConfigureGameViaXmlRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ConfigureGame", WrapperNamespace="http://gamemetadata.common.mix.contentingestion/V1", IsWrapped=true)]
    public partial class ConfigureGameRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://gamemetadata.common.mix.contentingestion/V1", Order=0)]
        public GameMetadata.Common.Mix.ContentIngestion.Game game;
        
        public ConfigureGameRequest() {
        }
        
        public ConfigureGameRequest(GameMetadata.Common.Mix.ContentIngestion.Game game) {
            this.game = game;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ConfigureGameResponse", WrapperNamespace="http://gamemetadata.common.mix.contentingestion/V1", IsWrapped=true)]
    public partial class ConfigureGameResponse {
        
        public ConfigureGameResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ConfigureGameViaXml", WrapperNamespace="http://gamemetadata.common.mix.contentingestion/V1", IsWrapped=true)]
    public partial class ConfigureGameViaXmlRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://gamemetadata.common.mix.contentingestion/V1", Order=0)]
        public string gameXml;
        
        public ConfigureGameViaXmlRequest() {
        }
        
        public ConfigureGameViaXmlRequest(string gameXml) {
            this.gameXml = gameXml;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ConfigureGameViaXmlResponse", WrapperNamespace="http://gamemetadata.common.mix.contentingestion/V1", IsWrapped=true)]
    public partial class ConfigureGameViaXmlResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://gamemetadata.common.mix.contentingestion/V1", Order=0)]
        public bool ConfigureGameViaXmlResult;
        
        public ConfigureGameViaXmlResponse() {
        }
        
        public ConfigureGameViaXmlResponse(bool ConfigureGameViaXmlResult) {
            this.ConfigureGameViaXmlResult = ConfigureGameViaXmlResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface IIngestionServiceChannel : MultiPlayer.Test.GmsIngestionService.IIngestionService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class IngestionServiceClient : System.ServiceModel.ClientBase<MultiPlayer.Test.GmsIngestionService.IIngestionService>, MultiPlayer.Test.GmsIngestionService.IIngestionService {
        
        public IngestionServiceClient() {
        }
        
        public IngestionServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public IngestionServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IngestionServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IngestionServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public MultiPlayer.Test.GmsIngestionService.ConfigureGameResponse ConfigureGame(MultiPlayer.Test.GmsIngestionService.ConfigureGameRequest request) {
            return base.Channel.ConfigureGame(request);
        }
        
        public MultiPlayer.Test.GmsIngestionService.ConfigureGameViaXmlResponse ConfigureGameViaXml(MultiPlayer.Test.GmsIngestionService.ConfigureGameViaXmlRequest request) {
            return base.Channel.ConfigureGameViaXml(request);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\makefile.inc ===
# this is a slight modification of the makefile.def target that skips ComVisible since it's specified per project.

$(OBJ_PATH)\$O\_generated.cs: $(SOURCES_USED)
    -$(_DEL)
    set createfile=<<$@.temp
!if defined(LANGUAGE_SPECIFIC_MANAGED_RESOURCES) && "$(MUI)" == "1" && "$(URT_VER)" == "2.0"
[assembly:System.Resources.NeutralResourcesLanguage("en")]
!endif
[assembly:System.Reflection.AssemblyVersion("$(ASSEMBLY_IDENTITY_VERSION)")]
!ifdef VER_PRODUCTNAME_STR
[assembly:System.Reflection.AssemblyProduct("$(VER_PRODUCTNAME_STR)")]
!endif
!ifdef VER_LEGALCOPYRIGHT_STR
[assembly:System.Reflection.AssemblyCopyright("$(VER_LEGALCOPYRIGHT_STR)")]
!endif
!ifdef VER_COMPANYNAME_STR
[assembly:System.Reflection.AssemblyCompany("$(VER_COMPANYNAME_STR)")]
!endif
!ifdef VER_PRODUCTVERSION_STR
[assembly:System.Reflection.AssemblyFileVersion("$(VER_PRODUCTVERSION_STR)")]
!endif
<<KEEP
!if defined(_ASSEMBLY_IDENTITY) \
        && "$(_ASSEMBLY_IDENTITY_PUBLIC_KEY_NAME_LOWERCASE)" != "none" \
        && "$(_ASSEMBLY_IDENTITY:\=)" == "$(_ASSEMBLY_IDENTITY)" \
        && !defined(_MANAGED_CXX_LIBRARY) \
        && "$(MANAGED_TARGET_TYPE)" != "module"
    asmIdToAttribs.cmd "$(_ASSEMBLY_IDENTITY)" $@.temp csharp
!endif
    $(_MOVE)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test\Multiplayer.Test\Notifications\NotificationGCTests.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using AsyncMultiplayer.NotificationService;
using LiveN.Test.Framework.Configuration;
using System.Threading;
using System.IO;
using LiveN.Test.Common.Web;
using System.Net;
using System.Configuration;
using Multiplayer.Test.UserAccounts;
using LiveN.Test.Common;
using LiveN.Test.Framework;

namespace Multiplayer.Test.API
{
    /// <summary>
    /// Summary description for NotificationGCTests
    /// </summary>
    [TestClass]
    public class NotificationGCTests : TestAreaBase
    {
        private static Random randomGenerator = new Random();
        private static XboxLiveAccount gcUser;
        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
        }

        [TestInitialize()]
        public void MyTestInitialize()
        {
            try
            {
                gcUser = Users.CreateUsers(1)[0];
            }
            catch
            {
                gcUser = new XboxLiveAccount();
                gcUser.MemberName = ConfigurationManager.AppSettings["GCUserName"];
                gcUser.Password = ConfigurationManager.AppSettings["GCPassword"];
            }
        }

        [TestCleanup]
        public void TestCleanup()
        {
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("This test verifies the boundary time for each types of notifications except FR.")]
        [TestProperty("Type", "Feature")]
        public void N_GC_EachType_7DaysOld_EachType_6DaysOld()
        {
            Assert.AreEqual("dev", Config.EnvironmentSettings.Selected, true,  "This test is can only be run against a dev box");
            TestAreaBase.notificationCommon.CheckNotificationCount(gcUser.MemberName, gcUser.Password);

            DateTime oldSentDate = DateTime.UtcNow.AddDays(-7);
            DateTime newSentDate = DateTime.UtcNow.AddDays(-6);

            List<Notification> oldNList = new List<Notification>();
            List<Notification> newNList = new List<Notification>();

            foreach (Notification.NotificationType t in nTypes)
            {
                Notification n = NotificationTestCommon.testHooksClient.BuildNotification(Guid.NewGuid().ToString(), Users.GetXuid(gcUser.MemberName, gcUser.Password), oldSentDate.ToString(), t);
                oldNList.Add(n);
                n = NotificationTestCommon.testHooksClient.BuildNotification(Guid.NewGuid().ToString(), Users.GetXuid(gcUser.MemberName, gcUser.Password), newSentDate.ToString(), t);
                newNList.Add(n);
            }
            NotificationTestCommon.testHooksClient.CreateNotifications(oldNList);
            NotificationTestCommon.testHooksClient.CreateNotifications(newNList);
            VerifyOldNotificationIsCreated(oldNList.Count, oldSentDate.AddMinutes(1));
            StopAndStartService();
            VerifyCleaned(oldNList.Count, oldSentDate.AddMinutes(1));
            VerifyNewNotificationsAreNotDeleted(newNList, oldSentDate.AddMinutes(1));
        }

        //modify test to change the frequency to be 5 minutes in NPDB when this setting is available there. 
        //For now, manually change frequecy in congif file, TimerBasedService.exe.config, to 300.
        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("This test verifies the boundary time for each types of notifications except FR.")]
        [TestProperty("Type", "Feature")]
        public void N_GC_EachType_7DaysOld_EachType_6DaysOld_SecondIteration()
        {
             Assert.AreEqual("dev", Config.EnvironmentSettings.Selected, true,  "This test is can only be run against a dev box");
            TestAreaBase.notificationCommon.CheckNotificationCount(gcUser.MemberName, gcUser.Password);

            DateTime oldSentDate = DateTime.UtcNow.AddDays(-7);
            DateTime newSentDate = DateTime.UtcNow.AddDays(-6);

            List<Notification> oldNList = new List<Notification>();
            List<Notification> newNList = new List<Notification>();

            foreach (Notification.NotificationType t in nTypes)
            {
                Notification n = NotificationTestCommon.testHooksClient.BuildNotification(Guid.NewGuid().ToString(), Users.GetXuid(gcUser.MemberName, gcUser.Password), oldSentDate.ToString(), t);
                oldNList.Add(n);
                n = NotificationTestCommon.testHooksClient.BuildNotification(Guid.NewGuid().ToString(), Users.GetXuid(gcUser.MemberName, gcUser.Password), newSentDate.ToString(), t);
                newNList.Add(n);
            }
            NotificationTestCommon.testHooksClient.CreateNotifications(oldNList);
            NotificationTestCommon.testHooksClient.CreateNotifications(newNList);
            VerifyOldNotificationIsCreated(oldNList.Count, oldSentDate.AddMinutes(1));
            StopAndStartService();
            VerifyCleaned(oldNList.Count, oldSentDate.AddMinutes(1));
            VerifyNewNotificationsAreNotDeleted(newNList, oldSentDate.AddMinutes(1));

            //create another set of old notifications and wait for the second round the garbage collector starts by its own.
            NotificationTestCommon.testHooksClient.CreateNotifications(oldNList);
            VerifyOldNotificationIsCreated(oldNList.Count, oldSentDate.AddMinutes(1));
            Thread.Sleep(300000);
            VerifyCleaned(oldNList.Count, oldSentDate.AddMinutes(1));
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify that GC deletes only old notifications by creating 5 new and 5 old notifications of same session.")]
        [TestProperty("Type", "Feature")]
        public void N_GC_5OldRandomNewNotification_SameSession()
        {
             Assert.AreEqual("dev", Config.EnvironmentSettings.Selected, true,  "This test is can only be run against a dev box");
            TestAreaBase.notificationCommon.CheckNotificationCount(gcUser.MemberName, gcUser.Password);
            DateTime olderThanDateTime = DateTime.UtcNow.AddDays(-7);
            List<Notification> oldNList = new List<Notification>();
            List<Notification> newNList = new List<Notification>();
            for (int i = 0; i < nTypes.Length / 2; i++)
            {
                DateTime sentTime = GetRandomOldDate();
                Notification oldNotification = NotificationTestCommon.testHooksClient.BuildNotification(NotificationTestCommon.testHooksClient.TestSessionId, Users.GetXuid(gcUser.MemberName, gcUser.Password), sentTime.ToString(), nTypes[i]);
                oldNList.Add(oldNotification);
                Notification newNotification = NotificationTestCommon.testHooksClient.BuildNotification(NotificationTestCommon.testHooksClient.TestSessionId, Users.GetXuid(gcUser.MemberName, gcUser.Password), string.Empty, nTypes[nTypes.Length - 1 - i]);
                newNList.Add(newNotification);
            }
            NotificationTestCommon.testHooksClient.CreateNotifications(oldNList);
            NotificationTestCommon.testHooksClient.CreateNotifications(newNList);
            VerifyOldNotificationIsCreated(oldNList.Count, olderThanDateTime);
            StopAndStartService();
            VerifyCleaned(oldNList.Count, olderThanDateTime);
            VerifyNewNotificationsAreNotDeleted(NotificationTestCommon.testHooksClient.TestSessionId, newNList, olderThanDateTime);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("This test verifies that FR notifications are not cleaned up by garbage collector.")]
        [TestProperty("Type", "Feature")]
        public void P_GC_FRNotifications()
        {
            Assert.AreEqual("dev", Config.EnvironmentSettings.Selected, true,  "This test is can only be run against a dev box");
            TestAreaBase.notificationCommon.CheckNotificationCountFR(gcUser.MemberName, gcUser.Password);
            DateTime olderThanDateTime = DateTime.UtcNow.AddDays(-7);
            List<Notification> oldFRNList = new List<Notification>();
            List<Notification> oldNList = new List<Notification>();

            foreach (Notification.NotificationType t in nTypes)
            {
                DateTime sentTime = GetRandomOldDate();
                Notification friendReqNotification = NotificationTestCommon.testHooksClient.BuildFRNotification(Users.GetXuid(gcUser.MemberName, gcUser.Password), sentTime.ToString());
                Notification notification = NotificationTestCommon.testHooksClient.BuildNotification(Guid.NewGuid().ToString(), Users.GetXuid(gcUser.MemberName, gcUser.Password), sentTime.ToString());
                oldFRNList.Add(friendReqNotification);
                oldNList.Add(notification);
            }
            NotificationTestCommon.testHooksClient.CreateNotifications(oldFRNList);
            NotificationTestCommon.testHooksClient.CreateNotifications(oldNList);
            VerifyOldNotificationIsCreated((oldNList.Count + (oldFRNList.Count) / 2)/*because we might not be able to create as many FR notifications as we expected since these are fake FR notifications*/, olderThanDateTime);
            StopAndStartService();
            VerifyCleaned((oldNList.Count + oldFRNList.Count), olderThanDateTime);
        }

        //Bug: 5353
        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verifies that user's last update time gets updated when user's notification is cleaned by GC.")]
        [TestProperty("Type", "Feature")]
        public void P_GC_Etag()
        {
            Assert.AreEqual("dev", Config.EnvironmentSettings.Selected, true,  "This test is can only be run against a dev box");
            TestAreaBase.notificationCommon.CheckNotificationCount(gcUser.MemberName, gcUser.Password);
            DateTime olderThanDateTime = DateTime.UtcNow.AddDays(-7);
            NotificationTestCommon.testHooksClient.CreateNotifications(BuildOldNotifications(1));
            VerifyOldNotificationIsCreated(1, olderThanDateTime);
            List<Notification> nList = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                string.Empty,
                0,
                Constants.IGNORE_lAST_ID,
                100,
                string.Empty,
                false,
                gcUser.MemberName,
                gcUser.Password,
                null);
            Assert.IsNotNull(nList);
            Assert.AreEqual<int>(1, nList.Count, "Unexpected number of Notifications.");
            string etag = this.NotificationsServiceProxy.EtagInResponse;
            StopAndStartService();
            Thread.Sleep(60000);
            nList = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                string.Empty,
                0,
                Constants.IGNORE_lAST_ID,
                100,
                string.Empty,
                false,
                gcUser.MemberName,
                gcUser.Password,
                etag);
            Assert.IsNotNull(nList);
            Assert.AreEqual<int>(0, nList.Count, "Unexpected number of Notifications.");
            VerifyCleaned(1, olderThanDateTime);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verifies that user's last update time does not get updated when user's notification is not deleted by GC.")]
        [TestProperty("Type", "Feature")]
        public void N_GC_Etag()
        {
             Assert.AreEqual("dev", Config.EnvironmentSettings.Selected, true,  "This test is can only be run against a dev box");
            TestAreaBase.notificationCommon.CheckNotificationCount(gcUser.MemberName, gcUser.Password);
            DateTime olderThanDateTime = DateTime.UtcNow.AddDays(-7);
            NotificationTestCommon.testHooksClient.CreateDummyNotification(Users.GetXuid(gcUser.MemberName, gcUser.Password));
            List<Notification> oldNList = new List<Notification>();
            for (int i = 0; i < 5; i++)
            {
                DateTime sentTime = GetRandomOldDate();
                Notification notification = NotificationTestCommon.testHooksClient.BuildNotification(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password), sentTime.ToString());
                notification.Id = string.Format("{0:D19}-{1}", (DateTime.MaxValue.Ticks - sentTime.Ticks), Guid.NewGuid());
                oldNList.Add(notification);
            }
            NotificationTestCommon.testHooksClient.CreateNotifications(oldNList);
            VerifyOldNotificationIsCreated(5, olderThanDateTime);
            List<Notification> nList = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                string.Empty,
                0,
                Constants.IGNORE_lAST_ID,
                100,
                string.Empty,
                false,
                gcUser.MemberName,
                gcUser.Password,
                null);
            Assert.IsNotNull(nList);
            Assert.AreEqual<int>(1, nList.Count, "Unexpected number of Notifications.");
            string etag = this.NotificationsServiceProxy.EtagInResponse;
            StopAndStartService();
            Thread.Sleep(60000);
            try
            {
                nList = this.NotificationsServiceProxy.GetNotifications(
                    Constants.TESTGAMEID.ToString(),
                    string.Empty,
                    0,
                    Constants.IGNORE_lAST_ID,
                    100,
                    string.Empty,
                    false,
                    gcUser.MemberName,
                    gcUser.Password,
                    etag);
                Assert.Fail("Expected a 304.");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.NotModified, e.Response.Status);
            }
            VerifyCleaned(1, olderThanDateTime);
        }

        //This is expected to fail due to 5353 and 5356
        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verifies that user's last update time does not get updated when user has old FR notification that will not be cleaned up be GC.")]
        [TestProperty("Type", "Feature")]
        public void P_GC_Etag_FRNotification()
        {
             Assert.AreEqual("dev", Config.EnvironmentSettings.Selected, true,  "This test is can only be run against a dev box");
            TestAreaBase.notificationCommon.CheckNotificationCountFR(gcUser.MemberName, gcUser.Password);
            DateTime olderThanDateTime = DateTime.UtcNow.AddDays(-7);
            List<Notification> oldFRNList = new List<Notification>();
            for (int i = 0; i < 5; i++)
            {
                DateTime sentTime = GetRandomOldDate();
                Notification friendReqNotification = NotificationTestCommon.testHooksClient.BuildFRNotification(Users.GetXuid(gcUser.MemberName, gcUser.Password), sentTime.ToString());
                oldFRNList.Add(friendReqNotification);
            }
            NotificationTestCommon.testHooksClient.CreateNotifications(oldFRNList);
            VerifyOldNotificationIsCreated(oldFRNList.Count/2, olderThanDateTime);

            List<Notification> nList = this.NotificationsServiceProxy.GetNotifications(
                string.Empty,
                string.Empty,
                0,
                Constants.IGNORE_lAST_ID,
                100,
                string.Empty,
                false,
                gcUser.MemberName,
                gcUser.Password,
                null);
            Assert.IsNotNull(nList);
            Assert.IsTrue(nList.Count >= 3, "Unexpected number of Notifications.");
            string etag = this.NotificationsServiceProxy.EtagInResponse;
            StopAndStartService();
            Thread.Sleep(60000);
            nList = this.NotificationsServiceProxy.GetNotifications(
                    string.Empty,
                    string.Empty,
                    0,
                    Constants.IGNORE_lAST_ID,
                    100,
                    string.Empty,
                    false,
                    gcUser.MemberName,
                    gcUser.Password,
                    etag);
            VerifyCleaned(oldFRNList.Count, olderThanDateTime);
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Create one thousand old notification and make sure that the all get deleted by GC.")]
        [TestProperty("Type", "Feature")]
        public void P_GC_Clean1ThousandOldNotification()
        {
             Assert.AreEqual("dev", Config.EnvironmentSettings.Selected, true,  "This test is can only be run against a dev box");
            DateTime olderThanDateTime = DateTime.UtcNow.AddDays(-7);
            TestAreaBase.notificationCommon.CheckNotificationCount(gcUser.MemberName, gcUser.Password);

            int i = 0;
            int timeouts = 0;
            while (i < 20 && timeouts < 10)
            {
                try
                {
                    CreateNotifications(1);
                    i++;
                }
                catch (SystemException e)
                {
                    if (e.Message == "The operation has timed out")
                    {
                        TraceEx.TraceStart("Call timed out. Trying again.");
                        timeouts++;
                        MPTestHooksProxy.Timeout = 180000; //increase timeout to three minutes.
                    }
                    else
                        throw new Exception(e.Message);
                }
            }

            List<Notification> newNList = CreateRandomNewNotifications();
            StopAndStartService();
            VerifyCleaned(1000, olderThanDateTime);
            VerifyNewNotificationsAreNotDeleted(newNList, olderThanDateTime);
        }

        //this test took 24 minutest when I tested it (took too much time creating notifications. It took less than a minute to be cleaned up)
        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Create three thousand old notification and make sure that the all get deleted by GC.")]
        [TestProperty("Type", "Feature")]
        public void P_GC_Clean3ThousandOldNotification()
        {
             Assert.AreEqual("dev", Config.EnvironmentSettings.Selected,  true, "This test is can only be run against a dev box");
            DateTime olderThanDateTime = DateTime.UtcNow.AddDays(-7);
            TestAreaBase.notificationCommon.CheckNotificationCount(gcUser.MemberName, gcUser.Password);

            int i = 0;
            int timeouts = 0;
            while (i < 60 && timeouts < 10)
            {
                try
                {
                    CreateNotifications(1);
                    i++;
                }
                catch (SystemException e)
                {
                    if (e.Message == "The operation has timed out")
                    {
                        TraceEx.TraceStart("Call timed out. Trying again.");
                        timeouts++;
                        MPTestHooksProxy.Timeout = 180000; //increase timeout to three minutes.
                    }
                    else
                        throw new Exception(e.Message);
                }
            }

            List<Notification> newNList = CreateRandomNewNotifications();
            StopAndStartService();
            VerifyCleaned(3000, olderThanDateTime);
            VerifyNewNotificationsAreNotDeleted(newNList, olderThanDateTime);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("This test verifies that FR notifications are not cleaned up by garbage collector.")]
        [TestProperty("Type", "Feature")]
        public void P_GC_MessageNotifications()
        {
            Assert.AreEqual("dev", Config.EnvironmentSettings.Selected, true, "This test is can only be run against a dev box");
            TestAreaBase.notificationCommon.CheckNotificationCount(string.Empty, string.Empty, string.Empty, gcUser.MemberName, gcUser.Password);
            DateTime olderThanDateTime = DateTime.UtcNow.AddDays(-7);
            List<Notification> oldMessageNotificationList = new List<Notification>();
            List<Notification> oldNList = new List<Notification>();
            
            foreach (Notification.NotificationType t in nTypes)
            {
                DateTime sentTime = GetRandomOldDate();
                Notification fakeMessageNotification = NotificationTestCommon.testHooksClient.BuildMessageNotification(Users.GetXuid(gcUser.MemberName, gcUser.Password), sentTime.ToString());
                Notification notification = NotificationTestCommon.testHooksClient.BuildNotification(Guid.NewGuid().ToString(), Users.GetXuid(gcUser.MemberName, gcUser.Password), sentTime.ToString(),t);
                oldMessageNotificationList.Add(fakeMessageNotification);
                oldNList.Add(notification);
            }

            NotificationTestCommon.testHooksClient.CreateNotifications(oldMessageNotificationList);
            NotificationTestCommon.testHooksClient.CreateNotifications(oldNList);
            VerifyOldNotificationIsCreated((oldNList.Count + oldMessageNotificationList.Count/2), olderThanDateTime);
            StopAndStartService();
            VerifyCleaned((oldNList.Count + oldMessageNotificationList.Count), olderThanDateTime);
        }


        private static List<Notification> BuildOldNotifications(int count)
        {
            List<Notification> oldNList = new List<Notification>();
            for (int i = 0; i < count; i++)
            {
                DateTime sentTime = GetRandomOldDate();
                Notification notification = NotificationTestCommon.testHooksClient.BuildNotification(Users.GetXuid(gcUser.MemberName, gcUser.Password), sentTime.ToString());
                notification.Id = string.Format("{0:D19}-{1}", (DateTime.MaxValue.Ticks - sentTime.Ticks), Guid.NewGuid());
                oldNList.Add(notification);
            }
            return oldNList;
        }

        private static List<Notification> CreateRandomNewNotifications()
        {
            List<Notification> newNList = new List<Notification>();
            int numNotifications = randomGenerator.Next(5, 20);
            for (int i = 0; i < numNotifications; i++)
            {
                DateTime sentTime = GetRandomNewDate();
                Notification newNotification = NotificationTestCommon.testHooksClient.BuildNotification(Guid.NewGuid().ToString(), Users.GetXuid(gcUser.MemberName, gcUser.Password), sentTime.ToString());
                newNotification.Id = string.Format("{0:D19}-{1}", (DateTime.MaxValue.Ticks - sentTime.Ticks), Guid.NewGuid());
                newNList.Add(newNotification);
            }
            NotificationTestCommon.testHooksClient.CreateNotifications(newNList);
            return newNList;
        }

        private static void CreateNotifications(int times50Notifications)
        {
            for (int i = 0; i < times50Notifications; i++)
            {
                NotificationTestCommon.testHooksClient.CreateNotifications(BuildOldNotifications(50));
            }
        }

        private static void VerifyOldNotificationIsCreated(int numNotificatiosCreated, DateTime olderThanDateTime)
        {
            List<Notification> garbageNotificationList = new List<Notification>();
            garbageNotificationList = NotificationTestCommon.testHooksClient.QueryGarbageNotifications(olderThanDateTime);
            Assert.IsNotNull(garbageNotificationList);
            Assert.IsTrue(garbageNotificationList.Count >= numNotificatiosCreated, "Error: setup failed. Expected <" + numNotificatiosCreated + "> old notifications. Actual<" + garbageNotificationList.Count + "> old notification on azure after setup.");
        }

        private static void VerifyCleaned(int numNotificationsCreated, DateTime olderThanDateTime)
        {
            List<Notification> garbageNotificationList = new List<Notification>();
            int loops = 10;
            if (numNotificationsCreated > 50)
                loops = numNotificationsCreated / 50;
            int i = 0;
            for (i = 0; i < loops; i++)
            {
                Thread.Sleep(6000);
                garbageNotificationList = NotificationTestCommon.testHooksClient.QueryGarbageNotifications(olderThanDateTime);
                if (garbageNotificationList.Count == 0)
                    break;
            }
            Assert.AreEqual(0, garbageNotificationList.Count, "Error:Not all notifications were deleted in " + 2 * loops + " seconds.");
        }

        private static void StopAndStartService()
        {
            NotificationTestCommon.StopService(ConfigurationManager.AppSettings["NotificationGCServerName"], "GarbageCollectorService");
            NotificationTestCommon.StartService(ConfigurationManager.AppSettings["NotificationGCServerName"], "GarbageCollectorService");
        }

        private static void VerifyNewNotificationsAreNotDeleted(string sessionId, List<Notification> newNListCreated, DateTime olderThanDateTime)
        {
            List<Notification> notifications = TestAreaBase.notificationCommon.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), sessionId, 0, Constants.IGNORE_lAST_ID, Int32.MaxValue, String.Empty, false, gcUser.MemberName, gcUser.Password, null);
            Assert.IsNotNull(notifications);
            Assert.AreEqual(newNListCreated.Count, notifications.Count, "Error: Unexpected number of notfiications.");
            foreach (Notification n in notifications)
            {
                Assert.IsTrue(n.SentTime.CompareTo(olderThanDateTime) >= 0, "Error: Notification is old.");
                for (int i = 0; i < newNListCreated.Count; i++)
                {
                    if (n.Id == newNListCreated[i].Id)
                        break;
                    if (i == newNListCreated.Count - 1)
                        Assert.Fail("Error: Notification found after GC has cleaned up old notifications is different from new notification created at setup.");
                }
            }
        }

        private static void VerifyNewNotificationsAreNotDeleted(List<Notification> newNListCreated, DateTime olderThanDateTime)
        {
            VerifyNewNotificationsAreNotDeleted(string.Empty, newNListCreated, olderThanDateTime);
        }

        //private static void VerifyFRNotificationsAreNotCleaned(List<Notification> oldFRNotifications, DateTime olderThanDateTime)
        //{
        //    List<Notification> garbageNotificationList = new List<Notification>();
        //    for (int i = 0; i < 10; i++)
        //    {
        //        garbageNotificationList = NotificationTestCommon.testHooksClient.QueryGarbageNotifications(olderThanDateTime);
        //        Assert.IsNotNull(garbageNotificationList);
        //        if (garbageNotificationList.Count == oldFRNotifications.Count)
        //            break;
        //        else
        //            Thread.Sleep(2000);
        //    }
        //    Assert.AreEqual(oldFRNotifications.Count, garbageNotificationList.Count, "Error:Incorrect number of notifications. GC has cleaned FR notifications or it has not cleaned all of other types of notifications.");
        //    foreach (Notification n in garbageNotificationList)
        //    {
        //        for (int i = 0; i < garbageNotificationList.Count; i++)
        //        {
        //            if (n.Id == oldFRNotifications[i].Id)
        //                break;
        //            if (i == oldFRNotifications.Count - 1)
        //                Assert.Fail("Error: Notification found after GC has cleaned up old notifications is different from Does not contain all the FR notifications created at the setup step.");
        //        }
        //    }
        //}
        private static DateTime GetRandomOldDate()
        {
            return DateTime.UtcNow.AddHours(-randomGenerator.Next(24)).AddDays(-randomGenerator.Next(8, 30)).AddMonths(-randomGenerator.Next(12)).AddYears(-randomGenerator.Next(10));
        }
        private static DateTime GetRandomNewDate()
        {
            return DateTime.UtcNow.AddHours(-randomGenerator.Next(23)).AddDays(-randomGenerator.Next(6));
        }

        //Make sure that you have changed the azure account settings on NPDB to stressnet azure settings before you run this test. (Get the info from product\SharedSource\Configuration\configItems.xml)
        //[TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Create users for stress run")]
        [TestProperty("Type", "Feature")]
        public void CreateNotificationsForStress()
        {
             Assert.AreEqual("dev", Config.EnvironmentSettings.Selected, true, "This test is can only be run against a dev box");
            for (int i = 0; i < 15; i++) // change the number of loops according to the number of notifications you want to create. 
            {
                CreateNotificationsForStess("3563432827428330"); //change the xuid for your user
                Console.WriteLine("Loop {0}", i);
            }
        }

        private static List<Notification> CreateNotificationsForStess(string xuid)
        {
            List<Notification> newNList = new List<Notification>();
            Notification newNotification;
            DateTime sentTime;
            string sessionId = Guid.NewGuid().ToString();
            foreach (Notification.NotificationType type in nTypes)
            {
                sentTime = DateTime.UtcNow;
                newNotification = NotificationTestCommon.testHooksClient.BuildNotification(sessionId, xuid, sentTime.ToString());
                newNotification.Id = string.Format("{0:D19}-{1}", (DateTime.MaxValue.Ticks - sentTime.Ticks), Guid.NewGuid());
                newNList.Add(newNotification);
            }
            NotificationTestCommon.testHooksClient.CreateNotifications(newNList);
            return newNList;
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test\Multiplayer.Test\Notifications\DependencyTests.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using AsyncMultiplayer.NotificationService;
using MultiPlayer.Test.GmsIngestionService;

namespace Multiplayer.Test.API
{
    /// <summary>
    /// Summary description for DependencyTests
    /// </summary>
    [TestClass]
    public class DependencyTests : TestAreaBase
    {
        public DependencyTests()
        {
            //
            // TODO: Add constructor logic here
            //
        }

        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
        }

        [TestCleanup]
        public void TestCleanup()
        {
            TestAreaBase.notificationCommon.TestCleanup();
        }

        //
        // This code runs before every test case -
        // For Notifications, this means ensuring at least a single notification is populated in the server and that all tests go to a new SessionID
        // This ensures the session gets properly cleaned up at the end of the test.
        //

        [TestMethod, Owner("michperr")]
        [Description("Me messing around with stuff")]
        [TestProperty("Type", "Feature")]
        public void SimpleGmsSetup()
        {
            IngestionServiceClient ic = new IngestionServiceClient("WSHttpBinding_IIngestionService");
            ic.Endpoint.Address = new System.ServiceModel.EndpointAddress("http://gms.dev.xboxlive.com/Ingestion.svc");

            ConfigureGameViaXmlResponse worked = ic.ConfigureGameViaXml(
                new ConfigureGameViaXmlRequest(
                String.Format(@"<!--GMS Content Creator Generated XML - Filename: GMSSample.xml-->
                <game id=""1050"" visibility=""3"" usesLiveMultiplayerServices=""1"">
                    <localizedNames>
                        <name locale=""en-US"">(en-US) Sample Game</name>
                    </localizedNames>
                    <images />
                    <availablePlatforms>
                        <platform id=""5"">Mobile</platform>
                    </availablePlatforms>
                    <variants>
                        <variant id=""0"">
                          <statRankings />
                          <localizedNames>
                            <name locale=""en-US"">(en-US) Sample Variant Name</name>
                          </localizedNames>
                        </variant>
                    </variants>
                </game>")));
        }

        [TestMethod, Owner("michperr")]
        [Description("Create a simple YourTurnNotification")]
        [TestProperty("Type", "Feature")]
        public void P_CreateNotification_CreateAllNotificationTypes()
        {
            foreach (Notification.NotificationType t in Enum.GetValues(typeof(Notification.NotificationType)))
            {
                TestAreaBase.notificationCommon.CreateAndValidateNotificationByType(t);
            }
        }

        //[TestMethod, Owner("michperr")]
        [Description("Me messing around with stuff")]
        [TestProperty("Type", "Feature")]
        public void T2()
        {
            string gt = ",,,,a,b,c,s";
            for (int i = 0; i < 10; i++)
            {
                string gt1 = TestAreaBase.notificationCommon.GetNextGamertag(ref gt);
            }

            Dictionary<string, string> d = new Dictionary<string, string>();
            d.Add("hi", "moo");
            //d.TryGetValue
            string s1 = d["test"];
            /*
            CreateContent _contentCreation = new CreateContent();

            List<Cosmos.Core.FieldDefinition> fl = new List<Cosmos.Core.FieldDefinition>();
            Cosmos.Core.FieldDefinition fd = new Cosmos.Core.FieldDefinition();
            f.d
            //Cosmos.Core.ContentType ct = _contentCreation.CreateNewContentType("spotlight-feed",new List<Cosmos.Core.FieldDefinition>(
           

            CosmosAuthServiceClient.AddContentItem(contentItem, false);
             */
            InvitationNotification invite = new InvitationNotification();
            invite.FriendRequest = true;
            string s = Notification.SerializeToString(invite);
            InvitationNotification i2 = Notification.DeserializeFromString<InvitationNotification>(s);
            /*
            Dictionary<string, string> customHeaders = new Dictionary<string, string>();
            customHeaders.Add("Content-Type", "text/xml");
            customHeaders.Add("X-Locale", "en-US");

            string lid = AuthTickets.GetLiveIDToken(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            string sts = AuthTickets.GenerateSTSTicket(lid);
            customHeaders.Add("X-Authorization", "XBL1.0 x=" + sts);

            RestCommand command = new RestCommand();
            string requestBody = null;
            string uri = String.Format("{0}/invite/", Config.Environment.NotificationsService);

            //Serialize inviteRequest to string
            MemoryStream mStream = new MemoryStream();
            requestBody = @"<?xml version=""1.0"" encoding=""utf-8""?>
<InviteRequest xmlns=""http://schemas.datacontract.org/2004/07/AsyncMultiplayer.NotificationService"">
    <Data>abcdef</Data>
    <GameId>1297287400</GameId>
    <Recipients>bubbajay@xboxtest.com</Recipients>
    <SessionId>MySession</SessionId>
</InviteRequest>";

            // Send POST request
            Log.WriteLine("Sending POST request: " + uri);
            string response = command.Post(uri, customHeaders, requestBody);
            Log.WriteLine("Response: " + response, LogLevel.Verbose);
            */
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test\Multiplayer.Test\Notifications\NotificationServiceInternalTests.cs ===
﻿using System;
using System.Text;
using System.Threading;
using System.Collections.Generic;
using AsyncMultiplayer.NotificationService.Internal;
using Leet.Identity;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Multiplayer.Test.API;
using AsyncMultiplayer.NotificationService;
using LiveN.Test.Framework.Configuration;
using System.Linq;
using Leet.Core.IoCCo;
using SMTPTest;
using System.Net.Mail;
using MultiPlayer.Test.Data;
using System.Web;
using System.Configuration;
using Multiplayer.Test.Proxy;
using Multiplayer.Test.UserAccounts;

namespace MultiPlayer.Test.Notifications
{
    [TestClass()]
    public class NotificationServiceInternalTests : TestAreaBase
    {
        Random _randGen = new Random();
        private string GenerateRandomString(int min, int max)
        {
            StringBuilder sb = new StringBuilder();

            for (int x = min; x < max; x++)
            {
                sb.Append((char)_randGen.Next((int)' ', ((int)'z' + 1) + 1));
            }
            return sb.ToString();
        }

        private string GenerateRandomString(int max)
        {
            return GenerateRandomString(0, max);
        }

        private UserInfo GetDefaultUserInfo()
        {
            return new UserInfo(0)
            {
                DisplayName = "Test dispName",
                GamerTag = "Test gamertag",
                EmailAddress = "ztest01@microsoft.com",
                Locale = string.Empty
            };
        }

        [ClassInitialize]
        public static void MyClassInitialize(TestContext testContext)
        {
            IdentityManager.RegisterWithIocContainer(Leet.Core.IoCCo.Container.Instance);
            NotificationService.ConfigInstance = new ServiceConfigs();
            NotificationService.ConfigInstance.Initialize();
        }

        [ClassCleanup]
        public static void ClassCleanup()
        {
        }


        //[TestMethod, Owner("a-sediro"), Priority(2)]
        //[Description("Fire some garbage into the queue and make sure that we don't die deserial")]
        //[TestProperty("Type", "Feature")]
        //public void SendGarbageTest()
        //{
        //    Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box.");
        //    QueueAccess queueAccess = new QueueAccess(Config.Environment.ConnectionString);
        //    queueAccess.StoreProcNameForStartDialog = "NotificationSchema.SendNotificationRequest";
        //    queueAccess.BeginTransaction();
        //    queueAccess.StartDialog(GenerateRandomString(200));
        //    queueAccess.CommitTransaction();
        //    queueAccess.Close();

        //    ManualResetEvent doneEvent = new ManualResetEvent(false);
        //    EventWaitHandle hasWork = new EventWaitHandle(false, EventResetMode.ManualReset);
        //    EventWaitHandle stop = new EventWaitHandle(true, EventResetMode.ManualReset);
        //    NotificationServiceTestWorker w = new NotificationServiceTestWorker(
        //        doneEvent,
        //        hasWork,
        //        stop,
        //        0);

        //    // make sure that the thread doesn't bail on the garbage.  
        //    // Because of the how the conditional compilation is done, control should return here
        //    // and not loop on the garbage item forever
        //    w.ProcessQueue();
        //}


        //[TestMethod, Owner("a-sediro"), Priority(2)]
        //[Description("Me messing around with stuff")]
        //[TestProperty("Type", "Feature")]
        //public void BasicProcessTest()
        //{
        //    Assert.IsTrue(string.Equals(Config.Environment.Name, "Dev", StringComparison.OrdinalIgnoreCase), "Test must run only on DEV environment");
        //    IdentityManager.RegisterWithIocContainer(Leet.Core.IoCCo.Container.Instance);
        //    NotificationService.ConfigInstance = new ServiceConfigs();
        //    NotificationService.ConfigInstance.Initialize();

        //    ManualResetEvent doneEvent = new ManualResetEvent(false);
        //    EventWaitHandle hasWork = new EventWaitHandle(false, EventResetMode.ManualReset);
        //    EventWaitHandle stop = new EventWaitHandle(true, EventResetMode.ManualReset);
        //    NotificationServiceTestWorker w = new NotificationServiceTestWorker(
        //        doneEvent,
        //        hasWork,
        //        stop,
        //        0);
        //    Guid sessionGuid = new Guid();

        //    SendInvite(
        //        0,
        //        "en-US",
        //        TestAreaBase.users[1].MemberName + ";", Constants.TESTGAMEID, sessionGuid.ToString(), string.Empty, string.Empty);

        //    w.ProcessQueue();

        //    List<Notification> nList = this.NotificationsServiceProxy.GetNotifications(
        //        Constants.TESTGAMEID.ToString(),
        //        sessionGuid.ToString(),
        //        0,
        //        string.Empty,
        //        Int32.MaxValue,
        //        string.Empty,
        //        false,
        //        TestAreaBase.users[1].MemberName,
        //        TestAreaBase.users[1].Password,
        //        null);

        //    Assert.AreEqual<int>(1, nList.Count, "Expected 1 notification");
        //    this.NotificationsServiceProxy.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), sessionGuid.ToString());

        //}

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Very basic verification of gamertag->xuid parsing/lookup in invitation preprocessing")]
        [TestProperty("Type", "Feature")]
        public void CreatePreProcessor_Invitation_GamertagParsing()
        {
            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box.");
            UserInfo senderInfo = new UserInfo(ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)));
            senderInfo.GamerTag = Users.GetGamertag(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            
            InvitationNotification invite = GetInvite(senderInfo, Constants.TESTGAMEID, Guid.NewGuid().ToString(), string.Empty, false);
            NotificationRequest request = GetNotificationRequest(invite, senderInfo, Constants.TESTGAMEID, invite.SessionId);

            request.To = string.Join(";", ConfigUsersToArray().Select(x => CreatePreProcessor.GamertagPrefix + Users.GetGamertag(x.Membername, x.Password)).ToArray());

            
            CreatePreProcessor cpp = new CreatePreProcessor();
            cpp.Initialize();
            cpp.ProcessNotificationRequest(request);

            Assert.AreEqual<int>(TestAreaBase.users.Count, request.RecipientsInfo.Count);
            for (int i = 0; i < request.RecipientsInfo.Count; i++)
            {
                Assert.AreEqual<ulong>(ulong.Parse(Users.GetXuid(TestAreaBase.users[i].MemberName, TestAreaBase.users[i].Password)), request.RecipientsInfo[i].Xuid);
                Assert.AreEqual<string>(Users.GetGamertag(TestAreaBase.users[i].MemberName, TestAreaBase.users[i].Password), request.RecipientsInfo[i].GamerTag);

                //these are currently here due to limitations of the livecache layer
                Assert.AreEqual<string>(null, request.RecipientsInfo[i].EmailAddress);
                Assert.AreEqual<long>(0, request.RecipientsInfo[i].Puid);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Very basic verification of email->xuid parsing/lookup in invitation preprocessing")]
        [TestProperty("Type", "Feature")]
        public void CreatePreProcessor_Invitation_EmailParsing()
        {
            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box.");
            UserInfo senderInfo = new UserInfo(ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)));
            senderInfo.GamerTag = Users.GetGamertag(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

            InvitationNotification invite = GetInvite(senderInfo, Constants.TESTGAMEID, Guid.NewGuid().ToString(), string.Empty, false);
            NotificationRequest request = GetNotificationRequest(invite, senderInfo, Constants.TESTGAMEID, invite.SessionId);

            bool first = true;
            foreach (PreExistingUserElement p in Config.Environment.UserSettings)
            {
                if (!first) { request.To += ";"; }
                first = false;
                request.To += "email:" + p.Membername;
            }

            CreatePreProcessor cpp = new CreatePreProcessor();
            cpp.Initialize();
            cpp.ProcessNotificationRequest(request);

            Assert.AreEqual<int>(TestAreaBase.users.Count, request.RecipientsInfo.Count);
            for (int i = 0; i < request.RecipientsInfo.Count; i++)
            {
                Assert.AreEqual<ulong>(ulong.Parse(Users.GetXuid(TestAreaBase.users[i].MemberName, TestAreaBase.users[i].Password)), request.RecipientsInfo[i].Xuid);
                Assert.AreEqual<string>(Users.GetGamertag(TestAreaBase.users[i].MemberName, TestAreaBase.users[i].Password), request.RecipientsInfo[i].GamerTag);
            }
        }

        //Bug: 8770
        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verifies that the system can deal with gamertags that are valid, but not in the system")]
        [TestProperty("Type", "Feature")]
        public void CreatePreProcessor_Invitation_Gamertag_GamertagsDontExist()
        {
            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box.");
            UserInfo senderInfo = new UserInfo(ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)));
            senderInfo.GamerTag = Users.GetGamertag(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

            InvitationNotification invite = GetInvite(senderInfo, Constants.TESTGAMEID, Guid.NewGuid().ToString(), string.Empty, false);
            NotificationRequest request = GetNotificationRequest(invite, senderInfo, Constants.TESTGAMEID, invite.SessionId);

            //todo(michperr): Bulletproof this to do some verifiction that these gamertags don't actually exist
            request.To = CreatePreProcessor.GamertagPrefix + "IdontExist1";
            request.To += ";" + CreatePreProcessor.GamertagPrefix + "IdontExist2";
            request.To += ";" + CreatePreProcessor.GamertagPrefix + "IdontExist3";
            request.To += ";" + CreatePreProcessor.GamertagPrefix + "IdontExist4";
            request.To += ";" + CreatePreProcessor.GamertagPrefix + "IdontExist5";


            CreatePreProcessor cpp = new CreatePreProcessor();
            cpp.Initialize();
            cpp.ProcessNotificationRequest(request);

            Assert.AreEqual<int>(0, request.RecipientsInfo.Count);
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verifies that the system can deal with email addresses that are valid, but aren't associated with any xuids")]
        [TestProperty("Type", "Feature")]
        public void CreatePreProcessor_Invitation_Email_NoGamertagsForEmail()
        {
            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box.");

            UserInfo senderInfo = new UserInfo(ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)));
            senderInfo.GamerTag = Users.GetGamertag(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

            InvitationNotification invite = GetInvite(senderInfo, Constants.TESTGAMEID, Guid.NewGuid().ToString(), string.Empty, false);
            NotificationRequest request = GetNotificationRequest(invite, senderInfo, Constants.TESTGAMEID, invite.SessionId);

            //todo(michperr): Bulletproof this to do some verifiction that these gamertags don't actually exist
            string[] uList = new string[5] { "IdontExist1@fakedomain.com", "IdontExist2@fakedomain.com", "IdontExist3@fakedomain.com", "IdontExist4@fakedomain.com", "IdontExist5@fakedomain.com" };
            request.To = string.Join(";", uList.Select(x => CreatePreProcessor.EmailPrefix + x).ToArray());

            CreatePreProcessor cpp = new CreatePreProcessor();
            cpp.Initialize();
            cpp.ProcessNotificationRequest(request);

            Assert.AreEqual<int>(5, request.RecipientsInfo.Count);
            int i = 0;
            foreach (UserInfo ui in request.RecipientsInfo)
            {
                Assert.AreEqual<long>(0, ui.Puid);
                Assert.AreEqual<ulong>(0, ui.Xuid);
                Assert.AreEqual<string>(null, ui.GamerTag);
                Assert.AreEqual<string>(uList[i++], ui.EmailAddress);
            }

        }

        //Bug: 8770
        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Very basic verification of email->xuid parsing/lookup (with no prefix specified) in invitation preprocessing")]
        [TestProperty("Type", "Feature")]
        public void CreatePreProcessor_Invitation_NoPrefixEmailParsing()
        {
            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box.");

            UserInfo senderInfo = new UserInfo(ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)));
            senderInfo.GamerTag = Users.GetGamertag(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

            InvitationNotification invite = GetInvite(senderInfo, Constants.TESTGAMEID, Guid.NewGuid().ToString(), string.Empty, false);
            NotificationRequest request = GetNotificationRequest(invite, senderInfo, Constants.TESTGAMEID, invite.SessionId);

            request.To = string.Join(";", ConfigUsersToArray().Select(x => Users.GetGamertag(x.Membername, x.Password)).ToArray());

            CreatePreProcessor cpp = new CreatePreProcessor();
            cpp.Initialize();
            cpp.ProcessNotificationRequest(request);

            Assert.AreEqual<int>(TestAreaBase.users.Count, request.RecipientsInfo.Count);
            for (int i = 0; i < request.RecipientsInfo.Count; i++)
            {
                Assert.AreEqual<ulong>(ulong.Parse(Users.GetXuid(TestAreaBase.users[i].MemberName, TestAreaBase.users[i].Password)), request.RecipientsInfo[i].Xuid);
                Assert.AreEqual<string>(Users.GetGamertag(TestAreaBase.users[i].MemberName, TestAreaBase.users[i].Password), request.RecipientsInfo[i].GamerTag);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Very basic verification of email->xuid parsing/lookup (with no prefix specified) in invitation preprocessing")]
        [TestProperty("Type", "Feature")]
        public void CreatePreProcessor_Invitation_MixedParsing()
        {
            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box.");

            UserInfo senderInfo = new UserInfo(ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)));
            senderInfo.GamerTag = Users.GetGamertag(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

            InvitationNotification invite = GetInvite(senderInfo, Constants.TESTGAMEID, Guid.NewGuid().ToString(), string.Empty, false);
            NotificationRequest request = GetNotificationRequest(invite, senderInfo, Constants.TESTGAMEID, invite.SessionId);

            request.To = string.Join(";", ConfigUsersToArray().Select(x =>
            {
                switch (_randGen.Next(3))
                {
                    case 0:
                        return CreatePreProcessor.GamertagPrefix + Users.GetGamertag(x.Membername, x.Password);
                    case 1:
                        return CreatePreProcessor.EmailPrefix + x.Membername;
                    case 2:
                    default:
                        return x.Membername;
                }
            }).ToArray());

            CreatePreProcessor cpp = new CreatePreProcessor();
            cpp.Initialize();
            cpp.ProcessNotificationRequest(request);

            Assert.AreEqual<int>(TestAreaBase.users.Count, request.RecipientsInfo.Count);
            for (int i = 0; i < request.RecipientsInfo.Count; i++)
            {
                Assert.AreEqual<ulong>(ulong.Parse(Users.GetXuid(TestAreaBase.users[i].MemberName, TestAreaBase.users[i].Password)), request.RecipientsInfo[i].Xuid);
                Assert.AreEqual<string>(Users.GetGamertag(TestAreaBase.users[i].MemberName, TestAreaBase.users[i].Password), request.RecipientsInfo[i].GamerTag);
            }
        }


        /// <summary>
        /// this should cover system nudge, and all the other notifications generated by our service.
        /// </summary>
        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Me messing around with stuff")]
        [TestProperty("Type", "Feature")]
        public void CreatePreProcessor_Other()
        {
            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box.");
            Guid sessionId = Guid.NewGuid();

            UserInfo sysSenderInfo = GetDefaultUserInfo();

            //todo(michperr): Randomize this somehow
            NudgeNotification notification = new NudgeNotification()
            {
                GameId = Constants.TESTGAMEID,
                SessionId = sessionId.ToString(),
            };

            NotificationRequest nr = GetNotificationRequest(
                notification,
                new AsyncMultiplayer.SessionCommon.IdentityToken(0, "MPSystem"),
                Constants.TESTGAMEID,
                sessionId.ToString());

            CreatePreProcessor cpp = new CreatePreProcessor();
            cpp.Initialize();
            cpp.ProcessNotificationRequest(nr);
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Me messing around with stuff")]
        [TestProperty("Type", "Feature")]
        public void SMTPProcessor_Invite_ByEmail()
        {
            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box.");
            UserInfo senderInfo = new UserInfo(ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)));
            senderInfo.GamerTag = Users.GetGamertag(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

            InvitationNotification invite = GetInvite(senderInfo, Constants.TESTGAMEID, Guid.NewGuid().ToString(), string.Empty, false);
            NotificationRequest request = GetNotificationRequest(invite, senderInfo, Constants.TESTGAMEID, invite.SessionId);

            request.To = string.Join(";", ConfigUsersToArray().Select(x => CreatePreProcessor.EmailPrefix + x.Membername).ToArray());

            CreatePreProcessor cpp = new CreatePreProcessor();
            cpp.Initialize();
            cpp.ProcessNotificationRequest(request);

            //todo(michperr): Asserts here.  Figure out a way to just call the other test.

            NotificationSMTPProvider n = new NotificationSMTPProvider();
            n.Initialize();
            n.ProcessNotificationRequest(request);

        }

        /// <summary>
        /// Gamertags shouldn't resolve an email address
        /// </summary>
        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Me messing around with stuff")]
        [TestProperty("Type", "Feature")]
        public void SMTPProcessor_Invite_ByGamertag()
        {
            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box.");
            UserInfo senderInfo = new UserInfo(ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)));
            senderInfo.GamerTag = Users.GetGamertag(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

            InvitationNotification invite = GetInvite(senderInfo, Constants.TESTGAMEID, Guid.NewGuid().ToString(), string.Empty, false);
            NotificationRequest request = GetNotificationRequest(invite, senderInfo, Constants.TESTGAMEID, invite.SessionId);

            request.To = string.Join(";", ConfigUsersToArray().Select(x => CreatePreProcessor.GamertagPrefix + Users.GetGamertag(x.Membername, x.Password)).ToArray());


            CreatePreProcessor cpp = new CreatePreProcessor();
            cpp.Initialize();
            cpp.ProcessNotificationRequest(request);

            NotificationSMTPProvider n = new NotificationSMTPProvider();
            n.Initialize();
            n.ProcessNotificationRequest(request);

        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("")]
        [TestProperty("Type", "Feature")]
        public void StorageProcessor_Invite_ByGamertag()
        {
            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box.");
            UserInfo senderInfo = new UserInfo(ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)));
            senderInfo.GamerTag = Users.GetGamertag(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

            InvitationNotification invite = GetInvite(senderInfo, Constants.TESTGAMEID, Guid.NewGuid().ToString(), string.Empty, false);
            NotificationRequest request = GetNotificationRequest(invite, senderInfo, Constants.TESTGAMEID, invite.SessionId);

            request.To = string.Join(";", ConfigUsersToArray().Select(x => CreatePreProcessor.GamertagPrefix + Users.GetGamertag(x.Membername, x.Password)).ToArray());

            CreatePreProcessor cpp = new CreatePreProcessor();
            cpp.Initialize();
            cpp.ProcessNotificationRequest(request);

            //todo(michperr): Verification.  Call the previous case.

            NotificationStorageProvider n = new NotificationStorageProvider();
            n.Initialize();
            n.ProcessNotificationRequest(request);

        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("")]
        [TestProperty("Type", "Feature")]
        public void StorageProcessor_Invite_ByEmail()
        {
            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box.");
            UserInfo senderInfo = new UserInfo(ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)));
            senderInfo.GamerTag = Users.GetGamertag(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

            InvitationNotification invite = GetInvite(senderInfo, Constants.TESTGAMEID, Guid.NewGuid().ToString(), string.Empty, false);
            NotificationRequest request = GetNotificationRequest(invite, senderInfo, Constants.TESTGAMEID, invite.SessionId);

            request.To = string.Join(";", ConfigUsersToArray().Select(x => CreatePreProcessor.EmailPrefix + x.Membername).ToArray());

            CreatePreProcessor cpp = new CreatePreProcessor();
            cpp.Initialize();
            cpp.ProcessNotificationRequest(request);

            //todo(michperr): Verification.  Call the previous case.

            NotificationStorageProvider n = new NotificationStorageProvider();
            n.Initialize();
            n.ProcessNotificationRequest(request);
        }

        private PreExistingUserElement[] ConfigUsersToArray()
        {
            PreExistingUserElement[] ret = new PreExistingUserElement[TestAreaBase.users.Count];
            int index = 0;
            foreach (PreExistingUserElement p in Config.Environment.UserSettings)
            {
                ret[index++] = p;
            }
            return ret;
        }

        private NotificationRequest GetNotificationRequest(AsyncMultiplayer.NotificationService.Notification notification, AsyncMultiplayer.SessionCommon.IdentityToken uInfo, uint gameId, string sessionId)
        {
            NotificationRequest ret = GetNotificationRequestInternal(notification, gameId, sessionId);
            ret.From = uInfo.Token;

            return ret;
        }

        private NotificationRequest GetNotificationRequestInternal(
            AsyncMultiplayer.NotificationService.Notification notification,
            uint gameId,
            string sessionId)
        {
            NotificationRequest request = new NotificationRequest();
            request.To = string.Empty;
            request.Action = NotificationRequest.ActionType.Create;
            request.Command = request.Action.ToString() + notification.Type.ToString();
            request.GameId = notification.GameId;
            request.SessionId = notification.SessionId;
            request.RequestDataType = (int)notification.Type;
            request.RequestData = AsyncMultiplayer.NotificationService.Notification.SerializeToString(notification);
            request.RequestLocale = "en-US";
            return request;
        }

        private NotificationRequest GetNotificationRequest(AsyncMultiplayer.NotificationService.Notification notification, UserInfo uInfo, uint gameId, string sessionId)
        {
            NotificationRequest request = GetNotificationRequestInternal(notification, gameId, sessionId);
            request.From = AsyncMultiplayer.NotificationService.Notification.SerializeToString(uInfo);
            return request;
        }

        private InvitationNotification GetDefaultInvite(UserInfo sender, string senderXuid, uint gameId, string sessionId, string url, bool friendRequest)
        {
            return new InvitationNotification()
            {
                SupportedPlatform = 4,
                From = AsyncMultiplayer.NotificationService.Notification.SerializeToString(sender),
                UserId = senderXuid,
                GameId = gameId,
                SessionId = sessionId,
                Url = url,
                FriendRequest = friendRequest
            };
        }

        private InvitationNotification GetInvite(UserInfo sender, uint gameId, string sessionId, string url, bool friendRequest)
        {
            return new InvitationNotification()
            {
                SupportedPlatform = 4,
                From = AsyncMultiplayer.NotificationService.Notification.SerializeToString(sender),
                GameId = gameId,
                SessionId = sessionId,
                Url = url,
                FriendRequest = friendRequest
            };
        }

        private string SendInvite(int senderIndex, string locale, string recipients, uint gameId, string sessionId, string inviteUri, string inviteData)
        {
            UserInfo senderInfo = new UserInfo(ulong.Parse(Users.GetXuid(TestAreaBase.users[senderIndex].MemberName, TestAreaBase.users[senderIndex].Password)));
            senderInfo.GamerTag = Users.GetGamertag(TestAreaBase.users[senderIndex].MemberName, TestAreaBase.users[senderIndex].Password);

            INotificationRequest sendRequestUtils = new NotificationRequestUtils(Config.Environment.ConnectionString);
            InvitationNotification invite = GetInvite(senderInfo, Constants.TESTGAMEID, sessionId, inviteUri, false);

            NotificationRequest request = GetNotificationRequestInternal((Notification)invite, Constants.TESTGAMEID, sessionId);

            request.To = recipients;
            request.RequestLocale = locale;
            request.From = AsyncMultiplayer.NotificationService.Notification.SerializeToString(senderInfo);

            sendRequestUtils.SendNotificationRequest(request);
            return invite.Id;
        }

        //this function will fake the work of createPreProcessor and focus on testing email localization.
        private NotificationRequest SetUsersInfo(NotificationRequest request, string senderLocale)
        {
            NotificationRequest NotificationRequest = SetRecieverInfo(request);
            NotificationRequest.RequestLocale = senderLocale;
            NotificationRequest.SenderInfo = GetDefaultUserInfo();
            return NotificationRequest;
        }

        private NotificationRequest SetRecieverInfo(NotificationRequest request)
        {
            ulong[] xuid = { ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)) };
            string[] displayNames = { TestAreaBase.users[1].MemberName };
            string[] gamerTags = { Users.GetGamertag(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password) };
            string[] recipients = { TestAreaBase.users[1].MemberName };
            string[] recipientsLocale = { "en-US" };
            NotificationRequest notificationRequest = SetRecieverInfo(request, xuid, displayNames, gamerTags, recipients, recipientsLocale);
            return request;
        }

        private NotificationRequest SetRecieverInfo(NotificationRequest request, ulong[] xuid, string[] displayNames, string[] gamerTags, string[] recipients, string[] locales)
        {
            List<UserInfo> recipientsInfo = new List<UserInfo>();
            StringBuilder toEmail = new StringBuilder();
            for (int i = 0; i < recipients.Length; i++)
            {
                UserInfo recipientInfo = new UserInfo();
                recipientInfo.Xuid = xuid[i];
                recipientInfo.DisplayName = displayNames[i];
                recipientInfo.GamerTag = gamerTags[i];
                recipientInfo.EmailAddress = recipients[i];
                recipientInfo.Locale = locales[i];
                recipientsInfo.Add(recipientInfo);
                toEmail.Append(recipients[i]);
                toEmail.Append(";");
            }
            request.RecipientsInfo = recipientsInfo;
            request.To = toEmail.ToString();
            return request;
        }

        private void SendInviteEmail(string fromEmail, string senderLocale, string sessionId, string inviteUri)
        {
            UserInfo senderInfo = GetDefaultUserInfo();
            InvitationNotification invite = GetDefaultInvite(senderInfo, Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password), Constants.TESTGAMEID, sessionId, inviteUri, false);
            NotificationRequest request = SetUsersInfo(GetNotificationRequestInternal((Notification)invite, Constants.TESTGAMEID, sessionId), senderLocale);

            NotificationSMTPProvider n = new NotificationSMTPProvider();
            n.Initialize();
            n.ProcessNotificationRequest(request);
        }

        private void SendInviteEmail(string locale, string sessionId)
        {
            SendInviteEmail("opssek-test+from@live-int.com", locale, sessionId, string.Empty);
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Send invitation from person 0 to person 1.  Verify that the email sent was localized.")]
        [TestProperty("Type", "Feature")]
        public void P_InviteEmail_Localization()
        {
            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box. It is expected to fail otherwise");
            Assert.AreEqual("false", ConfigurationManager.AppSettings["UseFakeClient"], "For this test, UseFakeClient should be set to false in app.config file.");
            //to make this test pass you have to first manually go to LIVEN_NPDB (db) - > t_setting_overrides (table), change the value of lest_NotificationSMTPProvider_HostName to the name of the machine you are running this test on. 

            SMTPListenerWrapper listener = NotificationTestCommon.StartListening();

            string[,] localeValue = LocalizationTestData.GOOD_LOCALE;
            int randomIndex = _randGen.Next(localeValue.Length / 2); // "/2" because localValue is a two dimensional array 
            ExpectedLocalizedEmailContent expectedLocalizedEmail = LocalizationTestData.GetExpectedLocalizedContentOnEmail(localeValue[randomIndex, 1], "Test gamertag", " (Test dispName)");
            string sessionId = Guid.NewGuid().ToString();
            SendInviteEmail(localeValue[randomIndex, 0], sessionId);

            email inviteEmail = NotificationTestCommon.GetMailAndStopListening(listener);
            NotificationTestCommon.ValidateEmail(inviteEmail.Subject, inviteEmail.Body, expectedLocalizedEmail, localeValue[randomIndex, 0], "Test gamertag", false, sessionId, true);
        }

        //[TestMethod, Owner("a-sediro"), Priority(2)]
        //[Description("send invite with friend request set to true and verify that the friend request is created on xbl")]
        //[TestProperty("Type", "Feature")]
        //public void P_CreatePreProcessor_FriendRequest()
        //{
        //    CreatePreProcessor cpp = new CreatePreProcessor();
        //    cpp.Initialize();
        //    new NotificationTestCommon();
        //    NotificationTestCommon.testHooksClient.SetupNotFriendsAndNoFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[3].MemberName, TestAreaBase.users[3].Password)));
        //    NotificationTestCommon.VerifyNotFriends(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[3].MemberName, TestAreaBase.users[3].Password)), "Error: Setup failed not to make friends");
        //    NotificationTestCommon.VerifyNoFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[3].MemberName, TestAreaBase.users[3].Password)), "Error: Setup failed to delete pre existing Friend Requests");

        //    string sessionId = Guid.NewGuid().ToString();
        //    InvitationNotification invite = GetDefaultInvite(GetDefaultUserInfo(), Users.GetXuid(TestAreaBase.users[3].MemberName, TestAreaBase.users[3].Password), Constants.TESTGAMEID, sessionId, string.Empty, true);
        //    NotificationRequest request = GetNotificationRequestInternal((Notification)invite, Constants.TESTGAMEID, sessionId);
        //    UserInfo sender = new UserInfo(0);
        //    sender.GamerTag = TestAreaBase.users[3].Gamertag;
        //    request.From = AsyncMultiplayer.NotificationService.Notification.SerializeToString(sender);
        //    request.RequestLocale = "en-US";
        //    request.To = TestAreaBase.users[1].MemberName + ";";
        //    cpp.ProcessNotificationRequest(request);

        //    NotificationTestCommon.VerifyFriendRequest(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[3].MemberName, TestAreaBase.users[3].Password)), "Friend Request not found on XBL");
        //}
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test\Multiplayer.Test\Sessions\SystemNudgeService.cs ===
﻿using System;
using System.Text;
using System.Net;
using System.Collections.Generic;
using System.Configuration;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using AsyncMultiplayer.NotificationService;
using LiveN.Test.Framework.Configuration;
using AsyncMultiplayer.SessionCommon;
using System.Threading;
using System.ServiceProcess;
using Multiplayer.Test.Proxy;
using LiveN.Test.Common.Web;
using Gds.Contracts;
using System.Web;
using System.Runtime.Serialization;
using System.Xml;
using System.IO;
using LIVEN.Common.Diagnostics;
using Multiplayer.Test.UserAccounts;
using LiveN.Test.Common;

namespace Multiplayer.Test.API
{
    /// <summary>
    /// SystemNudgeServiceTests
    /// A manual step you need to do to get the tests passing --- go to NPDB and change the value of lest_SystemNudgeService_StartingDay in settings table to 0.
    /// Most tests take about 10 minutes to run
    /// </summary>
    
    [TestClass]
    public class SystemNudgeServiceTests : TestAreaBase
    {
        /// <summary>
        /// Indicates wther the service is stopping.
        /// </summary>
        static string MachineName = ConfigurationManager.ConnectionStrings["lest_AsyncNotification_db"].ConnectionString.Split(';')[0].Substring(12);
        
        private static string[] systemNudgeUsers= null;
        private static string systemNudgeUsersPassword= null;        
        
        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
        }

        [TestInitialize()]
        public void MyTestInitialize()
        {
            GetUsersNamePassword();
        }

        [TestCleanup()]
        public void MyTestCleanup()
        {
            CleanUpNotifications();
            EndAllActiveSessions();
        }

        /// <summary>
        /// Gets the name of the program.
        /// </summary>
        public static string ProgramName
        {
            get
            {
                return "SystemNudgeTest";
            }
        }

        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("Verify the player gets 1 nudge, 1 nudge and finally gets kicked off the session.")]
        [TestProperty("Type", "BVTs")]
        public void BVT_SystemNudgeKick()
        {
            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box. It is expected to fail otherwise");
            if (!TestAreaBase.IsNpdbSettingsTableUpdated) TestAreaBase.OverideNpdbSettings();
            TestAreaBase.notificationCommon.CheckNotificationCount(systemNudgeUsers[0], systemNudgeUsersPassword);
            EndAllActiveSessions(systemNudgeUsers[0], systemNudgeUsersPassword);

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 1;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, systemNudgeUsers[0], systemNudgeUsersPassword);
            AssertCreateSessionState(creationData, createSessionState);
            
            Thread.Sleep(1001);
            RunServiceAndVerifyNudgeNoNudgeKickedOff(createSessionState.GameID.ToString(),createSessionState.SessionID , systemNudgeUsers[0], systemNudgeUsersPassword, 1);            
        }

        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("Verify that the player will get a nudge and a Nudge but will not get kicked off the session.")]
        [TestProperty("Type", "BVTs")]
        public void BVT_SystemNudgeWarnOnly()
        {
            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box. It is expected to fail otherwise");
            if (!TestAreaBase.IsNpdbSettingsTableUpdated) TestAreaBase.OverideNpdbSettings();
            TestAreaBase.notificationCommon.CheckNotificationCount(systemNudgeUsers[0], systemNudgeUsersPassword);
            EndAllActiveSessions(systemNudgeUsers[0], systemNudgeUsersPassword);

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.WarnOnly;
            iwb.Interval = 1;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, systemNudgeUsers[0], systemNudgeUsersPassword);
            AssertCreateSessionState(creationData, createSessionState);

            Thread.Sleep(1001);
            RunServiceAndVerifyNudgeNoNudgeNotKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, systemNudgeUsers[0], systemNudgeUsersPassword,1);
        }

        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("Verify no notifications(no nudge or another nudge) and no kick off.")]
        [TestProperty("Type", "BVTs")]
        public void BVT_SystemNudgeNone()
        {
            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box. It is expected to fail otherwise");
            if (!TestAreaBase.IsNpdbSettingsTableUpdated) TestAreaBase.OverideNpdbSettings();
            TestAreaBase.notificationCommon.CheckNotificationCount(systemNudgeUsers[0], systemNudgeUsersPassword);
            EndAllActiveSessions(systemNudgeUsers[0], systemNudgeUsersPassword);

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.None;
            iwb.Interval = 1;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, systemNudgeUsers[0], systemNudgeUsersPassword);
            AssertCreateSessionState(creationData, createSessionState);

            Thread.Sleep(1001);
            RunServiceAndVerifyNoNudgeNoNudgeNotKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, systemNudgeUsers[0], systemNudgeUsersPassword);
        }

        //bug:5934 - System Nudge: -- not seeing any nudge for player 2 after Player 1 makes a move.
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Verify a nudge, a nudge and kick off for all the players in a three-player session.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_SystemNudgeKick_3Players()
        {
            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box. It is expected to fail otherwise");
            if (!TestAreaBase.IsNpdbSettingsTableUpdated) TestAreaBase.OverideNpdbSettings();
            CleanUpNotifications();
            EndAllActiveSessions();

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 1;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, systemNudgeUsers[0], systemNudgeUsersPassword);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);
            SessionState beforeJoinSessionState = createSessionState;

            JoinSession(beforeJoinSessionState, createSessionState.SessionID, createSessionState.GameID, new string [] { systemNudgeUsers[1], systemNudgeUsers[2] });

            Thread.Sleep(1001);
            RunServiceAndVerifyNudgeNoNudgeKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, systemNudgeUsers[0], systemNudgeUsersPassword, 1);
            
            //Put P2 on active seat
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };
            this.GameStateProxy.PutGameState(createSessionState.SessionID, createSessionState.GameID.ToString(), modifiableGameState, systemNudgeUsers[1], systemNudgeUsersPassword);

            Thread.Sleep(1001);
            RunServiceAndVerifyNudgeNoNudgeKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, systemNudgeUsers[1], systemNudgeUsersPassword,1);
            
            //Put P3 on active seat
            modifiableGameState.ActiveSeatIndex = 2;
            this.GameStateProxy.PutGameState(createSessionState.SessionID, createSessionState.GameID.ToString(), modifiableGameState, systemNudgeUsers[2], systemNudgeUsersPassword);
            Thread.Sleep(1001);
            RunServiceAndVerifyNudgeNoNudgeKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, systemNudgeUsers[2], systemNudgeUsersPassword, 1);
        }

        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Verify a nudge, a ndge and no kick off for all the players in a three-player session.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_SystemNudgeWarnOnly_3Players()
        {
            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box. It is expected to fail otherwise");
            if (!TestAreaBase.IsNpdbSettingsTableUpdated) TestAreaBase.OverideNpdbSettings();
            CleanUpNotifications();
            EndAllActiveSessions();

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.WarnOnly;
            iwb.Interval = 1;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, systemNudgeUsers[0], systemNudgeUsersPassword);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);
            SessionState beforeJoinSessionState = createSessionState;

            JoinSession(beforeJoinSessionState, createSessionState.SessionID, createSessionState.GameID, new string[] { systemNudgeUsers[1], systemNudgeUsers[2] });

            Thread.Sleep(1001);
            RunServiceAndVerifyNudgeNoNudgeNotKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, systemNudgeUsers[0], systemNudgeUsersPassword, 1);
            MakeAMove(1, 1, createSessionState.SessionID, createSessionState.GameID.ToString(), systemNudgeUsers[0], systemNudgeUsersPassword);
            Thread.Sleep(1001);
            RunServiceAndVerifyNudges(createSessionState.GameID.ToString(), createSessionState.SessionID, systemNudgeUsers[1], systemNudgeUsersPassword, 1);
            MakeAMove(2, 2, createSessionState.SessionID, createSessionState.GameID.ToString(), systemNudgeUsers[1], systemNudgeUsersPassword);
            Thread.Sleep(1001);
            RunServiceAndVerifyNudges(createSessionState.GameID.ToString(), createSessionState.SessionID, systemNudgeUsers[2], systemNudgeUsersPassword, 1);
        }

        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Verify default inactivity behaviour is no action no notifications")]
        [TestProperty("Type", "feature")]
        public void P_SystemNudge_DefaultIWB()
        {
            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box. It is expected to fail otherwise");
            if (!TestAreaBase.IsNpdbSettingsTableUpdated) TestAreaBase.OverideNpdbSettings();
            TestAreaBase.notificationCommon.CheckNotificationCount(systemNudgeUsers[0], systemNudgeUsersPassword);
            EndAllActiveSessions(systemNudgeUsers[0], systemNudgeUsersPassword);

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, new InactivityWarningBehavior(), true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, systemNudgeUsers[0], systemNudgeUsersPassword);
            AssertCreateSessionState(creationData, createSessionState);

            Thread.Sleep(10000); //to leave out some time in case there is anything the service would try to process
            RunServiceAndVerifyNoNudgeNoNudgeNotKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, systemNudgeUsers[0], systemNudgeUsersPassword);
        }

        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Verify that the default max number of nudges is 0.")]
        [TestProperty("Type", "feature")]
        public void P_SystemNudgeKick_DefaultMaxNudges()
        {
            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box. It is expected to fail otherwise");
            if (!TestAreaBase.IsNpdbSettingsTableUpdated) TestAreaBase.OverideNpdbSettings();
            TestAreaBase.notificationCommon.CheckNotificationCount(systemNudgeUsers[0], systemNudgeUsersPassword);
            EndAllActiveSessions(systemNudgeUsers[0], systemNudgeUsersPassword);

            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, systemNudgeUsers[0], systemNudgeUsersPassword);
            AssertCreateSessionState(creationData, createSessionState);
            Thread.Sleep(1001);
            RunServiceAndVerifyNoNudgeKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, systemNudgeUsers[0], systemNudgeUsersPassword);

        }

        //This test takes a long time (more than an hour)
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Verify all 25 notifications will be created before the player is kicked off.")]
        [TestProperty("Type", "feature")]
        public void P_SystemNudge_MaxNumberOfNudgesAllowed()
        {
            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box. It is expected to fail otherwise");
            if (!TestAreaBase.IsNpdbSettingsTableUpdated) TestAreaBase.OverideNpdbSettings();
            TestAreaBase.notificationCommon.CheckNotificationCount(systemNudgeUsers[0], systemNudgeUsersPassword);
            EndAllActiveSessions(systemNudgeUsers[0], systemNudgeUsersPassword);

            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 1;
            iwb.MaxNumberOfNudges = 25;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, systemNudgeUsers[0], systemNudgeUsersPassword);
            AssertCreateSessionState(creationData, createSessionState);

            Thread.Sleep(1001);
            GetNotifications(createSessionState.GameID.ToString(), createSessionState.SessionID, Notification.NotificationType.Nudge.ToString(), systemNudgeUsers[0], systemNudgeUsersPassword, null);
            string etag = this.NotificationsServiceProxy.EtagInResponse;

            for (int i = 0; i < 25; i++)
            {
                RunSystemNudgeService();
                Thread.Sleep(20000); // give notifcation internal enough time to process the notification requests
                GetNotifications(createSessionState.GameID.ToString(), createSessionState.SessionID, Notification.NotificationType.Nudge.ToString(), systemNudgeUsers[0], systemNudgeUsersPassword, etag); //Getting a 304 here means the nudge is not a new one -- failed to create a nudge notification.
                etag = this.NotificationsServiceProxy.EtagInResponse;
            }

            VerifyNotKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, systemNudgeUsers[0], systemNudgeUsersPassword);

            RunServiceAndVerifyNoNudgeKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, systemNudgeUsers[0], systemNudgeUsersPassword);
                       
        }

        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Verify 2 nudges, another nudge and no kick off.")]
        [TestProperty("Type", "feature")]
        public void P_SystemNudgeWarnOnly_MaxNudges_2()
        {
            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box. It is expected to fail otherwise");
            if (!TestAreaBase.IsNpdbSettingsTableUpdated) TestAreaBase.OverideNpdbSettings();
            TestAreaBase.notificationCommon.CheckNotificationCount(systemNudgeUsers[0], systemNudgeUsersPassword);
            EndAllActiveSessions(systemNudgeUsers[0], systemNudgeUsersPassword);

            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.WarnOnly;
            iwb.Interval = 1;
            iwb.MaxNumberOfNudges = 2;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, systemNudgeUsers[0], systemNudgeUsersPassword);
            AssertCreateSessionState(creationData, createSessionState);

            Thread.Sleep(1001);
            RunServiceAndVerifyNudges(createSessionState.GameID.ToString(), createSessionState.SessionID, systemNudgeUsers[0], systemNudgeUsersPassword, 3);
            RunSystemNudgeService();
            VerifyNotKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, systemNudgeUsers[0], systemNudgeUsersPassword);
        }

        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Verify that making a move after last nudge resets the number of nudges sent to the player.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_SystemNudgeKick_ResetNumberOfNudgesSent()
        {
            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box. It is expected to fail otherwise");
            if (!TestAreaBase.IsNpdbSettingsTableUpdated) TestAreaBase.OverideNpdbSettings();
            TestAreaBase.notificationCommon.CheckNotificationCount(systemNudgeUsers[0], systemNudgeUsersPassword);
            EndAllActiveSessions(systemNudgeUsers[0], systemNudgeUsersPassword);

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 1;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, systemNudgeUsers[0], systemNudgeUsersPassword);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            Thread.Sleep(1001);
            RunServiceAndVerifyNudges(createSessionState.GameID.ToString(), createSessionState.SessionID, systemNudgeUsers[0], systemNudgeUsersPassword,1);
            MakeAMove(1, 0, createSessionState.SessionID, createSessionState.GameID.ToString(), systemNudgeUsers[0], systemNudgeUsersPassword);
            Thread.Sleep(20000); // would give notification internal time to process notifications
            TestAreaBase.notificationCommon.CheckNotificationCount(systemNudgeUsers[0], systemNudgeUsersPassword); //delete notifications up to this pt
            Thread.Sleep(1001);
            RunServiceAndVerifyNudgeNoNudgeKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, systemNudgeUsers[0], systemNudgeUsersPassword, 1);
        }

        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Verify that making a move after a nudge resets the number of nudges sent to the player.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_SystemNudgeWarnOnly_ResetNumberOfNudgesSent()
        {
            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box. It is expected to fail otherwise");
            if (!TestAreaBase.IsNpdbSettingsTableUpdated) TestAreaBase.OverideNpdbSettings();
            TestAreaBase.notificationCommon.CheckNotificationCount(systemNudgeUsers[0], systemNudgeUsersPassword);
            EndAllActiveSessions(systemNudgeUsers[0], systemNudgeUsersPassword);

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.WarnOnly;
            iwb.Interval = 1;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, systemNudgeUsers[0], systemNudgeUsersPassword);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            Thread.Sleep(1001);
            RunSystemNudgeService();
            TestAreaBase.notificationCommon.VerifyNotificationCreated(createSessionState.GameID.ToString(), createSessionState.SessionID, Notification.NotificationType.Nudge, systemNudgeUsers[0], systemNudgeUsersPassword);
            TestAreaBase.notificationCommon.CheckNotificationCount(systemNudgeUsers[0], systemNudgeUsersPassword);//delete notifications up to this point.
            VerifyNotKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, systemNudgeUsers[0], systemNudgeUsersPassword);

            MakeAMove(1, 0, createSessionState.SessionID, createSessionState.GameID.ToString(), systemNudgeUsers[0], systemNudgeUsersPassword);

            Thread.Sleep(1001);

            RunServiceAndVerifyNudgeNoNudgeNotKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, systemNudgeUsers[0], systemNudgeUsersPassword, 1);
        }

        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Verify that no action will be taken before the interval time specified.")]
        [TestProperty("Type", "feature")]
        public void N_SystemNudge_NoNudgesBeforeInterval()
        {
            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box. It is expected to fail otherwise");
            if (!TestAreaBase.IsNpdbSettingsTableUpdated) TestAreaBase.OverideNpdbSettings();
            TestAreaBase.notificationCommon.CheckNotificationCount(systemNudgeUsers[0], systemNudgeUsersPassword);
            EndAllActiveSessions(systemNudgeUsers[0], systemNudgeUsersPassword);

            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 720000;
            iwb.MaxNumberOfNudges = 1;
            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, systemNudgeUsers[0], systemNudgeUsersPassword);
            AssertCreateSessionState(creationData, createSessionState);
            Thread.Sleep(10000);
            RunServiceAndVerifyNoNudgeNoNudgeNotKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, systemNudgeUsers[0], systemNudgeUsersPassword);
        }


        //Fails due to bug: 3300 -- error happens when player leaves a session if he is the only player in the session
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Player creates a session, gets his first nudge and leave the session before any one joined the session. Verify no nudges after leave session.")]
        [TestProperty("Type", "feature")]
        public void N_SystemNudge_NoNudgesAfterLeaveSession_EmptySession()
        {
            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box. It is expected to fail otherwise");
            if (!TestAreaBase.IsNpdbSettingsTableUpdated) TestAreaBase.OverideNpdbSettings();
            TestAreaBase.notificationCommon.CheckNotificationCount(systemNudgeUsers[0], systemNudgeUsersPassword);
            EndAllActiveSessions(systemNudgeUsers[0], systemNudgeUsersPassword);

            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 1;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, systemNudgeUsers[0], systemNudgeUsersPassword);
            AssertCreateSessionState(creationData, createSessionState);
            Thread.Sleep(1001);
            RunServiceAndVerifyNudges(createSessionState.GameID.ToString(), createSessionState.SessionID, systemNudgeUsers[0], systemNudgeUsersPassword, 1);
            this.GameSessionProxy.LeaveSession(createSessionState.SessionID, createSessionState.GameID.ToString(), systemNudgeUsers[0], systemNudgeUsersPassword);
            VerifyKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, systemNudgeUsers[0], systemNudgeUsersPassword);
            RunServiceAndVerifyNoNudgeNoNudge(createSessionState.GameID.ToString(), createSessionState.SessionID, systemNudgeUsers[0], systemNudgeUsersPassword);
        }

        // we do not expect the number of nudges sent be reset after leave session.
        //Bug:5886
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Verify that when a player leaves a session, the number of nudges sent will not be reset.")]
        [TestProperty("Type", "feature")]
        public void N_SystemNudge_ResetNudgesSentAfterLeaveSession_3Players()
        {
            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box. It is expected to fail otherwise");
            if (!TestAreaBase.IsNpdbSettingsTableUpdated) TestAreaBase.OverideNpdbSettings();
            TraceEx.TraceStart("SET the lest_SystemNudgeService_StartingDay=0 on t_settings table of LivenNPDB ", LogLevel.Info);
            CleanUpNotifications();
            EndAllActiveSessions();

            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 1;
            iwb.MaxNumberOfNudges = 1;

            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, new byte[] { 1, 2, 3 },
                                                               iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, systemNudgeUsers[0], systemNudgeUsersPassword);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);
            SessionState beforeJoinSessionState = createSessionState;

            JoinSession(beforeJoinSessionState, createSessionState.SessionID, createSessionState.GameID, systemNudgeUsers[1], systemNudgeUsersPassword, 1);

            Thread.Sleep(1001);
            RunServiceAndVerifyNudges(createSessionState.GameID.ToString(), createSessionState.SessionID, systemNudgeUsers[0], systemNudgeUsersPassword, 1);

            TestAreaBase.notificationCommon.CheckNotificationCount(systemNudgeUsers[0], systemNudgeUsersPassword); // delete all notifications up to this point.
            this.GameSessionProxy.LeaveSession(createSessionState.SessionID, createSessionState.GameID.ToString(), systemNudgeUsers[0], systemNudgeUsersPassword);
            
            //verify that player 1 is not in the session anymore 
            VerifyKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, systemNudgeUsers[0], systemNudgeUsersPassword);
            
            //verify that player 2 is in the session, active seat is still 0. 
            SessionState sessionStateAfterLeave = this.GameSessionProxy.ViewSession(createSessionState.SessionID, createSessionState.GameID.ToString(), systemNudgeUsers[1], systemNudgeUsersPassword);
            Assert.AreEqual(0, sessionStateAfterLeave.State.ActiveSeatIndex, "Error: Unexpected active seat index.");

            //run service and verify that there is not nudge or last nudge for player 2 since he is not on the active seat
            TestAreaBase.notificationCommon.CheckNotificationCount(systemNudgeUsers[1], systemNudgeUsersPassword); // delete all notifictions up to this point.

            Thread.Sleep(1001);

            RunSystemNudgeService();

            List<Notification> nList = GetNotifications(createSessionState.GameID.ToString(), createSessionState.SessionID,
                                                        Notification.NotificationType.Nudge.ToString(), systemNudgeUsers[1], systemNudgeUsersPassword, null);
            Assert.IsNotNull(nList);
            Assert.AreEqual(0, nList.Count, "Not expecting nudge notifications.");           

            //verify that no last nudge notifications were sent to player 1 after he left the session
            nList = GetNotifications(createSessionState.GameID.ToString(), createSessionState.SessionID, Notification.NotificationType.Nudge.ToString(), systemNudgeUsers[0], systemNudgeUsersPassword, null);
            Assert.IsNotNull(nList);
            Assert.AreEqual(0, nList.Count, "Not expecting Nudge notifcations");

            //player 3 join session on the active seat
            JoinSession(beforeJoinSessionState, createSessionState.SessionID, createSessionState.GameID, systemNudgeUsers[2], systemNudgeUsersPassword, 0);

            //verify that player 3 is on the active seat.
            SessionState sessionStateAfterJoin = this.GameSessionProxy.ViewSession(createSessionState.SessionID, createSessionState.GameID.ToString(), systemNudgeUsers[2], systemNudgeUsersPassword);
            Assert.AreEqual(0, sessionStateAfterJoin.State.ActiveSeatIndex, "Error: Unexpected active seat index.");

            //run service and verify that player 3  gets kicked out with no  last nudge notification
            Thread.Sleep(1001);
            RunServiceAndVerifyNoNudgeKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, systemNudgeUsers[2], systemNudgeUsersPassword);
        }

        //for a complete test pass, please make sure that we do not have the follwing errors in the service log file.
        //    LIVEnException> LIVEnException 0X80071B5A occurred: Warned player not found in the session. SessionID: bb4ef18b-ba34-44c7-826e-ef74fef85178, GameID: 1297287394, Warned player SeatIndex: 1.
        //    Inner exception: 
        //    LIVEnException> LIVEnException 0X80071B58 occurred: Player to be kicked not found in the session. SessionID: cb25c7e5-0df9-49e1-9a6b-b11740d66067, GameID: 1297287394, kicked player SeatIndex: 1.
        //    Inner exception:
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Verify that system nudge will not try to nudge an empty active seat.")]
        [TestProperty("Type", "feature")]
        public void N_SystemNudge_NudgeEmptyActiveSeat()
        {
            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box. It is expected to fail otherwise");
            if (!TestAreaBase.IsNpdbSettingsTableUpdated) TestAreaBase.OverideNpdbSettings();
            CleanUpNotifications();
            EndAllActiveSessions();

            TestAreaBase.notificationCommon.CheckNotificationCount(systemNudgeUsers[1], systemNudgeUsersPassword); // delete all pre-existing notifictions for the user.

            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 60;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, systemNudgeUsers[0], systemNudgeUsersPassword);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);
            SessionState beforeJoinSessionState = createSessionState;

            JoinSession(beforeJoinSessionState, createSessionState.SessionID, createSessionState.GameID, systemNudgeUsers[1], systemNudgeUsersPassword, 1);

            this.GameSessionProxy.LeaveSession(createSessionState.SessionID, createSessionState.GameID.ToString(), systemNudgeUsers[0], systemNudgeUsersPassword);

            //verify that player 2 is in the session, active seat is still 0 and no nudges were sent for the session. 
            SessionState sessionStateAfterLeave = this.GameSessionProxy.ViewSession(createSessionState.SessionID, createSessionState.GameID.ToString(), systemNudgeUsers[1], systemNudgeUsersPassword);
            Assert.AreEqual(0, sessionStateAfterLeave.State.ActiveSeatIndex, "Error: Unexpected active seat index.");
            Assert.AreEqual(createSessionState.SeatsAvailable, sessionStateAfterLeave.SeatsAvailable, "Error: Unexpected active seat index."); //since one user joined and another one left after creation.
            Assert.AreEqual(false, sessionStateAfterLeave.IsInactivityWarningSent);

            TestAreaBase.notificationCommon.CheckNotificationCount(systemNudgeUsers[0], systemNudgeUsersPassword); // delete all notifictions up to this point.

            Thread.Sleep(1001);
            RunSystemNudgeService();
            RunSystemNudgeService();
            RunSystemNudgeService();

            //nudge could happen before player left the session because of time elapse. Verify that there was no inactivity warning while active seat was empty.
            SessionState sessionStateAfterServiceRun = this.GameSessionProxy.ViewSession(createSessionState.SessionID, createSessionState.GameID.ToString(), systemNudgeUsers[1], systemNudgeUsersPassword);
            Assert.AreEqual(0, sessionStateAfterServiceRun.State.ActiveSeatIndex, "Error: Unexpected active seat index.");
            Assert.AreEqual(false, sessionStateAfterServiceRun.IsInactivityWarningSent);
            
            List<Notification> nList = GetNotifications(createSessionState.GameID.ToString(), createSessionState.SessionID, string.Empty, systemNudgeUsers[0], systemNudgeUsersPassword, null);
            Assert.IsNotNull(nList);
            Assert.AreEqual(0, nList.Count, "Error: wrong number of notifications.");
        
            nList = GetNotifications(createSessionState.GameID.ToString(), createSessionState.SessionID, Notification.NotificationType.Nudge.ToString(), systemNudgeUsers[1], systemNudgeUsersPassword, null);
            Assert.IsNotNull(nList);
            Assert.AreEqual(1, nList.Count, "Error: wrong number of notifications.");
        }

        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Verify that no nudges will be sent after game is over.")]
        [TestProperty("Type", "feature")]
        public void N_SystemNudge_2PlayersInSession_NoNudgesAfterPostGameEnd()
        {
            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box. It is expected to fail otherwise");
            if (!TestAreaBase.IsNpdbSettingsTableUpdated) TestAreaBase.OverideNpdbSettings();
            CleanUpNotifications();
            EndAllActiveSessions();

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 1; 
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, systemNudgeUsers[0], systemNudgeUsersPassword);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);
            SessionState beforeJoinSessionState = createSessionState;

            JoinSession(beforeJoinSessionState, createSessionState.SessionID, createSessionState.GameID, new string[] { systemNudgeUsers[1]});

            MakeAMove(1, 1, createSessionState.SessionID, createSessionState.GameID.ToString(), systemNudgeUsers[0], systemNudgeUsersPassword);

            Thread.Sleep(1001);
            RunServiceAndVerifyNudges(createSessionState.GameID.ToString(), createSessionState.SessionID, systemNudgeUsers[1], systemNudgeUsersPassword, 1);
            
            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            this.GameStateProxy.PostGameEnd(createSessionState.SessionID, createSessionState.GameID.ToString(),gameResults, systemNudgeUsers[1], systemNudgeUsersPassword);
  
            Thread.Sleep(1001);
            RunServiceAndVerifyNoNudgeNoNudgeNotKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, systemNudgeUsers[0], systemNudgeUsersPassword);
        }

        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Change action from warn only to kick using modify session and verify kick off.")]
        [TestProperty("Type", "feature")]
        public void P_SystemNudge_ModifyInactivityBehaviour()
        {
            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box. It is expected to fail otherwise");
            if (!TestAreaBase.IsNpdbSettingsTableUpdated) TestAreaBase.OverideNpdbSettings();
            TestAreaBase.notificationCommon.CheckNotificationCount(systemNudgeUsers[0], systemNudgeUsersPassword);
            EndAllActiveSessions(systemNudgeUsers[0], systemNudgeUsersPassword);

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.WarnOnly;
            iwb.Interval = 1;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, systemNudgeUsers[0], systemNudgeUsersPassword);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);
            SessionState beforeJoinSessionState = createSessionState;

            JoinSession(beforeJoinSessionState, createSessionState.SessionID, createSessionState.GameID, new string[] { systemNudgeUsers[1]});

            MakeAMove(1, 1, createSessionState.SessionID, createSessionState.GameID.ToString(), systemNudgeUsers[0], systemNudgeUsersPassword);

            Thread.Sleep(1001);
            RunServiceAndVerifyNudgeNoNudgeNotKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, systemNudgeUsers[1], systemNudgeUsersPassword, 1);

            RunSystemNudgeService();
            VerifyNotKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, systemNudgeUsers[1], systemNudgeUsersPassword);
            
            //Make inactivity behaviour action = kick 
            ModificationData modificationData = InitializeModificationData(createSessionState);
            modificationData.InactivityWarning.Action = InactivityWarningAction.Kick;
            modificationData.InactivityWarning.Interval = 1;
            modificationData.InactivityWarning.MaxNumberOfNudges = 1;

            this.GameSessionProxy.ModifySession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString(), modificationData, systemNudgeUsers[0], systemNudgeUsersPassword);
            SessionState modifySessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString(), systemNudgeUsers[0], systemNudgeUsersPassword);
            AssertModifySessionState(modificationData, createSessionState, modifySessionState);

            Thread.Sleep(1001);
            RunSystemNudgeService();
            VerifyKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, systemNudgeUsers[1], systemNudgeUsersPassword);
        }

        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Verify that modifying a session, veiwing a session, creating another session, making a move in another session... do not reset the number of nudges sent.")]
        [TestProperty("Type", "feature")]
        public void N_SystemNudge_ResetNumberOfNudgesActionsWithNoMove()
        {
            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box. It is expected to fail otherwise");
            if (!TestAreaBase.IsNpdbSettingsTableUpdated) TestAreaBase.OverideNpdbSettings();
            TestAreaBase.notificationCommon.CheckNotificationCount(systemNudgeUsers[0], systemNudgeUsersPassword);
            EndAllActiveSessions(systemNudgeUsers[0], systemNudgeUsersPassword);

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.WarnOnly;
            iwb.Interval = 1; //see if this is reasonalble
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, systemNudgeUsers[0], systemNudgeUsersPassword);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);
            SessionState beforeJoinSessionState = createSessionState;

            JoinSession(createSessionState, createSessionState.SessionID, createSessionState.GameID, systemNudgeUsers[1], systemNudgeUsersPassword, 1);

            Thread.Sleep(1001);
            RunServiceAndVerifyNudges(createSessionState.GameID.ToString(), createSessionState.SessionID, systemNudgeUsers[0], systemNudgeUsersPassword, 1);

            //make some random calls
            ModificationData modificationData = InitializeModificationData(createSessionState);
            modificationData.InactivityWarning.Action = InactivityWarningAction.Kick;
            modificationData.InactivityWarning.Interval = 1;
            modificationData.InactivityWarning.MaxNumberOfNudges = 1;

            this.GameSessionProxy.ModifySession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString(), modificationData, systemNudgeUsers[0], systemNudgeUsersPassword);
            SessionState modifySessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString(), systemNudgeUsers[0], systemNudgeUsersPassword);

            //Assert SessionState
            AssertModifySessionState(modificationData, createSessionState, modifySessionState);


            this.GameStateProxy.GetGameState(createSessionState.SessionID, createSessionState.GameID.ToString(), systemNudgeUsers[0], systemNudgeUsersPassword);

             //Do PostGameAction 
            GameAction gameAction = new GameAction();
            gameAction.ActionType = GameActionType.UserNudge;
            gameAction.ActionData = new byte[] { 1 };
            gameAction.ActionTime = DateTime.Now;
            gameAction.SequenceNumber = modifySessionState.State.SequenceNumber;

            this.GameStateProxy.PostGameAction(modifySessionState.SessionID.ToString(), modifySessionState.GameID.ToString(), gameAction, systemNudgeUsers[0], systemNudgeUsersPassword);

            //create another session(S2)
            CreationData newCreationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, new InactivityWarningBehavior(), true, "TestGame");
            SessionState anotherSessionState = this.GameSessionProxy.CreateSession(newCreationData.GameID.ToString(), newCreationData, systemNudgeUsers[0], systemNudgeUsersPassword);
            AssertCreateSessionState(newCreationData, anotherSessionState);
            //another player joins S2
            JoinSession(anotherSessionState, anotherSessionState.SessionID, anotherSessionState.GameID, systemNudgeUsers[1], systemNudgeUsersPassword, 1);
            //Make a move in S2
            MakeAMove(1,1, anotherSessionState.SessionID, anotherSessionState.GameID.ToString(), systemNudgeUsers[0], systemNudgeUsersPassword);
            
            //TODO: Add a couple of other session API calls ?????????

            RunSystemNudgeService();
            List<Notification> nList = GetNotifications(createSessionState.GameID.ToString(), createSessionState.SessionID, Notification.NotificationType.Nudge.ToString(), systemNudgeUsers[0], systemNudgeUsersPassword, null);
            Assert.IsNotNull(nList);
            Assert.AreEqual(0, nList.Count, "Error: wrong number of notifications.");
            VerifyKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, systemNudgeUsers[0], systemNudgeUsersPassword);
        }

        //Bug:5884
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Verify that kicking off a player leaves the active seat empty and send a Nudge to the owner.")]
        [TestProperty("Type", "Features")]
        public void N_SystemNudgeKick_ChangeActiveSeat()
        {
            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box. It is expected to fail otherwise");
            if (!TestAreaBase.IsNpdbSettingsTableUpdated) TestAreaBase.OverideNpdbSettings();
            CleanUpNotifications();
            EndAllActiveSessions();

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 1;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, systemNudgeUsers[0], systemNudgeUsersPassword);
            AssertCreateSessionState(creationData, createSessionState);

            JoinSession(createSessionState, createSessionState.SessionID, createSessionState.GameID, systemNudgeUsers[1], systemNudgeUsersPassword, 1);

            Thread.Sleep(1001);
            RunServiceAndVerifyNudgeNoNudgeKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, systemNudgeUsers[0], systemNudgeUsersPassword ,1 );

            Thread.Sleep(Constants.NOTIFICATION_RETRIES* Constants.NOTIFICATION_SLEEP_TIME); // to make sure that we gave notification internal enough time to process the request for last nudge notification. 
            //verify active seat is not changed
            SessionState sessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID, createSessionState.GameID.ToString(), systemNudgeUsers[1], systemNudgeUsersPassword);
            Assert.AreEqual(0, sessionState.State.ActiveSeatIndex, "Error: Unexpected active seat index.");

            //verify last nudge notification is sent to session owner -- since owner is kicked off, player on the next lowest seat idex will be session owner.
            List<Notification> nList = GetNotifications(createSessionState.GameID.ToString(), createSessionState.SessionID, Notification.NotificationType.Nudge.ToString(), systemNudgeUsers[1], systemNudgeUsersPassword, null);
            Assert.IsNotNull(nList);
            Assert.AreEqual(1, nList.Count, "Expected a last nudge  notification for session owner.");
        }

        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Verify the contents of nudge notifications.")]
        [TestProperty("Type", "Features")]
        public void P_SystemNudge_NudgeNotifcationContent()
        {
            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box. It is expected to fail otherwise");
            if (!TestAreaBase.IsNpdbSettingsTableUpdated) TestAreaBase.OverideNpdbSettings();
            TestAreaBase.notificationCommon.CheckNotificationCount(systemNudgeUsers[0], systemNudgeUsersPassword);
            EndAllActiveSessions(systemNudgeUsers[0], systemNudgeUsersPassword);
            DateTime now = DateTime.UtcNow;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 1;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, systemNudgeUsers[0], systemNudgeUsersPassword);
            AssertCreateSessionState(creationData, createSessionState);

            Thread.Sleep(1001);
            RunSystemNudgeService();
            Thread.Sleep(20000);
            List<Notification> nList = GetNotifications(createSessionState.GameID.ToString(), createSessionState.SessionID, Notification.NotificationType.Nudge.ToString(), systemNudgeUsers[0], systemNudgeUsersPassword, null);
            Assert.IsNotNull(nList);
            Assert.AreEqual(1, nList.Count, "Error: Unexpected number of notifications.");
            ValidateNotificationContent(nList[0], Notification.NotificationType.Nudge.ToString(), Users.GetGamertag(systemNudgeUsers[0],systemNudgeUsersPassword), "");
        }

        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Verify the contents of last nudge notifications.")]
        [TestProperty("Type", "Features")]
        public void P_SystemNudge_LastNudgeNotifcationContent()
        {
            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box. It is expected to fail otherwise");
            if (!TestAreaBase.IsNpdbSettingsTableUpdated) TestAreaBase.OverideNpdbSettings();
            TestAreaBase.notificationCommon.CheckNotificationCount(systemNudgeUsers[0], systemNudgeUsersPassword);
            EndAllActiveSessions(systemNudgeUsers[0], systemNudgeUsersPassword);

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.WarnOnly;
            iwb.Interval = 1;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, systemNudgeUsers[0], systemNudgeUsersPassword);
            AssertCreateSessionState(creationData, createSessionState);

            Thread.Sleep(1001);
            RunSystemNudgeService();
            Thread.Sleep(20000);
            List<Notification> nList = GetNotifications(createSessionState.GameID.ToString(), createSessionState.SessionID, Notification.NotificationType.Nudge.ToString(), systemNudgeUsers[0], systemNudgeUsersPassword, null);
            Assert.IsNotNull(nList);
            Assert.AreEqual(1, nList.Count, "Error: Unexpected number of notifications.");
            ValidateNotificationContent(nList[0], Notification.NotificationType.Nudge.ToString(), Users.GetGamertag(systemNudgeUsers[0],systemNudgeUsersPassword), "");
        }

        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Verify that nudge happenes for a session that is 13 days  old.")]
        [TestProperty("Type", "Features")]
        public void P_SystemNudge_Session6DaysOld()
        {
            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box. It is expected to fail otherwise");
            if (!TestAreaBase.IsNpdbSettingsTableUpdated) TestAreaBase.OverideNpdbSettings();
            TestAreaBase.notificationCommon.CheckNotificationCount(systemNudgeUsers[0], systemNudgeUsersPassword);
            EndAllActiveSessions(systemNudgeUsers[0], systemNudgeUsersPassword);

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.WarnOnly;
            iwb.Interval = 1;
            iwb.MaxNumberOfNudges = 1;
            
            SessionState createSessionState = TestAreaBase.InitSessionState(DateTime.UtcNow.AddDays(-6).ToString(), false, 0);
            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            string token1 = "0000" + Users.GetXuid(systemNudgeUsers[0], systemNudgeUsersPassword);
            string publicToken1 = ConfigurationManager.AppSettings["SNUser1GamerTag"];
            createSessionState.Seats[0].Profile = new IdentityToken(IdentityServiceType.XUID, token1, publicToken1);
            createSessionState.InactivityWarning = iwb;

            NotificationTestCommon.testHooksClient.CreateSession(createSessionState);
            SessionState sessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID, createSessionState.GameID.ToString(), systemNudgeUsers[0], systemNudgeUsersPassword);
            Assert.IsNotNull(sessionState);

            Thread.Sleep(1001);
            RunSystemNudgeService();
            Thread.Sleep(180000); // sleeep another 3 mins so that there is enough time to process nudges for all sessions  --- might take a long time to get a notification for an old session since there might be lots of sessions to process.
            TestAreaBase.notificationCommon.VerifyNotificationCreated(createSessionState.GameID.ToString(), createSessionState.SessionID, Notification.NotificationType.Nudge, systemNudgeUsers[0], systemNudgeUsersPassword);
        }
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Verify that nudge happenes for a session that is 6 days  old.")]
        [TestProperty("Type", "Features")]
        public void P_SystemNudge_Session6DaysOld_KickedOff()
        {
            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box. It is expected to fail otherwise");
            if (!TestAreaBase.IsNpdbSettingsTableUpdated) TestAreaBase.OverideNpdbSettings();
            TestAreaBase.notificationCommon.CheckNotificationCount(systemNudgeUsers[0], systemNudgeUsersPassword);
            EndAllActiveSessions(systemNudgeUsers[0], systemNudgeUsersPassword);

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 1;
            iwb.MaxNumberOfNudges = 1;

            SessionState createSessionState = TestAreaBase.InitSessionState(DateTime.UtcNow.AddDays(-6).ToString(), false, 0);
            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            string token1 = "0000" + Users.GetXuid(systemNudgeUsers[0], systemNudgeUsersPassword);
            string publicToken1 = ConfigurationManager.AppSettings["SNUser1GamerTag"];
            createSessionState.Seats[0].Profile = new IdentityToken(IdentityServiceType.XUID, token1, publicToken1);
            createSessionState.InactivityWarning = iwb;

            NotificationTestCommon.testHooksClient.CreateSession(createSessionState);
            SessionState sessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID, createSessionState.GameID.ToString(), systemNudgeUsers[0], systemNudgeUsersPassword);
            Assert.IsNotNull(sessionState);

            Thread.Sleep(1001);
            RunSystemNudgeService();

            Thread.Sleep(Constants.NOTIFICATION_RETRIES*Constants.NOTIFICATION_SLEEP_TIME); 

            TestAreaBase.notificationCommon.VerifyNotificationCreated(createSessionState.GameID.ToString(), createSessionState.SessionID, Notification.NotificationType.Nudge, systemNudgeUsers[0], systemNudgeUsersPassword);

            RunServiceAndVerifyNoNudgeKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, systemNudgeUsers[0], systemNudgeUsersPassword);
        }

        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Verify that nudge does not happenes for a session that is 14 days old.")]
        [TestProperty("Type", "Features")]
        public void N_SystemNudge_Session14DaysOld()
        {
            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box. It is expected to fail otherwise");
            if (!TestAreaBase.IsNpdbSettingsTableUpdated) TestAreaBase.OverideNpdbSettings();
            TestAreaBase.notificationCommon.CheckNotificationCount(systemNudgeUsers[0], systemNudgeUsersPassword);
            EndAllActiveSessions(systemNudgeUsers[0], systemNudgeUsersPassword);

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 1;
            iwb.MaxNumberOfNudges = 1;

            SessionState createSessionState = TestAreaBase.InitSessionState(DateTime.UtcNow.AddDays(-7).ToString(), false, 0);
            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            string token1 = "0000" + ConfigurationManager.AppSettings["SNUser1Xuid"];
            string publicToken1 = ConfigurationManager.AppSettings["SNUser1GamerTag"];
            createSessionState.Seats[0].Profile = new IdentityToken(IdentityServiceType.XUID, token1, publicToken1);
            createSessionState.InactivityWarning = iwb;

            NotificationTestCommon.testHooksClient.CreateSession(createSessionState);
            SessionState sessionState = null;
            try
            {
                sessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID, createSessionState.GameID.ToString(), systemNudgeUsers[0], systemNudgeUsersPassword);
                Assert.Fail("Error: Expected to get FORBIDDEN err but it didn't");
            }
            catch (RestException rx)
            {
                VerifyException(HttpStatusCode.Forbidden, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.UserNotAllowedToGetStateInSession), rx.Response);
            }           

            Thread.Sleep(1001);
            RunServiceAndVerifyNoNudgeNoNudge(createSessionState.GameID.ToString(), createSessionState.SessionID, systemNudgeUsers[0], systemNudgeUsersPassword);
        }

        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("Verify that the notifications for that session and user will be deleted once the player gets kicked off the session.")]
        [TestProperty("Type", "Features")]
        public void P_SystemNudgeKick_DeleteNotificationsAfterKick()
        {
            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box. It is expected to fail otherwise");
            if (!TestAreaBase.IsNpdbSettingsTableUpdated) TestAreaBase.OverideNpdbSettings();
            TestAreaBase.notificationCommon.CheckNotificationCount(systemNudgeUsers[0], systemNudgeUsersPassword);
            EndAllActiveSessions(systemNudgeUsers[0], systemNudgeUsersPassword);

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 1;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, systemNudgeUsers[0], systemNudgeUsersPassword);
            AssertCreateSessionState(creationData, createSessionState);

            JoinSession(createSessionState, createSessionState.SessionID, createSessionState.GameID, systemNudgeUsers[1], systemNudgeUsersPassword, 1);

            // send a user nudge notification
            GameAction gameAction = new GameAction();
            gameAction.ActionType = GameActionType.UserNudge;
            gameAction.ActionData = new byte[] { 0 };
            gameAction.ActionTime = DateTime.Now;
            gameAction.SequenceNumber = createSessionState.State.SequenceNumber;
            this.GameStateProxy.PostGameAction(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString(), gameAction, systemNudgeUsers[1], systemNudgeUsersPassword);

            Thread.Sleep(180000);
            List<Notification> nList = GetNotifications(createSessionState.GameID.ToString(), createSessionState.SessionID, Notification.NotificationType.Nudge.ToString(), systemNudgeUsers[0], systemNudgeUsersPassword, null);
            Assert.IsNotNull(nList);
            Assert.AreEqual(1, nList.Count, "Error: Did not find the notification created as a result of user nudge.");
            string etag = this.NotificationsServiceProxy.EtagInResponse;

            Thread.Sleep(1001);
            RunSystemNudgeService();
            Thread.Sleep(Constants.NOTIFICATION_RETRIES * Constants.NOTIFICATION_SLEEP_TIME);
            nList = GetNotifications(createSessionState.GameID.ToString(), createSessionState.SessionID, Notification.NotificationType.Nudge.ToString(), systemNudgeUsers[0], systemNudgeUsersPassword, etag);
            Assert.IsNotNull(nList);
            Assert.AreEqual(1, nList.Count, "Error: Did not find nudge notification after time interval has elapsed.");
            
            RunServiceAndVerifyNoNudgeKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, systemNudgeUsers[0], systemNudgeUsersPassword);
                       
            //Verify that all notifications for this session are deleted.
            nList = GetNotifications(createSessionState.GameID.ToString(), createSessionState.SessionID, string.Empty, systemNudgeUsers[0], systemNudgeUsersPassword, null);
            Assert.IsNotNull(nList);
            Assert.AreEqual(0, nList.Count, "Error: Notifications for the session are not deleted after kick.");
        }
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Verify that when a player leaves a session, no nudge is sent.")]
        [TestProperty("Type", "feature")]
        public void N_SystemNudge_NudgeHideInNotificationQueue()
        {
            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box. It is expected to fail otherwise");

            if (!TestAreaBase.IsNpdbSettingsTableUpdated) TestAreaBase.OverideNpdbSettings();

            TraceEx.TraceStart("SET the lest_SystemNudgeService_StartingDay=0 on t_settings table of LivenNPDB ", LogLevel.Info);
            CleanUpNotifications();
            EndAllActiveSessions();

            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 1;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };

            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, new byte[] { 1, 2, 3 },
                                                               iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, systemNudgeUsers[0], systemNudgeUsersPassword);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);
            SessionState beforeJoinSessionState = createSessionState;

            JoinSession(beforeJoinSessionState, createSessionState.SessionID, createSessionState.GameID, systemNudgeUsers[1], systemNudgeUsersPassword, 1);

            Thread.Sleep(1001);
            RunServiceAndVerifyNudges(createSessionState.GameID.ToString(), createSessionState.SessionID, systemNudgeUsers[0], systemNudgeUsersPassword, 1);

            TestAreaBase.notificationCommon.CheckNotificationCount(systemNudgeUsers[0], systemNudgeUsersPassword); // delete all notifictions up to this point.
            this.GameSessionProxy.LeaveSession(createSessionState.SessionID, createSessionState.GameID.ToString(), systemNudgeUsers[0], systemNudgeUsersPassword);

            //wait for nudge in notification queue to go to Azure
            Thread.Sleep(180000);

            //verify that player 1 is not in the session anymore 
            VerifyKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, systemNudgeUsers[0], systemNudgeUsersPassword);

            //verify that player 2 is in the session, active seat is still 0. 
            SessionState sessionStateAfterLeave = this.GameSessionProxy.ViewSession(createSessionState.SessionID, createSessionState.GameID.ToString(), systemNudgeUsers[1], systemNudgeUsersPassword);
            Assert.AreEqual(0, sessionStateAfterLeave.State.ActiveSeatIndex, "Error: Unexpected active seat index.");

            //run service and verify that there is not nudge or last nudge for player 2 since he is not on the active seat
            TestAreaBase.notificationCommon.CheckNotificationCount(systemNudgeUsers[1], systemNudgeUsersPassword); // delete all notifictions up to this point.

            Thread.Sleep(1001);

            RunServiceAndVerifyNoNudgeNoNudge(createSessionState.GameID.ToString(), createSessionState.SessionID, systemNudgeUsers[1], systemNudgeUsersPassword);
        }

        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Verify that kicking off a player leaves the active seat empty and send a YouLose  to the player just kicked off.")]
        [TestProperty("Type", "Features")]
        public void P_SystemNudge_KickedOffPlayerLoses()
        {
            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box. It is expected to fail otherwise");
            if (!TestAreaBase.IsNpdbSettingsTableUpdated) TestAreaBase.OverideNpdbSettings();
            CleanUpNotifications();
            EndAllActiveSessions();      
                
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 1;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, systemNudgeUsers[0], systemNudgeUsersPassword);
            AssertCreateSessionState(creationData, createSessionState);

            JoinSession(createSessionState, createSessionState.SessionID, createSessionState.GameID, systemNudgeUsers[1], systemNudgeUsersPassword, 1);

            //Put P2 on active seat
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };
            this.GameStateProxy.PutGameState(createSessionState.SessionID, createSessionState.GameID.ToString(), modifiableGameState, systemNudgeUsers[0], systemNudgeUsersPassword);

            long Player2LosePrevious = long.Parse(GetLeaderboardValue("Losses",
                                                  systemNudgeUsers[1],
                                                  systemNudgeUsersPassword)); 
           
            Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME);

            RunServiceAndVerifyNudgeNoNudgeKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, systemNudgeUsers[1], systemNudgeUsersPassword , 1 );
            
            long Player2Losenow = long.Parse(GetLeaderboardValue("Losses",
                                              systemNudgeUsers[1],
                                              systemNudgeUsersPassword));

            Assert.AreEqual<long>(Player2LosePrevious + 1, Player2Losenow, "Loses has not been posted to rewards after player is kicked of");

        }

        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Verify that Nudge Notification from field displays opponent gamerTag.")]
        [TestProperty("Type", "Features")]
        public void P_SystemNudge_NudgesFromOpponentGamerTag()
        {
            //Two players case: when the owner is on active seat and kicked off
            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box. It is expected to fail otherwise");
            if (!TestAreaBase.IsNpdbSettingsTableUpdated) TestAreaBase.OverideNpdbSettings();
            CleanUpNotifications();
            EndAllActiveSessions();

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.WarnOnly;
            iwb.Interval = 1;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 2, 10, 10, sessionParameters, iwb, true, "TestGame");

            // create session by owner systemNudgeUsers[0] 
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, systemNudgeUsers[0], systemNudgeUsersPassword);
            AssertCreateSessionState(creationData, createSessionState);

            // join session by another player systemNudgeUsers[0]
            SessionState joinSessionState = JoinSession(createSessionState, createSessionState.SessionID, createSessionState.GameID, systemNudgeUsers[1], systemNudgeUsersPassword, 1);

            UserInfo UInfo = null;

           
            //Put P2 on active seat
            ModifiableGameState modifiableGameState2 = new ModifiableGameState();
            modifiableGameState2.ActiveSeatIndex = 1;
            modifiableGameState2.GameData = new byte[] { 55, 56, 57, 58, 59 };
            this.GameStateProxy.PutGameState(createSessionState.SessionID, createSessionState.GameID.ToString(), modifiableGameState2, systemNudgeUsers[0], systemNudgeUsersPassword);

            //make a move Put P1 on active seat
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 0;
            modifiableGameState.GameData = new byte[] { 50, 51, 52, 53, 54 };
            this.GameStateProxy.PutGameState(createSessionState.SessionID, createSessionState.GameID.ToString(), modifiableGameState, systemNudgeUsers[1], systemNudgeUsersPassword);


            SessionState CurrentSessionState= this.GameSessionProxy.ViewSession(createSessionState.SessionID, createSessionState.GameID.ToString(),  systemNudgeUsers[0], systemNudgeUsersPassword);

            Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME);

            RunServiceAndVerifyNudges(createSessionState.GameID.ToString(), createSessionState.SessionID, systemNudgeUsers[0], systemNudgeUsersPassword, 1);

            Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME * Constants.NOTIFICATION_RETRIES);

            //verify sender display name  on From on nudge notification 
            Notification nudgeNotification = GetNotification(createSessionState.GameID.ToString(), createSessionState.SessionID, Notification.NotificationType.Nudge.ToString(),
                                                             systemNudgeUsers[0], systemNudgeUsersPassword);
            UInfo = GetUserInfo(nudgeNotification.From);

            if (CurrentSessionState.Seats.Length == 2)
            {
                try
                {
                    //in this case nudge is from opponent
                    Assert.AreEqual<string>(Users.GetGamertag(systemNudgeUsers[1], systemNudgeUsersPassword),
                                             UInfo.GamerTag,
                                            "Error: Sender on notification From field  is not as expected , which should have been  opponents gamertag");
                }
                catch (Exception ex)
                {
                    TraceEx.TraceStart(ex.Message);
                    //in this case nudge is, by default, from system
                    Assert.AreEqual<string>("Xbox LIVE",
                                             UInfo.DisplayName,
                                            "Error: Sender on notification From field  is not as expected , which should have been  from system");
                }
            }
            else
            {
                try
                {
                    //in this case nudge is from owner
                    Assert.AreEqual<string>(Users.GetGamertag(systemNudgeUsers[0], systemNudgeUsersPassword),
                                             UInfo.GamerTag,
                                            "Error: Sender on notification From field  is not as expected , which should have been  opponents gamertag");
                }
                catch (Exception ex)
                {
                    TraceEx.TraceStart(ex.Message);
                    //in this case nudge is , by default,from system
                    Assert.AreEqual<string>("Xbox LIVE",
                                             UInfo.DisplayName,
                                            "Error: Sender on notification From field  is not as expected , which should have been  from system");
                }
            }
        }

        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Verify  nudge is from himself if there is only one guy in the session ")]
        [TestProperty("Type", "Features")]
        public void P_SystemNudge_NudgesFromSelfGamerTag()
        {
            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box. It is expected to fail otherwise");
            if (!TestAreaBase.IsNpdbSettingsTableUpdated) TestAreaBase.OverideNpdbSettings();
            CleanUpNotifications();
            EndAllActiveSessions();

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.WarnOnly;
            iwb.Interval = 1;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 2, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, systemNudgeUsers[0], systemNudgeUsersPassword);
            AssertCreateSessionState(creationData, createSessionState);
        
            UserInfo UInfo = null;

            Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME);

            RunServiceAndVerifyNudges(createSessionState.GameID.ToString(), createSessionState.SessionID, systemNudgeUsers[0], systemNudgeUsersPassword, 1);

            Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME * Constants.NOTIFICATION_RETRIES);

            //verify sender display name  on From on nudge notification 
            Notification nudgeNotification = GetNotification(createSessionState.GameID.ToString(), createSessionState.SessionID, Notification.NotificationType.Nudge.ToString(),
                                                             systemNudgeUsers[0], systemNudgeUsersPassword);
            UInfo = GetUserInfo(nudgeNotification.From);
              try
              {
                //in this case nudge is from owner
                Assert.AreEqual<string>(Users.GetGamertag(systemNudgeUsers[0], systemNudgeUsersPassword),
                                         UInfo.GamerTag ,
                                        "Error: Sender on notification From field  is not as expected , which should have been  his own  gamertag");
              }
              catch (Exception ex)
              {
                  TraceEx.TraceStart(ex.Message);
                  //in this case nudge is , by default,from system
                  Assert.AreEqual<string>("Xbox LIVE",
                                           UInfo.DisplayName,
                                          "Error: Sender on notification From field  is not as expected , which should have been  from system");
              }
        }

        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Verify that Nudge Notification from field contains owner gamertag when number of users > 3.")]
        [TestProperty("Type", "Features")]
        public void P_SystemNudge_NudgesFromOwnerGamerTag()
        {
            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box. It is expected to fail otherwise");
            if (!TestAreaBase.IsNpdbSettingsTableUpdated) TestAreaBase.OverideNpdbSettings();
            CleanUpNotifications();
            EndAllActiveSessions();

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.WarnOnly;
            iwb.Interval = 1;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 2, 10, 10, sessionParameters, iwb, true, "TestGame");

            // create session by owner systemNudgeUsers[0] 
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, systemNudgeUsers[0], systemNudgeUsersPassword);
          
            AssertCreateSessionState(creationData, createSessionState);

            //join session by another player systemNudgeUsers[1]
            SessionState joinSessionState = JoinSession(createSessionState, createSessionState.SessionID, createSessionState.GameID, systemNudgeUsers[1], systemNudgeUsersPassword, 1);

            //join session by another player systemNudgeUsers[2]
            joinSessionState = JoinSession(joinSessionState, joinSessionState.SessionID, joinSessionState.GameID, systemNudgeUsers[2], systemNudgeUsersPassword, 2);

            UserInfo UInfo = null;


            //Put P2 on active seat
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };
            this.GameStateProxy.PutGameState(createSessionState.SessionID, createSessionState.GameID.ToString(), modifiableGameState, systemNudgeUsers[0], systemNudgeUsersPassword);

            //make a move Put P3 on active seat
            ModifiableGameState modifiableGameState2 = new ModifiableGameState();
            modifiableGameState2.ActiveSeatIndex = 2;
            modifiableGameState2.GameData = new byte[] { 50, 51, 52, 53, 54 };
            this.GameStateProxy.PutGameState(createSessionState.SessionID, createSessionState.GameID.ToString(), modifiableGameState2, systemNudgeUsers[1], systemNudgeUsersPassword);

            Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME);

            RunServiceAndVerifyNudges(createSessionState.GameID.ToString(), createSessionState.SessionID, systemNudgeUsers[2], systemNudgeUsersPassword, 1);

            Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME * Constants.NOTIFICATION_RETRIES);

            //verify sender display name  on From on nudge notification 
            Notification nudgeNotification = GetNotification(createSessionState.GameID.ToString(), createSessionState.SessionID, Notification.NotificationType.Nudge.ToString(),
                                                             systemNudgeUsers[2], systemNudgeUsersPassword);
            UInfo = GetUserInfo(nudgeNotification.From);

            try
            {
                //in this case nudge is from owner
                Assert.AreEqual<string>(Users.GetGamertag(systemNudgeUsers[0], systemNudgeUsersPassword),
                                         UInfo.GamerTag,
                                        "Error: Sender on notification From field  is not as expected , which should have been  owner's gamertag");
            }
            catch (Exception ex)
            {
                TraceEx.TraceStart(ex.Message);
                //in this case nudge is , by default,from system
                Assert.AreEqual<string>("Xbox LIVE",
                                         UInfo.DisplayName,
                                        "Error: Sender on notification From field  is not as expected , which should have been  from system");
            }

        }

        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Verify that Nudge Notification from field displays opponent gamerTag.")]
        [TestProperty("Type", "Features")]
        public void P_SystemNudge_NudgesFromOwner2players()
        {
            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box. It is expected to fail otherwise");
            if (!TestAreaBase.IsNpdbSettingsTableUpdated) TestAreaBase.OverideNpdbSettings();
            CleanUpNotifications();
            EndAllActiveSessions();

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.WarnOnly;
            iwb.Interval = 1;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 2, 10, 10, sessionParameters, iwb, true, "TestGame");

            // create session by owner systemNudgeUsers[0] 
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, systemNudgeUsers[0], systemNudgeUsersPassword);
            AssertCreateSessionState(creationData, createSessionState);

            // join session by another player systemNudgeUsers[0]
            SessionState joinSessionState = JoinSession(createSessionState, createSessionState.SessionID, createSessionState.GameID, systemNudgeUsers[1], systemNudgeUsersPassword, 1);

            UserInfo UInfo = null;


            //Put P2 on active seat
            ModifiableGameState modifiableGameState2 = new ModifiableGameState();
            modifiableGameState2.ActiveSeatIndex = 1;
            modifiableGameState2.GameData = new byte[] { 55, 56, 57, 58, 59 };
            this.GameStateProxy.PutGameState(createSessionState.SessionID, createSessionState.GameID.ToString(), modifiableGameState2, systemNudgeUsers[0], systemNudgeUsersPassword);
                       

            SessionState CurrentSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID, createSessionState.GameID.ToString(), systemNudgeUsers[0], systemNudgeUsersPassword);

            Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME);

            RunServiceAndVerifyNudges(createSessionState.GameID.ToString(), createSessionState.SessionID, systemNudgeUsers[1], systemNudgeUsersPassword, 1);

            Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME * Constants.NOTIFICATION_RETRIES);

            //verify sender display name  on From on nudge notification 
            Notification nudgeNotification = GetNotification(createSessionState.GameID.ToString(), createSessionState.SessionID, Notification.NotificationType.Nudge.ToString(),
                                                             systemNudgeUsers[1], systemNudgeUsersPassword);
            UInfo = GetUserInfo(nudgeNotification.From);

            if (CurrentSessionState.Seats.Length == 2)
            {
                try
                {
                    //in this case nudge is from opponent
                    Assert.AreEqual<string>(Users.GetGamertag(systemNudgeUsers[0], systemNudgeUsersPassword),
                                             UInfo.GamerTag,
                                            "Error: Sender on notification From field  is not as expected , which should have been  opponents gamertag");
                }
                catch (Exception ex)
                {
                    TraceEx.TraceStart(ex.Message);
                    //in this case nudge is , by default,from system
                    Assert.AreEqual<string>("Xbox LIVE",
                                             UInfo.DisplayName,
                                            "Error: Sender on notification From field  is not as expected , which should have been  from system");
                }
            }
            else
            {
                try
                {
                    //in this case nudge is from owner
                    Assert.AreEqual<string>(Users.GetGamertag(systemNudgeUsers[0], systemNudgeUsersPassword),
                                             UInfo.GamerTag,
                                            "Error: Sender on notification From field  is not as expected , which should have been  opponents gamertag");
                }
                catch (Exception ex)
                {
                    TraceEx.TraceStart(ex.Message);
                    //in this case nudge is , by default,from system
                    Assert.AreEqual<string>("Xbox LIVE",
                                             UInfo.DisplayName,
                                            "Error: Sender on notification From field  is not as expected , which should have been  from system");
                }
            }
        }

        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Verify that kicking off a player posts a YouWIn to other players in the game if leave policy is set to LeavingUserLosesOpponentsWin.")]
        [TestProperty("Type", "Features")]
        public void P_SystemNudge_KickedOffPlayerLosesOpponentsWin()
        {
            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box. It is expected to fail otherwise");
            if (!TestAreaBase.IsNpdbSettingsTableUpdated) TestAreaBase.OverideNpdbSettings();
            CleanUpNotifications();
            EndAllActiveSessions();

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 1;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame", SessionLeavePolicy.LeavingUserLosesOpponentsWin);

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, systemNudgeUsers[0], systemNudgeUsersPassword);
            AssertCreateSessionState(creationData, createSessionState);

            JoinSession(createSessionState, createSessionState.SessionID, createSessionState.GameID, systemNudgeUsers[1], systemNudgeUsersPassword, 1);

            //Put P2 on active seat
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };
            this.GameStateProxy.PutGameState(createSessionState.SessionID, createSessionState.GameID.ToString(), modifiableGameState, systemNudgeUsers[0], systemNudgeUsersPassword);

            long[] oldScores = new long[] { 
                                              long.Parse(GetLeaderboardValue("Wins", systemNudgeUsers[0], systemNudgeUsersPassword)),
                                              long.Parse(GetLeaderboardValue("Losses", systemNudgeUsers[1], systemNudgeUsersPassword))

                                          };


            Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME);

            RunServiceAndVerifyNudgeNoNudgeKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, systemNudgeUsers[1], systemNudgeUsersPassword, 1);

            Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME * Constants.NOTIFICATION_RETRIES);

            long[] newScores = new long[] { 
                                              long.Parse(GetLeaderboardValue("Wins", systemNudgeUsers[0], systemNudgeUsersPassword)),
                                              long.Parse(GetLeaderboardValue("Losses", systemNudgeUsers[1], systemNudgeUsersPassword))

                                          };

            //verify scores of leaving player and opponents
            Assert.AreEqual<long>(oldScores[0]+ 1 , newScores[0], "Error: Wrong score  posted for player " + systemNudgeUsers[0]);

            Assert.AreEqual<long>(oldScores[1] + 1, newScores[1], "Error: Wrong score  posted for player " + systemNudgeUsers[1]);

         
            // Verify that all non-YouWin notifications are deleted and  youWIn is sent for opponent
            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                                                                      createSessionState.GameID.ToString(),
                                                                      createSessionState.SessionID,
                                                                      0,
                                                                      string.Empty,
                                                                      100,
                                                                      Notification.NotificationType.YouWin.ToString(),
                                                                      false,
                                                                      TestAreaBase.users[0].MemberName,
                                                                      TestAreaBase.users[0].Password,
                                                                      null);

            Assert.IsNotNull(notifications);
            Assert.AreNotEqual<int>(notifications.Count, 0, "ERROR: You Win notification is not sent to the opponents.");
            Assert.AreEqual<int>(notifications.Count, 1, "ERROR: Unexpected  notifications is sent in addition to the YouWin notification.");
            Assert.AreEqual<Notification.NotificationType>(Notification.NotificationType.YouWin, notifications[0].Type, "Error: YouWin Notification is not send");
       

            //verify session is complete
            SessionState postLeaveSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString(),
                                                                                   systemNudgeUsers[0],
                                                                                   systemNudgeUsersPassword);

            Assert.IsTrue(postLeaveSessionState.State.IsComplete, "Error: Session is not complete as expected");

        }

        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Verify that kicking off a player post a loss on him and mark the game not complete if Leave policy is set to LeavingUserLoses.")]
        [TestProperty("Type", "Features")]
        public void P_SystemNudge_PlayerKickedoffAndLoses()
        {
            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box. It is expected to fail otherwise");
            if (!TestAreaBase.IsNpdbSettingsTableUpdated) TestAreaBase.OverideNpdbSettings();
            CleanUpNotifications();
            EndAllActiveSessions();

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 1;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID,Constants.TESTGAMEVARIANT, 10, 10, sessionParameters, iwb, true, "TestGame", SessionLeavePolicy.LeavingUserLoses);

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, systemNudgeUsers[0], systemNudgeUsersPassword);
            AssertCreateSessionState(creationData, createSessionState);

            JoinSession(createSessionState, createSessionState.SessionID, createSessionState.GameID, systemNudgeUsers[1], systemNudgeUsersPassword, 1);

            //Put P2 on active seat
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };
            this.GameStateProxy.PutGameState(createSessionState.SessionID, createSessionState.GameID.ToString(), modifiableGameState, systemNudgeUsers[0], systemNudgeUsersPassword);

            long[] oldScores = new long[] { 
                                              long.Parse(GetLeaderboardValue("Wins", systemNudgeUsers[0], systemNudgeUsersPassword)),
                                              long.Parse(GetLeaderboardValue("Losses", systemNudgeUsers[1], systemNudgeUsersPassword))

                                          };


            RunServiceAndVerifyNudgeNoNudgeKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, systemNudgeUsers[1], systemNudgeUsersPassword, 1);

            Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME * Constants.NOTIFICATION_RETRIES);

            //verify score of leaving player and opponents
            long[] newScores = new long[] { 
                                              long.Parse(GetLeaderboardValue("Wins", systemNudgeUsers[0], systemNudgeUsersPassword)),
                                              long.Parse(GetLeaderboardValue("Losses", systemNudgeUsers[1], systemNudgeUsersPassword))

                                          };


            Assert.AreEqual<long>(oldScores[0], newScores[0], "Error: Win  has  been posted for player "+ systemNudgeUsers[0]);

            Assert.AreEqual<long>(oldScores[1]+ 1, newScores[1], "Error: Wrong score  posted for player " + systemNudgeUsers[1]);

            //verify session is not complete
            SessionState postLeaveSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString(),
                                                                                   systemNudgeUsers[0],
                                                                                   systemNudgeUsersPassword);

            Assert.IsFalse(postLeaveSessionState.State.IsComplete, "Error: Session is  complete as opposed to the expectation ");

        }

        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Verify that if InactivitywarningBehaviour is warn only nudging active  player don't trigger  posting a WIn, on rewards, infavour of the opponent.")]
        [TestProperty("Type", "Features")]
        public void N_SystemNudge_NoWin_InactivityActionWarnOnly()
        {
            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box. It is expected to fail otherwise");
            if (!TestAreaBase.IsNpdbSettingsTableUpdated) TestAreaBase.OverideNpdbSettings();
            CleanUpNotifications();
            EndAllActiveSessions();

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.WarnOnly;
            iwb.Interval = 1;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 2, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, systemNudgeUsers[0], systemNudgeUsersPassword);
            AssertCreateSessionState(creationData, createSessionState);

            JoinSession(createSessionState, createSessionState.SessionID, createSessionState.GameID, systemNudgeUsers[1], systemNudgeUsersPassword, 1);

            //Put P2 on active seat
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };
            this.GameStateProxy.PutGameState(createSessionState.SessionID, createSessionState.GameID.ToString(), modifiableGameState, systemNudgeUsers[0], systemNudgeUsersPassword);

            long Player1WinPrevious = long.Parse(GetLeaderboardValue("Wins",
                                                  systemNudgeUsers[0],
                                                  systemNudgeUsersPassword));

            Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME);

            RunServiceAndVerifyNudgeNoNudgeNotKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, systemNudgeUsers[1], systemNudgeUsersPassword, 1);

            Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME * Constants.NOTIFICATION_RETRIES);

            long Player1WinNow = long.Parse(GetLeaderboardValue("Wins",
                                              systemNudgeUsers[0],
                                              systemNudgeUsersPassword));

            Assert.AreEqual<long>(Player1WinPrevious, Player1WinNow, "Win  has  been posted for player, on rewards ,after Opponent  gets only warning");

        }


        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Verify that kicking off a player post a loss on him and mark the game not complete if Leave policy is set to None.")]
        [TestProperty("Type", "Features")]
        public void P_SystemNudge_NoScoreUpdatedOnLeave()
        {
            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box. It is expected to fail otherwise");
            if (!TestAreaBase.IsNpdbSettingsTableUpdated) TestAreaBase.OverideNpdbSettings();
            CleanUpNotifications();
            EndAllActiveSessions();

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 1;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 2, 10, 10, sessionParameters, iwb, true, "TestGame", SessionLeavePolicy.None);

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, systemNudgeUsers[0], systemNudgeUsersPassword);
            AssertCreateSessionState(creationData, createSessionState);

            JoinSession(createSessionState, createSessionState.SessionID, createSessionState.GameID, systemNudgeUsers[1], systemNudgeUsersPassword, 1);

            //Put P2 on active seat
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };
            this.GameStateProxy.PutGameState(createSessionState.SessionID, createSessionState.GameID.ToString(), modifiableGameState, systemNudgeUsers[0], systemNudgeUsersPassword);

            long[] oldScores = new long[] { 
                                              long.Parse(GetLeaderboardValue("Wins", systemNudgeUsers[0], systemNudgeUsersPassword)),
                                              long.Parse(GetLeaderboardValue("Losses", systemNudgeUsers[1], systemNudgeUsersPassword))

                                          };


            RunServiceAndVerifyNudgeNoNudgeKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, systemNudgeUsers[1], systemNudgeUsersPassword, 1);

            Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME * Constants.NOTIFICATION_RETRIES);

            //verify score of leaving player and opponents
            long[] newScores = new long[] { 
                                              long.Parse(GetLeaderboardValue("Wins", systemNudgeUsers[0], systemNudgeUsersPassword)),
                                              long.Parse(GetLeaderboardValue("Losses", systemNudgeUsers[1], systemNudgeUsersPassword))

                                          };


            Assert.AreEqual<long>(oldScores[0], newScores[0], "Error: Win  has  been posted for player " + systemNudgeUsers[0]);

            Assert.AreEqual<long>(oldScores[1], newScores[1], "Error: Wrong score  posted for player " + systemNudgeUsers[1]);

            //verify session is not complete
            SessionState postLeaveSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString(),
                                                                                   systemNudgeUsers[0],
                                                                                   systemNudgeUsersPassword);

            Assert.IsFalse(postLeaveSessionState.State.IsComplete, "Error: Session is  complete as opposed to the expectation ");

        }

        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Verify that kicking off a last player do not post a YouWIn to other players in the game if leave policy is set to LeavingUserLosesOpponentsWin.")]
        [TestProperty("Type", "Features")]
        public void N_SystemNudge_KickedOffLastPlayerNoWinner1()
        {
            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box. It is expected to fail otherwise");
            if (!TestAreaBase.IsNpdbSettingsTableUpdated) TestAreaBase.OverideNpdbSettings();
            CleanUpNotifications();
            EndAllActiveSessions();

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 1;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame", SessionLeavePolicy.LeavingUserLosesOpponentsWin);

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, systemNudgeUsers[0], systemNudgeUsersPassword);
            AssertCreateSessionState(creationData, createSessionState);

            JoinSession(createSessionState, createSessionState.SessionID, createSessionState.GameID, systemNudgeUsers[1], systemNudgeUsersPassword, 1);

            //Put P2 on active seat
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };
            this.GameStateProxy.PutGameState(createSessionState.SessionID, createSessionState.GameID.ToString(), modifiableGameState, systemNudgeUsers[0], systemNudgeUsersPassword);

            this.GameSessionProxy.LeaveSession(createSessionState.SessionID, createSessionState.GameID.ToString(), systemNudgeUsers[0], systemNudgeUsersPassword);

            Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME*Constants.NOTIFICATION_RETRIES);

            long[] oldScores = new long[] { 
                                              long.Parse(GetLeaderboardValue("Wins", systemNudgeUsers[0], systemNudgeUsersPassword)),
                                              long.Parse(GetLeaderboardValue("Wins", systemNudgeUsers[1], systemNudgeUsersPassword))

                                          };

            RunServiceAndVerifyNoNudgeNoNudge(createSessionState.GameID.ToString(), createSessionState.SessionID, systemNudgeUsers[1], systemNudgeUsersPassword);

            long[] newScores = new long[] { 
                                              long.Parse(GetLeaderboardValue("Wins", systemNudgeUsers[0], systemNudgeUsersPassword)),
                                              long.Parse(GetLeaderboardValue("Wins", systemNudgeUsers[1], systemNudgeUsersPassword))

                                          };

            //verify scores of leaving player and opponents
            Assert.AreEqual<long>(oldScores[0] , newScores[0], "Error: Wrong score  posted for player " + systemNudgeUsers[0]);

            Assert.AreEqual<long>(oldScores[1] , newScores[1], "Error: Wrong score  posted for player " + systemNudgeUsers[1]);
                       
        }

        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Verify that kicking off a last player do not post a YouWIn to other players in the game if leave policy is set to LeavingUserLoses.")]
        [TestProperty("Type", "Features")]
        public void N_SystemNudge_KickedOffLastPlayerNoWinner2()
        {
            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box. It is expected to fail otherwise");
            if (!TestAreaBase.IsNpdbSettingsTableUpdated) TestAreaBase.OverideNpdbSettings();
            CleanUpNotifications();
            EndAllActiveSessions();

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 1;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame", SessionLeavePolicy.LeavingUserLoses);

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, systemNudgeUsers[0], systemNudgeUsersPassword);
            AssertCreateSessionState(creationData, createSessionState);

            JoinSession(createSessionState, createSessionState.SessionID, createSessionState.GameID, systemNudgeUsers[1], systemNudgeUsersPassword, 1);

            //Put P2 on active seat
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };
            this.GameStateProxy.PutGameState(createSessionState.SessionID, createSessionState.GameID.ToString(), modifiableGameState, systemNudgeUsers[0], systemNudgeUsersPassword);

            this.GameSessionProxy.LeaveSession(createSessionState.SessionID, createSessionState.GameID.ToString(), systemNudgeUsers[0], systemNudgeUsersPassword);

            Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME * Constants.NOTIFICATION_RETRIES);

            long[] oldScores = new long[] { 
                                              long.Parse(GetLeaderboardValue("Wins", systemNudgeUsers[0], systemNudgeUsersPassword)),
                                              long.Parse(GetLeaderboardValue("Wins", systemNudgeUsers[1], systemNudgeUsersPassword))

                                          };
            SessionState viewed = this.GameSessionProxy.ViewSession(createSessionState.SessionID, createSessionState.GameID.ToString(), systemNudgeUsers[1], systemNudgeUsersPassword);

            RunServiceAndVerifyNudgeNoNudgeKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, systemNudgeUsers[1], systemNudgeUsersPassword, 1);

            Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME * Constants.NOTIFICATION_RETRIES);

            long[] newScores = new long[] { 
                                              long.Parse(GetLeaderboardValue("Wins", systemNudgeUsers[0], systemNudgeUsersPassword)),
                                              long.Parse(GetLeaderboardValue("Wins", systemNudgeUsers[1], systemNudgeUsersPassword))

                                          };

            //verify scores of leaving player and opponents
            Assert.AreEqual<long>(oldScores[0], newScores[0], "Error: Wrong score  posted for player " + systemNudgeUsers[0]);

            Assert.AreEqual<long>(oldScores[1], newScores[1], "Error: Wrong score  posted for player " + systemNudgeUsers[1]);

        }


        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Verify that kicking off a last player do not post a YouWIn to other players in the game if leave policy is set to LeavingUserLosesOpponentsWin.")]
        [TestProperty("Type", "Features")]
        public void N_SystemNudge_KickedOffLastPlayerNoLose()
        {
            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box. It is expected to fail otherwise");
            if (!TestAreaBase.IsNpdbSettingsTableUpdated) TestAreaBase.OverideNpdbSettings();
            CleanUpNotifications();
            EndAllActiveSessions();

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 1;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame", SessionLeavePolicy.LeavingUserLosesOpponentsWin);

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, systemNudgeUsers[0], systemNudgeUsersPassword);
            AssertCreateSessionState(creationData, createSessionState);

            long oldScores =  long.Parse(GetLeaderboardValue("Losses", systemNudgeUsers[0], systemNudgeUsersPassword));


            RunServiceAndVerifyNudgeNoNudgeKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, systemNudgeUsers[0], systemNudgeUsersPassword, 1);

            Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME * Constants.NOTIFICATION_RETRIES);

            long newScores = long.Parse(GetLeaderboardValue("Losses", systemNudgeUsers[0], systemNudgeUsersPassword));

            //verify scores of leaving player and opponents
            Assert.AreEqual<long>(oldScores, newScores, "Error: Wrong score  posted for player " + systemNudgeUsers[0]);
           
        }

        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Verify that kicking off a last player do not post a YouWIn to other players in the game if leave policy is set to LeavingUserLoses.")]
        [TestProperty("Type", "Features")]
        public void N_SystemNudge_KickedOff1PlayerGameNoLose()
        {
            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box. It is expected to fail otherwise");
            if (!TestAreaBase.IsNpdbSettingsTableUpdated) TestAreaBase.OverideNpdbSettings();
            CleanUpNotifications();
            EndAllActiveSessions();

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 1;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame", SessionLeavePolicy.LeavingUserLoses);

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, systemNudgeUsers[0], systemNudgeUsersPassword);
            AssertCreateSessionState(creationData, createSessionState);

            long oldScores = long.Parse(GetLeaderboardValue("Losses", systemNudgeUsers[0], systemNudgeUsersPassword));


            RunServiceAndVerifyNudgeNoNudgeKickedOff(createSessionState.GameID.ToString(), createSessionState.SessionID, systemNudgeUsers[0], systemNudgeUsersPassword, 1);

            Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME * Constants.NOTIFICATION_RETRIES);

            long newScores = long.Parse(GetLeaderboardValue("Losses", systemNudgeUsers[0], systemNudgeUsersPassword));

            //verify scores of leaving player and opponents
            Assert.AreEqual<long>(oldScores, newScores, "Error: Wrong score  posted for player " + systemNudgeUsers[0]);

        }

        //Related bug: 11479
        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify that comsuming nudges generated by system nudge does not delete other nudges from different sessions.")]
        [TestProperty("Type", "Features")]
        public void P_SystemNudge_NudgesFromDifferentSessions()
        {
            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box. It is expected to fail otherwise");
            if (!TestAreaBase.IsNpdbSettingsTableUpdated) TestAreaBase.OverideNpdbSettings();
            TestAreaBase.notificationCommon.CheckNotificationCount(systemNudgeUsers[0], systemNudgeUsersPassword);
            EndAllActiveSessions(systemNudgeUsers[0], systemNudgeUsersPassword);
            
            //create session and create user nudges
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, new byte[] { 1, 2, 3 }, new InactivityWarningBehavior(), true, "TestGame");

            SessionState createSessionState1 = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, systemNudgeUsers[0], systemNudgeUsersPassword);
            AssertCreateSessionState(creationData, createSessionState1);

            SessionState createSessionState2 = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, systemNudgeUsers[0], systemNudgeUsersPassword);
            AssertCreateSessionState(creationData, createSessionState2);

            SessionState createSessionState3 = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, systemNudgeUsers[0], systemNudgeUsersPassword);
            AssertCreateSessionState(creationData, createSessionState3);

            JoinSession(createSessionState1, createSessionState1.SessionID, createSessionState1.GameID, users[1].MemberName, users[1].Password, 1);
            JoinSession(createSessionState2, createSessionState2.SessionID, createSessionState2.GameID, users[2].MemberName, users[2].Password, 1);
            JoinSession(createSessionState3, createSessionState3.SessionID, createSessionState3.GameID, users[3].MemberName, users[3].Password, 1);

            SendUserNudge(createSessionState1.SessionID, createSessionState1.GameID, users[1].MemberName, users[1].Password, 0);
            SendUserNudge(createSessionState2.SessionID, createSessionState1.GameID, users[2].MemberName, users[2].Password, 0);
            SendUserNudge(createSessionState3.SessionID, createSessionState1.GameID, users[3].MemberName, users[3].Password, 0);
            
            //create system nudge nudge
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.WarnOnly;
            iwb.Interval = 1;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData1 = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState4 = this.GameSessionProxy.CreateSession(creationData1.GameID.ToString(), creationData1, systemNudgeUsers[0], systemNudgeUsersPassword);
            AssertCreateSessionState(creationData1, createSessionState4);

            SessionState createSessionState5 = this.GameSessionProxy.CreateSession(creationData1.GameID.ToString(), creationData1, systemNudgeUsers[0], systemNudgeUsersPassword);
            AssertCreateSessionState(creationData1, createSessionState5);
            
            Thread.Sleep(1001);
            RunServiceAndVerifyNudges(createSessionState4.GameID.ToString(), createSessionState4.SessionID, systemNudgeUsers[0], systemNudgeUsersPassword, 1);

            TestAreaBase.notificationCommon.VerifyNotificationCreated(createSessionState5.GameID.ToString(), createSessionState5.SessionID, Notification.NotificationType.Nudge, systemNudgeUsers[0], systemNudgeUsersPassword);

            //Verify that we have 5 nudges and take the etag. 
            List<Notification> nlist = GetNotifications(string.Empty, string.Empty, Notification.NotificationType.Nudge.ToString(), systemNudgeUsers[0], systemNudgeUsersPassword, null);
            Assert.IsNotNull(nlist, "Error: List is null.");
            Assert.AreEqual(5, nlist.Count, "Error: incorrect number of notifications.");
            
            string etag = this.NotificationsServiceProxy.EtagInResponse;

            //Consume nudge created by system nudge for createSessionState4.SessionID (make a move)
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };
            this.GameStateProxy.PutGameState(createSessionState4.SessionID, createSessionState4.GameID.ToString(), modifiableGameState, systemNudgeUsers[0], systemNudgeUsersPassword);

            //Make sure that the notification internal has got enough time to process the delete request
            Thread.Sleep(Constants.NOTIFICATION_RETRIES * Constants.NOTIFICATION_SLEEP_TIME);

            //Verify that the nudge from createSessionState4.SessionID deleted but all other nudges are still there. 
            nlist = GetNotifications(string.Empty, string.Empty, Notification.NotificationType.Nudge.ToString(), systemNudgeUsers[0], systemNudgeUsersPassword, etag);
            Assert.IsNotNull(nlist, "Error: List is null.");
            Assert.AreEqual(4, nlist.Count, "Error: incorrect number of notifications.");

            nlist = GetNotifications(createSessionState1.GameID.ToString(), createSessionState1.SessionID, Notification.NotificationType.Nudge.ToString(), systemNudgeUsers[0], systemNudgeUsersPassword, null);
            Assert.IsNotNull(nlist, "Error: List is null.");
            Assert.AreEqual(1, nlist.Count, "Error: incorrect number of notifications.");

            nlist = GetNotifications(createSessionState2.GameID.ToString(), createSessionState2.SessionID, Notification.NotificationType.Nudge.ToString(), systemNudgeUsers[0], systemNudgeUsersPassword, null);
            Assert.IsNotNull(nlist, "Error: List is null.");
            Assert.AreEqual(1, nlist.Count, "Error: incorrect number of notifications.");

            nlist = GetNotifications(createSessionState3.GameID.ToString(), createSessionState3.SessionID, Notification.NotificationType.Nudge.ToString(), systemNudgeUsers[0], systemNudgeUsersPassword, null);
            Assert.IsNotNull(nlist, "Error: List is null.");
            Assert.AreEqual(1, nlist.Count, "Error: incorrect number of notifications.");

            nlist = GetNotifications(createSessionState4.GameID.ToString(), createSessionState4.SessionID, Notification.NotificationType.Nudge.ToString(), systemNudgeUsers[0], systemNudgeUsersPassword, null);
            Assert.IsNotNull(nlist, "Error: List is null.");
            Assert.AreEqual(0, nlist.Count, "Error: incorrect number of notifications.");

            nlist = GetNotifications(createSessionState5.GameID.ToString(), createSessionState5.SessionID, Notification.NotificationType.Nudge.ToString(), systemNudgeUsers[0], systemNudgeUsersPassword, null);
            Assert.IsNotNull(nlist, "Error: List is null.");
            Assert.AreEqual(1, nlist.Count, "Error: incorrect number of notifications.");
        }

        private void SendUserNudge(string sessionId, uint gameId, string uname, string pword, byte receiverSeatIndex)
        {
            GameAction gameAction = new GameAction();
            gameAction.ActionType = GameActionType.UserNudge;
            gameAction.ActionData = new byte[] { receiverSeatIndex };
            gameAction.ActionTime = DateTime.Now;

            this.GameStateProxy.PostGameAction(sessionId, gameId.ToString(), gameAction, uname, pword);
        }

        private void RunSystemNudgeService()
        {
            NotificationTestCommon.StopService(MachineName, "SystemNudgeService");
            NotificationTestCommon.StartService(MachineName, "SystemNudgeService");
            Thread.Sleep(180000);
        }

        private void RunServiceAndVerifyNudges(string gameId, string sessionId, string userName, string password, int numberOfNudges)
        {
            for (int i = 0; i < numberOfNudges; i++)
            {
                RunSystemNudgeService();
                TestAreaBase.notificationCommon.VerifyNotificationCreated(gameId, sessionId, Notification.NotificationType.Nudge,userName, password);
                if (numberOfNudges > 1) //if we are expecting more than one nudge notifications, we have to delete the one we have already found.
                {
                    this.NotificationsServiceProxy.DeleteNotificationBySession(gameId, sessionId, userName, password);
                    //verify delete
                    List<Notification> nList = GetNotifications(gameId, sessionId, Notification.NotificationType.Nudge.ToString(), userName, password, null);
                    Assert.IsNotNull(nList);
                    Assert.AreEqual(0, nList.Count, "Error, there are some nudge notifications that are not deleted.");
                }
            }
        }

        private void RunServiceAndVerifyNoNudgeNoNudge(string gameId, string sessionId, string userName, string password)
        {
            RunSystemNudgeService();
            List<Notification> nList = GetNotifications(gameId, sessionId, Notification.NotificationType.Nudge.ToString(), userName, password, null);
            Assert.IsNotNull(nList);
            Assert.AreEqual(0, nList.Count, "Not expecting nudge notifications.");
            nList = GetNotifications(gameId, sessionId, Notification.NotificationType.Nudge.ToString(), userName, password, null);
            Assert.IsNotNull(nList);
            Assert.AreEqual(0, nList.Count, "Not expecting a nudge notification.");
        }

        private void RunServiceAndVerifyNudgesAndNudge(string gameId, string sessionId, string userName, string password, int numberOfNudges)
        {
            RunServiceAndVerifyNudges(gameId, sessionId, userName, password, numberOfNudges);
            RunSystemNudgeService();
            TestAreaBase.notificationCommon.VerifyNotificationCreated(gameId, sessionId, Notification.NotificationType.Nudge, userName, password);
            VerifyNotKickedOff(gameId, sessionId, userName, password);
        }

        private void RunServiceAndVerifyNudgeNudgeAndNotKickedOff(string gameId, string sessionId, string userName, string password)
        {
            RunServiceAndVerifyNudgesAndNudge(gameId, sessionId, userName, password, 1);
            RunSystemNudgeService();
            VerifyNotKickedOff(gameId, sessionId, userName, password);
        }  

        private void RunServiceAndVerifyNudgeNudgeAndKickedOff(string gameId, string sessionId, string userName, string password)
        {
            RunServiceAndVerifyNudgesAndNudge(gameId, sessionId, userName, password, 1);
            RunSystemNudgeService();
            VerifyKickedOff(gameId, sessionId, userName, password);
        }

        private void RunServiceAndVerifyNoNudgeNoNudgeNotKickedOff(string gameId, string sessionId, string userName, string password)
        {
            RunServiceAndVerifyNoNudgeNoNudge(gameId, sessionId, userName, password);
            RunSystemNudgeService();
            VerifyNotKickedOff(gameId, sessionId, userName, password);
        }

        private void RunServiceAndVerifyNudgeNoNudgeKickedOff(string gameId, string sessionId, string userName, string password, int numOfNudges)
        {
            RunServiceAndVerifyNudges(gameId, sessionId, userName, password, numOfNudges);
            RunServiceAndVerifyNoNudgeKickedOff(gameId, sessionId, userName, password);            
        }
        private void RunServiceAndVerifyNoNudgeKickedOff(string gameId, string sessionId, string userName, string password)
        {
            TestAreaBase.notificationCommon.CheckNotificationCount(userName, password); //delete notifications up to this pt
            RunSystemNudgeService();
            List<Notification> nList = GetNotifications(gameId, sessionId, Notification.NotificationType.Nudge.ToString(), userName, password, null);
            Assert.IsNotNull(nList);
            Assert.AreEqual( 0 , nList.Count, "Not expecting nudge notifications.");
            VerifyKickedOff(gameId, sessionId, userName, password);
        }
        private void RunServiceAndVerifyNudgeNoNudgeNotKickedOff(string gameId, string sessionId, string userName, string password , int numOfNudges)
        {
            RunServiceAndVerifyNudges(gameId, sessionId, userName, password, numOfNudges);
            RunServiceAndVerifyNoNudgeNotKickedOff(gameId, sessionId, userName, password);            
        }

        private void RunServiceAndVerifyNoNudgeNotKickedOff(string gameId, string sessionId, string userName, string password)
        {
            TestAreaBase.notificationCommon.CheckNotificationCount(userName, password); //delete notifications up to this pt
            RunSystemNudgeService();
            List<Notification> nList = GetNotifications(gameId, sessionId, Notification.NotificationType.Nudge.ToString(), userName, password, null);
            Assert.IsNotNull(nList);
            Assert.AreEqual(0, nList.Count, "Not expecting nudge notifications.");
            VerifyNotKickedOff(gameId, sessionId, userName, password);
        }

        private void VerifyKickedOff(string gameId, string sessionId, string userName, string password)
        {
            try
            {
                SessionState viewSessionState = this.GameSessionProxy.ViewSession(sessionId, gameId, userName, password);
                Assert.Fail("Expecting Forbidden since the user should not be in the session by now.");
            }
            catch (RestException ex)
            {
                VerifyException(HttpStatusCode.Forbidden, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.UserNotAllowedToGetStateInSession), ex.Response);
            }
        }

        private void VerifyNotKickedOff(string gameId, string sessionId, string userName, string password)
        {
            SessionState viewSessionState = this.GameSessionProxy.ViewSession(sessionId, gameId, userName, password);
            Assert.IsNotNull(viewSessionState);
        }
 
        private List<Notification> GetNotifications(string gameId, string sessionId, string type, string userName, string password, string etag)
        {
            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                gameId,
                sessionId,
                0,
                string.Empty,
                Int32.MaxValue,
                type,
                false,
                userName,
                password,
                etag);
            Assert.IsNotNull(notifications);
            return notifications;
        }

        private void JoinSession(SessionState beforeJoinSessionState, string sessionId, uint gameId, string [] users)
        {
            int i = 0;
            foreach (string user in users)
            {
                beforeJoinSessionState = JoinSession(beforeJoinSessionState, sessionId, gameId, user, systemNudgeUsersPassword, ++i);
            }
        }

        private SessionState JoinSession(SessionState beforeJoinSessionState, string sessionId, uint gameId, string user, string password, int seatIndex)
        {
            // Initialize JoinData
            JoinData joinData = InitializeJoinData(gameId, sessionId, seatIndex);
            SessionState afterJoinSessionState = this.GameSessionProxy.JoinSession(sessionId, joinData, user, password);

            //Assert SessionState
            AssertJoinSessionState(beforeJoinSessionState, afterJoinSessionState);
            return afterJoinSessionState;
        }

        private void MakeAMove(int expectedSequenceNumber, int nextActiveSeat, string sessionId, string gameId, string userName, string password)
        {
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = nextActiveSeat;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.PutGameState(sessionId, gameId, modifiableGameState, userName, password);
            SessionState putGameStateSessionState = this.GameSessionProxy.ViewSession(sessionId, gameId, userName, password);
            FullGameState gameState = this.GameStateProxy.GetGameState(sessionId, gameId, userName, password);

            Assert.AreEqual(expectedSequenceNumber, putGameStateSessionState.State.SequenceNumber, "Error: Wrong sequence number.");
            Assert.AreEqual(nextActiveSeat, putGameStateSessionState.State.ActiveSeatIndex, "Error: Active seat was not set as expected.");
            Assert.AreEqual(0, putGameStateSessionState.NumberOfNudgesSent, "Error: Number of nudges sent is not reset by the move.");
            Assert.AreEqual(false, putGameStateSessionState.IsInactivityWarningSent, "Error: IsInactivityWarningSent is not reset by the move.");
            AssertGameState(modifiableGameState, gameState);
        }

        private void CleanUpNotifications()
        {
            foreach (string user in systemNudgeUsers)
            {
                List<Notification> nList = GetNotifications(Constants.TESTGAMEID.ToString(), string.Empty, string.Empty, user, systemNudgeUsersPassword, null);
                Assert.IsNotNull(nList);
                if (nList.Count > 0)
                {
                    foreach (Notification n in nList)
                    {
                        this.NotificationsServiceProxy.DeleteNotificationQuery(n.Id, user, systemNudgeUsersPassword);
                    }
                }
            }
        }

        private void EndAllActiveSessions()
        {
            foreach (string user in systemNudgeUsers)
            {
                EndAllActiveSessions(user, systemNudgeUsersPassword);
            }
        }

        private void EndAllActiveSessions(string username, string password)
        {
            SessionEntry[] sessionEntries = null;
            sessionEntries = this.GameSessionProxy.ViewSessionSummaries(Constants.TESTGAMEID.ToString(), string.Empty, String.Empty, String.Empty, "1000", ShowSessionType.Active.ToString(), username, password);
            Assert.IsNotNull(sessionEntries);
            if (sessionEntries.Length > 0)
            {
                GameResults gameResults = new GameResults();
                gameResults.WinningSeatIndexes = new int[] { 0 };
                //gameResults.LosingSeatIndexes = new int[] { 1 };
                gameResults.Results = new Dictionary<int, GameResult>();

                foreach (SessionEntry sessionEntry in sessionEntries)
                {
                    try
                    {
                        this.GameStateProxy.PostGameEnd(sessionEntry.SessionID, Constants.TESTGAMEID.ToString(), gameResults, username, password);
                        TraceEx.TraceStart("Ended active session = " + sessionEntry.SessionID);
                    }
                    catch (Exception e)
                    {
                        //This might fail if it is not the user's turn.
                        TraceEx.TraceStart("Failed to end active session = " + sessionEntry.SessionID + ". exception: " + e.Message);
                    }
                }
            }
        }
        public string GetLeaderboardValue(string statEntry, string userName, string password)
        {
            LeaderboardResult result = this.NotificationsServiceProxy.GetLeaderboard(Constants.TESTGAMEID.ToString(), Constants.TESTGAMEVARIANT.ToString(), "Wins", "1", "W1", "100", "2", userName, password);
            Assert.IsNotNull(result, "No result was returned");

            if (result.Leaderboard == null)
            {
                return "0";
            }
            else
            {
                Assert.IsNotNull(result.Leaderboard, "No statistics were returned");
                Assert.AreNotEqual(0, result.Leaderboard.Count, "Leaderboard is empty");

                IList<Entry> entryList = result.Leaderboard[0].Statistics;
                IEnumerable<Entry> entries = (from e in entryList
                                              where e.Name == statEntry
                                              select e);
                int numEntries = entries.Count<Entry>();
                Assert.AreEqual(1, numEntries, "Error: Unexpected number of entries in response.");
                return entries.First<Entry>().Value;
            }
        }

        public void GetUsersNamePassword()
        {
            //trying to get new users provided that users in testAreaBase are not the default for session and useCannedUsers flag is set to False in config
            if ((TestAreaBase.users[0].MemberName != Config.Environment.UserSettings[0].Membername) & (ConfigurationManager.AppSettings["useCannedUsers"] == "false"))
            {
                try
                {
                    systemNudgeUsers = new string[] { TestAreaBase.users[0].MemberName, TestAreaBase.users[1].MemberName, TestAreaBase.users[2].MemberName };
                    systemNudgeUsersPassword = TestAreaBase.users[0].Password;
                }
                catch (Exception ex)
                {
                    TraceEx.TraceVerbose("Failed to create users. " + ex.Message + "--- Using canned users");
                    systemNudgeUsers = new string[] { ConfigurationManager.AppSettings["SNUser1"], ConfigurationManager.AppSettings["SNUser2"]};
                    systemNudgeUsersPassword = ConfigurationManager.AppSettings["SNUserPassword"];
                }
            }
            else
            {
                systemNudgeUsers = new string[] { ConfigurationManager.AppSettings["SNUser1"], ConfigurationManager.AppSettings["SNUser2"]};
                systemNudgeUsersPassword = ConfigurationManager.AppSettings["SNUserPassword"];

            }
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test\Multiplayer.Test\Notifications\NotificationServiceTestWorker.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using AsyncMultiplayer.NotificationService.Internal;
using System.Threading;

namespace MultiPlayer.Test.Notifications
{
    /// <summary>
    /// makes the protected method public via wrapper.
    /// </summary>
//    class NotificationServiceTestWorker : NotificationServiceWorker
//    {
//        public NotificationServiceTestWorker(ManualResetEvent doneEvent,EventWaitHandle hasWorkEvent,EventWaitHandle stopEvent,int index)
//            : base(doneEvent, hasWorkEvent, stopEvent, index) { }
//
//        public void ProcessQueue()
//        {
//            this.queueToProcess.Init();
//            DoWorkInternal();
//            this.queueToProcess.Close();
//        }
//
//    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Contracts\Notifications\InviteRequest.cs ===
﻿//-------------------------------------------------------------------
// <copyright file="InviteRequest.cs" company="Microsoft">
//     Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>
//
// <author email="fgao">
//     Feng Gao
// </author>
//
// <summary>
//  InviteRequest class used for SendInvite 
// </summary>
//
// <remarks/>
//
// <disclaimer/>
//
// <history date="10/20/2009">
//     Class created
// </history>
//-------------------------------------------------------------------

namespace AsyncMultiplayer.NotificationService
{
    using System;
    using System.Runtime.Serialization;

    /// <summary>
    /// Class to hold invite request data.
    /// </summary>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [Serializable]
    [DataContract(Name = "InviteRequest")]
    public class InviteRequest
    {
        /// <summary>
        /// Initializes a new instance of the InviteRequest class. 
        /// </summary>
        public InviteRequest()
        {
        }

        /// <summary>
        /// Gets or sets the recipients
        /// </summary>
        [DataMember(IsRequired = true)]
        public string Recipients { get; set; }

        /// <summary>
        /// Gets or sets the game id of the invite. 
        /// </summary>
        [DataMember(IsRequired = true)]
        public uint GameId { get; set; }

        /// <summary>
        /// Gets or sets the session id of the invite. 
        /// </summary>
        [DataMember(IsRequired = true)]
        public string SessionId { get; set; }

        /// <summary>
        /// Gets or sets message date 
        /// </summary>
        [DataMember]
        public string Data { get; set; }

        /// <summary>
        /// Gets or sets the optional FriendRequest
        /// </summary>
        [DataMember(Order = 1)]
        public bool FriendRequest { get; set; }    
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test\Multiplayer.Test\Sessions\SessionsGCTests.cs ===
﻿using System;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Threading;
using System.Runtime.Serialization;
using System.Configuration;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using LiveN.Test.Framework.Configuration;
using Multiplayer.Test.API;
using AsyncMultiplayer.SessionCommon;
using LIVEN.Common.Diagnostics;
using Leet.Core.Utils;
using LiveN.Test.Common.Web;
using Leet.Core.Platforms;
//using AsyncMultiplayer.Common.AzureStorage;
using AsyncMultiplayer.SessionAzureStorage;
using AsyncMultiplayer.NotificationService;
using System.Net;


namespace MultiPlayer.Test.GarbageCollector
{
    /// <summary>
    /// Test Cases for Sessions GarbageCollecor service
    /// </summary>
    [TestClass]
    public class SessionsGCTests : TestAreaBase
    {
        static string MachineName = ConfigurationManager.ConnectionStrings["lest_AsyncNotification_db"].ConnectionString.Split(';')[0].Substring(12);
        static DateTime SessionCreatedTime = DateTime.UtcNow.AddDays(-8);
        static int ServiceStartSleepTime = 60000;


        // Use ClassInitialize to run code before running the first test in the class
        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
        }

        // Use TestInitialize to run code before running each test 
        [TestInitialize()]
        public void MyTestInitialize()
        {
            LockTest();
        }

        // Use TestCleanup to run code after each test has run
        [TestCleanup()]
        public void MyTestCleanup()
        {
            UnlockTest();
        }


        /// <summary>
        /// Test for Sessions (GSS) GarbageCollecor Service
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("Test for Sessions GarbageCollector.")]
        [TestProperty("Type", "BVTs")]
        public void P_GarbageCollector_SessionCompleted()
        {
            //Stop GarbageCollector Service
            StopGCService();          

            SessionState createSessionState = InitSessionState(SessionCreatedTime.ToString(), true, 0);

            testHooksClient.CreateSession(createSessionState);

            //ViewSession
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      //  player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            
            SessionState viewSessionState = null;
            viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert viewSessionState
            AssertSessionState(createSessionState, viewSessionState);

            //Start GarbageCollector Service
            StartGCService();

            Thread.Sleep(ServiceStartSleepTime );

            //ViewSession after GarbageCollector runs
            try
            {
                viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());
                Assert.Fail("Completed Session didn't get deleted after GarbageCollector service runs.");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }
        }

        /// <summary>
        /// Feature test for Sessions (GSS) GarbageCollecor Service
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions GarbageCollector.")]
        [TestProperty("Type", "BVTs")]
        public void P_GarbageCollector_SessionNotComplete_NudgeUsers()
        {
            //Stop GarbageCollector Service
            StopGCService();

            SessionState createSessionState = InitSessionState(SessionCreatedTime.ToString(), false, 0);

            testHooksClient.CreateSession(createSessionState);

            //ViewSession
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      //  player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState viewSessionState = null;

            viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert viewSessionState
            AssertSessionState(createSessionState, viewSessionState);

            Assert.IsFalse(viewSessionState.IsInactivityWarningSent, "SessionState.IsInactivityWarningSent is true - It already sent Inacitivity last nudge  Notification before GC service run"); 

            //Run GarbageCollector Service
            //RunGCService();

            //Start GarbageCollector Service
            StartGCService();

            Thread.Sleep(ServiceStartSleepTime );

            //ViewSession after GarbageCollector runs
            viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            Assert.IsTrue(viewSessionState.IsInactivityWarningSent, "SessionState.IsInactivityWarningSent is false - Did not send Inacitivity last nudge Notification after GC service run");

            string memberName = TestAreaBase.users[0].MemberName;      // player1
            string password = TestAreaBase.users[0].Password;

            VerifyNotification(viewSessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.Nudge , true, memberName, password);
        }

        /// <summary>
        /// Feature test for Sessions (GSS) GarbageCollecor Service
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions GarbageCollector.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_GarbageCollector_SessionNotComplete_DeleteAfterNudge()
        {
            //Stop GarbageCollector Service
            StopGCService();

            SessionState createSessionState = InitSessionState(SessionCreatedTime.ToString(), false, 0);

            testHooksClient.CreateSession(createSessionState);

            //ViewSession
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      //  player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState viewSessionState = null;

            viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert viewSessionState
            AssertSessionState(createSessionState, viewSessionState);

            Assert.IsFalse(viewSessionState.IsInactivityWarningSent, "SessionState.IsInactivityWarningSent is true - It already sent Inacitivity last nudge Notification before GC service run");

            //Start GarbageCollector Service
            StartGCService();

            Thread.Sleep(ServiceStartSleepTime );
            //ViewSession after GarbageCollector runs
            viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            Assert.IsTrue(viewSessionState.IsInactivityWarningSent, "SessionState.IsInactivityWarningSent is false - Did not send Inacitivity last nudge Notification after GC service run");

            string memberName = TestAreaBase.users[0].MemberName;      // player1
            string password = TestAreaBase.users[0].Password;

            VerifyNotification(viewSessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.Nudge, true, memberName, password);

            //Stop GarbageCollector Service
            StopGCService();

            //Start GarbageCollector Service
            StartGCService();

            Thread.Sleep(ServiceStartSleepTime );

            //ViewSession after GarbageCollector runs
            try
            {
                viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());
                Assert.Fail("Completed Session didn't get deleted after GarbageCollector service runs.");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }

            // Now we refresh the Notification list. We should not find a nudge notification for player1
            memberName = TestAreaBase.users[0].MemberName;      // player1
            password = TestAreaBase.users[0].Password;

            List<Notification> notificationsList = null;

            for (int i = 0; i < Constants.NOTIFICATION_RETRIES; i++)
            {
                Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME);

                notificationsList = this.NotificationsServiceProxy.GetNotifications(
                                                                    createSessionState.GameID.ToString(),
                                                                    createSessionState.SessionID,
                                                                    (int)Notification.NotificationCategory.ToDo,
                                                                    String.Empty,
                                                                    1,
                                                                    Notification.NotificationType.Nudge.ToString(),
                                                                    true,
                                                                    memberName,
                                                                    password,
                                                                    null);

                if (notificationsList != null && notificationsList.Count == 0)
                {
                    break;
                }
            }

            Assert.IsNotNull(notificationsList);
            Assert.IsTrue(notificationsList.Count == 0, "ERROR: Unexpected Number of notifications.");
        }

        /// <summary>
        /// Feature test for Sessions (GSS) GarbageCollecor Service - verify old session can be modified after last nudge if not complete.
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions GarbageCollector - verify old session can be modified after last nudge if not complete.")]
        [TestProperty("Type", "BVTs")]
        public void P_GarbageCollector_SessionNotComplete_ModifiedAfterNudge()
        {
            //Stop GarbageCollector Service
            StopGCService();

            SessionState createSessionState = InitSessionState(SessionCreatedTime.ToString(), false, 0);

            testHooksClient.CreateSession(createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2;
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            //ViewSession
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      //  player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState viewSessionState = null;

            viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert viewSessionState
            AssertSessionState(joinSessionState, viewSessionState);

            Assert.IsFalse(viewSessionState.IsInactivityWarningSent, "SessionState.IsInactivityWarningSent is true - It already sent Inacitivity last nudge Notification before GC service run");

            //Start GarbageCollector Service
            StartGCService();

            Thread.Sleep(ServiceStartSleepTime );
            //ViewSession after GarbageCollector runs
            viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString(),
                                                                 TestAreaBase.users[0].MemberName,
                                                                 TestAreaBase.users[0].Password);

            Assert.IsTrue(viewSessionState.IsInactivityWarningSent, "SessionState.IsInactivityWarningSent is false - Did not send Inacitivity last nudge  Notification after GC service run");

            string memberName = TestAreaBase.users[0].MemberName;      // player1
            string password = TestAreaBase.users[0].Password;

            VerifyNotification(viewSessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.Nudge , true, memberName, password);

            //put game state
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;
            this.GameStateProxy.PutGameState(viewSessionState.SessionID, viewSessionState.GameID.ToString(), modifiableGameState);

            //Stop GarbageCollector Service
            StopGCService();

            //Start GarbageCollector Service
            StartGCService();

            Thread.Sleep(ServiceStartSleepTime );

            //ViewSession by player 1  after GarbageCollector re-runs, this should work fine as a move has been made and game escaped garbage-colleccting
            viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString(),
                                                                TestAreaBase.users[0].MemberName,
                                                                TestAreaBase.users[0].Password);         
            
            // Now we refresh the Notification list. We should not find a last nudge notification for player1
            memberName = TestAreaBase.users[0].MemberName;      // player1
            password = TestAreaBase.users[0].Password;

            List<Notification> notificationsList = null;

            for (int i = 0; i < Constants.NOTIFICATION_RETRIES; i++)
            {
                Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME);

                notificationsList = this.NotificationsServiceProxy.GetNotifications(
                                                                    createSessionState.GameID.ToString(),
                                                                    createSessionState.SessionID,
                                                                    (int)Notification.NotificationCategory.ToDo,
                                                                    String.Empty,
                                                                    1,
                                                                    Notification.NotificationType.Nudge.ToString(),
                                                                    true,
                                                                    memberName,
                                                                    password,
                                                                    null);

                if (notificationsList != null && notificationsList.Count == 0)
                {
                    break;
                }
            }

            Assert.IsNotNull(notificationsList);
            Assert.IsTrue(notificationsList.Count == 0, "ERROR: Unexpected Number of notifications.");
        }


        /// <summary>
        /// Feature test for Sessions (GSS) GarbageCollecor Service
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions GarbageCollector.")]
        [TestProperty("Type", "BVTs")]
        public void P_GarbageCollector_SessionCompleted_CreatedAfterGCDueDate()
        {
            //Stop GarbageCollector Service
            StopGCService();

            string sessionCreateDate = DateTime.Now.AddDays(-5).ToShortDateString();

            SessionState createSessionState = InitSessionState(sessionCreateDate, true, 0);

            testHooksClient.CreateSession(createSessionState);

            //ViewSession
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      //  player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState viewSessionState = null;

            viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert viewSessionState
            AssertSessionState(createSessionState, viewSessionState);

            Assert.IsFalse(viewSessionState.IsInactivityWarningSent, "SessionState.IsInactivityWarningSent is true - It already sent Inacitivity last nudge Notification before GC service run");

            //Start GarbageCollector Service
            StartGCService();

            Thread.Sleep(ServiceStartSleepTime );

            //ViewSession after GarbageCollector runs
            viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert viewSessionState
            AssertSessionState(createSessionState, viewSessionState);

            Assert.IsFalse(viewSessionState.IsInactivityWarningSent, "SessionState.IsInactivityWarningSent is true - It already sent Inacitivity last nudge Notification before GC service run");

        }

        /// <summary>
        /// Feature test for Sessions (GSS) GarbageCollecor Service
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions GarbageCollector.")]
        [TestProperty("Type", "BVTs")]
        public void P_GarbageCollector_SessionNotCompleted_CreatedAfterGCDueDate()
        {
            //Stop GarbageCollector Service
            StopGCService();

            string sessionCreateDate = DateTime.Now.AddDays(-5).ToShortDateString();

            SessionState createSessionState = InitSessionState(sessionCreateDate, false, 0);

            testHooksClient.CreateSession(createSessionState);

            //ViewSession
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      //  player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState viewSessionState = null;

            viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert viewSessionState
            AssertSessionState(createSessionState, viewSessionState);

            Assert.IsFalse(viewSessionState.IsInactivityWarningSent, "SessionState.IsInactivityWarningSent is true - It already sent Inacitivity last nudge Notification before GC service run");

            //Start GarbageCollector Service
            StartGCService();

            Thread.Sleep(ServiceStartSleepTime );

            //ViewSession after GarbageCollector runs
            viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert viewSessionState
            AssertSessionState(createSessionState, viewSessionState);

            Assert.IsFalse(viewSessionState.IsInactivityWarningSent, "SessionState.IsInactivityWarningSent is true - It already sent Inacitivity last nudge Notification before GC service run");

        }

        //When Bug 8356 is fixed, iteration in this test will be updated to 1000 from (now)10
        /// <summary>
        /// Test for Sessions (GSS) GarbageCollecor Service is due in a week after session is created
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Test for Sessions GarbageCollector.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_GarbageCollector_100SessionCompleted_CreatedBeforeGCDueDate()
        {
            //Stop GarbageCollector Service
            StopGCService();

            SessionState createSessionState = null;
            SessionState createSessionState2 = null;
            SessionState createSessionState3 = null;
            SessionState viewSessionState = null;
            SessionState viewSessionState2 = null;
            SessionState viewSessionState3 = null;
            List<string> sessionsList = new List<string>(101);
            List<string> sessionsList2 = new List<string>(101);
            List<string> sessionsList3 = new List<string>(101);


            for (int i = 0; i < 100; i++)
            {
                createSessionState = InitSessionState(SessionCreatedTime.ToString(), true, 0 ,TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
                testHooksClient.CreateSession(createSessionState);

                sessionsList.Add(createSessionState.SessionID);

                //ViewSession
                viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString(),
                                                                     TestAreaBase.users[0].MemberName,
                                                                     TestAreaBase.users[0].Password);

                //Assert viewSessionState
                AssertSessionState(createSessionState, viewSessionState);

                createSessionState2 = InitSessionState(SessionCreatedTime.ToString(), true, 1, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
                testHooksClient.CreateSession(createSessionState2);

                sessionsList2.Add(createSessionState2.SessionID);

                //ViewSession
                viewSessionState2 = this.GameSessionProxy.ViewSession(createSessionState2.SessionID.ToString(), createSessionState2.GameID.ToString(),
                                                                     TestAreaBase.users[1].MemberName,
                                                                     TestAreaBase.users[1].Password);

                //Assert viewSessionState
                AssertSessionState(createSessionState2, viewSessionState2);

                createSessionState3 = InitSessionState(SessionCreatedTime.ToString(), true, 2, TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password);
                testHooksClient.CreateSession(createSessionState3);

                sessionsList3.Add(createSessionState3.SessionID);

                //ViewSession
                viewSessionState3 = this.GameSessionProxy.ViewSession(createSessionState3.SessionID.ToString(), createSessionState3.GameID.ToString(),
                                                                     TestAreaBase.users[2].MemberName,
                                                                     TestAreaBase.users[2].Password);

                //Assert viewSessionState
                AssertSessionState(createSessionState3, viewSessionState3);

            }

            //Start GarbageCollector Service
            StartGCService();

            Thread.Sleep(Constants.NOTIFICATION_RETRIES*ServiceStartSleepTime );

            //ViewSession after GarbageCollector runs
            for (int i = 0; i < 100; i++)
            {
                try
                {
                    viewSessionState = this.GameSessionProxy.ViewSession(sessionsList[i].ToString(), createSessionState.GameID.ToString());
                    viewSessionState2 = this.GameSessionProxy.ViewSession(sessionsList2[i].ToString(), createSessionState2.GameID.ToString());
                    viewSessionState3 = this.GameSessionProxy.ViewSession(sessionsList3[i].ToString(), createSessionState3.GameID.ToString());
                    Assert.Fail("Completed Session didn't get deleted after GarbageCollector service runs.");
                }
                catch (RestException restEx)
                {
                    VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
                }
            }
        }

        /// <summary>
        /// Test for Sessions (GSS) GarbageCollecor Service
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Test for Sessions GarbageCollector.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_GarbageCollector_ModifySession_NotUpdate_LastModifiedDate()
        {
            //Stop GarbageCollector Service
            StopGCService();

            SessionState createSessionState = null;
            SessionState viewSessionState = null;
            SessionState joinSessionState = null;
            SessionState modifiedSessionState = null;
   
            createSessionState = InitSessionState(SessionCreatedTime.ToString(), false, 0);
            testHooksClient.CreateSession(createSessionState);

            //ViewSession
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      //  player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert viewSessionState
            AssertSessionState(createSessionState, viewSessionState);

            //Player2 JoinSession
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2;
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            DateTime preModifySessionLastModified = joinSessionState.State.LastModified;

            // Initialize ModificationData
            ModificationData modificationData = InitializeModificationData(joinSessionState);

            //Modify Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            this.GameSessionProxy.ModifySession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString(), modificationData);

            //View Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      //  player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            modifiedSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert SessionState
            AssertModifySessionState(modificationData, createSessionState, modifiedSessionState);

            Assert.AreEqual<DateTime>(preModifySessionLastModified, modifiedSessionState.State.LastModified, "LastModified updated with ModifySession");

            //Start GarbageCollector Service
            StartGCService();

            Thread.Sleep(ServiceStartSleepTime );

            //Stop GarbageCollector Service
            StopGCService();

            //ViewSession after GarbageCollector runs
            viewSessionState = this.GameSessionProxy.ViewSession(viewSessionState.SessionID.ToString(), viewSessionState.GameID.ToString());

            Assert.IsTrue(viewSessionState.IsInactivityWarningSent, "SessionState.IsInactivityWarningSent is false - Did not send Inacitivity last nudge Notification after GC service run");

            string memberName = TestAreaBase.users[0].MemberName;      // player1
            string password = TestAreaBase.users[0].Password;

            VerifyNotification(viewSessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.Nudge, true, memberName, password);

            //Start GarbageCollector Service
            StartGCService();

            Thread.Sleep(ServiceStartSleepTime );

            //Stop GarbageCollector Service
            StopGCService();

            try
            {
                viewSessionState = this.GameSessionProxy.ViewSession(viewSessionState.SessionID .ToString(), viewSessionState.GameID.ToString());
                Assert.Fail("Completed Session didn't get deleted after GarbageCollector service runs.");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }
        }

        /// <summary>
        /// Test for Sessions (GSS) GarbageCollecor Service
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Test for Sessions GarbageCollector.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_GarbageCollector_NoPlayerOnActiveSeat_SendNudgeToOwner()
        {
            //Stop GarbageCollector Service
            StopGCService();

            SessionState createSessionState = null;
            SessionState viewSessionState = null;

            createSessionState = InitSessionState(SessionCreatedTime.ToString(), false, 5);
            testHooksClient.CreateSession(createSessionState);

            //ViewSession
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      //  player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert viewSessionState
            AssertSessionState(createSessionState, viewSessionState);

            //Start GarbageCollector Service
            StartGCService();

            Thread.Sleep(ServiceStartSleepTime );

            //Stop GarbageCollector Service
            StopGCService();

            //ViewSession after GarbageCollector runs
            viewSessionState = this.GameSessionProxy.ViewSession(viewSessionState.SessionID.ToString(), viewSessionState.GameID.ToString());

            Assert.IsTrue(viewSessionState.IsInactivityWarningSent, "SessionState.IsInactivityWarningSent is false - Did not send Inacitivity last nudge Notification after GC service run");

            string memberName = TestAreaBase.users[0].MemberName;      // player1
            string password = TestAreaBase.users[0].Password;

            VerifyNotification(viewSessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.Nudge, true, memberName, password);

            //Start GarbageCollector Service
            StartGCService();

            Thread.Sleep(ServiceStartSleepTime );

            //Stop GarbageCollector Service
            StopGCService();

            try
            {
                viewSessionState = this.GameSessionProxy.ViewSession(viewSessionState.SessionID.ToString(), viewSessionState.GameID.ToString());
                Assert.Fail("Completed Session didn't get deleted after GarbageCollector service runs.");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }
        }

        /// <summary>
        /// Test for Sessions (GSS) GarbageCollecor Service
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Test for Sessions GarbageCollector.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_GarbageCollector_PlayerOnActiveSeat_SendNudgeToPlayer()
        {
            //Stop GarbageCollector Service
            StopGCService();

            SessionState createSessionState = null;
            SessionState joinSessionState = null;
            SessionState viewSessionState = null;

            createSessionState = InitSessionState(SessionCreatedTime.ToString(), false, 5);
            testHooksClient.CreateSession(createSessionState);

            //Player2 JoinSession on ActiveSeat 5
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 5);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2;
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            //ViewSession
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      //  player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert viewSessionState
            AssertSessionState(joinSessionState, viewSessionState);

            //Start GarbageCollector Service
            StartGCService();

            Thread.Sleep(ServiceStartSleepTime );

            //Stop GarbageCollector Service
            StopGCService();

            //ViewSession after GarbageCollector runs
            viewSessionState = this.GameSessionProxy.ViewSession(viewSessionState.SessionID.ToString(), viewSessionState.GameID.ToString());

            Assert.IsTrue(viewSessionState.IsInactivityWarningSent, "SessionState.IsInactivityWarningSent is false - Did not send Inacitivity last nudge Notification after GC service run");

            string memberName = TestAreaBase.users[1].MemberName;      // player2
            string password = TestAreaBase.users[1].Password;

            VerifyNotification(viewSessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.Nudge, true, memberName, password);

            //Start GarbageCollector Service
            StartGCService();

            Thread.Sleep(ServiceStartSleepTime );

            //Stop GarbageCollector Service
            StopGCService();

            try
            {
                viewSessionState = this.GameSessionProxy.ViewSession(viewSessionState.SessionID.ToString(), viewSessionState.GameID.ToString());
                Assert.Fail("Completed Session didn't get deleted after GarbageCollector service runs.");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }
        }

        /// <summary>
        /// Test for Sessions (GSS) GarbageCollecor Service
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Test for Sessions GarbageCollector.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_GarbageCollector_NoPlayerOnActiveSeat_NoOwnerExists()
        {
            //Stop GarbageCollector Service
            StopGCService();

            SessionState createSessionState = null;
            //SessionState afterLeaveSessionState = null;
            //SessionState viewSessionState = null;

            createSessionState = InitSessionState(SessionCreatedTime.ToString(), false, 5);
            testHooksClient.CreateSession(createSessionState);

            //Owner LeaveSession
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            //Currently this LeaveSession would fail as it can't find another player to assign as owner
            this.GameSessionProxy.LeaveSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //TODO: Add logic to verigy the test case when the above Owner LeaveSession issue will be fixed in Sessions svc

        }

        /// <summary>
        /// Test for Sessions (GSS) GarbageCollecor Service
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Test for Sessions GarbageCollector.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_GarbageCollector_PlayerLeaveSessionAfterNudge_CleanSession()
        {
            //Stop GarbageCollector Service
            StopGCService();

            SessionState createSessionState = null;
            SessionState joinSessionState = null;
            //SessionState afterLeaveSessionState = null;
            SessionState viewSessionState = null;

            createSessionState = InitSessionState(SessionCreatedTime.ToString(), false, 1);
            testHooksClient.CreateSession(createSessionState);

            //Player2 JoinSession on ActiveSeat 1
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2;
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            //ViewSession
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      //  player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert viewSessionState
            AssertSessionState(joinSessionState, viewSessionState);

            //Start GarbageCollector Service
            StartGCService();

            Thread.Sleep(ServiceStartSleepTime );

            //Stop GarbageCollector Service
            StopGCService();

            //ViewSession after GarbageCollector runs
            viewSessionState = this.GameSessionProxy.ViewSession(viewSessionState.SessionID.ToString(), viewSessionState.GameID.ToString());

            Assert.IsTrue(viewSessionState.IsInactivityWarningSent, "SessionState.IsInactivityWarningSent is false - Did not send Inacitivity last nudge Notification after GC service run");

            string memberName = TestAreaBase.users[1].MemberName;      // player2
            string password = TestAreaBase.users[1].Password;

            VerifyNotification(viewSessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.Nudge, true, memberName, password);

            //Player2 LeaveSession
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            this.GameSessionProxy.LeaveSession(viewSessionState.SessionID.ToString(), viewSessionState.GameID.ToString());

            //Start GarbageCollector Service
            StartGCService();

            Thread.Sleep(ServiceStartSleepTime );

            //Stop GarbageCollector Service
            StopGCService();

            /*
            // Owner (player1) should get Warning Notification when ActivePlayer LeaveSession after he/she gets Warning Notification.
            //Currently it's not implemented. Fix this test case when this functionality implemented.

            memberName = TestAreaBase.users[0].MemberName;      // player1
            password = TestAreaBase.users[0].Password;

            VerifyNotification(viewSessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.Warning, true, memberName, password);

            //Start GarbageCollector Service
            StartGCService();

            Thread.Sleep(60000);

            //Stop GarbageCollector Service
            StopGCService();
            */

            try
            {
                viewSessionState = this.GameSessionProxy.ViewSession(viewSessionState.SessionID.ToString(), viewSessionState.GameID.ToString());
                Assert.Fail("Completed Session didn't get deleted after GarbageCollector service runs.");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound , SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }
        }

        /// <summary>
        /// Test for GarbageCollecor Service- verify all outdated sessions are garbage collected even those with no last nudge  notification
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Test for Sessions GarbageCollector.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_GC_OutDatedSessionNotInAzureStoreCreateNudgeNotification()
        {
            //Stop GarbageCollector Service
            StopGCService();

            
      
            SessionState createSessionState = null;
            SessionState viewSessionState = null;
           
                
            createSessionState = InitSessionState(SessionCreatedTime.ToString(), true, 0);
            testHooksClient.CreateSession(createSessionState);  
                
            //ViewSession by player 1
            viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString(), 
                                                                 TestAreaBase.users[0].MemberName, 
                                                                 TestAreaBase.users[0].Password);                
            //Assert viewSessionState                
            AssertSessionState(createSessionState, viewSessionState);

            //Start GarbageCollector Service
            StartGCService();

            Thread.Sleep(ServiceStartSleepTime * 3);


            //ViewSession after GarbageCollector runs          
            try
            {
                viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID, createSessionState.GameID.ToString(),
                                                                            TestAreaBase.users[0].MemberName,
                                                                            TestAreaBase.users[0].Password);
                TestAreaBase.notificationCommon.CreateNotificationsInternal(1, Notification.NotificationType.Nudge, createSessionState.SessionID, createSessionState.GameID);

                //retry viewsession after last nudge has been created
                viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID, createSessionState.GameID.ToString(),
                                                                             TestAreaBase.users[0].MemberName,
                                                                             TestAreaBase.users[0].Password);

                Assert.Fail("Outdated Session didn't get deleted after GarbageCollector service runs.");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }
          
        }

        /// <summary>
        /// Test for GarbageCollecor Service- verify all outdated sessions are garbage collected even those with no last nudge notification
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Test for Sessions GarbageCollector.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_GC_OutDatedSessionNotInAzureStoreRunSysNudgeSvc()
        {
            //Stop GarbageCollector Service
            StopGCService();

            SessionState createSessionState = null;
            SessionState viewSessionState = null;


            createSessionState = InitSessionState(SessionCreatedTime.ToString(), true, 0);
            testHooksClient.CreateSession(createSessionState);

            //ViewSession by player 1
            viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString(),
                                                                 TestAreaBase.users[0].MemberName,
                                                                 TestAreaBase.users[0].Password);
            //Assert viewSessionState                
            AssertSessionState(createSessionState, viewSessionState);

            //Start GarbageCollector Service
            StartGCService();

            Thread.Sleep(ServiceStartSleepTime*3);


            //ViewSession after GarbageCollector runs          
            try
            {
                viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID, createSessionState.GameID.ToString(),
                                                                            TestAreaBase.users[0].MemberName,
                                                                            TestAreaBase.users[0].Password);

                NotificationTestCommon.StopService(MachineName, "SystemNudgeService");
                NotificationTestCommon.StartService(MachineName, "SystemNudgeService");
                Thread.Sleep(ServiceStartSleepTime*3);

                //retry viewsession after last nudge has been created
                viewSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID, createSessionState.GameID.ToString(),
                                                                             TestAreaBase.users[0].MemberName,
                                                                             TestAreaBase.users[0].Password);

                Assert.Fail("Outdated Session didn't get deleted after GarbageCollector service runs.");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }

        }

        private static void StopGCService()
        {
            NotificationTestCommon.StopService(MachineName, "GarbageCollectorService");
        }

        private static void StartGCService()
        {
            NotificationTestCommon.StartService(MachineName, "GarbageCollectorService");
        }
       
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Contracts\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("Multiplayer.Contracts")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("72e50daf-89bb-4f93-a304-78a1a50c13d3")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test\Multiplayer.Test\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("Multiplayer.Test")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM componenets.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("92ed1b09-1159-4b58-86e3-c93a49f1d334")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Contracts\Notifications\FriendRequestNotification.cs ===
//-------------------------------------------------------------------
// <copyright file="FriendRequestNotification.cs" company="Microsoft">
//     Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>
//
// <author email="zhangxu">
//     Zhangwei Xu
// </author>
//
// <summary>
//  FriendRequestNotification class
// </summary>
//
// <remarks/>
//
// <disclaimer/>
//
// <history date="08/17/2009">
//     Class created
// </history>
//-------------------------------------------------------------------

namespace AsyncMultiplayer.NotificationService
{
    using System;
    using System.Runtime.Serialization;

    /// <summary>
    /// Class to hold FriendRequest notification data.
    /// </summary>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://schemas.datacontract.org/2004/07/AsyncMultiplayer.NotificationService", IsNullable = false)]
    [Serializable]
    [DataContract(Name = "FriendRequestNotification")]
    public class FriendRequestNotification : Notification
    {
        /// <summary>
        /// Initializes a new instance of the FriendRequestNotification class.
        /// </summary>
        public FriendRequestNotification()
            : base()
        {
            this.Type = NotificationType.FriendRequest;
            this.IsUserVisible = true;
            this.Category = NotificationCategory.ToDo; 
        }

        /// <summary>
        /// Gets or sets a value indicating whether a friend request is present. 
        /// </summary>
        public bool FriendRequestPresent { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether a XBL message is present. 
        /// </summary>
        public bool MessageWaiting { get; set; }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Contracts\Notifications\GameTieNotification.cs ===
﻿//-------------------------------------------------------------------
// <copyright file="GameTieNotification.cs" company="Microsoft">
//     Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>
//
// <author email="zhangxu">
//     Zhangwei Xu
// </author>
//
// <summary>
//  GameTieNotification class
// </summary>
//
// <remarks/>
//
// <disclaimer/>
//
// <history date="08/17/2009">
//     Class created
// </history>
//-------------------------------------------------------------------

namespace AsyncMultiplayer.NotificationService
{
    using System;
    using System.Runtime.Serialization;

    /// <summary>
    /// Class to hold GameOver notification data.
    /// </summary>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://schemas.datacontract.org/2004/07/AsyncMultiplayer.NotificationService", IsNullable = false)]
    [Serializable]
    [DataContract(Name = "GameTieNotification")]
    public class GameTieNotification : Notification
    {
        /// <summary>
        /// Initializes a new instance of the GameTieNotification class.
        /// </summary>
        public GameTieNotification()
            : base()
        {
            this.Type = NotificationType.GameTie;
            this.IsUserVisible = true;
            this.Category = NotificationCategory.ToDo; 
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Contracts\Notifications\PartnerDeleteRequest.cs ===
﻿//-------------------------------------------------------------------
// <copyright file="PartnerDeleteRequest.cs" company="Microsoft">
//     Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>
//
// <summary>
//  PartnerDeleteRequest class for deleting notifications by session
// </summary>
//
// <remarks/>
//
// <disclaimer/>
//
// <history date="05/17/2010">
//     Class created
// </history>
//-------------------------------------------------------------------

namespace AsyncMultiplayer.PartnerService.DataContracts
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;

    /// <summary>
    /// Class to carry input data for deleting notifications by session.
    /// </summary>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [Serializable]
    [DataContract(Name = "PartnerDeleteRequest")]
    public class PartnerDeleteRequest
    {
        /// <summary>
        /// Initializes a new instance of the PartnerDeleteRequest class. 
        /// </summary>
        public PartnerDeleteRequest()
        {
        }

        /// <summary>
        /// Gets or sets the game id of the notifications. 
        /// </summary>
        [DataMember(Name = "GameId", Order = 1, IsRequired = true)]
        public uint GameId { get; set; }

        /// <summary>
        /// Gets or sets the session id of the notifications. 
        /// </summary>
        [DataMember(Name = "SessionId", Order = 2, IsRequired = true)]
        public string SessionId { get; set; }

        /// <summary>
        /// Gets or sets the recipients, a list of gamertags dilimited by ";"
        /// </summary>
        [DataMember(Name = "Players", Order = 3, IsRequired = true)]
        public string Players { get; set; }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Contracts\Notifications\PartnerNotificationRequest.cs ===
﻿//-------------------------------------------------------------------
// <copyright file="PartnerNotificationRequest.cs" company="Microsoft">
//     Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>
//
// <summary>
//  PartnerNotificationRequest class for sending notifications
// </summary>
//
// <remarks/>
//
// <disclaimer/>
//
// <history date="04/14/2010">
//     Class created
// </history>
//-------------------------------------------------------------------

namespace AsyncMultiplayer.PartnerService.DataContracts
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;

    /// <summary>
    /// The names of various notification properties: MUST be serialized to literal strings, not integer values.
    /// </summary>
    public enum NotificationProperty
    {
        /// <summary>
        /// uint: specifies the variant of the game.
        /// </summary>
        Variant,

        /// <summary>
        /// DateTime: specifies when the notification expires.
        /// </summary>
        ExpirationTime,

        /// <summary>
        /// string: contained in a notification carrying any data up-to-a maximum length (1000 chars)
        /// </summary>
        DataBlob,

        /// <summary>
        /// bool: contained in a Invite notification indicating whether to send a friendrequest to recipients or not.
        /// </summary>
        FriendRequest,
    }

    /// <summary>
    /// Class to carry input data for sending out notifications.
    /// </summary>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [Serializable]
    [DataContract(Name = "PartnerNotificationRequest")]
    public class PartnerNotificationRequest
    {
        /// <summary>
        /// Initializes a new instance of the PartnerNotificationRequest class. 
        /// </summary>
        public PartnerNotificationRequest()
        {
        }

        /// <summary>
        /// Gets or sets the game id of the notifications. 
        /// </summary>
        [DataMember(Name = "GameId", Order = 1, IsRequired = true)]
        public uint GameId { get; set; }

        /// <summary>
        /// Gets or sets the session id of the notifications. 
        /// </summary>
        [DataMember(Name = "SessionId", Order = 2, IsRequired = true)]
        public string SessionId { get; set; }

        /// <summary>
        /// Gets or sets the sender gamertag
        /// </summary>
        [DataMember(Name = "From", Order = 3, IsRequired = true)]
        public string From { get; set; }

        /// <summary>
        /// Gets or sets the recipients, a list of gamertags dilimited by ";"
        /// </summary>
        [DataMember(Name = "Recipients", Order = 4, IsRequired = true)]
        public string Recipients { get; set; }

        /// <summary>
        /// Gets or sets notification type: TODO: May need to expose Notification.NotificationType 
        /// </summary>
        [DataMember(Name = "NotificationType", Order = 5, IsRequired = true)]
        public string NotificationType { get; set; }

        /// <summary>
        /// Gets or sets the optional notification parameters.
        /// </summary>
        [DataMember(Name = "NotificationProperties", Order = 6, IsRequired = false)]
        public PropertyDictionary NotificationProperties { get; set; }

        /// <summary>
        /// Container class for notification pproperties.
        /// </summary>
        [CollectionDataContract(Name = "PropertyDictionary", ItemName = "Entry", KeyName = "Name", ValueName = "Value")]
        public class PropertyDictionary : Dictionary<NotificationProperty, string>
        {
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Contracts\Notifications\GameOverNotification.cs ===
﻿//-------------------------------------------------------------------
// <copyright file="GameOverNotification.cs" company="Microsoft">
//     Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>
//
// <author email="zhangxu">
//     Zhangwei Xu
// </author>
//
// <summary>
//  GameOverNotification class
// </summary>
//
// <remarks/>
//
// <disclaimer/>
//
// <history date="08/17/2009">
//     Class created
// </history>
//-------------------------------------------------------------------

namespace AsyncMultiplayer.NotificationService
{
    using System;
    using System.Runtime.Serialization;

    /// <summary>
    /// Class to hold GameOver notification data.
    /// </summary>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://schemas.datacontract.org/2004/07/AsyncMultiplayer.NotificationService", IsNullable = false)]
    [Serializable]
    [DataContract(Name = "GameOverNotification")]
    public class GameOverNotification : Notification
    {
        /// <summary>
        /// Initializes a new instance of the GameOverNotification class.
        /// </summary>
        public GameOverNotification()
            : base()
        {
            this.Type = NotificationType.GameOver;
            this.IsUserVisible = true;
            this.Category = NotificationCategory.ToDo; 
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Contracts\Notifications\InvitationNotification.cs ===
﻿//-------------------------------------------------------------------
// <copyright file="InvitationNotification.cs" company="Microsoft">
//     Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>
//
// <author email="zhangxu">
//     Zhangwei Xu
// </author>
//
// <summary>
//  InvitationNotification class
// </summary>
//
// <remarks/>
//
// <disclaimer/>
//
// <history date="08/17/2009">
//     Class created
// </history>
//-------------------------------------------------------------------

namespace AsyncMultiplayer.NotificationService
{
    using System;
    using System.Runtime.Serialization;

    /// <summary>
    /// Class to hold Invitation notification data.
    /// </summary>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://schemas.datacontract.org/2004/07/AsyncMultiplayer.NotificationService", IsNullable = false)]
    [Serializable]
    [DataContract(Name = "InvitationNotification")]
    public class InvitationNotification : Notification
    {
        /// <summary>
        /// Initializes a new instance of the InvitationNotification class.
        /// </summary>
        public InvitationNotification()
            : base()
        {
            this.Type = NotificationType.Invitation;
            this.IsUserVisible = true;
            this.Category = NotificationCategory.ToDo;
            this.FriendRequest = false;
        }

        /// <summary>
        /// Gets or sets the optional FriendRequest. 
        /// </summary>
        public bool FriendRequest { get; set; }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Contracts\Notifications\Notification.cs ===
﻿//-------------------------------------------------------------------
// <copyright file="Notification.cs" company="Microsoft">
//     Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>
//
// <author email="zhangxu">
//     Zhangwei Xu
// </author>
//
// <summary>
//  Notification class
// </summary>
//
// <remarks/>
//
// <disclaimer/>
//
// <history date="08/17/2009">
//     Class created
// </history>
//-------------------------------------------------------------------

namespace AsyncMultiplayer.NotificationService
{
    using System;
    using System.IO;
    using System.Runtime.Serialization;
    using System.Xml.Serialization;
    
    /// <summary>
    /// Class to hold all notification data.
    /// </summary>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://schemas.datacontract.org/2004/07/AsyncMultiplayer.NotificationService", IsNullable = false)]
    [Serializable]
    [KnownType(typeof(YourTurnNotification))]
    [KnownType(typeof(GameOverNotification))]
    [KnownType(typeof(InvitationNotification))]
    [KnownType(typeof(NudgeNotification))]
    [KnownType(typeof(MessageNotification))]
    [KnownType(typeof(YouWinNotification))]
    [KnownType(typeof(YouLoseNotification))]
    [KnownType(typeof(GameTieNotification))]
    [KnownType(typeof(FriendRequestNotification))]
    [KnownType(typeof(Spotlight))]
    [DataContract(Name = "Notification")]
    public abstract class Notification
    {
        /// <summary>
        /// The prefix for the format string of NotificationId.
        /// This part deals with DateTime portion of the NotificationId.
        /// </summary>
        public const string IdPrefixFormatString = "{0:D19}";

        /// <summary>
        /// The format string of NotificationId
        /// </summary>
        public const string IdFormatString = IdPrefixFormatString + "-{1}";

        /// <summary>
        /// The length of the ticks in a notification id. 
        /// </summary>
        public const int IdTicksLength = 19;

        /// <summary>
        /// The lenght of a guid string {E6F973E4-644B-4d2f-AB5F-EA3074BCDF75}
        /// </summary>
        public const int IdGuidLength = 36;

        /// <summary>
        /// The length of the id.
        /// The id contains 19 digits as time ticks, a dash and a guid. 
        /// </summary>
        public const int IdLength = IdTicksLength + IdGuidLength + 1;

        /// <summary>
        /// The id of the notification. 
        /// </summary>
        [DataMember]
        private string id;

        /// <summary>
        /// Initializes a new instance of the Notification class. 
        /// </summary>
        public Notification()
        {
            this.id = string.Format(IdFormatString, (DateTime.MaxValue.Ticks - DateTime.UtcNow.Ticks), Guid.NewGuid());
            this.SentTime = DateTime.UtcNow;

            // The following value should be set. Some storage solution like Azure Table will
            // complain if the fields are empty. The creator can overwrite these two if necessary. 
            this.DeliveredTime = DateTime.UtcNow;
            this.ExpirationTime = DateTime.MaxValue;
            this.Status = NotificationStatus.UnRead;
        }

        /// <summary>
        /// Notification Category Enumeration. 
        /// </summary>
        public enum NotificationCategory
        {
            /// <summary>
            /// The category is not specified. 
            /// </summary>
            NotSpecified = 0,

            /// <summary>
            /// The notification is TODO. Requires user actions. 
            /// </summary>
            ToDo = 1,

            /// <summary>
            /// The notification is informational only. 
            /// </summary>
            Info = 2
        }

        /// <summary>
        /// Notitification status enumberation. 
        /// </summary>
        public enum NotificationStatus
        {
            /// <summary>
            /// The notification is already viewed by the user. 
            /// </summary>
            UnRead = 0,

            /// <summary>
            /// The notification is pending to be viewed by the user. 
            /// </summary>
            Viewed = 1
        }

        /// <summary>
        ///  Notification type enumeration.
        /// </summary>
        public enum NotificationType
        {
            /// <summary>
            ///  This is your turn.
            /// </summary>
            YourTurn = 0,

            /// <summary>
            ///  Nudge to remind the player.
            /// </summary>
            Nudge = 4,

            /// <summary>
            ///  A game invitation.
            /// </summary>
            Invitation = 8,

            /// <summary>
            ///  Game over.
            /// </summary>
            GameOver = 9,

            /// <summary>
            /// Message waiting. 
            /// </summary>
            Message = 14,

            /// <summary>
            /// You have won the game. 
            /// </summary>
            YouWin = 15,

            /// <summary>
            /// You have lost the game. 
            /// </summary>
            YouLose = 16,

            /// <summary>
            /// The game is a tie. 
            /// </summary>
            GameTie = 17,

            /// <summary>
            /// Someone wants to be a friend. 
            /// </summary>
            FriendRequest = 18, 
        }

        

        /// <summary>
        /// Gets or sets the notification Id.
        /// NOTE: setter is still here so the test code can pass. It will eventually be removed. 
        /// </summary>
        public string Id
        {
            get { return this.id; }
            set { this.id = value; }
        }

        /// <summary>
        /// Gets or sets the originator of this notification. This could be the name of a system component
        /// or some identity of the user. 
        /// </summary>
        [DataMember]
        public string From { get; set; }

        /// <summary>
        /// Gets or sets the target of this notification. This is the owner's public identity of the 
        /// notification. 
        /// </summary>
        [DataMember]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or sets notification category. 
        /// </summary>
        [DataMember]
        public NotificationCategory Category { get; set; }

        /// <summary>
        /// Gets or sets notification type.
        /// </summary>
        [DataMember]
        public NotificationType Type { get; set; }

        /// <summary>
        /// Gets or sets the localized notification type display name. 
        /// </summary>
        [DataMember]
        public string TypeDisplayName { get; set; }

        /// <summary>
        /// Gets or sets notification status. 
        /// </summary>
        [DataMember]
        public NotificationStatus Status { get; set; }

        /// <summary>
        /// Gets or sets game Id.
        /// </summary>
        [DataMember]
        public uint GameId { get; set; }

        /// <summary>
        /// Gets or sets the game display name. 
        /// </summary>
        [DataMember]
        public string GameDisplayName { get; set; }

        /// <summary>
        /// Gets or sets the variant of the game.
        /// </summary>
        [DataMember]
        public uint Variant { get; set; }

        /// <summary>
        /// Gets or sets session Id.
        /// </summary>
        [DataMember]
        public string SessionId { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether
        /// the notification is visible to the user.
        /// </summary>
        [DataMember]
        public bool IsUserVisible { get; set; }

        /// <summary>
        /// Gets or sets sent time of this
        /// notification.
        /// </summary>
        [DataMember]
        public DateTime SentTime { get; set; }

        /// <summary>
        /// Gets or sets the actual delivery time of 
        /// this notification. 
        /// </summary>
        [DataMember]
        public DateTime DeliveredTime { get; set; }

        /// <summary>
        /// Gets or sets the expiration time of this
        /// notification. 
        /// </summary>
        [DataMember]
        public DateTime ExpirationTime { get; set; }

        /// <summary>
        /// Gets or sets the image urls. 
        /// </summary>
        [DataMember]
        public string Images { get; set; }

        /// <summary>
        /// Gets or sets the associated URL. 
        /// This URL could be help URL or the general information regarding the notification. 
        /// </summary>
        [DataMember]
        public string Url { get; set; }

        /// <summary>
        /// Gets or sets supported platform of this
        /// notification.
        /// </summary>
        [DataMember]
        public int SupportedPlatform { get; set; }

        /// <summary>
        /// Gets or sets additional datablob. 
        /// </summary>
        [DataMember]
        public string DataBlob { get; set; }

        /// <summary>
        /// This method serializes an object to string.
        /// </summary>
        /// <param name="obj">Object to be serialized.</param>
        /// <returns>Serialized string of the object</returns>
        public
        static
        string
        SerializeToString(object obj)
        {
            XmlSerializer serializer = new XmlSerializer(obj.GetType());
            using (StringWriter writer = new StringWriter())
            {
                serializer.Serialize(writer, obj);

                return writer.ToString();
            }
        }

        /// <summary>
        /// This method deserializes a XML string into an object.
        /// </summary>
        /// <typeparam name="T">The generic type parameter.</typeparam>
        /// <param name="xml">XML string to be deserialized.</param>
        /// <returns>Object deserialized from the XML string</returns>
        public
        static
        T
        DeserializeFromString<T>(string xml)
        {
            XmlSerializer serializer = new XmlSerializer(typeof(T));

            using (StringReader reader = new StringReader(xml))
            {
                return (T)serializer.Deserialize(reader);
            }
        }

        /// <summary>
        /// Deserialize from an xml string by specifying the type. 
        /// </summary>
        /// <param name="xml">The xml string. </param>
        /// <param name="type">The type of the notification. </param>
        /// <returns>Deserialized notification object. </returns>
        public
        static
        Notification
        DeserializeFromString(string xml, NotificationType type)
        {
            Notification newNotification;
            switch (type)
            {
                case Notification.NotificationType.GameOver:
                    newNotification = Notification.DeserializeFromString<GameOverNotification>(xml);
                    break;
                case Notification.NotificationType.Invitation:
                    newNotification = Notification.DeserializeFromString<InvitationNotification>(xml);
                    break;
                case Notification.NotificationType.Nudge:
                    newNotification = Notification.DeserializeFromString<NudgeNotification>(xml);
                    break;
                case Notification.NotificationType.YourTurn:
                    newNotification = Notification.DeserializeFromString<YourTurnNotification>(xml);
                    break;
                case Notification.NotificationType.Message:
                    newNotification = Notification.DeserializeFromString<MessageNotification>(xml);
                    break;
                case Notification.NotificationType.YouWin:
                    newNotification = Notification.DeserializeFromString<YouWinNotification>(xml);
                    break;
                case Notification.NotificationType.YouLose:
                    newNotification = Notification.DeserializeFromString<YouLoseNotification>(xml);
                    break;
                case Notification.NotificationType.GameTie:
                    newNotification = Notification.DeserializeFromString<GameTieNotification>(xml);
                    break;
                case Notification.NotificationType.FriendRequest:
                    newNotification = Notification.DeserializeFromString<FriendRequestNotification>(xml);
                    break;
                default:
                    throw new InvalidOperationException(String.Format("Type {0} is not suspported", type));
            }

            return newNotification;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Contracts\Notifications\UserInfo.cs ===
﻿//-------------------------------------------------------------------
// <copyright file="UserInfo.cs" company="Microsoft">
//     Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>
//
// <author email="fgao">
//     Feng Gao
// </author>
//
// <summary>
//  A class used in notification service to keep the user information.  
// </summary>
//
// <remarks/>
//
// <disclaimer/>
//
// <history date="10/28/2009">
//     Class created
// </history>
//-------------------------------------------------------------------

namespace AsyncMultiplayer.NotificationService
{
    using System;
    using System.Runtime.Serialization;
    using System.Xml.Serialization; 

    /// <summary>
    /// Class to hold User Info data.
    /// </summary>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://schemas.datacontract.org/2004/07/AsyncMultiplayer.NotificationService", IsNullable = false)]
    [Serializable]
    [DataContract(Name = "UserInfo")]
    public class UserInfo
    {
        /// <summary>
        /// The prefix to a gamertag recipient in a notification. 
        /// </summary>
        public const string GamertagPrefix = "gamertag:";

        /// <summary>
        /// The delimiter characters. 
        /// </summary>
        public static readonly string[] UserDelimitor = new string[] { ";" };

        /// <summary>
        /// Initializes a new instance of the UserInfo class. 
        /// </summary>
        public UserInfo()
        {
        }

        /// <summary>
        /// Initializes a new instance of the UserInfo class.
        /// </summary>
        /// <param name="xuid">The Xuid of the user. </param>
        public UserInfo(ulong xuid)
        {
            this.Xuid = xuid;
        }

        /// <summary>
        /// Gets or sets the display name of the user. 
        /// </summary>
        [DataMember]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets the gamer tag of the user. 
        /// </summary>
        [DataMember]
        public string GamerTag { get; set; }

        /// <summary>
        /// Gets or sets the email address of the user. 
        /// </summary>
        [XmlIgnore]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Gets or sets the Xuid of the user. 
        /// </summary>
        [XmlIgnore]
        public ulong Xuid { get; set; }

        /// <summary>
        /// Gets or sets the Puid of the user
        /// </summary>
        [XmlIgnore]
        public long Puid { get; set; }

        /// <summary>
        /// Gets or sets the locale of the user. 
        /// </summary>
        [XmlIgnore]
        public string Locale { get; set; }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Contracts\Notifications\NudgeNotification.cs ===
﻿//-------------------------------------------------------------------
// <copyright file="NudgeNotification.cs" company="Microsoft">
//     Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>
//
// <author email="zhangxu">
//     Zhangwei Xu
// </author>
//
// <summary>
//  NudgeNotification class
// </summary>
//
// <remarks/>
//
// <disclaimer/>
//
// <history date="08/17/2009">
//     Class created
// </history>
//-------------------------------------------------------------------

namespace AsyncMultiplayer.NotificationService
{
    using System;
    using System.Runtime.Serialization;

    /// <summary>
    /// Class to hold Nudge notification data.
    /// </summary>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://schemas.datacontract.org/2004/07/AsyncMultiplayer.NotificationService", IsNullable = false)]
    [Serializable]
    [DataContract(Name = "NudgeNotification")]
    public class NudgeNotification : Notification
    {
        /// <summary>
        /// Initializes a new instance of the NudgeNotification class.
        /// </summary>
        public NudgeNotification()
            : base()
        {
            this.Type = NotificationType.Nudge;
            this.IsUserVisible = true;
            this.Category = NotificationCategory.ToDo; 
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Contracts\Notifications\NotificationList.cs ===
﻿//-------------------------------------------------------------------
// <copyright file="NotificationList.cs" company="Microsoft">
//     Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>
//
// <author email="zhangxu">
//     Zhangwei Xu
// </author>
//
// <summary>
//  NotificationList class
// </summary>
//
// <remarks/>
//
// <disclaimer/>
//
// <history date="08/17/2009">
//     Class created
// </history>
//-------------------------------------------------------------------

namespace AsyncMultiplayer.NotificationService
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;

    /// <summary>
    /// Class to hold a list of notifications.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://schemas.datacontract.org/2004/07/AsyncMultiplayer.NotificationService", IsNullable = false)]
    [Serializable]
    [CollectionDataContract(Name = "NotificationList")]
    public class NotificationList : List<Notification>
    {
        /// <summary>
        /// Initializes a new instance of the NotificationList class.
        /// </summary>
        public NotificationList()
            : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the NotificationList class.
        /// </summary>
        /// <param name="items">Items to initialize the class.</param>
        public NotificationList(IEnumerable<Notification> items)
            : base(items)
        {
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Contracts\Notifications\PartnerCompositeGameResult.cs ===
﻿//-------------------------------------------------------------------
// <copyright file="PartnerCompositeGameResult.cs" company="Microsoft">
//     Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>
//
// <summary>
//  PartnerCompositeGameResult class for posting game results.
// </summary>
//
// <remarks/>
//
// <disclaimer/>
//
// <history date="04/14/2010">
//     Class created
// </history>
//-------------------------------------------------------------------

namespace AsyncMultiplayer.PartnerService.DataContracts
{
    using System;
    using System.Runtime.Serialization;
    using Gds.Contracts;

    /// <summary>
    /// Class to carry input data for sending out notifications.
    /// </summary>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [Serializable]
    [DataContract(Name = "PartnerCompositeGameResult")]
    public class PartnerCompositeGameResult
    {
        /// <summary>
        /// Initializes a new instance of the PartnerCompositeGameResult class. 
        /// </summary>
        public PartnerCompositeGameResult()
        {
        }

        /// <summary>
        /// Gets or sets the gamertag of the game. 
        /// </summary>
        [DataMember(Name = "Gamertag", Order = 1, IsRequired = true)]
        public string Gamertag { get; set; }

        /// <summary>
        /// Gets or sets the game result. 
        /// </summary>
        [DataMember(Name = "GameResult", Order = 2, IsRequired = true)]
        public GameResult GameResult { get; set; }

        /// <summary>
        /// Gets or sets the gamer's locale. 
        /// </summary>
        [DataMember(Name = "Locale", Order = 3, IsRequired = true)]
        public string Locale { get; set; }

        /// <summary>
        /// Gets or sets the gamer's platform. 
        /// </summary>
        [DataMember(Name = "PlatformType", Order = 4, IsRequired = true)]
        public string PlatformType { get; set; }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Contracts\Notifications\MessageNotification.cs ===
﻿//-------------------------------------------------------------------
// <copyright file="MessageWaitingNotification.cs" company="Microsoft">
//     Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>
//
// <author email="zhangxu">
//     Zhangwei Xu
// </author>
//
// <summary>
//  Message waiting notification. 
// </summary>
//
// <remarks/>
//
// <disclaimer/>
//
// <history date="10/19/2009">
//     Class created
// </history>
//-------------------------------------------------------------------

namespace AsyncMultiplayer.NotificationService
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.Activation;
    using System.ServiceModel.Web;
    using System.Xml.Linq;

    /// <summary>
    /// Class to hold SessionRemoved notification data.
    /// </summary>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://schemas.datacontract.org/2004/07/AsyncMultiplayer.NotificationService", IsNullable = false)]
    [Serializable]
    [DataContract(Name = "MessageNotification")]
    public class MessageNotification : Notification
    {
        /// <summary>
        /// Initializes a new instance of the MessageWaitingNotification class.
        /// </summary>
        public MessageNotification()
            : base()
        {
            this.Type = NotificationType.Message;
            this.IsUserVisible = true;
            this.Category = NotificationCategory.ToDo; 
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Contracts\Rewards\GameResult.cs ===
﻿//------------------------------------------------------------------------------------------------- 
// <copyright file="GameResult.cs" company="Microsoft" author="Savas Guven">
// Copyright © .  All rights reserved.
// </copyright>
// <summary>GameEvent data object</summary>
//-------------------------------------------------------------------------------------------------
namespace Gds.Contracts
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;

    [DataContract(Name = "GameResult", Namespace = "http://schemas.datacontract.org/2004/07/Wgx.Services.Gds.BusinessObjects")]
    public class GameResult
    {
        /// <summary>
        /// Gets or sets GameID 
        /// </summary>
        [DataMember(IsRequired = true, EmitDefaultValue = true, Order = 0, Name = "GameId")]
        public uint GameId { get; set; }

        /// <summary>
        /// Gets or sets the Variant of the game.
        /// </summary>
        [DataMember(IsRequired = true, EmitDefaultValue = true, Order = 1, Name = "Variant")]
        public uint Variant { get; set; }

        /// <summary>
        /// Gets or sets a unique identifier for this event instance. (e.g. a message id)
        /// </summary>
        [DataMember(IsRequired = true, EmitDefaultValue = true, Order = 2, Name = "GameResultId")]
        public Guid GameResultId { get; set; }

        /// <summary>
        /// Gets or sets the TimeStamp
        /// </summary>
        [DataMember(IsRequired = true, EmitDefaultValue = true, Order = 3, Name = "TimeStamp")]
        public DateTime TimeStamp { get; set; }

        /// <summary>
        /// Gets or sets the Game Score achieved.
        /// </summary>
        [DataMember(IsRequired = false, EmitDefaultValue = false, Order = 4, Name = "Score")]
        public long? Score { get; set; }

        /// <summary>
        /// Gets or sets Time in seconds played.
        /// </summary>
        [DataMember(IsRequired = false, EmitDefaultValue = false, Order = 5, Name = "Time")]
        public long? Time { get; set; }

        /// <summary>
        /// Gets or sets the outcome, win or loss or tie
        /// </summary>
        [DataMember(IsRequired = false, EmitDefaultValue = true, Order = 6, Name = "Outcome")]
        public string Outcome { get; set; }

        /// <summary>
        /// Gets or sets a binary blob to be saved in cases where a Best Time or Score is achieved.
        /// </summary>
        [DataMember(IsRequired = false, EmitDefaultValue = true, Order = 7, Name = "Blob")]
        public byte[] Blob { get; set; }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Contracts\Rewards\GameResultOutcome.cs ===
﻿namespace Gds.Contracts
{
    public enum GameResultOutcome : uint
    {
        None = 0,
        Win = 1,
        Loss = 2,
        Tie = 3,
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Contracts\Rewards\Leaderboard.cs ===
﻿namespace Gds.Contracts
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;

    /// <summary>
    /// Data contract for Item in Leaderboard
    /// </summary>
    [DataContract(Name = "Item", Namespace = "http://schemas.datacontract.org/2004/07/GDS.Contracts")]
    public class LeaderboardItem
    {
        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "User", Order = 0)]
        public LeaderboardUser User { get; set; }

        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "Rank", Order = 1)]
        public uint Rank { get; set; }

        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "Value", Order = 2)]
        public long Value { get; set; }

        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "Statistics", Order = 3)]
        public IList<Entry> Statistics { get; set; }
    }

    /// <summary>
    /// Data contract for User
    /// </summary>
    [DataContract(Name = "User", Namespace = "http://schemas.datacontract.org/2004/07/GDS.Contracts")]
    public class LeaderboardUser
    {
        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "GamerTag", Order = 0)]
        public string GamerTag { get; set; }

        [DataMember(EmitDefaultValue = true, IsRequired = false, Name = "Cid", Order = 0)]
        public ulong Cid { get; set; }

        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "DisplayName", Order = 1)]
        public string DisplayName { get; set; }

        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "PictureUrl", Order = 2)]
        public string PictureUrl { get; set; }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Contracts\Rewards\StatisticSet.cs ===
﻿namespace Gds.Contracts
{
    using System;
    using System.Runtime.Serialization;
    using System.Collections.Generic;

    /// <summary>
    /// Data contract for a Stat
    /// </summary>
    [DataContract(Name = "Entry", Namespace = "http://schemas.datacontract.org/2004/07/GDS.Contracts")]
    public class Entry
    {
        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "Name", Order = 0)]
        public string Name { get; set; }

        [DataMember(EmitDefaultValue = true, IsRequired = false, Name = "Value", Order = 1)]
        public string Value { get; set; }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Contracts\Notifications\UserData.cs ===
﻿//-------------------------------------------------------------------
// <copyright file="UserData.cs" company="Microsoft">
//     Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>
//
// <author email="fgao">
//     Feng Gao
// </author>
//
// <summary>
//  User control data. This class is used to help Notification Service to make certain 
//  decisions 
// </summary>
//
// <remarks/>
//
// <disclaimer/>
//
// <history date="10/28/2009">
//     Class created
// </history>
//-------------------------------------------------------------------

using System.Collections.Generic;

namespace AsyncMultiplayer.NotificationService
{
    using System;
    using System.Runtime.Serialization;

    /// <summary>
    /// Class to hold BestScore notification data.
    /// </summary>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://schemas.datacontract.org/2004/07/AsyncMultiplayer.NotificationService", IsNullable = false)]
    [Serializable]
    [DataContract(Name = "UserData")]
    public class UserData
    {
        /// <summary>
        /// Initializes a new instance of the UserData class.
        /// </summary>
        /// <param name="userId">The unique id of the user. </param>
        public UserData(string userId)
        {
            this.UserId = userId; 
            this.InviteCount = 0;
            this.LastInviteResetTime = DateTime.UtcNow;
            this.LastUpdateTime = DateTime.UtcNow;
            this.Push =  new UserSubscription(); 
        }

        /// <summary>
        /// Gets or sets the user id. It has to be unique. 
        /// </summary>
        [DataMember]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or sets the number of inivtes sent since last reset.
        /// </summary>
        [DataMember]
        public int InviteCount { get; set; }

        /// <summary>
        /// Gets or sets the time when InviteCount was reset
        /// </summary>
        [DataMember]
        public DateTime LastInviteResetTime { get; set; }

        /// <summary>
        /// Gets or sets the time when the user's storage was last updated.
        /// </summary>
        [DataMember]
        public DateTime LastUpdateTime { get; set; }

        /// <summary>
        /// Gets or sets the push Subscription
        /// </summary>
        [DataMember]
        public UserSubscription Push { get; set; }

    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://schemas.datacontract.org/2010/12/XboxLive.NotificationService", IsNullable = false)]
    [Serializable]
    [DataContract(Name = "PushSubscription")]
    public class PushSubscription
    {
        [DataMember]
        public string Url;
        [DataMember]
        public string SubTypes;
    }

    public class UserSubscription
    {
        public string Url;
        public string SubTypes;
        public string UrlKey;
    }


}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Contracts\Notifications\YouWinNotification.cs ===
﻿//-------------------------------------------------------------------
// <copyright file="YouWinNotification.cs" company="Microsoft">
//     Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>
//
// <author email="zhangxu">
//     Zhangwei Xu
// </author>
//
// <summary>
//  YouWinNotification class
// </summary>
//
// <remarks/>
//
// <disclaimer/>
//
// <history date="08/17/2009">
//     Class created
// </history>
//-------------------------------------------------------------------

namespace AsyncMultiplayer.NotificationService
{
    using System;
    using System.Runtime.Serialization;

    /// <summary>
    /// Class to hold GameOver notification data.
    /// </summary>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://schemas.datacontract.org/2004/07/AsyncMultiplayer.NotificationService", IsNullable = false)]
    [Serializable]
    [DataContract(Name = "YouWinNotification")]
    public class YouWinNotification : Notification
    {
        /// <summary>
        /// Initializes a new instance of the YouWinNotification class.
        /// </summary>
        public YouWinNotification()
            : base()
        {
            this.Type = NotificationType.YouWin;
            this.IsUserVisible = true;
            this.Category = NotificationCategory.ToDo; 
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Contracts\Session\EventAttributes.cs ===
﻿namespace Leet.Utils
{
    using System;
    using System.Diagnostics;
    
    [AttributeUsage(AttributeTargets.Field, AllowMultiple = false)]
    public sealed class EventAttribute : Attribute
    {
        private string message;
        private int msgID = -1;
        private int resourceId = -1;
        private int facility = 0;
        private bool error = true; 
        private TraceEventType eventType = TraceEventType.Information;

        public EventAttribute()
        {
        }

        public bool Error
        {
            get { return this.error; }
            set { this.error = value; }
        }

        public string Message
        {
            get { return this.message; }
            set { this.message = value; }
        }

        public int MessageId
        {
            get { return this.msgID; }
            set { this.msgID = value; }
        }

        public TraceEventType TraceEventType
        {
            get { return this.eventType; }
            set { this.eventType = value; }
        }

        public int ResourceId
        {
            get { return this.resourceId; }
            set { this.resourceId = value; }
        }

        public int Facility
        {
            get { return this.facility; }
            set { this.facility = value; }
        }
    }

    [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)]
    public sealed class EventCategoryAttribute : Attribute
    {
        private int baseCounter;
        private string description;
        private int incrementAmount = 10;
        private string resourceBaseName;
        private string resourceAssembly;

        public EventCategoryAttribute()
        {
        }

        public int MessageIdBase
        {
            get { return this.baseCounter; }
            set { this.baseCounter = value; }
        }

        public int IncrementAmount
        {
            get { return this.incrementAmount; }
            set { this.incrementAmount = value; }
        }

        public string Description
        {
            get { return this.description; }
            set { this.description = value; }
        }

        public string ResourceBaseName
        {
            get { return this.resourceBaseName; }
            set { this.resourceBaseName = value; }
        }

        public string ResourceAssemblyName
        {
            get { return this.resourceAssembly; }
            set { this.resourceAssembly = value; }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Contracts\Rewards\GameDataResult.cs ===
﻿using System.Collections.Generic;
using System.Runtime.Serialization;

namespace Gds.Contracts
{
    /// <summary>
    /// Result of GET Leaderboard
    /// </summary>
    [DataContract(Name = "LeaderboardResult", Namespace = "http://schemas.datacontract.org/2004/07/GDS.Contracts")]
    public class LeaderboardResult
    {
        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "TotalNumberOfRows", Order = 0)]
        public uint TotalNumberOfRows { get; set; }

        [DataMember(EmitDefaultValue = true, IsRequired = true, Name = "Leaderboard", Order = 1)]
        public IList<LeaderboardItem> Leaderboard;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Contracts\Notifications\Spotlight.cs ===
﻿//-------------------------------------------------------------------
// <copyright file="Spotlight.cs" company="Microsoft">
//     Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>
//
// <author email="fgao">
//     Feng Gao
// </author>
//
// <summary>
//  Spotlight notification class
// </summary>
//
// <remarks/>
//
// <disclaimer/>
//
// <history date="11/13/2009">
//     Class created
// </history>
//-------------------------------------------------------------------

namespace AsyncMultiplayer.NotificationService
{
    using System;
    using System.Runtime.Serialization;

    /// <summary>
    /// Class to hold Spotlight data. 
    /// </summary>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://schemas.datacontract.org/2004/07/AsyncMultiplayer.NotificationService", IsNullable = false)]
    [Serializable]
    [DataContract(Name = "Spotlight")]
    public class Spotlight
    {
        /// <summary>
        /// Initializes a new instance of the Spotlight class. 
        /// </summary>
        /// <param name="title">The title of the notification. </param>
        /// <param name="subtitle">The subtitle of the notification. </param>
        /// <param name="url">The launch url. </param>
        /// <param name="gameId">The game id of the spotlight. </param>
        public Spotlight(string title, string subtitle, string url, uint gameId)
        {
            this.Title = title;
            this.Subtitle = subtitle;
            this.Url = url;
            this.GameId = gameId; 
        }
            
        /// <summary>
        /// Gets or sets the title. 
        /// </summary>
        [DataMember]
        public string Title { get; set; }

        /// <summary>
        /// Gets or sets the subtitle. 
        /// </summary>
        [DataMember]
        public string Subtitle { get; set; }

        /// <summary>
        /// Gets or sets the Url. 
        /// </summary>
        [DataMember]
        public string Url { get; set; }

        /// <summary>
        /// Gets or sets the GameId. 
        /// </summary>
        [DataMember]
        public uint GameId { get; set; }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Contracts\Session\FullGameState.cs ===
﻿// <copyright file="FullGameState.cs" company="Microsoft">Copyright (c) 2009 All Right Reserved
// </copyright>
// <author>Amit Dhar</author>
// <email>amitdhar@microsoft.com</email>
// <date>2009-10-19</date>
// <summary>Contains the class definition for FullGameState class.</summary>
namespace AsyncMultiplayer.SessionCommon
{
    using System;
    using System.Runtime.Serialization;

    /// <summary>
    /// This class models the complete Game State in the session.
    /// </summary>
    [DataContract]
    public class FullGameState
    {
        /// <summary>
        /// Gets or sets the GameStateInfo for the GameState.
        /// </summary>
        /// <value>The GameStateInfo for the GameState.</value>
        [DataMember]
        public GameState GameStateInfo
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the GameData for the GameState.
        /// </summary>
        /// <value>The GameData for the GameState.</value>
        [DataMember]
        public byte[] GameData
        {
            get;
            set;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Contracts\Session\GameAction.cs ===
﻿// <copyright file="GameAction.cs" company="Microsoft">Copyright (c) 2009 All Right Reserved
// </copyright>
// <author>Amit Dhar</author>
// <email>amitdhar@microsoft.com</email>
// <date>2009-08-06</date>
// <summary>Contains the class definition for GameAction.</summary>

namespace AsyncMultiplayer.SessionCommon
{
    using System;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines the type of GameAction.
    /// </summary>
    public enum GameActionType
    {
        /// <summary>
        /// For game specific game actions.
        /// </summary>
        GameSpecific,

        /// <summary>
        /// For user nudges.
        /// </summary>
        UserNudge
    }

    /// <summary>
    /// This class models an action made in a game.
    /// </summary>
    [DataContract]
    public class GameAction
    {
        /// <summary>
        /// Gets or sets the action data.
        /// </summary>
        /// <value>The data which describes the action.</value>
        [DataMember]
        public byte[] ActionData
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the sequence number.
        /// </summary>
        /// <value>Sequence number for the game state when this action was taken.</value>
        [DataMember]
        public int SequenceNumber
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the action time.
        /// </summary>
        /// <value>The time when this action was taken.</value>
        [DataMember]
        public DateTime ActionTime
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the action type.
        /// </summary>
        /// <value>The data which defines the type of the game action.</value>
        [DataMember]
        public GameActionType ActionType
        {
            get;
            set;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Contracts\Session\GameResults.cs ===
﻿// <copyright file="GameResults.cs" company="Microsoft">Copyright (c) 2009 All Right Reserved
// </copyright>
// <author>Amit Dhar</author>
// <email>amitdhar@microsoft.com</email>
// <date>2009-11-12</date>
// <summary>Contains the class definition for GameResults.</summary>
namespace AsyncMultiplayer.SessionCommon
{
    using System.Collections.Generic;
    using System.Runtime.Serialization;
    using Gds.Contracts;

    /// <summary>
    /// This class models the game results at the end of a game.
    /// </summary>
    [DataContract]
    public class GameResults
    {
        /// <summary>
        /// Gets or sets the array of winning seat Indexes.
        /// </summary>
        [DataMember]
        public int[] WinningSeatIndexes
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the array of losing seat Indexes.
        /// </summary>
        [DataMember]
        public int[] LosingSeatIndexes
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the array of tie seat Indexes.
        /// </summary>
        [DataMember]
        public int[] TierSeatIndexes
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the array of game over seat indexes.
        /// </summary>
        [DataMember]
        public int[] GameOverSeatIndexes
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets a dictionary of game results.
        /// The key in the dictionary is the seat index.
        /// </summary>
        [DataMember]
        public Dictionary<int, GameResult> Results
        {
            get;
            set;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Contracts\Session\GameState.cs ===
﻿// <copyright file="GameState.cs" company="Microsoft">Copyright (c) 2009 All Right Reserved
// </copyright>
// <author>Amit Dhar</author>
// <email>amitdhar@microsoft.com</email>
// <date>2009-09-23</date>
// <summary>Contains the class definition for GameState class.</summary>
namespace AsyncMultiplayer.SessionCommon
{
    using System;
    using System.Runtime.Serialization;

    /// <summary>
    /// This class models the Game State in the session.
    /// </summary>
    [DataContract]
    public class GameState
    {
        /// <summary>
        /// Gets or sets the GameID for the GameState.
        /// </summary>
        /// <value>The GameID for the GameState.</value>
        [DataMember]
        public uint GameID
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the game Variant for the GameState.
        /// </summary>
        /// <value>The game Variant for the GameState.</value>
        [DataMember]
        public int Variant
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the SessionID for the GameState.
        /// </summary>
        /// <value>The SessionID for the GameState.</value>
        [DataMember]
        public string SessionID
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets a value indicating whether the GameState is complete.
        /// </summary>
        /// <value>Indicates whether the GameState is complete.</value>
        [DataMember]
        public bool IsComplete
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the LastModified value for the GameState.
        /// </summary>
        /// <value>The LastModified value for the GameState.</value>
        [DataMember]
        public DateTime LastModified
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the SequenceNumber for the GameState.
        /// </summary>
        /// <value>The SequenceNumber for the GameState.</value>
        [DataMember]
        public int SequenceNumber
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the ActiveSeatIndex for the GameState.
        /// </summary>
        /// <value>The ActiveSeatIndex for the GameState.</value>
        [DataMember]
        public int ActiveSeatIndex
        {
            get;
            set;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Contracts\Notifications\YourTurnNotification.cs ===
﻿//-------------------------------------------------------------------
// <copyright file="YourTurnNotification.cs" company="Microsoft">
//     Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>
//
// <author email="zhangxu">
//     Zhangwei Xu
// </author>
//
// <summary>
//  YourTurnNotification class
// </summary>
//
// <remarks/>
//
// <disclaimer/>
//
// <history date="08/17/2009">
//     Class created
// </history>
//-------------------------------------------------------------------

namespace AsyncMultiplayer.NotificationService
{
    using System;
    using System.Runtime.Serialization;

    /// <summary>
    /// Class to hold YourTurn notification data.
    /// </summary>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://schemas.datacontract.org/2004/07/AsyncMultiplayer.NotificationService", IsNullable = false)]
    [Serializable]
    [DataContract(Name = "YourTurnNotification")]
    public class YourTurnNotification : Notification
    {
        /// <summary>
        /// Initializes a new instance of the YourTurnNotification class.
        /// </summary>
        public YourTurnNotification()
            : base()
        {
            this.Type = NotificationType.YourTurn;
            this.IsUserVisible = true;
            this.Category = NotificationCategory.ToDo; 
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Contracts\Session\InactivityWarningBehavior.cs ===
﻿// <copyright file="InactivityWarningBehavior.cs" company="Microsoft">Copyright (c) 2009 All Right Reserved
// </copyright>
// <author>Amit Dhar</author>
// <email>amitdhar@microsoft.com</email>
// <date>2009-09-23</date>
// <summary>Contains the class definition for InactivityWarningBehavior class and associated enums.</summary>
namespace AsyncMultiplayer.SessionCommon
{
    /// <summary>
    /// Defines the types of actions that can be taken on an inactivity warning.
    /// </summary>
    public enum InactivityWarningAction
    {
        /// <summary>
        /// Represents an action of doing nothing.
        /// </summary>
        None,

        /// <summary>
        /// Represents an action of warning the inactive user.
        /// </summary>
        WarnOnly,

        /// <summary>
        /// Represents an action of kicking the inactive user out of the session.
        /// </summary>
        Kick
    }

    /// <summary>
    /// This class models the inactivity warning behavior.
    /// </summary>
    public class InactivityWarningBehavior
    {
        /// <summary>
        /// Gets or sets the InactivityWarningAction for the InactivityWarningBehavior.
        /// </summary>
        /// <value>The InactivityWarningAction for the InactivityWarningBehavior.</value>
        public InactivityWarningAction Action
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the Interval for the InactivityWarningBehavior.
        /// </summary>
        /// <value>The Interval for the InactivityWarningBehavior.</value>
        public int Interval
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the MaxNumberOfNudges after which a warning will be sent.
        /// </summary>
        /// <value>The MaxNumberOfNudges for the InactivityWarningBehavior.</value>
        public int MaxNumberOfNudges
        {
            get;
            set;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Contracts\Session\ModifiableGameState.cs ===
﻿// <copyright file="ModifiableGameState.cs" company="Microsoft">Copyright (c) 2009 All Right Reserved
// </copyright>
// <author>Amit Dhar</author>
// <email>amitdhar@microsoft.com</email>
// <date>2009-10-19</date>
// <summary>Contains the class definition for ModifiableGameState class.</summary>
namespace AsyncMultiplayer.SessionCommon
{
    using System;
    using System.Runtime.Serialization;

    /// <summary>
    /// This class models the Modifiable Game State,
    /// (parts of the game state that can be modified by pass thru client).
    /// </summary>
    [DataContract]
    public class ModifiableGameState
    {
        /// <summary>
        /// Gets or sets the GameData for the GameState.
        /// </summary>
        /// <value>The GameData for the GameState.</value>
        [DataMember]
        public byte[] GameData
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the ActiveSeatIndex for the GameState.
        /// </summary>
        /// <value>The ActiveSeatIndex for the GameState.</value>
        [DataMember]
        public int ActiveSeatIndex
        {
            get;
            set;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Contracts\Session\ModificationData.cs ===
﻿// <copyright file="ModificationData.cs" company="Microsoft">Copyright (c) 2009 All Right Reserved
// </copyright>
// <author>Amit Dhar</author>
// <email>amitdhar@microsoft.com</email>
// <date>2009-09-23</date>
// <summary>Contains the class definition and related enums for ModificationData.</summary>
namespace AsyncMultiplayer.SessionCommon
{
    using System.Runtime.Serialization;

    /// <summary>
    /// Models the modification data.
    /// </summary>
    [DataContract]
    public class ModificationData
    {
        /// <summary>
        /// Gets or sets a value indicating whether empty seats can be removed from the session.
        /// </summary>
        /// <value>The CanRemoveEmptySeats value for this ModificationData.</value>
        [DataMember]
        public bool CanRemoveEmptySeats
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the DisplayName for this ModificationData.
        /// </summary>
        /// <value>The DisplayName for this ModificationData.</value>
        [DataMember]
        public string DisplayName
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the InactivityWarningBehavior for this ModificationData.
        /// </summary>
        /// <value>The InactivityWarningBehavior for this ModificationData.</value>
        [DataMember]
        public InactivityWarningBehavior InactivityWarning
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets a value indicating whether this reserved field is true or false.
        /// </summary>
        [DataMember]
        public bool IsFriendsOnly
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets this reserved field.
        /// </summary>
        [DataMember]
        public int ReservedSeatsAvailable
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the SessionParameters for this ModificationData.
        /// </summary>
        /// <value>The SessionParameters for this ModificationData.</value>
        [DataMember]
        public byte[] SessionParameters
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the TotalSeatsAvailable for this ModificationData.
        /// </summary>
        /// <value>The TotalSeatsAvailable for this ModificationData.</value>
        [DataMember]
        public int TotalSeatsAvailable
        {
            get;
            set;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Contracts\Notifications\YouLoseNotification.cs ===
﻿//-------------------------------------------------------------------
// <copyright file="YouLoseNotification.cs" company="Microsoft">
//     Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>
//
// <author email="zhangxu">
//     Zhangwei Xu
// </author>
//
// <summary>
//  YouLoseNotification class
// </summary>
//
// <remarks/>
//
// <disclaimer/>
//
// <history date="08/17/2009">
//     Class created
// </history>
//-------------------------------------------------------------------

namespace AsyncMultiplayer.NotificationService
{
    using System;
    using System.Runtime.Serialization;

    /// <summary>
    /// Class to hold GameOver notification data.
    /// </summary>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://schemas.datacontract.org/2004/07/AsyncMultiplayer.NotificationService", IsNullable = false)]
    [Serializable]
    [DataContract(Name = "YouLoseNotification")]
    public class YouLoseNotification : Notification
    {
        /// <summary>
        /// Initializes a new instance of the YouLoseNotification class.
        /// </summary>
        public YouLoseNotification()
            : base()
        {
            this.Type = NotificationType.YouLose;
            this.IsUserVisible = true;
            this.Category = NotificationCategory.ToDo; 
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Contracts\Session\SessionEntry.cs ===
﻿// <copyright file="SessionEntry.cs" company="Microsoft">Copyright (c) 2009 All Right Reserved
// </copyright>
// <author>Amit Dhar</author>
// <email>amitdhar@microsoft.com</email>
// <date>2009-09-23</date>
// <summary>Contains the class definition for SessionEntry.</summary>
namespace AsyncMultiplayer.SessionCommon
{
    using System;
    using System.Runtime.Serialization;

    /// <summary>
    /// Models the session entries in a session summary.
    /// </summary>
    [DataContract]
    public class SessionEntry
    {
        /// <summary>
        /// Gets or sets the DisplayName for the session entry.
        /// </summary>
        /// <value>The DisplayName for the session entry.</value>
        [DataMember]
        public string DisplayName
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the GameID for the session entry.
        /// </summary>
        /// <value>The GameID for the session entry.</value>
        [DataMember]
        public uint GameID
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the LastModified DateTime for the session entry.
        /// </summary>
        /// <value>The LastModified LastModified for the session entry.</value>
        [DataMember]
        public DateTime LastModified
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the SessionID for the session entry.
        /// </summary>
        /// <value>The SessionID for the session entry.</value>
        [DataMember]
        public string SessionID
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the SessionParameters for the session entry.
        /// </summary>
        /// <value>The SessionParameters for the session entry.</value>
        [DataMember]
        public byte[] SessionParameters
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the CreationDate for the session entry.
        /// </summary>
        /// <value>The CreationDate for the session entry.</value>
        [DataMember]
        public DateTime CreationDate
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the LastModifiedBy information for the session entry.
        /// </summary>
        /// <value>The LastModifiedBy information for the session entry.</value>
        [DataMember]
        public SeatInfo LastModifiedBy
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets a value indicating whether the session is complete.
        /// </summary>
        /// <value>A value indicationg whether the session is complete.</value>
        [DataMember]
        public bool IsComplete
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the Variant for the session entry.
        /// </summary>
        /// <value>The Variant for the session entry.</value>
        [DataMember]
        public int Variant
        {
            get;
            set;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Contracts\Session\SessionQueryParameters.cs ===
﻿// <copyright file="SessionQueryParameters.cs" company="Microsoft">Copyright (c) 2010 All Right Reserved
// </copyright>
// <author>Amit Dhar</author>
// <email>amitdhar@microsoft.com</email>
// <date>2010-10-08</date>
// <summary>Contains the class definition for SessionQueryParameters class and associated enums.</summary>

namespace AsyncMultiplayer.SessionCommon
{
    /// <summary>
    /// Defines the session types.
    /// </summary>
    public enum ShowSessionType
    {
        /// <summary>
        /// Shows All sessions.
        /// </summary>
        All = 0,

        /// <summary>
        /// Shows the Active sessions only.
        /// </summary>
        Active = 1,

        /// <summary>
        /// Shows the InActive sessions only.
        /// </summary>
        InActive = 2
    }

    /// <summary>
    /// This class models the query parameters for QuerySessions.
    /// </summary>
    public class SessionQueryParameters
    {
        /// <summary>
        /// Gets or sets the GameID of the sessions to retrieve.
        /// </summary>
        public uint? GameID
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the game variant of the sessions to retrieve.
        /// </summary>
        public int? Variant
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the last sessionID retrieved in a previous call to QuerySessions.
        /// </summary>
        public string LastSessionID
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the maximum number of sessions to retrieve.
        /// </summary>
        public int? MaxSessions
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the type of sessions to retrieve.
        /// </summary>
        public ShowSessionType? ShowSessionType
        {
            get;
            set;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Contracts\Session\CreationData.cs ===
﻿// <copyright file="CreationData.cs" company="Microsoft">Copyright (c) 2009 All Right Reserved
// </copyright>
// <author>Amit Dhar</author>
// <email>amitdhar@microsoft.com</email>
// <date>2009-09-23</date>
// <summary>Contains the class definition for CreationData class.</summary>
namespace AsyncMultiplayer.SessionCommon
{
    using System;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines the policy executed when a player in the session leaves or is kicked out.
    /// </summary>
    public enum SessionLeavePolicy
    {
        /// <summary>
        /// User leaving the session receives a loss and the session is not marked complete.
        /// </summary>
        LeavingUserLoses,

        /// <summary>
        /// User leaving the session receives a loss and everyone else wins. The session is marked complete.
        /// </summary>
        LeavingUserLosesOpponentsWin,

        /// <summary>
        /// Nothing special happens when a user leaves a session.
        /// </summary>
        None
    }

    /// <summary>
    /// This class models the creation data passed during session creation.
    /// </summary>
    [DataContract]
    public class CreationData
    {
        /// <summary>
        /// Gets or sets the GameID for creation data.
        /// </summary>
        /// <value>The GameID for creation data.</value>
        [DataMember]
        public uint GameID
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the GameID for creation data.
        /// </summary>
        /// <value>The GameID for creation data.</value>
        [DataMember]
        public int Variant
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the TotalSeatsAvailable for creation data.
        /// </summary>
        /// <value>The TotalSeatsAvailable for creation data.</value>
        [DataMember]
        public int TotalSeatsAvailable
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets this reserved field.
        /// </summary>
        [DataMember]
        public int ReservedSeatsAvailable
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the SessionParameters for creation data.
        /// </summary>
        /// <value>The SessionParameters for creation data.</value>
        [DataMember]
        public byte[] SessionParameters
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the InactivityWarningBehavior for creation data.
        /// </summary>
        /// <value>The InactivityWarningBehavior for creation data.</value>
        [DataMember]
        public InactivityWarningBehavior InactivityWarning
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets a value indicating whether the empty seats can be removed from the session.
        /// </summary>
        /// <value>The CanRemoveEmptySeats for creation data.</value>
        [DataMember]
        public bool CanRemoveEmptySeats
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the DisplayName for creation data.
        /// </summary>
        /// <value>The DisplayName for creation data.</value>
        [DataMember]
        public string DisplayName
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the session leave policy for creation data.
        /// </summary>
        /// <value>The session leave policy for creation data.</value>
        [DataMember]
        public SessionLeavePolicy LeavePolicy
        {
            get;
            set;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Contracts\Session\PlatformType.cs ===
﻿using System;

namespace Leet.Core.Platforms
{
    public enum PlatformType : uint
    {
        Xbox1 = 0,
        XboxCom = 1,
        Xbox360 = 2,
        Marketplace = 3,
        PC = 4,
        Mobile = 5,
        WebGames = 6,
    }
    public enum PlatformBitMask :uint
    {
        /// <summary>
        ///  No platform.
        /// </summary>
        None = 0x0,

        /// <summary>
        ///  Windows mobile.
        /// </summary>
        WindowsPhone = 0x1,

        /// <summary>
        ///  Windows PC.
        /// </summary>
        Web = 0x2,

        /// <summary>
        ///  Console
        /// </summary>
        XboxConsole = 0x4,

        // <summary>
        ///  PC
        /// </summary>
        WindowsPc = 0x8,



        /// <summary>
        ///  All platforms.
        /// </summary>
        All = WindowsPhone | Web | XboxConsole | WindowsPc,
    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Contracts\Session\IdentityToken.cs ===
﻿// <copyright file="IdentityToken.cs" company="Microsoft">Copyright (c) 2009 All Right Reserved
// </copyright>
// <author>Amit Dhar</author>
// <email>amitdhar@microsoft.com</email>
// <date>2009-09-23</date>
// <summary>Contains the class definition for IdentityToken class and associated enums.</summary>
namespace AsyncMultiplayer.SessionCommon
{
    using System;

    /// <summary>
    /// This enum defines the types supported by the identity service.
    /// </summary>
    public enum IdentityServiceType
    {
        /// <summary>
        /// Represents a XUID.
        /// </summary>
        XUID
    }

    /// <summary>
    /// This class models the identity token supplied by the identity service.
    /// </summary>
    [Serializable]
    public class IdentityToken
    {
        /// <summary>
        /// Initializes a new instance of the IdentityToken class.
        /// </summary>
        public IdentityToken()
        {
        }

        /// <summary>
        /// Initializes a new instance of the IdentityToken class using the supplied
        /// IdentityServiceType, token and public token.
        /// </summary>
        /// <param name="type">IdentityServiceType for the IdentityToken.</param>
        /// <param name="token">The token for the IdentityToken.</param>
        /// <param name="publicToken">The public token for the IdentityToken.</param>
        public IdentityToken(IdentityServiceType type, string token, string publicToken)
        {
            this.ServiceType = type;
            this.Token = token;
            this.PublicToken = publicToken;
        }

        /// <summary>
        /// Initializes a new instance of the IdentityToken class using a Xuid and gamerTag.
        /// </summary>
        /// <param name="xuid">The xuid for which to create the identity token.</param>
        /// <param name="gamerTag">The gamerTag for which to create the identity token.</param>
        public IdentityToken(ulong xuid, string gamerTag)
        {
            this.ServiceType = IdentityServiceType.XUID;

            // Mandate 20 digits for Xuid, any missing digits will be padded by 0s.
            // Encode Xuid string as UTF8.
            string xuidString = xuid.ToString("D20");
            this.Token = xuidString;
            this.PublicToken = gamerTag;
        }

        /// <summary>
        /// Gets or sets the IdentityServiceType for the IdentityToken.
        /// </summary>
        /// <value>The IdentityServiceType for the IdentityToken.</value>
        public IdentityServiceType ServiceType
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the Token for the IdentityToken.
        /// </summary>
        /// <value>The Token value for the IdentityToken.</value>
        public string Token
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the public token for the IdentityToken.
        /// </summary>
        /// <value>The public token for the IdentityToken.</value>
        public string PublicToken
        {
            get;
            set;
        }

        /// <summary>
        /// Gets the string representation for the IdentityToken.
        /// </summary>
        /// <returns>The string representation for the IdentityToken.</returns>
        public new string ToString()
        {
            System.Text.Encoding encoding = new System.Text.UTF8Encoding();
            string identityTokenStr = this.ServiceType.ToString() + ":" + this.Token;
            return identityTokenStr;
        }

        /// <summary>
        /// Evaluates whether another IdentityToken object represents the same user.
        /// </summary>
        /// <param name="anotherIdentity">IdentityToken to be compared.</param>
        /// <returns>Whether the passed identity is the same as this identity.</returns>
        public bool Equals(IdentityToken anotherIdentity)
        {
            bool result;
            if (anotherIdentity.ServiceType == this.ServiceType && this.Token.Equals(anotherIdentity.Token))
            {
                result = true;
            }
            else
            {
                result = false;
            }

            return result;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Contracts\Session\ErrorCodeClasses.cs ===
// This is a generated file. Please don't modify directly.
//
// This file defines a number of classes which provide a symbolic way to
// reference instances of configuration items (e.g. Interfaces, Settings,
// etc.).
//
// It is generated from the /product/SharedSource/LIVEN.Common/ErrorCode.xml
// file. Please update that file and this code will get updated automatically
// by the build.

namespace LIVEN.Common.Diagnostics
{
    using System.Diagnostics;
    using System.Diagnostics.CodeAnalysis;
    using System.Threading;
    using Leet.Utils;





    [EventCategory(MessageIdBase = 10000, IncrementAmount = 1)]
    [SuppressMessage("Microsoft.StyleCop.CSharp.DocumentationRules", "SA1401:FieldsMustBePrivate",
    Justification = "Special class to define error codes.")]
    public class RewardsEvents
    {
        private const int Initialized = 1;
        private const int NotInitialized = 0;

        public static EventsCollection Events { get; set; }
        private static int isInitialized;

        // This function is re-entrant from other threads, only one of them will initialize this class.
        public static void Initialize(string eventSource)
        {
            if (NotInitialized == Interlocked.CompareExchange(ref isInitialized, Initialized, NotInitialized))
            {
                // Initialize Event Source
                Events = new EventsCollection(typeof(RewardsEvents), null);
            }
        }


        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 10000, Error = false, Facility = 10, Message = "Rewards service started.", TraceEventType = TraceEventType.Start)]
        public static int ServiceStarted = 10000;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 10001, Error = true, Facility = 10, Message = "Application Error has occurred: {0}\n", TraceEventType = TraceEventType.Error)]
        public static int ApplicationError = 10001;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 10002, Error = true, Facility = 10, Message = "Unexpected failure: {0}\n", TraceEventType = TraceEventType.Error)]
        public static int UnexpectedFailure = 10002;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 10003, Error = false, Facility = 10, Message = "Loaded configuration provider: {0}", TraceEventType = TraceEventType.Information)]
        public static int LoadedConfigProviderEvent = 10003;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 10004, Error = false, Facility = 10, Message = "Setting value has been updated and change has been vetoed. Restart the service to apply new setting\n Setting Name: {0}\nSetting Value (old): {1}\nSetting Value (new): {2}", TraceEventType = TraceEventType.Warning)]
        public static int SettingUpdatedWarningEvent = 10004;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 10005, Error = true, Facility = 10, Message = "Critical Exception during configuration provider setup: {0}\n{1}", TraceEventType = TraceEventType.Error)]
        public static int LoadConfigProviderExceptionEvent = 10005;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 10006, Error = true, Facility = 10, Message = "Sql Exception Error: {0}\n", TraceEventType = TraceEventType.Error)]
        public static int SqlExceptionError = 10006;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 10007, Error = true, Facility = 10, Message = "Authentication failure.", TraceEventType = TraceEventType.Warning)]
        public static int AuthenticationFailure = 10007;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 10008, Error = true, Facility = 10, Message = "Empty or Null GameResult object given.", TraceEventType = TraceEventType.Warning)]
        public static int NullGameResultObject = 10008;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 10009, Error = true, Facility = 10, Message = "GameResult object posted is invalid.", TraceEventType = TraceEventType.Warning)]
        public static int BadGameResultPost = 10009;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 10010, Error = true, Facility = 10, Message = "Submission does not have a valid associated X-Locale Header: {0}.", TraceEventType = TraceEventType.Warning)]
        public static int ValidLocaleNotProvided = 10010;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 10011, Error = true, Facility = 10, Message = "Submission does not have a valid associated X-Platform-Type Header: {0}.", TraceEventType = TraceEventType.Warning)]
        public static int ValidPlatformTypeNotProvided = 10011;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 10012, Error = true, Facility = 10, Message = "A ZEST VerifyPastPurchase request has return an error.", TraceEventType = TraceEventType.Warning)]
        public static int ZestVerifyPastPurchaseRequestError = 10012;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 10013, Error = true, Facility = 10, Message = "A ZEST SignIn request has return an error.", TraceEventType = TraceEventType.Warning)]
        public static int ZestSignInRequestError = 10013;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 10014, Error = true, Facility = 10, Message = "A duplicate GameResult is received: {0}", TraceEventType = TraceEventType.Warning)]
        public static int IdempotencyFilterDuplicateError = 10014;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 10015, Error = true, Facility = 10, Message = "GrantAchievements object posted is invalid.", TraceEventType = TraceEventType.Warning)]
        public static int BadGrantAchievementsPost = 10015;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 10016, Error = true, Facility = 10, Message = "A LiveCache request has return an error.", TraceEventType = TraceEventType.Warning)]
        public static int LiveCacheError = 10016;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 10017, Error = true, Facility = 10, Message = "User has not purchased this title.", TraceEventType = TraceEventType.Warning)]
        public static int ZestNotPurchased = 10017;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 10018, Error = true, Facility = 10, Message = "User has purchased this item but there is a mismatch LiveEngagementId and AppId.", TraceEventType = TraceEventType.Warning)]
        public static int ZestLiveEngagementMismatchError = 10018;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 10019, Error = true, Facility = 10, Message = "An unknown error code was returned while calling Zest.", TraceEventType = TraceEventType.Warning)]
        public static int ZestUnknownErrorCode = 10019;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 10020, Error = true, Facility = 10, Message = "No cookie returned. The user is invalid or user has not agreed to the terms of service.", TraceEventType = TraceEventType.Warning)]
        public static int ZestSignInInvalidXuid = 10020;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 10021, Error = true, Facility = 10, Message = "Submission does not have a valid associated titleId: {0}.", TraceEventType = TraceEventType.Warning)]
        public static int ValidTitleIdNotProvided = 10021;

    }


    [EventCategory(MessageIdBase = 11000, IncrementAmount = 1)]
    [SuppressMessage("Microsoft.StyleCop.CSharp.DocumentationRules", "SA1401:FieldsMustBePrivate",
    Justification = "Special class to define error codes.")]
    public class GarbageCollectorServiceEvents
    {
        private const int Initialized = 1;
        private const int NotInitialized = 0;

        public static EventsCollection Events { get; set; }
        private static int isInitialized;

        // This function is re-entrant from other threads, only one of them will initialize this class.
        public static void Initialize(string eventSource)
        {
            if (NotInitialized == Interlocked.CompareExchange(ref isInitialized, Initialized, NotInitialized))
            {
                // Initialize Event Source
                Events = new EventsCollection(typeof(GarbageCollectorServiceEvents), null);
            }
        }


        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 11000, Error = true, Facility = 11, Message = "Unexpected exception in garbage collector service: {0}", TraceEventType = TraceEventType.Error)]
        public static int UnexpectedExceptionInService = 11000;

    }


    [EventCategory(MessageIdBase = 12000, IncrementAmount = 1)]
    [SuppressMessage("Microsoft.StyleCop.CSharp.DocumentationRules", "SA1401:FieldsMustBePrivate",
    Justification = "Special class to define error codes.")]
    public class SystemNudgeServiceEvents
    {
        private const int Initialized = 1;
        private const int NotInitialized = 0;

        public static EventsCollection Events { get; set; }
        private static int isInitialized;

        // This function is re-entrant from other threads, only one of them will initialize this class.
        public static void Initialize(string eventSource)
        {
            if (NotInitialized == Interlocked.CompareExchange(ref isInitialized, Initialized, NotInitialized))
            {
                // Initialize Event Source
                Events = new EventsCollection(typeof(SystemNudgeServiceEvents), null);
            }
        }


        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 12000, Error = true, Facility = 12, Message = "Unexpected exception in system nudge service: {0}", TraceEventType = TraceEventType.Error)]
        public static int UnexpectedExceptionInService = 12000;

    }


    [EventCategory(MessageIdBase = 20000, IncrementAmount = 1)]
    [SuppressMessage("Microsoft.StyleCop.CSharp.DocumentationRules", "SA1401:FieldsMustBePrivate",
    Justification = "Special class to define error codes.")]
    public class UserDataEvents
    {
        private const int Initialized = 1;
        private const int NotInitialized = 0;

        public static EventsCollection Events { get; set; }
        private static int isInitialized;

        // This function is re-entrant from other threads, only one of them will initialize this class.
        public static void Initialize(string eventSource)
        {
            if (NotInitialized == Interlocked.CompareExchange(ref isInitialized, Initialized, NotInitialized))
            {
                // Initialize Event Source
                Events = new EventsCollection(typeof(UserDataEvents), null);
            }
        }


        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 20000, Error = false, Facility = 20, Message = "User Data service started.", TraceEventType = TraceEventType.Start)]
        public static int ServiceStarted = 20000;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 20001, Error = true, Facility = 20, Message = "Application Error has occurred: {0}\n", TraceEventType = TraceEventType.Error)]
        public static int ApplicationError = 20001;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 20002, Error = true, Facility = 20, Message = "Unexpected failure: {0}\n", TraceEventType = TraceEventType.Error)]
        public static int UnexpectedFailure = 20002;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 20003, Error = true, Facility = 20, Message = "Authentication failure.", TraceEventType = TraceEventType.Warning)]
        public static int AuthenticationFailure = 20003;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 20004, Error = true, Facility = 20, Message = "Invalid argument or bad request", TraceEventType = TraceEventType.Warning)]
        public static int InvalidArgument = 20004;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 20005, Error = true, Facility = 20, Message = "A LiveCache request has return an error.", TraceEventType = TraceEventType.Warning)]
        public static int LiveCacheError = 20005;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 20006, Error = true, Facility = 20, Message = "Sql Exception Error: {0}\n", TraceEventType = TraceEventType.Warning)]
        public static int SqlExceptionError = 20006;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 20007, Error = true, Facility = 20, Message = "Submission does not have a valid associated titleId: {0}.", TraceEventType = TraceEventType.Warning)]
        public static int ValidTitleIdNotProvided = 20007;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 20008, Error = true, Facility = 20, Message = "Submission does not have a valid associated X-Platform-Type Header: {0}.", TraceEventType = TraceEventType.Warning)]
        public static int ValidPlatformTypeNotProvided = 20008;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 20009, Error = true, Facility = 20, Message = "Submission does not have a valid associated X-Locale Header: {0}.", TraceEventType = TraceEventType.Warning)]
        public static int ValidLocaleNotProvided = 20009;

    }


    [EventCategory(MessageIdBase = 30000, IncrementAmount = 1)]
    [SuppressMessage("Microsoft.StyleCop.CSharp.DocumentationRules", "SA1401:FieldsMustBePrivate",
    Justification = "Special class to define error codes.")]
    public class RulesEvents
    {
        private const int Initialized = 1;
        private const int NotInitialized = 0;

        public static EventsCollection Events { get; set; }
        private static int isInitialized;

        // This function is re-entrant from other threads, only one of them will initialize this class.
        public static void Initialize(string eventSource)
        {
            if (NotInitialized == Interlocked.CompareExchange(ref isInitialized, Initialized, NotInitialized))
            {
                // Initialize Event Source
                Events = new EventsCollection(typeof(RulesEvents), null);
            }
        }


        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 30000, Error = false, Facility = 30, Message = "Rules service leaderboard stats processing started.", TraceEventType = TraceEventType.Start)]
        public static int RulesServiceStarted = 30000;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 30001, Error = false, Facility = 30, Message = "An exception occurred while starting the service.", TraceEventType = TraceEventType.Error)]
        public static int RulesServiceStartupFailure = 30001;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 30002, Error = false, Facility = 30, Message = "Rules service leaderboard stats processing stopped.", TraceEventType = TraceEventType.Stop)]
        public static int RulesServiceStopped = 30002;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 30003, Error = false, Facility = 30, Message = "An exception occurred while stopping rules service.", TraceEventType = TraceEventType.Error)]
        public static int RulesServiceStoppedFailure = 30003;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 30004, Error = false, Facility = 30, Message = "A Sql exception has occurred.", TraceEventType = TraceEventType.Warning)]
        public static int SqlExceptionError = 30004;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 30005, Error = false, Facility = 30, Message = "The Sql service broker queue is disabled.", TraceEventType = TraceEventType.Error)]
        public static int QueueDisabledError = 30005;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 30006, Error = false, Facility = 30, Message = "Rules driver in the rules service failed to initialized.", TraceEventType = TraceEventType.Error)]
        public static int RulesDriverInitializationFailed = 30006;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 30007, Error = false, Facility = 30, Message = "Event retrieval from the SQL service broker queue has failed.", TraceEventType = TraceEventType.Warning)]
        public static int BadMessageRetrieved = 30007;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 30008, Error = false, Facility = 30, Message = "An exception occurred while evaluating a game event.", TraceEventType = TraceEventType.Warning)]
        public static int EvaluateGameEventFailed = 30008;

    }


    [EventCategory(MessageIdBase = 40000, IncrementAmount = 1)]
    [SuppressMessage("Microsoft.StyleCop.CSharp.DocumentationRules", "SA1401:FieldsMustBePrivate",
    Justification = "Special class to define error codes.")]
    public class GMSEvents
    {
        private const int Initialized = 1;
        private const int NotInitialized = 0;

        public static EventsCollection Events { get; set; }
        private static int isInitialized;

        // This function is re-entrant from other threads, only one of them will initialize this class.
        public static void Initialize(string eventSource)
        {
            if (NotInitialized == Interlocked.CompareExchange(ref isInitialized, Initialized, NotInitialized))
            {
                // Initialize Event Source
                Events = new EventsCollection(typeof(GMSEvents), null);
            }
        }


        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 40000, Error = true, Facility = 40, Message = "GMS Service was started", TraceEventType = TraceEventType.Information)]
        public static int ServiceStarted = 40000;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 40001, Error = true, Facility = 40, Message = "GMS Service was stopped", TraceEventType = TraceEventType.Information)]
        public static int ServiceStopped = 40001;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 40002, Error = true, Facility = 40, Message = "GMS Service hit a fatal Sql Exception when trying to connect to database", TraceEventType = TraceEventType.Error)]
        public static int SqlException = 40002;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 40002, Error = true, Facility = 40, Message = "GMS Ingestion service hit an error when loading xml", TraceEventType = TraceEventType.Warning)]
        public static int ErrorLoadingXml = 40002;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 40002, Error = true, Facility = 40, Message = "GMS Ingestion failed to ingest a game", TraceEventType = TraceEventType.Warning)]
        public static int ErrorConfiguringGame = 40002;

    }


    [EventCategory(MessageIdBase = 50000, IncrementAmount = 1)]
    [SuppressMessage("Microsoft.StyleCop.CSharp.DocumentationRules", "SA1401:FieldsMustBePrivate",
    Justification = "Special class to define error codes.")]
    public class STSEvents
    {
        private const int Initialized = 1;
        private const int NotInitialized = 0;

        public static EventsCollection Events { get; set; }
        private static int isInitialized;

        // This function is re-entrant from other threads, only one of them will initialize this class.
        public static void Initialize(string eventSource)
        {
            if (NotInitialized == Interlocked.CompareExchange(ref isInitialized, Initialized, NotInitialized))
            {
                // Initialize Event Source
                Events = new EventsCollection(typeof(STSEvents), null);
            }
        }


        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 50000, Error = true, Facility = 50, Message = "Security Token Service was started", TraceEventType = TraceEventType.Information)]
        public static int ServiceStarted = 50000;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 50001, Error = true, Facility = 50, Message = "Security Token Service was stopped", TraceEventType = TraceEventType.Information)]
        public static int ServiceStopped = 50001;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 50002, Error = true, Facility = 50, Message = "A LiveCache request has return an error.", TraceEventType = TraceEventType.Warning)]
        public static int LiveCacheError = 50002;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 50003, Error = true, Facility = 50, Message = "An unknown error occurred.", TraceEventType = TraceEventType.Warning)]
        public static int UnknownError = 50003;

    }


    [EventCategory(MessageIdBase = 60000, IncrementAmount = 1)]
    [SuppressMessage("Microsoft.StyleCop.CSharp.DocumentationRules", "SA1401:FieldsMustBePrivate",
    Justification = "Special class to define error codes.")]
    public class UserDataPartnerEvents
    {
        private const int Initialized = 1;
        private const int NotInitialized = 0;

        public static EventsCollection Events { get; set; }
        private static int isInitialized;

        // This function is re-entrant from other threads, only one of them will initialize this class.
        public static void Initialize(string eventSource)
        {
            if (NotInitialized == Interlocked.CompareExchange(ref isInitialized, Initialized, NotInitialized))
            {
                // Initialize Event Source
                Events = new EventsCollection(typeof(UserDataPartnerEvents), null);
            }
        }


        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 60000, Error = false, Facility = 60, Message = "User Data Partner service started.", TraceEventType = TraceEventType.Start)]
        public static int ServiceStarted = 60000;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 60001, Error = true, Facility = 60, Message = "AuthenticationFailure.", TraceEventType = TraceEventType.Warning)]
        public static int AuthenticationFailure = 60001;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 60002, Error = true, Facility = 60, Message = "Invalid argument or bad request", TraceEventType = TraceEventType.Warning)]
        public static int InvalidArgument = 60002;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 60003, Error = true, Facility = 60, Message = "Application Error has occurred: {0}\n", TraceEventType = TraceEventType.Error)]
        public static int ApplicationError = 60003;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 60004, Error = true, Facility = 60, Message = "User is not eligible for changing gamertag.\n", TraceEventType = TraceEventType.Warning)]
        public static int ChangeGamertagNotEligible = 60004;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 60005, Error = true, Facility = 60, Message = "Gamertag is invalid.\n", TraceEventType = TraceEventType.Warning)]
        public static int ChangeGamertagInvalidPattern = 60005;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 60006, Error = true, Facility = 60, Message = "An error has occured changing gamertag.\n", TraceEventType = TraceEventType.Warning)]
        public static int ChangeGamertagError = 60006;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 60007, Error = true, Facility = 60, Message = "Gamertag does not exist.\n", TraceEventType = TraceEventType.Warning)]
        public static int GamertagDoesNotExist = 60007;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 60008, Error = true, Facility = 60, Message = "AuthorizationFailure.", TraceEventType = TraceEventType.Warning)]
        public static int AuthorizationFailure = 60008;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 60009, Error = true, Facility = 60, Message = "Submission does not have a valid associated titleId: {0}.", TraceEventType = TraceEventType.Warning)]
        public static int ValidTitleIdNotProvided = 60009;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 60010, Error = true, Facility = 60, Message = "Submission does not have a valid associated X-Platform-Type Header: {0}.", TraceEventType = TraceEventType.Warning)]
        public static int ValidPlatformTypeNotProvided = 60010;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 60011, Error = true, Facility = 60, Message = "Submission does not have a valid associated X-Locale Header: {0}.", TraceEventType = TraceEventType.Warning)]
        public static int ValidLocaleNotProvided = 60011;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 60012, Error = true, Facility = 60, Message = "LivecacheUserThrottleException is hit.", TraceEventType = TraceEventType.Warning)]
        public static int LivecacheUserThrottledException = 60012;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 60013, Error = true, Facility = 60, Message = "LivecacheResponseException is hit.", TraceEventType = TraceEventType.Warning)]
        public static int LivecacheResponseException = 60013;

    }


    [EventCategory(MessageIdBase = 7000, IncrementAmount = 1)]
    [SuppressMessage("Microsoft.StyleCop.CSharp.DocumentationRules", "SA1401:FieldsMustBePrivate",
    Justification = "Special class to define error codes.")]
    public class SessionMaintenanceEvents
    {
        private const int Initialized = 1;
        private const int NotInitialized = 0;

        public static EventsCollection Events { get; set; }
        private static int isInitialized;

        // This function is re-entrant from other threads, only one of them will initialize this class.
        public static void Initialize(string eventSource)
        {
            if (NotInitialized == Interlocked.CompareExchange(ref isInitialized, Initialized, NotInitialized))
            {
                // Initialize Event Source
                Events = new EventsCollection(typeof(SessionMaintenanceEvents), null);
            }
        }


        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 7003, Error = true, Facility = 7, Message = "Unhandled exception in ProcessSessions worker thread, Partition: {0}", TraceEventType = TraceEventType.Error)]
        public static int UnhandledExceptionInProcessSessionsThread = 7003;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 7004, Error = true, Facility = 7, Message = "WebException thrown in while querying data, Partition: {0}", TraceEventType = TraceEventType.Error)]
        public static int WebExceptionInSendSystemNudges = 7004;

    }


    [EventCategory(MessageIdBase = 8000, IncrementAmount = 1)]
    [SuppressMessage("Microsoft.StyleCop.CSharp.DocumentationRules", "SA1401:FieldsMustBePrivate",
    Justification = "Special class to define error codes.")]
    public class NotificationEvents
    {
        private const int Initialized = 1;
        private const int NotInitialized = 0;

        public static EventsCollection Events { get; set; }
        private static int isInitialized;

        // This function is re-entrant from other threads, only one of them will initialize this class.
        public static void Initialize(string eventSource)
        {
            if (NotInitialized == Interlocked.CompareExchange(ref isInitialized, Initialized, NotInitialized))
            {
                // Initialize Event Source
                Events = new EventsCollection(typeof(NotificationEvents), null);
            }
        }


        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 8000, Error = true, Facility = 8, Message = "Unexpected failure: {0}", TraceEventType = TraceEventType.Error)]
        public static int UnexpectedFailure = 8000;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 8001, Error = true, Facility = 8, Message = "Azure storage access failure: {0}", TraceEventType = TraceEventType.Error)]
        public static int AzureStorageAccessFailure = 8001;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 8002, Error = true, Facility = 8, Message = "Feature not implemented.", TraceEventType = TraceEventType.Error)]
        public static int NotImplemented = 8002;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 8003, Error = true, Facility = 8, Message = "Queue access failure.", TraceEventType = TraceEventType.Error)]
        public static int QueueAccessFailure = 8003;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 8004, Error = false, Facility = 8, Message = "Notification service started.", TraceEventType = TraceEventType.Information)]
        public static int ServiceStarted = 8004;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 8005, Error = false, Facility = 8, Message = "Notification service stopped.", TraceEventType = TraceEventType.Information)]
        public static int ServiceStopped = 8005;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 8006, Error = true, Facility = 8, Message = "Too many invites sent in a hour.", TraceEventType = TraceEventType.Information)]
        public static int QuotaExceeded = 8006;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 8007, Error = true, Facility = 8, Message = "Invalid argument or bad request: {0}", TraceEventType = TraceEventType.Information)]
        public static int InvalidArgument = 8007;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 8008, Error = true, Facility = 8, Message = "Not Authorized.", TraceEventType = TraceEventType.Information)]
        public static int AuthenticationFailure = 8008;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 8009, Error = true, Facility = 8, Message = "Invite Email Template not found", TraceEventType = TraceEventType.Error)]
        public static int InviteEmailTemplateNotFound = 8009;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 8010, Error = true, Facility = 8, Message = "Invite Email Template Initialization failed", TraceEventType = TraceEventType.Error)]
        public static int InviteEmailTemplateInitFailed = 8010;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 8011, Error = true, Facility = 8, Message = "Invite Email Template: Duplicated entries", TraceEventType = TraceEventType.Error)]
        public static int InviteEmailTemplateDuplicatedEntries = 8011;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 8012, Error = true, Facility = 8, Message = "Error connecting SMTP server", TraceEventType = TraceEventType.Error)]
        public static int SmtpServerConnectionError = 8012;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 8013, Error = true, Facility = 8, Message = "SMTP Server Invalid Operation", TraceEventType = TraceEventType.Error)]
        public static int SmtpServerInvalidOperation = 8013;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 8014, Error = true, Facility = 8, Message = "Notification internal NT service failed to start: \n{0}", TraceEventType = TraceEventType.Error)]
        public static int ServiceFailedToStart = 8014;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 8015, Error = true, Facility = 8, Message = "Notification internal NT service failed to stop: \n{0}", TraceEventType = TraceEventType.Error)]
        public static int ServiceFailedToStop = 8015;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 8016, Error = true, Facility = 8, Message = "Notification internal NT service stopped unexpectedly: \n{0}", TraceEventType = TraceEventType.Error)]
        public static int ServiceStoppedUnexpectedly = 8016;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 8017, Error = true, Facility = 8, Message = "Notification internal NT service hit a fatal Sql Exception: \n{0}", TraceEventType = TraceEventType.Error)]
        public static int SqlException = 8017;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 8018, Error = true, Facility = 8, Message = "Unexpected Exception in notification garbage collector plugin, stopping the notification garbage collection run.", TraceEventType = TraceEventType.Error)]
        public static int UnexpectedExceptionInNotificationGarbageCollector = 8018;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 8019, Error = true, Facility = 8, Message = "Retriable exception is caught in processing notification", TraceEventType = TraceEventType.Warning)]
        public static int RetriableError = 8019;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 8020, Error = true, Facility = 8, Message = "Exception is caught in processing notification.", TraceEventType = TraceEventType.Error)]
        public static int ErrorProcessingNotification = 8020;

    }


    [EventCategory(MessageIdBase = 9000, IncrementAmount = 1)]
    [SuppressMessage("Microsoft.StyleCop.CSharp.DocumentationRules", "SA1401:FieldsMustBePrivate",
    Justification = "Special class to define error codes.")]
    public class SessionServiceEvents
    {
        private const int Initialized = 1;
        private const int NotInitialized = 0;

        public static EventsCollection Events { get; set; }
        private static int isInitialized;

        // This function is re-entrant from other threads, only one of them will initialize this class.
        public static void Initialize(string eventSource)
        {
            if (NotInitialized == Interlocked.CompareExchange(ref isInitialized, Initialized, NotInitialized))
            {
                // Initialize Event Source
                Events = new EventsCollection(typeof(SessionServiceEvents), null);
            }
        }


        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9000, Error = true, Facility = 9, Message = "GameID should be an unsigned integer, GameID: {0}", TraceEventType = TraceEventType.Warning)]
        public static int InvalidGameIDFormat = 9000;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9001, Error = true, Facility = 9, Message = "User is not allowed to query a session he/she is not in", TraceEventType = TraceEventType.Warning)]
        public static int UserNotAllowedToGetStateInSession = 9001;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9002, Error = true, Facility = 9, Message = "Session not found in the session store, SessionID: {0}, GameID: {1}", TraceEventType = TraceEventType.Warning)]
        public static int SessionNotFoundInAzureStore = 9002;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9003, Error = true, Facility = 9, Message = "Game data not found in the Azure game data store, SessionID: {0}, GameID: {1}, fileName: {2}", TraceEventType = TraceEventType.Warning)]
        public static int GameDataNotFoundInAzureStore = 9003;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9004, Error = true, Facility = 9, Message = "GameID should be an unsigned integer, GameID: {0}", TraceEventType = TraceEventType.Warning)]
        public static int InvalidGameIDFormatWhilePostingGameAction = 9004;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9005, Error = true, Facility = 9, Message = "This user: {0} is not allowed to set state in the session: SessionID: {1}, GameID: {2}", TraceEventType = TraceEventType.Warning)]
        public static int UserNotAllowedToSetStateInThisSession = 9005;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9006, Error = true, Facility = 9, Message = "This user: {0} is not allowed to submit game action to the session: SessionID: {1}, GameID: {2}", TraceEventType = TraceEventType.Warning)]
        public static int UserNotAllowedToSubmitActionToSession = 9006;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9008, Error = true, Facility = 9, Message = "Cannot set game state if the game is not a passthrough server game, SessionID: {0}, GameID: {1}", TraceEventType = TraceEventType.Warning)]
        public static int SetGameStateNotAllowedForNonPassthruGames = 9008;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9009, Error = true, Facility = 9, Message = "GameID should be an unsigned integer, GameID: {0}", TraceEventType = TraceEventType.Warning)]
        public static int InvalidGameIDFormatWhileSettingGameState = 9009;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9010, Error = true, Facility = 9, Message = "No owner found for this session, cannot modify game state. SessionID: {0}, GameID: {1}", TraceEventType = TraceEventType.Error)]
        public static int NoOwnerFoundForTheSession = 9010;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9011, Error = true, Facility = 9, Message = "The user is not allowed to modify the game state for this session. SessionID: {0}, GameID: {1}", TraceEventType = TraceEventType.Warning)]
        public static int UserNotAllowedToModifyGameStateForTheSession = 9011;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9012, Error = true, Facility = 9, Message = "Only the session owner can modify the game state for this session with a missing active user. SessionID: {0}, GameID: {1}", TraceEventType = TraceEventType.Warning)]
        public static int OnlySessionOwnerCanModifyGameState = 9012;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9013, Error = true, Facility = 9, Message = "Storage object passed for Modify is invalid", TraceEventType = TraceEventType.Error)]
        public static int StorageObjectPassedForModifyIsInvalid = 9013;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9014, Error = true, Facility = 9, Message = "Error on provisioning Azure storage. SessionID: {0}, GameID: {1}", TraceEventType = TraceEventType.Error)]
        public static int ErrorOnProvisioningAzureStorage = 9014;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9015, Error = true, Facility = 9, Message = "Error on deprovisioning Azure storage. SessionID: {0}, GameID: {1}", TraceEventType = TraceEventType.Error)]
        public static int ErrorOnDeprovisioningAzureStorage = 9015;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9016, Error = true, Facility = 9, Message = "Error on enumerating files in Azure storage. SessionID: {0}, GameID: {1}", TraceEventType = TraceEventType.Error)]
        public static int ErrorOnEnumeratingFilesInAzureStorage = 9016;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9019, Error = true, Facility = 9, Message = "Error while saving Azure Game Data Blob. SessionID: {0}, GameID: {1}, FileName: {2}", TraceEventType = TraceEventType.Error)]
        public static int ErrorWhileSavingAzureBlob = 9019;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9020, Error = true, Facility = 9, Message = "Error while querying Azure Game Data Blob. SessionID: {0}, GameID: {1}, FileName: {2}", TraceEventType = TraceEventType.Error)]
        public static int ErrorWhileQueryingAzureBlob = 9020;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9021, Error = true, Facility = 9, Message = "Error while deleting Azure Game Data Blob. SessionID: {0}, GameID: {1}, FileName: {2}", TraceEventType = TraceEventType.Error)]
        public static int ErrorWhileDeletingAzureBlob = 9021;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9022, Error = true, Facility = 9, Message = "OnSubmitGameAction for game specific actions is not implemented in Passthru Game Logic Module. SessionID: {0}, GameID: {1}", TraceEventType = TraceEventType.Error)]
        public static int OnSubmitGameActionNotImplementedInPassthru = 9022;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9023, Error = true, Facility = 9, Message = "GameID inconsistent in input parameters. GameID: {0}, creationData.GameID: {1}", TraceEventType = TraceEventType.Warning)]
        public static int GameIDInconsistentInInputParameters = 9023;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9024, Error = true, Facility = 9, Message = "Error while creating Session. GameID: {0}, CreationData: {1}", TraceEventType = TraceEventType.Error)]
        public static int ErrorWhileCreatingSession = 9024;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9026, Error = true, Facility = 9, Message = "Error on trying to Serialize SeatInfo. SessionID: {0}, GameID: {1}", TraceEventType = TraceEventType.Error)]
        public static int UnableToSerializeSeatInfo = 9026;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9027, Error = true, Facility = 9, Message = "Error on trying to DeSerialize SeatInfo. SessionID: {0}, GameID: {1}", TraceEventType = TraceEventType.Error)]
        public static int UnableToDeSerializeSeatInfo = 9027;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9029, Error = true, Facility = 9, Message = "Add player failed: No more seats available in this session. SessionID: {0}, GameID: {1}", TraceEventType = TraceEventType.Warning)]
        public static int NoMoreSeatsInSession = 9029;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9030, Error = true, Facility = 9, Message = "Add player failed: Incorrect seat index specified.  SessionID: {0}, GameID: {1}", TraceEventType = TraceEventType.Warning)]
        public static int InvalidSeatIndex = 9030;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9031, Error = true, Facility = 9, Message = "Add player failed: this seat is already taken in this session. SessionID: {0}, GameID: {1}", TraceEventType = TraceEventType.Warning)]
        public static int SeatAlreadyTaken = 9031;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9033, Error = true, Facility = 9, Message = "Error while trying to serialize SeatInfo. SessionID: {0}, GameID: {1}", TraceEventType = TraceEventType.Error)]
        public static int ErrorWhileSerializingSeatInfo = 9033;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9034, Error = true, Facility = 9, Message = "Error while trying to AddPlayer in Azure. SessionID: {0}, GameID: {1}", TraceEventType = TraceEventType.Error)]
        public static int ErrorWhileTryingToAddPlayerInAzure = 9034;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9035, Error = true, Facility = 9, Message = "GameID should be an unsigned integer. GameID: {0}", TraceEventType = TraceEventType.Warning)]
        public static int InvalidGameIDFormatOnCreate = 9035;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9036, Error = true, Facility = 9, Message = "GameID should be an unsigned integer. SessionID: {0}, GameID: {1}", TraceEventType = TraceEventType.Warning)]
        public static int InvalidGameIDFormatOnLeave = 9036;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9037, Error = true, Facility = 9, Message = "GameID should be an unsigned integer. SessionID: {0}, GameID: {1}", TraceEventType = TraceEventType.Warning)]
        public static int InvalidGameIDFormatOnModify = 9037;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9038, Error = true, Facility = 9, Message = "GameID should be an unsigned integer. SessionID: {0}, GameID: {1}", TraceEventType = TraceEventType.Warning)]
        public static int InvalidGameIDFormatOnView = 9038;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9039, Error = true, Facility = 9, Message = "Cannot remove player: the player is not in the session. SessionID: {0}, GameID: {1}", TraceEventType = TraceEventType.Warning)]
        public static int PlayerIsNotInSession = 9039;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9040, Error = true, Facility = 9, Message = "Error while serializing SeatInfo during RemovePlayer. SessionID: {0}, GameID: {1}", TraceEventType = TraceEventType.Error)]
        public static int ErrorWhileSerializingSeatInfoWhileRemove = 9040;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9041, Error = true, Facility = 9, Message = "Azure error during RemovePlayer. SessionID: {0}, GameID: {1}", TraceEventType = TraceEventType.Error)]
        public static int AzureErrorWhileRemovingPlayer = 9041;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9042, Error = true, Facility = 9, Message = "New SessionState not found during RemovingPlayer. SessionID: {0}, GameID: {1}", TraceEventType = TraceEventType.Error)]
        public static int NewSessionStateNotFoundWhileRemovingPlayer = 9042;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9043, Error = true, Facility = 9, Message = "Azure error while deleting SessionEntry. SessionID: {0}, GameID: {1}", TraceEventType = TraceEventType.Warning)]
        public static int AzureErrorWhileDeletingSessionEntry = 9043;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9045, Error = true, Facility = 9, Message = "Deserialization error while modifying the session. SessionID: {0}, GameID: {1}", TraceEventType = TraceEventType.Error)]
        public static int DeserializationErrorWhileModifying = 9045;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9046, Error = true, Facility = 9, Message = "No owner found for this session, cannot modify. SessionID: {0}, GameID: {1}", TraceEventType = TraceEventType.Warning)]
        public static int NoOwnerFoundCannotModifySession = 9046;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9047, Error = true, Facility = 9, Message = "The user is not allowed to modify the session. SessionID: {0}, GameID: {1}", TraceEventType = TraceEventType.Warning)]
        public static int UserNotAllowedToModifySession = 9047;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9048, Error = true, Facility = 9, Message = "Error while trying to get SessionEntry list in ModifySession. SessionID: {0}, GameID: {1}", TraceEventType = TraceEventType.Warning)]
        public static int ErrorWhileTryingToGetSessionEntriesInModify = 9048;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9049, Error = true, Facility = 9, Message = "Error while trying to QuerySessions. User: {0}", TraceEventType = TraceEventType.Warning)]
        public static int ErrorWhileTryingToQuerySessions = 9049;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9050, Error = true, Facility = 9, Message = "Deserialization error while deleting the session. SessionID: {0}, GameID: {1}", TraceEventType = TraceEventType.Error)]
        public static int DeserializationErrorWhileDeleting = 9050;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9055, Error = true, Facility = 9, Message = "Active player not found in the session. SessionID: {0}, GameID: {1}", TraceEventType = TraceEventType.Error)]
        public static int ActivePlayerNotFound = 9055;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9058, Error = true, Facility = 9, Message = "User Nudged player not found in the session. SessionID: {0}, GameID: {1}, Nudged player SeatIndex: {2}", TraceEventType = TraceEventType.Warning)]
        public static int UserNudgedPlayerNotFound = 9058;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9060, Error = true, Facility = 9, Message = "GameID should be an unsigned integer, GameID: {0}", TraceEventType = TraceEventType.Warning)]
        public static int InvalidGameIDFormatWhilePostingGameResults = 9060;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9061, Error = true, Facility = 9, Message = "This user: {0} is not allowed to submit game results for the session: SessionID: {1}, GameID: {2}", TraceEventType = TraceEventType.Warning)]
        public static int UserNotAllowedToSubmitResultsForSession = 9061;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9062, Error = true, Facility = 9, Message = "Post GameEnd not allowed for non-Passthrough server games, SessionID: {0}, GameID: {1}", TraceEventType = TraceEventType.Warning)]
        public static int PostGameEndNotAllowedForNonPassthruGames = 9062;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9063, Error = true, Facility = 9, Message = "GameID or Variant is not present in Game Metadata System, cannot create session, GameID: {0}, Variant: {1}", TraceEventType = TraceEventType.Warning)]
        public static int GameIDOrVariantIsNotInGMS = 9063;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9064, Error = true, Facility = 9, Message = "This GameID is not a LIVE Multiplayer game, GameID: {0}", TraceEventType = TraceEventType.Warning)]
        public static int ThisGameIDIsNotALIVEMultiplayerGame = 9064;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9072, Error = true, Facility = 9, Message = "The actor IdentityToken does not have a valid XUID, IdentityToken.Token: {0}", TraceEventType = TraceEventType.Error)]
        public static int IdentityTokenDoesNotHaveValidXuid = 9072;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9073, Error = true, Facility = 9, Message = "Error while trying to populate profile, target gamertag: {0}", TraceEventType = TraceEventType.Warning)]
        public static int ErrorWhileTryingToPopulateProfile = 9073;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9074, Error = true, Facility = 9, Message = "Dont know how to populate profile for Non-Xuid IdentityTokens, IdentityToken.ServiceType: {0}", TraceEventType = TraceEventType.Error)]
        public static int DontKnowHowToPopulateProfileForNonXuidIdentityTokens = 9074;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9075, Error = true, Facility = 9, Message = "The game results submitted failed validation.", TraceEventType = TraceEventType.Warning)]
        public static int ErrorWhileTryingToValidateCompositeGameResults = 9075;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9076, Error = true, Facility = 9, Message = "Rewards error while processing GameResults, SessionID: {0}, GameID: {1}", TraceEventType = TraceEventType.Error)]
        public static int RewardsErrorWhileProcessingGameResults = 9076;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9077, Error = true, Facility = 9, Message = "X-Locale HTTP header is null or empty", TraceEventType = TraceEventType.Warning)]
        public static int InvalidLocaleHeader = 9077;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9078, Error = true, Facility = 9, Message = "X-Platform-Type HTTP header is invalid, X-Platform-Type: {0}", TraceEventType = TraceEventType.Warning)]
        public static int InvalidPlatformTypeHeader = 9078;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9079, Error = true, Facility = 9, Message = "Error while trying to get and update SessionEntries from Azure storage, SessionID: {0}, GameID: {1}", TraceEventType = TraceEventType.Error)]
        public static int ErrorWhileTryingToGetAndUpdateSessionEntries = 9079;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9080, Error = true, Facility = 9, Message = "Error while serializing SeatInfo object.", TraceEventType = TraceEventType.Error)]
        public static int ErrorWhileSerializingSeatInfoObject = 9080;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9081, Error = true, Facility = 9, Message = "Error on trying to DeSerialize SeatInfo object. SessionID: {0}, GameID: {1}", TraceEventType = TraceEventType.Error)]
        public static int UnableToDeSerializeSeatInfoObject = 9081;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9082, Error = true, Facility = 9, Message = "Cannot find the actor in the the Session while Modifying it. SessionID: {0}, GameID: {1}", TraceEventType = TraceEventType.Error)]
        public static int CannotFindTheActorInTheSessionWhileModifying = 9082;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9084, Error = true, Facility = 9, Message = "Variant can be specified only if GameID is specified as a query parameter. GameID: {0}, Variant: {1}", TraceEventType = TraceEventType.Warning)]
        public static int VariantCanBeSpecifiedOnlyIfGameIDIsSpecified = 9084;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9085, Error = true, Facility = 9, Message = "Invalid GameID format on trying to validate query params. GameID: {0}", TraceEventType = TraceEventType.Warning)]
        public static int InvalidGameIDFormatOnValidateQueryParams = 9085;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9086, Error = true, Facility = 9, Message = "Invalid variant format on trying to validate query params. Variant: {0}", TraceEventType = TraceEventType.Warning)]
        public static int InvalidVariantFormatOnValidateQueryParams = 9086;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9090, Error = true, Facility = 9, Message = "Invalid maxSessions parameter, it must be an integer greater than 0 and less than or equal to {0}, maxSessions: {1}", TraceEventType = TraceEventType.Warning)]
        public static int InvalidMaxSessionsParam = 9090;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9091, Error = true, Facility = 9, Message = "Invalid ShowSession format on trying to validate query params. ShowSession: {0}", TraceEventType = TraceEventType.Warning)]
        public static int InvalidShowSessionTypeParam = 9091;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9092, Error = true, Facility = 9, Message = "Unexpected exception in session management service. MethodName: {0}", TraceEventType = TraceEventType.Error)]
        public static int UnexpectedExceptionInSessionService = 9092;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9093, Error = true, Facility = 9, Message = "Unexpected exception in game state service. MethodName: {0}", TraceEventType = TraceEventType.Error)]
        public static int UnexpectedExceptionInGameStateService = 9093;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9094, Error = true, Facility = 9, Message = "GameId: {0} or Variant: {1} submitted in GameResult does not match the Session GameID: {2} or the Session Variant: {3}", TraceEventType = TraceEventType.Error)]
        public static int BadGameIDOrVariantSubmittedInGameResult = 9094;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9095, Error = true, Facility = 9, Message = "Owner not found for the session while trying to get the owner's locale, SessionID: {0}, GameID: {1}", TraceEventType = TraceEventType.Error)]
        public static int OwnerNotFoundForTheSession = 9095;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9096, Error = true, Facility = 9, Message = "Player: {0} not found in the session while trying to get the player's locale, SessionID: {1}, GameID: {2}", TraceEventType = TraceEventType.Error)]
        public static int PlayerNotFoundInTheSession = 9096;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9097, Error = true, Facility = 9, Message = "Session to be modified not found, SessionID: {0}, GameID: {1}", TraceEventType = TraceEventType.Error)]
        public static int SessionToBeModifiedNotFound = 9097;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9098, Error = true, Facility = 9, Message = "Error while trying to delete SessionEntries. SessionID: {0}, GameID: {1}", TraceEventType = TraceEventType.Error)]
        public static int ErrorWhileTryingToDeleteSessionEntries = 9098;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9099, Error = true, Facility = 9, Message = "Unexpected Exception in session garbage collector plugin, stopping the session garbage collection run.", TraceEventType = TraceEventType.Error)]
        public static int UnexpectedExceptionInSessionGarbageCollector = 9099;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9100, Error = true, Facility = 9, Message = "User is not authenticated", TraceEventType = TraceEventType.Error)]
        public static int UserIsNotAuthenticated = 9100;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9101, Error = true, Facility = 9, Message = "User is authenticated but no current user data found", TraceEventType = TraceEventType.Error)]
        public static int UserAuthenticatedButNoCurrentUserFound = 9101;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9102, Error = true, Facility = 9, Message = "Error while trying to get user Xuid: Xuid returned was 0, cannot associate an identity with the user", TraceEventType = TraceEventType.Error)]
        public static int ErrorWhileTryingToGetXuid = 9102;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9103, Error = true, Facility = 9, Message = "Error while trying to get user GamerTag: GamerTag returned was null or empty, cannot associate an identity with the user", TraceEventType = TraceEventType.Error)]
        public static int ErrorWhileTryingToGetGamerTag = 9103;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9104, Error = true, Facility = 9, Message = "Internal server error: Current user does not have a partner identity", TraceEventType = TraceEventType.Error)]
        public static int CurrentUserDoesNotHaveAPartnerIdentity = 9104;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9105, Error = true, Facility = 9, Message = "TitleID in partner token is null or empty, cannot authorize user: TitleID: {0}", TraceEventType = TraceEventType.Error)]
        public static int PartnerTokenTitleIDIsNullOrEmpty = 9105;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9106, Error = true, Facility = 9, Message = "GameID does not match TitleID in PartnerToken, cannot authorize user: GameID: {0}, TitleID: {1}", TraceEventType = TraceEventType.Error)]
        public static int GameIDDoesNotMatchPartnerTokenTitleID = 9106;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9107, Error = true, Facility = 9, Message = "Invalid TitleID format in partner token, cannot authorize user: TitleID: {0}", TraceEventType = TraceEventType.Error)]
        public static int InvalidTitleIDFormat = 9107;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9108, Error = true, Facility = 9, Message = "Invalid GameID format while getting user identity, cannot authorize user: GameID: {0}", TraceEventType = TraceEventType.Error)]
        public static int InvalidGameIDFormatWhileGettingIdentity = 9108;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9109, Error = true, Facility = 9, Message = "Null JoinData, bad JoinSession request: SessionID: {0}", TraceEventType = TraceEventType.Error)]
        public static int NullJoinDataBadJoinSessionRequest = 9109;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9110, Error = true, Facility = 9, Message = "SessionParameters field in CreateSession has length {0} bytes which is greater than the maximum allowed: {1} bytes", TraceEventType = TraceEventType.Error)]
        public static int SessionParametersTooLongInCreateSession = 9110;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9111, Error = true, Facility = 9, Message = "SessionParameters field in ModifySession has length {0} bytes which is greater than the maximum allowed: {1} bytes", TraceEventType = TraceEventType.Error)]
        public static int SessionParametersTooLongInModifySession = 9111;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9112, Error = true, Facility = 9, Message = "GameData is null or longer than the maximum allowed: {0} bytes, SessionID {1}, GameID: {2}", TraceEventType = TraceEventType.Error)]
        public static int GameDataIsNullOrTooLong = 9112;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9113, Error = true, Facility = 9, Message = "InactivityWarning is null", TraceEventType = TraceEventType.Error)]
        public static int InactivityWarningIsNull = 9113;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9114, Error = true, Facility = 9, Message = "MaxNumberOfNudges is less than 0 or more than {0}, value: {1}", TraceEventType = TraceEventType.Error)]
        public static int MaxNumberOfNudgesIsNotBetweenAllowedLimits = 9114;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9115, Error = true, Facility = 9, Message = "Interval is less than 0, value: {0}", TraceEventType = TraceEventType.Error)]
        public static int IntervalIsNegative = 9115;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9116, Error = true, Facility = 9, Message = "Operation not allowed for a session that is complete, SessionID: {0}, GameID: {1}", TraceEventType = TraceEventType.Error)]
        public static int OperationNotAllowedForCompleteSession = 9116;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9117, Error = true, Facility = 9, Message = "Invalid TotalSeatsAvailable, it must not be less than 2 or greater than {0}, TotalSeatsAvailable: {1}", TraceEventType = TraceEventType.Error)]
        public static int InvalidTotalSeatsAvailable = 9117;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9119, Error = true, Facility = 9, Message = "Cannot Nudge, active seat is empty, SessionID: {0}, GameID: {1}", TraceEventType = TraceEventType.Error)]
        public static int CannotNudgeEmptyActiveSeat = 9119;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9120, Error = true, Facility = 9, Message = "Negative SeatIndex is not allowed, SeatIndex: {0}", TraceEventType = TraceEventType.Error)]
        public static int NegativeSeatIndexNotAllowed = 9120;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9121, Error = true, Facility = 9, Message = "GameID is null or empty, GameID: {0}", TraceEventType = TraceEventType.Error)]
        public static int GameIDIsNullOrEmpty = 9121;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9122, Error = true, Facility = 9, Message = "Invalid ActiveSeatIndex, it must be a positive number less than the total seats in a session. ActiveSeatIndex: {0}, TotalSeats: {1}", TraceEventType = TraceEventType.Error)]
        public static int InvalidActiveSeatIndex = 9122;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9123, Error = true, Facility = 9, Message = "Too many sessions have been created by the user, please wait till your older sessions are garbage collected. Number of sessions created: {0}, maximum allowed: {1}", TraceEventType = TraceEventType.Warning)]
        public static int TooManySessionsCreatedByTheUser = 9123;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9124, Error = true, Facility = 9, Message = "Interval is less than 1 when the inactivity warning behavior action is not none. InactivityWarning.Interval: {0}", TraceEventType = TraceEventType.Error)]
        public static int IntervalIsInvalid = 9124;

        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores")]
        [field: System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [Event(MessageId = 9200, Error = true, Facility = 9, Message = "This message id is reserved for Bug 10390: Return a better error code in two player trying to PostGameEnd scenario", TraceEventType = TraceEventType.Error)]
        public static int Reserved = 9200;

    }


}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Contracts\Session\Events.cs ===
﻿
namespace Leet.Utils
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.Reflection;

    public class EventsCollection : IEnumerable<EventAttribute>, IEnumerator<EventAttribute>
    {
        private EventAttribute[] events;


        public EventsCollection(Type classType, object classInstance)
        {
            this.Initialize(classType, classInstance);
        }

        protected void Initialize(Type classType, object classInstance)
        {
            int count = 0;
            int baseCounter = 0;
            int incrementAmount = 10;
            {
                if (classType.IsClass)
                {
                    EventCategoryAttribute eventCatattrib = (EventCategoryAttribute)Attribute.GetCustomAttribute(classType, typeof(EventCategoryAttribute));

                    // is there a event category attribute defined for this class?
                    if (eventCatattrib != null)
                    {
                        baseCounter = eventCatattrib.MessageIdBase;
                        incrementAmount = eventCatattrib.IncrementAmount;
                    }
                    else
                    {
                        baseCounter = 0;
                    }

                    System.Reflection.FieldInfo[] fieldInfos = classType.GetFields();       // obtain field meta data (public fields can act as perf counters)
                    foreach (FieldInfo fieldInfo in fieldInfos)
                    {
                        EventAttribute[] attributes = (EventAttribute[])fieldInfo.GetCustomAttributes(typeof(EventAttribute), true);
                        if (this.events != null)
                        {
                            Array.Resize<EventAttribute>(ref this.events, this.events.Length + attributes.Length);
                        }
                        else
                        {
                            Array.Resize<EventAttribute>(ref this.events, attributes.Length);
                        }

                        foreach (EventAttribute eventAttrib in attributes)
                        {
                            if (eventAttrib.MessageId == -1)
                            {
                                eventAttrib.MessageId = baseCounter;
                                baseCounter += incrementAmount;
                            }

                            // set value appropriately
                            fieldInfo.SetValue(classInstance, count);

                            // load resource manager                                
                            if (eventAttrib.ResourceId != -1)
                            {
                                // TO DO
                                // Add support for resource Id's
                            }

                            this.events[count++] = eventAttrib;
                       }
                    }
                }
            }
        }
      
        IEnumerator<EventAttribute> IEnumerable<EventAttribute>.GetEnumerator()
        {
            return ((IEnumerable<EventAttribute>)events.GetEnumerator()).GetEnumerator();
        }

        EventAttribute IEnumerator<EventAttribute>.Current
        {
            get { return ((IEnumerator<EventAttribute>)events.GetEnumerator()).Current; }
        }

        public void Dispose()
        {
            this.Dispose(true);
            GC.SuppressFinalize(this);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public object Current
        {
            get { return this.events.GetEnumerator().Current; }
        }

        public bool MoveNext()
        {
            return this.events.GetEnumerator().MoveNext();
        }

        public void Reset()
        {
            this.events.GetEnumerator().Reset();
        }

        /// <summary>
        /// This method formats the message of a given event id based
        /// on the arguments
        /// </summary>
        /// <param name="eventIndex">Event index.</param>
        /// <param name="args">Argument strings.</param>
        /// <returns>Formatted messages.</returns>
        public string FormatMessage(int eventIndex, params string[] args)
        {
            string msg;
            EventAttribute attribute = GetEventAttribute(eventIndex);

            if (attribute == null)
            {
                return string.Empty;
            }

            if (args == null)
            {
                msg = attribute.Message;
            }
            else
            {
                msg = string.Format(attribute.Message, args);
            }

            return msg;
        }

        public IEnumerator GetEnumerator()
        {
            return this.events.GetEnumerator();
        }

        /// <summary>
        /// This method returns the error code associated with an event. 
        /// </summary>
        /// <param name="eventIndex">Event Index</param>
        /// <returns>Error Code</returns>
        public uint GetErrorCode(int eventIndex)
        {
            EventAttribute attribute = GetEventAttribute(eventIndex);
            uint id = ((uint)attribute.Facility << 16 & 0x0FFF0000) | (0x0000FFFF & (uint)attribute.MessageId);
            if (attribute.Error)
            {
                id = 0x80000000 | id;
            }

            return id;
        }

        /// <summary>
        /// This method returns the real event Id associated
        /// with an event
        /// </summary>
        /// <param name="eventIndex">Event index.</param>
        /// <returns>Event Id.</returns>
        public int GetEventId(int eventIndex)
        {
            EventAttribute attribute = GetEventAttribute(eventIndex);
            return attribute.MessageId;
        }

        public EventAttribute GetEventAttribute(int eventIndex)
        {
            EventAttribute eventAttrib = null;
            if (this.events == null)
            {
                //Wgx.Services.Monitoring.WgxTraceSource.WriteEventLog(string.Format("Events collection has not been initialized"), EventLogEntryType.Warning, 1079, new TraceSourceGeneralException("EventsCollection Initialize() method has not been called"));
            }
            else if (this.events.Length > eventIndex)
            {
                eventAttrib = this.events[eventIndex];
            }
            else
            {
            }

            return eventAttrib;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Contracts\Session\SeatInfo.cs ===
﻿// <copyright file="SeatInfo.cs" company="Microsoft">Copyright (c) 2009 All Right Reserved
// </copyright>
// <author>Amit Dhar</author>
// <email>amitdhar@microsoft.com</email>
// <date>2009-09-23</date>
// <summary>Contains the class definition for SeatInfo.</summary>
namespace AsyncMultiplayer.SessionCommon
{
    using System;
    using System.Runtime.Serialization;
    using Leet.Core.Platforms;

    /// <summary>
    /// Models the information for a seat.
    /// </summary>
    [DataContract]
    [Serializable]
    public class SeatInfo
    {
        /// <summary>
        /// Gets or sets the Locale for the seat.
        /// </summary>
        /// <value>The Locale for the seat.</value>
        [DataMember]
        public string Locale
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the PlatformType for the seat.
        /// </summary>
        /// <value>The PlatformType for the seat.</value>
        [DataMember]
        public PlatformType PlatformType
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the DisplayName for the seat.
        /// </summary>
        /// <value>The DisplayName for the seat.</value>
        [DataMember]
        public string DisplayName
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the DisplayPicURL for the seat.
        /// </summary>
        /// <value>The DisplayPicURL for the seat.</value>
        [DataMember]
        public string DisplayPicURL
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the DisplayPicSmallURL for the seat.
        /// </summary>
        /// <value>The DisplayPicSmallURL for the seat.</value>
        [DataMember]
        public string DisplayPicSmallURL
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the Index for the seat.
        /// </summary>
        /// <value>The Index for the seat.</value>
        [DataMember]
        public int Index
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets a value indicating whether AI is sitting on the seat.
        /// </summary>
        /// <value>The IsAI value for the seat.</value>
        [DataMember]
        public bool IsAI
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the Profile for the seat.
        /// </summary>
        /// <value>The Profile for the seat.</value>
        [DataMember]
        public IdentityToken Profile
        {
            get;
            set;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Contracts\Session\JoinData.cs ===
﻿// <copyright file="JoinData.cs" company="Microsoft">Copyright (c) 2009 All Right Reserved
// </copyright>
// <author>Amit Dhar</author>
// <email>amitdhar@microsoft.com</email>
// <date>2009-09-23</date>
// <summary>Contains the class definition for JoinData.</summary>
namespace AsyncMultiplayer.SessionCommon
{
    using System;
    using System.Runtime.Serialization;

    /// <summary>
    /// Models the JoinData.
    /// </summary>
    [DataContract]
    public class JoinData
    {
        /// <summary>
        /// Gets or sets the GameID for the JoinData.
        /// </summary>
        /// <value>The GameID for the JoinData.</value>
        [DataMember]
        public uint GameID
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the SessionID for the JoinData.
        /// </summary>
        /// <value>The SessionID for the JoinData.</value>
        [DataMember]
        public string SessionID
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the SeatIndex for the JoinData.
        /// </summary>
        /// <value>The SeatIndex for the JoinData.</value>
        [DataMember]
        public int SeatIndex
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the SeatParameters for the JoinData.
        /// </summary>
        /// <value>The SeatParameters for the JoinData.</value>
        [DataMember]
        public byte[] SeatParameters
        {
            get;
            set;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Contracts\Session\SessionState.cs ===
﻿// <copyright file="SessionState.cs" company="Microsoft">Copyright (c) 2009 All Right Reserved
// </copyright>
// <author>Amit Dhar</author>
// <email>amitdhar@microsoft.com</email>
// <date>2009-09-23</date>
// <summary>Contains the class definition for SessionState and related enums.</summary>
namespace AsyncMultiplayer.SessionCommon
{
    using System;
    using System.Net;
    using System.Runtime.Serialization;
    
    /// <summary>
    /// Defines the various types of a session.
    /// </summary>
    public enum SessionType
    {
        /// <summary>
        /// Represents a seesion with all seats available to general public.
        /// </summary>
        AllPublic,

        /// <summary>
        /// Represents a seesion with all seats available to only invitees.
        /// </summary>
        AllReserved,

        /// <summary>
        /// Represents a seesion with all seats available to only friends.
        /// </summary>
        FriendsOnly,

        /// <summary>
        /// Represents a seesion with some seats available to invitees and some to public.
        /// </summary>
        Mixed
    }

    /// <summary>
    /// Models the state of a session.
    /// </summary>
    [DataContract]
    public class SessionState
    {
        /// <summary>
        /// Initializes a new instance of the SessionState class.
        /// </summary>
        public SessionState()
        {
        }

        /// <summary>
        /// Gets or sets the GameID for the session.
        /// </summary>
        /// <value>The GameID for the session.</value>
        [DataMember]
        public uint GameID
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the game Variant for the session.
        /// </summary>
        /// <value>The game Variant for the session.</value>
        [DataMember]
        public int Variant
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the SessionID for the session.
        /// </summary>
        /// <value>The SessionID for the session.</value>
        [DataMember]
        public string SessionID
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the DisplayName for the session.
        /// </summary>
        /// <value>The DisplayName for the session.</value>
        [DataMember]
        public string DisplayName
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the SeatsAvailable for the session.
        /// </summary>
        /// <value>The SeatsAvailable for the session.</value>
        [DataMember]
        public int SeatsAvailable
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets this reserved field.
        /// </summary>
        [DataMember]
        public int ReservedSeatsAvailable
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets this reserved field.
        /// </summary>
        [DataMember]
        public SessionType Category
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the OwnerSeatIndex for the session.
        /// </summary>
        /// <value>The OwnerSeatIndex for the session.</value>
        [DataMember]
        public int OwnerSeatIndex
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the SessionParameters for the session.
        /// </summary>
        /// <value>The SessionParameters for the session.</value>
        [DataMember]
        public byte[] SessionParameters
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the CreationTime for the session.
        /// </summary>
        /// <value>The CreationTime for the session.</value>
        [DataMember]
        public DateTime CreationTime
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the InactivityWarningBehavior for the session.
        /// </summary>
        /// <value>The InactivityWarningBehavior for the session.</value>
        [DataMember]
        public InactivityWarningBehavior InactivityWarning
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets a value indicating whether inactivity warning has been sent for this session.
        /// </summary>
        /// <value>The IsInactivityWarningSent value for the session.</value>
        [DataMember]
        public bool IsInactivityWarningSent
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets a value indicating whether this reserved field is set.
        /// </summary>
        [DataMember]
        public bool IsWarningSent
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the number of nudges sent for far for the session.
        /// </summary>
        /// <value>The NumberOfNudgesSent for the session.</value>
        [DataMember]
        public int NumberOfNudgesSent
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets a value indicating whether this session is closed for joining.
        /// </summary>
        /// <value>The IsClosed value for the session.</value>
        [DataMember]
        public bool IsClosed
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets a value indicating whether empty seats can be removed for this session.
        /// </summary>
        /// <value>The CanRemoveEmptySeats value for the session.</value>
        [DataMember]
        public bool CanRemoveEmptySeats
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the SeatInfo array for the session.
        /// </summary>
        /// <value>The SeatInfo array for the session.</value>
        [DataMember]
        public SeatInfo[] Seats
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the actor's seat in the Seats array.
        /// Actor is someone e.g. who is viewing the session state.
        /// </summary>
        /// <value>The actor's seat in the Seats array.</value>
        [DataMember]
        public int? ActorSeat
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the GameState for the session.
        /// </summary>
        /// <value>The GameState for the session.</value>
        [DataMember]
        public GameState State
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets a value indicating whether the active seat has been sent a user nudge.
        /// NOTE: This property is not exposed to clients, hence no DataMember attribute has been applied to this property.
        /// </summary>
        /// <value>A value indicating whether the active seat has been sent a user nudge.</value>
        public bool WasActiveSeatUserNudged
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the session leave policy for the session.
        /// NOTE: This property is not exposed to clients, hence no DataMember attribute has been applied to this property.
        /// </summary>
        /// <value>The session leave policy for the session.</value>
        public SessionLeavePolicy LeavePolicy
        {
            get;
            set;
        }

        
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Test.API\Notifications\DeleteNotificationBySession.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Net;
using AsyncMultiplayer.NotificationService;
using LiveN.Test.Framework.Configuration;
using System.Configuration;
using System.Threading;
using LiveN.Test.Common.Web;
using Multiplayer.Test.UserAccounts;

namespace Multiplayer.Test.API
{
    /// <summary>
    /// Summary description for DeleteNotificationBySession
    /// </summary>
    [TestClass]
    public class DeleteNotificationBySession : TestAreaBase
    {

        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
        }

        [TestInitialize()]
        public void MyTestInitialize()
        {
            LockTest();
        }

        [TestCleanup]
        public void TestCleanup()
        {
            try
            {
                TestAreaBase.notificationCommon.TestCleanup();
            }
            finally
            {
                UnlockTest();
            }
        }


        [TestMethod, Owner("a-sediro"), Priority(0)]
        [Description("Delete notifications by their SessionID")]
        [TestProperty("Type", "BVTs")]
        public void BVT_DeleteNotificationBySession()
        {
            Thread.Sleep(Constants.NOTIFICATION_RETRIES * Constants.NOTIFICATION_SLEEP_TIME);  // to give time for notification internal so that any requests in the queue would be processed before checking pre existing notifications.
            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);;

            List<string> notificationsCreated = new List<string>();

            notificationsCreated.Add(testHooksClient.CreateDummyNotification());

            notificationsCreated.Add(testHooksClient.CreateNotification(
                Notification.NotificationType.YouLose,
                Constants.TESTGAMEID,
                testHooksClient.TestSessionId,
                4,
                Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password),
                Constants.TESTGAMEVARIANT));

            //create a 3rd notification to make sure that deleteBySession only deletes that session
            Guid otherSession = Guid.NewGuid();
            testHooksClient.CreateNotification(
                Notification.NotificationType.YouWin,
                Constants.TESTGAMEID,
                otherSession.ToString(),
                4,
                Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password),
                Constants.TESTGAMEVARIANT);

            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), String.Empty, 0, Constants.IGNORE_lAST_ID, 100, String.Empty, false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, null);
            Assert.IsNotNull(notifications);
            Assert.AreEqual(3, notifications.Count, "ERROR: Unexpected Number of notifications before Delete.");

            //todo(michperr): Figure out why these are out of order and make VerifyNotification take a list
            //VerifyNotification(notifications[0], notificationsCreated[1]);
            //VerifyNotification(notifications[1], notificationsCreated[0]);

            //actually issue the delete            
            this.NotificationsServiceProxy.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), testHooksClient.TestSessionId.ToString(), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

            //verify that the delete took
            notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), String.Empty, 0, Constants.IGNORE_lAST_ID, 100, String.Empty, false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, null);
            Assert.IsNotNull(notifications);
            Assert.AreEqual(1, notifications.Count, "ERROR: Unexpected Number of notifications.");

            this.NotificationsServiceProxy.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), otherSession.ToString(), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), String.Empty, 0, Constants.IGNORE_lAST_ID, 100, String.Empty, false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, null);
            Assert.IsNotNull(notifications);
            Assert.AreEqual(0, notifications.Count, "ERROR: Unexpected Number of notifications.");

        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify that user's last update time is updated only after a successful delete operation.")]
        [TestProperty("Type", "Feature")]
        public void P_DeleteNotificationBySession_Etag()
        {
            Thread.Sleep(Constants.NOTIFICATION_RETRIES * Constants.NOTIFICATION_SLEEP_TIME);  // to give time for notification internal so that any requests in the queue would be processed before test starts.
            TestAreaBase.notificationCommon.CheckNotificationCount(Constants.TESTGAMEID.ToString(), testHooksClient.TestSessionId, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password); ;
            testHooksClient.CreateDummyNotification();
            List<Notification> nList = this.NotificationsServiceProxy.GetNotifications(
                                            Constants.TESTGAMEID.ToString(),
                                            testHooksClient.TestSessionId,
                                            0,
                                            Constants.IGNORE_lAST_ID,
                                            5,
                                            string.Empty,
                                            false, 
                                            TestAreaBase.users[0].MemberName, 
                                            TestAreaBase.users[0].Password,
                                            null);
            Assert.IsNotNull(nList);
            Assert.AreEqual(1, nList.Count, "Unexpected number of notifications.");
            string etag = this.NotificationsServiceProxy.EtagInResponse;
            Thread.Sleep(2000); //to make sure that the user last update time is different from the previous one.
            this.NotificationsServiceProxy.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), nList[0].SessionId, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            nList = this.NotificationsServiceProxy.GetNotifications(
                        Constants.TESTGAMEID.ToString(),
                        testHooksClient.TestSessionId,
                        0,
                        Constants.IGNORE_lAST_ID,
                        5,
                        string.Empty,
                        false,
                        TestAreaBase.users[0].MemberName, 
                        TestAreaBase.users[0].Password,
                        etag);
            Assert.IsNotNull(nList);
            Assert.AreEqual(0, nList.Count, "Unexpected number of notifications.");
            testHooksClient.CreateDummyNotification();
            nList = this.NotificationsServiceProxy.GetNotifications(
                                Constants.TESTGAMEID.ToString(),
                                testHooksClient.TestSessionId,
                                0,
                                Constants.IGNORE_lAST_ID,
                                5,
                                string.Empty,
                                false, 
                                TestAreaBase.users[0].MemberName, 
                                TestAreaBase.users[0].Password, 
                                null);
            Assert.IsNotNull(nList);
            Assert.AreEqual(1, nList.Count, "Unexpected number of notifications.");
            etag = this.NotificationsServiceProxy.EtagInResponse;
            Thread.Sleep(2000); //to make sure that the user last update time is different from the previous one.
            try
            {
                this.NotificationsServiceProxy.DeleteNotificationBySession(null, Guid.NewGuid().ToString(),TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
                Assert.Fail("Error: Expected an exception");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, e.Response.Status);
                try
                {
                    nList = this.NotificationsServiceProxy.GetNotifications(
                                Constants.TESTGAMEID.ToString(),
                                testHooksClient.TestSessionId,
                                0,
                                Constants.IGNORE_lAST_ID,
                                5,
                                string.Empty,
                                false, 
                                TestAreaBase.users[0].MemberName,
                                TestAreaBase.users[0].Password, 
                                etag);
                    Assert.Fail("Expecting a 304.");
                }
                catch (RestException ex)
                {
                    Assert.AreEqual<HttpStatusCode>(HttpStatusCode.NotModified, ex.Response.Status);
                }
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Call DeleteNotificationBySession with a non-existing sessionId and verify no actions are taken")]
        [TestProperty("Type", "Feature")]
        public void P_DeleteNotificationBySession_NonexistentSessionId()
        {
            TestAreaBase.notificationCommon.CheckNotificationCount(Constants.TESTGAMEID.ToString(), testHooksClient.TestSessionId, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password); ;
            testHooksClient.CreateDummyNotification();
            this.NotificationsServiceProxy.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), Guid.NewGuid().ToString(), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            Assert.AreEqual<int>(
                1,
                this.NotificationsServiceProxy.GetNotifications(
                    Constants.TESTGAMEID.ToString(),
                    testHooksClient.TestSessionId,
                    0,
                    string.Empty,
                    5,
                    string.Empty,
                    false, 
                    TestAreaBase.users[0].MemberName, 
                    TestAreaBase.users[0].Password,
                    null).Count,
                "Unexpected number of notifications");
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Call DeleteNotificationBySession with an invalid sessionId and verify no errors with no actions. -- we do not verify sessionId")]
        [TestProperty("Type", "Feature")]
        public void P_DeleteNotificationBySession_InvalidSessionId()
        {
            TestAreaBase.notificationCommon.CheckNotificationCount(Constants.TESTGAMEID.ToString(), testHooksClient.TestSessionId, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password); ;
            testHooksClient.CreateDummyNotification();
            this.NotificationsServiceProxy.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), "This is an invalid sessionsId.", TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            Assert.AreEqual<int>(
                1,
                this.NotificationsServiceProxy.GetNotifications(
                    Constants.TESTGAMEID.ToString(),
                    testHooksClient.TestSessionId,
                    0,
                    string.Empty,
                    5,
                    string.Empty,
                    false,
                    TestAreaBase.users[0].MemberName,
                    TestAreaBase.users[0].Password,
                    null).Count,
                "Unexpected number of notifications");
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Call DeleteNotificationBySession with an empty sessionId and and verify a bad request.")]
        [TestProperty("Type", "Feature")]
        public void N_DeleteNotificationBySession_LongSessionId()
        {
            try
            {
                this.NotificationsServiceProxy.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), "This is a very long session ID with char length equals sixtyfour", TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
                Assert.Fail("Expected a BadRequest response");
            }
            catch (RestException ex)
            {
                NotificationTestCommon.VerifyException(HttpStatusCode.BadRequest, "2148015943 Invalid argument or bad request: Session ID is invalid", ex.Response);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Call DeleteNotificationBySession with an empty sessionId and verify a bad request.")]
        [TestProperty("Type", "Feature")]
        public void N_DeleteNotificationBySession_EmptySessionId()
        {
            try
            {
                this.NotificationsServiceProxy.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), string.Empty, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
                Assert.Fail("Expected a BadRequest response");
            }
            catch (RestException ex)
            {
                NotificationTestCommon.VerifyException(HttpStatusCode.BadRequest, "2148015943 Invalid argument or bad request: Session ID is null or empty", ex.Response);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Call DeleteNotificationBySession with sessionId = null and verify a bad request.")]
        [TestProperty("Type", "Feature")]
        public void N_DeleteNotificationBySession_NullSessionId()
        {
            try
            {
                this.NotificationsServiceProxy.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), null, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
                Assert.Fail("Expected a BadRequest response");
            }
            catch (RestException ex)
            {
                NotificationTestCommon.VerifyException(HttpStatusCode.BadRequest, "2148015943 Invalid argument or bad request: Session ID is null or empty", ex.Response);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("verify that DeleteNotificationBySession does not give an error when called to delete all notifications while there are initially zero notifications on Azure.")]
        [TestProperty("Type", "Feature")]
        public void P_DeleteNotificationBySession_NotifListEmptyInitially()
        {
            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);;
            this.NotificationsServiceProxy.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), Guid.NewGuid().ToString(), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
        }


        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify that users cannot delete another user's notifications.")]
        [TestProperty("Type", "Feature")]
        public void N_DeleteNotificationBySession_OtherUser()
        {
            TestAreaBase.notificationCommon.CheckNotificationCount(Constants.TESTGAMEID.ToString(), testHooksClient.TestSessionId, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            
            testHooksClient.CreateDummyNotification();
            List<Notification> nList = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), testHooksClient.TestSessionId, 0, Constants.IGNORE_lAST_ID, 100, string.Empty, false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, null);
            Assert.IsNotNull(nList);
            Assert.AreEqual(1, nList.Count, "Incorrect number of notifications.");
            this.NotificationsServiceProxy.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), testHooksClient.TestSessionId, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            nList = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), testHooksClient.TestSessionId, 0, Constants.IGNORE_lAST_ID, 100, string.Empty, false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, null);
            Assert.IsNotNull(nList);
            Assert.AreEqual(1, nList.Count, "Incorrect number of notifications.");
            this.NotificationsServiceProxy.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), testHooksClient.TestSessionId, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            nList = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), testHooksClient.TestSessionId, 0, Constants.IGNORE_lAST_ID, 100, string.Empty, false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, null);
            Assert.IsNotNull(nList);
            Assert.AreEqual(0, nList.Count, "Incorrect number of notifications.");
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Call DeleteNotificationBySession with a nonexistent gameId and verify a bad request.")]
        [TestProperty("Type", "Feature")]
        public void N_DeleteNotificationBySession_NonexistentGameId()
        {
            //this is a bug -- cannot validate GameId when it is int.
            testHooksClient.CreateDummyNotification();
            List<Notification> nList = this.NotificationsServiceProxy.GetNotifications(string.Empty, string.Empty, 0, Constants.IGNORE_lAST_ID, 100, string.Empty, false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, null);
            int count = nList.Count;
            Assert.IsNotNull(nList);
            Assert.IsTrue(nList.Count > 0, "Unexpected number of notifications.");
            try
            {
                this.NotificationsServiceProxy.DeleteNotificationBySession("789908764", nList[0].SessionId, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
                Assert.Fail("Expecting a bad request");
            }
            catch(RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, e.Response.Status);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Call DeleteNotificationBySession with an invalid gameId and verify a bad request.")]
        [TestProperty("Type", "Feature")]
        public void N_DeleteNotificationBySession_InvalidGameId()
        {
            try
            {
                this.NotificationsServiceProxy.DeleteNotificationBySession("This is an invalid gameId", Guid.NewGuid().ToString(), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
                Assert.Fail("Test should give a Bad Request response");
            }
            catch (RestException e)
            {
                NotificationTestCommon.VerifyException(HttpStatusCode.BadRequest, "2148015943 Invalid argument or bad request: Game ID is invalid", e.Response);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Call DeleteNotificationBySession with an empty gameId and verify a bad request.")]
        [TestProperty("Type", "Feature")]
        public void N_DeleteNotificationBySession_EmptyGameId()
        {
            try
            {
                this.NotificationsServiceProxy.DeleteNotificationBySession(string.Empty, Guid.NewGuid().ToString(), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
                Assert.Fail("Test should give a Bad Request response");
            }
            catch (RestException e)
            {
                NotificationTestCommon.VerifyException(HttpStatusCode.BadRequest, "2148015943 Invalid argument or bad request: Game Id ID is null or empty", e.Response);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Call DeleteNotificationBySession with a Null gameId and verify a bad request.")]
        [TestProperty("Type", "Feature")]
        public void N_DeleteNotificationBySession_NullGameId()
        {
            try
            {
                this.NotificationsServiceProxy.DeleteNotificationBySession(null, Guid.NewGuid().ToString(), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
                Assert.Fail("Test should give a Bad Request response");
            }
            catch (RestException e)
            {
                NotificationTestCommon.VerifyException(HttpStatusCode.BadRequest, "2148015943 Invalid argument or bad request: Game Id ID is null or empty", e.Response);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Test.API\Notifications\GetSpotlightBVT.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using AsyncMultiplayer.NotificationService;
using System.Xml; 
using LiveN.Test.Framework.Configuration;
using System.Net; 
using Multiplayer.Test.Proxy;
using LiveN.Test.Common.Web;


namespace Multiplayer.Test.API
{
    /// <summary>
    /// Summary description for GetSpotlight
    /// </summary>
    [TestClass]
    public class GetSpotlightBVT : TestAreaBase
    {
        private Random randomGenerator = new Random();

        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
        }

        [TestInitialize()]
        public void MyTestInitialize()
        {
        }

        [TestCleanup]
        public void TestCleanup()
        {
        }

        [TestMethod, Owner("a-sediro"), Priority(0)]
        [Description("Smoke test spotlight API")]
        [TestProperty("Type", "BVTs")]
        public void BVT_GetSpotlight()
        {
            if ((string.Compare(Config.Environment.Name, "dev", true) != 0) && (string.Compare(Config.Environment.Name, "Airlock_LEST", true) != 0))
            {
                List<Spotlight> spotlightEntries = this.NotificationsServiceProxy.GetSpotlight("");
                Assert.IsNotNull(spotlightEntries);
                Assert.IsTrue(spotlightEntries.Count > 0, "ERROR: There are no spotlight entries.");
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Test.API\Notifications\CertBasedBVTs.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using AsyncMultiplayer.NotificationService;
using Multiplayer.Test.Proxy;
using LiveN.Test.Framework.Configuration;
using System.Threading;
using System.Net;
using LiveN.Test.Common.Web;
using System.Configuration;
using Multiplayer.Test.UserAccounts;
using LiveN.Test.Framework;

namespace Multiplayer.Test.API
{
    /// <summary>
    /// Summary description for CertBasedBVTs
    /// </summary>
    [TestClass]
    public class CertBasedBVTs : TestAreaBase
    {

        private static bool cleanupFR;
        private static CertBasedNotificationServiceProxy certBasedClient;

        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
        }

        [TestInitialize()]
        public void MyTestInitialize()
        {
            certBasedClient = new CertBasedNotificationServiceProxy();//becasue some of the negative testcases mess with the cert and add auth header..., need to create a new proxy for each testcase
            cleanupFR = false;
            LockTest();
        }

        [TestCleanup]
        public void TestCleanup()
        {
            try
            {
                certBasedClient = new CertBasedNotificationServiceProxy();//because some of the negative testcases mess with the cert and add auth header..., need to create a new proxy for each testcase
                if (cleanupFR)
                {
                    NotificationTestCommon.CleanupFR();
                    CleanupNotifications(string.Empty);
                }
                else
                    CleanupNotifications(Constants.TESTGAMEID.ToString());
            }
            finally
            {
                UnlockTest();
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(0)]
        [Description("Verifies GetNotifications for a cert based call.")]
        [TestProperty("Type", "BVTs")]
        public void BVT_GetNotifications_CertBased()
        {
            string sessionId = Guid.NewGuid().ToString();
            CheckNotificationCount(Constants.TESTGAMEID.ToString(), sessionId, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

            List<Notification> nList;
            foreach (Notification.NotificationType t in nTypes)
            {
                string notificationId = testHooksClient.CreateNotification(
                                            t,
                                            Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password),
                                            Constants.TESTGAMEID,
                                            sessionId);
                nList = GetNotifications(
                    Constants.TESTGAMEID.ToString(),
                    sessionId,
                    t.ToString(),
                    TestAreaBase.users[0].MemberName,
                    TestAreaBase.users[0].Password);
                Assert.IsNotNull(nList);
                Assert.AreEqual(1, nList.Count, "Error: Unexpected number of notifications.");
                Assert.AreEqual(notificationId, nList[0].Id, "Error: Unexpected notification Id.");
            }
            nList = GetNotifications(
                Constants.TESTGAMEID.ToString(),
                sessionId,
                string.Empty,
                TestAreaBase.users[0].MemberName,
                TestAreaBase.users[0].Password);
            Assert.IsNotNull(nList);
            Assert.AreEqual(nTypes.Length, nList.Count, "Error: Unexpected number of notifications.");
        }


        [TestMethod, Owner("a-sediro"), Priority(0)]
        [Description("Verifies DeleteNotification for a cert based call.")]
        [TestProperty("Type", "BVTs")]
        public void BVT_DeleteNotification_CertBased()
        {
            CheckNotificationCount(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            string sessionId = Guid.NewGuid().ToString();
            string notificationId = testHooksClient.CreateNotification(
                                        Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password),
                                        Constants.TESTGAMEID,
                                        sessionId);

            List<Notification> nList = GetNotifications(
                Constants.TESTGAMEID.ToString(),
                sessionId,
                string.Empty,
                TestAreaBase.users[0].MemberName,
                TestAreaBase.users[0].Password);
            Assert.IsNotNull(nList);
            Assert.AreEqual(1, nList.Count, "Error: Unexpected number of notifications.");
            Assert.AreEqual(notificationId, nList[0].Id, "Error: Unexpected notification Id.");

            certBasedClient.DeleteNotificationQuery(nList[0].Id, Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password));

            nList = GetNotifications(
                Constants.TESTGAMEID.ToString(),
                sessionId,
                string.Empty,
                TestAreaBase.users[0].MemberName,
                TestAreaBase.users[0].Password);
            Assert.IsNotNull(nList);
            Assert.AreEqual(0, nList.Count, "Error: Unexpected number of notifications.");
        }


        [TestMethod, Owner("a-sediro"), Priority(0)]
        [Description("Verifies DeleteNotificationsBySession for a cert based call")]
        [TestProperty("Type", "BVTs")]
        public void BVT_DeleteNotificationsBySession_CertBased()
        {
            CheckNotificationCount(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            string sessionId1 = Guid.NewGuid().ToString();
            string sessionId2 = Guid.NewGuid().ToString();
            string notificationId1 = testHooksClient.CreateNotification(
                                        Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password),
                                        Constants.TESTGAMEID,
                                        sessionId1);
            testHooksClient.CreateNotification(
                                        Notification.NotificationType.YourTurn,
                                        Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password),
                                        Constants.TESTGAMEID,
                                        sessionId2);
            testHooksClient.CreateNotification(
                                        Notification.NotificationType.YouWin,
                                        Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password),
                                        Constants.TESTGAMEID,
                                        sessionId2);

            List<Notification> nList = GetNotifications(
                Constants.TESTGAMEID.ToString(),
                sessionId1,
                string.Empty,
                TestAreaBase.users[0].MemberName,
                TestAreaBase.users[0].Password);
            Assert.IsNotNull(nList);
            Assert.AreEqual(1, nList.Count, "Error: Unexpected number of notifications.");
            Assert.AreEqual(notificationId1, nList[0].Id, "Error: Unexpected notification Id.");

            nList = GetNotifications(
                Constants.TESTGAMEID.ToString(),
                sessionId2,
                string.Empty,
                TestAreaBase.users[0].MemberName,
                TestAreaBase.users[0].Password);
            Assert.IsNotNull(nList);
            Assert.AreEqual(2, nList.Count, "Error: Unexpected number of notifications.");

            certBasedClient.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), sessionId2, Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password));

            nList = GetNotifications(
               Constants.TESTGAMEID.ToString(),
               sessionId1,
               string.Empty,
               TestAreaBase.users[0].MemberName,
               TestAreaBase.users[0].Password);
            Assert.IsNotNull(nList);
            Assert.AreEqual(1, nList.Count, "Error: Unexpected number of notifications.");
            Assert.AreEqual(notificationId1, nList[0].Id, "Error: Unexpected notification Id.");


            nList = GetNotifications(
                Constants.TESTGAMEID.ToString(),
                sessionId2,
                string.Empty,
                TestAreaBase.users[0].MemberName,
                TestAreaBase.users[0].Password);
            Assert.IsNotNull(nList);
            Assert.AreEqual(0, nList.Count, "Error: Unexpected number of notifications.");

            certBasedClient.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), sessionId1, Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password));

            nList = GetNotifications(
                Constants.TESTGAMEID.ToString(),
                sessionId1,
                string.Empty,
                TestAreaBase.users[0].MemberName,
                TestAreaBase.users[0].Password);
            Assert.IsNotNull(nList);
            Assert.AreEqual(0, nList.Count, "Error: Unexpected number of notifications.");
        }

        [TestMethod, Owner("a-sediro"), Priority(0)]
        [Description("Verifies UpdateNotification for a cert based call.")]
        [TestProperty("Type", "BVTs")]
        public void BVT_UpdateNotification_CertBased()
        {
            CheckNotificationCount(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            string sessionId = Guid.NewGuid().ToString();
            string notificationId = testHooksClient.CreateNotification(
                                        Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password),
                                        Constants.TESTGAMEID,
                                        sessionId);

            List<Notification> nList = GetNotifications(
                Constants.TESTGAMEID.ToString(),
                sessionId,
                string.Empty,
                TestAreaBase.users[0].MemberName,
                TestAreaBase.users[0].Password);
            Assert.IsNotNull(nList);
            Assert.AreEqual(1, nList.Count, "Error: Unexpected number of notifications.");
            Assert.AreEqual(notificationId, nList[0].Id, "Error: Unexpected notification Id.");
            Assert.AreEqual<Notification.NotificationStatus>(Notification.NotificationStatus.UnRead, nList[0].Status, "Error: Unexpected notification status.");

            certBasedClient.UpdateNotification(nList[0].Id, Notification.NotificationStatus.Viewed.ToString(), Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password));

            nList = GetNotifications(
                Constants.TESTGAMEID.ToString(),
                sessionId,
                string.Empty,
                TestAreaBase.users[0].MemberName,
                TestAreaBase.users[0].Password);
            Assert.IsNotNull(nList);
            Assert.AreEqual(1, nList.Count, "Error: Unexpected number of notifications.");
            Assert.AreEqual(notificationId, nList[0].Id, "Error: Unexpected notification Id.");
            Assert.AreEqual<Notification.NotificationStatus>(Notification.NotificationStatus.Viewed, nList[0].Status, "Error: Unexpected notification status.");
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verifies get FR notification for a cert based call.")]
        [TestProperty("Type", "Features")]
        public void P_GetNotifications_FR_CertBased()
        {
            testHooksClient.SetupNotFriendsAndNoFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)));
            NotificationTestCommon.VerifyNotFriends(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), "Error: Setup failed not to make friends");
            NotificationTestCommon.VerifyNoFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), "Error: Setup failed to delete pre existing Friend Requests");

            CheckNotificationCount(string.Empty, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME); // to give a gap between requests on the backend

            cleanupFR = true;
            testHooksClient.AddFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)));
            NotificationTestCommon.VerifyFriendRequest(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), "Error: Setup failed to delete pre existing Friend Requests");

            //make a call to trigger generationg FR notification
            List<Notification> nList = GetNotifications(
                    string.Empty,
                    string.Empty,
                    Notification.NotificationType.FriendRequest.ToString(),
                    TestAreaBase.users[1].MemberName,
                    TestAreaBase.users[1].Password);
            Assert.IsNotNull(nList);
            Assert.AreEqual(0, nList.Count, "Error: Unexpected number of notifications.");

            Thread.Sleep(Constants.NOTIFICATION_RETRIES * Constants.NOTIFICATION_SLEEP_TIME); //give time for notifications internal to process request to create FR notification

            nList = GetNotifications(
                    string.Empty,
                    string.Empty,
                    Notification.NotificationType.FriendRequest.ToString(),
                    TestAreaBase.users[1].MemberName,
                    TestAreaBase.users[1].Password);
            Assert.IsNotNull(nList);
            Assert.AreEqual(1, nList.Count, "Error: Unexpected number of notifications.");
        }


        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify fail when cert is not passed")]
        [TestProperty("Type", "Features")]
        public void N_GetNotifications_CertBased_NoCert()
        {
            certBasedClient.cert = null;
            try
            {
                GetNotifications(
                    Constants.TESTGAMEID.ToString(),
                    string.Empty,
                    string.Empty,
                    TestAreaBase.users[0].MemberName,
                    TestAreaBase.users[0].Password);
                Assert.Fail("Expected fail as cert was null.");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.Unauthorized, e.Response.Status);
            }
        }

        //-- pass on environments below testnet does not guarantee no bug as the certs might not be trusted in the environments ---so we are not testing with certs.
        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify fail when cert is invalid")]
        [TestProperty("Type", "Features")]
        public void N_GetNotifications_CertBased_InvalidCert()
        {
            certBasedClient.cert = LiveN.Test.Framework.Authorization.Authorization.InstallClientCertificate(ConfigurationManager.AppSettings["PFEClientCertName"], ConfigurationManager.AppSettings["PFEClientCertThumbprint"], ConfigurationManager.AppSettings["PFEClientCertPwd"], "InvalidCertForInternal");
            try
            {
                GetNotifications(
                    Constants.TESTGAMEID.ToString(),
                    string.Empty,
                    string.Empty,
                    TestAreaBase.users[0].MemberName,
                    TestAreaBase.users[0].Password);
                Assert.Fail("Expected fail as cert was null.");
            }
            catch (RestException e)
            {
                //We should get unauthorized if cert is not trusted and Forbidden if cert is trusted. STS client cert is trusted on all environment above and on testnet.
                Assert.IsTrue((HttpStatusCode.Forbidden.Equals(e.Response.Status) || HttpStatusCode.Unauthorized.Equals(e.Response.Status)), "Expected either unauthorized or Forbidden but got " + e.Response.Status + "instead!");
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify error when xuid is invalid")]
        [TestProperty("Type", "BVTs")]
        public void N_GetNotifications_CertBased_InvalidXuid()
        {
            try
            {
                certBasedClient.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                Guid.NewGuid().ToString(),
                0,
                Constants.IGNORE_lAST_ID,
                Int32.MaxValue,
                string.Empty,
                false,
                null,
                "invalid xuid");
                Assert.Fail("Expected fail as cert was null.");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.Unauthorized, e.Response.Status);
            }
        }
        private void CleanupNotifications(string gameId)
        {
            foreach (XboxLiveAccount user in TestAreaBase.users)
            {
                CheckNotificationCount(gameId, user.MemberName, user.Password);
            }
        }

        private void CheckNotificationCount(string username, string password)
        {
            CheckNotificationCount(Constants.TESTGAMEID.ToString(), username, password);
        }

        private void CheckNotificationCount(string gameId, string username, string password)
        {
            CheckNotificationCount(gameId, string.Empty, username, password);
        }

        private void CheckNotificationCount(string gameId, string sessionId, string username, string password)
        {
            List<Notification> nList;
            if (string.IsNullOrEmpty(gameId))
            {
                GetNotifications(
                    gameId,
                    sessionId,
                    string.Empty,
                    username,
                    password);
                Thread.Sleep(Constants.NOTIFICATION_RETRIES * Constants.NOTIFICATION_SLEEP_TIME);
            }
            nList = GetNotifications(
                    gameId,
                    sessionId,
                    string.Empty,
                    username,
                    password);
            Assert.IsNotNull(nList);
            if (nList.Count == 0)
            {
                return;
            }
            else if (nList.Count > 0)
            {
                foreach (Notification n in nList)
                {
                    certBasedClient.DeleteNotificationQuery(n.Id, Users.GetXuid(username, password));
                }
                nList = GetNotifications(
                    gameId,
                    sessionId,
                    string.Empty,
                    username,
                    password);
                Assert.IsNotNull(nList);
                Assert.AreEqual<int>(
                    0,
                    nList.Count,
                    "Setup failed: Expected 0 notifications loaded for this user.");
            }
        }

        private List<Notification> GetNotifications(string gameId, string sessionId, string type, string username, string password)
        {
            return certBasedClient.GetNotifications(
            gameId,
            sessionId,
            0,
            Constants.IGNORE_lAST_ID,
            Int32.MaxValue,
            type,
            false,
            null,
            Users.GetXuid(username, password));
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Test.API\Notifications\NotificationE2E.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using LiveN.Test.Framework.Configuration;
using AsyncMultiplayer.NotificationService;
using MultiPlayer.Test.Data;
using Multiplayer.Test.UserAccounts;

namespace Multiplayer.Test.API
{
    /// <summary>
    /// Summary description for NotificationSmokeTest
    /// </summary>
    [TestClass]
    public class NotificationE2E : TestAreaBase
    {
        
        private Random randomGenerator = new Random();

        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
        }

        [TestInitialize()]
        public void MyTestInitialize()
        {
            int randIndex = randomGenerator.Next(0, LocalizationTestData.AVAILABLE_GOOD_LOCALES.Length / 2);
            this.NotificationsServiceProxy.Locale = LocalizationTestData.AVAILABLE_GOOD_LOCALES[randIndex, 0];
            LockTest();
        }

        [TestCleanup]
        public void TestCleanup()
        {
            try
            {
                TestAreaBase.notificationCommon.TestCleanup();
            }
            finally
            {
                UnlockTest();
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Will smoke test Notifications.")]
        [TestProperty("Type", "BVTs")]
        //this test is independent of MPTestHooks svc.
        public void SmokeNotifications()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 3, "We need three users for this test");

            //setup: verify no prior notifications
            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password);

            //send invite
            string sessionId = Guid.NewGuid().ToString();
            string recipients = TestAreaBase.users[1].MemberName + ";gamertag:" + Users.GetGamertag(TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password) + ";" + "reversepw@hotmail.com;";
            TestAreaBase.notificationCommon.SendInviteRequest(sessionId, true, recipients);

            TestAreaBase.notificationCommon.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            TestAreaBase.notificationCommon.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password);

            //Verify sent for second user(by gamertag)
            VerifyNotifications(sessionId, TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password, 1);

            //verify sent for first user(by email address)
            List<Notification> notifications = VerifyNotifications(sessionId, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password, 1);

            //delete by session for first user
            this.NotificationsServiceProxy.DeleteNotificationBySession(notifications[0].GameId.ToString(), sessionId, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            //verify deleted for first user
            VerifyNotifications(sessionId, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password, 0);

            //Verify not deleted for second user
            notifications = VerifyNotifications(sessionId, TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password, 1);
            
            //verify default status
            Assert.AreEqual<Notification.NotificationStatus>(Notification.NotificationStatus.UnRead, notifications[0].Status, "Error: Invite notification status was not unread by default.");

            //update notification
            this.NotificationsServiceProxy.UserID = TestAreaBase.users[2].MemberName;
            this.NotificationsServiceProxy.Password = TestAreaBase.users[2].Password;
            this.NotificationsServiceProxy.UpdateNotification(notifications[0].Id, Notification.NotificationStatus.Viewed.ToString());

            //verify update
            notifications = VerifyNotifications(sessionId, TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password, 1);
            Assert.AreEqual<Notification.NotificationStatus>(Notification.NotificationStatus.Viewed, notifications[0].Status, "Error: Update did not do its job.");

            //delete by id
            this.NotificationsServiceProxy.DeleteNotificationQuery(notifications[0].Id, TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password);

            //verify delete
            VerifyNotifications(sessionId, TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password, 0);
        }
        
        private List<Notification> VerifyNotifications(string sessionId, string userId, string password, int notificationCount)
        {
            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                sessionId,
                0,
                Constants.IGNORE_lAST_ID,
                100,
                String.Empty,
                false,
                userId,
                password,
                null);

            Assert.IsNotNull(notifications);
            Assert.AreEqual(notificationCount, notifications.Count, "Error: Unexpected number of notifications.");
            return notifications;
        }
        private List<Notification> VerifyFRNotifications(string userId, string password)
        {
            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                string.Empty,
                string.Empty,
                0,
                Constants.IGNORE_lAST_ID,
                100,
                Notification.NotificationType.FriendRequest.ToString(),
                false,
                userId,
                password,
                null);

            Assert.IsNotNull(notifications);
            Assert.AreEqual(1, notifications.Count, "Error: Unexpected number of notifications.");
            return notifications;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Test.API\E2ETests.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using LiveN.Test.Framework.Configuration;
using AsyncMultiplayer.NotificationService;
using AsyncMultiplayer.SessionCommon;
using System.Threading;

namespace Multiplayer.Test.API
{

    /// <summary>
    /// Summary description for E2ETests
    /// </summary>
    [TestClass]
    public class E2ETests : TestAreaBase
    {
        

        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
        }

        [TestInitialize()]
        public void MyTestInitialize()
        {
            LockTest();
        }

        [TestCleanup]
        public void TestCleanup()
        {
            try
            {
                TestAreaBase.notificationCommon.TestCleanup();
            }
            finally
            {
                UnlockTest();
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Will smoke test Notifications.")]
        [TestProperty("Type", "BVTs")]
        public void BasicE2ETest()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 4, "We need four users for this test");
            //P0 creates a session with at least 4 number of seats available 

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 4, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            AssertCreateSessionState(creationData, sessionState);

            //This is not implemented yet.
            //verify your turn notification for P0
            //common.VerifyNotificationCreated(sessionState.GameID.ToString(), sessionState.SessionID, Notification.NotificationType.YourTurn, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

            //P0 sends invite to P1, P2, P3
            TestAreaBase.notificationCommon.SendInviteRequest(sessionState.SessionID, false, 3);
            for (int i = 1; i <= 3; i++)
            {
                TestAreaBase.notificationCommon.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionState.SessionID, Notification.NotificationType.Invitation, TestAreaBase.users[i].MemberName, TestAreaBase.users[i].Password);
            }

            //p2 joins the session
            JoinData joinData = InitializeJoinData(sessionState.GameID, sessionState.SessionID, 1);
            this.GameSessionProxy.UserID = TestAreaBase.users[2].MemberName;
            this.GameSessionProxy.Password = TestAreaBase.users[2].Password;
            SessionState afterP2JoinSessionState = this.GameSessionProxy.JoinSession(sessionState.SessionID, joinData);

            AssertJoinSessionState(sessionState, afterP2JoinSessionState);

            ////verify that player joined notification is sent to p0
            //common.VerifyNotificationCreated(sessionState.GameID.ToString(), sessionState.SessionID, Notification.NotificationType.PlayerJoined, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

            //verify that p2's invite notifcations is deleted
            VerifyNotifications(Constants.TESTGAMEID.ToString(), sessionState.SessionID, Notification.NotificationType.Invitation.ToString(), TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password, 0);

            //TODO: Currently there are no testcases to reuse. Will think about this later.
            //p1 rejects the invite
            //verify invite notification is deleted for p2     
            //p3 joins the session

            joinData = InitializeJoinData(sessionState.GameID, sessionState.SessionID, 2);
            this.GameSessionProxy.UserID = TestAreaBase.users[3].MemberName;
            this.GameSessionProxy.Password = TestAreaBase.users[3].Password;
            SessionState afterP3JoinSessionState = this.GameSessionProxy.JoinSession(sessionState.SessionID, joinData);

            AssertJoinSessionState(afterP2JoinSessionState, afterP3JoinSessionState);

            //p0 modifies the session info
            ModificationData modificationData = InitializeModificationData(afterP3JoinSessionState);
            modificationData.TotalSeatsAvailable = 3;
            modificationData.ReservedSeatsAvailable = 3;

            //Modify Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            this.GameSessionProxy.ModifySession(sessionState.SessionID.ToString(), sessionState.GameID.ToString(), modificationData);

            //View Session
            this.GameSessionProxy.UserID = TestAreaBase.users[2].MemberName;
            this.GameSessionProxy.Password = TestAreaBase.users[2].Password;
            SessionState afterModifySessionState = this.GameSessionProxy.ViewSession(sessionState.SessionID.ToString(), sessionState.GameID.ToString());

            //Assert SessionState
            AssertModifySessionState(modificationData, afterP3JoinSessionState, afterModifySessionState);

            //p0 makes a move
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };
            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;
            this.GameStateProxy.PutGameState(sessionState.SessionID, creationData.GameID.ToString(), modifiableGameState);

            FullGameState gameStateAfterMove = this.GameStateProxy.GetGameState(sessionState.SessionID, creationData.GameID.ToString());
            VerifyGameStateChange(modifiableGameState, gameStateAfterMove);

            //verify your turn for p2
            List<Notification> nList = VerifyNotifications(sessionState.GameID.ToString(), sessionState.SessionID, Notification.NotificationType.YourTurn.ToString(), TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password, 1);
            //verify default notification status
            Assert.AreEqual<Notification.NotificationStatus>(Notification.NotificationStatus.UnRead, nList[0].Status, "Error: Default notification status was not Unread.");

            //p2 makes the notification viewed
            this.NotificationsServiceProxy.UserID = TestAreaBase.users[2].MemberName;
            this.NotificationsServiceProxy.Password = TestAreaBase.users[2].Password;
            this.NotificationsServiceProxy.UpdateNotification(nList[0].Id, Notification.NotificationStatus.Viewed.ToString());

            //verify update
            nList = VerifyNotifications(sessionState.GameID.ToString(), sessionState.SessionID, Notification.NotificationType.YourTurn.ToString(), TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password, 1);
            Assert.AreEqual<Notification.NotificationStatus>(Notification.NotificationStatus.Viewed, nList[0].Status, "Error: Notification status was not updated.");

            //p3 veiws the session summary
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            SessionEntry[] sessionEntries = this.GameSessionProxy.ViewSessionSummaries(sessionState.GameID.ToString(), sessionState.Variant.ToString(), String.Empty, String.Empty, "10", ShowSessionType.Active.ToString());
            Assert.IsNotNull(sessionEntries, "Error: Session Entry should not be null.");
            Assert.IsTrue(sessionEntries.Length > 0, "Error: Length should be greater than 0.");

            //p3 send user nudge for p2
            GameAction gameAction = new GameAction();
            gameAction.ActionType = GameActionType.UserNudge;
            gameAction.ActionData = new byte[] { 1 };
            gameAction.ActionTime = DateTime.Now;
            gameAction.SequenceNumber = 0;

            this.GameSessionProxy.UserID = TestAreaBase.users[3].MemberName;
            this.GameSessionProxy.Password = TestAreaBase.users[3].Password;
            this.GameStateProxy.PostGameAction(
                sessionState.SessionID.ToString(),
                creationData.GameID.ToString(),
                gameAction);

            //verify nudge for p2
            TestAreaBase.notificationCommon.VerifyNotificationCreated(sessionState.GameID.ToString(), sessionState.SessionID, Notification.NotificationType.Nudge, TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password);

            //p2 makes a move
            modifiableGameState.ActiveSeatIndex = 2;
            byte[] gameData = TestAreaBase.GenerateRandomBytes();
            modifiableGameState.GameData = gameData;
            this.GameStateProxy.UserID = TestAreaBase.users[2].MemberName;
            this.GameStateProxy.Password = TestAreaBase.users[2].Password;
            this.GameStateProxy.PutGameState(sessionState.SessionID, creationData.GameID.ToString(), modifiableGameState);

            //verify your turn notification is deleted after making a move, get notification before a call to GetGameState
            VerifyNotifications(sessionState.GameID.ToString(), sessionState.SessionID, Notification.NotificationType.YourTurn.ToString(), TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password, 0);


            gameStateAfterMove = this.GameStateProxy.GetGameState(sessionState.SessionID, creationData.GameID.ToString());
            VerifyGameStateChange(modifiableGameState, gameStateAfterMove);

            
            //verify your turn for p3
            TestAreaBase.notificationCommon.VerifyNotificationCreated(sessionState.GameID.ToString(), sessionState.SessionID, Notification.NotificationType.YourTurn, TestAreaBase.users[3].MemberName, TestAreaBase.users[3].Password);

            //p3 makes a move
            modifiableGameState.ActiveSeatIndex = 0;
            gameData = TestAreaBase.GenerateRandomBytes();
            modifiableGameState.GameData = gameData;
            this.GameStateProxy.UserID = TestAreaBase.users[3].MemberName;
            this.GameStateProxy.Password = TestAreaBase.users[3].Password;
            this.GameStateProxy.PutGameState(sessionState.SessionID, creationData.GameID.ToString(), modifiableGameState);

            //verify your turn for p0, get notification before a call to GetGameState delete it
            TestAreaBase.notificationCommon.VerifyNotificationCreated(sessionState.GameID.ToString(), sessionState.SessionID, Notification.NotificationType.YourTurn, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

            gameStateAfterMove = this.GameStateProxy.GetGameState(sessionState.SessionID, creationData.GameID.ToString());
            VerifyGameStateChange(modifiableGameState, gameStateAfterMove);
           
            //p0 leaves the session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            this.GameSessionProxy.LeaveSession(sessionState.SessionID.ToString(), sessionState.GameID.ToString());

            //View Session after Leave
            this.GameSessionProxy.UserID = TestAreaBase.users[3].MemberName;
            this.GameSessionProxy.Password = TestAreaBase.users[3].Password;
            SessionState afterP0LeaveSessionState = this.GameSessionProxy.ViewSession(sessionState.SessionID.ToString(), sessionState.GameID.ToString());

            //Assert SessionState
            AssertLeaveSessionState(afterModifySessionState, afterP0LeaveSessionState);
            Assert.AreEqual(1, afterP0LeaveSessionState.OwnerSeatIndex, "Error:Wrong owner.");

            //verify final nudge for p2
            nList = VerifyNotifications(sessionState.GameID.ToString(), sessionState.SessionID, Notification.NotificationType.Nudge.ToString(), TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password, 1);

            //verify p2 is now the owner of the session
            //p2 modifies the session info
            modificationData.TotalSeatsAvailable = 10;
            modificationData.ReservedSeatsAvailable = 2;

            //Modify Session
            this.GameSessionProxy.UserID = TestAreaBase.users[2].MemberName;
            this.GameSessionProxy.Password = TestAreaBase.users[2].Password;
            this.GameSessionProxy.ModifySession(sessionState.SessionID.ToString(), sessionState.GameID.ToString(), modificationData);

            //View Session
            this.GameSessionProxy.UserID = TestAreaBase.users[2].MemberName;
            this.GameSessionProxy.Password = TestAreaBase.users[2].Password;
            SessionState afterP2ModifySessionState = this.GameSessionProxy.ViewSession(sessionState.SessionID.ToString(), sessionState.GameID.ToString());

            //game end 
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 1 };
            gameResults.LosingSeatIndexes = new int[] { 2 };

            this.GameStateProxy.UserID = TestAreaBase.users[2].MemberName;
            this.GameStateProxy.Password = TestAreaBase.users[2].Password;
            this.GameStateProxy.PostGameEnd(sessionState.SessionID, creationData.GameID.ToString(), gameResults);

            //you win\you lose
            TestAreaBase.notificationCommon.VerifyNotificationCreated(sessionState.GameID.ToString(), sessionState.SessionID, Notification.NotificationType.YouWin, TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password);
            TestAreaBase.notificationCommon.VerifyNotificationCreated(sessionState.GameID.ToString(), sessionState.SessionID, Notification.NotificationType.YouLose, TestAreaBase.users[3].MemberName, TestAreaBase.users[3].Password);

            //Delete all notifications of this session for P3
            this.NotificationsServiceProxy.DeleteNotificationBySession(sessionState.GameID.ToString(), sessionState.SessionID, TestAreaBase.users[3].MemberName, TestAreaBase.users[3].Password);

            //verify delete
            VerifyNotifications(sessionState.GameID.ToString(), sessionState.SessionID, string.Empty, TestAreaBase.users[3].MemberName, TestAreaBase.users[3].Password, 0);
        }


        private List<Notification> VerifyNotifications(string gameId, string sessionId, string type, string userId, string password, int notificationCount)
        {
            List<Notification> notifications = null;
            for (int i = 0; i < 10; i++)
            {
                notifications = this.NotificationsServiceProxy.GetNotifications(
                    gameId,
                    sessionId,
                    0,
                    Constants.IGNORE_lAST_ID,
                    100,
                    type,
                    false,
                   userId,
                    password,
                    null);
                Assert.IsNotNull(notifications);
                if (notificationCount == notifications.Count)
                    break;
                else
                    Thread.Sleep(2000);
            }
            Assert.AreEqual(notificationCount, notifications.Count, "Error: Unexpected number of notifications.");
            return notifications;
        }

        private void VerifyGameStateChange(ModifiableGameState modifiableGameState, FullGameState gameStateAfterMove)
        {
            Assert.AreEqual(modifiableGameState.ActiveSeatIndex, gameStateAfterMove.GameStateInfo.ActiveSeatIndex, "Error: Different active seat index.");
            for (int i = 0; i < modifiableGameState.GameData.Length; i++)
            {
                Assert.AreEqual(modifiableGameState.GameData[i], gameStateAfterMove.GameData[i], "Error: Game data should not be different.");
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Test.API\Notifications\DeleteNotification.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using AsyncMultiplayer.NotificationService;
using System.Configuration;
using LiveN.Test.Framework.Configuration;
using System.Net;
using System.Threading;
using LiveN.Test.Common.Web;
using Multiplayer.Test.UserAccounts;
using LiveN.Test.Common;

namespace Multiplayer.Test.API
{
    /// <summary>
    /// Summary description for DeleteNotification
    /// </summary>
    [TestClass]
    public class DeleteNotification : TestAreaBase
    {
        public DeleteNotification()
        {
        }
        
        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
        }

        [TestInitialize()]
        public void MyTestInitialize()
        {
            LockTest();
        }

        [TestCleanup]
        public void TestCleanup()
        {
            try
            {
                TestAreaBase.notificationCommon.TestCleanup();
            }
            finally
            {
                UnlockTest();
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(0)]
        [Description("Delete notification by ID")]
        [TestProperty("Type", "BVTs")]
        public void BVT_DeleteNotification()
        {
            TestAreaBase.notificationCommon.CheckNotificationCount(Constants.TESTGAMEID.ToString(), testHooksClient.TestSessionId, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            string notificationId = testHooksClient.CreateDummyNotification();
            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), testHooksClient.TestSessionId, 0, Constants.IGNORE_lAST_ID, 100, String.Empty, false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, null);
            Assert.IsNotNull(notifications);
            Assert.IsTrue(notifications.Count == 1, "ERROR: Unexpected Number of notifications.");
            TestAreaBase.notificationCommon.VerifyNotification(notifications[0], notificationId);

            //delete
            this.NotificationsServiceProxy.DeleteNotificationQuery(notificationId, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

            //verify
            notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), testHooksClient.TestSessionId.ToString(), 0, Constants.IGNORE_lAST_ID, 100, String.Empty, false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, null);
            Assert.IsNotNull(notifications);
            Assert.IsTrue(notifications.Count == 0, "ERROR: Unexpected Number of notifications.");
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Delete all Notifications on the service for a specific user regardless of session")]
        [TestProperty("Type", "Feature")]
        public void P_DeleteNotification_DeleteAllNotifications()
        {
            List<string> s = new List<string>();
            foreach (Notification.NotificationType t in nTypes)
            {
                s.Add(testHooksClient.CreateNotification(
                    t,
                    Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password),
                    Constants.TESTGAMEID,
                    testHooksClient.TestSessionId));
            }

            List<Notification> notificationsBefore = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                testHooksClient.TestSessionId,
                0,
                Constants.IGNORE_lAST_ID,
                Int32.MaxValue,
                String.Empty,
                false, 
                TestAreaBase.users[0].MemberName, 
                TestAreaBase.users[0].Password, 
                null);

            TraceEx.TraceStart(String.Format("Deleting {0} notifications", notificationsBefore.Count));

            foreach (Notification n in notificationsBefore)
            {
                this.NotificationsServiceProxy.DeleteNotificationQuery(n.Id, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            }


            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                testHooksClient.TestSessionId,
                0,
                Constants.IGNORE_lAST_ID,
                Int32.MaxValue,
                String.Empty,
                false, 
                TestAreaBase.users[0].MemberName, 
                TestAreaBase.users[0].Password, 
                null);
            Assert.IsTrue(notifications.Count == 0, "Notification count after calling DELETE on each Notification was not zero");
        }


        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Delete a non-existing Notification and verify no action.")]
        [TestProperty("Type", "Feature")]
        public void P_DeleteNotification_NonexistingNotification()
        {
            Thread.Sleep(Constants.NOTIFICATION_RETRIES * Constants.NOTIFICATION_SLEEP_TIME);  // to give time for notification internal so that any requests in the queue would be processed before checking pre existing notifications.
            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);;
            testHooksClient.CreateDummyNotification();
            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                String.Empty,
                0,
                Constants.IGNORE_lAST_ID,
                Int32.MaxValue,
                String.Empty,
                false, 
                TestAreaBase.users[0].MemberName, 
                TestAreaBase.users[0].Password, 
                null);
            Assert.IsNotNull(notifications);
            Assert.AreEqual(1, notifications.Count, "Error: Unexpected number of notifications.");

            // We're reusing an old deleted NotificationID for this scenario.
            // Since it was generated with a GUID+Timestamp mechanism it's safe to say this will always in the future 
            // be a valid but non-existing Notification ID.
            this.NotificationsServiceProxy.DeleteNotificationQuery("2521442294861521366-630f329f-9065-43d4-aee1-0008b2f2752c", TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
           
            List<Notification> notificationsAfter = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                String.Empty,
                0,
                Constants.IGNORE_lAST_ID,
                Int32.MaxValue,
                String.Empty,
                false, 
                TestAreaBase.users[0].MemberName, 
                TestAreaBase.users[0].Password, 
                null);
            Assert.IsNotNull(notificationsAfter);
            Assert.AreEqual(1, notificationsAfter.Count, "Error: Wrong number of notifications.");
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify that user's last update time is updated only after a successful delete operation.")]
        [TestProperty("Type", "Feature")]
        public void P_DeleteNotification_Etag()
        {
            Thread.Sleep(Constants.NOTIFICATION_RETRIES * Constants.NOTIFICATION_SLEEP_TIME);  // to give time for notification internal so that any requests in the queue would be processed before test starts.
            TestAreaBase.notificationCommon.CheckNotificationCount(Constants.TESTGAMEID.ToString(), testHooksClient.TestSessionId, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password); ;
            string notificationId = testHooksClient.CreateDummyNotification();
            List<Notification> nList = this.NotificationsServiceProxy.GetNotifications(
                                            Constants.TESTGAMEID.ToString(),
                                            testHooksClient.TestSessionId,
                                            0,
                                            Constants.IGNORE_lAST_ID,
                                            5,
                                            string.Empty,
                                            false, 
                                            TestAreaBase.users[0].MemberName, 
                                            TestAreaBase.users[0].Password, 
                                            null);
            Assert.IsNotNull(nList);
            Assert.AreEqual(1, nList.Count, "Unexpected number of notifications.");
            string etag = this.NotificationsServiceProxy.EtagInResponse;
            Thread.Sleep(2000); //to make sure that the user last update time is different from the previous one.
            this.NotificationsServiceProxy.DeleteNotificationQuery(notificationId, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            nList = this.NotificationsServiceProxy.GetNotifications(
                        Constants.TESTGAMEID.ToString(),
                        testHooksClient.TestSessionId,
                        0,
                        Constants.IGNORE_lAST_ID,
                        5,
                        string.Empty,
                        false,
                        TestAreaBase.users[0].MemberName, 
                        TestAreaBase.users[0].Password,
                        etag);
            Assert.IsNotNull(nList);
            Assert.AreEqual(0, nList.Count, "Unexpected number of notifications.");

            //remove // from commented out code below after bug #3302 is fixed  -- modify the DeleteBySession_Etag and also UpdateNotification_Etag testcases once this is fixed
            //notificationId = this.testHooksClient.CreateDummyNotification();
            //nList = this.NotificationsServiceProxy.GetNotifications(
            //                    Constants.TESTGAMEID.ToString(),
            //                    testHooksClient.TestSessionId,
            //                    0,
            //                    Constants.IGNORE_lAST_ID,
            //                    5,
            //                    string.Empty,
            //                    false);
            //Assert.IsNotNull(nList);
            //Assert.AreEqual(1, nList.Count, "Unexpected number of notifications.");
            //etag = this.NotificationsServiceProxy.EtagInResponse;
            //Thread.Sleep(2000); //to make sure that the user last update time is different from the previous one.
            ////delete a noficiation that does not exist
            //this.NotificationsServiceProxy.DeleteNotificationQuery("2521442294861521366-630f329f-9065-43d4-aee1-0008b2f2752c");
            //try
            //{
            //    nList = this.NotificationsServiceProxy.GetNotifications(
            //                Constants.TESTGAMEID.ToString(),
            //                testHooksClient.TestSessionId,
            //                0,
            //                NotificationTestCommon.ignoreLastID,
            //                5,
            //                string.Empty,
            //                false,
            //                etag);
            //    Assert.Fail("Expecting a 304.");
            //}
            //catch (RestException e)
            //{
            //    Assert.AreEqual<HttpStatusCode>(HttpStatusCode.NotModified, e.Response.Status);
            //}
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify that users cannot delete another user's notifications.")]
        [TestProperty("Type", "Feature")]
        public void N_DeleteNotification_OtherUser()
        {
            string sessionId = Guid.NewGuid().ToString();
            TestAreaBase.notificationCommon.CheckNotificationCount(Constants.TESTGAMEID.ToString(), sessionId, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            string notificationId = testHooksClient.CreateNotification(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password), Constants.TESTGAMEID, sessionId);
            List<Notification> nList = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), sessionId, 0, Constants.IGNORE_lAST_ID, 100, string.Empty, false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, null);
            Assert.IsNotNull(nList);
            Assert.AreEqual(1, nList.Count, "Incorrect number of notifications. Setup failed");
            Assert.AreEqual(notificationId, nList[0].Id, "unexpected notification ID");
            this.NotificationsServiceProxy.DeleteNotificationQuery(notificationId, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            nList = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), sessionId, 0, Constants.IGNORE_lAST_ID, 100, string.Empty, false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, null);
            Assert.IsNotNull(nList);
            Assert.AreEqual(1, nList.Count, "Incorrect number of notifications. Setup failed");
            Assert.AreEqual(notificationId, nList[0].Id, "unexpected notification ID");
            this.NotificationsServiceProxy.DeleteNotificationQuery(nList[0].Id, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            nList = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), sessionId, 0, Constants.IGNORE_lAST_ID, 100, string.Empty, false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, null);
            Assert.IsNotNull(nList);
            Assert.AreEqual(0, nList.Count, "Incorrect number of notifications. Setup failed");
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description(" expected lenght for notification id is 56 char(tick length + guid length + 1). pass in a good length but invalid notification id and verify error message.")]
        [TestProperty("Type", "Feature")]
        public void N_DeleteNotification_InvalidNotificationId()
        {
            string invalidNotificationId = new string('a', 20) + Guid.NewGuid().ToString();
            try
            {
                this.NotificationsServiceProxy.DeleteNotificationQuery(invalidNotificationId, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
                Assert.Fail("Test should give a Bad Request response");
            }
            catch (RestException e)
            {
                NotificationTestCommon.VerifyException(HttpStatusCode.BadRequest, "2148015943 Invalid argument or bad request: notificationId is invalid", e.Response);
            }
        }


        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Call DeleteNotification with a short length of notification Id than the one that is expected(56) and verify a bad request response.")]
        [TestProperty("Type", "Feature")]
        public void N_DeleteNotification_ExpectedMinus1NotificationIdLength()
        {
            string notificationId = new string('a', 55);
            try
            {
                this.NotificationsServiceProxy.DeleteNotificationQuery(notificationId, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
                Assert.Fail("Test should give a Bad Request response");
            }
            catch (RestException e)
            {
                NotificationTestCommon.VerifyException(HttpStatusCode.BadRequest, "2148015943 Invalid argument or bad request: notificationId lenght is invalid", e.Response);
            }
        }


        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Call DeleteNotification with a long notification Id and verify a bad request response.")]
        [TestProperty("Type", "Feature")]
        public void N_DeleteNotification_LongNotificationIdLength()
        {
            string notificationId = new string('a', 57);
            try
            {
                this.NotificationsServiceProxy.DeleteNotificationQuery("nighteen plus 1 len.", TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
                Assert.Fail("Test should give a Bad Request response");
            }
            catch (RestException e)
            {
                NotificationTestCommon.VerifyException(HttpStatusCode.BadRequest, "2148015943 Invalid argument or bad request: notificationId lenght is invalid", e.Response);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Call DeleteNotification with an empty notification Id and verify a bad request response.")]
        [TestProperty("Type", "Feature")]
        public void N_DeleteNotification_EmptyNotificationId()
        {
            try
            {
                this.NotificationsServiceProxy.DeleteNotificationQuery(string.Empty, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
                Assert.Fail("Test should give a Bad Request response");
            }
            catch (RestException e)
            {
                NotificationTestCommon.VerifyException(HttpStatusCode.BadRequest, "2148015943 Invalid argument or bad request: Notification ID is null or empty", e.Response);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Call DeleteNotification with a null notification Id and verify a bad request response.")]
        [TestProperty("Type", "Feature")]
        public void N_DeleteNotification_NullNotificationId()
        {
            try
            {
                this.NotificationsServiceProxy.DeleteNotificationQuery(null, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
                Assert.Fail("Test should give a Bad Request response");
            }
            catch (RestException e)
            {
                NotificationTestCommon.VerifyException(HttpStatusCode.BadRequest, "2148015943 Invalid argument or bad request: Notification ID is null or empty", e.Response);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Test.API\Partner\PostGameResult.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using AsyncMultiplayer.PartnerService.DataContracts;
using AsyncMultiplayer.NotificationService;
using AsyncMultiplayer.SessionCommon;
using LiveN.Test.Framework.Configuration;
using LiveN.Test.Common.Web;
using System.Web;
using System.Threading;
using System.Net;
using System.Configuration;
using Gds.Contracts;
using MultiPlayer.Test.Data;
using Multiplayer.Test.Proxy;
using Multiplayer.Test.UserAccounts;

namespace Multiplayer.Test.API
{
    /// <summary>
    /// Summary description for PostGameResult
    /// </summary>
    [TestClass]
    public class PostGameResult : TestAreaBase
    {
        private Random randomGenerator = new Random();
        private static PartnerServiceProxy partnerClient = null;

        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
            partnerClient = new PartnerServiceProxy();
        }

        [TestInitialize()]
        public void MyTestInitialize()
        {
            
            
            LockTest("gameresult");
        }

        [TestCleanup]
        public void TestCleanup()
        {
            UnlockTest("gameresult");
        }

        static string MachineName = ConfigurationManager.ConnectionStrings["lest_AsyncNotification_db"].ConnectionString.Split(';')[0].Substring(12);

        ////[TestMethod, Owner("a-sediro"), Priority(0)]
        [Description("Verify that response to the API call is ok")]
        [TestProperty("Type", "BVTs")]
        public void BVT_PostGameResult()
        {
            partnerClient.PostGameResults(GetDefaultGameResults());
        }

        ////[TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Post a result and verify that player's last update time is updated.")]
        [TestProperty("Type", "Features")]
        public void P_PostGameResult_LastPlayedDateTime()
        {
            DateTime now = DateTime.Now;
            partnerClient.PostGameResults(GetDefaultGameResults());
            Thread.Sleep(2000); 

            DateTime playerLastDateTime = DateTime.Parse(GetLeaderboardValue("LastPlayedDateTime"));
            Assert.IsTrue(((now.AddSeconds(-1).CompareTo(playerLastDateTime)<0) && (now.AddMinutes(2).CompareTo(playerLastDateTime) > 0)), "Error: Player's last date time is not updated. It is " + playerLastDateTime + " while test time was " + now.ToString());
        }

        ////[TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Post a score that is greater than the best score and verify that best score is updated.")]
        [TestProperty("Type", "Features")]
        public void P_PostGameResult_BestScore()
        {
            long score = long.Parse(GetLeaderboardValue("BestScore"));
            List<PartnerCompositeGameResult> gameResults = GetDefaultGameResults();
            gameResults[0].GameResult.Score = score + 1;

            partnerClient.PostGameResults(gameResults);
            Thread.Sleep(2000); 

            long newScore = long.Parse(GetLeaderboardValue("BestScore"));
            Assert.AreEqual(score + 1, newScore, "Error: Best score is not updated");
        }

        ////[TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Post a win result and verify that number of wins has been increased")]
        [TestProperty("Type", "Features")]
        public void P_PostGameResult_Outcome_Win()
        {
            long wins = long.Parse(GetLeaderboardValue("Wins"));
            List<PartnerCompositeGameResult> gameResults = GetDefaultGameResults();
            gameResults[0].GameResult.Outcome = "win";

            partnerClient.PostGameResults(gameResults);
            Thread.Sleep(2000); 

            Assert.AreEqual(wins + 1, long.Parse(GetLeaderboardValue("Wins")), "Error: Number of wins is not updated");
        }

        ////[TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Post a non win result and verify that wins has not increased")]
        [TestProperty("Type", "Features")]
        public void P_PostGameResult_Outcome_Null()
        {
            long wins = long.Parse(GetLeaderboardValue("Wins"));
            List<PartnerCompositeGameResult> gameResults = GetDefaultGameResults();
            gameResults[0].GameResult.Outcome = null;

            partnerClient.PostGameResults(gameResults);
            Thread.Sleep(2000); 

            Assert.AreEqual(wins, long.Parse(GetLeaderboardValue("Wins")), "Error: Number of wins is not expected to change");
        }

        ////[TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Post a result and verify that player's last update time is updated for multiple players.")]
        [TestProperty("Type", "Features")]
        public void P_PostGameResult_LastPlayedDateTime_MoreThan1Result_MultipleUsers()
        {
            Assert.IsTrue(2 <= TestAreaBase.users.Count, "We need at least two users for this test");

            DateTime now = DateTime.Now;

            partnerClient.PostGameResults(GetDefaultGameResults(TestAreaBase.users.Count));
            Thread.Sleep(2000);

            for (int i = 0; i < TestAreaBase.users.Count; i++)
            {
                DateTime playerLastDateTime = DateTime.Parse(GetLeaderboardValue("LastPlayedDateTime", TestAreaBase.users[i].MemberName, TestAreaBase.users[i].Password));
                Assert.IsTrue(((now.AddSeconds(-1).CompareTo(playerLastDateTime) < 0) && (now.AddMinutes(2).CompareTo(playerLastDateTime) > 0)), "Error: Player's last date time is not updated. It is " + playerLastDateTime + " while test time was " + now.ToString());
            }
        }

        ////[TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Post two results for same user and verify that both results are posted.")]
        [TestProperty("Type", "Features")]
        public void P_PostGameResult_LastPlayedDateTime_MoreThan1Result_SameGamertag()
        {
            long wins = long.Parse(GetLeaderboardValue("Wins"));

            List<PartnerCompositeGameResult> gameResults = GetDefaultGameResults();
            PartnerCompositeGameResult gameResult2 = getDefaultGameResult(Users.GetGamertag(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password));
            gameResults.Add(gameResult2);

            partnerClient.PostGameResults(gameResults);
            Thread.Sleep(2000);

            Assert.AreEqual(wins + 2, long.Parse(GetLeaderboardValue("Wins")), "Error: Best score is not updated");
        }

        ////[TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Try posting a result thathas no values and verify Bad Request.")]
        [TestProperty("Type", "Features")]
        public void N_PostGameResult_NoResult()
        {
            List<PartnerCompositeGameResult> gameResults = GetDefaultGameResults();
            gameResults[0].GameResult.Score = null;
            gameResults[0].GameResult.Outcome = null;
            gameResults[0].GameResult.Time = null;
            gameResults[0].GameResult.Blob = null;
            try
            {
                partnerClient.PostGameResults(gameResults);
                Assert.Fail("Expected to get a NOT FOUND exception but it didnt");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.NotFound, e.Response.Status);
            }
        }

        //bug 4816
        ////[TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("try posting a result with null gamer tag and verify Bad Request.")]
        [TestProperty("Type", "Features")]
        public void N_PostGameResult_NullGamerTag()
        {
            List<PartnerCompositeGameResult> gameResults = GetDefaultGameResults();
            gameResults[0].Gamertag = null;
            try
            {
                partnerClient.PostGameResults(gameResults);
                Assert.Fail("Expected to get a NOT FOUND exception but it didnt");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.NotFound, e.Response.Status);
            }
        }

        ////[TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("try posting a result with empty gamer tag and verify Bad Request.")]
        [TestProperty("Type", "Features")]
        public void N_PostGameResult_EmptyGamerTag()
        {
            List<PartnerCompositeGameResult> gameResults = GetDefaultGameResults();
            gameResults[0].Gamertag = "";
            try
            {
                partnerClient.PostGameResults(gameResults);
                Assert.Fail("Expected to get a NOT FOUND exception but it didnt");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.NotFound, e.Response.Status);
            }
        }

        ////[TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("try posting a result with invalid gamer tag and verify Bad Request.")]
        [TestProperty("Type", "Features")]
        public void N_PostGameResult_InvalidGamerTag()
        {
            List<PartnerCompositeGameResult> gameResults = GetDefaultGameResults();
            gameResults[0].Gamertag = "xyz";

            try
            {
                partnerClient.PostGameResults(gameResults);
                Assert.Fail("Expected to get a NOT FOUND exception but it didnt");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.NotFound, e.Response.Status);
            }
        }

        ////[TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("try posting a result with empty locale tag and verify Bad Request.")]
        [TestProperty("Type", "Features")]
        public void N_PostGameResult_EmptyLocale()
        {
            List<PartnerCompositeGameResult> gameResults = GetDefaultGameResults();
            gameResults[0].Locale = "";
            try
            {
                partnerClient.PostGameResults(gameResults);
                Assert.Fail("Expected to get a NOT FOUND exception but it didnt");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.NotFound, e.Response.Status);
            }
        }

        ////[TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("try posting a result with null locale tag and verify Bad Request.")]
        [TestProperty("Type", "Features")]
        public void N_PostGameResult_NullLocale()
        {
            List<PartnerCompositeGameResult> gameResults = GetDefaultGameResults();
            gameResults[0].Locale = null;
            try
            {
                partnerClient.PostGameResults(gameResults);
                Assert.Fail("Expected to get a NOT FOUND exception but it didnt");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.NotFound, e.Response.Status);
            }
        }

        ////[TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("try posting a result with good locale tag and verify player's last update time is updated")]
        [TestProperty("Type", "Features")]
        public void P_PostGameResult_GoodLocale()
        {
            List<PartnerCompositeGameResult> gameResults = GetDefaultGameResults();
            gameResults[0].Locale = LocalizationTestData.AVAILABLE_GOOD_LOCALES[randomGenerator.Next(LocalizationTestData.AVAILABLE_GOOD_LOCALES.Length / 2), 0];

            DateTime now = DateTime.Now;
            partnerClient.PostGameResults(gameResults);

            DateTime playerLastDateTime = DateTime.Parse(GetLeaderboardValue("LastPlayedDateTime"));
            Assert.IsTrue(((now.AddSeconds(-1).CompareTo(playerLastDateTime) < 0) && (now.AddMinutes(2).CompareTo(playerLastDateTime) > 0)), "Error: Player's last date time is not updated. It is " + playerLastDateTime + " while test time was " + now.ToString());
        }

        //bug 4817
        ////[TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("try posting a result with mixed locale tag and verify player's last update time is updated")]
        [TestProperty("Type", "Features")]
        public void P_PostGameResult_MixedLocale()
        {
            List<PartnerCompositeGameResult> gameResults = GetDefaultGameResults();
            gameResults[0].Locale = LocalizationTestData.MIXED_LOCALE[randomGenerator.Next(LocalizationTestData.MIXED_LOCALE.Length / 2), 0];

            DateTime now = DateTime.Now;
            partnerClient.PostGameResults(gameResults);

            DateTime playerLastDateTime = DateTime.Parse(GetLeaderboardValue("LastPlayedDateTime"));
            Assert.IsTrue(((now.AddSeconds(-1).CompareTo(playerLastDateTime) < 0) && (now.AddMinutes(2).CompareTo(playerLastDateTime) > 0)), "Error: Player's last date time is not updated. It is " + playerLastDateTime + " while test time was " + now.ToString());
        }

        //bug 4817
        ////[TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("try posting a result with fallback locale tag and verify player's last update time is updated")]
        [TestProperty("Type", "Features")]
        public void P_PostGameResult_FallbackLocale()
        {
            List<PartnerCompositeGameResult> gameResults = GetDefaultGameResults();
            gameResults[0].Locale = LocalizationTestData.UNSUPPORTED_lOCALE[randomGenerator.Next(LocalizationTestData.UNSUPPORTED_lOCALE.Length)];

            DateTime now = DateTime.Now;
            partnerClient.PostGameResults(gameResults);

            DateTime playerLastDateTime = DateTime.Parse(GetLeaderboardValue("LastPlayedDateTime"));
            Assert.IsTrue(((now.AddSeconds(-1).CompareTo(playerLastDateTime) < 0) && (now.AddMinutes(2).CompareTo(playerLastDateTime) > 0)), "Error: Player's last date time is not updated. It is " + playerLastDateTime + " while test time was " + now.ToString());
        }


        ////[TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("try posting a result with null platform type tag and verify Bad Request.")]
        [TestProperty("Type", "Features")]
        public void N_PostGameResult_NullPlatformType()
        {
            List<PartnerCompositeGameResult> gameResults = GetDefaultGameResults();
            gameResults[0].PlatformType = null;
            try
            {
                partnerClient.PostGameResults(gameResults);
                Assert.Fail("Expected to get a NOT FOUND exception but it didnt");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.NotFound, e.Response.Status);
            }
        }

        /// <summary>
        /// Feature Test for GameState svc PostGameEnd API with  ActiveSeat player leaving session and Losing
        /// </summary>
        //[TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("Feature Test for GameState svc PostGameEnd API with  ActiveSeat player leaving session and Losing")]
        [TestProperty("Type", "FeatureTests")]
        public void P_PostGameResult_ActiveSeatPlayerLeave_Loses()
        {
            // Initialize CreationData
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, new byte[] { 1, 2, 3 }, new InactivityWarningBehavior(), true, "TestGame");

            // create session by player 1
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData,
                                                                                  TestAreaBase.users[0].MemberName,
                                                                                  TestAreaBase.users[0].Password);
            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            //player2 join session
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData,
                                                                              TestAreaBase.users[1].MemberName,
                                                                              TestAreaBase.users[1].Password);

            //Player1 makes a move
            ModifiableGameState modifiedState = new ModifiableGameState();
            modifiedState.GameData = new byte[] { 60, 61, 62, 63, 64, 65 };
            modifiedState.ActiveSeatIndex = 1;
            this.GameStateProxy.PutGameState(createSessionState.SessionID, createSessionState.GameID.ToString(), modifiedState,
                                             TestAreaBase.users[0].MemberName,
                                             TestAreaBase.users[0].Password);



            //Get Leaderboard score for Player2 lose Seat            
            long Player2Lose = long.Parse(GetLeaderboardValue("Losses",
                                                           TestAreaBase.users[1].MemberName,
                                                           TestAreaBase.users[1].Password));            
                       
            this.GameSessionProxy.LeaveSession(createSessionState.SessionID, createSessionState.GameID.ToString(),
                                               TestAreaBase.users[1].MemberName,
                                               TestAreaBase.users[1].Password);

           Thread.Sleep(60000);

           string loses = GetLeaderboardValue("Losses", TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
           Assert.AreEqual<long>(Player2Lose + 1, long.Parse(loses), "Error: YouLose notification wasnt created after active seat player left session");
        }

        /// <summary>
        /// Feature Test for GameState svc PostGameEnd API with  ActiveSeat player leaving session  after game is complete and no Lose added on Player result
        /// </summary>
        //[TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for GameState svc PostGameEnd API with  ActiveSeat player leaving session and no Lose added to player")]
        [TestProperty("Type", "FeatureTests")]
        public void P_PostGameResult_GameEnded_NoLosesOnLeaveSession()
        {  
            // Initialize creation data and create session        
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, new byte[] { 1, 2, 3 },
                                                               new InactivityWarningBehavior(), true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, 
                                                                            TestAreaBase.users[0].MemberName, 
                                                                            TestAreaBase.users[0].Password);
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 join session
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);
            SessionState joinSession = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData, 
                                                                         TestAreaBase.users[1].MemberName, 
                                                                         TestAreaBase.users[1].Password);
                      
            //Player1 makes a move
            ModifiableGameState modifiedState = new ModifiableGameState();
            modifiedState.GameData = new byte[] { 60, 61, 62, 63, 64, 65 };
            modifiedState.ActiveSeatIndex = 1;
            this.GameStateProxy.PutGameState(createSessionState.SessionID, createSessionState.GameID.ToString(), modifiedState,
                                             TestAreaBase.users[0].MemberName,
                                             TestAreaBase.users[0].Password);      


            //End game while it was player2 turn
            this.GameStateProxy.PostGameEnd(createSessionState.SessionID, createSessionState.GameID.ToString(),
                                            TestAreaBase.GetDefaultTwoPlayerGameResult(createSessionState.GameID.ToString(), (uint)createSessionState.Variant), 
                                            TestAreaBase.users[0].MemberName, 
                                            TestAreaBase.users[0].Password);

            //Get Leaderboard loss score for Player2           
            long Player2Lose = long.Parse(GetLeaderboardValue("Losses",
                                                           TestAreaBase.users[1].MemberName,
                                                           TestAreaBase.users[1].Password));

            //get session state
            SessionState sessionStateAfterGameEnd = this.GameSessionProxy.ViewSession(createSessionState.SessionID, createSessionState.GameID.ToString(), 
                                                                                      TestAreaBase.users[0].MemberName, 
                                                                                      TestAreaBase.users[0].Password);
            
            //Verify game complete and leave session
            if(sessionStateAfterGameEnd.State.IsComplete)
            {
                this.GameSessionProxy.LeaveSession(createSessionState.SessionID, createSessionState.GameID.ToString(), 
                                                   TestAreaBase.users[1].MemberName, 
                                                   TestAreaBase.users[1].Password);
            }
            else Assert.Fail("Error: The session does not have the isComplete flag set, SessionID: " + sessionStateAfterGameEnd.SessionID);

            Thread.Sleep(60000);
           
            string loses = GetLeaderboardValue("Losses", TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            Assert.AreEqual<long>(Player2Lose , long.Parse(loses), "Error: Unexpected number of  YouLose notification ");          
   
        }

        private PartnerCompositeGameResult getDefaultGameResult(string gamertag)
        {
            PartnerCompositeGameResult gameResult = new PartnerCompositeGameResult();
            gameResult.Gamertag = gamertag;
            gameResult.Locale = "en-US";
            gameResult.PlatformType = "5";
            gameResult.GameResult = new GameResult();
            gameResult.GameResult.GameId = Constants.TESTGAMEID;
            gameResult.GameResult.GameResultId = Guid.NewGuid();
            gameResult.GameResult.Variant = Constants.TESTGAMEVARIANT;
            gameResult.GameResult.TimeStamp = DateTime.Now;

            gameResult.GameResult.Outcome = "win";
            gameResult.GameResult.Score = 1;
            gameResult.GameResult.Time = 1;
            gameResult.GameResult.Blob = new byte[] { 1, 2, 3 };
            return gameResult;
        }

        private List<PartnerCompositeGameResult> GetDefaultGameResults()
        {
            return GetDefaultGameResults(1);
        }

        private List<PartnerCompositeGameResult> GetDefaultGameResults(int numUsers)
        {
            List<PartnerCompositeGameResult> gameResults = new List<PartnerCompositeGameResult>();
            for (int i = 0; i < numUsers; i++)
                gameResults.Add(getDefaultGameResult(Users.GetGamertag(TestAreaBase.users[i].MemberName, TestAreaBase.users[i].Password)));
            return gameResults;
        }

        public string GetLeaderboardValue(string statEntry)
        {
            return GetLeaderboardValue(statEntry, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
        }

        public string GetLeaderboardValue(string statEntry, string userName, string password)
        {
            LeaderboardResult result = this.NotificationsServiceProxy.GetLeaderboard(Constants.TESTGAMEID.ToString(), Constants.TESTGAMEVARIANT.ToString(), "BestScore", "1", "W1", "100", "2", userName, password);
            Assert.IsNotNull(result, "No result was returned");
            Assert.IsNotNull(result.Leaderboard, "No statistics were returned");
            Assert.AreNotEqual(0, result.Leaderboard.Count, "Leaderboard is empty");

            IList<Entry> entryList = result.Leaderboard[0].Statistics;
            IEnumerable<Entry> entries = (from e in entryList
                                          where e.Name == statEntry
                                          select e);
            int numEntries = entries.Count<Entry>();
            Assert.AreEqual(1, numEntries, "Error: Unexpected number of entries in response.");
            return entries.First<Entry>().Value;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Test.API\Partner\DeleteNotificationBySession_Partner.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using AsyncMultiplayer.NotificationService;
using LiveN.Test.Framework.Configuration;
using LiveN.Test.Common.Web;
using System.Web;
using System.Threading;
using System.Net;
using AsyncMultiplayer.PartnerService.DataContracts;
using Multiplayer.Test.Proxy;
using Multiplayer.Test.UserAccounts;

namespace Multiplayer.Test.API
{
    /// <summary>
    /// Summary description for DeleteNotificationBySession_Partner
    /// </summary>
    [TestClass]
    public class DeleteNotificationBySession_Partner : TestAreaBase
    {
        
        private static PartnerServiceProxy partnerClient = null;

        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
            partnerClient = new PartnerServiceProxy();
        }

        [TestInitialize()]
        public void MyTestInitialize()
        {
            LockTest();
        }

        [TestCleanup]
        public void TestCleanup()
        {
            try
            {
                TestAreaBase.notificationCommon.TestCleanup();
            }
            finally
            {
                UnlockTest();
            }
        }

        //[TestMethod, Owner("a-sediro"), Priority(0)]
        [Description("Verifies that DeleteNotificationBySession deletes the notification for that session and user.")]
        [TestProperty("Type", "BVTs")]
        public void BVT_DelNotifBySession_Partner()
        {
            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);;

            NotificationTestCommon.testHooksClient.CreateDummyNotification();

            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), NotificationTestCommon.testHooksClient.TestSessionId, 0, Constants.IGNORE_lAST_ID, 100, String.Empty, false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, null);
            Assert.IsNotNull(notifications);
            Assert.AreEqual(1, notifications.Count, "ERROR: Unexpected Number of notifications.");

            partnerClient.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), NotificationTestCommon.testHooksClient.TestSessionId, Users.GetGamertag(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password) + ";");

            VerifyDelete();
        }
        
        //[TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verifies that DeleteNotificationBySession deletes notifications of only that sessionId.")]
        [TestProperty("Type", "Features")]
        public void P_DelNotifBySession_Partner_TwoSessions()
        {
            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);;

            NotificationTestCommon.testHooksClient.CreateDummyNotification();
            string sessionId1 = NotificationTestCommon.testHooksClient.TestSessionId;

            
            NotificationTestCommon.testHooksClient.CreateDummyNotification();

            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), NotificationTestCommon.testHooksClient.TestSessionId, 0, Constants.IGNORE_lAST_ID, 100, String.Empty, false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, null);
            Assert.IsNotNull(notifications);
            Assert.AreEqual(1, notifications.Count, "ERROR: Unexpected Number of notifications.");

            notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), sessionId1, 0, Constants.IGNORE_lAST_ID, 100, String.Empty, false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, null);
            Assert.IsNotNull(notifications);
            Assert.AreEqual(1, notifications.Count, "ERROR: Unexpected Number of notifications.");

            partnerClient.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), NotificationTestCommon.testHooksClient.TestSessionId, Users.GetGamertag(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password) + ";");

            VerifyDelete(); // for sessionId = NotificationTestCommon.testHooksClient.TestSessionId

            // verify not deleted for sessionId = sessionId1
            notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), sessionId1, 0, Constants.IGNORE_lAST_ID, 100, String.Empty, false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, null);
            Assert.IsNotNull(notifications);
            Assert.AreEqual(1, notifications.Count, "ERROR: Unexpected Number of notifications.");

            partnerClient.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), sessionId1, Users.GetGamertag(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password) + ";");

            // verify deleted for sessionId = sessionId1
            VerifyDelete(sessionId1, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
        }

        //[TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verifies that DeleteNotificationBySession deletes notifications of all the gamertags.")]
        [TestProperty("Type", "Features")]
        public void P_DelNotifBySession_Partner_ManyGamerTags()
        {
            Assert.IsTrue(2 <= TestAreaBase.users.Count, "We need at least two users for this test.");
            StringBuilder gamertags = new StringBuilder();
            for (int i = 0; i < TestAreaBase.users.Count; i++)
            {
                TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[i].MemberName, TestAreaBase.users[i].Password);
                NotificationTestCommon.testHooksClient.CreateNotification(
                    Notification.NotificationType.YouWin,
                    Constants.TESTGAMEID,
                    NotificationTestCommon.testHooksClient.TestSessionId,
                    4,
                    Users.GetXuid(TestAreaBase.users[i].MemberName, TestAreaBase.users[i].Password),
                    Constants.TESTGAMEVARIANT);
                List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), NotificationTestCommon.testHooksClient.TestSessionId, 0, Constants.IGNORE_lAST_ID, 100, String.Empty, false, TestAreaBase.users[i].MemberName, TestAreaBase.users[i].Password, null);
                Assert.IsNotNull(notifications);
                Assert.AreEqual(1, notifications.Count, "ERROR: Unexpected Number of notifications.");
                gamertags.Append(Users.GetGamertag(TestAreaBase.users[i].MemberName, TestAreaBase.users[i].Password) + ";");
            }

            partnerClient.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), NotificationTestCommon.testHooksClient.TestSessionId, gamertags.ToString());

            for (int i = 0; i < TestAreaBase.users.Count; i++)
                VerifyDelete(NotificationTestCommon.testHooksClient.TestSessionId, TestAreaBase.users[i].MemberName, TestAreaBase.users[i].Password);
        }

        //[TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verifies that DeleteNotificationBySession deletes notifications of only that gamertag.")]
        [TestProperty("Type", "Features")]
        public void P_DelNotifBySession_Partner_TwoUsers()
        {
            Assert.IsTrue(2 <= TestAreaBase.users.Count, "We need at least two users for this test.");
            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);;
            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            NotificationTestCommon.testHooksClient.CreateDummyNotification();    //create notificationfor first user
            NotificationTestCommon.testHooksClient.CreateNotification(
                Notification.NotificationType.YouWin,
                Constants.TESTGAMEID,
                NotificationTestCommon.testHooksClient.TestSessionId,
                4,
                Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password),
                Constants.TESTGAMEVARIANT);                                      // create notification for second user

            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), NotificationTestCommon.testHooksClient.TestSessionId, 0, Constants.IGNORE_lAST_ID, 100, String.Empty, false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, null);
            Assert.IsNotNull(notifications);
            Assert.AreEqual(1, notifications.Count, "ERROR: Unexpected Number of notifications.");

            notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), NotificationTestCommon.testHooksClient.TestSessionId, 0, Constants.IGNORE_lAST_ID, 100, String.Empty, false, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password, null);
            Assert.IsNotNull(notifications);
            Assert.AreEqual(1, notifications.Count, "ERROR: Unexpected Number of notifications.");

            partnerClient.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), NotificationTestCommon.testHooksClient.TestSessionId, Users.GetGamertag(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password) + ";");

            VerifyDelete(); // for user0

            //Verify not deleted for user1
            notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), NotificationTestCommon.testHooksClient.TestSessionId, 0, Constants.IGNORE_lAST_ID, 100, String.Empty, false, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password, null);
            Assert.IsNotNull(notifications);
            Assert.AreEqual(1, notifications.Count, "ERROR: Unexpected Number of notifications.");

            partnerClient.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), NotificationTestCommon.testHooksClient.TestSessionId, Users.GetGamertag(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password) + ";");

            //Verify deleted for user1
            VerifyDelete(NotificationTestCommon.testHooksClient.TestSessionId, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
        }

        //[TestMethod, Owner("a-sediro"), Priority(0)]
        [Description("Verifies delete does not throw an error when there is no notification for the user")]
        [TestProperty("Type", "Features")]
        public void P_DelNotifBySession_Partner_WithoutCreatingAny()
        {
            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);;
            partnerClient.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), NotificationTestCommon.testHooksClient.TestSessionId, Users.GetGamertag(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password) + ";");
        }

        //[TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify users last update time is updated after delete")]
        [TestProperty("Type", "Features")]
        public void P_DelNotifBySession_Partner_Etag()
        {
            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);;

            NotificationTestCommon.testHooksClient.CreateDummyNotification();

            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), NotificationTestCommon.testHooksClient.TestSessionId, 0, Constants.IGNORE_lAST_ID, 100, String.Empty, false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, null);
            Assert.IsNotNull(notifications);
            Assert.AreEqual(1, notifications.Count, "ERROR: Unexpected Number of notifications.");
            string etag = this.NotificationsServiceProxy.EtagInResponse;

            Thread.Sleep(1000); // to keep one sec difference between get and delete calls

            partnerClient.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), NotificationTestCommon.testHooksClient.TestSessionId, Users.GetGamertag(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password) + ";");

            Thread.Sleep(5000); // to give time to process the delete request

            notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), NotificationTestCommon.testHooksClient.TestSessionId, 0, Constants.IGNORE_lAST_ID, 100, String.Empty, false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, etag);
            Assert.IsNotNull(notifications);
            Assert.AreEqual(0, notifications.Count, "ERROR: Unexpected Number of notifications.");
        }

        //[TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify users last update time is updated after delete for all gamertags")]
        [TestProperty("Type", "Features")]
        public void P_DelNotifBySession_Partner_ManyGamertags_Etag()
        {
            Assert.IsTrue(2 <= TestAreaBase.users.Count, "We need at least two users for this test.");
            StringBuilder gamertags = new StringBuilder();
            List<string> etags = new List<string>();
            for (int i = 0; i < TestAreaBase.users.Count; i++)
            {
                TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[i].MemberName, TestAreaBase.users[i].Password);
                NotificationTestCommon.testHooksClient.CreateNotification(
                    Notification.NotificationType.YouWin,
                    Constants.TESTGAMEID,
                    NotificationTestCommon.testHooksClient.TestSessionId,
                    4,
                    Users.GetXuid(TestAreaBase.users[i].MemberName, TestAreaBase.users[i].Password),
                    Constants.TESTGAMEVARIANT);
                List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), NotificationTestCommon.testHooksClient.TestSessionId, 0, Constants.IGNORE_lAST_ID, 100, String.Empty, false, TestAreaBase.users[i].MemberName, TestAreaBase.users[i].Password, null);
                Assert.IsNotNull(notifications);
                Assert.AreEqual(1, notifications.Count, "ERROR: Unexpected Number of notifications.");
                etags.Add(this.NotificationsServiceProxy.EtagInResponse);
                gamertags.Append(Users.GetGamertag(TestAreaBase.users[i].MemberName, TestAreaBase.users[i].Password) + ";");
            }

            Thread.Sleep(1000); // to keep one sec difference between get and delete calls

            partnerClient.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), NotificationTestCommon.testHooksClient.TestSessionId, gamertags.ToString());

            Thread.Sleep(5000); // to give time to process the delete request

            for (int i = 0; i < TestAreaBase.users.Count; i++)
            {
                List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), NotificationTestCommon.testHooksClient.TestSessionId, 0, Constants.IGNORE_lAST_ID, 100, String.Empty, false, TestAreaBase.users[i].MemberName, TestAreaBase.users[i].Password, etags[i]);
                Assert.IsNotNull(notifications);
                Assert.AreEqual(0, notifications.Count, "ERROR: Unexpected Number of notifications.");
            }
        }

        //this is a big related to 3302
        //[TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify users last update time will not be updated if no no notification actually got deleted by a delete call.")]
        [TestProperty("Type", "Features")]
        public void N_DelNotifBySession_Partner_EtagAfterFalseDelete()
        {
            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);;

            NotificationTestCommon.testHooksClient.CreateDummyNotification();

            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), NotificationTestCommon.testHooksClient.TestSessionId, 0, Constants.IGNORE_lAST_ID, 100, String.Empty, false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, null);
            Assert.IsNotNull(notifications);
            Assert.AreEqual(1, notifications.Count, "ERROR: Unexpected Number of notifications.");
            string etag = this.NotificationsServiceProxy.EtagInResponse;

            Thread.Sleep(1000); // to keep one sec difference between get and delete calls

            partnerClient.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), Guid.NewGuid().ToString(), Users.GetGamertag(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password) + ";");

            Thread.Sleep(5000); // to give time to process the delete request

            try
            {
                notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), NotificationTestCommon.testHooksClient.TestSessionId, 0, Constants.IGNORE_lAST_ID, 100, String.Empty, false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, etag);
                Assert.Fail("Expecting 304");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.NotModified, e.Response.Status);
                //verify that the notification was not deleted
                notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), NotificationTestCommon.testHooksClient.TestSessionId, 0, Constants.IGNORE_lAST_ID, 100, String.Empty, false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, null);
                Assert.IsNotNull(notifications);
                Assert.AreEqual(1, notifications.Count, "ERROR: Unexpected Number of notifications.");
            }
        }

        //[TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify users last update time will not be updated with unsuccessful delete call.")]
        [TestProperty("Type", "Features")]
        public void N_DelNotifBySession_Partner_Etag_FailedDelete()
        {
            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);;

            NotificationTestCommon.testHooksClient.CreateDummyNotification();

            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), NotificationTestCommon.testHooksClient.TestSessionId, 0, Constants.IGNORE_lAST_ID, 100, String.Empty, false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, null);
            Assert.IsNotNull(notifications);
            Assert.AreEqual(1, notifications.Count, "ERROR: Unexpected Number of notifications.");
            string etag = this.NotificationsServiceProxy.EtagInResponse;

            Thread.Sleep(1000); // to keep one sec difference between get and delete calls
            try
            {
                PartnerDeleteRequest deleteRequest = new PartnerDeleteRequest();
                partnerClient.DeleteNotificationBySession(deleteRequest);
                Assert.Fail("Expecting a bad request");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, e.Response.Status);
                Thread.Sleep(5000); // sleep anyway to make sure that some time has elapsed after the delete call
                try
                {
                    notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), NotificationTestCommon.testHooksClient.TestSessionId, 0, Constants.IGNORE_lAST_ID, 100, String.Empty, false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, etag);
                    Assert.Fail("Expecting 304");
                }
                catch (RestException ex)
                {
                    Assert.AreEqual<HttpStatusCode>(HttpStatusCode.NotModified, ex.Response.Status);
                }
            }
        }

        //[TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify error for nonexistent gameId")]
        [TestProperty("Type", "Features")]
        public void N_DelNotifBySession_Partner_GameId0()
        {
            NotificationTestCommon.testHooksClient.CreateDummyNotification();
            try
            {
                partnerClient.DeleteNotificationBySession("0", NotificationTestCommon.testHooksClient.TestSessionId, Users.GetGamertag(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password) + ";");
                Assert.Fail("Expecting a bad request");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, e.Response.Status);
            }
        }

        //[TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify error for nonexistent gamertag")]
        [TestProperty("Type", "Features")]
        public void N_DelNotifBySession_Partner_NonexistentGamertag()
        {
            try
            {
                partnerClient.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), Guid.NewGuid().ToString(), "sfhy;");
                Assert.Fail("Expecting a bad request");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, e.Response.Status);
            }

        }

        //[TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify error for null sessionId")]
        [TestProperty("Type", "Features")]
        public void N_DelNotifBySession_Partner_NullSessionId()
        {
            try
            {
                partnerClient.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), null, Users.GetGamertag(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password) + ";");
                Assert.Fail("Expecting a bad request");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, e.Response.Status);
            }
        }

        //[TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify error for nonexistent sessionId")]
        [TestProperty("Type", "Features")]
        public void N_DelNotifBySession_Partner_EmptySessionId()
        {
            try
            {
                partnerClient.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), string.Empty, Users.GetGamertag(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password) + ";");
                Assert.Fail("Expecting a bad request");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, e.Response.Status);
            }
        }

        //[TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify error for empty gamertag")]
        [TestProperty("Type", "Features")]
        public void N_DelNotifBySession_Partner_emptyGamertag()
        {
            try
            {
                partnerClient.DeleteNotificationBySession(Constants.TESTGAMEID.ToString(), Guid.NewGuid().ToString(), string.Empty);
                Assert.Fail("Expecting a bad request");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, e.Response.Status);
            }

        }

        //TODO: add tests around deleting a gameId that the partner does not own... After authorization is implemented.

        private static void VerifyDelete()
        {
            VerifyDelete(NotificationTestCommon.testHooksClient.TestSessionId, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
        }

        private static void VerifyDelete(string sessionId, string userName, string password)
        {
            for (int i = 0; i < 10; i++)
            {
                if (0 == TestAreaBase.notificationCommon.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), sessionId, 0, Constants.IGNORE_lAST_ID, 100, String.Empty, false, userName, password, null).Count)
                    break;
                else
                    Thread.Sleep(500);
            }
            Assert.AreEqual(0, TestAreaBase.notificationCommon.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), sessionId, 0, Constants.IGNORE_lAST_ID, 100, String.Empty, false, userName, password, null).Count, "ERROR: Unexpected Number of notifications.");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Test.API\Notifications\UpdateNotification.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using AsyncMultiplayer.NotificationService;
using System.Configuration;
using System.Web;
using LiveN.Test.Framework.Configuration;
using System.Net;
using System.Threading;
using LiveN.Test.Common.Web;
using Multiplayer.Test.UserAccounts;

namespace Multiplayer.Test.API
{
    /// <summary>
    /// Summary description for UpdateNotification
    /// </summary>
    [TestClass]
    public class UpdateNotification : TestAreaBase
    {
        
        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
        }

        [TestInitialize()]
        public void MyTestInitialize()
        {
            TestAreaBase.notificationCommon = new NotificationTestCommon();
            LockTest();
        }

        [TestCleanup]
        public void TestCleanup()
        {
            try
            {
                TestAreaBase.notificationCommon.TestCleanup();
            }
            finally
            {
                UnlockTest();
            }
        }

        //todo(michperr): Figure out notification order and make ValidateNotificationsStore more efficient
        [TestMethod, Owner("a-sediro"), Priority(0)]
        [Description("Update 1 Notification only from Viewed to Not Viewed")]
        [TestProperty("Type", "BVTs")]
        public void BVT_UpdateNotification_MarkViewed()
        {
            string notificationToChange = testHooksClient.CreateDummyNotification();

            string notificationToLeaveAlone = testHooksClient.CreateNotification(
                Notification.NotificationType.YouWin,
                Constants.TESTGAMEID,
                testHooksClient.TestSessionId,
                4,
                Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password),
                Constants.TESTGAMEVARIANT);

            // Validate original state
            TestAreaBase.notificationCommon.ValidateNotificationState(notificationToChange, Constants.TESTGAMEID, testHooksClient.TestSessionId, Notification.NotificationStatus.UnRead, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            TestAreaBase.notificationCommon.ValidateNotificationState(notificationToLeaveAlone, Constants.TESTGAMEID, testHooksClient.TestSessionId, Notification.NotificationStatus.UnRead, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

            this.NotificationsServiceProxy.UpdateNotification(notificationToChange, Notification.NotificationStatus.Viewed.ToString(), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

            TestAreaBase.notificationCommon.ValidateNotificationState(notificationToChange, Constants.TESTGAMEID, testHooksClient.TestSessionId, Notification.NotificationStatus.Viewed, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            TestAreaBase.notificationCommon.ValidateNotificationState(notificationToLeaveAlone, Constants.TESTGAMEID, testHooksClient.TestSessionId, Notification.NotificationStatus.UnRead, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
        }

        [TestMethod, Owner("a-sediro"), Priority(0)]
        [Description("Create a simple notification and validate that its default state is set to UnRead")]
        [TestProperty("Type", "Feature")]
        public void BVT_DefaultNotificationState()
        {
            // todo(michperr): TestHooks should be using the same code as other stuff that generates notifications.  THAT should be tested instead of this.
            string notificationId = testHooksClient.CreateNotification(
                    Notification.NotificationType.YouWin,
                    Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password),
                    Constants.TESTGAMEID,
                    testHooksClient.TestSessionId);

            // Validate original state
            TestAreaBase.notificationCommon.ValidateNotificationState(notificationId, Constants.TESTGAMEID, testHooksClient.TestSessionId, Notification.NotificationStatus.UnRead, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Mark a viewed Notification as Viewed")]
        [TestProperty("Type", "Feature")]
        public void P_UpdateNotification_MarkViewedNotificationAsViewed()
        {
            // Create a test notification
            string notificationId = testHooksClient.CreateNotification(
                    Notification.NotificationType.Nudge,
                    Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password),
                    Constants.TESTGAMEID,
                    testHooksClient.TestSessionId);

            // Validate original state
            TestAreaBase.notificationCommon.ValidateNotificationState(notificationId, Constants.TESTGAMEID, testHooksClient.TestSessionId, Notification.NotificationStatus.UnRead, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

            // Mark as Viewed
            this.NotificationsServiceProxy.UpdateNotification(notificationId, Notification.NotificationStatus.Viewed.ToString(), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

            // Validate Viewed
            TestAreaBase.notificationCommon.ValidateNotificationState(notificationId, Constants.TESTGAMEID, testHooksClient.TestSessionId, Notification.NotificationStatus.Viewed, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

            // Update notification state again to Viewed - should be a no op
            this.NotificationsServiceProxy.UpdateNotification(notificationId, Notification.NotificationStatus.Viewed.ToString(), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Mark a UnRead Notification as UnRead -- gives a 200.")]
        [TestProperty("Type", "Feature")]
        public void P_UpdateNotification_MarkPendingNotificationAsPending()
        {
            // Create a test notification
            string notificationId = testHooksClient.CreateNotification(
                    Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password),
                    Constants.TESTGAMEID,
                    testHooksClient.TestSessionId);

            // Validate original state
            TestAreaBase.notificationCommon.ValidateNotificationState(notificationId, Constants.TESTGAMEID, testHooksClient.TestSessionId, Notification.NotificationStatus.UnRead, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

            // Update notification state
            this.NotificationsServiceProxy.UpdateNotification(notificationId, Notification.NotificationStatus.UnRead.ToString(), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

            // Re-validate state
            TestAreaBase.notificationCommon.ValidateNotificationState(notificationId, Constants.TESTGAMEID, testHooksClient.TestSessionId, Notification.NotificationStatus.UnRead, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Mark a Viewed Notification as UnRead")]
        [TestProperty("Type", "Feature")]
        public void BVT_UpdateNotification_MarkViewedNotificationAsPending()
        {
            // Create a test notification
            string notificationId = testHooksClient.CreateNotification(
                    Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password),
                    Constants.TESTGAMEID,
                    testHooksClient.TestSessionId);

            // Validate original state
            TestAreaBase.notificationCommon.ValidateNotificationState(notificationId, Constants.TESTGAMEID, testHooksClient.TestSessionId, Notification.NotificationStatus.UnRead, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

            // Mark as Viewed
            this.NotificationsServiceProxy.UpdateNotification(notificationId, Notification.NotificationStatus.Viewed.ToString(), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

            // Validate Viewed
            TestAreaBase.notificationCommon.ValidateNotificationState(notificationId, Constants.TESTGAMEID, testHooksClient.TestSessionId, Notification.NotificationStatus.Viewed, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

            // Update notification state to UnRead again - should result in a Bad Request WebException
            this.NotificationsServiceProxy.UpdateNotification(notificationId, Notification.NotificationStatus.UnRead.ToString(), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

            // Validate pending
            TestAreaBase.notificationCommon.ValidateNotificationState(notificationId, Constants.TESTGAMEID, testHooksClient.TestSessionId, Notification.NotificationStatus.UnRead, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Mark a non-existing Notification as Viewed -- get a 200 with no action.")]
        [TestProperty("Type", "Feature")]
        public void P_UpdateNotification_MarkNonexistingNotificationAsViewed()
        {
            // Mark a non-existing notificationId (an invalid NotificationID) as Viewed
            this.NotificationsServiceProxy.UpdateNotification("2521442294861521366-630f329f-9065-43d4-aee1-0008b2f2752c", Notification.NotificationStatus.Viewed.ToString(), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Mark a non-existing Notification as Unread -- get a 200 with no action.")]
        [TestProperty("Type", "Feature")]
        public void P_UpdateNotification_MarkNonexistingNotificationAsPending()
        {
            // Mark a non-existing notificationId (an invalid NotificationID) as Viewed
            this.NotificationsServiceProxy.UpdateNotification("2521442294861521366-630f329f-9065-43d4-aee1-0008b2f2752c", Notification.NotificationStatus.UnRead.ToString(), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Mark the same Notification as UnRead twice -- get a 200 with no action.")]
        [TestProperty("Type", "Feature")]
        public void P_UpdateNotification_MarkTwiceAsPending()
        {
            // Create a test notification
            string notificationId = testHooksClient.CreateNotification(
                    Notification.NotificationType.Nudge,
                    Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password),
                    Constants.TESTGAMEID,
                    testHooksClient.TestSessionId);

            // Validate original state
            TestAreaBase.notificationCommon.ValidateNotificationState(notificationId, Constants.TESTGAMEID, testHooksClient.TestSessionId, Notification.NotificationStatus.UnRead, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

            // Mark as UnRead
            this.NotificationsServiceProxy.UpdateNotification(notificationId, Notification.NotificationStatus.UnRead.ToString(), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

            // Validate state is still UnRead
            TestAreaBase.notificationCommon.ValidateNotificationState(notificationId, Constants.TESTGAMEID, testHooksClient.TestSessionId, Notification.NotificationStatus.UnRead, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

            // Update notification state again to UnRead
            this.NotificationsServiceProxy.UpdateNotification(notificationId, Notification.NotificationStatus.UnRead.ToString(), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

            // Validate state is still UnRead
            TestAreaBase.notificationCommon.ValidateNotificationState(notificationId, Constants.TESTGAMEID, testHooksClient.TestSessionId, Notification.NotificationStatus.UnRead, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify that UpdateNotification changes the user's last update time only if the status of the notification is changed")]
        [TestProperty("Type", "Feature")]
        public void P_UpdateNotification_Etag()
        {
            Thread.Sleep(Constants.NOTIFICATION_RETRIES * Constants.NOTIFICATION_SLEEP_TIME);  // to give time for notification internal so that any requests in the queue would be processed before test starts.           
            string notificationId = testHooksClient.CreateDummyNotification();
            List<Notification> nList = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                string.Empty,
                0,
                Constants.IGNORE_lAST_ID,
                5,
                string.Empty,
                false, 
                TestAreaBase.users[0].MemberName, 
                TestAreaBase.users[0].Password, 
                null);
            Assert.IsNotNull(nList);
            Assert.IsTrue(nList.Count > 0, "Error: Notification count is incorrect.");
            string etag = this.NotificationsServiceProxy.EtagInResponse;
            Thread.Sleep(2000);
            this.NotificationsServiceProxy.UpdateNotification(notificationId, Notification.NotificationStatus.Viewed.ToString(), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            nList = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                string.Empty,
                0,
                Constants.IGNORE_lAST_ID,
                5,
                string.Empty,
                false,
                TestAreaBase.users[0].MemberName,
                TestAreaBase.users[0].Password,
                etag);
            Assert.IsNotNull(nList);
            Assert.IsTrue(nList.Count > 0, "Error: Notification count is incorrect.");
            etag = this.NotificationsServiceProxy.EtagInResponse;
            Thread.Sleep(2000);
            try
            {
                this.NotificationsServiceProxy.UpdateNotification(null, Notification.NotificationStatus.Viewed.ToString(), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            }
            catch (RestException ex)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, ex.Response.Status);
                try
                {
                    nList = this.NotificationsServiceProxy.GetNotifications(
                        Constants.TESTGAMEID.ToString(),
                        string.Empty,
                        0,
                        Constants.IGNORE_lAST_ID,
                        5,
                        string.Empty,
                        false, 
                        TestAreaBase.users[0].MemberName, 
                        TestAreaBase.users[0].Password,
                        etag);
                    Assert.Fail("Error: Expecting a 304.");
                }
                catch (RestException e)
                {
                    Assert.AreEqual<HttpStatusCode>(HttpStatusCode.NotModified, e.Response.Status);
                }
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Call UpdateNotification with a null notification id and verify a bad request.")]
        [TestProperty("Type", "Feature")]
        public void N_UpdateNotification_NullNotificationId()
        {
            try
            {
                this.NotificationsServiceProxy.UpdateNotification(null, Notification.NotificationStatus.UnRead.ToString(), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
                Assert.Fail("Expected a 400 response.");
            }
            catch (RestException e)
            {
                NotificationTestCommon.VerifyException(HttpStatusCode.BadRequest, "2148015943 Invalid argument or bad request: Notification ID is null or empty", e.Response);
            }
        }


        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Call UpdateNotification with a invalid notification id and verify a bad request.")]
        [TestProperty("Type", "Feature")]
        public void N_UpdateNotification_InvalidNotificationId()
        {
            string invalidNotificationId = new string('a', 20) + Guid.NewGuid().ToString();
            try
            {
                this.NotificationsServiceProxy.UpdateNotification(invalidNotificationId, Notification.NotificationStatus.UnRead.ToString(), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
                Assert.Fail("Expected a 400 response.");
            }
            catch (RestException e)
            {
                NotificationTestCommon.VerifyException(HttpStatusCode.BadRequest, "2148015943 Invalid argument or bad request: notificationId is invalid", e.Response);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Call UpdateNotification with an empty notification id and verify a bad request.")]
        [TestProperty("Type", "Feature")]
        public void N_UpdateNotification_EmptyNotificationId()
        {
            try
            {
                this.NotificationsServiceProxy.UpdateNotification(string.Empty, Notification.NotificationStatus.Viewed.ToString(), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
                Assert.Fail("Expected a 400 response.");
            }
            catch (RestException e)
            {
                NotificationTestCommon.VerifyException(HttpStatusCode.BadRequest, "2148015943 Invalid argument or bad request: Notification ID is null or empty", e.Response);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Call UpdateNotification with an invalid status and verify a bad request.")]
        [TestProperty("Type", "Feature")]
        public void N_UpdateNotification_InvalidStatus()
        {
            string NotificationId = testHooksClient.CreateDummyNotification();
            try
            {
                this.NotificationsServiceProxy.UpdateNotification(NotificationId, "This is an invalid status.", TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
                Assert.Fail("Expected a 400 response.");
            }
            catch (RestException e)
            {
                NotificationTestCommon.VerifyException(HttpStatusCode.BadRequest, "2148015943 Invalid argument or bad request: This is an invalid status. is not a valid value for enum type: NotificationStatus", e.Response);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Call UpdateNotification with an empty status and verify a bad request.")]
        [TestProperty("Type", "Feature")]
        public void N_UpdateNotification_EmptyStatus()
        {
            string NotificationId = testHooksClient.CreateDummyNotification();
            try
            {
                this.NotificationsServiceProxy.UpdateNotification(NotificationId, string.Empty, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
                Assert.Fail("Expected a 400 response.");
            }
            catch (RestException e)
            {
                NotificationTestCommon.VerifyException(HttpStatusCode.BadRequest, "2148015943 Invalid argument or bad request:  is not a valid value for enum type: NotificationStatus", e.Response);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Call UpdateNotification with a null status and verify a bad request.")]
        [TestProperty("Type", "Feature")]//
        public void N_UpdateNotification_NullStatus()
        {
            string NotificationId = testHooksClient.CreateDummyNotification();
            try
            {
                this.NotificationsServiceProxy.UpdateNotification(NotificationId, null, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
                Assert.Fail("Expected a 400 response.");
            }
            catch (RestException e)
            {
                NotificationTestCommon.VerifyException(HttpStatusCode.BadRequest, "2148015943 Invalid argument or bad request:  is not a valid value for enum type: NotificationStatus", e.Response);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Test.API\Partner\SendNotification.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using AsyncMultiplayer.PartnerService.DataContracts;
using AsyncMultiplayer.NotificationService;
using LiveN.Test.Framework.Configuration;
using System.Web;
using System.Threading;
using System.Net;
using LiveN.Test.Common.Web;
using Multiplayer.Test.Proxy;
using Multiplayer.Test.UserAccounts;

namespace Multiplayer.Test.API
{
    /// <summary>
    /// Summary description for SendNotification
    /// </summary>
    [TestClass]
    public class SendNotification : TestAreaBase
    {
        
        private static Random randomGenerator = new Random();
        private static PartnerServiceProxy partnerClient = null;

        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
            partnerClient = new PartnerServiceProxy();
        }

        [TestInitialize()]
        public void MyTestInitialize()
        {
            NotificationTestCommon.cleanupFR = false;
            LockTest();
        }

        [TestCleanup]
        public void TestCleanup()
        {
            try
            {
                TestAreaBase.notificationCommon.CleanupFRs();
                TestAreaBase.notificationCommon.TestCleanup();
            }
            finally
            {
                UnlockTest();
            }
        }

        //[TestMethod, Owner("a-sediro"), Priority(0)]
        [Description("Send a request for invite notification and verfy that the notification is created")]
        [TestProperty("Type", "BVTs")]
        public void BVT_SendNotification()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            partnerClient.SendNotification(newRequest);

            TestAreaBase.notificationCommon.VerifyNotificationCreated(newRequest.GameId.ToString(), newRequest.SessionId, newRequest.NotificationType, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
        }

        //[TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify that recipient's last update time is updated after SendNotification")]
        [TestProperty("Type", "Features")]
        public void P_SendNotification_Etag()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            PartnerNotificationRequest newRequest = CreateDefaultRequest();

            List<Notification> nList = this.NotificationsServiceProxy.GetNotifications(
                newRequest.GameId.ToString(),
                newRequest.SessionId,
                0,
                Constants.IGNORE_lAST_ID,
                100,
                newRequest.NotificationType,
                false,
                TestAreaBase.users[1].MemberName,
                TestAreaBase.users[1].Password,
                null);
            Assert.IsNotNull(nList);
            Assert.AreEqual<int>(0, nList.Count, "Unexpected number of Notifications.");
            string etag1 = this.NotificationsServiceProxy.EtagInResponse;

            partnerClient.SendNotification(newRequest);

            Thread.Sleep(20000); //give enough time for the back end to process the send Notification request. 

            nList = this.NotificationsServiceProxy.GetNotifications(
                newRequest.GameId.ToString(),
                newRequest.SessionId,
                0,
                Constants.IGNORE_lAST_ID,
                100,
                newRequest.NotificationType,
                false,
                TestAreaBase.users[1].MemberName,
                TestAreaBase.users[1].Password,
                etag1);
            Assert.IsNotNull(nList);
            Assert.AreEqual<int>(1, nList.Count, "Unexpected number of Notifications.");
        }

        //[TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify that sender's last update time will not be updated after SendNotification(only recipients last update time is updated)")]
        [TestProperty("Type", "Features")]
        public void N_SendNotification_SenderEtag()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            PartnerNotificationRequest newRequest = CreateDefaultRequest();

            List<Notification> nList = this.NotificationsServiceProxy.GetNotifications(
                newRequest.GameId.ToString(),
                string.Empty,
                0,
                Constants.IGNORE_lAST_ID,
                100,
                string.Empty,
                false,
                TestAreaBase.users[0].MemberName,
                TestAreaBase.users[0].Password,
                null);
            Assert.IsNotNull(nList);
            Assert.AreEqual<int>(0, nList.Count, "Unexpected number of Notifications.");
            string etag0 = this.NotificationsServiceProxy.EtagInResponse;

            nList = this.NotificationsServiceProxy.GetNotifications(
                newRequest.GameId.ToString(),
                newRequest.SessionId,
                0,
                Constants.IGNORE_lAST_ID,
                100,
                newRequest.NotificationType,
                false,
                TestAreaBase.users[1].MemberName,
                TestAreaBase.users[1].Password,
                null);
            Assert.IsNotNull(nList);
            Assert.AreEqual<int>(0, nList.Count, "Unexpected number of Notifications.");
            string etag1 = this.NotificationsServiceProxy.EtagInResponse;

            partnerClient.SendNotification(newRequest);

            Thread.Sleep(20000); //give enough time for the back end to process the send Notification request. 

            nList = this.NotificationsServiceProxy.GetNotifications(
                newRequest.GameId.ToString(),
                newRequest.SessionId,
                0,
                Constants.IGNORE_lAST_ID,
                100,
                newRequest.NotificationType,
                false,
                TestAreaBase.users[1].MemberName,
                TestAreaBase.users[1].Password,
                etag1);
            Assert.IsNotNull(nList);
            Assert.AreEqual<int>(1, nList.Count, "Unexpected number of Notifications.");

            try
            {
                List<Notification> nList2 = this.NotificationsServiceProxy.GetNotifications(
                    newRequest.GameId.ToString(),
                    string.Empty,
                    0,
                    Constants.IGNORE_lAST_ID,
                    100,
                    string.Empty,
                    false,
                    TestAreaBase.users[0].MemberName,
                    TestAreaBase.users[0].Password,
                    etag0);
                Assert.Fail("Expected a 304.");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.NotModified, e.Response.Status);
            }

            List<Notification> newNList = this.NotificationsServiceProxy.GetNotifications(
                newRequest.GameId.ToString(),
                string.Empty,
                0,
                Constants.IGNORE_lAST_ID,
                100,
                string.Empty,
                false,
                TestAreaBase.users[0].MemberName,
                TestAreaBase.users[0].Password,
                null);
            Assert.IsNotNull(newNList);
            Assert.AreEqual<int>(0, newNList.Count, "Unexpected number of Notifications.");
        }

        //[TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify that FR Notification is created after sending an invite notification request with FR = true.")]
        [TestProperty("Type", "Features")]
        public void P_SendNotification_InviteNotification_FR()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");

            NotificationTestCommon.cleanupFR = true;
            NotificationTestCommon.testHooksClient.SetupNotFriendsAndNoFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)));
            NotificationTestCommon.VerifyNotFriends(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), "Error: Setup failed not to make friends");
            NotificationTestCommon.VerifyNoFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), "Error: Setup failed to delete pre existing Friend Requests");

            TestAreaBase.notificationCommon.CheckNotificationCountFR(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.NotificationType = Notification.NotificationType.Invitation.ToString();
            newRequest.NotificationProperties.Add(NotificationProperty.FriendRequest, "true");

            partnerClient.SendNotification(newRequest);

            TestAreaBase.notificationCommon.VerifyNotificationCreated(newRequest.GameId.ToString(), newRequest.SessionId, newRequest.NotificationType, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            NotificationTestCommon.VerifyFriendRequest(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), "did not find a friend request on XBL");
            TestAreaBase.notificationCommon.VerifyNotificationCreated(string.Empty, string.Empty, Notification.NotificationType.FriendRequest.ToString(), TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
        }

        //[TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify error for a notification type that does not exist")]
        [TestProperty("Type", "Features")]
        public void N_SendNotification_InvalidNotificationType_Int()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.NotificationType = "99";
            try
            {
                partnerClient.SendNotification(newRequest);
                Assert.Fail("Expecting a bad request.");
            }
            catch (RestException ex)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, ex.Response.Status);
            }
        }

        //[TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify error for invalid non integer notification type")]
        [TestProperty("Type", "Features")]
        public void N_SendNotification_InvalidNotificationType()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.NotificationType = "blah";
            try
            {
                partnerClient.SendNotification(newRequest);
                Assert.Fail("Expecting a bad request.");
            }
            catch (RestException ex)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, ex.Response.Status);
            }
        }

        //[TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify error for null notification type")]
        [TestProperty("Type", "Features")]
        public void N_SendNotification_NullNotificationType()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.NotificationType = null;
            try
            {
                partnerClient.SendNotification(newRequest);
                Assert.Fail("Expecting a bad request.");
            }
            catch (RestException ex)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, ex.Response.Status);
            }
        }

        //[TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify that unless otherwise set, invites have FR = false by default.")]
        [TestProperty("Type", "Features")]
        public void N_SendNotification_InviteNotification_NoFR()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");

            NotificationTestCommon.testHooksClient.SetupNotFriendsAndNoFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)));
            NotificationTestCommon.VerifyNotFriends(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), "Error: Setup failed not to make friends");
            NotificationTestCommon.VerifyNoFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), "Error: Setup failed to delete pre existing Friend Requests");

            TestAreaBase.notificationCommon.CheckNotificationCountFR(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.NotificationType = Notification.NotificationType.Invitation.ToString();

            partnerClient.SendNotification(newRequest);

            TestAreaBase.notificationCommon.VerifyNotificationCreated(newRequest.GameId.ToString(), newRequest.SessionId, newRequest.NotificationType, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            Thread.Sleep(Constants.XBLFRPROCESSTIMEINSEC * 1000);
            Assert.IsFalse(NotificationTestCommon.testHooksClient.HasFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password))), "Error: Found FR on XBL.");
            TestAreaBase.notificationCommon.VerifyNoNotifications(string.Empty, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password, Notification.NotificationType.FriendRequest.ToString());
        }

        //[TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verifies no error for max datablob.")]
        [TestProperty("Type", "Features")]
        public void P_SendNotification_MaxDataBlob()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            string data = new string('a', 1000);
            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.NotificationProperties.Add(NotificationProperty.DataBlob, data);

            partnerClient.SendNotification(newRequest);

            TestAreaBase.notificationCommon.VerifyNotificationCreated(newRequest.GameId.ToString(), newRequest.SessionId, newRequest.NotificationType, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
        }

        //[TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify error if max datablob is exceeded.")]
        [TestProperty("Type", "Features")]
        public void N_SendNotification_MaxPlus1DataBlob()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            string data = new string('a', 1001);
            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.NotificationProperties.Add(NotificationProperty.DataBlob, data);
            try
            {
                partnerClient.SendNotification(newRequest);
                Assert.Fail("Expecting a bad request.");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, e.Response.Status, "Error: Expecting a bad request.");
            }
        }

        //[TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify error for null sessionId")]
        [TestProperty("Type", "Features")]
        public void N_SendNotification_NullSessionId()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.SessionId = null;
            try
            {
                partnerClient.SendNotification(newRequest);
                Assert.Fail("Expecting a bad request.");
            }
            catch (RestException ex)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, ex.Response.Status);
            }
        }

        //[TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify error for null gameId")]
        [TestProperty("Type", "Features")]
        public void N_SendNotification_GameId0()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.GameId = 0;
            try
            {
                partnerClient.SendNotification(newRequest);
                Assert.Fail("Expecting a bad request.");
            }
            catch (RestException ex)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, ex.Response.Status);
            }
        }

        //[TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify error for non-datetime format for expiration time.")]
        [TestProperty("Type", "Features")]
        public void P_SendNotification_ExpirationTime()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            DateTime expTime = DateTime.Now;
            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.NotificationProperties.Add(NotificationProperty.ExpirationTime, expTime.ToString());

            partnerClient.SendNotification(newRequest);

            TestAreaBase.notificationCommon.VerifyNotificationCreated(newRequest.GameId.ToString(), newRequest.SessionId, newRequest.NotificationType, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            List<Notification> nList = this.NotificationsServiceProxy.GetNotifications(
                        newRequest.GameId.ToString(),
                        newRequest.SessionId,
                        0,
                        Constants.IGNORE_lAST_ID,
                        100,
                        newRequest.NotificationType,
                        false,
                        TestAreaBase.users[1].MemberName,
                        TestAreaBase.users[1].Password,
                        null);
            Assert.IsNotNull(nList);
            Assert.AreEqual<int>(1, nList.Count, "Unexpected number of Notifications.");
            Assert.AreEqual(expTime.ToString(), nList[0].ExpirationTime.ToString(), "Error: Expiration time is not correct.");
        }

        //[TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify error for an empty expiration time.")]
        [TestProperty("Type", "Features")]
        public void N_SendNotification_EmptyExpirationTime()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.NotificationProperties.Add(NotificationProperty.ExpirationTime, "");
            try
            {
                partnerClient.SendNotification(newRequest);
                Assert.Fail("Expecting a bad request.");
            }
            catch (RestException ex)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, ex.Response.Status);
            }
        }

        //[TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify error for non-datetime format for expiration time.")]
        [TestProperty("Type", "Features")]
        public void N_SendNotification_InvalidExpirationTime()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.NotificationProperties.Add(NotificationProperty.ExpirationTime, "string");
            try
            {
                partnerClient.SendNotification(newRequest);
                Assert.Fail("Expecting a bad request.");
            }
            catch (RestException ex)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, ex.Response.Status);
            }
        }

        //[TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify error for non uint variant")]
        [TestProperty("Type", "Features")]
        public void N_SendNotification_InvalidVariant()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.NotificationProperties.Add(NotificationProperty.Variant, "string");
            try
            {
                partnerClient.SendNotification(newRequest);
                Assert.Fail("Expecting a bad request.");
            }
            catch (RestException ex)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, ex.Response.Status);
            }
        }

        ////[TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify error for non existent variant")]
        [TestProperty("Type", "Features")]
        public void N_SendNotification_NonExistentVariant() //Is this a valid testcase?
        {
        }

        //[TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify error for empty recipient list")]
        [TestProperty("Type", "Features")]
        public void N_SendNotification_NullRecipient()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.Recipients = null;
            try
            {
                partnerClient.SendNotification(newRequest);
                Assert.Fail("Expecting a bad request.");
            }
            catch (RestException ex)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, ex.Response.Status);
            }
        }

        ////[TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify error for non existent gameId")]
        [TestProperty("Type", "Features")]
        public void N_SendNotification_NonexistentGameId() //Is this a valid testcase?
        {
        }

        //[TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify error for trying to send an invite from a non existent gamertag")]
        [TestProperty("Type", "Features")]
        public void N_SendNotification_InviteFromNonexistentGamerTag()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.From = "ghty;";
            try
            {
                partnerClient.SendNotification(newRequest);
                Assert.Fail("Expecting a bad request.");
            }
            catch (RestException ex)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, ex.Response.Status);
            }
        }

        //[TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify a 200 response for sessionId = max length allowed")]
        [TestProperty("Type", "Features")]
        public void P_SendNotification_MaxSessionIdLength()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.SessionId = "This is a session ID with character length equal to sixtythree.";
            partnerClient.SendNotification(newRequest);

            TestAreaBase.notificationCommon.VerifyNotificationCreated(newRequest.GameId.ToString(), newRequest.SessionId, newRequest.NotificationType, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
        }

        //Bug:5445
        //[TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify a bad request response for sessionId = max + 1 length allowed")]
        [TestProperty("Type", "Features")]
        public void N_SendNotification_MaxPlus1SessionIdLength()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.SessionId = "This is a very long session ID with char length equals sixtyfour";
            try
            {
                partnerClient.SendNotification(newRequest);
                Assert.Fail("Expecting a bad request.");
            }
            catch (RestException ex)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, ex.Response.Status);
            }
        }

        //[TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify send notification for four recipients will create notification for all four of them.")]
        [TestProperty("Type", "Features")]
        public void P_SendNotification_To4Recipients()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 5, "We need at least two users for this test");
            StringBuilder recipients = new StringBuilder();
            for (int i = 1; i < 5; i++)
            {
                TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[i].MemberName, TestAreaBase.users[i].Password);
                recipients.Append(Users.GetGamertag(TestAreaBase.users[i].MemberName, TestAreaBase.users[i].Password) + ";");
            }
            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.NotificationType = Notification.NotificationType.Invitation.ToString(); //TODO: make this a random type and add another test for invite notification.
            newRequest.Recipients = recipients.ToString();
            partnerClient.SendNotification(newRequest);
            for (int i = 1; i < 5; i++)
            {
                TestAreaBase.notificationCommon.VerifyNotificationCreated(newRequest.GameId.ToString(), newRequest.SessionId, newRequest.NotificationType, TestAreaBase.users[i].MemberName, TestAreaBase.users[i].Password);
            }
        }

        //[TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify that etag is updated after Send invite Notification for all five recipients")]
        [TestProperty("Type", "Features")]
        public void P_SendNotification_To4Recipients_Etag()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 5, "We need at least two users for this test");
            List<string> etags = new List<string>();
            StringBuilder recipients = new StringBuilder();
            PartnerNotificationRequest newRequest = CreateDefaultRequest();

            for (int i = 1; i < 5; i++)
            {
                TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[i].MemberName, TestAreaBase.users[i].Password);
                List<Notification> nList = this.NotificationsServiceProxy.GetNotifications(
                    newRequest.GameId.ToString(),
                    newRequest.SessionId,
                    0,
                    Constants.IGNORE_lAST_ID,
                    100,
                    newRequest.NotificationType,
                    false,
                    TestAreaBase.users[i].MemberName,
                    TestAreaBase.users[i].Password,
                    null);
                Assert.IsNotNull(nList);
                Assert.AreEqual<int>(0, nList.Count, "Unexpected number of Notifications.");
                etags.Add(this.NotificationsServiceProxy.EtagInResponse);
                recipients.Append(Users.GetGamertag(TestAreaBase.users[i].MemberName, TestAreaBase.users[i].Password) + ";");
            }
            newRequest.NotificationType = Notification.NotificationType.Invitation.ToString(); //TODO: make this a random type and add another test for invite notification.
            newRequest.Recipients = recipients.ToString();
            partnerClient.SendNotification(newRequest);

            Thread.Sleep(20000); //give enough time for the back end to process the invite request. TODO: MAKE SURE 30 SEC IS NOT TOO MUCH

            for (int i = 1; i < 5; i++)
            {
                List<Notification> nList = this.NotificationsServiceProxy.GetNotifications(
                    newRequest.GameId.ToString(),
                    newRequest.SessionId,
                    0,
                    Constants.IGNORE_lAST_ID,
                    100,
                    newRequest.NotificationType,
                    false,
                    TestAreaBase.users[i].MemberName,
                    TestAreaBase.users[i].Password,
                    etags[i - 1]);
                Assert.IsNotNull(nList);
                Assert.AreEqual<int>(1, nList.Count, "Unexpected number of Notifications.");
            }
        }

        //[TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify send notification for 15 recipients will create notification for all of them.")]
        [TestProperty("Type", "Features")]
        public void P_SendNotification_InviteToMaxRecipients()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 5, "We need at least two users for this test");
            for (int i = 1; i < TestAreaBase.users.Count; i++)
            {
                TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[i].MemberName, TestAreaBase.users[i].Password);
            }
            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.NotificationType = Notification.NotificationType.Invitation.ToString(); //TODO: make this a random type and add another test for invite notification.
            newRequest.Recipients = GetDuplicateRecipients(15, false);
            partnerClient.SendNotification(newRequest);
            for (int i = 1; i < TestAreaBase.users.Count; i++)
            {
                TestAreaBase.notificationCommon.VerifyNotificationCreated(newRequest.GameId.ToString(), newRequest.SessionId, newRequest.NotificationType, TestAreaBase.users[i].MemberName, TestAreaBase.users[i].Password);
            }
        }

        //[TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify send notification for 16 recipients will create notification for only 15 of them.")]
        [TestProperty("Type", "Features")]
        public void N_SendNotification_InviteToMaxPlus1Recipients()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 5, "We need at least two users for this test");
            for (int i = 1; i < TestAreaBase.users.Count; i++)
            {
                TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[i].MemberName, TestAreaBase.users[i].Password);
            }
            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.NotificationType = Notification.NotificationType.Invitation.ToString(); //TODO: make this a random type and add another test for invite notification.
            newRequest.Recipients = GetDuplicateRecipients(15, true);
            partnerClient.SendNotification(newRequest);
            for (int i = 1; i < (TestAreaBase.users.Count - 1); i++)
            {
                TestAreaBase.notificationCommon.VerifyNotificationCreated(newRequest.GameId.ToString(), newRequest.SessionId, newRequest.NotificationType, TestAreaBase.users[i].MemberName, TestAreaBase.users[i].Password);
            }
            TestAreaBase.notificationCommon.VerifyNoNotifications(newRequest.SessionId, TestAreaBase.users[(TestAreaBase.users.Count - 1)].MemberName, TestAreaBase.users[(TestAreaBase.users.Count - 1)].Password, newRequest.NotificationType);
        }

        //[TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify send notification for 15 recipients will create notification for all of them.")]
        [TestProperty("Type", "Features")]
        public void P_SendNotification_InviteToMaxRecipients_FR()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 5, "We need at least two users for this test");
            NotificationTestCommon.cleanupFR = true;
            for (int i = 1; i < TestAreaBase.users.Count; i++)
            {
                NotificationTestCommon.testHooksClient.SetupNotFriendsAndNoFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[i].MemberName, TestAreaBase.users[i].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)));
                NotificationTestCommon.VerifyNotFriends(ulong.Parse(Users.GetXuid(TestAreaBase.users[i].MemberName, TestAreaBase.users[i].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), "Error: Setup failed not to make friends");
                NotificationTestCommon.VerifyNoFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[i].MemberName, TestAreaBase.users[i].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), "Error: Setup failed to delete pre existing Friend Requests");
                TestAreaBase.notificationCommon.CheckNotificationCountFR(TestAreaBase.users[i].MemberName, TestAreaBase.users[i].Password);
            }
            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.NotificationType = Notification.NotificationType.Invitation.ToString(); //TODO: make this a random type and add another test for invite notification.
            newRequest.NotificationProperties.Add(NotificationProperty.FriendRequest, "true");
            newRequest.Recipients = GetDuplicateRecipients(15, false);
            partnerClient.SendNotification(newRequest);
            for (int i = 1; i < TestAreaBase.users.Count; i++)
            {
                TestAreaBase.notificationCommon.VerifyNotificationCreated(newRequest.GameId.ToString(), newRequest.SessionId, newRequest.NotificationType, TestAreaBase.users[i].MemberName, TestAreaBase.users[i].Password);
                NotificationTestCommon.VerifyFriendRequest(ulong.Parse(Users.GetXuid(TestAreaBase.users[i].MemberName, TestAreaBase.users[i].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), "did not find a friend request on XBL");
                TestAreaBase.notificationCommon.VerifyNotificationCreated(string.Empty, string.Empty, Notification.NotificationType.FriendRequest.ToString(), TestAreaBase.users[i].MemberName, TestAreaBase.users[i].Password);
            }
        }

        //[TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify send notification for 16 recipients will create notification for only 15 of them.")]
        [TestProperty("Type", "Features")]
        public void N_SendNotification_InviteToMaxPlus1Recipients_FR()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 5, "We need at least two users for this test");
            NotificationTestCommon.cleanupFR = true;
            for (int i = 1; i < TestAreaBase.users.Count; i++)
            {
                NotificationTestCommon.testHooksClient.SetupNotFriendsAndNoFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[i].MemberName, TestAreaBase.users[i].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)));
                NotificationTestCommon.VerifyNotFriends(ulong.Parse(Users.GetXuid(TestAreaBase.users[i].MemberName, TestAreaBase.users[i].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), "Error: Setup failed not to make friends");
                NotificationTestCommon.VerifyNoFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[i].MemberName, TestAreaBase.users[i].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), "Error: Setup failed to delete pre existing Friend Requests");
                TestAreaBase.notificationCommon.CheckNotificationCountFR(TestAreaBase.users[i].MemberName, TestAreaBase.users[i].Password);
            }
            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.NotificationType = Notification.NotificationType.Invitation.ToString(); //TODO: make this a random type and add another test for invite notification.
            newRequest.NotificationProperties.Add(NotificationProperty.FriendRequest, "true");
            newRequest.Recipients = GetDuplicateRecipients(15, true);
            partnerClient.SendNotification(newRequest);
            for (int i = 1; i < (TestAreaBase.users.Count - 1); i++)
            {
                TestAreaBase.notificationCommon.VerifyNotificationCreated(newRequest.GameId.ToString(), newRequest.SessionId, newRequest.NotificationType, TestAreaBase.users[i].MemberName, TestAreaBase.users[i].Password);
                NotificationTestCommon.VerifyFriendRequest(ulong.Parse(Users.GetXuid(TestAreaBase.users[i].MemberName, TestAreaBase.users[i].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), "did not find a friend request on XBL");
                TestAreaBase.notificationCommon.VerifyNotificationCreated(string.Empty, string.Empty, Notification.NotificationType.FriendRequest.ToString(), TestAreaBase.users[i].MemberName, TestAreaBase.users[i].Password);
            }
            TestAreaBase.notificationCommon.VerifyNoNotifications(newRequest.SessionId, TestAreaBase.users[(TestAreaBase.users.Count - 1)].MemberName, TestAreaBase.users[(TestAreaBase.users.Count - 1)].Password, newRequest.NotificationType);
            Assert.IsFalse(NotificationTestCommon.testHooksClient.HasFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[(TestAreaBase.users.Count - 1)].MemberName,TestAreaBase.users[(TestAreaBase.users.Count - 1)].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password))), "Error: Found a FR for the 15th recipient.");
            TestAreaBase.notificationCommon.VerifyNoFRNotification(TestAreaBase.users[(TestAreaBase.users.Count - 1)].MemberName, TestAreaBase.users[(TestAreaBase.users.Count - 1)].Password);
        }

        //Do we verify invite count?
        //[TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify invite count limit per hour is verified")]
        [TestProperty("Type", "Features")]
        public void N_SendNotification_MaxPlus1InviteCount()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 5, "We need at least two users for this test");
            NotificationTestCommon.testHooksClient.UpdateUserEntry(
                Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password),
                DateTime.UtcNow,
                DateTime.UtcNow,
                10);
            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.NotificationType = Notification.NotificationType.Invitation.ToString();

            try
            {
                partnerClient.SendNotification(newRequest);
                Assert.Fail("Expecting Not Acceptable.");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.NotAcceptable, e.Response.Status);
            }
            //reset the value on the server
            NotificationTestCommon.testHooksClient.UpdateUserEntry(
                Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password),
                DateTime.UtcNow,
                DateTime.UtcNow,
                0);
        }

        #region each notification type
        //[TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Send a request for your turn notification and verfy that the notification is created")]
        [TestProperty("Type", "Feature")]
        public void P_SendNotification_YourTurn()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.NotificationType = Notification.NotificationType.YourTurn.ToString();
            partnerClient.SendNotification(newRequest);

            TestAreaBase.notificationCommon.VerifyNotificationCreated(newRequest.GameId.ToString(), newRequest.SessionId, newRequest.NotificationType, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
        }

        //[TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Send a request for you lose notification and verfy that the notification is created")]
        [TestProperty("Type", "Feature")]
        public void P_SendNotification_YouLose()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.NotificationType = Notification.NotificationType.YouLose.ToString();
            partnerClient.SendNotification(newRequest);

            TestAreaBase.notificationCommon.VerifyNotificationCreated(newRequest.GameId.ToString(), newRequest.SessionId, newRequest.NotificationType, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
        }

        //[TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Send a request for you win notification and verfy that the notification is created")]
        [TestProperty("Type", "Feature")]
        public void P_SendNotification_YouWin()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.NotificationType = Notification.NotificationType.YouWin.ToString();
            partnerClient.SendNotification(newRequest);

            TestAreaBase.notificationCommon.VerifyNotificationCreated(newRequest.GameId.ToString(), newRequest.SessionId, newRequest.NotificationType, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
        }


        //[TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Send a request for game over notification and verfy that the notification is created")]
        [TestProperty("Type", "Feature")]
        public void P_SendNotification_GameOver()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.NotificationType = Notification.NotificationType.GameOver.ToString();
            partnerClient.SendNotification(newRequest);

            TestAreaBase.notificationCommon.VerifyNotificationCreated(newRequest.GameId.ToString(), newRequest.SessionId, newRequest.NotificationType, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
        }

        //[TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Send a request for game tie notification and verfy that the notification is created")]
        [TestProperty("Type", "Feature")]
        public void P_SendNotification_GameTie()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.NotificationType = Notification.NotificationType.GameTie.ToString();
            partnerClient.SendNotification(newRequest);

            TestAreaBase.notificationCommon.VerifyNotificationCreated(newRequest.GameId.ToString(), newRequest.SessionId, newRequest.NotificationType, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
        }

        //[TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Send a request for message waiting notification and verfy that the notification is created")]
        [TestProperty("Type", "Feature")]
        public void P_SendNotification_MessageWaiting()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.NotificationType = Notification.NotificationType.Message.ToString();
            partnerClient.SendNotification(newRequest);

            TestAreaBase.notificationCommon.VerifyNotificationCreated(newRequest.GameId.ToString(), newRequest.SessionId, newRequest.NotificationType, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
        }

        //[TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Send a request for nudge notification and verfy that the notification is created")]
        [TestProperty("Type", "Feature")]
        public void P_SendNotification_Nudge()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.NotificationType = Notification.NotificationType.Nudge.ToString();
            partnerClient.SendNotification(newRequest);

            TestAreaBase.notificationCommon.VerifyNotificationCreated(newRequest.GameId.ToString(), newRequest.SessionId, newRequest.NotificationType, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
        }


        //[TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Send a request for invitation notification and verfy that the notification is created")]
        [TestProperty("Type", "Feature")]
        public void P_SendNotification_Invitation()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.NotificationType = Notification.NotificationType.Invitation.ToString();
            partnerClient.SendNotification(newRequest);

            TestAreaBase.notificationCommon.VerifyNotificationCreated(newRequest.GameId.ToString(), newRequest.SessionId, newRequest.NotificationType, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
        }

        //Bug:5442 - getting internal service error
        //[TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify error for trying to create a friend request notification directly (without sending an invite)")]
        [TestProperty("Type", "Features")]
        public void N_SendNotification_FriendRequest()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            PartnerNotificationRequest newRequest = CreateDefaultRequest();
            newRequest.NotificationType = Notification.NotificationType.FriendRequest.ToString();
            try
            {
                partnerClient.SendNotification(newRequest);
                Assert.Fail("Expecting a bad request.");
            }
            catch (RestException ex)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, ex.Response.Status);
            }
        }

        #endregion

        private PartnerNotificationRequest CreateDefaultRequest()
        {
            PartnerNotificationRequest newRequest = new PartnerNotificationRequest();
            newRequest.GameId = Constants.TESTGAMEID;
            newRequest.From = Users.GetGamertag(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            newRequest.NotificationType = GetNotificationString();
            newRequest.Recipients = Users.GetGamertag(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            newRequest.SessionId = NotificationTestCommon.testHooksClient.TestSessionId;
            newRequest.NotificationProperties = new PartnerNotificationRequest.PropertyDictionary();
            return newRequest;
        }

        private static string GetNotificationString()
        {
            string[] notificationTypes = {
                                          Notification.NotificationType.YourTurn.ToString(),
                                          Notification.NotificationType.Nudge.ToString(),  
                                          Notification.NotificationType.Invitation.ToString(), 
                                          Notification.NotificationType.GameOver.ToString(), 
                                          Notification.NotificationType.Message.ToString(), 
                                          Notification.NotificationType.YouWin.ToString(),
                                          Notification.NotificationType.YouLose.ToString(),
                                          Notification.NotificationType.GameTie.ToString()
                                         };

            return notificationTypes[randomGenerator.Next(notificationTypes.Length)];
        }

        private static string GetDuplicateRecipients(int numRecipients, bool reserveLastUser)
        {
            StringBuilder recipients = new StringBuilder();
            int lastUserIndex = TestAreaBase.users.Count;
            if (reserveLastUser)
            {
                lastUserIndex = lastUserIndex - 1;
            }
            int j = 0, i = 1;
            while (i < lastUserIndex)
            {
                recipients.Append(Users.GetGamertag(TestAreaBase.users[i].MemberName, TestAreaBase.users[i].Password) + ";");
                j++;
                if (j == numRecipients)
                    break;
                i++;
                if (i == lastUserIndex)
                    i = 1;
            }
            if (reserveLastUser)
            {
                recipients.Append(Users.GetGamertag(TestAreaBase.users[lastUserIndex].MemberName, TestAreaBase.users[lastUserIndex].Password) + ";");
            }
            return recipients.ToString();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Test.API\Notifications\GetNotifications.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using LiveN.Test.Framework.Configuration;
using AsyncMultiplayer.NotificationService;
using MultiPlayer.Test.Data;
using System.Configuration;
using System.Xml;
using System.Runtime.Serialization;
using System.IO;
using System.Web;
using System.Threading;
using System.Net;
using LiveN.Test.Common.Web;
using Multiplayer.Test.UserAccounts;
using LiveN.Test.Common;
using LiveN.Test.Framework;

namespace Multiplayer.Test.API
{
    /// <summary>
    /// Summary description for GetNotifications
    /// </summary>
    [TestClass]
    public class GetNotifications : TestAreaBase
    {
        
        private Random randomGenerator = new Random();
        private bool CleanupMessages;
        
        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
        }

        [TestInitialize()]
        public void MyTestInitialize()
        {
            NotificationTestCommon.cleanupFR = false;
            CleanupMessages = false;
            this.NotificationsServiceProxy.Locale = "en-US";
            MPTestHooksProxy.Timeout = int.Parse(ConfigurationManager.AppSettings["Timeout"]); //as some GetNotification tests change this value
            LockTest();
        }

        [TestCleanup]
        public void TestCleanup()
        {
            try
            {
                this.NotificationsServiceProxy.Locale = "en-US";
                TestAreaBase.notificationCommon.CleanupFRs();
                if (CleanupMessages)
                    NotificationTestCommon.CleanupMessages();
                TestAreaBase.notificationCommon.TestCleanup();
            }
            finally
            {
                UnlockTest();
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(0)]
        [Description("Verifies 1 notification is returned from the service.")]
        [TestProperty("Type", "BVTs")]
        public void BVT_GetNotifications_GetSingleNotification()
        {
            TestAreaBase.notificationCommon.CheckNotificationCount(Constants.TESTGAMEID.ToString(), testHooksClient.TestSessionId, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            string notificationId = testHooksClient.CreateDummyNotification();

            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                testHooksClient.TestSessionId.ToString(),
                0,
                Constants.IGNORE_lAST_ID,
                100,
                String.Empty,
                false,
                TestAreaBase.users[0].MemberName,
                TestAreaBase.users[0].Password,
                null);

            Assert.IsNotNull(notifications);
            Assert.AreEqual<int>(1, notifications.Count, "ERROR: Unexpected Number of notifications.");
            TestAreaBase.notificationCommon.VerifyNotification(notifications[0], notificationId);
        }


        [TestMethod, Owner("a-sediro"), Priority(0)]
        [Description("Verifies a client with a wrong If-None-Match header gets a 200 response back")]
        [TestProperty("Type", "BVTs")]
        public void BVT_GetNotifications_Etag_WrongEtag()
        {
            Thread.Sleep(Constants.NOTIFICATION_RETRIES * Constants.NOTIFICATION_SLEEP_TIME);  // to give time for notification internal so that any requests in the queue would be processed before test starts.
            TestAreaBase.notificationCommon.CheckNotificationCount(Constants.TESTGAMEID.ToString(), testHooksClient.TestSessionId, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password); ;
            string notificationId = testHooksClient.CreateDummyNotification();
            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                    Constants.TESTGAMEID.ToString(),
                    testHooksClient.TestSessionId.ToString(),
                    0,
                    Constants.IGNORE_lAST_ID,
                    100,
                    String.Empty,
                    false,
                    TestAreaBase.users[0].MemberName,
                    TestAreaBase.users[0].Password,
                    null);
            string etag = this.NotificationsServiceProxy.EtagInResponse;

            notifications = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                testHooksClient.TestSessionId.ToString(),
                0,
                Constants.IGNORE_lAST_ID,
                100,
                String.Empty,
                false,
                TestAreaBase.users[0].MemberName,
                TestAreaBase.users[0].Password,
                "blah");
            Assert.AreEqual(etag, this.NotificationsServiceProxy.EtagInResponse, "Error: Wrong etag in response");
            Assert.IsNotNull(notifications);
            Assert.AreEqual<int>(notifications.Count, 1, "ERROR: Unexpected Number of notifications.");
            TestAreaBase.notificationCommon.VerifyNotification(notifications[0], notificationId);
        }

        [TestMethod, Owner("a-sediro"), Priority(0)]
        [Description("Verifies a client with an expected etag in the If-None-Match header gets a 304 response back")]
        [TestProperty("Type", "BVTs")]
        public void BVT_GetNotifications_Etag_RightEtag()
        {
            Thread.Sleep(Constants.NOTIFICATION_RETRIES * Constants.NOTIFICATION_SLEEP_TIME);  // to give time for notification internal so that any requests in the queue would be processed before test starts.
            TestAreaBase.notificationCommon.CheckNotificationCount(Constants.TESTGAMEID.ToString(), testHooksClient.TestSessionId, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password); ;
            string notificationId = testHooksClient.CreateDummyNotification();
            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                    Constants.TESTGAMEID.ToString(),
                    testHooksClient.TestSessionId.ToString(),
                    0,
                    Constants.IGNORE_lAST_ID,
                    100,
                    String.Empty,
                    false,
                    TestAreaBase.users[0].MemberName,
                    TestAreaBase.users[0].Password,
                    null);
            string etag = this.NotificationsServiceProxy.EtagInResponse;
            try
            {
                notifications = this.NotificationsServiceProxy.GetNotifications(
                    Constants.TESTGAMEID.ToString(),
                    testHooksClient.TestSessionId.ToString(),
                    0,
                    Constants.IGNORE_lAST_ID,
                    100,
                    String.Empty,
                    false,
                    TestAreaBase.users[0].MemberName,
                    TestAreaBase.users[0].Password,
                    etag);
                Assert.Fail("Expected a 304 exception back");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.NotModified, e.Response.Status);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(0)]
        [Description("Verifies 5 notification is returned from the service.")]
        [TestProperty("Type", "BVTs")]
        public void BVT_GetNotifications_5()
        {
            Thread.Sleep(Constants.NOTIFICATION_RETRIES * Constants.NOTIFICATION_SLEEP_TIME);
            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password); ;
            List<string> nList = testHooksClient.CreateDummyNotification(10);

            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                string.Empty,
                0,
                string.Empty,
                5,
                String.Empty,
                false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, null);

            Assert.IsNotNull(notifications);
            Assert.AreEqual<int>(notifications.Count, 5, "ERROR: Unexpected Number of notifications.");

            //verify that we get them in descending order from the service
            for (int i = 0; i < 5; i++)
            {
                TestAreaBase.notificationCommon.VerifyNotification(notifications[i], nList[i]);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verifies a client with a wrong If-None-Match header gets a 200 response back")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotifications_Etag_WrongEtag_UserLastUpdateTime()
        {
            TestAreaBase.notificationCommon.CheckNotificationCount(Constants.TESTGAMEID.ToString(), testHooksClient.TestSessionId, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password); ;
            string notificationId = testHooksClient.CreateDummyNotification();
            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                testHooksClient.TestSessionId,
                0,
                Constants.IGNORE_lAST_ID,
                100,
                String.Empty,
                false,
                TestAreaBase.users[0].MemberName,
                TestAreaBase.users[0].Password,
                null);
            Assert.IsNotNull(notifications);
            Assert.AreEqual<int>(notifications.Count, 1, "ERROR: Unexpected Number of notifications.");
            TestAreaBase.notificationCommon.VerifyNotification(notifications[0], notificationId);
            string etag = this.NotificationsServiceProxy.EtagInResponse;
            Thread.Sleep(2000);
            DateTime now = DateTime.UtcNow;
            testHooksClient.UpdateUserEntry(
                Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password),
                now,
                now,
                10);

            notifications = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                testHooksClient.TestSessionId,
                0,
                Constants.IGNORE_lAST_ID,
                100,
                String.Empty,
                false,
                TestAreaBase.users[0].MemberName,
                TestAreaBase.users[0].Password,
                etag);
            Assert.AreNotEqual(etag, this.NotificationsServiceProxy.EtagInResponse, "wrong etag");
            Assert.IsNotNull(notifications);
            Assert.AreEqual<int>(notifications.Count, 1, "ERROR: Unexpected Number of notifications.");
            TestAreaBase.notificationCommon.VerifyNotification(notifications[0], notificationId);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify that get notification does not throw exception when there is no notification on Azure")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotifications_WithoutFirstCreatingAny()
        {
            TestAreaBase.notificationCommon.CheckNotificationCount(Constants.ALTERNATE_TESTGAMEID.ToString(), string.Empty, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password); ;
            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                Constants.ALTERNATE_TESTGAMEID.ToString(),
                string.Empty,
                0,
                string.Empty,
                Int32.MaxValue,
                String.Empty,
                false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, null);
            Assert.IsNotNull(notifications);
            Assert.AreEqual<int>(notifications.Count, 0, "ERROR: GetNotification should return zero notifications as there is no notification on azure");
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Call GetNotification passing a game ID that does not exist")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotifications_GameIdDoesNotExist()
        {
            //create a dummy notification that sets the game id to be TESTGAMEID
            string azureNotification = testHooksClient.CreateNotification();

            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                "8888",
                string.Empty,
                0,
                string.Empty,
                Int32.MaxValue,
                String.Empty,
                false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, null);
            Assert.IsNotNull(notifications);
            Assert.AreEqual<int>(0, notifications.Count, "ERROR: GetNotification is not filtering notifications by game");
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Call GetNotification with a session ID that does not exist")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotifications_SessionIdDoesNotExist()
        {
            string sessionId = "GoodSessionId";
            string azureNotification = testHooksClient.CreateNotification(
                    Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password),
                    Constants.TESTGAMEID,
                    sessionId);

            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                "BadSessionId",
                0,
                string.Empty,
                Int32.MaxValue,
                String.Empty,
                false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, null);
            Assert.IsNotNull(notifications);
            Assert.AreEqual<int>(0, notifications.Count, "ERROR: GetNotification does not filter notifications by session ID");
        }


        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Pass valid locale and verify localization")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotifications_GoodLocale()
        {
            TestAreaBase.notificationCommon.CheckNotificationCount(Constants.TESTGAMEID.ToString(), testHooksClient.TestSessionId, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password); ;

            string azureNotificationId = testHooksClient.CreateNotification(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password),
                    Constants.TESTGAMEID,
                    testHooksClient.TestSessionId);

            string[,] localeValue = LocalizationTestData.AVAILABLE_GOOD_LOCALES;
            int randomIndex = randomGenerator.Next(localeValue.Length / 2);
            this.NotificationsServiceProxy.Locale = localeValue[randomIndex, 0];

            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                testHooksClient.TestSessionId,
                0,
                string.Empty,
                Int32.MaxValue,
                String.Empty,
                false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, null);
            TestAreaBase.notificationCommon.ValidateLocalization(notifications, azureNotificationId, localeValue[randomIndex, 0], localeValue[randomIndex, 1]);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify localization to English")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotifications_FallbackToDefaultLocale()
        {
            TestAreaBase.notificationCommon.CheckNotificationCount(Constants.TESTGAMEID.ToString(), testHooksClient.TestSessionId, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password); ;

            string azureNotificationId = testHooksClient.CreateNotification(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password),
                    Constants.TESTGAMEID,
                    testHooksClient.TestSessionId);

            string[] locale = LocalizationTestData.UNSUPPORTED_lOCALE;
            int randomIndex = randomGenerator.Next(locale.Length);

            this.NotificationsServiceProxy.Locale = locale[randomIndex];
            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                testHooksClient.TestSessionId,
                0,
                string.Empty,
                Int32.MaxValue,
                String.Empty,
                false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, null);
            Assert.IsNotNull(notifications);
            Assert.AreEqual<int>(notifications.Count, 1, ("ERROR: GetNotification failed to fetch notifications for " + locale[randomIndex] + "locale."));
            TestAreaBase.notificationCommon.VerifyNotification(notifications[0], azureNotificationId);

            this.NotificationsServiceProxy.Locale = "en-US";
            List<Notification> engNotifications = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                testHooksClient.TestSessionId,
                0,
                string.Empty,
                Int32.MaxValue,
                String.Empty,
                false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, null);
            Assert.IsNotNull(engNotifications);
            Assert.AreEqual<int>(engNotifications.Count, 1, ("ERROR: GetNotification failed to fetch the correct number of notifications after locale is set to en-US"));
            TestAreaBase.notificationCommon.VerifyNotification(engNotifications[0], azureNotificationId);
            Assert.AreEqual(engNotifications[0].TypeDisplayName, notifications[0].TypeDisplayName, "ERROR :Notification is not localized to English");
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Pass mixed locale and verify fallback localization")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotifications_MixedLocale()
        {
            TestAreaBase.notificationCommon.CheckNotificationCount(Constants.TESTGAMEID.ToString(), testHooksClient.TestSessionId, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password); ;

            string azureNotificationId = testHooksClient.CreateNotification(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password),
                    Constants.TESTGAMEID,
                    testHooksClient.TestSessionId);

            string[,] localeValue = LocalizationTestData.MIXED_LOCALE;
            int randomIndex = randomGenerator.Next(localeValue.Length / 2);
            this.NotificationsServiceProxy.Locale = localeValue[randomIndex, 0];

            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                testHooksClient.TestSessionId,
                0,
                string.Empty,
                Int32.MaxValue,
                String.Empty,
                false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, null);
            TestAreaBase.notificationCommon.ValidateLocalization(notifications, azureNotificationId, localeValue[randomIndex, 0], localeValue[randomIndex, 1]);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify localization with right etag")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotifications_Locale_RightEtag()
        {
            Thread.Sleep(Constants.NOTIFICATION_RETRIES * Constants.NOTIFICATION_SLEEP_TIME);  // to give time for notification internal so that any requests in the queue would be processed before test starts.
            string azureNotificationId = testHooksClient.CreateNotification();

            string[,] localeValue = LocalizationTestData.AVAILABLE_GOOD_LOCALES;
            int randomIndex = randomGenerator.Next(localeValue.Length / 2);
            this.NotificationsServiceProxy.Locale = localeValue[randomIndex, 0];
            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                testHooksClient.TestSessionId.ToString(),
                0,
                Constants.IGNORE_lAST_ID,
                100,
                String.Empty,
                false,
                TestAreaBase.users[0].MemberName,
                TestAreaBase.users[0].Password,
                null);
            string etag = this.NotificationsServiceProxy.EtagInResponse;

            try
            {
                notifications = this.NotificationsServiceProxy.GetNotifications(
                    Constants.TESTGAMEID.ToString(),
                    testHooksClient.TestSessionId.ToString(),
                    0,
                    Constants.IGNORE_lAST_ID,
                    100,
                    String.Empty,
                    false,
                    TestAreaBase.users[0].MemberName,
                    TestAreaBase.users[0].Password,
                    etag);
                Assert.Fail("Expected a 304 exception back");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.NotModified, e.Response.Status, "Error: Wrong error code.");
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify localization with wrong etag")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotifications_Locale_WrongEtag()
        {
            Thread.Sleep(Constants.NOTIFICATION_RETRIES * Constants.NOTIFICATION_SLEEP_TIME);  // to give time for notification internal so that any requests in the queue would be processed before test starts.

            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password); ;
            string azureNotificationId = testHooksClient.CreateNotification();

            string[,] localeValue = LocalizationTestData.AVAILABLE_GOOD_LOCALES;
            int randomIndex = randomGenerator.Next(localeValue.Length / 2);
            this.NotificationsServiceProxy.Locale = localeValue[randomIndex, 0];
            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                testHooksClient.TestSessionId.ToString(),
                0,
                Constants.IGNORE_lAST_ID,
                100,
                String.Empty,
                false,
                TestAreaBase.users[0].MemberName,
                TestAreaBase.users[0].Password,
                null);
            string etag = this.NotificationsServiceProxy.EtagInResponse;

            notifications = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                string.Empty,
                0,
                Constants.IGNORE_lAST_ID,
                100,
                String.Empty,
                false,
                TestAreaBase.users[0].MemberName,
                TestAreaBase.users[0].Password,
                etag);
            Assert.AreNotEqual(etag, this.NotificationsServiceProxy.EtagInResponse, "Error: Wrong etag.");
            TestAreaBase.notificationCommon.ValidateLocalization(notifications, azureNotificationId, localeValue[randomIndex, 0], localeValue[randomIndex, 1]);
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify unsupported locale will be localized to English with right etag")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotifications_UnsupportedLocale_RightEtag()
        {
            Thread.Sleep(Constants.NOTIFICATION_RETRIES * Constants.NOTIFICATION_SLEEP_TIME);  // to give time for notification internal so that any requests in the queue would be processed before test starts.

            string azureNotificationId = testHooksClient.CreateNotification();

            string[] locale = LocalizationTestData.UNSUPPORTED_lOCALE;
            int randomIndex = randomGenerator.Next(locale.Length);
            this.NotificationsServiceProxy.Locale = locale[randomIndex];

            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                testHooksClient.TestSessionId.ToString(),
                0,
                Constants.IGNORE_lAST_ID,
                100,
                String.Empty,
                false,
                TestAreaBase.users[0].MemberName,
                TestAreaBase.users[0].Password,
                null);
            string etag = this.NotificationsServiceProxy.EtagInResponse;
            try
            {
                notifications = this.NotificationsServiceProxy.GetNotifications(
                    Constants.TESTGAMEID.ToString(),
                    testHooksClient.TestSessionId.ToString(),
                    0,
                    Constants.IGNORE_lAST_ID,
                    100,
                    String.Empty,
                    false,
                    TestAreaBase.users[0].MemberName,
                    TestAreaBase.users[0].Password,
                    etag);
                Assert.Fail("Expected a 304 exception back");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.NotModified, e.Response.Status, "Error: Wrong error code.");
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify unsupported locale will be localized to English with wrong etag")]
        [TestProperty("Type", "BVTs")]
        public void P_GetNotifications_UnsupportedLocale_WrongEtag()
        {
            Thread.Sleep(Constants.NOTIFICATION_RETRIES * Constants.NOTIFICATION_SLEEP_TIME);  // to give time for notification internal so that any requests in the queue would be processed before test starts.

            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password); ;
            string azureNotificationId = testHooksClient.CreateDummyNotification();

            string[] locale = LocalizationTestData.UNSUPPORTED_lOCALE;
            int randomIndex = randomGenerator.Next(locale.Length);
            this.NotificationsServiceProxy.Locale = locale[randomIndex];

            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                string.Empty,
                0,
                Constants.IGNORE_lAST_ID,
                100,
                String.Empty,
                false,
                TestAreaBase.users[0].MemberName,
                TestAreaBase.users[0].Password,
                null);
            string etag = this.NotificationsServiceProxy.EtagInResponse;
            notifications = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                string.Empty,
                0,
                Constants.IGNORE_lAST_ID,
                100,
                String.Empty,
                false,
                TestAreaBase.users[0].MemberName,
                TestAreaBase.users[0].Password,
                "blah");

            Assert.AreEqual(etag, this.NotificationsServiceProxy.EtagInResponse, "Error: Wrong etag.");
            Assert.IsNotNull(notifications);
            Assert.AreEqual<int>(1, notifications.Count, ("ERROR: GetNotification failed to fetch notifications for " + locale[randomIndex] + "locale with etag specified."));
            TestAreaBase.notificationCommon.VerifyNotification(notifications[0], azureNotificationId);

            this.NotificationsServiceProxy.Locale = "en-US";
            List<Notification> engNotifications = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                string.Empty,
                0,
                string.Empty,
                Int32.MaxValue,
                String.Empty,
                false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, null);
            Assert.IsNotNull(engNotifications);
            Assert.AreEqual<int>(engNotifications.Count, 1, ("ERROR: GetNotification failed to fetch the correct number of notifications after locale is set to en-US"));
            TestAreaBase.notificationCommon.VerifyNotification(engNotifications[0], azureNotificationId);
            Assert.AreEqual(engNotifications[0].TypeDisplayName, notifications[0].TypeDisplayName, "ERROR :Notification is not localized to English for unsupported locale with etag specified");

        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify that GetNotifications puts a request on queue when there is a FR on XBL for the user, then the request gets processed and a FR notification is created on azure")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotifications_FRNotification()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 3, "We need at least three users for this test");

            NotificationTestCommon.cleanupFR = true;
            testHooksClient.SetupNotFriendsAndNoFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password)));
            NotificationTestCommon.VerifyNotFriends(ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password)), "Error: Setup failed not to make friends");
            NotificationTestCommon.VerifyNoFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password)), "Error: Setup failed to delete pre existing Friend Requests");

            TestAreaBase.notificationCommon.CheckNotificationCountFR(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME); // to give a gap between requests on the backend

            testHooksClient.AddFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)));
            NotificationTestCommon.VerifyFriendRequest(ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password)), "did not find a friend request on XBL");
            TestAreaBase.notificationCommon.VerifyNotificationCreated(string.Empty, string.Empty, Notification.NotificationType.FriendRequest, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Send two FRs to a user from two different users and make sure that we only get one FR notification")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotifications_2FRs_1FRNotification()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 3, "We need at least three users for this test");

            NotificationTestCommon.cleanupFR = true;
            testHooksClient.SetupNotFriendsAndNoFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password)));
            NotificationTestCommon.VerifyNotFriends(ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password)), "Error: Setup failed not to make friends");
            NotificationTestCommon.VerifyNoFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password)), "Error: Setup failed to delete pre existing Friend Requests");

            testHooksClient.SetupNotFriendsAndNoFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)));
            NotificationTestCommon.VerifyNotFriends(ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), "Error: Setup failed not to make friends");
            NotificationTestCommon.VerifyNoFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), "Error: Setup failed to delete pre existing Friend Requests");

            TestAreaBase.notificationCommon.CheckNotificationCountFR(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME); // to give a gap between requests on the backend

            testHooksClient.AddFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)));
            testHooksClient.AddFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)));

            NotificationTestCommon.VerifyFriendRequest(ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password)), "did not find a friend request on XBL");
            NotificationTestCommon.VerifyFriendRequest(ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), "did not find a friend request on XBL");

            TestAreaBase.notificationCommon.MakeATriggeringCallToPutRequestOnBackEnd(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            Thread.Sleep(Constants.NOTIFICATION_RETRIES * Constants.NOTIFICATION_SLEEP_TIME);
            TestAreaBase.notificationCommon.GetNotification(string.Empty, string.Empty, Notification.NotificationType.FriendRequest.ToString(), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

            //Do this again to make sure that we only get one Friend Request Notification
            Thread.Sleep(Constants.NOTIFICATION_RETRIES * Constants.NOTIFICATION_SLEEP_TIME);
            TestAreaBase.notificationCommon.GetNotification(string.Empty, string.Empty, Notification.NotificationType.FriendRequest.ToString(), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("GetNotifications count less than, page by page.")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotifications_Count_LessThan()
        {
            Thread.Sleep(Constants.NOTIFICATION_RETRIES * Constants.NOTIFICATION_SLEEP_TIME);  // to give time for notification internal so that any requests in the queue would be processed before checking pre existing notifications.

            int pageSize = 5;
            int numPages = 4;

            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password); ;

            List<string> notificationList = new List<string>();

            //todo(michperr): Move this into testhooks
            for (int i = 0; i < (pageSize * numPages); i++)
            {
                //insert the items in reverse order because that's how the server will return them
                notificationList.Insert(0,
                    testHooksClient.CreateNotification(
                        Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password),
                        Constants.TESTGAMEID,
                        Guid.NewGuid().ToString()));
            }

            string lastId = string.Empty;
            int notificationIndex = 0;
            for (int i = 0; i < numPages; i++)
            {
                List<Notification> nList = this.NotificationsServiceProxy.GetNotifications(
                    Constants.TESTGAMEID.ToString(),
                    string.Empty,
                    0,
                    lastId,
                    pageSize,
                    string.Empty,
                    false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, null);

                Assert.AreEqual<int>(pageSize, nList.Count, "Unexpected Number of results.");
                lastId = nList[nList.Count - 1].Id;

                for (int x = 0; x < nList.Count; x++)
                {
                    //todo(michperr): replaceNotificationIndex with page# + x
                    Assert.AreEqual(nList[x].Id, notificationList[notificationIndex++]);
                }

            }
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("GetNotifications with Count greater than the total in the list.")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotifications_Count_GreaterThan()
        {
            Thread.Sleep(Constants.NOTIFICATION_RETRIES * Constants.NOTIFICATION_SLEEP_TIME);  // to give time for notification internal so that any requests in the queue would be processed before checking pre existing notifications.

            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password); ;

            //insert the items in reverse order because that's how the server will return them
            List<string> notificationList = testHooksClient.CreateDummyNotification(3);

            List<Notification> nList = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                string.Empty,
                0,
                string.Empty,
                5,
                string.Empty,
                false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, null);

            Assert.AreEqual<int>(3, nList.Count, "Unexpected Number of results.");

            int notificationIndex = 0;
            for (int x = 0; x < nList.Count; x++)
            {
                Assert.AreEqual(nList[x].Id, notificationList[notificationIndex++]);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("GetNotifications with lastId and Count set.  Verify count can go off the edge of the list.")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotifications_Count_GreaterThan_Page2()
        {
            Thread.Sleep(Constants.NOTIFICATION_RETRIES * Constants.NOTIFICATION_SLEEP_TIME);  // to give time for notification internal so that any requests in the queue would be processed before checking pre existing notifications.
            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password); ;

            //insert the items in reverse order because that's how the server will return them
            List<string> notificationList = testHooksClient.CreateDummyNotification(10);

            //skip the first 8 notifications.  Only 2 should come back here.
            List<Notification> nList = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                string.Empty,
                0,
                notificationList[7],
                5,
                string.Empty,
                false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, null);

            Assert.AreEqual<int>(2, nList.Count, "Unexpected Number of results.");

            int notificationIndex = 8;
            for (int x = 0; x < nList.Count; x++)
            {
                Assert.AreEqual(nList[x].Id, notificationList[notificationIndex++]);
            }
        }
        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("GetNotifications with lastId and Count set.  Verify count can go off the edge of the list.")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotifications_Count_GreaterThan_Page2_Etag()
        {
            Thread.Sleep(Constants.NOTIFICATION_RETRIES * Constants.NOTIFICATION_SLEEP_TIME);  // to give time for notification internal so that any requests in the queue would be processed before checking pre existing notifications.
            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password); ;

            List<string> notificationList = testHooksClient.CreateDummyNotification(10);

            List<Notification> nList = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                string.Empty,
                0,
                Constants.IGNORE_lAST_ID,
                5,
                string.Empty,
                false,
                TestAreaBase.users[0].MemberName,
                TestAreaBase.users[0].Password,
                null);
            Assert.IsNotNull(nList);
            Assert.AreEqual<int>(5, nList.Count, "Unexpected Number of results.");
            int notificationIndex = 0;
            for (int x = 0; x < nList.Count; x++)
            {
                Assert.AreEqual(nList[x].Id, notificationList[notificationIndex++]);
            }
            // find the etag in the response and use it in the next call
            string etag = this.NotificationsServiceProxy.EtagInResponse;
            List<Notification> nList2 = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                string.Empty,
                0,
                notificationList[4],
                5,
                string.Empty,
                false,
                TestAreaBase.users[0].MemberName,
                TestAreaBase.users[0].Password,
                etag);
            Assert.IsNotNull(nList2);
            Assert.AreEqual<int>(5, nList2.Count, "Unexpected Number of results.");
            notificationIndex = 5;
            for (int x = 0; x < nList2.Count; x++)
            {
                Assert.AreEqual(nList2[x].Id, notificationList[notificationIndex++]);
            }
        }

        //todo(michperr): Figure out if this is a real case
        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify Display Name and GamerTag")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotifications_VerifyDisplayNameGamerTag()
        {
            Notification.NotificationType notificationType = Notification.NotificationType.YourTurn;

            string notificationId = testHooksClient.CreateNotification(
                    notificationType,
                    Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password),
                    Constants.TESTGAMEID,
                    testHooksClient.TestSessionId);

            List<Notification> notificationsList = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), testHooksClient.TestSessionId.ToString(), 0, String.Empty, 100, String.Empty, false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, null);

            Assert.IsNotNull(notificationsList);
            Assert.IsTrue(notificationsList.Count > 0, "ERROR: Notification list was empty.");

            // Validate that we get the right type of notification
            Notification match = notificationsList.Find(n => n.Id == notificationId);
            Assert.AreEqual(
            match.Type, (AsyncMultiplayer.NotificationService.Notification.NotificationType)notificationType, "Notification type created does not match.");

            UserInfo uinfo = new UserInfo();

            string from = HttpUtility.HtmlDecode(match.From);

            DataContractSerializer dcjs = new DataContractSerializer(typeof(UserInfo));

            UserInfo userInfo = (UserInfo)dcjs.ReadObject(XmlReader.Create(new StringReader(from)));

            Assert.AreEqual("MPTestHook", userInfo.DisplayName, "DisplayName is NOT as expected");
            Assert.AreEqual("MpTestHook", userInfo.GamerTag, "GamerTag is NOT as expected");
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Bug# 3220 - FR Notification gets created again and again if the user deletes it with out accepting or ignoring it. This also verifies that the user can see his FR notifications even if has no other type of notifications(Bug# 2286).")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotifications_DeleteNotification_FRNotification()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 4, "We need at least four users for this test");
            TestAreaBase.notificationCommon.CheckNotificationCountFR(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

            NotificationTestCommon.cleanupFR = true;
            testHooksClient.SetupNotFriendsAndNoFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[3].MemberName, TestAreaBase.users[3].Password)));
            NotificationTestCommon.VerifyNotFriends(ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[3].MemberName, TestAreaBase.users[3].Password)), "Error: Setup failed not to make friends");
            NotificationTestCommon.VerifyNoFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[3].MemberName, TestAreaBase.users[3].Password)), "Error: Setup failed to delete pre existing Friend Requests");

            TestAreaBase.notificationCommon.CheckNotificationCountFR(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME); // to give a gap between requests on the backend

            testHooksClient.AddFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[3].MemberName, TestAreaBase.users[3].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)));
            NotificationTestCommon.VerifyFriendRequest(ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[3].MemberName, TestAreaBase.users[3].Password)), "There is no friend request created for the user");
            TestAreaBase.notificationCommon.VerifyNotificationCreated(string.Empty, string.Empty, Notification.NotificationType.FriendRequest, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

            List<Notification> notificationsList = this.NotificationsServiceProxy.GetNotifications(string.Empty, string.Empty, 0, String.Empty, Int32.MaxValue, Notification.NotificationType.FriendRequest.ToString(), false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, null);
            Assert.IsNotNull(notificationsList);
            Assert.AreEqual(1, notificationsList.Count, "Wrong number of notifications.");
            this.NotificationsServiceProxy.DeleteNotificationQuery(notificationsList[0].Id, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            TestAreaBase.notificationCommon.VerifyNotificationCreated(string.Empty, string.Empty, Notification.NotificationType.FriendRequest, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
        }

        //bug 6209 -- on the error message -- should not be a "Session Id is null".
        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Call GetNotification with a session ID but pass no game Id")]
        [TestProperty("Type", "Feature")]
        public void N_GetNotifications_PassSessionIdButNotGameID()
        {
            string sessionId = Guid.NewGuid().ToString();
            string azureNotification = testHooksClient.CreateNotification(
                    Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password),
                    Constants.TESTGAMEID,
                    sessionId);
            try
            {
                List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                        string.Empty,
                        sessionId,
                        0,
                        string.Empty,
                        Int32.MaxValue,
                        String.Empty,
                        false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, null);
                Assert.Fail("ERROR: Expected to throw a web protocol exception when GetNotification tries to filter notifications by session but does not know the game ID");
            }
            catch (RestException e)
            {
                NotificationTestCommon.VerifyException(HttpStatusCode.BadRequest, "2148015943 Invalid argument or bad request: GameId is null while sessionId is not null", e.Response);
            }

        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Call GetNotification with a notification type  that does not exist")]
        [TestProperty("Type", "Feature")]
        public void N_GetNotifications_InvalidType()
        {
            try
            {
                List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                    Constants.TESTGAMEID.ToString(),
                    string.Empty,
                    0,
                    string.Empty,
                    Int32.MaxValue,
                    "invalid type",
                    false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, null);
                Assert.Fail("Expecting an exception.");
            }
            catch (RestException e)
            {
                NotificationTestCommon.VerifyException(HttpStatusCode.BadRequest, "2148015943 Invalid argument or bad request: invalid type is not a valid value for enum type: NotificationType", e.Response);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Call GetNotification with an invalid game Id")]
        [TestProperty("Type", "Feature")]
        public void N_GetNotifications_InvalidGameId()
        {
            try
            {
                List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                    "This is an invalid GameId",
                    string.Empty,
                    0,
                    string.Empty,
                    Int32.MaxValue,
                    string.Empty,
                    false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, null);
                Assert.Fail("Expecting an exception.");
            }
            catch (RestException e)
            {
                NotificationTestCommon.VerifyException(HttpStatusCode.BadRequest, "2148015943 Invalid argument or bad request: Game ID is invalid", e.Response);
            }
        }

        //commented out according to bug 3303
        //[TestMethod, Owner("a-sediro"), Priority(2)]
        //[Description("Call GetNotification with an invalid game Id")]
        //[TestProperty("Type", "Feature")]
        //public void N_GetNotifications_InvalidGameId_Int()
        //{
        //    try
        //    {
        //        List<Notification> notifications = NotificationTestCommon.notificationClient.GetNotifications(
        //            "890987",
        //            string.Empty,
        //            0,
        //            string.Empty,
        //            Int32.MaxValue,
        //            string.Empty,
        //            false);
        //        Assert.Fail("Expecting an exception.");
        //    }
        //    catch (RestException e)
        //    {
        //        Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, e.Response.Status);
        //    }
        //}

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Call GetNotification with an invalid lastId")]
        [TestProperty("Type", "Feature")]
        public void N_GetNotifications_InvalidNotificationId()
        {
            string invalidNotificationId = new string('a', 20) + Guid.NewGuid().ToString();
            try
            {
                List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                    Constants.TESTGAMEID.ToString(),
                    string.Empty,
                    0,
                    invalidNotificationId,
                    Int32.MaxValue,
                    string.Empty,
                    false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, null);
                Assert.Fail("Expecting a BadRequest exception.");
            }
            catch (RestException e)
            {
                NotificationTestCommon.VerifyException(HttpStatusCode.BadRequest, "2148015943 Invalid argument or bad request: notificationId is invalid", e.Response);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Call GetNotification with a notification type  that does not exist")]
        [TestProperty("Type", "Feature")]
        public void N_GetNotifications_InvalidType_Int()
        {
            try
            {
                List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                    Constants.TESTGAMEID.ToString(),
                    string.Empty,
                    0,
                    string.Empty,
                    Int32.MaxValue,
                    "890987",
                    false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, null);
                Assert.Fail("Expecting a BadRequest exception.");
            }
            catch (RestException e)
            {
                NotificationTestCommon.VerifyException(HttpStatusCode.BadRequest, "2148015943 Invalid argument or bad request: 890987 is not a valid value for enum type: NotificationType", e.Response);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Call GetNotification with long session Id string")]
        [TestProperty("Type", "Feature")]
        public void N_GetNotifications_LongSessionId()
        {
            try
            {
                List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                    Constants.TESTGAMEID.ToString(),
                    "This is a very long session ID with char length equals sixtyfour",
                    0,
                    string.Empty,
                    Int32.MaxValue,
                    string.Empty,
                    false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, null);
                Assert.Fail("Expecting a BadRequest exception.");
            }
            catch (RestException e)
            {
                NotificationTestCommon.VerifyException(HttpStatusCode.BadRequest, "2148015943 Invalid argument or bad request: Session ID is invalid", e.Response);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify that users cannot see another user's notifications.")]
        [TestProperty("Type", "Feature")]
        public void N_GetNotifications_OtherUser()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            string notificationId = testHooksClient.CreateDummyNotification();
            List<Notification> nList0 = this.NotificationsServiceProxy.GetNotifications(string.Empty, string.Empty, 0, Constants.IGNORE_lAST_ID, 100, string.Empty, false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, null);
            Assert.IsNotNull(nList0);
            Assert.IsTrue(nList0.Count > 0);
            Assert.IsNotNull(nList0.Find(n => n.Id == notificationId), "Error: did not get notification created by the same user.");

            List<Notification> nList1 = this.NotificationsServiceProxy.GetNotifications(string.Empty, string.Empty, 0, Constants.IGNORE_lAST_ID, 100, string.Empty, false, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password, null);
            Assert.IsNotNull(nList1);
            foreach (Notification n in nList1)
            {
                Assert.AreNotEqual(notificationId, n.Id, "Error: It looks like we were able to see other user's notification.");
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify query by category.")]
        [TestProperty("Type", "Features")]
        public void P_GetNotifications_ByCategory()
        {
            TestAreaBase.notificationCommon.CheckNotificationCount(Constants.TESTGAMEID.ToString(), testHooksClient.TestSessionId, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            
            //verify no notifications of category 1 since user has no notifications
            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
               Constants.TESTGAMEID.ToString(),
               testHooksClient.TestSessionId.ToString(),
               1, 
               Constants.IGNORE_lAST_ID,
               100,
               String.Empty,
               false,
               TestAreaBase.users[0].MemberName,
               TestAreaBase.users[0].Password,
               null);

            Assert.IsNotNull(notifications);
            Assert.AreEqual<int>(0, notifications.Count, "ERROR: Unexpected Number of notifications.");
            
            string notificationId = testHooksClient.CreateDummyNotification();

            //verify 1 notification of category 1 since the dummy notification is of category todo which is of enum = 1.
            notifications = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                testHooksClient.TestSessionId.ToString(),
                1, 
                Constants.IGNORE_lAST_ID,
                100,
                String.Empty,
                false,
                TestAreaBase.users[0].MemberName,
                TestAreaBase.users[0].Password,
                null);

            Assert.IsNotNull(notifications);
            Assert.AreEqual<int>(1, notifications.Count, "ERROR: Unexpected Number of notifications.");
            TestAreaBase.notificationCommon.VerifyNotification(notifications[0], notificationId);

            //verify no notifications of category 2
            notifications = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                testHooksClient.TestSessionId.ToString(),
                2, 
                Constants.IGNORE_lAST_ID,
                100,
                String.Empty,
                false,
                TestAreaBase.users[0].MemberName,
                TestAreaBase.users[0].Password,
                null);

            Assert.IsNotNull(notifications);
            Assert.AreEqual<int>(0, notifications.Count, "ERROR: Unexpected Number of notifications.");

        }

        //related bug 7768
        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify that passing a non existent category returns an empty list")]
        [TestProperty("Type", "Feature")]
        public void N_GetNotifications_NonexistentCategory()
        {
            try
            {
                List<Notification> nList = this.NotificationsServiceProxy.GetNotifications(string.Empty, string.Empty, 91, Constants.IGNORE_lAST_ID, 100, string.Empty, false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, null);
                Assert.Fail("Expecting a Bad Request");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, e.Response.Status, "Error: Incorrect error message");
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify that GetNotifications does not put a request on queue when there is no FR on XBL for the user.")]
        [TestProperty("Type", "Feature")]
        public void N_GetNotifications_NoFRNotification()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 3, "We need at least three users for this test");
            TestAreaBase.notificationCommon.CheckNotificationCountFR(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

            testHooksClient.SetupNotFriendsAndNoFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password)));
            NotificationTestCommon.VerifyNotFriends(ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password)), "Error: Setup failed not to make friends");
            NotificationTestCommon.VerifyNoFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password)), "Error: Setup failed to delete pre existing Friend Requests");

            TestAreaBase.notificationCommon.MakeATriggeringCallToPutRequestOnBackEnd(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            Thread.Sleep(Constants.NOTIFICATION_RETRIES * Constants.NOTIFICATION_SLEEP_TIME); // sleep incase any action is triggered on the backend
            TestAreaBase.notificationCommon.VerifyNoNotifications(string.Empty, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, Notification.NotificationType.FriendRequest.ToString());
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Create session, add 3 notifications and query by userid. Expected result: Single notification is returned for that session, notification ID matches last notification ID")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotifications_AggregateInASingleSessionAndQueryByUserID()
        {
            //Assuming everything is clean at the start. -- no FRs or Messages
            TestAreaBase.notificationCommon.MakeATriggeringCallToPutRequestOnBackEnd(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            Thread.Sleep(Constants.NOTIFICATION_RETRIES * Constants.NOTIFICATION_SLEEP_TIME);  // to give time for notification internal so that any requests in the queue would be processed before checking pre existing notifications.
            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password); ;

            // Create three YouWin notifications
            string lastNotificationId = TestAreaBase.notificationCommon.CreateNotificationsInternal(3, Notification.NotificationType.YouWin);

            // Validate we get a single notification of that type back when we query for it
            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(String.Empty, String.Empty, 0, Constants.IGNORE_lAST_ID, Int32.MaxValue, String.Empty, false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, null);

            List<Notification> youWinNotifications = TestAreaBase.notificationCommon.FilterNotificationListByType(notifications, Notification.NotificationType.YouWin);
            Assert.AreEqual(1, youWinNotifications.Count, "Did not find expected number of YouWin notifications.");
            Assert.AreEqual(youWinNotifications[0].Id, lastNotificationId);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Create session, add 3 notifications and query by game. Expected result: Single notification is returned for that session.")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotifications_AggregateInASingleSessionAndQueryByGame()
        {
            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

            // Create three YouLose notifications
            string lastNotificationId = TestAreaBase.notificationCommon.CreateNotificationsInternal(3, Notification.NotificationType.YouLose, testHooksClient.TestSessionId, Constants.ALTERNATE_TESTGAMEID);

            // Validate we get a single notification of that type back when we query for it
            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(Constants.ALTERNATE_TESTGAMEID.ToString(), String.Empty, (int)testHooksClient.TestCategory, Constants.IGNORE_lAST_ID, Int32.MaxValue, String.Empty, false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, null);

            List<Notification> youLoseNotifications = TestAreaBase.notificationCommon.FilterNotificationListByType(notifications, Notification.NotificationType.YouLose);
            Assert.AreEqual(1, youLoseNotifications.Count, "Did not find expected number of YouLose notifications.");
            TestAreaBase.notificationCommon.VerifyNotification(youLoseNotifications[0], lastNotificationId);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Create session, add 3 notifications and query by session. Expected result: Single notification is returned for that session, all metadata matches last notification")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotifications_AggregateInASingleSessionAndQueryBySession()
        {
            TestAreaBase.notificationCommon.CheckNotificationCount(Constants.TESTGAMEID.ToString(), testHooksClient.TestSessionId, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password); ;
            // Create three GameTie notifications
            string lastNotificationId = TestAreaBase.notificationCommon.CreateNotificationsInternal(3, Notification.NotificationType.GameTie);

            // Validate we get a single notification of that type back when we query for it
            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), testHooksClient.TestSessionId, (int)testHooksClient.TestCategory, Constants.IGNORE_lAST_ID, 100, String.Empty, false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, null);

            List<Notification> gameTieNotifications = TestAreaBase.notificationCommon.FilterNotificationListByType(notifications, Notification.NotificationType.GameTie);
            Assert.AreEqual(1, gameTieNotifications.Count, "Did not find expected number of GameTie notifications.");
            Assert.AreEqual(gameTieNotifications[0].Id, lastNotificationId);
        }

        [TestMethod, Owner("a-sediro"), Priority(0)]
        [Description("Create session, add 3 notif each, query by userid. Expected result: A single notification is returned for that type per session")]
        [TestProperty("Type", "BVTs")]
        public void BVT_GetNotifications_AggregateInMultipleSessions()
        {
            Thread.Sleep(Constants.NOTIFICATION_RETRIES * Constants.NOTIFICATION_SLEEP_TIME);  // to give time for notification internal so that any requests in the queue would be processed before checking pre existing notifications.           
            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password); ;
            string firstSessionID = testHooksClient.TestSessionId;
            TestAreaBase.notificationCommon.CreateNotificationsInternal(3, Notification.NotificationType.YourTurn, firstSessionID, Constants.TESTGAMEID);

            string secondSessionID = Guid.NewGuid().ToString();
            TestAreaBase.notificationCommon.CreateNotificationsInternal(3, Notification.NotificationType.YourTurn, secondSessionID, Constants.TESTGAMEID);

            // Validate we get a single notification of that type back when we query for it, one per session
            int firstSessionMatches = 0;
            int secondSessionMatches = 0;

            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), String.Empty, 0, Constants.IGNORE_lAST_ID, Int32.MaxValue, String.Empty, false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, null);
            foreach (Notification n in notifications)
            {
                if (n.Type == Notification.NotificationType.YourTurn)
                {
                    if (n.SessionId == firstSessionID)
                    {
                        firstSessionMatches++;
                    }
                    if (n.SessionId == secondSessionID)
                    {
                        secondSessionMatches++;
                    }
                }
            }

            Assert.AreEqual(1, firstSessionMatches, "Did not find expected number of YourTurn notifications in Session 1.");
            Assert.AreEqual(1, secondSessionMatches, "Did not find expected number of YourTurn notifications in Session 2.");
        }

        [TestMethod, Owner("a-sediro"), Priority(0)]
        [Description("Create session, add 3 notif each of 2 types, query by  userid. Expected result: Single notification is returned per type for that session")]
        [TestProperty("Type", "BVTs")]
        public void BVT_GetNotifications_AggregateMultipleTypesInASingleSession()
        {
            TestAreaBase.notificationCommon.CheckNotificationCount(Constants.TESTGAMEID.ToString(), testHooksClient.TestSessionId, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            TestAreaBase.notificationCommon.CreateNotificationsInternal(3, Notification.NotificationType.GameOver, testHooksClient.TestSessionId, Constants.TESTGAMEID);
            TestAreaBase.notificationCommon.CreateNotificationsInternal(3, Notification.NotificationType.YouWin, testHooksClient.TestSessionId, Constants.TESTGAMEID);

            // Validate we get a single notification of that type back when we query for it
            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), testHooksClient.TestSessionId, (int)testHooksClient.TestCategory, Constants.IGNORE_lAST_ID, 100, String.Empty, false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, null);

            int gameOverNotificationCount = TestAreaBase.notificationCommon.FilterNotificationListByType(notifications, Notification.NotificationType.GameOver).Count;
            int youWinNotificationCount = TestAreaBase.notificationCommon.FilterNotificationListByType(notifications, Notification.NotificationType.YouWin).Count;

            Assert.AreEqual(1, gameOverNotificationCount, "Did not find expected number of GameOver notifications.");
            Assert.AreEqual(1, youWinNotificationCount, "Did not find expected number of MessageWaiting notifications.");
        }

        [TestMethod, Owner("a-sediro"), Priority(0)]
        [Description("Verify aggregation of notification types")]
        [TestProperty("Type", "BVTs")]
        public void BVT_GetNotifications_AggregateAllToDoNotificationsInASingleSession()
        {
            TestAreaBase.notificationCommon.CheckNotificationCount(Constants.TESTGAMEID.ToString(), testHooksClient.TestSessionId, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password); ;
            Notification.NotificationType[] allToDos = {
                                                           Notification.NotificationType.GameOver,
                                                           Notification.NotificationType.GameTie,
                                                           Notification.NotificationType.Invitation,
                                                           Notification.NotificationType.Nudge,
                                                           Notification.NotificationType.YouLose,
                                                           Notification.NotificationType.YouWin,
                                                           Notification.NotificationType.YourTurn };


            // Create 2 notifications of type ToDo each
            foreach (Notification.NotificationType type in allToDos)
            {
                TestAreaBase.notificationCommon.CreateNotificationsInternal(2, type, testHooksClient.TestSessionId, Constants.TESTGAMEID);
            }

            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), testHooksClient.TestSessionId, (int)testHooksClient.TestCategory, Constants.IGNORE_lAST_ID, 100, String.Empty, false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, null);

            // Expected number is allToDos.Length as multiple will get aggregated.
            Assert.AreEqual(allToDos.Length, notifications.Count, "Did not find expected total number of Notifications in session.");

            // Iterate through each ToDo type and validate there's only a single notification for each ToDo type
            int notificationCount = 0;
            foreach (Notification.NotificationType type in allToDos)
            {
                notificationCount = TestAreaBase.notificationCommon.FilterNotificationListByType(notifications, type).Count;

                Assert.AreEqual(1, notificationCount, String.Format("Did not find expected number of {0} notifications.", type.ToString()));
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify that accepting a FR will update users last update time as it causes FR notification be deleted.")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotifications_DeleteFRN_Etag()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need two users for this test");
            Thread.Sleep(Constants.NOTIFICATION_RETRIES * Constants.NOTIFICATION_SLEEP_TIME);  // to give time for notification internal so that any requests in the queue would be processed before test starts.
            NotificationTestCommon.cleanupFR = true;
            testHooksClient.SetupNotFriendsAndNoFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)));
            NotificationTestCommon.VerifyNotFriends(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), "Error: Setup failed not to make friends");
            NotificationTestCommon.VerifyNoFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), "Error: Setup failed to delete pre existing Friend Requests");

            TestAreaBase.notificationCommon.CheckNotificationCountFR(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME); // to give a gap between requests on the backend

            testHooksClient.AddFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)));

            NotificationTestCommon.VerifyFriendRequest(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), "did not find a friend request on XBL");
            TestAreaBase.notificationCommon.VerifyNotificationCreated(string.Empty, string.Empty, Notification.NotificationType.FriendRequest, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME); //the last get notification call would create a request on the queue that should be processed before accepting the FR.

            testHooksClient.AcceptFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)));
            NotificationTestCommon.VerifyNoFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), "did not find a friend request on XBL");

            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                   string.Empty,
                   string.Empty,
                   0,
                   Constants.IGNORE_lAST_ID,
                   100,
                   Notification.NotificationType.FriendRequest.ToString(),
                   false,
                   TestAreaBase.users[1].MemberName,
                   TestAreaBase.users[1].Password,
                   null);
            Assert.IsNotNull(notifications);
            Assert.AreEqual(1, notifications.Count, "Error: unexpected number of notifications");
            string etag = this.NotificationsServiceProxy.EtagInResponse;
            
            Thread.Sleep(Constants.NOTIFICATION_RETRIES * Constants.NOTIFICATION_SLEEP_TIME); // giving notification internal time to process a request

            notifications = this.NotificationsServiceProxy.GetNotifications(
               string.Empty,
               string.Empty,
               0,
               Constants.IGNORE_lAST_ID,
               100,
               Notification.NotificationType.FriendRequest.ToString(),
               false,
               TestAreaBase.users[1].MemberName,
               TestAreaBase.users[1].Password,
               etag);
            Assert.IsNotNull(notifications);
            Assert.AreEqual(0, notifications.Count, "Error: unexpected number of notifications");
        }

        //Bug 11098
        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify that accepting a FR will update users last update time as it causes FR notification be deleted.")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotifications_DeleteFR_WithYouWinNotification()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need two users for this test");
            Thread.Sleep(Constants.NOTIFICATION_RETRIES * Constants.NOTIFICATION_SLEEP_TIME);  // to give time for notification internal so that any requests in the queue would be processed before test starts.
            NotificationTestCommon.cleanupFR = true;
            testHooksClient.SetupNotFriendsAndNoFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)));
            NotificationTestCommon.VerifyNotFriends(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), "Error: Setup failed not to make friends");
            NotificationTestCommon.VerifyNoFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), "Error: Setup failed to delete pre existing Friend Requests");

            TestAreaBase.notificationCommon.CheckNotificationCountFR(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME); // to give a gap between requests on the backend

            testHooksClient.AddFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)));

            NotificationTestCommon.VerifyFriendRequest(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), "did not find a friend request on XBL");
            TestAreaBase.notificationCommon.VerifyNotificationCreated(string.Empty, string.Empty, Notification.NotificationType.FriendRequest, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            Thread.Sleep(2 * Constants.NOTIFICATION_SLEEP_TIME); //the last get notification call would create a request on the queue that should be processed before accepting the FR.

            string sessionId = Guid.NewGuid().ToString();
            string notificationId = testHooksClient.CreateNotification(
                    Notification.NotificationType.YouWin,
                    Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password),
                    Constants.TESTGAMEID,
                    sessionId);

            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                sessionId,
                0,
                Constants.IGNORE_lAST_ID,
                100,
                Notification.NotificationType.YouWin.ToString(),
                false,
                TestAreaBase.users[1].MemberName,
                TestAreaBase.users[1].Password,
                null);

            Assert.IsNotNull(notifications);
            Assert.AreEqual<int>(1, notifications.Count, "ERROR: Unexpected Number of notifications.");
            TestAreaBase.notificationCommon.VerifyNotification(notifications[0], notificationId);

            testHooksClient.AcceptFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)));
            NotificationTestCommon.VerifyNoFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), "did not find a friend request on XBL");
            TestAreaBase.notificationCommon.MakeATriggeringCallToPutRequestOnBackEnd(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            Thread.Sleep(Constants.NOTIFICATION_RETRIES * Constants.NOTIFICATION_SLEEP_TIME);
            TestAreaBase.notificationCommon.VerifyNoNotifications(string.Empty, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password, Notification.NotificationType.FriendRequest.ToString());
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify Expiration Time is correct in Friend Request Notifications.")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotifications_FRNNContent_ExpirationTime()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            NotificationTestCommon.cleanupFR = true;
            testHooksClient.SetupNotFriendsAndNoFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)));
            NotificationTestCommon.VerifyNotFriends(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), "Error: Setup failed not to make friends");
            NotificationTestCommon.VerifyNoFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), "Error: Setup failed to delete pre existing Friend Requests");

            TestAreaBase.notificationCommon.CheckNotificationCountFR(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME); // to give a gap between requests on the backend

            testHooksClient.AddFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)));
            NotificationTestCommon.VerifyFriendRequest(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), "did not find a friend request on XBL");

            TestAreaBase.notificationCommon.VerifyNotificationCreated(string.Empty, string.Empty, Notification.NotificationType.FriendRequest, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            Notification friendRNtfn = GetNotification(string.Empty, string.Empty, Notification.NotificationType.FriendRequest.ToString(), TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            Assert.AreEqual(@"12/31/9999 11:59:59 PM", friendRNtfn.ExpirationTime.ToString(), "Error: Incorrect Expiration Time in Friend Request Notification");
            //TODO: Update this after bug(3930) is fixed
            //Assert.IsTrue(((DateTime.UtcNow >= (friendRNtfn.ExpirationTime.AddMonths(-3))) &&  (DateTime.UtcNow.AddMinutes(-2) <= (friendRNtfn.ExpirationTime.AddMonths(-3)))), "Error: Incorrect Expiration Time in Friend Request Notification");
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify Sent Time is correct in Friend Request Notifications.")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotifications_FRNNContent_SentTime()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");

            NotificationTestCommon.cleanupFR = true;
            testHooksClient.SetupNotFriendsAndNoFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)));
            NotificationTestCommon.VerifyNotFriends(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), "Error: Setup failed not to make friends");
            NotificationTestCommon.VerifyNoFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), "Error: Setup failed to delete pre existing Friend Requests");
            DateTime now = DateTime.UtcNow;

            TestAreaBase.notificationCommon.CheckNotificationCountFR(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME); // to give a gap between requests on the backend

            testHooksClient.AddFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)));
            NotificationTestCommon.VerifyFriendRequest(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), "did not find a friend request on XBL");

            TestAreaBase.notificationCommon.VerifyNotificationCreated(string.Empty, string.Empty, Notification.NotificationType.FriendRequest, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            Notification friendRNtfn = GetNotification(string.Empty, string.Empty, Notification.NotificationType.FriendRequest.ToString(), TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            Assert.IsTrue(((now.AddSeconds(-1).CompareTo(friendRNtfn.SentTime) < 0) && (now.AddMinutes(2).CompareTo(friendRNtfn.SentTime) > 0)), "Error: Incorrect Sent Time " + friendRNtfn.SentTime.ToString() + " in Friend Request notification as compared to time invite is sent  = " + now.ToString());
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify contents of Friend Request Notification are correct.")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotifications_FRNNContent()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");

            NotificationTestCommon.cleanupFR = true;
            testHooksClient.SetupNotFriendsAndNoFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)));
            NotificationTestCommon.VerifyNotFriends(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), "Error: Setup failed not to make friends");
            NotificationTestCommon.VerifyNoFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), "Error: Setup failed to delete pre existing Friend Requests");

            TestAreaBase.notificationCommon.CheckNotificationCountFR(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME); // to give a gap between requests on the backend

            testHooksClient.AddFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)));
            NotificationTestCommon.VerifyFriendRequest(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), "did not find a friend request on XBL");

            TestAreaBase.notificationCommon.VerifyNotificationCreated(string.Empty, string.Empty, Notification.NotificationType.FriendRequest, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            Notification friendRNtfn = GetNotification(string.Empty, string.Empty, Notification.NotificationType.FriendRequest.ToString(), TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            VerifyFriendRequestNotificationContent(friendRNtfn);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify that FR notification is retrieved for all LiveApp supported locales.")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotification_FR_LiveAppSupportedLocales()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");

            NotificationTestCommon.cleanupFR = true;
            testHooksClient.SetupNotFriendsAndNoFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)));
            NotificationTestCommon.VerifyNotFriends(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), "Error: Setup failed not to make friends");
            NotificationTestCommon.VerifyNoFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), "Error: Setup failed to delete pre existing Friend Requests");

            TestAreaBase.notificationCommon.CheckNotificationCountFR(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME); // to give a gap between requests on the backend

            testHooksClient.AddFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)));
            NotificationTestCommon.VerifyFriendRequest(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), "did not find a friend request on XBL");

            TestAreaBase.notificationCommon.VerifyNotificationCreated(string.Empty, string.Empty, Notification.NotificationType.FriendRequest, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            Notification friendRNtfn = GetNotification(string.Empty, string.Empty, Notification.NotificationType.FriendRequest.ToString(), TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            string[] supportedLocales = LocalizationTestData.LIVEAPP_SUPPORTED_LOCALE;
            foreach (string locale in supportedLocales)
            {
                this.NotificationsServiceProxy.Locale = locale;
                List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                    string.Empty,
                    string.Empty,
                    0,
                    Constants.IGNORE_lAST_ID,
                    100,
                    Notification.NotificationType.FriendRequest.ToString(),
                    false,
                    TestAreaBase.users[1].MemberName,
                    TestAreaBase.users[1].Password,
                    null);
                Assert.IsNotNull(notifications);
                Assert.AreEqual(1, notifications.Count, "Unexpected number of notifications when locale is " + locale);
            }
        }
        
        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify that FR notification is retrieved for all LiveApp supported locales.")]
        [TestProperty("Type", "Feature")]
        public void N_GetNotification_FR_NonLiveAppSupportedLocales()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");

            NotificationTestCommon.cleanupFR = true;
            testHooksClient.SetupNotFriendsAndNoFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)));
            NotificationTestCommon.VerifyNotFriends(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), "Error: Setup failed not to make friends");
            NotificationTestCommon.VerifyNoFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), "Error: Setup failed to delete pre existing Friend Requests");

            TestAreaBase.notificationCommon.CheckNotificationCountFR(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME); // to give a gap between requests on the backend

            testHooksClient.AddFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)));
            NotificationTestCommon.VerifyFriendRequest(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), "did not find a friend request on XBL");

            TestAreaBase.notificationCommon.VerifyNotificationCreated(string.Empty, string.Empty, Notification.NotificationType.FriendRequest, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            Notification friendRNtfn = GetNotification(string.Empty, string.Empty, Notification.NotificationType.FriendRequest.ToString(), TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            string[] unSupportedLocales = LocalizationTestData.NON_LIVEAPP_SUPPORTED_LOCALE;
            foreach (string locale in unSupportedLocales)
            {
                this.NotificationsServiceProxy.Locale = locale;
                List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                    string.Empty,
                    string.Empty,
                    0,
                    Constants.IGNORE_lAST_ID,
                    100,
                    Notification.NotificationType.FriendRequest.ToString(),
                    false,
                    TestAreaBase.users[1].MemberName,
                    TestAreaBase.users[1].Password,
                    null);
                Assert.IsNotNull(notifications);
                
                //The flag to turn this on after LiveApp is in production is off in dev env.
                if ((string.Compare(Config.Environment.Name, "dev", true) == 0) || (string.Compare(Config.Environment.Name, "airlock_lest", true) == 0))
                {
                    Assert.AreEqual(1, notifications.Count, "Unexpected number of notifications when locale is " + locale);
                }
                else
                {
                    Assert.AreEqual(0, notifications.Count, "Unexpected number of notifications when locale is " + locale);
                }
            }
        }

        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Verifies only 1000 notifications are returned from the service.")]
        [TestProperty("Type", "FeatureTets")]
        public void P_GetNotifications_ReturnedNotExceed1000()
        {
            TraceEx.TraceStart("This test takes around 40 min, Comment out testCleanup() for re-run in case you want to restore created notificatin ");
            MPTestHooksProxy.Timeout = 120000; // increase the timeout for MPTestHooks.
            //creating 1050 notifications, 50 at a time to avoid timeouts on mptesthook
            int i = 0;
            int timeouts = 0;
            while (i < 21 && timeouts < 10)
            {
                List<Notification> newNList = new List<Notification>();
                for (int k = 0; k < 50; k++)
                {
                    DateTime randomDate = DateTime.UtcNow.AddHours(-randomGenerator.Next(23)).AddDays(-randomGenerator.Next(14));
                    Notification newNotification = testHooksClient.BuildNotification(Guid.NewGuid().ToString(), Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password), randomDate.ToString());
                    newNotification.Id = string.Format("{0:D19}-{1}", (DateTime.MaxValue.Ticks - randomDate.Ticks), Guid.NewGuid());
                    newNList.Add(newNotification);
                }
                try
                {
                    testHooksClient.CreateNotifications(newNList);
                    i++;
                }
                catch (SystemException e)
                {
                    if (e.Message == "The operation has timed out")
                    {
                        TraceEx.TraceStart("Call timed out. Trying again.");
                        timeouts++;
                        MPTestHooksProxy.Timeout = 180000; //increase timeout to three minutes.
                    }
                    else
                        throw new Exception(e.Message);
                }
            }

            //try to Get 1050 notifications
            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                string.Empty,
                0,
                string.Empty,
                1005,
                String.Empty,
                false,
                TestAreaBase.users[0].MemberName,
                TestAreaBase.users[0].Password,
                null);

            Assert.IsNotNull(notifications);

            // assert notificatins returned cant exceed 1000
            Assert.AreEqual<int>(1000, notifications.Count, "ERROR: Number of notifications returned from the service shouldnt excced 1000 but got" +
                                 notifications.Count.ToString());
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Send a message and verify message notification is created")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotification_Message()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            CleanupMessages = true;
            TestAreaBase.notificationCommon.CheckNotificationCount(string.Empty, string.Empty, Notification.NotificationType.Message.ToString(), TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            testHooksClient.SendMessage(ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)));
            NotificationTestCommon.VerifyUnreadMessages(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), "Setup failed to create unread message.");
            TestAreaBase.notificationCommon.VerifyMessageNotificationIsCreated(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Send a message and verify message notification is created")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotification_2Messages_1MessageNotification()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            CleanupMessages = true;
            TestAreaBase.notificationCommon.CheckNotificationCount(string.Empty, string.Empty, Notification.NotificationType.Message.ToString(), TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            testHooksClient.SendMessage(ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)));
            testHooksClient.SendMessage(ulong.Parse(Users.GetXuid(TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)));
            NotificationTestCommon.VerifyUnreadMessages(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), "Setup failed to create unread message.");

            TestAreaBase.notificationCommon.MakeATriggeringCallToPutRequestOnBackEnd(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            Thread.Sleep(Constants.NOTIFICATION_RETRIES * Constants.NOTIFICATION_SLEEP_TIME);

            TestAreaBase.notificationCommon.GetNotification(string.Empty, string.Empty, Notification.NotificationType.Message.ToString(), TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
        }


        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Send a message and verify message notification is created, delete the notification and then make sure that it will be created again until the message is there.")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotification_DeleteNofication_Message()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            CleanupMessages = true;
            TestAreaBase.notificationCommon.CheckNotificationCount(string.Empty, string.Empty, Notification.NotificationType.Message.ToString(), TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            testHooksClient.SendMessage(ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)));
            NotificationTestCommon.VerifyUnreadMessages(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), "Set up failed to create unread messages.");
            TestAreaBase.notificationCommon.VerifyMessageNotificationIsCreated(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            Notification messageNtfn = GetNotification(string.Empty, string.Empty, Notification.NotificationType.Message.ToString(), TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            this.NotificationsServiceProxy.DeleteNotificationQuery(messageNtfn.Id, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            TestAreaBase.notificationCommon.VerifyMessageNotificationIsCreated(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Make sure that there will not be mesage notification for a user with no message")]
        [TestProperty("Type", "Feature")]
        public void N_GetNotification_NoMessage()
        {
            TestAreaBase.notificationCommon.CheckNotificationCount(string.Empty, string.Empty, Notification.NotificationType.Message.ToString(), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            testHooksClient.DeleteAllUnreadMessages(ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)));
            NotificationTestCommon.VerifyNoUnreadMessage(ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), "Set up failed to delete unread messages.");
            TestAreaBase.notificationCommon.MakeATriggeringCallToPutRequestOnBackEnd(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            Thread.Sleep(Constants.NOTIFICATION_RETRIES * Constants.NOTIFICATION_SLEEP_TIME); //waiting for the backend to process the notification request
            TestAreaBase.notificationCommon.VerifyNoNotifications(string.Empty, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, Notification.NotificationType.Message.ToString());
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("send message, verify message notification, delete the message and verify that message notification gets deleted.")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotification_DeleteMessageNotification()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            CleanupMessages = true;
            TestAreaBase.notificationCommon.CheckNotificationCount(string.Empty, string.Empty, Notification.NotificationType.Message.ToString(), TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            testHooksClient.SendMessage(ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)));
            NotificationTestCommon.VerifyUnreadMessages(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), "Set up failed to create unread messages.");
            TestAreaBase.notificationCommon.VerifyMessageNotificationIsCreated(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            testHooksClient.DeleteAllUnreadMessages(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)));
            NotificationTestCommon.VerifyNoUnreadMessage(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), "Set up failed to delete unread messages.");
            TestAreaBase.notificationCommon.MakeATriggeringCallToPutRequestOnBackEnd(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            Thread.Sleep(Constants.NOTIFICATION_RETRIES * Constants.NOTIFICATION_SLEEP_TIME);
            TestAreaBase.notificationCommon.VerifyNoNotifications(string.Empty, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password, Notification.NotificationType.Message.ToString());
        }

        //Bug 11098
        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("send message, verify message notification, delete the message and verify that message notification gets deleted.")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotification_DeleteMessageNotification_WithInviteNotification()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            CleanupMessages = true;
            TestAreaBase.notificationCommon.CheckNotificationCount(string.Empty, string.Empty, Notification.NotificationType.Message.ToString(), TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            testHooksClient.SendMessage(ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)));
            NotificationTestCommon.VerifyUnreadMessages(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), "Set up failed to create unread messages.");
            TestAreaBase.notificationCommon.VerifyMessageNotificationIsCreated(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
 
            Thread.Sleep(2 * Constants.NOTIFICATION_SLEEP_TIME); //the last get notification call would create a request on the queue that should be processed before accepting the FR.

            string sessionId = Guid.NewGuid().ToString();
            string notificationId = testHooksClient.CreateNotification(
                    Notification.NotificationType.Invitation,
                    Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password),
                    Constants.TESTGAMEID,
                    sessionId);

            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                sessionId,
                0,
                Constants.IGNORE_lAST_ID,
                100,
                Notification.NotificationType.Invitation.ToString(),
                false,
                TestAreaBase.users[1].MemberName,
                TestAreaBase.users[1].Password,
                null);

            Assert.IsNotNull(notifications);
            Assert.AreEqual<int>(1, notifications.Count, "ERROR: Unexpected Number of notifications.");
            TestAreaBase.notificationCommon.VerifyNotification(notifications[0], notificationId);

            testHooksClient.DeleteAllUnreadMessages(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)));
            NotificationTestCommon.VerifyNoUnreadMessage(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), "Set up failed to delete unread messages.");
            TestAreaBase.notificationCommon.MakeATriggeringCallToPutRequestOnBackEnd(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            Thread.Sleep(Constants.NOTIFICATION_RETRIES * Constants.NOTIFICATION_SLEEP_TIME);
            TestAreaBase.notificationCommon.VerifyNoNotifications(string.Empty, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password, Notification.NotificationType.Message.ToString());
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Send a FR, verify FR notification which means there is a FR message. Verify that Message notification will not be created for a FR message.")]
        [TestProperty("Type", "Feature")]
        public void N_GetNotification_FRMessage_NoMessageNotification()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            CleanupMessages = true;
            TestAreaBase.notificationCommon.CheckNotificationCount(string.Empty, string.Empty, Notification.NotificationType.Message.ToString(), TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            testHooksClient.DeleteAllUnreadMessages(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)));
            NotificationTestCommon.VerifyNoUnreadMessage(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), "Set up failed to delete unread messages.");
            TestAreaBase.notificationCommon.MakeATriggeringCallToPutRequestOnBackEnd(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            Thread.Sleep(Constants.NOTIFICATION_RETRIES * Constants.NOTIFICATION_SLEEP_TIME);
            TestAreaBase.notificationCommon.VerifyNoNotifications(string.Empty, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password, Notification.NotificationType.Message.ToString());

            NotificationTestCommon.cleanupFR = true;
            testHooksClient.SetupNotFriendsAndNoFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)));
            NotificationTestCommon.VerifyNotFriends(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), "Error: Setup failed not to make friends");
            NotificationTestCommon.VerifyNoFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), "Error: Setup failed to delete pre existing Friend Requests");

            TestAreaBase.notificationCommon.CheckNotificationCountFR(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME); // to give a gap between requests on the backend

            testHooksClient.AddFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)));
            NotificationTestCommon.VerifyFriendRequest(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), "did not find a friend request on XBL");

            TestAreaBase.notificationCommon.VerifyNotificationCreated(string.Empty, string.Empty, Notification.NotificationType.FriendRequest, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            Thread.Sleep(10000); //just to make sure that we give the backend some more time for message notification 
            TestAreaBase.notificationCommon.VerifyNoNotifications(string.Empty, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password, Notification.NotificationType.Message.ToString());
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Send a message and verify message notification is created. Then call GetNotification with each valid but non-LiveApp supported locale and make sure that we will not get any Message Notifications.")]
        [TestProperty("Type", "Feature")]
        public void N_GetNotification_Message_NonLiveAppSupportedLocales()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            CleanupMessages = true;
            TestAreaBase.notificationCommon.CheckNotificationCount(string.Empty, string.Empty, Notification.NotificationType.Message.ToString(), TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            testHooksClient.SendMessage(ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)));
            NotificationTestCommon.VerifyUnreadMessages(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), "Set up failed to create unread messages.");
            TestAreaBase.notificationCommon.VerifyMessageNotificationIsCreated(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            string[] unsupportedLocales = LocalizationTestData.NON_LIVEAPP_SUPPORTED_LOCALE;
            foreach (string locale in unsupportedLocales)
            {
                this.NotificationsServiceProxy.Locale = locale;
                TestAreaBase.notificationCommon.VerifyNoNotifications(string.Empty, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password, Notification.NotificationType.Message.ToString());
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Send a message and verify message notification is created. Then call GetNotification with a each LiveApp supported locale and make sure that we will get Message Notifications.")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotification_Message_LiveAppSupportedLocales()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            CleanupMessages = true;
            TestAreaBase.notificationCommon.CheckNotificationCount(string.Empty, string.Empty, Notification.NotificationType.Message.ToString(), TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            testHooksClient.SendMessage(ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)));
            NotificationTestCommon.VerifyUnreadMessages(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), "Setup failed to create unread message.");

            TestAreaBase.notificationCommon.VerifyMessageNotificationIsCreated(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            string[] supportedLocales = LocalizationTestData.LIVEAPP_SUPPORTED_LOCALE;
            foreach (string locale in supportedLocales)
            {
                this.NotificationsServiceProxy.Locale = locale;
                List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                    string.Empty,
                    string.Empty,
                    0,
                    Constants.IGNORE_lAST_ID,
                    100,
                    Notification.NotificationType.Message.ToString(),
                    false,
                    TestAreaBase.users[1].MemberName,
                    TestAreaBase.users[1].Password,
                    null);
                Assert.IsNotNull(notifications);
                Assert.AreEqual(1, notifications.Count, "Unexpected number of notifications when locale is " + locale);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify the contents of message notification are correct.")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotification_MessageNotification_Content()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            TestAreaBase.notificationCommon.CheckNotificationCount(string.Empty, string.Empty, Notification.NotificationType.Message.ToString(), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            CleanupMessages = true;
            testHooksClient.SendMessage(ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)));
            NotificationTestCommon.VerifyUnreadMessages(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), "Setup failed to create unread message.");
            TestAreaBase.notificationCommon.VerifyMessageNotificationIsCreated(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            Notification messageNtfn = GetNotification(string.Empty, string.Empty, Notification.NotificationType.Message.ToString(), TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            VerifyMessageNotificationContent(messageNtfn);
        }

        
        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify that when a brand new user calls GetNotification, he will get an empty list.")]
        [TestProperty("Type", "Features")]
        public void P_GetNotifications_ForABrandNewUser()
        {
            List<XboxLiveAccount> newUsers = Users.CreateUsers(1);

            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                testHooksClient.TestSessionId.ToString(),
                0,
                Constants.IGNORE_lAST_ID,
                100,
                String.Empty,
                false,
                newUsers[0].MemberName,
                newUsers[0].Password,
                null);

            Assert.IsNotNull(notifications);
            Assert.AreEqual<int>(0, notifications.Count, "ERROR: Unexpected Number of notifications.");
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Send a message for a brand new user and verify message notification is created")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotifications_Message_BrandNewUser()
        {
            List<XboxLiveAccount> newUsers = Users.CreateUsers(1);
            Thread.Sleep(Constants.NEW_USER_WAIT_TIME); // give time after account is created so that Notification service will not fail to get puid
            testHooksClient.SendMessage(ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), ulong.Parse(Users.GetXuid(newUsers[0].MemberName, newUsers[0].Password)));
            NotificationTestCommon.VerifyUnreadMessages(ulong.Parse(Users.GetXuid(newUsers[0].MemberName, newUsers[0].Password)), "Setup failed to create unread message.");
            TestAreaBase.notificationCommon.VerifyMessageNotificationIsCreated(newUsers[0].MemberName, newUsers[0].Password);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Send a FR for a brand new user and verify that FR notification is sent to him.")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotifications_FRNotification_BrandNewUser()
        {
            List<XboxLiveAccount> newUsers = Users.CreateUsers(1);
            Thread.Sleep(Constants.NEW_USER_WAIT_TIME); // give time after account is created so that Notification service will not fail to get puid
            testHooksClient.AddFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), ulong.Parse(Users.GetXuid(newUsers[0].MemberName, newUsers[0].Password)));
            NotificationTestCommon.VerifyFriendRequest(ulong.Parse(Users.GetXuid(newUsers[0].MemberName, newUsers[0].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), "did not find a friend request on XBL");
            TestAreaBase.notificationCommon.VerifyNotificationCreated(string.Empty, string.Empty, Notification.NotificationType.FriendRequest, newUsers[0].MemberName, newUsers[0].Password);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify the contents of message notification and FR notification when the user has both.")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotification_MessageAndFRNotification_Content()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            TestAreaBase.notificationCommon.CheckNotificationCount(string.Empty, string.Empty, Notification.NotificationType.Message.ToString(), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            CleanupMessages = true;
            NotificationTestCommon.cleanupFR = true;
            testHooksClient.SetupNotFriendsAndNoFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)));
            NotificationTestCommon.VerifyNotFriends(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), "Error: Setup failed not to make friends");
            NotificationTestCommon.VerifyNoFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), "Error: Setup failed to delete pre existing Friend Requests");

            TestAreaBase.notificationCommon.CheckNotificationCountFR(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME); // to give a gap between requests on the backend

            testHooksClient.SendMessage(ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)));
            NotificationTestCommon.VerifyUnreadMessages(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), "Setup failed to create unread message.");

            testHooksClient.AddFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)));
            NotificationTestCommon.VerifyFriendRequest(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), "did not find a friend request on XBL");

            TestAreaBase.notificationCommon.VerifyMessageNotificationIsCreated(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            TestAreaBase.notificationCommon.VerifyNotificationCreated(string.Empty, string.Empty, Notification.NotificationType.FriendRequest, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            Notification messageNtfn = GetNotification(string.Empty, string.Empty, Notification.NotificationType.Message.ToString(), TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            VerifyMessageNotificationContent(messageNtfn);

            Notification friendRNtfn = GetNotification(string.Empty, string.Empty, Notification.NotificationType.FriendRequest.ToString(), TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            VerifyFriendRequestNotificationContent(friendRNtfn);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify contents of Friend Request Notification when the user has another invite notification at the same time.")]
        [TestProperty("Type", "Feature")]
        public void P_GetNotifications_FRAndInvite_NotificationContent()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");

            NotificationTestCommon.cleanupFR = true;
            testHooksClient.SetupNotFriendsAndNoFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)));
            NotificationTestCommon.VerifyNotFriends(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), "Error: Setup failed not to make friends");
            NotificationTestCommon.VerifyNoFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), "Error: Setup failed to delete pre existing Friend Requests");

            TestAreaBase.notificationCommon.CheckNotificationCountFR(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME); // to give a gap between requests on the backend

            testHooksClient.AddFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)));
            NotificationTestCommon.VerifyFriendRequest(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), "did not find a friend request on XBL");

            //reset invite count
            testHooksClient.UpdateUserEntry(
                Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password),
                DateTime.UtcNow,
                DateTime.UtcNow,
                0);

            string sessionId = TestAreaBase.notificationCommon.SendInviteRequest(false, 1);
            TestAreaBase.notificationCommon.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            TestAreaBase.notificationCommon.VerifyNotificationCreated(string.Empty, string.Empty, Notification.NotificationType.FriendRequest, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            List<Notification> notificationList = this.NotificationsServiceProxy.GetNotifications(
                string.Empty,
                string.Empty,
                0,
                Constants.IGNORE_lAST_ID,
                10,
                string.Empty,
                true,
                TestAreaBase.users[1].MemberName,
                TestAreaBase.users[1].Password,
                null);

            Notification friendRNtfn = GetNotification(string.Empty, string.Empty, Notification.NotificationType.FriendRequest.ToString(), TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            VerifyFriendRequestNotificationContent(friendRNtfn);
        }

        private void VerifyFriendRequestNotificationContent(Notification friendRNtfn)
        {
            Assert.AreEqual<Notification.NotificationCategory>(Notification.NotificationCategory.ToDo, friendRNtfn.Category, "Error: Incorrect Notification category in Friend Request Notification.");
            Assert.AreEqual<Notification.NotificationStatus>(Notification.NotificationStatus.UnRead, friendRNtfn.Status, "Error: Incorrect Notification status in Friend Request Notification.");
            Assert.AreEqual<Notification.NotificationType>(Notification.NotificationType.FriendRequest, friendRNtfn.Type, "Error: Incorrect Notification type in Friend Request Notification.");
            Assert.AreEqual("Friend Request", friendRNtfn.TypeDisplayName, "Error: Incorrect type display name in Friend Request Notification.");
            Assert.AreEqual(true, friendRNtfn.IsUserVisible, "Error: Friend Request Notification should be user visible.");
            Assert.AreEqual(0, friendRNtfn.SupportedPlatform, "Error: Supported platform should is incorrect in Friend Request Notification.");
            Assert.AreEqual("", friendRNtfn.UserId, "Error:UserId should be empty in Friend Request Notification");

            //sender Info
            UserInfo uinfo = new UserInfo();
            string from = HttpUtility.HtmlDecode(friendRNtfn.From);
            DataContractSerializer dcjs = new DataContractSerializer(typeof(UserInfo));
            UserInfo userInfo = (UserInfo)dcjs.ReadObject(XmlReader.Create(new StringReader(from)));
            Assert.AreEqual("Xbox LIVE", userInfo.GamerTag, "Error: GamerTag is incorrect in FR Notification.");
            Assert.AreEqual("", userInfo.DisplayName, "Error: Display Name is incorrect in FR Notification.");

            Assert.AreEqual("FriendRequest", friendRNtfn.DataBlob, "Error: Incorrect data blob content in Friend Request Notification.");

            //GameInfo
            Assert.AreEqual(Constants.XBOX_LIVE_EXTRAS_TITLE_ID, friendRNtfn.GameId, "Error: Incorrect game display name in Friend Request Notification");
            Assert.AreEqual(Constants.XBOX_LIVE_EXTRAS_DISPLAY_NAME, friendRNtfn.GameDisplayName, "Error: Incorrect game display name in Friend Request Notification" );
            Assert.AreEqual(null, friendRNtfn.SessionId, "Error: Incorrect session ID in Friend Request Notification");
            Assert.AreEqual((uint)0, friendRNtfn.Variant, "Error: Variant should be 0 in Friend Request Notification.");

            //url
            string envName = Config.Environment.Name;
            if (string.Compare(Config.Environment.Name, "TestNet", true) == 0)
                envName = "test";
            string expectedUrl = String.Format(@"http://redirect.{0}.xboxlive.com/g/{1}/0/", envName, Constants.XBOX_LIVE_EXTRAS_TITLE_ID);
            Assert.AreEqual(expectedUrl, friendRNtfn.Url, "Error: Incorrect url in Friend Request Notification");
            Assert.IsTrue(friendRNtfn.Images.Contains("http://nxeassets.xbox.com/shaxam/0201/16/03/16034fe1-9723-4793-b676-f68593e37427.PNG?v=1#friend_request.PNG"));
        }

        private void VerifyMessageNotificationContent(Notification messageNtfn)
        {
            Assert.AreEqual<Notification.NotificationCategory>(Notification.NotificationCategory.ToDo, messageNtfn.Category, "Error: Incorrect Notification category in Friend Request Notification.");
            Assert.AreEqual<Notification.NotificationStatus>(Notification.NotificationStatus.UnRead, messageNtfn.Status, "Error: Incorrect Notification status in Friend Request Notification.");
            Assert.AreEqual<Notification.NotificationType>(Notification.NotificationType.Message, messageNtfn.Type, "Error: Incorrect Notification type in Friend Request Notification.");
            Assert.AreEqual(Notification.NotificationType.Message.ToString(), messageNtfn.TypeDisplayName, "Error: Incorrect type display name in Friend Request Notification.");
            Assert.AreEqual("Message", messageNtfn.DataBlob, "Error: Incorrect data blob content in Friend Request Notification.");
            Assert.AreEqual(true, messageNtfn.IsUserVisible, "Error: Friend Request Notification should be user visible.");
            Assert.AreEqual(0, messageNtfn.SupportedPlatform, "Error: Supported platform should is incorrect in Friend Request Notification.");
            Assert.AreEqual("", messageNtfn.UserId, "Error:UserId should be empty in Friend Request Notification");
            Assert.AreEqual((uint)0, messageNtfn.Variant, "Error: Variant should be 0 in Friend Request Notification.");

            //GameInfo
            Assert.AreEqual(Constants.XBOX_LIVE_EXTRAS_TITLE_ID, messageNtfn.GameId, "Error: Incorrect game display name in Friend Request Notification");
            Assert.AreEqual(Constants.XBOX_LIVE_EXTRAS_DISPLAY_NAME, messageNtfn.GameDisplayName, "Error: Incorrect game display name in Friend Request Notification");
            Assert.AreEqual(null, messageNtfn.SessionId, "Error: Incorrect session ID in Friend Request Notification");

            //sender Info
            UserInfo uinfo = new UserInfo();
            string from = HttpUtility.HtmlDecode(messageNtfn.From);
            DataContractSerializer dcjs = new DataContractSerializer(typeof(UserInfo));
            UserInfo userInfo = (UserInfo)dcjs.ReadObject(XmlReader.Create(new StringReader(from)));
            Assert.AreEqual("Xbox LIVE", userInfo.GamerTag, "Error: GamerTag is incorrect in FR Notification.");
            Assert.AreEqual("", userInfo.DisplayName, "Error: Display Name is incorrect in FR Notification.");

            //url
            string envName = Config.Environment.Name;
            if (string.Compare(envName, "TestNet", true) == 0)
                envName = "test";
            string url = String.Format(@"http://redirect.{0}.xboxlive.com/g/{1}/0/", envName, Constants.XBOX_LIVE_EXTRAS_TITLE_ID);
            Assert.AreEqual(url, messageNtfn.Url, true, "Error: Incorrect url in invite notification");

            //image
            //Assert.IsTrue(messageNtfn.Images.Contains("http://nxeassets.xbox.com/shaxam/0201/06/a3/06a381fa-c50f-4243-8348-54fe10f022d1.BMP"));
            //Assert.IsTrue(messageNtfn.Images.Contains("http://nxeassets.xbox.com/shaxam/0201/2b/a5/2ba57a8b-ad45-4f10-9403-d04be671037e.BMP"));
            Assert.IsTrue(messageNtfn.Images.Contains("http://nxeassets.xbox.com/shaxam/0201/77/51/77510a24-a46d-4a23-a502-4ac43bd766bc.PNG?v=1#message.PNG"));
            //Assert.IsTrue(messageNtfn.Images.Contains("http://nxeassets.xbox.com/shaxam/0201/38/71/3871ecee-aef0-49a0-bf21-15749d3ec8b5.BMP"));

        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify that we get a 200 response if locale is different using the same etag.")]
        [TestProperty("Type", "Features")]
        public void P_GetNotifications_SameEtag_DifferentLocale()
        {
            Thread.Sleep(Constants.NOTIFICATION_RETRIES * Constants.NOTIFICATION_SLEEP_TIME);  // to give time for notification internal so that any requests in the queue would be processed before test starts.
            TestAreaBase.notificationCommon.CheckNotificationCount(Constants.TESTGAMEID.ToString(), testHooksClient.TestSessionId, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password); ;
            string notificationId = testHooksClient.CreateDummyNotification();

            int randomIndex = randomGenerator.Next(LocalizationTestData.ALL_SUPPORTED_LOCALES.Length);
            this.NotificationsServiceProxy.Locale = LocalizationTestData.ALL_SUPPORTED_LOCALES[randomIndex];

            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                    Constants.TESTGAMEID.ToString(),
                    testHooksClient.TestSessionId.ToString(),
                    0,
                    Constants.IGNORE_lAST_ID,
                    100,
                    String.Empty,
                    false,
                    TestAreaBase.users[0].MemberName,
                    TestAreaBase.users[0].Password,
                    null);
            Assert.IsNotNull(notifications);
            Assert.AreEqual<int>(notifications.Count, 1, "ERROR: Unexpected Number of notifications.");
            TestAreaBase.notificationCommon.VerifyNotification(notifications[0], notificationId);

            string etag = this.NotificationsServiceProxy.EtagInResponse;

            if (randomIndex + 1 < LocalizationTestData.ALL_SUPPORTED_LOCALES.Length)
                this.NotificationsServiceProxy.Locale = LocalizationTestData.ALL_SUPPORTED_LOCALES[randomIndex + 1];
            else
                this.NotificationsServiceProxy.Locale = LocalizationTestData.ALL_SUPPORTED_LOCALES[randomIndex - 1];

            notifications = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                testHooksClient.TestSessionId.ToString(),
                0,
                Constants.IGNORE_lAST_ID,
                100,
                String.Empty,
                false,
                TestAreaBase.users[0].MemberName,
                TestAreaBase.users[0].Password,
                etag);

            Assert.AreNotEqual(etag, this.NotificationsServiceProxy.EtagInResponse, "Error: Wrong etag in response");
            Assert.IsNotNull(notifications);
            Assert.AreEqual<int>(notifications.Count, 1, "ERROR: Unexpected Number of notifications.");
            TestAreaBase.notificationCommon.VerifyNotification(notifications[0], notificationId);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify 304 for the same etag with same locale")]
        [TestProperty("Type", "Features")]
        public void P_GetNotifications_SameEtag_SameLocale()
        {
            Thread.Sleep(Constants.NOTIFICATION_RETRIES * Constants.NOTIFICATION_SLEEP_TIME);  // to give time for notification internal so that any requests in the queue would be processed before test starts.
            TestAreaBase.notificationCommon.CheckNotificationCount(Constants.TESTGAMEID.ToString(), testHooksClient.TestSessionId, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password); ;
            string notificationId = testHooksClient.CreateDummyNotification();

            this.NotificationsServiceProxy.Locale = LocalizationTestData.ALL_SUPPORTED_LOCALES[randomGenerator.Next(LocalizationTestData.ALL_SUPPORTED_LOCALES.Length)]; 
            
            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                    Constants.TESTGAMEID.ToString(),
                    testHooksClient.TestSessionId.ToString(),
                    0,
                    Constants.IGNORE_lAST_ID,
                    100,
                    String.Empty,
                    false,
                    TestAreaBase.users[0].MemberName,
                    TestAreaBase.users[0].Password,
                    null);
            string etag = this.NotificationsServiceProxy.EtagInResponse;

            //make a call with the above etag without changing the locale
            try
            {
                notifications = this.NotificationsServiceProxy.GetNotifications(
                    Constants.TESTGAMEID.ToString(),
                    testHooksClient.TestSessionId.ToString(),
                    0,
                    Constants.IGNORE_lAST_ID,
                    100,
                    String.Empty,
                    false,
                    TestAreaBase.users[0].MemberName,
                    TestAreaBase.users[0].Password,
                    etag);
                Assert.Fail("Expected a 304 exception back");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.NotModified, e.Response.Status);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify 304 for the same etag with same localization logic")]
        [TestProperty("Type", "Features")]
        public void P_GetNotifications_SameEtag_SameLocalizationFallBack()
        {
            Thread.Sleep(Constants.NOTIFICATION_RETRIES * Constants.NOTIFICATION_SLEEP_TIME);  // to give time for notification internal so that any requests in the queue would be processed before test starts.
            TestAreaBase.notificationCommon.CheckNotificationCount(Constants.TESTGAMEID.ToString(), testHooksClient.TestSessionId, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password); ;
            string notificationId = testHooksClient.CreateDummyNotification();

            this.NotificationsServiceProxy.Locale = "en-US";       
            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                    Constants.TESTGAMEID.ToString(),
                    testHooksClient.TestSessionId.ToString(),
                    0,
                    Constants.IGNORE_lAST_ID,
                    100,
                    String.Empty,
                    false,
                    TestAreaBase.users[0].MemberName,
                    TestAreaBase.users[0].Password,
                    null);
            string etag = this.NotificationsServiceProxy.EtagInResponse;

            this.NotificationsServiceProxy.Locale = LocalizationTestData.UNSUPPORTED_lOCALE[randomGenerator.Next(LocalizationTestData.UNSUPPORTED_lOCALE.Length)]; //this will be defaulted to en-US so etag should not change.

            try
            {
                notifications = this.NotificationsServiceProxy.GetNotifications(
                    Constants.TESTGAMEID.ToString(),
                    testHooksClient.TestSessionId.ToString(),
                    0,
                    Constants.IGNORE_lAST_ID,
                    100,
                    String.Empty,
                    false,
                    TestAreaBase.users[0].MemberName,
                    TestAreaBase.users[0].Password,
                    etag);
                Assert.Fail("Expected a 304 exception back");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.NotModified, e.Response.Status);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify aggregation of YourTurn Notification type by Nudge Notification.")]
        [TestProperty("Type", "Features")]
        public void P_GetNotifications_AggregateYourTurnToNudgeInASingleSession()
        {
            TestAreaBase.notificationCommon.CheckNotificationCount(Constants.TESTGAMEID.ToString(), testHooksClient.TestSessionId, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password); ;

            //create a YourTurn Notification
            string yourTurnId = TestAreaBase.notificationCommon.CreateNotificationsInternal(1, Notification.NotificationType.YourTurn, testHooksClient.TestSessionId, Constants.TESTGAMEID);

            //Verify created
            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), testHooksClient.TestSessionId, (int)testHooksClient.TestCategory, Constants.IGNORE_lAST_ID, 100, String.Empty, false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, null);
            Assert.AreEqual(1, notifications.Count, "Did not find expected YourTurn notification.");
            Assert.AreEqual(yourTurnId, notifications[0].Id, "Incorrect YourTurn notification ID.");


            //create a Nudge Notification
            string nudgeID = TestAreaBase.notificationCommon.CreateNotificationsInternal(1, Notification.NotificationType.Nudge, testHooksClient.TestSessionId, Constants.TESTGAMEID);

            //Verify created nudge and deleted YourTurn
            notifications = this.NotificationsServiceProxy.GetNotifications(Constants.TESTGAMEID.ToString(), testHooksClient.TestSessionId, (int)testHooksClient.TestCategory, Constants.IGNORE_lAST_ID, 100, String.Empty, false, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password, null);
            Assert.AreEqual(1, notifications.Count, "Incorrect number of notifications. Either did not create Nudge notification or did not delete YourTurn Notification.");
            Assert.AreEqual(nudgeID, notifications[0].Id, "Did not find the correct Nudge notification.");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Test.API\Notifications\SendInvite.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using AsyncMultiplayer.NotificationService;
using System.Configuration;
using System.Net;
using LiveN.Test.Framework.Configuration;
using SMTPTest;
using System.Threading;
using MultiPlayer.Test.Data;
using System.Runtime.Serialization;
using System.Web;
using System.Xml;
using System.IO;
using LiveN.Test.Common.Web;
using System.Net.Sockets;
using System.Net.Mail;
using Multiplayer.Test.UserAccounts;
using LiveN.Test.Common;
using System.Data.SqlClient;
using LiveN.Test.Framework;

namespace Multiplayer.Test.API
{
    /// <summary>
    /// Summary description for SendInvite
    /// </summary>
    [TestClass]
    public class SendInvite : TestAreaBase
    {
        private Random randomGenerator = new Random();
        private bool isSMPTListening = false;
        SMTPListenerWrapper listener;
        private static bool npdbSmtpSettingTweaked = false;
        private bool isUserBlockerTestRun; // is used for test cleanup incase tests that block some users were run. Not that crucial but is good to have.
        #region Initialize

        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
        }

        [TestInitialize()]
        public void MyTestInitialize()
        {
            TestAreaBase.notificationCommon = new NotificationTestCommon();
            this.NotificationsServiceProxy.Locale = "en-US";
            isSMPTListening = false;
            listener = null;
            try
            {
                //tweak NPDB setting
                TweakSMTPHostNameOnNPDB(this.TestClientMachineName);
            }
            catch (Exception) //if fail, just ignore. It is a good to have for some tests but okay if this fails.
            {
            }

            LockTest();
            try
            {
                //reset invite count
                testHooksClient.UpdateUserEntry(
                    Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password),
                    DateTime.UtcNow,
                    DateTime.UtcNow,
                    0);
            }
            catch (Exception e)
            {
                UnlockTest();
                throw new Exception(e.Message);
            }
            isUserBlockerTestRun = false;
        }

        #endregion

        #region Cleanup
        [TestCleanup]
        public void TestCleanup()
        {
            try
            {
                if (isSMPTListening)
                {
                    try
                    {
                        NotificationTestCommon.GetMailAndStopListening(listener); // close connection to SMTP listener if not already closed so that next test can establish the connection without error.
                    }
                    catch (Exception)
                    {
                    }
                }
                this.NotificationsServiceProxy.Locale = "en-US";
                TestAreaBase.notificationCommon.TestCleanup();
                if (isUserBlockerTestRun)
                {
                    NotificationTestCommon.RemoveUsersFromNeverList();
                }
            }
            finally
            {
                UnlockTest();
            }
        }
        #endregion

        [TestMethod, Owner("a-sediro"), Priority(0)]
        [Description("Send invitation from person 0 to person 1.  Verify Notification was created.")]
        [TestProperty("Type", "BVTs")]
        public void BVT_SendInvite()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            string sessionId = TestAreaBase.notificationCommon.SendInviteRequest(false, 1);
            TestAreaBase.notificationCommon.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
        }

        [TestMethod, Owner("a-sediro"), Priority(0)]
        [Description("Testing 1 under the RateLimit on invites")]
        [TestProperty("Type", "BVTs")]
        public void BVT_InviteRateLimit_NIsSuccessful()
        {
            //set the number of invites sent to max - 1
            testHooksClient.UpdateUserEntry(
                Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password),
                DateTime.UtcNow,
                DateTime.UtcNow,
                9);
            InviteRequest inviteRequest = new InviteRequest();
            inviteRequest.GameId = Constants.TESTGAMEID;
            inviteRequest.SessionId = Guid.NewGuid().ToString();
            inviteRequest.Data = "VerifyStub_SendInvite test data";
            inviteRequest.Recipients = "recipients";
            this.NotificationsServiceProxy.SendInvite(inviteRequest, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

            //reset the value on the server
            testHooksClient.UpdateUserEntry(
                Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password),
                DateTime.UtcNow,
                DateTime.UtcNow,
                0);
        }

        [TestMethod, Owner("a-sediro"), Priority(0)]
        [Description("Testing the RateLimit on invites is enforced")]
        [TestProperty("Type", "BVTs")]
        public void BVT_InviteRateLimit_NPlus1Fails()
        {
            //set the number of invites sent to max - 1
            testHooksClient.UpdateUserEntry(
                Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password),
                DateTime.UtcNow,
                DateTime.UtcNow,
                10);

            InviteRequest inviteRequest = new InviteRequest();
            inviteRequest.GameId = Constants.TESTGAMEID;
            inviteRequest.SessionId = Guid.NewGuid().ToString();
            inviteRequest.Data = "VerifyStub_SendInvite test data";
            inviteRequest.Recipients = TestAreaBase.users[1].MemberName;
            try
            {
                this.NotificationsServiceProxy.SendInvite(inviteRequest, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
                Assert.Fail("Expecting Not Acceptable.");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.NotAcceptable, e.Response.Status);
            }

            //reset the value on the server
            testHooksClient.UpdateUserEntry(
                Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password),
                DateTime.UtcNow,
                DateTime.UtcNow,
                0);
        }

        [TestMethod, Owner("a-sediro"), Priority(0)]
        [Description("Testing the RateLimit on invites will expire after an hour")]
        [TestProperty("Type", "BVTs")]
        public void BVT_InviteRateLimit_ExpireAfter1Hour()
        {
            //set the number of invites sent to max - 1
            testHooksClient.UpdateUserEntry(
                Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password),
                DateTime.UtcNow.Subtract(new TimeSpan(1, 1, 0)), // one hour and one minute so that the difference between now and this time is always greater than 1 hour
                DateTime.UtcNow.Subtract(new TimeSpan(1, 1, 0)),
                10);

            InviteRequest inviteRequest = new InviteRequest();
            inviteRequest.GameId = Constants.TESTGAMEID;
            inviteRequest.SessionId = Guid.NewGuid().ToString();
            inviteRequest.Data = "VerifyStub_SendInvite test data";
            inviteRequest.Recipients = "recipients";

            Thread.Sleep(1000); //give time to make sure that the update user entry has been executed. Added this because I got random failures on testnet and I couldn't think of any other reason why.
            this.NotificationsServiceProxy.SendInvite(inviteRequest, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

            //reset the value on the server
            testHooksClient.UpdateUserEntry(
                Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password),
                DateTime.UtcNow,
                DateTime.UtcNow,
                0);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Send invitation and verify Invite Notification is created for the recipient. - use gamertag to send invite.")]
        [TestProperty("Type", "Feature")]
        public void P_SendInvite_ByGamerTag()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            //Send invite by gamer tag
            string sessionId = Guid.NewGuid().ToString();
            TestAreaBase.notificationCommon.VerifyNoNotifications(sessionId, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password, string.Empty);
            string recipient = "gamertag:" + Users.GetGamertag(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password) + ";";
            TestAreaBase.notificationCommon.SendInviteRequest(sessionId, false, recipient);
            TestAreaBase.notificationCommon.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Send invitation and verify Invite Notification is created for the recipient. - use gamertag to send invite.")]
        [TestProperty("Type", "Feature")]
        public void P_SendInvite_EmailPrefix()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            string sessionId = Guid.NewGuid().ToString();
            TestAreaBase.notificationCommon.VerifyNoNotifications(sessionId, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password, string.Empty);
            string recipient = "email:" + TestAreaBase.users[1].MemberName + ";";
            TestAreaBase.notificationCommon.SendInviteRequest(sessionId, false, recipient);
            TestAreaBase.notificationCommon.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Send invite with mixed recipients -- prefix only and valid email address.")]
        [TestProperty("Type", "Feature")]
        public void P_SendInvite_MixedRecipient_PrefixOnly()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            string sessionId = Guid.NewGuid().ToString();
            TestAreaBase.notificationCommon.VerifyNoNotifications(sessionId, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password, string.Empty);
            string recipient = "email:;gamertag:;" + TestAreaBase.users[1].MemberName + ";";
            TestAreaBase.notificationCommon.SendInviteRequest(sessionId, false, recipient);
            TestAreaBase.notificationCommon.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Send invitation and verify Invite Notification is created for the recipient. - use gamertag to send invite.")]
        [TestProperty("Type", "Feature")]
        public void P_SendInvite_ByGamerTagAndEmailMixed()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 3, "We need at least two users for this test");
            string sessionId = Guid.NewGuid().ToString();
            TestAreaBase.notificationCommon.VerifyNoNotifications(sessionId, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password, Notification.NotificationType.Invitation.ToString());
            TestAreaBase.notificationCommon.VerifyNoNotifications(sessionId, TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password, Notification.NotificationType.Invitation.ToString());
            string recipient = "gamertag:" + Users.GetGamertag(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password) + ";" + TestAreaBase.users[2].MemberName + ";";
            TestAreaBase.notificationCommon.SendInviteRequest(sessionId, false, recipient);
            TestAreaBase.notificationCommon.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            TestAreaBase.notificationCommon.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Invite request datablob too long.")]
        [TestProperty("Type", "Feature")]
        public void P_SendInvite_MaxInviteDatablob()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            string data = new string('a', 1000);
            InviteRequest inviteRequest = new InviteRequest();
            inviteRequest.GameId = Constants.TESTGAMEID;
            inviteRequest.SessionId = Guid.NewGuid().ToString();
            inviteRequest.Data = data;
            inviteRequest.Recipients = TestAreaBase.users[1].MemberName + ";";
            this.NotificationsServiceProxy.SendInvite(inviteRequest, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            TestAreaBase.notificationCommon.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), inviteRequest.SessionId, Notification.NotificationType.Invitation, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Invite request datablob too long.")]
        [TestProperty("Type", "Feature")]
        public void N_SendInvite_MaxPlus1InviteDatablob()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            string data = new string('a', 1001);
            InviteRequest inviteRequest = new InviteRequest();
            inviteRequest.GameId = Constants.TESTGAMEID;
            inviteRequest.SessionId = Guid.NewGuid().ToString();
            inviteRequest.Data = data;
            inviteRequest.Recipients = TestAreaBase.users[1].MemberName + ";";
            try
            {
                this.NotificationsServiceProxy.SendInvite(inviteRequest, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
                Assert.Fail("Expecting a bad request");
            }
            catch (RestException e)
            {
                NotificationTestCommon.VerifyException(HttpStatusCode.BadRequest, "2148015943 Invalid argument or bad request: Data member in InviteRequest is too big", e.Response);
            }
        }
        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Invite request with empty recipient list.")]
        [TestProperty("Type", "Feature")]
        public void N_SendInvite_EmptyRecipientList()
        {
            InviteRequest inviteRequest = new InviteRequest();
            inviteRequest.GameId = Constants.TESTGAMEID;
            inviteRequest.SessionId = Guid.NewGuid().ToString();
            inviteRequest.Data = "test data";
            inviteRequest.Recipients = "";
            try
            {
                this.NotificationsServiceProxy.SendInvite(inviteRequest, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
                Assert.Fail("Expecting a bad request");
            }
            catch (RestException e)
            {
                NotificationTestCommon.VerifyException(HttpStatusCode.BadRequest, "2148015943 Invalid argument or bad request: receipients list is empty", e.Response);
            }
        }

        //Related Bug - 7790
        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("verify FR link will not be available in invite email even when FR is set to true.")]
        [TestProperty("Type", "Feature")]
        public void N_SendInvite_InviteEmail_NoFRLink()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");

            Assert.AreEqual("dev", Config.Environment.Name, "This test has to be run against a dev box. It is expected to fail otherwise");
            Assert.AreEqual("false", ConfigurationManager.AppSettings["UseFakeClient"], "For this test, UseFakeClient should be set to false in app.config file.");
            //tweak NPDB setting
            TweakSMTPHostNameOnNPDB(this.TestClientMachineName);

            isSMPTListening = true;

            listener = NotificationTestCommon.StartListening();

            string gamertag = Users.GetGamertag(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            this.NotificationsServiceProxy.Locale = LocalizationTestData.DEFAULT_LOCALE;
            ExpectedLocalizedEmailContent expectedLocalizedEmail = LocalizationTestData.GetExpectedLocalizedContentOnEmail(LocalizationTestData.DEFAULT_LANGUAGE, gamertag, "");

            //I changed FR below to true because we have decided not to include FR related content on the invite email. Please chenge this if decided the other way.
            string sessionId = TestAreaBase.notificationCommon.SendInviteRequest(true, 1);
            TestAreaBase.notificationCommon.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            email inviteEmail = NotificationTestCommon.GetMailAndStopListening(listener);
            isSMPTListening = false;

            NotificationTestCommon.ValidateEmail(inviteEmail.Subject, inviteEmail.Body, expectedLocalizedEmail, this.NotificationsServiceProxy.Locale, gamertag, false, sessionId);
            Assert.IsFalse(inviteEmail.Body.Contains(expectedLocalizedEmail.frPart1), "Not expecting FR related content");
            Assert.IsFalse(inviteEmail.Body.Contains(expectedLocalizedEmail.frPart2), "Not expecting FR related content");
            Assert.IsFalse(inviteEmail.Body.Contains(expectedLocalizedEmail.frLink), "Not expecting FR related content");
        }

        //[TestMethod, Owner("a-sediro"), Priority(1)]
        //[Description("verify FR link is available in invite email when FR is set to true.")]
        //[TestProperty("Type", "Feature")]
        //public void P_SendInvite_InviteEmail_FRLink()
        //{
        //    Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");

        //    Assert.AreEqual("dev", Config.Environment.Name, "This test has to be run against a dev box. It is expected to fail otherwise");
        //    Assert.AreEqual("false", ConfigurationManager.AppSettings["UseFakeClient"], "For this test, UseFakeClient should be set to false in app.config file.");

        //    //to make this test pass you have to first manually go to LIVEN_NPDB (db) - > t_setting_overrides (table), change the value of lest_NotificationSMTPProvider_HostName to the name of the machine you are running this test on. 

        //    listener = NotificationTestCommon.StartListening();

        //    string gamertag = Users.GetGamertag(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
        //    this.NotificationsServiceProxy.Locale = LocalizationTestData.DEFAULT_LOCALE;
        //    ExpectedLocalizedEmailContent expectedLocalizedEmail = LocalizationTestData.GetExpectedLocalizedContentOnEmail(LocalizationTestData.DEFAULT_LANGUAGE, gamertag, "");

        //    //I changed FR below to true because we have decided not to include FR related content on the invite email. Please chenge this if decided the other way.
        //    string sessionId = common.SendInviteRequest(true, 1);
        //    common.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

        //    email inviteEmail = NotificationTestCommon.GetMailAndStopListening(listener);
        //    NotificationTestCommon.ValidateEmail(inviteEmail.Subject, inviteEmail.Body, expectedLocalizedEmail, this.NotificationsServiceProxy.Locale, gamertag, true, sessionId);
        //}

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Send invitation and verify Notification was created and email sent was localized for the recipient for all the supported locales.")]
        [TestProperty("Type", "Feature")]
        public void P_SendInvite_Localization_GoodLocale()
        {
            Assert.AreEqual("dev", Config.Environment.Name, "This test has to be run against a dev box. It is expected to fail otherwise");
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            Assert.AreEqual("false", ConfigurationManager.AppSettings["UseFakeClient"], "For this test, UseFakeClient should be set to false in app.config file.");

            //tweak NPDB setting
            TweakSMTPHostNameOnNPDB(this.TestClientMachineName);

            isSMPTListening = true;

            listener = NotificationTestCommon.StartListening();

            string gamertag = Users.GetGamertag(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

            int randomIndex = randomGenerator.Next(LocalizationTestData.AVAILABLE_GOOD_LOCALES.Length / 2); // (/2 because it is a two dimensional array).
            this.NotificationsServiceProxy.Locale = LocalizationTestData.AVAILABLE_GOOD_LOCALES[randomIndex, 0];
            ExpectedLocalizedEmailContent expectedLocalizedEmail = LocalizationTestData.GetExpectedLocalizedContentOnEmail(LocalizationTestData.AVAILABLE_GOOD_LOCALES[randomIndex, 1], gamertag, "");

            TraceEx.TraceStart("Sending email with Locale = " + LocalizationTestData.AVAILABLE_GOOD_LOCALES[randomIndex, 0]);

            string sessionId = TestAreaBase.notificationCommon.SendInviteRequest(true, 1);
            TestAreaBase.notificationCommon.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            email inviteEmail = NotificationTestCommon.GetMailAndStopListening(listener);
            isSMPTListening = false;

            NotificationTestCommon.ValidateEmail(inviteEmail.Subject, inviteEmail.Body, expectedLocalizedEmail, LocalizationTestData.AVAILABLE_GOOD_LOCALES[randomIndex, 0], gamertag, sessionId);
            TraceEx.TraceStart("Verified for " + LocalizationTestData.AVAILABLE_GOOD_LOCALES[randomIndex, 0]);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Send invitation and verify Notification was created and email sent was localized for the recipient.")]
        [TestProperty("Type", "Feature")]
        public void P_SendInvite_Localization_MixedLocale()
        {
            Assert.AreEqual("dev", Config.Environment.Name, "This test has to be run against a dev box. It is expected to fail otherwise");
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            Assert.AreEqual("false", ConfigurationManager.AppSettings["UseFakeClient"], "For this test, UseFakeClient should be set to false in app.config file.");
            //tweak NPDB setting
            TweakSMTPHostNameOnNPDB(this.TestClientMachineName);

            isSMPTListening = true;
            listener = NotificationTestCommon.StartListening();

            string gamertag = Users.GetGamertag(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            string[,] localeValue = LocalizationTestData.MIXED_LOCALE;
            int randomIndex = randomGenerator.Next(localeValue.Length / 2);
            this.NotificationsServiceProxy.Locale = localeValue[randomIndex, 0];
            ExpectedLocalizedEmailContent expectedLocalizedEmail = LocalizationTestData.GetExpectedLocalizedContentOnEmail(localeValue[randomIndex, 1], gamertag, "");

            string sessionId = TestAreaBase.notificationCommon.SendInviteRequest(true, 1);
            TestAreaBase.notificationCommon.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            email inviteEmail = NotificationTestCommon.GetMailAndStopListening(listener);
            isSMPTListening = false;

            NotificationTestCommon.ValidateEmail(inviteEmail.Subject, inviteEmail.Body, expectedLocalizedEmail, localeValue[randomIndex, 0], gamertag, sessionId);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Send invitation and verify Notification was created and email sent was localized for the recipient.")]
        [TestProperty("Type", "Feature")]
        public void P_SendInvite_Localization_UnsupportedLocale()
        {
            Assert.AreEqual("dev", Config.Environment.Name, "This test has to be run against a dev box. It is expected to fail otherwise");
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            Assert.AreEqual("false", ConfigurationManager.AppSettings["UseFakeClient"], "For this test, UseFakeClient should be set to false in app.config file.");
            //tweak NPDB setting
            TweakSMTPHostNameOnNPDB(this.TestClientMachineName);

            isSMPTListening = true;

            listener = NotificationTestCommon.StartListening();

            string gamertag = Users.GetGamertag(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            string[] localeValue = LocalizationTestData.UNSUPPORTED_lOCALE;
            int randomIndex = randomGenerator.Next(localeValue.Length);
            this.NotificationsServiceProxy.Locale = localeValue[randomIndex];
            ExpectedLocalizedEmailContent expectedLocalizedEmail = LocalizationTestData.GetExpectedLocalizedContentOnEmail(LocalizationTestData.DEFAULT_LANGUAGE, gamertag, "");

            string sessionId = TestAreaBase.notificationCommon.SendInviteRequest(true, 1);
            TestAreaBase.notificationCommon.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            email inviteEmail = NotificationTestCommon.GetMailAndStopListening(listener);
            isSMPTListening = false;
            NotificationTestCommon.ValidateEmail(inviteEmail.Subject, inviteEmail.Body, expectedLocalizedEmail, localeValue[randomIndex], gamertag, sessionId);
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify that emails are sent for recipients who do not have a live ID.")]
        [TestProperty("Type", "Feature")]
        public void P_SendInvite_Nonxboxuser()
        {
            Assert.AreEqual("dev", Config.Environment.Name, "This test has to be run against a dev box. It is expected to fail otherwise");
            Assert.AreEqual("false", ConfigurationManager.AppSettings["UseFakeClient"], "For this test, UseFakeClient should be set to false in app.config file.");
            //tweak NPDB setting
            TweakSMTPHostNameOnNPDB(this.TestClientMachineName);

            isSMPTListening = true;

            string validEmailAddresses = "onecard-testB@hotmail-int.com;1234957457@123456.com;27374-296836@hkkhkh890.org;122.44mjkfjdfHKKHFKDHkkjfKhdkh_jghdjfg-jkgjdgfdgF@hkkhkh890.name;R.G@hkkhkh890.gov;r.g.l@hkkhkh890.aero;1.2@hkkhkh890.net;Khfs-Df_Gf.gdsiuty@hkkhkh890.mil;1.2.3@hkkhkh890.mobi;j@hkkhkh890.jobs;khfs-dfgf.gds.iutY@hkkhkh890.info;";  //make sure that these are not more than 15
            string[] recipients = validEmailAddresses.Split(new string[] { ";" }, StringSplitOptions.RemoveEmptyEntries);

            if (recipients.Length > 15)
                TraceEx.TraceStart("Number of recipients should not be more than 15 to be able to test all the valid email addresses.");

            listener = NotificationTestCommon.StartListening(recipients.Length);

            string gamertag = Users.GetGamertag(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            this.NotificationsServiceProxy.Locale = LocalizationTestData.DEFAULT_LOCALE;
            ExpectedLocalizedEmailContent expectedLocalizedEmail = LocalizationTestData.GetExpectedLocalizedContentOnEmail(LocalizationTestData.DEFAULT_LANGUAGE, gamertag, "");
            string sessionId = Guid.NewGuid().ToString();
            TestAreaBase.notificationCommon.SendInviteRequest(sessionId, false, validEmailAddresses);

            List<email> inviteEmails = NotificationTestCommon.GetMailsAndStopListening(listener, recipients.Length);
            isSMPTListening = false;

            Assert.AreEqual(recipients.Length, inviteEmails.Count, "Error: email was not sent to all valid recipients");

            for (int i = 0; i < inviteEmails.Count; i++)
            {
                NotificationTestCommon.ValidateEmail(inviteEmails[i].Subject, inviteEmails[i].Body, expectedLocalizedEmail, LocalizationTestData.DEFAULT_LOCALE, gamertag, false, sessionId);
                Assert.AreEqual(recipients[i], inviteEmails[i].To, "Email sent to incorrect recipient.");
                TraceEx.TraceStart("Verified email for recipient " + i + " which is " + inviteEmails[i].To);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify that emails are not sent if the email address is not valid email address format.")]
        [TestProperty("Type", "Feature")]
        public void N_SendInvite_MalformedEmailAddress()
        {
            Assert.AreEqual("dev", Config.Environment.Name, "This test has to be run against a dev box. It is expected to fail otherwise");
            Assert.AreEqual("false", ConfigurationManager.AppSettings["UseFakeClient"], "For this test, UseFakeClient should be set to false in app.config file.");
            //tweak NPDB setting
            TweakSMTPHostNameOnNPDB(this.TestClientMachineName);

            isSMPTListening = true;

            listener = NotificationTestCommon.StartListening(5);

            string sessionId = Guid.NewGuid().ToString();
            string invalidEmailAddresses = "invalidemail.com;invalid@;.1234957457@microsoft.com;2737496836.@valid.org;.ghfkhg@hkkhkh890.gov;.....@hkkhkh890.mobi;%^&*@#$@hkkhkh890.jobs;@@hkkhkh890.museum;";
            TestAreaBase.notificationCommon.SendInviteRequest(sessionId, true, invalidEmailAddresses);

            List<email> inviteEmails = NotificationTestCommon.GetMailsAndStopListening(listener, 5);
            Assert.IsNotNull(inviteEmails, "Error: email should not be null.");
            Assert.AreEqual(0, inviteEmails.Count, "Error: Not Expecting email sending attempts.");
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("send invite to some valid and some invalid email addresses and verify that valid recipients will get email and notification.")]
        [TestProperty("Type", "Feature")]
        public void P_SendInvite_InviteEmail_MixedRecipients()
        {
            Assert.AreEqual("dev", Config.Environment.Name, "This test has to be run against a dev box. It is expected to fail otherwise");
            Assert.IsTrue(TestAreaBase.users.Count >= 3, "We need at least three users for this test");
            Assert.AreEqual("false", ConfigurationManager.AppSettings["UseFakeClient"], "For this test, UseFakeClient should be set to false in app.config file.");

            //tweak NPDB setting
            TweakSMTPHostNameOnNPDB(this.TestClientMachineName);

            isSMPTListening = true;

            //For some reason -- "invalidemail@microcom" is considered a valied email address. Could be a bug in .Net since we are no more using regex.
            string[] invalidRecipients = { "invalidemail.com", "invalid@", "invalid" };
            string[] validRecipients = { TestAreaBase.users[1].MemberName, TestAreaBase.users[2].MemberName, "validemail@microsoft.com" };
            string recipients = "";
            int j = 0;
            while (j < invalidRecipients.Length || j < validRecipients.Length)
            {
                if (j < invalidRecipients.Length)
                    recipients += (invalidRecipients[j] + ";");
                if (j < validRecipients.Length)
                    recipients += (validRecipients[j] + ";");
                j++;
            }

            listener = NotificationTestCommon.StartListening(recipients.Length);

            string gamertag = Users.GetGamertag(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            string[,] localeValue = LocalizationTestData.AVAILABLE_GOOD_LOCALES;
            int randomIndex = randomGenerator.Next(0, localeValue.Length / 2);
            ExpectedLocalizedEmailContent expectedLocalizedEmail = LocalizationTestData.GetExpectedLocalizedContentOnEmail(localeValue[randomIndex, 1], gamertag, "");
            this.NotificationsServiceProxy.Locale = localeValue[randomIndex, 0];

            string sessionId = Guid.NewGuid().ToString();
            TestAreaBase.notificationCommon.SendInviteRequest(sessionId, false, recipients);

            TestAreaBase.notificationCommon.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            TestAreaBase.notificationCommon.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password);

            List<email> inviteEmails = NotificationTestCommon.GetMailsAndStopListening(listener);
            isSMPTListening = false;

            Assert.IsNotNull(inviteEmails, "Error: email should not be null.");
            Assert.AreEqual(validRecipients.Length, inviteEmails.Count, "Error: email was not sent to some valid recipients");

            for (int i = 0; i < inviteEmails.Count; i++)
            {
                NotificationTestCommon.ValidateEmail(inviteEmails[i].Subject, inviteEmails[i].Body, expectedLocalizedEmail, localeValue[randomIndex, 0], gamertag, false, sessionId);
                Assert.AreEqual(validRecipients[i], inviteEmails[i].To, "Email sent to incorrect recipient."); // used validRecipients[i].Substring(0,validRecipients[i].Length-1 to take out the semicolon.
                TraceEx.TraceStart("Verified email for recipient " + i + " which is " + inviteEmails[i].To);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("send invite to 16 users and verify that only 15 emails will be sent. This also verifies the notification count and email localization.")]
        [TestProperty("Type", "Feature")]
        public void P_SendInvite_InviteEmail_To16Recipients()
        {
            Assert.AreEqual("dev", Config.Environment.Name, "This test has to be run against a dev box. It is expected to fail otherwise");
            Assert.IsTrue(TestAreaBase.users.Count >= 3, "We need at least three users for this test");
            Assert.AreEqual("false", ConfigurationManager.AppSettings["UseFakeClient"], "For this test, UseFakeClient should be set to false in app.config file.");
            //tweak NPDB setting
            TweakSMTPHostNameOnNPDB(this.TestClientMachineName);

            isSMPTListening = true;
            listener = NotificationTestCommon.StartListening(16);

            string gamertag = Users.GetGamertag(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            this.NotificationsServiceProxy.Locale = LocalizationTestData.DEFAULT_LOCALE;
            ExpectedLocalizedEmailContent expectedLocalizedEmail = LocalizationTestData.GetExpectedLocalizedContentOnEmail(LocalizationTestData.DEFAULT_LANGUAGE, gamertag, "");

            string sessionId = SendInviteToDuplicateUsers(true, 15, true);

            int maxRecipientIndex = TestAreaBase.users.Count;
            if (maxRecipientIndex > 5)
                maxRecipientIndex = 5;

            for (int j = 1; j < (maxRecipientIndex - 1); j++)
            {
                TestAreaBase.notificationCommon.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, TestAreaBase.users[j].MemberName, TestAreaBase.users[j].Password);
            }
            TestAreaBase.notificationCommon.VerifyNoNotifications(sessionId, TestAreaBase.users[maxRecipientIndex - 1].MemberName, TestAreaBase.users[maxRecipientIndex - 1].Password, Notification.NotificationType.Invitation.ToString());
            List<email> inviteEmails = NotificationTestCommon.GetMailsAndStopListening(listener, 16);
            isSMPTListening = false;

            Assert.IsNotNull(inviteEmails, "Error: email should not be null.");
            Assert.AreEqual(15, inviteEmails.Count, "Error: Wrong number of emails.");

            foreach (email e in inviteEmails)
            {
                NotificationTestCommon.ValidateEmail(e.Subject, e.Body, expectedLocalizedEmail, LocalizationTestData.DEFAULT_LOCALE, gamertag, sessionId);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Send invitation  and Verify Notification was created and email sent was localized and Display name is not shown on the email.")]
        [TestProperty("Type", "Feature")]
        public void P_SendInvite_XBLPrivacy_ShowProfileInfo_Deny()
        {
            Assert.AreEqual("dev", Config.Environment.Name, "This test has to be run against a dev box.");
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 8, "We need at least eight users for this test");
            Assert.AreEqual("false", ConfigurationManager.AppSettings["UseFakeClient"], "For this test, UseFakeClient should be set to false in app.config file.");

            //tweak NPDB setting
            TweakSMTPHostNameOnNPDB(this.TestClientMachineName);

            isSMPTListening = true;
            listener = NotificationTestCommon.StartListening();

            string gamertag = Users.GetGamertag(Config.Environment.UserSettings[7].Membername, Config.Environment.UserSettings[7].Password);
            this.NotificationsServiceProxy.Locale = LocalizationTestData.DEFAULT_LOCALE;
            ExpectedLocalizedEmailContent expectedLocalizedEmail = LocalizationTestData.GetExpectedLocalizedContentOnEmail(LocalizationTestData.DEFAULT_LANGUAGE, gamertag, "");
            string sessionId = TestAreaBase.notificationCommon.SendInviteRequest(Constants.TESTGAMEID, TestAreaBase.users[1].MemberName + ";", Config.Environment.UserSettings[7].Membername, Config.Environment.UserSettings[7].Password);

            TestAreaBase.notificationCommon.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            Notification inviteNotification = GetNotification(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation.ToString(), TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            TestAreaBase.ValidateNotificationContent(inviteNotification, "Game Invite", Users.GetGamertag(Config.Environment.UserSettings[7].Membername, Config.Environment.UserSettings[7].Password), null, "SendInvite test data");

            email inviteEmail = NotificationTestCommon.GetMailAndStopListening(listener);
            isSMPTListening = false;
            NotificationTestCommon.ValidateEmail(inviteEmail.Subject, inviteEmail.Body, expectedLocalizedEmail, LocalizationTestData.DEFAULT_LOCALE, gamertag, false, sessionId);
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Send invitation  and Verify Notification was created and email sent was localized and Display name is not shown on the email.")]
        [TestProperty("Type", "Feature")]
        public void P_SendInvite_XBLPrivacy_ShowProfileInfo_FriendsOnly()
        {
            Assert.AreEqual("dev", Config.Environment.Name, "This test has to be run against a dev box.");
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 7, "We need at least seven users for this test");
            Assert.AreEqual("false", ConfigurationManager.AppSettings["UseFakeClient"], "For this test, UseFakeClient should be set to false in app.config file.");
            //tweak NPDB setting
            TweakSMTPHostNameOnNPDB(this.TestClientMachineName);

            isSMPTListening = true;
            listener = NotificationTestCommon.StartListening();

            string gamertag = Users.GetGamertag(Config.Environment.UserSettings[6].Membername, Config.Environment.UserSettings[6].Password);
            this.NotificationsServiceProxy.Locale = LocalizationTestData.DEFAULT_LOCALE;
            ExpectedLocalizedEmailContent expectedLocalizedEmail = LocalizationTestData.GetExpectedLocalizedContentOnEmail(LocalizationTestData.DEFAULT_LANGUAGE, gamertag, "");

            string sessionId = TestAreaBase.notificationCommon.SendInviteRequest(Constants.TESTGAMEID, TestAreaBase.users[1].MemberName + ";", Config.Environment.UserSettings[6].Membername, Config.Environment.UserSettings[6].Password);
            TestAreaBase.notificationCommon.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            Notification inviteNotification = GetNotification(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation.ToString(), TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            TestAreaBase.ValidateNotificationContent(inviteNotification, "Game Invite", Users.GetGamertag(Config.Environment.UserSettings[6].Membername, Config.Environment.UserSettings[6].Password), null, "SendInvite test data");

            email inviteEmail = NotificationTestCommon.GetMailAndStopListening(listener);
            isSMPTListening = false;

            NotificationTestCommon.ValidateEmail(inviteEmail.Subject, inviteEmail.Body, expectedLocalizedEmail, LocalizationTestData.DEFAULT_LOCALE, gamertag, sessionId);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Send invitation  and Verify Notification was created and email sent was localized and Display name is in  parenthesis on the invite email.")]
        [TestProperty("Type", "Feature")]
        public void P_SendInvite_XBLPrivacy_ShowProfileInfo_Allow()
        {
            Assert.AreEqual("dev", Config.Environment.Name, "This test has to be run against a dev box.");
            Assert.IsTrue(Config.Environment.UserSettings.Count >= 6, "We need at least six users for this test");
            Assert.AreEqual("false", ConfigurationManager.AppSettings["UseFakeClient"], "For this test, UseFakeClient should be set to false in app.config file.");

            //tweak NPDB setting
            TweakSMTPHostNameOnNPDB(this.TestClientMachineName);

            isSMPTListening = true;
            listener = NotificationTestCommon.StartListening();

            string gamertag = Users.GetGamertag(Config.Environment.UserSettings[5].Membername, Config.Environment.UserSettings[5].Password);
            this.NotificationsServiceProxy.Locale = LocalizationTestData.DEFAULT_LOCALE;
            ExpectedLocalizedEmailContent expectedLocalizedEmail = LocalizationTestData.GetExpectedLocalizedContentOnEmail(LocalizationTestData.DEFAULT_LANGUAGE, gamertag, null);

            string sessionId = TestAreaBase.notificationCommon.SendInviteRequest(Constants.TESTGAMEID, TestAreaBase.users[1].MemberName + ";", Config.Environment.UserSettings[5].Membername, Config.Environment.UserSettings[5].Password);

            TestAreaBase.notificationCommon.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            Notification inviteNotification = GetNotification(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation.ToString(), TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            TestAreaBase.ValidateNotificationContent(inviteNotification, "Game Invite", Users.GetGamertag(Config.Environment.UserSettings[5].Membername, Config.Environment.UserSettings[5].Password), null, "SendInvite test data");

            email inviteEmail = NotificationTestCommon.GetMailAndStopListening(listener);
            isSMPTListening = false;

            NotificationTestCommon.ValidateEmail(inviteEmail.Subject, inviteEmail.Body, expectedLocalizedEmail, LocalizationTestData.DEFAULT_LOCALE, gamertag, sessionId);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("verify that sending an invite with does not change the sender's last update time. But changes the recipients last update time. ")]
        [TestProperty("Type", "Feature")]
        public void P_SendInvite_Etag()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            Thread.Sleep(Constants.NOTIFICATION_RETRIES * Constants.NOTIFICATION_SLEEP_TIME);  // to give time for notification internal so that any requests in the queue would be processed before test starts. 
            string sessionId = Guid.NewGuid().ToString();
            TestAreaBase.notificationCommon.CheckNotificationCount(Constants.TESTGAMEID.ToString(), sessionId, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            TestAreaBase.notificationCommon.CheckNotificationCount(Constants.TESTGAMEID.ToString(), sessionId, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            List<Notification> nList = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                sessionId,
                0,
                Constants.IGNORE_lAST_ID,
                100,
                string.Empty,
                false,
                TestAreaBase.users[0].MemberName,
                TestAreaBase.users[0].Password,
                null);
            Assert.IsNotNull(nList);
            Assert.AreEqual<int>(0, nList.Count, "Unexpected number of Notifications.");
            string etag0 = this.NotificationsServiceProxy.EtagInResponse;

            nList = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                sessionId,
                0,
                Constants.IGNORE_lAST_ID,
                100,
                string.Empty,
                false,
                TestAreaBase.users[1].MemberName,
                TestAreaBase.users[1].Password,
                null);
            Assert.IsNotNull(nList);
            Assert.AreEqual<int>(0, nList.Count, "Unexpected number of Notifications.");
            string etag1 = this.NotificationsServiceProxy.EtagInResponse;

            string recipient = TestAreaBase.users[1].MemberName + ";";
            TestAreaBase.notificationCommon.SendInviteRequest(sessionId, false, recipient);

            Thread.Sleep(Constants.NOTIFICATION_RETRIES * Constants.NOTIFICATION_SLEEP_TIME); //give enough time for the back end to process the invite request.
            nList = this.NotificationsServiceProxy.GetNotifications(
                Constants.TESTGAMEID.ToString(),
                sessionId,
                0,
                Constants.IGNORE_lAST_ID,
                100,
                string.Empty,
                false,
                TestAreaBase.users[1].MemberName,
                TestAreaBase.users[1].Password,
                etag1);
            Assert.IsNotNull(nList);
            Assert.AreEqual<int>(1, nList.Count, "Unexpected number of Notifications.");

            try
            {
                List<Notification> nList2 = this.NotificationsServiceProxy.GetNotifications(
                    Constants.TESTGAMEID.ToString(),
                    sessionId,
                    0,
                    Constants.IGNORE_lAST_ID,
                    100,
                    string.Empty,
                    false,
                    TestAreaBase.users[0].MemberName,
                    TestAreaBase.users[0].Password,
                    etag0);
                Assert.Fail("Expected a 304.");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.NotModified, e.Response.Status);
            }
        }


        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Send invitation for four users and verify Notification was created for all of them.")]
        [TestProperty("Type", "Feature")]
        public void P_SendInvite_ToFourUsers()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 5, "We need at least five users for this test");
            string sessionId = TestAreaBase.notificationCommon.SendInviteRequest(false, 4);
            for (int i = 1; i < 5; i++)
            {
                TestAreaBase.notificationCommon.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, TestAreaBase.users[i].MemberName, TestAreaBase.users[i].Password);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("invite recipient limit is 15. Send invite to 15 users and verify that invite notification is created for all users.")]
        [TestProperty("Type", "Feature")]
        public void P_SendInvite_To15Users()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            string sessionId = SendInviteToDuplicateUsers(false, 15, false);
            int maxRecipientIndex = TestAreaBase.users.Count;
            if (maxRecipientIndex > 5)
                maxRecipientIndex = 5;
            for (int i = 1; i < maxRecipientIndex; i++)
            {
                TestAreaBase.notificationCommon.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, TestAreaBase.users[i].MemberName, TestAreaBase.users[i].Password);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Send invite to 16 users and verify that the invite has been processed to the first 15 but the 16th one is ignored.")]
        [TestProperty("Type", "Feature")]
        public void N_SendInvite_To16Users()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 3, "We need at least three users for this test");
            string sessionId = SendInviteToDuplicateUsers(false, 15, true);

            int maxRecipientIndex = TestAreaBase.users.Count;
            if (maxRecipientIndex > 5)
                maxRecipientIndex = 5;

            for (int i = 1; i < (maxRecipientIndex - 1); i++)
            {
                TestAreaBase.notificationCommon.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, TestAreaBase.users[i].MemberName, TestAreaBase.users[i].Password);
            }
            TestAreaBase.notificationCommon.VerifyNoNotifications(sessionId, TestAreaBase.users[maxRecipientIndex - 1].MemberName, TestAreaBase.users[maxRecipientIndex - 1].Password, Notification.NotificationType.Invitation.ToString());
        }

        [TestMethod, Owner("lewbamp"), Priority(2)]
        [Description("SendInvite with an invalid gameId.")]
        [TestProperty("Type", "Feature")]
        public void P_GMS_SendInvite_BadGameId()
        {
            try
            {
                this.NotificationsServiceProxy.SendInvite(
                    new InviteRequest()
                    {
                        GameId = 0,
                        Recipients = "recipients",
                        Data = "Bad Game ID",
                        SessionId = new Guid().ToString()
                    });
            }
            catch (RestException e)
            {
                NotificationTestCommon.VerifyException(HttpStatusCode.BadRequest, "2148015943 Invalid argument or bad request: gameid or variant is invalid", e.Response);
            }
        }

        [TestMethod, Owner("lewbamp"), Priority(2)]
        [Description("SendInvite with a bad ticket.")]
        [TestProperty("Type", "Feature")]
        public void P_SendInvite_BadTicket()
        {
            Dictionary<string, string> headers = new Dictionary<string, string>();
            headers.Add("Content-Type", "application/xml");
            headers.Add("X-Locale", "en-US");
            headers.Add("X-Authorization", "XBL1.0 x=" + "JUNK");

            try
            {
                this.NotificationsServiceProxy.SendInvite(
                    new InviteRequest()
                    {
                        GameId = Constants.TESTGAMEID,
                        Recipients = "recipients",
                        Data = "BLAH",
                        SessionId = new Guid().ToString()
                    },
                    headers);
                Assert.Fail("Expected Unauthorized.");
            }
            catch (RestException e)
            {

                Assert.AreEqual<HttpStatusCode>(e.Response.Status, HttpStatusCode.Unauthorized);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify FR notification will not be created by send invite even if FR is set to true.")]
        [TestProperty("Type", "Feature")]
        public void N_SendInvite_GetNotifications_NoFR()
        {

            Assert.IsTrue(TestAreaBase.users.Count >= 5, "We need five users for this test");

            testHooksClient.SetupNotFriendsAndNoFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)));
            NotificationTestCommon.VerifyNotFriends(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), "Error: Setup failed not to make friends");
            NotificationTestCommon.VerifyNoFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)), "Error: Setup failed to delete pre existing Friend Requests");
            TestAreaBase.notificationCommon.CheckNotificationCountFR(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            string sessionId = TestAreaBase.notificationCommon.SendInviteRequest(true, 1);

            TestAreaBase.notificationCommon.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            Thread.Sleep(Constants.XBLFRPROCESSTIMEINSEC * 1000); // give time to make sure that no FR gets created on xbl
            Assert.IsFalse(testHooksClient.HasFR(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password))), "Error: Friend request is posted on XBL");
            TestAreaBase.notificationCommon.VerifyNoFRNotification(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify Expiration Time is correct in invite notifications.")]
        [TestProperty("Type", "Feature")]
        public void P_SendInvite_InviteNContent_ExpirationTime()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            string sessionId = TestAreaBase.notificationCommon.SendInviteRequest(false, 1);
            TestAreaBase.notificationCommon.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            Notification inviteNtfn = GetNotification(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation.ToString(), TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            Assert.AreEqual(@"12/31/9999 11:59:59 PM", inviteNtfn.ExpirationTime.ToString(), "Error: Incorrect Expiration Time in invite notification");
            //TODO: Update this after bug(3930) is fixed
            //Assert.IsTrue(((DateTime.UtcNow >= (inviteNtfn.ExpirationTime.AddMonths(-3))) &&  (DateTime.UtcNow.AddMinutes(-2) <= (inviteNtfn.ExpirationTime.AddMonths(-3)))), "Error: Incorrect Expiration Time in invite notification");
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify Sent Time is correct in invite notifications.")]
        [TestProperty("Type", "Feature")]
        public void P_SendInvite_InviteNContent_SentTime()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            DateTime now = DateTime.UtcNow;
            string sessionId = TestAreaBase.notificationCommon.SendInviteRequest(false, 1);
            TestAreaBase.notificationCommon.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            Notification inviteNtfn = GetNotification(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation.ToString(), TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            Assert.IsTrue(((now.AddSeconds(-1).CompareTo(inviteNtfn.SentTime) < 0) && (now.AddMinutes(2).CompareTo(inviteNtfn.SentTime) > 0)), "Error: Incorrect Sent Time " + inviteNtfn.SentTime.ToString() + " in invite notification as compared to time invite is sent  = " + now.ToString());
        }

        //related bug - 4156 -- on the url
        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify contents of invite notification are correct.")]
        [TestProperty("Type", "Feature")]
        public void P_SendInvite_InviteNContent()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            string sessionId = TestAreaBase.notificationCommon.SendInviteRequest(false, 1);
            TestAreaBase.notificationCommon.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            Notification inviteNtfn = GetNotification(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation.ToString(), TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            Assert.AreEqual<Notification.NotificationCategory>(Notification.NotificationCategory.ToDo, inviteNtfn.Category, "Error: Incorrect Notification category in invite notification.");
            Assert.AreEqual<Notification.NotificationStatus>(Notification.NotificationStatus.UnRead, inviteNtfn.Status, "Error: Incorrect Notification status in invite notification.");
            Assert.AreEqual<Notification.NotificationType>(Notification.NotificationType.Invitation, inviteNtfn.Type, "Error: Incorrect Notification type in invite notification.");
            Assert.AreEqual("Game Invite", inviteNtfn.TypeDisplayName, "Error: Incorrect type display name in invite notification.");
            Assert.AreEqual("SendInvite test data", inviteNtfn.DataBlob, "Error: Incorrect data blob content in invite notification.");
            Assert.AreEqual(true, inviteNtfn.IsUserVisible, "Error: invite notification should be user visible.");
            Assert.AreEqual(3, inviteNtfn.SupportedPlatform, "Error: Supported platform should is incorrect in Invite Notification.");
            Assert.AreEqual("", inviteNtfn.UserId, "Error:UserId should be empty in Invite Notification");
            Assert.AreEqual((uint)Constants.TESTGAMEVARIANT, inviteNtfn.Variant, "Error: Variant is incorrect in Invite Notification.");
            Assert.IsTrue(inviteNtfn.Images.Contains("32x32."), "Error: Invite Notification does not contain the correct image url");
            Assert.IsTrue(inviteNtfn.Images.Contains("64x64."), "Error: Invite Notification does not contain the correct image url");
            Assert.IsTrue(inviteNtfn.Images.Contains("99x99."), "Error: Invite Notification does not contain the correct image url");
            Assert.IsTrue(inviteNtfn.Images.Contains("173x173."), "Error: Invite Notification does not contain the correct image url");
            string envName = Config.Environment.Name;
            if (string.Compare(envName, "TestNet", true) == 0)
                envName = "test";
            string url = String.Format(@"http://redirect.{0}.xboxlive.com/g/{1}/{2}/", envName, Constants.TESTGAMEID, Constants.TESTGAMEVARIANT);
            Assert.AreEqual(url, inviteNtfn.Url, true, "Error: Incorrect url in invite notification");

            //game Info
            Assert.AreEqual(Constants.TESTGAMEID, inviteNtfn.GameId, "Error: Incorrect game display name in invite notification");
            Assert.AreEqual(Constants.TESTGAMEVARIANTNAME, inviteNtfn.GameDisplayName, "Error: Incorrect game display name in invite notification");
            Assert.AreEqual(sessionId, inviteNtfn.SessionId, "Error: Incorrect session ID in invite notification");

            //sender Info
            UserInfo uinfo = new UserInfo();
            string from = HttpUtility.HtmlDecode(inviteNtfn.From);
            DataContractSerializer dcjs = new DataContractSerializer(typeof(UserInfo));
            UserInfo userInfo = (UserInfo)dcjs.ReadObject(XmlReader.Create(new StringReader(from)));
            Assert.AreEqual(Users.GetGamertag(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password), userInfo.GamerTag, "Error: GamerTag is incorrect in Invite Notification.");
            Assert.IsTrue(string.IsNullOrEmpty(userInfo.DisplayName), "Error: Display name is incorrect in Invite Notification."); // since the our user creation does not specify display name. There are other test cases to verify display name when the user has one. 

        }

        //Related bug 11359
        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify contents of invite notification are correct for a send ivite with game variant.")]
        [TestProperty("Type", "Feature")]
        public void P_SendInvite_Variant_InviteNContent()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");

            string sessionId = Guid.NewGuid().ToString();
            TestAreaBase.notificationCommon.SendInviteRequest(sessionId + ":" + Constants.TESTGAMEVARIANT2, Constants.TESTGAMEID, false, TestAreaBase.users[1].MemberName + ";", 0);

            TestAreaBase.notificationCommon.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            Notification inviteNtfn = GetNotification(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation.ToString(), TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            Assert.AreEqual<Notification.NotificationCategory>(Notification.NotificationCategory.ToDo, inviteNtfn.Category, "Error: Incorrect Notification category in invite notification.");
            Assert.AreEqual<Notification.NotificationStatus>(Notification.NotificationStatus.UnRead, inviteNtfn.Status, "Error: Incorrect Notification status in invite notification.");
            Assert.AreEqual<Notification.NotificationType>(Notification.NotificationType.Invitation, inviteNtfn.Type, "Error: Incorrect Notification type in invite notification.");
            Assert.AreEqual("Game Invite", inviteNtfn.TypeDisplayName, "Error: Incorrect type display name in invite notification.");
            Assert.AreEqual("SendInvite test data", inviteNtfn.DataBlob, "Error: Incorrect data blob content in invite notification.");
            Assert.AreEqual(true, inviteNtfn.IsUserVisible, "Error: invite notification should be user visible.");
            Assert.AreEqual(3, inviteNtfn.SupportedPlatform, "Error: Supported platform should is incorrect in Invite Notification.");
            Assert.AreEqual("", inviteNtfn.UserId, "Error:UserId should be empty in Invite Notification");
            Assert.AreEqual((uint)Constants.TESTGAMEVARIANT2, inviteNtfn.Variant, "Error: Variant is incorrect in Invite Notification.");
            Assert.IsTrue(inviteNtfn.Images.Contains("32x32."), "Error: Invite Notification does not contain the correct image url");
            Assert.IsTrue(inviteNtfn.Images.Contains("64x64."), "Error: Invite Notification does not contain the correct image url");
            Assert.IsTrue(inviteNtfn.Images.Contains("99x99."), "Error: Invite Notification does not contain the correct image url");
            Assert.IsTrue(inviteNtfn.Images.Contains("173x173."), "Error: Invite Notification does not contain the correct image url");
            string envName = Config.Environment.Name;
            if (string.Compare(envName, "TestNet", true) == 0)
                envName = "test";
            string url = String.Format(@"http://redirect.{0}.xboxlive.com/g/{1}/{2}/", envName, Constants.TESTGAMEID, Constants.TESTGAMEVARIANT2);
            Assert.AreEqual(url, inviteNtfn.Url, true, "Error: Incorrect url in invite notification");

            //game Info
            Assert.AreEqual(Constants.TESTGAMEID, inviteNtfn.GameId, "Error: Incorrect game display name in invite notification");
            Assert.AreEqual(Constants.TESTGAMEVARIANTNAME2, inviteNtfn.GameDisplayName, "Error: Incorrect game display name in invite notification");
            Assert.AreEqual(sessionId, inviteNtfn.SessionId, "Error: Incorrect session ID in invite notification");

            //sender Info
            UserInfo uinfo = new UserInfo();
            string from = HttpUtility.HtmlDecode(inviteNtfn.From);
            DataContractSerializer dcjs = new DataContractSerializer(typeof(UserInfo));
            UserInfo userInfo = (UserInfo)dcjs.ReadObject(XmlReader.Create(new StringReader(from)));
            Assert.AreEqual(Users.GetGamertag(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password), userInfo.GamerTag, "Error: GamerTag is incorrect in Invite Notification.");
            Assert.IsTrue(string.IsNullOrEmpty(userInfo.DisplayName), "Error: Display name is incorrect in Invite Notification."); // since the our user creation does not specify display name. There are other test cases to verify display name when the user has one. 
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify contents of invite notification are correct for a send ivite with game variant specified as 0.")]
        [TestProperty("Type", "Feature")]
        public void P_SendInvite_Variant_0_InviteNContent()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            string sessionId = Guid.NewGuid().ToString();
            TestAreaBase.notificationCommon.SendInviteRequest(sessionId + ":" + Constants.TESTGAMEVARIANT, Constants.TESTGAMEID, false, TestAreaBase.users[1].MemberName, 0);

            TestAreaBase.notificationCommon.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            Notification inviteNtfn = GetNotification(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation.ToString(), TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            Assert.AreEqual<Notification.NotificationCategory>(Notification.NotificationCategory.ToDo, inviteNtfn.Category, "Error: Incorrect Notification category in invite notification.");
            Assert.AreEqual<Notification.NotificationStatus>(Notification.NotificationStatus.UnRead, inviteNtfn.Status, "Error: Incorrect Notification status in invite notification.");
            Assert.AreEqual<Notification.NotificationType>(Notification.NotificationType.Invitation, inviteNtfn.Type, "Error: Incorrect Notification type in invite notification.");
            Assert.AreEqual("Game Invite", inviteNtfn.TypeDisplayName, "Error: Incorrect type display name in invite notification.");
            Assert.AreEqual("SendInvite test data", inviteNtfn.DataBlob, "Error: Incorrect data blob content in invite notification.");
            Assert.AreEqual(true, inviteNtfn.IsUserVisible, "Error: invite notification should be user visible.");
            Assert.AreEqual(3, inviteNtfn.SupportedPlatform, "Error: Supported platform should is incorrect in Invite Notification.");
            Assert.AreEqual("", inviteNtfn.UserId, "Error:UserId should be empty in Invite Notification");
            Assert.AreEqual((uint)Constants.TESTGAMEVARIANT, inviteNtfn.Variant, "Error: Variant is incorrect in Invite Notification.");
            Assert.IsTrue(inviteNtfn.Images.Contains("32x32."), "Error: Invite Notification does not contain the correct image url");
            Assert.IsTrue(inviteNtfn.Images.Contains("64x64."), "Error: Invite Notification does not contain the correct image url");
            Assert.IsTrue(inviteNtfn.Images.Contains("99x99."), "Error: Invite Notification does not contain the correct image url");
            Assert.IsTrue(inviteNtfn.Images.Contains("173x173."), "Error: Invite Notification does not contain the correct image url");
            string envName = Config.Environment.Name;
            if (string.Compare(envName, "TestNet", true) == 0)
                envName = "test";
            string url = String.Format(@"http://redirect.{0}.xboxlive.com/g/{1}/{2}/", envName, Constants.TESTGAMEID, Constants.TESTGAMEVARIANT);
            Assert.AreEqual(url, inviteNtfn.Url, true, "Error: Incorrect url in invite notification");

            //game Info
            Assert.AreEqual(Constants.TESTGAMEID, inviteNtfn.GameId, "Error: Incorrect game display name in invite notification");
            Assert.AreEqual(Constants.TESTGAMEVARIANTNAME, inviteNtfn.GameDisplayName, "Error: Incorrect game display name in invite notification");
            Assert.AreEqual(sessionId, inviteNtfn.SessionId, "Error: Incorrect session ID in invite notification");

            //sender Info
            UserInfo uinfo = new UserInfo();
            string from = HttpUtility.HtmlDecode(inviteNtfn.From);
            DataContractSerializer dcjs = new DataContractSerializer(typeof(UserInfo));
            UserInfo userInfo = (UserInfo)dcjs.ReadObject(XmlReader.Create(new StringReader(from)));
            Assert.AreEqual(Users.GetGamertag(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password), userInfo.GamerTag, "Error: GamerTag is incorrect in Invite Notification.");
            Assert.IsTrue(string.IsNullOrEmpty(userInfo.DisplayName), "Error: Display name is incorrect in Invite Notification."); // since the our user creation does not specify display name. There are other test cases to verify display name when the user has one. 

        }

        //bug - 9921
        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("invalid variant is same as variant not specified")]
        [TestProperty("Type", "Feature")]
        public void N_SendInvite_Variant_InvalidVariant()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            string sessionId = Guid.NewGuid().ToString();
            try
            {
                TestAreaBase.notificationCommon.SendInviteRequest(sessionId + ":InvalidVariant", Constants.TESTGAMEID, false, TestAreaBase.users[1].MemberName + ";", 0);
                Assert.Fail("Expected a bad request.");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, e.Response.Status);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("invalid variant is same as variant not specified")]
        [TestProperty("Type", "Feature")]
        public void N_SendInvite_Variant_InvalidVariant_Int()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            string sessionId = Guid.NewGuid().ToString();
            try
            {
                TestAreaBase.notificationCommon.SendInviteRequest(sessionId + ":999", Constants.TESTGAMEID, false, TestAreaBase.users[1].MemberName + ";", 0);
                Assert.Fail("Expected a bad request.");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, e.Response.Status);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify that send invite validates session ID length.")]
        [TestProperty("Type", "Feature")]
        public void N_SendInvite_InvalidSessionID()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            string sessionId = new string('a', 65);
            try
            {
                TestAreaBase.notificationCommon.SendInviteRequest(sessionId, Constants.TESTGAMEID, false, TestAreaBase.users[1].MemberName + ";", 0);
                Assert.Fail("Expected a bad request.");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, e.Response.Status);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify that send invite validates session ID length.")]
        [TestProperty("Type", "Feature")]
        public void N_SendInvite_WithVariant_InvalidSessionID()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "We need at least two users for this test");
            string sessionId = new string('a', 65);
            try
            {
                TestAreaBase.notificationCommon.SendInviteRequest(sessionId + ":" + Constants.TESTGAMEVARIANT2, Constants.TESTGAMEID, false, TestAreaBase.users[1].MemberName + ";", 0);
                Assert.Fail("Expected a bad request.");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.BadRequest, e.Response.Status);
            }
        }


        private string SendInviteToDuplicateUsers(bool friendRequest, int numRec, bool reserveLastUser)
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 5, "Five or more users are required for this test.");
            string sessionId = Guid.NewGuid().ToString();
            string gameId = Constants.TESTGAMEID.ToString();
            string oldNotificationSession = sessionId;
            if (friendRequest)
            {
                oldNotificationSession = string.Empty; // if we are sending invitation with friend request = true, we need to check that we do not have prior FR notifications too. - Avoid filtering notifications by sessionID and gameID
                gameId = string.Empty;
            }
            StringBuilder recipients = new StringBuilder();
            int userCount = TestAreaBase.users.Count;
            if (TestAreaBase.users.Count > 5)// in case of dev environment where we have special users that have friend only and block privacy settings.
                userCount = 5;
            if (reserveLastUser)
                userCount = userCount - 1;
            int j = 0;
            for (int i = 1; i < userCount; i++)
            {
                TestAreaBase.notificationCommon.CheckNotificationCount(gameId, oldNotificationSession, TestAreaBase.users[i].MemberName, TestAreaBase.users[i].Password);
                recipients.Append(TestAreaBase.users[i].MemberName + ";");
                j++;
            }
            int k = 1;
            while (j < numRec)
            {
                recipients.Append(TestAreaBase.users[k].MemberName + ";");
                j++;
                k++;
                if (k == userCount)
                    k = 1;
            }
            if (reserveLastUser)
                recipients.Append(TestAreaBase.users[userCount].MemberName + ";");
            return TestAreaBase.notificationCommon.SendInviteRequest(sessionId, friendRequest, recipients.ToString());
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify that recipient who blocked sender will not get invite notification from sender while others do.")]
        [TestProperty("Type", "Features")]
        public void N_SendInvite_SomeRecipientsBlockedSender()
        {
            //user3 blocks user4 and user4 will try to send invite to user3, user1 and user2 and only user1 and user2 get the invite.
            Assert.IsTrue(TestAreaBase.users.Count >= 5, "We need at least five users for this test");
            isUserBlockerTestRun = true;
            try
            {
                testHooksClient.AddUserToNeverList(ulong.Parse(Users.GetXuid(TestAreaBase.users[3].MemberName, TestAreaBase.users[3].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[4].MemberName, TestAreaBase.users[4].Password)));
            }
            catch (Exception)
            {
                Thread.Sleep(10000); // try again after 10 secs.
                testHooksClient.AddUserToNeverList(ulong.Parse(Users.GetXuid(TestAreaBase.users[3].MemberName, TestAreaBase.users[3].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[4].MemberName, TestAreaBase.users[4].Password)));
            }

            NotificationTestCommon.VerifyUserIsInTargetsNeverList(ulong.Parse(Users.GetXuid(TestAreaBase.users[4].MemberName, TestAreaBase.users[4].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[3].MemberName, TestAreaBase.users[3].Password)), "Setup failed: User is not in the never list");
            if (testHooksClient.IsUserInTargetsNeverList(ulong.Parse(Users.GetXuid(TestAreaBase.users[4].MemberName, TestAreaBase.users[4].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password))))
            {
                testHooksClient.RemoveUserFromNeverList(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[4].MemberName, TestAreaBase.users[4].Password)));
                NotificationTestCommon.VerifyUserIsNotInTargetsNeverList(ulong.Parse(Users.GetXuid(TestAreaBase.users[4].MemberName, TestAreaBase.users[4].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), "Setup failed: User is not in the never list");
            }
            if (testHooksClient.IsUserInTargetsNeverList(ulong.Parse(Users.GetXuid(TestAreaBase.users[4].MemberName, TestAreaBase.users[4].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password))))
            {
                testHooksClient.RemoveUserFromNeverList(ulong.Parse(Users.GetXuid(TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[4].MemberName, TestAreaBase.users[4].Password)));
                NotificationTestCommon.VerifyUserIsNotInTargetsNeverList(ulong.Parse(Users.GetXuid(TestAreaBase.users[4].MemberName, TestAreaBase.users[4].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password)), "Setup failed: User is not in the never list");
            }
            string sessionId = Guid.NewGuid().ToString();

            //verify that there are no pre-existing notifications
            TestAreaBase.notificationCommon.CheckNotificationCount(Constants.TESTGAMEID.ToString(), sessionId, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            TestAreaBase.notificationCommon.CheckNotificationCount(Constants.TESTGAMEID.ToString(), sessionId, TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password);
            TestAreaBase.notificationCommon.CheckNotificationCount(Constants.TESTGAMEID.ToString(), sessionId, TestAreaBase.users[3].MemberName, TestAreaBase.users[3].Password);

            TestAreaBase.notificationCommon.SendInviteRequest(sessionId, true, TestAreaBase.users[1].MemberName + ";" + TestAreaBase.users[3].MemberName + ";" + TestAreaBase.users[2].MemberName + ";", 4);

            TestAreaBase.notificationCommon.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            TestAreaBase.notificationCommon.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password);
            Thread.Sleep(20000); // Notification internal should already have enough time by now since it has processed notification for user2 but, it is good to sleep for a few more seconds to be sure.
            TestAreaBase.notificationCommon.VerifyNoNotifications(sessionId, TestAreaBase.users[3].MemberName, TestAreaBase.users[3].Password, Notification.NotificationType.Invitation.ToString());
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Verify that recipient who blocked sender will not get invite email from sender while others do.")]
        [TestProperty("Type", "Features")]
        public void N_SendInvite_InviteEmail_SomeRecipientsBlockedSender()
        {
            //user3 blocks user4 and user4 will try to send invite to user3 and user2 and only user2 gets the invite.
            Assert.AreEqual("dev", Config.Environment.Name, "This test has to be run against a dev box. It is expected to fail otherwise");
            Assert.IsTrue(TestAreaBase.users.Count >= 5, "We need at least five users for this test");
            Assert.AreEqual("false", ConfigurationManager.AppSettings["UseFakeClient"], "For this test, UseFakeClient should be set to false in app.config file.");

            //tweak NPDB setting
            TweakSMTPHostNameOnNPDB(this.TestClientMachineName);

            isSMPTListening = true;

            isUserBlockerTestRun = true;
            testHooksClient.AddUserToNeverList(ulong.Parse(Users.GetXuid(TestAreaBase.users[3].MemberName, TestAreaBase.users[3].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[4].MemberName, TestAreaBase.users[4].Password)));
            NotificationTestCommon.VerifyUserIsInTargetsNeverList(ulong.Parse(Users.GetXuid(TestAreaBase.users[4].MemberName, TestAreaBase.users[4].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[3].MemberName, TestAreaBase.users[3].Password)), "Setup failed: User is not in the never list");
            if (testHooksClient.IsUserInTargetsNeverList(ulong.Parse(Users.GetXuid(TestAreaBase.users[4].MemberName, TestAreaBase.users[4].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password))))
            {
                testHooksClient.RemoveUserFromNeverList(ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[4].MemberName, TestAreaBase.users[4].Password)));
                NotificationTestCommon.VerifyUserIsNotInTargetsNeverList(ulong.Parse(Users.GetXuid(TestAreaBase.users[4].MemberName, TestAreaBase.users[4].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)), "Setup failed: User is not in the never list");
            }
            if (testHooksClient.IsUserInTargetsNeverList(ulong.Parse(Users.GetXuid(TestAreaBase.users[4].MemberName, TestAreaBase.users[4].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password))))
            {
                testHooksClient.RemoveUserFromNeverList(ulong.Parse(Users.GetXuid(TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[4].MemberName, TestAreaBase.users[4].Password)));
                NotificationTestCommon.VerifyUserIsNotInTargetsNeverList(ulong.Parse(Users.GetXuid(TestAreaBase.users[4].MemberName, TestAreaBase.users[4].Password)), ulong.Parse(Users.GetXuid(TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password)), "Setup failed: User is not in the never list");
            }

            string sessionId = Guid.NewGuid().ToString();

            //verify that there are no pre-existing notifications
            TestAreaBase.notificationCommon.CheckNotificationCount(Constants.TESTGAMEID.ToString(), sessionId, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            TestAreaBase.notificationCommon.CheckNotificationCount(Constants.TESTGAMEID.ToString(), sessionId, TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password);
            TestAreaBase.notificationCommon.CheckNotificationCount(Constants.TESTGAMEID.ToString(), sessionId, TestAreaBase.users[3].MemberName, TestAreaBase.users[3].Password);

            listener = NotificationTestCommon.StartListening(3);

            string gamertag = Users.GetGamertag(TestAreaBase.users[4].MemberName, TestAreaBase.users[4].Password);
            this.NotificationsServiceProxy.Locale = LocalizationTestData.DEFAULT_LOCALE;
            ExpectedLocalizedEmailContent expectedLocalizedEmail = LocalizationTestData.GetExpectedLocalizedContentOnEmail(LocalizationTestData.DEFAULT_LANGUAGE, gamertag, "");


            TestAreaBase.notificationCommon.SendInviteRequest(sessionId, true, TestAreaBase.users[1].MemberName + ";" + TestAreaBase.users[3].MemberName + ";" + TestAreaBase.users[2].MemberName + ";", 4);

            TestAreaBase.notificationCommon.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            TestAreaBase.notificationCommon.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password);
            Thread.Sleep(20000); // Notification internal should already have enough time by now since it has processed notification for user2 but, it is good to sleep for a few more seconds to be sure.
            TestAreaBase.notificationCommon.VerifyNoNotifications(sessionId, TestAreaBase.users[3].MemberName, TestAreaBase.users[3].Password, Notification.NotificationType.Invitation.ToString());

            List<email> inviteEmails = NotificationTestCommon.GetMailsAndStopListening(listener);
            isSMPTListening = false;

            Assert.IsNotNull(inviteEmails);
            Assert.AreEqual(2, inviteEmails.Count, "Expected one email.");
            Assert.AreEqual(TestAreaBase.users[2].MemberName, inviteEmails[1].To, "Email sent to incorrect recipient.");
            Assert.AreEqual(TestAreaBase.users[1].MemberName, inviteEmails[0].To, "Email sent to incorrect recipient.");
            NotificationTestCommon.ValidateEmail(inviteEmails[0].Subject, inviteEmails[0].Body, expectedLocalizedEmail, LocalizationTestData.DEFAULT_LOCALE, gamertag, sessionId);
            NotificationTestCommon.ValidateEmail(inviteEmails[1].Subject, inviteEmails[1].Body, expectedLocalizedEmail, LocalizationTestData.DEFAULT_LOCALE, gamertag, sessionId);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Send invitation by email address and verify Invite Notification is sent from and to new user.")]
        [TestProperty("Type", "Feature")]
        public void P_SendInvite_FromAndToBrandNewUser_ByEmailAddress()
        {
            List<XboxLiveAccount> newUsers = Users.CreateUsers(2);
            Thread.Sleep(Constants.NEW_USER_WAIT_TIME); // give time after account is created so that Notification service will not fail to get puid
            string recipient = newUsers[1].MemberName + ";";
            string sessionId = TestAreaBase.notificationCommon.SendInviteRequest(Constants.TESTGAMEID, recipient, newUsers[0].MemberName, newUsers[0].Password);
            TestAreaBase.notificationCommon.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, newUsers[1].MemberName, newUsers[1].Password);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Send invitation by gamertag and verify Invite Notification is sent from and to new user.")]
        [TestProperty("Type", "Feature")]
        public void P_SendInvite_FromAndToBrandNewUser_ByGamerTag()
        {
            List<XboxLiveAccount> newUsers = Users.CreateUsers(2);
            Thread.Sleep(Constants.NEW_USER_WAIT_TIME); // give time after account is created so that Notification service will not fail to get puid
            string recipient = "gamertag:" + Users.GetGamertag(newUsers[1].MemberName, newUsers[1].Password) + ";";
            string sessionId = TestAreaBase.notificationCommon.SendInviteRequest(Constants.TESTGAMEID, recipient, newUsers[0].MemberName, newUsers[0].Password);
            TestAreaBase.notificationCommon.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, newUsers[1].MemberName, newUsers[1].Password);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Send invitation from an existing user to a brand new user and verify Invite Notification is sent.")]
        [TestProperty("Type", "Feature")]
        public void P_SendInvite_ToBrandNewUser()
        {
            List<XboxLiveAccount> newUsers = Users.CreateUsers(2);
            Thread.Sleep(Constants.NEW_USER_WAIT_TIME); // give time after account is created so that Notification service will not fail to get puid
            string recipient = newUsers[0].MemberName + ";gamertag:" + Users.GetGamertag(newUsers[1].MemberName, newUsers[1].Password) + ";";
            string sessionId = TestAreaBase.notificationCommon.SendInviteRequest(Constants.TESTGAMEID, recipient, Config.Environment.UserSettings[0].Membername, Config.Environment.UserSettings[0].Password);
            TestAreaBase.notificationCommon.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, newUsers[0].MemberName, newUsers[0].Password);
            TestAreaBase.notificationCommon.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, newUsers[1].MemberName, newUsers[1].Password);
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Send invitation from brand new user to an existing user and verify Invite Notification is sent.")]
        [TestProperty("Type", "Feature")]
        public void P_SendInvite_FromBrandNewUser()
        {
            //make sure you are using canned users for this test if you are running the test alone so that the existing users are real existing users that have been used before. 
            Assert.IsTrue(TestAreaBase.users.Count >= 3, "We need at least two users for this test");
            List<XboxLiveAccount> newUsers = Users.CreateUsers(1);
            Thread.Sleep(Constants.NEW_USER_WAIT_TIME); // give time after account is created so that Notification service will not fail to get puid
            string recipient = TestAreaBase.users[2].MemberName + ";gamertag:" + Users.GetGamertag(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password) + ";";
            string sessionId = TestAreaBase.notificationCommon.SendInviteRequest(Constants.TESTGAMEID, recipient, newUsers[0].MemberName, newUsers[0].Password);
            TestAreaBase.notificationCommon.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password);
            TestAreaBase.notificationCommon.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
        }

        //bug 10553
        //[TestMethod, Owner("a-sediro"), Priority(3)]
        [Description("Verify invite limit for a brand new user is 10 per hour")]
        [TestProperty("Type", "Feature")]
        public void P_SendInvite_InviteLimit_BrandNewUser()
        {
            List<XboxLiveAccount> newUsers = Users.CreateUsers(2);
            string recipient = newUsers[1].MemberName + ";";
            for (int i = 0; i < 10; i++)
            {
                string sessionId = TestAreaBase.notificationCommon.SendInviteRequest(Constants.TESTGAMEID, recipient, newUsers[0].MemberName, newUsers[0].Password);
                //TestAreaBase.notificationCommon.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, newUsers[1].MemberName, newUsers[1].Password);
            }
            try
            {
                string sessionId = TestAreaBase.notificationCommon.SendInviteRequest(Constants.TESTGAMEID, recipient, newUsers[0].MemberName, newUsers[0].Password);
                Assert.Fail("Expecting Not Acceptable.");
            }
            catch (RestException e)
            {
                Assert.AreEqual<HttpStatusCode>(HttpStatusCode.NotAcceptable, e.Response.Status);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(1)]
        [Description("Send invitation and verify Invite Notification is created From and to new user.")]
        [TestProperty("Type", "Feature")]
        public void P_SendInvite_ToBrandNewUser_ByEmailAddress()
        {
            List<XboxLiveAccount> newUsers = Users.CreateUsers(2);
            Thread.Sleep(Constants.NEW_USER_WAIT_TIME); // give time after account is created so that Notification service will not fail to get puid 
            string recipient = newUsers[1].MemberName + ";";
            string sessionId = TestAreaBase.notificationCommon.SendInviteRequest(Constants.TESTGAMEID, recipient, newUsers[0].MemberName, newUsers[0].Password);
            TestAreaBase.notificationCommon.VerifyNotificationCreated(Constants.TESTGAMEID.ToString(), sessionId, Notification.NotificationType.Invitation, newUsers[1].MemberName, newUsers[1].Password);
        }

        private static void TweakSMTPHostNameOnNPDB(string newValue)
        {
            if (!npdbSmtpSettingTweaked)
            {
                using (SqlConnection newConnect = new SqlConnection(ConfigurationManager.ConnectionStrings["lest_AsyncNotification_db"].ConnectionString + ";Asynchronous Processing=true"))
                {
                    newConnect.Open();

                    using (SqlCommand myCommand = new SqlCommand("UPDATE [LIVEN_NPDB].[dbo].[t_setting_overrides]" +
                                                                  "SET [vc_value] = '" + newValue +
                                                                  "' where [vc_setting] = 'lest_NotificationSMTPProvider_HostName'", newConnect))
                    {
                        IAsyncResult asyncResult2 = myCommand.BeginExecuteReader();

                        myCommand.EndExecuteReader(asyncResult2);
                    }
                    newConnect.Close();
                }

                npdbSmtpSettingTweaked = true;
                Thread.Sleep(60000); //give time for the new setting take effect.
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Test.API\Sessions\SessionAzureStorageProxy.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using AsyncMultiplayer.SessionAzureStorage;
using AsyncMultiplayer.Common.AzureStorage;
using Multiplayer.Test;
using Multiplayer.Test.API;

namespace Multiplayer.Test.API
{
    class SessionAzureStorageProxy
    {
        public SessionAzureStorageProxy()
        {
        }

        public static void AzureStorageInitialize()
        {
            StorageAccountInfo accountInfo = StorageAccountInfo.GetDefaultTableStorageAccountFromConfiguration();

            SessionAzureStorage sessionAzureStorage = new SessionAzureStorage(accountInfo);
            sessionAzureStorage.InitializeStorage();
        }

        




    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Test.API\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("Multiplayer.Test.API")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM componenets.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("dda8577c-19b9-4a9b-aa88-5b0e0fc8b4dd")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Test.API\Sessions\CreateSession.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Diagnostics;
using System.Threading;
using System.Runtime.Serialization;
using System.Data.SqlClient;
using System.Configuration;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using LiveN.Test.Framework.Configuration;
using Multiplayer.Test.API;
using AsyncMultiplayer.SessionCommon;
using LIVEN.Common.Diagnostics;
using LiveN.Test.Common.Web;
using Multiplayer.Test.UserAccounts;
using LiveN.Test.Framework;
using LiveN.Test.Common;

namespace MultiPlayer.Test.API
{
    /// <summary>
    /// Test Cases for Sessions.svc CreateSession API
    /// </summary>
    [TestClass]
    public class CreateSession : TestAreaBase
    {
        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
        }

        [TestInitialize()]
        public void MyTestInitialize()
        {
            LockTest();
        }

        [TestCleanup]
        public void TestCleanup()
        {
            this.GameSessionProxy.Locale = "en-US";
            UnlockTest();
        }

        static string MachineName = ConfigurationManager.ConnectionStrings["lest_AsyncNotification_db"].ConnectionString.Split(';')[0].Substring(12);

        /// <summary>
        /// BVT test for CreateSession
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("BVT for Session.svc CreateSession API.")]
        [TestProperty("Type", "BVTs")]
        public void BVT_CreateSession()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");


            SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            AssertCreateSessionState(creationData, sessionState);

            //ViewSession 
            SessionState viewSessionState = this.GameSessionProxy.ViewSession(sessionState.SessionID, sessionState.GameID.ToString(), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            AssertSessionState(sessionState, viewSessionState);

            //GetGameState
            FullGameState actualGameState = this.GameStateProxy.GetGameState(viewSessionState.SessionID, viewSessionState.GameID.ToString(), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

            AssertFullGameStateToSessionStateGameState(viewSessionState, actualGameState);
        }

        /// <summary>
        /// Verify creating Multiple Sessions
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Call POST on GameSessionService to submit CreateSession")]
        [TestProperty("Type", "FeatureTests")]
        public void P_CreateSession_MultipleSessions()
        {
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState sessionState1 = null;
            SessionState sessionState2 = null;
            SessionState sessionState3 = null;
            SessionState sessionState4 = null;
            SessionState sessionState5 = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData1 = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame1");
            CreationData creationData2 = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame2");
            CreationData creationData3 = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame3");
            CreationData creationData4 = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame4");
            CreationData creationData5 = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame5");

            sessionState1 = this.GameSessionProxy.CreateSession(creationData1.GameID.ToString(), creationData1);
            sessionState2 = this.GameSessionProxy.CreateSession(creationData2.GameID.ToString(), creationData2);
            sessionState3 = this.GameSessionProxy.CreateSession(creationData3.GameID.ToString(), creationData3);
            sessionState4 = this.GameSessionProxy.CreateSession(creationData4.GameID.ToString(), creationData4);
            sessionState5 = this.GameSessionProxy.CreateSession(creationData5.GameID.ToString(), creationData5);

            //Assert SessionState
            AssertCreateSessionState(creationData1, sessionState1);
            AssertCreateSessionState(creationData2, sessionState2);
            AssertCreateSessionState(creationData3, sessionState3);
            AssertCreateSessionState(creationData4, sessionState4);
            AssertCreateSessionState(creationData5, sessionState5);
        }

        /// <summary>
        /// Verify CreateSession to create a game session with out passing any optional values in CreationData
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Call POST on GameSessionService to submit CreateSession with No Optional Values")]
        [TestProperty("Type", "FeatureTests")]
        public void P_CreateSession_NoOptionalValues()
        {
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState sessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            CreationData creationData = new CreationData();

            creationData.GameID = Constants.TESTGAMEID;
            creationData.TotalSeatsAvailable = 10;
            creationData.ReservedSeatsAvailable = 10;
            creationData.InactivityWarning = iwb;

            sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, sessionState);
        }

        /// <summary>
        /// Test for CreateSession with CreationData.TotalSeatsAvailable.= 1
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Test for Session.svc CreateSession API with CreationData.TotalSeatsAvailable.= 1.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_CreateSession_TotalSeatsAvailable_1()
        {
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 1, 1, new byte[] { 1, 2, 3 }, new InactivityWarningBehavior(), true, "TestGame");
            try
            {
                this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
                Assert.Fail("CreateSession allowed CreationData.TotalSeatsAvailable = 1");
            }
            catch (RestException ex)
            {
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidTotalSeatsAvailable), ex.Response);
            }
        }

        /// <summary>
        /// Test for CreateSession to verify > 16 TotalSeatsAvailable. 16 is allowed Max. No. of Seats
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Test for Session.svc CreateSession API to verify > 16 TotalSeatsAvailable.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_CreateSession_TotalSeatsAvailable_MoreThan16()
        {
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 17, 10, new byte[] { 1, 2, 3 }, new InactivityWarningBehavior(), true, "TestGame");

            try
            {
                this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
                Assert.Fail("CreateSession allowed CreationData.TotalSeatsAvailable to be > 16");
            }
            catch (RestException ex)
            {
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidTotalSeatsAvailable), ex.Response);
            }
        }

        /// <summary>
        /// Verify CreateSession with different GameIDs for CreationData.GameID & GameID parameter to CreateSession
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call POST on GameSessionService to submit CreateSession with different GameIDs for CreationData.GameID & GameID parameter to CreateSession")]
        [TestProperty("Type", "FeatureTests")]
        public void N_CreateSession_DifferentGameID_InvalidCreationDataGameID_ValidParameter()
        {
            SessionState sessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(1297287395, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            try
            {
                sessionState = this.GameSessionProxy.CreateSession(Constants.TESTGAMEID.ToString(), creationData);
                Assert.Fail("Session is Created with Different GameID for CreationData.GameID & GameID Parameter for CreateSession");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDInconsistentInInputParameters), restEx.Response);
            }
        }

        /// <summary>
        /// Verify CreateSession with different GameIDs for CreationData.GameID & GameID parameter to CreateSession
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call POST on GameSessionService to submit CreateSession with different GameIDs for CreationData.GameID & GameID parameter to CreateSession")]
        [TestProperty("Type", "FeatureTests")]
        public void N_CreateSession_DifferentGameID_ValidCreationDataGameID_InValidParameter()
        {
            SessionState sessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            try
            {
                sessionState = this.GameSessionProxy.CreateSession("1297287395", creationData);
                Assert.Fail("Session is Created with Different GameID for CreationData.GameID & GameID Parameter for CreateSession");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDDoesNotMatchPartnerTokenTitleID), restEx.Response);
            }
        }

        /// <summary>
        /// Verify CreateSession with No value assigned to TotalSeatsAvailable in CreationData
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call POST on GameSessionService to submit CreateSession with no SeatsAvailable")]
        [TestProperty("Type", "FeatureTests")]
        public void N_CreateSession_NoTotalSeatsAvailable()
        {
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            CreationData creationData = new CreationData();

            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.None;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 5;

            creationData.GameID = Constants.TESTGAMEID;
            creationData.Variant = 0;
            creationData.ReservedSeatsAvailable = 2;
            creationData.SessionParameters = new byte[] { 1, 2, 3 };
            creationData.InactivityWarning = iwb;
            creationData.CanRemoveEmptySeats = true;
            creationData.DisplayName = "TestGame";

            try
            {
                SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
                Assert.Fail(String.Format("Session should not be created for an invalid game ID ({0})", creationData.GameID));
            }
            catch (RestException ex)
            {
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidTotalSeatsAvailable), ex.Response);
            }
        }

        // No usage of ReservedSeatsAvailable field ...  regression for 3651
        /// <summary>
        /// Verify CreateSession with No value assigned to ReservedSeatsAvailable in CreationData
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Verify that whatever value is passed as a reaserved seats available, the value is always 0 because we are not reading this field in our service.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_CreateSession_DoesNotReadReservedSeats()
        {
            int[] reservedSeatValues = { -1, Int32.MaxValue, 5, 11 };
            CreationData creationData = new CreationData();
            creationData.GameID = Constants.TESTGAMEID;
            creationData.Variant = 0;
            creationData.TotalSeatsAvailable = 10;
            creationData.ReservedSeatsAvailable = reservedSeatValues[GlobalRandom.Next(reservedSeatValues.Length)];
            creationData.SessionParameters = new byte[] { 1, 2, 3 };
            creationData.InactivityWarning = new InactivityWarningBehavior();
            creationData.CanRemoveEmptySeats = true;
            creationData.DisplayName = "TestGame";

            SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            AssertCreateSessionState(creationData, sessionState);
            Assert.AreEqual(0, sessionState.ReservedSeatsAvailable, "Error: Service should not be reading the value of reserved seat passed while session is created.");
        }

        /// <summary>
        /// Verify CreateSession with Negative value assigned to TotalSeatsAvailable in CreationData
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call POST on GameSessionService to submit CreateSession TotalSeatsAvailable < 0")]
        [TestProperty("Type", "FeatureTests")]
        public void N_CreateSession_NegTotalSeatsAvaialble()
        {
            // Initialize CreationData
            CreationData creationData = new CreationData();
            creationData.GameID = Constants.TESTGAMEID;
            creationData.Variant = 0;
            creationData.TotalSeatsAvailable = -1;
            creationData.ReservedSeatsAvailable = 0;
            creationData.SessionParameters = new byte[] { 1, 2, 3 };
            creationData.InactivityWarning = new InactivityWarningBehavior();
            creationData.CanRemoveEmptySeats = true;
            creationData.DisplayName = "TestGame";

            try
            {
                this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
                Assert.Fail("Session is Created with Negative TotalSeatsAvailable");
            }
            catch (RestException ex)
            {
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidTotalSeatsAvailable), ex.Response);
            }
        }

        /// <summary>
        /// Verify CreateSession with Negative values assigned to members of InactivityWarningBehavior in CreationData
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call POST on GameSessionService to submit CreateSession InactivityWarningBehavior negative interval")]
        [TestProperty("Type", "FeatureTests")]
        public void N_CreateSession_InactivityWarningBehavior_NegInterval()
        {
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = -TestAreaBase.GlobalRandom.Next(1, 20);
            iwb.MaxNumberOfNudges = 5;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, Constants.TESTGAMEVARIANT, 10, 10, sessionParameters, iwb, true, "TestGame");

            try
            {
                SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
                Assert.Fail("Session is Created with Negative values for Interval of InactivityWarningBehavior");
            }
            catch (RestException ex)
            {
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.IntervalIsNegative), ex.Response);
            }
        }

        /// <summary>
        /// Verify CreateSession with Negative values assigned to members of InactivityWarningBehavior in CreationData
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call POST on GameSessionService to submit CreateSession InactivityWarningBehavior negative max number of nudges")]
        [TestProperty("Type", "FeatureTests")]
        public void N_CreateSession_InactivityWarningBehavior_NegMaxNumOfNudges()
        {
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.WarnOnly;
            iwb.Interval = 2;
            iwb.MaxNumberOfNudges = -TestAreaBase.GlobalRandom.Next(1, 25);
            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, Constants.TESTGAMEVARIANT, 10, 10, sessionParameters, iwb, true, "TestGame");

            try
            {
                SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
                Assert.Fail("Session is Created with Negative values for MaxNumberOfNudges of InactivityWarningBehavior");
            }
            catch (RestException ex)
            {
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.MaxNumberOfNudgesIsNotBetweenAllowedLimits), ex.Response);
            }
        }


        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify that trying to create a session with interval = 0 will   give a Bad Request when action is Kick.")]
        [TestProperty("Type", "feature")]
        public void N_CreateSession_InactivityWarningBehavior_0Interval()
        {
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 0;
            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");
            try
            {
                this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            }
            catch (RestException rx)
            {
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.IntervalIsInvalid), rx.Response);
            }
        }

        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("Verify trying to create a session with max number of nudges greater than 25 will give a Bad Request.")]
        [TestProperty("Type", "feature")]
        public void N_CreateSession_MaxPlus1NumberOfNudgesAllowed()
        {
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 26;
            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            try
            {
                this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
                Assert.Fail("Expected a Bad Request since max number of nudges allowed is 25.");
            }
            catch (RestException ex)
            {
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.MaxNumberOfNudgesIsNotBetweenAllowedLimits), ex.Response);
            }
        }

        //related bug -- 3724
        [TestMethod, Owner("a-sediro"), Priority(2)]
        [Description("verify correct error message for null inactivity warning.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_CreateSession_InactivityWarningBehavior_Null()
        {
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, new byte[] { 1, 2, 3 }, null, true, "TestGame");
            try
            {
                this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
                Assert.Fail("Session is Created with Invalid Action set to InactivityWarningBehavior.Action");
            }
            catch (RestException ex)
            {
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InactivityWarningIsNull), ex.Response);
            }
        }

        //related bug -- 2148 and 4887
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Verify that create session puts a default game state so that GetGameState before PutGameState does not result in an error.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_CreateSession_DefaultGameState()
        {
            byte[] sessionParameters = new byte[] { 1, 2, 3 };

            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, new InactivityWarningBehavior(), true, "TestGame");
            SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            AssertCreateSessionState(creationData, sessionState);
            FullGameState gameState = this.GameStateProxy.GetGameState(sessionState.SessionID, sessionState.GameID.ToString(), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            Assert.IsTrue(sessionParameters.SequenceEqual(gameState.GameData), "Error : Incorrect default game Data");
        }

        /// <summary>
        /// Feature test for CheckValidityOfGames
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Test Validity of games from GMS DB")]
        [TestProperty("Type", "FeatureTests")]
        public void P_CreateSession_CheckValidityOfGames()
        {
            // currently the TitleId in the partner token is taken from config file, this test need to change when this change
            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box. It is expected to fail otherwise");

            try
            {
                List<string> DBResult = new List<string>();
                Boolean ExistInGMS = false;
                int ListElmntCounter = 0;


                TraceEx.TraceStart("make sure Data Source is assigned proper name, as appropriate to test env't, in config");
                SqlConnection myConnection = new SqlConnection(ConfigurationManager.ConnectionStrings["lest_AsyncNotification_db"].ConnectionString); //get connection string and make connection

                myConnection.Open();

                SqlCommand myCommand = new SqlCommand("SELECT  [GameId]" +
                                                        "FROM [GameMetadataStore].[dbo].[t_games]", myConnection);

                //  map rows in GMS db to sqlDataReader and then to  list instance
                SqlDataReader myReader = myCommand.ExecuteReader();


                while (myReader.Read())
                {
                    DBResult.Add(myReader[0].ToString());

                }

                EnvironmentSettingsSection EnvSectionSetting = (EnvironmentSettingsSection)ConfigurationManager.GetSection("environmentSettings");

                //check all TitleId(a.k.a GameId) in config are valid
                foreach (EnvironmentElement envt in EnvSectionSetting.Environments)
                {
                    do
                    {
                        ExistInGMS = false;

                        if (string.Equals(DBResult[ListElmntCounter].ToString(), envt.StsSettings.TitleId, StringComparison.OrdinalIgnoreCase))
                        {
                            ExistInGMS = true;
                        }
                    }
                    while ((ListElmntCounter++ <= DBResult.Count) && (!ExistInGMS));

                    if (!ExistInGMS) throw new ApplicationException(string.Format("Game ID {0} doesnt exist in GMS DB", envt.StsSettings.TitleId));

                    ListElmntCounter = 0;

                }

                myConnection.Close();

            }
            catch (Exception e)
            {
                throw new ApplicationException(e.Message);
            }
        }

        /// <summary>
        /// Verify CreateSession with  GameID not matching TitleID in partner token
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call POST on GameSessionService to submit CreateSession with  GameID not in Partner token")]
        [TestProperty("Type", "FeatureTests")]
        public void N_CreateSession_GameIdNotMatchPartnerTokenTitleID()
        {
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState sessionState = null;
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;
            byte[] sessionParameters = new byte[] { 1, 2, 3 };

            Random rndm = new Random();
            uint RandomGameId = uint.MinValue;
            do
            {
                RandomGameId = (uint)rndm.Next();
            }
            while (uint.Parse(Config.Environment.StsSettings.TitleId) == RandomGameId);

            CreationData creationData = InitializeCreationData(RandomGameId, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            try
            {
                sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
                Assert.Fail(string.Format("Session should not be created for an invalid game ID ({0})", creationData.GameID));
            }
            catch (RestException ex)
            {
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDDoesNotMatchPartnerTokenTitleID), ex.Response);
            }
        }

        /// <summary>
        /// Verify CreateSession with  GameID having Invalid format
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call POST on GameSessionService to submit CreateSession with  Invalid format GameID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_CreateSession_InvalidFormatGameId()
        {
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState sessionState = null;
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;
            byte[] sessionParameters = new byte[] { 1, 2, 3 };

            CreationData creationData = InitializeCreationData(uint.MinValue, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            string GameIdRndm = GetInvalidGameId();
            try
            {
                //sessionState = this.GameSessionProxy.CreateSession(GetInvalidGameId(), creationData);
                sessionState = this.GameSessionProxy.CreateSession(GameIdRndm, creationData);
                Assert.Fail(string.Format("Session should not be created for an invalid game ID Format ({0})", GameIdRndm));
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidGameIDFormatWhileGettingIdentity), restEx.Response);
            }
        }

        /// <summary>
        /// Feature test for CreationData SessionParameters > 64K
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature test  for Session.svc - CreateSession API- TO verify   CreationData SessionParameters cant be > 64K ")]
        [TestProperty("Type", "FeatureTests")]
        public void N_CreateSession_SessionParametersGreaterThan64K()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            //assign sessionParemeters to > 64k bytes
            byte[] sessionParameters = GenerateRandomBytes(64 * 1024 + 1);
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            try
            {
                SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
                Assert.Fail(string.Format("Error:Session was created for a session parameters lenght greater than max,  having size = {0}", sessionParameters.Length));
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionParametersTooLongInCreateSession), restEx.Response);
            }
        }

        /// <summary>
        /// Feature test for CreationData SessionParameters  equals 64K- boundary test
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature test  for Session.svc - CreateSession API- TO verify   CreationData SessionParameters = 64K ")]
        [TestProperty("Type", "FeatureTests")]
        public void P_CreateSession_SessionParametersEquals64K()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            //assign sessionParemeters to > 64k bytes
            byte[] sessionParameters = GenerateRandomBytes(64 * 1024 - 1);
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            TraceEx.TraceStart(string.Format("Trying to create session for boundary case session parameter Length= {0}", sessionParameters.Length));

            SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, sessionState);


        }

        /// <summary>
        /// Feature test for Max no. of session created -boundary case 
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature test for Session.svc CreateSession API---test for Max no. of session created -boundary case .")]
        [TestProperty("Type", "FeatureTests")]
        public void P_CreateSession_MaximumSessionAllowed()
        {
            TraceEx.TraceStart("IF THIS FAILED , Do NOT FORGET TO RESET 'vc-valu'e for 'lest_SessionFE_MaxCreateSessionsAllowedPerUser' TO ITS ORIGINAL VALUE " + int.MaxValue.ToString());

            TraceEx.TraceStart("Do NOT RUN This Test Before overiding the 'vc-valu'e for 'lest_SessionFE_MaxCreateSessionsAllowedPerUser' of" +
                          "[LIVEN_NPDB].[dbo].[t_setting_overrides] to a less Max value such as 100 !");

            TraceEx.TraceStart("make sure Data Source is assigned proper name, as appropriate to test env't, in config");

            Assert.AreEqual("dev", Config.Environment.Name, true, "This test has to be run against a dev box. It is expected to fail otherwise");

            Assert.IsTrue(Config.Environment.UserSettings.Count >= 4, "Please make sure the number of players is atleast 4 in config file");

            //retrieve the original value from DB
            SqlConnection myConnection = null;
            SqlCommand myCommand = null;
           
            // Initialize Session creation related variables          
            int overideSessionFE_MaxCreateSessionsAllowedPerUser = 105;
            DateTime SessionCreatedTime = DateTime.UtcNow.AddDays(-8);
            SessionState createSessionState = null;

            //creating users that never created a session
            List<XboxLiveAccount> newUser = new List<XboxLiveAccount>();
            try
            {
                newUser = Users.CreateUsers(1);
                TraceEx.TraceStart("One XBL account has been created.");
            }
            catch (Exception e)
            {
                TraceEx.TraceStart("Uanble to creat XBL account. " + e.Message);
                //using the most infrequently used user
                XboxLiveAccount XblAcc = new XboxLiveAccount();
                XblAcc.MemberName = Config.Environment.UserSettings[3].Membername;
                XblAcc.Password = Config.Environment.UserSettings[3].Password;
                newUser.Add(XblAcc);
            }

            TraceEx.TraceStart("Inject Liven_db to override the MaxCreateSessionAllowedPerUser setting");


            //overriding the value in NPDB
            try
            {
                myConnection = new SqlConnection(ConfigurationManager.ConnectionStrings["lest_AsyncNotification_db"].ConnectionString + ";Asynchronous Processing=true"); //get connection string and make connection

                myConnection.Open();

                myCommand = new SqlCommand(string.Format("UPDATE  [LIVEN_NPDB].[dbo].[t_setting_overrides]" +
                                                         "SET  [vc_value]={0}" +
                                                         "WHERE [vc_setting]='lest_SessionFE_MaxCreateSessionsAllowedPerUser'",
                                                         overideSessionFE_MaxCreateSessionsAllowedPerUser.ToString()), myConnection);

                IAsyncResult asyncResult= myCommand.BeginExecuteReader();

                myCommand.EndExecuteReader(asyncResult);

                myCommand.Dispose();

                myConnection.Close();
            }
            catch (Exception ex)
            {
                TraceEx.TraceStart("make sure connection string is assigned proper value, as appropriate to test env't, in config");
                throw new Exception(ex.Message);
            }

            StopGCService();

            //create session untill boundary value is reached
            for (int Cntr = 0; Cntr < overideSessionFE_MaxCreateSessionsAllowedPerUser; Cntr++)
            {
                try
                {
                    createSessionState = InitSessionState(SessionCreatedTime.ToString(), true, 0, newUser[0].MemberName, newUser[0].Password);
                    testHooksClient.CreateSession(createSessionState);
                }
                catch (RestException rx)
                {
                    RestoreMaxSessionOriginalValue();
                    throw new RestException(rx.Response, rx.Message + "Unable to create the max number of sessions allowed");
                }

            }
            StartGCService();

            //Reverting value of  SessionFE_MaxCreateSessionsAllowedPerUser to its original value
            RestoreMaxSessionOriginalValue();
        }

        /// <summary>
        /// Feature test for greater than Max no. of session created 
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature test for Session.svc CreateSession API- test for greate than Max no. of session created .")]
        [TestProperty("Type", "FeatureTests")]
        public void N_CreateSession_GreaterThanMaxSessionCreate()
        {
            TraceEx.TraceStart("IF THIS FAILED , Do NOT FORGET TO RESET 'vc-valu'e for 'lest_SessionFE_MaxCreateSessionsAllowedPerUser' TO ITS ORIGINAL VALUE " + int.MaxValue.ToString());
            TraceEx.TraceStart("Do NOT RUN This Test Before overiding the 'vc-valu'e for 'lest_SessionFE_MaxCreateSessionsAllowedPerUser' of" +
                          "[LIVEN_NPDB].[dbo].[t_setting_overrides] to a less Max value such as 100 !");

            TraceEx.TraceStart("make sure Data Source is assigned proper name, as appropriate to test env't, in config");
            SqlConnection myConnection = null;
            SqlCommand myCommand = null;
            int overideSessionFE_MaxCreateSessionsAllowedPerUser = 105;
                                 

            //overrided original value in NPDB
            try
            {
                TraceEx.TraceStart("Inject Liven_db to override the MaxCreateSessionAllowedPerUser setting");

                myConnection = new SqlConnection(ConfigurationManager.ConnectionStrings["lest_AsyncNotification_db"].ConnectionString + ";Asynchronous Processing=true"); //get connection string and make connection

                myConnection.Open();

                myCommand = new SqlCommand(string.Format("UPDATE  [LIVEN_NPDB].[dbo].[t_setting_overrides]" +
                                                         "SET  [vc_value]={0}" +
                                                         "WHERE [vc_setting]='lest_SessionFE_MaxCreateSessionsAllowedPerUser'",
                                                         overideSessionFE_MaxCreateSessionsAllowedPerUser.ToString()), myConnection);
                IAsyncResult asyncResult= myCommand.BeginExecuteReader();

                myCommand.EndExecuteReader(asyncResult);

                myCommand.Dispose();

                myConnection.Close();
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }

            // Initialize CreationData 
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, new byte[] { 1, 2, 3 }, new InactivityWarningBehavior(), true, "TestGame");

            try
            {
                for (int Cntr = 0; Cntr <= overideSessionFE_MaxCreateSessionsAllowedPerUser; Cntr++)
                {
                    SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(),
                                                                                    creationData,
                                                                                    TestAreaBase.users[1].MemberName,
                                                                                    TestAreaBase.users[1].Password);
                    AssertCreateSessionState(creationData, sessionState);
                }

                //restore max session original value 
                RestoreMaxSessionOriginalValue();

                Assert.Fail("Error: Session more than the max allowed to create for the environment " + int.MaxValue.ToString() + " has been created");
            }
            catch (RestException rx)
            {
                VerifyException(HttpStatusCode.Forbidden, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.TooManySessionsCreatedByTheUser), rx.Response);
            }

            //Reverting value of  SessionFE_MaxCreateSessionsAllowedPerUser to its original value per env't
            RestoreMaxSessionOriginalValue();

        }

        //related bugs 10713 and 10981
        /// <summary>
        /// Feature test for CreateSession Profile info
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("FeatureTests for Session.svc CreateSession API.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_CreateSession_ProfileInfo_DisplayNameURL()
        {
            List<XboxLiveAccount> newUsers = Users.CreateUsers(1);
            Thread.Sleep(Constants.NEW_USER_WAIT_TIME); // give time after account is created so that services will not fail to get puid

            this.GameSessionProxy.Locale = Constants.LOCALES[GlobalRandom.Next(Constants.LOCALES.Length)];

            // Initialize CreationData
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, new byte[] { 1, 2, 3 },
                                                               new InactivityWarningBehavior(), true, "TestGame");
            SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, newUsers[0].MemberName, newUsers[0].Password);
            AssertCreateSessionState(creationData, sessionState);
            VerifyProfileInfo(sessionState, 0, Users.GetGamertag(newUsers[0].MemberName, newUsers[0].Password));
        }


        //Bug 9056
        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify Interval = Int.MaxValue for InactivityWarningBehavior.Interval in CreateData
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify Interval = Int.MaxValue for InactivityWarningBehavior.Interval in CreationData")]
        [TestProperty("Type", "FeatureTests")]
        public void P_CreateSession_CreationData_InactivityWarning_Interval_MaxInt()
        {
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = int.MaxValue;// this behaviour is allowed
            iwb.MaxNumberOfNudges = 1;

            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, new byte[] { 1, 2, 3 }, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            AssertCreateSessionState(creationData, createSessionState);

            try
            {
                this.GameSessionProxy.CreateSession(createSessionState.GameID.ToString(), creationData);

            }
            catch (RestException restEx)
            {
                string message = restEx.Message;
            }
        }

        /// <summary>
        /// Feature Test to verify create session with variant not allowed in GMS
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("Feature test to verify create session with variant not allowed in GMS.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_CreateSession_VaraintNotAllowedInGMS()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            //set variant
            uint VariantOnNotification = 1;

            // Initialize CreationData  and first player create session
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, (int)VariantOnNotification, 10, 10, new byte[] { 1, 2, 3 }, new InactivityWarningBehavior(), true, "TestGame");

            try
            {
                SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData,
                                                                                      TestAreaBase.users[0].MemberName,
                                                                                      TestAreaBase.users[0].Password);
            }
            catch (RestException rx)
            {
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDOrVariantIsNotInGMS), rx.Response);
            }

        }

        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Verify that trying to create a session with interval = 0 will   give a Bad Request when action is WarnOnly.")]
        [TestProperty("Type", "feature")]
        public void N_CreateSession_InactivityActionWarnOnly_0Interval()
        {
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.WarnOnly;
            iwb.Interval = 0;
            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");
            try
            {
                this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            }
            catch (RestException rx)
            {
                VerifyException(HttpStatusCode.BadRequest,SessionServiceEvents.Events.GetEventId(SessionServiceEvents.IntervalIsInvalid), rx.Response);
            }
        }

        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Verify that trying to create a session with interval = 0 will  not  give a Bad Request when action is None.")]
        [TestProperty("Type", "feature")]
        public void P_CreateSession_InactivityActionNone_0Interval()
        {
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.None;
            iwb.Interval = 0;
            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");
            
            this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
           
        }       
        
        private static void StopGCService()
        {
            NotificationTestCommon.StopService(MachineName, "GarbageCollectorService");
        }

        private static void StartGCService()
        {
            NotificationTestCommon.StartService(MachineName, "GarbageCollectorService");
        }
        private static void RestoreMaxSessionOriginalValue()
        {
            try
            {
               int maxVal = int.MaxValue;

               if (!Config.Environment.Name.Equals("dev")) maxVal = 100;

               SqlConnection myConnection = new SqlConnection(ConfigurationManager.ConnectionStrings["lest_AsyncNotification_db"].ConnectionString + ";Asynchronous Processing=true"); //get connection string and make connection

                myConnection.Open();

               SqlCommand myCommand = new SqlCommand(string.Format("UPDATE  [LIVEN_NPDB].[dbo].[t_setting_overrides]" +
                                                         "SET  [vc_value]={0}" +
                                                         "WHERE [vc_setting]='lest_SessionFE_MaxCreateSessionsAllowedPerUser'",
                                                         maxVal.ToString()), myConnection);

                IAsyncResult asyncResult2 = myCommand.BeginExecuteReader();

                myCommand.EndExecuteReader(asyncResult2);

                myCommand.Dispose();

                myConnection.Close();
            }
            catch (Exception ex)
            {
                TraceEx.TraceStart("Error: Please change the NPDB setting 'lest_SessionFE_MaxCreateSessionsAllowedPerUser'to its original value " + int.MaxValue.ToString());
                throw new Exception(ex.Message);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Test.API\Sessions\LeaveSession.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using LiveN.Test.Framework.Configuration;
using Multiplayer.Test.API;
using AsyncMultiplayer.SessionCommon;
using System.Net;
using System.Diagnostics;
using System.Threading;
using Gds.Contracts;
using AsyncMultiplayer.NotificationService;
using LiveN.Test.Common.Web;
using LIVEN.Common.Diagnostics;

namespace MultiPlayer.Test.API
{
    /// <summary>
    /// Test Cases for Sessions.svc LeaveSession API
    /// </summary>
    [TestClass]
    public class LeaveSession : TestAreaBase
    {
        

        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
        }

        [TestInitialize()]
        public void MyTestInitialize()
        {
            LockTest();
        }

        [TestCleanup]
        public void TestCleanup()
        {
            UnlockTest();
        }
        /// <summary>
        /// BVT test for LeaveSession
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("BVT for Session.svc LeaveSession API.")]
        [TestProperty("Type", "BVTs")]
        public void BVT_LeaveSession()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "Should have at least 2 users under <preExistingUsers> node in App.config for selected environment");

            SessionState createSessionState = null;
            SessionState joinSessionState = null;
            SessionState leaveSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Create New Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            // Initialize JoinData
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            //Join Session
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID.ToString(), joinData);

            //Assert SessionState
            AssertJoinSessionState(createSessionState, joinSessionState);

            //Leave Session
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            this.GameSessionProxy.LeaveSession(joinSessionState.SessionID.ToString(), joinSessionState.GameID.ToString());

            //View Session after Leave
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            leaveSessionState = this.GameSessionProxy.ViewSession(joinSessionState.SessionID.ToString(), joinSessionState.GameID.ToString());

            //Assert SessionState
            AssertLeaveSessionState(joinSessionState, leaveSessionState);
                       
        }

        //relate bug 3300 -- activated the bug so that we will have an appropriate error message at the end.
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Verify that leaving a session while there is no one else in the session does not result in error.")]
        [TestProperty("Type", "Features")]
        public void P_LeaveSession_EmptySession()
        {
            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, new InactivityWarningBehavior(), true, "TestGame");
            SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            AssertCreateSessionState(creationData, sessionState);

            this.GameSessionProxy.LeaveSession(sessionState.SessionID.ToString(), sessionState.GameID.ToString());

            //verify that player is not in the session anymore.
            try
            {
                this.GameSessionProxy.ViewSession(sessionState.SessionID.ToString(), sessionState.GameID.ToString(), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
                Assert.Fail("Expecting Forbidden as player should not be in the session anymore.");
            }
            catch (RestException ex)
            {
                //modify this after bug fix!
                VerifyException(403, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.UserNotAllowedToGetStateInSession), ex.Response);
            }
        }

        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Verify that user's notifications for that session are deleted after player leaves session.")]
        [TestProperty("Type", "Features")]
        public void P_LeaveSession_DeleteNotificationsAfterLeaveSession()
        {
            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, new InactivityWarningBehavior(), true, "TestGame");
            SessionState sessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            AssertCreateSessionState(creationData, sessionState);

            JoinData joinData = InitializeJoinData(sessionState.GameID, sessionState.SessionID, 1);
            this.GameSessionProxy.JoinSession(sessionState.SessionID, joinData, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            //P1 makes a move to generate a your turn notification for P2
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };
            this.GameStateProxy.PutGameState(sessionState.SessionID, sessionState.GameID.ToString(), modifiableGameState, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

            TestAreaBase.notificationCommon.VerifyNotificationCreated(sessionState.GameID.ToString(), sessionState.SessionID, Notification.NotificationType.YourTurn, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            //send a user nudge
            GameAction gameAction = new GameAction();
            gameAction.ActionType = GameActionType.UserNudge;
            gameAction.ActionData = new byte[] { 1 };
            gameAction.ActionTime = DateTime.Now;
            gameAction.SequenceNumber = 1;
            this.GameStateProxy.PostGameAction(sessionState.SessionID.ToString(), sessionState.GameID.ToString(), gameAction, TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            TestAreaBase.notificationCommon.VerifyNotificationCreated(sessionState.GameID.ToString(), sessionState.SessionID, Notification.NotificationType.Nudge, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            this.GameSessionProxy.LeaveSession(sessionState.SessionID.ToString(), sessionState.GameID.ToString(), TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            Thread.Sleep(20000); //give time for notification internal to process delete requests.
            List<Notification> notificationList = this.NotificationsServiceProxy.GetNotifications(
                sessionState.GameID.ToString(),
                sessionState.SessionID,
                0,
                String.Empty,
                1,
                string.Empty,
                true,
                TestAreaBase.users[1].MemberName,
                TestAreaBase.users[1].Password,
                null);
            Assert.IsNotNull(notificationList);
            Assert.AreEqual(0, notificationList.Count, "Error: Did not exepect any nudge notifications for user who is not on active seat.");
        }

        /// <summary>
        /// Feature Test for LeaveSession to verify Multiple Players can leave session and SessionState will update after each player left
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Session.svc LeaveSession API to verify Multiple Players can LeaveSession.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_LeaveSession_MultiplePlayersLeaveSession()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 5, "Should have at least 5 users under <preExistingUsers> node in App.config for selected environment");

            SessionState createSessionState = null;
            SessionState preJoinSessionState = null;
            SessionState postJoinSessionState = null;
            SessionState preLeaveSessionState = null;
            SessionState postLeaveSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Create New Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            preJoinSessionState = createSessionState;

            for (int i = 1; i < 5; i++)
            {
                // Initialize JoinData
                JoinData joinData = InitializeJoinData(preJoinSessionState.GameID, preJoinSessionState.SessionID, i);

                //Join Session
                this.GameSessionProxy.UserID = TestAreaBase.users[i].MemberName;
                this.GameSessionProxy.Password = TestAreaBase.users[i].Password;
                postJoinSessionState = this.GameSessionProxy.JoinSession(preJoinSessionState.SessionID.ToString(), joinData);

                //Assert SessionState
                AssertJoinSessionState(preJoinSessionState, postJoinSessionState);

                preJoinSessionState = postJoinSessionState;
            }

            //Player2 Leave Session
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            this.GameSessionProxy.LeaveSession(postJoinSessionState.SessionID.ToString(), postJoinSessionState.GameID.ToString());

            preLeaveSessionState = postJoinSessionState;

            //View Session after Leave
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            postLeaveSessionState = this.GameSessionProxy.ViewSession(preLeaveSessionState.SessionID.ToString(), preLeaveSessionState.GameID.ToString());

            //Assert SessionState
            AssertLeaveSessionState(preLeaveSessionState, postLeaveSessionState);

            //Player3 Leave Session
            this.GameSessionProxy.UserID = TestAreaBase.users[2].MemberName;      // player3
            this.GameSessionProxy.Password = TestAreaBase.users[2].Password;

            this.GameSessionProxy.LeaveSession(postJoinSessionState.SessionID.ToString(), postJoinSessionState.GameID.ToString());

            //updating seats available to one after  the previous  player left            
            preLeaveSessionState.SeatsAvailable = postLeaveSessionState.SeatsAvailable;

            //View Session after Leave
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            postLeaveSessionState = this.GameSessionProxy.ViewSession(preLeaveSessionState.SessionID.ToString(), preLeaveSessionState.GameID.ToString());

            //Assert SessionState
            AssertLeaveSessionState(preLeaveSessionState, postLeaveSessionState);
        }

        /// <summary>
        /// Feature Test for LeaveSession to verify All Players LeaveSession
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Session.svc LeaveSession API to verify All Players can LeaveSession.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_LeaveSession_AllPlayersLeaveSession()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 3, "Should have at least 5 users under <preExistingUsers> node in App.config for selected environment");

            SessionState createSessionState = null;
            SessionState preJoinSessionState = null;
            SessionState postJoinSessionState = null;
            SessionState preLeaveSessionState = null;
            SessionState postLeaveSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Create New Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            preJoinSessionState = createSessionState;

            for (int i = 1; i < 3; i++)
            {
                // Initialize JoinData
                JoinData joinData = InitializeJoinData(preJoinSessionState.GameID, preJoinSessionState.SessionID, i);

                //Join Session
                this.GameSessionProxy.UserID = TestAreaBase.users[i].MemberName;
                this.GameSessionProxy.Password = TestAreaBase.users[i].Password;
                postJoinSessionState = this.GameSessionProxy.JoinSession(preJoinSessionState.SessionID.ToString(), joinData);

                //Assert SessionState
                AssertJoinSessionState(preJoinSessionState, postJoinSessionState);

                //updating seats available with each join
                preJoinSessionState.SeatsAvailable = postJoinSessionState.SeatsAvailable;
            }

            //Player2 Leave Session
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            this.GameSessionProxy.LeaveSession(postJoinSessionState.SessionID.ToString(), postJoinSessionState.GameID.ToString());

            preLeaveSessionState = postJoinSessionState;

            //View Session after Leave
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            postLeaveSessionState = this.GameSessionProxy.ViewSession(preLeaveSessionState.SessionID.ToString(), preLeaveSessionState.GameID.ToString());

            //Assert SessionState
            AssertLeaveSessionState(preLeaveSessionState, postLeaveSessionState);

            //Player3 Leave Session
            this.GameSessionProxy.UserID = TestAreaBase.users[2].MemberName;      // player3
            this.GameSessionProxy.Password = TestAreaBase.users[2].Password;

            this.GameSessionProxy.LeaveSession(postJoinSessionState.SessionID.ToString(), postJoinSessionState.GameID.ToString());

            preLeaveSessionState = postJoinSessionState;

            //View Session after Leave
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            postLeaveSessionState = this.GameSessionProxy.ViewSession(preLeaveSessionState.SessionID.ToString(), preLeaveSessionState.GameID.ToString());

            //updating seats available to state after player 2 left and just before player 3 left
            preLeaveSessionState.SeatsAvailable = preLeaveSessionState.SeatsAvailable + 1;

            //Assert SessionState
            AssertLeaveSessionState(preLeaveSessionState, postLeaveSessionState);

            //Player1 Leave Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            this.GameSessionProxy.LeaveSession(postJoinSessionState.SessionID.ToString(), postJoinSessionState.GameID.ToString());

            preLeaveSessionState = postJoinSessionState;

            //View Session after Player 1 Left
            try
            {
                postLeaveSessionState = this.GameSessionProxy.ViewSession(preLeaveSessionState.SessionID.ToString(), preLeaveSessionState.GameID.ToString(),
                                                                            TestAreaBase.users[0].MemberName,
                                                                            TestAreaBase.users[0].Password);
                Assert.Fail("Error: Expected to hit HTTP/1.1 403 Forbidden");
            }
            catch (RestException rx)
            {
                VerifyException(HttpStatusCode.Forbidden, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.UserNotAllowedToGetStateInSession), rx.Response);
            }
        }

        /// <summary>
        /// Feature Test for LeaveSession to verify Owner LeaveSession
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Session.svc LeaveSession API to verify Owner LeaveSession.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_LeaveSession_OwnerLeaveSession()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 3, "Should have at least 3 users under <preExistingUsers> node in App.config for selected environment");

            SessionState createSessionState = null;
            SessionState preJoinSessionState = null;
            SessionState postJoinSessionState = null;
            SessionState preLeaveSessionState = null;
            SessionState postLeaveSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Create New Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            preJoinSessionState = createSessionState;

            for (int i = 1; i < 3; i++)
            {
                // Initialize JoinData
                JoinData joinData = InitializeJoinData(preJoinSessionState.GameID, preJoinSessionState.SessionID, i);

                //Join Session
                this.GameSessionProxy.UserID = TestAreaBase.users[i].MemberName;
                this.GameSessionProxy.Password = TestAreaBase.users[i].Password;
                postJoinSessionState = this.GameSessionProxy.JoinSession(preJoinSessionState.SessionID.ToString(), joinData);

                //Assert SessionState
                AssertJoinSessionState(preJoinSessionState, postJoinSessionState);
                //updating seatavailable before next join session state resumes
                preJoinSessionState.SeatsAvailable = postJoinSessionState.SeatsAvailable;
            }

            //Player1 Leave Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            this.GameSessionProxy.LeaveSession(postJoinSessionState.SessionID.ToString(), postJoinSessionState.GameID.ToString());

            preLeaveSessionState = postJoinSessionState;

            //View Session after Leave
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            postLeaveSessionState = this.GameSessionProxy.ViewSession(preLeaveSessionState.SessionID.ToString(), preLeaveSessionState.GameID.ToString());

            //Assert SessionState
            AssertLeaveSessionState(preLeaveSessionState, postLeaveSessionState);
       }

        /// <summary>
        /// Feature Test for LeaveSession to verify Owner LeaveSession when No Other players in Session
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Session.svc LeaveSession API to verify Owner LeaveSession when No Other Players in Session.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_LeaveSession_OwnerLeaveSession_NoPlayersInSession()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            SessionState createSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Create New Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            //Player1 Leave Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            //TODO: Currently we throw an exception when Owner LeaveSession when No other players in Session
            //Add verification when Bug 1987 is Fixed
            this.GameSessionProxy.LeaveSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());
        }

        /// <summary>
        /// Feature Test for LeaveSession to verify Player can LeaveSession from one session while exists in other sessions
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Session.svc LeaveSession API to verify Owner LeaveSession.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_LeaveSession_PlayerLeaveSession_ExistsInOtherSessions()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "Should have at least 2 users under <preExistingUsers> node in App.config for selected environment");

            SessionState createSessionState1 = null;
            SessionState createSessionState2 = null;
            SessionState createSessionState3 = null;
            SessionState joinSessionState1 = null;
            SessionState joinSessionState2 = null;
            SessionState joinSessionState3 = null;
            SessionState postLeaveSessionState = null;
            SessionState viewSessionState2 = null;
            SessionState viewSessionState3 = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Create Session - Session 1
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            createSessionState1 = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState1);

            //Create Session - Session 2
            createSessionState2 = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState2);

            //Create Session - Session 3
            createSessionState3 = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState3);

            // Initialize JoinData
            JoinData joinData = InitializeJoinData(createSessionState1.GameID, createSessionState1.SessionID, 1);

            //Join Session 1 - Player 2
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
           joinSessionState1 = this.GameSessionProxy.JoinSession(createSessionState1.SessionID.ToString(), joinData);

            //Assert SessionState
            AssertJoinSessionState(createSessionState1, joinSessionState1);

            // Initialize JoinData
            joinData = InitializeJoinData(createSessionState1.GameID, createSessionState1.SessionID, 1);

            //Join Session 2 - Player 2
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            joinSessionState2 = this.GameSessionProxy.JoinSession(createSessionState2.SessionID.ToString(), joinData);

            //Assert SessionState
            AssertJoinSessionState(createSessionState2, joinSessionState2);

            // Initialize JoinData
            joinData = InitializeJoinData(createSessionState1.GameID, createSessionState1.SessionID, 1);

            //Join Session 3 - Player 3
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            joinSessionState3 = this.GameSessionProxy.JoinSession(createSessionState3.SessionID.ToString(), joinData);

            //Assert SessionState
            AssertJoinSessionState(createSessionState3, joinSessionState3);


            //Player2 LeaveSession from Session1
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            this.GameSessionProxy.LeaveSession(joinSessionState1.SessionID.ToString(), joinSessionState1.GameID.ToString());

            //View Session after Leave
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            postLeaveSessionState = this.GameSessionProxy.ViewSession(joinSessionState1.SessionID.ToString(), joinSessionState1.GameID.ToString());

            //Assert SessionState
            AssertLeaveSessionState(joinSessionState1, postLeaveSessionState);
            Assert.AreEqual((joinSessionState1.Seats.Count() - 1), postLeaveSessionState.Seats.Count(), "Player 2 LeaveSession didn't execute properly");
          
            //ViewSession for Session 2
            viewSessionState2 = this.GameSessionProxy.ViewSession(joinSessionState2.SessionID.ToString(), joinSessionState2.GameID.ToString());

            //Assert SessionState
            AssertSessionState(joinSessionState2, viewSessionState2);
            Assert.AreEqual(joinSessionState2.Seats.Count(), viewSessionState2.Seats.Count(), "Seats count decreased with out Player LeaveSession");

            //ViewSession for Session 3
            viewSessionState3 = this.GameSessionProxy.ViewSession(joinSessionState3.SessionID.ToString(), joinSessionState3.GameID.ToString());

            //Assert SessionState
            AssertSessionState(joinSessionState3, viewSessionState3);
            Assert.AreEqual(joinSessionState3.Seats.Count(), viewSessionState3.Seats.Count(), "Seats count decreased with out Player LeaveSession");
        }

        /// <summary>
        /// Feature test for LeaveSession to verify a Player can not LeaveSession Twice
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for Session.svc LeaveSession API to verify a Player can not LeaveSession Twice.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_LeaveSession_PlayerLeaveSessionTwice()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "Should have at least 2 users under <preExistingUsers> node in App.config for selected environment");

            SessionState createSessionState = null;
            SessionState joinSessionState = null;
            SessionState leaveSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Create New Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            // Initialize JoinData
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            //Join Session
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID.ToString(), joinData);

            //Assert SessionState
            AssertJoinSessionState(createSessionState, joinSessionState);

            //Leave Session
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            this.GameSessionProxy.LeaveSession(joinSessionState.SessionID.ToString(), joinSessionState.GameID.ToString());

            //View Session after Leave
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            leaveSessionState = this.GameSessionProxy.ViewSession(joinSessionState.SessionID.ToString(), joinSessionState.GameID.ToString());

            //Assert SessionState
            AssertLeaveSessionState(joinSessionState, leaveSessionState);

            //Player2 try to LeaveSession 2nd time
            try
            {
                this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
                this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

                this.GameSessionProxy.LeaveSession(joinSessionState.SessionID.ToString(), joinSessionState.GameID.ToString());
            }
            catch (RestException restEx)
            {
                VerifyException(403, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.PlayerIsNotInSession), restEx.Response);
            }
        }

        /// <summary>
        /// Feature test for LeaveSession to verify a Player who is Not In Session can not LeaveSession
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for Session.svc LeaveSession API to verify a Player who is Not In Session can not LeaveSession.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_LeaveSession_NotExistsPlayerLeaveSession()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 3, "Should have at least 3 users under <preExistingUsers> node in App.config for selected environment");

            SessionState createSessionState = null;
            SessionState joinSessionState = null;
            SessionState sessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Create New Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            // Initialize JoinData
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            //Join Session
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID.ToString(), joinData);

            //Assert SessionState
            AssertJoinSessionState(createSessionState, joinSessionState);

            //Non-Exists Player try to Leave Session
            try
            {
                this.GameSessionProxy.UserID = TestAreaBase.users[2].MemberName;      // player3
                this.GameSessionProxy.Password = TestAreaBase.users[2].Password;

                this.GameSessionProxy.LeaveSession(joinSessionState.SessionID.ToString(), joinSessionState.GameID.ToString());
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Forbidden, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.PlayerIsNotInSession), restEx.Response);
            }

            //View Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            sessionState = this.GameSessionProxy.ViewSession(joinSessionState.SessionID.ToString(), joinSessionState.GameID.ToString());

            Assert.IsTrue((sessionState.Seats.Length == joinSessionState.Seats.Length) &&
                           (sessionState.ReservedSeatsAvailable == joinSessionState.ReservedSeatsAvailable) &&
                           (sessionState.SessionID == joinSessionState.SessionID),
                           "Error: Session state has changed with a try to leave by non-exosting user");

        }

        /// <summary>
        /// Test for a Player LeaveSession - Not Exist SessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc LeaveSession API to verify a Player try to Leave - GUID with no dashes as SessionID.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_LeaveSession_NotExistSessionID()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "Should have at least 2 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Player1 creates Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //Assert SessionState
            AssertJoinSessionState(createSessionState, joinSessionState);

            //Leave Session
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            try
            {
                this.GameSessionProxy.LeaveSession("j6b048d0-15gd-4i9d-8f65-91bz93s762f5", joinSessionState.GameID.ToString());
                Assert.Fail("Error: Expected NOT FOUND with LivenError it didn't");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }
        }

        /// <summary>
        /// Test for a Player LeaveSession - Empty String as SessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc LeaveSession API to verify a Player try to Leave - Empty String as SessionID.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_LeaveSession_EmptyStringSessionID()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "Should have at least 2 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Player1 creates Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //Assert SessionState
            AssertJoinSessionState(createSessionState, joinSessionState);

            //Leave Session
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            try
            {
                this.GameSessionProxy.LeaveSession(String.Empty, joinSessionState.GameID.ToString());
                Assert.Fail("Error: Expecting Method NotAllowed error but it didn't");
            }
            catch (RestException restEx)
            {              
                VerifyException(HttpStatusCode.MethodNotAllowed, restEx.Response);
            }
        }

        /// <summary>
        /// Test for a Player LeaveSession - Null String as SessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc LeaveSession API to verify a Player try to Leave - Null String as SessionID.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_LeaveSession_NullAsSessionID()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "Should have at least 2 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Player1 creates Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //Assert SessionState
            AssertJoinSessionState(createSessionState, joinSessionState);

            //Leave Session
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            try
            {
                this.GameSessionProxy.LeaveSession(null, joinSessionState.GameID.ToString());
                Assert.Fail("Error: Expected METHOD NOT ALLOWED error but it didn't");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.MethodNotAllowed, restEx.Response);
            }
        }

        /// <summary>
        /// Test for a Player LeaveSession - Long String as SessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc LeaveSession API to verify a Player try to Leave - Long String as SessionID.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_LeaveSession_GTMaxLengthStringSessionID()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "Should have at least 2 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Player1 creates Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //Assert SessionState
            AssertJoinSessionState(createSessionState, joinSessionState);

            //Leave Session
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            try
            {
                this.GameSessionProxy.LeaveSession("ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz012", joinSessionState.GameID.ToString());
                Assert.Fail("Error: Expected NOT FOUND error but it didn't");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound ,SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }
        }

        /// <summary>
        /// Test for a Player LeaveSession - One Char String as SessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc LeaveSession API to verify a Player try to Leave - One Char String as SessionID.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_LeaveSession_OneCharStringSessionID()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "Should have at least 2 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Player1 creates Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //Assert SessionState
            AssertJoinSessionState(createSessionState, joinSessionState);

            //Leave Session
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            try
            {
                this.GameSessionProxy.LeaveSession("1", joinSessionState.GameID.ToString());
                Assert.Fail("Error: Expected NOT FOUND exception but it didn't");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }
        }       
              
        /// <summary>
        /// Test for a Player LeaveSession - String.Empty GameID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc LeaveSession API to verify a Player try to Leave - String.Empty GameID.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_LeaveSession_EmptyStringGameID()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "Should have at least 2 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Player1 creates Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //Assert SessionState
            AssertJoinSessionState(createSessionState, joinSessionState);

            //Leave Session
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            try
            {
                this.GameSessionProxy.LeaveSession(joinSessionState.SessionID, String.Empty);
                Assert.Fail("Error:Expected NOTFOUND error but it didn't");
                
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound,restEx.Response);
            }
        }

        /// <summary>
        /// Test for a Player LeaveSession - null GameID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc LeaveSession API to verify a Player try to Leave - null GameID.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_LeaveSession_NullGameID()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "Should have at least 2 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Player1 creates Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //Assert SessionState
            AssertJoinSessionState(createSessionState, joinSessionState);

            //Leave Session
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            try
            {
                this.GameSessionProxy.LeaveSession(joinSessionState.SessionID, null);
                Assert.Fail("Error: Expected NOT FOUND error, It didn't");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound,restEx.Response);
            }
        }

        /// <summary>
        /// Test for a Player LeaveSession - Invalid format GameID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc LeaveSession API to verify a Player try to Leave - Invalid Format GameID.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_LeaveSession_InvalidFormatGameID()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "Should have at least 2 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Player1 creates Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //Assert SessionState
            AssertJoinSessionState(createSessionState, joinSessionState);

            //Leave Session
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            string GameIdRndm = GetInvalidGameId();

            try
            {
                this.GameSessionProxy.LeaveSession(joinSessionState.SessionID, GameIdRndm);
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidGameIDFormatWhileGettingIdentity), restEx.Response);
            }
        }

        /// <summary>
        /// Test for a Player LeaveSession - One Char String GameID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc LeaveSession API to verify a Player try to Leave - One Char String GameID.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_LeaveSession_OneCharStringGameID()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "Should have at least 2 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Player1 creates Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //Assert SessionState
            AssertJoinSessionState(createSessionState, joinSessionState);

            //Leave Session
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            try
            {
                this.GameSessionProxy.LeaveSession(joinSessionState.SessionID, "A");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidGameIDFormatWhileGettingIdentity), restEx.Response);
            }
        }

        /// <summary>
        /// Test for a Player LeaveSession - GameID not matching partner token Title ID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc LeaveSession API to verify Exception when GameID don't match Partner Token TitleID.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_LeaveSession_GameIdNotMatchPartnerTokenTitleID()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "Should have at least 2 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Player1 creates Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //Assert SessionState
            AssertJoinSessionState(createSessionState, joinSessionState);

            //Leave Session
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            Random rndm = new Random();
            uint RandomGameId = uint.MinValue;

            do
            {
                RandomGameId = (uint)rndm.Next();
            }
            while (uint.Parse(Config.Environment.StsSettings.TitleId) == RandomGameId);

            try
            {
                this.GameSessionProxy.LeaveSession(joinSessionState.SessionID, RandomGameId.ToString());
                Assert.Fail(string.Format("LeaveSession should not be allowed for an invalid game ID ({0})", RandomGameId.ToString()));
            }
            catch (RestException restEx)
            {                
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDDoesNotMatchPartnerTokenTitleID), restEx.Response);
            
            }
        }

        /// <summary>
        /// Test for a Player on active seat leave session and Owner get final nudge
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc LeaveSession API to verify a Player on active seat leave session and Owner get final nudge.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_LeaveSession_ActiveSeatPlayerLeft_OwnerGetFinalNudge()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 3, "Should have at least 3 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, new byte[] { 1, 2, 3 }, new InactivityWarningBehavior(), true, "TestGame");

            //Player1 creates Session
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData,
                                                                                  TestAreaBase.users[0].MemberName,
                                                                                  TestAreaBase.users[0].Password);
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState1 = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData,
                                                                               TestAreaBase.users[1].MemberName,
                                                                               TestAreaBase.users[1].Password);

            AssertJoinSessionState(createSessionState, joinSessionState1);
            
            //Player3 JoinSession 
            JoinData joinData2 = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 2);

            SessionState joinSessionState2 = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData2,
                                                                               TestAreaBase.users[2].MemberName,
                                                                               TestAreaBase.users[2].Password);
            AssertJoinSessionState(joinSessionState1, joinSessionState2);

            //setting active seat to 2
            ModifiableGameState modifiedState = new ModifiableGameState();
            modifiedState.ActiveSeatIndex = 2;
            modifiedState.GameData = new byte[] { 50, 51, 52, 53, 54, 55, 56 };

            this.GameStateProxy.PutGameState(createSessionState.SessionID, createSessionState.GameID.ToString(), modifiedState,
                                             TestAreaBase.users[0].MemberName,
                                             TestAreaBase.users[0].Password);

            FullGameState fullGameState = this.GameStateProxy.GetGameState(createSessionState.SessionID, createSessionState.GameID.ToString(),
                                                                           TestAreaBase.users[0].MemberName,
                                                                           TestAreaBase.users[0].Password);

            //delete notifications so far
            this.NotificationsServiceProxy.DeleteNotificationBySession(createSessionState.GameID.ToString(),
                                                                       createSessionState.SessionID,
                                                                       TestAreaBase.users[0].MemberName,
                                                                       TestAreaBase.users[0].Password);

            //person on active seat leave session
            this.GameSessionProxy.LeaveSession(createSessionState.SessionID, createSessionState.GameID.ToString(),
                                               TestAreaBase.users[2].MemberName,
                                               TestAreaBase.users[2].Password);

            // Get/verify notification  after active seat player left session
            VerifyNotification(joinSessionState2,
                               Notification.NotificationCategory.ToDo, Notification.NotificationType.Nudge, true,
                               TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);

        }

        /// <summary>
        ///Test for Sessions.svc LeaveSession API to verify a Player Can leave session again:Unaffected by Azure Table Inconsistency
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc LeaveSession API to verify a Player Can leave session again:Unaffected by Azure Table Inconsistency.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_LeaveSession_LeaveSessionAgain_AzureInconsistency()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 3, "Should have at least 3 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, new byte[] { 1, 2, 3 }, new InactivityWarningBehavior(), true, "TestGame");

            //Player1 creates Session
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData,
                                                                                  TestAreaBase.users[0].MemberName,
                                                                                  TestAreaBase.users[0].Password);

            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState1 = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData,
                                                                               TestAreaBase.users[1].MemberName,
                                                                               TestAreaBase.users[1].Password);

            AssertJoinSessionState(createSessionState, joinSessionState1);

            Assert.IsTrue(joinSessionState1.Seats.Length == 2, "Error: Number of Players are expected to be 2 but got "+
                          joinSessionState1.Seats.Length.ToString());

            this.GameSessionProxy.LeaveSession(createSessionState.SessionID, createSessionState.GameID.ToString(),
                                                                                TestAreaBase.users[1].MemberName,
                                                                                TestAreaBase.users[1].Password);
            SessionState sessionAfterLeave = this.GameSessionProxy.ViewSession( createSessionState.SessionID, createSessionState.GameID.ToString(),
                                                                                TestAreaBase.users[0].MemberName,
                                                                                TestAreaBase.users[0].Password);
            Assert.IsTrue(sessionAfterLeave.Seats.Length == 1, "Error: Number of player is expected to be 1 but got "+
                          sessionAfterLeave.Seats.Length.ToString());
            try
            {
                this.GameSessionProxy.LeaveSession(createSessionState.SessionID, createSessionState.GameID.ToString(),
                                                                                    TestAreaBase.users[1].MemberName,
                                                                                    TestAreaBase.users[1].Password);
                Assert.Fail("Error: PLayer who already left session is leaving session again");
            }
            catch
            {
                //swallowing exception as a user is not expected to leave twice
            }
            SessionState sessionLeaveAgain = this.GameSessionProxy.ViewSession( createSessionState.SessionID, createSessionState.GameID.ToString(),
                                                                                TestAreaBase.users[0].MemberName,
                                                                                TestAreaBase.users[0].Password);
            Assert.IsTrue(sessionLeaveAgain.Seats.Length == 1, "Error: Expected  Number of Players is expected to be 2 but got " +
                          sessionLeaveAgain.Seats.Length.ToString());
        }

        /// <summary>
        /// Feature Test for LeaveSession to verify  player's loss on leave session if leave policy is set to LeavingUserLoses
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for LeaveSession to verify  player's loss on leave session if leave policy is set to LeavingUserLoses.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_LeaveSession_LeavingPlayerLoses()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 3, "Should have at least 3 users under <preExistingUsers> node in App.config for selected environment");

            SessionState createSessionState = null;
            SessionState preJoinSessionState = null;
            SessionState postJoinSessionState = null;
            SessionState preLeaveSessionState = null;
            SessionState postLeaveSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame", SessionLeavePolicy.LeavingUserLoses);

            //Create New Session
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData ,
                                                                     TestAreaBase.users[0].MemberName,
                                                                     TestAreaBase.users[0].Password);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            preJoinSessionState = createSessionState;

            // two more players joined the session
            for (int i = 1; i < 3; i++)
            {
                // Initialize JoinData
                JoinData joinData = InitializeJoinData(preJoinSessionState.GameID, preJoinSessionState.SessionID, i);

                //Join Session
                postJoinSessionState = this.GameSessionProxy.JoinSession(preJoinSessionState.SessionID.ToString(), joinData,
                                                                         TestAreaBase.users[i].MemberName,
                                                                         TestAreaBase.users[i].Password);
                //Assert SessionState
                AssertJoinSessionState(preJoinSessionState, postJoinSessionState);
                //updating seatavailable before next join session state resumes
                preJoinSessionState.SeatsAvailable = postJoinSessionState.SeatsAvailable;
            }

            long [] oldScores  =  new long [] { 
                                              long.Parse(GetLeaderboardValue("Losses", TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)),
                                              long.Parse(GetLeaderboardValue("Wins", TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)),
                                              long.Parse(GetLeaderboardValue("Wins", TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password))
                                              };

            //Player1 Leave Session
            this.GameSessionProxy.LeaveSession(postJoinSessionState.SessionID.ToString(), postJoinSessionState.GameID.ToString(),
                                                TestAreaBase.users[0].MemberName,
                                                TestAreaBase.users[0].Password);

            preLeaveSessionState = postJoinSessionState;

            //View Session after Leave
            postLeaveSessionState = this.GameSessionProxy.ViewSession(preLeaveSessionState.SessionID.ToString(), preLeaveSessionState.GameID.ToString(),
                                                                      TestAreaBase.users[1].MemberName,
                                                                      TestAreaBase.users[1].Password);

            //Assert SessionState
            AssertLeaveSessionState(preLeaveSessionState, postLeaveSessionState);

            Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME * Constants.NOTIFICATION_RETRIES);

            long[] newScores = new long[] { 
                                              long.Parse(GetLeaderboardValue("Losses", TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)),
                                              long.Parse(GetLeaderboardValue("Wins", TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)),
                                              long.Parse(GetLeaderboardValue("Wins", TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password))
                                              
                                          };
            //loss posted for the player leaving the session
            Assert.AreEqual<long>(oldScores[0] + 1, newScores[0], "Error: Result posted after a player left session is not as expected for " + TestAreaBase.users[0].MemberName);

            //no score change for the remaining players
            Assert.AreEqual<long>(oldScores[1], newScores[1], "Error: Result posted after a player left session is not as expected for " + TestAreaBase.users[1].MemberName);
            Assert.AreEqual<long>(oldScores[2], newScores[2], "Error: Result posted after a player left session is not as expected for " + TestAreaBase.users[2].MemberName);
        
            //verify session is not complete
            Assert.IsFalse(postLeaveSessionState.State.IsComplete, "Error: Session is not expected to be complete");
        }


        /// <summary>
        /// Feature Test for LeaveSession to verify  score is not updated  if leave policy is set to None
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for LeaveSession to verify  score is not updated  if leave policy is set to None.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_LeaveSession_NoScoreUpdateOnLeave()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 3, "Should have at least 3 users under <preExistingUsers> node in App.config for selected environment");

            SessionState createSessionState = null;
            SessionState preJoinSessionState = null;
            SessionState postJoinSessionState = null;
            SessionState preLeaveSessionState = null;
            SessionState postLeaveSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame", SessionLeavePolicy.None);

            //Create New Session
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData,
                                                                     TestAreaBase.users[0].MemberName,
                                                                     TestAreaBase.users[0].Password);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            preJoinSessionState = createSessionState;

            // Initialize JoinData
            JoinData joinData = InitializeJoinData(preJoinSessionState.GameID, preJoinSessionState.SessionID, 1);

            //Join Session
            postJoinSessionState = this.GameSessionProxy.JoinSession(preJoinSessionState.SessionID.ToString(), joinData,
                                                                         TestAreaBase.users[1].MemberName,
                                                                         TestAreaBase.users[1].Password);
            //Assert SessionState
            AssertJoinSessionState(preJoinSessionState, postJoinSessionState);
       

            long[] oldScores = new long[] { 
                                              long.Parse(GetLeaderboardValue("Losses", TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)),
                                              long.Parse(GetLeaderboardValue("Wins", TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password))
                                          };

            //Player1 Leave Session
            this.GameSessionProxy.LeaveSession(postJoinSessionState.SessionID.ToString(), postJoinSessionState.GameID.ToString(),
                                                TestAreaBase.users[0].MemberName,
                                                TestAreaBase.users[0].Password);

            preLeaveSessionState = postJoinSessionState;

            //View Session after Leave
            postLeaveSessionState = this.GameSessionProxy.ViewSession(preLeaveSessionState.SessionID.ToString(), preLeaveSessionState.GameID.ToString(),
                                                                      TestAreaBase.users[1].MemberName,
                                                                      TestAreaBase.users[1].Password);

            //Assert SessionState
            AssertLeaveSessionState(preLeaveSessionState, postLeaveSessionState);

            Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME * Constants.NOTIFICATION_RETRIES);

            long[] newScores = new long[] { 
                                              long.Parse(GetLeaderboardValue("Losses", TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)),
                                              long.Parse(GetLeaderboardValue("Wins", TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password))
                                              
                                          };

            //no score change for all players
            Assert.AreEqual<long>(oldScores[0] , newScores[0], "Error: Result posted after a player left session is not as expected for " + TestAreaBase.users[0].MemberName);

            Assert.AreEqual<long>(oldScores[1] , newScores[1], "Error: Result posted after a player left session is not as expected for " + TestAreaBase.users[1].MemberName);

            //verify session is not complete
            Assert.IsFalse(postLeaveSessionState.State.IsComplete, "Error: Session is not expected to be complete");
        }

        /// <summary>
        /// Feature Test for LeaveSession to verify  player's loss on leave session and all opponents win if leave policy is set to LeavingUserLosesOpponentsWin
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for LeaveSession to verify  player's loss on leave session and all opponents win if leave policy is set to LeavingUserLosesOpponentsWin.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_LeaveSession_AllOpponentsWin()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 3, "Should have at least 3 users under <preExistingUsers> node in App.config for selected environment");

            SessionState createSessionState = null;
            SessionState preJoinSessionState = null;
            SessionState postJoinSessionState = null;
            SessionState preLeaveSessionState = null;
            SessionState postLeaveSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame", SessionLeavePolicy.LeavingUserLosesOpponentsWin);

            //Create New Session
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData ,
                                                                     TestAreaBase.users[0].MemberName,
                                                                     TestAreaBase.users[0].Password);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            preJoinSessionState = createSessionState;

            // two more players joined the session
            for (int UserSeat = 1; UserSeat < 3; UserSeat++)
            {
                // Initialize JoinData
                JoinData joinData = InitializeJoinData(preJoinSessionState.GameID, preJoinSessionState.SessionID, UserSeat);

                //Join Session
                postJoinSessionState = this.GameSessionProxy.JoinSession(preJoinSessionState.SessionID.ToString(), joinData,
                                                                         TestAreaBase.users[UserSeat].MemberName,
                                                                         TestAreaBase.users[UserSeat].Password);
                //Assert SessionState
                AssertJoinSessionState(preJoinSessionState, postJoinSessionState);
                //updating seatavailable before next join session state resumes
                preJoinSessionState.SeatsAvailable = postJoinSessionState.SeatsAvailable;
            }

            long [] oldScores  =  new long [] { 
                                              long.Parse(GetLeaderboardValue("Losses", TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)),
                                              long.Parse(GetLeaderboardValue("Wins", TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)),
                                              long.Parse(GetLeaderboardValue("Wins", TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password))
                                              };

            //Player1 Leave Session
            this.GameSessionProxy.LeaveSession(postJoinSessionState.SessionID.ToString(), postJoinSessionState.GameID.ToString(),
                                                TestAreaBase.users[0].MemberName,
                                                TestAreaBase.users[0].Password);

            preLeaveSessionState = postJoinSessionState;           

            Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME * Constants.NOTIFICATION_RETRIES);

            long[] newScores = new long[] { 
                                              long.Parse(GetLeaderboardValue("Losses", TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)),
                                              long.Parse(GetLeaderboardValue("Wins", TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)),
                                              long.Parse(GetLeaderboardValue("Wins", TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password))
                                              
                                          };
            //loss posted for the player leaving the session
            Assert.AreEqual<long>(oldScores[0] + 1, newScores[0], "Error: Result posted after a player left session is not as expected for " + TestAreaBase.users[0].MemberName);

            //no score change for the remaining players
            Assert.AreEqual<long>(oldScores[1] + 1, newScores[1], "Error: Result posted after a player left session is not as expected for " + TestAreaBase.users[1].MemberName);
            Assert.AreEqual<long>(oldScores[2] + 1, newScores[2], "Error: Result posted after a player left session is not as expected for " + TestAreaBase.users[2].MemberName);

            for (int userIndx = 1; userIndx <= 2; userIndx++)
            {
                // Verify that all non-YouWin notifications are deleted and  youWIn is sent for opponent
                List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                                                                          createSessionState.GameID.ToString(),
                                                                          createSessionState.SessionID,
                                                                          0,
                                                                          string.Empty,
                                                                          100,
                                                                          String.Empty,
                                                                          false,
                                                                          TestAreaBase.users[userIndx].MemberName,
                                                                          TestAreaBase.users[userIndx].Password,
                                                                          null);

                Assert.IsNotNull(notifications);
                Assert.AreNotEqual<int>(notifications.Count, 0, "ERROR: You Win notification is not sent to the opponents.");
                Assert.AreEqual<int>(notifications.Count, 1, "ERROR: Unexpected  notifications is sent in addition to the YouWin notification.");
                Assert.AreEqual<Notification.NotificationType>(Notification.NotificationType.YouWin, notifications[0].Type, "Error: YouWin Notification is not send");
            }

            //View Session after Leave
            postLeaveSessionState = this.GameSessionProxy.ViewSession(preLeaveSessionState.SessionID.ToString(), preLeaveSessionState.GameID.ToString(),
                                                                      TestAreaBase.users[1].MemberName,
                                                                      TestAreaBase.users[1].Password);

            //Assert SessionState
            AssertLeaveSessionState(preLeaveSessionState, postLeaveSessionState);

            //verify session is complete
            Assert.IsTrue(postLeaveSessionState.State.IsComplete, "Error: Session is not complete as expected");
        }

        /// <summary>
        /// Feature Test for LeaveSession to verify  player's loss on leave session and all opponents win if leave policy is set to LeavingUserLosesOpponentsWin
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for LeaveSession to verify  player's loss on leave session and all opponents win if leave policy is set to LeavingUserLosesOpponentsWin.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_LeaveSession_LastPlayerLeftNoPlayerWin()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 3, "Should have at least 3 users under <preExistingUsers> node in App.config for selected environment");

            SessionState createSessionState = null;
            SessionState preJoinSessionState = null;
            SessionState postJoinSessionState = null;
            
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame", SessionLeavePolicy.LeavingUserLosesOpponentsWin);

            //Create New Session
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData,
                                                                     TestAreaBase.users[0].MemberName,
                                                                     TestAreaBase.users[0].Password);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            preJoinSessionState = createSessionState;
            
            // Initialize JoinData
            JoinData joinData = InitializeJoinData(preJoinSessionState.GameID, preJoinSessionState.SessionID, 1);

            //Join Session
            postJoinSessionState = this.GameSessionProxy.JoinSession(preJoinSessionState.SessionID.ToString(), joinData,
                                                                     TestAreaBase.users[1].MemberName,
                                                                     TestAreaBase.users[1].Password);
            //Assert SessionState
            AssertJoinSessionState(preJoinSessionState, postJoinSessionState);
                       
           

            //Player2 Leave Session
            this.GameSessionProxy.LeaveSession(postJoinSessionState.SessionID.ToString(), postJoinSessionState.GameID.ToString(),
                                                TestAreaBase.users[1].MemberName,
                                                TestAreaBase.users[1].Password);

            long[] oldScores = new long[] { 
                                              long.Parse(GetLeaderboardValue("Wins", TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)),
                                              long.Parse(GetLeaderboardValue("Wins", TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password))
                                          };


            //Player1 Leave Session
            this.GameSessionProxy.LeaveSession(postJoinSessionState.SessionID.ToString(), postJoinSessionState.GameID.ToString(),
                                                TestAreaBase.users[0].MemberName,
                                                TestAreaBase.users[0].Password);
          

            Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME * Constants.NOTIFICATION_RETRIES);

            long[] newScores = new long[] { 
                                              long.Parse(GetLeaderboardValue("Wins", TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password)),
                                              long.Parse(GetLeaderboardValue("Wins", TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password))
                                              
                                          };
            //loss posted for the player leaving the session
            Assert.AreEqual<long>(oldScores[0] , newScores[0], "Error: Result posted after a player left session is not as expected for " + TestAreaBase.users[0].MemberName);

            //no score change for the remaining players
            Assert.AreEqual<long>(oldScores[1] , newScores[1], "Error: Result posted after a player left session is not as expected for " + TestAreaBase.users[1].MemberName);
           
            }

        /// <summary>
        /// Feature Test for LeaveSession to verify  player's dont lose on leave session if he is the only player left, 
        /// if leave policy is set to LeavingUserLosesOpponentsWin
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description(" Feature Test for LeaveSession to verify  player's dont lose on leave session if he is the only player left,if leave policy is set to LeavingUserLosesOpponentsWin")]
        [TestProperty("Type", "FeatureTests")]
        public void N_LeaveSession_PlayerLeft1PlayerGame_NoLoss()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 1, "Should have at least 3 users under <preExistingUsers> node in App.config for selected environment");

            SessionState createSessionState = null;
           
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame", SessionLeavePolicy.LeavingUserLosesOpponentsWin);

            //Create New Session
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData,
                                                                     TestAreaBase.users[0].MemberName,
                                                                     TestAreaBase.users[0].Password);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            long oldScores = long.Parse(GetLeaderboardValue("Losses", TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password));


            //Player Leave Session
            this.GameSessionProxy.LeaveSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString(),
                                                TestAreaBase.users[0].MemberName,
                                                TestAreaBase.users[0].Password);


            Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME * Constants.NOTIFICATION_RETRIES);

            long newScores = long.Parse(GetLeaderboardValue("Losses", TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password));
            //loss posted for the player leaving the session
            Assert.AreEqual<long>(oldScores, newScores, "Error: Result posted after a player left session is not as expected for " + TestAreaBase.users[0].MemberName);

        }

        /// <summary>
        /// Feature Test for LeaveSession to verify  player's dont lose on leave session if he is the only player left, 
        /// if leave policy is set to LeavingUserLosesOpponentsWin
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description(" Feature Test for LeaveSession to verify  player's dont lose on leave session if he is the only player left,if leave policy is set to LeavingUserLoses")]
        [TestProperty("Type", "FeatureTests")]
        public void N_LeaveSession_1PlayerGame_NoLoss()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 1, "Should have at least 3 users under <preExistingUsers> node in App.config for selected environment");

            SessionState createSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame", SessionLeavePolicy.LeavingUserLoses);

            //Create New Session
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData,
                                                                     TestAreaBase.users[0].MemberName,
                                                                     TestAreaBase.users[0].Password);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            long oldScores = long.Parse(GetLeaderboardValue("Losses", TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password));


            //Player Leave Session
            this.GameSessionProxy.LeaveSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString(),
                                                TestAreaBase.users[0].MemberName,
                                                TestAreaBase.users[0].Password);


            Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME * Constants.NOTIFICATION_RETRIES);

            long newScores = long.Parse(GetLeaderboardValue("Losses", TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password));
            //loss posted for the player leaving the session
            Assert.AreEqual<long>(oldScores, newScores, "Error: Result posted after a player left session is not as expected for " + TestAreaBase.users[0].MemberName);

        }


        public string GetLeaderboardValue(string statEntry, string userName, string password)
        {
            LeaderboardResult result = this.NotificationsServiceProxy.GetLeaderboard(Constants.TESTGAMEID.ToString(), Constants.TESTGAMEVARIANT.ToString(), "Wins", "1", "W1", "100", "2", userName, password);
            Assert.IsNotNull(result, "No result was returned");

            if (result.Leaderboard == null)
            {
                return "0";
            }
            else
            {
                Assert.IsNotNull(result.Leaderboard, "No statistics were returned");
                Assert.AreNotEqual(0, result.Leaderboard.Count, "Leaderboard is empty");

                IList<Entry> entryList = result.Leaderboard[0].Statistics;
                IEnumerable<Entry> entries = (from e in entryList
                                              where e.Name == statEntry
                                              select e);
                int numEntries = entries.Count<Entry>();
                Assert.AreEqual(1, numEntries, "Error: Unexpected number of entries in response.");
                return entries.First<Entry>().Value;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Test.API\Sessions\ModifySession.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using LiveN.Test.Framework.Configuration;
using Multiplayer.Test.API;
using AsyncMultiplayer.SessionCommon;
using System.Net;
using System.Diagnostics;
using System.Threading;
using AsyncMultiplayer.NotificationService;
using LIVEN.Common.Diagnostics;
using System.Runtime.Serialization;
using LiveN.Test.Common.Web;

namespace MultiPlayer.Test.API
{
    /// <summary>
    /// Test Cases for Sessions.svc ModifySession API
    /// </summary>
    [TestClass]
    public class ModifySession : TestAreaBase
    {
        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
        }

        [TestInitialize()]
        public void MyTestInitialize()
        {
            
            LockTest();
        }

        [TestCleanup]
        public void TestCleanup()
        {
            UnlockTest();
        }

        /// <summary>
        /// BVT for Sessions.svc ModifySession API
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("BVT for Session.svc ModifySession API.")]
        [TestProperty("Type", "BVTs")]
        public void BVT_ModifySession()
        {
            SessionState createSessionState = null;
            SessionState modifySessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Create New Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            //We should have another player JoinSession to verify StateChagne notification as with current implementation
            //when owner modifies session and Sessions service try to send StateChange Notification to other players
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2;
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            // Initialize ModificationData
            ModificationData modificationData = InitializeModificationData(createSessionState);

            //Modify Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            this.GameSessionProxy.ModifySession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString(), modificationData);

            //View Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      //  player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            modifySessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert SessionState
            AssertModifySessionState(modificationData, createSessionState, modifySessionState);
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify New Owner can ModifySession
        /// Verifies when Owner will LeaveSession and next player assigned as Owner, new Owner can ModifySession
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify New Owner can ModifySession")]
        [TestProperty("Type", "FeatureTests")]
        public void P_ModifySession_NewOwnerModifySession()
        {
            SessionState createSessionState = null;
            SessionState modifySessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Create New Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2;
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            SessionState joinSessionState1 = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState1);

            //Player3 JoinSession
            joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 2);

            this.GameSessionProxy.UserID = TestAreaBase.users[2].MemberName;      // player2;
            this.GameSessionProxy.Password = TestAreaBase.users[2].Password;
            SessionState joinSessionState2= this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(joinSessionState1, joinSessionState2);

            //Player1 LeaveSession
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            this.GameSessionProxy.LeaveSession(joinSessionState2.SessionID.ToString(), joinSessionState2.GameID.ToString());

            //View Session after Leave
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            SessionState leaveSessionState = this.GameSessionProxy.ViewSession(joinSessionState2.SessionID.ToString(), joinSessionState2.GameID.ToString());

            //Assert SessionState
            AssertLeaveSessionState(joinSessionState2, leaveSessionState);

            // Initialize ModificationData
            ModificationData modificationData = InitializeModificationData(createSessionState);

            //Modify Session
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            this.GameSessionProxy.ModifySession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString(), modificationData);

            //View Session
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      //  player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            modifySessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert SessionState
            AssertModifySessionState(modificationData, createSessionState, modifySessionState);
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify Non-Owner can not ModifySession
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify Non-Owner can not ModifySession")]
        [TestProperty("Type", "FeatureTests")]
        public void P_ModifySession_NonOwnerModifySession()
        {
            SessionState createSessionState = null;
            SessionState joinSessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Create New Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2;
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            // Initialize ModificationData
            ModificationData modificationData = InitializeModificationData(joinSessionState);

            //Modify Session
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            try
            {
                this.GameSessionProxy.ModifySession(joinSessionState.SessionID.ToString(), joinSessionState.GameID.ToString(), modificationData);
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Forbidden, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.UserNotAllowedToModifySession), restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify Owner can ModifySession in middle of Game (after players make couple of Moves)
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify Owner can ModifySession in middle of Game (after players make couple of Moves)")]
        [TestProperty("Type", "FeatureTests")]
        public void P_ModifySession_InMiddleOfGame()
        {
            SessionState createSessionState = null;
            SessionState joinSessionState = null;
            SessionState modifySessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Create New Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2;
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            //Make Move (PutGameState) by Player1
            ModifiableGameState modifiableGameState1 = new ModifiableGameState();
            modifiableGameState1.ActiveSeatIndex = 1;
            modifiableGameState1.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;
            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState1);

            //Make Move (PutGameState) by Player2
            ModifiableGameState modifiableGameState2 = new ModifiableGameState();
            modifiableGameState2.ActiveSeatIndex = 0;
            modifiableGameState2.GameData = new byte[] { 60, 61, 62, 63, 64 };

            this.GameStateProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameStateProxy.Password = TestAreaBase.users[1].Password;
            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState2);

            // Initialize ModificationData
            ModificationData modificationData = InitializeModificationData(joinSessionState);

            //Modify Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            this.GameSessionProxy.ModifySession(joinSessionState.SessionID.ToString(), joinSessionState.GameID.ToString(), modificationData);

            //View Session
            modifySessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert SessionState
            AssertModifySessionState(modificationData, joinSessionState, modifySessionState);
       }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify NotExist SessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify NotExist SessionID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ModifySession_NotExistSessionID()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Player1 creates Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            //Player ModifySession with Not Exist SessionID
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            ModificationData modificationData = InitializeModificationData(createSessionState);

            try
            {
                this.GameSessionProxy.ModifySession("j6b048d0-15gd-4i9d-8f65-91bz93s762f5", createSessionState.GameID.ToString(), modificationData);
            }
            catch (RestException restEx)
            {                
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify String.Empty as SessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify String.Empty as SessionID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ModifySession_EmptyStringSessionID()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Player1 creates Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            //Player ModifySession with Not Exist SessionID
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            ModificationData modificationData = InitializeModificationData(createSessionState);

            try
            {
                this.GameSessionProxy.ModifySession(String.Empty, createSessionState.GameID.ToString(), modificationData);
                Assert.Fail("Error: Expected to get NOT FOUND exception ,it didn't");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.MethodNotAllowed, restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify null as SessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify null as SessionID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ModifySession_NullSessionID()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Player1 creates Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            //Player ModifySession with Not Exist SessionID
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            ModificationData modificationData = InitializeModificationData(createSessionState);

            try
            {
                this.GameSessionProxy.ModifySession(null, createSessionState.GameID.ToString(), modificationData);
                Assert.Fail("Error: Expected to get METHOD NOT ALLOWED exception, it didnt");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.MethodNotAllowed, restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify Long String as SessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify Long String as SessionID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ModifySession_GTMaxLengthStringSessionID()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Player1 creates Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            //Player ModifySession with Not Exist SessionID
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            ModificationData modificationData = InitializeModificationData(createSessionState);

            try
            {
                this.GameSessionProxy.ModifySession("ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz012", createSessionState.GameID.ToString(), modificationData);
            }
            catch (RestException restEx)
            {
                //TODO: Currently it's throwing 500 HTTP code. Filed bug 4167. Update HTTP Status Code if 4167 is Fixed to change the HTTP Status Code
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify One Char as SessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify One Char String as SessionID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ModifySession_OneCharStringSessionID()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Player1 creates Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            //Player ModifySession with Not Exist SessionID
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            ModificationData modificationData = InitializeModificationData(createSessionState);

            try
            {
                this.GameSessionProxy.ModifySession("1", createSessionState.GameID.ToString(), modificationData);
            }
            catch (RestException restEx)
            {
                //TODO: Currently it's throwing 500 HTTP code. Filed bug 4167. Update HTTP Status Code if 4167 is Fixed to change the HTTP Status Code
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }
        }               
              
        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify String.Empty as GameID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify String.Empty as GameID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ModifySession_EmptyStringGameID()
        {
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            AssertCreateSessionState(creationData, createSessionState);


            //ModifySession with GameID as Min of uint
            ModificationData modificationData = InitializeModificationData(createSessionState);

            try
            {
                this.GameSessionProxy.ModifySession(createSessionState.SessionID, String.Empty, modificationData);
            }
            catch (RestException restEx)
            {            
                VerifyException(HttpStatusCode.NotFound, restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify null as GameID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify null GameID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ModifySession_NullGameID()
        {
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            AssertCreateSessionState(creationData, createSessionState);


            //ModifySession with GameID as Min of uint
            ModificationData modificationData = InitializeModificationData(createSessionState);

            try
            {
                this.GameSessionProxy.ModifySession(createSessionState.SessionID, null, modificationData);
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify Invalid Format GameID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify Long String as GameID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ModifySession_InvalidFormatGameID()
        {
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            AssertCreateSessionState(creationData, createSessionState);


            //ModifySession with GameID as Min of uint
            ModificationData modificationData = InitializeModificationData(createSessionState);

            string GameIdRndm = GetInvalidGameId();

            try
            {
                this.GameSessionProxy.ModifySession(createSessionState.SessionID, GameIdRndm, modificationData);
            }
            catch (RestException restEx)
            {              
                //TODO: Currently it's throwing 405 HTTP code with html error message. Filed bug 4168. Update below verification after Bug 4168 is Fixed.
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidGameIDFormatWhileGettingIdentity), restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify One Char String as GameID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify One Char String as GameID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ModifySession_OneCharStringGameID()
        {
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            AssertCreateSessionState(creationData, createSessionState);


            //ModifySession with GameID as Min of uint
            ModificationData modificationData = InitializeModificationData(createSessionState);

            try
            {
                this.GameSessionProxy.ModifySession(createSessionState.SessionID, "1", modificationData);
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDDoesNotMatchPartnerTokenTitleID), restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify Null ModificationData
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify Null ModificationData")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ModifySession_NullModificationData()
        {
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            AssertCreateSessionState(creationData, createSessionState);

            try
            {
                this.GameSessionProxy.ModifySession(createSessionState.SessionID, createSessionState.GameID.ToString(), null);
            }
            catch (NullReferenceException ex)
            {
                Assert.AreEqual("Object reference not set to an instance of an object.", ex.Message, "Did not throw correct exception");
            }
            catch (RestException restEx)
            {
                //VerifyException(400, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDOrVariantIsNotInGMS), restEx.Response);

                //TODO: Currently it's throwing 404 HTTP code with html error message. Filed bug 4168. Update below verification after Bug 4168 is Fixed.
                VerifyException(500, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.UnexpectedExceptionInSessionService), restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify Invalid Action for InactivityWarningBehavior.Action in ModificationData
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify Invalid Action for InactivityWarningBehavior ModificationData")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ModifySession_ModificationData_InactivityWarning_InvalidAction()
        {
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            AssertCreateSessionState(creationData, createSessionState);


            //ModifySession with Invalid InactivityWarning.Action 
            ModificationData modificationData = InitializeModificationData(createSessionState);

            modificationData.InactivityWarning.Action = (InactivityWarningAction)4;

            try
            {
                this.GameSessionProxy.ModifySession(createSessionState.SessionID, createSessionState.GameID.ToString(), modificationData);
                Assert.Fail("Session is Modified with Invalid Action set to InactivityWarningBehavior.Action");
            }
            catch (SerializationException serialEx)
            {
                string message = serialEx.Message;
            }
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify Interval = 0 for InactivityWarningBehavior.Interval in ModificationData
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify Interval = 0 for InactivityWarningBehavior.Interval in ModificationData")]
        [TestProperty("Type", "FeatureTests")]
        public void P_ModifySession_ModificationData_InactivityWarning_Interval_Zero()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2;
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            //ModifySession with GameID as Min of uint
            ModificationData modificationData = InitializeModificationData(createSessionState);

            modificationData.InactivityWarning.Interval = 0;

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            this.GameSessionProxy.ModifySession(createSessionState.SessionID, createSessionState.GameID.ToString(), modificationData);

            //View Session
            SessionState modifySessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert SessionState
            AssertModifySessionState(modificationData, joinSessionState, modifySessionState);
            Assert.AreEqual(0, modifySessionState.InactivityWarning.Interval, "Session Modified Incorrectly - Interval should set to 0");
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify Interval = -1 for InactivityWarningBehavior.Interval in ModificationData
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify Interval = -1 for InactivityWarningBehavior.Interval in ModificationData")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ModifySession_ModificationData_InactivityWarning_Interval_Negative()
        {
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            AssertCreateSessionState(creationData, createSessionState);


            //ModifySession with GameID as Min of uint
            ModificationData modificationData = InitializeModificationData(createSessionState);

            modificationData.InactivityWarning.Interval = -1;

            try
            {
                this.GameSessionProxy.ModifySession(createSessionState.SessionID, createSessionState.GameID.ToString(), modificationData);
                Assert.Fail("Session is Modified with InactivityWarning.Interval set to Negative value");
            }
            catch (RestException restEx)
            {
                string message = restEx.Message;
            }
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify Interval = Int.MinValue for InactivityWarningBehavior.Interval in ModificationData
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify Interval = Int.MinValue for InactivityWarningBehavior.Interval in ModificationData")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ModifySession_ModificationData_InactivityWarning_Interval_MinInt()
        {
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            AssertCreateSessionState(creationData, createSessionState);


            //ModifySession with GameID as Min of uint
            ModificationData modificationData = InitializeModificationData(createSessionState);

            modificationData.InactivityWarning.Interval = int.MinValue;

            try
            {
                this.GameSessionProxy.ModifySession(createSessionState.SessionID, createSessionState.GameID.ToString(), modificationData);
                Assert.Fail("Session is Modified with InactivityWarning.Interval set to int.MinValue");
            }
            catch (RestException restEx)
            {
                string message = restEx.Message;
            }
        }

        //Bug 9056
        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify Interval = Int.MaxValue for InactivityWarningBehavior.Interval in ModificationData
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify Interval = Int.MaxValue for InactivityWarningBehavior.Interval in ModificationData")]
        [TestProperty("Type", "FeatureTests")]
        public void P_ModifySession_ModificationData_InactivityWarning_Interval_MaxInt()
        {
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            AssertCreateSessionState(creationData, createSessionState);


            //ModifySession with Inactivity Interval as Max of int
            ModificationData modificationData = InitializeModificationData(createSessionState);

            modificationData.InactivityWarning.Interval = int.MaxValue; //this behaviour is allowed

            try
            {
                this.GameSessionProxy.ModifySession(createSessionState.SessionID, createSessionState.GameID.ToString(), modificationData);

            }
            catch (RestException restEx)
            {
                string message = restEx.Message;
            }
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify Nudges = 0 for InactivityWarningBehavior.Interval in ModificationData
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify Nudges = 0 for InactivityWarningBehavior.Interval in ModificationData")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ModifySession_ModificationData_InactivityWarning_MaxNumberOfNudges_Zero()
        {
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            AssertCreateSessionState(creationData, createSessionState);


            //ModifySession with GameID as Min of uint
            ModificationData modificationData = InitializeModificationData(createSessionState);

            modificationData.InactivityWarning.MaxNumberOfNudges = 0;
            
            //possible to send inactivity warning with no prior nudges sent
            this.GameSessionProxy.ModifySession(createSessionState.SessionID, createSessionState.GameID.ToString(), modificationData);
                
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify Nudges = -1 for InactivityWarningBehavior.Interval in ModificationData
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify Nudges = -1 for InactivityWarningBehavior.Interval in ModificationData")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ModifySession_ModificationData_InactivityWarning_MaxNumberOfNudges_Negative()
        {
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            AssertCreateSessionState(creationData, createSessionState);


            //ModifySession with GameID as Min of uint
            ModificationData modificationData = InitializeModificationData(createSessionState);

            modificationData.InactivityWarning.MaxNumberOfNudges = -1;

            try
            {
                this.GameSessionProxy.ModifySession(createSessionState.SessionID, createSessionState.GameID.ToString(), modificationData);
                Assert.Fail("Session is Modified with InactivityWarning.MaxNumberOfNudges set to Negative value");
            }
            catch (RestException restEx)
            {
                string message = restEx.Message;
            }
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify Nudges = Int.MinValue for InactivityWarningBehavior.Interval in ModificationData
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify Nudges = Int.MinValue for InactivityWarningBehavior.Interval in ModificationData")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ModifySession_ModificationData_InactivityWarning_MaxNumberOfNudges_MinInt()
        {
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            AssertCreateSessionState(creationData, createSessionState);


            //ModifySession with GameID as Min of uint
            ModificationData modificationData = InitializeModificationData(createSessionState);

            modificationData.InactivityWarning.MaxNumberOfNudges = int.MinValue;

            try
            {
                this.GameSessionProxy.ModifySession(createSessionState.SessionID, createSessionState.GameID.ToString(), modificationData);
                Assert.Fail("Session is Modified with InactivityWarning.MaxNumberOfNudges set to int.MinValue");
            }
            catch (RestException restEx)
            {
                string message = restEx.Message;
            }
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify Nudges = Int.MaxValue for InactivityWarningBehavior.Interval in ModificationData
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify Nudges = Int.MaxValue for InactivityWarningBehavior.Interval in ModificationData")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ModifySession_ModificationData_InactivityWarning_MaxNumberOfNudges_MaxInt()
        {
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            AssertCreateSessionState(creationData, createSessionState);


            //ModifySession with GameID as Min of uint
            ModificationData modificationData = InitializeModificationData(createSessionState);

            modificationData.InactivityWarning.MaxNumberOfNudges = int.MaxValue;

            try
            {
                this.GameSessionProxy.ModifySession(createSessionState.SessionID, createSessionState.GameID.ToString(), modificationData);
                Assert.Fail("Session is Modified with InactivityWarning.MaxNumberOfNudges set to int.MaxValue");
            }
            catch (RestException restEx)
            {
                string message = restEx.Message;
            }
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify Set TotalSeats = 0 is not allowed
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify Set TotalSeats = 0 is not allowed")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ModifySession_ModificationData_TotalSeatsAvailable_Zero()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 3, "Should have at least 3 users under <preExistingUsers> node in App.config for selected environment");
            SessionState createSessionState = null;
            SessionState modifySessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Create New Session         
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData,
                                                                     TestAreaBase.users[0].MemberName,
                                                                     TestAreaBase.users[0].Password);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            //We should have another player JoinSession to verify StateChagne notification as with current implementation
            //when owner modifies session and Sessions service try to send StateChange Notification to other players
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);
   
            SessionState joinSessionState1 = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData,
                                                                               TestAreaBase.users[1].MemberName,
                                                                               TestAreaBase.users[1].Password);

            AssertJoinSessionState(createSessionState, joinSessionState1);

            // Initialize ModificationData
            ModificationData modificationData = InitializeModificationData(createSessionState);
            modificationData.TotalSeatsAvailable = 0;
            modificationData.ReservedSeatsAvailable = 0;

            //Modify Session               
            try
            {
                this.GameSessionProxy.ModifySession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString(), modificationData,
                                                    TestAreaBase.users[0].MemberName,
                                                    TestAreaBase.users[0].Password);
                Assert.Fail("Expecting Forbidden as one cant modify session with 0 total seats.");
            }
            catch (RestException ex)
            {                
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidTotalSeatsAvailable), ex.Response);
            }                       

            //View Session
            modifySessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString(),
                                                                   TestAreaBase.users[0].MemberName,
                                                                   TestAreaBase.users[0].Password);

            //join session as empty seats has not been trimmed
            joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 2);
            SessionState joinSessionState2 = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData,
                                                                               TestAreaBase.users[2].MemberName,
                                                                               TestAreaBase.users[2].Password);
                
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify TotalSeatsAvailable = -1 for in ModificationData
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify TotalSeatsAvailable = -1 for in ModificationData")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ModifySession_ModificationData_TotalSeatsAvailable_Negative()
        {
            SessionState createSessionState = null;
            SessionState modifySessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Create New Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            //We should have another player JoinSession to verify StateChagne notification as with current implementation
            //when owner modifies session and Sessions service try to send StateChange Notification to other players
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2;
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            // Initialize ModificationData
            ModificationData modificationData = InitializeModificationData(createSessionState);
            modificationData.TotalSeatsAvailable = -1;
            modificationData.ReservedSeatsAvailable = -1;

            //Modify Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            try
            {
                this.GameSessionProxy.ModifySession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString(), modificationData);
            }
            catch (RestException restEx)
            {
                string msg = restEx.Message;
            }

            //View Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      //  player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            modifySessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //TODO: Need to update after Bug 3674 is Fixed

            //Assert SessionState
            //AssertModifySessionState(modificationData, createSessionState, modifySessionState);
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify TotalSeatsAvailable = int.MinValue for in ModificationData
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify TotalSeatsAvailable = int.MinValue for in ModificationData")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ModifySession_ModificationData_TotalSeatsAvailable_MinInt()
        {
            SessionState createSessionState = null;
            SessionState modifySessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Create New Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            //We should have another player JoinSession to verify StateChagne notification as with current implementation
            //when owner modifies session and Sessions service try to send StateChange Notification to other players
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2;
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            // Initialize ModificationData
            ModificationData modificationData = InitializeModificationData(createSessionState);
            modificationData.TotalSeatsAvailable = int.MinValue;
            modificationData.ReservedSeatsAvailable = int.MinValue;

            //Modify Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            try
            {
                this.GameSessionProxy.ModifySession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString(), modificationData);
            }
            catch (RestException restEx)
            {
                string msg = restEx.Message;
            }

            //View Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      //  player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            modifySessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //TODO: Need to update after Bug 3674 is Fixed

            //Assert SessionState
            //AssertModifySessionState(modificationData, createSessionState, modifySessionState);
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify TotalSeatsAvailable = int.MaxValue for in ModificationData
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify TotalSeatsAvailable = int.MaxValue for in ModificationData")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ModifySession_ModificationData_TotalSeatsAvailable_MaxInt()
        {
            SessionState createSessionState = null;
            SessionState modifySessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Create New Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            //We should have another player JoinSession to verify StateChagne notification as with current implementation
            //when owner modifies session and Sessions service try to send StateChange Notification to other players
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2;
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            // Initialize ModificationData
            ModificationData modificationData = InitializeModificationData(createSessionState);
            modificationData.TotalSeatsAvailable = int.MaxValue;
            modificationData.ReservedSeatsAvailable = int.MaxValue;

            //Modify Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            try
            {
                this.GameSessionProxy.ModifySession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString(), modificationData);
            }
            catch (RestException restEx)
            {
                string msg = restEx.Message;
            }

            //View Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      //  player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            modifySessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //TODO: Need to update after Bug 3674 is Fixed

            //Assert SessionState
            //AssertModifySessionState(modificationData, createSessionState, modifySessionState);
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify Set ReservedSeats = 0 when Players exist in Session
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify Set ReservedSeats = 0 when Players exist in Session")]
        [TestProperty("Type", "FeatureTests")]
        public void P_ModifySession_ModificationData_ReservedSeatsAvailable_Zero()
        {
            SessionState createSessionState = null;
            SessionState modifySessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Create New Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            //We should have another player JoinSession to verify StateChagne notification as with current implementation
            //when owner modifies session and Sessions service try to send StateChange Notification to other players
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2;
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            SessionState joinSessionState1 = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState1);

            // Initialize ModificationData
            ModificationData modificationData = InitializeModificationData(createSessionState);
            modificationData.ReservedSeatsAvailable = 0;

            //Modify Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            this.GameSessionProxy.ModifySession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString(), modificationData);

            //View Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      //  player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            modifySessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 2);

            this.GameSessionProxy.UserID = TestAreaBase.users[2].MemberName;      // player3;
            this.GameSessionProxy.Password = TestAreaBase.users[2].Password;

            //TODO: Update this when Bug 4595 fixed
            try
            {
                SessionState joinSessionState2 = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);                
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Forbidden, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.NoMoreSeatsInSession), restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify ReservedSeatsAvailable = -1 for in ModificationData
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify ReservedSeatsAvailable = -1 for in ModificationData")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ModifySession_ModificationData_ReservedSeatsAvailable_Negative()
        {
            SessionState createSessionState = null;
            SessionState modifySessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Create New Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            //We should have another player JoinSession to verify StateChagne notification as with current implementation
            //when owner modifies session and Sessions service try to send StateChange Notification to other players
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2;
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            // Initialize ModificationData
            ModificationData modificationData = InitializeModificationData(createSessionState);
            modificationData.TotalSeatsAvailable = -1;
            modificationData.ReservedSeatsAvailable = -1;

            //Modify Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            try
            {
                this.GameSessionProxy.ModifySession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString(), modificationData);
            }
            catch (RestException restEx)
            {
                string msg = restEx.Message;
            }

            //View Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      //  player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            modifySessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //TODO: Need to update after Bug 3674 is Fixed

            //Assert SessionState
            //AssertModifySessionState(modificationData, createSessionState, modifySessionState);
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify ReservedSeatsAvailable = int.MinValue for in ModificationData
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify ReservedSeatsAvailable = int.MinValue for in ModificationData")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ModifySession_ModificationData_ReservedSeatsAvailable_MinInt()
        {
            SessionState createSessionState = null;
            SessionState modifySessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Create New Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            //We should have another player JoinSession to verify StateChagne notification as with current implementation
            //when owner modifies session and Sessions service try to send StateChange Notification to other players
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2;
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            // Initialize ModificationData
            ModificationData modificationData = InitializeModificationData(createSessionState);
            modificationData.TotalSeatsAvailable = -1;
            modificationData.ReservedSeatsAvailable = int.MinValue;

            //Modify Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            try
            {
                this.GameSessionProxy.ModifySession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString(), modificationData);
            }
            catch (RestException restEx)
            {
                string msg = restEx.Message;
            }

            //View Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      //  player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            modifySessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //TODO: Need to update after Bug 3674 is Fixed

            //Assert SessionState
            //AssertModifySessionState(modificationData, createSessionState, modifySessionState);
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify ReservedSeatsAvailable = int.MaxValue for in ModificationData
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify ReservedSeatsAvailable = int.MaxValue for in ModificationData")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ModifySession_ModificationData_ReservedSeatsAvailable_MaxInt()
        {
            SessionState createSessionState = null;
            SessionState modifySessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Create New Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            //We should have another player JoinSession to verify StateChagne notification as with current implementation
            //when owner modifies session and Sessions service try to send StateChange Notification to other players
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2;
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            // Initialize ModificationData
            ModificationData modificationData = InitializeModificationData(createSessionState);
            modificationData.TotalSeatsAvailable = -1;
            modificationData.ReservedSeatsAvailable = int.MaxValue;

            //Modify Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            try
            {
                this.GameSessionProxy.ModifySession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString(), modificationData);
            }
            catch (RestException restEx)
            {
                string msg = restEx.Message;
            }

            //View Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      //  player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            modifySessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //TODO: Need to update after Bug 3674 is Fixed

            //Assert SessionState
            //AssertModifySessionState(modificationData, createSessionState, modifySessionState);
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify Exception when Partner token TitleID not match GameID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify Exception when Partner token TitleID not match GameID")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ModifySession_GameIdNotMatchPartnerTokenTitleID()
        {
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            AssertCreateSessionState(creationData, createSessionState);


            //ModifySession with GameID  not matching Partner Token TiteID
            ModificationData modificationData = InitializeModificationData(createSessionState);

            Random rndm = new Random();
            uint RandomGameId = uint.MinValue;

            do
            {
                RandomGameId = (uint)rndm.Next();
            }
            while (uint.Parse(Config.Environment.StsSettings.TitleId) == RandomGameId);

            try
            {
                this.GameSessionProxy.ModifySession(createSessionState.SessionID, RandomGameId.ToString(), modificationData);
                Assert.Fail(string.Format("ModifySession should not be allowed for an invalid game ID ({0})", RandomGameId.ToString()));
            }
            catch (RestException restEx)
            {
                //TODO: It's incorrently throwing 500 Internal Server exception. Bug 4201 is filed. Update this when Bug 4201 is Fixed
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDDoesNotMatchPartnerTokenTitleID), restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify SessionParametrs lengths is less than 64k in ModificationData
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify SessionParametrs lengths is less than 64k in ModificationData")]
        [TestProperty("Type", "FeatureTests")]
        public void N_ModifySession_ModificationData_SessionParametersGreaterThan64K()
        {
            SessionState createSessionState = null;
          
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Create New Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);
            
            //join session by player2
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2;
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            // Initialize ModificationData
            ModificationData modificationData = InitializeModificationData(createSessionState);

            //create bytes > 64k for SessionParameters
            modificationData.SessionParameters = GenerateRandomBytes(64 * 1024 + 1);

            //Modify Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            try
            {
                this.GameSessionProxy.ModifySession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString(), modificationData);
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.BadRequest, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionParametersTooLongInModifySession), restEx.Response);
            }
        }

        /// <summary>
        /// FeatureTest for Sessions.svc ModifySession API - to verify SessionParametrs lengths equals 64k in ModificationData
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("FeatureTest for Sessions.svc ModifySession API - to verify SessionParametrs lengths equals 64k in ModificationData")]
        [TestProperty("Type", "FeatureTests")]
        public void P_ModifySession_ModificationData_SessionParametersEqualTo64K()
        {
            SessionState createSessionState = null;
            SessionState modifySessionState = null;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Create New Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //Assert SessionState
            AssertCreateSessionState(creationData, createSessionState);

            //join session by player2
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2;
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            // Initialize ModificationData
            ModificationData modificationData = InitializeModificationData(createSessionState);

            //create bytes > 64k for SessionParameters
            modificationData.SessionParameters = GenerateRandomBytes(64 * 1024 -1);

            //Modify Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            this.GameSessionProxy.ModifySession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString(), modificationData);

            //View Session
            modifySessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Assert SessionState
            AssertModifySessionState(modificationData, createSessionState, modifySessionState);
               
        }

        
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Test.API\Sessions\JoinSession.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using LiveN.Test.Framework.Configuration;
using Multiplayer.Test.API;
using AsyncMultiplayer.SessionCommon;
using System.Net;
using System.Diagnostics;
using System.Threading;
using AsyncMultiplayer.NotificationService;
using Gds.Contracts;
using LIVEN.Common.Diagnostics;
using Multiplayer.Test.UserAccounts;
using LiveN.Test.Common.Web;
using LiveN.Test.Framework;

namespace MultiPlayer.Test.API
{
    /// <summary>
    /// Test Cases for Sessions.svc JoinSession API
    /// </summary>
    [TestClass]
    public class JoinSession : TestAreaBase
    {
        
        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
        }

        [TestInitialize()]
        public void MyTestInitialize()
        {
            LockTest();
        }

        [TestCleanup]
        public void TestCleanup()
        {
            this.GameSessionProxy.Locale = "en-US";
            UnlockTest();
        }

        /// <summary>
        /// BVT test for Sessions.svc JoinSession API
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("BVT for Sessions.svc JoinSession API.")]
        [TestProperty("Type", "BVTs")]
        public void BVT_JoinSession()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "Should have at least 2 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            //TODO: this won't always work, as we hardcode accounts and not all environments have two pre-existing users
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2;
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);
        }

        /// <summary>
        /// Test for Multiple Players JoinSession
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc JoinSession API to verify Multiple Players JoinSession.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_JoinSession_MultiplePlayers_5()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 5, "Should have at least 5 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            JoinData joinData1 = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            //TODO: this won't always work, as we hardcode accounts and not all environments have four pre-existing users
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            SessionState joinSessionState1 = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData1);

            AssertJoinSessionState(createSessionState, joinSessionState1);

            string memberName = TestAreaBase.users[0].MemberName;      // player1
            string password = TestAreaBase.users[0].Password;

            //Player3 JoinSession
            JoinData joinData2 = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 2);

            //TODO: this won't always work, as we hardcode accounts and not all environments have four pre-existing users
            this.GameSessionProxy.UserID = TestAreaBase.users[2].MemberName;      // player3
            this.GameSessionProxy.Password = TestAreaBase.users[2].Password;
            SessionState joinSessionState2 = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData2);

            AssertJoinSessionState(joinSessionState1, joinSessionState2);

            //Player4 JoinSession
            JoinData joinData3 = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 3);

            //TODO: this won't always work, as we hardcode accounts and not all environments have four pre-existing users
            this.GameSessionProxy.UserID = TestAreaBase.users[3].MemberName;      // player4
            this.GameSessionProxy.Password = TestAreaBase.users[3].Password;
            SessionState joinSessionState3 = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData3);

            AssertJoinSessionState(joinSessionState2, joinSessionState3);

            //Player5 JoinSession
            JoinData joinData4 = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 4);

            //TODO: this won't always work, as we hardcode accounts and not all environments have four pre-existing users
            this.GameSessionProxy.UserID = TestAreaBase.users[4].MemberName;      // player5
            this.GameSessionProxy.Password = TestAreaBase.users[4].Password;
            SessionState joinSessionState4 = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData4);

            AssertJoinSessionState(joinSessionState3, joinSessionState4);
        }

        /// <summary>
        /// Test for a Player Join Multiple Sessions
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc JoinSession API to verify a Player can Join in Multiple Sessions.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_JoinSession_PlayerJoinMultipleSessions()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "Should have at least 2 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData1 = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame1");

            //Player1 creates 3 Sessions
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState createSessionState1 = this.GameSessionProxy.CreateSession(creationData1.GameID.ToString(), creationData1);
            AssertCreateSessionState(creationData1, createSessionState1);

            CreationData creationData2 = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame2");
            SessionState createSessionState2 = this.GameSessionProxy.CreateSession(creationData2.GameID.ToString(), creationData2);
            AssertCreateSessionState(creationData2, createSessionState2);

            CreationData creationData3 = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame3");
            SessionState createSessionState3 = this.GameSessionProxy.CreateSession(creationData3.GameID.ToString(), creationData3);
            AssertCreateSessionState(creationData3, createSessionState3);

            //Player2 Join 3 Sessions
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            JoinData joinData1 = InitializeJoinData(createSessionState1.GameID, createSessionState1.SessionID, 1);

            SessionState joinSessionState1 = this.GameSessionProxy.JoinSession(createSessionState1.SessionID, joinData1);

            AssertJoinSessionState(createSessionState1, joinSessionState1);

            JoinData joinData2 = InitializeJoinData(createSessionState2.GameID, createSessionState2.SessionID, 1);

            SessionState joinSessionState2 = this.GameSessionProxy.JoinSession(createSessionState2.SessionID, joinData2);

            AssertJoinSessionState(createSessionState2, joinSessionState2);

            JoinData joinData3 = InitializeJoinData(createSessionState3.GameID, createSessionState3.SessionID, 1);

            SessionState joinSessionState3 = this.GameSessionProxy.JoinSession(createSessionState3.SessionID, joinData3);

            AssertJoinSessionState(createSessionState3, joinSessionState3);
        }


        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Verify that invite notification will be deleted once the player acceped the invitation(joins the session)")]
        [TestProperty("Type", "Feature")]
        public void P_JoinSession_InviteNotification()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "Should have at least 2 users under <preExistingUsers> node in App.config for selected environment");
            //Delete preloaded notifications for the users we are going to use
            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            //send invite
            TestAreaBase.notificationCommon.SendInviteRequest(createSessionState.SessionID, createSessionState.GameID, false, TestAreaBase.users[1].MemberName, 0);

            //verify invitation notification
            VerifyNotification(createSessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.Invitation, true, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2;
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            Thread.Sleep(20000);

            //verify that invite notification gets deleted after joining a session
            List<Notification> notifications = this.NotificationsServiceProxy.GetNotifications(
                createSessionState.GameID.ToString(),
                createSessionState.SessionID,
                0,
                Constants.IGNORE_lAST_ID,
                100,
                Notification.NotificationType.Invitation.ToString(),
                false,
                TestAreaBase.users[1].MemberName,
                TestAreaBase.users[1].Password,
                null);
            Assert.IsNotNull(notifications);
            Assert.AreEqual(0, notifications.Count, "Error: Unexpected number of notifications.");
        }

        /// <summary>
        /// Test for a Player can Re-JoinSession
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc JoinSession API to verify a Player can Re-Join in Sessions.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_JoinSession_PlayerReJoinSession()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "Should have at least 2 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Player1 creates Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState1 = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState1);

            //Player2 LeaveSession
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            this.GameSessionProxy.LeaveSession(joinSessionState1.SessionID.ToString(), joinSessionState1.GameID.ToString());

            //View Session after Leave
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            SessionState leaveSessionState = this.GameSessionProxy.ViewSession(joinSessionState1.SessionID.ToString(), joinSessionState1.GameID.ToString());

            //Assert SessionState
            AssertLeaveSessionState(joinSessionState1, leaveSessionState);

            //Player2 Re-Join Session
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            JoinData joinData2 = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState2 = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData2);

            AssertJoinSessionState(createSessionState, joinSessionState2);
        }

        /// <summary>
        /// Test to verify Owner of one Session can JoinSession owned by another user
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc JoinSession API to verify Owner of one session can Join in Session owned by another User.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_JoinSession_OwnerJoinOtherSession()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "Should have at least 2 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData1 = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame1");

            //Player1 creates Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState createSessionState1 = this.GameSessionProxy.CreateSession(creationData1.GameID.ToString(), creationData1);
            AssertCreateSessionState(creationData1, createSessionState1);

            //Player2 Create another Session
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            CreationData creationData2 = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame2");

            SessionState createSessionState2 = this.GameSessionProxy.CreateSession(creationData2.GameID.ToString(), creationData2);

            AssertCreateSessionState(creationData2, createSessionState2);

            //Player1 JoinSession in Session Created by Player2
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            JoinData joinData = InitializeJoinData(createSessionState2.GameID, createSessionState2.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState2.SessionID, joinData);

            AssertJoinSessionState(createSessionState2, joinSessionState);
        }

        /// <summary>
        /// Test to verify Owner Re-JoinSession when no other players not joined yet
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc JoinSession API to verify Owner of one session can Join in Session owned by another User.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_JoinSession_OwnerReJoinSession_NoPlayersInSession()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame1");

            //Player1 creates Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            //related bugs 1987, 3300 gets Fixed
            this.GameSessionProxy.LeaveSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            //Verify that playet is out of the session
            try
            {
                this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());
                Assert.Fail("Expecting Forbidden since the user should not be in the session by now.");
            }
            catch (RestException ex)
            {
                VerifyException(HttpStatusCode.Forbidden, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.UserNotAllowedToGetStateInSession), ex.Response);
            }

            //Player1 Re-JoinSession
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 0);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            createSessionState.SeatsAvailable++; //as a player left the session
            AssertJoinSessionState(createSessionState, joinSessionState);
        }

        /// <summary>
        /// Test to verify Owner Re-JoinSession when no other players not joined yet
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc JoinSession API to verify player Join in Session in which no other players exists, Owner also left session.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_JoinSession_PlayerJoinSession_NoPlayersInSession()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame1");

            //Player1 creates Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            //Player1 LeaveSession            
            this.GameSessionProxy.LeaveSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());

            SessionState leaveSessionState = null;
            //View Session after Leave
            try
            {
                leaveSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID.ToString(), createSessionState.GameID.ToString());
                Assert.Fail("Expecting Forbidden as player should not be in the session anymore.");
            }
            catch (RestException rx)
            {
                VerifyException(HttpStatusCode.Forbidden, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.UserNotAllowedToGetStateInSession), rx.Response);
            }


            //Player2 JoinSession
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);
            
            //update seats available to # of seats after owner left session
            createSessionState.SeatsAvailable = createSessionState.SeatsAvailable + 1;

            //assert join session state
            AssertJoinSessionState(createSessionState, joinSessionState);
        }

        /// <summary>
        /// Test for a Player JoinSession onto a Seat Left by another player
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc JoinSession API to verify a Player can JoinSession on a Seat Left by another player.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_JoinSession_PlayerJoinSession_OnSeatLeftByAnotherPlayer()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 3, "Should have at least 3 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Player1 creates Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState1 = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState1);

            //Player2 LeaveSession
            this.GameSessionProxy.LeaveSession(joinSessionState1.SessionID.ToString(), joinSessionState1.GameID.ToString());

            //View Session after Leave
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            SessionState leaveSessionState = this.GameSessionProxy.ViewSession(joinSessionState1.SessionID.ToString(), joinSessionState1.GameID.ToString());

            //Assert SessionState
            AssertLeaveSessionState(joinSessionState1, leaveSessionState);

            //Player3 JoinSession on Seat 1 (Seat Left by Player2)
            this.GameSessionProxy.UserID = TestAreaBase.users[2].MemberName;      // player3
            this.GameSessionProxy.Password = TestAreaBase.users[2].Password;
            JoinData joinData2 = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState2 = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData2);

            AssertJoinSessionState(createSessionState, joinSessionState2);
        }

        /// <summary>
        /// Test for a Player JoinSession onto a Seat Left by another player
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc JoinSession API to verify a Player can JoinSession on a ActiveSeat (Empty Seat set as ActiveSeat before Player join session .")]
        [TestProperty("Type", "FeatureTests")]
        public void P_JoinSession_PlayerJoinSession_OnEmptyActiveSeat()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 3, "Should have at least 3 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Player1 creates Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState1 = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState1);

            //PutGameState by player 1 to ser seat index 5 as Active Seat
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 5;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;
            this.GameStateProxy.PutGameState(joinSessionState1.SessionID, joinSessionState1.GameID.ToString(), modifiableGameState);

            //View Session after PutGameState
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            SessionState afterPutSessionState = this.GameSessionProxy.ViewSession(joinSessionState1.SessionID.ToString(), joinSessionState1.GameID.ToString());

            //Assert SessionState
            Assert.AreEqual<int>(modifiableGameState.ActiveSeatIndex, afterPutSessionState.State.ActiveSeatIndex, "PutGameState did not set GameState correctly");

            //Player3 JoinSession on Seat 5 (Empty Seat set as ActiveSeat by Player1)
            this.GameSessionProxy.UserID = TestAreaBase.users[2].MemberName;      // player3
            this.GameSessionProxy.Password = TestAreaBase.users[2].Password;
            JoinData joinData2 = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, modifiableGameState.ActiveSeatIndex);

            SessionState joinSessionState2 = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData2);

            //ViewSession by player 3 after player 3 join on to Empty ActiveSeat
            SessionState afterJoinSessionState = this.GameSessionProxy.ViewSession(joinSessionState1.SessionID.ToString(), joinSessionState1.GameID.ToString());

            Assert.AreEqual(joinData2.SeatIndex, afterJoinSessionState.ActorSeat, "Actor seat is not correct");
            Assert.AreEqual(joinData2.SeatIndex, afterJoinSessionState.State.ActiveSeatIndex, "Player did not join on Empty ActiveSeat");
        }

        /// <summary>
        /// Test for a Player JoinSession - Try JoinSession after RejectInvitation
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc JoinSession API to verify a Player try to join session after Reject Invitation.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_JoinSession_AfterRejectInvitation()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "Should have at least 2 users under <preExistingUsers> node in App.config for selected environment");
            //Delete preloaded notifications for the users we are going to use
            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            //send invite
            TestAreaBase.notificationCommon.SendInviteRequest(createSessionState.SessionID, createSessionState.GameID, false, TestAreaBase.users[1].MemberName, 0);

            //verify invitation notification
            VerifyNotification(createSessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.Invitation, true, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            //RejectInvitation
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;   // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            this.GameSessionProxy.RejectInvitation(createSessionState.GameID.ToString(), createSessionState.SessionID);

            string memberName = TestAreaBase.users[1].MemberName;      // player2
            string password = TestAreaBase.users[1].Password;

            List<Notification> postRejectNotifications = null;

            for (int i = 0; i < Constants.NOTIFICATION_RETRIES; i++)
            {
                Thread.Sleep(Constants.NOTIFICATION_SLEEP_TIME);

                postRejectNotifications = this.NotificationsServiceProxy.GetNotifications(
                                                                    createSessionState.GameID.ToString(),
                                                                    createSessionState.SessionID,
                                                                    (int)Notification.NotificationCategory.ToDo,
                                                                    String.Empty,
                                                                    1,
                                                                    Notification.NotificationType.Invitation.ToString(),
                                                                    true,
                                                                    memberName,
                                                                    password,
                                                                    null);

                if (postRejectNotifications != null && postRejectNotifications.Count == 0)
                {
                    break;
                }
            }

            Assert.IsNotNull(postRejectNotifications);
            Assert.IsTrue(postRejectNotifications.Count == 0, "ERROR: Unexpected Number of notifications.");

            //JoinSession after RejectInvitation
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2;
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            //ViewSession after JoinSession
            SessionState afterJoinSessionState = this.GameSessionProxy.ViewSession(joinSessionState.SessionID, joinSessionState.GameID.ToString());

            AssertJoinSessionState(createSessionState, afterJoinSessionState);
        }

        /// <summary>
        /// Test for a Player JoinSession to Session already ended
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc JoinSession API to verify a Player JoinSession to Session already ended.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_JoinSession_SessionEnded()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 3, "Should have at least 3 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Player1 creates Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState1 = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState1);

            //PutGameState - Make Move by Player1
            ModifiableGameState modifiableGameState1 = new ModifiableGameState();
            modifiableGameState1.ActiveSeatIndex = 1;
            modifiableGameState1.GameData = new byte[] { 51, 52, 53, 54, 55 };

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;
            this.GameStateProxy.PutGameState(joinSessionState1.SessionID, joinSessionState1.GameID.ToString(), modifiableGameState1);

            FullGameState modifiedGameState1 = this.GameStateProxy.GetGameState(joinSessionState1.SessionID.ToString(), joinSessionState1.GameID.ToString());

            //Assert Modified GameState
            AssertGameState(modifiableGameState1, modifiedGameState1);

            //PutGameState - Make Move by Player2
            ModifiableGameState modifiableGameState2 = new ModifiableGameState();
            modifiableGameState2.ActiveSeatIndex = 0;
            modifiableGameState2.GameData = new byte[] { 56, 57, 58, 59, 60 };

            this.GameStateProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameStateProxy.Password = TestAreaBase.users[1].Password;
            this.GameStateProxy.PutGameState(joinSessionState1.SessionID, joinSessionState1.GameID.ToString(), modifiableGameState2);

            FullGameState modifiedGameState2 = this.GameStateProxy.GetGameState(joinSessionState1.SessionID.ToString(), joinSessionState1.GameID.ToString());

            //Assert Modified GameState
            AssertGameState(modifiableGameState2, modifiedGameState2);

            //PostGameEnd by Player1 to End Game
            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState1.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 10,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState1.Variant
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState1.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 10,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState1.Variant
            };

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;
            this.GameStateProxy.PostGameEnd(joinSessionState1.SessionID, joinSessionState1.GameID.ToString(), gameResults);

            //get Session state & Verify
            SessionState sessionStateAfterGameEnd = this.GameSessionProxy.ViewSession(joinSessionState1.SessionID, joinSessionState1.GameID.ToString());

            Assert.IsTrue(sessionStateAfterGameEnd.State.IsComplete, "Error: The session does not have the isComplete flag set, SessionID: " + sessionStateAfterGameEnd.SessionID);

            //Player3 try to JoinSession to Session already ended
            //TODO: Currently it's allowing players to join after session ended - we should not allow this
            //Add verification in catch block after Bug 1828 gets Fixed
            try
            {
                this.GameSessionProxy.UserID = TestAreaBase.users[2].MemberName;      // player3
                this.GameSessionProxy.Password = TestAreaBase.users[2].Password;

                JoinData joinData2 = InitializeJoinData(joinSessionState1.GameID, joinSessionState1.SessionID, 2);

                SessionState joinSessionState2 = this.GameSessionProxy.JoinSession(joinSessionState1.SessionID, joinData2);

                Assert.Fail(String.Format("Player is able to JoinSession after Session has been Ended"));
            }
            catch (RestException restEx)
            {
                string message = restEx.Message;
            }
        }

        /// <summary>
        /// Test for a Player JoinSession - Try Join Multiple Times to same Session
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc JoinSession API to verify a Player try to join same Session Multiple times.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_JoinSession_PlayerJoinSessionMultipleTimes()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "Should have at least 2 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Player1 creates Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            JoinData joinData1 = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState1 = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData1);

            AssertJoinSessionState(createSessionState, joinSessionState1);

            //Player2 JoinSession 2nd time
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            JoinData joinData2 = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 2);

            SessionState joinSessionState2 = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData2);
            AssertJoinSessionState(createSessionState, joinSessionState2);
        }

        /// <summary>
        /// Test for a Player JoinSession - Try Join on to Occupied Seat
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc JoinSession API to verify a Player try to join session on occupied seat.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_JoinSession_PlayerJoinSessionOnOccupiedSeat()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 3, "Should have at least 3 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            //Player1 creates Session
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            JoinData joinData1 = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState1 = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData1);

            AssertJoinSessionState(createSessionState, joinSessionState1);

            try
            {
                //Player3 JoinSession on to the Player2's Seat
                this.GameSessionProxy.UserID = TestAreaBase.users[2].MemberName;      // player3
                this.GameSessionProxy.Password = TestAreaBase.users[2].Password;

                JoinData joinData2 = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

                SessionState joinSessionState2 = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData2);

                Assert.Fail("Player is able to Join Session on to Occupied Seat");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Forbidden, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SeatAlreadyTaken), restEx.Response);
            }
        }

        /// <summary>
        /// Test for a Player JoinSession - InvalidSessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc JoinSession API to verify a Player try to join session with invalid SessionID.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_JoinSession_NotExistSessionID()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            //Player JoinSession with Invalid SessionID
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            JoinData joinData1 = InitializeJoinData(Constants.TESTGAMEID, "j6b048d0-15gd-4i9d-8f65-91bz93s762f5", 1);

            try
            {
                SessionState joinSessionState1 = this.GameSessionProxy.JoinSession("j6b048d0-15gd-4i9d-8f65-91bz93s762f5", joinData1);
            }
            catch (RestException restEx)
            {
                //TODO: Currently it's throwing 500 HTTP code. Filed bug 4167. Update HTTP Status Code if 4167 is Fixed to change the HTTP Status Code
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }
        }

        /// <summary>
        /// Test for a Player JoinSession - String.Empty as SessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc JoinSession API to verify a Player try to join session with String.Empty as SessionID.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_JoinSession_EmptyStringSessionID()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            //Player JoinSession with Invalid SessionID
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            JoinData joinData1 = InitializeJoinData(Constants.TESTGAMEID, String.Empty, 1);

            try
            {
                SessionState joinSessionState1 = this.GameSessionProxy.JoinSession(String.Empty, joinData1);
                Assert.Fail("Error: Expected NOT FOUND error but it didn't");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, restEx.Response);
            }
        }

        /// <summary>
        /// Test for a Player JoinSession - null as SessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc JoinSession API to verify a Player try to join session with null as SessionID.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_JoinSession_NullAsSessionID()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            //Player JoinSession with Invalid SessionID
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            JoinData joinData1 = InitializeJoinData(Constants.TESTGAMEID, null, 1);

            try
            {
                SessionState joinSessionState1 = this.GameSessionProxy.JoinSession(null, joinData1);
                Assert.Fail("Error: Expected NOT FOUND error but it didn't");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, restEx.Response);
            }
        }

        /// <summary>
        /// Test for a Player JoinSession - LongString as SessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc JoinSession API to verify a Player try to join session with max Length string (> 64 characters) as SessionID. SessionID length max at 64")]
        [TestProperty("Type", "FeatureTests")]
        public void N_JoinSession_MaxLengthStringAsSessionID()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            //Player JoinSession with Invalid SessionID
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            JoinData joinData1 = InitializeJoinData(Constants.TESTGAMEID, "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz012", 1);

            try
            {
                SessionState joinSessionState1 = this.GameSessionProxy.JoinSession("j6b048d0-15gd-4i9d-8f65-91bz93s762f5-j6b048d0-15gd-4i9d-8f65-91bz93s762f5-j6b048d0-15gd-4i9d-8f65-91bz93s762f5-j6b048d0-15gd-4i9d-8f65-91bz93s762f5", joinData1);
            }
            catch (RestException restEx)
            {
                //TODO: Currently it's throwing 500 HTTP code. Filed bug 4167. Update HTTP Status Code if 4167 is Fixed to change the HTTP Status Code
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }
        }

        /// <summary>
        /// Test for a Player JoinSession - One Char String as SessionID
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc JoinSession API to verify a Player try to join session with one char string as SessionID.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_JoinSession_OneCharStringAsSessionID()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            //Player JoinSession with Invalid SessionID
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            JoinData joinData1 = InitializeJoinData(Constants.TESTGAMEID, "1", 1);

            try
            {
                SessionState joinSessionState1 = this.GameSessionProxy.JoinSession("1", joinData1);
            }
            catch (RestException restEx)
            {
                //TODO: Currently it's throwing 500 HTTP code. Filed bug 4167. Update HTTP Status Code if 4167 is Fixed to change the HTTP Status Code
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }
        }

        /// <summary>
        /// Verify JoinSession with JoinData.SeatIndex = int.Minvalue
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call POST on GameSessionService to submit JoinSession with JoinData.SeatIndex = 0")]
        [TestProperty("Type", "FeatureTests")]
        public void N_JoinSession_MinSeatIndex()
        {
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession with Invalid GameID
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, int.MinValue);

            try
            {
                SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);
                Assert.Fail("Player is able to join on Seat Index as int.MinValue");
            }
            catch (RestException restEx)
            {
                //TODO: Add Exception Verification when Bug 5919 is fixed
                string msg = restEx.Message;
            }
        }

        /// <summary>
        /// Verify JoinSession with JoinData.SeatIndex = int.MaxValue
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call POST on GameSessionService to submit JoinSession with JoinData.SeatIndex = 0")]
        [TestProperty("Type", "FeatureTests")]
        public void N_JoinSession_MaxSeatIndex()
        {
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession with Invalid GameID
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, int.MaxValue);

            try
            {
                SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);
                Assert.Fail("Player is able to JoinSession with JoinData.SeatIndex set to int.MaxValue");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Forbidden, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidSeatIndex), restEx.Response);
            }
        }

        /// <summary>
        /// Verify JoinSession with JoinData.SeatIndex = 0
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call POST on GameSessionService to submit JoinSession with JoinData.SeatIndex = 0")]
        [TestProperty("Type", "FeatureTests")]
        public void N_JoinSession_ZeroSeatIndex()
        {
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession with Invalid GameID
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 0);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);
            AssertJoinSessionState(createSessionState, joinSessionState);
        }

        /// <summary>
        /// Verify JoinSession with JoinData.SeatIndex = 0
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call POST on GameSessionService to submit JoinSession with JoinData.SeatIndex = 0")]
        [TestProperty("Type", "FeatureTests")]
        public void N_JoinSession_NegativeSeatIndex()
        {
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession with Invalid GameID
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, -1);

            try
            {
                SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);
                Assert.Fail("Player is able to join on Seat Index as -1");
            }
            catch (RestException restEx)
            {
                //TODO: Add Exception Verification when Bug 5919 is fixed
                string msg = restEx.Message;
            }
        }

        /// <summary>
        /// Verify JoinSession with OutOfRange SeatIndex
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call POST on GameSessionService to submit JoinSession with OutOfRange SeatIndex")]
        [TestProperty("Type", "FeatureTests")]
        public void N_JoinSession_OutOfRangeSeatIndex()
        {
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession with Invalid Seat Index
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 11);

            try
            {
                SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);
                Assert.Fail("Player is able to JoinSession on OutOfRange SeatIndex");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Forbidden, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidSeatIndex), restEx.Response);
            }
        }

        /// <summary>
        /// Verify JoinSession with No SeatIndex in JoinData
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call POST on GameSessionService to submit JoinSession with No SeatIndex")]
        [TestProperty("Type", "FeatureTests")]
        public void N_JoinSession_NoSeatIndex()
        {
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession with Invalid GameID
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            JoinData joinData = new JoinData();
            joinData.GameID = createSessionState.GameID;
            joinData.SessionID = createSessionState.SessionID;
            joinData.SeatParameters = new byte[] { 1, 2, 3 };

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);
            AssertJoinSessionState(createSessionState, joinSessionState);
        }

        /// <summary>
        /// Verify JoinSession with Null SeatParameters in JoinData
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Call POST on GameSessionService to submit JoinSession with Null SeatParameters")]
        [TestProperty("Type", "FeatureTests")]
        public void N_JoinSession_NullByteArraySeatParameters()
        {
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession with Invalid GameID
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            JoinData joinData = new JoinData();
            joinData.SeatIndex = 1;
            joinData.GameID = createSessionState.GameID;
            joinData.SessionID = createSessionState.SessionID;
            joinData.SeatParameters = null;

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);
            AssertJoinSessionState(createSessionState, joinSessionState);
        }

        /// <summary>
        /// Verify JoinSession with  GameID not matching TitleID in partner token
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Call POST on GameSessionService to submit JoinSession with  GameID not matching TitleId in partner token")]
        [TestProperty("Type", "FeatureTests")]
        public void N_JoinSession_GameIdNotMatchPartnerTokenTitleID()
        {
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession with GameID as unit.Min
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            Random rndm = new Random();
            uint RandomGameId = uint.MinValue;
            do
            {
                RandomGameId = (uint)rndm.Next();
            }
            while (uint.Parse(Config.Environment.StsSettings.TitleId) == RandomGameId);

            JoinData joinData = InitializeJoinData(RandomGameId, createSessionState.SessionID, 1);

            try
            {
                SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);
                Assert.Fail(string.Format("JoinSession should not be allowed for an invalid game ID ({0})", RandomGameId.ToString()));
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDDoesNotMatchPartnerTokenTitleID), restEx.Response);
            }
        }

        /// <summary>
        /// Test for a Player JoinSession - no GameID passed
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc JoinSession API to verify a Player try to join session with no GameID passed.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_JoinSession_NoGameIdPassedToJoinSession()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 1, "Should have at least 1 user under <preExistingUsers> node in App.config for selected environment");

            //Player JoinSession with Invalid SessionID
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            AssertCreateSessionState(creationData, createSessionState);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            JoinData joinData = new JoinData();
            joinData.SessionID = createSessionState.SessionID;
            joinData.SeatIndex = 1;
            joinData.SeatParameters = new byte[] { 4, 5, 6 };
            try
            {
                SessionState joinSessionState1 = this.GameSessionProxy.JoinSession(joinData.SessionID, joinData);
                Assert.Fail("Error: Player wasn't expected to join session when no GameId is passed");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDDoesNotMatchPartnerTokenTitleID), restEx.Response);
            }
        }

        /// <summary>
        /// Test for a Player JoinSession onto a Seat Left by Owner
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc JoinSession API to verify a Player  JoinSession on a Seat Left by Owner.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_JoinSession_ThirdPlayerJoinedOnSeatLeftByOwner()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 3, "Should have at least 3 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, new byte[] { 1, 2, 3 }, new InactivityWarningBehavior(), true, "TestGame");

            //Player1 creates Session
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData,
                                                                                  TestAreaBase.users[0].MemberName,
                                                                                  TestAreaBase.users[0].Password);
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState1 = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData,
                                                                               TestAreaBase.users[1].MemberName,
                                                                               TestAreaBase.users[1].Password);

            AssertJoinSessionState(createSessionState, joinSessionState1);

            //Owner LeaveSession
            this.GameSessionProxy.LeaveSession(joinSessionState1.SessionID.ToString(),
                                               joinSessionState1.GameID.ToString(),
                                               TestAreaBase.users[0].MemberName,
                                               TestAreaBase.users[0].Password);

            //Player3 JoinSession on Seat 0 left by owner
            this.GameSessionProxy.UserID = TestAreaBase.users[2].MemberName;      // player3
            this.GameSessionProxy.Password = TestAreaBase.users[2].Password;
            JoinData joinData2 = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 0);

            SessionState joinSessionState2 = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData2,
                                                                               TestAreaBase.users[2].MemberName,
                                                                               TestAreaBase.users[2].Password);
            foreach (var seat in joinSessionState2.Seats)
            {
                if (seat.Profile.PublicToken.Equals(Users.GetGamertag(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password)))
                {
                    Assert.AreEqual<int>(1, seat.Index, "Error: Seat Index for player2 is  expected to be 1 but got" + seat.Index.ToString());
                }
                else if (seat.Profile.PublicToken.Equals(Users.GetGamertag(TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password)))
                {
                    Assert.AreEqual<int>(0, seat.Index, "Error: Seat Index for player3 is  expected to be 0 but got" + seat.Index.ToString());
                }
                else
                {
                    Assert.Fail("Error: Unexpected player joined the session at seat index" + seat.Index.ToString());
                }
            }
        }

        /// <summary>
        ///Test for Sessions.svc JoinSession API to verify a Player Can Join session indefinetely:Unaffected by Azure Table Inconsistency
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature Test for Sessions.svc JoinSession API to verify a Player Can Join session indefinetely:Unaffected by Azure Table Inconsistency.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_JoinSession_JoinSessionAgain_AzureInconsistency()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 3, "Should have at least 3 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, new byte[] { 1, 2, 3 }, new InactivityWarningBehavior(), true, "TestGame");

            //Player1 creates Session
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData,
                                                                                  TestAreaBase.users[0].MemberName,
                                                                                  TestAreaBase.users[0].Password);

            AssertCreateSessionState(creationData, createSessionState);


            //Player2 JoinSession
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState1 = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData,
                                                                               TestAreaBase.users[1].MemberName,
                                                                               TestAreaBase.users[1].Password);

            AssertJoinSessionState(createSessionState, joinSessionState1);

            Assert.IsTrue(joinSessionState1.Seats.Length == 2, "Error: Expected Number of seats is expected to be 2 but got " +
                          joinSessionState1.Seats.Length.ToString());

            //Player2 JoinSession again and again ....
            SessionState[] joinSessionArray = new SessionState[5];
            int SessionCounter = 0;

            do
            {
                joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, SessionCounter + 2);

                joinSessionArray[SessionCounter] = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData,
                                                                                   TestAreaBase.users[1].MemberName,
                                                                                   TestAreaBase.users[1].Password);

                AssertJoinSessionState(createSessionState, joinSessionArray[SessionCounter]);


                Assert.IsTrue(joinSessionArray[SessionCounter].Seats.Length == 2, "Error: Expected  Number of seats is expected to be 2 but got " +
                              joinSessionArray[SessionCounter].Seats.Length.ToString());
                SessionCounter++;
            }
            while (SessionCounter < joinSessionArray.Length);
        }

        /// <summary>
        /// BVT test for Sessions.svc JoinSession API- verify player cant join full game on seat already taken
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("BVT for Sessions.svc JoinSession API- verify player cant join full game on seat already taken.")]
        [TestProperty("Type", "BVTs")]
        public void N_JoinSession_JoinSeatTakenOnFullGame()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 3, "Should have at least 3 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 2, 2, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = null;
            SessionState joinSessionState = null;

            //2nd player join session
            joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);
            joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData,
                                                                 TestAreaBase.users[1].MemberName,
                                                                 TestAreaBase.users[1].Password);

            try
            {
                //3rd player try to join on seat already taken
                joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);
                joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData,
                                                                         TestAreaBase.users[2].MemberName,
                                                                         TestAreaBase.users[2].Password);

                Assert.Fail("Error: Player shouldn't join full session on seat already taken");
            }
            catch (RestException rx)
            {
                VerifyException(HttpStatusCode.Forbidden, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SeatAlreadyTaken), rx.Response);
            }
        }
        /// <summary>
        /// Feature test for Sessions.svc JoinSession API-verify user can't join full game
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Feature test for Sessions.svc JoinSession API- verify user can't join full game.")]
        [TestProperty("Type", "FeatureTests")]
        public void N_JoinSession_JoinFullgame()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 4, "Should have at least 4 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 2, 2, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData,
                                                                                  TestAreaBase.users[0].MemberName,
                                                                                  TestAreaBase.users[0].Password);
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = null;
            SessionState joinSessionState = null;

            //another player join session
            joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);
            joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData,
                                                                 TestAreaBase.users[1].MemberName,
                                                                 TestAreaBase.users[1].Password);
            AssertJoinSessionState(createSessionState, joinSessionState);


            //first player leaving session
            this.GameSessionProxy.LeaveSession(createSessionState.SessionID, createSessionState.GameID.ToString(),
                                                TestAreaBase.users[0].MemberName,
                                                TestAreaBase.users[0].Password);

            //third player  join  game  on seat left by owner(first player)            
            joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 0);
            joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData,
                                                                 TestAreaBase.users[2].MemberName,
                                                                 TestAreaBase.users[2].Password);

            try
            {
                //fourth player join session on the same seat as third player
                joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 0);
                joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData,
                                                                     TestAreaBase.users[3].MemberName,
                                                                     TestAreaBase.users[3].Password);
                Assert.Fail("Error: Player shouldnt be able to join full session");
            }
            catch (RestException rx)
            {
                VerifyException(HttpStatusCode.Forbidden, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.NoMoreSeatsInSession), rx.Response);
            }
        }

        /// <summary>
        /// Feature Test for Sessions.svc JoinSession API- verify owner seat is not taken although Join is successful
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Feature test for Sessions.svc JoinSession API- verify owner seat is not taken although Join is successful.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_JoinSession_TryTakingOwnerSeat()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "Should have at least 2 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 2, 3, sessionParameters, iwb, true, "TestGame");

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData,
                                                                                  TestAreaBase.users[0].MemberName,
                                                                                  TestAreaBase.users[0].Password);
            AssertCreateSessionState(creationData, createSessionState);

            JoinData joinData = null;
            SessionState joinSessionState = null;

            //another player join session
            joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, createSessionState.OwnerSeatIndex);
            joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData,
                                                                 TestAreaBase.users[1].MemberName,
                                                                 TestAreaBase.users[1].Password);
            AssertJoinSessionState(createSessionState, joinSessionState);

            SessionState newSessionState = this.GameSessionProxy.ViewSession(createSessionState.SessionID, createSessionState.GameID.ToString(),
                                                                          TestAreaBase.users[1].MemberName,
                                                                          TestAreaBase.users[1].Password);
            Assert.AreNotEqual<int>(createSessionState.OwnerSeatIndex, newSessionState.Seats[1].Index, "Player shouldnt be allowed  to seat on owner seat ");
        }

        /// <summary>
        /// Feature Test for Sessions.svc JoinSession API -Verify that player invited to full session cant join session
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(2)]
        [Description("Verify that player invited to full session cant join session)")]
        [TestProperty("Type", "Feature")]
        public void N_JoinSession_InvitePlayerOnFullSession()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 3, "Should have at least 3 users under <preExistingUsers> node in App.config for selected environment");
            //Delete preloaded notifications for the users we are going to use
            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            TestAreaBase.notificationCommon.CheckNotificationCount(TestAreaBase.users[2].MemberName, TestAreaBase.users[2].Password);

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 2, 2, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;

            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);
            AssertCreateSessionState(creationData, createSessionState);

            //second player join session
            JoinData jd = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);
            SessionState njoinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, jd,
                                                                                TestAreaBase.users[2].MemberName,
                                                                                TestAreaBase.users[2].Password);

            //send invite
            TestAreaBase.notificationCommon.SendInviteRequest(createSessionState.SessionID, createSessionState.GameID, false, TestAreaBase.users[1].MemberName, 0);

            //verify invitation notification
            VerifyNotification(createSessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.Invitation, true, TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);

            try
            {
                //seat player on sender seat - owner seat 0
                JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 0);

                SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData,
                                                                                    TestAreaBase.users[1].MemberName,
                                                                                    TestAreaBase.users[1].Password);
            }
            catch (RestException rx)
            {
                VerifyException(HttpStatusCode.Forbidden, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.NoMoreSeatsInSession), rx.Response);
            }
        }

        //related bugs 10713 and 10981
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Verify player profile info")]
        [TestProperty("Type", "FeatureTests")]
        public void P_JoinSession_ProfileInfo()
        {
            List<XboxLiveAccount> newUsers = Users.CreateUsers(2);
            Thread.Sleep(Constants.NEW_USER_WAIT_TIME); // give time after account is created so that services will not fail to get puid

            this.GameSessionProxy.Locale = Constants.LOCALES[GlobalRandom.Next(Constants.LOCALES.Length)];

            // Initialize CreationData
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, new byte[] { 1, 2, 3 },
                                                               new InactivityWarningBehavior(), true, "TestGame");
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData, newUsers[0].MemberName, newUsers[0].Password);
            AssertCreateSessionState(creationData, createSessionState);
            
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData, newUsers[1].MemberName, newUsers[1].Password);
            AssertJoinSessionState(createSessionState, joinSessionState);

            VerifyProfileInfo(joinSessionState, 0, Users.GetGamertag(newUsers[0].MemberName, newUsers[0].Password));
            VerifyProfileInfo(joinSessionState, 1, Users.GetGamertag(newUsers[1].MemberName, newUsers[1].Password));
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Multiplayer.Test\Multiplayer.Test.API\Multiplayer.Test.API\States\GetGameState.cs ===
﻿using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using LiveN.Test.Framework.Configuration;
using Multiplayer.Test.API;
using AsyncMultiplayer.SessionCommon;
using System.Net;
using System.Diagnostics;
using System.Threading;
using System.Data.SqlClient;
using System.Configuration;
using AsyncMultiplayer.NotificationService;
using LIVEN.Common.Diagnostics;
using Gds.Contracts;
using LiveN.Test.Common.Web;

namespace MultiPlayer.Test.API
{
    /// <summary>
    /// Test Cases for GameState.svc GetGameState API
    /// </summary>
    [TestClass]
    public class GetGameState : TestAreaBase
    {

        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
        }

        [TestInitialize()]
        public void MyTestInitialize()
        {

            LockTest();
        }

        [TestCleanup]
        public void TestCleanup()
        {
            UnlockTest();
        }

        /// <summary>
        /// BVT test for GetGameState
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("BVT for Game State GetGameState API.")]
        [TestProperty("Type", "BVTs")]
        public void BVT_GetGameState()
        {
            Assert.IsTrue(TestAreaBase.users.Count >= 2, "Should have at least 2 users under <preExistingUsers> node in App.config for selected environment");

            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2;
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;
            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            //set the game state
            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            byte[] gameData = TestAreaBase.GenerateRandomBytes();
            modifiableGameState.GameData = gameData;

            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;
            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);

            FullGameState actualGameState = this.GameStateProxy.GetGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString());
            AssertGameState(modifiableGameState, actualGameState);

            //Verify YourTurn Notification for Active Player
            string memberName = TestAreaBase.users[1].MemberName;      // player2
            string password = TestAreaBase.users[1].Password;
            VerifyNotification(joinSessionState, Notification.NotificationCategory.ToDo, Notification.NotificationType.YourTurn, true, memberName, password);
        }

        /// <summary>
        /// Test GetGameState to get FullGameState while NOT YourTurn and verify that you got the most recent state
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Call GET on GameState service to get FullGameState while NOT YourTurn and verify that you got the most recent state")]
        [TestProperty("Type", "FeatureTests")]
        public void P_GetGameState_WhileNotYourTurn()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            //set the game state by Player1
            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;

            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);

            //set the game state by Player2
            this.GameStateProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameStateProxy.Password = TestAreaBase.users[1].Password;

            modifiableGameState.ActiveSeatIndex = 0;
            modifiableGameState.GameData = new byte[] { 66, 99, 55, 77, 88, 45 };
            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);

            //GetGameState by Player2 while NOT Player's Turn
            FullGameState gameState = this.GameStateProxy.GetGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString());

            //verify that the gamestate is the same as the state set after creating session
            AssertGameState(modifiableGameState, gameState);
        }

        /// <summary>
        /// Test GetGameState to get FullGameState after Game is Completed
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Call GET on GameState service to get FullGameState after Game is Completed")]
        [TestProperty("Type", "FeatureTests")]
        public void P_GetGameState_AfterGameCompleted()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            //set the game state by Player1
            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;

            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);

            //set the game state by Player2
            this.GameStateProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameStateProxy.Password = TestAreaBase.users[1].Password;

            modifiableGameState.ActiveSeatIndex = 0;
            modifiableGameState.GameData = new byte[] { 66, 99, 55, 77, 88, 45 };
            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);

            //Post GameEnd
            //set gameResults 
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 10,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 10,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = (uint)joinSessionState.Variant
            };

            this.GameStateProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameStateProxy.Password = TestAreaBase.users[1].Password;
            this.GameStateProxy.PostGameEnd(joinSessionState.SessionID, joinSessionState.GameID.ToString(), gameResults);

            //get Session state & Verify
            SessionState sessionStateAfterGameEnd = this.GameSessionProxy.ViewSession(joinSessionState.SessionID, joinSessionState.GameID.ToString());

            Assert.IsTrue(sessionStateAfterGameEnd.State.IsComplete, "Error: The session does not have the isComplete flag set, SessionID: " + sessionStateAfterGameEnd.SessionID);

            //GetGameState by Player2 after Game Completed
            FullGameState gameState = this.GameStateProxy.GetGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString());

            //verify that the gamestate is the same as the state set after creating session
            AssertGameState(modifiableGameState, gameState);
        }

        /// <summary>
        /// Test GetGameState to get FullGameState after CreateSession & before any players JoinSession / Make Moves
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Call GET on GameState service to get FullGameState after CreateSession & before any players JoinSession / Make Moves")]
        [TestProperty("Type", "FeatureTests")]
        public void N_GetGameState_AfterCreateSessionBeforeMakeMoves()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            //GetGameState by Player1 after CreateSession & before any other players JoinSession or Make Moves
            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;

            try
            {
                FullGameState gameState = this.GameStateProxy.GetGameState(createSessionState.SessionID, createSessionState.GameID.ToString());
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameDataNotFoundInAzureStore), restEx.Response);
            }
        }

        /// <summary>
        /// Test GetGameState to get FullGameState by Player who is NOT in Session
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Call GET on GameState service to get FullGameState by Player who is NOT in Session")]
        [TestProperty("Type", "FeatureTests")]
        public void N_GetGameState_PlayerNotInSession()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            //set the game state by Player1
            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;

            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);

            //GetGameState by Player3 who is NOT in Session
            this.GameStateProxy.UserID = TestAreaBase.users[2].MemberName;      // player3
            this.GameStateProxy.Password = TestAreaBase.users[2].Password;

            try
            {
                FullGameState gameState = this.GameStateProxy.GetGameState(createSessionState.SessionID, createSessionState.GameID.ToString());
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Forbidden, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.UserNotAllowedToGetStateInSession), restEx.Response);
            }
        }

        /// <summary>
        /// Test GetGameState to get FullGameState by Player who did LeaveSession
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Call GET on GameState service to get FullGameState by Player who did LeaveSession")]
        [TestProperty("Type", "FeatureTests")]
        public void N_GetGameState_PlayerLeaveSession()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            //set the game state by Player1
            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;

            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);

            //Player2 LeaveSession
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            this.GameSessionProxy.LeaveSession(joinSessionState.SessionID.ToString(), joinSessionState.GameID.ToString());

            //View Session after Leave
            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            SessionState leaveSessionState = this.GameSessionProxy.ViewSession(joinSessionState.SessionID.ToString(), joinSessionState.GameID.ToString());

            //Assert SessionState
            AssertLeaveSessionState(joinSessionState, leaveSessionState);

            //GetGameState by Player2 who did LeaveSession
            this.GameStateProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameStateProxy.Password = TestAreaBase.users[1].Password;

            try
            {
                FullGameState gameState = this.GameStateProxy.GetGameState(createSessionState.SessionID, createSessionState.GameID.ToString());
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Forbidden, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.UserNotAllowedToGetStateInSession), restEx.Response);
            }
        }

        /// <summary>
        /// Test GetGameState to get FullGameState with SessionId as Guid with no dashes
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Call GET on GameState service to get FullGameState by Player who did LeaveSession")]
        [TestProperty("Type", "FeatureTests")]
        public void N_GetGameState_NoDashesGuidSessionID()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            string sessionIDNoDashes = createSessionState.SessionID.Replace("-", "");

            //GetGameState by Player1 with SessionId as Guid with no dashes
            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;

            try
            {
                FullGameState gameState = this.GameStateProxy.GetGameState(sessionIDNoDashes, createSessionState.GameID.ToString());
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }
        }

        /// <summary>
        /// Try GetGameState by Player1 for Not Exist Session
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Try GetGameState by Player1 for Not Exist Session")]
        [TestProperty("Type", "FeatureTests")]
        public void N_GetGameState_NotExistSessionID()
        {
            //Try GetGameState by Player1 for Not Exist Session
            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;

            try
            {
                FullGameState gameState = this.GameStateProxy.GetGameState("j6b048d0-15gd-4i9d-8f65-91bz93s762f5", Constants.TESTGAMEID.ToString());
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }
        }

        /// <summary>
        /// Try GetGameState by Player1 for SessionId as String.Empty
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Try GetGameState by Player1 for SessionId as String.Empty")]
        [TestProperty("Type", "FeatureTests")]
        public void N_GetGameState_EmptyStringSessionID()
        {
            //Try GetGameState by Player1 for Not Exist Session
            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;

            try
            {
                FullGameState gameState = this.GameStateProxy.GetGameState(String.Empty, Constants.TESTGAMEID.ToString());
                Assert.Fail("Error: Expected to get NOTFOUND exception but it didnt");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, restEx.Response);
            }
        }

        /// <summary>
        /// Try GetGameState by Player1 for SessionId as null
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Try GetGameState by Player1 for SessionId as null")]
        [TestProperty("Type", "FeatureTests")]
        public void N_GetGameState_NullSessionID()
        {
            //Try GetGameState by Player1 for SessionId as null
            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;

            try
            {
                FullGameState gameState = this.GameStateProxy.GetGameState(null, Constants.TESTGAMEID.ToString());
                Assert.Fail("Error: Expected to get NOTFOUND exception but it didnt");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, restEx.Response);
            }
        }

        /// <summary>
        /// Try GetGameState by Player1 for SessionId as Long String
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Try GetGameState by Player1 for SessionId as Long String")]
        [TestProperty("Type", "FeatureTests")]
        public void N_GetGameState_LongStringSessionID()
        {
            //Try GetGameState by Player1 for  SessionId as Long String
            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;

            try
            {
                FullGameState gameState = this.GameStateProxy.GetGameState("j6b048d0-15gd-4i9d-8f65-91bz93s762f5-j6b048d0-15gd-4i9d-8f65-91bz93s762f5-j6b048d0-15gd-4i9d-8f65-91bz93s762f5-j6b048d0-15gd-4i9d-8f65-91bz93s762f5", Constants.TESTGAMEID.ToString());
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }
        }

        /// <summary>
        /// Try GetGameState by Player1 for SessionId as One Char String
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Try GetGameState by Player1 for SessionId as One Char String")]
        [TestProperty("Type", "FeatureTests")]
        public void N_GetGameState_OneCharStringSessionID()
        {
            //Try GetGameState by Player1 for  SessionId as One Char String
            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;

            try
            {
                FullGameState gameState = this.GameStateProxy.GetGameState("1", Constants.TESTGAMEID.ToString());
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.SessionNotFoundInAzureStore), restEx.Response);
            }
        }

        /// <summary>
        /// Try GetGameState to get FullGameState with GameId as uint.MinValue
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Try GameState service to get FullGameState with GameId as uint.MinValue")]
        [TestProperty("Type", "FeatureTests")]
        public void N_GetGameState_MinGameID()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            //set the game state by Player1
            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;

            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);

            //Try GetGameState by Player1 with GameId as uint.MinValue
            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;

            try
            {
                FullGameState gameState = this.GameStateProxy.GetGameState(joinSessionState.SessionID, uint.MinValue.ToString());
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDDoesNotMatchPartnerTokenTitleID), restEx.Response);
            }
        }

        /// <summary>
        /// Try GetGameState to get FullGameState with GameId as uint.MaxValue
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Try GameState service to get FullGameState with GameId as uint.MaxValue")]
        [TestProperty("Type", "FeatureTests")]
        public void N_GetGameState_MaxGameID()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            //set the game state by Player1
            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;

            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);

            //Try GetGameState by Player1 with GameId as uint.MaxValue
            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;

            try
            {
                FullGameState gameState = this.GameStateProxy.GetGameState(joinSessionState.SessionID, uint.MaxValue.ToString());
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDDoesNotMatchPartnerTokenTitleID), restEx.Response);
            }
        }

        /// <summary>
        /// Try GetGameState to get FullGameState with GameId = 0
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Try GameState service to get FullGameState with GameId = 0")]
        [TestProperty("Type", "FeatureTests")]
        public void N_GetGameState_ZeroGameID()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            //set the game state by Player1
            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;

            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);

            //Try GetGameState by Player1 with GameId = 0
            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;

            try
            {
                FullGameState gameState = this.GameStateProxy.GetGameState(joinSessionState.SessionID, "0");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDDoesNotMatchPartnerTokenTitleID), restEx.Response);
            }
        }

        /// <summary>
        /// Try GetGameState to get FullGameState with GameId which is Invalid/Not Exists
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Try GameState service to get FullGameState with GameId which is Invalid/Not Exists")]
        [TestProperty("Type", "FeatureTests")]
        public void N_GetGameState_NotExistGameID()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            //Player2 JoinSession
            this.GameSessionProxy.UserID = TestAreaBase.users[1].MemberName;      // player2
            this.GameSessionProxy.Password = TestAreaBase.users[1].Password;

            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData);

            AssertJoinSessionState(createSessionState, joinSessionState);

            //set the game state by Player1
            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;

            ModifiableGameState modifiableGameState = new ModifiableGameState();
            modifiableGameState.ActiveSeatIndex = 1;
            modifiableGameState.GameData = new byte[] { 55, 56, 57, 58, 59 };

            this.GameStateProxy.PutGameState(joinSessionState.SessionID, joinSessionState.GameID.ToString(), modifiableGameState);

            //Try GetGameState by Player1 with GameId which is Invalid/Not Exists
            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;

            try
            {
                FullGameState gameState = this.GameStateProxy.GetGameState(joinSessionState.SessionID, "1");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDDoesNotMatchPartnerTokenTitleID), restEx.Response);
            }
        }

        /// <summary>
        /// Try GetGameState to get FullGameState with GameId as String.Empty
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Try GameState service to get FullGameState with GameId as String.Empty")]
        [TestProperty("Type", "FeatureTests")]
        public void N_GetGameState_EmptyStringGameID()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            //Try GetGameState by Player1 with GameId which is Invalid/Not Exists
            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;

            try
            {
                FullGameState gameState = this.GameStateProxy.GetGameState(createSessionState.SessionID, String.Empty);
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, restEx.Response);
            }
        }

        /// <summary>
        /// Try GetGameState to get FullGameState with GameId as null
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Try GameState service to get FullGameState with GameId as null")]
        [TestProperty("Type", "FeatureTests")]
        public void N_GetGameState_NullGameID()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            //Try GetGameState by Player1 with GameId which is Invalid/Not Exists
            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;

            try
            {
                FullGameState gameState = this.GameStateProxy.GetGameState(createSessionState.SessionID, null);
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.NotFound, restEx.Response);
            }
        }

        /// <summary>
        /// Try GetGameState by Player1 for GameId as Long String
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Try GetGameState by Player1 for GameId as Long String")]
        [TestProperty("Type", "FeatureTests")]
        public void N_GetGameState_LongStringGameID()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            //Try GetGameState by Player1 for  GameId as Long String
            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;

            try
            {
                FullGameState gameState = this.GameStateProxy.GetGameState(createSessionState.SessionID, "1234567891234567890");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.InvalidGameIDFormatWhileGettingIdentity), restEx.Response);
            }
        }

        /// <summary>
        /// Try GetGameState by Player1 for GameId as One Char String
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(1)]
        [Description("Try GetGameState by Player1 for GameId as One Char String")]
        [TestProperty("Type", "FeatureTests")]
        public void N_GetGameState_OneCharStringGameID()
        {
            // Initialize CreationData
            InactivityWarningBehavior iwb = new InactivityWarningBehavior();
            iwb.Action = InactivityWarningAction.Kick;
            iwb.Interval = 5;
            iwb.MaxNumberOfNudges = 1;

            byte[] sessionParameters = new byte[] { 1, 2, 3 };
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, 0, 10, 10, sessionParameters, iwb, true, "TestGame");

            this.GameSessionProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameSessionProxy.Password = TestAreaBase.users[0].Password;
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            //Try GetGameState by Player1 for  GameId as One Char String
            this.GameStateProxy.UserID = TestAreaBase.users[0].MemberName;      // player1
            this.GameStateProxy.Password = TestAreaBase.users[0].Password;

            try
            {
                FullGameState gameState = this.GameStateProxy.GetGameState(createSessionState.SessionID, "1");
            }
            catch (RestException restEx)
            {
                VerifyException(HttpStatusCode.Unauthorized, SessionServiceEvents.Events.GetEventId(SessionServiceEvents.GameIDDoesNotMatchPartnerTokenTitleID), restEx.Response);
            }
        }
        /// <summary>
        /// Feature test for GetGameState- verify  that call GetGameState deletes notification only for that user and not others
        /// </summary>
        [TestMethod, Owner("a-saasfe"), Priority(0)]
        [Description("Feature test for GetGameState- verify  that call GetGameState deletes notification only for that user and not others.")]
        [TestProperty("Type", "FeatureTests")]
        public void P_GetGameState_DeleteOnlyReadNotifications()
        {
            //set variant name that would be posted on notifications
            uint NotificationVariant = 2;
            // Initialize CreationData
            CreationData creationData = InitializeCreationData(Constants.TESTGAMEID, (int)NotificationVariant, 10, 10, new byte[] { 1, 2, 3 }, new InactivityWarningBehavior(), true, "TestGame");

            // player1 create session
            SessionState createSessionState = this.GameSessionProxy.CreateSession(creationData.GameID.ToString(), creationData,
                                                                                    TestAreaBase.users[0].MemberName,
                                                                                    TestAreaBase.users[0].Password);

            //verify session creation
            AssertCreateSessionState(creationData, createSessionState);

            //player 2 join session
            JoinData joinData = InitializeJoinData(createSessionState.GameID, createSessionState.SessionID, 1);

            SessionState joinSessionState = this.GameSessionProxy.JoinSession(createSessionState.SessionID, joinData,
                                                                               TestAreaBase.users[1].MemberName,
                                                                               TestAreaBase.users[1].Password);
            //Delete existing notifications
            TestAreaBase.notificationCommon.CheckNotificationCount(joinSessionState.GameID.ToString(), joinSessionState.SessionID,
                                           TestAreaBase.users[0].MemberName,
                                           TestAreaBase.users[0].Password);
            //Delete existing notifications
            TestAreaBase.notificationCommon.CheckNotificationCount(joinSessionState.GameID.ToString(), joinSessionState.SessionID,
                                           TestAreaBase.users[1].MemberName,
                                           TestAreaBase.users[1].Password);

            //set gameResults             
            GameResults gameResults = new GameResults();
            gameResults.WinningSeatIndexes = new int[] { 0 };
            gameResults.LosingSeatIndexes = new int[] { 1 };
            gameResults.Results = new Dictionary<int, GameResult>();

            // Populate GameResult for all players.
            gameResults.Results[0] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Win.ToString(),
                Score = 10,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = NotificationVariant
            };
            gameResults.Results[1] = new GameResult()
            {
                GameId = uint.Parse(joinSessionState.GameID.ToString()),
                GameResultId = Guid.NewGuid(),
                Outcome = GameResultOutcome.Loss.ToString(),
                Score = 5,
                Time = 5,
                TimeStamp = DateTime.UtcNow,
                Variant = NotificationVariant
            };

            //post game end by player 1
            this.GameStateProxy.PostGameEnd(joinSessionState.SessionID, joinSessionState.GameID.ToString(), gameResults,
                                            TestAreaBase.users[0].MemberName,
                                            TestAreaBase.users[0].Password);


            //get YouWin Notification and verify that it is not viewed yet          
            Notification youWinNotification = GetNotification(joinSessionState.GameID.ToString(), joinSessionState.SessionID, Notification.NotificationType.YouWin.ToString(), TestAreaBase.users[0].MemberName, TestAreaBase.users[0].Password);
            Assert.AreEqual<Notification.NotificationStatus>(Notification.NotificationStatus.UnRead,
                                                             youWinNotification.Status,
                                                             "Error: Unexpectedly ,YouWin notification is already viewed");
            //get YouLose Notification and verify that it is not viewed yet          
            Notification youLoseNotification = GetNotification(joinSessionState.GameID.ToString(), joinSessionState.SessionID, Notification.NotificationType.YouLose.ToString(), TestAreaBase.users[1].MemberName, TestAreaBase.users[1].Password);
            Assert.AreEqual<Notification.NotificationStatus>(Notification.NotificationStatus.UnRead,
                